id _LastAddressedURIForChat(void *a1, void *a2, void *a3)
{
  return _LastAddressedURIForChatLogMetricIfNeeded(a1, 0, a2, a3, 0);
}

id _LastAddressedURIForChatWithCallerIDHint(void *a1, void *a2, void *a3, void *a4)
{
  return _LastAddressedURIForChatLogMetricIfNeeded(a1, a2, a3, a4, 0);
}

void sub_4FCC(void *a1, uint64_t a2)
{
  id v21 = a1;
  v3 = +[IMDChatRegistry sharedInstance];
  v4 = [v3 allExistingSupportedServiceChatsWithIdentifier:v21 style:a2];

  if (IMOSLoggingEnabled())
  {
    v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      id v37 = v21;
      __int16 v38 = 1024;
      LODWORD(v39) = a2;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "Checking if chats with chatIdentifier %@ and style %hhu need to be updated.", buf, 0x12u);
    }
  }
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id obj = v4;
  id v24 = [obj countByEnumeratingWithState:&v32 objects:v41 count:16];
  if (v24)
  {
    uint64_t v23 = *(void *)v33;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v33 != v23)
        {
          uint64_t v7 = v6;
          objc_enumerationMutation(obj);
          uint64_t v6 = v7;
        }
        uint64_t v27 = v6;
        v8 = *(void **)(*((void *)&v32 + 1) + 8 * v6);
        if (IMSharedHelperDeviceHasMultipleSubscriptions())
        {
          v26 = [v8 lastAddressedLocalHandle];
          v9 = +[IMCTSubscriptionUtilities sharedInstance];
          v10 = [v9 ctSubscriptionInfo];
          v25 = objc_msgSend(v10, "__im_subscriptionContextForPhoneNumber:", v26);

          v11 = [v25 labelID];
          v12 = +[IMCTSubscriptionUtilities sharedInstance];
          v13 = [v12 registeredSIMIDs];

          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          id v14 = v13;
          id v15 = [v14 countByEnumeratingWithState:&v28 objects:v40 count:16];
          if (v15)
          {
            uint64_t v16 = *(void *)v29;
            do
            {
              for (i = 0; i != v15; i = (char *)i + 1)
              {
                if (*(void *)v29 != v16) {
                  objc_enumerationMutation(v14);
                }
                v18 = *(void **)(*((void *)&v28 + 1) + 8 * i);
                if ([v18 isEqualToString:v11])
                {
                  if (IMOSLoggingEnabled())
                  {
                    v19 = OSLogHandleForIMFoundationCategory();
                    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
                    {
                      v20 = [v8 guid];
                      *(_DWORD *)buf = 138412546;
                      id v37 = v20;
                      __int16 v38 = 2112;
                      v39 = v18;
                      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_INFO, "  ** Updating sim ID for chat with guid %@ to be: %@", buf, 0x16u);
                    }
                  }
                  [v8 updateLastAddressedSIMID:v11];
                }
              }
              id v15 = [v14 countByEnumeratingWithState:&v28 objects:v40 count:16];
            }
            while (v15);
          }
        }
        [v8 updateShouldForceToSMS:0];
        uint64_t v6 = v27 + 1;
      }
      while ((id)(v27 + 1) != v24);
      id v24 = [obj countByEnumeratingWithState:&v32 objects:v41 count:16];
    }
    while (v24);
  }
}

uint64_t _UpdateLastAddressedHandle(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (([v5 isTypingMessage] & 1) != 0
    || ([v6 isEqualToIgnoringCase:kFZServiceDefaultsSentinelAlias] & 1) != 0
    || ![v6 length])
  {
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  v8 = [v6 _stripFZIDPrefix];
  if (v7)
  {
    v9 = [v7 lastAddressedLocalHandle];
    if ([v9 isEqualToString:v8])
    {
    }
    else
    {
      id v13 = [v8 length];

      if (v13)
      {
        if (IMOSLoggingEnabled())
        {
          id v14 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            int v15 = 138412290;
            uint64_t v16 = v8;
            _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "  ** Updating caller URI for chat to be: %@", (uint8_t *)&v15, 0xCu);
          }
        }
        [v7 updateLastAddressedHandle:v8];
        uint64_t v10 = 1;
        goto LABEL_18;
      }
    }
  }
  uint64_t v10 = 0;
LABEL_18:

LABEL_8:
  if (v7)
  {
    v11 = [v7 chatIdentifier];
    sub_4FCC(v11, (uint64_t)[v7 style]);
  }
  return v10;
}

void _ReplaceExtensionPayloadDataWithAttachmentForIncomingMessage(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (([v3 isTypingMessage] & 1) == 0)
  {
    id v5 = [v3 payloadData];
    id v6 = [v5 length];

    if (v6)
    {
      if (IMOSLoggingEnabled())
      {
        id v7 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          uint64_t v31 = (uint64_t)v3;
          __int16 v32 = 2112;
          id v33 = v4;
          _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Request to _ReplaceExtensionPayloadDataWithAttachmentForIncomingMessage: %@ chatIdentifier: %@", buf, 0x16u);
        }
      }
      uint64_t v27 = IMExtensionPayloadUnarchivingClasses();
      id v8 = objc_alloc((Class)NSKeyedUnarchiver);
      v9 = [v3 payloadData];
      id v28 = 0;
      id v10 = [v8 initForReadingFromData:v9 error:&v28];
      id v11 = v28;

      [v10 _enableStrictSecureDecodingMode];
      v12 = [v10 decodeObjectOfClasses:v27 forKey:NSKeyedArchiveRootObjectKey];
      if (v11 && IMOSLoggingEnabled())
      {
        id v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v31 = (uint64_t)v11;
          _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Failed to unarchive payload. Error: %@", buf, 0xCu);
        }
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v14 = IMExtensionPayloadDataKey;
        int v15 = [v12 objectForKey:IMExtensionPayloadDataKey];
        if ([v15 length])
        {
          uint64_t v16 = +[IMDFileTransferCenter sharedInstance];
          long long v29 = v15;
          v17 = +[NSArray arrayWithObjects:&v29 count:1];
          v18 = [v3 guid];
          uint64_t v25 = [v16 guidsForStoredAttachmentPayloadData:v17 messageGUID:v18];

          if (IMOSLoggingEnabled())
          {
            v19 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v31 = v25;
              _os_log_impl(&dword_0, v19, OS_LOG_TYPE_INFO, "Wrote extension payload data to attachments folder with GUIDs: %@", buf, 0xCu);
            }
          }
          v20 = +[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v25, v25);
          id v21 = [v3 fileTransferGUIDs];
          [v20 addObjectsFromArray:v21];

          id v22 = [v20 copy];
          [v3 setFileTransferGUIDs:v22];

          id v23 = [v12 mutableCopy];
          [v23 removeObjectForKey:v14];
          id v24 = +[NSKeyedArchiver archivedDataWithRootObject:v23 requiringSecureCoding:0 error:0];
          [v3 setPayloadData:v24];
        }
      }
    }
  }
}

void sub_5E38(id a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();

  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)sub_5E84, @"com.apple.apsd.mmdump", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void sub_5E84()
{
  v0 = +[IMDCKUtilities sharedInstance];
  unsigned int v1 = [v0 cloudKitSyncingEnabled];

  if (v1)
  {
    v2 = +[IMDCKExitManager sharedInstance];
    [v2 submitCloudKitMetricWithOperationGroupName:IMRecievedMissingMessageNotification];

    id v3 = +[IMDCKUtilities sharedInstance];
    [v3 logDumpAndSendMessageTo:@"mailto:missing_msgs_bot@icloud.com" forHours:1 reason:@"Missing_Messages" requirePreviousPrompt:1 willSendBlock:&stru_DE0D0];
  }
}

void sub_63C4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "Callback to update global read receipt value", buf, 2u);
    }
  }
  id v4 = [*(id *)(a1 + 32) globalReadReceiptSettingVersion];
  id v5 = [*(id *)(a1 + 32) readReceiptsGloballyEnabled];
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109378;
      int v20 = (int)v5;
      __int16 v21 = 2112;
      id v22 = v4;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Callback to update global read receipt value to: %d with version id: %@", buf, 0x12u);
    }
  }
  id v7 = [WeakRetained _firstiMessageChat];
  id v8 = +[NSNumber numberWithInteger:60001];
  if (v7)
  {
    v17[0] = @"GlobalReadReceiptChangedValue";
    v9 = +[NSNumber numberWithBool:v5];
    v17[1] = @"GlobalReadReceiptVersionIDKey";
    v18[0] = v9;
    v18[1] = v4;
    id v10 = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:2];
    id v11 = [WeakRetained account];
    v12 = [v11 loginID];
    id v13 = [v7 guid];
    uint64_t v14 = [v7 chatIdentifier];
    objc_msgSend(WeakRetained, "sendCommand:withProperties:toPerson:toChatID:identifier:style:", v8, v10, v12, v13, v14, objc_msgSend(v7, "style"));
  }
  else
  {
    v9 = +[NSNumber numberWithBool:v5, @"GlobalReadReceiptChangedValue"];
    v15[1] = @"GlobalReadReceiptVersionIDKey";
    v16[0] = v9;
    v16[1] = v4;
    id v10 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:2];
    id v11 = [WeakRetained account];
    v12 = [v11 loginID];
    [WeakRetained sendCommand:v8 withProperties:v10 toPerson:v12];
  }
}

void sub_6960(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, "Callback to update Keep messages value", (uint8_t *)&v7, 2u);
    }
  }
  id v3 = [WeakRetained _firstiMessageChat];
  id v4 = [WeakRetained _messageDictionaryForDeleteCommandShouldResetPreference:0];
  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "Callback to update keep messages with message dictionary %@", (uint8_t *)&v7, 0xCu);
    }
  }
  id v6 = [v3 guid];
  [WeakRetained sendDeleteCommand:v4 forChatGUID:v6];
}

void sub_6AF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = [WeakRetained _firstiMessageChat];
  id v3 = [WeakRetained _messageDictionaryForDeleteCommandShouldResetPreference:1];
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412290;
      int v7 = v3;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "Callback to reset keep messages with message dictionary %@", (uint8_t *)&v6, 0xCu);
    }
  }
  id v5 = [v2 guid];
  [WeakRetained sendDeleteCommand:v3 forChatGUID:v5];
}

void sub_918C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 objectForKeyedSubscript:*(void *)(a1 + 32)];
  if ([v4 count] == (char *)&dword_0 + 1)
  {
    [*(id *)(a1 + 40) didReceiveError:27 forMessageID:*(void *)(a1 + 48) forceError:*(unsigned __int8 *)(a1 + 64) account:*(void *)(a1 + 56)];
  }
  else if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      id v7 = [v4 count];
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412802;
      uint64_t v10 = v6;
      __int16 v11 = 2048;
      id v12 = v7;
      __int16 v13 = 2112;
      uint64_t v14 = v8;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "Not showing failure badge for %@ because %ld endpoints returned for %@", (uint8_t *)&v9, 0x20u);
    }
  }
}

void sub_A614(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) _logLocalInfo];
  if ([*(id *)(a1 + 40) intValue])
  {
    if (IMOSLoggingEnabled())
    {
      id v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 40);
        id v5 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        v39 = v5;
        __int16 v40 = 2112;
        uint64_t v41 = v6;
        _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "Failed delivery receipt for message: %@   status is: %@", buf, 0x16u);
      }
    }
LABEL_6:
    v3[2](v3);
    goto LABEL_29;
  }
  if (IMGetCachedDomainBoolForKey())
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        v39 = v8;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Ignoring delivery receipt for message: %@", buf, 0xCu);
      }
    }
    goto LABEL_6;
  }
  int v9 = *(void **)(a1 + 32);
  uint64_t v10 = [*(id *)(a1 + 56) account];
  __int16 v11 = [v9 imdAccountForIDSAccount:v10];

  unsigned __int8 v12 = [*(id *)(a1 + 64) unsignedIntValue];
  unsigned __int8 v13 = [*(id *)(a1 + 64) unsignedIntValue];
  if ((v13 & 2) != 0)
  {
    [*(id *)(a1 + 32) noteLastItemFromStorage:*(void *)(a1 + 48)];
  }
  else if (v12)
  {
    [*(id *)(a1 + 32) noteItemFromStorage:*(void *)(a1 + 48)];
  }
  uint64_t v14 = *(void **)(a1 + 72);
  if (v14)
  {
    int v15 = [v14 _numberForKey:@"c"];
    if (IMOSLoggingEnabled())
    {
      uint64_t v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v39 = v15;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "Received delivery status for command: %@", buf, 0xCu);
      }
    }
    if ([v15 unsignedIntValue] == 106)
    {
      v17 = *(void **)(a1 + 32);
      uint64_t v18 = *(void *)(a1 + 48);
      v19 = +[NSDate __im_iMessageDateFromTimeStamp:*(void *)(a1 + 80)];
      [v17 didReceiveMessageDeliveryReceiptForMessageID:v18 date:v19 account:v11];

      int v20 = [*(id *)(a1 + 72) _stringForKey:@"tP"];
      __int16 v21 = [*(id *)(a1 + 72) _stringForKey:@"sP"];
      id v22 = [*(id *)(a1 + 72) _dataForKey:@"t"];
      id v23 = [*(id *)(a1 + 72) _dictionaryForKey:@"p"];
      id v24 = [*(id *)(a1 + 72) _numberForKey:@"aT"];
      [*(id *)(a1 + 32) handler:*(void *)(a1 + 56) messageIDSaved:*(void *)(a1 + 48) ofType:v24 toIdentifier:v20 fromIdentifier:v21 groupContext:v23 fromToken:v22 timeStamp:*(void *)(a1 + 80) fromIDSID:*(void *)(a1 + 96) needsDeliveryReceipt:*(void *)(a1 + 104) deliveryContext:*(void *)(a1 + 112) storageContext:*(void *)(a1 + 64)];
    }
  }
  else
  {
    uint64_t v25 = +[IMDMessageStore sharedInstance];
    int v15 = [v25 messageWithGUID:*(void *)(a1 + 48)];

    if ([v15 errorCode] != 43)
    {
      id v26 = *(void **)(a1 + 32);
      uint64_t v27 = *(void *)(a1 + 48);
      id v28 = +[NSDate __im_iMessageDateFromTimeStamp:*(void *)(a1 + 80)];
      unsigned int v29 = [v26 didReceiveMessageDeliveryReceiptForMessageID:v27 date:v28 account:v11];

      if (IMOSLoggingEnabled())
      {
        long long v30 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          uint64_t v31 = *(void **)(a1 + 48);
          uint64_t v32 = *(void *)(a1 + 72);
          CFStringRef v33 = @"NO";
          if (v29) {
            CFStringRef v33 = @"YES";
          }
          *(_DWORD *)buf = 138412802;
          v39 = v31;
          __int16 v40 = 2112;
          uint64_t v41 = v32;
          __int16 v42 = 2112;
          CFStringRef v43 = v33;
          _os_log_impl(&dword_0, v30, OS_LOG_TYPE_INFO, "Received Fresh Delivery Receipt For Message ID: %@ with Context : %@  Peer Reflecting It? %@", buf, 0x20u);
        }
      }
      if (v29)
      {
        id v34 = *(id *)(a1 + 88);
        long long v35 = [*(id *)(a1 + 32) idsAccountForFromURI:v34 toURI:*(void *)(a1 + 88)];
        if ([v35 _validateIDSAccount])
        {
          v36 = v35;
        }
        else
        {
          v36 = [*(id *)(a1 + 56) account];

          uint64_t v37 = [*(id *)(a1 + 32) callerURIForIDSAccount:v36];

          id v34 = (id)v37;
        }
        [*(id *)(a1 + 32) forwardDeliveryReceiptForMessageID:*(void *)(a1 + 48) withAccount:v36 callerURI:v34];
      }
    }
  }

  if ((v13 & 2) != 0) {
    [*(id *)(a1 + 32) noteLastItemProcessed];
  }
  if (v3) {
    v3[2](v3);
  }

LABEL_29:
}

void sub_B2AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      CFStringRef v6 = *(const __CFString **)(a1 + 40);
      int v24 = 138412546;
      uint64_t v25 = v5;
      __int16 v26 = 2112;
      CFStringRef v27 = v6;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "Received Reflected Delivery Receipt For Message ID: %@ with Context : %@", (uint8_t *)&v24, 0x16u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      if (*(void *)(a1 + 56)) {
        CFStringRef v8 = @"YES";
      }
      else {
        CFStringRef v8 = @"NO";
      }
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      int v24 = 138412802;
      uint64_t v25 = v9;
      __int16 v26 = 2112;
      CFStringRef v27 = v8;
      __int16 v28 = 2112;
      uint64_t v29 = v10;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "fromIDSID:%@, needsDeliveryReceipt %@, deliveryContext %@", (uint8_t *)&v24, 0x20u);
    }
  }
  __int16 v11 = *(void **)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 32);
  unsigned __int8 v13 = +[NSDate __im_iMessageDateFromTimeStamp:*(void *)(a1 + 72)];
  uint64_t v14 = *(void **)(a1 + 64);
  int v15 = [*(id *)(a1 + 80) account];
  uint64_t v16 = [v14 imdAccountForIDSAccount:v15];
  [v11 didReceiveMessageDeliveryReceiptForMessageID:v12 date:v13 account:v16];

  v17 = *(void **)(a1 + 64);
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v20 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 88);
  id v23 = [*(id *)(a1 + 80) account];
  [v17 sendDeliveryReceiptForMessageID:v18 toID:v19 deliveryContext:v20 needsDeliveryReceipt:v21 callerID:v22 account:v23];

  v3[2](v3);
}

uint64_t sub_BACC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_BADC(uint64_t a1)
{
}

void sub_BAE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 120) || *(unsigned char *)(a1 + 121)) {
    [*(id *)(a1 + 32) decrementPendingReadReceiptFromStorageCount];
  }
  unsigned int v4 = [*(id *)(a1 + 40) isEqualToString:*(void *)(a1 + 48)];
  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      CFStringRef v6 = *(void **)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 56);
      uint64_t v8 = *(void *)(a1 + 64);
      CFStringRef v9 = @"NO";
      if (v4) {
        CFStringRef v9 = @"YES";
      }
      int v32 = 138413058;
      uint64_t v33 = v7;
      __int16 v34 = 2112;
      long long v35 = v6;
      __int16 v36 = 2112;
      uint64_t v37 = v8;
      __int16 v38 = 2112;
      CFStringRef v39 = v9;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "Received read receipt for: %@   from: %@   token: %@  from me: %@", (uint8_t *)&v32, 0x2Au);
    }
  }
  [*(id *)(a1 + 32) _logLocalInfo];
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = +[NSDate __im_iMessageDateFromTimeStamp:*(void *)(a1 + 72)];
  if (v4)
  {
    [v10 didReceiveMessageReadForMessageID:v11 date:v12 completionBlock:0];
  }
  else
  {
    [v10 didReceiveMessageReadReceiptForMessageID:v11 date:v12 completionBlock:0];

    unsigned __int8 v13 = +[IMDChatRegistry sharedInstance];
    uint64_t v14 = [*(id *)(a1 + 40) _stripFZIDPrefix];
    int v15 = [*(id *)(a1 + 32) account];
    uint64_t v12 = [v13 existingChatForID:v14 account:v15];

    if (v12 && *(void *)(a1 + 80))
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v16 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          uint64_t v17 = *(void *)(a1 + 80);
          int v32 = 138412546;
          uint64_t v33 = v17;
          __int16 v34 = 2112;
          long long v35 = v12;
          _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "About to update last active device on getting a read receipt to %@ for chat %@", (uint8_t *)&v32, 0x16u);
        }
      }
      uint64_t v18 = [*(id *)(a1 + 32) deliveryController];
      uint64_t v19 = *(void *)(a1 + 80);
      uint64_t v20 = [*(id *)(a1 + 40) _stripFZIDPrefix];
      [v18 updateLatestActiveDestination:v19 ForHandle:v20 incomingType:1];

      uint64_t v21 = [*(id *)(a1 + 32) deliveryController];
      uint64_t v22 = IMSingleObjectArray();
      [v21 noteRecentMessageForPeople:v22];
    }
  }

  id v23 = *(void **)(a1 + 32);
  uint64_t v24 = *(void *)(a1 + 80);
  uint64_t v25 = *(void *)(a1 + 88);
  uint64_t v26 = *(void *)(a1 + 48);
  uint64_t v27 = *(void *)(a1 + 56);
  uint64_t v28 = *(void *)(a1 + 96);
  uint64_t v29 = [*(id *)(a1 + 104) account];
  [v23 sendDeliveryReceiptForMessageID:v27 toID:v24 deliveryContext:v25 needsDeliveryReceipt:v28 callerID:v26 account:v29];

  if (*(unsigned char *)(a1 + 121)) {
    [*(id *)(a1 + 32) noteLastItemProcessed];
  }
  uint64_t v30 = *(void *)(*(void *)(a1 + 112) + 8);
  uint64_t v31 = *(void **)(v30 + 40);
  *(void *)(v30 + 40) = 0;

  if (v3) {
    v3[2](v3);
  }
}

void sub_C374(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [*(id *)(a1 + 32) isEqualToString:*(void *)(a1 + 40)];
  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 56);
      CFStringRef v9 = @"NO";
      if (v4) {
        CFStringRef v9 = @"YES";
      }
      int v22 = 138413058;
      uint64_t v23 = v7;
      __int16 v24 = 2112;
      uint64_t v25 = v6;
      __int16 v26 = 2112;
      uint64_t v27 = v8;
      __int16 v28 = 2112;
      CFStringRef v29 = v9;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "Received played receipt for: %@   from: %@   token: %@  from me: %@", (uint8_t *)&v22, 0x2Au);
    }
  }
  [*(id *)(a1 + 64) _logLocalInfo];
  uint64_t v10 = *(void **)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = +[NSDate __im_iMessageDateFromTimeStamp:*(void *)(a1 + 72)];
  if (v4) {
    [v10 didReceiveMessagePlayedForMessageID:v11 date:v12 completionBlock:v3];
  }
  else {
    [v10 didReceiveMessagePlayedReceiptForMessageID:v11 date:v12 completionBlock:v3];
  }

  unsigned __int8 v13 = *(void **)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v15 = *(void *)(a1 + 88);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 96);
  uint64_t v19 = [*(id *)(a1 + 104) account];
  [v13 sendDeliveryReceiptForMessageID:v17 toID:v14 deliveryContext:v15 needsDeliveryReceipt:v18 callerID:v16 account:v19];

  if (*(unsigned char *)(a1 + 120)) {
    [*(id *)(a1 + 64) noteLastItemProcessed];
  }
  uint64_t v20 = *(void *)(*(void *)(a1 + 112) + 8);
  uint64_t v21 = *(void **)(v20 + 40);
  *(void *)(v20 + 40) = 0;
}

void sub_CA68(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0xC6B0);
  }
  _Unwind_Resume(exception_object);
}

void sub_CAF4(uint64_t a1, void *a2)
{
  id v28 = a2;
  unsigned int v27 = [*(id *)(a1 + 32) isEqualToString:*(void *)(a1 + 40)];
  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 48);
      uint64_t v6 = *(void *)(a1 + 56);
      CFStringRef v7 = @"NO";
      if (v27) {
        CFStringRef v7 = @"YES";
      }
      *(_DWORD *)buf = 138413058;
      uint64_t v31 = v5;
      __int16 v32 = 2112;
      uint64_t v33 = v4;
      __int16 v34 = 2112;
      uint64_t v35 = v6;
      __int16 v36 = 2112;
      CFStringRef v37 = v7;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "Received saved receipt for: %@   from: %@   token: %@  from me: %@", buf, 0x2Au);
    }
  }
  [*(id *)(a1 + 64) _logLocalInfo];
  if ([*(id *)(a1 + 72) count])
  {
    uint64_t v8 = [*(id *)(a1 + 64) groupController];
    CFStringRef v29 = [v8 chatForGroupMessagePayload:*(void *)(a1 + 72) fromIdentifier:*(void *)(a1 + 32) toIdentifier:*(void *)(a1 + 40)];
  }
  else
  {
    CFStringRef v29 = 0;
  }
  uint64_t v25 = *(void *)(a1 + 48);
  __int16 v26 = *(void **)(a1 + 64);
  id v9 = [*(id *)(a1 + 80) integerValue];
  uint64_t v10 = [v29 chatIdentifier];
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = +[NSDate __im_iMessageDateFromTimeStamp:*(void *)(a1 + 88)];
  unsigned __int8 v13 = *(void **)(a1 + 64);
  uint64_t v14 = [*(id *)(a1 + 96) account];
  uint64_t v15 = [v13 imdAccountForIDSAccount:v14];
  [v26 didReceiveMessageSavedForMessageID:v25 ofType:v9 forChat:v10 fromHandle:v11 fromMe:v27 date:v12 account:v15 completionBlock:v28];

  uint64_t v16 = *(void **)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 104);
  uint64_t v19 = *(void *)(a1 + 112);
  uint64_t v20 = *(void *)(a1 + 120);
  uint64_t v21 = *(void *)(a1 + 40);
  int v22 = [*(id *)(a1 + 96) account];
  [v16 sendDeliveryReceiptForMessageID:v17 toID:v18 deliveryContext:v19 needsDeliveryReceipt:v20 callerID:v21 account:v22];

  if (*(unsigned char *)(a1 + 136)) {
    [*(id *)(a1 + 64) noteLastItemProcessed];
  }
  uint64_t v23 = *(void *)(*(void *)(a1 + 128) + 8);
  __int16 v24 = *(void **)(v23 + 40);
  *(void *)(v23 + 40) = 0;
}

void sub_E4A4(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, " ** Sending decryption failure", buf, 2u);
    }
  }
  id v3 = [*(id *)(a1 + 32) deliveryController];
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 40);
  CFStringRef v7 = [*(id *)(a1 + 32) idsAccountForURI:v5 IDSServiceName:@"com.apple.madrid"];
  [v3 sendMessageError:200 toToken:v6 toID:v4 toGroup:0 fromID:v5 fromAccount:v7 forMessageID:*(void *)(a1 + 64) completionBlock:&stru_DD928];
}

void sub_E5B4(id a1)
{
  off_EB3F8 = (_UNKNOWN *)IMWeakLinkSymbol();
}

void sub_E5E4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v211 = a2;
  id v220 = a3;
  id v214 = a4;
  id v215 = a5;
  id v221 = a6;
  id v13 = a7;
  uint64_t v274 = 0;
  v275 = &v274;
  uint64_t v276 = 0x3032000000;
  v277 = sub_BACC;
  v278 = sub_BADC;
  id v279 = 0;
  id v279 = [*(id *)(a1 + 32) _stripFZIDPrefix];
  id v219 = *(id *)(a1 + 40);
  if (v220
    || *(unsigned char *)(a1 + 152)
    || (unint64_t)[v221 count] < 3
    || ![*(id *)(a1 + 48) _isFromLinkedID:*(void *)(a1 + 56) fromID:*(void *)(a1 + 32)])
  {
    if (![v13 count])
    {
      id v217 = [objc_alloc((Class)NSAttributedString) initWithString:@" "];
      id v183 = 0;
      uint64_t v184 = 0;
      id v197 = 0;
      v198 = 0;
      v205 = 0;
      v206 = 0;
      v203 = 0;
      v204 = 0;
      v216 = 0;
      CFStringRef v29 = 0;
      v201 = 0;
      v202 = 0;
      id v181 = 0;
      id v182 = 0;
      v209 = 0;
      v210 = 0;
      id v185 = 0;
      uint64_t v186 = 0;
      v218 = 0;
      v207 = 0;
      v208 = 0;
      unsigned __int8 v187 = 0;
      unsigned int v189 = 0;
      unsigned int v191 = 0;
      unsigned int v193 = 0;
      BOOL v30 = 0;
      uint64_t v16 = 0;
      v212 = 0;
      v213 = 0;
      unsigned int v195 = 1;
      goto LABEL_103;
    }
    v208 = [v13 _stringForKey:@"x"];
    v210 = [v13 _stringForKey:@"s"];
    v202 = [v13 _stringForKey:@"t"];
    uint64_t v17 = [v13 _numberForKey:@"u"];
    unsigned int v195 = [v17 BOOLValue];

    uint64_t v18 = [v13 _numberForKey:@"a"];
    unsigned int v193 = [v18 BOOLValue];

    uint64_t v19 = [v13 _numberForKey:@"ar"];
    unsigned int v191 = [v19 BOOLValue];

    uint64_t v20 = [v13 _numberForKey:@"e"];
    unsigned int v189 = [v20 BOOLValue];

    uint64_t v21 = [v13 _numberForKey:@"sos"];
    unsigned __int8 v187 = [v21 BOOLValue];

    int v22 = [v13 _numberForKey:@"c"];
    BYTE4(v186) = [v22 BOOLValue];

    uint64_t v23 = +[IMFeatureFlags sharedFeatureFlags];
    unsigned int v24 = [v23 isBIAEnabled];

    if (v24
      && ([v13 _numberForKey:@"bia"],
          uint64_t v25 = objc_claimAutoreleasedReturnValue(),
          unsigned int v26 = [v25 BOOLValue],
          v25,
          v26))
    {
      v207 = [v13 _stringForKey:@"brid"];
      BYTE4(v184) = 1;
    }
    else
    {
      v207 = 0;
      BYTE4(v184) = 0;
    }
    if (IMStringIsBusinessID() && (IMStringIsStewie() & 1) != 0
      || ([v13 _stringForKey:@"m"],
          unsigned int v27 = objc_claimAutoreleasedReturnValue(),
          (v218 = v27) == 0))
    {
      LOBYTE(v186) = 0;
      v218 = 0;
    }
    else
    {
      id v28 = [v27 componentsSeparatedByString:@";"];
      LOBYTE(v186) = [*(id *)(a1 + 48) _amIMentioned:*(void *)(a1 + 56) inMentions:v28];
    }
    v205 = [v13 _stringForKey:@"tg"];
    uint64_t v31 = [v13 _numberForKey:@"ms"];
    id v185 = [v31 unsignedIntegerValue];

    v209 = [v13 _stringForKey:@"amk"];
    __int16 v32 = [v13 _numberForKey:@"amt"];
    id v183 = [v32 longLongValue];

    uint64_t v33 = [v13 _numberForKey:@"amrlc"];
    id v182 = [v33 integerValue];

    __int16 v34 = [v13 _numberForKey:@"amrln"];
    id v181 = [v34 integerValue];

    v201 = [v13 _stringForKey:@"ame"];
    v204 = [v13 _dataForKey:@"sld"];
    uint64_t v35 = +[IMFeatureFlags sharedFeatureFlags];
    LODWORD(v34) = [v35 isTranscriptSharingEnabled];

    if (v34 && IMStringIsBusinessID())
    {
      char v273 = 0;
      __int16 v36 = +[IMSharedEmergencyInfo infoFromDictionary:v13 isStewieTranscriptSharingMessage:&v273];
      CFStringRef v37 = v36;
      if (v273)
      {
        if (!v36)
        {
          if (IMOSLoggingEnabled())
          {
            v112 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
            {
              v113 = *(void **)(a1 + 32);
              *(_DWORD *)buf = 138412290;
              id v282 = v113;
              _os_log_impl(&dword_0, v112, OS_LOG_TYPE_INFO, "Received a business chat from %@ with INVALID stewie transcript sharing data. Dropping this message", buf, 0xCu);
            }
          }
          v203 = 0;
          v216 = 0;
          id v217 = 0;
          CFStringRef v29 = 0;
          uint64_t v16 = 0;
          v212 = 0;
          v213 = 0;
          goto LABEL_143;
        }
        v213 = [v36 emergencyUserPersona];
        v212 = [v37 senderPersona];
      }
      else
      {
        v212 = 0;
        v213 = 0;
      }
      v206 = v37;
    }
    else
    {
      v206 = 0;
      v212 = 0;
      v213 = 0;
    }
    CFStringRef v29 = [v13 _stringForKey:@"bid"];
    __int16 v38 = [v13 _dataForKey:@"bp"];
    v216 = [v38 _FTOptionallyDecompressData];

    CFStringRef v39 = [v13 _numberForKey:@"hn"];
    if ([v39 BOOLValue])
    {
      int IsBusinessID = IMStringIsBusinessID();

      if (IsBusinessID)
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v41 = OSLogHandleForIMEventCategory();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            __int16 v42 = *(void **)(a1 + 64);
            *(_DWORD *)buf = 138412290;
            id v282 = v42;
            _os_log_impl(&dword_0, v41, OS_LOG_TYPE_INFO, "Not displaying notification for message with ID %@", buf, 0xCu);
          }
        }
        LOBYTE(v184) = 1;
LABEL_40:
        if (([v29 length] || objc_msgSend(v216, "length")) && IMOSLoggingEnabled())
        {
          CFStringRef v43 = OSLogHandleForIMEventCategory();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            v44 = *(void **)(a1 + 64);
            id v45 = [v216 length];
            *(_DWORD *)buf = 138412802;
            id v282 = v44;
            __int16 v283 = 2112;
            id v284 = v29;
            __int16 v285 = 2048;
            id v286 = v45;
            _os_log_impl(&dword_0, v43, OS_LOG_TYPE_INFO, "Received a message: %@ with balloonBundleID: %@ and payload: %lu", buf, 0x20u);
          }
        }
        v46 = [v13 _numberForKey:@"oe"];
        v47 = v46;
        if (v46)
        {
          id v48 = v46;
        }
        else
        {
          id v48 = [*(id *)(a1 + 72) originalTimestamp];
        }
        unsigned int v49 = [*(id *)(a1 + 48) _shouldAdjustTimestampOfResentMessages];
        if (v48) {
          unsigned int v50 = v49;
        }
        else {
          unsigned int v50 = 0;
        }
        if (v50 == 1)
        {
          if (![*(id *)(a1 + 48) _originalTimestampWithinAcceptableWindow:v48 timestamp:v219])
          {
            if (IMOSLoggingEnabled())
            {
              v66 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
              {
                v67 = *(void **)(a1 + 64);
                [*(id *)(a1 + 48) _messageRetryTimeout];
                v68 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
                *(_DWORD *)buf = 138413058;
                id v282 = v67;
                __int16 v283 = 2112;
                id v284 = v48;
                __int16 v285 = 2112;
                id v286 = v219;
                __int16 v287 = 2112;
                id v288 = v68;
                _os_log_impl(&dword_0, v66, OS_LOG_TYPE_INFO, "Incoming message with guid %@ has original timestamp outside the acceptable window. Dropping this message. originalTimestamp: %@ timestamp: %@ timeoutWindow: %@", buf, 0x2Au);
              }
            }
            [*(id *)(a1 + 80) sendManualAckForMessageWithContext:*(void *)(a1 + 72)];
            v69 = *(void **)(a1 + 48);
            v70 = [*(id *)(a1 + 80) service];
            [v69 _sendCertifiedDeliveryReceiptIfPossible:v70 messageContext:*(void *)(a1 + 72) guid:*(void *)(a1 + 64) messageWasStored:1 needsDeliveryReceipt:0 failureReason:0];

            uint64_t v71 = *(void *)(*(void *)(a1 + 144) + 8);
            v55 = *(void **)(v71 + 40);
            *(void *)(v71 + 40) = 0;
            goto LABEL_78;
          }
          if (IMOSLoggingEnabled())
          {
            v51 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
            {
              v52 = *(void **)(a1 + 64);
              *(_DWORD *)buf = 138412802;
              id v282 = v219;
              __int16 v283 = 2112;
              id v284 = v48;
              __int16 v285 = 2112;
              id v286 = v52;
              _os_log_impl(&dword_0, v51, OS_LOG_TYPE_INFO, "Adjusting timestamp of incoming message to original timestamp. Timestamp: %@ Original timestamp: %@ guid: %@", buf, 0x20u);
            }
          }
          id v53 = v48;

          id v219 = v53;
        }
        v54 = [v29 componentsSeparatedByString:@":"];
        v55 = [v54 lastObject];

        v56 = +[IDSServerBag sharedInstanceForBagType:1];
        int v57 = IMSharedHelperAppBlocklisted();

        if (v57)
        {
          if (IMOSLoggingEnabled())
          {
            v58 = OSLogHandleForIMEventCategory();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              id v282 = v29;
              _os_log_impl(&dword_0, v58, OS_LOG_TYPE_INFO, "Banned app message due to server bag key. Dropping message with ID %@", buf, 0xCu);
            }
          }
          if (*(unsigned char *)(a1 + 153)) {
            [*(id *)(a1 + 48) noteLastItemProcessed];
          }
          uint64_t v59 = *(void *)(*(void *)(a1 + 144) + 8);
          v60 = *(void **)(v59 + 40);
          *(void *)(v59 + 40) = 0;

LABEL_78:
          v203 = 0;
          id v217 = 0;
          uint64_t v16 = 0;
LABEL_143:

          goto LABEL_144;
        }

        v203 = [v13 _stringForKey:@"iid"];
        v61 = [v13 _stringForKey:@"ix"];
        v62 = [v13 _dataForKey:@"tic"];
        v198 = [v62 _FTOptionallyDecompressData];

        v63 = [v13 _dataForKey:@"ati"];
        v199 = [v63 _FTOptionallyDecompressData];

        v179 = IMGetAttributedInfoArrayAllowlistedClasses();
        if (IMOSLoggingEnabled())
        {
          v64 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_0, v64, OS_LOG_TYPE_INFO, "Calling IMUnarchiverDecoder decoder to decode attributionInfoData", buf, 2u);
          }
        }
        v65 = +[IMUnarchiverDecoder decodeEncodedDataSecurely:v199 ofClass:objc_opt_class() includesAllowlistedClasses:v179];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v197 = v65;
        }
        else {
          id v197 = 0;
        }
        if (IMOSLoggingEnabled())
        {
          v72 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
          {
            MarcoLoggingStringForMessageData();
            id v73 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138413058;
            id v282 = v73;
            __int16 v283 = 2112;
            id v284 = v214;
            __int16 v285 = 2112;
            id v286 = v215;
            __int16 v287 = 2112;
            id v288 = v221;
            _os_log_impl(&dword_0, v72, OS_LOG_TYPE_DEBUG, "Received message dictionary: %@  groupID: %@   name: %@    participants: %@", buf, 0x2Au);
          }
        }
        if (IMOSLoggingEnabled())
        {
          v74 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
          {
            MarcoLoggingStringForMessageData();
            id v75 = (id)objc_claimAutoreleasedReturnValue();
            MarcoLoggingStringForMessageData();
            id v76 = (id)objc_claimAutoreleasedReturnValue();
            MarcoLoggingStringForMessageData();
            id v77 = (id)objc_claimAutoreleasedReturnValue();
            v78 = v77;
            v79 = (void *)v275[5];
            CFStringRef v80 = @"YES";
            if (!*(unsigned char *)(a1 + 152)) {
              CFStringRef v80 = @"NO";
            }
            *(_DWORD *)buf = 138414082;
            id v282 = v75;
            __int16 v283 = 2112;
            id v284 = v76;
            __int16 v285 = 2112;
            id v286 = v77;
            __int16 v287 = 2112;
            id v288 = v79;
            __int16 v289 = 2112;
            id v290 = v221;
            __int16 v291 = 2112;
            CFStringRef v292 = v80;
            __int16 v293 = 2112;
            v294 = v210;
            __int16 v295 = 2112;
            id v296 = v221;
            _os_log_impl(&dword_0, v74, OS_LOG_TYPE_DEBUG, "Received xhtml: %@ plain: %@ AuxXHTML: %@ from: %@   to: %@  (from me: %@)  subject: %@  participants: %@", buf, 0x52u);
          }
        }
        if ([v61 length])
        {
          uint64_t v16 = [[MessageToSuperParserContext alloc] initWithContent:v61];
          v81 = +[IMXMLParser sharedInstance];
          [v81 parseContext:v16];

          id v217 = [(MessageToSuperParserContext *)v16 body];
          if (IMOSLoggingEnabled())
          {
            v82 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
            {
              v83 = [v217 string];
              MarcoLoggingStringForMessageData();
              id v84 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              id v282 = v84;
              _os_log_impl(&dword_0, v82, OS_LOG_TYPE_DEBUG, "      Aux xhtml parsed body: %@", buf, 0xCu);
            }
          }
        }
        else
        {
          if (!v208)
          {
            if (v202)
            {
              id v114 = [objc_alloc((Class)NSAttributedString) initWithString:v202];
              objc_msgSend(v114, "__im_attributedStringByAssigningMessagePartNumbers");
              id v217 = (id)objc_claimAutoreleasedReturnValue();
              if (IMOSLoggingEnabled())
              {
                v115 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
                {
                  v116 = [v217 string];
                  MarcoLoggingStringForMessageData();
                  id v117 = (id)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138412290;
                  id v282 = v117;
                  _os_log_impl(&dword_0, v115, OS_LOG_TYPE_DEBUG, "      plain parsed body: %@", buf, 0xCu);
                }
              }
              BOOL v30 = [v217 length] != 0;
            }
            else
            {
              BOOL v30 = 0;
              id v217 = 0;
            }
            uint64_t v16 = 0;
            goto LABEL_102;
          }
          uint64_t v16 = [[MessageToSuperParserContext alloc] initWithContent:v208];
          v85 = +[IMXMLParser sharedInstance];
          [v85 parseContext:v16];

          id v217 = [(MessageToSuperParserContext *)v16 body];
          if (IMOSLoggingEnabled())
          {
            v86 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
            {
              v87 = [v217 string];
              MarcoLoggingStringForMessageData();
              id v88 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              id v282 = v88;
              _os_log_impl(&dword_0, v86, OS_LOG_TYPE_DEBUG, "      xhtml parsed body: %@", buf, 0xCu);
            }
          }
        }
        BOOL v30 = [v217 length] != 0;
LABEL_102:

LABEL_103:
        if (IMOSLoggingEnabled())
        {
          v89 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            id v282 = v221;
            _os_log_impl(&dword_0, v89, OS_LOG_TYPE_INFO, "Participants: %@", buf, 0xCu);
          }
        }
        id v200 = +[MessageGroupController memberDisplayIDsFromParticipants:v221 toIdentifier:*(void *)(a1 + 56)];
        if ([*(id *)(a1 + 48) _shouldIgnoreMessageFromSender:*(void *)(a1 + 32) balloonBID:v29 fromMe:*(unsigned __int8 *)(a1 + 152)])
        {
          if (IMOSLoggingEnabled())
          {
            v90 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
            {
              v91 = *(void **)(a1 + 32);
              v92 = *(void **)(a1 + 56);
              int v93 = *(unsigned __int8 *)(a1 + 152);
              *(_DWORD *)buf = 138413058;
              id v282 = v29;
              __int16 v283 = 2112;
              id v284 = v91;
              __int16 v285 = 2112;
              id v286 = v92;
              __int16 v287 = 1024;
              LODWORD(v288) = v93;
              _os_log_impl(&dword_0, v90, OS_LOG_TYPE_INFO, "   Ignoring message for App: %@ from non-business endpoint :%@  to: %@ fromMe: %d", buf, 0x26u);
            }
          }
          if (!*(unsigned char *)(a1 + 153)) {
            goto LABEL_141;
          }
          goto LABEL_140;
        }
        unsigned int v94 = [*(id *)(a1 + 48) _isAllowlistedUnencryptedSender:*(void *)(a1 + 32)];
        int v95 = !v30;
        if (*(unsigned char *)(a1 + 154)) {
          int v95 = 1;
        }
        if ((v95 | v94))
        {
          if (v221) {
            char v96 = v195;
          }
          else {
            char v96 = 1;
          }
          if (v96 & 1) != 0 || ([v221 containsObject:*(void *)(a1 + 32)])
          {
            id v97 = [v200 count];
            BOOL v180 = (unint64_t)v97 > 1;
            if (![v200 count] && objc_msgSend(v221, "count") == (char *)&dword_0 + 1)
            {
              id v98 = v221;

              id v200 = v98;
            }
            BYTE2(v178) = BYTE4(v186);
            BYTE1(v178) = v187;
            LOBYTE(v178) = v186;
            id v99 = objc_msgSend(*(id *)(a1 + 48), "_computeFlagsForIncomingMessage:isFromMe:unfinished:isAudioMessage:isAutoReply:isExpirable:messageSource:participants:hasUnseenMention:isSOS:isCritical:", 0, *(unsigned __int8 *)(a1 + 152), v195, v193, v191, v189, v185, v221, v178);
            if (![v217 length])
            {
              id v100 = [objc_alloc((Class)NSAttributedString) initWithString:&stru_E0738];

              id v217 = v100;
            }
            int v101 = *(unsigned __int8 *)(a1 + 152);
            if (*(unsigned char *)(a1 + 152) && (unint64_t)v97 <= 1)
            {
              if (![v200 count])
              {
                uint64_t v118 = [*(id *)(a1 + 32) _stripFZIDPrefix];
                v102 = (void *)v275[5];
                v275[5] = v118;
                goto LABEL_163;
              }
              int v101 = *(unsigned __int8 *)(a1 + 152);
            }
            if (!v101 || (unint64_t)v97 > 1 || ![v200 count]) {
              goto LABEL_164;
            }
            v102 = [v200 lastObject];
            uint64_t v103 = [v102 _stripFZIDPrefix];
            v104 = (void *)v275[5];
            v275[5] = v103;

LABEL_163:
LABEL_164:
            if (*(void *)(a1 + 32))
            {
              v119 = [*(id *)(a1 + 48) deliveryController];
              uint64_t v280 = *(void *)(a1 + 32);
              v120 = +[NSArray arrayWithObjects:&v280 count:1];
              [v119 noteRecentMessageForPeople:v120];
            }
            uint64_t v121 = [v13 _dataForKey:@"msi"];
            v188 = (void *)v121;
            if (v121)
            {
              id v190 = +[NSDictionary dictionaryWithMessageSummaryInfoData:v121];
            }
            else
            {
              id v190 = 0;
            }
            if (v209 && [v209 length])
            {
              id v122 = objc_alloc((Class)IMAssociatedMessageItem);
              uint64_t v123 = v275[5];
              v124 = +[NSDate __im_iMessageDateFromTimeStamp:v219];
              v125 = [(MessageToSuperParserContext *)v16 fileTransferGUIDs];
              id v126 = objc_msgSend(v122, "initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:associatedMessageGUID:associatedMessageType:associatedMessageRange:associatedMessageEmoji:messageSummaryInfo:threadIdentifier:", v123, v124, v217, 0, v125, v99, 0, *(void *)(a1 + 64), v209, v183, v182, v181, v201, v190, v205);

              if (IMOSLoggingEnabled())
              {
                v127 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v127, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  id v282 = v209;
                  _os_log_impl(&dword_0, v127, OS_LOG_TYPE_INFO, "Received message associated with GUID: %@", buf, 0xCu);
                }
              }
            }
            else
            {
              if ([v29 containsString:IMBalloonPluginIdentifierSurf]) {
                unsigned __int8 v128 = 1;
              }
              else {
                unsigned __int8 v128 = [v29 containsString:IMBalloonPluginIdentifierSurfDeprecated];
              }
              id v129 = (id)v275[5];
              v130 = +[IMFeatureFlags sharedFeatureFlags];
              unsigned int v131 = [v130 isTranscriptSharingEnabled];

              if (v131)
              {
                uint64_t v132 = [v212 senderID];
                v133 = (void *)v132;
                if (v132) {
                  v134 = (void *)v132;
                }
                else {
                  v134 = v129;
                }
                id v135 = v134;

                id v129 = v135;
              }
              id v136 = objc_alloc((Class)IMMessageItem);
              v137 = +[NSDate __im_iMessageDateFromTimeStamp:v219];
              if (v128)
              {
                v138 = 0;
              }
              else
              {
                v138 = [(MessageToSuperParserContext *)v16 fileTransferGUIDs];
              }
              id v126 = [v136 initWithSender:v129 time:v137 body:v217 attributes:0 fileTransferGUIDs:v138 flags:v99 error:0 guid:*(void *)(a1 + 64) threadIdentifier:v205];
              if ((v128 & 1) == 0) {

              }
              [v126 setMessageSummaryInfo:v190];
              v139 = +[IMFeatureFlags sharedFeatureFlags];
              unsigned int v140 = [v139 isTranscriptSharingEnabled];

              if (v206) {
                unsigned int v141 = v140;
              }
              else {
                unsigned int v141 = 0;
              }
              if (v141 == 1) {
                objc_msgSend(v126, "setTranscriptSharingMessageType:", objc_msgSend(v206, "messageType"));
              }
              v142 = +[IMFeatureFlags sharedFeatureFlags];
              unsigned int v143 = [v142 isBIAEnabled];

              if (v143) {
                [v126 setBiaReferenceID:v207];
              }
            }
            v144 = *(void **)(a1 + 48);
            v145 = [*(id *)(a1 + 80) account];
            v192 = [v144 imdAccountForIDSAccount:v145];

            v146 = [v192 accountID];
            [v126 setAccountID:v146];

            [v126 setBalloonBundleID:v29];
            v194 = [*(id *)(a1 + 56) _stripFZIDPrefix];
            [v126 setDestinationCallerID:v194];
            if (IMOSLoggingEnabled())
            {
              v147 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v147, OS_LOG_TYPE_INFO))
              {
                id v148 = [v126 guid];
                *(_DWORD *)buf = 138412546;
                id v282 = v194;
                __int16 v283 = 2112;
                id v284 = v148;
                _os_log_impl(&dword_0, v147, OS_LOG_TYPE_INFO, "Setting destination callerID: %@ for guid: %@", buf, 0x16u);
              }
            }
            v196 = [v13 _stringForKey:@"r"];
            if ([v196 length])
            {
              if (IMOSLoggingEnabled())
              {
                v149 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v149, OS_LOG_TYPE_INFO))
                {
                  id v150 = [v126 guid];
                  *(_DWORD *)buf = 138412546;
                  id v282 = v196;
                  __int16 v283 = 2112;
                  id v284 = v150;
                  _os_log_impl(&dword_0, v149, OS_LOG_TYPE_INFO, "Setting replyToGUID %@ for message %@", buf, 0x16u);
                }
              }
              [v126 setReplyToGUID:v196];
            }
            if (v216)
            {
              v151 = [v216 _FTOptionallyDecompressData];
              uint64_t v272 = 0;
              v152 = IMSharedHelperPayloadFromCombinedPluginPayloadData();
              id v153 = 0;

              [v126 setPayloadData:v152];
              if ([v153 count])
              {
                v154 = +[IMDFileTransferCenter sharedInstance];
                v155 = [v126 guid];
                v156 = [v154 guidsForStoredAttachmentPayloadData:v153 messageGUID:v155];

                [v126 setFileTransferGUIDs:v156];
              }
              if (IMOSLoggingEnabled())
              {
                v157 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v157, OS_LOG_TYPE_INFO))
                {
                  id v158 = [v126 guid];
                  id v159 = [v126 fileTransferGUIDs];
                  *(_DWORD *)buf = 138412546;
                  id v282 = v158;
                  __int16 v283 = 2112;
                  id v284 = v159;
                  _os_log_impl(&dword_0, v157, OS_LOG_TYPE_INFO, "%@ Setting payload contained inline. Attachments %@", buf, 0x16u);
                }
              }
            }
            [v126 setTypingIndicatorIcon:v198];
            [v126 setExpressiveSendStyleID:v203];
            [v126 setContactsAvatarRecipeData:v204];
            if (v210) {
              [v126 setSubject:v210];
            }
            if (IMOSLoggingEnabled())
            {
              v160 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v160, OS_LOG_TYPE_DEBUG))
              {
                v161 = [v126 body];
                MarcoLoggingStringForMessageData();
                id v162 = (id)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412290;
                id v282 = v162;
                _os_log_impl(&dword_0, v160, OS_LOG_TYPE_DEBUG, "   Message body: %@", buf, 0xCu);
              }
            }
            if (IMOSLoggingEnabled())
            {
              v163 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v163, OS_LOG_TYPE_DEBUG))
              {
                id v164 = [v126 subject];
                *(_DWORD *)buf = 138412290;
                id v282 = v164;
                _os_log_impl(&dword_0, v163, OS_LOG_TYPE_DEBUG, "   Message subject: %@", buf, 0xCu);
              }
            }
            if (IMOSLoggingEnabled())
            {
              v165 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v165, OS_LOG_TYPE_DEBUG))
              {
                id v166 = [v126 fileTransferGUIDs];
                *(_DWORD *)buf = 138412290;
                id v282 = v166;
                _os_log_impl(&dword_0, v165, OS_LOG_TYPE_DEBUG, "   Message transfers: %@", buf, 0xCu);
              }
            }
            v234[0] = _NSConcreteStackBlock;
            v234[1] = 3221225472;
            v234[2] = sub_10D28;
            v234[3] = &unk_DDA38;
            char v262 = *(unsigned char *)(a1 + 153);
            v234[4] = *(void *)(a1 + 48);
            id v167 = v13;
            id v235 = v167;
            id v236 = v197;
            id v237 = *(id *)(a1 + 32);
            id v238 = *(id *)(a1 + 88);
            id v168 = v126;
            id v239 = v168;
            id v240 = *(id *)(a1 + 64);
            __int16 v263 = *(_WORD *)(a1 + 154);
            BOOL v264 = v180;
            id v169 = v192;
            id v241 = v169;
            v260 = &v274;
            id v242 = v213;
            id v243 = v206;
            id v200 = v200;
            id v244 = v200;
            id v245 = *(id *)(a1 + 56);
            id v246 = v220;
            id v247 = *(id *)(a1 + 96);
            id v248 = *(id *)(a1 + 80);
            id v249 = v219;
            id v250 = v215;
            id v251 = v214;
            char v265 = *(unsigned char *)(a1 + 152);
            id v252 = v221;
            char v266 = *(unsigned char *)(a1 + 156);
            id v253 = *(id *)(a1 + 104);
            char v267 = *(unsigned char *)(a1 + 157);
            char v268 = v184;
            id v170 = *(id *)(a1 + 112);
            char v269 = *(unsigned char *)(a1 + 158);
            uint64_t v171 = *(void *)(a1 + 144);
            id v254 = v170;
            uint64_t v261 = v171;
            char v270 = BYTE4(v184);
            id v255 = v207;
            id v256 = *(id *)(a1 + 120);
            char v271 = *(unsigned char *)(a1 + 159);
            id v257 = *(id *)(a1 + 128);
            id v258 = *(id *)(a1 + 72);
            id v259 = *(id *)(a1 + 136);
            v172 = objc_retainBlock(v234);
            v173 = [v168 fileTransferGUIDs];
            if ([v173 count]) {
              double v174 = 240.0;
            }
            else {
              double v174 = 45.0;
            }

            v175 = *(void **)(a1 + 48);
            v222[0] = _NSConcreteStackBlock;
            v222[1] = 3221225472;
            v222[2] = sub_148D8;
            v222[3] = &unk_DDAD8;
            id v223 = *(id *)(a1 + 64);
            char v230 = *(unsigned char *)(a1 + 158);
            v176 = v172;
            char v231 = *(unsigned char *)(a1 + 153);
            uint64_t v177 = *(void *)(a1 + 48);
            id v228 = v176;
            uint64_t v224 = v177;
            id v225 = *(id *)(a1 + 32);
            id v109 = v168;
            id v226 = v109;
            id v227 = v167;
            v229 = &v274;
            char v232 = *(unsigned char *)(a1 + 157);
            char v233 = *(unsigned char *)(a1 + 159);
            [v175 _enqueueBlock:v222 withTimeout:@"reflected message attachment processing" description:v174];

            goto LABEL_142;
          }
          if (IMOSLoggingEnabled())
          {
            v110 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
            {
              v111 = *(void **)(a1 + 32);
              *(_DWORD *)buf = 138412546;
              id v282 = v111;
              __int16 v283 = 2112;
              id v284 = v221;
              _os_log_impl(&dword_0, v110, OS_LOG_TYPE_DEBUG, "   fromIdentifier: %@  not in participants: %@, bailing", buf, 0x16u);
            }
          }
          if (!*(unsigned char *)(a1 + 153)) {
            goto LABEL_141;
          }
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            v105 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
            {
              v106 = *(void **)(a1 + 32);
              v107 = *(void **)(a1 + 56);
              *(_DWORD *)buf = 138412546;
              id v282 = v106;
              __int16 v283 = 2112;
              id v284 = v107;
              _os_log_impl(&dword_0, v105, OS_LOG_TYPE_INFO, "   Received a message with content that wasn't encrypted from: %@  to: %@, ignoring", buf, 0x16u);
            }
          }
          if (!*(unsigned char *)(a1 + 153)) {
            goto LABEL_141;
          }
        }
LABEL_140:
        [*(id *)(a1 + 48) noteLastItemProcessed];
LABEL_141:
        uint64_t v108 = *(void *)(*(void *)(a1 + 144) + 8);
        id v109 = *(id *)(v108 + 40);
        *(void *)(v108 + 40) = 0;
LABEL_142:

        goto LABEL_143;
      }
    }
    else
    {
    }
    LOBYTE(v184) = 0;
    goto LABEL_40;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "Received group message from linked ID already in group. Dropping message", buf, 2u);
    }
  }
  if (*(unsigned char *)(a1 + 153)) {
    [*(id *)(a1 + 48) noteLastItemProcessed];
  }
  v212 = 0;
  v213 = 0;
  uint64_t v15 = *(void *)(*(void *)(a1 + 144) + 8);
  uint64_t v16 = *(MessageToSuperParserContext **)(v15 + 40);
  *(void *)(v15 + 40) = 0;
LABEL_144:

  _Block_object_dispose(&v274, 8);
}

void sub_10834(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {

    objc_end_catch();
    JUMPOUT(0xFBACLL);
  }
  _Block_object_dispose(&STACK[0x2E8], 8);
  _Unwind_Resume(a1);
}

void sub_10D28(uint64_t a1, void *a2, void *a3, char a4, int a5, void *a6, uint64_t a7, void *a8, void *a9)
{
  id v16 = a2;
  id v17 = a3;
  id v39 = a6;
  id v38 = a8;
  uint64_t v18 = a9;
  if ((a4 & 1) != 0 || !IMSharedHelperIsUnderAutomation())
  {
    uint64_t v35 = a7;
    CFStringRef v37 = v18;
    __int16 v36 = [*(id *)(a1 + 40) _dictionaryForKey:@"bpdi"];
    [*(id *)(a1 + 32) _updateTransfersForAttributionInfoArray:*(void *)(a1 + 48) message:v16];
    uint64_t v20 = [v16 messageSummaryInfo];
    CFMutableDictionaryRef Mutable = (CFMutableDictionaryRef)[v20 mutableCopy];

    if (!Mutable) {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    int v22 = +[NSNumber numberWithBool:1];
    [(__CFDictionary *)Mutable setObject:v22 forKey:IMMessageSummaryInfoUpdatedDateWithServerTime];

    [v16 setMessageSummaryInfo:Mutable];
    *(void *)buf = 0;
    v85 = buf;
    uint64_t v86 = 0x3032000000;
    v87 = sub_BACC;
    id v88 = sub_BADC;
    id v89 = 0;
    uint64_t v23 = [*(id *)(a1 + 32) attachmentController];
    unsigned int v24 = [v16 guid];
    uint64_t v25 = [v16 balloonBundleID];
    uint64_t v26 = *(void *)(a1 + 64);
    uint64_t v34 = *(void *)(a1 + 56);
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_112F8;
    v40[3] = &unk_DDA10;
    id v41 = v16;
    id v27 = v37;
    char v75 = *(unsigned char *)(a1 + 256);
    uint64_t v28 = *(void *)(a1 + 32);
    id v69 = v27;
    uint64_t v42 = v28;
    id v43 = *(id *)(a1 + 72);
    id v44 = *(id *)(a1 + 80);
    char v76 = *(unsigned char *)(a1 + 257);
    id v45 = *(id *)(a1 + 40);
    id v29 = *(id *)(a1 + 56);
    __int16 v77 = *(_WORD *)(a1 + 258);
    id v46 = v29;
    v70 = buf;
    id v30 = *(id *)(a1 + 88);
    uint64_t v31 = *(void *)(a1 + 240);
    id v47 = v30;
    uint64_t v71 = v31;
    id v48 = *(id *)(a1 + 96);
    id v49 = *(id *)(a1 + 104);
    id v50 = *(id *)(a1 + 112);
    id v51 = *(id *)(a1 + 120);
    id v52 = *(id *)(a1 + 128);
    id v53 = *(id *)(a1 + 136);
    id v54 = *(id *)(a1 + 144);
    id v55 = *(id *)(a1 + 152);
    id v56 = *(id *)(a1 + 160);
    id v57 = *(id *)(a1 + 168);
    char v78 = *(unsigned char *)(a1 + 260);
    id v58 = *(id *)(a1 + 64);
    id v59 = *(id *)(a1 + 176);
    char v79 = *(unsigned char *)(a1 + 261);
    char v80 = a4;
    int v74 = a5;
    id v60 = v39;
    uint64_t v73 = v35;
    id v61 = *(id *)(a1 + 184);
    id v62 = v38;
    __int16 v81 = *(_WORD *)(a1 + 262);
    id v32 = *(id *)(a1 + 192);
    __int16 v82 = *(_WORD *)(a1 + 264);
    uint64_t v33 = *(void *)(a1 + 248);
    id v63 = v32;
    uint64_t v72 = v33;
    id v64 = *(id *)(a1 + 200);
    id v65 = *(id *)(a1 + 208);
    char v83 = *(unsigned char *)(a1 + 266);
    id v66 = *(id *)(a1 + 216);
    id v67 = *(id *)(a1 + 224);
    id v68 = *(id *)(a1 + 232);
    [v23 processMessageAttachmentDictionary:v36 forMessageGUID:v24 balloonBundleID:v25 fromIdentifier:v34 senderToken:v26 withCompletionBlock:v40];

    _Block_object_dispose(buf, 8);
    uint64_t v18 = (void (**)(void))v37;
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v19, OS_LOG_TYPE_INFO, "***************** Attachment download failed. Not persisting message as we are under automation ***************", buf, 2u);
      }
    }
    if (v18)
    {
      if (*(unsigned char *)(a1 + 256)) {
        [*(id *)(a1 + 32) noteLastItemProcessed];
      }
      v18[2](v18);
    }
  }
}

void sub_112F8(uint64_t a1, void *a2, void *a3, char a4)
{
  id v316 = a2;
  id v308 = a3;
  uint64_t v318 = a1;
  if (IMOSLoggingEnabled())
  {
    CFStringRef v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)v347 = [v316 length];
      *(_WORD *)&v347[8] = 2048;
      *(void *)&v347[10] = [v308 count];
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Setting payload to length: %lu with attachments: %lu", buf, 0x16u);
    }
  }
  if (a4)
  {
    if (!v316)
    {
      id v316 = 0;
      goto LABEL_31;
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, " Setting message payload downloaded from MMCS", buf, 2u);
      }
    }
    if (![v316 length]
      || ([*(id *)(a1 + 48) setPayloadData:v316], !objc_msgSend(v308, "count")))
    {
LABEL_31:
      if (*(unsigned char *)(a1 + 301)) {
        [*(id *)(a1 + 40) _handleNicknameReceived:*(void *)(a1 + 64) fromIdentifier:*(void *)(a1 + 72) withMessageItem:*(void *)(a1 + 48) isSnapTrustedUser:*(unsigned __int8 *)(a1 + 302)];
      }
      if (*(unsigned char *)(a1 + 303))
      {
        uint64_t v19 = [*(id *)(a1 + 40) chatRegistry];
        uint64_t v20 = [v19 generateUnusedChatIdentifierForGroupChatWithAccount:*(void *)(a1 + 80)];
        uint64_t v21 = *(void *)(*(void *)(a1 + 264) + 8);
        int v22 = *(void **)(v21 + 40);
        *(void *)(v21 + 40) = v20;
      }
      else
      {
        uint64_t v23 = *(void *)(*(void *)(a1 + 264) + 8);
        if (*(void *)(v23 + 40))
        {
LABEL_37:
          if (*(unsigned char *)(a1 + 303)) {
            char v24 = 43;
          }
          else {
            char v24 = 45;
          }
          unsigned __int8 v339 = v24;
          uint64_t v25 = +[IMFeatureFlags sharedFeatureFlags];
          unsigned int v26 = [v25 isTranscriptSharingEnabled];

          uint64_t v27 = a1;
          if (v26 && *(void *)(a1 + 88))
          {
            unsigned __int8 v339 = 43;
            uint64_t v28 = [*(id *)(a1 + 96) conversationID];
            uint64_t v29 = [IMTranscriptSharingHandlePrefix stringByAppendingString:v28];
            uint64_t v30 = *(void *)(*(void *)(a1 + 264) + 8);
            uint64_t v31 = *(void **)(v30 + 40);
            *(void *)(v30 + 40) = v29;

            uint64_t v27 = a1;
          }
          if ([*(id *)(v27 + 104) count])
          {
            id v305 = [objc_alloc((Class)NSMutableSet) initWithArray:*(void *)(a1 + 104)];
          }
          else
          {
            id v305 = 0;
          }
          v313 = [*(id *)(a1 + 112) _stripFZIDPrefix];
          if (v313) {
            [v305 removeObject:v313];
          }
          if (*(unsigned char *)(a1 + 303))
          {
            id v32 = *(void **)(a1 + 120);
            if (v32)
            {
              id v33 = v32;
              goto LABEL_59;
            }
            if (IMOSLoggingEnabled())
            {
              id v39 = OSLogHandleForIMEventCategory();
              if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_0, v39, OS_LOG_TYPE_INFO, "Did not find chat in first pass. Trying again.", buf, 2u);
              }
            }
            __int16 v40 = [*(id *)(a1 + 40) groupController];
            id v41 = *(void **)(a1 + 40);
            uint64_t v42 = *(void *)(a1 + 128);
            id v43 = [*(id *)(a1 + 136) account];
            id v44 = [v41 imdAccountForIDSAccount:v43];
            uint64_t v45 = [v40 findChatWithMessageData:v42 account:v44 session:*(void *)(a1 + 40) toIdentifier:*(void *)(a1 + 112) fromIdentifier:*(void *)(a1 + 72) timestamp:*(void *)(a1 + 144)];

            id v33 = (id)v45;
            if (v45) {
              goto LABEL_59;
            }
            uint64_t v34 = +[IMDChatRegistry sharedInstance];
            v104 = [v305 allObjects];
            uint64_t v35 = [v34 existingChatForIDs:v104 account:*(void *)(v318 + 80) displayName:*(void *)(v318 + 152) groupID:*(void *)(v318 + 160) style:43];
          }
          else
          {
            uint64_t v34 = +[IMDChatRegistry sharedInstance];
            uint64_t v35 = [v34 existingChatForID:*(void *)(*(void *)(*(void *)(a1 + 264) + 8) + 40) account:*(void *)(a1 + 80)];
          }

          id v33 = (id)v35;
          if (!v35)
          {
            __int16 v36 = *(void **)(v318 + 40);
            uint64_t v37 = *(void *)(*(void *)(v318 + 264) + 8);
            id obj = *(id *)(v37 + 40);
            [v36 canonicalizeChatIdentifier:&obj style:&v339];
            objc_storeStrong((id *)(v37 + 40), obj);
            id v38 = 0;
            unsigned int v312 = [*(id *)(v318 + 48) isTypingMessage] ^ 1;
            unsigned int v306 = [*(id *)(v318 + 48) isTypingMessage] ^ 1;
            char v304 = 1;
            goto LABEL_78;
          }
LABEL_59:
          id v38 = v33;
          uint64_t v46 = [v33 chatIdentifier];
          uint64_t v47 = *(void *)(*(void *)(v318 + 264) + 8);
          id v48 = *(void **)(v47 + 40);
          *(void *)(v47 + 40) = v46;

          unsigned __int8 v339 = [v38 style];
          id v49 = [v38 service];
          id v50 = [*(id *)(v318 + 40) service];
          unsigned int v312 = v49 != v50;

          if (v312 && IMOSLoggingEnabled())
          {
            id v51 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_0, v51, OS_LOG_TYPE_INFO, "Service of found chat not equal, lets register", buf, 2u);
            }
          }
          uint64_t v52 = v318;
          if (*(void *)(v318 + 72))
          {
            id v53 = *(void **)(v318 + 112);
            if (v53)
            {
              unsigned int v54 = objc_msgSend(v53, "isEqualToString:");
              uint64_t v52 = v318;
              unsigned int v55 = *(unsigned char *)(v318 + 304) ? v54 : 0;
              if (v55 == 1)
              {
                uint64_t v52 = v318;
                if ([v38 isBlackholed])
                {
                  if (IMOSLoggingEnabled())
                  {
                    id v56 = OSLogHandleForIMFoundationCategory();
                    if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
                    {
                      id v57 = [v38 guid];
                      *(_DWORD *)buf = 138412290;
                      *(void *)v347 = v57;
                      _os_log_impl(&dword_0, v56, OS_LOG_TYPE_INFO, "Unblackholing chat %@ based on reflection", buf, 0xCu);
                    }
                  }
                  [v38 updateIsBlackholed:0];
                  uint64_t v52 = v318;
                }
              }
            }
          }
          uint64_t v58 = *(void *)(v52 + 152);
          if (!v58)
          {
            char v304 = 0;
            unsigned int v306 = 1;
            goto LABEL_80;
          }
          [*(id *)(v52 + 40) didReceiveDisplayNameChange:v58 fromID:*(void *)(*(void *)(*(void *)(v52 + 272) + 8) + 40) toIdentifier:*(void *)(v52 + 112) forChat:*(void *)(*(void *)(*(void *)(v52 + 264) + 8) + 40) style:v339 account:*(void *)(v52 + 80)];
          char v304 = 0;
          unsigned int v306 = 1;
LABEL_78:
          uint64_t v52 = v318;
LABEL_80:
          v317 = v38;
          if (*(unsigned char *)(v52 + 303))
          {
            unsigned int v303 = 0;
          }
          else
          {
            unsigned int v303 = 0;
            if (v313 && *(unsigned char *)(v52 + 304))
            {
              unsigned int v303 = [*(id *)(*(void *)(*(void *)(v52 + 272) + 8) + 40) isEqualToString:v313];
              uint64_t v52 = v318;
            }
          }
          if (!*(unsigned char *)(v52 + 304)) {
            goto LABEL_102;
          }
          id v60 = *(void **)(v52 + 40);
          uint64_t v59 = v52 + 40;
          [v60 addItemToRecentsIfApplicable:*(void *)(v59 - 8)];
          long long v336 = 0u;
          long long v337 = 0u;
          long long v334 = 0u;
          long long v335 = 0u;
          id v61 = [*(id *)(*(void *)v59 + 96) lastObject];
          id v62 = [v61 service];
          id v63 = [v62 devices];

          id v64 = [v63 countByEnumeratingWithState:&v334 objects:v348 count:16];
          if (v64)
          {
            uint64_t v65 = *(void *)v335;
LABEL_88:
            uint64_t v66 = 0;
            while (1)
            {
              if (*(void *)v335 != v65) {
                objc_enumerationMutation(v63);
              }
              id v67 = *(void **)(*((void *)&v334 + 1) + 8 * v66);
              id v68 = [v67 pushToken];
              unsigned int v69 = [v68 isEqualToData:*(void *)(v318 + 168)];

              if (v69) {
                break;
              }
              if (v64 == (id)++v66)
              {
                id v64 = [v63 countByEnumeratingWithState:&v334 objects:v348 count:16];
                if (v64) {
                  goto LABEL_88;
                }
                goto LABEL_94;
              }
            }
            if (IMOSLoggingEnabled())
            {
              v70 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
              {
                id v71 = [v67 name];
                *(_DWORD *)buf = 138412546;
                *(void *)v347 = v71;
                *(_WORD *)&v347[8] = 2112;
                *(void *)&v347[10] = v67;
                _os_log_impl(&dword_0, v70, OS_LOG_TYPE_DEBUG, " Device: %@ (%@)", buf, 0x16u);
              }
            }
            uint64_t v72 = [v67 uniqueID];
            BOOL v73 = v72 == 0;

            if (!v73) {
              goto LABEL_102;
            }
          }
          else
          {
LABEL_94:
          }
          if (*(unsigned char *)(v318 + 304) && !*(unsigned char *)(v318 + 303))
          {
            objc_msgSend(*(id *)(v318 + 32), "setFlags:", (unint64_t)objc_msgSend(*(id *)(v318 + 32), "flags") | 0x1000);
            if (IMOSLoggingEnabled())
            {
              uint64_t v103 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_0, v103, OS_LOG_TYPE_DEBUG, "     *** Device doesn't support delivery receipt forwarding, faking it", buf, 2u);
              }
            }
            int v74 = 1;
          }
          else
          {
LABEL_102:
            int v74 = 0;
          }
          if (IMOSLoggingEnabled())
          {
            char v75 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)v347 = v313;
              _os_log_impl(&dword_0, v75, OS_LOG_TYPE_DEBUG, "   myID: %@", buf, 0xCu);
            }
          }
          if (IMOSLoggingEnabled())
          {
            char v76 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v77 = *(void *)(*(void *)(*(void *)(v318 + 272) + 8) + 40);
              *(_DWORD *)buf = 138412290;
              *(void *)v347 = v77;
              _os_log_impl(&dword_0, v76, OS_LOG_TYPE_DEBUG, "   fromDisplayID: %@", buf, 0xCu);
            }
          }
          if (IMOSLoggingEnabled())
          {
            char v78 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
            {
              id v79 = [v317 guid];
              *(_DWORD *)buf = 138412546;
              *(void *)v347 = v317;
              *(_WORD *)&v347[8] = 2112;
              *(void *)&v347[10] = v79;
              _os_log_impl(&dword_0, v78, OS_LOG_TYPE_DEBUG, "   found chat: %@ (%@)", buf, 0x16u);
            }
          }
          if (IMOSLoggingEnabled())
          {
            char v80 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
            {
              CFStringRef v81 = @"NO";
              if (v303) {
                CFStringRef v81 = @"YES";
              }
              *(_DWORD *)buf = 138412290;
              *(void *)v347 = v81;
              _os_log_impl(&dword_0, v80, OS_LOG_TYPE_DEBUG, "   from me - to me: %@", buf, 0xCu);
            }
          }
          if (IMOSLoggingEnabled())
          {
            __int16 v82 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
            {
              if (*(unsigned char *)(v318 + 303)) {
                CFStringRef v83 = @"YES";
              }
              else {
                CFStringRef v83 = @"NO";
              }
              *(_DWORD *)buf = 138412290;
              *(void *)v347 = v83;
              _os_log_impl(&dword_0, v82, OS_LOG_TYPE_DEBUG, "   isGroupChat: %@", buf, 0xCu);
            }
          }
          if (IMOSLoggingEnabled())
          {
            id v84 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v85 = *(void *)(*(void *)(*(void *)(v318 + 264) + 8) + 40);
              *(_DWORD *)buf = 138412290;
              *(void *)v347 = v85;
              _os_log_impl(&dword_0, v84, OS_LOG_TYPE_DEBUG, "   chatIdentifier: %@", buf, 0xCu);
            }
          }
          if (IMOSLoggingEnabled())
          {
            uint64_t v86 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
            {
              CFStringRef v87 = @"NO";
              if (v74) {
                CFStringRef v87 = @"YES";
              }
              *(_DWORD *)buf = 138412290;
              *(void *)v347 = v87;
              _os_log_impl(&dword_0, v86, OS_LOG_TYPE_DEBUG, "   markDelivered: %@", buf, 0xCu);
            }
          }
          uint64_t v88 = v318;
          if (*(unsigned char *)(v318 + 304))
          {
            int v302 = 0;
            goto LABEL_193;
          }
          if ([*(id *)(v318 + 32) isTypingMessage])
          {
            int v302 = 0;
LABEL_192:
            uint64_t v88 = v318;
LABEL_193:
            if (!*(unsigned char *)(v88 + 306))
            {
              unsigned int v128 = *(_DWORD *)(v318 + 296);
              if (v128) {
                uint64_t v129 = v128;
              }
              else {
                uint64_t v129 = 37;
              }
              [*(id *)(v318 + 32) setErrorCode:v129];
              if (IMOSLoggingEnabled())
              {
                v130 = OSLogHandleForIMEventCategory();
                if (os_log_type_enabled(v130, OS_LOG_TYPE_INFO))
                {
                  int v131 = *(_DWORD *)(v318 + 296);
                  uint64_t v132 = *(void *)(v318 + 184);
                  uint64_t v133 = *(void *)(v318 + 288);
                  *(_DWORD *)buf = 67109634;
                  *(_DWORD *)v347 = v131;
                  *(_WORD *)&v347[4] = 2112;
                  *(void *)&v347[6] = v132;
                  *(_WORD *)&v347[14] = 2048;
                  *(void *)&v347[16] = v133;
                  _os_log_impl(&dword_0, v130, OS_LOG_TYPE_INFO, "** Had attachment download failure: %d, fileTransferError: %@, attachment size %lu", buf, 0x1Cu);
                }
              }
              uint64_t v134 = v318;
              id v135 = *(void **)(v318 + 184);
              if (v135)
              {
                id v136 = [v135 domain];
                +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Error domain %@, error code %ld", v136, [*(id *)(v318 + 184) code]);
                v137 = (__CFString *)objc_claimAutoreleasedReturnValue();

                uint64_t v134 = v318;
              }
              else
              {
                v137 = @" ";
              }
              unint64_t v138 = *(void *)(v134 + 288);
              v139 = [*(id *)(v134 + 40) deliveryController];
              uint64_t v310 = *(void *)(v318 + 168);
              uint64_t v140 = *(void *)(v318 + 72);
              uint64_t v314 = *(void *)(v318 + 112);
              unsigned int v141 = [*(id *)(v318 + 136) account];
              unint64_t v142 = 1000 * (v138 / 0x3E8);
              uint64_t v143 = *(void *)(v318 + 56);
              v144 = +[NSNumber numberWithUnsignedInteger:v142];
              v145 = +[NSDate date];
              [v145 timeIntervalSinceDate:*(void *)(v318 + 192)];
              double v147 = v146;
              uint64_t v148 = *(void *)(v318 + 200);
              v327[0] = _NSConcreteStackBlock;
              v327[1] = 3221225472;
              v327[2] = sub_14754;
              v327[3] = &unk_DD9E8;
              int v329 = *(_DWORD *)(v318 + 296);
              id v328 = *(id *)(v318 + 168);
              [v139 sendMessageErrorWithInfo:400 toToken:v310 toID:v140 toGroup:0 fromID:v314 fromAccount:v141 forMessageID:v147 additionalInfo:v143 fileSize:v137 failureTimeSeconds:v144 failReasonMessage:v148 completionBlock:v327];
            }
            id v311 = objc_alloc_init((Class)NSMutableArray);
            if (*(unsigned char *)(v318 + 303))
            {
              +[MessageGroupController addMembers:*(void *)(v318 + 104) toHandleInfo:v311];
            }
            else
            {
              id v149 = *(id *)(*(void *)(*(void *)(v318 + 264) + 8) + 40);
              id v150 = +[IMFeatureFlags sharedFeatureFlags];
              unsigned int v151 = [v150 isTranscriptSharingEnabled];

              if (v151)
              {
                v152 = [*(id *)(v318 + 88) senderID];

                if (v152)
                {
                  id v153 = +[NSNumber numberWithInt:2];
                  v154 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v153, kFZChatParticipantStatusKey, IMEmergencyServiceHandleID, kFZPersonID, 0);

                  [v311 addObject:v154];
                  v155 = [*(id *)(v318 + 88) senderID];
                  uint64_t v156 = [v155 _stripFZIDPrefix];

                  id v149 = (id)v156;
                }
              }
              v157 = +[NSNumber numberWithInt:2];
              id v158 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v157, kFZChatParticipantStatusKey, v149, kFZPersonID, 0);

              [v311 addObject:v158];
            }
            v315 = +[NSMutableArray arrayWithCapacity:2];
            v309 = [*(id *)(v318 + 40) storeBreadcrumbAndSetConsumedPayloadsForNewMessageItemIfNecessary:*(void *)(v318 + 48) inChatWithIdentifier:*(void *)(*(void *)(*(void *)(v318 + 264) + 8) + 40)];
            if (v309) {
              [v315 addObject:v309];
            }
            if ([*(id *)(v318 + 48) isBreadcrumb] && IMOSLoggingEnabled())
            {
              id v159 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v159, OS_LOG_TYPE_INFO))
              {
                v160 = *(void **)(v318 + 48);
                v161 = [v160 consumedSessionPayloads];
                id v162 = [v161 count];
                *(_DWORD *)buf = 138412546;
                *(void *)v347 = v160;
                *(_WORD *)&v347[8] = 2048;
                *(void *)&v347[10] = v162;
                _os_log_impl(&dword_0, v159, OS_LOG_TYPE_INFO, "Receiving breadcrumb %@ with payload history: %tu items.", buf, 0x16u);
              }
            }
            if (*(unsigned char *)(v318 + 304))
            {
              if (v312)
              {
                LOBYTE(v300) = v302;
                [*(id *)(v318 + 40) didJoinChat:*(void *)(*(void *)(*(void *)(v318 + 264) + 8) + 40) style:v339 displayName:*(void *)(v318 + 152) groupID:*(void *)(v318 + 160) handleInfo:v311 account:*(void *)(v318 + 80) isBlackholed:v300];
                v163 = [*(id *)(v318 + 40) chatForChatIdentifier:*(void *)(*(void *)(*(void *)(v318 + 264) + 8) + 40) style:v339];
                _UpdateLastAddressedHandle(*(void **)(v318 + 48), *(void **)(v318 + 112), v163);
              }
              else
              {
                v163 = [v317 chatIdentifier];
                sub_3378C(v163, (uint64_t)[v317 style]);
              }

              if (!v306) {
                goto LABEL_245;
              }
              id v170 = [*(id *)(v318 + 40) chatForChatIdentifier:*(void *)(*(void *)(*(void *)(v318 + 264) + 8) + 40) style:v339];
              if (*(unsigned char *)(v318 + 307)) {
                BOOL v173 = 1;
              }
              else {
                BOOL v173 = *(unsigned char *)(v318 + 300) != 0;
              }
              [*(id *)(v318 + 40) didSendMessage:*(void *)(v318 + 32) forChat:*(void *)(*(void *)(*(void *)(v318 + 264) + 8) + 40) style:v339 account:*(void *)(v318 + 80) forceDate:0 itemIsComingFromStorage:v173];
LABEL_244:

              if (![v315 count]) {
                goto LABEL_260;
              }
LABEL_245:
              uint64_t v178 = v318;
              if (*(unsigned char *)(v318 + 308))
              {
                long long v325 = 0u;
                long long v326 = 0u;
                long long v323 = 0u;
                long long v324 = 0u;
                id v179 = v315;
                id v180 = [v179 countByEnumeratingWithState:&v323 objects:v345 count:16];
                if (v180)
                {
                  uint64_t v181 = *(void *)v324;
                  uint64_t v182 = kIMMessageItemHideLockScreenNotificationsKey;
                  do
                  {
                    for (i = 0; i != v180; i = (char *)i + 1)
                    {
                      if (*(void *)v324 != v181) {
                        objc_enumerationMutation(v179);
                      }
                      uint64_t v184 = *(void **)(*((void *)&v323 + 1) + 8 * i);
                      if (([*(id *)(v318 + 32) isTypingMessage] & 1) == 0)
                      {
                        id v185 = [v184 messageSummaryInfo];
                        id v186 = [v185 mutableCopy];

                        if (!v186) {
                          id v186 = objc_alloc_init((Class)NSMutableDictionary);
                        }
                        [v186 setValue:&__kCFBooleanTrue forKey:v182];
                        id v187 = [v186 copy];
                        [v184 setMessageSummaryInfo:v187];
                      }
                    }
                    id v180 = [v179 countByEnumeratingWithState:&v323 objects:v345 count:16];
                  }
                  while (v180);
                }

                uint64_t v178 = v318;
              }
              if (![*(id *)(v178 + 40) didReceiveMessages:v315 forChat:*(void *)(*(void *)(*(void *)(v178 + 264) + 8) + 40) style:v339 account:*(void *)(v178 + 80) fromIDSID:*(void *)(v178 + 208)])
              {
                if (IMOSLoggingEnabled())
                {
                  id v190 = OSLogHandleForIMFoundationCategory();
                  if (os_log_type_enabled(v190, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v191 = *(void *)(v318 + 56);
                    *(_DWORD *)buf = 138412290;
                    *(void *)v347 = v191;
                    _os_log_impl(&dword_0, v190, OS_LOG_TYPE_INFO, "*** Not all messages successfully stored in database. Not sending IMMessageCheckpointLocationMessageStored checkpoint. guid %@", buf, 0xCu);
                  }
                }
                int v189 = 0;
              }
              else
              {
LABEL_260:
                v188 = im_checkpointIDSService();
                im_sendMessageCheckpointIfNecessary();

                int v189 = 1;
              }
              uint64_t v192 = v318;
              if (v306)
              {
                char v193 = v303 ^ 1;
                if (*(unsigned char *)(v318 + 303)) {
                  char v193 = 1;
                }
                if ((v193 & 1) == 0)
                {
                  [*(id *)(v318 + 40) _handleMessageSentToSelf:*(void *)(v318 + 32) chatIdentifier:*(void *)(*(void *)(*(void *)(v318 + 264) + 8) + 40) style:v339 isLocal:0 account:*(void *)(v318 + 80)];
                  uint64_t v192 = v318;
                }
              }
              if (([*(id *)(v192 + 32) isTypingMessage] & 1) == 0)
              {
                v194 = +[IMMetricsCollector sharedInstance];
                [v194 trackEvent:IMMetricsCollectorEventiMessageReceived];
              }
              uint64_t v343 = IMMetricsCollectorError;
              unsigned int v195 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", sub_86344((uint64_t)[*(id *)(v318 + 32) errorCode]));
              v344 = v195;
              v196 = +[NSDictionary dictionaryWithObjects:&v344 forKeys:&v343 count:1];

              id v197 = +[IMMetricsCollector sharedInstance];
              [v197 trackEvent:IMMetricsCollectorEventIncomingMessage withDictionary:v196];

              uint64_t v198 = v318;
              uint64_t v199 = *(void *)(v318 + 152);
              if (v199)
              {
                [*(id *)(v318 + 40) didReceiveDisplayNameChange:v199 fromID:*(void *)(*(void *)(*(void *)(v318 + 272) + 8) + 40) toIdentifier:*(void *)(v318 + 112) forChat:*(void *)(*(void *)(*(void *)(v318 + 264) + 8) + 40) style:v339 account:*(void *)(v318 + 80)];
                uint64_t v198 = v318;
              }
              v201 = *(void **)(v198 + 32);
              id v200 = (id *)(v198 + 32);
              v202 = [v201 fileTransferGUIDs];
              BOOL v203 = [v202 count] != 0;

              v204 = [*v200 sender];
              uint64_t IsEmail = IMStringIsEmail();

              v341[0] = IMMetricsCollectorFzErrorKey;
              v206 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", [*v200 errorCode]);
              v342[0] = v206;
              v341[1] = IMMetricsCollectorMessageErrorKey;
              v207 = +[NSNumber numberWithLong:0];
              v342[1] = v207;
              v341[2] = IMMetricsCollectorIsTypingIndicatorKey;
              v208 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(v318 + 48) isTypingMessage]);
              v342[2] = v208;
              v341[3] = IMMetricsCollectorIsGroupMessageKey;
              v209 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v318 + 303)];
              v342[3] = v209;
              v341[4] = IMMetricsCollectorIsFromPhoneNumberKey;
              v210 = +[NSNumber numberWithBool:IsEmail ^ 1];
              v342[4] = v210;
              v341[5] = IMMetricsCollectorIsFromEmailKey;
              id v211 = +[NSNumber numberWithInt:IsEmail];
              v342[5] = v211;
              v341[6] = IMMetricsCollectorHasAttachmentsKey;
              v212 = +[NSNumber numberWithBool:v203];
              v342[6] = v212;
              v307 = +[NSDictionary dictionaryWithObjects:v342 forKeys:v341 count:7];

              v213 = +[IMMetricsCollector sharedInstance];
              [v213 trackEvent:IMMetricsCollectorEventIMessageReceivedMessageSingleComponent withDictionary:v307];

              uint64_t v214 = *(void *)(*(void *)(v318 + 280) + 8);
              id v215 = *(void **)(v214 + 40);
              *(void *)(v214 + 40) = 0;

              if (*(unsigned char *)(v318 + 304))
              {
                v216 = v317;
                if (v304)
                {
LABEL_297:
                  char v231 = +[IMDChatRegistry sharedInstance];
                  v317 = [v231 existingChatWithIdentifier:*(void *)(*(void *)(*(void *)(v318 + 264) + 8) + 40) account:*(void *)(v318 + 80)];
                  goto LABEL_298;
                }
              }
              else
              {
                if (v304)
                {
                  id v217 = *(void **)(v318 + 40);
                  v218 = [*(id *)(v318 + 72) _stripFZIDPrefix];
                  id v219 = [v217 chatForChatIdentifier:v218 style:45];

                  if (IMOSLoggingEnabled())
                  {
                    id v220 = OSLogHandleForIMFoundationCategory();
                    if (os_log_type_enabled(v220, OS_LOG_TYPE_INFO))
                    {
                      uint64_t v221 = *(void *)(v318 + 208);
                      *(_DWORD *)buf = 138412546;
                      *(void *)v347 = v221;
                      *(_WORD *)&v347[8] = 2112;
                      *(void *)&v347[10] = v219;
                      _os_log_impl(&dword_0, v220, OS_LOG_TYPE_INFO, "Updating last active device to be %@ for chat %@ on new incoming message", buf, 0x16u);
                    }
                  }
                  v222 = [*(id *)(v318 + 40) deliveryController];
                  uint64_t v223 = *(void *)(v318 + 208);
                  uint64_t v224 = [*(id *)(v318 + 72) _stripFZIDPrefix];
                  [v222 updateLatestActiveDestination:v223 ForHandle:v224 incomingType:0];

                  if ((unint64_t)[*(id *)(v318 + 176) count] > 2)
                  {
                    if (IMOSLoggingEnabled())
                    {
                      char v232 = OSLogHandleForIMFoundationCategory();
                      if (os_log_type_enabled(v232, OS_LOG_TYPE_INFO))
                      {
                        id v233 = [*(id *)(v318 + 32) guid];
                        *(_DWORD *)buf = 138412290;
                        *(void *)v347 = v233;
                        _os_log_impl(&dword_0, v232, OS_LOG_TYPE_INFO, "Not updating last addressed handle for msg guid %@ as we couldnt find a group for it", buf, 0xCu);
                      }
                    }
                  }
                  else
                  {
                    _UpdateLastAddressedHandle(*(void **)(v318 + 48), *(void **)(v318 + 112), v219);
                  }

                  goto LABEL_297;
                }
                if (IMOSLoggingEnabled())
                {
                  id v225 = OSLogHandleForIMFoundationCategory();
                  if (os_log_type_enabled(v225, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v226 = *(void *)(v318 + 208);
                    *(_DWORD *)buf = 138412546;
                    *(void *)v347 = v226;
                    *(_WORD *)&v347[8] = 2112;
                    *(void *)&v347[10] = v317;
                    _os_log_impl(&dword_0, v225, OS_LOG_TYPE_INFO, "Updating last active device to be %@ for chat %@ on incoming message", buf, 0x16u);
                  }
                }
                id v227 = [*(id *)(v318 + 40) deliveryController];
                uint64_t v228 = *(void *)(v318 + 208);
                v229 = [*(id *)(v318 + 72) _stripFZIDPrefix];
                [v227 updateLatestActiveDestination:v228 ForHandle:v229 incomingType:0];

                v216 = v317;
              }
              if ([v216 state] == (char *)&dword_0 + 3)
              {
LABEL_299:
                v234 = +[IMFeatureFlags sharedFeatureFlags];
                unsigned int v235 = [v234 isBIAEnabled];

                if (v235 && *(unsigned char *)(v318 + 310) && v317) {
                  [v317 addBIAContextWithUserID:*(void *)(v318 + 112) referenceID:*(void *)(v318 + 216)];
                }

                if (+[IMSpamFilterHelper isInternationalSpamFilteringEnabled](IMSpamFilterHelper, "isInternationalSpamFilteringEnabled")&& ([*(id *)(v318 + 32) isTypingMessage] & 1) == 0)
                {
                  if ([v317 smsHandshakeState] == 1)
                  {
                    id v236 = +[IMMetricsCollector sharedInstance];
                    [v236 trackSpamEvent:4];

                    [v317 updateSMSHandshakeState:2];
                    id v237 = +[IMDChatRegistry sharedInstance];
                    id v238 = [v317 chatIdentifier];
                    id v239 = objc_msgSend(v237, "existingSMSChatForID:withChatStyle:", v238, objc_msgSend(v317, "style"));

                    if (v239)
                    {
                      if (IMOSLoggingEnabled())
                      {
                        id v240 = OSLogHandleForIMFoundationCategory();
                        if (os_log_type_enabled(v240, OS_LOG_TYPE_INFO))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_0, v240, OS_LOG_TYPE_INFO, "Updating sibling chat handshake state to IMChatSMSHandshakeStateSuccess", buf, 2u);
                        }
                      }
                      [v239 updateSMSHandshakeState:2];
                    }
                  }
                  if ([v317 messageHandshakeState] == 1)
                  {
                    id v241 = +[IMMetricsCollector sharedInstance];
                    [v241 trackSpamEvent:3];

                    [v317 updateMessageHandshakeState:2];
                  }
                }
                uint64_t v242 = v318;
                if (v317)
                {
                  id v243 = [*(id *)(v318 + 80) service];
                  id v244 = [v243 internalName];
                  [*(id *)(v318 + 48) setService:v244];

                  id v245 = +[IMDChatStore sharedInstance];
                  [v245 updatePersonCentricIDForHandlesInChatWithMessage:*(void *)(v318 + 48) fromIdentifier:*(void *)(v318 + 72) personCentricID:*(void *)(v318 + 224) chat:v317];

                  uint64_t v246 = [*(id *)(v318 + 64) _stringForKey:MessageDictionaryNicknameParticipantTruncatedRIDKey];
                  if (v246) {
                    id v247 = (__CFString *)v246;
                  }
                  else {
                    id v247 = &stru_E0738;
                  }
                  if (IMOSLoggingEnabled())
                  {
                    id v248 = OSLogHandleForIMFoundationCategory();
                    if (os_log_type_enabled(v248, OS_LOG_TYPE_INFO))
                    {
                      uint64_t v249 = *(void *)(v318 + 72);
                      *(_DWORD *)buf = 138412546;
                      *(void *)v347 = v247;
                      *(_WORD *)&v347[8] = 2112;
                      *(void *)&v347[10] = v249;
                      _os_log_impl(&dword_0, v248, OS_LOG_TYPE_INFO, "Received truncated record id %@ from %@", buf, 0x16u);
                    }
                  }
                  id v250 = +[IMDNicknameController sharedInstance];
                  [v250 verifyTruncatedRecordIDMatchesPersonalNickname:v247 forChat:v317];

                  uint64_t v242 = v318;
                  if (!*(unsigned char *)(v318 + 304))
                  {
                    id v251 = +[IMFeatureFlags sharedFeatureFlags];
                    unsigned int v252 = [v251 isCarrierPigeonEnabled];

                    if (v252)
                    {
                      id v253 = [*(id *)(v318 + 64) _stringForKey:@"aogrs"];
                      id v254 = [*(id *)(v318 + 64) _stringForKey:@"aogre"];
                      if (v253)
                      {
                        id v255 = [*(id *)(v318 + 72) _stripFZIDPrefix];
                        id v256 = [v313 _stripFZIDPrefix];
                        id v257 = +[NSDate __im_iMessageDateFromTimeStamp:*(void *)(v318 + 144)];
                        if (IMOSLoggingEnabled())
                        {
                          id v258 = OSLogHandleForIMFoundationCategory();
                          if (os_log_type_enabled(v258, OS_LOG_TYPE_INFO))
                          {
                            *(_DWORD *)buf = 138412802;
                            *(void *)v347 = v253;
                            *(_WORD *)&v347[8] = 2112;
                            *(void *)&v347[10] = v255;
                            *(_WORD *)&v347[18] = 2112;
                            *(void *)&v347[20] = v256;
                            _os_log_impl(&dword_0, v258, OS_LOG_TYPE_INFO, "Received offGridSubscriptionValidationToken = \"%@\" from %@ to %@", buf, 0x20u);
                          }
                        }
                        id v259 = +[IMDOffGridAvailabilityVerificationManager sharedInstance];
                        [v259 verifyOffGridSubscriptionMatchesSubscriptionValidationToken:v253 encryptionValidationToken:v254 receivedByHandleID:v256 fromHandleID:v255 messageDate:v257];
                      }
                      else if (IMOSLoggingEnabled())
                      {
                        v260 = OSLogHandleForIMFoundationCategory();
                        if (os_log_type_enabled(v260, OS_LOG_TYPE_INFO))
                        {
                          uint64_t v261 = *(void *)(v318 + 72);
                          *(_DWORD *)buf = 138412290;
                          *(void *)v347 = v261;
                          _os_log_impl(&dword_0, v260, OS_LOG_TYPE_INFO, "Message from %@ did not contain offGridSubscriptionValidationToken.", buf, 0xCu);
                        }
                      }
                    }
                    char v262 = [*(id *)(v318 + 64) _stringForKey:@"arc"];
                    __int16 v263 = [*(id *)(v318 + 64) _stringForKey:@"are"];
                    if (v262)
                    {
                      BOOL v264 = [*(id *)(v318 + 72) _stripFZIDPrefix];
                      char v265 = [v313 _stripFZIDPrefix];
                      char v266 = +[NSDate __im_iMessageDateFromTimeStamp:*(void *)(v318 + 144)];
                      if (IMOSLoggingEnabled())
                      {
                        char v267 = OSLogHandleForIMFoundationCategory();
                        if (os_log_type_enabled(v267, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)buf = 138412802;
                          *(void *)v347 = v262;
                          *(_WORD *)&v347[8] = 2112;
                          *(void *)&v347[10] = v264;
                          *(_WORD *)&v347[18] = 2112;
                          *(void *)&v347[20] = v265;
                          _os_log_impl(&dword_0, v267, OS_LOG_TYPE_INFO, "Received availabilityVerificationRecipientChannelID = \"%@\" from %@ to %@", buf, 0x20u);
                        }
                      }
                      char v268 = +[IMDAvailabilityVerificationManager sharedInstance];
                      [v268 verifyPersonalSubscriptionMatchesSubscriptionValidationToken:v262 encryptionValidationToken:v263 receivedByHandleID:v265 fromHandleID:v264 messageDate:v266];
                    }
                    else if (IMOSLoggingEnabled())
                    {
                      char v269 = OSLogHandleForIMFoundationCategory();
                      if (os_log_type_enabled(v269, OS_LOG_TYPE_INFO))
                      {
                        uint64_t v270 = *(void *)(v318 + 72);
                        *(_DWORD *)buf = 138412290;
                        *(void *)v347 = v270;
                        _os_log_impl(&dword_0, v269, OS_LOG_TYPE_INFO, "Message from %@ did not contain an availabilityVerificationRecipientChannelID. Not performing validation.", buf, 0xCu);
                      }
                    }
                    uint64_t v242 = v318;
                  }
                }
                objc_msgSend(*(id *)(v242 + 40), "_autoReportChatAsUnknown:chatIsNew:");
                uint64_t v271 = v318;
                if (*(unsigned char *)(v318 + 311)) {
                  goto LABEL_373;
                }
                if (*(unsigned char *)(v318 + 307)
                  && (uint64_t v272 = *(void **)(v318 + 40),
                      +[NSDate __im_iMessageDateFromTimeStamp:](NSDate, "__im_iMessageDateFromTimeStamp:", *(void *)(v318 + 144)), v273 = objc_claimAutoreleasedReturnValue(), LODWORD(v272) = [v272 _shouldOptimizedDeliveryReceiptForConversation:v317 withMessageTimeStamp:v273], v273, uint64_t v271 = v318, v272))
                {
                  int v274 = IMOSLoggingEnabled();
                  uint64_t v271 = v318;
                  if (!v274)
                  {
LABEL_373:
                    uint64_t v299 = *(void *)(v271 + 256);
                    if (v299)
                    {
                      if (*(unsigned char *)(v271 + 300))
                      {
                        [*(id *)(v271 + 40) noteLastItemProcessed];
                        uint64_t v299 = *(void *)(v318 + 256);
                      }
                      (*(void (**)(void))(v299 + 16))();
                    }

                    goto LABEL_378;
                  }
                  v275 = OSLogHandleForIMFoundationCategory();
                  if (os_log_type_enabled(v275, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v276 = [*(id *)(v318 + 32) guid];
                    *(_DWORD *)buf = 138412290;
                    *(void *)v347 = v276;
                    _os_log_impl(&dword_0, v275, OS_LOG_TYPE_INFO, "Not sending delivery receipt for msg with guid: %@ we belive it's been handled elsewhere", buf, 0xCu);
                  }
                }
                else
                {
                  if (v189)
                  {
                    if (v302 && *(unsigned char *)(v271 + 305))
                    {
                      id v277 = 0;
                    }
                    else
                    {
                      id v277 = [*(id *)(v271 + 232) BOOLValue];
                      uint64_t v271 = v318;
                    }
                    v278 = *(void **)(v271 + 40);
                    id v279 = [*(id *)(v271 + 136) service];
                    uint64_t v280 = *(void *)(v318 + 240);
                    v281 = [*(id *)(v318 + 32) guid];
                    LOBYTE(v278) = [v278 _sendCertifiedDeliveryReceiptIfPossible:v279 messageContext:v280 guid:v281 messageWasStored:1 needsDeliveryReceipt:v277 failureReason:0];

                    uint64_t v271 = v318;
                    if ((v278 & 1) == 0)
                    {
                      id v282 = *(void **)(v318 + 40);
                      uint64_t v283 = *(void *)(v318 + 56);
                      uint64_t v284 = *(void *)(v318 + 208);
                      uint64_t v285 = *(void *)(v318 + 248);
                      id v286 = +[NSNumber numberWithBool:v277];
                      uint64_t v287 = *(void *)(v318 + 112);
                      id v288 = [*(id *)(v318 + 136) account];
                      [v282 sendDeliveryReceiptForMessageID:v283 toID:v284 deliveryContext:v285 needsDeliveryReceipt:v286 callerID:v287 account:v288];

                      uint64_t v271 = v318;
                    }
                  }
                  unsigned __int8 v289 = [*(id *)(v271 + 32) isTypingMessage];
                  uint64_t v271 = v318;
                  if (v289) {
                    goto LABEL_373;
                  }
                  [*(id *)(v318 + 136) sendManualAckForMessageWithContext:*(void *)(v318 + 240)];
                  if (([*(id *)(v318 + 32) isFromMe] & 1) == 0)
                  {
                    id v290 = +[IMMessageNotificationTimeManager sharedInstance];
                    [v290 sendNotificationMessageIfNeededForIncomingMessageFromChatIdentifier:*(void *)(*(void *)(*(void *)(v318 + 264) + 8) + 40)];
                  }
                  __int16 v291 = +[IMMessageNotificationTimeManager sharedInstance];
                  [v291 tearDownSessionForChatIdentifier:*(void *)(*(void *)(*(void *)(v318 + 264) + 8) + 40)];

                  long long v321 = 0u;
                  long long v322 = 0u;
                  long long v319 = 0u;
                  long long v320 = 0u;
                  CFStringRef v292 = +[IMDChatRegistry sharedInstance];
                  __int16 v293 = [v292 allExistingSupportedServiceChatsWithIdentifier:*(void *)(*(void *)(*(void *)(v318 + 264) + 8) + 40) style:v339];

                  id v294 = [v293 countByEnumeratingWithState:&v319 objects:v340 count:16];
                  if (v294)
                  {
                    uint64_t v295 = *(void *)v320;
                    do
                    {
                      for (j = 0; j != v294; j = (char *)j + 1)
                      {
                        if (*(void *)v320 != v295) {
                          objc_enumerationMutation(v293);
                        }
                        v297 = *(void **)(*((void *)&v319 + 1) + 8 * (void)j);
                        v298 = [*(id *)(v318 + 32) guid];
                        [v297 updateLastSeenMessageGuidIfNeeded:v298];
                      }
                      id v294 = [v293 countByEnumeratingWithState:&v319 objects:v340 count:16];
                    }
                    while (v294);
                  }
                }
                uint64_t v271 = v318;
                goto LABEL_373;
              }
              char v230 = *(void **)(v318 + 40);
              char v231 = [v317 chatIdentifier];
              LOBYTE(v301) = v302;
              objc_msgSend(v230, "didUpdateChatStatus:chat:style:displayName:groupID:handleInfo:account:isBlackholed:", 2, v231, objc_msgSend(v317, "style"), 0, 0, v311, *(void *)(v318 + 80), v301);
LABEL_298:

              goto LABEL_299;
            }
            id v164 = v317;
            v165 = v164;
            if (v312)
            {
              LOBYTE(v300) = v302;
              [*(id *)(v318 + 40) didJoinChat:*(void *)(*(void *)(*(void *)(v318 + 264) + 8) + 40) style:v339 displayName:*(void *)(v318 + 152) groupID:*(void *)(v318 + 160) handleInfo:v311 account:*(void *)(v318 + 80) isBlackholed:v300];
              BOOL v166 = *(unsigned char *)(v318 + 303) == 0;
              id v167 = +[IMDChatRegistry sharedInstance];
              id v168 = v167;
              if (v166)
              {
                id v170 = [v167 existingChatForID:*(void *)(*(void *)(*(void *)(v318 + 264) + 8) + 40) account:*(void *)(v318 + 80)];
              }
              else
              {
                id v169 = [v305 allObjects];
                id v170 = [v168 existingChatForIDs:v169 account:*(void *)(v318 + 80) displayName:*(void *)(v318 + 152) groupID:*(void *)(v318 + 160) style:43];

                if (![*(id *)(v318 + 160) length]) {
                  goto LABEL_238;
                }
                if (IMOSLoggingEnabled())
                {
                  uint64_t v171 = OSLogHandleForIMFoundationCategory();
                  if (os_log_type_enabled(v171, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v172 = *(void *)(v318 + 160);
                    *(_DWORD *)buf = 138412546;
                    *(void *)v347 = v172;
                    *(_WORD *)&v347[8] = 2112;
                    *(void *)&v347[10] = v170;
                    _os_log_impl(&dword_0, v171, OS_LOG_TYPE_INFO, "     ** Setting group_id to %@ on chat %@, as we just got invited to it!", buf, 0x16u);
                  }
                }
                [v170 setGroupID:*(void *)(v318 + 160)];
                id v168 = +[IMDChatStore sharedInstance];
                [v168 storeChat:v170];
              }
            }
            else
            {
              id v170 = v164;
            }
LABEL_238:
            double v174 = +[IMFeatureFlags sharedFeatureFlags];
            unsigned int v175 = [v174 isTranscriptSharingEnabled];

            uint64_t v176 = v318;
            if (v175)
            {
              if (*(void *)(v318 + 96))
              {
                [v170 setState:4];
                [v170 setEmergencyUserInfo:*(void *)(v318 + 96)];
                [*(id *)(v318 + 48) setInitialTranscriptSharingItem:v312];
                unsigned int v177 = [v170 isStewieSharingChat];
                uint64_t v176 = v318;
                if (v177)
                {
                  [v170 updateIsFiltered:0];
                  uint64_t v176 = v318;
                }
              }
            }
            [*(id *)(v176 + 40) _fixParticipantsForChat:v170];
            _UpdateLastAddressedHandle(*(void **)(v318 + 48), *(void **)(v318 + 112), v170);
            if (v306) {
              [v315 addObject:*(void *)(v318 + 32)];
            }
            goto LABEL_244;
          }
          id v89 = +[IMDAccountController sharedAccountController];
          id v90 = [v89 activeAccountsAreEligibleForHawking];

          if (+[IMSpamFilterHelper isBlackholeEnabledForEligibleAccounts:v90])
          {
            BOOL v91 = *(unsigned char *)(v318 + 303) == 0;
            v92 = +[IMMetricsCollector sharedInstance];
            int v93 = v92;
            if (v91) {
              uint64_t v94 = 11;
            }
            else {
              uint64_t v94 = 12;
            }
            [v92 trackSpamEvent:v94];

            if ((v304 & 1) == 0)
            {
              unsigned int v105 = [v317 isBlackholed];
              if (v105)
              {
                BOOL v106 = *(unsigned char *)(v318 + 303) == 0;
                v107 = +[IMMetricsCollector sharedInstance];
                uint64_t v108 = v107;
                if (v106) {
                  uint64_t v109 = 13;
                }
                else {
                  uint64_t v109 = 14;
                }
                [v107 trackSpamEvent:v109];
              }
              if (IMOSLoggingEnabled())
              {
                v110 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
                {
                  id v111 = [v317 chatIdentifier];
                  v112 = v111;
                  CFStringRef v113 = @"NO";
                  if (v105) {
                    CFStringRef v113 = @"YES";
                  }
                  *(_DWORD *)buf = 138412546;
                  *(void *)v347 = v111;
                  *(_WORD *)&v347[8] = 2112;
                  *(void *)&v347[10] = v113;
                  _os_log_impl(&dword_0, v110, OS_LOG_TYPE_INFO, "Found existing chat (%@) with blackhole status: %@", buf, 0x16u);
                }
              }
              goto LABEL_177;
            }
            int v95 = *(void **)(v318 + 40);
            uint64_t v96 = *(void *)(v318 + 72);
            uint64_t v97 = *(void *)(v318 + 112);
            if (*(unsigned char *)(v318 + 303))
            {
              if ([v95 _shouldBlackholeGroupChatFromSender:v96 toRecipient:v97 withOtherParticipants:*(void *)(v318 + 176) forAccount:*(void *)(v318 + 80)])
              {
                if (IMOSLoggingEnabled())
                {
                  id v98 = OSLogHandleForIMFoundationCategory();
                  if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v99 = *(void *)(v318 + 56);
                    uint64_t v100 = *(void *)(v318 + 72);
                    uint64_t v101 = *(void *)(v318 + 112);
                    *(_DWORD *)buf = 138412802;
                    *(void *)v347 = v99;
                    *(_WORD *)&v347[8] = 2112;
                    *(void *)&v347[10] = v100;
                    *(_WORD *)&v347[18] = 2112;
                    *(void *)&v347[20] = v101;
                    _os_log_impl(&dword_0, v98, OS_LOG_TYPE_INFO, "Should blackhole group chat (%@) from (%@) to (%@)", buf, 0x20u);
                  }
LABEL_175:

                  goto LABEL_176;
                }
                goto LABEL_176;
              }
            }
            else if ([v95 _shouldBlackholeChatFromSender:v96 toRecipient:v97 forAccount:*(void *)(v318 + 80)])
            {
              if (IMOSLoggingEnabled())
              {
                id v98 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
                {
                  uint64_t v114 = *(void *)(v318 + 56);
                  uint64_t v115 = *(void *)(v318 + 72);
                  uint64_t v116 = *(void *)(v318 + 112);
                  *(_DWORD *)buf = 138412802;
                  *(void *)v347 = v114;
                  *(_WORD *)&v347[8] = 2112;
                  *(void *)&v347[10] = v115;
                  *(_WORD *)&v347[18] = 2112;
                  *(void *)&v347[20] = v116;
                  _os_log_impl(&dword_0, v98, OS_LOG_TYPE_INFO, "Should blackhole message (%@) from (%@) to (%@)", buf, 0x20u);
                }
                goto LABEL_175;
              }
LABEL_176:
              unsigned int v105 = 1;
LABEL_177:
              int v117 = v105;
              if (v105)
              {
                int v117 = v105;
                if (!*(unsigned char *)(v318 + 303))
                {
                  if (*(unsigned char *)(v318 + 305))
                  {
                    if (IMOSLoggingEnabled())
                    {
                      uint64_t v118 = OSLogHandleForIMEventCategory();
                      if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
                      {
                        uint64_t v119 = *(void *)(v318 + 56);
                        uint64_t v120 = *(void *)(v318 + 72);
                        id v121 = [v317 chatIdentifier];
                        *(_DWORD *)buf = 138412802;
                        *(void *)v347 = v119;
                        *(_WORD *)&v347[8] = 2112;
                        *(void *)&v347[10] = v120;
                        *(_WORD *)&v347[18] = 2112;
                        *(void *)&v347[20] = v121;
                        _os_log_impl(&dword_0, v118, OS_LOG_TYPE_INFO, "Blackholing message (%@) from (%@) to (%@)", buf, 0x20u);
                      }
                    }
                    id v122 = [*(id *)(v318 + 40) deliveryController];
                    uint64_t v123 = *(void *)(v318 + 72);
                    uint64_t v124 = *(void *)(v318 + 112);
                    v125 = [*(id *)(v318 + 40) idsAccountForURI:v124 IDSServiceName:@"com.apple.madrid"];
                    id v126 = *(void **)(v318 + 56);
                    v332[0] = _NSConcreteStackBlock;
                    v332[1] = 3221225472;
                    v332[2] = sub_14470;
                    v332[3] = &unk_DD998;
                    id v333 = v126;
                    [v122 sendMessageError:502 toToken:0 toID:v123 toGroup:0 fromID:v124 fromAccount:v125 forMessageID:v333 completionBlock:v332];

                    goto LABEL_188;
                  }
                  int v117 = 1;
                }
              }
              if (v105)
              {
LABEL_188:
                objc_msgSend(*(id *)(v318 + 32), "setFlags:", (unint64_t)objc_msgSend(*(id *)(v318 + 32), "flags") | 0x2000);
                int v117 = 1;
              }
LABEL_189:
              int v302 = v117;
              if (+[IMSpamFilterHelper isInternationalSpamFilteringEnabled](IMSpamFilterHelper, "isInternationalSpamFilteringEnabled")&& [v317 receivedBlackholeError])
              {
                [v317 updateReceivedBlackholeError:0];
                v127 = +[IMDChatStore sharedInstance];
                v330[0] = _NSConcreteStackBlock;
                v330[1] = 3221225472;
                v330[2] = sub_145EC;
                v330[3] = &unk_DD9C0;
                v330[4] = *(void *)(v318 + 40);
                id v331 = *(id *)(v318 + 80);
                [v127 remapMessageError:43 toError:0 forChat:v317 completion:v330];
              }
              goto LABEL_192;
            }
          }
          int v117 = 0;
          goto LABEL_189;
        }
        id v102 = *(id *)(*(void *)(*(void *)(a1 + 272) + 8) + 40);
        uint64_t v19 = *(void **)(v23 + 40);
        *(void *)(v23 + 40) = v102;
      }

      goto LABEL_37;
    }
    id v9 = +[IMDFileTransferCenter sharedInstance];
    uint64_t v10 = [v9 guidsForStoredAttachmentPayloadDataURLs:v308 messageGUID:*(void *)(a1 + 56)];

    [*(id *)(a1 + 48) setFileTransferGUIDs:v10];
LABEL_20:

    goto LABEL_31;
  }
  uint64_t v11 = [*(id *)(a1 + 32) balloonBundleID];
  unsigned __int8 v12 = [v11 isEqualToString:IMBalloonPluginIdentifierRichLinks];

  int v13 = IMOSLoggingEnabled();
  if (v12)
  {
    if (v13)
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        id v15 = [*(id *)(a1 + 32) guid];
        *(_DWORD *)buf = 138412290;
        *(void *)v347 = v15;
        _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "Did not download payload data for message %@ but we are continuing", buf, 0xCu);
      }
    }
    uint64_t v10 = v316;
    id v316 = 0;
    goto LABEL_20;
  }
  if (v13)
  {
    id v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      id v17 = [*(id *)(a1 + 32) guid];
      *(_DWORD *)buf = 138412290;
      *(void *)v347 = v17;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "PayloadAttachments Failed downloading payload data for message %@", buf, 0xCu);
    }
  }
  uint64_t v18 = *(void *)(a1 + 256);
  if (v18)
  {
    if (*(unsigned char *)(a1 + 300))
    {
      [*(id *)(a1 + 40) noteLastItemProcessed];
      uint64_t v18 = *(void *)(a1 + 256);
    }
    (*(void (**)(void))(v18 + 16))();
  }
LABEL_378:
}

void sub_14470(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      unsigned __int8 v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        int v16 = 138412290;
        uint64_t v17 = v13;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "Succesfully blackholed message: %@", (uint8_t *)&v16, 0xCu);
      }
    }
  }
  else if (v11)
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      int v16 = 138412546;
      uint64_t v17 = v15;
      __int16 v18 = 1024;
      int v19 = a5;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "** Failed to blackhole message: (%@) with error: %d", (uint8_t *)&v16, 0x12u);
    }
  }
}

void sub_145EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      CFStringRef v7 = 0;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8 * (void)v7);
        id v9 = +[IMDMessageStore sharedInstance];
        id v10 = [v9 messageWithGUID:v8];

        int v11 = [*(id *)(a1 + 32) broadcasterForChatListeners];
        unsigned __int8 v12 = [*(id *)(a1 + 40) accountID];
        [v11 account:v12 chat:0 style:0 chatProperties:0 messageUpdated:v10];

        CFStringRef v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }
}

void sub_14754(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  int v9 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v9)
    {
      id v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        int v11 = *(_DWORD *)(a1 + 40);
        uint64_t v12 = *(void *)(a1 + 32);
        int v15 = 67109378;
        int v16 = v11;
        __int16 v17 = 2112;
        uint64_t v18 = v12;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEBUG, "Finished sending attachment download error: %d  to token: %@", (uint8_t *)&v15, 0x12u);
      }
LABEL_9:
    }
  }
  else if (v9)
  {
    id v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *(_DWORD *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 32);
      int v15 = 67109378;
      int v16 = v13;
      __int16 v17 = 2112;
      uint64_t v18 = v14;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEBUG, "** Failed sending attachment download error: %d  to token: %@", (uint8_t *)&v15, 0x12u);
    }
    goto LABEL_9;
  }
}

void sub_148D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = im_checkpointIDSService();
  im_sendMessageCheckpointIfNecessary();

  uint64_t v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472;
  int v16 = sub_14AB4;
  __int16 v17 = &unk_DDAB0;
  id v19 = *(id *)(a1 + 72);
  id v5 = v3;
  char v21 = *(unsigned char *)(a1 + 89);
  uint64_t v6 = *(void *)(a1 + 40);
  id v20 = v5;
  uint64_t v18 = v6;
  id v7 = objc_retainBlock(&v14);
  if (*(unsigned char *)(a1 + 89)) {
    [*(id *)(a1 + 40) noteLastItemProcessed];
  }
  uint64_t v22 = *(void *)(a1 + 48);
  BOOL v8 = 1;
  int v9 = +[NSArray arrayWithObjects:&v22 count:1];
  id v10 = IMServiceNameForCanonicalIDSAddresses();

  int v11 = +[IMSenderContext businessChatContextWithServiceName:v10];
  uint64_t v12 = [*(id *)(a1 + 40) attachmentController];
  int v13 = v12;
  if (!*(unsigned char *)(a1 + 90)) {
    BOOL v8 = *(unsigned char *)(a1 + 91) != 0;
  }
  objc_msgSend(v12, "retrieveAttachmentsForMessage:inlineAttachments:displayID:topic:comingFromStorage:shouldForceAutoDownload:senderContext:completionBlock:", *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), v10, v8, 0, v11, v7, v14, v15, v16, v17);
}

void sub_14AB4(uint64_t a1, void *a2, void *a3, char a4, int a5, void *a6, uint64_t a7, void *a8)
{
  id v15 = a2;
  id v16 = a3;
  id v17 = a6;
  id v18 = a8;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_14D7C;
  v35[3] = &unk_DDA60;
  id v41 = *(id *)(a1 + 40);
  id v19 = v15;
  id v36 = v19;
  id v20 = v16;
  id v37 = v20;
  char v45 = a4;
  int v44 = a5;
  id v21 = v17;
  id v38 = v21;
  uint64_t v43 = a7;
  id v22 = v18;
  id v39 = v22;
  id v23 = *(id *)(a1 + 48);
  char v46 = *(unsigned char *)(a1 + 56);
  uint64_t v24 = *(void *)(a1 + 32);
  id v42 = v23;
  uint64_t v40 = v24;
  uint64_t v25 = objc_retainBlock(v35);
  unsigned int v26 = [v19 balloonBundleID];
  uint64_t v27 = IMBalloonExtensionIDWithSuffix();
  LODWORD(v15) = [v26 isEqualToString:v27];

  if (v15)
  {
    if ([v19 isFromMe]) {
      +[IMSenderContext fromMeContext];
    }
    else {
    uint64_t v28 = +[IMSenderContext businessChatContext];
    }
    uint64_t v29 = +[MessageTranscodeController sharedInstance];
    uint64_t v30 = [v19 guid];
    uint64_t v31 = [v19 payloadData];
    id v32 = [v19 balloonBundleID];
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_14E0C;
    v33[3] = &unk_DDA88;
    uint64_t v34 = v25;
    [v29 generateSnapshotForMessageGUID:v30 payloadData:v31 balloonBundleID:v32 senderContext:v28 completionBlock:v33];
  }
  else
  {
    ((void (*)(void *))v25[2])(v25);
  }
}

uint64_t sub_14D7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void, void))(v2 + 16))(v2, *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 100), *(unsigned int *)(a1 + 96), *(void *)(a1 + 48), *(void *)(a1 + 88), *(void *)(a1 + 56), *(void *)(a1 + 80));
  }
  if (*(unsigned char *)(a1 + 101)) {
    [*(id *)(a1 + 64) noteLastItemProcessed];
  }
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 80) + 16);

  return v4();
}

uint64_t sub_14E0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_150A4(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_msgSend(*(id *)(a1 + 32), "_handleNicknameReceived:fromIdentifier:withMessageItem:isSnapTrustedUser:", *(void *)(a1 + 40), *(void *)(a1 + 48), 0, objc_msgSend(*(id *)(a1 + 56), "BOOLValueForKey:withDefault:", @"stu", 1));
  id v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    id v3 = v4;
  }
}

void sub_16BD4(uint64_t a1, void *a2)
{
  id v4 = a2;
  [*(id *)(a1 + 32) _handleDeleteCommandWithMessageDictionary:*(void *)(a1 + 40)];
  id v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    id v3 = v4;
  }
}

void sub_16FD8(uint64_t a1, void *a2)
{
  id v4 = a2;
  [*(id *)(a1 + 32) recoverChatsForCommandDictionary:*(void *)(a1 + 40)];
  id v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    id v3 = v4;
  }
}

void sub_17328(uint64_t a1, void *a2)
{
  id v33 = a2;
  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      CFStringRef v5 = *(const __CFString **)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      uint64_t v35 = v4;
      __int16 v36 = 2112;
      CFStringRef v37 = v5;
      __int16 v38 = 2112;
      uint64_t v39 = v6;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "Received group message command: %@ from: %@   token: %@", buf, 0x20u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 56);
      if (*(void *)(a1 + 64)) {
        CFStringRef v9 = @"YES";
      }
      else {
        CFStringRef v9 = @"NO";
      }
      uint64_t v10 = *(void *)(a1 + 72);
      *(_DWORD *)buf = 138412802;
      uint64_t v35 = v8;
      __int16 v36 = 2112;
      CFStringRef v37 = v9;
      __int16 v38 = 2112;
      uint64_t v39 = v10;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "fromIDSID:%@, needsDeliveryReceipt %@, deliveryContext %@", buf, 0x20u);
    }
  }
  id v11 = *(id *)(a1 + 32);
  uint64_t v12 = [*(id *)(a1 + 80) _FTOptionallyDecompressData];
  int v13 = JWDecodeDictionary();

  if (v13)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "Using encrypted group payload", buf, 2u);
      }
    }
    id v15 = v13;

    id v11 = v15;
  }
  id v16 = *(void **)(a1 + 88);
  id v17 = [*(id *)(a1 + 96) account];
  id v18 = [v16 imdAccountForIDSAccount:v17];

  id v19 = [v11 objectForKeyedSubscript:@"rp"];
  if (v19
    && (unsigned __int8 v20 = [*(id *)(a1 + 88) isReplicating], v19, (v20 & 1) == 0))
  {
    uint64_t v27 = +[IMDServiceController sharedController];
    uint64_t v28 = [v11 objectForKeyedSubscript:@"rp"];
    uint64_t v29 = objc_msgSend(v27, "serviceWithReplicationSourceID:", objc_msgSend(v28, "integerValue"));

    uint64_t v30 = +[IMDAccountController sharedAccountController];
    uint64_t v31 = [v29 internalName];
    id v32 = [v30 sessionForReplicationSourceServiceName:v31 replicatingAccount:v18];

    [v32 handler:*(void *)(a1 + 96) groupMessageCommand:*(void *)(a1 + 32) encryptedGroupCommand:*(void *)(a1 + 80) messageID:*(void *)(a1 + 104) toIdentifier:*(void *)(a1 + 112) fromIdentifier:*(void *)(a1 + 40) fromToken:*(void *)(a1 + 48) timeStamp:*(void *)(a1 + 120) fromIDSID:*(void *)(a1 + 56) needsDeliveryReceipt:*(void *)(a1 + 64) deliveryContext:*(void *)(a1 + 72) storageContext:*(void *)(a1 + 128)];
    if (v33) {
      v33[2]();
    }
  }
  else
  {
    id v21 = [*(id *)(a1 + 88) groupController];
    uint64_t v22 = *(void *)(a1 + 88);
    uint64_t v23 = *(void *)(a1 + 104);
    uint64_t v24 = *(void *)(a1 + 112);
    uint64_t v25 = *(void *)(a1 + 40);
    unsigned int v26 = [*(id *)(a1 + 96) service];
    [v21 handler:v22 account:v18 groupMessagePayload:v11 messageID:v23 toIdentifier:v24 fromIdentifier:v25 idsService:v26 fromToken:*(void *)(a1 + 48) timeStamp:*(void *)(a1 + 120) storageContext:*(void *)(a1 + 128)];

    if (v33) {
      v33[2]();
    }
  }
}

void sub_17B9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[IMDMessageStore sharedInstance];
  CFStringRef v5 = [v4 messageWithGUID:*(void *)(a1 + 32)];

  if (v5)
  {
    uint64_t v6 = +[IMDMessageStore sharedInstance];
    id v7 = [v6 chatForMessage:v5];

    if (v7)
    {
      uint64_t v8 = [v5 balloonBundleID];
      unsigned __int8 v9 = [v8 isEqualToString:*(void *)(a1 + 40)];

      if (v9)
      {
        id v21 = _NSConcreteStackBlock;
        uint64_t v22 = 3221225472;
        uint64_t v23 = sub_17F8C;
        uint64_t v24 = &unk_DDBA0;
        id v10 = v5;
        uint64_t v11 = *(void *)(a1 + 48);
        id v25 = v10;
        uint64_t v26 = v11;
        id v27 = v7;
        id v28 = *(id *)(a1 + 32);
        id v29 = *(id *)(a1 + 56);
        uint64_t v30 = v3;
        uint64_t v12 = objc_retainBlock(&v21);
        if (objc_msgSend(*(id *)(a1 + 64), "length", v21, v22, v23, v24) && !objc_msgSend(*(id *)(a1 + 72), "count"))
        {
          int v13 = [*(id *)(a1 + 48) attachmentController];
          uint64_t v20 = *(void *)(a1 + 64);
          id v15 = [v10 guid];
          [v13 processDownloadedPayloadData:v20 forMessageGUID:v15 balloonBundleID:*(void *)(a1 + 40) fromIdentifier:*(void *)(a1 + 80) senderToken:*(void *)(a1 + 88) withCompletionBlock:v12];
        }
        else
        {
          int v13 = [*(id *)(a1 + 48) attachmentController];
          uint64_t v14 = *(void *)(a1 + 72);
          id v15 = [v10 guid];
          [v13 processMessageAttachmentDictionary:v14 forMessageGUID:v15 balloonBundleID:*(void *)(a1 + 40) fromIdentifier:*(void *)(a1 + 80) senderToken:*(void *)(a1 + 88) withCompletionBlock:v12];
        }

        goto LABEL_24;
      }
      if (IMOSLoggingEnabled())
      {
        id v19 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v32 = v5;
          _os_log_impl(&dword_0, v19, OS_LOG_TYPE_INFO, "PayloadAttachmentsBubbleUpdate: Could not find a chat for message: %@", buf, 0xCu);
        }
      }
    }
    else if (IMOSLoggingEnabled())
    {
      id v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v32 = v5;
        _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "PayloadAttachmentsBubbleUpdate: Could not find a chat for message: %@", buf, 0xCu);
      }
    }
    v3[2](v3);
LABEL_24:

    goto LABEL_25;
  }
  if (IMOSLoggingEnabled())
  {
    id v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      id v17 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      id v32 = v17;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "PayloadAttachmentsBubbleUpdate: Could not find chat for balloon payload for missing message GUID: %@", buf, 0xCu);
    }
  }
  v3[2](v3);
LABEL_25:
}

void sub_17F8C(uint64_t a1, void *a2, void *a3)
{
  id v19 = a2;
  id v18 = a3;
  if ([v18 count])
  {
    CFStringRef v5 = +[IMDFileTransferCenter sharedInstance];
    uint64_t v6 = [*(id *)(a1 + 32) guid];
    id v7 = [v5 guidsForStoredAttachmentPayloadDataURLs:v18 messageGUID:v6];
  }
  else
  {
    id v7 = 0;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      id v21 = [v19 length];
      __int16 v22 = 2048;
      id v23 = [v18 count];
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Updating payload to length: %lu with attachments: %lu", buf, 0x16u);
    }
  }
  [*(id *)(a1 + 32) setPayloadData:v19];
  if ([v7 count]) {
    [*(id *)(a1 + 32) setFileTransferGUIDs:v7];
  }
  unsigned __int8 v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = [*(id *)(a1 + 48) chatIdentifier];
  id v12 = [*(id *)(a1 + 48) style];
  int v13 = *(void **)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 56);
  id v15 = [*(id *)(a1 + 64) account];
  id v16 = [v13 imdAccountForIDSAccount:v15];
  id v17 = [v16 accountID];
  [v9 didReceiveBalloonPayload:v10 forChat:v11 style:v12 messageGUID:v14 account:v17];

  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_18624(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[IMDMessageStore sharedInstance];
  CFStringRef v5 = [v4 chatForMessage:v3];

  if (v5)
  {
    if ([v5 style] == 45)
    {
      [*(id *)(a1 + 32) _relayLegacySatelliteMessage:v3 toChat:v5];
    }
    else
    {
      uint64_t v8 = IMLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_95A88(v3, v8);
      }

      unsigned __int8 v9 = IMLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_95A20();
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = [v3 guid];
      int v10 = 138412290;
      uint64_t v11 = v7;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Chat not found for message relay guid: %@", (uint8_t *)&v10, 0xCu);
    }
  }
}

void sub_18BEC(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      id v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        int v18 = 138412290;
        id v19 = v10;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished sending relay messages to participants: %@", (uint8_t *)&v18, 0xCu);
      }
    }
    [*(id *)(a1 + 32) setNeedsRelay:0];
    int v13 = +[IMDMessageStore sharedInstance];
    id v14 = [v13 storeMessage:*(void *)(a1 + 32) forceReplace:0 modifyError:1 modifyFlags:1 flagMask:0x40000000000];

    if (IMOSLoggingEnabled())
    {
      id v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        id v16 = [*(id *)(a1 + 32) guid];
        int v18 = 138412290;
        id v19 = v16;
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Message marked as relayed, guid: %@", (uint8_t *)&v18, 0xCu);
      }
    }
  }
  else
  {
    if (v11)
    {
      id v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        int v18 = 138412546;
        id v19 = v10;
        __int16 v20 = 1024;
        int v21 = a5;
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "Failed sending P2P group message to people: %@ - error: %d", (uint8_t *)&v18, 0x12u);
      }
    }
    IMSetDomainBoolForKey();
  }
}

void sub_1988C(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v11)
    {
      id v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        int v14 = 138412290;
        id v15 = v10;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished sending P2P group message to person: %@", (uint8_t *)&v14, 0xCu);
      }
    }
  }
  else if (v11)
  {
    int v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      int v14 = 138412546;
      id v15 = v10;
      __int16 v16 = 1024;
      unsigned int v17 = a5;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Failed sending P2P group message to people: %@  error: %d", (uint8_t *)&v14, 0x12u);
    }
  }
}

void sub_19DDC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  if (IMOSLoggingEnabled())
  {
    id v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      CFStringRef v10 = @"NO";
      uint64_t v11 = *(void *)(a1 + 32);
      if (a4) {
        CFStringRef v10 = @"YES";
      }
      int v13 = 138412546;
      uint64_t v14 = v11;
      __int16 v15 = 2112;
      CFStringRef v16 = v10;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "Sent sharing info to %@ with success? %@", (uint8_t *)&v13, 0x16u);
    }
  }
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v12, a4);
  }
}

void sub_1A4F4(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a6;
  if (v13 && IMOSLoggingEnabled())
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      int v16 = 138412546;
      uint64_t v17 = v15;
      __int16 v18 = 2112;
      id v19 = v13;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "Error when looking up engroup for chat: %@ error: %@", (uint8_t *)&v16, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1AC04(uint64_t a1, void *a2, void *a3, void *a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  int v12 = IMOSLoggingEnabled();
  if (a5)
  {
    if (!v12) {
      goto LABEL_10;
    }
    id v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      int v20 = 138412802;
      uint64_t v21 = v14;
      __int16 v22 = 2112;
      id v23 = v10;
      __int16 v24 = 2112;
      id v25 = v11;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Successfully invited people: %@  to chat: %@  new participants: %@", (uint8_t *)&v20, 0x20u);
    }
  }
  else
  {
    if (!v12) {
      goto LABEL_10;
    }
    id v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      int v20 = 138412802;
      uint64_t v21 = v15;
      __int16 v22 = 2112;
      id v23 = v10;
      __int16 v24 = 2112;
      id v25 = v11;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "*** Failed to invite invite people: %@  to chat: %@  resulting participants: %@", (uint8_t *)&v20, 0x20u);
    }
  }

LABEL_10:
  if (IMOSLoggingEnabled())
  {
    int v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "Finished inviting participants to chat --> sending out notification to dismiss spinner if we have one", (uint8_t *)&v20, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  __int16 v18 = [WeakRetained broadcasterForChatListeners];
  id v19 = [*(id *)(a1 + 40) guid];
  [v18 engroupParticipantsUpdatedForChat:v19];
}

id sub_1C0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  HIDWORD(v7) = a6;
  BYTE1(v7) = *(unsigned char *)(a1 + 72);
  LOBYTE(v7) = a5;
  return objc_msgSend(*(id *)(a1 + 32), "groupPhotoUploadCompletedForChat:fileTransferGuid:callerURI:fromAccount:message:displayIDs:additionalContext:success:isPhotoRefresh:error:", *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), a2, a3, a4, v7);
}

void sub_1C148(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (IMOSLoggingEnabled())
  {
    int v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = [*(id *)(a1 + 32) guid];
      uint64_t v14 = *(void *)(a1 + 40);
      uint64_t v15 = +[NSNumber numberWithInteger:a4];
      int v18 = 138413570;
      id v19 = v13;
      __int16 v20 = 2112;
      uint64_t v21 = v14;
      __int16 v22 = 2112;
      id v23 = v9;
      __int16 v24 = 2112;
      id v25 = v10;
      __int16 v26 = 2112;
      id v27 = v15;
      __int16 v28 = 2112;
      id v29 = v11;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "upload group photo failed. chatGuid %@ fileTransferGuid %@ transferError %@ requestURLString %@ outFileSize %@ additionalErrorInfo %@", (uint8_t *)&v18, 0x3Eu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    int v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void **)(a1 + 32);
      int v18 = 138412290;
      id v19 = v17;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, " => chat: %@", (uint8_t *)&v18, 0xCu);
    }
  }
  [*(id *)(a1 + 48) groupPhotoUploadFailedForChat:*(void *)(a1 + 32) fileTransferGuid:*(void *)(a1 + 40)];
}

void sub_1D2CC(uint64_t a1, void *a2, void *a3, void *a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  int v12 = IMOSLoggingEnabled();
  if (a5)
  {
    if (!v12) {
      goto LABEL_10;
    }
    id v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      int v19 = 138412802;
      uint64_t v20 = v14;
      __int16 v21 = 2112;
      id v22 = v10;
      __int16 v23 = 2112;
      id v24 = v11;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Successfully removed people: %@  from chat: %@  new participants: %@", (uint8_t *)&v19, 0x20u);
    }
  }
  else
  {
    if (!v12) {
      goto LABEL_10;
    }
    id v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      int v19 = 138412802;
      uint64_t v20 = v15;
      __int16 v21 = 2112;
      id v22 = v10;
      __int16 v23 = 2112;
      id v24 = v11;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "*** Failed to remove people: %@  from chat: %@  resulting participants: %@", (uint8_t *)&v19, 0x20u);
    }
  }

LABEL_10:
  if (IMOSLoggingEnabled())
  {
    int v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      LOWORD(v19) = 0;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "Finished removing participants from chat --> sending out notification to dismiss spinner if we have one", (uint8_t *)&v19, 2u);
    }
  }
  uint64_t v17 = [*(id *)(a1 + 40) broadcasterForChatListeners];
  int v18 = [*(id *)(a1 + 48) guid];
  [v17 engroupParticipantsUpdatedForChat:v18];
}

void sub_1D8B0(id a1, MessageGroupController *a2, IMDChat *a3, BOOL a4, unsigned int a5)
{
  BOOL v5 = a4;
  uint64_t v7 = a2;
  id v8 = a3;
  int v9 = IMOSLoggingEnabled();
  if (v5)
  {
    if (v9)
    {
      id v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v11 = 138412290;
        int v12 = v8;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "Successfully left chat: %@", (uint8_t *)&v11, 0xCu);
      }
LABEL_9:
    }
  }
  else if (v9)
  {
    id v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v11 = 138412290;
      int v12 = v8;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "*** Failed to leave chat: %@", (uint8_t *)&v11, 0xCu);
    }
    goto LABEL_9;
  }
}

id sub_1DDC8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _flushQueuedMessageWrapperBlocks];
}

void sub_1E9B4(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  int v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v11)
    {
      int v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LOWORD(v14[0]) = 0;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished sending FTCommandIDUpdateAttachmentsMessage", (uint8_t *)v14, 2u);
      }
    }
  }
  else if (v11)
  {
    id v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14[0] = 67109120;
      v14[1] = a5;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Failed sending FTCommandIDUpdateAttachmentsMessage: %d", (uint8_t *)v14, 8u);
    }
  }
}

void sub_1EB04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v8 = v3;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "_sendHighResolutionImagesForMessage sending to engroup: %@", buf, 0xCu);
    }
  }
  BOOL v5 = [*(id *)(a1 + 32) deliveryController];
  uint64_t v6 = +[NSDictionary dictionary];
  [v5 sendMessageDictionary:v6 fromID:*(void *)(a1 + 40) fromAccount:*(void *)(a1 + 48) toURIs:*(void *)(a1 + 56) toGroup:v3 priority:300 options:*(void *)(a1 + 64) completionBlock:*(void *)(a1 + 72)];
}

void sub_1F238(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      int v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        id v13 = [*(id *)(a1 + 32) guid];
        uint64_t v14 = *(void *)(a1 + 40);
        int v18 = 138412546;
        int v19 = v13;
        __int16 v20 = 2112;
        uint64_t v21 = v14;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished sending read receipt for guid: %@   to people: %@", (uint8_t *)&v18, 0x16u);
      }
    }
  }
  else if (v11)
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      int v16 = [*(id *)(a1 + 32) guid];
      uint64_t v17 = *(void *)(a1 + 40);
      int v18 = 138412802;
      int v19 = v16;
      __int16 v20 = 2112;
      uint64_t v21 = v17;
      __int16 v22 = 1024;
      int v23 = a5;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Failed sending read receipt for guid: %@   to people: %@  error: %d", (uint8_t *)&v18, 0x1Cu);
    }
  }
}

void sub_1F3D8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1F39CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1FA7C(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      int v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        id v13 = [*(id *)(a1 + 32) guid];
        uint64_t v14 = *(void *)(a1 + 40);
        int v18 = 138412546;
        int v19 = v13;
        __int16 v20 = 2112;
        uint64_t v21 = v14;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished sending played receipt for guid: %@   to people: %@", (uint8_t *)&v18, 0x16u);
      }
    }
  }
  else if (v11)
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      int v16 = [*(id *)(a1 + 32) guid];
      uint64_t v17 = *(void *)(a1 + 40);
      int v18 = 138412802;
      int v19 = v16;
      __int16 v20 = 2112;
      uint64_t v21 = v17;
      __int16 v22 = 1024;
      int v23 = a5;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Failed sending played receipt for guid: %@   to people: %@  error: %d", (uint8_t *)&v18, 0x1Cu);
    }
  }
}

void sub_1FC1C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1FBE0);
  }
  _Unwind_Resume(a1);
}

void sub_2028C(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      int v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v14 = *(void *)(a1 + 40);
        int v18 = 138412546;
        uint64_t v19 = v13;
        __int16 v20 = 2112;
        uint64_t v21 = v14;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished sending delivered quietly receipt for guid: %@   to people: %@", (uint8_t *)&v18, 0x16u);
      }
    }
  }
  else if (v11)
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      int v18 = 138412802;
      uint64_t v19 = v16;
      __int16 v20 = 2112;
      uint64_t v21 = v17;
      __int16 v22 = 1024;
      int v23 = a5;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Failed sending delivered quietly receipt for guid: %@   to people: %@  error: %d", (uint8_t *)&v18, 0x1Cu);
    }
  }
}

void sub_20420(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = [v8 count];
  int v11 = IMOSLoggingEnabled();
  if (!v10)
  {
    if (v11)
    {
      uint64_t v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        LOWORD(v20) = 0;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "Sending delivered quietly receipt to all destinations, none skipped.", (uint8_t *)&v20, 2u);
      }
      goto LABEL_20;
    }
LABEL_21:
    uint64_t v15 = 0;
    goto LABEL_22;
  }
  if (v11)
  {
    int v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v20 = 138412290;
      id v21 = v8;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Not sending delivered quietly receipt to skipped destinations: %@", (uint8_t *)&v20, 0xCu);
    }
  }
  if (![*(id *)(a1 + 32) length]
    || ![v8 containsObject:*(void *)(a1 + 32)])
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = *(void **)(a1 + 32);
        id v18 = [v8 count];
        int v20 = 138412546;
        id v21 = v17;
        __int16 v22 = 2048;
        id v23 = v18;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "Incoming message came from a device that does support delivered quietly receipts \"%@\", but they also have %ld devices that do not support delivered quietly.", (uint8_t *)&v20, 0x16u);
      }
LABEL_20:

      goto LABEL_21;
    }
    goto LABEL_21;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = *(void **)(a1 + 32);
      int v20 = 138412290;
      id v21 = v14;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Incoming message came from a device that does not support delivered quietly receipts. Senders destination: %@", (uint8_t *)&v20, 0xCu);
    }
  }
  uint64_t v15 = 1;
LABEL_22:
  uint64_t v19 = *(void *)(a1 + 40);
  if (v19) {
    (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v19, v15);
  }
}

void sub_20C6C(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      int v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v14 = *(void *)(a1 + 40);
        int v18 = 138412546;
        uint64_t v19 = v13;
        __int16 v20 = 2112;
        uint64_t v21 = v14;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished sending notify recipient receipt for guid: %@   to people: %@", (uint8_t *)&v18, 0x16u);
      }
    }
  }
  else if (v11)
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      int v18 = 138412802;
      uint64_t v19 = v16;
      __int16 v20 = 2112;
      uint64_t v21 = v17;
      __int16 v22 = 1024;
      int v23 = a5;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Failed sending notify recipient receipt for guid: %@   to people: %@  error: %d", (uint8_t *)&v18, 0x1Cu);
    }
  }
}

void sub_214A4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *location)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x211CCLL);
  }
  objc_destroyWeak(v15);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v16 - 184));
  _Unwind_Resume(exc_buf);
}

void sub_2150C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([v5 count])
  {
    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v11 = 138412290;
        id v12 = v5;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Message editing unsupported by destinations: %@", (uint8_t *)&v11, 0xCu);
      }
    }
    id v9 = [WeakRetained _handleIDsForDestinations:v5];
    if (IMOSLoggingEnabled())
    {
      id v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v11 = 138412290;
        id v12 = v9;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "Message editing unsupported by handles: %@", (uint8_t *)&v11, 0xCu);
      }
    }
    [WeakRetained didReceiveMessageEditingUnsupportedHandleIDs:v9 forMessageGUID:*(void *)(a1 + 32) partIndex:*(void *)(a1 + 56) previousMessage:*(void *)(a1 + 40) backwardCompatibilityMessageGUID:v6];
  }
}

void sub_216C4(uint64_t a1, void *a2, void *a3, char a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (a4)
  {
    if (IMOSLoggingEnabled())
    {
      id v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int16 v20 = 0;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Message editing success", v20, 2u);
      }
    }
    [WeakRetained didSendMessageEditForMessageGUID:*(void *)(a1 + 32)];
  }
  else
  {
    uint64_t v13 = IMLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_95C64(a5, v13, v14, v15, v16, v17, v18, v19);
    }

    [WeakRetained didReceiveMessageEditingSendFailure:a5 forMessageGUID:*(void *)(a1 + 32) partIndex:*(void *)(a1 + 48) editType:*(void *)(a1 + 56)];
  }
}

void sub_217F8(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      id v3 = [*(id *)(a1 + 32) guid];
      uint64_t v4 = *(void *)(a1 + 112);
      *(_DWORD *)buf = 138412546;
      id v7 = v3;
      __int16 v8 = 1024;
      int v9 = v4;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, "Delivering message edit of %@ for replication after %u second delay", buf, 0x12u);
    }
  }
  id v5 = [*(id *)(a1 + 40) deliveryController];
  [v5 sendEditedMessage:*(void *)(a1 + 48) partIndex:*(void *)(a1 + 120) editType:*(void *)(a1 + 128) destinations:*(void *)(a1 + 56) chatIdentifier:*(void *)(a1 + 64) account:*(void *)(a1 + 72) fromID:*(void *)(a1 + 80) backwardCompatabilityText:*(void *)(a1 + 88) unsupportedDestinationsHandler:*(void *)(a1 + 96) completionBlock:*(void *)(a1 + 104)];
}

void sub_21D20(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      id v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = [*(id *)(a1 + 32) guid];
        uint64_t v14 = *(void *)(a1 + 40);
        int v18 = 138412546;
        uint64_t v19 = v13;
        __int16 v20 = 2112;
        uint64_t v21 = v14;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished sending repositioned sticker for guid: %@   to people: %@", (uint8_t *)&v18, 0x16u);
      }
    }
  }
  else if (v11)
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = [*(id *)(a1 + 32) guid];
      uint64_t v17 = *(void *)(a1 + 40);
      int v18 = 138412802;
      uint64_t v19 = v16;
      __int16 v20 = 2112;
      uint64_t v21 = v17;
      __int16 v22 = 1024;
      int v23 = a5;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Failed sending repositioned sticker for guid: %@   to people: %@  error: %d", (uint8_t *)&v18, 0x1Cu);
    }
  }
}

void sub_21EC0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x21E84);
  }
  _Unwind_Resume(a1);
}

void sub_226C8(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      id v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = [*(id *)(a1 + 32) guid];
        uint64_t v14 = *(void *)(a1 + 40);
        int v18 = 138412546;
        uint64_t v19 = v13;
        __int16 v20 = 2112;
        uint64_t v21 = v14;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished sending saved receipt for guid: %@   to people: %@", (uint8_t *)&v18, 0x16u);
      }
    }
  }
  else if (v11)
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = [*(id *)(a1 + 32) guid];
      uint64_t v17 = *(void *)(a1 + 40);
      int v18 = 138412802;
      uint64_t v19 = v16;
      __int16 v20 = 2112;
      uint64_t v21 = v17;
      __int16 v22 = 1024;
      int v23 = a5;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Failed sending saved receipt for guid: %@   to people: %@  error: %d", (uint8_t *)&v18, 0x1Cu);
    }
  }
}

void sub_22868(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x2282CLL);
  }
  _Unwind_Resume(a1);
}

void sub_23354(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      id v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v14 = *(void *)(a1 + 40);
        int v18 = 138412546;
        uint64_t v19 = v13;
        __int16 v20 = 2112;
        uint64_t v21 = v14;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished sending SyndicationAction: %@ to people: %@", (uint8_t *)&v18, 0x16u);
      }
    }
  }
  else if (v11)
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      int v18 = 138412802;
      uint64_t v19 = v16;
      __int16 v20 = 2112;
      uint64_t v21 = v17;
      __int16 v22 = 1024;
      int v23 = a5;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Failed sending saved SyndicationAction: %@ to people: %@ error: %d", (uint8_t *)&v18, 0x1Cu);
    }
  }
}

void sub_23FF4(id *a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [a1[4] _richLinkPendSendingWithGUID:a1[5]];
  int v5 = IMOSLoggingEnabled();
  if (v4)
  {
    if (v5)
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Message pending to be sent. Not sending c 196", buf, 2u);
      }
    }
    if (IMGetDomainBoolForKey())
    {
      if (IMOSLoggingEnabled())
      {
        id v7 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "******** com.apple.sms defaults enforceRichLinkDelay set. Not flushing pending sends. Waiting for timer to fire ********", buf, 2u);
        }
      }
    }
    else
    {
      [a1[4] _flushQueuedMessageWrapperBlocks];
    }
  }
  else
  {
    if (v5)
    {
      __int16 v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Proceeding sending c 196", buf, 2u);
      }
    }
    id v9 = (__CFDictionary *)objc_alloc_init((Class)NSMutableDictionary);
    id v10 = a1[6];
    if (v10)
    {
      CFDictionarySetValue(v9, @"bid", v10);
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_95E74();
    }

    int v11 = IMSharedHelperCombinedPluginPayloadDictionaryData();
    id v12 = [v11 _FTCopyGzippedData];

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_2446C;
    v19[3] = &unk_DDE98;
    id v20 = v12;
    uint64_t v21 = v9;
    id v13 = a1[5];
    id v14 = a1[4];
    id v22 = v13;
    id v23 = v14;
    id v24 = a1[9];
    id v25 = a1[10];
    id v26 = a1[11];
    id v27 = a1[12];
    __int16 v28 = &stru_DDE70;
    uint64_t v15 = v9;
    id v16 = v12;
    uint64_t v17 = objc_retainBlock(v19);
    int v18 = [a1[4] attachmentController];
    [v18 sendPayloadData:v16 messageGUID:a1[5] fromID:a1[11] recipients:a1[12] completionBlock:v17];
  }
}

void sub_24340(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  id v9 = a2;
  id v10 = a3;
  if (IMOSLoggingEnabled())
  {
    int v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      CFStringRef v12 = @"NO";
      int v13 = 138412802;
      id v14 = v10;
      if (v7) {
        CFStringRef v12 = @"YES";
      }
      __int16 v15 = 2112;
      CFStringRef v16 = v12;
      __int16 v17 = 1024;
      unsigned int v18 = a5;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "Sent to IDs: %@ with success: %@ and error: %d", (uint8_t *)&v13, 0x1Cu);
    }
  }
}

void sub_2446C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  int v6 = IMOSLoggingEnabled();
  if (a3)
  {
    if (v6)
    {
      BOOL v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v27 = v5;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Finished uploading new payload data for message. Resulting payloadDictionary %@", buf, 0xCu);
      }
    }
    if (v5)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), @"bpdi", v5);
    }
    else
    {
      int v11 = *(const void **)(a1 + 32);
      if (v11) {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), @"p", v11);
      }
    }
    CFStringRef v12 = +[NSNumber numberWithInteger:196];
    int v13 = JWEncodeDictionary();
    id v14 = IDSGetUUIDData();
    __int16 v15 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", IDSSendMessageOptionTopLevelDictionaryKey, &__kCFBooleanTrue, IDSSendMessageOptionSkipPayloadCheckKey, v12, IDSSendMessageOptionCommandKey, &__kCFBooleanTrue, IDSSendMessageOptionWantsDeliveryStatusKey, v13, IDSSendMessageOptionDataToEncryptKey, v14, IDSSendMessageOptionUUIDKey, 0);

    CFStringRef v16 = *(void **)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 64);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_247C0;
    v20[3] = &unk_DDD88;
    v20[4] = v16;
    uint64_t v18 = *(void *)(a1 + 72);
    id v21 = *(id *)(a1 + 80);
    id v22 = *(id *)(a1 + 72);
    id v23 = *(id *)(a1 + 88);
    id v24 = v15;
    id v25 = *(id *)(a1 + 96);
    id v19 = v15;
    [v16 _engroupForChat:v17 idsAccount:v18 completion:v20];
  }
  else if (v6)
  {
    __int16 v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = *(void **)(a1 + 48);
      uint64_t v10 = *(void *)(a1 + 88);
      *(_DWORD *)buf = 138412546;
      id v27 = v9;
      __int16 v28 = 2112;
      uint64_t v29 = v10;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "MessageService Failed processing new payload data for message: %@  for display IDs: %@", buf, 0x16u);
    }
  }
}

void sub_247C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    unsigned int v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v11 = v3;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "sendBalloonPayload to engroup: %@", buf, 0xCu);
    }
  }
  id v5 = [*(id *)(a1 + 32) deliveryController];
  int v6 = +[NSDictionary dictionary];
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  id v9 = +[NSSet setWithArray:*(void *)(a1 + 56)];
  [v5 sendBubblePayloadMessageDictionary:v6 fromID:v7 fromAccount:v8 toURIs:v9 toGroup:v3 priority:300 options:*(void *)(a1 + 64) completionBlock:*(void *)(a1 + 72)];
}

void sub_24C90(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      CFStringRef v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v14 = *(void *)(a1 + 40);
        int v18 = 138412546;
        uint64_t v19 = v13;
        __int16 v20 = 2112;
        uint64_t v21 = v14;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished sending cross service association for replacementGUID: %@ guid: %@", (uint8_t *)&v18, 0x16u);
      }
    }
  }
  else if (v11)
  {
    __int16 v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      int v18 = 138412802;
      uint64_t v19 = v16;
      __int16 v20 = 2112;
      uint64_t v21 = v17;
      __int16 v22 = 1024;
      int v23 = a5;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Failed sending cross service association for replacementGUID: %@ guid: %@ error: %u", (uint8_t *)&v18, 0x1Cu);
    }
  }
}

void sub_24F5C(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v11)
    {
      CFStringRef v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LOWORD(v14[0]) = 0;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished sending automation dictionary", (uint8_t *)v14, 2u);
      }
    }
  }
  else if (v11)
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14[0] = 67109120;
      v14[1] = a5;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Failed sending automation dictionary error %u", (uint8_t *)v14, 8u);
    }
  }
}

void sub_25438(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      CFStringRef v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        int v16 = 138412290;
        v17[0] = v13;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished  sending Delivery receipt for guid: %@", (uint8_t *)&v16, 0xCu);
      }
    }
  }
  else if (v11)
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      int v16 = 67109378;
      LODWORD(v17[0]) = a5;
      WORD2(v17[0]) = 2112;
      *(void *)((char *)v17 + 6) = v15;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "Failed  sending Delivery receipt error %u, guid %@", (uint8_t *)&v16, 0x12u);
    }
  }
}

void sub_25D74(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  int v9 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v9)
    {
      id v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v12 = *(void *)(a1 + 40);
        int v15 = 138412546;
        uint64_t v16 = v11;
        __int16 v17 = 2112;
        uint64_t v18 = v12;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "Finished sending nickname info for guid: %@    to people:  %@", (uint8_t *)&v15, 0x16u);
      }
LABEL_9:
    }
  }
  else if (v9)
  {
    id v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 138412546;
      uint64_t v16 = v13;
      __int16 v17 = 2112;
      uint64_t v18 = v14;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "Failed sending nickname info for guid: %@    to people:  %@", (uint8_t *)&v15, 0x16u);
    }
    goto LABEL_9;
  }
}

void sub_26630(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v6 = a4;
  id v8 = a2;
  int v9 = a3;
  int v10 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v10)
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        __int16 v15 = 0;
        uint64_t v12 = "Finished Reflecting nickname updates";
        uint64_t v13 = (uint8_t *)&v15;
LABEL_8:
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, v12, v13, 2u);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if (v10)
  {
    uint64_t v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      __int16 v14 = 0;
      uint64_t v12 = "Failed Reflecting nickname updates";
      uint64_t v13 = (uint8_t *)&v14;
      goto LABEL_8;
    }
LABEL_9:
  }
}

void sub_26B40(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v6 = a4;
  id v8 = a2;
  int v9 = a3;
  int v10 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v10)
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        __int16 v15 = 0;
        uint64_t v12 = "Finished Reflecting sending Delivery receipt for guid:";
        uint64_t v13 = (uint8_t *)&v15;
LABEL_8:
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, v12, v13, 2u);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if (v10)
  {
    uint64_t v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      __int16 v14 = 0;
      uint64_t v12 = "Failed Reflecting sending Delivery receipt for guid:";
      uint64_t v13 = (uint8_t *)&v14;
      goto LABEL_8;
    }
LABEL_9:
  }
}

void sub_280EC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) _updateOrRemoveGroupPhotoForChat:*(void *)(a1 + 40) sender:*(void *)(a1 + 48) completedTransfer:*(void *)(a1 + 56) isHidden:*(unsigned __int8 *)(a1 + 72)];
    if (IMOSLoggingEnabled())
    {
      BOOL v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 56);
        id v8 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v17 = v7;
        __int16 v18 = 2112;
        id v19 = v8;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, " => stored attachment %@ and added to chat properties %@", buf, 0x16u);
      }
    }
    goto LABEL_18;
  }
  if (IMOSLoggingEnabled())
  {
    int v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 138412546;
      uint64_t v17 = v10;
      __int16 v18 = 2112;
      id v19 = v5;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, " => failed storing safe transfer (%@) with error: %@", buf, 0x16u);
    }
  }
  uint64_t v11 = [v5 domain];
  if (![v11 isEqualToString:NSCocoaErrorDomain])
  {

    goto LABEL_17;
  }
  BOOL v12 = [v5 code] == &dword_4;

  if (!v12)
  {
LABEL_17:
    __int16 v14 = +[NSString stringGUID];
    __int16 v15 = +[NSString stringWithFormat:@"%@-GroupPhoto", &off_E36F0];
    +[IMBlastdoor sendBlastDoorError:v5 guid:v14 messageTypeString:v15 senderURI:*(void *)(a1 + 48) senderToken:0 messageContext:0 payloadAttachmentURL:0];

    goto LABEL_18;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, " Dropping error on the floor, sometimes we get through here and the attachment download has magically disappeared from tmp", buf, 2u);
    }
  }
LABEL_18:
}

void sub_28E24(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, void *a9)
{
  id v14 = a2;
  id v15 = a3;
  id v16 = a6;
  id v17 = a8;
  id v18 = a9;
  if (IMOSLoggingEnabled())
  {
    id v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int16 v20 = 0;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_INFO, "All done getting new group photo.", v20, 2u);
    }
  }
  [*(id *)(a1 + 32) doneRetrievingAttachmentsForGroupPhotoForChat:*(void *)(a1 + 40) fileTransferError:v16 success:a4 transferGuid:*(void *)(a1 + 48) sender:*(void *)(a1 + 56) isHidden:*(unsigned __int8 *)(a1 + 64)];
}

void sub_297E0(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  int v9 = a2;
  uint64_t v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v11)
    {
      BOOL v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LOWORD(v14[0]) = 0;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished sending delete command to all devices", (uint8_t *)v14, 2u);
      }
    }
  }
  else if (v11)
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14[0] = 67109120;
      v14[1] = a5;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Failed Reflecting sending delete command. errorType: %d", (uint8_t *)v14, 8u);
    }
  }
}

void sub_29E80(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v6 = a4;
  id v8 = a2;
  int v9 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      CFStringRef v11 = @"NO";
      if (v6) {
        CFStringRef v11 = @"YES";
      }
      int v12 = 138412290;
      CFStringRef v13 = v11;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "Recently Deleted | Sending Recover command to all devices with success: %@", (uint8_t *)&v12, 0xCu);
    }
  }
}

void sub_2A2DC(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  int v14 = IMOSLoggingEnabled();
  if (a5)
  {
    if (v14)
    {
      id v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v17 = *(void *)(a1 + 40);
        uint64_t v18 = *(void *)(a1 + 48);
        int v19 = *(unsigned __int8 *)(a1 + 56);
        int v25 = 138413314;
        uint64_t v26 = v16;
        __int16 v27 = 2112;
        id v28 = v12;
        __int16 v29 = 2112;
        *(void *)uint64_t v30 = v17;
        *(_WORD *)&v30[8] = 2112;
        *(void *)&v30[10] = v18;
        *(_WORD *)&v30[18] = 1024;
        *(_DWORD *)&v30[20] = v19;
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Successfully updated name: %@   forChat: %@   (GUID: %@  Identifier: %@  Style: %c)", (uint8_t *)&v25, 0x30u);
      }
    }
  }
  else if (v14)
  {
    __int16 v20 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v22 = *(void *)(a1 + 40);
      uint64_t v23 = *(void *)(a1 + 48);
      int v24 = *(unsigned __int8 *)(a1 + 56);
      int v25 = 138413570;
      uint64_t v26 = v21;
      __int16 v27 = 2112;
      id v28 = v12;
      __int16 v29 = 1024;
      *(_DWORD *)uint64_t v30 = a6;
      *(_WORD *)&v30[4] = 2112;
      *(void *)&v30[6] = v22;
      *(_WORD *)&v30[14] = 2112;
      *(void *)&v30[16] = v23;
      __int16 v31 = 1024;
      int v32 = v24;
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_INFO, "*** Failed to update name: %@   forChat: %@   Error: %d (GUID: %@  Identifier: %@  Style: %c)", (uint8_t *)&v25, 0x36u);
    }
  }
}

void sub_2A7C0(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  int v9 = a2;
  uint64_t v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v11)
    {
      id v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LOWORD(v14[0]) = 0;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Successfully sent close session message to business", (uint8_t *)v14, 2u);
      }
    }
  }
  else if (v11)
  {
    id v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14[0] = 67109120;
      v14[1] = a5;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Failed to send message for closing session with business. Error: %d", (uint8_t *)v14, 8u);
    }
  }
}

void sub_2B7B4(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  int v9 = a2;
  uint64_t v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v11)
    {
      id v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LOWORD(v14[0]) = 0;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished reflecting chat properties across devices", (uint8_t *)v14, 2u);
      }
    }
  }
  else if (v11)
  {
    id v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14[0] = 67109120;
      v14[1] = a5;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Failed reflecting chat properties across devices: %d", (uint8_t *)v14, 8u);
    }
  }
}

void sub_2B904(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  int v9 = a2;
  uint64_t v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v11)
    {
      id v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LOWORD(v14[0]) = 0;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Finished reflecting global read receipt value across devices", (uint8_t *)v14, 2u);
      }
    }
  }
  else if (v11)
  {
    id v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14[0] = 67109120;
      v14[1] = a5;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Failed reflecting global read receipt value across devices: %d", (uint8_t *)v14, 8u);
    }
  }
}

void sub_2C100(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x2C0C8);
  }
  _Unwind_Resume(a1);
}

void sub_2C980(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 104);
  int v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (!v3) {
      return;
    }
    unsigned int v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v14) = 0;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "Already have a timer, waiting for it to fire", (uint8_t *)&v14, 2u);
    }
    goto LABEL_13;
  }
  if (v3)
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v14) = 0;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "Sceduling Failure Retry reset timer", (uint8_t *)&v14, 2u);
    }
  }
  +[NSDate timeIntervalSinceReferenceDate];
  double v7 = v6;
  id v8 = objc_alloc((Class)IMTimer);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v9 = a1 + 32;
  id v11 = [v8 initWithTimeInterval:@"com.apple.identityservicesd.resetFailureRetries" name:0 shouldWake:v10 target:"_resetFailureRetries" selector:0 userInfo:v7 + 604800.0 - v7];
  id v12 = *(void **)(*(void *)v9 + 104);
  *(void *)(*(void *)v9 + 104) = v11;

  if (IMOSLoggingEnabled())
  {
    unsigned int v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v13 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v7 + 604800.0];
      int v14 = 138412290;
      id v15 = v13;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "Message Failure Retry Count Will Reset on date %@", (uint8_t *)&v14, 0xCu);
    }
LABEL_13:
  }
}

id sub_2D928(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  double v7 = [v5 callerURIForIDSAccount:a2];
  id v8 = [*(id *)(a1 + 32) callerURIForIDSAccount:v6];

  id v9 = [v7 compare:v8];
  return v9;
}

void sub_2E0F8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(void (**)(uint64_t))(v2 + 16);
  unsigned int v4 = a2;
  v3(v2);
  v4[2]();
}

void sub_2E9EC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (IMOSLoggingEnabled())
  {
    double v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      CFStringRef v8 = @"NO";
      if (a3) {
        CFStringRef v8 = @"YES";
      }
      int v14 = 138412546;
      CFStringRef v15 = v8;
      __int16 v16 = 1024;
      int v17 = a4;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Scheduled Message | Done sending FTMessage for refresh request. success %@ error %d", (uint8_t *)&v14, 0x12u);
    }
  }
  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = +[NSDate date];
  [v9 setRefreshDate:v10];

  id v11 = +[IMDAttachmentStore sharedInstance];
  id v12 = *(void **)(a1 + 32);
  id v13 = [v12 messageGUID];
  [v11 storeAttachment:v12 associateWithMessageWithGUID:v13];
}

void sub_2EDE8(id a1)
{
  id v1 = +[IMDCKExitManager sharedInstance];
  [v1 submitCloudKitMetricWithOperationGroupName:IMPostingMissingMessageData];
}

void sub_2EE3C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_2EE68(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_2EE84(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_2FD4C(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x2F4C0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2FF18()
{
  if (IMGetDomainBoolForKeyWithDefaultValue()) {
    return 1;
  }

  return IMGetDomainBoolForKeyWithDefaultValue();
}

id sub_2FF78(uint64_t a1, void *a2)
{
  int v3 = [a2 _stripFZIDPrefix];
  unsigned int v4 = [*(id *)(a1 + 32) _stripFZIDPrefix];
  unsigned __int8 v5 = [v3 isEqualToString:v4];

  if (v5) {
    id v6 = 0;
  }
  else {
    id v6 = v3;
  }

  return v6;
}

uint64_t sub_30000(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_30010(uint64_t a1)
{
}

void sub_30018(uint64_t a1, void *a2, void *a3, char a4, int a5, void *a6, uint64_t a7, void *a8, void *a9)
{
  id v16 = a2;
  id v17 = a3;
  id v18 = a6;
  id v19 = a8;
  __int16 v20 = a9;
  if ((a4 & 1) != 0 || !IMSharedHelperIsUnderAutomation())
  {
    uint64_t v44 = a7;
    uint64_t v23 = v20;
    int v24 = v19;
    id v47 = v17;
    id v25 = v16;
    [*(id *)(a1 + 32) _updateTransfersForAttributionInfoArray:*(void *)(a1 + 40) message:v16];
    uint64_t v26 = [v16 messageSummaryInfo];
    CFMutableDictionaryRef Mutable = (CFMutableDictionaryRef)[v26 mutableCopy];

    if (!Mutable) {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    id v28 = +[NSNumber numberWithBool:1];
    [(__CFDictionary *)Mutable setObject:v28 forKey:IMMessageSummaryInfoUpdatedDateWithServerTime];

    [v16 setMessageSummaryInfo:Mutable];
    v50[0] = _NSConcreteStackBlock;
    v50[1] = 3221225472;
    v50[2] = sub_30570;
    v50[3] = &unk_DE120;
    id v29 = v16;
    id v51 = v29;
    char v45 = v23;
    uint64_t v30 = v23;
    char v80 = *(unsigned char *)(a1 + 232);
    uint64_t v31 = *(void *)(a1 + 32);
    id v76 = v30;
    uint64_t v52 = v31;
    id v53 = *(id *)(a1 + 48);
    id v54 = *(id *)(a1 + 56);
    id v32 = *(id *)(a1 + 64);
    uint64_t v33 = *(void *)(a1 + 224);
    id v55 = v32;
    uint64_t v77 = v33;
    id v56 = *(id *)(a1 + 72);
    char v81 = *(unsigned char *)(a1 + 233);
    id v57 = *(id *)(a1 + 80);
    id v58 = *(id *)(a1 + 88);
    id v59 = *(id *)(a1 + 96);
    id v60 = *(id *)(a1 + 104);
    char v82 = *(unsigned char *)(a1 + 234);
    id v61 = *(id *)(a1 + 112);
    char v83 = *(unsigned char *)(a1 + 235);
    char v84 = a4;
    int v79 = a5;
    id v62 = v18;
    uint64_t v78 = v44;
    id v63 = *(id *)(a1 + 120);
    char v46 = v24;
    id v64 = v24;
    id v65 = *(id *)(a1 + 128);
    id v66 = *(id *)(a1 + 136);
    char v85 = *(unsigned char *)(a1 + 236);
    id v67 = *(id *)(a1 + 144);
    __int16 v86 = *(_WORD *)(a1 + 237);
    id v68 = *(id *)(a1 + 152);
    char v87 = *(unsigned char *)(a1 + 239);
    id v69 = *(id *)(a1 + 160);
    id v70 = *(id *)(a1 + 168);
    id v71 = *(id *)(a1 + 176);
    id v72 = *(id *)(a1 + 184);
    id v73 = *(id *)(a1 + 192);
    id v74 = *(id *)(a1 + 200);
    id v75 = *(id *)(a1 + 208);
    uint64_t v34 = objc_retainBlock(v50);
    uint64_t v35 = [*(id *)(a1 + 32) attachmentController];
    uint64_t v36 = *(void *)(a1 + 216);
    [v29 guid];
    v38 = id v37 = v18;
    uint64_t v39 = [v29 balloonBundleID];
    uint64_t v22 = v25;
    uint64_t v42 = a1 + 104;
    uint64_t v41 = *(void *)(a1 + 104);
    uint64_t v40 = *(void *)(v42 + 8);
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_33940;
    v48[3] = &unk_DE148;
    id v49 = v34;
    uint64_t v43 = v34;
    [v35 processMessageAttachmentDictionary:v36 forMessageGUID:v38 balloonBundleID:v39 fromIdentifier:v40 senderToken:v41 withCompletionBlock:v48];

    id v18 = v37;
    __int16 v20 = v45;

    id v19 = v46;
    id v17 = v47;
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v21 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v21, OS_LOG_TYPE_INFO, "***************** Attachment download failed. Not persisting message as we are under automation ***************", buf, 2u);
      }
    }
    uint64_t v22 = v16;
    if (v20)
    {
      if (*(unsigned char *)(a1 + 232)) {
        [*(id *)(a1 + 32) noteLastItemProcessed];
      }
      v20[2](v20);
      uint64_t v22 = v16;
    }
  }
}

void sub_30570(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v285 = a3;
  uint64_t v295 = a1;
  id v290 = v7;
  if (a4)
  {
    if (!v7)
    {
      id v290 = 0;
      goto LABEL_26;
    }
    if (IMOSLoggingEnabled())
    {
      CFStringRef v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, " Setting message payload downloaded from MMCS", buf, 2u);
      }
    }
    [*(id *)(a1 + 48) setPayloadData:v7];
    if (![v285 count])
    {
LABEL_26:
      id v19 = [*(id *)(a1 + 64) count];
      BOOL v293 = (unint64_t)v19 > 2;
      id v294 = [*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40) chatIdentifier];
      unsigned __int8 v314 = 0;
      unsigned __int8 v314 = [*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40) style];
      if (IMOSLoggingEnabled())
      {
        __int16 v20 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 240) + 8) + 40);
          *(_DWORD *)buf = 138412802;
          *(void *)long long v322 = v294;
          *(_WORD *)&v322[8] = 1024;
          *(_DWORD *)&v322[10] = v314;
          *(_WORD *)&v322[14] = 2112;
          *(void *)&v322[16] = v21;
          _os_log_impl(&dword_0, v20, OS_LOG_TYPE_INFO, "Found chat with chatIdentifier (%@) style (%c): %@", buf, 0x1Cu);
        }
      }
      uint64_t v22 = *(void **)(*(void *)(*(void *)(a1 + 240) + 8) + 40);
      if (v22)
      {
        uint64_t v23 = [v22 service];
        int v24 = [*(id *)(a1 + 40) account];
        id v25 = [v24 service];
        unsigned int v289 = v23 != v25;

        if (v289 && IMOSLoggingEnabled())
        {
          uint64_t v26 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_0, v26, OS_LOG_TYPE_INFO, "Service of found chat not equal, lets register", buf, 2u);
          }
        }
        _UpdateLastAddressedHandle(*(void **)(a1 + 48), *(void **)(a1 + 72), *(void **)(*(void *)(*(void *)(a1 + 240) + 8) + 40));
        BOOL v293 = v314 != 45;
        uint64_t v27 = a1;
        if (*(unsigned char *)(a1 + 261))
        {
          unsigned int v28 = [*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40) isBlackholed];
          uint64_t v27 = a1;
          if (v28)
          {
            if (IMOSLoggingEnabled())
            {
              id v29 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
              {
                id v30 = [*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40) guid];
                *(_DWORD *)buf = 138412290;
                *(void *)long long v322 = v30;
                _os_log_impl(&dword_0, v29, OS_LOG_TYPE_INFO, "Unblackholing chat %@ based on reflection", buf, 0xCu);
              }
            }
            [*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40) updateIsBlackholed:0];
            uint64_t v27 = a1;
          }
        }
        if (*(void *)(v27 + 80))
        {
          unsigned int v31 = [*(id *)(v27 + 40) _convergesDisplayNames];
          uint64_t v27 = a1;
          if (v31)
          {
            [*(id *)(a1 + 40) didReceiveDisplayNameChange:*(void *)(a1 + 80) fromID:*(void *)(a1 + 88) toIdentifier:*(void *)(a1 + 72) forChat:v294 style:v314 account:*(void *)(a1 + 96)];
            uint64_t v27 = a1;
          }
        }
        if ([*(id *)(v27 + 40) isReplicating])
        {
          id v32 = +[NSDate now];
          [*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40) setLastReplicationSinceLoadDate:v32];
        }
        int v284 = 1;
      }
      else
      {
        if ((unint64_t)v19 <= 2)
        {
          id v34 = *(id *)(a1 + 88);
          char v35 = 45;
          uint64_t v33 = v294;
        }
        else
        {
          uint64_t v33 = [*(id *)(a1 + 40) chatRegistry];
          id v34 = [v33 generateUnusedChatIdentifierForGroupChatWithAccount:*(void *)(a1 + 96)];

          char v35 = 43;
        }

        unsigned __int8 v314 = v35;
        if (IMOSLoggingEnabled())
        {
          uint64_t v36 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            *(void *)long long v322 = v34;
            *(_WORD *)&v322[8] = 1024;
            *(_DWORD *)&v322[10] = v314;
            _os_log_impl(&dword_0, v36, OS_LOG_TYPE_INFO, "No chat was found, generating new chatIdentifier: %@ style %c", buf, 0x12u);
          }
        }
        id v37 = *(void **)(a1 + 40);
        id v313 = v34;
        [v37 canonicalizeChatIdentifier:&v313 style:&v314];
        id v294 = v313;

        unsigned int v38 = [*(id *)(a1 + 48) isTypingMessage];
        unsigned int v39 = [*(id *)(a1 + 48) isTypingMessage];
        unsigned int v289 = v38 ^ 1;
        int v284 = v39 ^ 1;
        if (IMOSLoggingEnabled())
        {
          uint64_t v40 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            CFStringRef v41 = @"YES";
            *(_DWORD *)buf = 138413058;
            if (v38) {
              CFStringRef v42 = @"NO";
            }
            else {
              CFStringRef v42 = @"YES";
            }
            *(void *)long long v322 = v294;
            *(_WORD *)&v322[8] = 1024;
            if (v39) {
              CFStringRef v41 = @"NO";
            }
            *(_DWORD *)&v322[10] = v314;
            *(_WORD *)&v322[14] = 2112;
            *(void *)&v322[16] = v42;
            *(_WORD *)&v322[24] = 2112;
            *(void *)&v322[26] = v41;
            _os_log_impl(&dword_0, v40, OS_LOG_TYPE_INFO, "Canonicalized chatIdentifier: %@ style: %c shouldRegister: %@ shouldNotify: %@", buf, 0x26u);
          }
        }
      }
      uint64_t v283 = [*(id *)(a1 + 72) _stripFZIDPrefix];
      if (v293)
      {
        unsigned int v281 = 0;
      }
      else
      {
        unsigned int v281 = 0;
        uint64_t v43 = a1;
        if (!*(unsigned char *)(a1 + 261) || !v283) {
          goto LABEL_71;
        }
        unsigned int v281 = [*(id *)(a1 + 88) isEqualToString:v283];
      }
      uint64_t v43 = a1;
LABEL_71:
      if (*(unsigned char *)(v43 + 261))
      {
        char v45 = *(void **)(v43 + 40);
        uint64_t v44 = v43 + 40;
        [v45 addItemToRecentsIfApplicable:*(void *)(v44 - 8)];
        long long v311 = 0u;
        long long v312 = 0u;
        long long v309 = 0u;
        long long v310 = 0u;
        char v46 = [*(id *)(*(void *)v44 + 96) lastObject];
        id v47 = [v46 service];
        id v48 = [v47 devices];

        id v49 = [v48 countByEnumeratingWithState:&v309 objects:v320 count:16];
        if (v49)
        {
          uint64_t v50 = *(void *)v310;
LABEL_74:
          uint64_t v51 = 0;
          while (1)
          {
            if (*(void *)v310 != v50) {
              objc_enumerationMutation(v48);
            }
            uint64_t v52 = *(void **)(*((void *)&v309 + 1) + 8 * v51);
            id v53 = [v52 pushToken];
            unsigned int v54 = [v53 isEqualToData:*(void *)(v295 + 104)];

            if (v54) {
              break;
            }
            if (v49 == (id)++v51)
            {
              id v49 = [v48 countByEnumeratingWithState:&v309 objects:v320 count:16];
              if (v49) {
                goto LABEL_74;
              }
              goto LABEL_80;
            }
          }
          id v55 = [v52 uniqueID];
          BOOL v56 = v55 == 0;

          if (!v56) {
            goto LABEL_86;
          }
        }
        else
        {
LABEL_80:
        }
        uint64_t v43 = v295;
        int v57 = *(unsigned __int8 *)(v295 + 261);
        char v58 = v293;
        if (!*(unsigned char *)(v295 + 261)) {
          char v58 = 1;
        }
        if ((v58 & 1) == 0)
        {
          objc_msgSend(*(id *)(v295 + 32), "setFlags:", (unint64_t)objc_msgSend(*(id *)(v295 + 32), "flags") | 0x1000);
LABEL_86:
          uint64_t v43 = v295;
          int v57 = *(unsigned __int8 *)(v295 + 261);
        }
        if (v57)
        {
          BOOL v282 = 0;
          int v279 = 0;
          goto LABEL_163;
        }
      }
      if ([*(id *)(v43 + 32) isTypingMessage])
      {
        BOOL v282 = 0;
        int v279 = 0;
LABEL_162:
        uint64_t v43 = v295;
LABEL_163:
        if (!*(unsigned char *)(v43 + 264))
        {
          unsigned int v108 = *(_DWORD *)(v295 + 256);
          if (v108) {
            uint64_t v109 = v108;
          }
          else {
            uint64_t v109 = 37;
          }
          [*(id *)(v295 + 32) setErrorCode:v109];
          if (IMOSLoggingEnabled())
          {
            v110 = OSLogHandleForIMEventCategory();
            if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
            {
              int v111 = *(_DWORD *)(v295 + 256);
              uint64_t v112 = *(void *)(v295 + 120);
              uint64_t v113 = *(void *)(v295 + 248);
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)long long v322 = v111;
              *(_WORD *)&v322[4] = 2112;
              *(void *)&v322[6] = v112;
              *(_WORD *)&v322[14] = 2048;
              *(void *)&v322[16] = v113;
              _os_log_impl(&dword_0, v110, OS_LOG_TYPE_INFO, "** Had attachment download failure: %d, fileTransferError: %@, attachment size %lu", buf, 0x1Cu);
            }
          }
          uint64_t v114 = v295;
          uint64_t v115 = *(void **)(v295 + 120);
          if (v115)
          {
            uint64_t v116 = [v115 domain];
            +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Error domain %@, error code %ld", v116, [*(id *)(v295 + 120) code]);
            int v117 = (__CFString *)objc_claimAutoreleasedReturnValue();

            uint64_t v114 = v295;
          }
          else
          {
            int v117 = @" ";
          }
          unint64_t v118 = *(void *)(v114 + 248);
          uint64_t v119 = [*(id *)(v114 + 40) deliveryController];
          uint64_t v120 = *(void *)(v295 + 112);
          uint64_t v287 = *(void *)(v295 + 104);
          uint64_t v291 = *(void *)(v295 + 72);
          id v121 = [*(id *)(v295 + 96) idsAccount];
          unint64_t v122 = 1000 * (v118 / 0x3E8);
          uint64_t v123 = *(void *)(v295 + 56);
          uint64_t v124 = +[NSNumber numberWithUnsignedInteger:v122];
          v125 = +[NSDate date];
          [v125 timeIntervalSinceDate:*(void *)(v295 + 128)];
          double v127 = v126;
          uint64_t v128 = *(void *)(v295 + 136);
          v302[0] = _NSConcreteStackBlock;
          v302[1] = 3221225472;
          v302[2] = sub_33608;
          v302[3] = &unk_DD9E8;
          int v304 = *(_DWORD *)(v295 + 256);
          id v303 = *(id *)(v295 + 104);
          [v119 sendMessageErrorWithInfo:400 toToken:v287 toID:v120 toGroup:0 fromID:v291 fromAccount:v121 forMessageID:v127 additionalInfo:v123 fileSize:v117 failureTimeSeconds:v124 failReasonMessage:v128 completionBlock:v302];
        }
        id v286 = objc_alloc_init((Class)NSMutableArray);
        if (v293)
        {
          +[MessageGroupController addMembers:*(void *)(v295 + 144) toHandleInfo:v286];
        }
        else
        {
          uint64_t v129 = +[NSNumber numberWithInt:2];
          v130 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v129, kFZChatParticipantStatusKey, v294, kFZPersonID, 0);

          [v286 addObject:v130];
        }
        int v131 = [*(id *)(v295 + 32) balloonBundleID];
        unsigned int v132 = [v131 containsString:IMBalloonPluginIdentifierRichLinks];

        if (v132)
        {
          uint64_t v133 = [*(id *)(v295 + 32) richLinkURLs];
          uint64_t v134 = [v133 lastObject];

          if (v134) {
            goto LABEL_181;
          }
          id v135 = [*(id *)(v295 + 32) body];
          id v136 = [v135 string];
          uint64_t v134 = +[NSURL URLWithString:v136];

          if (v134)
          {
LABEL_181:
            v137 = +[IMSharedWithYouManager sharedManager];
            id v300 = 0;
            id v301 = 0;
            [v137 appNameAndBundleIDFoURL:v134 outAppName:&v301 outBundleID:&v300];
            id v138 = v301;
            id v139 = v300;

            if ([v138 length]) {
              [*(id *)(v295 + 32) setSwyAppName:v138];
            }
            if ([v139 length]) {
              [*(id *)(v295 + 32) setSwyBundleID:v139];
            }
          }
          else if (IMOSLoggingEnabled())
          {
            v152 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v152, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v153 = *(void *)(v295 + 56);
              *(_DWORD *)buf = 138412290;
              *(void *)long long v322 = v153;
              _os_log_impl(&dword_0, v152, OS_LOG_TYPE_DEBUG, "unable to extract URL for message identified as RichLink: %@", buf, 0xCu);
            }
          }
        }
        uint64_t v140 = +[IMSafetyMonitorCoordinator sharedCoordinator];
        [v140 informOfIncomingMessageWithMessage:*(void *)(v295 + 32)];

        CFStringRef v292 = +[NSMutableArray arrayWithCapacity:2];
        id v288 = [*(id *)(v295 + 40) storeBreadcrumbAndSetConsumedPayloadsForNewMessageItemIfNecessary:*(void *)(v295 + 48) inChatWithIdentifier:v294];
        if (v288) {
          [v292 addObject:v288];
        }
        if ([*(id *)(v295 + 48) isBreadcrumb] && IMOSLoggingEnabled())
        {
          unsigned int v141 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v141, OS_LOG_TYPE_INFO))
          {
            unint64_t v142 = *(void **)(v295 + 48);
            uint64_t v143 = [v142 consumedSessionPayloads];
            id v144 = [v143 count];
            *(_DWORD *)buf = 138412546;
            *(void *)long long v322 = v142;
            *(_WORD *)&v322[8] = 2048;
            *(void *)&v322[10] = v144;
            _os_log_impl(&dword_0, v141, OS_LOG_TYPE_INFO, "Receiving breadcrumb %@ with payload history: %tu items.", buf, 0x16u);
          }
        }
        uint64_t v145 = v295;
        if (*(unsigned char *)(v295 + 261))
        {
          if (v289)
          {
            LOBYTE(v278) = v282;
            [*(id *)(v295 + 40) didJoinChat:v294 style:v314 displayName:*(void *)(v295 + 80) groupID:*(void *)(v295 + 152) handleInfo:v286 account:*(void *)(v295 + 96) isBlackholed:v278];
            double v146 = [*(id *)(v295 + 40) chatForChatIdentifier:v294 style:v314];
            _UpdateLastAddressedHandle(*(void **)(v295 + 48), *(void **)(v295 + 72), v146);
          }
          else
          {
            double v146 = [*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) chatIdentifier];
            sub_3378C(v146, (uint64_t)[*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) style]);
          }

          if (!v284)
          {
LABEL_226:
            if (([*(id *)(v295 + 48) isTypingMessage] & 1) == 0)
            {
              uint64_t v158 = *(void *)(v295 + 160);
              if (v158) {
                [*(id *)(v295 + 40) _handleNicknameReceived:v158 fromIdentifier:*(void *)(v295 + 112) withMessageItem:*(void *)(v295 + 48) isSnapTrustedUser:*(unsigned __int8 *)(v295 + 266)];
              }
            }
            if (![v292 count]) {
              goto LABEL_244;
            }
            uint64_t v159 = v295;
            if (*(unsigned char *)(v295 + 267))
            {
              long long v298 = 0u;
              long long v299 = 0u;
              long long v296 = 0u;
              long long v297 = 0u;
              id v160 = v292;
              id v161 = [v160 countByEnumeratingWithState:&v296 objects:v319 count:16];
              if (v161)
              {
                uint64_t v162 = *(void *)v297;
                uint64_t v163 = kIMMessageItemHideLockScreenNotificationsKey;
                do
                {
                  for (i = 0; i != v161; i = (char *)i + 1)
                  {
                    if (*(void *)v297 != v162) {
                      objc_enumerationMutation(v160);
                    }
                    v165 = *(void **)(*((void *)&v296 + 1) + 8 * i);
                    if (([*(id *)(v295 + 32) isTypingMessage] & 1) == 0)
                    {
                      BOOL v166 = [v165 messageSummaryInfo];
                      id v167 = [v166 mutableCopy];

                      if (!v167) {
                        id v167 = objc_alloc_init((Class)NSMutableDictionary);
                      }
                      [v167 setValue:&__kCFBooleanTrue forKey:v163];
                      id v168 = [v167 copy];
                      [v165 setMessageSummaryInfo:v168];
                    }
                  }
                  id v161 = [v160 countByEnumeratingWithState:&v296 objects:v319 count:16];
                }
                while (v161);
              }

              uint64_t v159 = v295;
            }
            if (![*(id *)(v159 + 40) didReceiveMessages:v292 forChat:v294 style:v314 account:*(void *)(v159 + 96) fromIDSID:*(void *)(v159 + 168)])
            {
              if (IMOSLoggingEnabled())
              {
                id v170 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v170, OS_LOG_TYPE_INFO))
                {
                  uint64_t v171 = *(void *)(v295 + 56);
                  *(_DWORD *)buf = 138412290;
                  *(void *)long long v322 = v171;
                  _os_log_impl(&dword_0, v170, OS_LOG_TYPE_INFO, "*** Not all messages successfully stored in database. Not sending IMMessageCheckpointLocationMessageStored checkpoint. guid %@", buf, 0xCu);
                }
              }
              int v280 = 0;
            }
            else
            {
LABEL_244:
              id v169 = im_checkpointIDSService();
              im_sendMessageCheckpointIfNecessary();

              int v280 = 1;
            }
            uint64_t v172 = v295;
            if (((v284 ^ 1 | v293) & 1) == 0 && ((v281 ^ 1) & 1) == 0)
            {
              [*(id *)(v295 + 40) _handleMessageSentToSelf:*(void *)(v295 + 32) chatIdentifier:v294 style:v314 isLocal:0 account:*(void *)(v295 + 96)];
              uint64_t v172 = v295;
            }
            if (([*(id *)(v172 + 32) isTypingMessage] & 1) == 0)
            {
              BOOL v173 = +[IMMetricsCollector sharedInstance];
              [v173 trackEvent:IMMetricsCollectorEventiMessageReceived];
            }
            uint64_t v317 = IMMetricsCollectorError;
            double v174 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", sub_86344((uint64_t)[*(id *)(v295 + 32) errorCode]));
            uint64_t v318 = v174;
            unsigned int v175 = +[NSDictionary dictionaryWithObjects:&v318 forKeys:&v317 count:1];

            uint64_t v176 = +[IMMetricsCollector sharedInstance];
            [v176 trackEvent:IMMetricsCollectorEventIncomingMessage withDictionary:v175];

            uint64_t v177 = v295;
            if (*(void *)(v295 + 80))
            {
              uint64_t v177 = v295;
              if ([*(id *)(v295 + 40) _convergesDisplayNames])
              {
                [*(id *)(v295 + 40) didReceiveDisplayNameChange:*(void *)(v295 + 80) fromID:*(void *)(v295 + 88) toIdentifier:*(void *)(v295 + 72) forChat:v294 style:v314 account:*(void *)(v295 + 96)];
                uint64_t v177 = v295;
              }
            }
            id v179 = *(void **)(v177 + 32);
            uint64_t v178 = (id *)(v177 + 32);
            id v180 = [v179 fileTransferGUIDs];
            BOOL v181 = [v180 count] != 0;

            uint64_t v182 = [*v178 sender];
            uint64_t IsEmail = IMStringIsEmail();

            v315[0] = IMMetricsCollectorFzErrorKey;
            uint64_t v184 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", [*v178 errorCode]);
            v316[0] = v184;
            v315[1] = IMMetricsCollectorMessageErrorKey;
            id v185 = +[NSNumber numberWithLong:0];
            v316[1] = v185;
            v315[2] = IMMetricsCollectorIsTypingIndicatorKey;
            id v186 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(v295 + 48) isTypingMessage]);
            v316[2] = v186;
            v315[3] = IMMetricsCollectorIsGroupMessageKey;
            id v187 = +[NSNumber numberWithBool:v293];
            v316[3] = v187;
            v315[4] = IMMetricsCollectorIsFromPhoneNumberKey;
            v188 = +[NSNumber numberWithBool:IsEmail ^ 1];
            v316[4] = v188;
            v315[5] = IMMetricsCollectorIsFromEmailKey;
            int v189 = +[NSNumber numberWithInt:IsEmail];
            v316[5] = v189;
            v315[6] = IMMetricsCollectorHasAttachmentsKey;
            id v190 = +[NSNumber numberWithBool:v181];
            v316[6] = v190;
            uint64_t v191 = +[NSDictionary dictionaryWithObjects:v316 forKeys:v315 count:7];

            uint64_t v192 = +[IMMetricsCollector sharedInstance];
            [v192 trackEvent:IMMetricsCollectorEventIMessageReceivedMessageSingleComponent withDictionary:v191];

            uint64_t v193 = v295;
            if (!*(unsigned char *)(v295 + 261))
            {
              if (!*(void *)(*(void *)(*(void *)(v295 + 240) + 8) + 40)) {
                goto LABEL_265;
              }
              if (IMOSLoggingEnabled())
              {
                v194 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v194, OS_LOG_TYPE_INFO))
                {
                  uint64_t v195 = *(void *)(v295 + 168);
                  uint64_t v196 = *(void *)(*(void *)(*(void *)(v295 + 240) + 8) + 40);
                  *(_DWORD *)buf = 138412546;
                  *(void *)long long v322 = v195;
                  *(_WORD *)&v322[8] = 2112;
                  *(void *)&v322[10] = v196;
                  _os_log_impl(&dword_0, v194, OS_LOG_TYPE_INFO, "Updating last active device to be %@ for chat %@ on incoming message", buf, 0x16u);
                }
              }
              id v197 = [*(id *)(v295 + 40) deliveryController];
              uint64_t v198 = *(void *)(v295 + 168);
              uint64_t v199 = [*(id *)(v295 + 112) _stripFZIDPrefix];
              [v197 updateLatestActiveDestination:v198 ForHandle:v199 incomingType:0];

              uint64_t v193 = v295;
              if (!*(void *)(*(void *)(*(void *)(v295 + 240) + 8) + 40))
              {
LABEL_265:
                id v200 = *(void **)(v193 + 40);
                v201 = [*(id *)(v193 + 112) _stripFZIDPrefix];
                v202 = [v200 chatForChatIdentifier:v201 style:45];

                if (IMOSLoggingEnabled())
                {
                  BOOL v203 = OSLogHandleForIMFoundationCategory();
                  if (os_log_type_enabled(v203, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v204 = *(void *)(v295 + 168);
                    *(_DWORD *)buf = 138412546;
                    *(void *)long long v322 = v204;
                    *(_WORD *)&v322[8] = 2112;
                    *(void *)&v322[10] = v202;
                    _os_log_impl(&dword_0, v203, OS_LOG_TYPE_INFO, "Updating last active device to be %@ for chat %@ on new incoming message", buf, 0x16u);
                  }
                }
                v205 = [*(id *)(v295 + 40) deliveryController];
                uint64_t v206 = *(void *)(v295 + 168);
                v207 = [*(id *)(v295 + 112) _stripFZIDPrefix];
                [v205 updateLatestActiveDestination:v206 ForHandle:v207 incomingType:0];

                if ((unint64_t)[*(id *)(v295 + 64) count] > 2)
                {
                  if (IMOSLoggingEnabled())
                  {
                    v208 = OSLogHandleForIMFoundationCategory();
                    if (os_log_type_enabled(v208, OS_LOG_TYPE_INFO))
                    {
                      id v209 = [*(id *)(v295 + 32) guid];
                      *(_DWORD *)buf = 138412290;
                      *(void *)long long v322 = v209;
                      _os_log_impl(&dword_0, v208, OS_LOG_TYPE_INFO, "Not updating last addressed handle for msg guid %@ as we couldnt find a group for it", buf, 0xCu);
                    }
                  }
                }
                else
                {
                  _UpdateLastAddressedHandle(*(void **)(v295 + 48), *(void **)(v295 + 72), v202);
                }
              }
            }
            v210 = +[IMDRecentsController sharedInstance];
            [v210 noteRecentMessageFromChatID:v294];

            if (!*(void *)(*(void *)(*(void *)(v295 + 240) + 8) + 40))
            {
              id v211 = +[IMDChatRegistry sharedInstance];
              uint64_t v212 = [v211 existingChatWithIdentifier:v294 account:*(void *)(v295 + 96)];
              uint64_t v213 = *(void *)(*(void *)(v295 + 240) + 8);
              uint64_t v214 = *(void **)(v213 + 40);
              *(void *)(v213 + 40) = v212;

              if (IMOSLoggingEnabled())
              {
                id v215 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v215, OS_LOG_TYPE_INFO))
                {
                  uint64_t v216 = *(void *)(*(void *)(*(void *)(v295 + 240) + 8) + 40);
                  *(_DWORD *)buf = 138412546;
                  *(void *)long long v322 = v294;
                  *(_WORD *)&v322[8] = 2112;
                  *(void *)&v322[10] = v216;
                  _os_log_impl(&dword_0, v215, OS_LOG_TYPE_INFO, "Failed to find or create chat with identifier %@, chat registry lookup found %@", buf, 0x16u);
                }
              }
            }

            if (+[IMSpamFilterHelper isInternationalSpamFilteringEnabled](IMSpamFilterHelper, "isInternationalSpamFilteringEnabled")&& ([*(id *)(v295 + 32) isTypingMessage] & 1) == 0)
            {
              if ([*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) smsHandshakeState] == 1)
              {
                id v217 = +[IMMetricsCollector sharedInstance];
                [v217 trackSpamEvent:4];

                [*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) updateSMSHandshakeState:2];
                v218 = +[IMDChatRegistry sharedInstance];
                id v219 = [*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) chatIdentifier];
                id v220 = objc_msgSend(v218, "existingSMSChatForID:withChatStyle:", v219, objc_msgSend(*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40), "style"));

                if (v220)
                {
                  if (IMOSLoggingEnabled())
                  {
                    uint64_t v221 = OSLogHandleForIMFoundationCategory();
                    if (os_log_type_enabled(v221, OS_LOG_TYPE_INFO))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_0, v221, OS_LOG_TYPE_INFO, "Updating sibling chat handshake state to IMChatSMSHandshakeStateSuccess", buf, 2u);
                    }
                  }
                  [v220 updateSMSHandshakeState:2];
                }
              }
              if ([*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) messageHandshakeState] == 1)
              {
                v222 = +[IMMetricsCollector sharedInstance];
                [v222 trackSpamEvent:3];

                [*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) updateMessageHandshakeState:2];
              }
            }
            uint64_t v223 = v295;
            if (!*(void *)(*(void *)(*(void *)(v295 + 240) + 8) + 40)) {
              goto LABEL_325;
            }
            uint64_t v224 = [*(id *)(v295 + 96) service];
            id v225 = [v224 internalName];
            [*(id *)(v295 + 48) setService:v225];

            uint64_t v226 = [*(id *)(v295 + 160) _stringForKey:MessageDictionaryNicknameParticipantTruncatedRIDKey];
            if (v226) {
              id v227 = (__CFString *)v226;
            }
            else {
              id v227 = &stru_E0738;
            }
            if (IMOSLoggingEnabled())
            {
              uint64_t v228 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v228, OS_LOG_TYPE_INFO))
              {
                uint64_t v229 = *(void *)(v295 + 112);
                *(_DWORD *)buf = 138412546;
                *(void *)long long v322 = v227;
                *(_WORD *)&v322[8] = 2112;
                *(void *)&v322[10] = v229;
                _os_log_impl(&dword_0, v228, OS_LOG_TYPE_INFO, "Received truncated record id %@ from %@", buf, 0x16u);
              }
            }
            char v230 = +[IMDNicknameController sharedInstance];
            [v230 verifyTruncatedRecordIDMatchesPersonalNickname:v227 forChat:*(void *)(*(void *)(*(void *)(v295 + 240) + 8) + 40)];

            uint64_t v223 = v295;
            if (!*(void *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) || *(unsigned char *)(v295 + 261)) {
              goto LABEL_325;
            }
            char v231 = +[IMFeatureFlags sharedFeatureFlags];
            unsigned int v232 = [v231 isCarrierPigeonEnabled];

            if (v232)
            {
              if (*(void *)(v295 + 176))
              {
                id v233 = [*(id *)(v295 + 112) _stripFZIDPrefix];
                v234 = [v283 _stripFZIDPrefix];
                unsigned int v235 = [*(id *)(v295 + 32) time];
                if (IMOSLoggingEnabled())
                {
                  id v236 = OSLogHandleForIMFoundationCategory();
                  if (os_log_type_enabled(v236, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v237 = *(void *)(v295 + 176);
                    *(_DWORD *)buf = 138412802;
                    *(void *)long long v322 = v237;
                    *(_WORD *)&v322[8] = 2112;
                    *(void *)&v322[10] = v233;
                    *(_WORD *)&v322[18] = 2112;
                    *(void *)&v322[20] = v234;
                    _os_log_impl(&dword_0, v236, OS_LOG_TYPE_INFO, "Received availabilityOffGridRecipientEncryptionValidationToken = \"%@\" from \"%@\" to \"%@\"", buf, 0x20u);
                  }
                }
                id v238 = +[IMDOffGridAvailabilityVerificationManager sharedInstance];
                [v238 verifyOffGridSubscriptionMatchesSubscriptionValidationToken:*(void *)(v295 + 184) encryptionValidationToken:*(void *)(v295 + 176) receivedByHandleID:v234 fromHandleID:v233 messageDate:v235];
              }
              else if (IMOSLoggingEnabled())
              {
                id v239 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v239, OS_LOG_TYPE_INFO))
                {
                  uint64_t v240 = *(void *)(v295 + 112);
                  *(_DWORD *)buf = 138412290;
                  *(void *)long long v322 = v240;
                  _os_log_impl(&dword_0, v239, OS_LOG_TYPE_INFO, "Message from %@ did not contain availabilityOffGridRecipientEncryptionValidationToken. Not performing validation.", buf, 0xCu);
                }
              }
            }
            if (*(void *)(v295 + 192))
            {
              id v241 = [*(id *)(v295 + 112) _stripFZIDPrefix];
              uint64_t v242 = [v283 _stripFZIDPrefix];
              id v243 = [*(id *)(v295 + 32) time];
              if (IMOSLoggingEnabled())
              {
                id v244 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v244, OS_LOG_TYPE_INFO))
                {
                  uint64_t v245 = *(void *)(v295 + 192);
                  *(_DWORD *)buf = 138412802;
                  *(void *)long long v322 = v245;
                  *(_WORD *)&v322[8] = 2112;
                  *(void *)&v322[10] = v241;
                  *(_WORD *)&v322[18] = 2112;
                  *(void *)&v322[20] = v242;
                  _os_log_impl(&dword_0, v244, OS_LOG_TYPE_INFO, "Received availabilityVerificationRecipientChannelID = \"%@\" from \"%@\" to \"%@\"", buf, 0x20u);
                }
              }
              uint64_t v246 = +[IMDAvailabilityVerificationManager sharedInstance];
              [v246 verifyPersonalSubscriptionMatchesSubscriptionValidationToken:*(void *)(v295 + 192) encryptionValidationToken:*(void *)(v295 + 200) receivedByHandleID:v242 fromHandleID:v241 messageDate:v243];
            }
            else
            {
              uint64_t v223 = v295;
              if (!IMOSLoggingEnabled())
              {
LABEL_325:
                [*(id *)(v223 + 40) _autoReportChatAsUnknown:*(void *)(*(void *)(*(void *)(v223 + 240) + 8) + 40) chatIsNew:v289];
                uint64_t v249 = *(void **)(v223 + 40);
                id v250 = [*(id *)(v295 + 96) idsAccount];
                id v251 = [v249 _pushHandlerForIDSAccount:v250];

                if (v280)
                {
                  uint64_t v252 = v295;
                  if (v282 && *(unsigned char *)(v295 + 263))
                  {
                    id v253 = 0;
                  }
                  else
                  {
                    id v253 = [*(id *)(v295 + 208) BOOLValue];
                    uint64_t v252 = v295;
                  }
                  if (v279)
                  {
                    id v254 = +[NSNumber numberWithInt:503];
                    uint64_t v252 = v295;
                  }
                  else
                  {
                    id v254 = 0;
                  }
                  uint64_t v255 = *(void *)(v252 + 216);
                  uint64_t v256 = *(void *)(v252 + 224);
                  id v257 = *(void **)(v252 + 40);
                  id v258 = [*(id *)(v252 + 32) guid];
                  LOBYTE(v255) = [v257 _sendCertifiedDeliveryReceiptIfPossible:v255 messageContext:v256 guid:v258 messageWasStored:1 needsDeliveryReceipt:v253 failureReason:v254];

                  if ((v255 & 1) == 0)
                  {
                    id v259 = [v251 account];
                    v260 = (void *)v295;
                    if (!v259)
                    {
                      uint64_t v261 = [*(id *)(v295 + 40) replicationAccount];
                      objc_opt_class();
                      char isKindOfClass = objc_opt_isKindOfClass();

                      if (isKindOfClass)
                      {
                        __int16 v263 = [*(id *)(v295 + 40) replicationAccount];
                        id v259 = [v263 idsAccount];
                      }
                      else
                      {
                        id v259 = 0;
                      }
                      v260 = (void *)v295;
                    }
                    BOOL v264 = (void *)v260[5];
                    uint64_t v265 = v260[7];
                    uint64_t v266 = v260[21];
                    char v267 = +[NSNumber numberWithBool:v253];
                    [v264 sendDeliveryReceiptForMessageID:v265 toID:v266 deliveryContext:0 needsDeliveryReceipt:v267 callerID:*(void *)(v295 + 72) account:v259];
                  }
                }
                if (([*(id *)(v295 + 32) isTypingMessage] & 1) == 0)
                {
                  [v251 sendManualAckForMessageWithContext:*(void *)(v295 + 224)];
                  if (([*(id *)(v295 + 32) isFromMe] & 1) == 0)
                  {
                    char v268 = +[IMMessageNotificationTimeManager sharedInstance];
                    [v268 sendNotificationMessageIfNeededForIncomingMessageFromChatIdentifier:v294];
                  }
                  char v269 = +[IMMessageNotificationTimeManager sharedInstance];
                  [v269 tearDownSessionForChatIdentifier:v294];
                }
                uint64_t v270 = +[IMPowerLog sharedInstance];
                uint64_t v271 = [*(id *)(v295 + 32) guid];
                uint64_t v272 = [*(id *)(v295 + 112) _stripFZIDPrefix];
                char v273 = [*(id *)(v295 + 72) _stripFZIDPrefix];
                id v274 = [*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) powerLogConversationType];
                id v275 = [*(id *)(v295 + 32) powerLogMessageType];
                uint64_t v276 = [*(id *)(v295 + 32) service];
                [v270 logMessageReceivedWithGUID:v271 fromIdentifier:v272 toIdentifier:v273 conversationType:v274 messageType:v275 messageProtocol:v276];

                uint64_t v277 = *(void *)(v295 + 232);
                if (v277)
                {
                  if (*(unsigned char *)(v295 + 260))
                  {
                    [*(id *)(v295 + 40) noteLastItemProcessed];
                    uint64_t v277 = *(void *)(v295 + 232);
                  }
                  (*(void (**)(void))(v277 + 16))();
                }

                goto LABEL_350;
              }
              id v247 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v247, OS_LOG_TYPE_INFO))
              {
                uint64_t v248 = *(void *)(v295 + 112);
                *(_DWORD *)buf = 138412290;
                *(void *)long long v322 = v248;
                _os_log_impl(&dword_0, v247, OS_LOG_TYPE_INFO, "Message from %@ did not contain an availabilityVerificationRecipientChannelID. Not performing validation.", buf, 0xCu);
              }
            }
            uint64_t v223 = v295;
            goto LABEL_325;
          }
          id v150 = [*(id *)(v295 + 40) chatForChatIdentifier:v294 style:v314];
          if (*(unsigned char *)(v295 + 265)) {
            BOOL v151 = 1;
          }
          else {
            BOOL v151 = *(unsigned char *)(v295 + 260) != 0;
          }
          [*(id *)(v295 + 40) didSendMessage:*(void *)(v295 + 32) forChat:v294 style:v314 account:*(void *)(v295 + 96) forceDate:0 itemIsComingFromStorage:v151];
LABEL_225:

          goto LABEL_226;
        }
        id v147 = *(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40);
        uint64_t v148 = v147;
        if (!v289)
        {
          id v150 = v147;
          goto LABEL_223;
        }
        LOBYTE(v278) = v282;
        [*(id *)(v295 + 40) didJoinChat:v294 style:v314 displayName:*(void *)(v295 + 80) groupID:*(void *)(v295 + 152) handleInfo:v286 account:*(void *)(v295 + 96) isBlackholed:v278];
        if (v293)
        {
          if ([*(id *)(v295 + 144) count])
          {
            id v149 = [objc_alloc((Class)NSMutableSet) initWithArray:*(void *)(v295 + 144)];
          }
          else
          {
            id v149 = 0;
          }
          if (v283) {
            [v149 removeObject:v283];
          }
          v154 = +[IMDChatRegistry sharedInstance];
          v155 = [v149 allObjects];
          id v150 = [v154 existingChatForIDs:v155 account:*(void *)(v295 + 96) displayName:*(void *)(v295 + 80) groupID:*(void *)(v295 + 152) style:43];

          if (![*(id *)(v295 + 152) length]) {
            goto LABEL_222;
          }
          if (IMOSLoggingEnabled())
          {
            uint64_t v156 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v156, OS_LOG_TYPE_INFO))
            {
              uint64_t v157 = *(void *)(v295 + 152);
              *(_DWORD *)buf = 138412546;
              *(void *)long long v322 = v157;
              *(_WORD *)&v322[8] = 2112;
              *(void *)&v322[10] = v150;
              _os_log_impl(&dword_0, v156, OS_LOG_TYPE_INFO, "     ** Setting group_id to %@ on chat %@, as we just got invited to it!", buf, 0x16u);
            }
          }
          [v150 setGroupID:*(void *)(v295 + 152)];
          uint64_t v148 = +[IMDChatStore sharedInstance];
          [v148 storeChat:v150];
        }
        else
        {
          id v149 = +[IMDChatRegistry sharedInstance];
          id v150 = [v149 existingChatForID:*(void *)(v295 + 88) account:*(void *)(v295 + 96)];
        }

LABEL_222:
        uint64_t v145 = v295;
LABEL_223:
        [*(id *)(v145 + 40) _fixParticipantsForChat:v150];
        _UpdateLastAddressedHandle(*(void **)(v295 + 48), *(void **)(v295 + 72), v150);
        if (v284) {
          [v292 addObject:*(void *)(v295 + 32)];
        }
        goto LABEL_225;
      }
      if ([*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) isOscarChat])
      {
        if (IMOSLoggingEnabled())
        {
          id v59 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
          {
            uint64_t v60 = *(void *)(v295 + 56);
            *(_DWORD *)buf = 138412290;
            *(void *)long long v322 = v60;
            _os_log_impl(&dword_0, v59, OS_LOG_TYPE_INFO, "Message %@ is a junk message.", buf, 0xCu);
          }
        }
        int v61 = 1;
      }
      else
      {
        if (*(void *)(*(void *)(*(void *)(v295 + 240) + 8) + 40)
          || *(unsigned char *)(v295 + 262)
          || (+[IMDAccountController sharedAccountController](IMDAccountController, "sharedAccountController"), id v62 = objc_claimAutoreleasedReturnValue(), v63 = [v62 receiverIsCandidateForJunk:*(void *)(v295 + 72) forAccount:*(void *)(v295 + 96)], v62, !v63))
        {
          int v279 = 0;
LABEL_108:
          id v67 = +[IMDAccountController sharedAccountController];
          id v68 = [v67 activeAccountsAreEligibleForHawking];

          if (!+[IMSpamFilterHelper isBlackholeEnabledForEligibleAccounts:v68])
          {
            BOOL v282 = 0;
LABEL_159:
            if (+[IMSpamFilterHelper isInternationalSpamFilteringEnabled](IMSpamFilterHelper, "isInternationalSpamFilteringEnabled")&& [*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) receivedBlackholeError])
            {
              [*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) updateReceivedBlackholeError:0];
              BOOL v106 = +[IMDChatStore sharedInstance];
              uint64_t v107 = *(void *)(*(void *)(*(void *)(v295 + 240) + 8) + 40);
              v305[0] = _NSConcreteStackBlock;
              v305[1] = 3221225472;
              v305[2] = sub_334A0;
              v305[3] = &unk_DD9C0;
              v305[4] = *(void *)(v295 + 40);
              id v306 = *(id *)(v295 + 96);
              [v106 remapMessageError:43 toError:0 forChat:v107 completion:v305];
            }
            goto LABEL_162;
          }
          id v69 = +[IMMetricsCollector sharedInstance];
          id v70 = v69;
          if (v293) {
            uint64_t v71 = 12;
          }
          else {
            uint64_t v71 = 11;
          }
          [v69 trackSpamEvent:v71];

          id v72 = [*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) lastMessage];

          id v73 = *(void **)(*(void *)(*(void *)(v295 + 240) + 8) + 40);
          if (v73) {
            BOOL v74 = v72 == 0;
          }
          else {
            BOOL v74 = 1;
          }
          if (!v74)
          {
            unsigned int v82 = [v73 isBlackholed];
            if (v82)
            {
              char v83 = +[IMMetricsCollector sharedInstance];
              char v84 = v83;
              if (v293) {
                uint64_t v85 = 14;
              }
              else {
                uint64_t v85 = 13;
              }
              [v83 trackSpamEvent:v85];
            }
            if (IMOSLoggingEnabled())
            {
              __int16 v86 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
              {
                id v87 = [*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) chatIdentifier];
                uint64_t v88 = v87;
                CFStringRef v89 = @"NO";
                if (v82) {
                  CFStringRef v89 = @"YES";
                }
                *(_DWORD *)buf = 138412546;
                *(void *)long long v322 = v87;
                *(_WORD *)&v322[8] = 2112;
                *(void *)&v322[10] = v89;
                _os_log_impl(&dword_0, v86, OS_LOG_TYPE_INFO, "Found existing chat (%@) with blackhole status: %@", buf, 0x16u);
              }
            }
            goto LABEL_145;
          }
          id v75 = *(void **)(v295 + 40);
          uint64_t v76 = *(void *)(v295 + 112);
          uint64_t v77 = *(void *)(v295 + 72);
          if (v293)
          {
            if ([v75 _shouldBlackholeGroupChatFromSender:v76 toRecipient:v77 withOtherParticipants:*(void *)(v295 + 64) forAccount:*(void *)(v295 + 96)])
            {
              if (IMOSLoggingEnabled())
              {
                uint64_t v78 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
                {
                  uint64_t v79 = *(void *)(v295 + 56);
                  uint64_t v80 = *(void *)(v295 + 112);
                  uint64_t v81 = *(void *)(v295 + 72);
                  *(_DWORD *)buf = 138412802;
                  *(void *)long long v322 = v79;
                  *(_WORD *)&v322[8] = 2112;
                  *(void *)&v322[10] = v80;
                  *(_WORD *)&v322[18] = 2112;
                  *(void *)&v322[20] = v81;
                  _os_log_impl(&dword_0, v78, OS_LOG_TYPE_INFO, "Should blackhole group chat (%@) from (%@) to (%@)", buf, 0x20u);
                }
LABEL_138:

                goto LABEL_139;
              }
              goto LABEL_139;
            }
          }
          else if ([v75 _shouldBlackholeChatFromSender:v76 toRecipient:v77 forAccount:*(void *)(v295 + 96)])
          {
            if (IMOSLoggingEnabled())
            {
              uint64_t v78 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
              {
                uint64_t v90 = *(void *)(v295 + 56);
                uint64_t v91 = *(void *)(v295 + 112);
                uint64_t v92 = *(void *)(v295 + 72);
                *(_DWORD *)buf = 138412802;
                *(void *)long long v322 = v90;
                *(_WORD *)&v322[8] = 2112;
                *(void *)&v322[10] = v91;
                *(_WORD *)&v322[18] = 2112;
                *(void *)&v322[20] = v92;
                _os_log_impl(&dword_0, v78, OS_LOG_TYPE_INFO, "Should blackhole message (%@) from (%@) to (%@)", buf, 0x20u);
              }
              goto LABEL_138;
            }
LABEL_139:
            char v93 = 0;
            unsigned int v82 = 1;
            goto LABEL_141;
          }
          unsigned int v82 = 0;
          char v93 = 1;
LABEL_141:
          uint64_t v94 = v295;
          if ((v93 & 1) != 0 || (int v95 = *(void **)(*(void *)(*(void *)(v295 + 240) + 8) + 40)) == 0 || v72)
          {
LABEL_146:
            char v96 = v293;
            if (!v82) {
              char v96 = 1;
            }
            if (v96)
            {
              if (!v82) {
                goto LABEL_158;
              }
            }
            else if (*(unsigned char *)(v94 + 263))
            {
              if (IMOSLoggingEnabled())
              {
                uint64_t v97 = OSLogHandleForIMEventCategory();
                if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
                {
                  uint64_t v98 = *(void *)(v295 + 56);
                  uint64_t v99 = *(void *)(v295 + 112);
                  id v100 = [*(id *)(*(void *)(*(void *)(v295 + 240) + 8) + 40) chatIdentifier];
                  *(_DWORD *)buf = 138412802;
                  *(void *)long long v322 = v98;
                  *(_WORD *)&v322[8] = 2112;
                  *(void *)&v322[10] = v99;
                  *(_WORD *)&v322[18] = 2112;
                  *(void *)&v322[20] = v100;
                  _os_log_impl(&dword_0, v97, OS_LOG_TYPE_INFO, "Blackholing message (%@) from (%@) to (%@)", buf, 0x20u);
                }
              }
              uint64_t v101 = [*(id *)(v295 + 40) deliveryController];
              uint64_t v102 = *(void *)(v295 + 112);
              uint64_t v103 = *(void *)(v295 + 72);
              v104 = [*(id *)(v295 + 40) idsAccountForURI:v103 IDSServiceName:@"com.apple.madrid"];
              unsigned int v105 = *(void **)(v295 + 56);
              v307[0] = _NSConcreteStackBlock;
              v307[1] = 3221225472;
              v307[2] = sub_33324;
              v307[3] = &unk_DD998;
              id v308 = v105;
              [v101 sendMessageError:502 toToken:0 toID:v102 toGroup:0 fromID:v103 fromAccount:v104 forMessageID:v308 completionBlock:v307];
            }
            objc_msgSend(*(id *)(v295 + 32), "setFlags:", (unint64_t)objc_msgSend(*(id *)(v295 + 32), "flags") | 0x2000);
LABEL_158:
            BOOL v282 = v82 != 0;
            goto LABEL_159;
          }
          [v95 updateIsBlackholed:1];
          unsigned int v82 = 1;
LABEL_145:
          uint64_t v94 = v295;
          goto LABEL_146;
        }
        unsigned int v64 = +[IMSpamFilterHelper isKnownContact:*(void *)(v295 + 112)];
        if ((v64 & 1) == 0 && IMOSLoggingEnabled())
        {
          id v65 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
          {
            uint64_t v66 = *(void *)(v295 + 56);
            *(_DWORD *)buf = 138412290;
            *(void *)long long v322 = v66;
            _os_log_impl(&dword_0, v65, OS_LOG_TYPE_INFO, "Message %@ is a junk message.", buf, 0xCu);
          }
        }
        int v61 = v64 ^ 1;
      }
      int v279 = v61;
      goto LABEL_108;
    }
    uint64_t v9 = +[IMDFileTransferCenter sharedInstance];
    uint64_t v10 = [v9 guidsForStoredAttachmentPayloadDataURLs:v285 messageGUID:*(void *)(a1 + 56)];

    [*(id *)(a1 + 48) setFileTransferGUIDs:v10];
LABEL_15:

    goto LABEL_26;
  }
  id v11 = [*(id *)(a1 + 32) balloonBundleID];
  unsigned __int8 v12 = [v11 isEqualToString:IMBalloonPluginIdentifierRichLinks];

  int v13 = IMOSLoggingEnabled();
  if (v12)
  {
    if (v13)
    {
      int v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        id v15 = [*(id *)(a1 + 32) guid];
        *(_DWORD *)buf = 138412290;
        *(void *)long long v322 = v15;
        _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "Did not download payload data for message %@ but we are continuing", buf, 0xCu);
      }
    }
    uint64_t v10 = v7;
    id v290 = 0;
    goto LABEL_15;
  }
  if (v13)
  {
    id v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      id v17 = [*(id *)(a1 + 32) guid];
      *(_DWORD *)buf = 138412290;
      *(void *)long long v322 = v17;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "PayloadAttachments Failed downloading payload data for message %@", buf, 0xCu);
    }
  }
  uint64_t v18 = *(void *)(a1 + 232);
  if (v18)
  {
    if (*(unsigned char *)(a1 + 260))
    {
      [*(id *)(a1 + 40) noteLastItemProcessed];
      uint64_t v18 = *(void *)(a1 + 232);
    }
    (*(void (**)(void))(v18 + 16))();
  }
LABEL_350:
}

void sub_33324(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      unsigned __int8 v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        int v16 = 138412290;
        uint64_t v17 = v13;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "Succesfully blackholed message: %@", (uint8_t *)&v16, 0xCu);
      }
    }
  }
  else if (v11)
  {
    int v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      int v16 = 138412546;
      uint64_t v17 = v15;
      __int16 v18 = 1024;
      int v19 = a5;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "** Failed to blackhole message: (%@) with error: %d", (uint8_t *)&v16, 0x12u);
    }
  }
}

void sub_334A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8 * (void)v7);
        id v9 = +[IMDMessageStore sharedInstance];
        id v10 = [v9 messageWithGUID:v8];

        int v11 = [*(id *)(a1 + 32) broadcasterForChatListeners];
        unsigned __int8 v12 = [*(id *)(a1 + 40) accountID];
        [v11 account:v12 chat:0 style:0 chatProperties:0 messageUpdated:v10];

        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }
}

void sub_33608(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  int v9 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v9)
    {
      id v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        int v11 = *(_DWORD *)(a1 + 40);
        uint64_t v12 = *(void *)(a1 + 32);
        int v15 = 67109378;
        int v16 = v11;
        __int16 v17 = 2112;
        uint64_t v18 = v12;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEBUG, "Finished sending attachment download error: %d  to token: %@", (uint8_t *)&v15, 0x12u);
      }
LABEL_9:
    }
  }
  else if (v9)
  {
    id v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *(_DWORD *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 32);
      int v15 = 67109378;
      int v16 = v13;
      __int16 v17 = 2112;
      uint64_t v18 = v14;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEBUG, "** Failed sending attachment download error: %d  to token: %@", (uint8_t *)&v15, 0x12u);
    }
    goto LABEL_9;
  }
}

void sub_3378C(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = +[IMDChatRegistry sharedInstance];
  id v5 = [v4 allExistingSupportedServiceChatsWithIdentifier:v3 style:a2];

  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      id v17 = v3;
      __int16 v18 = 1024;
      int v19 = a2;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Checking if chats with chatIdentifier %@ and style %hhu need to have shouldForceToSMS updated to NO.", buf, 0x12u);
    }
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v12;
    do
    {
      id v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v7);
        }
        objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * (void)v10), "updateShouldForceToSMS:", 0, (void)v11);
        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v7 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }
}

void sub_33940(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (IMOSLoggingEnabled())
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = 134218242;
      id v9 = [v5 length];
      __int16 v10 = 2112;
      id v11 = v6;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Setting payload to length: %lu with attachments: %@", (uint8_t *)&v8, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_33A70(uint64_t a1, void *a2, void *a3, char a4, int a5, void *a6, uint64_t a7, void *a8)
{
  id v15 = a2;
  id v16 = a3;
  id v17 = a6;
  id v18 = a8;
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_33DB0;
  v40[3] = &unk_DDA60;
  id v46 = *(id *)(a1 + 40);
  id v19 = v15;
  id v41 = v19;
  id v20 = v16;
  id v42 = v20;
  char v50 = a4;
  int v49 = a5;
  id v21 = v17;
  id v43 = v21;
  uint64_t v48 = a7;
  id v22 = v18;
  id v44 = v22;
  id v23 = *(id *)(a1 + 48);
  char v51 = *(unsigned char *)(a1 + 56);
  uint64_t v24 = *(void *)(a1 + 32);
  id v47 = v23;
  uint64_t v45 = v24;
  id v25 = objc_retainBlock(v40);
  uint64_t v26 = [v19 balloonBundleID];
  uint64_t v27 = IMBalloonExtensionIDWithSuffix();
  LODWORD(v15) = [v26 isEqualToString:v27];

  if (v15)
  {
    if ([v19 isFromMe])
    {
      unsigned int v28 = [v19 service];
      id v29 = +[IMSenderContext fromMeContextWithServiceName:v28];
    }
    else
    {
      id v30 = +[IMDChatRegistry sharedInstance];
      unsigned int v31 = [v19 sender];
      id v32 = [v30 hasKnownSenderChatWithChatIdentifier:v31];

      unsigned int v28 = [v19 service];
      id v33 = +[IMSenderContext contextWithKnownSender:v32 serviceName:v28];
    }

    id v34 = +[MessageTranscodeController sharedInstance];
    char v35 = [v19 guid];
    uint64_t v36 = [v19 payloadData];
    id v37 = [v19 balloonBundleID];
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_33E40;
    v38[3] = &unk_DDA88;
    unsigned int v39 = v25;
    [v34 generateSnapshotForMessageGUID:v35 payloadData:v36 balloonBundleID:v37 senderContext:0 completionBlock:v38];
  }
  else
  {
    ((void (*)(void *))v25[2])(v25);
  }
}

uint64_t sub_33DB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void, void))(v2 + 16))(v2, *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 100), *(unsigned int *)(a1 + 96), *(void *)(a1 + 48), *(void *)(a1 + 88), *(void *)(a1 + 56), *(void *)(a1 + 80));
  }
  if (*(unsigned char *)(a1 + 101)) {
    [*(id *)(a1 + 64) noteLastItemProcessed];
  }
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 80) + 16);

  return v4();
}

uint64_t sub_33E40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_34068(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = +[IMDFileTransferCenter sharedInstance];
  id v9 = [v6 transferForGUID:v5];

  id v7 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a3];
  objc_opt_class();
  LOBYTE(v5) = objc_opt_isKindOfClass();

  if (v5)
  {
    int v8 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a3];
    [v9 setAttributionInfo:v8];
  }
}

id sub_34454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _[*(id *)(a1 + 32) _nicknameFetchCompletedMessage:*(void *)(a1 + 40) synchronous:a5 profile:a2 nickNameWasInCache:a3 nickNameDownloadError:a4];
}

void sub_34EC8(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v6 = a4;
  int v8 = a2;
  id v9 = a3;
  int v10 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v10)
    {
      id v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        __int16 v15 = 0;
        long long v12 = "Completed reflecting mark as unread to peer devices.";
        long long v13 = (uint8_t *)&v15;
LABEL_8:
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, v12, v13, 2u);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if (v10)
  {
    id v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      __int16 v14 = 0;
      long long v12 = "Failed to reflect mark unread to peer devices.";
      long long v13 = (uint8_t *)&v14;
      goto LABEL_8;
    }
LABEL_9:
  }
}

void sub_353D4(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v6 = a4;
  int v8 = a2;
  id v9 = a3;
  int v10 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v10)
    {
      id v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        __int16 v15 = 0;
        long long v12 = "Completed reflecting recover junk chat to peer devices.";
        long long v13 = (uint8_t *)&v15;
LABEL_8:
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, v12, v13, 2u);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if (v10)
  {
    id v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      __int16 v14 = 0;
      long long v12 = "Failed to reflect recover junk chat to peer devices.";
      long long v13 = (uint8_t *)&v14;
      goto LABEL_8;
    }
LABEL_9:
  }
}

BOOL sub_35D7C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 _stripFZIDPrefix];
  CMFItemFromString = (const void *)CreateCMFItemFromString();
  int IsItemBlocked = CMFBlockListIsItemBlocked();
  if (CMFItemFromString) {
    CFRelease(CMFItemFromString);
  }
  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      CFStringRef v6 = @"NO";
      if (IsItemBlocked) {
        CFStringRef v6 = @"YES";
      }
      int v8 = 138412546;
      id v9 = v1;
      __int16 v10 = 2112;
      CFStringRef v11 = v6;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "filtering message for handle: %@ = %@", (uint8_t *)&v8, 0x16u);
    }
  }
  return IsItemBlocked != 0;
}

void sub_35EB4(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) copy];
  [v8 setSender:*(void *)(a1 + 40)];
  uint64_t v2 = +[NSString stringGUID];
  [v8 setGuid:v2];

  [v8 setFlags:1];
  if (!*(unsigned char *)(a1 + 64)) {
    objc_msgSend(v8, "setFlags:", (unint64_t)objc_msgSend(v8, "flags") | 0x2000);
  }
  [*(id *)(a1 + 48) didReceiveMessage:v8 forChat:*(void *)(a1 + 40) style:*(unsigned __int8 *)(a1 + 65) account:*(void *)(a1 + 56) fromIDSID:0];
  if (*(unsigned char *)(a1 + 65) == 45)
  {
    id v3 = *(void **)(a1 + 48);
    id v4 = [*(id *)(a1 + 32) guid];
    id v5 = +[NSDate date];
    [v3 didReceiveMessageDeliveryReceiptForMessageID:v4 date:v5 account:*(void *)(a1 + 56)];

    if (*(unsigned char *)(a1 + 65) == 45 && *(unsigned char *)(a1 + 66) && *(unsigned char *)(a1 + 64))
    {
      CFStringRef v6 = *(void **)(a1 + 48);
      id v7 = [*(id *)(a1 + 32) guid];
      [v6 didSendMessageReadReceiptForMessageID:v7 account:*(void *)(a1 + 56)];
    }
  }
}

void sub_368CC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  id v8 = a2;
  id v9 = IMLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v10;
    _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "Executing NOOP command handler for local command: %@", (uint8_t *)&v12, 0xCu);
  }

  CFStringRef v11 = [v8 service];

  [v11 sendAckForMessageWithContext:v7];
}

void sub_38694(uint64_t a1, uint64_t a2, void *a3)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [a3 stringValue];
  }
  id v5 = (void *)IMCreateEscapedAttributeValueFromString();
  id v6 = (id)IMCreateEscapedAttributeValueFromString();
  if (v5 && v6)
  {
    [*(id *)(*(void *)(a1 + 32) + 8) appendFormat:@" %@=\"%@\"", v5, v6];
    [*(id *)(*(void *)(a1 + 32) + 24) appendFormat:@" %@=\"%@\"", v5, v6];
  }
}

void sub_38778(uint64_t a1, uint64_t a2, void *a3)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [a3 stringValue];
  }
  id v5 = (void *)IMCreateEscapedAttributeValueFromString();
  id v6 = (id)IMCreateEscapedAttributeValueFromString();
  uint64_t v7 = IMStickerUserInfoStickerTranscodedStickerHashKey;
  if (([v5 isEqualToString:IMStickerUserInfoStickerTranscodedStickerHashKey] & 1) != 0
    || (uint64_t v8 = IMStickerUserInfoTranscodedScaleKey,
        [v5 isEqualToString:IMStickerUserInfoTranscodedScaleKey]))
  {
    if (IMOSLoggingEnabled())
    {
      id v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "Not adding transcoded hash or scale key", buf, 2u);
      }
    }
  }
  else
  {
    if ([v5 isEqualToString:IMStickerUserInfoStickerHashKey]
      && objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v7), "length"))
    {

      id v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v7), "copy");
    }
    if ([v5 isEqualToString:IMStickerUserInfoScaleKey]
      && objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v8), "length"))
    {

      id v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v8), "copy");
    }
    if (v5 && v6)
    {
      [*(id *)(*(void *)(a1 + 40) + 8) appendFormat:@" %@=\"%@\"", v5, v6];
      [*(id *)(*(void *)(a1 + 40) + 24) appendFormat:@" %@=\"%@\"", v5, v6];
    }
  }
}

void sub_38970(uint64_t a1, uint64_t a2, void *a3)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [a3 stringValue];
  }
  id v5 = (void *)IMCreateEscapedAttributeValueFromString();
  uint64_t v6 = IMCreateEscapedAttributeValueFromString();
  id v7 = (id)v6;
  if (v5 && v6) {
    [*(id *)(*(void *)(a1 + 32) + 24) appendFormat:@" %@=\"%@\"", v5, v6];
  }
}

void sub_39064(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  id v8 = a2;
  id v9 = IMLogHandleForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v10;
    _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "Executing NOOP command handler for command: %@", (uint8_t *)&v12, 0xCu);
  }

  CFStringRef v11 = [v8 service];

  [v11 sendAckForMessageWithContext:v7];
}

uint64_t sub_3A02C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(result + 32));
  }
  return result;
}

void sub_3C104(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x3BE18);
  }
  _Unwind_Resume(a1);
}

void sub_3DB84(uint64_t a1, int a2, void *a3)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = [*(id *)(a1 + 32) ID];
      CFStringRef v8 = @"NO";
      if (a2) {
        CFStringRef v8 = @"YES";
      }
      int v11 = 138412546;
      CFStringRef v12 = v8;
      __int16 v13 = 2112;
      id v14 = v7;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Appending off grid status of %@ for handle ID %@ ", (uint8_t *)&v11, 0x16u);
    }
  }
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1), @"sofg");
    if (a3)
    {
      id v9 = objc_msgSend(a3, "__imHexString");
      if (v9) {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), @"sofgid", v9);
      }
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        LOWORD(v11) = 0;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "Missing identifier for this off grid status payload!", (uint8_t *)&v11, 2u);
      }
    }
  }
}

void sub_3F7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x3F3D8);
  }
  _Unwind_Resume(exception_object);
}

void sub_3F9E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (objc_msgSend(+[IMFeatureFlags sharedFeatureFlags](IMFeatureFlags, "sharedFeatureFlags"), "isScheduledMessagesCoreEnabled"))
  {
    if ([a2 scheduleType] == (char *)&dword_0 + 2)
    {
      if (objc_msgSend(objc_msgSend(a2, "editedPartIndexes"), "count"))
      {
        BOOL v12 = 0;
        if (!a5) {
          goto LABEL_17;
        }
      }
      else
      {
        BOOL v12 = objc_msgSend(objc_msgSend(a2, "retractedPartIndexes"), "count") == 0;
        if (!a5) {
          goto LABEL_17;
        }
      }
      if (v12) {
        goto LABEL_17;
      }
      id v14 = -[IMDMessageStore messageWithGUID:](+[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance"), "messageWithGUID:", [a2 guid]);
      unsigned int v13 = 3;
      if ([v14 scheduleType] != (char *)&dword_0 + 2) {
        goto LABEL_23;
      }
      __int16 v15 = (char *)[v14 scheduleState];
      unsigned int v13 = v15 == (unsigned char *)&dword_0 + 2 ? a6 : 3;
      if (v15 != (unsigned char *)&dword_0 + 2) {
        goto LABEL_23;
      }
    }
    else
    {
      unsigned int v13 = a6;
    }
    if (a5) {
      goto LABEL_18;
    }
    goto LABEL_23;
  }
LABEL_17:
  unsigned int v13 = a6;
  if (a5)
  {
LABEL_18:
    if (([*(id *)(a1 + 32) isTypingMessage] & 1) == 0
      && IMOSLoggingEnabled())
    {
      id v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        id v22 = a2;
        __int16 v23 = 2112;
        uint64_t v24 = a3;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "Finished processing attachments for message: %@  for display IDs: %@", buf, 0x16u);
      }
    }
    LOBYTE(v20) = *(unsigned char *)(a1 + 176);
    objc_msgSend(*(id *)(a1 + 40), "_sendMessage:context:deliveryContext:fromID:fromAccount:toID:chatIdentifier:toSessionToken:toGroup:toParticipants:originallyToParticipants:requiredRegProperties:interestingRegProperties:requiresLackOfRegProperties:canInlineAttachments:type:msgPayloadUploadDictionary:originalPayload:replyToMessageGUID:willSendBlock:completionBlock:", a2, a4, *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), 0, *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), v20,
      2,
      *(void *)(a1 + 136),
      *(void *)(a1 + 144),
      *(void *)(a1 + 152),
      *(void *)(a1 + 160),
      *(void *)(a1 + 168));
    return;
  }
LABEL_23:
  if (IMOSLoggingEnabled())
  {
    id v17 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      id v22 = a2;
      __int16 v23 = 2112;
      uint64_t v24 = a3;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "Failed processing attachments for message: %@  for display IDs: %@", buf, 0x16u);
    }
  }
  uint64_t v18 = *(void *)(a1 + 168);
  if (v18)
  {
    if (v13) {
      uint64_t v19 = v13;
    }
    else {
      uint64_t v19 = 34;
    }
    (*(void (**)(uint64_t, void, uint64_t, void, uint64_t, id))(v18 + 16))(v18, *(void *)(a1 + 40), a3, 0, v19, [*(id *)(a1 + 32) backwardsCompatibleVersion]);
  }
}

void sub_3FCBC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if ([a3 count])
  {
    if (IMOSLoggingEnabled())
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v116 = a3;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "Couldn't send new features to these destinations: %@", buf, 0xCu);
      }
    }
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    char v83 = (uint64_t *)a1;
    id obj = [*(id *)(a1 + 32) fileTransferGUIDs];
    id v85 = [obj countByEnumeratingWithState:&v110 objects:v122 count:16];
    if (v85)
    {
      int v6 = 0;
      char v81 = 0;
      char v86 = 0;
      int v7 = 0;
      int v8 = 0;
      int v9 = 0;
      uint64_t v84 = *(void *)v111;
      do
      {
        for (i = 0; i != v85; i = (char *)i + 1)
        {
          if (*(void *)v111 != v84) {
            objc_enumerationMutation(obj);
          }
          id v11 = [+[IMDFileTransferCenter sharedInstance] transferForGUID:*(void *)(*((void *)&v110 + 1) + 8 * i)];
          unsigned int v12 = [v11 isRecipeBasedSticker];
          unsigned int v13 = [v11 isAutoloopVideo];
          unsigned int v14 = [v11 isOpusAudioMessage];
          unsigned __int8 v15 = [v11 isAnimojiV2];
          if ([v11 isAdaptiveImageGlyph])
          {
            v6 |= objc_msgSend(objc_msgSend(+[IDSServerBag sharedInstanceForBagType:](IDSServerBag, "sharedInstanceForBagType:", 1), "objectForKey:", @"backwards-compat-enabled-adaptive-image-glyphs"), "BOOLValue") ^ 1;
            char v81 = 1;
          }
          if ((objc_msgSend(+[IMFeatureFlags sharedFeatureFlags](IMFeatureFlags, "sharedFeatureFlags"), "isClingBackwardsCompatibilityEnabled") & 1) == 0)v6 |= objc_msgSend((id)v83[5], "_transferIsUserGeneratedOrEmojiSticker:", v11); {
          v9 |= v12;
          }
          v8 |= v13;
          v7 |= v14;
          v86 |= v15;
        }
        id v85 = [obj countByEnumeratingWithState:&v110 objects:v122 count:16];
      }
      while (v85);
    }
    else
    {
      LOBYTE(v6) = 0;
      char v81 = 0;
      char v86 = 0;
      int v7 = 0;
      int v8 = 0;
      int v9 = 0;
    }
    id v16 = (char *)[(id)v83[4] associatedMessageType];
    if (v16 == (unsigned char *)&stru_790.reserved1 + 2
      || v16 == &stru_BA0.segname[14]
      || (id v17 = (char *)[(id)v83[4] associatedMessageType], v17 == &stru_BA0.segname[15])
      || v17 == (unsigned char *)&stru_790.reserved1 + 3)
    {
      LOBYTE(v6) = objc_msgSend(objc_msgSend(+[IDSServerBag sharedInstanceForBagType:](IDSServerBag, "sharedInstanceForBagType:", 1), "objectForKey:", @"backwards-compat-enabled-etap"), "BOOLValue") ^ 1 | v6;
    }
    v100[0] = _NSConcreteStackBlock;
    v100[1] = 3221225472;
    long long v101 = *((_OWORD *)v83 + 2);
    long long v18 = *((_OWORD *)v83 + 4);
    long long v105 = *((_OWORD *)v83 + 3);
    long long v106 = v18;
    long long v19 = *((_OWORD *)v83 + 6);
    long long v107 = *((_OWORD *)v83 + 5);
    v100[2] = sub_408E4;
    v100[3] = &unk_DE400;
    uint64_t v102 = a4;
    uint64_t v103 = a3;
    long long v108 = v19;
    uint64_t v20 = v83[15];
    uint64_t v104 = a2;
    uint64_t v109 = v20;
    uint64_t v21 = IMBalloonExtensionIDWithSuffix();
    id v22 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v21, IMBalloonExtensionIDWithSuffix(), 0);
    id v23 = [(id)v83[4] balloonBundleID];
    uint64_t v24 = v83;
    if (!v23) {
      goto LABEL_87;
    }
    if (!v83[14])
    {
      unsigned __int8 v35 = -[NSSet containsObject:](v22, "containsObject:", [(id)v83[4] balloonBundleID]);
      uint64_t v24 = v83;
      if (v9 & 1 | ((v35 & 1) == 0) | (v8 | v7) & 1) {
        goto LABEL_26;
      }
    }
    else
    {
LABEL_87:
      if ((v9 | v8 | v7))
      {
LABEL_26:
        uint64_t v26 = v24[4];
        id v25 = (void *)v24[5];
        uint64_t v28 = v24[6];
        uint64_t v27 = v24[7];
        uint64_t v29 = v24[8];
        uint64_t v30 = v24[9];
        uint64_t v31 = v24[10];
        uint64_t v32 = v24[11];
        uint64_t v33 = v24[12];
        uint64_t v34 = v24[13];
        v99[0] = _NSConcreteStackBlock;
        v99[1] = 3221225472;
        v99[2] = sub_40F78;
        v99[3] = &unk_DE428;
        v99[4] = v24[15];
        v99[5] = v100;
        LOBYTE(v77) = 0;
        objc_msgSend(v25, "_sendMessage:context:deliveryContext:fromID:fromAccount:toID:chatIdentifier:toSessionToken:toGroup:toParticipants:originallyToParticipants:requiredRegProperties:interestingRegProperties:requiresLackOfRegProperties:canInlineAttachments:type:msgPayloadUploadDictionary:originalPayload:replyToMessageGUID:willSendBlock:completionBlock:", v26, v27, v29, v28, v30, 0, v31, 0, 0, a3, v32, 0, 0, 0, v77,
          3,
          0,
          v33,
          v34,
          0,
          v99);
        return;
      }
    }
    if ((v6 & 1) == 0)
    {
      if (objc_msgSend(objc_msgSend((id)v24[4], "balloonBundleID"), "isEqualToString:", IMBalloonExtensionIDWithSuffix()))
      {
        uint64_t v36 = IMExtensionPayloadUnarchivingClasses();
        uint64_t v98 = 0;
        id v37 = objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", objc_msgSend((id)v83[4], "payloadData"), &v98);
        id v38 = [v37 decodeObjectOfClasses:v36 forKey:NSKeyedArchiveRootObjectKey];
        if (v98)
        {
          if (IMOSLoggingEnabled())
          {
            unsigned int v39 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              id v116 = v98;
              _os_log_impl(&dword_0, v39, OS_LOG_TYPE_INFO, "Failed to unarchive attributionInfo. Error: %@", buf, 0xCu);
            }
          }
        }
        if (v38)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_71;
          }
          id v40 = [v38 objectForKey:IMExtensionPayloadAlternateTextKey];
          BOOL v41 = [v40 objectForKey:@"messageText"] == 0;
          id v42 = objc_alloc((Class)NSMutableAttributedString);
          if (v41) {
            id v43 = [v38 objectForKey:@"ldtext"];
          }
          else {
            id v43 = [v40 objectForKey:@"messageText"];
          }
          id v56 = [v42 initWithString:v43];
          id v57 = [v40 objectForKey:@"breadcrumbText"];
          if (v57)
          {
            v120[0] = IMBreadcrumbTextMarkerAttributeName;
            v120[1] = IMBreadcrumbTextOptionFlags;
            v121[0] = v57;
            v121[1] = &off_E3768;
            char v58 = +[NSDictionary dictionaryWithObjects:v121 forKeys:v120 count:2];
            id v59 = objc_alloc((Class)NSAttributedString);
            id v60 = [v59 initWithString:IMBreadcrumbCharacterString attributes:v58];
            [v56 appendAttributedString:v60];
          }
          if (v56)
          {
            id v38 = objc_msgSend(objc_alloc((Class)IMMessageItem), "initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:threadIdentifier:", objc_msgSend((id)v83[4], "sender"), objc_msgSend((id)v83[4], "time"), v56, 0, 0, objc_msgSend((id)v83[4], "flags"), 0, objc_msgSend((id)v83[4], "guid"), 0);

            if (IMOSLoggingEnabled())
            {
              int v61 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
              {
                id v62 = [v38 guid];
                *(_DWORD *)buf = 138412290;
                id v116 = v62;
                _os_log_impl(&dword_0, v61, OS_LOG_TYPE_INFO, "Sending activity sharing fallback message msg guid %@", buf, 0xCu);
              }
            }
          }
          else
          {
LABEL_71:
            id v38 = 0;
          }
        }

        goto LABEL_73;
      }
      if (v86)
      {
        long long v96 = 0u;
        long long v97 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        id v44 = [(id)v83[4] fileTransferGUIDs];
        id v45 = [v44 countByEnumeratingWithState:&v94 objects:v119 count:16];
        if (!v45) {
          return;
        }
        id v38 = 0;
        uint64_t v46 = *(void *)v95;
        uint64_t v47 = IMFileTransferAVTranscodeOptionRemoveAlpha;
        do
        {
          for (j = 0; j != v45; j = (char *)j + 1)
          {
            if (*(void *)v95 != v46) {
              objc_enumerationMutation(v44);
            }
            id v49 = [+[IMDFileTransferCenter sharedInstance] transferForGUID:*(void *)(*((void *)&v94 + 1) + 8 * (void)j)];
            if ([v49 isAnimojiV2])
            {
              if (IMOSLoggingEnabled())
              {
                char v50 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_0, v50, OS_LOG_TYPE_INFO, "Contains AnimojiV2. Setting RemoveAlpha transcoderUserInfo option", buf, 2u);
                }
              }
              id v51 = objc_msgSend(objc_msgSend(v49, "transcoderUserInfo"), "mutableCopy");
              [v51 setObject:&__kCFBooleanTrue forKeyedSubscript:v47];
              [v49 setTranscoderUserInfo:v51];

              id v38 = (id)v83[4];
            }
          }
          id v45 = [v44 countByEnumeratingWithState:&v94 objects:v119 count:16];
        }
        while (v45);
        goto LABEL_73;
      }
      if (v81)
      {
        id v52 = [(id)v83[5] _fallbackMesssageItemByConvertingGenmojiToUnknownEmojiCharacterInOriginalMessageItem:v83[4]];
LABEL_63:
        id v38 = v52;
LABEL_73:
        if (v38)
        {
          uint64_t v63 = v83[7];
          uint64_t v64 = v83[8];
          id v65 = (void *)v83[5];
          uint64_t v66 = v83[6];
          uint64_t v67 = v83[9];
          uint64_t v68 = v83[10];
          uint64_t v69 = v83[11];
          uint64_t v70 = v83[12];
          uint64_t v71 = v83[13];
          v87[0] = _NSConcreteStackBlock;
          v87[1] = 3221225472;
          v87[2] = sub_410CC;
          v87[3] = &unk_DE450;
          char v88 = v86 & 1;
          char v89 = v81 & 1;
          uint64_t v72 = v83[15];
          v87[4] = v38;
          v87[5] = v72;
          v87[6] = v100;
          LOBYTE(v77) = 0;
          objc_msgSend(v65, "_sendMessage:context:deliveryContext:fromID:fromAccount:toID:chatIdentifier:toSessionToken:toGroup:toParticipants:originallyToParticipants:requiredRegProperties:interestingRegProperties:requiresLackOfRegProperties:canInlineAttachments:type:msgPayloadUploadDictionary:originalPayload:replyToMessageGUID:willSendBlock:completionBlock:", v38, v63, v64, v66, v67, 0, v68, 0, 0, a3, v69, 0, 0, 0, v77,
            1,
            0,
            v70,
            v71,
            0,
            v87);
        }
        return;
      }
      if (!objc_msgSend(objc_msgSend((id)v83[4], "balloonBundleID"), "isEqualToString:", IMBalloonExtensionIDWithSuffix()))
      {
        if (!v83[14])
        {
          id v38 = [(id)v83[4] copyForBackwardsCompatibility];
          if (objc_msgSend(objc_msgSend((id)v83[4], "expressiveSendStyleID"), "length"))
          {
            long long v92 = 0u;
            long long v93 = 0u;
            long long v90 = 0u;
            long long v91 = 0u;
            id v73 = [(id)v83[4] fileTransferGUIDs];
            id v74 = [v73 countByEnumeratingWithState:&v90 objects:v114 count:16];
            if (v74)
            {
              uint64_t v75 = *(void *)v91;
              do
              {
                for (k = 0; k != v74; k = (char *)k + 1)
                {
                  if (*(void *)v91 != v75) {
                    objc_enumerationMutation(v73);
                  }
                  objc_msgSend(-[IMDFileTransferCenter transferForGUID:](+[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance"), "transferForGUID:", *(void *)(*((void *)&v90 + 1) + 8 * (void)k)), "setAppMessageFallbackImage:", 1);
                }
                id v74 = [v73 countByEnumeratingWithState:&v90 objects:v114 count:16];
              }
              while (v74);
            }
          }
          goto LABEL_73;
        }
        if (IMOSLoggingEnabled())
        {
          id v55 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_0, v55, OS_LOG_TYPE_INFO, "Sending fallback message using linkMetadata", buf, 2u);
          }
        }
        id v52 = [(id)v83[5] _fallbackMessageItemFromLinkMetadata:v83[14] originalMessageItem:v83[4]];
        goto LABEL_63;
      }
      if (IMOSLoggingEnabled())
      {
        id v53 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
        {
          id v54 = [(id)v83[4] balloonBundleID];
          *(_DWORD *)buf = 138412546;
          id v116 = v54;
          __int16 v117 = 2112;
          unint64_t v118 = a3;
          _os_log_impl(&dword_0, v53, OS_LOG_TYPE_INFO, "Not sending incompatible payload with balloon bundle ID %@ to destinations %@", buf, 0x16u);
        }
      }
    }
  }
}

void sub_408E4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) expressiveSendStyleID];
  if ([v2 length])
  {
    if (IMOSLoggingEnabled())
    {
      id v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        id v4 = (NSNumber *)[*(id *)(a1 + 32) guid];
        *(_DWORD *)buf = 138412290;
        uint64_t v33 = v4;
        _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "Calling expressive send style block for msg guid %@", buf, 0xCu);
      }
    }
    id v5 = [*(id *)(a1 + 32) _localizedBackwardsCompatibleExpressiveSendText];
    id v6 = [*(id *)(a1 + 40) _propertyForExpressiveSendStyle:v2];
    if (v6) {
      id v7 = [*(id *)(a1 + 48) objectForKey:v6];
    }
    else {
      id v7 = 0;
    }
    id v8 = *(id *)(a1 + 56);
    if (IMOSLoggingEnabled())
    {
      int v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v8 count]);
        *(_DWORD *)buf = 138412546;
        uint64_t v33 = v10;
        __int16 v34 = 2112;
        id v35 = v8;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "%@ Devices needing impact string before computation %@", buf, 0x16u);
      }
    }
    if ([*(id *)(a1 + 56) count])
    {
      if ([*(id *)(a1 + 64) count])
      {
        if ([v7 count])
        {
          id v11 = +[NSMutableSet setWithArray:v7];
          unsigned int v12 = +[NSMutableSet setWithArray:*(void *)(a1 + 64)];
          [(NSMutableSet *)v12 minusSet:v11];
          if ([(NSMutableSet *)v12 count]) {
            id v8 = objc_msgSend(v8, "arrayByAddingObjectsFromArray:", -[NSMutableSet allObjects](v12, "allObjects"));
          }
        }
      }
    }
    if (IMOSLoggingEnabled())
    {
      unsigned int v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        unsigned int v14 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v8 count]);
        *(_DWORD *)buf = 138412546;
        uint64_t v33 = v14;
        __int16 v34 = 2112;
        id v35 = v8;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "%@ Devices needing impact string after computation %@", buf, 0x16u);
      }
    }
    if (v5 && [v8 count])
    {
      if (IMOSLoggingEnabled())
      {
        unsigned __int8 v15 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          id v16 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v8 count]);
          id v17 = [*(id *)(a1 + 32) guid];
          *(_DWORD *)buf = 138412546;
          uint64_t v33 = v16;
          __int16 v34 = 2112;
          id v35 = v17;
          _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Sending backwards compatible expressive send style to %@ skipped devices for msg guid %@", buf, 0x16u);
        }
      }
      id v18 = objc_msgSend(objc_alloc((Class)IMMessageItem), "initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:threadIdentifier:", objc_msgSend(*(id *)(a1 + 32), "sender"), objc_msgSend(*(id *)(a1 + 32), "time"), objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:", v5), 0, 0, objc_msgSend(*(id *)(a1 + 32), "flags"), 0, +[NSString stringGUID](NSString, "stringGUID"), 0);
      objc_msgSend(v18, "setDestinationCallerID:", objc_msgSend(*(id *)(a1 + 72), "_stripFZIDPrefix"));
      long long v19 = *(void **)(a1 + 40);
      uint64_t v20 = *(void *)(a1 + 80);
      uint64_t v21 = *(void *)(a1 + 88);
      uint64_t v22 = *(void *)(a1 + 72);
      uint64_t v23 = *(void *)(a1 + 96);
      uint64_t v24 = *(void *)(a1 + 104);
      uint64_t v25 = *(void *)(a1 + 112);
      uint64_t v26 = *(void *)(a1 + 120);
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_40E38;
      v31[3] = &unk_DE3D8;
      uint64_t v27 = *(void *)(a1 + 128);
      v31[4] = *(void *)(a1 + 136);
      LOBYTE(v30) = 0;
      objc_msgSend(v19, "_sendMessage:context:deliveryContext:fromID:fromAccount:toID:chatIdentifier:toSessionToken:toGroup:toParticipants:originallyToParticipants:requiredRegProperties:interestingRegProperties:requiresLackOfRegProperties:canInlineAttachments:type:msgPayloadUploadDictionary:originalPayload:replyToMessageGUID:willSendBlock:completionBlock:", v18, v20, v21, v22, v23, 0, v24, 0, 0, v8, v25, 0, 0, 0, v30,
        1,
        0,
        v26,
        v27,
        0,
        v31);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v28 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        uint64_t v29 = (NSNumber *)[*(id *)(a1 + 32) guid];
        *(_DWORD *)buf = 138412546;
        uint64_t v33 = v29;
        __int16 v34 = 2112;
        id v35 = v2;
        _os_log_impl(&dword_0, v28, OS_LOG_TYPE_INFO, "No backwards compatibility string for msg %@ expressiveSendStyleID %@", buf, 0x16u);
      }
    }
  }
}

uint64_t sub_40E38(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (*(void *)(result + 32))
  {
    uint64_t v7 = result;
    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        CFStringRef v9 = @"NO";
        if (a4) {
          CFStringRef v9 = @"YES";
        }
        int v10 = 138412546;
        CFStringRef v11 = v9;
        __int16 v12 = 1024;
        int v13 = a5;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Got success %@ error %d in legacy MessageDelivery block (impact additional message)", (uint8_t *)&v10, 0x12u);
      }
    }
    return (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 16))();
  }
  return result;
}

uint64_t sub_40F78(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (*(void *)(result + 32))
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(result + 40);
    if (v8) {
      (*(void (**)(void))(v8 + 16))();
    }
    if (IMOSLoggingEnabled())
    {
      CFStringRef v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        CFStringRef v10 = @"NO";
        if (a4) {
          CFStringRef v10 = @"YES";
        }
        int v11 = 138412546;
        CFStringRef v12 = v10;
        __int16 v13 = 1024;
        int v14 = a5;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "Got success %@ error %d in legacy MessageDelivery block", (uint8_t *)&v11, 0x12u);
      }
    }
    return (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 16))();
  }
  return result;
}

id *sub_410CC(id *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  id v5 = result;
  if (*((unsigned char *)result + 56))
  {
    if (IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Cleaning up compatibility TranscoderUserInfo for animojiv2", buf, 2u);
      }
    }
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v7 = objc_msgSend(v5[4], "fileTransferGUIDs", v26, v27);
    result = (id *)[v7 countByEnumeratingWithState:&v34 objects:v43 count:16];
    uint64_t v8 = result;
    if (result)
    {
      uint64_t v9 = *(void *)v35;
      uint64_t v10 = IMFileTransferAVTranscodeOptionRemoveAlpha;
      do
      {
        int v11 = 0;
        do
        {
          if (*(void *)v35 != v9) {
            objc_enumerationMutation(v7);
          }
          id v12 = [+[IMDFileTransferCenter sharedInstance] transferForGUID:*(void *)(*((void *)&v34 + 1) + 8 * (void)v11)];
          if ([v12 isAnimojiV2])
          {
            id v13 = [v12 transcoderUserInfo];
            int v14 = v13;
            if (v13)
            {
              if (objc_msgSend(objc_msgSend(v13, "objectForKeyedSubscript:", v10), "BOOLValue"))
              {
                id v15 = [v14 mutableCopy];
                [v15 setObject:0 forKeyedSubscript:v10];
                [v12 setTranscoderUserInfo:v15];

                -[IMDAttachmentStore storeAttachment:associateWithMessageWithGUID:](+[IMDAttachmentStore sharedInstance](IMDAttachmentStore, "sharedInstance"), "storeAttachment:associateWithMessageWithGUID:", v12, [v5[4] guid]);
              }
            }
          }
          int v11 = (id *)((char *)v11 + 1);
        }
        while (v8 != v11);
        result = (id *)[v7 countByEnumeratingWithState:&v34 objects:v43 count:16];
        uint64_t v8 = result;
      }
      while (result);
    }
  }
  if (*((unsigned char *)v5 + 57))
  {
    if (IMOSLoggingEnabled())
    {
      id v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "Cleaning up compatibility file transfers for adaptive image glyphs", buf, 2u);
      }
    }
    id v17 = objc_msgSend(v5[4], "fileTransferGUIDs", v26, v27);
    id v18 = +[IMDAttachmentStore sharedInstance];
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    result = (id *)[v17 countByEnumeratingWithState:&v30 objects:v42 count:16];
    long long v19 = result;
    if (result)
    {
      uint64_t v20 = *(void *)v31;
      do
      {
        uint64_t v21 = 0;
        do
        {
          if (*(void *)v31 != v20) {
            objc_enumerationMutation(v17);
          }
          uint64_t v22 = *(void *)(*((void *)&v30 + 1) + 8 * (void)v21);
          if (objc_msgSend(-[IMDAttachmentStore attachmentWithGUID:](v18, "attachmentWithGUID:", v22), "isTemporaryBackwardCompatibilityAsset"))-[IMDAttachmentStore deleteAttachmentWithGUID:](v18, "deleteAttachmentWithGUID:", v22); {
          uint64_t v21 = (id *)((char *)v21 + 1);
          }
        }
        while (v19 != v21);
        result = (id *)[v17 countByEnumeratingWithState:&v30 objects:v42 count:16];
        long long v19 = result;
      }
      while (result);
    }
  }
  if (v5[5])
  {
    uint64_t v23 = (void (**)(void))v5[6];
    if (v23) {
      v23[2]();
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v24 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        CFStringRef v25 = @"NO";
        if (a4) {
          CFStringRef v25 = @"YES";
        }
        *(_DWORD *)buf = 138412546;
        CFStringRef v39 = v25;
        __int16 v40 = 1024;
        int v41 = a5;
        _os_log_impl(&dword_0, v24, OS_LOG_TYPE_INFO, "Got success %@ error %d in legacy MessageDelivery block", buf, 0x12u);
      }
    }
    return (id *)(*((uint64_t (**)(void))v5[5] + 2))();
  }
  return result;
}

void sub_414D0(uint64_t a1, uint64_t a2)
{
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 104);
      CFStringRef v7 = @"NO";
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24)) {
        CFStringRef v7 = @"YES";
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)uint64_t v22 = a2;
      *(_WORD *)&v22[4] = 2112;
      *(void *)&v22[6] = v5;
      *(_WORD *)&v22[14] = 1024;
      *(_DWORD *)&v22[16] = a2;
      __int16 v23 = 2112;
      CFStringRef v24 = v7;
      __int16 v25 = 2112;
      uint64_t v26 = v6;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "Wrapped block got error: %d   guid: %@   error: %d    hasNotified: %@   block: %@", buf, 0x2Cu);
    }
  }
  if (*(void *)(a1 + 104))
  {
    unsigned int v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "session"), "isReplicating") ^ 1;
    if (!a2) {
      LOBYTE(v8) = 1;
    }
    if ((v8 & 1) == 0)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v9 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          uint64_t v10 = +[NSNumber numberWithUnsignedInt:a2];
          uint64_t v11 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412546;
          *(void *)uint64_t v22 = v10;
          *(_WORD *)&v22[8] = 2112;
          *(void *)&v22[10] = v11;
          _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "Got error %@ while replicating %@, suppressing", buf, 0x16u);
        }
      }
      a2 = 0;
    }
    uint64_t v12 = *(void *)(*(void *)(a1 + 112) + 8);
    if (a2 || !*(unsigned char *)(v12 + 24))
    {
      *(unsigned char *)(v12 + 24) = 1;
      if (a2)
      {
        NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
        CFStringRef v20 = @"Failed to send message.Please check FZErrorType with the above error code";
        id v13 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
        int v14 = +[NSError errorWithDomain:IMSafetyMonitorErrorDomain code:a2 userInfo:v13];
      }
      else
      {
        int v14 = 0;
      }
      BOOL v15 = [*(id *)(a1 + 48) scheduleType] == (char *)&dword_0 + 1;
      id v16 = +[IMSafetyMonitorCoordinator sharedCoordinator];
      uint64_t v17 = *(void *)(a1 + 48);
      BOOL v18 = a2 == 0;
      if (v15) {
        [v16 informOfScheduledMessage:v17 sentSuccessfully:v18 error:v14];
      }
      else {
        [v16 informOfOutgoingMessageWithMessage:v17 sentSuccessfully:v18 error:v14];
      }
      if ([*(id *)(a1 + 48) scheduleType] == (char *)&dword_0 + 2) {
        [*(id *)(a1 + 40) handleScheduledMessageSend:*(void *)(a1 + 48) sentSuccessfully:a2 == 0 idsMessage:*(void *)(a1 + 56) messageDictionary:*(void *)(a1 + 64) canInlineAttachments:*(unsigned __int8 *)(a1 + 120) msgPayloadUploadDictionary:*(void *)(a1 + 72) fromID:*(void *)(a1 + 80) fromAccount:*(void *)(a1 + 88) originalIDSIdentifier:*(void *)(a1 + 32)];
      }
      (*(void (**)(void, void, void, BOOL, uint64_t, id))(*(void *)(a1 + 104) + 16))(*(void *)(a1 + 104), *(void *)(a1 + 40), *(void *)(a1 + 96), a2 == 0, a2, [*(id *)(a1 + 48) backwardsCompatibleVersion]);
    }
  }
}

void sub_417E4(uint64_t a1, NSDictionary *a2, char a3)
{
  if (a3)
  {
LABEL_7:
    if (([*(id *)(a1 + 32) isTypingMessage] & 1) == 0
      && IMOSLoggingEnabled())
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v16 = a2;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "Finished uploading payload data for message. Resulting payloadDictionary %@", buf, 0xCu);
      }
    }
    LOBYTE(v14) = *(unsigned char *)(a1 + 176);
    objc_msgSend(*(id *)(a1 + 40), "_sendMessage:context:deliveryContext:fromID:fromAccount:toID:chatIdentifier:toSessionToken:toGroup:toParticipants:originallyToParticipants:requiredRegProperties:interestingRegProperties:requiresLackOfRegProperties:canInlineAttachments:type:msgPayloadUploadDictionary:originalPayload:replyToMessageGUID:willSendBlock:completionBlock:", *(void *)(a1 + 32), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), 0, *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), v14,
      0,
      a2,
      *(void *)(a1 + 144),
      *(void *)(a1 + 152),
      *(void *)(a1 + 160),
      *(void *)(a1 + 168));
    return;
  }
  id v5 = [*(id *)(a1 + 32) balloonBundleID];
  unsigned int v6 = [v5 isEqualToString:IMBalloonPluginIdentifierRichLinks];
  int v7 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v7)
    {
      unsigned int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "MessageDelivery. Did not upload rich link data. Still continuing", buf, 2u);
      }
    }
    a2 = +[NSDictionary dictionary];
    goto LABEL_7;
  }
  if (v7)
  {
    uint64_t v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(NSDictionary **)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 112);
      *(_DWORD *)buf = 138412546;
      id v16 = v11;
      __int16 v17 = 2112;
      uint64_t v18 = v12;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "MessageDelivery Failed processing payload data for message: %@  for display IDs: %@", buf, 0x16u);
    }
  }
  uint64_t v13 = *(void *)(a1 + 168);
  if (v13) {
    (*(void (**)(uint64_t, void, void, void, uint64_t, id))(v13 + 16))(v13, *(void *)(a1 + 40), *(void *)(a1 + 112), 0, 1, [*(id *)(a1 + 32) backwardsCompatibleVersion]);
  }
}

void sub_41A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  LODWORD(v6) = a6;
  int v12 = IMOSLoggingEnabled();
  if (a5)
  {
    if (v12)
    {
      uint64_t v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v18 = a2;
        __int16 v19 = 2112;
        uint64_t v20 = a3;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Finished processing fallback attachments for message: %@  for display IDs: %@", buf, 0x16u);
      }
    }
    LOBYTE(v16) = *(unsigned char *)(a1 + 176);
    objc_msgSend(*(id *)(a1 + 32), "_sendMessage:context:deliveryContext:fromID:fromAccount:toID:chatIdentifier:toSessionToken:toGroup:toParticipants:originallyToParticipants:requiredRegProperties:interestingRegProperties:requiresLackOfRegProperties:canInlineAttachments:type:msgPayloadUploadDictionary:originalPayload:replyToMessageGUID:willSendBlock:completionBlock:", a2, a4, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), 0, *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), v16,
      1,
      *(void *)(a1 + 128),
      *(void *)(a1 + 136),
      *(void *)(a1 + 144),
      *(void *)(a1 + 160),
      *(void *)(a1 + 168));
  }
  else
  {
    if (v12)
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v18 = a2;
        __int16 v19 = 2112;
        uint64_t v20 = a3;
        _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "Failed processing attachments for message: %@  for display IDs: %@", buf, 0x16u);
      }
    }
    uint64_t v15 = *(void *)(a1 + 168);
    if (v15)
    {
      if (v6) {
        uint64_t v6 = v6;
      }
      else {
        uint64_t v6 = 34;
      }
      (*(void (**)(uint64_t, void, uint64_t, void, uint64_t, id))(v15 + 16))(v15, *(void *)(a1 + 32), a3, 0, v6, [*(id *)(a1 + 152) backwardsCompatibleVersion]);
    }
  }
}

id sub_41F94(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) addFailedEditPartIndex:a2];
}

id sub_41FA0(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) addFailedRetractPartIndex:a2];
  id v4 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "historyForMessagePart:", a2), "firstObject"), "messagePartText");
  id v5 = [v4 attribute:IMMessagePartAttributeName atIndex:0 effectiveRange:0];
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = objc_msgSend(objc_msgSend(v6, "body"), "__im_messageTextByAddingMessagePart:atIndex:", v4, (int)objc_msgSend(v5, "intValue"));

  return [v6 setBody:v7];
}

BOOL sub_42744(id a1, IDSDevice *a2)
{
  id v2 = [(IDSDevice *)a2 capabilities];
  return [v2 valueForCapability:IDSRegistrationPropertySupportsSendLaterMessages] != 0;
}

id sub_428F8(id *a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_msgSend(a1[4], "historyForMessagePart:", a2), "firstObject");
  if ([v4 messagePartText])
  {
    id v5 = objc_msgSend(objc_msgSend(a1[5], "_fileTransferGUIDsInMessageBody:", objc_msgSend(v4, "messagePartText")), "firstObject");
    if (v5) {
      [a1[6] addObject:v5];
    }
  }
  id v6 = a1[4];

  return _[v6 setHistory:0 forMessagePart:a2];
}

id sub_42A24(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) setHistory:0 forMessagePart:a2];
}

id sub_42AF4(uint64_t a1, void *a2)
{
  id result = [a2 length];
  if (result)
  {
    id v5 = *(void **)(a1 + 32);
    return [v5 addObject:a2];
  }
  return result;
}

id sub_43180(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _receivingDevicesForHandle:IMStripLoginID() skippedDestinations:*(void *)(a1 + 40)];
  id v3 = *(void **)(a1 + 48);

  return _[v3 unionSet:v2];
}

id sub_43944(uint64_t a1, uint64_t a2)
{
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = [*(id *)(a1 + 32) guid];
      *(_DWORD *)buf = 138412290;
      NSUInteger v47 = (NSUInteger)v5;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "Queued block for msg: %@ released", buf, 0xCu);
    }
  }
  if (![*(id *)(a1 + 32) isAudioMessage]
    || ![*(id *)(a1 + 32) isFinished]
    || (id v6 = +[IMDFileTransferCenter sharedInstance],
        id v7 = [*(id *)(a1 + 32) fileTransferGUIDs],
        [v7 count] != (char *)&dword_0 + 1))
  {
LABEL_22:
    char v12 = 0;
    uint64_t v13 = 0;
    unsigned int v8 = 0;
    goto LABEL_23;
  }
  unsigned int v8 = (NSSet *)-[IMDFileTransferCenter transferForGUID:](v6, "transferForGUID:", [v7 lastObject]);
  if (v8)
  {
    id v9 = objc_msgSend(+[IDSServerBag sharedInstanceForBagType:](IDSServerBag, "sharedInstanceForBagType:", 1), "objectForKey:", @"md-max-pkcrypto-filesize-ios8");
    if (v9)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v10 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          NSUInteger v47 = (NSUInteger)v9;
          _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "Server override for max public key crypto data size for iOS 8: %@", buf, 0xCu);
        }
      }
      id v11 = [v9 unsignedIntegerValue];
    }
    else
    {
      id v11 = &loc_C800;
    }
    uint64_t v14 = +[NSData dataWithContentsOfURL:[(NSSet *)v8 localURL]];
    id v15 = [(NSData *)v14 length];
    if (IMOSLoggingEnabled())
    {
      uint64_t v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        NSUInteger v17 = [(NSData *)v14 length];
        CFStringRef v18 = @"NO";
        *(_DWORD *)buf = 134218498;
        NSUInteger v47 = v17;
        if (v15 < v11) {
          CFStringRef v18 = @"YES";
        }
        __int16 v48 = 2048;
        id v49 = v11;
        __int16 v50 = 2112;
        CFStringRef v51 = v18;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "Can we send this attachment inline based on size? %lu < %lu? %@", buf, 0x20u);
      }
    }
    if (v15 < v11)
    {
      uint64_t v13 = +[NSSet setWithObject:IDSRegistrationPropertySupportsInlineAttachments];
      unsigned int v8 = +[NSSet setWithObject:IDSRegistrationPropertySupportsKeepReceipts];
      __int16 v19 = v38;
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472;
      v38[2] = sub_43E28;
      v38[3] = &unk_DE5F8;
      long long v20 = *(_OWORD *)(a1 + 48);
      int8x16_t v39 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
      long long v40 = v20;
      long long v21 = *(_OWORD *)(a1 + 80);
      long long v41 = *(_OWORD *)(a1 + 64);
      long long v42 = v21;
      long long v43 = *(_OWORD *)(a1 + 96);
      uint64_t v44 = *(void *)(a1 + 112);
      long long v45 = *(_OWORD *)(a1 + 128);
      char v12 = 1;
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  char v12 = 0;
  uint64_t v13 = 0;
LABEL_23:
  __int16 v19 = 0;
LABEL_24:
  if ([*(id *)(a1 + 32) isTypingMessage])
  {
    uint64_t v22 = +[NSSet setWithObject:IDSRegistrationPropertyOptionallyReceiveTypingIndicator];
    __int16 v19 = v37;
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_445A0;
    v37[3] = &unk_DE620;
    CFStringRef v24 = *(void **)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 64);
    uint64_t v25 = *(void *)(a1 + 72);
    uint64_t v26 = *(void *)(a1 + 80);
    v37[4] = v26;
    v37[5] = v24;
    uint64_t v27 = *(void *)(a1 + 40);
    v37[6] = *(void *)(a1 + 32);
    v37[7] = v23;
    v37[8] = v27;
    v37[9] = v25;
    uint64_t v28 = *(void *)(a1 + 96);
    uint64_t v29 = *(void *)(a1 + 104);
    v37[10] = v28;
    v37[11] = v29;
    uint64_t v30 = *(void *)(a1 + 112);
    uint64_t v31 = *(void *)(a1 + 136);
    v37[12] = v30;
    v37[13] = v31;
  }
  else
  {
    uint64_t v22 = 0;
    CFStringRef v24 = *(void **)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 80);
    uint64_t v28 = *(void *)(a1 + 96);
    uint64_t v29 = *(void *)(a1 + 104);
    uint64_t v30 = *(void *)(a1 + 112);
    uint64_t v31 = *(void *)(a1 + 136);
  }
  uint64_t v32 = *(void *)(a1 + 88);
  uint64_t v33 = *(void *)(a1 + 120);
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_44A78;
  v36[3] = &unk_DE428;
  v36[4] = v31;
  v36[5] = a2;
  LOBYTE(v35) = v12;
  return objc_msgSend(v24, "_sendMessage:context:deliveryContext:fromID:fromAccount:toID:chatIdentifier:toSessionToken:toGroup:toParticipants:originallyToParticipants:requiredRegProperties:interestingRegProperties:requiresLackOfRegProperties:canInlineAttachments:type:msgPayloadUploadDictionary:originalPayload:replyToMessageGUID:willSendBlock:completionBlock:", v26, 0, v32, v33, v28, v13, v8, v22, v35, 1, 0, v29, v30, v19, v36);
}

void sub_43E28(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if ([a3 count])
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v62 = a3;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Audio message needs to be sent the legacy way to %@", buf, 0xCu);
      }
    }
    unsigned int v8 = +[NSMutableSet setWithArray:a3];
    id v9 = (NSArray *)[a4 objectForKey:IDSRegistrationPropertySupportsKeepReceipts];
    if (!v9) {
      id v9 = +[NSArray array];
    }
    [(NSMutableSet *)v8 minusSet:+[NSSet setWithArray:v9]];
    id v10 = objc_alloc_init((Class)NSMutableSet);
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    id v11 = [(NSMutableSet *)v8 countByEnumeratingWithState:&v54 objects:v60 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v55;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v55 != v12) {
            objc_enumerationMutation(v8);
          }
          uint64_t v14 = *(void **)(*((void *)&v54 + 1) + 8 * i);
          if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", objc_msgSend(v14, "_stripPotentialTokenURIWithToken:", 0)))objc_msgSend(v10, "addObject:", v14); {
        }
          }
        id v11 = [(NSMutableSet *)v8 countByEnumeratingWithState:&v54 objects:v60 count:16];
      }
      while (v11);
    }
    [(NSMutableSet *)v8 minusSet:v10];

    if ([(NSMutableSet *)v8 count])
    {
      value = 0;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      id v15 = [(NSMutableSet *)v8 countByEnumeratingWithState:&v49 objects:v59 count:16];
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)v50;
        do
        {
          for (j = 0; j != v15; j = (char *)j + 1)
          {
            if (*(void *)v50 != v17) {
              objc_enumerationMutation(v8);
            }
            if (value) {
              p_value = 0;
            }
            else {
              p_value = &value;
            }
            id v20 = [*(id *)(*((void *)&v49 + 1) + 8 * (void)j) _stripPotentialTokenURIWithToken:p_value];
            if (v16)
            {
              if (([v16 isEqualToString:v20] & 1) == 0)
              {
                value = 0;
                goto LABEL_37;
              }
            }
            else
            {
              uint64_t v16 = v20;
            }
          }
          id v15 = [(NSMutableSet *)v8 countByEnumeratingWithState:&v49 objects:v59 count:16];
        }
        while (v15);
        if (v16)
        {
          if (IMOSLoggingEnabled())
          {
            long long v21 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              id v62 = v16;
              _os_log_impl(&dword_0, v21, OS_LOG_TYPE_INFO, "There's a single legacy destination %@. Key off of delivery context for keep receipt.", buf, 0xCu);
            }
          }
          uint64_t v22 = (__CFDictionary *)objc_alloc_init((Class)NSMutableDictionary);
          uint64_t v23 = +[NSNumber numberWithUnsignedInt:106];
          if (v23)
          {
            CFDictionarySetValue(v22, @"c", v23);
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_96380();
          }
          CFDictionarySetValue(v22, @"sP", v16);
          if (value)
          {
            CFDictionarySetValue(v22, @"t", value);
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_962F8();
          }
          long long v40 = *(const void **)(a1 + 32);
          if (v40)
          {
            CFDictionarySetValue(v22, @"tP", v40);
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_96270();
          }
          long long v41 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 40) isAudioMessage] ^ 1);
          if (v41) {
            CFDictionarySetValue(v22, @"aT", v41);
          }
          long long v42 = *(const void **)(a1 + 48);
          if (v42) {
            CFDictionarySetValue(v22, @"p", v42);
          }
          goto LABEL_52;
        }
      }
LABEL_37:
      if (IMOSLoggingEnabled())
      {
        CFStringRef v24 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v24, OS_LOG_TYPE_INFO, "There is more than one legacy recipient URI, generating keep receipts now.", buf, 2u);
        }
      }
      if (*(void *)(a1 + 120))
      {
        id v25 = objc_alloc_init((Class)NSMutableSet);
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        id v26 = [(NSMutableSet *)v8 countByEnumeratingWithState:&v45 objects:v58 count:16];
        if (v26)
        {
          uint64_t v27 = *(void *)v46;
          do
          {
            for (k = 0; k != v26; k = (char *)k + 1)
            {
              if (*(void *)v46 != v27) {
                objc_enumerationMutation(v8);
              }
              id v29 = [*(id *)(*((void *)&v45 + 1) + 8 * (void)k) _stripPotentialTokenURIWithToken:0];
              if (([v25 containsObject:v29] & 1) == 0)
              {
                (*(void (**)(void))(*(void *)(a1 + 120) + 16))();
                [v25 addObject:v29];
              }
            }
            id v26 = [(NSMutableSet *)v8 countByEnumeratingWithState:&v45 objects:v58 count:16];
          }
          while (v26);
        }
      }
    }
    uint64_t v22 = 0;
LABEL_52:
    uint64_t v30 = *(void **)(a1 + 56);
    uint64_t v31 = *(void *)(a1 + 64);
    uint64_t v33 = *(void *)(a1 + 32);
    uint64_t v32 = *(void *)(a1 + 40);
    uint64_t v34 = *(void *)(a1 + 72);
    uint64_t v35 = *(void *)(a1 + 80);
    uint64_t v36 = *(void *)(a1 + 88);
    uint64_t v37 = *(void *)(a1 + 96);
    uint64_t v38 = *(void *)(a1 + 104);
    uint64_t v39 = *(void *)(a1 + 112);
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[2] = sub_44460;
    v44[3] = &unk_DE3D8;
    v44[4] = *(void *)(a1 + 128);
    LOBYTE(v43) = 0;
    objc_msgSend(v30, "_sendMessage:context:deliveryContext:fromID:fromAccount:toID:chatIdentifier:toSessionToken:toGroup:toParticipants:originallyToParticipants:requiredRegProperties:interestingRegProperties:requiresLackOfRegProperties:canInlineAttachments:type:msgPayloadUploadDictionary:originalPayload:replyToMessageGUID:willSendBlock:completionBlock:", v32, v31, v22, v33, v34, 0, v35, 0, v36, a3, v37, 0, 0, 0, v43,
      1,
      0,
      v38,
      v39,
      0,
      v44);
  }
}

uint64_t sub_44460(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (*(void *)(result + 32))
  {
    uint64_t v7 = result;
    if (IMOSLoggingEnabled())
    {
      unsigned int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        CFStringRef v9 = @"NO";
        if (a4) {
          CFStringRef v9 = @"YES";
        }
        int v10 = 138412546;
        CFStringRef v11 = v9;
        __int16 v12 = 1024;
        int v13 = a5;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Got success %@ error %d in legacy MessageDelivery block", (uint8_t *)&v10, 0x12u);
      }
    }
    return (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 16))();
  }
  return result;
}

void sub_445A0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138413058;
      uint64_t v37 = a2;
      __int16 v38 = 2112;
      uint64_t v39 = a3;
      __int16 v40 = 2112;
      uint64_t v41 = a4;
      __int16 v42 = 2112;
      uint64_t v43 = v8;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "willSendBlock typing indicator, destinations %@, skippedDestionations: %@, registrationPropertyToDestinations %@, chatIdentifier %@", buf, 0x2Au);
    }
  }
  id v9 = objc_alloc_init((Class)NSMutableSet);
  id v10 = [*(id *)(a1 + 40) activeDeviceForHandle:*(void *)(a1 + 32)];
  CFStringRef v11 = v10;
  if (v10)
  {
    id v12 = [v10 idsDestination];
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v13 = [a3 countByEnumeratingWithState:&v31 objects:v35 count:16];
    if (v13)
    {
      uint64_t v14 = *(void *)v32;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v32 != v14) {
            objc_enumerationMutation(a3);
          }
          if ([v12 isEqualToString:*(void *)(*((void *)&v31 + 1) + 8 * i)])
          {
            if (IMOSLoggingEnabled())
            {
              uint64_t v16 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                uint64_t v37 = v11;
                _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "Found skipped active device %@", buf, 0xCu);
              }
            }
            if ([v11 shouldSendTypingIndicator])
            {
              if (IMOSLoggingEnabled())
              {
                uint64_t v17 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  uint64_t v37 = v11;
                  _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "Sending typing indicator to device %@", buf, 0xCu);
                }
              }
              [v9 addObject:v12];
            }
          }
        }
        id v13 = [a3 countByEnumeratingWithState:&v31 objects:v35 count:16];
      }
      while (v13);
    }
  }
  else
  {
    [v9 addObjectsFromArray:a3];
  }
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  uint64_t v23 = *(void *)(a1 + 32);
  uint64_t v22 = *(void **)(a1 + 40);
  id v24 = [v9 allObjects];
  uint64_t v25 = *(void *)(a1 + 80);
  uint64_t v26 = *(void *)(a1 + 88);
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_44938;
  v30[3] = &unk_DE3D8;
  uint64_t v27 = *(void *)(a1 + 96);
  v30[4] = *(void *)(a1 + 104);
  LOBYTE(v28) = 0;
  objc_msgSend(v22, "_sendMessage:context:deliveryContext:fromID:fromAccount:toID:chatIdentifier:toSessionToken:toGroup:toParticipants:originallyToParticipants:requiredRegProperties:interestingRegProperties:requiresLackOfRegProperties:canInlineAttachments:type:msgPayloadUploadDictionary:originalPayload:replyToMessageGUID:willSendBlock:completionBlock:", v18, v19, 0, v20, v21, 0, v23, 0, 0, v24, v25, 0, 0, 0, v28,
    0,
    0,
    v26,
    v27,
    0,
    v30);
}

uint64_t sub_44938(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (*(void *)(result + 32))
  {
    uint64_t v7 = result;
    if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        CFStringRef v9 = @"NO";
        if (a4) {
          CFStringRef v9 = @"YES";
        }
        int v10 = 138412546;
        CFStringRef v11 = v9;
        __int16 v12 = 1024;
        int v13 = a5;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Got success %@ error %d in typing indicator block", (uint8_t *)&v10, 0x12u);
      }
    }
    return (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 16))();
  }
  return result;
}

uint64_t sub_44A78(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (*(void *)(a1 + 32))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        CFStringRef v9 = @"NO";
        if (a4) {
          CFStringRef v9 = @"YES";
        }
        int v11 = 138412546;
        CFStringRef v12 = v9;
        __int16 v13 = 1024;
        int v14 = a5;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Got success %@ error %d in MessageDelivery block", (uint8_t *)&v11, 0x12u);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_452A0(uint64_t a1, uint64_t a2)
{
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v8 = v5;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "Dequeing message payload block for people %@", buf, 0xCu);
    }
  }
  id result = [*(id *)(a1 + 40) sendMessageDictionary:*(void *)(a1 + 48) fromID:*(void *)(a1 + 56) fromAccount:*(void *)(a1 + 64) toURIs:*(void *)(a1 + 72) toGroup:*(void *)(a1 + 80) priority:*(void *)(a1 + 104) options:*(void *)(a1 + 88) completionBlock:*(void *)(a1 + 96)];
  if (a2) {
    return (id)(*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  }
  return result;
}

void sub_45D98(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x45804);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_45E20(uint64_t a1, uint64_t a2)
{
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 56);
      v8[0] = 67109890;
      v8[1] = a2;
      __int16 v9 = 2112;
      uint64_t v10 = v5;
      __int16 v11 = 1024;
      int v12 = a2;
      __int16 v13 = 2112;
      uint64_t v14 = v6;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "Wrapped block got error: %d   guid: %@   error: %d   block: %@", (uint8_t *)v8, 0x22u);
    }
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result && (a2 || *(unsigned char *)(a1 + 64))) {
    return (*(uint64_t (**)(uint64_t, void, void, BOOL, uint64_t, void))(result + 16))(result, *(void *)(a1 + 40), *(void *)(a1 + 48), a2 == 0, a2, 0);
  }
  return result;
}

void sub_46FD4(void *a1, void *a2, const void *a3, uint64_t a4, const void *a5)
{
  theDict = (__CFDictionary *)objc_alloc_init((Class)NSMutableDictionary);
  [+[NSDate date] timeIntervalSinceDate:a1[4]];
  double v11 = v10;
  if (a3) {
    CFDictionarySetValue(theDict, @"url", a3);
  }
  id v12 = [a2 domain];
  if (v12) {
    CFDictionarySetValue(theDict, @"eD", v12);
  }
  __int16 v13 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [a2 code]);
  if (v13) {
    CFDictionarySetValue(theDict, @"eC", v13);
  }
  uint64_t v14 = +[NSNumber numberWithInteger:a4];
  if (v14) {
    CFDictionarySetValue(theDict, @"fS", v14);
  }
  if (IMSendAdditionalMMCSErrorInfoToMadrid())
  {
    unint64_t v15 = llround(v11 * 1000.0);
    if (a5) {
      CFDictionarySetValue(theDict, @"fRM", a5);
    }
    uint64_t v16 = +[NSNumber numberWithInteger:v15];
    if (v16) {
      CFDictionarySetValue(theDict, @"fTE", v16);
    }
  }
  [*(id *)(a1[5] + 40) sendServerMessage:theDict command:&off_E3780 fromAccount:a1[6]];
}

void sub_47850(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x475ECLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_478D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unsigned int a5)
{
  int v8 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v8)
    {
      __int16 v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v11) = 0;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "Send of backward compatible message edit successful", (uint8_t *)&v11, 2u);
      }
    }
  }
  else
  {
    if (v8)
    {
      double v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v11 = 134217984;
        uint64_t v12 = a5;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "Send of backward compatible message edit not successful, error %ld", (uint8_t *)&v11, 0xCu);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a5;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_47A34(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 count];
  if (result)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v20 = a3;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Edit message command will not be received by all destinations. SkippedDestinations: %@", buf, 0xCu);
      }
    }
    id v7 = objc_alloc_init((Class)NSMutableArray);
    id v8 = [*(id *)(a1 + 32) _stripFZIDPrefix];
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v9 = [a3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v15;
      do
      {
        int v11 = 0;
        do
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(a3);
          }
          uint64_t v12 = *(void *)(*((void *)&v14 + 1) + 8 * (void)v11);
          __int16 v13 = (void *)IDSCopyRawAddressForDestination();
          if (([v13 isEqualToString:v8] & 1) == 0) {
            [v7 addObject:v12];
          }

          int v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [a3 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v9);
    }
    if ([v7 count]) {
      (*(void (**)(void, id, void))(*(void *)(a1 + 104) + 16))(*(void *)(a1 + 104), [v7 copy], *(void *)(a1 + 40));
    }

    id result = [*(id *)(a1 + 48) length];
    if (result)
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
      return [*(id *)(a1 + 64) _sendBackwardCompatibilityMessageForEditedMessage:*(void *)(a1 + 72) usingMessageGUID:*(void *)(a1 + 40) toBackwardCompatabilityDestinations:a3 withOriginalDestinations:*(void *)(a1 + 80) chatIdentifier:*(void *)(a1 + 88) fromAccount:*(void *)(a1 + 96) fromID:*(void *)(a1 + 32) backwardCompatabilityText:*(void *)(a1 + 48) completionBlock:*(void *)(a1 + 112)];
    }
  }
  return result;
}

void sub_47C5C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  if (a4)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        int v10 = 138412290;
        uint64_t v11 = v7;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Send of message edit successful, editCommandGuid %@", (uint8_t *)&v10, 0xCu);
      }
    }
  }
  else
  {
    id v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_96494();
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a5;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_47D84(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    if (IMOSLoggingEnabled())
    {
      id v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, "All sends of message edit commands completed succesfully", v5, 2u);
      }
    }
  }
  else
  {
    id v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_96500();
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_48094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v13 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "session"), "groupController"), "newGroupMessagePayloadForChat:fromID:", a3, a5);
  long long v14 = *(void **)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 56);
  id v18 = [*(id *)(a1 + 64) replyToGUID];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_481CC;
  v22[3] = &unk_DE788;
  uint64_t v19 = *(void *)(a1 + 80);
  v22[4] = *(void *)(a1 + 48);
  v22[5] = v19;
  LOBYTE(v20) = 0;
  objc_msgSend(v14, "_sendMessage:context:deliveryContext:fromID:fromAccount:toID:chatIdentifier:toSessionToken:toGroup:toParticipants:originallyToParticipants:requiredRegProperties:interestingRegProperties:requiresLackOfRegProperties:canInlineAttachments:type:msgPayloadUploadDictionary:originalPayload:replyToMessageGUID:willSendBlock:completionBlock:", a4, a7, v13, a5, a6, 0, v15, 0, a8, v17, v16, 0, 0, 0, v20,
    1,
    0,
    0,
    v18,
    0,
    v22);
}

uint64_t sub_481CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  int v10 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v10)
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        int v19 = 138412290;
        uint64_t v20 = v12;
        id v13 = "Succesfully sent backward compatible edit message text to destinations: %@";
        long long v14 = v11;
        uint32_t v15 = 12;
LABEL_8:
        _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v19, v15);
      }
    }
  }
  else if (v10)
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      int v19 = 134218242;
      uint64_t v20 = a5;
      __int16 v21 = 2112;
      uint64_t v22 = v17;
      id v13 = "Failed sending backward compatability edit message text. Error: %ld, Destinations: %@";
      long long v14 = v16;
      uint32_t v15 = 22;
      goto LABEL_8;
    }
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), a2, a3);
}

void sub_48884(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x486C0);
  }
  _Unwind_Resume(exception_object);
}

void sub_48934(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, char a6)
{
  if (a4)
  {
    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        int v12 = 138412290;
        uint64_t v13 = v9;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Send of sticker reposition successful, editCommandGuid %@", (uint8_t *)&v12, 0xCu);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a6;
  }
  else
  {
    uint64_t v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_96568();
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a6;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = a5;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_48A78(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    if (IMOSLoggingEnabled())
    {
      id v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, "All sends of message edit commands completed succesfully", v5, 2u);
      }
    }
  }
  else
  {
    id v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_96500();
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_498DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x49878);
  }
  JUMPOUT(0x49928);
}

void sub_498FC()
{
}

void sub_49914()
{
}

void sub_499CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)
    && [+[NSFileManager defaultManager] fileExistsAtPath:*(void *)(a1 + 32)])
  {
    uint64_t v11 = 0;
    unsigned __int8 v2 = [+[NSFileManager defaultManager] removeItemAtPath:*(void *)(a1 + 32) error:&v11];
    int v3 = IMOSLoggingEnabled();
    if (v2)
    {
      if (v3)
      {
        id v4 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          uint64_t v5 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          uint64_t v13 = v5;
          uint64_t v6 = "Succeeded deleting file at path %@";
          uint64_t v7 = v4;
          uint32_t v8 = 12;
LABEL_10:
          _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, v6, buf, v8);
        }
      }
    }
    else if (v3)
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        uint64_t v13 = v10;
        __int16 v14 = 2112;
        uint64_t v15 = v11;
        uint64_t v6 = "Deleting file at path %@ failed with error %@";
        uint64_t v7 = v9;
        uint32_t v8 = 22;
        goto LABEL_10;
      }
    }
  }
}

uint64_t sub_49B40(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, const void *a6, void *a7, const void *a8, void *a9, uint64_t a10)
{
  id v16 = [+[IMDFileTransferCenter sharedInstance] transferForGUID:*(void *)(a1 + 32)];
  int v17 = IMOSLoggingEnabled();
  if (a3)
  {
    if (v17)
    {
      id v18 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        int v27 = 138412802;
        id v28 = v16;
        __int16 v29 = 2112;
        CFStringRef v30 = @"YES";
        __int16 v31 = 2112;
        uint64_t v32 = a4;
        _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "SendLogDump: Success - Finished uploading transfer: %@   success: %@  error: %@", (uint8_t *)&v27, 0x20u);
      }
    }
    int v19 = (__CFDictionary *)[objc_alloc((Class)NSMutableDictionary) initWithCapacity:5];
    id v20 = objc_msgSend(a7, "__imHexString");
    if (v20) {
      CFDictionarySetValue(v19, @"mmcs-signature-hex", v20);
    }
    if (a6) {
      CFDictionarySetValue(v19, @"mmcs-owner", a6);
    }
    if (a8) {
      CFDictionarySetValue(v19, @"mmcs-url", a8);
    }
    id v21 = objc_msgSend(a9, "__imHexString", v20);
    if (v21) {
      CFDictionarySetValue(v19, @"decryption-key", v21);
    }
    uint64_t v22 = [+[NSNumber numberWithUnsignedLongLong:a10] stringValue];
    if (v22) {
      CFDictionarySetValue(v19, @"file-size", v22);
    }
    [v16 setUserInfo:v19];

    [*(id *)(a1 + 40) _sendIDSMessageWithTransferGUID:*(void *)(a1 + 32) andTransfer:v16 fromAccount:*(void *)(a1 + 48) fromID:*(void *)(a1 + 56) toRecipient:*(void *)(a1 + 64) withCompletion:*(void *)(a1 + 72)];
  }
  else
  {
    if (v17)
    {
      uint64_t v23 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        int v27 = 138412802;
        id v28 = v16;
        __int16 v29 = 2112;
        CFStringRef v30 = @"NO";
        __int16 v31 = 2112;
        uint64_t v32 = a4;
        _os_log_impl(&dword_0, v23, OS_LOG_TYPE_INFO, "SendLogDump: Failed uploading transfer: %@   success: %@  error: %@", (uint8_t *)&v27, 0x20u);
      }
    }
    uint64_t v24 = *(void *)(a1 + 72);
    if (v24) {
      (*(void (**)(uint64_t, void))(v24 + 16))(v24, 0);
    }
  }
  uint64_t v25 = *(void *)(*(void *)(a1 + 88) + 8);
  if (!*(unsigned char *)(v25 + 24)) {
    *(unsigned char *)(v25 + 24) = 1;
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16))();
}

void sub_49EC4(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    unsigned __int8 v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
        CFStringRef v3 = @"YES";
      }
      else {
        CFStringRef v3 = @"NO";
      }
      int v5 = 138412290;
      CFStringRef v6 = v3;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, "SendLogDump: We hit our log dump time out and did we finish ? %@", (uint8_t *)&v5, 0xCu);
    }
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    if (IMOSLoggingEnabled())
    {
      id v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        LOWORD(v5) = 0;
        _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "SendLogDump: We failed to upload the sysdiagnose within 15 minutes, we are cancelling the upload", (uint8_t *)&v5, 2u);
      }
    }
    [+[IMTransferServicesController sharedInstance] cancelSendTransferID:*(void *)(a1 + 32)];
  }
}

void sub_4A720(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x4A51CLL);
  }
  _Unwind_Resume(a1);
}

void sub_4AC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_4AC90(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) transferForGUID:a2];
}

NSString *__cdecl sub_4AC9C(id a1, IMFileTransfer *a2)
{
  return (NSString *)@"";
}

void sub_4ACA8(uint64_t a1, uint64_t a2)
{
}

void sub_4ACB8(uint64_t a1)
{
}

id sub_4ACC4(uint64_t a1, void *a2)
{
  id v3 = [a2 messagePartBody];
  unsigned int v4 = objc_msgSend(v3, "__im_isOnlyAdaptiveImageGlyphFileTransfersAndWhitespaceUsingFileTransferProvider:", *(void *)(a1 + 40));
  id v9 = 0;
  if (v4)
  {
    id v5 = objc_msgSend(objc_msgSend(v3, "__im_transferGUIDsInAttributedString"), "array");
    id v9 = v5;
  }
  else
  {
    id v6 = objc_msgSend(v3, "__im_attributedStringByReplacingAdaptiveImageGlyphFileTransfersUsingFileTransferProvider:replacementTextProvider:removedTransferGUIDsOut:", *(void *)(a1 + 40), *(void *)(a1 + 48), &v9);
    id v7 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) mutableCopy];
    [v7 appendAttributedString:v6];
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = [v7 copy];

    id v5 = v9;
  }
  id result = [v5 count];
  if (result) {
    return [*(id *)(a1 + 32) addObjectsFromArray:v9];
  }
  return result;
}

NSData *_PayloadDataWithExtensionPayloadDataFromAttachmentForOutgoingMessage(void *a1)
{
  if (([a1 isTypingMessage] & 1) != 0
    || !objc_msgSend(objc_msgSend(a1, "payloadData"), "length"))
  {
    return 0;
  }
  if (IMOSLoggingEnabled())
  {
    unsigned __int8 v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v26 = a1;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, "Request to _PayloadDataWithExtensionPayloadDataFromAttachmentForOutgoingMessage: %@", buf, 0xCu);
    }
  }
  uint64_t v3 = IMExtensionPayloadUnarchivingClasses();
  uint64_t v23 = 0;
  id v4 = objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", objc_msgSend(a1, "payloadData"), &v23);
  id v5 = [v4 decodeObjectOfClasses:v3 forKey:NSKeyedArchiveRootObjectKey];
  if (v23)
  {
    if (IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v26 = v23;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Failed to unarchive payload. Error: %@", buf, 0xCu);
      }
    }
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v18 = IMExtensionPayloadDataKey;
    if (!objc_msgSend(v5, "objectForKey:"))
    {
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      id v9 = [a1 fileTransferGUIDs];
      id v10 = [v9 countByEnumeratingWithState:&v19 objects:v24 count:16];
      if (v10)
      {
        uint64_t v11 = *(void *)v20;
        uint64_t v12 = IMFileTransferPluginPayloadAttachmentExtension;
LABEL_18:
        uint64_t v13 = 0;
        while (1)
        {
          if (*(void *)v20 != v11) {
            objc_enumerationMutation(v9);
          }
          id v14 = objc_msgSend(-[IMDFileTransferCenter transferForGUID:](+[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance"), "transferForGUID:", *(void *)(*((void *)&v19 + 1) + 8 * v13)), "localURL");
          if (objc_msgSend(objc_msgSend(v14, "pathExtension"), "isEqualToString:", v12)) {
            break;
          }
          if (v10 == (id)++v13)
          {
            id v10 = [v9 countByEnumeratingWithState:&v19 objects:v24 count:16];
            id v7 = 0;
            if (v10) {
              goto LABEL_18;
            }
            goto LABEL_13;
          }
        }
        uint64_t v15 = +[NSData dataWithContentsOfURL:v14];
        if (IMOSLoggingEnabled())
        {
          id v16 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            id v26 = v14;
            _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "Read extension payload data from path: %@", buf, 0xCu);
          }
        }
        if (v15)
        {
          id v17 = [v5 mutableCopy];
          [v17 setObject:v15 forKey:v18];
          [v17 removeObjectForKey:IMExtensionPayloadDataFilePathKey];
          id v7 = +[NSKeyedArchiver archivedDataWithRootObject:v17 requiringSecureCoding:0 error:0];
          [a1 setPayloadData:v7];

          goto LABEL_13;
        }
      }
    }
  }
  id v7 = 0;
LABEL_13:

  return v7;
}

void sub_4B5D4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_4B608(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

id sub_4C154(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 balloonBundleID];
  uint64_t v4 = [*(id *)(a1 + 32) balloonBundleID];
  id v5 = [v3 isEqualToString:v4];

  return v5;
}

uint64_t sub_4C65C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

int64_t sub_4EA24(id a1, NSDictionary *a2, NSDictionary *a3)
{
  uint64_t v4 = a3;
  id v5 = [(NSDictionary *)a2 objectForKeyedSubscript:@"file-size"];
  id v6 = [v5 unsignedLongLongValue];

  id v7 = [(NSDictionary *)v4 objectForKeyedSubscript:@"file-size"];

  id v8 = [v7 unsignedLongLongValue];
  if (v6 < v8) {
    return -1;
  }
  else {
    return v6 > v8;
  }
}

void sub_4EAB0(uint64_t a1, void *a2, uint64_t a3)
{
  id v19 = a2;
  id v5 = [v19 objectForKeyedSubscript:@"file-size"];
  id v6 = [v5 unsignedLongLongValue];

  if (a3)
  {
    id v7 = +[NSString stringWithFormat:@"-%d", a3];
  }
  else
  {
    if (!*(unsigned char *)(a1 + 48) && *(unsigned char *)(a1 + 49) && !*(unsigned char *)(a1 + 50)) {
      id v6 = +[IMDAttachmentUtilities mmcsTargetReportSizeForHighQualityPhotoSize:v6 commonCapabilities:*(void *)(a1 + 32)];
    }
    id v7 = &stru_E0738;
  }
  id v8 = [@"mmcs-signature-hex" stringByAppendingString:v7];
  id v9 = [@"mmcs-owner" stringByAppendingString:v7];
  id v10 = [@"mmcs-url" stringByAppendingString:v7];
  uint64_t v11 = [@"decryption-key" stringByAppendingString:v7];
  uint64_t v12 = [@"file-size" stringByAppendingString:v7];
  uint64_t v13 = [v19 objectForKeyedSubscript:@"mmcs-signature-hex"];
  if (v13) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v8, v13);
  }

  id v14 = [v19 objectForKeyedSubscript:@"mmcs-owner"];
  if (v14) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v9, v14);
  }

  uint64_t v15 = [v19 objectForKeyedSubscript:@"mmcs-url"];
  if (v15) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v10, v15);
  }

  id v16 = [v19 objectForKeyedSubscript:@"decryption-key"];
  if (v16) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v11, v16);
  }

  id v17 = +[NSNumber numberWithUnsignedLongLong:v6];
  uint64_t v18 = [v17 stringValue];

  if (v18) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v12, v18);
  }
}

void sub_4F098(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double v7 = *(double *)(a1 + 40);
  [v6 expiration];
  if (v7 > v8)
  {
    [*(id *)(a1 + 32) addObject:v5];
    if (![v6 useCount])
    {
      if ([v6 isSuccess])
      {
        id v9 = _iMessageTelemetryLogHandle();
        unsigned __int8 v10 = os_signpost_id_make_with_pointer(v9, v6);
        uint64_t v11 = v9;
        uint64_t v12 = v11;
        if (v10 && os_signpost_enabled(v11))
        {
          *(_WORD *)uint64_t v13 = 0;
          _os_signpost_emit_with_name_impl(&dword_0, v12, OS_SIGNPOST_EVENT, v10, "MessageAttachment.eager.notUsed", " enableTelemetry=YES ", v13, 2u);
        }
      }
    }
  }
}

void sub_4F270(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double v7 = [v6 originalURL];
  unsigned int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    id v9 = (char *)[v6 state];
    unsigned int v10 = [v6 cancel];
    int v11 = IMOSLoggingEnabled();
    if (v10)
    {
      if (v11)
      {
        uint64_t v12 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          int v21 = 138412290;
          id v22 = v6;
          _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "EAGER setting cancel %@", (uint8_t *)&v21, 0xCu);
        }
      }
      uint64_t v13 = _iMessageTelemetryLogHandle();
      unsigned __int8 v14 = os_signpost_id_make_with_pointer(v13, v6);
      uint64_t v15 = v13;
      id v16 = v15;
      if (v14 && os_signpost_enabled(v15))
      {
        LOWORD(v21) = 0;
        _os_signpost_emit_with_name_impl(&dword_0, v16, OS_SIGNPOST_EVENT, v14, "MessageAttachment.eager.cancel", " enableTelemetry=YES ", (uint8_t *)&v21, 2u);
      }

      if (v9 == (unsigned char *)&dword_0 + 2)
      {
        if (IMOSLoggingEnabled())
        {
          id v17 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            int v21 = 138412290;
            id v22 = v6;
            _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "EAGER request send cancel %@", (uint8_t *)&v21, 0xCu);
          }
        }
        uint64_t v18 = +[IMTransferServicesController sharedInstance];
        id v19 = [v6 transferId];
        [v18 cancelSendTransferID:v19];
      }
      [*(id *)(a1 + 40) addObject:v5];
    }
    else if (v11)
    {
      long long v20 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        int v21 = 138412290;
        id v22 = v6;
        _os_log_impl(&dword_0, v20, OS_LOG_TYPE_INFO, "EAGER cancel failed %@", (uint8_t *)&v21, 0xCu);
      }
    }
  }
}

uint64_t sub_4F950(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_4F960(uint64_t a1)
{
}

void sub_4F968(uint64_t a1, void *a2)
{
  id v52 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 48) transcoderUserInfo];
  long long v51 = [v4 eagerUploadKeyForURL:v52 sizes:v3 transcodeDictionary:v5 capabilities:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];

  id v6 = v51;
  if (v51)
  {
    double v7 = [*(id *)(a1 + 32) eagerUploadStatusForKey:v51];
    unsigned int v8 = v7;
    if (!v7) {
      goto LABEL_20;
    }
    if ([(MessageAttachmentEagerUploadStatus *)v7 targetSize] < *(void *)(a1 + 80))
    {
      if (IMOSLoggingEnabled())
      {
        id v9 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "EAGER reupload: previous is too small", buf, 2u);
        }
      }
      [(MessageAttachmentEagerUploadStatus *)v8 cancel];

      unsigned int v8 = 0;
      goto LABEL_20;
    }
    if ([(MessageAttachmentEagerUploadStatus *)v8 isComplete]
      && ![(MessageAttachmentEagerUploadStatus *)v8 isSuccess])
    {
LABEL_20:
      unsigned __int8 v14 = [MessageAttachmentEagerUploadStatus alloc];
      uint64_t v15 = [*(id *)(a1 + 48) localURL];
      id v16 = [(MessageAttachmentEagerUploadStatus *)v14 initWithOriginalURL:v15 transferId:v51 targetSize:*(void *)(a1 + 80)];

      [*(id *)(*(void *)(a1 + 32) + 32) setObject:v16 forKeyedSubscript:v51];
      if (IMOSLoggingEnabled())
      {
        id v17 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v69 = v16;
          _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "EAGER start: %@", buf, 0xCu);
        }
      }
      [(MessageAttachmentEagerUploadStatus *)v16 start];
      uint64_t v18 = objc_alloc_init(MessageAttachmentOverallStatus);
      [(MessageAttachmentOverallStatus *)v18 setError:0];
      [(MessageAttachmentOverallStatus *)v18 setFailed:0];
      id v19 = [v52 pathExtension];
      if (![v19 length])
      {
        long long v20 = +[IMFileManager defaultHFSFileManager];
        int v21 = [*(id *)(a1 + 48) type];
        id v22 = [v20 pathExtensionForUTIType:v21];

        if ([v22 length])
        {
          uint64_t v23 = v22;
        }
        else
        {
          uint64_t v24 = +[IMFileManager defaultHFSFileManager];
          uint64_t v25 = [*(id *)(a1 + 48) mimeType];
          uint64_t v26 = [v24 pathExtensionForMIMEType:v25];

          uint64_t v23 = (void *)v26;
        }
        int v27 = v23;
        if ([v23 length])
        {
          id v28 = [v52 absoluteString];
          __int16 v29 = [v28 stringByDeletingPathExtension];

          CFStringRef v30 = [v29 stringByAppendingPathExtension:v27];
          __int16 v31 = objc_msgSend(v30, "__im_apfsCompatibleFilename");

          if ([v31 length])
          {
            uint64_t v32 = +[NSURL fileURLWithPath:v31];

            id v52 = (id)v32;
          }
        }
        id v19 = v27;
      }
      long long v50 = v19;
      if (v52)
      {
        long long v33 = +[NSFileManager defaultManager];
        long long v34 = objc_msgSend(v33, "im_generateCopyForURL:", v52);
      }
      else
      {
        long long v34 = 0;
      }
      dispatch_group_t v35 = dispatch_group_create();
      id v36 = objc_alloc_init((Class)NSMutableArray);
      v59[0] = _NSConcreteStackBlock;
      v59[1] = 3221225472;
      v59[2] = sub_50110;
      v59[3] = &unk_DEA38;
      uint64_t v37 = v16;
      uint64_t v38 = *(void *)(a1 + 32);
      id v60 = v37;
      uint64_t v61 = v38;
      id v62 = *(id *)(a1 + 56);
      id v63 = *(id *)(a1 + 64);
      id v64 = v51;
      id v39 = v36;
      id v65 = v39;
      __int16 v40 = v18;
      uint64_t v66 = v40;
      dispatch_group_t v67 = v35;
      uint64_t v41 = v35;
      __int16 v42 = objc_retainBlock(v59);
      [(MessageAttachmentEagerUploadStatus *)v37 setState:1];
      uint64_t v43 = *(void **)(a1 + 32);
      if (v34) {
        id v44 = v34;
      }
      else {
        id v44 = v52;
      }
      uint64_t v46 = *(void *)(a1 + 48);
      uint64_t v45 = a1 + 48;
      [v43 _transcodeURL:v44 reason:1 transfer:v46 sizes:*(void *)(v45 - 8) commonCapabilities:*(void *)(*(void *)(*(void *)(v45 + 24) + 8) + 40) sendStatus:v40 urlGroup:v41 didTranscode:0 handleURL:v42];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_50310;
      block[3] = &unk_DD950;
      unsigned int v8 = v37;
      long long v54 = v8;
      id v55 = v34;
      long long v56 = v40;
      id v57 = v39;
      id v58 = *(id *)v45;
      id v47 = v39;
      long long v48 = v40;
      id v49 = v34;
      dispatch_group_notify(v41, (dispatch_queue_t)&_dispatch_main_q, block);

      goto LABEL_44;
    }
    unsigned int v11 = [(MessageAttachmentEagerUploadStatus *)v8 isComplete];
    int v12 = IMOSLoggingEnabled();
    if (v11)
    {
      if (!v12)
      {
LABEL_44:

LABEL_45:
        id v6 = v51;
        goto LABEL_46;
      }
      uint64_t v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v69 = v8;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "EAGER already uploaded: %@", buf, 0xCu);
      }
    }
    else
    {
      if (!v12) {
        goto LABEL_44;
      }
      uint64_t v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v69 = v8;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "EAGER in progress: %@", buf, 0xCu);
      }
    }

    goto LABEL_44;
  }
  if (IMOSLoggingEnabled())
  {
    unsigned int v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "EAGER skip: no key", buf, 2u);
    }

    goto LABEL_45;
  }
LABEL_46:
}

void sub_50110(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  if ([*(id *)(a1 + 32) isCanceled])
  {
    if (IMOSLoggingEnabled())
    {
      id v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v23 = v10;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "EAGER cancel before send: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    char v21 = a4;
    [*(id *)(a1 + 32) setState:2];
    if (IMOSLoggingEnabled())
    {
      unsigned int v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v23 = v12;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "EAGER upload: %@", buf, 0xCu);
      }
    }
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v16 = *(void *)(a1 + 72);
    uint64_t v17 = *(void *)(a1 + 80);
    uint64_t v18 = *(void **)(a1 + 40);
    id v19 = [*(id *)(a1 + 32) attachmentStatus];
    LOBYTE(v20) = v21;
    [v18 _sendURL:v7 urlToRemove:v8 topic:v14 sessionInfo:0 messageGUID:v13 transferID:v15 fileTransferGUID:v15 attachmentSendContexts:v16 failIfError:v20 sendStatus:v17 attachmentStatus:v19 group:*(void *)(a1 + 88)];
  }
}

void sub_50310(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    unsigned __int8 v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v29 = v3;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, "EAGER complete: %@", buf, 0xCu);
    }
  }
  uint64_t v4 = +[NSFileManager defaultManager];
  uint64_t v5 = *(void *)(a1 + 40);
  id v27 = 0;
  [v4 removeItemAtURL:v5 error:&v27];
  id v6 = v27;

  unsigned __int8 v7 = [*(id *)(a1 + 48) failed];
  id v8 = *(void **)(a1 + 32);
  if (v7)
  {
    if (([v8 isCanceled] & 1) == 0) {
      [*(id *)(a1 + 32) setState:4];
    }
    if (IMOSLoggingEnabled())
    {
      id v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 138412290;
        uint64_t v29 = v10;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "EAGER NOT setting userInfo: transfer %@ did not complete successfully.", buf, 0xCu);
      }
    }
    unsigned int v11 = _iMessageTelemetryLogHandle();
    unsigned __int8 v12 = os_signpost_id_make_with_pointer(v11, *(const void **)(a1 + 32));
    uint64_t v13 = v11;
    uint64_t v14 = v13;
    if (v12 && os_signpost_enabled(v13))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_0, v14, OS_SIGNPOST_EVENT, v12, "MessageAttachment.eager.uploadFail", " enableTelemetry=YES ", buf, 2u);
    }
  }
  else
  {
    [v8 setState:5];
    uint64_t v15 = *(void **)(a1 + 56);
    id v22 = _NSConcreteStackBlock;
    uint64_t v23 = 3221225472;
    uint64_t v24 = sub_50658;
    uint64_t v25 = &unk_DEA60;
    uint64_t v26 = *(id *)(a1 + 32);
    [v15 enumerateObjectsUsingBlock:&v22];
    objc_msgSend(*(id *)(a1 + 32), "setAttachmentSendContexts:", *(void *)(a1 + 56), v22, v23, v24, v25);
    uint64_t v16 = *(void **)(a1 + 32);
    uint64_t v17 = [*(id *)(a1 + 64) transferredFilename];
    [v16 setTransferredName:v17];

    uint64_t v18 = _iMessageTelemetryLogHandle();
    unsigned __int8 v19 = os_signpost_id_make_with_pointer(v18, *(const void **)(a1 + 32));
    uint64_t v20 = v18;
    char v21 = v20;
    if (v19 && os_signpost_enabled(v20))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_0, v21, OS_SIGNPOST_EVENT, v19, "MessageAttachment.eager.upload", " enableTelemetry=YES ", buf, 2u);
    }

    uint64_t v14 = v26;
  }

  [*(id *)(a1 + 32) finish];
}

id sub_50658(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 objectForKeyedSubscript:@"file-size"];
  uint64_t v4 = (char *)[v3 unsignedLongLongValue];

  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = &v4[(void)[v5 totalBytes]];

  return _[v5 setTotalBytes:v6];
}

void sub_506C8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      id v14 = v4;
      __int16 v15 = 2112;
      id v16 = v6;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "EAGER Found Common Capabilities: %@ from recipients %@", buf, 0x16u);
    }
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  id v7 = objc_alloc_init((Class)NSFileCoordinator);
  id v8 = [*(id *)(a1 + 40) localURL];
  id v12 = 0;
  [v7 coordinateReadingItemAtURL:v8 options:0 error:&v12 byAccessor:*(void *)(a1 + 48)];
  id v9 = v12;

  if (v9 && IMOSLoggingEnabled())
  {
    uint64_t v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      unsigned int v11 = [*(id *)(a1 + 40) localURL];
      *(_DWORD *)buf = 138412546;
      id v14 = v11;
      __int16 v15 = 2112;
      id v16 = v9;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "EAGER Failed coordinated read of url for fast upload: %@  (Error: %@)", buf, 0x16u);
    }
  }
}

void sub_50D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
}

uint64_t sub_50D64(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, uint64_t))(a1[6] + 16))(a1[6], a1[4], a1[5], 0, 0, 3);
}

void sub_50D88(uint64_t a1, void *a2)
{
  id v3 = a2;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_50F84;
  v21[3] = &unk_DEB00;
  uint64_t v23 = *(void *)(a1 + 104);
  id v22 = *(id *)(a1 + 88);
  id v4 = objc_retainBlock(v21);
  unsigned int v5 = [*(id *)(a1 + 32) isEqualToString:IDSServiceNameiMessageForBusiness];
  id v6 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_51038;
    v11[3] = &unk_DEB28;
    v11[4] = v6;
    id v12 = *(id *)(a1 + 64);
    char v20 = *(unsigned char *)(a1 + 120);
    id v13 = *(id *)(a1 + 72);
    id v14 = *(id *)(a1 + 80);
    id v9 = v3;
    uint64_t v10 = *(void *)(a1 + 112);
    id v15 = v9;
    uint64_t v19 = v10;
    id v16 = *(id *)(a1 + 32);
    uint64_t v17 = v4;
    id v18 = *(id *)(a1 + 96);
    [v6 sessionInfoForBusinessReceipients:v7 fromID:v8 completion:v11];
  }
  else
  {
    [v6 sendAttachmentsForMessage:*(void *)(a1 + 64) canSendInline:*(unsigned __int8 *)(a1 + 120) displayIDs:*(void *)(a1 + 72) additionalContext:*(void *)(a1 + 80) commonCapabilities:v3 mode:*(void *)(a1 + 112) sessionInfo:0 topic:*(void *)(a1 + 32) completionBlock:v4 uploadFailureBlock:*(void *)(a1 + 96)];
  }
}

void sub_50F84(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v14 = a2;
  id v11 = a3;
  id v12 = a4;
  os_activity_scope_leave((os_activity_scope_state_t)(*(void *)(*(void *)(a1 + 40) + 8) + 32));
  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    (*(void (**)(uint64_t, id, id, id, uint64_t, uint64_t))(v13 + 16))(v13, v14, v11, v12, a5, a6);
  }
}

id sub_51038(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) sendAttachmentsForMessage:*(void *)(a1 + 40) canSendInline:*(unsigned __int8 *)(a1 + 104) displayIDs:*(void *)(a1 + 48) additionalContext:*(void *)(a1 + 56) commonCapabilities:*(void *)(a1 + 64) mode:*(void *)(a1 + 96) sessionInfo:a2 topic:*(void *)(a1 + 72) completionBlock:*(void *)(a1 + 80) uploadFailureBlock:*(void *)(a1 + 88)];
}

void sub_525F0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    unsigned __int8 v2 = [*(id *)(a1 + 40) userInfo];
    CFMutableDictionaryRef Mutable = (__CFDictionary *)[v2 mutableCopy];

    if (!Mutable) {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    id v4 = +[NSString stringWithFormat:@"%@%d", @"ia-", *(void *)(a1 + 96)];
    if (v4) {
      CFDictionarySetValue(Mutable, @"inline-attachment", v4);
    }
    [*(id *)(a1 + 40) setUserInfo:Mutable];
    [*(id *)(a1 + 40) setMessageGUID:*(void *)(a1 + 48)];
    id v5 = [*(id *)(a1 + 32) length];
    [*(id *)(a1 + 56) updateTransfer:*(void *)(a1 + 64) currentBytes:v5 totalBytes:v5];
    [*(id *)(a1 + 56) endTransfer:*(void *)(a1 + 64)];
    id v6 = *(const void **)(a1 + 32);
    if (v6) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), v4, v6);
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = *(void *)(a1 + 64);
        id v9 = [*(id *)(a1 + 32) length];
        *(_DWORD *)buf = 138412546;
        uint64_t v11 = v8;
        __int16 v12 = 2048;
        id v13 = v9;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Inlined transfer %@ with %lu bytes.", buf, 0x16u);
      }
    }
  }
  else
  {
    [*(id *)(a1 + 56) failTransfer:*(void *)(a1 + 64) reason:8];
    [*(id *)(a1 + 80) setFailed:1];
    [*(id *)(a1 + 80) setError:34];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
}

void sub_527F4(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    unsigned __int8 v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      unsigned int v4 = [*(id *)(a1 + 40) failed];
      CFStringRef v5 = @"YES";
      if (v4) {
        CFStringRef v5 = @"NO";
      }
      int v7 = 138412546;
      uint64_t v8 = v3;
      __int16 v9 = 2112;
      CFStringRef v10 = v5;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, "  All done inline transfer set for: %@   success: %@", (uint8_t *)&v7, 0x16u);
    }
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6) {
    (*(void (**)(uint64_t, void, void, void, void, id))(v6 + 16))(v6, *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), [*(id *)(a1 + 40) failed] ^ 1, objc_msgSend(*(id *)(a1 + 40), "error"));
  }
}

void sub_52944(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isRecipeBasedSticker])
  {
    unsigned __int8 v2 = +[IMMetricsCollector sharedInstance];
    [v2 trackEvent:IMMetricsCollectorEventMeStickerSent];

    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        unsigned int v4 = [*(id *)(a1 + 32) stickerUserInfo];
        double v5 = [v4 objectForKey:IMStickerUserInfoStickerRecipeKey];
        *(_DWORD *)buf = 138412290;
        double v82 = v5;
        _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "Faking a me-sticker upload with recipe %@", buf, 0xCu);
      }
    }
    [*(id *)(a1 + 32) setUserInfo:0];
    [*(id *)(a1 + 32) setMessageGUID:*(void *)(a1 + 40)];
    id v6 = [*(id *)(a1 + 32) totalBytes];
    [*(id *)(a1 + 48) updateTransfer:*(void *)(a1 + 56) currentBytes:v6 totalBytes:v6];
    [*(id *)(a1 + 48) endTransfer:*(void *)(a1 + 56)];
    if (IMOSLoggingEnabled())
    {
      int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        double v8 = *(double *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        double v82 = v8;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Done uploading me-sticker %@", buf, 0xCu);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  }
  else
  {
    if ([*(id *)(a1 + 32) isSticker])
    {
      __int16 v9 = +[IMMetricsCollector sharedInstance];
      [v9 trackEvent:IMMetricsCollectorEventStickerSent];
    }
    if ([*(id *)(a1 + 32) shouldFastSend])
    {
      if ([*(id *)(a1 + 32) isSticker])
      {
        CFStringRef v10 = [*(id *)(a1 + 32) stickerUserInfo];
        double v11 = [v10 objectForKey:IMStickerUserInfoStickerHashKey];
      }
      else
      {
        double v11 = 0.0;
      }
      if ([*(id *)&v11 length])
      {
        if (IMOSLoggingEnabled())
        {
          id v13 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Sticker file hash present in sticker user info dictionary", buf, 2u);
          }
        }
        double v12 = v11;
      }
      else
      {
        id v14 = *(void **)(a1 + 72);
        id v15 = [*(id *)(a1 + 32) localURL];
        id v16 = [v15 path];
        double v12 = [v14 _fileHash:v16];

        if (IMOSLoggingEnabled())
        {
          uint64_t v17 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "Client did not pass in sticker hash. Calculating hash at imagent", buf, 2u);
          }
        }
      }
      if (IMOSLoggingEnabled())
      {
        id v18 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          double v82 = v12;
          _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "Sticker file hash %@", buf, 0xCu);
        }
      }
      uint64_t v19 = [*(id *)(a1 + 72) _transferInfoForKey:*(void *)&v12];
      char v20 = [v19 objectForKey:@"sticker-TimeInterval"];
      [v20 doubleValue];
      double v22 = v21;

      +[NSDate timeIntervalSinceReferenceDate];
      double v24 = v23;
      uint64_t v25 = [v19 objectForKey:@"download-credentials"];
      uint64_t v26 = [v19 objectForKey:@"v"];
      id v27 = (char *)[v26 integerValue];

      [*(id *)(a1 + 72) _stickerUploadTTL];
      double v29 = v28;
      double v30 = v24 - v22;
      if (IMOSLoggingEnabled())
      {
        __int16 v31 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134219522;
          double v82 = v24;
          __int16 v83 = 2048;
          double v84 = v22;
          __int16 v85 = 2048;
          double v86 = v29;
          __int16 v87 = 2048;
          double v88 = v24 - v22;
          __int16 v89 = 2112;
          long long v90 = v19;
          __int16 v91 = 2048;
          id v92 = v27;
          __int16 v93 = 2048;
          uint64_t v94 = 1;
          _os_log_impl(&dword_0, v31, OS_LOG_TYPE_INFO, "Sticker transfer currentTimeIntervale %f, uploadTimeInterval %f, kStickerUploadTTL %f, timeDifference %f, transferInfo %@, version %ld, expectedVersion %ld", buf, 0x48u);
        }
      }
      if (v19 && v30 >= 0.0 && v30 < v29 && v25 && v27 == (unsigned char *)&dword_0 + 1)
      {
        uint64_t v32 = objc_alloc_init(FTiMessageRequestMMCSFileRefreshToken);
        AttachmentRefreshUtilConfigureStickerToken(v32, v25);
        long long v33 = [*(id *)(a1 + 72) attachmentRefreshDeliveryController];
        v70[0] = _NSConcreteStackBlock;
        v70[1] = 3221225472;
        v70[2] = sub_53384;
        v70[3] = &unk_DEBC8;
        uint64_t v34 = *(void *)(a1 + 72);
        id v71 = v19;
        uint64_t v72 = v34;
        double v73 = v12;
        id v74 = *(id *)(a1 + 32);
        id v75 = v25;
        id v76 = *(id *)(a1 + 40);
        id v35 = *(id *)(a1 + 48);
        uint64_t v36 = *(void *)(a1 + 56);
        id v77 = v35;
        uint64_t v78 = v36;
        id v79 = *(id *)(a1 + 80);
        id v80 = *(id *)(a1 + 64);
        id v37 = v25;
        id v38 = *(id *)&v12;
        id v39 = v19;
        [v33 sendFTMessage:v32 attempts:0 withCompletionBlock:v70];

        return;
      }
    }
    else
    {
      double v12 = 0.0;
    }
    double v40 = +[IMDAttachmentUtilities fetchSizeLimitsForTransfer:*(void *)(a1 + 32) mode:*(void *)(a1 + 136)];
    uint64_t v41 = [*(id *)&v40 firstObject];
    id v42 = [v41 integerValue];

    if (IMOSLoggingEnabled())
    {
      uint64_t v43 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        double v82 = v40;
        _os_log_impl(&dword_0, v43, OS_LOG_TYPE_INFO, "Calculated size limits: %@", buf, 0xCu);
      }
    }
    v56[0] = _NSConcreteStackBlock;
    v56[1] = 3221225472;
    v56[2] = sub_53A3C;
    v56[3] = &unk_DECB8;
    v56[4] = *(void *)(a1 + 72);
    id v44 = *(id *)&v40;
    id v57 = v44;
    id v58 = *(id *)(a1 + 32);
    id v59 = *(id *)(a1 + 88);
    id v69 = v42;
    id v60 = *(id *)(a1 + 96);
    id v61 = *(id *)(a1 + 64);
    id v68 = *(id *)(a1 + 128);
    id v62 = *(id *)(a1 + 80);
    id v45 = *(id *)&v12;
    id v63 = v45;
    id v64 = *(id *)(a1 + 104);
    id v65 = *(id *)(a1 + 112);
    id v66 = *(id *)(a1 + 40);
    int8x16_t v54 = *(int8x16_t *)(a1 + 48);
    id v46 = (id)v54.i64[0];
    int8x16_t v67 = vextq_s8(v54, v54, 8uLL);
    id v47 = objc_retainBlock(v56);
    long long v48 = *(void **)(a1 + 120);
    id v49 = [*(id *)(a1 + 32) localURL];
    id v55 = 0;
    [v48 coordinateReadingItemAtURL:v49 options:0 error:&v55 byAccessor:v47];
    double v50 = COERCE_DOUBLE(v55);

    if (v50 != 0.0)
    {
      if (IMOSLoggingEnabled())
      {
        long long v51 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
        {
          double v52 = [*(id *)(a1 + 32) localURL];
          *(_DWORD *)buf = 138412546;
          double v82 = v52;
          __int16 v83 = 2112;
          double v84 = v50;
          _os_log_impl(&dword_0, v51, OS_LOG_TYPE_INFO, "Failed coordinated read of: %@  (Error: %@)", buf, 0x16u);
        }
      }
      id v53 = objc_msgSend(*(id *)(a1 + 32), "localURL", *(_OWORD *)&v54);
      ((void (*)(void *, void *))v47[2])(v47, v53);
    }
  }
}

void sub_53384(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (a3)
  {
    id v6 = [*(id *)(a1 + 32) mutableCopy];
    [v6 removeObjectForKey:@"sticker-TimeInterval"];
    +[NSDate timeIntervalSinceReferenceDate];
    int v7 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [v6 setObject:v7 forKey:@"sticker-TimeInterval"];

    [*(id *)(a1 + 40) _setTransferInfo:v6 key:*(void *)(a1 + 48)];
    double v8 = (const void *)IMStickerUserInfoStickerTranscodedStickerHashKey;
    __int16 v9 = [*(id *)(a1 + 32) objectForKey:IMStickerUserInfoStickerTranscodedStickerHashKey];
    if ([*(id *)(a1 + 40) _previewAttachmentEnabledForStickers]
      && [v9 length])
    {
      if (IMOSLoggingEnabled())
      {
        CFStringRef v10 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          double v11 = [*(id *)(a1 + 56) stickerUserInfo];
          *(_DWORD *)buf = 138412290;
          long long v48 = v11;
          _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "_previewAttachmentEnabled Updating sticker user info original info %@", buf, 0xCu);
        }
      }
      double v12 = [*(id *)(a1 + 56) stickerUserInfo];
      id v13 = (__CFDictionary *)[v12 mutableCopy];

      if (v13)
      {
        if (v9) {
          CFDictionarySetValue(v13, v8, v9);
        }
        [*(id *)(a1 + 56) setStickerUserInfo:v13];
        if (IMOSLoggingEnabled())
        {
          id v14 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            id v15 = [*(id *)(a1 + 56) stickerUserInfo];
            *(_DWORD *)buf = 138412290;
            long long v48 = v15;
            _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "Resulting sticker info %@", buf, 0xCu);
          }
        }
      }
    }
    if ([*(id *)(a1 + 40) _previewAttachmentEnabledForStickers])
    {
      uint64_t v16 = IMStickerUserInfoTranscodedScaleKey;
      uint64_t v17 = [*(id *)(a1 + 32) valueForKey:IMStickerUserInfoTranscodedScaleKey];
      BOOL v18 = v17 == 0;

      if (!v18)
      {
        uint64_t v19 = [*(id *)(a1 + 56) stickerUserInfo];
        uint64_t v20 = IMStickerUserInfoScaleKey;
        double v21 = [v19 valueForKey:IMStickerUserInfoScaleKey];
        BOOL v22 = v21 == 0;

        if (v22)
        {
          float v26 = 1.0;
        }
        else
        {
          double v23 = [*(id *)(a1 + 56) stickerUserInfo];
          double v24 = [v23 valueForKey:v20];
          [v24 floatValue];
          float v26 = v25;
        }
        uint64_t v32 = [*(id *)(a1 + 32) valueForKey:v16];
        [v32 floatValue];
        float v34 = v33;

        id v35 = [*(id *)(a1 + 56) stickerUserInfo];
        id v36 = [v35 mutableCopy];

        id v37 = +[NSString stringWithFormat:@"%.2f", (float)(v26 * v34)];
        [v36 setObject:v37 forKey:v16];

        id v38 = [v36 valueForKey:v20];
        BOOL v39 = v38 == 0;

        if (v39) {
          [v36 setObject:@"1.00" forKey:v20];
        }
        [*(id *)(a1 + 56) setStickerUserInfo:v36];
        if (IMOSLoggingEnabled())
        {
          double v40 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            uint64_t v41 = [*(id *)(a1 + 56) stickerUserInfo];
            *(_DWORD *)buf = 138412290;
            long long v48 = v41;
            _os_log_impl(&dword_0, v40, OS_LOG_TYPE_INFO, "Update sticker user info dictionary %@", buf, 0xCu);
          }
        }
      }
    }
    if (IMOSLoggingEnabled())
    {
      id v42 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v42, OS_LOG_TYPE_INFO, "Done refreshing sticker with server", buf, 2u);
      }
    }
    [*(id *)(a1 + 56) setUserInfo:*(void *)(a1 + 64)];
    [*(id *)(a1 + 56) setMessageGUID:*(void *)(a1 + 72)];
    id v43 = [*(id *)(a1 + 56) totalBytes];
    [*(id *)(a1 + 80) updateTransfer:*(void *)(a1 + 88) currentBytes:v43 totalBytes:v43];
    [*(id *)(a1 + 80) endTransfer:*(void *)(a1 + 88)];
    if (IMOSLoggingEnabled())
    {
      id v44 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        id v45 = *(void **)(a1 + 56);
        *(_DWORD *)buf = 138412290;
        long long v48 = v45;
        _os_log_impl(&dword_0, v44, OS_LOG_TYPE_INFO, "Done uploading sticker %@", buf, 0xCu);
      }
    }
    id v46 = +[IMMetricsCollector sharedInstance];
    [v46 trackEvent:IMMetricsCollectorEventStickerSentUsingFastPath];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v27 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        double v28 = *(void **)(a1 + 72);
        *(_DWORD *)buf = 138412290;
        long long v48 = v28;
        _os_log_impl(&dword_0, v27, OS_LOG_TYPE_INFO, "Attachments Failed refreshing sticker with server for message GUID %@", buf, 0xCu);
      }
    }
    [*(id *)(a1 + 40) _deleteTransferInfoForKey:*(void *)(a1 + 48)];
    double v29 = *(void **)(a1 + 80);
    uint64_t v30 = *(void *)(a1 + 88);
    __int16 v31 = +[NSError errorWithDomain:@"com.apple.private.AttachmentRefreshDelivery" code:1 userInfo:0];
    [v29 failTransfer:v30 error:v31];

    [*(id *)(a1 + 96) setFailed:1];
    [*(id *)(a1 + 96) setError:34];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
}

void sub_539B4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x53594);
  }
  _Unwind_Resume(a1);
}

void sub_53A3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (+[IMCTSMSUtilities IMIsEagerUploadEnabledForPhoneNumber:0 simID:0])
  {
    id v68 = v3;
    id v5 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v6 = [*(id *)(a1 + 48) transcoderUserInfo];
    int8x16_t v67 = [v5 eagerUploadKeyForURL:v68 sizes:v4 transcodeDictionary:v6 capabilities:*(void *)(a1 + 56)];

    int v7 = [*(id *)(a1 + 32) eagerUploadStatusForKey:v67];
    double v8 = v7;
    if (!v7)
    {
      __int16 v9 = _iMessageTelemetryLogHandle();
      if (os_signpost_enabled(v9))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_0, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MessageAttachment.eager.noRecord", " enableTelemetry=YES ", buf, 2u);
      }
      goto LABEL_39;
    }
    if ((uint64_t)[v7 targetSize] < *(void *)(a1 + 144))
    {
      __int16 v9 = _iMessageTelemetryLogHandle();
      if (os_signpost_enabled(v9))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_0, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MessageAttachment.eager.tooSmall", " enableTelemetry=YES ", buf, 2u);
      }
      if (IMOSLoggingEnabled())
      {
        CFStringRef v10 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "EAGER use - previous is too small, skipping", buf, 2u);
        }
      }
LABEL_39:

      id v3 = v68;
      goto LABEL_40;
    }
    if ([v8 isComplete])
    {
      if (![v8 isSuccess])
      {
        if (IMOSLoggingEnabled())
        {
          BOOL v22 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v8;
            _os_log_impl(&dword_0, v22, OS_LOG_TYPE_INFO, "EAGER use -- previous upload failed, retrying: %@", buf, 0xCu);
          }
        }
        double v23 = _iMessageTelemetryLogHandle();
        unsigned __int8 v24 = os_signpost_id_make_with_pointer(v23, v8);
        float v25 = v23;
        __int16 v9 = v25;
        if (v24 && os_signpost_enabled(v25))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_0, v9, OS_SIGNPOST_EVENT, v24, "MessageAttachment.eager.skipError", " enableTelemetry=YES ", buf, 2u);
        }

        goto LABEL_39;
      }
      [v8 attachToTransfer:*(void *)(a1 + 48) message:*(void *)(a1 + 64) commonCapabilities:*(void *)(a1 + 56)];
      [v8 incrementUseCount];
      double v11 = _iMessageTelemetryLogHandle();
      unsigned __int8 v12 = os_signpost_id_make_with_pointer(v11, v8);
      id v13 = v11;
      id v14 = v13;
      if (v12 && os_signpost_enabled(v13))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_0, v14, OS_SIGNPOST_EVENT, v12, "MessageAttachment.eager.use", " enableTelemetry=YES ", buf, 2u);
      }

      if (IMOSLoggingEnabled())
      {
        id v15 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          uint64_t v16 = [*(id *)(a1 + 48) userInfo];
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v8;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v16;
          _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "EAGER use -- ready, use previous upload: %@, transfer %@", buf, 0x16u);
        }
      }
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v17 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v8;
          _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "EAGER use -- wait for complete: %@", buf, 0xCu);
        }
      }
      BOOL v18 = _iMessageTelemetryLogHandle();
      unsigned __int8 v19 = os_signpost_id_make_with_pointer(v18, v8);
      uint64_t v20 = v18;
      double v21 = v20;
      if (v19 && os_signpost_enabled(v20))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_0, v21, OS_SIGNPOST_INTERVAL_BEGIN, v19, "MessageAttachment.eager.wait", " enableTelemetry=YES ", buf, 2u);
      }

      v100[0] = _NSConcreteStackBlock;
      v100[1] = 3221225472;
      v100[2] = sub_54834;
      v100[3] = &unk_DEBF0;
      long long v101 = v21;
      unsigned __int8 v109 = v19;
      uint64_t v102 = v8;
      id v103 = *(id *)(a1 + 48);
      id v104 = *(id *)(a1 + 64);
      id v105 = *(id *)(a1 + 56);
      id v108 = *(id *)(a1 + 136);
      id v106 = *(id *)(a1 + 80);
      id v107 = *(id *)(a1 + 72);
      id v14 = v21;
      [v102 wait:v100];
    }
    goto LABEL_71;
  }
LABEL_40:
  float v26 = v3;
  id v27 = [v3 pathExtension];
  if (![v27 length])
  {
    double v28 = +[IMFileManager defaultHFSFileManager];
    double v29 = [*(id *)(a1 + 48) type];
    uint64_t v30 = [v28 pathExtensionForUTIType:v29];

    if ([v30 length])
    {
      __int16 v31 = v30;
    }
    else
    {
      uint64_t v32 = +[IMFileManager defaultHFSFileManager];
      float v33 = [*(id *)(a1 + 48) mimeType];
      uint64_t v34 = [v32 pathExtensionForMIMEType:v33];

      __int16 v31 = (void *)v34;
    }
    id v35 = v31;
    if ([v31 length])
    {
      id v36 = [v26 absoluteString];
      id v37 = [v36 stringByDeletingPathExtension];

      id v38 = [v37 stringByAppendingPathExtension:v35];
      BOOL v39 = objc_msgSend(v38, "__im_apfsCompatibleFilename");

      if ([v39 length])
      {
        uint64_t v40 = +[NSURL fileURLWithPath:v39];

        float v26 = (void *)v40;
      }
    }
    id v27 = v35;
  }
  int8x16_t v67 = v27;
  id v68 = v26;
  if (v26)
  {
    uint64_t v41 = +[NSFileManager defaultManager];
    float v26 = objc_msgSend(v41, "im_generateCopyForURL:", v26);
  }
  if (IMOSLoggingEnabled())
  {
    id v42 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v68;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v26;
      _os_log_impl(&dword_0, v42, OS_LOG_TYPE_INFO, "Source URL: %@  Link: %@", buf, 0x16u);
    }
  }
  dispatch_group_t v43 = dispatch_group_create();
  id v44 = objc_alloc_init((Class)NSMutableArray);
  id v45 = objc_alloc_init(MessageAttachmentSingleStatus);
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  uint64_t v115 = sub_4F950;
  id v116 = sub_4F960;
  id v117 = 0;
  v98[0] = 0;
  v98[1] = v98;
  v98[2] = 0x3032000000;
  v98[3] = sub_4F950;
  v98[4] = sub_4F960;
  id v99 = 0;
  v93[0] = _NSConcreteStackBlock;
  v93[1] = 3221225472;
  v93[2] = sub_54C2C;
  v93[3] = &unk_DEC18;
  id v46 = *(void **)(a1 + 48);
  v93[4] = *(void *)(a1 + 32);
  id v94 = v46;
  id v95 = *(id *)(a1 + 88);
  long long v96 = buf;
  long long v97 = v98;
  id v66 = objc_retainBlock(v93);
  v84[0] = _NSConcreteStackBlock;
  v84[1] = 3221225472;
  v84[2] = sub_550FC;
  v84[3] = &unk_DEC40;
  v84[4] = *(void *)(a1 + 32);
  id v85 = *(id *)(a1 + 96);
  id v86 = *(id *)(a1 + 104);
  id v47 = *(id *)(a1 + 112);
  uint64_t v48 = *(void *)(a1 + 120);
  id v87 = v47;
  uint64_t v88 = v48;
  id v49 = v44;
  id v89 = v49;
  id v90 = *(id *)(a1 + 80);
  double v50 = v45;
  __int16 v91 = v50;
  double v8 = v43;
  id v92 = v8;
  long long v51 = objc_retainBlock(v84);
  double v52 = v68;
  if (v26) {
    double v52 = v26;
  }
  id v53 = v52;
  int8x16_t v54 = [*(id *)(a1 + 48) sandboxToken];
  id v55 = v54;
  if (v54)
  {
    id v56 = v54;
    [v56 UTF8String];
    uint64_t v57 = sandbox_extension_consume();
    if (v57 != -1) {
      goto LABEL_64;
    }
    if (IMOSLoggingEnabled())
    {
      id v58 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long v110 = 138412546;
        id v111 = v53;
        __int16 v112 = 2112;
        id v113 = v56;
        _os_log_impl(&dword_0, v58, OS_LOG_TYPE_INFO, "Failed to consume sandbox token, %@ token: %@", v110, 0x16u);
      }
    }
  }
  uint64_t v57 = -1;
LABEL_64:
  [*(id *)(a1 + 32) _transcodeURL:v53 reason:2 transfer:*(void *)(a1 + 48) sizes:*(void *)(a1 + 40) commonCapabilities:*(void *)(a1 + 56) sendStatus:*(void *)(a1 + 80) urlGroup:v8 didTranscode:v66 handleURL:v51];
  if (v57 != -1 && sandbox_extension_release() == -1 && IMOSLoggingEnabled())
  {
    id v59 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long v110 = 138412546;
      id v111 = v53;
      __int16 v112 = 2112;
      id v113 = v55;
      _os_log_impl(&dword_0, v59, OS_LOG_TYPE_INFO, "Failed to release sandbox token, %@ token: %@", v110, 0x16u);
    }
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_551E0;
  block[3] = &unk_DEC90;
  double v82 = v98;
  id v70 = *(id *)(a1 + 80);
  id v71 = v26;
  id v60 = *(id *)(a1 + 128);
  uint64_t v61 = *(void *)(a1 + 120);
  id v72 = v60;
  uint64_t v73 = v61;
  uint64_t v62 = *(void *)(a1 + 32);
  id v74 = v49;
  uint64_t v75 = v62;
  id v76 = *(id *)(a1 + 64);
  id v77 = *(id *)(a1 + 56);
  __int16 v83 = buf;
  id v78 = *(id *)(a1 + 88);
  id v81 = *(id *)(a1 + 136);
  id v79 = v50;
  id v80 = *(id *)(a1 + 72);
  id v63 = v50;
  id v64 = v49;
  id v65 = v26;
  dispatch_group_notify(v8, (dispatch_queue_t)&_dispatch_main_q, block);

  _Block_object_dispose(v98, 8);
  _Block_object_dispose(buf, 8);

LABEL_71:
}

void sub_54734(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x53D24);
  }
  _Unwind_Resume(exc_buf);
}

void sub_54834(uint64_t a1)
{
  unsigned __int8 v2 = *(id *)(a1 + 32);
  id v3 = v2;
  os_signpost_id_t v4 = *(unsigned __int8 *)(a1 + 96);
  if (*(unsigned char *)(a1 + 96) && os_signpost_enabled(v2))
  {
    LOWORD(v26) = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v3, OS_SIGNPOST_INTERVAL_END, v4, "MessageAttachment.eager.wait", " enableTelemetry=YES ", (uint8_t *)&v26, 2u);
  }

  unsigned int v5 = [*(id *)(a1 + 40) isSuccess];
  id v6 = *(void **)(a1 + 40);
  if (!v5)
  {
    CFStringRef v10 = [v6 attachmentStatus];
    id v13 = *(id *)(a1 + 32);
    id v14 = v13;
    os_signpost_id_t v15 = *(unsigned __int8 *)(a1 + 96);
    if (*(unsigned char *)(a1 + 96) && os_signpost_enabled(v13))
    {
      LOWORD(v26) = 0;
      _os_signpost_emit_with_name_impl(&dword_0, v14, OS_SIGNPOST_EVENT, v15, "MessageAttachment.eager.useFail", " enableTelemetry=YES ", (uint8_t *)&v26, 2u);
    }

    if (IMOSLoggingEnabled())
    {
      uint64_t v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = *(void *)(a1 + 40);
        BOOL v18 = [v10 transferError];
        int v26 = 138412546;
        uint64_t v27 = v17;
        __int16 v28 = 2112;
        double v29 = v18;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "EAGER use -- waited, failed: %@, error %@", (uint8_t *)&v26, 0x16u);
      }
    }
    uint64_t v19 = *(void *)(a1 + 88);
    if (v19)
    {
      uint64_t v20 = [v10 transferError];
      double v21 = [v10 errorURLString];
      id v22 = [v10 errorFileSize];
      double v23 = [v10 additionalErrorInfo];
      (*(void (**)(uint64_t, void *, void *, id, void *))(v19 + 16))(v19, v20, v21, v22, v23);
    }
    [*(id *)(a1 + 72) setFailed:1];
    [*(id *)(a1 + 72) setError:34];
    if (IMOSLoggingEnabled())
    {
      unsigned __int8 v24 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        uint64_t v25 = *(void *)(a1 + 72);
        int v26 = 138412290;
        uint64_t v27 = v25;
        _os_log_impl(&dword_0, v24, OS_LOG_TYPE_INFO, "EAGER use -- Set overall status to fail %@", (uint8_t *)&v26, 0xCu);
      }
    }
    goto LABEL_25;
  }
  [v6 attachToTransfer:*(void *)(a1 + 48) message:*(void *)(a1 + 56) commonCapabilities:*(void *)(a1 + 64)];
  [*(id *)(a1 + 40) incrementUseCount];
  int v7 = *(id *)(a1 + 32);
  double v8 = v7;
  os_signpost_id_t v9 = *(unsigned __int8 *)(a1 + 96);
  if (*(unsigned char *)(a1 + 96) && os_signpost_enabled(v7))
  {
    LOWORD(v26) = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v8, OS_SIGNPOST_EVENT, v9, "MessageAttachment.eager.use", " enableTelemetry=YES ", (uint8_t *)&v26, 2u);
  }

  if (IMOSLoggingEnabled())
  {
    CFStringRef v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      unsigned __int8 v12 = [*(id *)(a1 + 48) userInfo];
      int v26 = 138412546;
      uint64_t v27 = v11;
      __int16 v28 = 2112;
      double v29 = v12;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "EAGER use -- waited, use upload: %@, transfer %@", (uint8_t *)&v26, 0x16u);
    }
LABEL_25:
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
}

void sub_54BE4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x54AB0);
  }
  _Unwind_Resume(a1);
}

void sub_54C2C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if ([v7 isSticker]
    && [v8 count]
    && [*(id *)(a1 + 32) _previewAttachmentEnabledForStickers])
  {
    CFStringRef v10 = [v9 valueForKey:IMTranscoderAdditionalContextScaleFactorKey];
    if (IMOSLoggingEnabled())
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        id v44 = v10;
        __int16 v45 = 2112;
        id v46 = v9;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "scaleFactorArray after transcoding %@ additionalContext %@", buf, 0x16u);
      }
    }
    if ([v10 count])
    {
      unsigned __int8 v12 = [v7 stickerUserInfo];
      uint64_t v13 = IMStickerUserInfoScaleKey;
      id v14 = [v12 valueForKey:IMStickerUserInfoScaleKey];
      BOOL v15 = v14 == 0;

      if (v15)
      {
        float v19 = 1.0;
      }
      else
      {
        uint64_t v16 = [v7 stickerUserInfo];
        uint64_t v17 = [v16 valueForKey:v13];
        [v17 floatValue];
        float v19 = v18;
      }
      uint64_t v20 = [v10 objectAtIndex:0];
      [v20 floatValue];
      float v22 = v21;

      double v23 = [v7 stickerUserInfo];
      id v24 = [v23 mutableCopy];

      uint64_t v25 = +[NSString stringWithFormat:@"%.2f", (float)(v19 * v22)];
      [v24 setObject:v25 forKey:IMStickerUserInfoTranscodedScaleKey];

      int v26 = [v24 valueForKey:v13];
      LODWORD(v25) = v26 == 0;

      if (v25) {
        [v24 setObject:@"1.00" forKey:v13];
      }
      [v7 setStickerUserInfo:v24];
      if (IMOSLoggingEnabled())
      {
        uint64_t v27 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          __int16 v28 = [*(id *)(a1 + 40) stickerUserInfo];
          *(_DWORD *)buf = 138412290;
          id v44 = v28;
          _os_log_impl(&dword_0, v27, OS_LOG_TYPE_INFO, "Update sticker user info dictionary %@", buf, 0xCu);
        }
      }
    }
    double v29 = [v8 firstObject];
    uint64_t v30 = [v29 path];
    __int16 v31 = IMSharedHelperMD5HashOfFileAtPath();

    if ([v31 isEqualToString:*(void *)(a1 + 48)])
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v32 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          float v33 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138412546;
          id v44 = v31;
          __int16 v45 = 2112;
          id v46 = v33;
          _os_log_impl(&dword_0, v32, OS_LOG_TYPE_INFO, "We tried to transcode sticker but output file is the same outPutHash hash %@ original hash %@", buf, 0x16u);
        }
      }
      id v34 = 0;
    }
    else
    {
      id v34 = v31;
      if (IMOSLoggingEnabled())
      {
        id v35 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          id v36 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138412546;
          id v44 = v34;
          __int16 v45 = 2112;
          id v46 = v36;
          _os_log_impl(&dword_0, v35, OS_LOG_TYPE_INFO, "Computed new transcoded hash %@ original hash %@ ", buf, 0x16u);
        }
      }
    }
    id v37 = [v34 copy];
    uint64_t v38 = *(void *)(*(void *)(a1 + 56) + 8);
    BOOL v39 = *(void **)(v38 + 40);
    *(void *)(v38 + 40) = v37;

    id v40 = [v8 copy];
    uint64_t v41 = *(void *)(*(void *)(a1 + 64) + 8);
    id v42 = *(void **)(v41 + 40);
    *(void *)(v41 + 40) = v40;
  }
}

void sub_550FC(void *a1, void *a2, void *a3, char a4)
{
  id v7 = (void *)a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[7];
  id v11 = a3;
  id v12 = a2;
  id v15 = [v7 msgSession];
  uint64_t v13 = [v15 sessionSpecificTransferIDForTransferID:a1[8]];
  LOBYTE(v14) = a4;
  [v7 _sendURL:v12 urlToRemove:v11 topic:v8 sessionInfo:v9 messageGUID:v10 transferID:v13 fileTransferGUID:a1[8] attachmentSendContexts:a1[9] failIfError:v14 sendStatus:a1[10] attachmentStatus:a1[11] group:a1[12]];
}

void sub_551E0(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    unsigned __int8 v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      id v3 = *(__CFString **)(*(void *)(*(void *)(a1 + 128) + 8) + 40);
      unsigned int v4 = [*(id *)(a1 + 32) failed];
      CFStringRef v5 = @"YES";
      if (v4) {
        CFStringRef v5 = @"NO";
      }
      *(_DWORD *)buf = 138412546;
      id v36 = v3;
      __int16 v37 = 2112;
      CFStringRef v38 = v5;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, "  All done url set for: %@   success: %@", buf, 0x16u);
    }
  }
  if (*(void *)(a1 + 40))
  {
    id v6 = +[NSFileManager defaultManager];
    uint64_t v7 = *(void *)(a1 + 40);
    id v34 = 0;
    unsigned __int8 v8 = [v6 removeItemAtURL:v7 error:&v34];
    uint64_t v9 = (__CFString *)v34;

    if ((v8 & 1) == 0 && IMOSLoggingEnabled())
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = *(__CFString **)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        id v36 = v11;
        __int16 v37 = 2112;
        CFStringRef v38 = v9;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "Error cleaning up linked path: %@  error: %@", buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  id v12 = [*(id *)(a1 + 48) transferForGUID:*(void *)(a1 + 56)];
  if (([*(id *)(a1 + 32) failed] & 1) == 0)
  {
    id v15 = [(__CFString *)v12 attachmentSendContexts];
    if (v15 && ([(__CFString *)v12 wantsAlphaRemoved] & 1) == 0) {
      [*(id *)(a1 + 64) addObjectsFromArray:v15];
    }
    float v19 = [(id)objc_opt_class() _combinedTransferUserInfoForAttachmentSendContexts:*(void *)(a1 + 64) transfer:v12 message:*(void *)(a1 + 80) commonCapabilities:*(void *)(a1 + 88)];
    if (IMOSLoggingEnabled())
    {
      uint64_t v20 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        id v36 = v19;
        __int16 v37 = 2112;
        CFStringRef v38 = v12;
        _os_log_impl(&dword_0, v20, OS_LOG_TYPE_INFO, "  setting userinfo: %@  on transfer: %@", buf, 0x16u);
      }
    }
    [(__CFString *)v12 setUserInfo:v19];
    [(__CFString *)v12 setAttachmentSendContexts:*(void *)(a1 + 64)];
    float v21 = *(void **)(a1 + 64);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_556A4;
    v25[3] = &unk_DEC68;
    int v26 = v12;
    uint64_t v27 = v19;
    uint64_t v22 = *(void *)(a1 + 136);
    uint64_t v28 = *(void *)(a1 + 72);
    uint64_t v33 = v22;
    id v29 = *(id *)(a1 + 96);
    id v30 = *(id *)(a1 + 80);
    id v23 = *(id *)(a1 + 48);
    uint64_t v24 = *(void *)(a1 + 56);
    id v31 = v23;
    uint64_t v32 = v24;
    uint64_t v16 = v19;
    [v21 enumerateObjectsUsingBlock:v25];

    float v18 = v26;
    goto LABEL_29;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v36 = v12;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "  NOT setting userInfo: transfer %@ did not complete successfully.", buf, 0xCu);
    }
  }
  uint64_t v14 = *(void *)(a1 + 120);
  if (v14)
  {
    id v15 = [*(id *)(a1 + 104) transferError];
    uint64_t v16 = [*(id *)(a1 + 104) errorURLString];
    id v17 = [*(id *)(a1 + 104) errorFileSize];
    float v18 = [*(id *)(a1 + 104) additionalErrorInfo];
    (*(void (**)(uint64_t, void *, __CFString *, id, void *))(v14 + 16))(v14, v15, v16, v17, v18);
LABEL_29:
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 112));
}

void sub_556A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) shouldFastSend])
  {
    id v4 = objc_alloc((Class)NSMutableDictionary);
    +[NSDate timeIntervalSinceReferenceDate];
    CFStringRef v5 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = +[NSNumber numberWithInteger:1];
    unsigned __int8 v8 = (__CFDictionary *)objc_msgSend(v4, "initWithObjectsAndKeys:", v5, @"sticker-TimeInterval", v6, @"download-credentials", v7, @"v", 0);

    if ([*(id *)(a1 + 48) _previewAttachmentEnabledForStickers]
      && [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) length])
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v9 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          uint64_t v10 = [*(id *)(a1 + 32) stickerUserInfo];
          *(_DWORD *)buf = 138412290;
          id v31 = v10;
          _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "Updating sticker user info original info %@", buf, 0xCu);
        }
      }
      id v11 = [*(id *)(a1 + 32) stickerUserInfo];
      id v12 = (__CFDictionary *)[v11 mutableCopy];

      if (v12)
      {
        uint64_t v13 = *(const void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
        if (v13) {
          CFDictionarySetValue(v12, IMStickerUserInfoStickerTranscodedStickerHashKey, v13);
        }
        [*(id *)(a1 + 32) setStickerUserInfo:v12];
        if (IMOSLoggingEnabled())
        {
          uint64_t v14 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            id v15 = [*(id *)(a1 + 32) stickerUserInfo];
            *(_DWORD *)buf = 138412290;
            id v31 = v15;
            _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "Resulting sticker info %@", buf, 0xCu);
          }
        }
      }
      if (IMOSLoggingEnabled())
      {
        uint64_t v16 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "Adding transcodeded hash to transfer info plist", buf, 2u);
        }
      }
      id v17 = *(const void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
      if (v17) {
        CFDictionarySetValue(v8, IMStickerUserInfoStickerTranscodedStickerHashKey, v17);
      }
      float v18 = [*(id *)(a1 + 32) stickerUserInfo];
      float v19 = (const void *)IMStickerUserInfoTranscodedScaleKey;
      uint64_t v20 = [v18 valueForKey:IMStickerUserInfoTranscodedScaleKey];

      if (v20)
      {
        if (IMOSLoggingEnabled())
        {
          float v21 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_0, v21, OS_LOG_TYPE_INFO, "Adding transcodeded scale factor to transfer info plist", buf, 2u);
          }
        }
        uint64_t v22 = [*(id *)(a1 + 32) stickerUserInfo];
        id v23 = [v22 valueForKey:v19];

        if (v23) {
          CFDictionarySetValue(v8, v19, v23);
        }
      }
    }
    [*(id *)(a1 + 48) _setTransferInfo:v8 key:*(void *)(a1 + 56)];
  }
  uint64_t v24 = *(void **)(a1 + 32);
  uint64_t v25 = [*(id *)(a1 + 64) guid];
  [v24 setMessageGUID:v25];

  int v26 = [v3 objectForKeyedSubscript:@"file-size"];
  id v27 = [v26 unsignedLongLongValue];

  id v29 = *(void **)(a1 + 72);
  uint64_t v28 = a1 + 72;
  [v29 updateTransfer:*(void *)(v28 + 8) currentBytes:v27 totalBytes:v27];
  [*(id *)v28 endTransfer:*(void *)(v28 + 8)];
}

void sub_55AC0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x558CCLL);
  }
  _Unwind_Resume(a1);
}

void sub_55B1C(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    unsigned __int8 v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      unsigned int v4 = [*(id *)(a1 + 40) failed];
      CFStringRef v5 = @"YES";
      if (v4) {
        CFStringRef v5 = @"NO";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v17 = v3;
      __int16 v18 = 2112;
      CFStringRef v19 = v5;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, "  All done transfer set for: %@   success: %@", buf, 0x16u);
    }
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6) {
    (*(void (**)(uint64_t, void, void, void, void, id))(v6 + 16))(v6, *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), [*(id *)(a1 + 40) failed] ^ 1, objc_msgSend(*(id *)(a1 + 40), "error"));
  }
  uint64_t v7 = [*(id *)(a1 + 48) guid];
  unsigned __int8 v8 = objc_msgSend(*(id *)(a1 + 48), "guid", kAttachmentsAutomationMessageGUIDKey);
  v15[0] = v8;
  v14[1] = kAttachmentsAutomationSuccessKey;
  uint64_t v9 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 40) failed] ^ 1);
  v15[1] = v9;
  _DWORD v14[2] = kAttachmentsAutomationErrorKey;
  uint64_t v10 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [*(id *)(a1 + 40) error]);
  void v15[2] = v10;
  id v11 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:3];
  AttachmentsAutomationLogMilestoneWithOptionFlags();

  uint64_t v12 = *(void *)(*(void *)(a1 + 80) + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = 0;
}

uint64_t sub_55EC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    unsigned int v4 = v3;
    CFStringRef v5 = [v3 stringByReplacingOccurrencesOfString:@"\"" withString:&stru_E0738];

    uint64_t v6 = [*(id *)(a1 + 32) body];
    id v7 = [v6 length];

    unsigned __int8 v8 = [*(id *)(a1 + 32) body];
    id v9 = [v8 mutableCopy];

    objc_msgSend(v9, "addAttribute:value:range:", IMAudioTranscription, v5, 0, v7);
    [*(id *)(a1 + 40) setAudioTranscriptionText:v5];
    [*(id *)(a1 + 32) setBody:v9];
    uint64_t v10 = +[IMDMessageStore sharedInstance];
    id v11 = objc_msgSend(v10, "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:", *(void *)(a1 + 32), 1, 0, 0, objc_msgSend(*(id *)(a1 + 32), "flags"));
  }
  uint64_t v12 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v12();
}

void sub_56254(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, int a7, void *a8)
{
  id v55 = a2;
  uint64_t v61 = a3;
  id v56 = a4;
  uint64_t v57 = a5;
  id v59 = a8;
  id v58 = +[IMDFileTransferCenter sharedInstance];
  if (IMOSLoggingEnabled())
  {
    uint64_t v14 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      CFStringRef v15 = @"NO";
      uint64_t v16 = *(NSObject **)(a1 + 32);
      if (a7) {
        CFStringRef v15 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      id v70 = v16;
      __int16 v71 = 2112;
      CFStringRef v72 = v15;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "Transcode processing complete for transfer: %@  (Attempted Transcode: %@)", buf, 0x16u);
    }
  }
  if (a6)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v70 = v61;
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "Transcoding succeeded with output URLs: %@", buf, 0xCu);
      }
    }
    __int16 v18 = [*(id *)(a1 + 32) localPath];
    CFStringRef v19 = [v18 lastPathComponent];

    uint64_t v20 = [v61 __imFirstObject];
    float v21 = [v20 path];
    uint64_t v22 = [v21 lastPathComponent];
    id v23 = objc_msgSend(v22, "__im_apfsCompatibleFilename");

    int8x16_t v54 = [v19 pathExtension];
    uint64_t v24 = [v23 pathExtension];
    uint64_t v25 = (void *)v24;
    if (v54 && v24 && ([(__CFString *)v54 isEqualToString:v24] & 1) == 0)
    {
      if ([*(id *)(a1 + 32) isAuxVideo]
        && ([(__CFString *)v54 isEqualToIgnoringCase:v25] & 1) != 0
        || [*(id *)(a1 + 32) isAuxImage]
        && [(__CFString *)v54 isEqualToIgnoringCase:v25])
      {
        if (!IMOSLoggingEnabled()) {
          goto LABEL_28;
        }
        int v26 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          id v27 = *(NSObject **)(a1 + 32);
          *(_DWORD *)buf = 138412802;
          id v70 = v27;
          __int16 v71 = 2112;
          CFStringRef v72 = v54;
          __int16 v73 = 2112;
          id v74 = v25;
          _os_log_impl(&dword_0, v26, OS_LOG_TYPE_INFO, "Not setting transferred filename for Aux  transfer %@, localExtension %@ , newExtension %@ ", buf, 0x20u);
        }
      }
      else
      {
        uint64_t v28 = [v19 stringByDeletingPathExtension];
        id v29 = [v28 stringByAppendingPathExtension:v25];
        int v26 = objc_msgSend(v29, "__im_apfsCompatibleFilename");

        [*(id *)(a1 + 32) setTransferredFilename:v26];
        if (IMOSLoggingEnabled())
        {
          id v30 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            id v70 = v26;
            _os_log_impl(&dword_0, v30, OS_LOG_TYPE_INFO, "          Setting transferred filename: %@", buf, 0xCu);
          }
        }
      }
    }
LABEL_28:
    id v31 = [v61 firstObject];
    if ((unint64_t)[v61 count] < 2)
    {
      uint64_t v32 = 0;
    }
    else
    {
      uint64_t v32 = [v61 objectAtIndex:1];
    }
    uint64_t v33 = +[IMMetricsCollector sharedInstance];
    uint64_t v34 = *(void *)(a1 + 88);
    uint64_t v35 = *(void *)(a1 + 40);
    uint64_t v36 = *(void *)(a1 + 48);
    id v37 = [*(id *)(a1 + 32) isSticker];
    BYTE1(v53) = *(unsigned char *)(a1 + 96);
    LOBYTE(v53) = a7;
    objc_msgSend(v33, "trackiMessageTranscodeWithReason:sourceFile:highQualityFile:lowQualityFile:sizeLimits:isSticker:transcoded:lowQualityModeEnabled:", v34, v35, v31, v32, v36, v37, v53);

    if (IMOSLoggingEnabled())
    {
      CFStringRef v38 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v70 = v61;
        _os_log_impl(&dword_0, v38, OS_LOG_TYPE_INFO, "All URLs: %@", buf, 0xCu);
      }
    }
    uint64_t v39 = *(void *)(a1 + 80);
    if (v39) {
      (*(void (**)(uint64_t, void, NSObject *, id))(v39 + 16))(v39, *(void *)(a1 + 32), v61, v59);
    }
    id v40 = (char *)[v61 count] - 1;
    if ((uint64_t)v40 >= 0)
    {
      while (1)
      {
        uint64_t v41 = (char *)[v61 count];
        id v42 = [v61 objectAtIndex:v40];
        if ([*(id *)(a1 + 64) failed]) {
          break;
        }
        dispatch_group_t v43 = v40 + 1;
        BOOL v44 = v40 + 1 == v41;
        dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
        __int16 v45 = +[IMTransferServicesCompressionController sharedInstance];
        v62[0] = _NSConcreteStackBlock;
        v62[1] = 3221225472;
        v62[2] = sub_56AF4;
        v62[3] = &unk_DED58;
        id v63 = *(id *)(a1 + 32);
        id v66 = *(id *)(a1 + 72);
        char v67 = a7;
        id v64 = *(id *)(a1 + 40);
        BOOL v68 = v44;
        id v65 = *(id *)(a1 + 56);
        [v45 compressFileTransfer:v42 completionBlock:v62];

        id v40 = v43 - 2;
        if ((uint64_t)(v43 - 1) <= 0) {
          goto LABEL_57;
        }
      }
    }
    goto LABEL_57;
  }
  if ([*(id *)(a1 + 32) isAuxVideo])
  {
    uint64_t v46 = *(void *)(a1 + 72);
    if (v46)
    {
      if (a7) {
        uint64_t v47 = *(void *)(a1 + 40);
      }
      else {
        uint64_t v47 = 0;
      }
      (*(void (**)(uint64_t, void, uint64_t, void))(v46 + 16))(v46, 0, v47, 0);
    }
LABEL_57:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
    goto LABEL_58;
  }
  [*(id *)(a1 + 64) setFailed:1];
  [*(id *)(a1 + 64) setError:25];
  if (IMOSLoggingEnabled())
  {
    uint64_t v48 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v70 = v57;
      _os_log_impl(&dword_0, v48, OS_LOG_TYPE_INFO, "Transcoding failed with error: %@", buf, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v49 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      double v50 = *(NSObject **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      id v70 = v50;
      _os_log_impl(&dword_0, v49, OS_LOG_TYPE_INFO, "Failed transcoding transfer: %@", buf, 0xCu);
    }
  }
  long long v51 = [*(id *)(a1 + 32) guid];
  [v58 failTransfer:v51 reason:15];

  double v52 = +[IMMetricsCollector sharedInstance];
  objc_msgSend(v52, "trackiMessageTranscodeFailureWithReason:sourceFile:sizeLimits:isSticker:lowQualityModeEnabled:", *(void *)(a1 + 88), *(void *)(a1 + 40), *(void *)(a1 + 48), objc_msgSend(*(id *)(a1 + 32), "isSticker"), *(unsigned __int8 *)(a1 + 96));

LABEL_58:
}

void sub_56AF4(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6)
{
  id v11 = a2;
  uint64_t v12 = a3;
  id v13 = a4;
  if (IMOSLoggingEnabled())
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      CFStringRef v15 = @"NO";
      if (a6) {
        CFStringRef v15 = @"YES";
      }
      int v33 = 138412290;
      CFStringRef v34 = v15;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "Compressed attachment: %@", (uint8_t *)&v33, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      int v33 = 138412290;
      CFStringRef v34 = v11;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "           Input Path: %@", (uint8_t *)&v33, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v17 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      int v33 = 138412290;
      CFStringRef v34 = v12;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "          Output Path: %@", (uint8_t *)&v33, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    __int16 v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      CFStringRef v19 = @"NO";
      if (a5) {
        CFStringRef v19 = @"YES";
      }
      int v33 = 138412290;
      CFStringRef v34 = v19;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "              Success: %@", (uint8_t *)&v33, 0xCu);
    }
  }
  if (a6)
  {
    uint64_t v20 = [*(id *)(a1 + 32) localPath];
    float v21 = [v20 lastPathComponent];

    uint64_t v22 = [(__CFString *)v12 path];
    id v23 = [v22 lastPathComponent];

    uint64_t v24 = [v21 pathExtension];
    uint64_t v25 = [v23 pathExtension];
    int v26 = (void *)v25;
    if (v24)
    {
      if (v25)
      {
        if (([v24 isEqualToString:v25] & 1) == 0)
        {
          id v27 = *(void **)(a1 + 32);
          uint64_t v28 = [v21 stringByAppendingPathExtension:v26];
          [v27 setTransferredFilename:v28];

          if (IMOSLoggingEnabled())
          {
            id v29 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
            {
              id v30 = [*(id *)(a1 + 32) transferredFilename];
              int v33 = 138412290;
              CFStringRef v34 = v30;
              _os_log_impl(&dword_0, v29, OS_LOG_TYPE_INFO, "          Setting transferred filename: %@", (uint8_t *)&v33, 0xCu);
            }
          }
        }
      }
    }
  }
  uint64_t v31 = *(void *)(a1 + 56);
  if (v31)
  {
    if (*(unsigned char *)(a1 + 64)) {
      uint64_t v32 = *(void *)(a1 + 40);
    }
    else {
      uint64_t v32 = 0;
    }
    (*(void (**)(uint64_t, __CFString *, uint64_t, void))(v31 + 16))(v31, v12, v32, *(unsigned __int8 *)(a1 + 65));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_572EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (IMOSLoggingEnabled())
  {
    unsigned __int8 v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v10 = 134218496;
      uint64_t v11 = a2;
      __int16 v12 = 2048;
      uint64_t v13 = a3;
      __int16 v14 = 2048;
      uint64_t v15 = a4;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Send progress updated to %lld of %lld (%lld bps)", (uint8_t *)&v10, 0x20u);
    }
  }
  id v9 = +[IMDFileTransferCenter sharedInstance];
  [v9 updateTransfer:*(void *)(a1 + 32) currentBytes:a2 totalBytes:a3];
}

void sub_57410(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10)
{
  id v62 = a2;
  *(double *)&id v69 = COERCE_DOUBLE(a4);
  BOOL v68 = a5;
  id value = a6;
  id v65 = a7;
  id v67 = a8;
  id v64 = a9;
  v78[0] = kAttachmentsAutomationURLKey;
  uint64_t v17 = [*(id *)(a1 + 40) path];
  __int16 v18 = (void *)v17;
  if (v17) {
    CFStringRef v19 = (const __CFString *)v17;
  }
  else {
    CFStringRef v19 = &stru_E0738;
  }
  v79[0] = v19;
  v78[1] = kAttachmentsAutomationSuccessKey;
  uint64_t v20 = +[NSNumber numberWithBool:a3];
  v79[1] = v20;
  CFStringRef v21 = v68;
  if (!v68) {
    CFStringRef v21 = &stru_E0738;
  }
  v79[2] = v21;
  v78[2] = kAttachmentsAutomationAdditionalErrorInfoKey;
  v78[3] = kAttachmentsAutomationFileSizeKey;
  uint64_t v22 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:");
  v79[3] = v22;
  CFStringRef v23 = v69;
  if (*(double *)&v69 == 0.0) {
    CFStringRef v23 = &stru_E0738;
  }
  v78[4] = kAttachmentsAutomationErrorKey;
  v78[5] = kAttachmentsAutomationTransferGUIDKey;
  CFStringRef v24 = *(const __CFString **)(a1 + 48);
  if (!v24) {
    CFStringRef v24 = &stru_E0738;
  }
  v79[4] = v23;
  v79[5] = v24;
  uint64_t v25 = +[NSDictionary dictionaryWithObjects:v79 forKeys:v78 count:6];
  AttachmentsAutomationLogMilestone();

  double v63 = [*(id *)(a1 + 56) transferForGUID:*(void *)(a1 + 48)];
  int v26 = IMOSLoggingEnabled();
  if (a3)
  {
    if (v26)
    {
      id v27 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        double v73 = v63;
        __int16 v74 = 2112;
        CFStringRef v75 = @"YES";
        __int16 v76 = 2112;
        id v77 = v69;
        _os_log_impl(&dword_0, v27, OS_LOG_TYPE_INFO, "Finished uploading transfer: %@   success: %@  error: %@", buf, 0x20u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v28 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        +[NSDate timeIntervalSinceReferenceDate];
        double v30 = v29 - *(double *)(a1 + 104);
        *(_DWORD *)buf = 134217984;
        double v73 = v30;
        _os_log_impl(&dword_0, v28, OS_LOG_TYPE_INFO, "Time taken: %f", buf, 0xCu);
      }
    }
    uint64_t v31 = (__CFDictionary *)[objc_alloc((Class)NSMutableDictionary) initWithCapacity:5];
    uint64_t v32 = objc_msgSend(v65, "__imHexString");
    if (v32) {
      CFDictionarySetValue(v31, @"mmcs-signature-hex", v32);
    }

    if (value) {
      CFDictionarySetValue(v31, @"mmcs-owner", value);
    }
    if (v67) {
      CFDictionarySetValue(v31, @"mmcs-url", v67);
    }
    int v33 = objc_msgSend(v64, "__imHexString");
    if (v33) {
      CFDictionarySetValue(v31, @"decryption-key", v33);
    }

    CFStringRef v34 = +[NSNumber numberWithInteger:a10];
    if (v34) {
      CFDictionarySetValue(v31, @"file-size", v34);
    }

    [*(id *)(a1 + 80) addObject:v31];
  }
  else
  {
    if (v26)
    {
      uint64_t v35 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        double v73 = v63;
        __int16 v74 = 2112;
        CFStringRef v75 = @"NO";
        __int16 v76 = 2112;
        id v77 = v69;
        _os_log_impl(&dword_0, v35, OS_LOG_TYPE_INFO, "Failed uploading transfer: %@   success: %@  error: %@", buf, 0x20u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v36 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        double v37 = [*(id *)&v63 transferDataURL];
        *(_DWORD *)buf = 138412290;
        double v73 = v37;
        _os_log_impl(&dword_0, v36, OS_LOG_TYPE_INFO, "transfer data url: %@", buf, 0xCu);
      }
    }
    if (IMOSLoggingEnabled())
    {
      CFStringRef v38 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        +[NSDate timeIntervalSinceReferenceDate];
        double v40 = v39 - *(double *)(a1 + 104);
        *(_DWORD *)buf = 134217984;
        double v73 = v40;
        _os_log_impl(&dword_0, v38, OS_LOG_TYPE_INFO, "Time taken: %f", buf, 0xCu);
      }
    }
    if (*(unsigned char *)(a1 + 112))
    {
      id v41 = [(__CFString *)v69 code];
      if (v41 == (id)-6)
      {
        [*(id *)(a1 + 56) failTransfer:*(void *)(a1 + 48) reason:23];
      }
      else if (v41 == (id)-5)
      {
        [*(id *)(a1 + 56) failTransfer:*(void *)(a1 + 48) reason:22];
      }
      else
      {
        [*(id *)(a1 + 56) failTransfer:*(void *)(a1 + 48) error:v69];
      }
      if (IMOSLoggingEnabled())
      {
        dispatch_group_t v43 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          double v73 = *(double *)&v69;
          _os_log_impl(&dword_0, v43, OS_LOG_TYPE_INFO, "  setting complete success to NO because the smallest attachment failed. (Error: %@)", buf, 0xCu);
        }
      }
      [*(id *)(a1 + 64) setFailed:1];
      [*(id *)(a1 + 64) setError:_FZErrorTypeFromNSError()];
      [*(id *)(a1 + 72) setTransferError:v69];
      [*(id *)(a1 + 72) setAdditionalErrorInfo:v68];
      [*(id *)(a1 + 72) setErrorURLString:v67];
      [*(id *)(a1 + 72) setErrorFileSize:a10];
    }
    else if (IMOSLoggingEnabled())
    {
      id v42 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        double v73 = *(double *)&v69;
        _os_log_impl(&dword_0, v42, OS_LOG_TYPE_INFO, "  attachment failed to upload, but the smaller version hasn't failed yet. (Error: %@)", buf, 0xCu);
      }
    }
  }
  if (*(void *)(a1 + 88))
  {
    BOOL v44 = +[NSFileManager defaultManager];
    uint64_t v45 = *(void *)(a1 + 88);
    id v71 = 0;
    unsigned __int8 v46 = [v44 removeItemAtURL:v45 error:&v71];
    uint64_t v47 = (__CFString *)v71;

    if ((v46 & 1) == 0 && IMOSLoggingEnabled())
    {
      uint64_t v48 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
      {
        double v49 = *(double *)(a1 + 88);
        *(_DWORD *)buf = 138412546;
        double v73 = v49;
        __int16 v74 = 2112;
        CFStringRef v75 = v47;
        _os_log_impl(&dword_0, v48, OS_LOG_TYPE_INFO, "Error cleaning up transcoded path: %@  error: %@", buf, 0x16u);
      }
    }
    uint64_t v50 = *(void *)(a1 + 88);
  }
  else
  {
    uint64_t v50 = 0;
  }
  if (([*(id *)(a1 + 40) isEqual:v50] & 1) != 0
    || ([*(id *)(a1 + 40) path], (long long v51 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    id v58 = 0;
  }
  else
  {
    double v52 = [*(id *)(a1 + 40) path];
    uint64_t v53 = IMSafeTemporaryDirectory();
    int8x16_t v54 = [v53 path];
    if ([v52 hasPrefix:v54])
    {
      id v55 = +[NSFileManager defaultManager];
      id v56 = [*(id *)(a1 + 40) path];
      id v70 = 0;
      unsigned int v57 = [v55 removeItemAtPath:v56 error:&v70];
      id v58 = (__CFString *)v70;

      int v59 = v57 ^ 1;
    }
    else
    {
      id v58 = 0;
      int v59 = 0;
    }

    if (v59 && IMOSLoggingEnabled())
    {
      id v60 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
      {
        double v61 = [*(id *)(a1 + 40) path];
        *(_DWORD *)buf = 138412546;
        double v73 = v61;
        __int16 v74 = 2112;
        CFStringRef v75 = v58;
        _os_log_impl(&dword_0, v60, OS_LOG_TYPE_INFO, "Error cleaning up output path: %@  error: %@", buf, 0x16u);
      }
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 96));
}

void sub_581E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v38 = 0;
  double v39 = &v38;
  uint64_t v40 = 0x3032000000;
  id v41 = sub_4F950;
  id v42 = sub_4F960;
  id v43 = 0;
  uint64_t v32 = 0;
  int v33 = &v32;
  uint64_t v34 = 0x3032000000;
  uint64_t v35 = sub_4F950;
  uint64_t v36 = sub_4F960;
  id v37 = 0;
  uint64_t v26 = 0;
  id v27 = &v26;
  uint64_t v28 = 0x3032000000;
  double v29 = sub_4F950;
  double v30 = sub_4F960;
  id v31 = 0;
  uint64_t v20 = 0;
  CFStringRef v21 = &v20;
  uint64_t v22 = 0x3032000000;
  CFStringRef v23 = sub_4F950;
  CFStringRef v24 = sub_4F960;
  id v25 = 0;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_58680;
  v19[3] = &unk_DEE20;
  void v19[4] = &v20;
  v19[5] = &v38;
  v19[6] = &v32;
  v19[7] = &v26;
  [v3 enumerateKeysAndObjectsUsingBlock:v19];
  if ([(id)v33[5] length]
    && [(id)v27[5] length]
    && [(id)v39[5] length]
    && [(id)v21[5] length])
  {
    uint64_t v4 = v39[5];
    v52[0] = @"t";
    v52[1] = @"sT";
    uint64_t v5 = v33[5];
    v53[0] = v4;
    v53[1] = v5;
    v53[2] = v27[5];
    v52[2] = @"sI";
    v52[3] = @"sP";
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = IMChatCanonicalIDSIDsForAddress();
    v52[4] = @"tP";
    uint64_t v8 = v21[5];
    v53[3] = v7;
    v53[4] = v8;
    id v9 = +[NSDictionary dictionaryWithObjects:v53 forKeys:v52 count:5];
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v9);

    if (IMOSLoggingEnabled())
    {
      int v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = v39[5];
        uint64_t v12 = v33[5];
        uint64_t v13 = v27[5];
        *(_DWORD *)buf = 138412802;
        uint64_t v45 = v11;
        __int16 v46 = 2112;
        uint64_t v47 = v12;
        __int16 v48 = 2112;
        uint64_t v49 = v13;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "-sessionInfoForBusinessReceipients:completion: found session info for business pushToken %@, sessionToken %@ and anonymizedSenderID %@", buf, 0x20u);
      }
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      __int16 v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = v21[5];
        uint64_t v16 = v39[5];
        uint64_t v17 = v33[5];
        uint64_t v18 = v27[5];
        *(_DWORD *)buf = 138413058;
        uint64_t v45 = v15;
        __int16 v46 = 2112;
        uint64_t v47 = v16;
        __int16 v48 = 2112;
        uint64_t v49 = v17;
        __int16 v50 = 2112;
        uint64_t v51 = v18;
        _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "-sessionInfoForBusinessReceipients:completion: did not find session info for destinationID %@. pushToken %@ sessionToken %@ and anonymizedSenderID %@", buf, 0x2Au);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  _Block_object_dispose(&v20, 8);

  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v32, 8);

  _Block_object_dispose(&v38, 8);
}

id sub_58680(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_58700;
  v6[3] = &unk_DEDF8;
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = v4;
  uint64_t v9 = a4;
  return [a3 enumerateObjectsUsingBlock:v6];
}

void sub_58700(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  long long v7 = [v6 URI];
  uint64_t v8 = [v7 prefixedURI];
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  int v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (IMStringIsBusinessID())
  {
    uint64_t v11 = [v6 pushToken];
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    uint64_t v14 = [v6 sessionToken];
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    uint64_t v17 = [v6 anonymizedSenderID];
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    CFStringRef v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;

    **(unsigned char **)(a1 + 64) = 1;
    *a4 = 1;
    if (IMOSLoggingEnabled())
    {
      uint64_t v20 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        int v22 = 138412546;
        id v23 = v6;
        __int16 v24 = 2112;
        uint64_t v25 = v21;
        _os_log_impl(&dword_0, v20, OS_LOG_TYPE_INFO, "-sessionInfoForBusinessReceipients:completion: returned YES and found session info for business endpoint %@ and anonymizedSenderID %@", (uint8_t *)&v22, 0x16u);
      }
    }
  }
}

void sub_58F58(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, int a7, void *a8)
{
  id v15 = a2;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a8;
  if (IMOSLoggingEnabled())
  {
    uint64_t v20 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      CFStringRef v21 = @"NO";
      int v28 = 138413314;
      id v29 = v15;
      if (a6) {
        CFStringRef v22 = @"YES";
      }
      else {
        CFStringRef v22 = @"NO";
      }
      if (a7) {
        CFStringRef v21 = @"YES";
      }
      __int16 v30 = 2112;
      id v31 = v16;
      __int16 v32 = 2112;
      id v33 = v18;
      __int16 v34 = 2112;
      CFStringRef v35 = v22;
      __int16 v36 = 2112;
      CFStringRef v37 = v21;
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_INFO, "transcoded URL {transferURL: %@, outputURLs: %@, error: %@, success: %@, attemptedTranscode: %@}", (uint8_t *)&v28, 0x34u);
    }
  }
  if (a6)
  {
    if (a7)
    {
      id v23 = [v16 lastObject];
      BOOL v24 = v23 == 0;

      if (!v24)
      {
        uint64_t v25 = *(void **)(a1 + 32);
        uint64_t v26 = [v16 lastObject];
        id v27 = [*(id *)(a1 + 40) guid];
        [v25 setObject:v26 forKey:v27];
      }
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_59148(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  long long v4 = v3;
  if (v2)
  {
    if (v3) {
      goto LABEL_3;
    }
LABEL_9:
    long long v4 = [*(id *)(a1 + 48) balloonBundleID];
    goto LABEL_3;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "sending msg with payload data", buf, 2u);
    }
  }
  id v2 = [*(id *)(a1 + 48) payloadData];
  if (!v4) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v5 = [*(id *)(a1 + 48) fileTransferGUIDs];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_593A8;
  v16[3] = &unk_DEE98;
  id v17 = *(id *)(a1 + 56);
  id v6 = objc_msgSend(v5, "__imArrayByApplyingBlock:", v16);

  long long v7 = +[MessageTranscodeController sharedInstance];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_593FC;
  v9[3] = &unk_DEEC0;
  v9[4] = *(void *)(a1 + 64);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 72);
  id v12 = *(id *)(a1 + 80);
  id v13 = *(id *)(a1 + 88);
  char v15 = *(unsigned char *)(a1 + 104);
  id v14 = *(id *)(a1 + 96);
  [v7 transcodePayloadData:v2 balloonBundleID:v4 attachments:v6 completionBlock:v9];
}

id sub_593A8(uint64_t a1, uint64_t a2)
{
  id v2 = [*(id *)(a1 + 32) transferForGUID:a2];
  id v3 = [v2 localPath];

  return v3;
}

id sub_593FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  LOBYTE(v7) = a5;
  return [*(id *)(a1 + 32) handleTranscodeCompletionBlockForMessage:*(void *)(a1 + 40) displayIDs:*(void *)(a1 + 48) additionalContext:*(void *)(a1 + 56) attemptedTranscode:a6 transcodedTransferGUIDs:*(void *)(a1 + 64) containsAutoLoopVideo:*(unsigned __int8 *)(a1 + 80) outputURLs:a2 text:a3 success:v7 error:a4 completionBlock:*(void *)(a1 + 72)];
}

void sub_59E40(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x59810);
  }
  _Unwind_Resume(a1);
}

void sub_5BB48(uint64_t a1)
{
  group = dispatch_group_create();
  if (IMOSLoggingEnabled())
  {
    uint64_t v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      id v2 = [*(id *)(a1 + 32) fileTransferGUIDs];
      *(_DWORD *)buf = 138412290;
      CFStringRef v201 = v2;
      _os_log_impl(&dword_0, v1, OS_LOG_TYPE_INFO, "Checking message file tranfers: %@", buf, 0xCu);
    }
  }
  id v113 = objc_alloc_init((Class)NSMutableArray);
  id v3 = objc_alloc_init((Class)NSMutableSet);
  long long v198 = 0u;
  long long v199 = 0u;
  long long v196 = 0u;
  long long v197 = 0u;
  long long v4 = [*(id *)(a1 + 32) fileTransferGUIDs];
  id v5 = [v4 countByEnumeratingWithState:&v196 objects:v213 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v197;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v197 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void *)(*((void *)&v196 + 1) + 8 * i);
        uint64_t v9 = +[IMDFileTransferCenter sharedInstance];
        id v10 = [v9 transferForGUID:v8];

        if (v10)
        {
          [v3 addObject:v8];
          if ([(__CFString *)v10 isAuxImage])
          {
            if (IMOSLoggingEnabled())
            {
              id v11 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                CFStringRef v201 = v10;
                _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "transfer %@ is Aux image", buf, 0xCu);
              }
            }
            id v12 = +[IMFileTransfer AuxGUIDFromFileTransferGUID:v8];
            id v13 = +[IMDFileTransferCenter sharedInstance];
            id v14 = [v13 transferForGUID:v12];

            if (v14
              && !+[IMDAttachmentUtilities isPreviewAttachmentSizeEnabled])
            {
              [v3 addObject:v12];
            }
            else
            {
              if (IMOSLoggingEnabled())
              {
                char v15 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                {
                  unsigned int v16 = +[IMDAttachmentUtilities isPreviewAttachmentSizeEnabled];
                  *(_DWORD *)buf = 138412546;
                  CFStringRef v17 = @"YES";
                  if (!v16) {
                    CFStringRef v17 = @"NO";
                  }
                  CFStringRef v201 = v14;
                  __int16 v202 = 2112;
                  CFStringRef v203 = v17;
                  _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Did not find Aux video transfer %@ %@", buf, 0x16u);
                }
              }
              [(__CFString *)v10 setIsAuxImage:0];
              [(__CFString *)v10 setAuxStateWasDowngraded:1];
            }
          }
        }
        else if (IMOSLoggingEnabled())
        {
          id v18 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            CFStringRef v201 = 0;
            _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "Did not find transfer for guid %@", buf, 0xCu);
          }
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v196 objects:v213 count:16];
    }
    while (v5);
  }

  theArray = (__CFArray *)objc_alloc_init((Class)NSMutableArray);
  if ([v3 count])
  {
    unint64_t v19 = 0;
    do
    {
      if (theArray)
      {
        uint64_t v20 = +[NSNumber numberWithBool:0];
        BOOL v21 = v20 == 0;

        if (!v21)
        {
          CFStringRef v22 = +[NSNumber numberWithBool:0];
          CFArrayAppendValue(theArray, v22);
        }
      }
      ++v19;
    }
    while (v19 < (unint64_t)[v3 count]);
  }
  id v23 = [*(id *)(a1 + 32) guid];
  v211[0] = kAttachmentsAutomationMessageGUIDKey;
  uint64_t v24 = [*(id *)(a1 + 32) guid];
  uint64_t v25 = (void *)v24;
  v211[1] = kAttachmentsAutomationTransferGUIDsKey;
  uint64_t v26 = &__NSArray0__struct;
  if (v3) {
    uint64_t v26 = v3;
  }
  v212[0] = v24;
  v212[1] = v26;
  id v27 = +[NSDictionary dictionaryWithObjects:v212 forKeys:v211 count:2];
  AttachmentsAutomationLogMilestoneWithOptionFlags();

  int v28 = [*(id *)(a1 + 32) payloadData];
  id v123 = [v28 length];

  id v112 = objc_alloc_init((Class)NSMutableSet);
  v194[0] = 0;
  v194[1] = v194;
  v194[2] = 0x3032000000;
  v194[3] = sub_4F950;
  v194[4] = sub_4F960;
  id v195 = 0;
  long long v190 = 0u;
  long long v191 = 0u;
  long long v192 = 0u;
  long long v193 = 0u;
  id v29 = v3;
  id v30 = [v29 countByEnumeratingWithState:&v190 objects:v210 count:16];
  if (v30)
  {
    id obj = v29;
    uint64_t v134 = 0;
    char v31 = 0;
    uint64_t v122 = *(void *)v191;
    while (1)
    {
      uint64_t v32 = 0;
      id v125 = v30;
      do
      {
        if (*(void *)v191 != v122) {
          objc_enumerationMutation(obj);
        }
        CFStringRef v33 = *(const __CFString **)(*((void *)&v190 + 1) + 8 * v32);
        if (IMOSLoggingEnabled())
        {
          uint64_t v34 = v32;
          CFStringRef v35 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            CFStringRef v201 = v33;
            _os_log_impl(&dword_0, v35, OS_LOG_TYPE_INFO, "About to download transfer guid %@", buf, 0xCu);
          }

          uint64_t v32 = v34;
        }
        unsigned int v141 = [*(id *)(a1 + 40) transferForGUID:v33];
        if (v123) {
          [(__CFString *)v141 setHideAttachment:1];
        }
        __int16 v36 = [(__CFString *)v141 userInfo];
        uint64_t v133 = v32;
        uint64_t v37 = [(__CFString *)v36 _stringForKey:@"inline-attachment"];
        uint64_t v38 = (void *)v37;
        if (v141) {
          BOOL v39 = v37 == 0;
        }
        else {
          BOOL v39 = 0;
        }
        uint64_t v145 = v36;
        if (!v39)
        {
          if (IMOSLoggingEnabled())
          {
            uint64_t v40 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              CFStringRef v201 = v33;
              _os_log_impl(&dword_0, v40, OS_LOG_TYPE_INFO, "No transfer found for guid: %@", buf, 0xCu);
            }
          }
          goto LABEL_162;
        }
        dispatch_group_enter(group);
        id v41 = *(void **)(a1 + 40);
        id v42 = [*(id *)(a1 + 32) accountID];
        [v41 assignTransfer:v33 toAccount:v42 otherPerson:*(void *)(a1 + 48)];
        CFStringRef v126 = v33;
        id v121 = v38;

        v130 = (__CFString *)[objc_alloc((Class)NSMutableArray) initWithCapacity:1];
        int v131 = (__CFString *)[objc_alloc((Class)NSMutableArray) initWithCapacity:1];
        uint64_t v129 = (__CFString *)[objc_alloc((Class)NSMutableArray) initWithCapacity:1];
        id v132 = [objc_alloc((Class)NSMutableArray) initWithCapacity:1];
        id v128 = [objc_alloc((Class)NSMutableArray) initWithCapacity:1];
        id v127 = [objc_alloc((Class)NSMutableArray) initWithCapacity:1];
        uint64_t v186 = 0;
        id v187 = &v186;
        uint64_t v188 = 0x2020000000;
        char v189 = 0;
        id v43 = [(__CFString *)v36 _stringForKey:@"mmcs-url"];
        BOOL v44 = [(__CFString *)v36 _stringForKey:@"mmcs-signature-hex"];
        uint64_t v45 = [(__CFString *)v36 _stringForKey:@"mmcs-owner"];
        __int16 v46 = [(__CFString *)v36 objectForKey:@"file-size"];
        unint64_t v142 = [v46 stringValue];

        id v139 = [(__CFString *)v36 _stringForKey:@"decryption-key"];
        id v135 = [(__CFString *)v141 type];
        BOOL v137 = v43 != 0;
        unsigned int v136 = +[IMDAttachmentUtilities shouldEnablePreviewTranscodingQualityForTransfer:v141 isSending:0];
        uint64_t v140 = objc_msgSend(*(id *)(a1 + 56), "_downloadRestrictionForUTIType:fileSize:qualityType:isSticker:forceAutoDownloadIfPossible:lqmEnabled:", v135, -[__CFString integerValue](v142, "integerValue"), 1, -[__CFString isSticker](v141, "isSticker"), *(unsigned __int8 *)(a1 + 128), v136);
        unsigned int v47 = [v140 allowDownload];
        *((unsigned char *)v187 + 24) = v47;
        if ((v47 ^ 1 | v136) == 1)
        {
          if (IMOSLoggingEnabled())
          {
            __int16 v48 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
            {
              CFStringRef v49 = @"YES";
              if (*((unsigned char *)v187 + 24)) {
                CFStringRef v50 = @"YES";
              }
              else {
                CFStringRef v50 = @"NO";
              }
              if (!v136) {
                CFStringRef v49 = @"NO";
              }
              *(_DWORD *)buf = 138412546;
              CFStringRef v201 = v50;
              __int16 v202 = 2112;
              CFStringRef v203 = v49;
              _os_log_impl(&dword_0, v48, OS_LOG_TYPE_INFO, "The first file wasn't allowed to auto download, let's look and see what we have... shouldAutoDownloadFile %@, lowQualityModeEnabled %@", buf, 0x16u);
            }
          }
          uint64_t v51 = +[NSNumber numberWithInteger:[(__CFString *)v142 integerValue]];
          [v140 collectMetricsForLimitExceededWithReportedSize:v51];

          uint64_t v52 = -9;
          while (1)
          {
            uint64_t v53 = +[NSString stringWithFormat:@"%@-%d", @"mmcs-url", v52 + 10];
            uint64_t v143 = [(__CFString *)v145 _stringForKey:v53];

            int8x16_t v54 = +[NSString stringWithFormat:@"%@-%d", @"mmcs-signature-hex", v52 + 10];
            id v144 = [(__CFString *)v145 _stringForKey:v54];

            id v55 = +[NSString stringWithFormat:@"%@-%d", @"mmcs-owner", v52 + 10];
            id v56 = [(__CFString *)v145 _stringForKey:v55];

            unsigned int v57 = +[NSString stringWithFormat:@"%@-%d", @"decryption-key", v52 + 10];
            id v58 = [(__CFString *)v145 _stringForKey:v57];

            int v59 = +[NSString stringWithFormat:@"%@-%d", @"file-size", v52 + 10];
            id v60 = [(__CFString *)v145 objectForKey:v59];
            double v61 = [v60 stringValue];

            if (!v58 || !v56 || !v144 || !v143)
            {

              goto LABEL_105;
            }
            id v62 = 0;
            if (!v61 || !v142) {
              goto LABEL_91;
            }
            objc_msgSend(*(id *)(a1 + 56), "_downloadRestrictionForUTIType:fileSize:qualityType:isSticker:lqmEnabled:", v135, -[__CFString integerValue](v61, "integerValue"), 2, -[__CFString isSticker](v141, "isSticker"), v136);
            id v62 = (id)objc_claimAutoreleasedReturnValue();
            unsigned __int8 v63 = [v62 allowDownload];
            *((unsigned char *)v187 + 24) = v63;
            if ((v63 & 1) != 0
              || (+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[__CFString integerValue](v61, "integerValue")), id v64 = objc_claimAutoreleasedReturnValue(), [v62 collectMetricsForLimitExceededWithReportedSize:v64], v64, *((unsigned char *)v187 + 24)))
            {
              [(__CFString *)v61 floatValue];
              float v66 = v65;
              [(__CFString *)v142 floatValue];
              if (v66 <= v67) {
                break;
              }
            }
            if (IMOSLoggingEnabled())
            {
              BOOL v68 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
              {
                CFStringRef v69 = @"YES";
                if (!*((unsigned char *)v187 + 24)) {
                  CFStringRef v69 = @"NO";
                }
                *(_DWORD *)buf = 138412802;
                CFStringRef v201 = v61;
                __int16 v202 = 2112;
                CFStringRef v203 = v142;
                __int16 v204 = 2112;
                CFStringRef v205 = v69;
                _os_log_impl(&dword_0, v68, OS_LOG_TYPE_INFO, "Ignoring this file, still not allowed to auto download (localFileSizeString: %@), (fileSizeString:%@), shouldAutoDownload:%@ ", buf, 0x20u);
              }
            }
            BOOL v137 = 1;
LABEL_96:

            if (__CFADD__(v52++, 1)) {
              goto LABEL_105;
            }
          }
          if (IMOSLoggingEnabled())
          {
            id v70 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              CFStringRef v201 = v61;
              __int16 v202 = 2112;
              CFStringRef v203 = v142;
              _os_log_impl(&dword_0, v70, OS_LOG_TYPE_INFO, "Taking this file, we're good to grab it (this: %@ vs fileSizeString: %@)", buf, 0x16u);
            }
          }
          BOOL v137 = 1;
LABEL_91:
          if (IMOSLoggingEnabled())
          {
            id v71 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              CFStringRef v201 = v44;
              __int16 v202 = 2112;
              CFStringRef v203 = v142;
              _os_log_impl(&dword_0, v71, OS_LOG_TYPE_INFO, " => Assigning this one: %@ fileSize: %@", buf, 0x16u);
            }
          }
          id v72 = v143;

          double v73 = v144;
          __int16 v74 = v56;

          CFStringRef v75 = v61;
          id v76 = v58;

          id v62 = v62;
          id v77 = v73;
          id v43 = v72;
          unint64_t v142 = v75;
          uint64_t v45 = v74;
          id v139 = v76;
          uint64_t v140 = v62;
          BOOL v44 = v77;
          goto LABEL_96;
        }
        if (IMOSLoggingEnabled())
        {
          id v79 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            CFStringRef v201 = v142;
            _os_log_impl(&dword_0, v79, OS_LOG_TYPE_INFO, "Grabbing the largest file we can find (size: %@)", buf, 0xCu);
          }
        }
        BOOL v137 = 1;
LABEL_105:
        if (IMOSLoggingEnabled())
        {
          id v80 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            CFStringRef v201 = v142;
            _os_log_impl(&dword_0, v80, OS_LOG_TYPE_INFO, "Will download file of size %@ ", buf, 0xCu);
          }
        }
        if (v137 && v43 != 0)
        {
          if ((!v44 || !v45 || !v142 || !v139) && IMOSLoggingEnabled())
          {
            id v81 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138413058;
              CFStringRef v201 = v44;
              __int16 v202 = 2112;
              CFStringRef v203 = v45;
              __int16 v204 = 2112;
              CFStringRef v205 = v142;
              __int16 v206 = 2112;
              id v207 = v139;
              _os_log_impl(&dword_0, v81, OS_LOG_TYPE_INFO, "MessageService: Attachment download context is missing entries (signature = %@, ownerID = %@, fileSizeString = %@, encryptionKey = %@)", buf, 0x2Au);
            }
          }
          [(__CFString *)v130 addObject:v43];
          double v82 = v44;
          if (!v44)
          {
            unint64_t v118 = +[NSNull null];
            double v82 = v118;
          }
          [(__CFString *)v131 addObject:v82];
          if (!v44) {

          }
          __int16 v83 = v45;
          if (!v45)
          {
            id v117 = +[NSNull null];
            __int16 v83 = v117;
          }
          [(__CFString *)v129 addObject:v83];
          if (!v45) {

          }
          double v84 = v142;
          if (!v142)
          {
            id v116 = +[NSNull null];
            double v84 = v116;
          }
          [v132 addObject:v84];
          if (!v142) {

          }
          id v85 = v139;
          if (!v139)
          {
            uint64_t v115 = +[NSNull null];
            id v85 = v115;
          }
          [v128 addObject:v85];
          if (!v139) {

          }
          id v86 = v140;
          if (!v140)
          {
            uint64_t v114 = +[NSNull null];
            id v86 = v114;
          }
          [v127 addObject:v86];
          if (!v140) {
        }
          }
        if (v137)
        {
          CFStringRef v87 = v126;
          if (IMOSLoggingEnabled())
          {
            uint64_t v88 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              CFStringRef v201 = v131;
              _os_log_impl(&dword_0, v88, OS_LOG_TYPE_INFO, " => Settled on signatures: %@", buf, 0xCu);
            }

            CFStringRef v87 = v126;
          }
          if (IMOSLoggingEnabled())
          {
            id v89 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              CFStringRef v201 = v141;
              _os_log_impl(&dword_0, v89, OS_LOG_TYPE_INFO, " transfer: %@", buf, 0xCu);
            }

            CFStringRef v87 = v126;
          }
          if (IMOSLoggingEnabled())
          {
            id v90 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              CFStringRef v201 = v145;
              _os_log_impl(&dword_0, v90, OS_LOG_TYPE_INFO, "    user info: %@", buf, 0xCu);
            }

            CFStringRef v87 = v126;
          }
          if (IMOSLoggingEnabled())
          {
            __int16 v91 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138413314;
              CFStringRef v201 = v130;
              __int16 v202 = 2112;
              CFStringRef v203 = v129;
              __int16 v204 = 2112;
              CFStringRef v205 = v131;
              __int16 v206 = 2112;
              id v207 = v128;
              __int16 v208 = 2112;
              id v209 = v132;
              _os_log_impl(&dword_0, v91, OS_LOG_TYPE_INFO, " urlStrings: %@   owners: %@    signatures: %@  keys: %@  fileSizeStrings: %@", buf, 0x34u);
            }

            CFStringRef v87 = v126;
          }
          id v92 = +[IMDStickerRegistry sharedInstance];
          __int16 v93 = [(__CFString *)v141 stickerUserInfo];
          id v94 = [(__CFString *)v141 isAdaptiveImageGlyph];
          v158[0] = _NSConcreteStackBlock;
          v158[1] = 3221225472;
          v158[2] = sub_5D634;
          v158[3] = &unk_DEF60;
          uint64_t v159 = v141;
          id v160 = *(id *)(a1 + 64);
          id v161 = *(id *)(a1 + 40);
          id v95 = group;
          uint64_t v176 = &v186;
          char v183 = 0;
          uint64_t v162 = v95;
          CFStringRef v163 = v87;
          id v96 = *(id *)(a1 + 32);
          uint64_t v97 = *(void *)(a1 + 56);
          id v164 = v96;
          uint64_t v165 = v97;
          uint64_t v182 = v134;
          char v184 = *(unsigned char *)(a1 + 129);
          BOOL v166 = theArray;
          id v167 = v130;
          id v168 = v129;
          id v169 = v132;
          id v170 = v131;
          id v171 = v128;
          id v172 = v127;
          id v173 = *(id *)(a1 + 72);
          id v98 = v112;
          uint64_t v99 = *(void *)(a1 + 88);
          uint64_t v100 = *(void *)(a1 + 96);
          id v174 = v98;
          uint64_t v177 = v99;
          uint64_t v101 = *(void *)(a1 + 104);
          uint64_t v178 = *(void *)(a1 + 112);
          uint64_t v179 = v100;
          id v180 = v194;
          uint64_t v181 = v101;
          char v185 = 0;
          id v175 = v113;
          [v92 retrieveStickerWithProperties:v93 isAdaptiveImageGlyph:v94 completionBlock:v158];
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            uint64_t v102 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_0, v102, OS_LOG_TYPE_INFO, " => No signature found, nothing to download here", buf, 2u);
            }
          }
          id v103 = *(void **)(a1 + 40);
          id v104 = [(__CFString *)v141 guid];
          [v103 failTransfer:v104 error:0];

          *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = 0;
          *(_DWORD *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = 35;
          id v105 = [v132 firstObject];
          *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = [v105 integerValue];

          dispatch_group_leave(group);
        }
        _Block_object_dispose(&v186, 8);

        char v31 = 1;
        uint64_t v38 = v121;
LABEL_162:

        ++v134;
        uint64_t v32 = v133 + 1;
      }
      while ((id)(v133 + 1) != v125);
      id v30 = [obj countByEnumeratingWithState:&v190 objects:v210 count:16];
      if (!v30)
      {

        if (v31)
        {
          id v106 = &_dispatch_main_q;
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_5FCC0;
          block[3] = &unk_DEFB0;
          id v107 = *(id *)(a1 + 32);
          uint64_t v108 = *(void *)(a1 + 96);
          id v148 = v107;
          uint64_t v109 = *(void *)(a1 + 120);
          uint64_t v154 = v108;
          uint64_t v155 = v109;
          long long v146 = *(_OWORD *)(a1 + 80);
          id v110 = (id)v146;
          long long v153 = v146;
          id v149 = *(id *)(a1 + 48);
          uint64_t v156 = v194;
          long long v157 = *(_OWORD *)(a1 + 104);
          id v150 = v112;
          id v151 = v113;
          id v152 = *(id *)(a1 + 40);
          dispatch_group_notify(group, (dispatch_queue_t)&_dispatch_main_q, block);

          id v111 = v148;
          goto LABEL_167;
        }
        goto LABEL_168;
      }
    }
  }

  id v111 = v29;
LABEL_167:

LABEL_168:
  _Block_object_dispose(v194, 8);
}

void sub_5D634(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v86 = a3;
  CFStringRef v87 = v5;
  uint64_t v99 = a1;
  if (v5
    && (+[NSFileManager defaultManager],
        uint64_t v6 = objc_claimAutoreleasedReturnValue(),
        unsigned int v7 = [v6 fileExistsAtPath:v5 isDirectory:0],
        v6,
        v7))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v87;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Sticker found in cache %@", buf, 0xCu);
      }
    }
    uint64_t v9 = +[NSURL fileURLWithPath:v87];
    [*(id *)(a1 + 32) setUserInfo:0];
    if (v9
      && (+[NSFileManager defaultManager],
          id v10 = objc_claimAutoreleasedReturnValue(),
          [v9 path],
          id v11 = objc_claimAutoreleasedReturnValue(),
          unsigned int v12 = [v10 fileExistsAtPath:v11],
          v11,
          v10,
          v12))
    {
      if (IMOSLoggingEnabled())
      {
        id v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v87;
          _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Adding gatekeeper properties to: %@", buf, 0xCu);
        }
      }
      id v14 = +[IMDFileTransferCenter sharedInstance];
      [v14 addDefaultGatekeeperPropertiesToDirectory:v87];

      [*(id *)(a1 + 32) _setLocalURL:v9];
      if (IMOSLoggingEnabled())
      {
        char v15 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v9;
          _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Set transfer local url to: %@", buf, 0xCu);
        }
      }
      unsigned int v16 = +[IMCommSafetyRequestsManager sharedManager];
      objc_msgSend(v16, "checkExistingAttachmentSensitivityIfNeededFor:attachmentURL:isFromMe:", *(void *)(a1 + 32), v9, objc_msgSend(*(id *)(a1 + 40), "isFromMe"));
      CFStringRef v17 = *(void **)(a1 + 48);
      id v18 = [*(id *)(a1 + 32) guid];
      [v17 startFinalizingTransfer:v18];

      dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v37 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v37, OS_LOG_TYPE_INFO, "Sticker not in cache. Attempting to download sticker ", buf, 2u);
      }
    }
  }
  else
  {
    unint64_t v19 = +[IMLockdownManager sharedInstance];
    unsigned int v20 = [v19 isInternalInstall];

    if (v20)
    {
      BOOL v21 = +[IMDefaults sharedInstance];
      unsigned int v22 = [v21 getBoolFromDomain:IMCloudKitDefinesDomain forKey:@"ForceNoAutoDownload.iMessage" defaultValue:0];

      if (v22)
      {
        if (IMOSLoggingEnabled())
        {
          id v23 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_0, v23, OS_LOG_TYPE_INFO, "Forcing auto download behavior OFF due to default com.apple.madrid ForceNoAutoDownload.iMessage", buf, 2u);
          }
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 168) + 8) + 24) = 0;
      }
    }
    BOOL v24 = *(unsigned char *)(*(void *)(*(void *)(a1 + 168) + 8) + 24) == 0;
    int v25 = IMOSLoggingEnabled();
    if (v24)
    {
      if (v25)
      {
        __int16 v36 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v36, OS_LOG_TYPE_INFO, " ** Not auto downloading file!", buf, 2u);
        }
      }
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
      if (*(unsigned char *)(a1 + 226)) {
        [*(id *)(a1 + 160) addObject:*(void *)(a1 + 32)];
      }
    }
    else
    {
      if (v25)
      {
        uint64_t v26 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v26, OS_LOG_TYPE_INFO, " ** Auto downloading file!", buf, 2u);
        }
      }
      id v27 = [*(id *)(a1 + 32) filename];
      id v85 = [v27 lastPathComponent];

      uint64_t v28 = +[NSFileManager defaultManager];
      id v29 = objc_msgSend((id)v28, "im_randomTemporaryFileURLWithFileName:", v85);
      uint64_t v88 = [v29 path];

      [*(id *)(a1 + 48) acceptTransfer:*(void *)(a1 + 64) path:v88];
      +[NSDate timeIntervalSinceReferenceDate];
      uint64_t v31 = v30;
      double v84 = +[IDSServerBag sharedInstanceForBagType:0];
      LOBYTE(v28) = [*(id *)(a1 + 80) _shouldDisableFasterDownload:v84 message:*(void *)(a1 + 72)];
      int v32 = IMOSLoggingEnabled();
      if (v28)
      {
        if (v32)
        {
          CFStringRef v33 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            uint64_t v34 = [*(id *)(a1 + 72) balloonBundleID];
            id v35 = [v34 length];
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = @"YES";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v35;
            _os_log_impl(&dword_0, v33, OS_LOG_TYPE_INFO, "Not dispatching timer shouldDisableFasterDownload:%@ [[message balloonBundleID] length] %lu", buf, 0x16u);
          }
        }
      }
      else
      {
        if (v32)
        {
          uint64_t v38 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = @"NO";
            _os_log_impl(&dword_0, v38, OS_LOG_TYPE_INFO, "Dispatching timer shouldDisableFasterDownload:%@", buf, 0xCu);
          }
        }
        id v144 = _NSConcreteStackBlock;
        uint64_t v145 = 3221225472;
        long long v146 = sub_5E934;
        id v147 = &unk_DEF10;
        id v39 = *(id *)(a1 + 88);
        uint64_t v40 = *(void *)(a1 + 216);
        id v148 = v39;
        uint64_t v151 = v40;
        id v149 = *(id *)(a1 + 72);
        id v150 = *(id *)(a1 + 56);
        im_dispatch_after();
      }
      v142[0] = 0;
      v142[1] = v142;
      v142[2] = 0x2020000000;
      id v143 = 0;
      id v143 = [*(id *)(a1 + 96) count];
      v141[0] = 0;
      v141[1] = v141;
      v141[2] = 0x2020000000;
      v141[3] = 0;
      *(void *)buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000;
      uint64_t v159 = sub_4F950;
      id v160 = sub_4F960;
      id v161 = 0;
      v139[0] = 0;
      v139[1] = v139;
      v139[2] = 0x3032000000;
      v139[3] = sub_4F950;
      v139[4] = sub_4F960;
      id v140 = 0;
      v138[0] = 0;
      v138[1] = v138;
      v138[2] = 0x2020000000;
      v138[3] = 0;
      v136[0] = 0;
      v136[1] = v136;
      v136[2] = 0x3032000000;
      v136[3] = sub_4F950;
      v136[4] = sub_4F960;
      id v137 = 0;
      v134[0] = 0;
      v134[1] = v134;
      v134[2] = 0x3032000000;
      v134[3] = sub_4F950;
      v134[4] = sub_4F960;
      id v135 = 0;
      v132[0] = 0;
      v132[1] = v132;
      v132[2] = 0x2020000000;
      char v133 = 0;
      id v41 = (char *)[*(id *)(a1 + 96) count];
      if ((uint64_t)(v41 - 1) >= 0)
      {
        do
        {
          id v42 = v41 - 1;
          id v95 = [*(id *)(a1 + 96) objectAtIndexedSubscript:v42];
          uint64_t v100 = (uint64_t)v42;
          id v43 = [*(id *)(a1 + 104) objectAtIndexedSubscript:v42];
          BOOL v44 = +[NSNull null];
          if (v43 == v44)
          {
            id v94 = 0;
          }
          else
          {
            id v94 = [*(id *)(a1 + 104) objectAtIndexedSubscript:v100];
          }

          uint64_t v45 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v100];
          __int16 v46 = +[NSNull null];
          if (v45 == v46)
          {
            id v96 = 0;
          }
          else
          {
            id v96 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v100];
          }

          unsigned int v47 = [*(id *)(a1 + 120) objectAtIndexedSubscript:v100];
          __int16 v48 = +[NSNull null];
          if (v47 == v48)
          {
            __int16 v93 = 0;
          }
          else
          {
            __int16 v93 = [*(id *)(a1 + 120) objectAtIndexedSubscript:v100];
          }

          CFStringRef v49 = [*(id *)(a1 + 128) objectAtIndexedSubscript:v100];
          CFStringRef v50 = +[NSNull null];
          if (v49 == v50)
          {
            id v92 = 0;
          }
          else
          {
            id v92 = [*(id *)(a1 + 128) objectAtIndexedSubscript:v100];
          }

          uint64_t v51 = [*(id *)(a1 + 136) objectAtIndexedSubscript:v100];
          uint64_t v52 = +[NSNull null];
          if (v51 == v52)
          {
            id v90 = 0;
          }
          else
          {
            id v90 = [*(id *)(a1 + 136) objectAtIndexedSubscript:v100];
          }

          uint64_t v128 = 0;
          uint64_t v129 = &v128;
          uint64_t v130 = 0x2020000000;
          uint64_t v131 = 0;
          uint64_t v131 = [v96 unsignedIntValue];
          id v53 = v88;
          int8x16_t v54 = [v53 stringByDeletingLastPathComponent];
          id v55 = +[NSString stringWithFormat:@"%tu", v100];
          uint64_t v56 = [v53 lastPathComponent];

          unsigned int v57 = [v54 stringByAppendingPathComponent:v55];
          id v98 = [v57 stringByAppendingPathComponent:v56];

          id v58 = +[NSFileManager defaultManager];
          int v59 = [v98 stringByDeletingLastPathComponent];
          id v127 = 0;
          LOBYTE(v56) = [v58 createDirectoryAtPath:v59 withIntermediateDirectories:0 attributes:0 error:&v127];
          id v91 = v127;

          uint64_t v60 = v99;
          if ((v56 & 1) == 0)
          {
            uint64_t v60 = v99;
            if (IMOSLoggingEnabled())
            {
              double v61 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
              {
                id v62 = [v98 stringByDeletingLastPathComponent];
                unsigned __int8 v63 = [v62 stringByResolvingAndStandardizingPath];
                *(_DWORD *)uint64_t v154 = 138412546;
                uint64_t v155 = v63;
                __int16 v156 = 2112;
                id v157 = v91;
                _os_log_impl(&dword_0, v61, OS_LOG_TYPE_INFO, "Attachments: Error while creating a temp directory at %@: %@", v154, 0x16u);
              }
            }
          }
          id v64 = [*(id *)(v60 + 72) guid];
          CFStringRef v65 = &stru_E0738;
          if (v95) {
            CFStringRef v65 = v95;
          }
          v152[0] = kAttachmentsAutomationURLKey;
          v152[1] = kAttachmentsAutomationFileSizeKey;
          float v66 = &off_E37B0;
          if (v96) {
            float v66 = (_UNKNOWN **)v96;
          }
          v153[0] = v65;
          v153[1] = v66;
          float v67 = +[NSDictionary dictionaryWithObjects:v153 forKeys:v152 count:2];
          AttachmentsAutomationLogMilestone();

          if (IMOSLoggingEnabled())
          {
            BOOL v68 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint64_t v154 = 138412290;
              uint64_t v155 = v98;
              _os_log_impl(&dword_0, v68, OS_LOG_TYPE_INFO, "Receiving file at temporary local URL: %@", v154, 0xCu);
            }
          }
          CFStringRef v69 = +[IMTransferServicesController sharedInstance];
          id v70 = +[NSString stringGUID];
          id v71 = [*(id *)(v99 + 32) guid];
          uint64_t v72 = *(void *)(v99 + 144);
          double v73 = [v98 stringByResolvingAndStandardizingPath];
          __int16 v74 = [v93 _FTDataFromHexString];
          CFStringRef v75 = [v92 _FTDataFromHexString];
          uint64_t v76 = v129[3];
          id v77 = [*(id *)(v99 + 72) balloonBundleID];
          uint64_t v89 = *(void *)(v99 + 40);
          v126[0] = _NSConcreteStackBlock;
          v126[1] = 3221225472;
          v126[2] = sub_5EB74;
          v126[3] = &unk_DEDA8;
          v126[4] = *(void *)(v99 + 64);
          v101[0] = _NSConcreteStackBlock;
          v101[1] = 3221225472;
          v101[2] = sub_5EC98;
          v101[3] = &unk_DEF38;
          id v112 = v142;
          id v102 = *(id *)(v99 + 32);
          uint64_t v124 = v31;
          id v103 = *(id *)(v99 + 72);
          id v104 = v53;
          id v97 = v96;
          id v105 = v97;
          id v113 = &v128;
          uint64_t v114 = v141;
          uint64_t v115 = buf;
          id v116 = v139;
          id v78 = v90;
          id v106 = v78;
          id v117 = v138;
          unint64_t v118 = v136;
          uint64_t v119 = v134;
          uint64_t v120 = v132;
          id v107 = *(id *)(v99 + 48);
          id v79 = *(id *)(v99 + 152);
          uint64_t v80 = *(void *)(v99 + 64);
          id v108 = v79;
          uint64_t v109 = v80;
          long long v81 = *(_OWORD *)(v99 + 192);
          long long v121 = *(_OWORD *)(v99 + 176);
          long long v122 = v81;
          uint64_t v123 = *(void *)(v99 + 208);
          id v82 = *(id *)(v99 + 88);
          uint64_t v83 = *(void *)(v99 + 216);
          id v110 = v82;
          uint64_t v125 = v83;
          id v111 = *(id *)(v99 + 56);
          [v69 receiveFileTransfer:v70 transferGUID:v71 topic:v72 path:v73 requestURLString:v95 ownerID:v94 signature:v74 decryptionKey:v75 fileSize:v76 balloonBundleID:v77 senderContext:v89 progressBlock:v126 completionBlock:v101];

          a1 = v99;
          _Block_object_dispose(&v128, 8);

          id v41 = (char *)v100;
        }
        while (v100 > 0);
      }
      _Block_object_dispose(v132, 8);
      _Block_object_dispose(v134, 8);

      _Block_object_dispose(v136, 8);
      _Block_object_dispose(v138, 8);
      _Block_object_dispose(v139, 8);

      _Block_object_dispose(buf, 8);
      _Block_object_dispose(v141, 8);
      _Block_object_dispose(v142, 8);
    }
  }
}

void sub_5E934(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectAtIndexedSubscript:*(void *)(a1 + 56)];
  unsigned __int8 v3 = [v2 BOOLValue];

  int v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10) = 0;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "Not Calling dispatch group leave in timer block ", (uint8_t *)&v10, 2u);
      }
    }
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 56);
        uint64_t v8 = [*(id *)(a1 + 40) guid];
        int v10 = 134218242;
        uint64_t v11 = v7;
        __int16 v12 = 2112;
        id v13 = v8;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Timed out downloading attachment at index %lu for message %@", (uint8_t *)&v10, 0x16u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10) = 0;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "Calling dispatch group leave in timer block", (uint8_t *)&v10, 2u);
      }
    }
    [*(id *)(a1 + 32) setObject:&__kCFBooleanTrue atIndexedSubscript:*(void *)(a1 + 56)];
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
}

void sub_5EB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v10 = 134218496;
      uint64_t v11 = a2;
      __int16 v12 = 2048;
      uint64_t v13 = a3;
      __int16 v14 = 2048;
      uint64_t v15 = a4;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Receive progress updated to %lld of %lld (%lld bps)", (uint8_t *)&v10, 0x20u);
    }
  }
  uint64_t v9 = +[IMDFileTransferCenter sharedInstance];
  [v9 updateTransfer:*(void *)(a1 + 32) currentBytes:a2 totalBytes:a3];
}

void sub_5EC98(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, void *a6, void *a7)
{
  id v113 = a2;
  double v12 = COERCE_DOUBLE(a3);
  uint64_t v13 = a6;
  __int16 v14 = a7;
  --*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24);
  if (IMOSLoggingEnabled())
  {
    uint64_t v15 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      double v16 = *(double *)(a1 + 32);
      CFStringRef v17 = @"NO";
      *(_DWORD *)buf = 138412802;
      if (a4) {
        CFStringRef v17 = @"YES";
      }
      double v120 = v16;
      __int16 v121 = 2112;
      CFStringRef v122 = v17;
      __int16 v123 = 2112;
      uint64_t v124 = v13;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Finished downloading transfer: %@   success: %@  error: %@", buf, 0x20u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      +[NSDate timeIntervalSinceReferenceDate];
      double v20 = v19 - *(double *)(a1 + 224);
      *(_DWORD *)buf = 134217984;
      double v120 = v20;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "Time taken: %f", buf, 0xCu);
    }
  }
  BOOL v21 = [*(id *)(a1 + 40) guid];
  v117[0] = kAttachmentsAutomationURLKey;
  uint64_t v22 = [*(id *)(a1 + 48) stringByResolvingAndStandardizingPath];
  id v23 = (void *)v22;
  if (v22) {
    CFStringRef v24 = (const __CFString *)v22;
  }
  else {
    CFStringRef v24 = &stru_E0738;
  }
  int v25 = *(_UNKNOWN ***)(a1 + 56);
  if (!v25) {
    int v25 = &off_E37B0;
  }
  v118[0] = v24;
  v118[1] = v25;
  v117[1] = kAttachmentsAutomationFileSizeKey;
  v117[2] = kAttachmentsAutomationSuccessKey;
  uint64_t v26 = +[NSNumber numberWithBool:a4];
  v118[2] = v26;
  v117[3] = kAttachmentsAutomationErrorKey;
  v117[4] = kAttachmentsAutomationAdditionalErrorInfoKey;
  if (v13) {
    CFStringRef v27 = v13;
  }
  else {
    CFStringRef v27 = &stru_E0738;
  }
  if (v14) {
    CFStringRef v28 = v14;
  }
  else {
    CFStringRef v28 = &stru_E0738;
  }
  v118[3] = v27;
  v118[4] = v28;
  id v29 = +[NSDictionary dictionaryWithObjects:v118 forKeys:v117 count:5];
  AttachmentsAutomationLogMilestone();

  if (a4)
  {
    uint64_t v30 = +[NSURL fileURLWithPath:*(void *)&v12];
    if (!v30
      || (IMIsRunningInUnitTesting() & 1) == 0
      && (+[NSFileManager defaultManager],
          uint64_t v31 = objc_claimAutoreleasedReturnValue(),
          unsigned int v32 = [v31 fileExistsAtPath:*(void *)&v12],
          v31,
          !v32))
    {
      if (IMOSLoggingEnabled())
      {
        CFStringRef v49 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
        {
          double v50 = *(double *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          double v120 = v50;
          _os_log_impl(&dword_0, v49, OS_LOG_TYPE_INFO, "Could not locate file for transfer: %@", buf, 0xCu);
        }
      }
      uint64_t v51 = *(void *)(*(void *)(a1 + 152) + 8);
      unint64_t v52 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 24);
      if (*(void *)(v51 + 24) < v52)
      {
        *(void *)(v51 + 24) = v52;
        id v53 = [objc_alloc((Class)NSError) initWithDomain:@"com.apple.MessageAttachmentControllerErrorDomain" code:41 userInfo:0];
        uint64_t v54 = *(void *)(*(void *)(a1 + 160) + 8);
        id v55 = *(void **)(v54 + 40);
        *(void *)(v54 + 40) = v53;

        id v56 = [(__CFString *)v14 copy];
        uint64_t v57 = *(void *)(*(void *)(a1 + 168) + 8);
        id v58 = *(void **)(v57 + 40);
        *(void *)(v57 + 40) = v56;

        *(unsigned char *)(*(void *)(*(void *)(a1 + 176) + 8) + 24) = 0;
      }
      goto LABEL_78;
    }
    unint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 24);
    if (v33)
    {
LABEL_53:
      if (*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) >= v33)
      {
        __int16 v74 = +[NSFileManager defaultManager];
        id v114 = 0;
        [v74 removeItemAtPath:*(void *)&v12 error:&v114];
        CFStringRef v75 = (__CFString *)v114;

        if (IMOSLoggingEnabled())
        {
          uint64_t v76 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
          {
            double v77 = *(double *)(*(void *)(*(void *)(a1 + 120) + 8) + 24);
            CFStringRef v78 = *(const __CFString **)(*(void *)(*(void *)(a1 + 128) + 8) + 24);
            *(_DWORD *)buf = 134218240;
            double v120 = v77;
            __int16 v121 = 2048;
            CFStringRef v122 = v78;
            _os_log_impl(&dword_0, v76, OS_LOG_TYPE_INFO, "Incoming successful download of size %tu is superseded by previous successful download of size %tu.", buf, 0x16u);
          }
        }
        if (IMOSLoggingEnabled())
        {
          id v79 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            double v120 = v12;
            __int16 v121 = 2112;
            CFStringRef v122 = v75;
            _os_log_impl(&dword_0, v79, OS_LOG_TYPE_INFO, " => Cleaned up local file at %@ with error: %@", buf, 0x16u);
          }
        }
      }
      else
      {
        if (*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40))
        {
          double v61 = +[NSFileManager defaultManager];
          id v62 = [*(id *)(*(void *)(*(void *)(a1 + 136) + 8) + 40) path];
          id v115 = 0;
          [v61 removeItemAtPath:v62 error:&v115];
          unsigned __int8 v63 = (__CFString *)v115;

          if (IMOSLoggingEnabled())
          {
            id v64 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
            {
              double v65 = *(double *)(*(void *)(*(void *)(a1 + 120) + 8) + 24);
              CFStringRef v66 = *(const __CFString **)(*(void *)(*(void *)(a1 + 128) + 8) + 24);
              *(_DWORD *)buf = 134218240;
              double v120 = v65;
              __int16 v121 = 2048;
              CFStringRef v122 = v66;
              _os_log_impl(&dword_0, v64, OS_LOG_TYPE_INFO, "Incoming successful download of size %tu supersedes previous successful download of size %tu.", buf, 0x16u);
            }
          }
          if (IMOSLoggingEnabled())
          {
            float v67 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
            {
              double v68 = [*(id *)(*(void *)(*(void *)(a1 + 136) + 8) + 40) path];
              *(_DWORD *)buf = 138412546;
              double v120 = v68;
              __int16 v121 = 2112;
              CFStringRef v122 = v63;
              _os_log_impl(&dword_0, v67, OS_LOG_TYPE_INFO, " => Cleaned up local file at %@ with error: %@", buf, 0x16u);
            }
          }
        }
        if (IMOSLoggingEnabled())
        {
          CFStringRef v69 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
          {
            CFStringRef v70 = *(const __CFString **)(*(void *)(*(void *)(a1 + 120) + 8) + 24);
            *(_DWORD *)buf = 138412546;
            double v120 = v12;
            __int16 v121 = 2048;
            CFStringRef v122 = v70;
            _os_log_impl(&dword_0, v69, OS_LOG_TYPE_INFO, "Setting transfer result to file at path %@ with size %tu.", buf, 0x16u);
          }
        }
        id v71 = [v30 copy];
        uint64_t v72 = *(void *)(*(void *)(a1 + 136) + 8);
        double v73 = *(void **)(v72 + 40);
        *(void *)(v72 + 40) = v71;

        *(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 120)
                                                                                             + 8)
                                                                                 + 24);
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40), *(id *)(a1 + 64));
      }
LABEL_78:

      goto LABEL_79;
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v34 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v34, OS_LOG_TYPE_INFO, "Over the wire file size was zero. Could be animated emoji. Let's look at file size on disk", buf, 2u);
      }
    }
    id v35 = +[NSFileManager defaultManager];
    id v116 = 0;
    __int16 v36 = [v35 attributesOfItemAtPath:*(void *)&v12 error:&v116];
    uint64_t v37 = (__CFString *)v116;

    if (v37)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v38 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          double v120 = v12;
          __int16 v121 = 2112;
          CFStringRef v122 = v37;
          _os_log_impl(&dword_0, v38, OS_LOG_TYPE_INFO, "Attachments error reading file size attributes at path %@ error %@", buf, 0x16u);
        }
LABEL_51:
      }
    }
    else
    {
      int v59 = [v36 objectForKey:NSFileSize];
      *(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) = (int)[v59 intValue];

      if (IMOSLoggingEnabled())
      {
        uint64_t v38 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          double v60 = *(double *)(*(void *)(*(void *)(a1 + 120) + 8) + 24);
          *(_DWORD *)buf = 134217984;
          double v120 = v60;
          _os_log_impl(&dword_0, v38, OS_LOG_TYPE_INFO, "On disk file size %lu ", buf, 0xCu);
        }
        goto LABEL_51;
      }
    }

    unint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 24);
    goto LABEL_53;
  }
  if (IMOSLoggingEnabled())
  {
    id v39 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      double v40 = *(double *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      double v120 = v40;
      __int16 v121 = 2112;
      CFStringRef v122 = v13;
      _os_log_impl(&dword_0, v39, OS_LOG_TYPE_INFO, "Failed retrieving file transfer: %@   error: %@", buf, 0x16u);
    }
  }
  uint64_t v41 = *(void *)(*(void *)(a1 + 152) + 8);
  uint64_t v42 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 24);
  if ((unint64_t)(v42 - 1) >= *(void *)(v41 + 24))
  {
    *(void *)(v41 + 24) = v42;
    id v43 = [(__CFString *)v13 copy];
    uint64_t v44 = *(void *)(*(void *)(a1 + 160) + 8);
    uint64_t v45 = *(void **)(v44 + 40);
    *(void *)(v44 + 40) = v43;

    id v46 = [(__CFString *)v14 copy];
    uint64_t v47 = *(void *)(*(void *)(a1 + 168) + 8);
    __int16 v48 = *(void **)(v47 + 40);
    *(void *)(v47 + 40) = v46;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 176) + 8) + 24) = 1;
  }
LABEL_79:
  if (*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24)) {
    goto LABEL_115;
  }
  uint64_t v80 = *(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40);
  if (v80)
  {
    if (IMOSLoggingEnabled())
    {
      long long v81 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
      {
        double v82 = [*(id *)(*(void *)(*(void *)(a1 + 136) + 8) + 40) path];
        *(_DWORD *)buf = 138412290;
        double v120 = v82;
        _os_log_impl(&dword_0, v81, OS_LOG_TYPE_INFO, "Adding gatekeeper properties to: %@", buf, 0xCu);
      }
    }
    uint64_t v83 = +[IMDFileTransferCenter sharedInstance];
    double v84 = [*(id *)(*(void *)(*(void *)(a1 + 136) + 8) + 40) path];
    [v83 addDefaultGatekeeperPropertiesToDirectory:v84];

    [*(id *)(a1 + 32) _setLocalURL:*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40)];
    if (IMOSLoggingEnabled())
    {
      id v85 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
      {
        double v86 = *(double *)(*(void *)(*(void *)(a1 + 136) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        double v120 = v86;
        _os_log_impl(&dword_0, v85, OS_LOG_TYPE_INFO, "Set transfer local url to: %@", buf, 0xCu);
      }
    }
    CFStringRef v87 = *(void **)(a1 + 72);
    uint64_t v88 = [*(id *)(a1 + 32) guid];
    [v87 startFinalizingTransfer:v88];

    if ((a5 & 1) == 0) {
      [*(id *)(a1 + 80) addObject:*(void *)(a1 + 88)];
    }
    [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) collectMetricsForDownloadedFile:*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40)];
    goto LABEL_99;
  }
  uint64_t v89 = [*(id *)(*(void *)(*(void *)(a1 + 160) + 8) + 40) domain];
  if (![v89 isEqualToString:IMFileTransferErrorDomain])
  {

    goto LABEL_96;
  }
  BOOL v90 = [*(id *)(*(void *)(*(void *)(a1 + 160) + 8) + 40) code] == &dword_1C;

  if (!v90)
  {
LABEL_96:
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 176) + 8) + 24))
    {
      id v95 = *(void **)(a1 + 72);
      id v96 = [*(id *)(a1 + 32) guid];
      [v95 resetTransfer:v96 andPostError:*(void *)(*(void *)(*(void *)(a1 + 160) + 8) + 40)];
    }
    id v97 = [*(id *)(*(void *)(*(void *)(a1 + 160) + 8) + 40) copy];
    uint64_t v98 = *(void *)(*(void *)(a1 + 208) + 8);
    uint64_t v99 = *(void **)(v98 + 40);
    *(void *)(v98 + 40) = v97;

    *(void *)(*(void *)(*(void *)(a1 + 216) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 152) + 8)
                                                                             + 24);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 184) + 8) + 24) = 0;
    id v100 = [*(id *)(*(void *)(*(void *)(a1 + 168) + 8) + 40) copy];
    uint64_t v101 = *(void *)(*(void *)(a1 + 192) + 8);
    id v102 = *(void **)(v101 + 40);
    *(void *)(v101 + 40) = v100;

    *(_DWORD *)(*(void *)(*(void *)(a1 + 200) + 8) + 24) = 35;
    goto LABEL_99;
  }
  id v91 = *(void **)(a1 + 72);
  id v92 = [*(id *)(a1 + 32) guid];
  [v91 rejectTransfer:v92];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 184) + 8) + 24) = 1;
  uint64_t v93 = *(void *)(*(void *)(a1 + 192) + 8);
  id v94 = *(void **)(v93 + 40);
  *(void *)(v93 + 40) = 0;

  *(_DWORD *)(*(void *)(*(void *)(a1 + 200) + 8) + 24) = 0;
LABEL_99:
  id v103 = [*(id *)(a1 + 96) objectAtIndexedSubscript:*(void *)(a1 + 232)];
  unsigned __int8 v104 = [v103 BOOLValue];

  int v105 = IMOSLoggingEnabled();
  if (v104)
  {
    if (v105)
    {
      id v106 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v106, OS_LOG_TYPE_INFO, "Not Calling dispatch group leave in completion block", buf, 2u);
      }
    }
    if (v80)
    {
      if (IMOSLoggingEnabled())
      {
        id v107 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v107, OS_LOG_TYPE_INFO))
        {
          double v108 = [*(id *)(a1 + 32) guid];
          *(_DWORD *)buf = 138412290;
          double v120 = v108;
          _os_log_impl(&dword_0, v107, OS_LOG_TYPE_INFO, "Setting transfer ended %@", buf, 0xCu);
        }
      }
      uint64_t v109 = *(void **)(a1 + 72);
      id v110 = [*(id *)(a1 + 32) guid];
      [v109 endTransfer:v110];
    }
  }
  else
  {
    if (v105)
    {
      id v111 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v111, OS_LOG_TYPE_INFO, "Calling dispatch group leave in completion block", buf, 2u);
      }
    }
    [*(id *)(a1 + 96) setObject:&__kCFBooleanTrue atIndexedSubscript:*(void *)(a1 + 232)];
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
  }
LABEL_115:
}

void sub_5FB64(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x5F490);
  }
  _Unwind_Resume(a1);
}

void sub_5FCC0(uint64_t a1)
{
  uint64_t v1 = a1;
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = [*(id *)(a1 + 32) fileTransferGUIDs];
      int v4 = (void *)v3;
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)) {
        CFStringRef v5 = @"YES";
      }
      else {
        CFStringRef v5 = @"NO";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v39 = v3;
      __int16 v40 = 2112;
      CFStringRef v41 = v5;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, "  All done transfer set for: %@   success: %@", buf, 0x16u);
    }
    uint64_t v1 = a1;
  }
  uint64_t v6 = [*(id *)(v1 + 32) guid];
  v36[0] = kAttachmentsAutomationMessageGUIDKey;
  uint64_t v7 = [*(id *)(v1 + 32) guid];
  v37[0] = v7;
  v36[1] = kAttachmentsAutomationSuccessKey;
  uint64_t v8 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)];
  v37[1] = v8;
  v36[2] = kAttachmentsAutomationErrorKey;
  uint64_t v9 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)];
  v37[2] = v9;
  int v10 = +[NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:3];
  AttachmentsAutomationLogMilestoneWithOptionFlags();

  uint64_t v11 = a1;
  os_activity_scope_leave((os_activity_scope_state_t)(*(void *)(*(void *)(a1 + 96) + 8) + 32));
  uint64_t v12 = *(void *)(a1 + 72);
  if (v12)
  {
    (*(void (**)(uint64_t, void, void, void, void, void, void, void, void))(v12 + 16))(v12, *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8) + 24), *(unsigned int *)(*(void *)(*(void *)(a1 + 88) + 8) + 24), *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40), *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24), *(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40), 0);
    uint64_t v11 = a1;
  }
  uint64_t v13 = *(void *)(*(void *)(v11 + 104) + 8);
  __int16 v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = 0;

  uint64_t v15 = *(void *)(*(void *)(a1 + 120) + 8);
  double v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = 0;

  if (IMOSLoggingEnabled())
  {
    CFStringRef v17 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      uint64_t v39 = v18;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "GUIDS failing preview generation %@", buf, 0xCu);
    }
  }
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id obj = *(id *)(a1 + 56);
  id v19 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v19)
  {
    uint64_t v20 = *(void *)v32;
    do
    {
      for (i = 0; i != v19; i = (char *)i + 1)
      {
        if (*(void *)v32 != v20) {
          objc_enumerationMutation(obj);
        }
        uint64_t v22 = *(void **)(*((void *)&v31 + 1) + 8 * i);
        if (IMOSLoggingEnabled())
        {
          id v23 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            id v24 = [v22 guid];
            int v25 = [v22 messageGUID];
            *(_DWORD *)buf = 138412546;
            uint64_t v39 = (uint64_t)v24;
            __int16 v40 = 2112;
            CFStringRef v41 = v25;
            _os_log_impl(&dword_0, v23, OS_LOG_TYPE_INFO, "Auto accepting transfer: %@ for message GUID: %@", buf, 0x16u);
          }
        }
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_601E8;
        block[3] = &unk_DEF88;
        id v29 = *(id *)(a1 + 64);
        uint64_t v30 = v22;
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
      }
      id v19 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
    }
    while (v19);
  }
}

void sub_601E8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) guid];
  [v1 _handleFileTransfer:v2 acceptedWithPath:0 autoRename:1 overwrite:1 options:0 postNotification:1];
}

uint64_t sub_60250(uint64_t a1, char a2)
{
  if (IMOSLoggingEnabled())
  {
    int v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "Network availability check complete:", (uint8_t *)&v10, 2u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    CFStringRef v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      CFStringRef v6 = @"YES";
      if ((a2 & 2) == 0) {
        CFStringRef v6 = @"NO";
      }
      int v10 = 138412290;
      CFStringRef v11 = v6;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "   Cell available: %@", (uint8_t *)&v10, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      CFStringRef v8 = @"YES";
      if ((a2 & 1) == 0) {
        CFStringRef v8 = @"NO";
      }
      int v10 = 138412290;
      CFStringRef v11 = v8;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "   WiFi available: %@", (uint8_t *)&v10, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_60A5C(void *a1)
{
  id v2 = [(id)qword_EB408 objectForKey:a1[4]];
  if (v2)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = a1[4];
        int v6 = 138412290;
        uint64_t v7 = v4;
        _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "Timed out waiting for peer attachment completion for attachment: %@", (uint8_t *)&v6, 0xCu);
      }
    }
    v2[2](v2, a1[5], a1[6], 0, 0, 0, 0);
    [(id)qword_EB408 removeObjectForKey:a1[4]];
    if (![(id)qword_EB408 count])
    {
      CFStringRef v5 = (void *)qword_EB408;
      qword_EB408 = 0;
    }
  }
}

id sub_628E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) remotefileRequest:*(void *)(a1 + 40) attempts:*(void *)(a1 + 48) + 1 shouldRetry:1];
}

void sub_628F8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, int a7, void *a8)
{
  id v47 = a2;
  uint64_t v15 = a3;
  id v49 = a4;
  id v16 = a5;
  id v17 = a8;
  if (IMOSLoggingEnabled())
  {
    uint64_t v18 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      CFStringRef v19 = @"NO";
      CFStringRef v20 = *(const __CFString **)(a1 + 32);
      if (a7) {
        CFStringRef v19 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      CFStringRef v52 = v20;
      __int16 v53 = 2112;
      CFStringRef v54 = v19;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "Transcode processing complete for transfer: %@  (Attempted Transcode: %@)", buf, 0x16u);
    }
  }
  int v21 = IMOSLoggingEnabled();
  if (a6)
  {
    if (v21)
    {
      uint64_t v22 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        CFStringRef v52 = v15;
        _os_log_impl(&dword_0, v22, OS_LOG_TYPE_INFO, "Transcoding succeeded with output URLs: %@", buf, 0xCu);
      }
    }
    id v23 = [(__CFString *)v15 lastObject];
    id v24 = +[NSData dataWithContentsOfURL:v23];
    int v25 = v24;
    uint64_t v26 = *(void *)(*(void *)(a1 + 64) + 8);
    if (*(unsigned char *)(v26 + 24))
    {
      BOOL v27 = 1;
    }
    else
    {
      BOOL v27 = (unint64_t)[v24 length] > 0x100000;
      uint64_t v26 = *(void *)(*(void *)(a1 + 64) + 8);
    }
    *(unsigned char *)(v26 + 24) = v27;
    if (IMOSLoggingEnabled())
    {
      uint64_t v37 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        int v38 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
        CFStringRef v39 = (const __CFString *)[v25 length];
        CFStringRef v40 = @"YES";
        if (!v38) {
          CFStringRef v40 = @"NO";
        }
        *(_DWORD *)buf = 138412546;
        CFStringRef v52 = v40;
        __int16 v53 = 2048;
        CFStringRef v54 = v39;
        _os_log_impl(&dword_0, v37, OS_LOG_TYPE_INFO, "useLocalPeersFileAPI: %@ fileSize:%lu", buf, 0x16u);
      }
    }
    [*(id *)(a1 + 40) _sendAttachmentToPeerDevice:*(void *)(a1 + 72) fileTransferGUID:*(void *)(a1 + 48) messageGuid:*(void *)(a1 + 56) fileURL:v23 useLocalPeersFileAPI:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) error:0];
  }
  else
  {
    if (v21)
    {
      CFStringRef v28 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v28, OS_LOG_TYPE_INFO, "Transcoding Failed for Peer Relay:", buf, 2u);
      }
    }
    id v29 = objc_msgSend(*(id *)(a1 + 32), "localURL", v47, v49);
    id v23 = [v29 path];

    if (v23)
    {
      uint64_t v30 = +[NSFileManager defaultManager];
      long long v31 = [v30 attributesOfItemAtPath:v23 error:0];

      long long v32 = [v31 objectForKeyedSubscript:NSFileSize];
      CFStringRef v33 = (const __CFString *)[v32 longValue];

      uint64_t v34 = *(void *)(*(void *)(a1 + 64) + 8);
      if (*(unsigned char *)(v34 + 24)) {
        BOOL v35 = 1;
      }
      else {
        BOOL v35 = (unint64_t)v33 > 0x100000;
      }
      char v36 = v35;
      *(unsigned char *)(v34 + 24) = v36;
    }
    else
    {
      CFStringRef v33 = 0;
    }
    if (IMOSLoggingEnabled())
    {
      CFStringRef v41 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) {
          CFStringRef v42 = @"YES";
        }
        else {
          CFStringRef v42 = @"NO";
        }
        *(_DWORD *)buf = 138412546;
        CFStringRef v52 = v42;
        __int16 v53 = 2048;
        CFStringRef v54 = v33;
        _os_log_impl(&dword_0, v41, OS_LOG_TYPE_INFO, "useLocalPeersFileAPI: %@ fileSize:%ld", buf, 0x16u);
      }
    }
    uint64_t v43 = *(void *)(a1 + 72);
    uint64_t v45 = *(void *)(a1 + 48);
    uint64_t v44 = *(void *)(a1 + 56);
    id v46 = *(void **)(a1 + 40);
    int v25 = [*(id *)(a1 + 32) localURL];
    [v46 _sendAttachmentToPeerDevice:v43 fileTransferGUID:v45 messageGuid:v44 fileURL:v25 useLocalPeersFileAPI:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) error:5];
  }
}

void sub_62E04(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  int v8 = IMOSLoggingEnabled();
  if (!v6 || v7)
  {
    if (v8)
    {
      int v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v16 = 138412290;
        id v17 = v7;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "File safe render failed for Peer Relay: %@", (uint8_t *)&v16, 0xCu);
      }
    }
    uint64_t v11 = *(void *)(a1 + 72);
    uint64_t v13 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = [*(id *)(a1 + 56) localURL];
    [v13 _sendAttachmentToPeerDevice:v11 fileTransferGUID:v12 messageGuid:v14 fileURL:v15 useLocalPeersFileAPI:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) error:5];
  }
  else
  {
    if (v8)
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16) = 0;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "File safe render success.", (uint8_t *)&v16, 2u);
      }
    }
    [*(id *)(a1 + 32) _sendAttachmentToPeerDevice:*(void *)(a1 + 72) fileTransferGUID:*(void *)(a1 + 40) messageGuid:*(void *)(a1 + 48) fileURL:v6 useLocalPeersFileAPI:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) error:0];
  }
}

id sub_62FD8(uint64_t a1)
{
  return [*(id *)(a1 + 32) remotefileRequest:*(void *)(a1 + 40) attempts:*(void *)(a1 + 48) + 1 shouldRetry:1];
}

id sub_62FF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) remotefileRequest:*(void *)(a1 + 40) attempts:*(void *)(a1 + 48) + 1 shouldRetry:1];
}

void sub_63548(void *a1)
{
  id v2 = [*(id *)(a1[4] + 24) objectForKey:a1[5]];
  if (v2)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = a1[6];
        int v5 = 138412290;
        uint64_t v6 = v4;
        _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "PayloadAttachments. Timed out waiting for a payload data from companion for message guid %@", (uint8_t *)&v5, 0xCu);
      }
    }
    v2[2](v2, 0);
  }
}

id sub_6449C(uint64_t a1)
{
  return [*(id *)(a1 + 32) handlePayloadDataRequest:*(void *)(a1 + 40) attempts:*(void *)(a1 + 48) + 1];
}

id sub_647E0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) sendPayloadData:*(void *)(a1 + 40) messageGUID:*(void *)(a1 + 48) sessionInfo:a2 topic:*(void *)(a1 + 56) completionBlock:*(void *)(a1 + 64)];
}

void sub_64CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (IMOSLoggingEnabled())
  {
    int v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 138413058;
      uint64_t v11 = v9;
      __int16 v12 = 2048;
      uint64_t v13 = a2;
      __int16 v14 = 2048;
      uint64_t v15 = a3;
      __int16 v16 = 2048;
      uint64_t v17 = a4;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Send progress updated to for transferID %@ %lld of %lld (%lld bps)", (uint8_t *)&v10, 0x2Au);
    }
  }
}

void sub_64E38(void *a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10)
{
  id v40 = a2;
  id v17 = a4;
  id v39 = a5;
  id v18 = a6;
  id v19 = a7;
  id v20 = a8;
  id v21 = a9;
  uint64_t v22 = +[NSFileManager defaultManager];
  uint64_t v23 = a1[4];
  id v41 = 0;
  [v22 removeItemAtPath:v23 error:&v41];
  id v24 = v41;

  int v25 = IMOSLoggingEnabled();
  if (v24)
  {
    if (!v25) {
      goto LABEL_10;
    }
    uint64_t v26 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      uint64_t v27 = a1[4];
      *(_DWORD *)buf = 138412546;
      uint64_t v43 = v27;
      __int16 v44 = 2112;
      id v45 = v24;
      _os_log_impl(&dword_0, v26, OS_LOG_TYPE_INFO, "PayloadAttachments. Could not delete temp payload data file at path %@ error %@", buf, 0x16u);
    }
  }
  else
  {
    if (!v25) {
      goto LABEL_10;
    }
    uint64_t v26 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = a1[4];
      *(_DWORD *)buf = 138412290;
      uint64_t v43 = v28;
      _os_log_impl(&dword_0, v26, OS_LOG_TYPE_INFO, "deleted temp file at path %@", buf, 0xCu);
    }
  }

LABEL_10:
  int v29 = IMOSLoggingEnabled();
  if (a3)
  {
    if (v29)
    {
      uint64_t v30 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        uint64_t v31 = a1[5];
        *(_DWORD *)buf = 138414082;
        uint64_t v43 = v31;
        __int16 v44 = 2112;
        id v45 = v40;
        __int16 v46 = 2112;
        CFStringRef v47 = @"YES";
        __int16 v48 = 2112;
        id v49 = v17;
        __int16 v50 = 2112;
        id v51 = v18;
        __int16 v52 = 2112;
        id v53 = v19;
        __int16 v54 = 2112;
        id v55 = v20;
        __int16 v56 = 2048;
        uint64_t v57 = a10;
        _os_log_impl(&dword_0, v30, OS_LOG_TYPE_INFO, "Payload upload completed transferID %@ sent path %@ success %@ error %@ ownerID %@ signature %@ requestURLString %@ outFileSize %ld", buf, 0x52u);
      }
    }
    long long v32 = (__CFDictionary *)objc_alloc_init((Class)NSMutableDictionary);
    CFStringRef v33 = v32;
    if (v18) {
      CFDictionarySetValue(v32, @"o", v18);
    }
    if (v19) {
      CFDictionarySetValue(v33, @"s", v19);
    }
    if (v20) {
      CFDictionarySetValue(v33, @"r", v20);
    }
    if (v21) {
      CFDictionarySetValue(v33, @"e", v21);
    }
    uint64_t v34 = +[NSNumber numberWithInteger:a10];
    if (v34) {
      CFDictionarySetValue(v33, @"f", v34);
    }
  }
  else
  {
    if (v29)
    {
      BOOL v35 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        uint64_t v36 = a1[5];
        CFStringRef v37 = (const __CFString *)a1[6];
        *(_DWORD *)buf = 138412802;
        uint64_t v43 = v36;
        __int16 v44 = 2112;
        id v45 = v17;
        __int16 v46 = 2112;
        CFStringRef v47 = v37;
        _os_log_impl(&dword_0, v35, OS_LOG_TYPE_INFO, "PayloadAttachments. Failed uploading payload attachment %@ with error %@ msg GUID %@", buf, 0x20u);
      }
    }
    CFStringRef v33 = 0;
  }
  uint64_t v38 = a1[7];
  if (v38) {
    (*(void (**)(uint64_t, __CFDictionary *, uint64_t))(v38 + 16))(v38, v33, a3);
  }
}

void sub_657F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (IMOSLoggingEnabled())
  {
    int v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 138413058;
      uint64_t v11 = v9;
      __int16 v12 = 2048;
      uint64_t v13 = a2;
      __int16 v14 = 2048;
      uint64_t v15 = a3;
      __int16 v16 = 2048;
      uint64_t v17 = a4;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Downlaod progress updated to for transferID %@ %lld of %lld (%lld bps)", (uint8_t *)&v10, 0x2Au);
    }
  }
}

void sub_65934(uint64_t a1, void *a2, void *a3, int a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a5;
  id v14 = a6;
  int v15 = IMOSLoggingEnabled();
  if (a4)
  {
    if (!v15) {
      goto LABEL_10;
    }
    __int16 v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      int v23 = 138412546;
      uint64_t v24 = v17;
      __int16 v25 = 2112;
      id v26 = v12;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "Download payload data for message %@ to path %@", (uint8_t *)&v23, 0x16u);
    }
  }
  else
  {
    if (!v15) {
      goto LABEL_10;
    }
    __int16 v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      int v23 = 138412546;
      uint64_t v24 = v18;
      __int16 v25 = 2112;
      id v26 = v13;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "PayloadAttachments Failed downloading payload data for message %@ error %@", (uint8_t *)&v23, 0x16u);
    }
  }

LABEL_10:
  if (*(void *)(a1 + 40))
  {
    if ([v12 length])
    {
      id v19 = +[NSURL fileURLWithPath:v12];
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        id v20 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          uint64_t v21 = *(void *)(a1 + 32);
          CFStringRef v22 = @"NO";
          int v23 = 138412802;
          if (a4) {
            CFStringRef v22 = @"YES";
          }
          uint64_t v24 = v21;
          __int16 v25 = 2112;
          id v26 = v13;
          __int16 v27 = 2112;
          CFStringRef v28 = v22;
          _os_log_impl(&dword_0, v20, OS_LOG_TYPE_INFO, "PayloadAttachments: Failed to get path for message %@ with error %@, result %@", (uint8_t *)&v23, 0x20u);
        }
      }
      id v19 = 0;
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_65D90(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = v10;
  id v12 = &IMStickerUserInfoLayoutIntentKey_ptr;
  if (!v8 || v10)
  {
    id v13 = IMLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_96918((uint64_t)v11, v13);
    }

    if ((IMIsRunningInAutomation() & 1) == 0)
    {
      id v14 = IMSafeTemporaryDirectory();
      int v15 = [v14 path];

      if ([v15 length])
      {
        __int16 v16 = +[IMLockdownManager sharedInstance];
        unsigned int v17 = [v16 isInternalInstall];

        uint64_t v18 = &IMStickerUserInfoLayoutIntentKey_ptr;
        if (v17)
        {
          v44[0] = v15;
          v44[1] = @"MessagesBlastDoorFailedPayloads";
          id v19 = objc_msgSend(*(id *)(a1 + 32), "im_lastPathComponent");
          id v20 = objc_msgSend(*(id *)(a1 + 40), "im_lastPathComponent");
          uint64_t v21 = +[NSString stringWithFormat:@"PluginPayloadData-%@-%@.plugindata", v19, v20];
          v44[2] = v21;
          CFStringRef v22 = +[NSArray arrayWithObjects:v44 count:3];
          int v23 = +[NSURL fileURLWithPathComponents:v22];

          uint64_t v24 = [v8 base64EncodedStringWithOptions:0];
          if (IMOSLoggingEnabled())
          {
            __int16 v25 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              id v41 = v24;
              _os_log_impl(&dword_0, v25, OS_LOG_TYPE_INFO, "Incoming plugin message data string: %@", buf, 0xCu);
            }
          }
          id v26 = +[NSFileManager defaultManager];
          __int16 v27 = [v23 URLByDeletingLastPathComponent];
          [v26 createDirectoryAtURL:v27 withIntermediateDirectories:1 attributes:0 error:0];

          if (([v8 writeToURL:v23 atomically:1] & 1) == 0)
          {
            if (IMOSLoggingEnabled())
            {
              CFStringRef v28 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                id v41 = v23;
                _os_log_impl(&dword_0, v28, OS_LOG_TYPE_INFO, "Failed to write error payload to path %@", buf, 0xCu);
              }
            }
            int v23 = 0;
          }

          uint64_t v18 = &IMStickerUserInfoLayoutIntentKey_ptr;
        }
        else
        {
          int v23 = 0;
        }
        uint64_t v29 = *(void *)(a1 + 40);
        uint64_t v30 = [v18[178] stringWithFormat:@"%@", &off_E37E0];
        +[IMBlastdoor sendBlastDoorError:v11 guid:v29 messageTypeString:v30 senderURI:*(void *)(a1 + 48) senderToken:*(void *)(a1 + 56) messageContext:0 payloadAttachmentURL:v23];
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    id v12 = &IMStickerUserInfoLayoutIntentKey_ptr;
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  uint64_t v31 = [v12[162] defaultManager];
  uint64_t v32 = *(void *)(a1 + 64);
  id v39 = 0;
  unsigned __int8 v33 = [v31 removeItemAtURL:v32 error:&v39];
  id v34 = v39;

  int v35 = IMOSLoggingEnabled();
  if (v33)
  {
    if (v35)
    {
      uint64_t v36 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        CFStringRef v37 = *(void **)(a1 + 64);
        *(_DWORD *)buf = 138412290;
        id v41 = v37;
        _os_log_impl(&dword_0, v36, OS_LOG_TYPE_INFO, "deleted temp file at path %@", buf, 0xCu);
      }
LABEL_32:
    }
  }
  else if (v35)
  {
    uint64_t v36 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      uint64_t v38 = *(void **)(a1 + 64);
      *(_DWORD *)buf = 138412546;
      id v41 = v38;
      __int16 v42 = 2112;
      id v43 = v34;
      _os_log_impl(&dword_0, v36, OS_LOG_TYPE_INFO, "PayloadAttachments. Could not delete temp payload data file at path %@ error %@", buf, 0x16u);
    }
    goto LABEL_32;
  }
}

void sub_6667C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v7 = v5;
  if (a3)
  {
    if (v5)
    {
      [*(id *)(a1 + 32) _processDownloadedPayload:v5 forMessageGUID:*(void *)(a1 + 40) balloonBundleID:*(void *)(a1 + 48) fromIdentifier:*(void *)(a1 + 56) senderToken:*(void *)(a1 + 64) withCompletionBlock:*(void *)(a1 + 72)];
      goto LABEL_7;
    }
    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
  }
  else
  {
    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
  }
  v6();
LABEL_7:
}

void sub_671B4(id a1)
{
  qword_EC520 = objc_alloc_init(MessageEngramGroupController);
}

id sub_67264(uint64_t a1)
{
  return _[*(id *)(a1 + 32) appendMiddleware:*(void *)(a1 + 40)];
}

void sub_673F8(uint64_t a1, void *a2)
{
  [*(id *)(a1 + 32) _checkAndSetUpContext:a2];
  id v4 = [objc_alloc((Class)ENStableGroupID) initWithDataRepresentation:*(void *)(a1 + 40)];
  if (v4)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_675AC;
    v8[3] = &unk_DF230;
    v8[4] = *(void *)(a1 + 56);
    [a2 fetchLatestGroupWithStableID:v4 completion:v8];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        id v6 = [*(id *)(a1 + 48) engramID];
        *(_DWORD *)buf = 138412290;
        id v10 = v6;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "Couldn't create a valid stableID with for engramid: %@", buf, 0xCu);
      }
    }
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_67644;
    v7[3] = &unk_DF258;
    v7[4] = *(void *)(a1 + 56);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);
  }
}

void sub_675AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_67628;
  block[3] = &unk_DF208;
  uint64_t v3 = *(void *)(a1 + 32);
  block[5] = a3;
  block[6] = v3;
  void block[4] = a2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

uint64_t sub_67628(void *a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, void))(a1[6] + 16))(a1[6], a1[4], 1, a1[5]);
}

uint64_t sub_67644(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:EngramControllerErrorDomain code:3 userInfo:0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, void, NSError *))(v1 + 16);

  return v3(v1, 0, 0, v2);
}

id sub_67C04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a4)
  {
    if (IMOSLoggingEnabled())
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        id v6 = [*(id *)(a1 + 32) engramID];
        uint64_t v7 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        id v29 = v6;
        __int16 v30 = 2112;
        uint64_t v31 = v7;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "We failed to look up the engram group for the id: %@ on chat: %@", buf, 0x16u);
      }
    }
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 96) + 16))(*(void *)(a1 + 96));
  }
  else
  {
    unsigned int v11 = [*(id *)(a1 + 32) pendingENGroupParticipantUpdate];
    int v12 = IMOSLoggingEnabled();
    if (v11)
    {
      if (v12)
      {
        id v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "We are still pending participants on send so let's try to update the group with destinations", buf, 2u);
        }
      }
      id v14 = *(void **)(a1 + 80);
      uint64_t v15 = *(void *)(a1 + 88);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_67EC8;
      v22[3] = &unk_DF2A8;
      uint64_t v16 = *(void *)(a1 + 96);
      int8x16_t v17 = *(int8x16_t *)(a1 + 32);
      int8x16_t v23 = vextq_s8(v17, v17, 8uLL);
      uint64_t v24 = *(void *)(a1 + 48);
      long long v25 = *(_OWORD *)(a1 + 56);
      uint64_t v26 = *(void *)(a1 + 72);
      uint64_t v27 = v16;
      return [v14 _createParticipantsAndUpdateGroup:v17.i64[0] addParticipantsURIs:0 removeParticipantURIs:0 fromID:(void)v25 service:v15 completion:v22];
    }
    else
    {
      if (v12)
      {
        uint64_t v18 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          id v19 = [*(id *)(a1 + 32) engramID];
          *(_DWORD *)buf = 138412290;
          id v29 = v19;
          _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "We will be sending message to group with engram id: %@", buf, 0xCu);
        }
      }
      if (a3) {
        uint64_t v20 = a2;
      }
      else {
        uint64_t v20 = 0;
      }
      LOBYTE(v21) = 1;
      return (id)(*(uint64_t (**)(void, void, void, void, void, void, void, uint64_t, void))(*(void *)(a1 + 96) + 16))(*(void *)(a1 + 96), *(void *)(a1 + 40), *(void *)(a1 + 32), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), v20, v21);
    }
  }
}

uint64_t sub_67EC8(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = IMOSLoggingEnabled();
  if (a3)
  {
    if (v5)
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "We successfully updated the group with our pending participants, sending to the updated group we got back", buf, 2u);
      }
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16))(*(void *)(a1 + 80));
  }
  else
  {
    if (v5)
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)id v9 = 0;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "We weren't able to update the participants so sending with device to device crypto", v9, 2u);
      }
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16))(*(void *)(a1 + 80));
  }
}

uint64_t sub_6801C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  int v7 = IMOSLoggingEnabled();
  if (a3)
  {
    if (v7)
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "We successfully created the engram group prior to send", buf, 2u);
      }
    }
  }
  else if (v7)
  {
    id v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v12 = a4;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "We failed to create the engram group prior to send with error: %@", buf, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16))(*(void *)(a1 + 80));
}

void sub_68204(id *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    if (IMOSLoggingEnabled())
    {
      int v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        id v6 = [a1[4] engramID];
        *(_DWORD *)buf = 138412290;
        id v18 = v6;
        int v7 = "We failed to look up the group for engram id: %@ to compare to the incoming group";
LABEL_5:
        id v8 = v5;
LABEL_10:
        uint32_t v10 = 12;
LABEL_11:
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, v7, buf, v10);
      }
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    objc_msgSend(objc_msgSend(a1[5], "groupID"), "compare:withResult:error:", objc_msgSend(a2, "groupID"), &v16, &v15);
    if (v15)
    {
      if (IMOSLoggingEnabled())
      {
        id v9 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v18 = v15;
          int v7 = "There was an error comparing groupIDs on message receive: %@";
          id v8 = v9;
          goto LABEL_10;
        }
      }
    }
    else
    {
      if (v16 != 1)
      {
        if (v16)
        {
          if (v16 != -1) {
            return;
          }
          if (!IMOSLoggingEnabled()) {
            return;
          }
          unsigned int v11 = OSLogHandleForIMFoundationCategory();
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
            return;
          }
          *(_WORD *)buf = 0;
          int v7 = "Incoming groupID is older than our current group so we want to bail on converging the participants";
        }
        else
        {
          if (!IMOSLoggingEnabled()) {
            return;
          }
          unsigned int v11 = OSLogHandleForIMFoundationCategory();
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
            return;
          }
          *(_WORD *)buf = 0;
          int v7 = "Incoming groupID is older than our current group so we want to bail on converging the participants";
        }
        id v8 = v11;
        uint32_t v10 = 2;
        goto LABEL_11;
      }
      if (IMOSLoggingEnabled())
      {
        uint64_t v12 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Incoming groupID is newer than our current group's so we want to converge the participants", buf, 2u);
        }
      }
      id v13 = [a1[6] _callerURIForChat:a1[4]];
      if ([v13 length])
      {
        [a1[6] _updateLocalParticipantsFromEngroup:a1[5] chat:a1[4] fromID:v13];
        return;
      }
      if (IMOSLoggingEnabled())
      {
        int v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          id v14 = a1[4];
          *(_DWORD *)buf = 138412290;
          id v18 = v14;
          int v7 = "We could not update the local chat's participants to the incoming group's participants: %@";
          goto LABEL_5;
        }
      }
    }
  }
}

uint64_t sub_68A04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_68C6C(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    id v4 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_68D8C;
    v7[3] = &unk_DF348;
    long long v8 = *(_OWORD *)(a1 + 40);
    id v9 = a2;
    long long v10 = *(_OWORD *)(a1 + 56);
    return [v4 performGroupTask:v7];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "We didn't get any ENParticipants back from participantsForDestinations --> Not creating engram group", buf, 2u);
      }
    }
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_68D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) _checkAndSetUpContext:a2];
  if (a3)
  {
    if (IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v14 = a2;
        __int16 v15 = 2112;
        uint64_t v16 = a3;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "We failed to performGroupTask to create group with ENGroupContext: %@ error: %@", buf, 0x16u);
      }
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_68F24;
    block[3] = &unk_DF258;
    void block[4] = *(void *)(a1 + 64);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
  else
  {
    int v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 64);
    _[v7 _createGroupFromGroupContext:a2 chat:v8 enparticipants:v9 destinations:v10 completion:v11];
  }
}

uint64_t sub_68F24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_6908C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_69110;
  block[3] = &unk_DF398;
  void block[4] = a2;
  void block[5] = a3;
  uint64_t v5 = *(void *)(a1 + 48);
  long long v4 = *(_OWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

uint64_t sub_69110(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (!v2 || *(void *)(a1 + 40))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        long long v4 = *(void **)(a1 + 56);
        uint64_t v6 = *(void *)(a1 + 32);
        uint64_t v5 = *(void *)(a1 + 40);
        int v14 = 138412802;
        id v15 = v4;
        __int16 v16 = 2112;
        uint64_t v17 = v5;
        __int16 v18 = 2112;
        uint64_t v19 = v6;
        _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "We failed to create an engramGroup for engramParticipants: %@ with error: %@ group: %@", (uint8_t *)&v14, 0x20u);
      }
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  id v8 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(v2, "groupID"), "stableGroupID"), "dataRepresentation"), "__im_engramStringRepresentation");
  id v9 = [v8 length];
  int v10 = IMOSLoggingEnabled();
  if (!v9)
  {
    if (v10)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        id v13 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "groupID"), "stableGroupID");
        int v14 = 138412290;
        id v15 = v13;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "stableIDStringRepresentation has length 0 for stableID: %@", (uint8_t *)&v14, 0xCu);
      }
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  if (v10)
  {
    uint64_t v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v14 = 138412290;
      id v15 = v8;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "Successfully created an engramGroup with stableGroupID stringRep: %@", (uint8_t *)&v14, 0xCu);
    }
  }
  [*(id *)(a1 + 48) updateEngramID:v8];
  [*(id *)(a1 + 48) setCreateEngramGroupOnMessageSend:0];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_694F4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v8 = (char *)[a4 code];
  int v9 = IMOSLoggingEnabled();
  if (v8 == (unsigned char *)&dword_0 + 1)
  {
    if (v9)
    {
      int v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        LOWORD(v19) = 0;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "We tried to add or remove participants to the group, but the group had already been updated", (uint8_t *)&v19, 2u);
      }
    }
    BOOL v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "_URIsFromApplicationData:", objc_msgSend(a2, "sharedApplicationData")), "count") == 0;
    int v12 = IMOSLoggingEnabled();
    if (v11)
    {
      if (v12)
      {
        __int16 v18 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          LOWORD(v19) = 0;
          _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "//**-----We did not get back destinations and cannot update the group!!! Please file a radar!!!-----*///", (uint8_t *)&v19, 2u);
        }
      }
      +[NSError errorWithDomain:EngramControllerErrorDomain code:5 userInfo:0];
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else if (v12)
    {
      id v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        CFStringRef v14 = *(const __CFString **)(a1 + 40);
        int v19 = 138412290;
        CFStringRef v20 = v14;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Going to retry adding participants: %@", (uint8_t *)&v19, 0xCu);
      }
    }
  }
  else
  {
    if (v9)
    {
      id v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        CFStringRef v16 = @"NO";
        if (a3) {
          CFStringRef v16 = @"YES";
        }
        int v19 = 138412290;
        CFStringRef v20 = v16;
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Going to call completion on adding participants with success: %@", (uint8_t *)&v19, 0xCu);
      }
    }
    if (a3) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = 0;
    }
    (*(void (**)(void, void *, uint64_t, void *))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v17, a3, a4);
  }
}

id sub_6982C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = [*(id *)(a1 + 32) _URIsForChatParticipants:*(void *)(a1 + 40) fromID:*(void *)(a1 + 48)];
    if ([*(id *)(a1 + 56) count]) {
      id v4 = [v4 arrayByAddingObjectsFromArray:*(void *)(a1 + 56)];
    }
    if ([*(id *)(a1 + 64) count]) {
      id v4 = [v4 arrayByExcludingObjectsInArray:*(void *)(a1 + 64)];
    }
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_699F8;
    v9[3] = &unk_DF410;
    uint64_t v5 = *(void **)(a1 + 32);
    v9[4] = *(void *)(a1 + 40);
    void v9[5] = v4;
    v9[6] = v5;
    v9[7] = a2;
    long long v10 = *(_OWORD *)(a1 + 72);
    return [v5 _enparticipantsForDestinations:v4 completion:v9];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [*(id *)(a1 + 40) engramID];
        *(_DWORD *)buf = 138412290;
        id v12 = v8;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "We failed to look up an engram group for engram id: %@ so not updating engram group", buf, 0xCu);
      }
    }
    return (id)(*(uint64_t (**)(void, void, void, NSError *))(*(void *)(a1 + 80) + 16))(*(void *)(a1 + 80), 0, 0, +[NSError errorWithDomain:EngramControllerErrorDomain code:3 userInfo:0]);
  }
}

id sub_699F8(uint64_t a1, void *a2)
{
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "We were able to update the destinations", (uint8_t *)&v13, 2u);
    }
  }
  BOOL v5 = [a2 count] == 0;
  int v6 = IMOSLoggingEnabled();
  if (v5)
  {
    if (v6)
    {
      long long v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        BOOL v11 = (NSNumber *)[*(id *)(a1 + 32) engramID];
        uint64_t v12 = *(void *)(a1 + 40);
        int v13 = 138412546;
        CFStringRef v14 = v11;
        __int16 v15 = 2112;
        uint64_t v16 = v12;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "We failed to create enparticipants when trying to update group [engram id: %@] with destinations: %@", (uint8_t *)&v13, 0x16u);
      }
    }
    +[NSError errorWithDomain:EngramControllerErrorDomain code:4 userInfo:0];
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    if (v6)
    {
      int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a2 count]);
        int v13 = 138412290;
        CFStringRef v14 = v8;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Participants were are updating to for engroup count: %@", (uint8_t *)&v13, 0xCu);
      }
    }
    return [*(id *)(a1 + 48) _updateGroupWithParticipants:*(void *)(a1 + 56) chat:*(void *)(a1 + 32) service:*(void *)(a1 + 64) participants:a2 destinations:*(void *)(a1 + 40) completion:*(void *)(a1 + 72)];
  }
}

void sub_69CA8(uint64_t a1, void *a2, uint64_t a3)
{
  [*(id *)(a1 + 32) _checkAndSetUpContext:a2];
  if (a3)
  {
    if (IMOSLoggingEnabled())
    {
      int v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v17 = a3;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "We failed to perform the group task to update the participants with error: %@", buf, 0xCu);
      }
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_69E58;
    block[3] = &unk_DF460;
    uint64_t v7 = *(void *)(a1 + 72);
    void block[4] = a3;
    void block[5] = v7;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
  else
  {
    id v8 = [*(id *)(a1 + 32) _createApplicationDataForDestinations:*(void *)(a1 + 40)];
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_69E74;
    v12[3] = &unk_DF4B0;
    long long v11 = *(_OWORD *)(a1 + 64);
    long long v13 = *(_OWORD *)(a1 + 32);
    long long v14 = v11;
    [a2 updateGroup:v9 withParticipants:v10 sharedApplicationData:v8 completion:v12];
  }
}

uint64_t sub_69E58(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, *(void *)(a1 + 32));
}

void sub_69E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_69EF0;
  v4[3] = &unk_DF488;
  v4[4] = a2;
  v4[5] = a3;
  long long v3 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v6 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);
}

uint64_t sub_69EF0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_14;
    }
    long long v11 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
      goto LABEL_14;
    }
    id v12 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "groupID"), "stableGroupID"), "dataRepresentation"), "__im_engramStringRepresentation");
    *(_DWORD *)uint64_t v24 = 138412290;
    *(void *)&v24[4] = v12;
    id v8 = "We successfully updated the participants for engroup with stable id: %@";
    uint64_t v9 = v11;
    uint32_t v10 = 12;
    goto LABEL_13;
  }
  if ([v2 code] != (char *)&dword_0 + 1)
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_25;
    }
    __int16 v15 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO)) {
      goto LABEL_25;
    }
    *(_WORD *)uint64_t v24 = 0;
    uint64_t v16 = "Update failed, will need to retry at some point";
    goto LABEL_24;
  }
  unsigned int v5 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "_URIsFromApplicationData:", objc_msgSend(*(id *)(a1 + 32), "sharedApplicationData")), "__imSetFromArray"), "isEqualToSet:", objc_msgSend(*(id *)(a1 + 56), "__imSetFromArray"));
  int v6 = IMOSLoggingEnabled();
  if (!v5)
  {
    if (!v6) {
      goto LABEL_25;
    }
    __int16 v15 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO)) {
      goto LABEL_25;
    }
    *(_WORD *)uint64_t v24 = 0;
    uint64_t v16 = "We need to retry the update, group has already been updated";
LABEL_24:
    _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, v16, v24, 2u);
LABEL_25:
    uint64_t v14 = 0;
    goto LABEL_26;
  }
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = OSLogHandleForIMFoundationCategory();
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO)) {
    goto LABEL_14;
  }
  *(_WORD *)uint64_t v24 = 0;
  id v8 = "We got back that we couldn't update the group, but the updated participants match the ones we want to update to s"
       "o marking as successful";
  uint64_t v9 = v7;
  uint32_t v10 = 2;
LABEL_13:
  _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, v8, v24, v10);
LABEL_14:
  if (IMOSLoggingEnabled())
  {
    long long v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "We successfully updated the engram group so we will set pending off", v24, 2u);
    }
  }
  objc_msgSend(*(id *)(a1 + 64), "setPendingENGroupParticipantUpdate:", 0, *(_OWORD *)v24);
  uint64_t v14 = 1;
LABEL_26:
  if (IMOSLoggingEnabled())
  {
    uint64_t v17 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      CFStringRef v18 = @"NO";
      uint64_t v19 = *(void *)(a1 + 72);
      if (v14) {
        CFStringRef v18 = @"YES";
      }
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t v24 = 138413058;
      *(void *)&v24[4] = v19;
      *(_WORD *)&v24[12] = 2112;
      *(void *)&v24[14] = v20;
      __int16 v25 = 2112;
      CFStringRef v26 = v18;
      __int16 v27 = 2112;
      uint64_t v28 = v21;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "About to call completion: %@ group: %@ success: %@ error: %@", v24, 0x2Au);
    }
  }
  if (v14) {
    uint64_t v22 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(*(void *)(a1 + 72) + 16))(*(void *)(a1 + 72), v22, v14, *(void *)(a1 + 40));
}

void sub_6A200(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x6A110);
  }
  _Unwind_Resume(a1);
}

void sub_6A928(uint64_t a1)
{
  id v2 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "groupID"), "stableGroupID"), "dataRepresentation"), "__im_engramStringRepresentation");
  id v3 = [+[IMDChatRegistry sharedInstance] existingChatWithEngramID:v2];
  if (!v3)
  {
    if (!IMOSLoggingEnabled()) {
      return;
    }
    int v6 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v10 = 138412290;
    id v11 = v2;
    uint64_t v7 = "We did not find an IMDChat for engramID: %@";
    id v8 = v6;
LABEL_12:
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v10, 0xCu);
    return;
  }
  BOOL v4 = v3;
  id v5 = [*(id *)(a1 + 40) _callerURIForChat:v3];
  if (![v5 length])
  {
    if (!IMOSLoggingEnabled()) {
      return;
    }
    uint64_t v9 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v10 = 138412290;
    id v11 = v4;
    uint64_t v7 = "We did not get back a callerURI when trying to update the local participants for the chat: %@ ---- PLEASE FILE A RADAR!! -----";
    id v8 = v9;
    goto LABEL_12;
  }
  [*(id *)(a1 + 40) _updateLocalParticipantsFromEngroup:*(void *)(a1 + 48) chat:v4 fromID:v5];
  [v4 setPendingENGroupParticipantUpdate:0];
}

void sub_6AFE0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x6AF98);
  }
  _Unwind_Resume(a1);
}

void sub_6B490(id *a1, void *a2, int a3, int a4)
{
  objc_initWeak(&location, a2);
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      CFStringRef v8 = @"NO";
      if (a3) {
        CFStringRef v8 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      CFStringRef v32 = v8;
      __int16 v33 = 1024;
      LODWORD(v34) = a4;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Done sending FTMessage for refresh request. success %@ error %d", buf, 0x12u);
    }
  }
  uint64_t v9 = [a1[4] refreshRequests];
  int v10 = [a1[5] guid];
  [v9 removeObject:v10];

  id v11 = objc_loadWeakRetained(&location);
  uint64_t v12 = [v11 responseCode];
  if ((int)[v12 intValue] <= 0)
  {
  }
  else
  {
    id v13 = objc_loadWeakRetained(&location);
    uint64_t v14 = [v13 failReason];
    BOOL v15 = (int)[v14 intValue] > 0;

    if (v15)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v16 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          id v17 = objc_loadWeakRetained(&location);
          CFStringRef v18 = [v17 responseCode];
          id v19 = objc_loadWeakRetained(&location);
          uint64_t v20 = [v19 failReason];
          *(_DWORD *)buf = 138412546;
          CFStringRef v32 = v18;
          __int16 v33 = 2112;
          id v34 = v20;
          _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "Received %@/%@ from server following refresh request. re-uploading group photo.", buf, 0x16u);
        }
      }
      uint64_t v21 = [a1[4] session];
      uint64_t v22 = [a1[6] guid];
      int8x16_t v23 = [a1[5] guid];
      uint64_t v24 = [a1[5] chatIdentifier];
      id v25 = [a1[5] style];
      CFStringRef v26 = [a1[5] accountID];
      [v21 sendGroupPhotoUpdate:v22 toChatID:v23 identifier:v24 style:v25 account:v26];

      goto LABEL_17;
    }
  }
  if (a3)
  {
    id v27 = a1[6];
    uint64_t v28 = +[NSDate date];
    [v27 setRefreshDate:v28];

    uint64_t v21 = +[IMDAttachmentStore sharedInstance];
    id v29 = a1[6];
    uint64_t v22 = [v29 messageGUID];
    [v21 storeAttachment:v29 associateWithMessageWithGUID:v22];
LABEL_17:
  }
  objc_destroyWeak(&location);
}

void sub_6B7D0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x6B694);
  }
  objc_destroyWeak(&location);
  _Unwind_Resume(exc_buf);
}

void sub_6BA80(uint64_t a1)
{
  id v3 = objc_alloc_init(MessagePushHandlerCommandHandlerRegistry);
  BOOL v4 = (void *)qword_EC558;
  qword_EC558 = (uint64_t)v3;

  [*(id *)(a1 + 32) addStandardCommandHandlersToRegistry:qword_EC558];
  if ([(id)qword_EC558 isLockedDown]) {
    [*(id *)(a1 + 32) addLockdownCommandHandlersToRegistry:qword_EC558];
  }
}

void sub_6C364(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  __int16 v46 = a2;
  id v39 = a3;
  id v62 = a4;
  id v38 = a5;
  id v45 = a6;
  if (IMOSLoggingEnabled())
  {
    id v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      double v68 = v62;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "_handleIncomingMessageError: %@", buf, 0xCu);
    }
  }
  __int16 v44 = [(NSDictionary *)v39 objectForKey:@"IDSIncomingMessageShouldShowPeerErrors"];
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  id obj = [(MessagePushHandler *)v46 copyHandlersForEnumerating];
  id v52 = [obj countByEnumeratingWithState:&v63 objects:v69 count:16];
  if (v52)
  {
    uint64_t v51 = *(void *)v64;
    do
    {
      for (i = 0; i != v52; i = (char *)i + 1)
      {
        if (*(void *)v64 != v51) {
          objc_enumerationMutation(obj);
        }
        id v13 = *(void **)(*((void *)&v63 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v14 = objc_opt_class();
          id v58 = sub_6CB48(v14, v62, @"fR");
          double v60 = [(NSDictionary *)v62 objectForKey:@"fU"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v15 = [(NSDictionary *)v62 objectForKey:@"fU"];
            id v43 = +[NSData _IDSDataFromBase64String:v15];
            id v49 = (void *)v15;
            goto LABEL_15;
          }
          uint64_t v16 = [(NSDictionary *)v62 objectForKey:@"fU"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [(NSDictionary *)v62 objectForKey:@"fU"];
            id v40 = v54 = (void *)v16;
LABEL_15:
            char v50 = isKindOfClass ^ 1;
          }
          else
          {
            char v50 = 0;
            __int16 v54 = (void *)v16;
          }
          uint64_t v57 = JWUUIDPushObjectToString();
          uint64_t v17 = objc_opt_class();
          __int16 v56 = sub_6CB48(v17, v62, @"tP");
          uint64_t v18 = objc_opt_class();
          id v55 = sub_6CB48(v18, v62, @"sP");
          int v59 = [(NSDictionary *)v62 objectForKey:@"t"];
          objc_opt_class();
          char v19 = objc_opt_isKindOfClass();
          if (v19)
          {
            uint64_t v20 = [(NSDictionary *)v62 objectForKey:@"t"];
            uint64_t v21 = +[NSData _IDSDataFromBase64String:v20];
            __int16 v42 = (void *)v21;
            __int16 v48 = (void *)v20;
            goto LABEL_21;
          }
          uint64_t v22 = [(NSDictionary *)v62 objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v21 = [(NSDictionary *)v62 objectForKey:@"t"];
            id v53 = (void *)v22;
            id v41 = (void *)v21;
LABEL_21:
            char v23 = v19 ^ 1;
          }
          else
          {
            char v23 = 0;
            uint64_t v21 = 0;
            id v53 = (void *)v22;
          }
          uint64_t v24 = objc_opt_class();
          id v25 = sub_6CB48(v24, v62, @"e");
          uint64_t v26 = objc_opt_class();
          id v27 = sub_6CB48(v26, v62, @"D");
          uint64_t v28 = objc_opt_class();
          id v29 = sub_6CB48(v28, v62, @"Dc");
          uint64_t v30 = objc_opt_class();
          uint64_t v31 = sub_6CB48(v30, v62, @"H");
          uint64_t v32 = objc_opt_class();
          __int16 v33 = sub_6CB48(v32, v62, @"aDI");
          if (v44) {
            unsigned __int8 v34 = [v44 BOOLValue];
          }
          else {
            unsigned __int8 v34 = 1;
          }
          LOBYTE(v37) = v34;
          [v13 handler:v46 receivedError:v58 forMessageID:v57 toIdentifier:v56 fromIdentifier:v55 fromToken:v21 timeStamp:v25 fromIDSID:v45 needsDeliveryReceipt:v27 deliveryContext:v29 storageContext:v31 additionalInfo:v33 shouldShowPeerErrors:v37];

          if (v23) {
          int v35 = v53;
          }
          if (v19)
          {

            int v35 = v48;
          }

          if (v50) {
          uint64_t v36 = v54;
          }
          if (isKindOfClass)
          {

            uint64_t v36 = v49;
          }

          continue;
        }
      }
      id v52 = [obj countByEnumeratingWithState:&v63 objects:v69 count:16];
    }
    while (v52);
  }
}

void sub_6CA48()
{
}

id sub_6CB48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  int v6 = [a2 objectForKey:v5];
  if (objc_opt_isKindOfClass())
  {
    id v7 = v6;
  }
  else
  {
    if (v6)
    {
      CFStringRef v8 = +[IMRGLog registration];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_96C38((uint64_t)v5, a1, v8);
      }
    }
    id v7 = 0;
  }

  return v7;
}

void sub_6CC04(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  id v39 = a2;
  unsigned __int8 v34 = a3;
  __int16 v48 = a4;
  id v35 = a5;
  id v38 = a6;
  if (IMOSLoggingEnabled())
  {
    id v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      __int16 v54 = v48;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "_handleIncomingDeliveryReceipt: %@", buf, 0xCu);
    }
  }
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id obj = [(MessagePushHandler *)v39 copyHandlersForEnumerating];
  id v44 = [obj countByEnumeratingWithState:&v49 objects:v55 count:16];
  if (v44)
  {
    uint64_t v43 = *(void *)v50;
    *(void *)&long long v12 = 138412802;
    long long v33 = v12;
    do
    {
      for (i = 0; i != v44; i = (char *)i + 1)
      {
        if (*(void *)v50 != v43) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void **)(*((void *)&v49 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          __int16 v46 = [(NSDictionary *)v48 objectForKey:@"U"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v15 = [(NSDictionary *)v48 objectForKey:@"U"];
            uint64_t v37 = +[NSData _IDSDataFromBase64String:v15];
            id v41 = (void *)v15;
            goto LABEL_15;
          }
          uint64_t v16 = [(NSDictionary *)v48 objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [(NSDictionary *)v48 objectForKey:@"U"];
            uint64_t v36 = v45 = (void *)v16;
LABEL_15:
            char v42 = isKindOfClass ^ 1;
          }
          else
          {
            char v42 = 0;
            id v45 = (void *)v16;
          }
          uint64_t v17 = JWUUIDPushObjectToString();
          uint64_t v18 = objc_opt_class();
          char v19 = sub_6CB48(v18, v48, @"tP");
          uint64_t v20 = objc_opt_class();
          uint64_t v21 = sub_6CB48(v20, v48, @"s");
          uint64_t v22 = objc_opt_class();
          char v23 = sub_6CB48(v22, v48, @"Dc");
          uint64_t v24 = objc_opt_class();
          id v25 = sub_6CB48(v24, v48, @"e");
          uint64_t v26 = objc_opt_class();
          id v27 = sub_6CB48(v26, v48, @"D");
          uint64_t v28 = objc_opt_class();
          id v29 = sub_6CB48(v28, v48, @"Dc");
          uint64_t v30 = objc_opt_class();
          uint64_t v31 = sub_6CB48(v30, v48, @"H");
          objc_msgSend(v14, "handler:messageIDDelivered:toIdentifier:status:deliveryContext:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:", v39, v17, v19, v21, v23, v25, v38, v27, v29, v31, v33, v34, v35);

          if (v42) {
          uint64_t v32 = v45;
          }
          if (isKindOfClass)
          {

            uint64_t v32 = v41;
          }

          continue;
        }
      }
      id v44 = [obj countByEnumeratingWithState:&v49 objects:v55 count:16];
    }
    while (v44);
  }
}

void sub_6D160()
{
}

void sub_6D25C(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  id v40 = a2;
  id v39 = a3;
  long long v51 = a4;
  id v35 = a5;
  id v38 = a6;
  if (IMOSLoggingEnabled())
  {
    id v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v57 = v51;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "_handleIncomingReflectedDeliveryReceipt: %@", buf, 0xCu);
    }
  }
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id obj = [(MessagePushHandler *)v40 copyHandlersForEnumerating];
  id v45 = [obj countByEnumeratingWithState:&v52 objects:v58 count:16];
  if (v45)
  {
    uint64_t v44 = *(void *)v53;
    *(void *)&long long v12 = 138412802;
    long long v34 = v12;
    do
    {
      for (i = 0; i != v45; i = (char *)i + 1)
      {
        if (*(void *)v53 != v44) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void **)(*((void *)&v52 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          long long v49 = [(NSDictionary *)v51 objectForKey:@"U"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v15 = [(NSDictionary *)v51 objectForKey:@"U"];
            uint64_t v37 = +[NSData _IDSDataFromBase64String:v15];
            char v42 = (void *)v15;
            goto LABEL_15;
          }
          uint64_t v16 = [(NSDictionary *)v51 objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [(NSDictionary *)v51 objectForKey:@"U"];
            uint64_t v36 = v46 = (void *)v16;
LABEL_15:
            char v43 = isKindOfClass ^ 1;
          }
          else
          {
            char v43 = 0;
            __int16 v46 = (void *)v16;
          }
          CFStringRef v47 = JWUUIDPushObjectToString();
          __int16 v48 = [(NSDictionary *)v39 objectForKey:@"IDSIncomingMessageDecryptedData"];
          uint64_t v17 = objc_opt_class();
          uint64_t v18 = sub_6CB48(v17, v51, @"tP");
          uint64_t v19 = objc_opt_class();
          uint64_t v20 = sub_6CB48(v19, v51, @"sP");
          uint64_t v21 = objc_opt_class();
          uint64_t v22 = sub_6CB48(v21, v51, @"s");
          uint64_t v23 = objc_opt_class();
          uint64_t v24 = sub_6CB48(v23, v51, @"Dc");
          uint64_t v25 = objc_opt_class();
          uint64_t v26 = sub_6CB48(v25, v51, @"e");
          uint64_t v27 = objc_opt_class();
          uint64_t v28 = sub_6CB48(v27, v51, @"D");
          uint64_t v29 = objc_opt_class();
          uint64_t v30 = sub_6CB48(v29, v51, @"Dc");
          uint64_t v31 = objc_opt_class();
          uint64_t v32 = sub_6CB48(v31, v51, @"H");
          objc_msgSend(v14, "handler:messageIDReflectedDelivered:incomingMessage:toIdentifier:fromIdentifier:status:deliveryContext:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:", v40, v47, v48, v18, v20, v22, v24, v26, v38, v28, v30, v32, v34, v35);

          if (v43) {
          long long v33 = v46;
          }
          if (isKindOfClass)
          {

            long long v33 = v42;
          }

          continue;
        }
      }
      id v45 = [obj countByEnumeratingWithState:&v52 objects:v58 count:16];
    }
    while (v45);
  }
}

void sub_6D808()
{
}

void sub_6D904(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  char v43 = a2;
  uint64_t v36 = a3;
  id v11 = a4;
  id v37 = a5;
  char v42 = a6;
  if (IMOSLoggingEnabled())
  {
    long long v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      long long v63 = v11;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "_handleIncomingReadReceipt: %@", buf, 0xCu);
    }
  }
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id obj = [(MessagePushHandler *)v43 copyHandlersForEnumerating];
  id v49 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
  if (v49)
  {
    uint64_t v48 = *(void *)v59;
    *(void *)&long long v13 = 138412802;
    long long v35 = v13;
    do
    {
      for (i = 0; i != v49; i = (char *)i + 1)
      {
        if (*(void *)v59 != v48) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void **)(*((void *)&v58 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          __int16 v56 = [(NSDictionary *)v11 objectForKey:@"U"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v16 = [(NSDictionary *)v11 objectForKey:@"U"];
            id v41 = +[NSData _IDSDataFromBase64String:v16];
            __int16 v46 = (void *)v16;
            goto LABEL_15;
          }
          uint64_t v17 = [(NSDictionary *)v11 objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [(NSDictionary *)v11 objectForKey:@"U"];
            id v38 = v51 = (void *)v17;
LABEL_15:
            char v47 = isKindOfClass ^ 1;
          }
          else
          {
            char v47 = 0;
            long long v51 = (void *)v17;
          }
          long long v54 = JWUUIDPushObjectToString();
          uint64_t v18 = objc_opt_class();
          long long v53 = sub_6CB48(v18, v11, @"tP");
          uint64_t v19 = objc_opt_class();
          long long v52 = sub_6CB48(v19, v11, @"sP");
          long long v55 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          char v20 = objc_opt_isKindOfClass();
          if (v20)
          {
            uint64_t v21 = [(NSDictionary *)v11 objectForKey:@"t"];
            uint64_t v22 = +[NSData _IDSDataFromBase64String:v21];
            id v40 = (void *)v22;
            id v45 = (void *)v21;
            goto LABEL_21;
          }
          uint64_t v23 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v22 = [(NSDictionary *)v11 objectForKey:@"t"];
            long long v50 = (void *)v23;
            id v39 = (void *)v22;
LABEL_21:
            char v24 = v20 ^ 1;
          }
          else
          {
            char v24 = 0;
            uint64_t v22 = 0;
            long long v50 = (void *)v23;
          }
          uint64_t v25 = objc_opt_class();
          uint64_t v26 = sub_6CB48(v25, v11, @"e");
          uint64_t v27 = objc_opt_class();
          uint64_t v28 = sub_6CB48(v27, v11, @"D");
          uint64_t v29 = objc_opt_class();
          uint64_t v30 = sub_6CB48(v29, v11, @"Dc");
          uint64_t v31 = objc_opt_class();
          uint64_t v32 = sub_6CB48(v31, v11, @"H");
          objc_msgSend(v15, "handler:messageIDRead:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:", v43, v54, v53, v52, v22, v26, v42, v28, v30, v32, v35);

          if (v24) {
          long long v33 = v50;
          }
          if (v20)
          {

            long long v33 = v45;
          }

          if (v47) {
          long long v34 = v51;
          }
          if (isKindOfClass)
          {

            long long v34 = v46;
          }

          continue;
        }
      }
      id v49 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
    }
    while (v49);
  }
}

void sub_6DF54()
{
}

void sub_6E050(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  id v41 = a2;
  id v40 = a3;
  long long v58 = a4;
  id v34 = a5;
  id v39 = a6;
  if (IMOSLoggingEnabled())
  {
    id v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      long long v64 = v58;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "_handleIncomingUpdateAttachments: %@", buf, 0xCu);
    }
  }
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  id obj = [(MessagePushHandler *)v41 copyHandlersForEnumerating];
  id v48 = [obj countByEnumeratingWithState:&v59 objects:v65 count:16];
  if (v48)
  {
    uint64_t v47 = *(void *)v60;
    do
    {
      for (i = 0; i != v48; i = (char *)i + 1)
      {
        if (*(void *)v60 != v47) {
          objc_enumerationMutation(obj);
        }
        long long v13 = *(void **)(*((void *)&v59 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          long long v55 = [(NSDictionary *)v58 objectForKey:@"U"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v14 = [(NSDictionary *)v58 objectForKey:@"U"];
            id v38 = +[NSData _IDSDataFromBase64String:v14];
            uint64_t v44 = (void *)v14;
            goto LABEL_15;
          }
          uint64_t v15 = [(NSDictionary *)v58 objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [(NSDictionary *)v58 objectForKey:@"U"];
            long long v35 = v50 = (void *)v15;
LABEL_15:
            char v46 = isKindOfClass ^ 1;
          }
          else
          {
            char v46 = 0;
            long long v50 = (void *)v15;
          }
          long long v53 = JWUUIDPushObjectToString();
          uint64_t v16 = objc_opt_class();
          long long v52 = sub_6CB48(v16, v58, @"tP");
          uint64_t v17 = objc_opt_class();
          long long v51 = sub_6CB48(v17, v58, @"sP");
          long long v54 = [(NSDictionary *)v58 objectForKey:@"t"];
          objc_opt_class();
          char v56 = objc_opt_isKindOfClass();
          if (v56)
          {
            uint64_t v18 = [(NSDictionary *)v58 objectForKey:@"t"];
            uint64_t v19 = +[NSData _IDSDataFromBase64String:v18];
            id v37 = (void *)v19;
            char v43 = (void *)v18;
            goto LABEL_21;
          }
          uint64_t v20 = [(NSDictionary *)v58 objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v19 = [(NSDictionary *)v58 objectForKey:@"t"];
            id v49 = (void *)v20;
            uint64_t v36 = (void *)v19;
LABEL_21:
            char v45 = v56 ^ 1;
          }
          else
          {
            char v45 = 0;
            uint64_t v19 = 0;
            id v49 = (void *)v20;
          }
          uint64_t v21 = objc_opt_class();
          uint64_t v22 = sub_6CB48(v21, v58, @"e");
          uint64_t v23 = objc_opt_class();
          char v24 = sub_6CB48(v23, v58, @"D");
          uint64_t v25 = objc_opt_class();
          uint64_t v26 = sub_6CB48(v25, v58, @"Dc");
          uint64_t v27 = objc_opt_class();
          uint64_t v28 = sub_6CB48(v27, v58, @"H");
          uint64_t v29 = [(NSDictionary *)v40 objectForKey:@"IDSIncomingMessageDecryptedData"];
          uint64_t v30 = JWDecodeDictionary();
          uint64_t v31 = [v30 objectForKeyedSubscript:@"fileTransferUpdates"];
          [v13 handler:v41 updateAttachments:v53 toIdentifier:v52 fromIdentifier:v51 fromToken:v19 timeStamp:v22 fromIDSID:v39 needsDeliveryReceipt:v24 deliveryContext:v26 storageContext:v28 fileTransferUpdates:v31];

          if (v45) {
          uint64_t v32 = v49;
          }
          if (v56)
          {

            uint64_t v32 = v43;
          }

          if (v46) {
          long long v33 = v50;
          }
          if (isKindOfClass)
          {

            long long v33 = v44;
          }

          continue;
        }
      }
      id v48 = [obj countByEnumeratingWithState:&v59 objects:v65 count:16];
    }
    while (v48);
  }
}

void sub_6E708()
{
}

void sub_6E804(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  char v43 = a2;
  uint64_t v36 = a3;
  id v11 = a4;
  id v37 = a5;
  char v42 = a6;
  if (IMOSLoggingEnabled())
  {
    long long v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      long long v63 = v11;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "_handleIncomingPlayedReceipt: %@", buf, 0xCu);
    }
  }
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id obj = [(MessagePushHandler *)v43 copyHandlersForEnumerating];
  id v49 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
  if (v49)
  {
    uint64_t v48 = *(void *)v59;
    *(void *)&long long v13 = 138412802;
    long long v35 = v13;
    do
    {
      for (i = 0; i != v49; i = (char *)i + 1)
      {
        if (*(void *)v59 != v48) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void **)(*((void *)&v58 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          char v56 = [(NSDictionary *)v11 objectForKey:@"U"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v16 = [(NSDictionary *)v11 objectForKey:@"U"];
            id v41 = +[NSData _IDSDataFromBase64String:v16];
            char v46 = (void *)v16;
            goto LABEL_15;
          }
          uint64_t v17 = [(NSDictionary *)v11 objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [(NSDictionary *)v11 objectForKey:@"U"];
            id v38 = v51 = (void *)v17;
LABEL_15:
            char v47 = isKindOfClass ^ 1;
          }
          else
          {
            char v47 = 0;
            long long v51 = (void *)v17;
          }
          long long v54 = JWUUIDPushObjectToString();
          uint64_t v18 = objc_opt_class();
          long long v53 = sub_6CB48(v18, v11, @"tP");
          uint64_t v19 = objc_opt_class();
          long long v52 = sub_6CB48(v19, v11, @"sP");
          long long v55 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          char v20 = objc_opt_isKindOfClass();
          if (v20)
          {
            uint64_t v21 = [(NSDictionary *)v11 objectForKey:@"t"];
            uint64_t v22 = +[NSData _IDSDataFromBase64String:v21];
            id v40 = (void *)v22;
            char v45 = (void *)v21;
            goto LABEL_21;
          }
          uint64_t v23 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v22 = [(NSDictionary *)v11 objectForKey:@"t"];
            long long v50 = (void *)v23;
            id v39 = (void *)v22;
LABEL_21:
            char v24 = v20 ^ 1;
          }
          else
          {
            char v24 = 0;
            uint64_t v22 = 0;
            long long v50 = (void *)v23;
          }
          uint64_t v25 = objc_opt_class();
          uint64_t v26 = sub_6CB48(v25, v11, @"e");
          uint64_t v27 = objc_opt_class();
          uint64_t v28 = sub_6CB48(v27, v11, @"D");
          uint64_t v29 = objc_opt_class();
          uint64_t v30 = sub_6CB48(v29, v11, @"Dc");
          uint64_t v31 = objc_opt_class();
          uint64_t v32 = sub_6CB48(v31, v11, @"H");
          objc_msgSend(v15, "handler:messageIDPlayed:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:", v43, v54, v53, v52, v22, v26, v42, v28, v30, v32, v35);

          if (v24) {
          long long v33 = v50;
          }
          if (v20)
          {

            long long v33 = v45;
          }

          if (v47) {
          id v34 = v51;
          }
          if (isKindOfClass)
          {

            id v34 = v46;
          }

          continue;
        }
      }
      id v49 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
    }
    while (v49);
  }
}

void sub_6EE54()
{
}

void sub_6EF50(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  char v45 = a2;
  id v38 = a3;
  id v11 = a4;
  id v39 = a5;
  uint64_t v44 = a6;
  if (IMOSLoggingEnabled())
  {
    long long v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      float v67 = v11;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "_handleIncomingSavedReceipt: %@", buf, 0xCu);
    }
  }
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id obj = [(MessagePushHandler *)v45 copyHandlersForEnumerating];
  id v51 = [obj countByEnumeratingWithState:&v62 objects:v68 count:16];
  if (v51)
  {
    uint64_t v50 = *(void *)v63;
    *(void *)&long long v13 = 138412802;
    long long v37 = v13;
    do
    {
      for (i = 0; i != v51; i = (char *)i + 1)
      {
        if (*(void *)v63 != v50) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void **)(*((void *)&v62 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          long long v60 = [(NSDictionary *)v11 objectForKey:@"U"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v16 = [(NSDictionary *)v11 objectForKey:@"U"];
            char v43 = +[NSData _IDSDataFromBase64String:v16];
            uint64_t v48 = (void *)v16;
            goto LABEL_15;
          }
          uint64_t v17 = [(NSDictionary *)v11 objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [(NSDictionary *)v11 objectForKey:@"U"];
            id v40 = v53 = (void *)v17;
LABEL_15:
            char v49 = isKindOfClass ^ 1;
          }
          else
          {
            char v49 = 0;
            long long v53 = (void *)v17;
          }
          long long v58 = JWUUIDPushObjectToString();
          uint64_t v18 = objc_opt_class();
          uint64_t v57 = sub_6CB48(v18, v11, @"aT");
          uint64_t v19 = objc_opt_class();
          char v56 = sub_6CB48(v19, v11, @"tP");
          uint64_t v20 = objc_opt_class();
          long long v55 = sub_6CB48(v20, v11, @"sP");
          uint64_t v21 = objc_opt_class();
          long long v54 = sub_6CB48(v21, v11, @"p");
          long long v59 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          char v22 = objc_opt_isKindOfClass();
          if (v22)
          {
            uint64_t v23 = [(NSDictionary *)v11 objectForKey:@"t"];
            uint64_t v24 = +[NSData _IDSDataFromBase64String:v23];
            char v42 = (void *)v24;
            char v47 = (void *)v23;
            goto LABEL_21;
          }
          uint64_t v25 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v24 = [(NSDictionary *)v11 objectForKey:@"t"];
            long long v52 = (void *)v25;
            id v41 = (void *)v24;
LABEL_21:
            char v26 = v22 ^ 1;
          }
          else
          {
            char v26 = 0;
            uint64_t v24 = 0;
            long long v52 = (void *)v25;
          }
          uint64_t v27 = objc_opt_class();
          uint64_t v28 = sub_6CB48(v27, v11, @"e");
          uint64_t v29 = objc_opt_class();
          uint64_t v30 = sub_6CB48(v29, v11, @"D");
          uint64_t v31 = objc_opt_class();
          uint64_t v32 = sub_6CB48(v31, v11, @"Dc");
          uint64_t v33 = objc_opt_class();
          id v34 = sub_6CB48(v33, v11, @"H");
          objc_msgSend(v15, "handler:messageIDSaved:ofType:toIdentifier:fromIdentifier:groupContext:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:", v45, v58, v57, v56, v55, v54, v24, v28, v44, v30, v32, v34, v37);

          if (v26) {
          long long v35 = v52;
          }
          if (v22)
          {

            long long v35 = v47;
          }

          if (v49) {
          uint64_t v36 = v53;
          }
          if (isKindOfClass)
          {

            uint64_t v36 = v48;
          }

          continue;
        }
      }
      id v51 = [obj countByEnumeratingWithState:&v62 objects:v68 count:16];
    }
    while (v51);
  }
}

void sub_6F5F8()
{
}

void sub_6F6F4(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  char v47 = a2;
  float v67 = a3;
  double v68 = a4;
  id v46 = a5;
  char v45 = a6;
  if (IMOSLoggingEnabled())
  {
    id v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      __int16 v74 = v68;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "_handleIncomingTextMessage: %@", buf, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    long long v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Processing in MessagePushHandler becuase BlastDoor is not enabled for this message yet", buf, 2u);
    }
  }
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id obj = [(MessagePushHandler *)v47 copyHandlersForEnumerating];
  id v13 = [obj countByEnumeratingWithState:&v69 objects:v75 count:16];
  if (v13)
  {
    uint64_t v53 = *(void *)v70;
    uint64_t v43 = IDSIncomingMessageEngramGroupKey;
    do
    {
      uint64_t v14 = 0;
      id v54 = v13;
      do
      {
        if (*(void *)v70 != v53) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void **)(*((void *)&v69 + 1) + 8 * (void)v14);
        if (objc_opt_respondsToSelector())
        {
          long long v62 = [(NSDictionary *)v67 objectForKey:@"IDSIncomingMessageDecryptedData"];
          long long v61 = [(NSDictionary *)v67 objectForKey:@"IDSIncomingMessageOriginalEncryptionType"];
          long long v64 = [(NSDictionary *)v68 objectForKey:@"U"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v16 = [(NSDictionary *)v68 objectForKey:@"U"];
            char v42 = +[NSData _IDSDataFromBase64String:v16];
            uint64_t v50 = (void *)v16;
            goto LABEL_19;
          }
          uint64_t v17 = [(NSDictionary *)v68 objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [(NSDictionary *)v68 objectForKey:@"U"];
            id v39 = v57 = (void *)v17;
LABEL_19:
            char v52 = isKindOfClass ^ 1;
          }
          else
          {
            char v52 = 0;
            uint64_t v57 = (void *)v17;
          }
          long long v60 = JWUUIDPushObjectToString();
          uint64_t v18 = objc_opt_class();
          long long v59 = sub_6CB48(v18, v68, @"tP");
          uint64_t v19 = objc_opt_class();
          long long v58 = sub_6CB48(v19, v68, @"sP");
          long long v63 = [(NSDictionary *)v68 objectForKey:@"t"];
          objc_opt_class();
          char v65 = objc_opt_isKindOfClass();
          if (v65)
          {
            uint64_t v20 = [(NSDictionary *)v68 objectForKey:@"t"];
            uint64_t v56 = +[NSData _IDSDataFromBase64String:v20];
            id v41 = (void *)v56;
            char v49 = (void *)v20;
            goto LABEL_25;
          }
          uint64_t v21 = [(NSDictionary *)v68 objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v56 = [(NSDictionary *)v68 objectForKey:@"t"];
            long long v55 = (void *)v21;
            id v40 = (void *)v56;
LABEL_25:
            char v51 = v65 ^ 1;
          }
          else
          {
            char v51 = 0;
            long long v55 = (void *)v21;
            uint64_t v56 = 0;
          }
          uint64_t v22 = objc_opt_class();
          uint64_t v23 = sub_6CB48(v22, v68, @"e");
          uint64_t v24 = [(NSDictionary *)v67 objectForKey:v43];
          uint64_t v25 = objc_opt_class();
          char v26 = sub_6CB48(v25, v68, @"D");
          uint64_t v27 = objc_opt_class();
          uint64_t v28 = sub_6CB48(v27, v68, @"Dc");
          uint64_t v29 = objc_opt_class();
          uint64_t v30 = sub_6CB48(v29, v68, @"H");
          uint64_t v31 = [(NSDictionary *)v67 objectForKey:@"mid"];
          uint64_t v32 = objc_opt_class();
          uint64_t v33 = sub_6CB48(v32, v68, @"mc");
          unsigned __int8 v34 = [v33 BOOLValue];
          BYTE1(v38) = [(NSDictionary *)v68 BOOLValueForKey:@"stu" withDefault:1];
          LOBYTE(v38) = v34;
          LOBYTE(v37) = a7;
          objc_msgSend(v15, "handler:incomingMessage:originalEncryptionType:messageID:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:incomingEngroup:needsDeliveryReceipt:deliveryContext:storageContext:messageContext:isBeingReplayed:mergeID:wantsCheckpointing:isSnapTrustedUser:", v47, v62, v61, v60, v59, v58, v56, v23, v45, v24, v26, v28, v30, v46, v37,
            v31,
            v38);

          if (v51) {
          long long v35 = v55;
          }
          if (v65)
          {

            long long v35 = v49;
          }

          if (v52) {
          uint64_t v36 = v57;
          }
          if (isKindOfClass)
          {

            uint64_t v36 = v50;
          }
        }
        uint64_t v14 = (char *)v14 + 1;
      }
      while (v54 != v14);
      id v13 = [obj countByEnumeratingWithState:&v69 objects:v75 count:16];
    }
    while (v13);
  }
}

void sub_6FE9C()
{
}

void sub_6FFB4(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  id v39 = a2;
  unsigned __int8 v34 = a3;
  id v11 = a4;
  id v35 = a5;
  uint64_t v38 = a6;
  if (IMOSLoggingEnabled())
  {
    long long v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v54 = v11;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "_handleLocationShareCommandPush: %@", buf, 0xCu);
    }
  }
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id obj = [(MessagePushHandler *)v39 copyHandlersForEnumerating];
  id v43 = [obj countByEnumeratingWithState:&v49 objects:v55 count:16];
  if (v43)
  {
    uint64_t v42 = *(void *)v50;
    *(void *)&long long v13 = 138412802;
    long long v33 = v13;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v50 != v42) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void **)(*((void *)&v49 + 1) + 8 * (void)v14);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v16 = objc_opt_class();
          char v47 = sub_6CB48(v16, v11, @"p");
          uint64_t v17 = objc_opt_class();
          id v46 = sub_6CB48(v17, v11, @"tP");
          uint64_t v18 = objc_opt_class();
          char v45 = sub_6CB48(v18, v11, @"sP");
          uint64_t v48 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v20 = [(NSDictionary *)v11 objectForKey:@"t"];
            uint64_t v21 = +[NSData _IDSDataFromBase64String:v20];
            uint64_t v37 = (void *)v21;
            id v41 = (void *)v20;
            goto LABEL_15;
          }
          uint64_t v22 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v21 = [(NSDictionary *)v11 objectForKey:@"t"];
            uint64_t v44 = (void *)v22;
            uint64_t v36 = (void *)v21;
LABEL_15:
            char v23 = isKindOfClass ^ 1;
          }
          else
          {
            char v23 = 0;
            uint64_t v21 = 0;
            uint64_t v44 = (void *)v22;
          }
          uint64_t v24 = objc_opt_class();
          uint64_t v25 = sub_6CB48(v24, v11, @"e");
          uint64_t v26 = objc_opt_class();
          uint64_t v27 = sub_6CB48(v26, v11, @"D");
          uint64_t v28 = objc_opt_class();
          uint64_t v29 = sub_6CB48(v28, v11, @"Dc");
          uint64_t v30 = objc_opt_class();
          uint64_t v31 = sub_6CB48(v30, v11, @"H");
          objc_msgSend(v15, "handler:locationShareInfo:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:", v39, v47, v46, v45, v21, v25, v38, v27, v29, v31, v33, v34, v35);

          if (v23) {
          uint64_t v32 = v44;
          }
          if (isKindOfClass)
          {

            uint64_t v32 = v41;
          }
        }
        uint64_t v14 = (char *)v14 + 1;
      }
      while (v43 != v14);
      id v43 = [obj countByEnumeratingWithState:&v49 objects:v55 count:16];
    }
    while (v43);
  }
}

void sub_704F4()
{
}

void sub_705F0(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  id v39 = a2;
  uint64_t v38 = a3;
  id v11 = a4;
  id v34 = a5;
  uint64_t v37 = a6;
  if (IMOSLoggingEnabled())
  {
    long long v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      long long v55 = v11;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "_handleGenericCommandPush: %@", buf, 0xCu);
    }
  }
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id obj = [(MessagePushHandler *)v39 copyHandlersForEnumerating];
  id v43 = [obj countByEnumeratingWithState:&v50 objects:v56 count:16];
  if (v43)
  {
    uint64_t v42 = *(void *)v51;
    *(void *)&long long v13 = 138412802;
    long long v33 = v13;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v51 != v42) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void **)(*((void *)&v50 + 1) + 8 * (void)v14);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v16 = objc_opt_class();
          char v47 = sub_6CB48(v16, v11, @"Dc");
          uint64_t v48 = [(NSDictionary *)v38 objectForKey:@"IDSIncomingMessageDecryptedData"];
          uint64_t v17 = objc_opt_class();
          id v46 = sub_6CB48(v17, v11, @"tP");
          uint64_t v18 = objc_opt_class();
          char v45 = sub_6CB48(v18, v11, @"sP");
          long long v49 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v20 = [(NSDictionary *)v11 objectForKey:@"t"];
            uint64_t v21 = +[NSData _IDSDataFromBase64String:v20];
            uint64_t v36 = (void *)v21;
            id v41 = (void *)v20;
            goto LABEL_15;
          }
          uint64_t v22 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v21 = [(NSDictionary *)v11 objectForKey:@"t"];
            uint64_t v44 = (void *)v22;
            id v35 = (void *)v21;
LABEL_15:
            char v23 = isKindOfClass ^ 1;
          }
          else
          {
            char v23 = 0;
            uint64_t v21 = 0;
            uint64_t v44 = (void *)v22;
          }
          uint64_t v24 = objc_opt_class();
          uint64_t v25 = sub_6CB48(v24, v11, @"e");
          uint64_t v26 = objc_opt_class();
          uint64_t v27 = sub_6CB48(v26, v11, @"D");
          uint64_t v28 = objc_opt_class();
          uint64_t v29 = sub_6CB48(v28, v11, @"Dc");
          uint64_t v30 = objc_opt_class();
          uint64_t v31 = sub_6CB48(v30, v11, @"H");
          objc_msgSend(v15, "handler:genericNotification:incomingMessage:userInfo:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:", v39, v47, v48, v11, v46, v45, v21, v25, v37, v27, v29, v31, v33);

          if (v23) {
          uint64_t v32 = v44;
          }
          if (isKindOfClass)
          {

            uint64_t v32 = v41;
          }
        }
        uint64_t v14 = (char *)v14 + 1;
      }
      while (v43 != v14);
      id v43 = [obj countByEnumeratingWithState:&v50 objects:v56 count:16];
    }
    while (v43);
  }
}

void sub_70B54()
{
}

void sub_70C50(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  uint64_t v36 = a2;
  id v35 = a3;
  id v11 = a4;
  id v31 = a5;
  id v34 = a6;
  if (IMOSLoggingEnabled())
  {
    long long v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      long long v51 = v11;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "_handleNicknameCommand: %@", buf, 0xCu);
    }
  }
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id obj = [(MessagePushHandler *)v36 copyHandlersForEnumerating];
  id v40 = [obj countByEnumeratingWithState:&v46 objects:v52 count:16];
  if (v40)
  {
    uint64_t v39 = *(void *)v47;
    do
    {
      for (i = 0; i != v40; i = (char *)i + 1)
      {
        if (*(void *)v47 != v39) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void **)(*((void *)&v46 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v44 = [(NSDictionary *)v35 objectForKey:@"IDSIncomingMessageDecryptedData"];
          uint64_t v15 = objc_opt_class();
          id v43 = sub_6CB48(v15, v11, @"tP");
          uint64_t v16 = objc_opt_class();
          uint64_t v42 = sub_6CB48(v16, v11, @"sP");
          char v45 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v18 = [(NSDictionary *)v11 objectForKey:@"t"];
            uint64_t v19 = +[NSData _IDSDataFromBase64String:v18];
            long long v33 = (void *)v19;
            uint64_t v38 = (void *)v18;
            goto LABEL_15;
          }
          uint64_t v20 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v19 = [(NSDictionary *)v11 objectForKey:@"t"];
            id v41 = (void *)v20;
            uint64_t v32 = (void *)v19;
LABEL_15:
            char v21 = isKindOfClass ^ 1;
          }
          else
          {
            char v21 = 0;
            uint64_t v19 = 0;
            id v41 = (void *)v20;
          }
          uint64_t v22 = objc_opt_class();
          char v23 = sub_6CB48(v22, v11, @"e");
          uint64_t v24 = objc_opt_class();
          uint64_t v25 = sub_6CB48(v24, v11, @"D");
          uint64_t v26 = objc_opt_class();
          uint64_t v27 = sub_6CB48(v26, v11, @"Dc");
          uint64_t v28 = objc_opt_class();
          uint64_t v29 = sub_6CB48(v28, v11, @"H");
          [v14 handler:v36 nicknameInfoReceived:v44 userInfo:v11 toIdentifier:v43 fromIdentifier:v42 fromToken:v19 timeStamp:v23 fromIDSID:v34 needsDeliveryReceipt:v25 deliveryContext:v27 storageContext:v29];

          if (v21) {
          uint64_t v30 = v41;
          }
          if (isKindOfClass)
          {

            uint64_t v30 = v38;
          }

          continue;
        }
      }
      id v40 = [obj countByEnumeratingWithState:&v46 objects:v52 count:16];
    }
    while (v40);
  }
}

void sub_71198()
{
}

void sub_71298(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  uint64_t v38 = a2;
  uint64_t v37 = a3;
  long long v47 = a4;
  id v33 = a5;
  uint64_t v36 = a6;
  if (IMOSLoggingEnabled())
  {
    id v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      long long v53 = v47;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "_handleDeleteCommand: %@", buf, 0xCu);
    }
  }
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id obj = [(MessagePushHandler *)v38 copyHandlersForEnumerating];
  id v42 = [obj countByEnumeratingWithState:&v48 objects:v54 count:16];
  if (v42)
  {
    uint64_t v41 = *(void *)v49;
    *(void *)&long long v12 = 138412802;
    long long v32 = v12;
    do
    {
      long long v13 = 0;
      do
      {
        if (*(void *)v49 != v41) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void **)(*((void *)&v48 + 1) + 8 * (void)v13);
        if (objc_opt_respondsToSelector())
        {
          long long v46 = [(NSDictionary *)v37 objectForKey:@"IDSIncomingMessageDecryptedData"];
          uint64_t v15 = objc_opt_class();
          char v45 = sub_6CB48(v15, v47, @"tP");
          uint64_t v16 = objc_opt_class();
          uint64_t v44 = sub_6CB48(v16, v47, @"sP");
          uint64_t v17 = [(NSDictionary *)v47 objectForKey:@"t"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v19 = [(NSDictionary *)v47 objectForKey:@"t"];
            uint64_t v20 = +[NSData _IDSDataFromBase64String:v19];
            id v35 = (void *)v20;
            id v40 = (void *)v19;
            goto LABEL_15;
          }
          uint64_t v21 = [(NSDictionary *)v47 objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v20 = [(NSDictionary *)v47 objectForKey:@"t"];
            id v43 = (void *)v21;
            id v34 = (void *)v20;
LABEL_15:
            char v22 = isKindOfClass ^ 1;
          }
          else
          {
            char v22 = 0;
            uint64_t v20 = 0;
            id v43 = (void *)v21;
          }
          uint64_t v23 = objc_opt_class();
          uint64_t v24 = sub_6CB48(v23, v47, @"e");
          uint64_t v25 = objc_opt_class();
          uint64_t v26 = sub_6CB48(v25, v47, @"D");
          uint64_t v27 = objc_opt_class();
          uint64_t v28 = sub_6CB48(v27, v47, @"Dc");
          uint64_t v29 = objc_opt_class();
          uint64_t v30 = sub_6CB48(v29, v47, @"H");
          objc_msgSend(v14, "handler:deleteCommand:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:", v38, v46, v45, v44, v20, v24, v36, v26, v28, v30, v32, v33);

          if (v22) {
          id v31 = v43;
          }
          if (isKindOfClass)
          {

            id v31 = v40;
          }
        }
        long long v13 = (char *)v13 + 1;
      }
      while (v42 != v13);
      id v42 = [obj countByEnumeratingWithState:&v48 objects:v54 count:16];
    }
    while (v42);
  }
}

void sub_717D4()
{
}

void sub_718D0(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  uint64_t v38 = a2;
  uint64_t v37 = a3;
  long long v47 = a4;
  id v33 = a5;
  uint64_t v36 = a6;
  if (IMOSLoggingEnabled())
  {
    id v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      long long v53 = v47;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "_handleRecoverCommand: %@", buf, 0xCu);
    }
  }
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id obj = [(MessagePushHandler *)v38 copyHandlersForEnumerating];
  id v42 = [obj countByEnumeratingWithState:&v48 objects:v54 count:16];
  if (v42)
  {
    uint64_t v41 = *(void *)v49;
    *(void *)&long long v12 = 138412802;
    long long v32 = v12;
    do
    {
      long long v13 = 0;
      do
      {
        if (*(void *)v49 != v41) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void **)(*((void *)&v48 + 1) + 8 * (void)v13);
        if (objc_opt_respondsToSelector())
        {
          long long v46 = [(NSDictionary *)v37 objectForKey:@"IDSIncomingMessageDecryptedData"];
          uint64_t v15 = objc_opt_class();
          char v45 = sub_6CB48(v15, v47, @"tP");
          uint64_t v16 = objc_opt_class();
          uint64_t v44 = sub_6CB48(v16, v47, @"sP");
          uint64_t v17 = [(NSDictionary *)v47 objectForKey:@"t"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v19 = [(NSDictionary *)v47 objectForKey:@"t"];
            uint64_t v20 = +[NSData _IDSDataFromBase64String:v19];
            id v35 = (void *)v20;
            id v40 = (void *)v19;
            goto LABEL_15;
          }
          uint64_t v21 = [(NSDictionary *)v47 objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v20 = [(NSDictionary *)v47 objectForKey:@"t"];
            id v43 = (void *)v21;
            id v34 = (void *)v20;
LABEL_15:
            char v22 = isKindOfClass ^ 1;
          }
          else
          {
            char v22 = 0;
            uint64_t v20 = 0;
            id v43 = (void *)v21;
          }
          uint64_t v23 = objc_opt_class();
          uint64_t v24 = sub_6CB48(v23, v47, @"e");
          uint64_t v25 = objc_opt_class();
          uint64_t v26 = sub_6CB48(v25, v47, @"D");
          uint64_t v27 = objc_opt_class();
          uint64_t v28 = sub_6CB48(v27, v47, @"Dc");
          uint64_t v29 = objc_opt_class();
          uint64_t v30 = sub_6CB48(v29, v47, @"H");
          objc_msgSend(v14, "handler:recoverCommand:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:", v38, v46, v45, v44, v20, v24, v36, v26, v28, v30, v32, v33);

          if (v22) {
          id v31 = v43;
          }
          if (isKindOfClass)
          {

            id v31 = v40;
          }
        }
        long long v13 = (char *)v13 + 1;
      }
      while (v42 != v13);
      id v42 = [obj countByEnumeratingWithState:&v48 objects:v54 count:16];
    }
    while (v42);
  }
}

void sub_71E0C()
{
}

void sub_71F08(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  uint64_t v44 = a2;
  id v43 = a3;
  id v11 = a4;
  id v37 = a5;
  id v42 = a6;
  if (IMOSLoggingEnabled())
  {
    long long v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      long long v66 = v11;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "_handleGroupMessageCommand: %@", buf, 0xCu);
    }
  }
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id obj = [(MessagePushHandler *)v44 copyHandlersForEnumerating];
  id v50 = [obj countByEnumeratingWithState:&v61 objects:v67 count:16];
  if (v50)
  {
    uint64_t v49 = *(void *)v62;
    *(void *)&long long v13 = 138412802;
    long long v36 = v13;
    do
    {
      for (i = 0; i != v50; i = (char *)i + 1)
      {
        if (*(void *)v62 != v49) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void **)(*((void *)&v61 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v16 = objc_opt_class();
          uint64_t v57 = sub_6CB48(v16, v11, @"p");
          uint64_t v56 = [(NSDictionary *)v43 objectForKey:@"IDSIncomingMessageDecryptedData"];
          long long v59 = [(NSDictionary *)v11 objectForKey:@"U"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v17 = [(NSDictionary *)v11 objectForKey:@"U"];
            uint64_t v41 = +[NSData _IDSDataFromBase64String:v17];
            long long v47 = (void *)v17;
            goto LABEL_15;
          }
          uint64_t v18 = [(NSDictionary *)v11 objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [(NSDictionary *)v11 objectForKey:@"U"];
            uint64_t v38 = v52 = (void *)v18;
LABEL_15:
            char v48 = isKindOfClass ^ 1;
          }
          else
          {
            char v48 = 0;
            long long v52 = (void *)v18;
          }
          long long v55 = JWUUIDPushObjectToString();
          uint64_t v19 = objc_opt_class();
          id v54 = sub_6CB48(v19, v11, @"tP");
          uint64_t v20 = objc_opt_class();
          long long v53 = sub_6CB48(v20, v11, @"sP");
          long long v58 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          char v21 = objc_opt_isKindOfClass();
          if (v21)
          {
            uint64_t v22 = [(NSDictionary *)v11 objectForKey:@"t"];
            uint64_t v23 = +[NSData _IDSDataFromBase64String:v22];
            id v40 = (void *)v23;
            long long v46 = (void *)v22;
            goto LABEL_21;
          }
          uint64_t v24 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v23 = [(NSDictionary *)v11 objectForKey:@"t"];
            long long v51 = (void *)v24;
            uint64_t v39 = (void *)v23;
LABEL_21:
            char v25 = v21 ^ 1;
          }
          else
          {
            char v25 = 0;
            uint64_t v23 = 0;
            long long v51 = (void *)v24;
          }
          uint64_t v26 = objc_opt_class();
          uint64_t v27 = sub_6CB48(v26, v11, @"e");
          uint64_t v28 = objc_opt_class();
          uint64_t v29 = sub_6CB48(v28, v11, @"D");
          uint64_t v30 = objc_opt_class();
          id v31 = sub_6CB48(v30, v11, @"Dc");
          uint64_t v32 = objc_opt_class();
          id v33 = sub_6CB48(v32, v11, @"H");
          objc_msgSend(v15, "handler:groupMessageCommand:encryptedGroupCommand:messageID:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:", v44, v57, v56, v55, v54, v53, v23, v27, v42, v29, v31, v33, v36);

          if (v25) {
          id v34 = v51;
          }
          if (v21)
          {

            id v34 = v46;
          }

          if (v48) {
          id v35 = v52;
          }
          if (isKindOfClass)
          {

            id v35 = v47;
          }

          continue;
        }
      }
      id v50 = [obj countByEnumeratingWithState:&v61 objects:v67 count:16];
    }
    while (v50);
  }
}

void sub_725A8()
{
}

void sub_726A4(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  uint64_t v41 = a2;
  id v40 = a3;
  id v11 = a4;
  id v34 = a5;
  uint64_t v39 = a6;
  if (IMOSLoggingEnabled())
  {
    long long v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      long long v62 = v11;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "bubblePayloadMessage: %@", buf, 0xCu);
    }
  }
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  id obj = [(MessagePushHandler *)v41 copyHandlersForEnumerating];
  id v47 = [obj countByEnumeratingWithState:&v57 objects:v63 count:16];
  if (v47)
  {
    uint64_t v46 = *(void *)v58;
    do
    {
      for (i = 0; i != v47; i = (char *)i + 1)
      {
        if (*(void *)v58 != v46) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void **)(*((void *)&v57 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          long long v53 = [(NSDictionary *)v40 objectForKey:@"IDSIncomingMessageDecryptedData"];
          long long v55 = [(NSDictionary *)v11 objectForKey:@"U"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v15 = [(NSDictionary *)v11 objectForKey:@"U"];
            uint64_t v38 = +[NSData _IDSDataFromBase64String:v15];
            uint64_t v44 = (void *)v15;
            goto LABEL_15;
          }
          uint64_t v16 = [(NSDictionary *)v11 objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [(NSDictionary *)v11 objectForKey:@"U"];
            id v35 = v49 = (void *)v16;
LABEL_15:
            char v45 = isKindOfClass ^ 1;
          }
          else
          {
            char v45 = 0;
            uint64_t v49 = (void *)v16;
          }
          long long v52 = JWUUIDPushObjectToString();
          uint64_t v17 = objc_opt_class();
          long long v51 = sub_6CB48(v17, v11, @"tP");
          uint64_t v18 = objc_opt_class();
          id v50 = sub_6CB48(v18, v11, @"sP");
          id v54 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          char v19 = objc_opt_isKindOfClass();
          if (v19)
          {
            uint64_t v20 = [(NSDictionary *)v11 objectForKey:@"t"];
            uint64_t v21 = +[NSData _IDSDataFromBase64String:v20];
            id v37 = (void *)v21;
            id v43 = (void *)v20;
            goto LABEL_21;
          }
          uint64_t v22 = [(NSDictionary *)v11 objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v21 = [(NSDictionary *)v11 objectForKey:@"t"];
            char v48 = (void *)v22;
            long long v36 = (void *)v21;
LABEL_21:
            char v23 = v19 ^ 1;
          }
          else
          {
            char v23 = 0;
            uint64_t v21 = 0;
            char v48 = (void *)v22;
          }
          uint64_t v24 = objc_opt_class();
          char v25 = sub_6CB48(v24, v11, @"e");
          uint64_t v26 = objc_opt_class();
          uint64_t v27 = sub_6CB48(v26, v11, @"D");
          uint64_t v28 = objc_opt_class();
          uint64_t v29 = sub_6CB48(v28, v11, @"Dc");
          uint64_t v30 = objc_opt_class();
          id v31 = sub_6CB48(v30, v11, @"H");
          [v14 handler:v41 bubblePayloadData:v53 forMessageID:v52 toIdentifier:v51 fromIdentifier:v50 fromToken:v21 timeStamp:v25 fromIDSID:v39 needsDeliveryReceipt:v27 deliveryContext:v29 storageContext:v31];

          if (v23) {
          uint64_t v32 = v48;
          }
          if (v19)
          {

            uint64_t v32 = v43;
          }

          if (v45) {
          id v33 = v49;
          }
          if (isKindOfClass)
          {

            id v33 = v44;
          }

          continue;
        }
      }
      id v47 = [obj countByEnumeratingWithState:&v57 objects:v63 count:16];
    }
    while (v47);
  }
}

void sub_72D18()
{
}

void sub_72F20(uint64_t a1)
{
  id v3 = objc_alloc_init(LocalMessagePushHandlerCommandHandlerRegistry);
  BOOL v4 = (void *)qword_EB418;
  qword_EB418 = (uint64_t)v3;

  [*(id *)(a1 + 32) addLocalStandardCommandHandlersToRegistry:qword_EB418];
  if ([(id)qword_EB418 isLockedDown]) {
    [*(id *)(a1 + 32) addLocalLockdownCommandHandlersToRegistry:qword_EB418];
  }
}

void sub_7322C(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  id v11 = a2;
  long long v12 = a3;
  char v19 = a4;
  id v20 = a5;
  long long v13 = a6;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v14 = [(MessagePushHandler *)v11 copyHandlersForEnumerating];
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v22;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        if (objc_opt_respondsToSelector()) {
          [v18 handler:v11 remoteFileRequest:v12];
        }
      }
      id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v15);
  }
}

void sub_734BC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,long long buf)
{
  if (a2 == 1)
  {
    id v25 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      uint64_t v26 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_0, v26, OS_LOG_TYPE_INFO, "Exception handling incomming Remote File Request push: %@", (uint8_t *)&buf, 0xCu);
      }
    }
    objc_end_catch();
    JUMPOUT(0x73438);
  }
  _Unwind_Resume(a1);
}

void sub_73574(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  id v11 = a2;
  long long v12 = a3;
  char v19 = a4;
  id v20 = a5;
  long long v13 = a6;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v14 = [(MessagePushHandler *)v11 copyHandlersForEnumerating];
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v22;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        if (objc_opt_respondsToSelector()) {
          [v18 handler:v11 remoteFileResponse:v12];
        }
      }
      id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v15);
  }
}

void sub_73804(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,long long buf)
{
  if (a2 == 1)
  {
    id v25 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      uint64_t v26 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_0, v26, OS_LOG_TYPE_INFO, "Exception handling incomming Remote File response push: %@", (uint8_t *)&buf, 0xCu);
      }
    }
    objc_end_catch();
    JUMPOUT(0x73780);
  }
  _Unwind_Resume(a1);
}

void sub_738BC(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  id v11 = a2;
  long long v12 = a3;
  char v19 = a4;
  id v20 = a5;
  long long v13 = a6;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v14 = [(MessagePushHandler *)v11 copyHandlersForEnumerating];
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v22;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        if (objc_opt_respondsToSelector()) {
          [v18 handler:v11 payloadDataRequest:v12];
        }
      }
      id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v15);
  }
}

void sub_73B4C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,long long buf)
{
  if (a2 == 1)
  {
    id v25 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      uint64_t v26 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_0, v26, OS_LOG_TYPE_INFO, "Exception handling incoming local payload data request push: %@", (uint8_t *)&buf, 0xCu);
      }
    }
    objc_end_catch();
    JUMPOUT(0x73AC8);
  }
  _Unwind_Resume(a1);
}

void sub_73C04(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  id v11 = a2;
  long long v12 = a3;
  char v19 = a4;
  id v20 = a5;
  long long v13 = a6;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v14 = [(MessagePushHandler *)v11 copyHandlersForEnumerating];
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v22;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        if (objc_opt_respondsToSelector()) {
          [v18 handler:v11 payloadDataResponse:v12];
        }
      }
      id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v15);
  }
}

void sub_73E94(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,long long buf)
{
  if (a2 == 1)
  {
    id v25 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      uint64_t v26 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_0, v26, OS_LOG_TYPE_INFO, "Exception handling incoming local payload data response push: %@", (uint8_t *)&buf, 0xCu);
      }
    }
    objc_end_catch();
    JUMPOUT(0x73E10);
  }
  _Unwind_Resume(a1);
}

void sub_752EC(id a1)
{
  off_EB428 = (uint64_t (*)(void, void))IMWeakLinkSymbol();
}

void _ConvergeGroupParticipants(void *a1, void *a2, uint64_t a3, __CFString *a4, void *a5, void *a6, int a7, int a8, uint64_t a9, void *a10)
{
  id v13 = a10;
  if (!a10) {
    id v13 = [a1 account];
  }
  id v14 = [a5 _stripFZIDPrefix];
  id v15 = [a6 _stripFZIDPrefix];
  if (IMOSLoggingEnabled())
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      CFStringRef v17 = @"NO";
      *(_DWORD *)buf = 138413314;
      CFStringRef v99 = a4;
      __int16 v100 = 2112;
      if (a8) {
        CFStringRef v17 = @"YES";
      }
      id v101 = v14;
      __int16 v102 = 2112;
      id v103 = v15;
      __int16 v104 = 2048;
      uint64_t v105 = a9;
      __int16 v106 = 2112;
      CFStringRef v107 = v17;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, " Updating participants: %@   toIdentifier: %@, fromIdentifier :%@, updateType %lu, allowSelfRemoval %@", buf, 0x34u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      CFStringRef v19 = (const __CFString *)[a2 participants];
      *(_DWORD *)buf = 138412290;
      CFStringRef v99 = v19;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "Chat participants before converge %@", buf, 0xCu);
    }
  }
  id v20 = objc_msgSend(objc_msgSend(a2, "participants"), "arrayByApplyingSelector:", "ID");
  long long v71 = +[NSSet setWithArray:v20];
  switch(a9)
  {
    case 2:
      CFStringRef v75 = (__CFString *)[v20 mutableCopy];
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      id v35 = [(__CFString *)a4 countByEnumeratingWithState:&v82 objects:v95 count:16];
      if (v35)
      {
        char v73 = 0;
        uint64_t v36 = *(void *)v83;
        if (a7) {
          id v37 = 0;
        }
        else {
          id v37 = v15;
        }
        id v70 = v37;
        char v38 = 1;
        do
        {
          for (i = 0; i != v35; i = (char *)i + 1)
          {
            if (*(void *)v83 != v36) {
              objc_enumerationMutation(a4);
            }
            id v40 = *(__CFString **)(*((void *)&v82 + 1) + 8 * i);
            if ([(__CFString *)v40 isEqualToIgnoringCase:v14])
            {
              char v38 = 0;
            }
            else
            {
              if (![(NSSet *)v71 containsObject:v40])
              {
                if (IMOSLoggingEnabled())
                {
                  uint64_t v41 = OSLogHandleForIMFoundationCategory();
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 138412290;
                    CFStringRef v99 = v40;
                    _os_log_impl(&dword_0, v41, OS_LOG_TYPE_INFO, "   Adding participant: %@", buf, 0xCu);
                  }
                }
                id v42 = [a2 chatIdentifier];
                LOBYTE(v67) = [a2 style];
                [a1 didChangeMemberStatus:2 forHandle:v40 fromHandle:v70 unformattedNumber:0 countryCode:0 forChat:v42 style:v67 account:v13 destinationCallerID:v14];
                char v73 = 1;
              }
              [(__CFString *)v75 removeObject:v40];
            }
          }
          id v35 = [(__CFString *)a4 countByEnumeratingWithState:&v82 objects:v95 count:16];
        }
        while (v35);
      }
      else
      {
        char v73 = 0;
        char v38 = 1;
      }
      if (IMOSLoggingEnabled())
      {
        long long v51 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          CFStringRef v99 = v75;
          _os_log_impl(&dword_0, v51, OS_LOG_TYPE_INFO, "   Participants to be removed %@", buf, 0xCu);
        }
      }
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      id v52 = [(__CFString *)v75 countByEnumeratingWithState:&v78 objects:v94 count:16];
      if (v52)
      {
        uint64_t v53 = *(void *)v79;
        if (a7) {
          id v54 = 0;
        }
        else {
          id v54 = v15;
        }
        do
        {
          for (j = 0; j != v52; j = (char *)j + 1)
          {
            if (*(void *)v79 != v53) {
              objc_enumerationMutation(v75);
            }
            uint64_t v56 = *(__CFString **)(*((void *)&v78 + 1) + 8 * (void)j);
            if ([(__CFString *)v56 isEqualToIgnoringCase:v14]) {
              BOOL v57 = a8 == 0;
            }
            else {
              BOOL v57 = 0;
            }
            if (!v57)
            {
              if (IMOSLoggingEnabled())
              {
                long long v58 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  CFStringRef v99 = v56;
                  _os_log_impl(&dword_0, v58, OS_LOG_TYPE_INFO, "   Removing participant: %@", buf, 0xCu);
                }
              }
              id v59 = [a2 chatIdentifier];
              LOBYTE(v67) = [a2 style];
              [a1 didChangeMemberStatus:3 forHandle:v56 fromHandle:v54 unformattedNumber:0 countryCode:0 forChat:v59 style:v67 account:v13 destinationCallerID:v14];
              char v73 = 1;
            }
          }
          id v52 = [(__CFString *)v75 countByEnumeratingWithState:&v78 objects:v94 count:16];
        }
        while (v52);
      }

      break;
    case 1:
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      id v43 = [(__CFString *)a4 countByEnumeratingWithState:&v86 objects:v96 count:16];
      if (!v43)
      {
        char v73 = 0;
        goto LABEL_98;
      }
      char v44 = 0;
      uint64_t v45 = *(void *)v87;
      if (a7) {
        id v46 = 0;
      }
      else {
        id v46 = v15;
      }
      do
      {
        for (k = 0; k != v43; k = (char *)k + 1)
        {
          if (*(void *)v87 != v45) {
            objc_enumerationMutation(a4);
          }
          char v48 = *(__CFString **)(*((void *)&v86 + 1) + 8 * (void)k);
          if (IMOSLoggingEnabled())
          {
            uint64_t v49 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              CFStringRef v99 = v48;
              _os_log_impl(&dword_0, v49, OS_LOG_TYPE_INFO, " Removing participant explicitly: %@", buf, 0xCu);
            }
          }
          id v50 = [a2 chatIdentifier];
          LOBYTE(v67) = [a2 style];
          [a1 didChangeMemberStatus:3 forHandle:v48 fromHandle:v46 unformattedNumber:0 countryCode:0 forChat:v50 style:v67 account:v13 destinationCallerID:v14];
          if ([(__CFString *)v48 isEqualToIgnoringCase:v14]) {
            char v44 = 1;
          }
        }
        id v43 = [(__CFString *)a4 countByEnumeratingWithState:&v86 objects:v96 count:16];
      }
      while (v43);
      char v38 = v44 & 1;
      char v73 = 1;
      break;
    case 0:
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      char v21 = 0;
      id v22 = [(__CFString *)a4 countByEnumeratingWithState:&v90 objects:v97 count:16];
      if (v22)
      {
        uint64_t v23 = *(void *)v91;
        if (a7) {
          id v24 = 0;
        }
        else {
          id v24 = v15;
        }
        do
        {
          for (m = 0; m != v22; m = (char *)m + 1)
          {
            if (*(void *)v91 != v23) {
              objc_enumerationMutation(a4);
            }
            uint64_t v26 = *(__CFString **)(*((void *)&v90 + 1) + 8 * (void)m);
            unsigned int v27 = [(__CFString *)v26 isEqualToIgnoringCase:v14];
            int v28 = IMOSLoggingEnabled();
            if (v27)
            {
              if (v28)
              {
                uint64_t v29 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_0, v29, OS_LOG_TYPE_INFO, " I was added to a chat, so updating chat status", buf, 2u);
                }
              }
              id v30 = [a2 chatIdentifier];
              id v31 = [a2 style];
              LOBYTE(v68) = [a2 isBlackholed];
              [a1 didUpdateChatStatus:2 chat:v30 style:v31 displayName:0 groupID:a3 handleInfo:0 account:v13 isBlackholed:v68];
            }
            else
            {
              if (v28)
              {
                uint64_t v32 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  CFStringRef v99 = v26;
                  _os_log_impl(&dword_0, v32, OS_LOG_TYPE_INFO, " Adding participant explicitly: %@", buf, 0xCu);
                }
              }
              id v33 = [a2 chatIdentifier];
              LOBYTE(v67) = [a2 style];
              [a1 didChangeMemberStatus:2 forHandle:v26 fromHandle:v24 unformattedNumber:0 countryCode:0 forChat:v33 style:v67 account:v13 destinationCallerID:v14];
              char v21 = 1;
            }
          }
          id v22 = [(__CFString *)a4 countByEnumeratingWithState:&v90 objects:v97 count:16];
        }
        while (v22);
      }
      char v34 = v21 & 1;
LABEL_97:
      char v73 = v34;
      goto LABEL_98;
    default:
      char v73 = 0;
      char v38 = 1;
      break;
  }
  if ((v38 & 1) != 0 && a8)
  {
    if (IMOSLoggingEnabled())
    {
      long long v60 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v60, OS_LOG_TYPE_INFO, "   I was removed from this chat, leaving", buf, 2u);
      }
    }
    id v61 = [a2 chatIdentifier];
    id v62 = [a2 style];
    LOBYTE(v68) = [a2 isBlackholed];
    [a1 didUpdateChatStatus:3 chat:v61 style:v62 displayName:0 groupID:a3 handleInfo:0 account:v13 isBlackholed:v68];
    char v34 = 1;
    goto LABEL_97;
  }
LABEL_98:
  if (IMOSLoggingEnabled())
  {
    long long v63 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
    {
      CFStringRef v64 = (const __CFString *)[a2 participants];
      *(_DWORD *)buf = 138412290;
      CFStringRef v99 = v64;
      _os_log_impl(&dword_0, v63, OS_LOG_TYPE_INFO, "Chat participants after converge %@", buf, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    char v65 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
    {
      CFStringRef v66 = @"NO";
      if (v73) {
        CFStringRef v66 = @"YES";
      }
      *(_DWORD *)buf = 138412290;
      CFStringRef v99 = v66;
      _os_log_impl(&dword_0, v65, OS_LOG_TYPE_INFO, "Group changed and will write to db? %@", buf, 0xCu);
    }
  }
  if (v73) {
    [+[IMDChatStore sharedInstance] storeChat:a2];
  }
}

id incrementParticipantVersionForChat(void *a1)
{
  id v2 = (char *)[a1 groupParticipantVersion];
  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v5 = 138412546;
      id v6 = [a1 groupID];
      __int16 v7 = 2048;
      CFStringRef v8 = v2;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "Incrementing participant version of chat %@ to %ld", (uint8_t *)&v5, 0x16u);
    }
  }
  return [a1 setGroupParticipantVersion:v2 + 1];
}

void setParticipantVersionForChat(void *a1, uint64_t a2)
{
  int v4 = IMOSLoggingEnabled();
  if (a2 < 0)
  {
    if (v4)
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(v7) = 0;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Received a negative participant version. This is not right!", (uint8_t *)&v7, 2u);
      }
    }
  }
  else
  {
    if (v4)
    {
      int v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v7 = 138412546;
        id v8 = [a1 groupID];
        __int16 v9 = 2048;
        uint64_t v10 = a2;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "Setting participant version of chat %@ to %ld", (uint8_t *)&v7, 0x16u);
      }
    }
    [a1 setGroupParticipantVersion:a2];
  }
}

void sub_7617C(void *a1, uint64_t a2)
{
  if (a2 < 0)
  {
    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v9) = 0;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Received a negative last group photo participant version. This is not right!", (uint8_t *)&v9, 2u);
      }
    }
  }
  else
  {
    id v4 = [objc_alloc((Class)NSNumber) initWithInteger:a2];
    if (IMOSLoggingEnabled())
    {
      int v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v9 = 138412546;
        id v10 = [a1 groupID];
        __int16 v11 = 2048;
        uint64_t v12 = a2;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "Setting last group photo-related participant version of chat %@ to %ld", (uint8_t *)&v9, 0x16u);
      }
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    int v7 = Mutable;
    if (v4) {
      CFDictionarySetValue(Mutable, off_EB078[0], v4);
    }
    [a1 updateProperties:v7];
  }
}

void sub_763D0(id a1)
{
  qword_EC528 = objc_alloc_init(MessageGroupController);
}

__CFArray *sub_76578(__CFArray *result, void *a2)
{
  if (result)
  {
    id v3 = result;
    id v4 = (__CFArray *)objc_alloc_init((Class)NSMutableArray);
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v5 = [(__CFArray *)v3 participants];
    id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v12;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v12 != v8) {
            objc_enumerationMutation(v5);
          }
          if (v4)
          {
            id v10 = *(void **)(*((void *)&v11 + 1) + 8 * i);
            if ([v10 ID]) {
              CFArrayAppendValue(v4, [v10 ID]);
            }
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v7);
    }
    if (a2 && v4)
    {
      if ([a2 _stripFZIDPrefix]) {
        CFArrayAppendValue(v4, [a2 _stripFZIDPrefix]);
      }
    }
    return v4;
  }
  return result;
}

uint64_t sub_77428(uint64_t a1, void *a2)
{
  return [a2 isEqualToString:*(void *)(a1 + 32)] ^ 1;
}

id sub_782E0(id a1, NSString *a2)
{
  return [(NSString *)a2 _stripFZIDPrefix];
}

void *sub_782E8(uint64_t a1, void *a2)
{
  if ([a2 isEqualToString:*(void *)(a1 + 32)]) {
    return 0;
  }
  else {
    return a2;
  }
}

id sub_7831C(id a1, NSString *a2)
{
  return [(NSString *)a2 _stripFZIDPrefix];
}

uint64_t sub_785AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v8 = IMOSLoggingEnabled();
  if (a2)
  {
    if (!v8) {
      goto LABEL_9;
    }
    int v9 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
      goto LABEL_9;
    }
    int v14 = 138412290;
    id v15 = a2;
    id v10 = "Successfully found engroup: %@";
  }
  else
  {
    if (!v8) {
      goto LABEL_9;
    }
    int v9 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
      goto LABEL_9;
    }
    id v11 = [*(id *)(a1 + 32) engramID];
    int v14 = 138412290;
    id v15 = v11;
    id v10 = "We failed to look up an engroup for engram id: %@";
  }
  _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v14, 0xCu);
LABEL_9:
  if (a3) {
    long long v12 = a2;
  }
  else {
    long long v12 = 0;
  }
  return (*(uint64_t (**)(void, void, void, void *, uint64_t, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 40), *(void *)(a1 + 32), v12, a3, a4);
}

void sub_786E8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x78690);
  }
  _Unwind_Resume(a1);
}

void sub_790AC(void *a1, void *a2)
{
  if (a2)
  {
    id v4 = objc_alloc((Class)NSNumber);
    [a2 doubleValue];
    double v6 = v5 / 1000000000.0;
    id v7 = v4;
  }
  else
  {
    [+[NSDate date] timeIntervalSince1970];
    double v9 = v8;
    id v7 = objc_alloc((Class)NSNumber);
    double v6 = v9;
  }
  id v10 = [v7 initWithDouble:v6];
  if (IMOSLoggingEnabled())
  {
    id v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v14 = 138412546;
      id v15 = [a1 groupID];
      __int16 v16 = 2048;
      id v17 = [v10 longLongValue];
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "Updating timestamp for chat gid: %@ to %lld", (uint8_t *)&v14, 0x16u);
    }
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  long long v13 = Mutable;
  if (v10) {
    CFDictionarySetValue(Mutable, off_EB080[0], v10);
  }
  [a1 updateProperties:v13];
}

void sub_79250(uint64_t a1, void *a2, int a3, void *a4)
{
  if (a3)
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v9 = 138412546;
        id v10 = a2;
        __int16 v11 = 2048;
        long long v12 = a4;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "We added participants to the engroup: %@ with error: %lu", (uint8_t *)&v9, 0x16u);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = 0;
    goto LABEL_7;
  }
  if ([a4 code] == (char *)&dword_0 + 3)
  {
LABEL_7:
    if (*(void *)(a1 + 56))
    {
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24))
      {
        (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
        objc_msgSend(*(id *)(a1 + 56), "_forwardP2PGroupCommand:fromPerson:toPerson:toGroup:", *(void *)(a1 + 64), *(void *)(a1 + 72), objc_msgSend(*(id *)(a1 + 72), "_stripFZIDPrefix"), a2);
      }
    }
    return;
  }
  if (IMOSLoggingEnabled())
  {
    double v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v9 = 134217984;
      id v10 = a4;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "We failed to add participants to the engroup with error: %lu", (uint8_t *)&v9, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
}

void sub_79960(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x797A8);
  }
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_799EC(uint64_t a1, void *a2, int a3, void *a4)
{
  if (a3)
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v14 = 138412546;
        id v15 = a2;
        __int16 v16 = 2048;
        id v17 = a4;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "We removed participants to our engroup: %@ with error: %lu", (uint8_t *)&v14, 0x16u);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = 0;
    goto LABEL_7;
  }
  if ([a4 code] == (char *)&dword_0 + 3)
  {
LABEL_7:
    if (*(void *)(a1 + 56) && !*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24))
    {
      (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
      if (IMOSLoggingEnabled())
      {
        double v8 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          int v9 = *(void **)(a1 + 48);
          id v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "session"), "groupIDForChat:", *(void *)(a1 + 40));
          uint64_t v11 = *(void *)(a1 + 40);
          uint64_t v12 = *(void *)(a1 + 64);
          int v14 = 138413058;
          id v15 = v9;
          __int16 v16 = 2112;
          id v17 = v10;
          __int16 v18 = 2112;
          uint64_t v19 = v11;
          __int16 v20 = 2112;
          uint64_t v21 = v12;
          _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "* Removing engroup participants: %@    groupID: %@   chat: %@   dictionary: %@", (uint8_t *)&v14, 0x2Au);
        }
      }
      objc_msgSend(*(id *)(a1 + 56), "_forwardP2PGroupCommand:fromPerson:toPerson:toGroup:", *(void *)(a1 + 64), *(void *)(a1 + 72), objc_msgSend(*(id *)(a1 + 72), "_stripFZIDPrefix"), a2);
    }
    return;
  }
  if (IMOSLoggingEnabled())
  {
    long long v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      int v14 = 134217984;
      id v15 = a4;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "we failed to remove participants to the engroup with error: %lu", (uint8_t *)&v14, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
}

void sub_7A24C(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x79F54);
  }
  _Unwind_Resume(exception_object);
}

void sub_7A2FC(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = IMOSLoggingEnabled();
  if (a3)
  {
    if (v6)
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "We got an engroup back to send the P2P leave command to", buf, 2u);
      }
    }
    double v8 = +[NSNumber numberWithBool:1];
    if (v8) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), off_EB090[0], v8);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
    uint64_t v9 = *(void *)(a1 + 72);
    if (v9) {
      (*(void (**)(uint64_t, void, void, uint64_t, void))(v9 + 16))(v9, *(void *)(a1 + 40), *(void *)(a1 + 48), 1, 0);
    }
    objc_msgSend(*(id *)(a1 + 56), "_forwardP2PGroupCommand:fromPerson:toPerson:toGroup:", *(void *)(a1 + 32), *(void *)(a1 + 64), objc_msgSend(*(id *)(a1 + 64), "_stripFZIDPrefix"), a2);
  }
  else if (v6)
  {
    id v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "We failed to look up an engroup, so sending w/ legacy methods", v11, 2u);
    }
  }
}

id sub_7B4C0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) groupPhotoRequestsInFlight];
  id v3 = [*(id *)(a1 + 40) guid];

  return [v2 removeObjectForKey:v3];
}

void sub_7B8C4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x7B734);
  }
  _Unwind_Resume(a1);
}

id sub_7BA5C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = [a3 objectForKey:@"chat"];
  id v6 = [a3 objectForKey:@"fromIdentifier"];
  id v7 = [a3 objectForKey:@"toIdentifier"];
  id v8 = [a3 objectForKey:@"session"];

  return [v4 _requestGroupPhotoUpdate:v5 fromIdentifier:v6 toIdentifier:v7 session:v8];
}

void sub_7C2A4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x7C210);
  }
  _Unwind_Resume(a1);
}

void sub_7DCD0(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = IMOSLoggingEnabled();
  if (a3)
  {
    if (v5)
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        int v13 = 138412546;
        uint64_t v14 = v7;
        __int16 v15 = 2112;
        uint64_t v16 = v7;
        id v8 = "We successfully removed the participant: %@ from the engroup after %@ left the chat";
        uint64_t v9 = v6;
        uint32_t v10 = 22;
LABEL_8:
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v13, v10);
      }
    }
  }
  else if (v5)
  {
    uint64_t v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138412290;
      uint64_t v14 = v12;
      id v8 = "We failed to remove the participant from the engroup after: %@ left the chat";
      uint64_t v9 = v11;
      uint32_t v10 = 12;
      goto LABEL_8;
    }
  }
}

void sub_7E010(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x7DFB4);
  }
  _Unwind_Resume(a1);
}

void sub_7E044(id a1, ENGroup *a2, BOOL a3, NSError *a4)
{
  BOOL v5 = a3;
  int v6 = IMOSLoggingEnabled();
  if (v5)
  {
    if (v6)
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        id v8 = "Successfully added participants from legacy device";
        uint64_t v9 = v7;
        uint32_t v10 = 2;
LABEL_8:
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v12, v10);
      }
    }
  }
  else if (v6)
  {
    uint64_t v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v12 = 138412290;
      int v13 = a4;
      id v8 = "We did not update the group -- add: %@";
      uint64_t v9 = v11;
      uint32_t v10 = 12;
      goto LABEL_8;
    }
  }
}

void sub_7E18C(id a1, ENGroup *a2, BOOL a3, NSError *a4)
{
  BOOL v5 = a3;
  int v6 = IMOSLoggingEnabled();
  if (v5)
  {
    if (v6)
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        id v8 = "Successfully removed participants from legacy device";
        uint64_t v9 = v7;
        uint32_t v10 = 2;
LABEL_8:
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v12, v10);
      }
    }
  }
  else if (v6)
  {
    uint64_t v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v12 = 138412290;
      int v13 = a4;
      id v8 = "We did not update the group -- remove: %@";
      uint64_t v9 = v11;
      uint32_t v10 = 12;
      goto LABEL_8;
    }
  }
}

void sub_7E734(id a1)
{
  qword_EC530 = objc_alloc_init(MessageTranscodeController);
}

uint64_t sub_7EDEC(uint64_t a1, void *a2)
{
  if (!qword_EC540)
  {
    id v4 = (uint64_t *)IMWeakLinkSymbol();
    if (v4) {
      uint64_t v5 = *v4;
    }
    else {
      uint64_t v5 = 0;
    }
    qword_EC540 = v5;
  }
  id v6 = objc_msgSend(objc_msgSend(a2, "userInfo"), "objectForKey:", NSUnderlyingErrorKey);
  if (v6) {
    a2 = v6;
  }
  if (a2)
  {
    if (objc_msgSend(objc_msgSend(a2, "domain"), "isEqualToString:", NSURLErrorDomain))
    {
      unint64_t v7 = (unint64_t)[a2 code] + 1020;
      if (v7 < 0x15 && ((0x1ADA07u >> v7) & 1) != 0)
      {
        id v8 = (unsigned int *)&unk_A5540;
        return v8[v7];
      }
    }
    else
    {
      id v9 = [a2 domain];
      if ([v9 isEqualToString:FTErrorDomain])
      {
        [a2 code];
        return _FZErrorTypeFromResponseCodeAndError();
      }
      if (qword_EC540)
      {
        id v11 = [a2 domain];
        if ([v11 isEqualToString:qword_EC540])
        {
          unint64_t v7 = (unint64_t)[a2 code] - 2;
          if (v7 < 5)
          {
            id v8 = (unsigned int *)&unk_A5594;
            return v8[v7];
          }
        }
      }
    }
  }
  uint64_t result = 0;
  if (a1 > 1)
  {
    if (a1 == 28) {
      return result;
    }
  }
  else
  {
    if (!a1) {
      return result;
    }
    if (a1 == 1) {
      return 22;
    }
  }
  return 4;
}

id *sub_7F7F0(id *result, uint64_t a2)
{
  if (a2)
  {
    id v2 = result;
    [result[4] setMessageDeliveryContext:a2];
    [v2[5] _handleIsMeToMeForMessage:v2[6] withContext:v2[4]];
    [v2[5] _handleDeliveryFailureForMessage:v2[6] withContext:v2[4]];
    [v2[5] _handleUpdateNotificationTimeManagerForMessage:v2[6] withContext:v2[4]];
    [v2[5] _stopTimingMessageSend];
    [v2[5] _notifyDidSendMessage:v2[6] withContext:v2[4]];
    [v2[5] _logCompletedMessage:v2[6] withContext:v2[4]];
    id v4 = v2[4];
    id v3 = v2[5];
    return (id *)_[v3 _deactivateServiceIfNeededForContext:v4];
  }
  return result;
}

id sub_80A30(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, " ** FailSendingMessages is enabled, failing send message", buf, 2u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, " ** FailSendingMessages is enabled, failing send message", v5, 2u);
    }
  }
  [*(id *)(a1 + 32) setErrorCode:5];
  if ([*(id *)(a1 + 32) scheduleType] == (char *)&dword_0 + 2) {
    [*(id *)(a1 + 40) _handleScheduledMessageSendFailure:*(void *)(a1 + 32)];
  }
  return [*(id *)(a1 + 40) _didSendMessage:*(void *)(a1 + 32) withContext:*(void *)(a1 + 48) forceDate:0 fromStorage:0];
}

void sub_81278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_81290(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_812A0(uint64_t a1)
{
}

void sub_812A8(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if ([v7 scheduleType] == (char *)&dword_0 + 2
    || [v5 scheduleType] == (char *)&dword_0 + 2)
  {
    id v6 = [*(id *)(a1 + 32) scheduledMessageCoordinator];
    [v6 handleMessageDidReplace:v7 newMessage:v5];
  }
}

void sub_8133C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "_handleDeviceRegistrationForMessage:withContext:")
    && ([*(id *)(a1 + 32) _failSendingMessageIfNeeded:v4 withContext:*(void *)(a1 + 40)] & 1) == 0&& objc_msgSend(*(id *)(a1 + 32), "_handleTypingIndicatorMessage:withContext:", v4, *(void *)(a1 + 40)))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  }
}

void sub_81A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_81A34(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, char a9, unsigned int a10)
{
  id v39 = a2;
  id v42 = a3;
  id v17 = a4;
  id v40 = a5;
  id v41 = a6;
  id v18 = a7;
  id v19 = a8;
  if (a9)
  {
    __int16 v20 = [*(id *)(a1 + 40) groupController];
    uint64_t v21 = [*(id *)(a1 + 32) chat];
    id v22 = [*(id *)(a1 + 32) fromURI];
    id v23 = [v20 newGroupMessagePayloadForChat:v21 fromID:v22];

    if (v19 && IMOSLoggingEnabled())
    {
      id v24 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        id v25 = [*(id *)(a1 + 48) guid];
        *(_DWORD *)buf = 138412546;
        id v46 = v25;
        __int16 v47 = 2112;
        id v48 = v19;
        _os_log_impl(&dword_0, v24, OS_LOG_TYPE_INFO, "We will be sending message with guid: %@ to engram group: %@", buf, 0x16u);
      }
    }
    uint64_t v26 = [*(id *)(a1 + 32) chat];
    BOOL v27 = [v26 style] != 45;

    int v28 = [[GroupMessageContext alloc] initWithGroupPayload:v23 additionalPayload:v18 isGroupChat:v27];
    uint64_t v29 = *(void *)(*(void *)(a1 + 56) + 8);
    id v30 = *(void **)(v29 + 40);
    *(void *)(v29 + 40) = v28;
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v31 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        id v46 = v42;
        __int16 v47 = 1024;
        LODWORD(v48) = a10;
        _os_log_impl(&dword_0, v31, OS_LOG_TYPE_INFO, "Group message controler failed to prepare chat: %@  error: %d", buf, 0x12u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v32 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        char v38 = [v17 body];
        id v33 = [v38 string];
        MarcoLoggingStringForMessageData();
        id v34 = (id)objc_claimAutoreleasedReturnValue();
        id v35 = [v17 guid];
        uint64_t v36 = [*(id *)(a1 + 32) participantURIs];
        *(_DWORD *)buf = 138413058;
        id v46 = v34;
        __int16 v47 = 2112;
        id v48 = v35;
        __int16 v49 = 2112;
        id v50 = v36;
        __int16 v51 = 1024;
        unsigned int v52 = a10;
        _os_log_impl(&dword_0, v32, OS_LOG_TYPE_INFO, "Failed sending message: %@  withGUID: %@  to people: %@   error: %d", buf, 0x26u);
      }
    }
    [v17 setErrorCode:a10];
    if ([v17 scheduleType] == (char *)&dword_0 + 2) {
      [*(id *)(a1 + 40) _handleScheduledMessageSendFailure:v17];
    }
    [*(id *)(a1 + 40) _didSendMessage:v17 withContext:*(void *)(a1 + 32) forceDate:0 fromStorage:0];
    uint64_t v43 = IMMetricsCollectorError;
    id v37 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", sub_86344((uint64_t)[v17 errorCode]));
    char v44 = v37;
    id v23 = +[NSDictionary dictionaryWithObjects:&v44 forKeys:&v43 count:1];

    id v30 = +[IMMetricsCollector sharedInstance];
    [v30 trackEvent:IMMetricsCollectorEventOutgoingMessage withDictionary:v23];
  }
}

void sub_8245C(uint64_t a1)
{
  uint64_t v16 = [*(id *)(a1 + 32) serviceSession];
  int v12 = [v16 deliveryController];
  uint64_t v13 = *(void *)(a1 + 40);
  __int16 v15 = [*(id *)(a1 + 32) groupMessageContext];
  id v11 = [v15 additionalPayload];
  uint64_t v14 = [*(id *)(a1 + 32) groupMessageContext];
  id v2 = [v14 groupPayload];
  id v3 = [*(id *)(a1 + 32) participantURIs];
  id v4 = [*(id *)(a1 + 32) originalParticipantURIs];
  id v5 = [*(id *)(a1 + 32) fromURI];
  id v6 = [*(id *)(a1 + 32) idsAccount];
  id v7 = [*(id *)(a1 + 32) chat];
  id v8 = [v7 chatIdentifier];
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_826CC;
  v21[3] = &unk_DFAC0;
  void v21[4] = *(void *)(a1 + 48);
  id v22 = *(id *)(a1 + 32);
  id v23 = *(id *)(a1 + 40);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_826E0;
  v17[3] = &unk_DFAE8;
  id v18 = *(id *)(a1 + 32);
  int8x16_t v10 = *(int8x16_t *)(a1 + 40);
  id v9 = (id)v10.i64[0];
  int8x16_t v19 = vextq_s8(v10, v10, 8uLL);
  id v20 = *(id *)(a1 + 56);
  [v12 sendMessage:v13 context:v11 groupContext:v2 toGroup:0 toParticipants:v3 originallyToParticipants:v4 fromID:v5 fromAccount:v6 chatIdentifier:v8 originalPayload:0 replyToMessageGUID:0 fakeSavedReceiptBlock:v21 completionBlock:v17];
}

id sub_826CC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleFakeReceiptBlock:a2 withContext:*(void *)(a1 + 40) withMsg:*(void *)(a1 + 48)];
}

void sub_826E0(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = a2;
  id v12 = a3;
  if ([v12 count] == (char *)&dword_0 + 1)
  {
    uint64_t v13 = [*(id *)(a1 + 32) fromURI];
    uint64_t v14 = objc_msgSend(v12, "__imFirstObject");
    id v15 = [v13 isEqualToString:v14];
  }
  else
  {
    id v15 = 0;
  }
  [*(id *)(a1 + 40) _updateOffGridStatusIfNeededWithMessage:*(void *)(a1 + 48) context:*(void *)(a1 + 32)];
  if (IMOSLoggingEnabled())
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      CFStringRef v17 = @"NO";
      if (a6) {
        CFStringRef v17 = @"YES";
      }
      int v19 = 138412290;
      CFStringRef v20 = v17;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "isBackwardsCompatibleMessage %@", (uint8_t *)&v19, 0xCu);
    }
  }
  id v18 = [[MessageDeliveryContext alloc] initWithDisplayIDs:v12 didSucceed:a4 error:a5 isFromMeToMe:v15 shouldDeactivate:0 isBackwardsCompatibleMessage:a6];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_82C48(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x82BD8);
  }
  _Unwind_Resume(a1);
}

void sub_82C7C(uint64_t a1, char a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_82D40;
  block[3] = &unk_DFB38;
  char v11 = a2;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(a1 + 48);
  id v7 = v3;
  uint64_t v8 = v4;
  char v12 = *(unsigned char *)(a1 + 64);
  id v9 = v5;
  id v10 = *(id *)(a1 + 56);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_82D40(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      if (*(unsigned char *)(a1 + 64)) {
        CFStringRef v4 = @"YES";
      }
      else {
        CFStringRef v4 = @"NO";
      }
      int v7 = 138412546;
      CFStringRef v8 = v4;
      __int16 v9 = 2112;
      uint64_t v10 = v3;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, "Got off grid mode %@ for %@", (uint8_t *)&v7, 0x16u);
    }
  }
  if (*(unsigned char *)(a1 + 64)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = *(unsigned char *)(a1 + 65) != 0;
  }
  return [*(id *)(a1 + 40) didReceiveOffGridStatus:v5 forID:*(void *)(a1 + 32) messageGUID:*(void *)(a1 + 48) account:*(void *)(a1 + 56)];
}

void sub_8382C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x83788);
  }
  _Unwind_Resume(a1);
}

void sub_843E8(uint64_t a1)
{
  id v20 = [*(id *)(a1 + 32) copy];
  id v2 = [*(id *)(a1 + 40) chat];
  uint64_t v3 = [v2 chatIdentifier];
  [v20 setSender:v3];

  CFStringRef v4 = +[NSString stringGUID];
  [v20 setGuid:v4];

  [v20 setFlags:1];
  if (!*(unsigned char *)(a1 + 48)) {
    objc_msgSend(v20, "setFlags:", (unint64_t)objc_msgSend(v20, "flags") | 0x2000);
  }
  BOOL v5 = [*(id *)(a1 + 40) serviceSession];
  id v6 = [*(id *)(a1 + 40) chat];
  int v7 = [v6 chatIdentifier];
  CFStringRef v8 = [*(id *)(a1 + 40) chat];
  id v9 = [v8 style];
  uint64_t v10 = [*(id *)(a1 + 40) imdAccount];
  [v5 didReceiveMessage:v20 forChat:v7 style:v9 account:v10 fromIDSID:0];

  char v11 = [*(id *)(a1 + 40) chat];
  LODWORD(v6) = [v11 style];

  if (v6 == 45)
  {
    char v12 = [*(id *)(a1 + 40) serviceSession];
    uint64_t v13 = [*(id *)(a1 + 32) guid];
    uint64_t v14 = +[NSDate date];
    id v15 = [*(id *)(a1 + 40) imdAccount];
    [v12 didReceiveMessageDeliveryReceiptForMessageID:v13 date:v14 account:v15];
  }
  uint64_t v16 = [*(id *)(a1 + 40) chat];
  if ([v16 style] == 45 && *(unsigned char *)(a1 + 49))
  {
    int v17 = *(unsigned __int8 *)(a1 + 48);

    if (!v17) {
      goto LABEL_10;
    }
    uint64_t v16 = [*(id *)(a1 + 40) serviceSession];
    id v18 = [*(id *)(a1 + 32) guid];
    int v19 = [*(id *)(a1 + 40) imdAccount];
    [v16 didSendMessageReadReceiptForMessageID:v18 account:v19];
  }
LABEL_10:
}

void sub_84DA0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x84AACLL);
  }
  _Unwind_Resume(a1);
}

id sub_84E44(id a1, IMDHandle *a2)
{
  id v2 = [(IMDHandle *)a2 ID];
  uint64_t v3 = +[TUHandle normalizedHandleWithDestinationID:v2];

  return v3;
}

id sub_84EA4(id a1, TUHandle *a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)TUConversationMember) initWithHandle:v2];

  return v3;
}

uint64_t sub_86344(uint64_t result)
{
  return result;
}

id AttachmentRefreshUtilGetMMCSRefreshHeaders()
{
  if (qword_EB440 != -1) {
    dispatch_once(&qword_EB440, &stru_DFE08);
  }
  if (!off_EB438)
  {
    if (IMOSLoggingEnabled())
    {
      char v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "AttachmentRefreshUtilGetMMCSRefreshHeaders could not load MMCS function", buf, 2u);
      }
    }
    return 0;
  }
  id v0 = objc_alloc_init((Class)NSMutableString);
  uint64_t v1 = (uint64_t (*)(uint64_t))off_EB438;
  if (qword_EB450 != -1) {
    dispatch_once(&qword_EB450, &stru_DFE28);
  }
  id v2 = (void *)v1(qword_EB448);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v19 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v14;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v14 != v4) {
          objc_enumerationMutation(v2);
        }
        [v0 appendString:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@:%@\n", *(void *)(*((void *)&v13 + 1) + 8 * i), objc_msgSend(v2, "objectForKey:", *(void *)(*((void *)&v13 + 1) + 8 * i)))];
      }
      id v3 = [v2 countByEnumeratingWithState:&v13 objects:v19 count:16];
    }
    while (v3);
  }
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v18 = v2;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Got mmcs header info dict%@", buf, 0xCu);
    }
  }

  BOOL v7 = [v0 length] == 0;
  int v8 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v8)
    {
      char v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "AttachmentRefreshUtilGetMMCSRefreshHeaders could not get mmcs headers", buf, 2u);
      }
    }

    return 0;
  }
  if (v8)
  {
    id v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v18 = v0;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "Got mmcs header %@", buf, 0xCu);
    }
  }
  return v0;
}

void sub_8699C(id a1)
{
  off_EB438 = (_UNKNOWN *)IMWeakLinkSymbol();
}

id AttachmentRefreshUtilConfigureStickerToken(void *a1, void *a2)
{
  if ([a2 objectForKey:@"mmcs-url"])
  {
    uint64_t v4 = +[NSURL URLWithString:](NSURL, "URLWithString:", [a2 objectForKey:@"mmcs-url"]);
    BOOL v5 = +[NSString stringWithFormat:@"%@://%@", [(NSURL *)v4 scheme], [(NSURL *)v4 host]];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "AttachmentRefreshUtilConfigureStickerToken dictionary has not auth url", buf, 2u);
      }
    }
    BOOL v5 = 0;
  }
  [a1 setAuthURL:v5];
  objc_msgSend(a1, "setOwner:", objc_msgSend(a2, "objectForKey:", @"mmcs-owner"));
  objc_msgSend(a1, "setFileLength:", objc_msgSend(a2, "objectForKey:", @"file-size"));
  objc_msgSend(a1, "setSignature:", objc_msgSend(objc_msgSend(a2, "objectForKey:", @"mmcs-signature-hex"), "_FTDataFromHexString"));
  return [a1 setRequestContentHeaders:AttachmentRefreshUtilGetMMCSRefreshHeaders()];
}

void sub_86B50(id a1)
{
  qword_EB448 = @"com.apple.Messenger/1.0";
}

id PeopleSetByAddingMyID(void *a1, void *a2)
{
  if (![a1 length] || !objc_msgSend(a2, "count")) {
    return a2;
  }
  if ([a2 count]) {
    id v4 = [objc_alloc((Class)NSMutableSet) initWithArray:a2];
  }
  else {
    id v4 = 0;
  }
  [v4 addObject:a1];
  id v6 = [v4 allObjects];

  return v6;
}

id URIsFromHandles(void *a1)
{
  id v1 = [a1 arrayByApplyingSelector:"ID"];

  return [v1 _URIsFromIDs];
}

id _LastAddressedURIForChatLogMetricIfNeeded(void *a1, id a2, void *a3, void *a4, int a5)
{
  if ([a3 isReplicating])
  {
    id v8 = objc_msgSend(objc_msgSend(a3, "mainSession"), "outgoingReplicationCallerIDForChat:", a1);
    id v9 = objc_msgSend(objc_msgSend((id)IMChatCanonicalIDSIDsForAddress(), "_stripFZIDPrefix"), "_bestGuessURI");
    id v10 = objc_msgSend(a3, "idsAccountForFromURI:toURI:", v9, objc_msgSend(a1, "chatIdentifier"));
    if ([v10 _validateIDSAccount])
    {
      if (a4) {
        *a4 = v10;
      }
      if (IMOSLoggingEnabled())
      {
        char v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138413058;
          id v75 = v9;
          __int16 v76 = 2112;
          id v77 = v8;
          __int16 v78 = 2112;
          id v79 = [v10 uniqueID];
          __int16 v80 = 2112;
          id v81 = objc_msgSend(v10, "im_registeredURIs");
          char v12 = "Using caller URI %@ to replicate caller ID %@ idsAccount %@, idsAccount im_registeredURIs: %@";
          long long v13 = v11;
          uint32_t v14 = 42;
LABEL_43:
          _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, v12, buf, v14);
          return v9;
        }
      }
      return v9;
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v21 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v75 = v8;
        _os_log_impl(&dword_0, v21, OS_LOG_TYPE_INFO, "Did not find valid IDS Account for replication caller ID %@", buf, 0xCu);
      }
    }
    return 0;
  }
  id v15 = objc_msgSend(a3, "messageServiceTypeForURI:", objc_msgSend(a1, "chatIdentifier"));
  if (!a2) {
    a2 = [a1 lastAddressedLocalHandle];
  }
  id v16 = [(id)objc_opt_class() idsAccounts];
  if (![a2 length])
  {
    id v9 = [a3 callerURIForMessageServiceType:v15];
    if (!IMOSLoggingEnabled()) {
      goto LABEL_35;
    }
    id v22 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO)) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 138412290;
    id v75 = v9;
    id v23 = "lastAddressedLocalHandle was nil, falling back to [session callerURI] %@";
LABEL_33:
    _os_log_impl(&dword_0, v22, OS_LOG_TYPE_INFO, v23, buf, 0xCu);
    goto LABEL_35;
  }
  if (![a2 isEqualToIgnoringCase:kFZServiceDefaultsSentinelAlias])
  {
    id v9 = [a2 _bestGuessURI];
    if (!IMOSLoggingEnabled()) {
      goto LABEL_35;
    }
    id v22 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO)) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 138412290;
    id v75 = v9;
    id v23 = "lastAddressedLocalHandle is %@";
    goto LABEL_33;
  }
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  id v17 = [v16 countByEnumeratingWithState:&v66 objects:v73 count:16];
  if (v17)
  {
    uint64_t v18 = *(void *)v67;
LABEL_14:
    uint64_t v19 = 0;
    while (1)
    {
      if (*(void *)v67 != v18) {
        objc_enumerationMutation(v16);
      }
      id v20 = *(void **)(*((void *)&v66 + 1) + 8 * v19);
      if (![v20 accountType]) {
        break;
      }
      if (v17 == (id)++v19)
      {
        id v17 = [v16 countByEnumeratingWithState:&v66 objects:v73 count:16];
        id v9 = 0;
        if (v17) {
          goto LABEL_14;
        }
        goto LABEL_35;
      }
    }
    id v9 = [a3 callerURIForIDSAccount:v20];
    if (IMOSLoggingEnabled())
    {
      id v22 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v75 = v9;
        id v23 = "lastAddressedLocalHandle was sentinel alias, falling back to [session callerURI] %@";
        goto LABEL_33;
      }
    }
  }
  else
  {
    id v9 = 0;
  }
LABEL_35:
  id v24 = objc_msgSend(a3, "idsAccountForFromURI:toURI:", v9, objc_msgSend(a1, "chatIdentifier"));
  [v9 _stripFZIDPrefix];
  if (IMStringIsPhoneNumber())
  {
    [v9 _stripFZIDPrefix];
    id v9 = [(id)IMCanonicalizeFormattedString() _URIFromCanonicalizedPhoneNumber];
  }
  if (![v24 _validateIDSAccount])
  {
    id v9 = [a3 callerURIForMessageServiceType:v15];
    id v28 = objc_msgSend(a3, "idsAccountForFromURI:toURI:", v9, objc_msgSend(a1, "chatIdentifier"));
    if ([v28 _validateIDSAccount])
    {
      if (a4) {
        *a4 = v28;
      }
      if (IMOSLoggingEnabled())
      {
        uint64_t v29 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v75 = v9;
          _os_log_impl(&dword_0, v29, OS_LOG_TYPE_INFO, "Ultimately decided the caller id was after falling back to session URI %@", buf, 0xCu);
        }
      }
      if (a5)
      {
        id v30 = +[IMMetricsCollector sharedInstance];
        [(IMMetricsCollector *)v30 trackEvent:IMMetricsCollectorEventCallerIDSwitched];
      }
      return v9;
    }
    if (IMOSLoggingEnabled())
    {
      id v31 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v75 = a2;
        _os_log_impl(&dword_0, v31, OS_LOG_TYPE_INFO, "First try was no good based on lastAddressedHandle %@", buf, 0xCu);
      }
    }
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    id v32 = [v16 countByEnumeratingWithState:&v62 objects:v72 count:16];
    if (v32)
    {
      uint64_t v33 = *(void *)v63;
LABEL_57:
      uint64_t v34 = 0;
      while (1)
      {
        if (*(void *)v63 != v33) {
          objc_enumerationMutation(v16);
        }
        id v35 = *(void **)(*((void *)&v62 + 1) + 8 * v34);
        if (v15 == [v35 serviceType])
        {
          id v9 = [a3 callerURIForIDSAccount:v35];
          if ([v35 _validateIDSAccount]) {
            break;
          }
        }
        if (v32 == (id)++v34)
        {
          id v32 = [v16 countByEnumeratingWithState:&v62 objects:v72 count:16];
          if (v32) {
            goto LABEL_57;
          }
          goto LABEL_64;
        }
      }
      if (a4) {
        *a4 = v35;
      }
      if (IMOSLoggingEnabled())
      {
        id v42 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v75 = v9;
          _os_log_impl(&dword_0, v42, OS_LOG_TYPE_INFO, "Ultimately decided the caller id was %@", buf, 0xCu);
        }
      }
      if (a5)
      {
        uint64_t v43 = +[IMMetricsCollector sharedInstance];
        [(IMMetricsCollector *)v43 trackEvent:IMMetricsCollectorEventCallerIDSwitched];
      }
      if (v9) {
        return v9;
      }
      if (IMOSLoggingEnabled())
      {
        char v44 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v44, OS_LOG_TYPE_INFO, "******** Did not find a callerURI ********. Logging accounts", buf, 2u);
        }
      }
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      id v45 = [a3 accounts];
      id v46 = [v45 countByEnumeratingWithState:&v58 objects:v71 count:16];
      if (v46)
      {
        uint64_t v47 = *(void *)v59;
        do
        {
          for (i = 0; i != v46; i = (char *)i + 1)
          {
            if (*(void *)v59 != v47) {
              objc_enumerationMutation(v45);
            }
            __int16 v49 = *(void **)(*((void *)&v58 + 1) + 8 * i);
            if (IMOSLoggingEnabled())
            {
              id v50 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                id v75 = v49;
                _os_log_impl(&dword_0, v50, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
              }
            }
          }
          id v46 = [v45 countByEnumeratingWithState:&v58 objects:v71 count:16];
          id v9 = 0;
        }
        while (v46);
        return v9;
      }
    }
    else
    {
LABEL_64:
      if (IMOSLoggingEnabled())
      {
        uint64_t v36 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v36, OS_LOG_TYPE_INFO, "******** Did not find a callerURI ********. Logging accounts", buf, 2u);
        }
      }
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      id v37 = [v16 countByEnumeratingWithState:&v54 objects:v70 count:16];
      if (v37)
      {
        uint64_t v38 = *(void *)v55;
        do
        {
          for (j = 0; j != v37; j = (char *)j + 1)
          {
            if (*(void *)v55 != v38) {
              objc_enumerationMutation(v16);
            }
            id v40 = *(void **)(*((void *)&v54 + 1) + 8 * (void)j);
            if (IMOSLoggingEnabled())
            {
              id v41 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                id v75 = v40;
                _os_log_impl(&dword_0, v41, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
              }
            }
          }
          id v37 = [v16 countByEnumeratingWithState:&v54 objects:v70 count:16];
        }
        while (v37);
      }
    }
    return 0;
  }
  if (a4) {
    *a4 = v24;
  }
  if (IMOSLoggingEnabled())
  {
    id v25 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      id v26 = [v24 uniqueID];
      id v27 = objc_msgSend(v24, "im_registeredURIs");
      *(_DWORD *)buf = 138412802;
      id v75 = v9;
      __int16 v76 = 2112;
      id v77 = v26;
      __int16 v78 = 2112;
      id v79 = v27;
      char v12 = "Ultimately decided the caller id was %@ using idsAccount %@, idsAccount im_registeredURIs: %@";
      long long v13 = v25;
      uint32_t v14 = 32;
      goto LABEL_43;
    }
  }
  return v9;
}

void *IMDAccountForIDSAccount(id a1, void *a2, void *a3)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v6 = [a2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v13;
    while (2)
    {
      id v9 = 0;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(a2);
        }
        id v10 = *(void **)(*((void *)&v12 + 1) + 8 * (void)v9);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && [v10 idsAccount] == a1)
        {
          IMDInconsistencyResolved();
          return v10;
        }
        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [a2 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  if ([a3 isActive]) {
    IMDNoticedInconsistency();
  }
  return 0;
}

void sub_87C20(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  id v10 = a2;
  if (IMOSLoggingEnabled())
  {
    char v11 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v23 = 138412290;
      v24[0] = v10;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "    Delivered FTMessage: %@", (uint8_t *)&v23, 0xCu);
    }
  }
  uint64_t v12 = _FZErrorTypeFromResponseCodeAndError();
  uint64_t v13 = v12;
  if (a3) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = v12 == 0;
  }
  uint64_t v15 = v14;
  if (IMOSLoggingEnabled())
  {
    id v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      int v23 = 67109376;
      LODWORD(v24[0]) = a4;
      WORD2(v24[0]) = 1024;
      *(_DWORD *)((char *)v24 + 6) = v13;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "    Result code: %d, errorType = %d", (uint8_t *)&v23, 0xEu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v17 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      int v23 = 138412290;
      v24[0] = a5;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "    Result dictionary: %@", (uint8_t *)&v23, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      int v23 = 138412290;
      v24[0] = a3;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "    Error: %@", (uint8_t *)&v23, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      CFStringRef v20 = @"NO";
      if (v15) {
        CFStringRef v20 = @"YES";
      }
      int v23 = 138412290;
      v24[0] = v20;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_INFO, "  Success: %@", (uint8_t *)&v23, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v21 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      LOWORD(v23) = 0;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_INFO, "Sending callback for FTMessage send", (uint8_t *)&v23, 2u);
    }
  }
  uint64_t v22 = *(void *)(a1 + 32);
  if (v22) {
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v22 + 16))(v22, a2, v15, v13);
  }
}

void sub_88380(uint64_t a1, void *a2, char a3)
{
  int v6 = IMOSLoggingEnabled();
  if (a3)
  {
    if (v6)
    {
      id v7 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id Weak = objc_loadWeak((id *)(a1 + 48));
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Got a successful reply for message %@", buf, 0xCu);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    if (v6)
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id Weak = a2;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "AttachmentRefreshDeliveryController failed to refresh sticker using message %@", buf, 0xCu);
      }
    }
    objc_copyWeak(v9, (id *)(a1 + 48));
    v9[1] = *(id *)(a1 + 56);
    im_dispatch_after();
    objc_destroyWeak(v9);
  }
}

id sub_885A0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id Weak = objc_loadWeak((id *)(a1 + 48));
  uint64_t v4 = *(void *)(a1 + 56) + 1;
  uint64_t v5 = *(void *)(a1 + 40);

  return [v2 sendFTMessage:Weak attempts:v4 withCompletionBlock:v5];
}

id sub_88610(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v6.receiver = v3;
  v6.super_class = v1;
  id v4 = objc_msgSendSuper2(&v6, "initWithServiceSession:", a1);

  return v4;
}

uint64_t type metadata accessor for MessageServiceReachabilityDelegate()
{
  return self;
}

void sub_886B0()
{
  id v1 = [v0 serviceSession];
  if (!v1) {
    return;
  }
  id v2 = v1;
  id v3 = [self sharedAccountController];
  if (!v3)
  {
    __break(1u);
    goto LABEL_27;
  }
  id v4 = v3;
  id v5 = [v2 service];
  id v6 = [v4 accountsForService:v5];

  if (!v6)
  {
LABEL_27:
    __break(1u);
    return;
  }
  sub_89A94(0, &qword_EB0A8);
  unint64_t v7 = sub_96D80();

  if (v7 >> 62) {
    goto LABEL_23;
  }
  uint64_t v8 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = sub_96F50())
  {
    unint64_t v9 = 0;
    if ((v7 & 0xC000000000000001) != 0)
    {
LABEL_7:
      id v10 = (id)sub_96F20();
      goto LABEL_11;
    }
    while ((v9 & 0x8000000000000000) == 0)
    {
      if (v9 >= *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFFF8))) {
        goto LABEL_22;
      }
      id v10 = *(id *)(v7 + 8 * v9 + 32);
LABEL_11:
      char v11 = v10;
      unint64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        break;
      }
      self;
      uint64_t v13 = (void *)swift_dynamicCastObjCClass();
      if (v13
        && (BOOL v14 = v13, (v15 = [v13 idsAccount]) != 0)
        && (id v16 = v15, v17 = [v15 canSend], v16, (v17 & 1) != 0))
      {
        id v18 = v11;
        id v19 = [v14 aliases];
        uint64_t v20 = sub_96D80();

        sub_89648(v20);
        if (v12 == v8) {
          goto LABEL_24;
        }
      }
      else
      {

        if (v12 == v8) {
          goto LABEL_24;
        }
      }
      ++v9;
      if ((v7 & 0xC000000000000001) != 0) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
  }
LABEL_24:

  swift_bridgeObjectRelease_n();
}

void sub_88948(uint64_t a1, uint64_t a2, NSString a3, uint64_t a4, NSString a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_88ACC(a1);
  v15.super.isa = sub_96D70().super.isa;
  swift_bridgeObjectRelease();
  if (a3) {
    a3 = sub_96D20();
  }
  if (a5) {
    a5 = sub_96D20();
  }
  id v16 = self;
  NSString v17 = sub_96D20();
  aBlock[4] = a11;
  aBlock[5] = a12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_88BF4;
  aBlock[3] = &unk_DFEC0;
  id v18 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v16 idInfoForDestinations:v15.super.isa service:a3 fromID:a5 infoTypes:a6 options:a7 listenerID:v17 queue:a10 completionBlock:v18];
  _Block_release(v18);
}

void *sub_88ACC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  id v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    unint64_t v9 = &_swiftEmptyArrayStorage;
    sub_89838(0, v1, 0);
    id v2 = &_swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_89838(0, v2[2] + 1, 1);
        id v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_89838((char *)(v5 > 1), v6 + 1, 1);
        id v2 = v9;
      }
      v4 += 16;
      v2[2] = v6 + 1;
      sub_89B50(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_88BF4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2) {
    uint64_t v5 = sub_96D00();
  }
  else {
    uint64_t v5 = 0;
  }
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_88D74(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_96EC0();
    sub_89A94(0, &qword_EB0B8);
    sub_89AD0();
    sub_96E20();
    uint64_t v1 = v26;
    uint64_t v25 = v27;
    uint64_t v2 = v28;
    uint64_t v3 = v29;
    unint64_t v4 = v30;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v25 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v24 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    uint64_t v8 = v3;
    if (v1 < 0)
    {
      if (!sub_96ED0()) {
        goto LABEL_45;
      }
      sub_89A94(0, &qword_EB0B8);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v11 = v31;
      swift_unknownObjectRelease();
      if (!v31) {
        goto LABEL_45;
      }
      goto LABEL_32;
    }
    if (!v4) {
      break;
    }
    unint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v10 = v9 | (v3 << 6);
LABEL_31:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_45;
    }
LABEL_32:
    if ([v11 canSend])
    {
      id v15 = [v11 serviceName];
      if (!v15)
      {
        sub_96D30();
        goto LABEL_41;
      }
      id v16 = v15;
      uint64_t v17 = v1;
      uint64_t v18 = sub_96D30();
      uint64_t v20 = v19;

      uint64_t v21 = sub_96D30();
      if (v20)
      {
        if (v18 == v21 && v20 == v22)
        {

          swift_bridgeObjectRelease_n();
LABEL_45:
          sub_89B48();
          return;
        }
        char v23 = sub_96FA0();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v1 = v17;
        if (v23) {
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v1 = v17;
LABEL_41:

        swift_bridgeObjectRelease();
      }
    }
    else
    {
    }
  }
  int64_t v12 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v12 >= v24) {
      goto LABEL_45;
    }
    unint64_t v13 = *(void *)(v25 + 8 * v12);
    ++v3;
    if (!v13)
    {
      uint64_t v3 = v8 + 2;
      if (v8 + 2 >= v24) {
        goto LABEL_45;
      }
      unint64_t v13 = *(void *)(v25 + 8 * v3);
      if (!v13)
      {
        uint64_t v3 = v8 + 3;
        if (v8 + 3 >= v24) {
          goto LABEL_45;
        }
        unint64_t v13 = *(void *)(v25 + 8 * v3);
        if (!v13)
        {
          uint64_t v3 = v8 + 4;
          if (v8 + 4 >= v24) {
            goto LABEL_45;
          }
          unint64_t v13 = *(void *)(v25 + 8 * v3);
          if (!v13)
          {
            uint64_t v3 = v8 + 5;
            if (v8 + 5 >= v24) {
              goto LABEL_45;
            }
            unint64_t v13 = *(void *)(v25 + 8 * v3);
            if (!v13)
            {
              uint64_t v14 = v8 + 6;
              while (v24 != v14)
              {
                unint64_t v13 = *(void *)(v25 + 8 * v14++);
                if (v13)
                {
                  uint64_t v3 = v14 - 1;
                  goto LABEL_30;
                }
              }
              goto LABEL_45;
            }
          }
        }
      }
    }
LABEL_30:
    unint64_t v4 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v3 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

uint64_t sub_89148()
{
  return IMSMSFallbackEnabled() ^ 1;
}

uint64_t sub_89164()
{
  id v0 = self;
  id v1 = [v0 sharedInstance];
  id v2 = [v1 ctSubscriptionInfo];

  if (!v2) {
    return 0;
  }
  NSString v3 = sub_96D20();
  id v4 = objc_msgSend(v2, "__im_subscriptionContextForPhoneNumber:", v3);

  if (!v4) {
    return 0;
  }
  id v5 = [v0 sharedInstance];
  id v6 = [v5 copyIsoCountryCodeForSubscriptionContext:v4];

  uint64_t v7 = sub_96D30();
  return v7;
}

uint64_t sub_89278()
{
  return sub_89B38(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

id sub_89314()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MessageServiceReachabilityDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_89358()
{
  return (*(uint64_t (**)(void))&stru_68.segname[swift_isaMask & *v0])();
}

uint64_t sub_8938C()
{
  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t sub_893D0()
{
  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t sub_89404(uint64_t a1)
{
  id v6 = (uint64_t (*)(uint64_t))(*(void *)((char *)&stru_68.offset + (swift_isaMask & *v1))
                                       + **(int **)((char *)&stru_68.offset + (swift_isaMask & *v1)));
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_89518;
  return v6(a1);
}

uint64_t sub_89518(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  NSString v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_89614()
{
  return (*(uint64_t (**)(void))((char *)&stru_68.size + (swift_isaMask & *v0)))();
}

uint64_t sub_89648(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)sub_89734((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *id v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

char *sub_89734(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_89B60(&qword_EB1D0);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_89838(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_89858(a1, a2, a3, *v3);
  void *v3 = result;
  return result;
}

char *sub_89858(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_89B60(&qword_EB1C0);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_89A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_89A8C()
{
  return swift_release();
}

uint64_t sub_89A94(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_89AD0()
{
  unint64_t result = qword_EB0C0;
  if (!qword_EB0C0)
  {
    sub_89A94(255, &qword_EB0B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_EB0C0);
  }
  return result;
}

uint64_t sub_89B38(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_89B48()
{
  return swift_release();
}

_OWORD *sub_89B50(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_89B60(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_89BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_89B60(&qword_EB1C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_89C10(uint64_t a1)
{
  uint64_t v2 = sub_89B60(&qword_EB1C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id MessageServiceSession.calculateReachability(with:responseHandler:)(void *a1, uint64_t a2)
{
  id result = [self sharedAccountController];
  if (result)
  {
    unint64_t v6 = result;
    NSString v7 = [a1 accountID];
    if (!v7)
    {
      sub_96D30();
      NSString v7 = sub_96D20();
      swift_bridgeObjectRelease();
    }
    id v8 = [v6 accountForAccountID:v7];

    if (v8)
    {
      id v9 = [v8 loginID];
      if (v9)
      {
        int64_t v10 = v9;
        uint64_t v11 = sub_96D30();
        uint64_t v13 = v12;

        goto LABEL_9;
      }
    }
    uint64_t v11 = 0;
    uint64_t v13 = 0;
LABEL_9:
    swift_beginAccess();
    id v14 = objc_getAssociatedObject(v2, &unk_EB1D8);
    swift_endAccess();
    if (v14)
    {
      sub_96EA0();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v19, 0, sizeof(v19));
    }
    sub_89BA8((uint64_t)v19, (uint64_t)v20);
    if (v21)
    {
      type metadata accessor for MessageReachabilityController();
      if (swift_dynamicCast())
      {
        id v15 = v18;
LABEL_17:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*v15 + 152))(a1, a2, v11, v13);
        swift_release();
        return (id)swift_bridgeObjectRelease();
      }
    }
    else
    {
      sub_89C10((uint64_t)v20);
    }
    type metadata accessor for MessageServiceReachabilityDelegate();
    id v16 = v2;
    id v17 = sub_88610(v16);
    type metadata accessor for MessageReachabilityController();
    id v15 = (void *)swift_allocObject();
    void v15[2] = v17;
    void v15[3] = &off_DFEE8;
    swift_beginAccess();
    swift_retain();
    objc_setAssociatedObject(v16, &unk_EB1D8, v15, (char *)&dword_0 + 1);
    swift_endAccess();
    swift_release();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_89F88()
{
  uint64_t v0 = sub_96CE0();
  sub_95994(v0, qword_EB1E8);
  sub_92094(v0, (uint64_t)qword_EB1E8);
  return sub_96CD0();
}

uint64_t MessageReachabilityController.delegate.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t MessageReachabilityController.__allocating_init(delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t MessageReachabilityController.init(delegate:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_8A07C(uint64_t a1, uint64_t a2)
{
  NSString v5 = sub_96D20();
  int IsPhoneNumber = IMStringIsPhoneNumber();

  if (IsPhoneNumber
    && (NSString v7 = sub_96D20(),
        id v8 = (id)IMCanonicalizeFormattedString(),
        v7,
        v8))
  {
    uint64_t v9 = sub_96D30();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(v2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  id v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(ObjectType, v12);
  if (sub_8A1B4(a1, a2, v14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v11)
  {
    char v16 = sub_8A1B4(v9, v11, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16) {
      return 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_8A1B4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = sub_96FA0();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_96FA0() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_8A27C(uint64_t a1, uint64_t a2)
{
  NSString v5 = sub_96D20();
  int IsPhoneNumber = IMStringIsPhoneNumber();

  if (!IsPhoneNumber) {
    return 0;
  }
  NSString v7 = sub_96D20();
  uint64_t v9 = *(void **)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 40))(a1, a2, ObjectType, v8);
  if (v11)
  {
    NSString v12 = sub_96D20();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  id v14 = (id)IMInternationalForPhoneNumberWithOptions();

  if (v14)
  {
    a1 = sub_96D30();
    a2 = v15;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  id v16 = [v9 phoneNumbersOfActiveSubscriptions];
  id v17 = (void *)sub_96D80();

  LOBYTE(v16) = sub_8A1B4(a1, a2, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16 & 1;
}

uint64_t sub_8A3D4(void *a1)
{
  id v3 = [a1 context];
  id v4 = [v3 senderLastAddressedHandle];

  if (v4)
  {
    uint64_t v5 = sub_96D30();
    uint64_t v7 = v6;

    char v8 = sub_8A27C(v5, v7);
    swift_bridgeObjectRelease();
    if (v8) {
      return 1;
    }
  }
  id v9 = [a1 context];
  id v10 = [v9 senderLastAddressedSIMID];

  if (!v10) {
    return 0;
  }
  id v11 = [*(id *)(v1 + 16) phoneNumberOnSubscriptionWithSIMID:v10];

  if (v11
    && (uint64_t v12 = sub_96D30(),
        uint64_t v14 = v13,
        v11,
        LOBYTE(v12) = sub_8A27C(v12, v14),
        swift_bridgeObjectRelease(),
        (v12 & 1) != 0))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_8A508()
{
  sub_89B60(&qword_EB1D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_A5610;
  *(void *)(inited + 32) = sub_96D30();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = sub_96D30();
  *(void *)(inited + 56) = v2;
  Swift::Int v3 = sub_94964(inited);
  swift_setDeallocating();
  uint64_t result = swift_arrayDestroy();
  qword_EB208 = v3;
  return result;
}

uint64_t sub_8A5B8(void *a1)
{
  Swift::Int v3 = *(void **)(v1 + 16);
  id v4 = [v3 idsRegisteredSIMIDs];
  uint64_t v5 = sub_96D80();

  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRelease();
  if (v6 || ![v3 isUsableForSending]) {
    return 0;
  }
  id v7 = [a1 context];
  id v8 = [v7 serviceOfLastMessage];

  if (v8)
  {
    uint64_t v9 = sub_96D30();
    unint64_t v11 = v10;

    if (qword_EB200 != -1) {
      swift_once();
    }
    if (sub_8AC4C(v9, v11, qword_EB208))
    {
      if (qword_EB1E0 != -1) {
        swift_once();
      }
      uint64_t v12 = sub_96CE0();
      sub_92094(v12, (uint64_t)qword_EB1E8);
      id v13 = a1;
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_96CC0();
      os_log_type_t v15 = sub_96E60();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136315394;
        id v17 = [v13 requestID];
        uint64_t v18 = sub_96D30();
        uint64_t v41 = v9;
        unint64_t v20 = v19;

        sub_91A3C(v18, v20, &v42);
        sub_96E80();

        swift_bridgeObjectRelease();
        *(_WORD *)(v16 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_91A3C(v41, v11, &v42);
        sub_96E80();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v14, v15, "No phone numbers registered - iMessage is eligible for request %s because last used service is %s", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return 1;
    }
    if (qword_EB1E0 != -1) {
      swift_once();
    }
    uint64_t v31 = sub_96CE0();
    sub_92094(v31, (uint64_t)qword_EB1E8);
    id v32 = a1;
    swift_bridgeObjectRetain();
    uint64_t v33 = sub_96CC0();
    os_log_type_t v34 = sub_96E60();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315394;
      id v36 = [v32 requestID];
      uint64_t v37 = sub_96D30();
      unint64_t v39 = v38;

      sub_91A3C(v37, v39, &v42);
      sub_96E80();

      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_91A3C(v9, v11, &v42);
      sub_96E80();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v33, v34, "No phone numbers registered - iMessage is ineligible for request %s because last used service is %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  if (qword_EB1E0 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_96CE0();
  sub_92094(v21, (uint64_t)qword_EB1E8);
  id v22 = a1;
  char v23 = sub_96CC0();
  os_log_type_t v24 = sub_96E60();
  if (!os_log_type_enabled(v23, v24))
  {

    return 1;
  }
  uint64_t v25 = (uint8_t *)swift_slowAlloc();
  uint64_t v42 = swift_slowAlloc();
  *(_DWORD *)uint64_t v25 = 136315138;
  id v26 = [v22 requestID];
  uint64_t v27 = sub_96D30();
  unint64_t v29 = v28;

  sub_91A3C(v27, v29, &v42);
  sub_96E80();

  swift_bridgeObjectRelease();
  _os_log_impl(&dword_0, v23, v24, "No phone numbers registered - iMessage is eligible for request %s because this is a new chat", v25, 0xCu);
  uint64_t v30 = 1;
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  return v30;
}

uint64_t sub_8AC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_96FD0();
    sub_96D40();
    Swift::Int v6 = sub_96FE0();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_96FA0() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_96FA0() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

id sub_8AD84(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_96CE0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  unint64_t v8 = (char *)v147 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v11 = (char *)v147 - v10;
  __chkstk_darwin(v9);
  id v13 = (char *)v147 - v12;
  uint64_t v158 = a1;
  id v14 = [a1 handleIDs];
  uint64_t v15 = sub_96D80();

  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return [*(id *)(v2 + 16) isUsableForSending];
  }
  uint64_t v156 = (uint64_t)v11;
  uint64_t v157 = (uint64_t)v8;
  BOOL v17 = (void *)v4;
  swift_bridgeObjectRetain();
  uint64_t v18 = v15 + 40;
  while (1)
  {
    swift_bridgeObjectRetain();
    NSString v19 = sub_96D20();
    int IsBusinessID = IMStringIsBusinessID();
    swift_bridgeObjectRelease();

    if (!IsBusinessID) {
      break;
    }
    v18 += 16;
    if (!--v16)
    {
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease_n();
  os_log_type_t v24 = *(void **)(v2 + 16);
  if (([v24 hasMultipleSubscriptionsWithAtLeastOneActive] & 1) == 0) {
    return [v24 isUsableForSending];
  }
  uint64_t v25 = v158;
  if (sub_8A5B8(v158)) {
    return &dword_0 + 1;
  }
  id v26 = [v25 context];
  id v27 = [v26 senderLastAddressedHandle];

  if (v27)
  {
    uint64_t v28 = sub_96D30();
    uint64_t v30 = v29;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v30 = 0;
  }
  id v31 = [v25 context];
  id v32 = [v31 senderLastAddressedSIMID];

  uint64_t v155 = v5;
  if (v32)
  {
    uint64_t v33 = sub_96D30();
    unint64_t v35 = v34;

    BOOL v36 = v35 == 0;
    if (!v30 && v35)
    {
      swift_bridgeObjectRetain();
      NSString v37 = sub_96D20();
      swift_bridgeObjectRelease();
      id v38 = [v24 phoneNumberOnSubscriptionWithSIMID:v37];

      if (!v38) {
        goto LABEL_25;
      }
      uint64_t v28 = sub_96D30();
      uint64_t v30 = v39;

      BOOL v36 = 0;
    }
  }
  else
  {
    unint64_t v35 = 0;
    uint64_t v33 = 0;
    BOOL v36 = 1;
  }
  if (v30)
  {
    char v40 = sub_8A07C(v28, v30);
    unsigned __int8 v161 = v40 & 1;
    unsigned int v41 = [v24 isUsableForSending];
    BOOL v154 = v36;
    uint64_t v153 = v33;
    if ((v41 | v36))
    {
      if (v40) {
        goto LABEL_83;
      }
    }
    else
    {
      uint64_t v151 = v30;
      swift_bridgeObjectRetain();
      id v51 = [v24 idsRegisteredSIMIDs];
      unsigned int v52 = (void *)sub_96D80();

      LOBYTE(v51) = sub_8A1B4(v33, v35, v52);
      swift_bridgeObjectRelease();
      if (v51)
      {
        swift_bridgeObjectRelease();
        unsigned __int8 v161 = 1;
        uint64_t v30 = v151;
        goto LABEL_83;
      }
      if (qword_EB1E0 != -1) {
        swift_once();
      }
      sub_92094((uint64_t)v17, (uint64_t)qword_EB1E8);
      uint64_t v53 = v158;
      swift_bridgeObjectRetain();
      id v54 = v53;
      long long v55 = sub_96CC0();
      os_log_type_t v56 = sub_96E60();
      int v57 = v56;
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v58 = swift_slowAlloc();
        os_log_t v149 = v55;
        uint64_t v59 = v58;
        uint64_t v150 = swift_slowAlloc();
        v159[0] = v150;
        *(_DWORD *)uint64_t v59 = 136446466;
        v147[1] = v59 + 4;
        id v60 = [v54 requestID];
        int v148 = v57;
        id v61 = v60;
        v147[0] = sub_96D30();
        uint64_t v152 = v28;
        unint64_t v63 = v62;

        uint64_t v160 = sub_91A3C(v147[0], v63, v159);
        sub_96E80();

        uint64_t v28 = v152;
        swift_bridgeObjectRelease();
        *(_WORD *)(v59 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v160 = sub_91A3C(v33, v35, v159);
        sub_96E80();
        swift_bridgeObjectRelease_n();
        os_log_t v64 = v149;
        _os_log_impl(&dword_0, v149, (os_log_type_t)v148, "%{public}s SIMID %s not found in registered good list", (uint8_t *)v59, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v30 = v151;
      unsigned __int8 v161 = 0;
    }
    long long v65 = v158;
    if (sub_8A3D4(v158))
    {
      uint64_t v66 = v155;
      if (qword_EB1E0 != -1) {
        swift_once();
      }
      uint64_t v67 = sub_92094((uint64_t)v17, (uint64_t)qword_EB1E8);
      (*(void (**)(char *, uint64_t, void *))(v66 + 16))(v13, v67, v17);
      swift_bridgeObjectRetain();
      id v68 = v65;
      swift_bridgeObjectRetain();
      id v69 = v68;
      id v70 = sub_96CC0();
      os_log_type_t v71 = sub_96E60();
      int v72 = v71;
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v73 = swift_slowAlloc();
        uint64_t v158 = v17;
        uint64_t v152 = v28;
        uint64_t v74 = v73;
        uint64_t v157 = swift_slowAlloc();
        v159[0] = v157;
        *(_DWORD *)uint64_t v74 = 136446722;
        id v75 = [v69 requestID];
        LODWORD(v156) = v72;
        unint64_t v76 = v30;
        id v77 = v75;
        uint64_t v78 = sub_96D30();
        unint64_t v80 = v79;

        uint64_t v160 = sub_91A3C(v78, v80, v159);
        sub_96E80();

        swift_bridgeObjectRelease();
        *(_WORD *)(v74 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v160 = sub_91A3C(v152, v76, v159);
        sub_96E80();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v74 + 22) = 2080;
        if (v154) {
          uint64_t v81 = 0x3E6C696E3CLL;
        }
        else {
          uint64_t v81 = v153;
        }
        if (v154) {
          unint64_t v82 = 0xE500000000000000;
        }
        else {
          unint64_t v82 = v35;
        }
        swift_bridgeObjectRetain();
        uint64_t v160 = sub_91A3C(v81, v82, v159);
        sub_96E80();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v70, (os_log_type_t)v156, "%{public}s alias %s SIMID %s not registered but active in CT. deferring to other services", (uint8_t *)v74, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, void *))(v155 + 8))(v13, v158);
        return 0;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        (*(void (**)(char *, void *))(v66 + 8))(v13, v17);
        return 0;
      }
    }
    if (sub_8A3D4(v65))
    {
      if (v154) {
        goto LABEL_83;
      }
      uint64_t v83 = HIBYTE(v35) & 0xF;
      if ((v35 & 0x2000000000000000) == 0) {
        uint64_t v83 = v153 & 0xFFFFFFFFFFFFLL;
      }
      if (!v83) {
        goto LABEL_83;
      }
      unint64_t v84 = v30;
      id v85 = [v158 context];
      id v86 = [v85 lastUsedServiceName];

      uint64_t v30 = v84;
      if (v86)
      {

        id v87 = [v158 context];
        id v88 = [v87 lastUsedServiceName];

        if (v88)
        {
          uint64_t v89 = sub_96D30();
          uint64_t v91 = v90;

          uint64_t v92 = sub_96D30();
          if (v91)
          {
            if (v89 == v92 && v91 == v93)
            {
              swift_bridgeObjectRelease_n();
              uint64_t v30 = v84;
            }
            else
            {
              char v113 = sub_96FA0();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v30 = v84;
              if ((v113 & 1) == 0) {
                goto LABEL_83;
              }
            }
            goto LABEL_76;
          }
        }
        else
        {
          sub_96D30();
        }
        swift_bridgeObjectRelease();
LABEL_82:
        uint64_t v30 = v84;
        goto LABEL_83;
      }
LABEL_76:
      if ((sub_8A27C(v28, v30) & 1) == 0)
      {
        unsigned int v114 = [v24 isUsableForSending];
        unsigned __int8 v161 = v114;
        if (qword_EB1E0 != -1) {
          swift_once();
        }
        sub_92094((uint64_t)v17, (uint64_t)qword_EB1E8);
        id v115 = v158;
        swift_bridgeObjectRetain_n();
        id v116 = v115;
        id v117 = sub_96CC0();
        os_log_type_t v118 = sub_96E60();
        int v119 = v118;
        if (os_log_type_enabled(v117, v118))
        {
          uint64_t v120 = swift_slowAlloc();
          uint64_t v156 = swift_slowAlloc();
          v159[0] = v156;
          *(_DWORD *)uint64_t v120 = 136446722;
          uint64_t v150 = v120 + 4;
          id v121 = [v116 requestID];
          LODWORD(v151) = v114;
          unint64_t v122 = v35;
          id v123 = v121;
          uint64_t v124 = sub_96D30();
          LODWORD(v152) = v119;
          uint64_t v125 = v124;
          unint64_t v127 = v126;

          unint64_t v35 = v122;
          uint64_t v160 = sub_91A3C(v125, v127, v159);
          sub_96E80();

          swift_bridgeObjectRelease();
          *(_WORD *)(v120 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v160 = sub_91A3C(v28, v84, v159);
          sub_96E80();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v120 + 22) = 1024;
          LODWORD(v160) = v151;
          sub_96E80();
          _os_log_impl(&dword_0, v117, (os_log_type_t)v152, "%{public}s alias %s is not from an active CT subscription. set hasAccountsOnService=%{BOOL}d", (uint8_t *)v120, 0x1Cu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        goto LABEL_82;
      }
LABEL_83:
      uint64_t v152 = v28;
      if (qword_EB1E0 != -1) {
        swift_once();
      }
      uint64_t v128 = sub_92094((uint64_t)v17, (uint64_t)qword_EB1E8);
      uint64_t v129 = v155;
      uint64_t v130 = v157;
      (*(void (**)(uint64_t, uint64_t, void *))(v155 + 16))(v157, v128, v17);
      int v131 = v161;
      swift_bridgeObjectRetain();
      id v132 = v158;
      swift_bridgeObjectRetain();
      id v133 = v132;
      uint64_t v134 = sub_96CC0();
      os_log_type_t v135 = sub_96E60();
      int v136 = v135;
      if (os_log_type_enabled(v134, v135))
      {
        uint64_t v137 = swift_slowAlloc();
        LODWORD(v149) = v131;
        uint64_t v138 = v137;
        uint64_t v139 = swift_slowAlloc();
        uint64_t v156 = v139;
        *(_DWORD *)uint64_t v138 = 136446978;
        uint64_t v158 = v17;
        v159[0] = v139;
        uint64_t v150 = v35;
        unint64_t v140 = v30;
        id v141 = [v133 requestID];
        uint64_t v142 = sub_96D30();
        LODWORD(v151) = v136;
        unint64_t v144 = v143;

        uint64_t v160 = sub_91A3C(v142, v144, v159);
        sub_96E80();

        swift_bridgeObjectRelease();
        *(_WORD *)(v138 + 12) = 1024;
        LODWORD(v160) = v149;
        sub_96E80();
        *(_WORD *)(v138 + 18) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v160 = sub_91A3C(v152, v140, v159);
        sub_96E80();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v138 + 28) = 2080;
        if (v154) {
          uint64_t v145 = 0x3E6C696E3CLL;
        }
        else {
          uint64_t v145 = v153;
        }
        if (v154) {
          unint64_t v146 = 0xE500000000000000;
        }
        else {
          unint64_t v146 = v150;
        }
        swift_bridgeObjectRetain();
        uint64_t v160 = sub_91A3C(v145, v146, v159);
        sub_96E80();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v134, (os_log_type_t)v151, "%{public}s iMessage enabled for multiple subscriptions: %{BOOL}d alias: %s sim: %s", (uint8_t *)v138, 0x26u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, void *))(v155 + 8))(v130, v158);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, void *))(v129 + 8))(v130, v17);
      }
      swift_beginAccess();
      return (id)v161;
    }
    uint64_t v94 = v155;
    if (qword_EB1E0 != -1) {
      swift_once();
    }
    uint64_t v95 = sub_92094((uint64_t)v17, (uint64_t)qword_EB1E8);
    uint64_t v96 = v156;
    (*(void (**)(uint64_t, uint64_t, void *))(v94 + 16))(v156, v95, v17);
    swift_bridgeObjectRetain();
    id v97 = v65;
    swift_bridgeObjectRetain();
    uint64_t v98 = v94;
    id v99 = v97;
    __int16 v100 = sub_96CC0();
    os_log_type_t v101 = sub_96E60();
    int v102 = v101;
    if (os_log_type_enabled(v100, v101))
    {
      uint64_t v103 = swift_slowAlloc();
      uint64_t v157 = swift_slowAlloc();
      v159[0] = v157;
      *(_DWORD *)uint64_t v103 = 136446722;
      uint64_t v151 = v103 + 4;
      unint64_t v104 = v30;
      id v105 = [v99 requestID];
      uint64_t v106 = sub_96D30();
      uint64_t v158 = v17;
      uint64_t v107 = v28;
      uint64_t v108 = v106;
      LODWORD(v152) = v102;
      unint64_t v110 = v109;

      uint64_t v160 = sub_91A3C(v108, v110, v159);
      sub_96E80();

      swift_bridgeObjectRelease();
      *(_WORD *)(v103 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v160 = sub_91A3C(v107, v104, v159);
      sub_96E80();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v103 + 22) = 2080;
      if (v154) {
        uint64_t v111 = 0x3E6C696E3CLL;
      }
      else {
        uint64_t v111 = v153;
      }
      if (v154) {
        unint64_t v112 = 0xE500000000000000;
      }
      else {
        unint64_t v112 = v35;
      }
      swift_bridgeObjectRetain();
      uint64_t v160 = sub_91A3C(v111, v112, v159);
      sub_96E80();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v100, (os_log_type_t)v152, "%{public}s alias %s SIMID %s no longer a valid subscription, defaulting to whether iMessage is available", (uint8_t *)v103, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, void *))(v155 + 8))(v156, v158);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, void *))(v98 + 8))(v96, v17);
    }
    return [v24 isUsableForSending];
  }
LABEL_25:
  swift_bridgeObjectRelease();
  id v22 = [v24 isUsableForSending];
  unsigned __int8 v161 = v22;
  uint64_t v42 = v158;
  if (qword_EB1E0 != -1) {
    swift_once();
  }
  sub_92094((uint64_t)v17, (uint64_t)qword_EB1E8);
  id v43 = v42;
  char v44 = sub_96CC0();
  os_log_type_t v45 = sub_96E60();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = swift_slowAlloc();
    v159[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 136446466;
    id v47 = [v43 requestID];
    uint64_t v48 = sub_96D30();
    unint64_t v50 = v49;

    uint64_t v160 = sub_91A3C(v48, v50, v159);
    sub_96E80();

    swift_bridgeObjectRelease();
    *(_WORD *)(v46 + 12) = 1024;
    LODWORD(v160) = v22;
    sub_96E80();
    _os_log_impl(&dword_0, v44, v45, "%{public}s Alias is nil, but iMessage enabled: %{BOOL}d", (uint8_t *)v46, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return v22;
}

unint64_t sub_8C1E0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_89B60(&qword_EB3E8);
  uint64_t v2 = (void *)sub_96F80();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_92144(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_8C2FC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_89B60(&qword_EB370);
  uint64_t v2 = (void *)sub_96F80();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_92144(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void MessageReachabilityController.calculateReachability(with:responseHandler:requestingSelfHandle:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  char v10 = *(void **)(v5 + 16);
  uint64_t v137 = *(void *)(v5 + 24);
  uint64_t type = swift_getObjectType();
  unsigned __int8 v134 = [v10 networkDataAvailable];
  if (qword_EB1E0 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_96CE0();
  sub_92094(v11, (uint64_t)qword_EB1E8);
  id v12 = a1;
  swift_retain_n();
  id v13 = v12;
  BOOL v14 = sub_96CC0();
  os_log_type_t v15 = sub_96E30();
  uint64_t v131 = a3;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v130 = a4;
    uint64_t v141 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446722;
    BOOL v17 = v13;
    id v18 = [v13 requestID];
    id v132 = a2;
    uint64_t v19 = sub_96D30();
    unint64_t v20 = v10;
    unint64_t v22 = v21;

    sub_91A3C(v19, v22, &v141);
    sub_96E80();
    char v10 = v20;
    swift_bridgeObjectRelease();

    *(_WORD *)(v16 + 12) = 1024;
    (*(void (**)(uint64_t))(v137 + 24))(type);
    swift_release();
    id v13 = v17;
    sub_96E80();
    swift_release();
    *(_WORD *)(v16 + 18) = 1024;
    a2 = v132;
    sub_96E80();
    _os_log_impl(&dword_0, v14, v15, "%{public}s Always online %{BOOL}d, network data available %{BOOL}d", (uint8_t *)v16, 0x18u);
    swift_arrayDestroy();
    a4 = v130;
    swift_slowDealloc();
    swift_slowDealloc();

    char v23 = &selRef_transferDataURL;
    if (v134) {
      goto LABEL_8;
    }
  }
  else
  {
    swift_release_n();

    char v23 = &selRef_transferDataURL;
    if (v134) {
      goto LABEL_8;
    }
  }
  if (((*(uint64_t (**)(uint64_t))(v137 + 24))(type) & 1) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  if ((sub_8AD84(v13) & 1) == 0
    || (id v24 = [v13 v23[197]],
        uint64_t v25 = sub_96D80(),
        v24,
        uint64_t v26 = *(void *)(v25 + 16),
        swift_bridgeObjectRelease(),
        !v26))
  {
LABEL_14:
    id v31 = v13;
    unsigned int v41 = sub_96CC0();
    os_log_type_t v42 = sub_96E30();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc();
      uint64_t v141 = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136446466;
      uint64_t v138 = v10;
      char v44 = a2;
      id v45 = [v31 requestID];
      uint64_t v46 = sub_96D30();
      unint64_t v48 = v47;

      sub_91A3C(v46, v48, &v141);
      char v23 = &selRef_transferDataURL;
      sub_96E80();
      swift_bridgeObjectRelease();

      *(_WORD *)(v43 + 12) = 1024;
      a2 = v44;
      char v10 = v138;
      sub_96E80();
      _os_log_impl(&dword_0, v41, v42, "%{public}s IMChatCalculateServiceForSending iMessage not available (%{BOOL}d) or no addresses, bailing", (uint8_t *)v43, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v49 = [v31 v23[197]];
    sub_96D80();

    NSString v50 = [v10 internalServiceName];
    if (!v50)
    {
      sub_96D30();
      NSString v50 = sub_96D20();
      swift_bridgeObjectRelease();
    }
    id v51 = self;
    v52.super.isa = sub_96D70().super.isa;
    id v53 = [v51 finalResultForService:v50 handleIDs:v52.super.isa allAreReachable:0 checkedServer:0 error:3];
    goto LABEL_20;
  }
  id v27 = [v13 context];
  unsigned __int8 v28 = [v27 forceMMS];

  if ((v28 & 1) != 0
    || (id v29 = [v13 context],
        unsigned int v30 = [v29 conversationWasDowngraded],
        v29,
        v30))
  {
    id v31 = v13;
    id v32 = sub_96CC0();
    os_log_type_t v33 = sub_96E30();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v141 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136446722;
      id v133 = a2;
      id v35 = [v31 requestID];
      uint64_t v36 = sub_96D30();
      unint64_t v38 = v37;

      sub_91A3C(v36, v38, &v141);
      sub_96E80();
      swift_bridgeObjectRelease();

      *(_WORD *)(v34 + 12) = 1024;
      id v39 = [v31 context];
      [v39 forceMMS];

      sub_96E80();
      *(_WORD *)(v34 + 18) = 1024;
      id v40 = [v31 context];
      [v40 conversationWasDowngraded];

      a2 = v133;
      sub_96E80();

      _os_log_impl(&dword_0, v32, v33, "%{public}s Forcing iMessage unavailable due to forceMMS: %{BOOL}d conversationWasDowngraded: %{BOOL}d", (uint8_t *)v34, 0x18u);
      swift_arrayDestroy();
      char v23 = &selRef_transferDataURL;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v55 = [v31 v23[197]];
    sub_96D80();

    NSString v50 = [v10 internalServiceName];
    if (!v50)
    {
      sub_96D30();
      NSString v50 = sub_96D20();
      swift_bridgeObjectRelease();
    }
LABEL_61:
    uint64_t v129 = self;
    v52.super.isa = sub_96D70().super.isa;
    id v53 = [v129 finalResultForService:v50 handleIDs:v52.super.isa allAreReachable:0 checkedServer:0 error:0];
LABEL_20:
    id v54 = v53;

    swift_bridgeObjectRelease();
    [a2 reachabilityRequest:v31 updatedWithResult:v54];

    return;
  }
  id v56 = [v13 v23[197]];
  int v57 = (void *)sub_96D80();

  if (v57[2])
  {
    uint64_t v59 = v57[4];
    unint64_t v58 = v57[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    id v60 = v13;
    id v61 = [v13 v23[197]];
    uint64_t v62 = sub_96D80();

    uint64_t v63 = *(void *)(v62 + 16);
    swift_bridgeObjectRelease();
    if (v63 == 1)
    {
      NSString v64 = sub_96D20();
      unsigned __int8 v65 = [v10 hasValidDowngradeRequestForHandleID:v64];

      if (v65)
      {
        id v31 = v13;
        swift_bridgeObjectRetain();
        uint64_t v66 = sub_96CC0();
        os_log_type_t v67 = sub_96E30();
        if (os_log_type_enabled(v66, v67))
        {
          os_log_type_t typea = v67;
          uint64_t v68 = swift_slowAlloc();
          uint64_t v141 = swift_slowAlloc();
          *(_DWORD *)uint64_t v68 = 136446466;
          id v69 = [v31 requestID];
          id v70 = v31;
          os_log_type_t v71 = v10;
          int v72 = a2;
          uint64_t v73 = sub_96D30();
          unint64_t v75 = v74;

          uint64_t v76 = v73;
          a2 = v72;
          char v10 = v71;
          id v31 = v70;
          sub_91A3C(v76, v75, &v141);
          sub_96E80();
          swift_bridgeObjectRelease();

          *(_WORD *)(v68 + 12) = 2080;
          swift_bridgeObjectRetain();
          sub_91A3C(v59, v58, &v141);
          char v23 = &selRef_transferDataURL;
          sub_96E80();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_0, v66, typea, "%{public}s Forcing iMessage unavailable due to downgrade request for %s", (uint8_t *)v68, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }

        id v102 = [v31 v23[197]];
        sub_96D80();

        NSString v50 = [v10 internalServiceName];
        if (!v50)
        {
          sub_96D30();
          NSString v50 = sub_96D20();
          swift_bridgeObjectRelease();
        }
        goto LABEL_61;
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    id v60 = v13;
    swift_bridgeObjectRelease();
  }
  id v77 = &selRef_transferDataURL;
  if ([v10 isInternationalSpamFilteringEnabled])
  {
    id v78 = [v60 v23[197]];
    uint64_t v79 = sub_96D80();

    uint64_t v80 = *(void *)(v79 + 16);
    swift_bridgeObjectRelease();
    if (v80 == 1)
    {
      uint64_t v81 = v60;
      id v82 = [v60 context];
      id v83 = [v82 senderLastAddressedHandle];

      if (v83)
      {
        sub_96D30();
      }
      else
      {
        id v77 = &selRef_transferDataURL;
        id v99 = [v60 context];
        id v100 = [v99 senderLastAddressedSIMID];

        if (!v100) {
          goto LABEL_53;
        }
        sub_96D30();

        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        NSString v101 = sub_96D20();
        id v83 = [v10 phoneNumberOnSubscriptionWithSIMID:v101];

        if (!v83)
        {
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease();
          id v77 = &selRef_transferDataURL;
          goto LABEL_53;
        }
        sub_96D30();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease();
        uint64_t v81 = v60;
      }

      unint64_t v84 = v81;
      id v85 = [v81 v23[197]];
      uint64_t v86 = sub_96D80();

      if (!*(void *)(v86 + 16))
      {
        __break(1u);
        goto LABEL_63;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      NSString v87 = sub_96D20();
      swift_bridgeObjectRelease();
      NSString v88 = sub_96D20();
      swift_bridgeObjectRelease();
      id v60 = v84;
      id v89 = [v84 context];
      unsigned int v90 = [v10 shouldDowngradeToRecipient:v87 fromSender:v88 withContext:v89];

      id v77 = &selRef_transferDataURL;
      if (v90)
      {
        id v31 = v60;
        uint64_t v91 = sub_96CC0();
        os_log_type_t v92 = sub_96E30();
        if (os_log_type_enabled(v91, v92))
        {
          uint64_t v139 = v10;
          uint64_t v93 = a2;
          uint64_t v94 = (uint8_t *)swift_slowAlloc();
          uint64_t v141 = swift_slowAlloc();
          *(_DWORD *)uint64_t v94 = 136446210;
          id v95 = [v31 requestID];
          uint64_t v96 = sub_96D30();
          unint64_t v98 = v97;

          sub_91A3C(v96, v98, &v141);
          char v23 = &selRef_transferDataURL;
          sub_96E80();
          a2 = v93;
          char v10 = v139;
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_0, v91, v92, "%{public}s Forcing iMessage unavailable due to Hawking downgrade", v94, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        id v103 = [v31 v23[197]];
        sub_96D80();

        NSString v50 = [v10 internalServiceName];
        if (!v50)
        {
          sub_96D30();
          NSString v50 = sub_96D20();
          swift_bridgeObjectRelease();
        }
        unint64_t v104 = self;
        v52.super.isa = sub_96D70().super.isa;
        id v53 = [v104 finalResultForService:v50 handleIDs:v52.super.isa allAreReachable:0 checkedServer:0 error:5];
        goto LABEL_20;
      }
    }
  }
LABEL_53:
  id v105 = [self sharedController];
  if (!v105)
  {
LABEL_63:
    __break(1u);
    return;
  }
  uint64_t v106 = v105;
  unsigned int v107 = [v105 isLiteMessageActiveOverSatellite];

  if (v107)
  {
    id v31 = v60;
    uint64_t v108 = sub_96CC0();
    os_log_type_t v109 = sub_96E30();
    if (os_log_type_enabled(v108, v109))
    {
      unint64_t v140 = v10;
      unint64_t v110 = a2;
      uint64_t v111 = (uint8_t *)swift_slowAlloc();
      uint64_t v141 = swift_slowAlloc();
      *(_DWORD *)uint64_t v111 = 136446210;
      id v112 = [v31 requestID];
      uint64_t v113 = sub_96D30();
      unint64_t v115 = v114;

      sub_91A3C(v113, v115, &v141);
      char v23 = &selRef_transferDataURL;
      sub_96E80();
      a2 = v110;
      char v10 = v140;
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_0, v108, v109, "%{public}s Forcing iMessage unavailable due to satellite connectivity", v111, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v128 = [v31 v23[197]];
    sub_96D80();

    NSString v50 = [v10 internalServiceName];
    if (!v50)
    {
      sub_96D30();
      NSString v50 = sub_96D20();
      swift_bridgeObjectRelease();
    }
    goto LABEL_61;
  }
  id v116 = [v60 v23[197]];
  id v117 = (uint64_t *)sub_96D80();

  os_log_type_t v118 = v60;
  id v119 = [v60 requestID];
  uint64_t v120 = sub_96D30();
  id v121 = v77;
  unint64_t v123 = v122;

  id v124 = [v60 v121[191]];
  id v125 = [v118 v121[191]];
  LOBYTE(v121) = [v125 shouldForceServerStatusRefresh];

  uint64_t v126 = swift_allocObject();
  *(void *)(v126 + 16) = a2;
  *(void *)(v126 + 24) = v118;
  id v127 = v118;
  swift_unknownObjectRetain();
  sub_8D838(v117, v120, v123, v131, a4, v124, (char)v121, 2, (uint64_t)sub_9210C, v126);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_8D838(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, id a6, char a7, char a8, uint64_t a9, uint64_t a10)
{
  unint64_t v13 = a3;
  BOOL v14 = a1;
  uint64_t v95 = v10;
  if ((a7 & 1) != 0 || [a6 shouldForceServerStatusRefresh])
  {
    char v15 = a8;
    uint64_t v16 = (uint64_t)[self refreshIDInfo];
    objc_msgSend((id)v16, "setForceRefresh:", objc_msgSend(a6, "shouldForceServerStatusRefresh"));
    if (v15 == 2)
    {
      if (qword_EB1E0 != -1) {
LABEL_64:
      }
        swift_once();
      uint64_t v17 = sub_96CE0();
      sub_92094(v17, (uint64_t)qword_EB1E8);
      swift_bridgeObjectRetain_n();
      id v18 = (id)v16;
      uint64_t v19 = sub_96CC0();
      os_log_type_t v20 = sub_96E30();
      id v92 = v18;
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        v102[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136446466;
        swift_bridgeObjectRetain();
        sub_91A3C(a2, v13, v102);
        sub_96E80();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v21 + 12) = 1024;
        [v18 forceRefresh];

        sub_96E80();
        _os_log_impl(&dword_0, v19, v20, "%{public}s Refreshing ID info due to explicit request. Force refresh: %{BOOL}d", (uint8_t *)v21, 0x12u);
        char v96 = 1;
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_20;
      }

      swift_bridgeObjectRelease_n();
    }
    else
    {
      if (qword_EB1E0 != -1) {
        swift_once();
      }
      uint64_t v22 = sub_96CE0();
      sub_92094(v22, (uint64_t)qword_EB1E8);
      swift_bridgeObjectRetain_n();
      id v23 = (id)v16;
      id v24 = sub_96CC0();
      os_log_type_t v25 = sub_96E30();
      id v92 = v23;
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        v102[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136446978;
        swift_bridgeObjectRetain();
        sub_91A3C(a2, v13, v102);
        sub_96E80();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v26 + 12) = 1024;
        BOOL v14 = a1;
        sub_96E80();
        *(_WORD *)(v26 + 18) = 1024;
        sub_96E80();
        *(_WORD *)(v26 + 24) = 1024;
        [v23 forceRefresh];

        sub_96E80();
        _os_log_impl(&dword_0, v24, v25, "%{public}s Refreshing ID info due to results: allAreReachable=%{BOOL}d hadUnknownAddress=%{BOOL}d. Force refresh: %{BOOL}d", (uint8_t *)v26, 0x1Eu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        char v96 = 1;
        goto LABEL_20;
      }

      swift_bridgeObjectRelease_n();
    }
    char v96 = 1;
  }
  else
  {
    id v92 = [self currentIDInfo];
    if (qword_EB1E0 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_96CE0();
    sub_92094(v27, (uint64_t)qword_EB1E8);
    swift_bridgeObjectRetain_n();
    unsigned __int8 v28 = sub_96CC0();
    os_log_type_t v29 = sub_96E30();
    if (os_log_type_enabled(v28, v29))
    {
      unsigned int v30 = (uint8_t *)swift_slowAlloc();
      v102[0] = swift_slowAlloc();
      *(_DWORD *)unsigned int v30 = 136446210;
      swift_bridgeObjectRetain();
      sub_91A3C(a2, v13, v102);
      sub_96E80();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v28, v29, "%{public}s Doing a cached ID query", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    char v96 = 0;
  }
LABEL_20:
  id v31 = (void *)sub_8C2FC((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v13 = v14[2];
  if (v13)
  {
    swift_bridgeObjectRetain();
    v14 += 5;
    while (1)
    {
      uint64_t v34 = *(v14 - 1);
      uint64_t v33 = *v14;
      swift_bridgeObjectRetain();
      uint64_t v16 = (uint64_t)sub_96D20();
      id v35 = (id)IMChatCanonicalIDSIDsForAddress();

      if (!v35) {
        break;
      }
      uint64_t v36 = sub_96D30();
      uint64_t v16 = v37;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v102[0] = (uint64_t)v31;
      unint64_t v40 = sub_92144(v36, v16);
      uint64_t v41 = v31[2];
      BOOL v42 = (v39 & 1) == 0;
      uint64_t v43 = v41 + v42;
      if (__OFADD__(v41, v42))
      {
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      char v44 = v39;
      if (v31[3] >= v43)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          id v31 = (void *)v102[0];
          if ((v39 & 1) == 0) {
            goto LABEL_37;
          }
        }
        else
        {
          sub_943E8();
          id v31 = (void *)v102[0];
          if ((v44 & 1) == 0) {
            goto LABEL_37;
          }
        }
      }
      else
      {
        sub_938D8(v43, isUniquelyReferenced_nonNull_native);
        unint64_t v45 = sub_92144(v36, v16);
        if ((v44 & 1) != (v46 & 1)) {
          goto LABEL_65;
        }
        unint64_t v40 = v45;
        id v31 = (void *)v102[0];
        if ((v44 & 1) == 0)
        {
LABEL_37:
          v31[(v40 >> 6) + 8] |= 1 << v40;
          id v55 = (uint64_t *)(v31[6] + 16 * v40);
          uint64_t *v55 = v36;
          v55[1] = v16;
          id v56 = (uint64_t *)(v31[7] + 16 * v40);
          uint64_t *v56 = v34;
          v56[1] = v33;
          uint64_t v57 = v31[2];
          BOOL v58 = __OFADD__(v57, 1);
          uint64_t v59 = v57 + 1;
          if (v58) {
            goto LABEL_62;
          }
LABEL_38:
          v31[2] = v59;
          swift_bridgeObjectRetain();
          goto LABEL_23;
        }
      }
      id v32 = (uint64_t *)(v31[7] + 16 * v40);
      swift_bridgeObjectRelease();
      *id v32 = v34;
      v32[1] = v33;
LABEL_23:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 += 2;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v47 = swift_isUniquelyReferenced_nonNull_native();
    v102[0] = (uint64_t)v31;
    unint64_t v49 = sub_92144(v34, v33);
    uint64_t v50 = v31[2];
    BOOL v51 = (v48 & 1) == 0;
    uint64_t v52 = v50 + v51;
    if (__OFADD__(v50, v51)) {
      goto LABEL_61;
    }
    uint64_t v16 = v48;
    if (v31[3] >= v52)
    {
      if (v47)
      {
        id v31 = (void *)v102[0];
        if (v48) {
          goto LABEL_41;
        }
      }
      else
      {
        sub_943E8();
        id v31 = (void *)v102[0];
        if (v16) {
          goto LABEL_41;
        }
      }
    }
    else
    {
      sub_938D8(v52, v47);
      unint64_t v53 = sub_92144(v34, v33);
      if ((v16 & 1) != (v54 & 1))
      {
LABEL_65:
        uint64_t result = sub_96FC0();
        __break(1u);
        return result;
      }
      unint64_t v49 = v53;
      id v31 = (void *)v102[0];
      if (v16)
      {
LABEL_41:
        id v60 = (uint64_t *)(v31[7] + 16 * v49);
        swift_bridgeObjectRelease();
        uint64_t *v60 = v34;
        v60[1] = v33;
        goto LABEL_23;
      }
    }
    v31[(v49 >> 6) + 8] |= 1 << v49;
    id v61 = (uint64_t *)(v31[6] + 16 * v49);
    uint64_t *v61 = v34;
    v61[1] = v33;
    uint64_t v62 = (uint64_t *)(v31[7] + 16 * v49);
    uint64_t *v62 = v34;
    v62[1] = v33;
    uint64_t v63 = v31[2];
    BOOL v58 = __OFADD__(v63, 1);
    uint64_t v59 = v63 + 1;
    if (v58) {
      goto LABEL_63;
    }
    goto LABEL_38;
  }
LABEL_48:
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = v31;
  if (a5)
  {
    NSString v65 = sub_96D20();
    id v66 = [v65 _stripFZIDPrefix];

    id v67 = (id)IMChatCanonicalIDSIDsForAddress();
    if (v67)
    {
      uint64_t v68 = sub_96D30();
      uint64_t v70 = v69;

      swift_bridgeObjectRetain_n();
      char v71 = swift_isUniquelyReferenced_nonNull_native();
      v102[0] = *(void *)(v64 + 16);
      *(void *)(v64 + 16) = 0x8000000000000000;
      sub_940E8(v68, v70, v68, v70, v71);
      *(void *)(v64 + 16) = v102[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v68 = 0;
      uint64_t v70 = 0;
    }
  }
  else
  {
    uint64_t v70 = 0;
    uint64_t v68 = a4;
  }
  uint64_t v72 = swift_bridgeObjectRetain();
  uint64_t v73 = sub_937F0(v72);
  swift_bridgeObjectRelease();
  sub_88ACC((uint64_t)v73);
  Class isa = sub_96D70().super.isa;
  swift_bridgeObjectRelease();
  id v75 = (id)IMServiceNameForCanonicalIDSAddresses();

  id v89 = v73;
  if (v75)
  {
    uint64_t v87 = sub_96D30();
    uint64_t v88 = v76;
  }
  else
  {
    uint64_t v87 = 0;
    uint64_t v88 = 0;
  }
  uint64_t v77 = swift_allocObject();
  *(void *)(v77 + 16) = v95;
  *(void *)(v77 + 24) = a2;
  *(void *)(v77 + 32) = a3;
  *(void *)(v77 + 40) = v68;
  *(void *)(v77 + 48) = v70;
  *(void *)(v77 + 56) = v64;
  *(void *)(v77 + 64) = a6;
  *(unsigned char *)(v77 + 72) = v96;
  *(void *)(v77 + 80) = a9;
  *(void *)(v77 + 88) = a10;
  *(void *)(v77 + 96) = a1;
  *(void *)(v77 + 104) = a4;
  *(void *)(v77 + 112) = a5;
  uint64_t v98 = *(void *)(v95 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  id v78 = a6;
  swift_retain();
  id v79 = [v78 senderLastAddressedHandle];
  if (v79)
  {
    uint64_t v80 = v79;
    uint64_t v91 = sub_96D30();
    uint64_t v94 = v81;
  }
  else
  {
    uint64_t v91 = 0;
    uint64_t v94 = 0;
  }
  uint64_t ObjectType = swift_getObjectType();
  sub_89A94(0, &qword_EB368);
  id v83 = (void *)sub_96E70();
  uint64_t v84 = swift_allocObject();
  *(void *)(v84 + 16) = a2;
  *(void *)(v84 + 24) = a3;
  *(void *)(v84 + 32) = a9;
  *(void *)(v84 + 40) = a10;
  *(void *)(v84 + 48) = v95;
  *(void *)(v84 + 56) = a1;
  *(unsigned char *)(v84 + 64) = v96;
  *(void *)(v84 + 72) = &unk_EB360;
  *(void *)(v84 + 80) = v77;
  id v85 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id, unint64_t, unint64_t, void *, void (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v98 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  v85(v89, v87, v88, v91, v94, 2, v92, 0xD000000000000022, 0x80000000000B29C0, v83, sub_94E08, v84, ObjectType, v98);
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MessageReachabilityController.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t MessageReachabilityController.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return _swift_deallocClassInstance(v0, 32, 7);
}

void sub_8E534(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, void *a6, void *a7, unsigned char *a8)
{
  char v15 = *(void **)(v8 + 16);
  swift_bridgeObjectRetain();
  id v45 = v15;
  id v16 = [v15 internalServiceName];
  sub_96D30();

  id v17 = objc_allocWithZone((Class)IMServiceReachabilityHandleResult);
  NSString v18 = sub_96D20();
  swift_bridgeObjectRelease();
  NSString v19 = sub_96D20();
  swift_bridgeObjectRelease();
  id v20 = [v17 initWithHandleID:v18 service:v19 isReachable:0];

  if (!a1) {
    goto LABEL_5;
  }
  uint64_t v21 = (char *)[a1 status];
  if (v21 != (unsigned char *)&dword_0 + 2)
  {
    if (v21 == (unsigned char *)&dword_0 + 1)
    {
      [v20 setReachable:1];
      goto LABEL_24;
    }
LABEL_5:
    if (qword_EB1E0 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_96CE0();
    sub_92094(v22, (uint64_t)qword_EB1E8);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v23 = sub_96CC0();
    os_log_type_t v24 = sub_96E30();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446466;
      swift_bridgeObjectRetain();
      sub_91A3C(a2, a3, &v48);
      sub_96E80();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v25 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_91A3C(a4, a5, &v48);
      sub_96E80();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v23, v24, "%{public}s Destination is unknown: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    id v26 = [a6 lastUsedServiceName];
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = sub_96D30();
      uint64_t v30 = v29;

      id v31 = [v45 internalServiceName];
      uint64_t v32 = sub_96D30();
      uint64_t v34 = v33;

      if (v28 == v32 && v30 == v34)
      {
        swift_bridgeObjectRelease_n();
LABEL_21:
        *a8 = 1;
        goto LABEL_24;
      }
      char v39 = sub_96FA0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v39) {
        goto LABEL_21;
      }
    }
    [a7 setAllAreReachable:0];
    goto LABEL_21;
  }
  if (qword_EB1E0 != -1) {
    swift_once();
  }
  uint64_t v35 = sub_96CE0();
  sub_92094(v35, (uint64_t)qword_EB1E8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v36 = sub_96CC0();
  os_log_type_t v37 = sub_96E30();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 136446466;
    swift_bridgeObjectRetain();
    sub_91A3C(a2, a3, &v48);
    sub_96E80();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v38 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_91A3C(a4, a5, &v48);
    sub_96E80();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v36, v37, "%{public}s Destination is invalid: %s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  [a7 setAllAreReachable:0];
LABEL_24:
  swift_bridgeObjectRetain();
  id v40 = v20;
  id v41 = [a7 handleResults];
  sub_89A94(0, &qword_EB3E0);
  uint64_t v42 = sub_96D00();

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v48 = v42;
  sub_94270((uint64_t)v40, a4, a5, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Class isa = sub_96CF0().super.isa;
  swift_bridgeObjectRelease();
  [a7 setHandleResults:isa];
}

uint64_t sub_8EC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v9 + 184) = v13;
  *(void *)(v9 + 192) = v8;
  *(unsigned char *)(v9 + 268) = a8;
  *(void *)(v9 + 168) = a6;
  *(void *)(v9 + 176) = a7;
  *(void *)(v9 + 152) = a4;
  *(void *)(v9 + 160) = a5;
  *(void *)(v9 + 136) = a2;
  *(void *)(v9 + 144) = a3;
  *(void *)(v9 + 128) = a1;
  uint64_t v10 = sub_96CE0();
  *(void *)(v9 + 200) = v10;
  *(void *)(v9 + 208) = *(void *)(v10 - 8);
  *(void *)(v9 + 216) = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_8ECE4, 0, 0);
}

uint64_t sub_8ECE4()
{
  os_log_t v149 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 16;
  uint64_t v129 = v0 + 12;
  if (!v0[16][2])
  {
    if (qword_EB1E0 != -1) {
      goto LABEL_121;
    }
    goto LABEL_3;
  }
LABEL_7:
  uint64_t v11 = (uint64_t)v1[20];
  uint64_t v12 = v1[16];
  uint64_t v13 = swift_bridgeObjectRetain();
  BOOL v14 = (char **)sub_937F0(v13);
  swift_bridgeObjectRelease();
  v1[12] = v14;
  v1[5] = v12;
  uint64_t v140 = v11;
  uint64_t v126 = v2;
  if (!v11) {
    goto LABEL_14;
  }
  uint64_t v15 = (uint64_t)v1[19];
  v148[0] = (uint64_t)v1[16];
  swift_bridgeObjectRetain_n();
  id v16 = (char **)sub_93718(v15, v11);
  id v17 = (char **)v148[0];
  uint64_t v18 = *(void *)(v148[0] + 16);
  BOOL v132 = v18 != 0;
  if (!v18)
  {
    swift_bridgeObjectRelease();
    id v17 = *v2;
    goto LABEL_18;
  }
  uint64_t v19 = (uint64_t)v1[19];
  v1[5] = (char **)v148[0];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_95744((uint64_t)v14, v19, v11);
  if (v21)
  {
    uint64_t v22 = (uint64_t)v14[2];
    unint64_t v23 = v22;
LABEL_17:
    sub_957D8(v22, v23);
    swift_bridgeObjectRelease();
LABEL_18:
    uint64_t v25 = v2 - 11;
    v1[28] = v16;
    id v26 = v1[24];
    uint64_t v27 = *((unsigned __int8 *)v1 + 268);
    uint64_t v28 = v1[21];
    uint64_t v29 = (char **)v26[2];
    v1[29] = v29;
    id v128 = v26[3];
    uint64_t ObjectType = swift_getObjectType();
    id v30 = [v29 internalServiceName];
    uint64_t v31 = sub_96D30();
    uint64_t v33 = v32;

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v34 = (char **)sub_952E4(v31, v33, (uint64_t)v16, (uint64_t)v17);
    v1[30] = v34;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = v25;
    swift_bridgeObjectRelease();
    uint64_t v138 = v34;
    [v34 setDidCheckServer:v27];
    os_log_type_t v135 = v28 + 8;
    uint64_t v36 = -1;
    uint64_t v37 = -1 << *((unsigned char *)v28 + 32);
    if (-v37 < 64) {
      uint64_t v36 = ~(-1 << -(char)v37);
    }
    unint64_t v38 = v36 & (unint64_t)v28[8];
    int64_t v136 = (unint64_t)(63 - v37) >> 6;
    swift_bridgeObjectRetain();
    int64_t v39 = 0;
    int v131 = 136446466;
    uint64_t v40 = v140;
    uint64_t v137 = v1;
    unsigned __int8 v134 = v25;
    uint64_t v130 = v28;
    if (v38) {
      goto LABEL_23;
    }
LABEL_24:
    BOOL v42 = __OFADD__(v39++, 1);
    if (v42)
    {
      __break(1u);
      goto LABEL_110;
    }
    if (v39 < v136)
    {
      unint64_t v43 = (unint64_t)v135[v39];
      if (v43)
      {
LABEL_34:
        uint64_t v146 = (v43 - 1) & v43;
        for (unint64_t i = __clz(__rbit64(v43)) + (v39 << 6); ; unint64_t i = __clz(__rbit64(v38)) | (v39 << 6))
        {
          uint64_t v45 = 16 * i;
          uint64_t v46 = (uint64_t)&v28[6][v45];
          id v16 = *(char ***)v46;
          unint64_t v47 = *(void *)(v46 + 8);
          uint64_t v48 = (uint64_t *)&v28[7][v45];
          unint64_t v49 = v48[1];
          uint64_t v142 = *v48;
          uint64_t v50 = *v35;
          BOOL v51 = (*v35)[2];
          swift_bridgeObjectRetain();
          if (v51)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            unint64_t v52 = sub_92144((uint64_t)v16, v47);
            if (v53)
            {
              char v54 = *(void **)&v50[7][8 * v52];
              id v55 = v54;
              swift_bridgeObjectRelease_n();
              goto LABEL_54;
            }
            swift_bridgeObjectRelease();
            if (v40)
            {
LABEL_41:
              if (v16 == v1[19] && v1[20] == (char **)v47)
              {
                if (v132)
                {
LABEL_22:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v38 = v146;
                  if (!v146) {
                    goto LABEL_24;
                  }
                  goto LABEL_23;
                }
              }
              else if (v132 & sub_96FA0())
              {
                goto LABEL_22;
              }
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            if (v40) {
              goto LABEL_41;
            }
          }
          if (qword_EB1E0 != -1) {
            swift_once();
          }
          sub_92094((uint64_t)v1[25], (uint64_t)qword_EB1E8);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t v57 = sub_96CC0();
          os_log_type_t v58 = sub_96E40();
          BOOL v59 = os_log_type_enabled(v57, v58);
          unint64_t v60 = (unint64_t)v1[18];
          if (v59)
          {
            uint64_t v133 = (uint64_t)v1[17];
            uint64_t v61 = swift_slowAlloc();
            v148[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v61 = 136446466;
            swift_bridgeObjectRetain();
            v137[6] = (char **)sub_91A3C(v133, v60, v148);
            sub_96E80();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v61 + 12) = 2080;
            swift_bridgeObjectRetain();
            v137[7] = (char **)sub_91A3C((uint64_t)v16, v47, v148);
            uint64_t v28 = v130;
            sub_96E80();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_0, v57, v58, "%{public}s Missing IDS info result for destination %s", (uint8_t *)v61, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v1 = v137;
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }

          char v54 = 0;
          uint64_t v35 = v134;
LABEL_54:
          sub_8E534(v54, (uint64_t)v1[17], (unint64_t)v1[18], v142, v49, v1[22], v138, v1[23]);
          swift_bridgeObjectRelease();

          uint64_t v40 = v140;
          unint64_t v38 = v146;
          if (!v146) {
            goto LABEL_24;
          }
LABEL_23:
          uint64_t v146 = (v38 - 1) & v38;
        }
      }
      int64_t v44 = v39 + 1;
      if (v39 + 1 < v136)
      {
        unint64_t v43 = (unint64_t)v135[v44];
        if (v43) {
          goto LABEL_33;
        }
        int64_t v44 = v39 + 2;
        if (v39 + 2 >= v136) {
          goto LABEL_60;
        }
        unint64_t v43 = (unint64_t)v135[v44];
        if (v43)
        {
LABEL_33:
          int64_t v39 = v44;
          goto LABEL_34;
        }
        int64_t v44 = v39 + 3;
        if (v39 + 3 < v136)
        {
          unint64_t v43 = (unint64_t)v135[v44];
          if (v43) {
            goto LABEL_33;
          }
          while (1)
          {
            int64_t v39 = v44 + 1;
            if (__OFADD__(v44, 1)) {
              break;
            }
            if (v39 >= v136) {
              goto LABEL_60;
            }
            unint64_t v43 = (unint64_t)v135[v39];
            ++v44;
            if (v43) {
              goto LABEL_34;
            }
          }
          __break(1u);
          goto LABEL_114;
        }
      }
    }
LABEL_60:
    swift_release();
    id v17 = &selRef_transferDataURL;
    if ([v138 allAreReachable])
    {
      uint64_t v62 = v1[12];
      v1[31] = v62;
      unint64_t v143 = (uint64_t (*)(char **, uint64_t, char *))(*((void *)v128 + 4) + **((int **)v128 + 4));
      swift_bridgeObjectRetain();
      uint64_t v63 = (char **)swift_task_alloc();
      v1[32] = v63;
      NSObject *v63 = (char *)v1;
      v63[1] = (char *)sub_8FF0C;
      return v143(v62, ObjectType, v128);
    }
    if (![v1[30] error])
    {
      uint64_t v65 = (uint64_t)(*v129)[2];
      if ((unint64_t)v65 >= 2 && (uint64_t)[v1[29] maxChatParticipantsForContext:v1[22]] < v65) {
        [v1[30] setError:1];
      }
    }
    if ([v1[30] allAreReachable]) {
      goto LABEL_100;
    }
    id v66 = [v1[22] lastUsedServiceName];
    if (!v66) {
      goto LABEL_100;
    }
    id v67 = v66;
    uint64_t v68 = sub_96D30();
    uint64_t v70 = v69;

    if (!v70) {
      goto LABEL_100;
    }
    if (v68 == 0x6567617373654D69 && v70 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v80 = sub_96FA0();
      swift_bridgeObjectRelease();
      if ((v80 & 1) == 0) {
        goto LABEL_100;
      }
    }
    if ([v1[22] chatStyle] == 43)
    {
      id v81 = [v1[22] chatIdentifier];
      if (v81)
      {
        id v82 = v1[22];

        unsigned __int8 v83 = [v82 isForPendingConversation];
        uint64_t v84 = v1[12];
        if ((v83 & 1) == 0)
        {
          id v85 = v84[2];
          if (v85)
          {
            swift_bridgeObjectRetain();
            uint64_t v86 = v84 + 5;
            while (1)
            {
              swift_bridgeObjectRetain();
              NSString v87 = sub_96D20();
              char IsEmail = IMStringIsEmail();

              swift_bridgeObjectRelease();
              if (IsEmail) {
                break;
              }
              v86 += 2;
              if (!--v85)
              {
                swift_bridgeObjectRelease_n();
                goto LABEL_101;
              }
            }
LABEL_110:
            swift_bridgeObjectRelease_n();
            if (qword_EB1E0 == -1) {
              goto LABEL_111;
            }
            goto LABEL_124;
          }
        }
      }
    }
LABEL_100:
    swift_bridgeObjectRelease();
    goto LABEL_101;
  }
  uint64_t v22 = v20;
  uint64_t v145 = v16;
  unint64_t v23 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v24 = (unint64_t)v14[2];
    if (v23 == v24)
    {
LABEL_12:
      id v16 = v145;
      if ((uint64_t)v23 < v22)
      {
        __break(1u);
LABEL_14:
        id v17 = *v2;
        swift_bridgeObjectRetain();
        BOOL v132 = 0;
        id v16 = 0;
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    if ((v23 & 0x8000000000000000) == 0)
    {
      uint64_t v71 = 2 * v20;
      while (v23 < v24)
      {
        uint64_t v73 = &v14[v71];
        BOOL v74 = v14[v71 + 6] == (char *)v1[19] && v1[20] == (char **)v14[v71 + 7];
        if (!v74 && (sub_96FA0() & 1) == 0)
        {
          if (v23 != v22)
          {
            if (v22 >= v24)
            {
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              swift_once();
LABEL_3:
              sub_92094((uint64_t)v1[25], (uint64_t)qword_EB1E8);
              swift_bridgeObjectRetain_n();
              uint64_t v3 = sub_96CC0();
              os_log_type_t v4 = sub_96E40();
              BOOL v5 = os_log_type_enabled(v3, v4);
              unint64_t v6 = (unint64_t)v1[18];
              if (v5)
              {
                uint64_t v7 = v2;
                uint64_t v8 = (uint64_t)v1[17];
                uint64_t v9 = (uint8_t *)swift_slowAlloc();
                v148[0] = swift_slowAlloc();
                *(_DWORD *)uint64_t v9 = 136446210;
                swift_bridgeObjectRetain();
                uint64_t v10 = v8;
                uint64_t v2 = v7;
                v1[9] = (char **)sub_91A3C(v10, v6, v148);
                sub_96E80();
                swift_bridgeObjectRelease_n();
                _os_log_impl(&dword_0, v3, v4, "%{public}s IDS cache did not return any results", v9, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                swift_bridgeObjectRelease_n();
              }

              goto LABEL_7;
            }
            uint64_t v2 = v1;
            id v75 = &v14[2 * v22 + 4];
            uint64_t v77 = *v75;
            uint64_t v76 = v75[1];
            uint64_t v1 = (char ***)v73[6];
            id v78 = v73[7];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              BOOL v14 = (char **)sub_94950((uint64_t)v14);
            }
            id v79 = &v14[2 * v22];
            v79[4] = (char *)v1;
            v79[5] = v78;
            swift_bridgeObjectRelease();
            if (v23 >= (unint64_t)v14[2]) {
              goto LABEL_120;
            }
            uint64_t v72 = &v14[v71];
            v72[6] = v77;
            v72[7] = v76;
            swift_bridgeObjectRelease();
            *uint64_t v129 = v14;
            uint64_t v1 = v2;
            uint64_t v2 = v126;
          }
          BOOL v42 = __OFADD__(v22++, 1);
          if (v42) {
            goto LABEL_117;
          }
        }
        ++v23;
        unint64_t v24 = (unint64_t)v14[2];
        v71 += 2;
        if (v23 == v24) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
  }
  __break(1u);
LABEL_124:
  swift_once();
LABEL_111:
  id v116 = v1[22];
  sub_92094((uint64_t)v1[25], (uint64_t)qword_EB1E8);
  swift_bridgeObjectRetain_n();
  id v117 = v116;
  unint64_t v38 = sub_96CC0();
  os_log_type_t v118 = sub_96E30();
  BOOL v119 = os_log_type_enabled((os_log_t)v38, v118);
  id v16 = v1[22];
  unint64_t v120 = (unint64_t)v1[18];
  if (!v119)
  {
LABEL_114:
    swift_bridgeObjectRelease_n();

    goto LABEL_115;
  }
  uint64_t v121 = (uint64_t)v1[17];
  uint64_t v122 = swift_slowAlloc();
  unint64_t v123 = (void *)swift_slowAlloc();
  v148[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v122 = v131;
  swift_bridgeObjectRetain();
  v1[14] = (char **)sub_91A3C(v121, v120, v148);
  sub_96E80();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v122 + 12) = 2112;
  v1[15] = v16;
  id v124 = v16;
  sub_96E80();
  *unint64_t v123 = v16;

  _os_log_impl(&dword_0, (os_log_t)v38, v118, "%{public}s This group contains emails, don't downgrade: %@", (uint8_t *)v122, 0x16u);
  sub_89B60(&qword_EB3D8);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();
LABEL_115:

  id v125 = v1[30];
  [v125 setAllAreReachable:1];
  [v125 setError:0];
  [v125 setReachabilityOverriddenToSuccessByPolicy:1];
  id v17 = &selRef_transferDataURL;
LABEL_101:
  if (qword_EB1E0 != -1) {
LABEL_118:
  }
    swift_once();
  id v89 = v1[30];
  uint64_t v91 = v1[26];
  unsigned int v90 = v1[27];
  uint64_t v92 = (uint64_t)v1[25];
  uint64_t v93 = sub_92094(v92, (uint64_t)qword_EB1E8);
  ((void (*)(char **, uint64_t, uint64_t))v91[2])(v90, v93, v92);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v94 = v89;
  uint64_t v95 = sub_96CC0();
  os_log_type_t v147 = sub_96E30();
  BOOL v96 = os_log_type_enabled(v95, v147);
  unint64_t v97 = v1[30];
  uint64_t v98 = v1[27];
  id v99 = v1[28];
  id v100 = v1[25];
  NSString v101 = v1[26];
  id v102 = v1[21];
  id v103 = v1;
  unint64_t v104 = (unint64_t)v1[18];
  if (v96)
  {
    unint64_t v144 = v98;
    uint64_t v105 = (uint64_t)v103[17];
    uint64_t v141 = v99;
    uint64_t v106 = v17;
    uint64_t v107 = swift_slowAlloc();
    v148[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v107 = 136446978;
    uint64_t v139 = v100;
    swift_bridgeObjectRetain();
    v103[8] = (char **)sub_91A3C(v105, v104, v148);
    sub_96E80();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v107 + 12) = 1024;
    LODWORD(v105) = [v97 v106[189]];

    *((_DWORD *)v103 + 66) = v105;
    sub_96E80();

    *(_WORD *)(v107 + 18) = 2080;
    v103[10] = v102;
    swift_bridgeObjectRetain();
    sub_89B60(&qword_EB3C0);
    sub_9564C();
    sub_956F0();
    uint64_t v108 = sub_96D60();
    unint64_t v110 = v109;
    swift_bridgeObjectRelease();
    v103[11] = (char **)sub_91A3C(v108, v110, v148);
    sub_96E80();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v107 + 28) = 2080;
    swift_beginAccess();
    sub_89A94(0, &qword_EB3B0);
    swift_bridgeObjectRetain();
    uint64_t v111 = sub_96D10();
    unint64_t v113 = v112;
    swift_bridgeObjectRelease();
    v103[13] = (char **)sub_91A3C(v111, v113, v148);
    sub_96E80();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v95, v147, "%{public}s Choosing all iMessageable(%{BOOL}d) requestedRecipients:(%s) perRecipientAvailability:(%s)", (uint8_t *)v107, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(char **, char **))v101[1])(v144, v139);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    ((void (*)(char **, char **))v101[1])(v98, v100);
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  unint64_t v114 = v103[1];
  unint64_t v115 = v103[30];
  return ((uint64_t (*)(char **))v114)(v115);
}

uint64_t sub_8FF0C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 269) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_9002C, 0, 0);
}

uint64_t sub_9002C()
{
  uint64_t v60 = v0;
  if (*(unsigned char *)(v0 + 269) == 1) {
    [*(id *)(v0 + 240) setError:4];
  }
  if (![*(id *)(v0 + 240) error])
  {
    uint64_t v1 = *(void *)(*(void *)(v0 + 96) + 16);
    if ((unint64_t)v1 >= 2
      && (uint64_t)[*(id *)(v0 + 232) maxChatParticipantsForContext:*(void *)(v0 + 176)] < v1)
    {
      [*(id *)(v0 + 240) setError:1];
    }
  }
  uint64_t v2 = &selRef_transferDataURL;
  if ([*(id *)(v0 + 240) allAreReachable]) {
    goto LABEL_22;
  }
  id v3 = [*(id *)(v0 + 176) lastUsedServiceName];
  if (!v3) {
    goto LABEL_22;
  }
  os_log_type_t v4 = v3;
  uint64_t v5 = sub_96D30();
  uint64_t v7 = v6;

  if (!v7) {
    goto LABEL_22;
  }
  if (v5 == 0x6567617373654D69 && v7 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = sub_96FA0();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
  }
  if ([*(id *)(v0 + 176) chatStyle] != 43) {
    goto LABEL_22;
  }
  id v9 = [*(id *)(v0 + 176) chatIdentifier];
  if (!v9) {
    goto LABEL_22;
  }
  uint64_t v10 = *(void **)(v0 + 176);

  unsigned __int8 v11 = [v10 isForPendingConversation];
  uint64_t v12 = *(void *)(v0 + 96);
  if (v11) {
    goto LABEL_22;
  }
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13) {
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = v12 + 40;
  while (1)
  {
    swift_bridgeObjectRetain();
    NSString v15 = sub_96D20();
    char IsEmail = IMStringIsEmail();

    swift_bridgeObjectRelease();
    if (IsEmail) {
      break;
    }
    v14 += 16;
    if (!--v13)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v2 = &selRef_transferDataURL;
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease_n();
  if (qword_EB1E0 != -1) {
    swift_once();
  }
  BOOL v42 = *(void **)(v0 + 176);
  sub_92094(*(void *)(v0 + 200), (uint64_t)qword_EB1E8);
  swift_bridgeObjectRetain_n();
  id v43 = v42;
  int64_t v44 = sub_96CC0();
  os_log_type_t v45 = sub_96E30();
  BOOL v46 = os_log_type_enabled(v44, v45);
  unint64_t v47 = *(void **)(v0 + 176);
  unint64_t v48 = *(void *)(v0 + 144);
  if (v46)
  {
    uint64_t v49 = *(void *)(v0 + 136);
    uint64_t v50 = swift_slowAlloc();
    id v56 = (void *)swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    *(_DWORD *)uint64_t v50 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 112) = sub_91A3C(v49, v48, &v59);
    sub_96E80();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v50 + 12) = 2112;
    *(void *)(v0 + 120) = v47;
    id v51 = v47;
    sub_96E80();
    void *v56 = v47;

    _os_log_impl(&dword_0, v44, v45, "%{public}s This group contains emails, don't downgrade: %@", (uint8_t *)v50, 0x16u);
    sub_89B60(&qword_EB3D8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  unint64_t v52 = *(void **)(v0 + 240);
  [v52 setAllAreReachable:1];
  [v52 setError:0];
  [v52 setReachabilityOverriddenToSuccessByPolicy:1];
  uint64_t v2 = &selRef_transferDataURL;
LABEL_23:
  if (qword_EB1E0 != -1) {
    swift_once();
  }
  id v17 = *(void **)(v0 + 240);
  uint64_t v19 = *(void *)(v0 + 208);
  uint64_t v18 = *(void *)(v0 + 216);
  uint64_t v20 = *(void *)(v0 + 200);
  uint64_t v21 = sub_92094(v20, (uint64_t)qword_EB1E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v22 = v17;
  unint64_t v23 = sub_96CC0();
  os_log_type_t type = sub_96E30();
  BOOL v24 = os_log_type_enabled(v23, type);
  uint64_t v25 = *(void **)(v0 + 240);
  uint64_t v26 = *(void *)(v0 + 216);
  uint64_t v57 = *(void **)(v0 + 224);
  uint64_t v27 = *(void *)(v0 + 208);
  uint64_t v58 = *(void *)(v0 + 200);
  uint64_t v28 = *(void *)(v0 + 168);
  unint64_t v29 = *(void *)(v0 + 144);
  if (v24)
  {
    log = v23;
    uint64_t v30 = *(void *)(v0 + 136);
    uint64_t v31 = swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136446978;
    uint64_t v54 = v26;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 64) = sub_91A3C(v30, v29, &v59);
    sub_96E80();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v31 + 12) = 1024;
    unsigned int v32 = [v25 v2[189]];

    *(_DWORD *)(v0 + 264) = v32;
    sub_96E80();

    *(_WORD *)(v31 + 18) = 2080;
    *(void *)(v0 + 80) = v28;
    swift_bridgeObjectRetain();
    sub_89B60(&qword_EB3C0);
    sub_9564C();
    sub_956F0();
    uint64_t v33 = sub_96D60();
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 88) = sub_91A3C(v33, v35, &v59);
    sub_96E80();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v31 + 28) = 2080;
    swift_beginAccess();
    sub_89A94(0, &qword_EB3B0);
    swift_bridgeObjectRetain();
    uint64_t v36 = sub_96D10();
    unint64_t v38 = v37;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 104) = sub_91A3C(v36, v38, &v59);
    sub_96E80();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, log, type, "%{public}s Choosing all iMessageable(%{BOOL}d) requestedRecipients:(%s) perRecipientAvailability:(%s)", (uint8_t *)v31, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v54, v58);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v58);
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  int64_t v39 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v40 = *(void *)(v0 + 240);
  return v39(v40);
}

uint64_t sub_908E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 136) = v13;
  *(_OWORD *)(v8 + 120) = v12;
  *(_OWORD *)(v8 + 104) = v11;
  *(unsigned char *)(v8 + 169) = v10;
  *(void *)(v8 + 88) = a7;
  *(void *)(v8 + 96) = a8;
  *(void *)(v8 + 72) = a5;
  *(void *)(v8 + 80) = a6;
  *(void *)(v8 + 56) = a3;
  *(void *)(v8 + 64) = a4;
  *(void *)(v8 + 40) = a1;
  *(void *)(v8 + 48) = a2;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_90934, 0, 0);
}

uint64_t sub_90934()
{
  uint64_t v1 = *(void *)(v0 + 88);
  *(unsigned char *)(v0 + 168) = 0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 144) = v2;
  swift_bridgeObjectRetain();
  id v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v3;
  void *v3 = v0;
  v3[1] = sub_90A20;
  char v4 = *(unsigned char *)(v0 + 169);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 64);
  uint64_t v10 = *(void *)(v0 + 40);
  return sub_8EC08(v10, v8, v9, v6, v7, v2, v5, v4);
}

uint64_t sub_90A20(uint64_t a1)
{
  *(void *)(*(void *)v1 + 160) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_90B40, 0, 0);
}

uint64_t sub_90B40()
{
  if ([*(id *)(v0 + 160) allAreReachable] && *(unsigned char *)(v0 + 168) != 1)
  {
    char v4 = *(void **)(v0 + 160);
    uint64_t v5 = *(void (**)(void *))(v0 + 104);
    [v4 setFinal:1];
    v5(v4);
  }
  else
  {
    uint64_t v1 = *(void **)(v0 + 160);
    uint64_t v2 = *(void (**)(void *))(v0 + 104);
    unsigned __int8 v3 = *(unsigned char *)(v0 + 169);
    [v1 setFinal:v3];
    v2(v1);
    if ((v3 & 1) == 0) {
      sub_8D838(*(uint64_t **)(v0 + 120), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 128), *(void *)(v0 + 136), *(id *)(v0 + 96), 1, (char)[*(id *)(v0 + 160) allAreReachable], *(void *)(v0 + 104), *(void *)(v0 + 112));
    }
  }

  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

void sub_90C9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(id), uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = sub_89B60(&qword_EB378);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && (sub_91038(a1), v20))
  {
    uint64_t v21 = v20;
    sub_96DC0();
    uint64_t v22 = sub_96DE0();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v19, 0, 1, v22);
    sub_96DB0();
    swift_retain();
    uint64_t v23 = sub_96DA0();
    BOOL v24 = (void *)swift_allocObject();
    void v24[2] = v23;
    v24[3] = &protocol witness table for MainActor;
    v24[4] = a10;
    v24[5] = a11;
    v24[6] = v21;
    sub_916BC((uint64_t)v19, (uint64_t)&unk_EB388, (uint64_t)v24);
    swift_release();
  }
  else
  {
    if (qword_EB1E0 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_96CE0();
    sub_92094(v25, (uint64_t)qword_EB1E8);
    swift_bridgeObjectRetain_n();
    uint64_t v26 = sub_96CC0();
    os_log_type_t v27 = sub_96E50();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      v35[0] = a7;
      unint64_t v29 = (uint8_t *)v28;
      uint64_t v30 = swift_slowAlloc();
      v35[1] = a6;
      uint64_t v36 = v30;
      *(_DWORD *)unint64_t v29 = 136446210;
      swift_bridgeObjectRetain();
      v35[2] = sub_91A3C(a3, a4, &v36);
      sub_96E80();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v26, v27, "%{public}s Did not get a [String: IDSIDInfoResult] from IDS!?", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a7 = v35[0];
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    NSString v31 = [*(id *)(a7 + 16) internalServiceName];
    if (!v31)
    {
      sub_96D30();
      NSString v31 = sub_96D20();
      swift_bridgeObjectRelease();
    }
    unsigned int v32 = self;
    Class isa = sub_96D70().super.isa;
    id v34 = [v32 finalResultForService:v31 handleIDs:isa allAreReachable:0 checkedServer:a9 & 1 error:-1];

    a5(v34);
  }
}

void sub_91038(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_89B60(&qword_EB3A0);
    uint64_t v2 = (void *)sub_96F80();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v29 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  uint64_t v6 = (char *)v37 + 8;
  uint64_t v7 = (char *)v34 + 8;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v27 = v1;
  while (1)
  {
    if (v5)
    {
      uint64_t v14 = (v5 - 1) & v5;
      unint64_t v15 = __clz(__rbit64(v5)) | (v8 << 6);
      int64_t v16 = v8;
    }
    else
    {
      int64_t v17 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_39;
      }
      if (v17 >= v28)
      {
LABEL_36:
        sub_89B48();
        return;
      }
      unint64_t v18 = *(void *)(v29 + 8 * v17);
      int64_t v16 = v8 + 1;
      if (!v18)
      {
        int64_t v16 = v8 + 2;
        if (v8 + 2 >= v28) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v29 + 8 * v16);
        if (!v18)
        {
          int64_t v16 = v8 + 3;
          if (v8 + 3 >= v28) {
            goto LABEL_36;
          }
          unint64_t v18 = *(void *)(v29 + 8 * v16);
          if (!v18)
          {
            int64_t v16 = v8 + 4;
            if (v8 + 4 >= v28) {
              goto LABEL_36;
            }
            unint64_t v18 = *(void *)(v29 + 8 * v16);
            if (!v18)
            {
              int64_t v19 = v8 + 5;
              if (v8 + 5 >= v28) {
                goto LABEL_36;
              }
              unint64_t v18 = *(void *)(v29 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  int64_t v16 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_40;
                  }
                  if (v16 >= v28) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = *(void *)(v29 + 8 * v16);
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v16 = v8 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v14 = (v18 - 1) & v18;
      unint64_t v15 = __clz(__rbit64(v18)) + (v16 << 6);
    }
    sub_95138(*(void *)(v1 + 48) + 40 * v15, (uint64_t)v36);
    sub_95194(*(void *)(v1 + 56) + 32 * v15, (uint64_t)v6);
    v34[0] = v37[0];
    v34[1] = v37[1];
    uint64_t v35 = v38;
    v33[0] = v36[0];
    v33[1] = v36[1];
    sub_95138((uint64_t)v33, (uint64_t)v32);
    if (!swift_dynamicCast())
    {
      sub_951F0((uint64_t)v33, &qword_EB3A8);
      swift_bridgeObjectRelease();
LABEL_35:
      sub_89B48();
      swift_release();
      return;
    }
    sub_95194((uint64_t)v7, (uint64_t)v32);
    sub_951F0((uint64_t)v33, &qword_EB3A8);
    sub_89A94(0, &qword_EB3B0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      goto LABEL_35;
    }
    unint64_t v20 = sub_92144(v30, v31);
    unint64_t v21 = v20;
    if (v22)
    {
      uint64_t v9 = v7;
      uint64_t v10 = v6;
      long long v11 = (uint64_t *)(v2[6] + 16 * v20);
      swift_bridgeObjectRelease();
      uint64_t *v11 = v30;
      v11[1] = v31;
      uint64_t v12 = v2[7];
      uint64_t v13 = 8 * v21;

      *(void *)(v12 + v13) = v30;
      uint64_t v6 = v10;
      uint64_t v7 = v9;
      uint64_t v1 = v27;
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v20;
    uint64_t v23 = (uint64_t *)(v2[6] + 16 * v20);
    *uint64_t v23 = v30;
    v23[1] = v31;
    *(void *)(v2[7] + 8 * v20) = v30;
    uint64_t v24 = v2[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_38;
    }
    v2[2] = v26;
LABEL_8:
    int64_t v8 = v16;
    unint64_t v5 = v14;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

uint64_t sub_91420(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  v6[2] = sub_96DB0();
  v6[3] = sub_96DA0();
  long long v11 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v9 = (void *)swift_task_alloc();
  void v6[4] = v9;
  void *v9 = v6;
  v9[1] = sub_91520;
  return v11(a6);
}

uint64_t sub_91520()
{
  swift_task_dealloc();
  uint64_t v1 = sub_96D90();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_9165C, v1, v0);
}

uint64_t sub_9165C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_916BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_96DE0();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_96DD0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_951F0(a1, &qword_EB378);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_96D90();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_91868(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_91944;
  return v6(a1);
}

uint64_t sub_91944()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_91A3C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_91B10(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_95194((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_95194((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_95944((uint64_t)v12);
  return v7;
}

uint64_t sub_91B10(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_96E90();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_91CCC(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_96F30();
  if (!v8)
  {
    sub_96F40();
    __break(1u);
LABEL_17:
    uint64_t result = sub_96F90();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_91CCC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_91D64(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_91F44(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_91F44(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_91D64(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_91EDC(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_96F10();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      sub_96F40();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_96D50();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    sub_96F90();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)sub_96F40();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_91EDC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_89B60(&qword_EB3F0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_91F44(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_89B60(&qword_EB3F0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_96F90();
  __break(1u);
  return result;
}

uint64_t sub_92094(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_920CC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

id sub_9210C(uint64_t a1)
{
  return [*(id *)(v1 + 16) reachabilityRequest:*(void *)(v1 + 24) updatedWithResult:a1];
}

uint64_t type metadata accessor for MessageReachabilityController()
{
  return self;
}

unint64_t sub_92144(uint64_t a1, uint64_t a2)
{
  sub_96FD0();
  sub_96D40();
  Swift::Int v4 = sub_96FE0();

  return sub_93634(a1, a2, v4);
}

uint64_t sub_921BC(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  sub_96FD0();
  swift_bridgeObjectRetain();
  sub_96D40();
  Swift::Int v8 = sub_96FE0();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_96FA0() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_96FA0() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_93034(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

unint64_t *sub_9236C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v37 = a1 + 64;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v36) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v36) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v36) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v36) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  sub_89B48();
                  return (unint64_t *)v2;
                }
                unint64_t v13 = *(void *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      break;
                    }
                    if (v14 >= v36) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v37 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }
LABEL_49:
                  __break(1u);
                }
                int64_t v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        unint64_t v7 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        int64_t v9 = v14;
      }
      int64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      sub_96FD0();
      swift_bridgeObjectRetain();
      sub_96D40();
      Swift::Int v19 = sub_96FE0();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = *(void *)(v2 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (sub_96FA0() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        uint64_t v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (sub_96FA0() & 1) == 0);
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v29 = *(unsigned char *)(v2 + 32);
    unint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    size_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      unsigned int v32 = sub_92ABC((unint64_t *)((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0)), v30, v2, v21, &v38);
      swift_release();
      sub_89B48();
    }
    else
    {
      uint64_t v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      unsigned int v32 = sub_92ABC((unint64_t *)v33, v30, v2, v21, &v38);
      swift_release();
      sub_89B48();
      swift_slowDealloc();
    }
    return v32;
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_927DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_89B60(&qword_EB350);
  uint64_t v3 = sub_96EF0();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      Swift::Int v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_96FD0();
      sub_96D40();
      uint64_t result = sub_96FE0();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t *sub_92ABC(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v38 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v39 = a3 + 56;
  while (2)
  {
    uint64_t v37 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }
        else
        {
          int64_t v13 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_45;
          }
          int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
          int64_t v15 = a5[3];
          if (v13 >= v14) {
            goto LABEL_43;
          }
          uint64_t v16 = a5[1];
          unint64_t v17 = *(void *)(v16 + 8 * v13);
          if (!v17)
          {
            int64_t v15 = v9 + 1;
            if (v9 + 2 >= v14) {
              goto LABEL_43;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              int64_t v13 = v9 + 2;
            }
            else
            {
              int64_t v15 = v9 + 2;
              if (v9 + 3 >= v14) {
                goto LABEL_43;
              }
              unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                int64_t v13 = v9 + 3;
              }
              else
              {
                int64_t v13 = v9 + 4;
                int64_t v15 = v9 + 3;
                if (v9 + 4 >= v14) {
                  goto LABEL_43;
                }
                unint64_t v17 = *(void *)(v16 + 8 * v13);
                if (!v17)
                {
                  int64_t v15 = v14 - 1;
                  int64_t v18 = v9 + 5;
                  while (v14 != v18)
                  {
                    unint64_t v17 = *(void *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      int64_t v13 = v18 - 1;
                      goto LABEL_21;
                    }
                  }
LABEL_43:
                  a5[3] = v15;
                  a5[4] = 0;
                  swift_retain();
                  return (unint64_t *)sub_92D9C(v38, a2, v37, a3);
                }
              }
            }
          }
LABEL_21:
          uint64_t v11 = (v17 - 1) & v17;
          unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
          int64_t v9 = v13;
        }
        Swift::Int v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        sub_96FD0();
        swift_bridgeObjectRetain();
        sub_96D40();
        Swift::Int v22 = sub_96FE0();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v39 + 8 * (v24 >> 6))) != 0) {
          break;
        }
LABEL_3:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      }
      uint64_t v27 = *(void *)(a3 + 48);
      uint64_t v28 = (void *)(v27 + 16 * v24);
      BOOL v29 = *v28 == v21 && v28[1] == v20;
      if (!v29 && (sub_96FA0() & 1) == 0)
      {
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v39 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          id v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (sub_96FA0() & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_29;
          }
        }
        goto LABEL_3;
      }
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_29:
      unint64_t v30 = v38[v25];
      v38[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v37 - 1;
    if (__OFSUB__(v37, 1))
    {
LABEL_45:
      __break(1u);
      return result;
    }
    if (v37 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_92D9C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_89B60(&qword_EB350);
  uint64_t result = sub_96F00();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    sub_96FD0();
    swift_bridgeObjectRetain();
    sub_96D40();
    uint64_t result = sub_96FE0();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_93034(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_927DC();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_931D0();
      goto LABEL_22;
    }
    sub_93384();
  }
  uint64_t v11 = *v4;
  sub_96FD0();
  sub_96D40();
  uint64_t result = sub_96FE0();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_96FA0(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_96FB0();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_96FA0();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *unint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_931D0()
{
  uint64_t v1 = v0;
  sub_89B60(&qword_EB350);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_96EE0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_93384()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_89B60(&qword_EB350);
  uint64_t v3 = sub_96EF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_96FD0();
    swift_bridgeObjectRetain();
    sub_96D40();
    uint64_t result = sub_96FE0();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_93634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_96FA0() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        int64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_96FA0() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_93718(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_92144(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_945A4(&qword_EB3A0);
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_93F10(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_937F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_89B60(&qword_EB1D0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_94750((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_89B48();
  if (v6 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_938D8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_89B60(&qword_EB370);
  char v42 = a2;
  uint64_t v6 = sub_96F70();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    unsigned int v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    BOOL v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_96FD0();
    sub_96D40();
    uint64_t result = sub_96FE0();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    void *v19 = v34;
    v19[1] = v33;
    uint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    void *v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_93C00(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_89B60(&qword_EB3E8);
  char v38 = a2;
  uint64_t v6 = sub_96F70();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  BOOL v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    unsigned int v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    sub_96FD0();
    sub_96D40();
    uint64_t result = sub_96FE0();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_93F10(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_96EB0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_96FD0();
        swift_bridgeObjectRetain();
        sub_96D40();
        Swift::Int v9 = sub_96FE0();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          int64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          unint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_940E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_92144(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_943E8();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      BOOL v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *BOOL v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_938D8(v17, a5 & 1);
  unint64_t v23 = sub_92144(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = sub_96FC0();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  char v25 = (uint64_t *)(v20[6] + 16 * v14);
  uint64_t *v25 = a3;
  v25[1] = a4;
  unint64_t v26 = (void *)(v20[7] + 16 * v14);
  void *v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

void sub_94270(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_92144(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_945A4(&qword_EB3E8);
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_93C00(v15, a4 & 1);
  unint64_t v20 = sub_92144(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    sub_96FC0();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v25;

  swift_bridgeObjectRetain();
}

void *sub_943E8()
{
  uint64_t v1 = v0;
  sub_89B60(&qword_EB370);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_96F60();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v23 = v19;
    v23[1] = v18;
    BOOL v24 = (void *)(*(void *)(v4 + 56) + v16);
    *BOOL v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_945A4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_89B60(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = sub_96F60();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_94750(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    id result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

char *sub_94950(uint64_t a1)
{
  return sub_89734(0, *(void *)(a1 + 16), 0, (char *)a1);
}

Swift::Int sub_94964(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_89B60(&qword_EB350);
    uint64_t v3 = sub_96F00();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      sub_96FD0();
      swift_bridgeObjectRetain();
      sub_96D40();
      Swift::Int result = sub_96FE0();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        unint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = sub_96FA0(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          int64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = sub_96FA0();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_94B08()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_94B40()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_94BB0(uint64_t a1)
{
  long long v12 = *(_OWORD *)(v1 + 32);
  long long v13 = *(_OWORD *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 48);
  char v5 = *(unsigned char *)(v1 + 72);
  long long v11 = *(_OWORD *)(v1 + 96);
  uint64_t v6 = *(void *)(v1 + 112);
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v1 + 56);
  long long v9 = *(_OWORD *)(v1 + 80);
  *(void *)(v2 + 16) = v7;
  *(void *)uint64_t v7 = v2;
  *(void *)(v7 + 8) = sub_94CBC;
  *(void *)(v7 + 136) = v6;
  *(_OWORD *)(v7 + 120) = v11;
  *(_OWORD *)(v7 + 104) = v9;
  *(unsigned char *)(v7 + 169) = v5;
  *(_OWORD *)(v7 + 88) = v8;
  *(void *)(v7 + 80) = v4;
  *(_OWORD *)(v7 + 48) = v13;
  *(_OWORD *)(v7 + 64) = v12;
  *(void *)(v7 + 40) = a1;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_90934, 0, 0);
}

uint64_t sub_94CBC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_94DB0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

void sub_94E08(uint64_t a1, uint64_t a2)
{
  sub_90C9C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(id))(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(unsigned char *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80));
}

uint64_t sub_94E44()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_94E8C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  long long v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_959F8;
  return sub_91420(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_94F54()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_94F8C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_95044;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_EB390 + dword_EB390);
  return v6(a1, v4);
}

uint64_t sub_95044()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_95138(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_95194(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_951F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_89B60(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_9524C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_96E10();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_921BC(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

id sub_952E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  sub_8C1E0((uint64_t)&_swiftEmptyArrayStorage);
  BOOL v6 = *(void *)(a4 + 16) != 0;
  id v7 = objc_allocWithZone((Class)IMServiceReachabilityResult);
  NSString v8 = sub_96D20();
  swift_bridgeObjectRelease();
  sub_89A94(0, &qword_EB3E0);
  Class isa = sub_96CF0().super.isa;
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithService:v8 error:0 handleResults:isa isFinal:0 allAreReachable:v6 didCheckServer:0];

  [v10 setSelfKTData:a3];
  sub_89A94(0, &qword_EB3B0);
  Class v11 = sub_96CF0().super.isa;
  [v10 setKtData:v11];

  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = sub_9524C(v12);
  swift_bridgeObjectRelease();
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = sub_9236C(v14, v13);
  swift_bridgeObjectRelease();
  if (v15[2])
  {
    if (qword_EB1E0 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_96CE0();
    sub_92094(v16, (uint64_t)qword_EB1E8);
    swift_retain();
    BOOL v17 = sub_96CC0();
    os_log_type_t v18 = sub_96E30();
    if (os_log_type_enabled(v17, v18))
    {
      int64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)int64_t v19 = 136315138;
      swift_retain();
      uint64_t v20 = sub_96E00();
      unint64_t v22 = v21;
      swift_release();
      uint64_t v25 = sub_91A3C(v20, v22, &v26);
      sub_96E80();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v17, v18, "IDS didn't give us back all the results we asked about: %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      objc_msgSend(v10, "setAllAreReachable:", 0, v25, v26);
    }
    else
    {

      swift_release_n();
      objc_msgSend(v10, "setAllAreReachable:", 0, v24, v26);
    }
  }
  else
  {
    swift_release();
  }
  return v10;
}

unint64_t sub_9564C()
{
  unint64_t result = qword_EB3C8;
  if (!qword_EB3C8)
  {
    sub_956A8(&qword_EB3C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_EB3C8);
  }
  return result;
}

uint64_t sub_956A8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_956F0()
{
  unint64_t result = qword_EB3D0;
  if (!qword_EB3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_EB3D0);
  }
  return result;
}

uint64_t sub_95744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = 0;
  for (unint64_t i = (void *)(a1 + 40); ; i += 2)
  {
    BOOL v8 = *(i - 1) == a2 && *i == a3;
    if (v8 || (sub_96FA0() & 1) != 0) {
      break;
    }
    if (v3 == ++v6) {
      return 0;
    }
  }
  return v6;
}

uint64_t sub_957D8(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_89734(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = &v4[16 * a2 + 32];
    if (a1 != a2 || &v4[16 * a1 + 32] >= &v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[16 * a1 + 32], v16, 16 * v15);
    }
    uint64_t v17 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v18;
LABEL_20:
      uint64_t *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = sub_96F90();
  __break(1u);
  return result;
}

uint64_t sub_95944(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t *sub_95994(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void sub_959FC(void *a1)
{
  objc_end_catch();
}

void sub_95A20()
{
  sub_2EEAC();
  sub_2EE84(&dword_0, v0, v1, "Chat: %@", v2, v3, v4, v5, v6);
}

void sub_95A88(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 guid];
  sub_2EEAC();
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "Found a chat that is not 1-1 chat for message relay: %@", v4, 0xCu);
}

void sub_95B20()
{
  sub_2EE58();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_95BA8()
{
  sub_2EE58();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_95C30()
{
  sub_2EEA0();
  sub_2EE68(&dword_0, v0, v1, "We decided not to upload the group photo. This should not happen unless the file is too large.", v2, v3, v4, v5, v6);
}

void sub_95C64(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_95CD4()
{
  sub_2EEAC();
  sub_2EE84(&dword_0, v0, v1, "Could not get stored message item for message item: %@", v2, v3, v4, v5, v6);
}

void sub_95D3C()
{
  sub_2EEA0();
  sub_2EE68(&dword_0, v0, v1, "Trying to send nil syndicationAction", v2, v3, v4, v5, v6);
}

void sub_95D70()
{
  sub_2EEA0();
  sub_2EE68(&dword_0, v0, v1, "No identifiers to send syndicationAction to", v2, v3, v4, v5, v6);
}

void sub_95DA4()
{
  sub_2EEAC();
  sub_2EE84(&dword_0, v0, v1, "Unable to find chat. Failed sending SyndicationAction: %@", v2, v3, v4, v5, v6);
}

void sub_95E0C()
{
  sub_2EEA0();
  sub_2EE68(&dword_0, v0, v1, " Unable to get Caller ID for SyndicationAction", v2, v3, v4, v5, v6);
}

void sub_95E40()
{
  sub_2EEA0();
  sub_2EE68(&dword_0, v0, v1, " ** Device is not regisistered, failing SyndicationAction", v2, v3, v4, v5, v6);
}

void sub_95E74()
{
  sub_2EE58();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_95EFC(void *a1)
{
  objc_end_catch();
}

void sub_95F2C()
{
  sub_4B5F4();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_95FA8()
{
  sub_4B5F4();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_96024()
{
  sub_2EEA0();
  sub_2EE68(&dword_0, v0, v1, "No message item provided", v2, v3, v4, v5, v6);
}

void sub_96058()
{
  sub_2EEA0();
  sub_2EE68(&dword_0, v0, v1, "Not appending availability verification info for chat with no participant", v2, v3, v4, v5, v6);
}

void sub_9608C()
{
  sub_2EEA0();
  sub_2EE68(&dword_0, v0, v1, "Not appending availability verification info for chat, handleID is empty", v2, v3, v4, v5, v6);
}

void sub_960C0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_9612C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_96198(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_96204()
{
  sub_4B5AC();
  sub_2EE84(&dword_0, v0, v1, "IDS failed to send scheduled message to peer devices, error %@", v2, v3, v4, v5, v6);
}

void sub_96270()
{
  sub_2EE58();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_962F8()
{
  sub_2EE58();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_96380()
{
  sub_2EE58();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_96408()
{
  sub_2EE58();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_96494()
{
  sub_4B5B8();
  sub_4B5D4(&dword_0, v0, v1, "Send of message edit not successful, editCommandGuid %@, error %ld");
}

void sub_96500()
{
  sub_4B608(__stack_chk_guard);
  sub_4B5AC();
  sub_2EE84(&dword_0, v0, v1, "All sends of message edit commands completed, but there were error(s). Reporting error: %ld", v2, v3, v4, v5, v6);
}

void sub_96568()
{
  sub_4B5B8();
  sub_4B5D4(&dword_0, v0, v1, "Send of sticker reposition not successful, stickerRepositionCommandGuid %@, error %ld");
}

void sub_965D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_9664C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_966C4()
{
  sub_2EEA0();
  sub_2EE68(&dword_0, v0, v1, "Could not create temporary file for adaptive image backward compatibility transfer", v2, v3, v4, v5, v6);
}

void sub_966F8()
{
  sub_2EEA0();
  sub_2EE68(&dword_0, v0, v1, "Could not determine file name when copying genmoji to temporary file path", v2, v3, v4, v5, v6);
}

void sub_9672C()
{
  sub_4B5AC();
  sub_2EE84(&dword_0, v0, v1, "Error occurred copying genmoji to temporary path: %@", v2, v3, v4, v5, v6);
}

void sub_96798()
{
  sub_4B5AC();
  sub_2EE84(&dword_0, v0, v1, "Copying genmoji to temporary path, but file already exists at that path, and the deletion of that item failed with error: %@", v2, v3, v4, v5, v6);
}

void sub_96804()
{
  sub_2EE58();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_96890()
{
  sub_2EE58();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_96918(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "Error unpacking balloon plugin from BlastDoor: %@", (uint8_t *)&v2, 0xCu);
}

void sub_96990()
{
  sub_2EE58();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_96A18()
{
  sub_2EE58();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_96AA0()
{
  sub_2EE58();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_96B28()
{
  sub_2EE58();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_96BB0()
{
  sub_2EE58();
  sub_2EE3C(&dword_0, &_os_log_default, v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_96C38(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_fault_impl(&dword_0, log, OS_LOG_TYPE_FAULT, "_handleIncomingMessageError: %@", (uint8_t *)&v3, 0x16u);
}

uint64_t sub_96CC0()
{
  return Logger.logObject.getter();
}

uint64_t sub_96CD0()
{
  return Logger.init(subsystem:category:)();
}

uint64_t sub_96CE0()
{
  return type metadata accessor for Logger();
}

NSDictionary sub_96CF0()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_96D00()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_96D10()
{
  return Dictionary.description.getter();
}

NSString sub_96D20()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_96D30()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_96D40()
{
  return String.hash(into:)();
}

Swift::Int sub_96D50()
{
  return String.UTF8View._foreignCount()();
}

uint64_t sub_96D60()
{
  return Sequence<>.joined(separator:)();
}

NSArray sub_96D70()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_96D80()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_96D90()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t sub_96DA0()
{
  return static MainActor.shared.getter();
}

uint64_t sub_96DB0()
{
  return type metadata accessor for MainActor();
}

uint64_t sub_96DC0()
{
  return static TaskPriority.userInitiated.getter();
}

uint64_t sub_96DD0()
{
  return TaskPriority.rawValue.getter();
}

uint64_t sub_96DE0()
{
  return type metadata accessor for TaskPriority();
}

uint64_t sub_96DF0()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_96E00()
{
  return Set.description.getter();
}

uint64_t sub_96E10()
{
  return Set.init(minimumCapacity:)();
}

uint64_t sub_96E20()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t sub_96E30()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_96E40()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_96E50()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_96E60()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_96E70()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t sub_96E80()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_96E90()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t sub_96EA0()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t sub_96EB0()
{
  return _HashTable.previousHole(before:)();
}

uint64_t sub_96EC0()
{
  return __CocoaSet.makeIterator()();
}

uint64_t sub_96ED0()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t sub_96EE0()
{
  return static _SetStorage.copy(original:)();
}

uint64_t sub_96EF0()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t sub_96F00()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t sub_96F10()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t sub_96F20()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t sub_96F30()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t sub_96F40()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_96F50()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t sub_96F60()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t sub_96F70()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t sub_96F80()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t sub_96F90()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_96FA0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_96FB0()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_96FC0()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_96FD0()
{
  return Hasher.init(_seed:)();
}

Swift::Int sub_96FE0()
{
  return Hasher._finalize()();
}

uint64_t AttachmentsAutomationLogMilestone()
{
  return _AttachmentsAutomationLogMilestone();
}

uint64_t AttachmentsAutomationLogMilestoneWithOptionFlags()
{
  return _AttachmentsAutomationLogMilestoneWithOptionFlags();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFRelease(CFTypeRef cf)
{
}

uint64_t CMFBlockListIsItemBlocked()
{
  return _CMFBlockListIsItemBlocked();
}

uint64_t CreateCMFItemFromString()
{
  return _CreateCMFItemFromString();
}

uint64_t IDSCopyBestGuessIDForID()
{
  return _IDSCopyBestGuessIDForID();
}

uint64_t IDSCopyIDForDevice()
{
  return _IDSCopyIDForDevice();
}

uint64_t IDSCopyIDForEmailAddress()
{
  return _IDSCopyIDForEmailAddress();
}

uint64_t IDSCopyIDForPhoneNumber()
{
  return _IDSCopyIDForPhoneNumber();
}

uint64_t IDSCopyIDForTokenWithID()
{
  return _IDSCopyIDForTokenWithID();
}

uint64_t IDSCopyRawAddressForDestination()
{
  return _IDSCopyRawAddressForDestination();
}

uint64_t IDSGetUUIDData()
{
  return _IDSGetUUIDData();
}

uint64_t IMAreObjectsLogicallySame()
{
  return _IMAreObjectsLogicallySame();
}

uint64_t IMAssociatedMessageDecodeGUID()
{
  return _IMAssociatedMessageDecodeGUID();
}

uint64_t IMBalloonExtensionIDWithSuffix()
{
  return _IMBalloonExtensionIDWithSuffix();
}

uint64_t IMBalloonPluginFallbackLinkMetadata()
{
  return _IMBalloonPluginFallbackLinkMetadata();
}

uint64_t IMBalloonPluginRequiredCapabilitiesWithMessageData()
{
  return _IMBalloonPluginRequiredCapabilitiesWithMessageData();
}

uint64_t IMCanonicalizeFormattedString()
{
  return _IMCanonicalizeFormattedString();
}

uint64_t IMChatCanonicalIDSIDsForAddress()
{
  return _IMChatCanonicalIDSIDsForAddress();
}

uint64_t IMCopyNormalizedAttributes()
{
  return _IMCopyNormalizedAttributes();
}

uint64_t IMCopySafeNameOfFontFamilyName()
{
  return _IMCopySafeNameOfFontFamilyName();
}

uint64_t IMCreateEscapedAttributeValueFromString()
{
  return _IMCreateEscapedAttributeValueFromString();
}

uint64_t IMCreateEscapedStringFromString()
{
  return _IMCreateEscapedStringFromString();
}

uint64_t IMCreateSerializedItemsFromArray()
{
  return _IMCreateSerializedItemsFromArray();
}

uint64_t IMDInconsistencyResolved()
{
  return _IMDInconsistencyResolved();
}

uint64_t IMDNoticedInconsistency()
{
  return _IMDNoticedInconsistency();
}

uint64_t IMDispatchForNotify()
{
  return _IMDispatchForNotify();
}

uint64_t IMExtensionPayloadUnarchivingClasses()
{
  return _IMExtensionPayloadUnarchivingClasses();
}

uint64_t IMFileURLIsActuallyAnimated()
{
  return _IMFileURLIsActuallyAnimated();
}

uint64_t IMGetAttributedInfoArrayAllowlistedClasses()
{
  return _IMGetAttributedInfoArrayAllowlistedClasses();
}

uint64_t IMGetCachedDomainBoolForKey()
{
  return _IMGetCachedDomainBoolForKey();
}

uint64_t IMGetCachedDomainIntForKeyWithDefaultValue()
{
  return _IMGetCachedDomainIntForKeyWithDefaultValue();
}

uint64_t IMGetCachedDomainValueForKey()
{
  return _IMGetCachedDomainValueForKey();
}

uint64_t IMGetConsumedSessionPayloadsForBreadcrumbItems()
{
  return _IMGetConsumedSessionPayloadsForBreadcrumbItems();
}

uint64_t IMGetDomainBoolForKey()
{
  return _IMGetDomainBoolForKey();
}

uint64_t IMGetDomainBoolForKeyWithDefaultValue()
{
  return _IMGetDomainBoolForKeyWithDefaultValue();
}

uint64_t IMGetDomainIntForKey()
{
  return _IMGetDomainIntForKey();
}

uint64_t IMGetDomainValueForKey()
{
  return _IMGetDomainValueForKey();
}

uint64_t IMGetiMessageSettings()
{
  return _IMGetiMessageSettings();
}

uint64_t IMGreenTeaPhoneNumberTransmitLog()
{
  return _IMGreenTeaPhoneNumberTransmitLog();
}

uint64_t IMInternationalForPhoneNumberWithOptions()
{
  return _IMInternationalForPhoneNumberWithOptions();
}

uint64_t IMIsRunningInAutomation()
{
  return _IMIsRunningInAutomation();
}

uint64_t IMIsRunningInUnitTesting()
{
  return _IMIsRunningInUnitTesting();
}

uint64_t IMLogBacktrace()
{
  return _IMLogBacktrace();
}

uint64_t IMLogHandleForCategory()
{
  return _IMLogHandleForCategory();
}

uint64_t IMLogSimulateCrashForException()
{
  return _IMLogSimulateCrashForException();
}

uint64_t IMMentionHandleAllowedCharacterSet()
{
  return _IMMentionHandleAllowedCharacterSet();
}

uint64_t IMMessageGuidFromIMFileTransferGuid()
{
  return _IMMessageGuidFromIMFileTransferGuid();
}

uint64_t IMMessageThreadIdentifierGetOriginatorGUID()
{
  return _IMMessageThreadIdentifierGetOriginatorGUID();
}

uint64_t IMOSLoggingEnabled()
{
  return _IMOSLoggingEnabled();
}

uint64_t IMPreferredAccountMap()
{
  return _IMPreferredAccountMap();
}

uint64_t IMPreviewConstraintsZero()
{
  return _IMPreviewConstraintsZero();
}

uint64_t IMSMSFallbackEnabled()
{
  return _IMSMSFallbackEnabled();
}

uint64_t IMSafeTemporaryDirectory()
{
  return _IMSafeTemporaryDirectory();
}

uint64_t IMSendAdditionalMMCSErrorInfoToMadrid()
{
  return _IMSendAdditionalMMCSErrorInfoToMadrid();
}

uint64_t IMServiceNameForCanonicalIDSAddresses()
{
  return _IMServiceNameForCanonicalIDSAddresses();
}

uint64_t IMSetDomainBoolForKey()
{
  return _IMSetDomainBoolForKey();
}

uint64_t IMSetDomainValueForKey()
{
  return _IMSetDomainValueForKey();
}

uint64_t IMSharedHelperAppBlocklisted()
{
  return _IMSharedHelperAppBlocklisted();
}

uint64_t IMSharedHelperAreObjectsLogicallySame()
{
  return _IMSharedHelperAreObjectsLogicallySame();
}

uint64_t IMSharedHelperCombinedPluginPayloadDictionaryData()
{
  return _IMSharedHelperCombinedPluginPayloadDictionaryData();
}

uint64_t IMSharedHelperCombinedPluginPayloadDictionaryDataWithAttachmentURLs()
{
  return _IMSharedHelperCombinedPluginPayloadDictionaryDataWithAttachmentURLs();
}

uint64_t IMSharedHelperDeviceHasMultipleSubscriptions()
{
  return _IMSharedHelperDeviceHasMultipleSubscriptions();
}

uint64_t IMSharedHelperEnsureDirectoryExistsAtPath()
{
  return _IMSharedHelperEnsureDirectoryExistsAtPath();
}

uint64_t IMSharedHelperExtractPayloadURL()
{
  return _IMSharedHelperExtractPayloadURL();
}

uint64_t IMSharedHelperIsUnderAutomation()
{
  return _IMSharedHelperIsUnderAutomation();
}

uint64_t IMSharedHelperMD5HashOfFileAtPath()
{
  return _IMSharedHelperMD5HashOfFileAtPath();
}

uint64_t IMSharedHelperMD5HashPlist()
{
  return _IMSharedHelperMD5HashPlist();
}

uint64_t IMSharedHelperMD5OfData()
{
  return _IMSharedHelperMD5OfData();
}

uint64_t IMSharedHelperMissingKeysInStickerUserInfo()
{
  return _IMSharedHelperMissingKeysInStickerUserInfo();
}

uint64_t IMSharedHelperNickNameEnabled()
{
  return _IMSharedHelperNickNameEnabled();
}

uint64_t IMSharedHelperPayloadFromCombinedPluginPayloadData()
{
  return _IMSharedHelperPayloadFromCombinedPluginPayloadData();
}

uint64_t IMSingleObjectArray()
{
  return _IMSingleObjectArray();
}

uint64_t IMStickerTransferInfoDirectoryURL()
{
  return _IMStickerTransferInfoDirectoryURL();
}

uint64_t IMStringIsBusinessID()
{
  return _IMStringIsBusinessID();
}

uint64_t IMStringIsEmail()
{
  return _IMStringIsEmail();
}

uint64_t IMStringIsPhoneNumber()
{
  return _IMStringIsPhoneNumber();
}

uint64_t IMStringIsStewie()
{
  return _IMStringIsStewie();
}

uint64_t IMStripLoginID()
{
  return _IMStripLoginID();
}

uint64_t IMSupportsASTC()
{
  return _IMSupportsASTC();
}

uint64_t IMWeakLinkClass()
{
  return _IMWeakLinkClass();
}

uint64_t IMWeakLinkSymbol()
{
  return _IMWeakLinkSymbol();
}

uint64_t JWDecodeDictionary()
{
  return _JWDecodeDictionary();
}

uint64_t JWEncodeDictionary()
{
  return _JWEncodeDictionary();
}

uint64_t JWUUIDPushObjectToString()
{
  return _JWUUIDPushObjectToString();
}

uint64_t MarcoLoggingStringForMessageData()
{
  return _MarcoLoggingStringForMessageData();
}

uint64_t NSBOOLFromString()
{
  return _NSBOOLFromString();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return _NSStringFromRange(range);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

uint64_t OSLogHandleForIMEventCategory()
{
  return _OSLogHandleForIMEventCategory();
}

uint64_t OSLogHandleForIMFoundationCategory()
{
  return _OSLogHandleForIMFoundationCategory();
}

Boolean UTTypeConformsTo(CFStringRef inUTI, CFStringRef inConformsToUTI)
{
  return _UTTypeConformsTo(inUTI, inConformsToUTI);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _FZErrorTypeFromNSError()
{
  return __FZErrorTypeFromNSError();
}

uint64_t _FZErrorTypeFromResponseCodeAndError()
{
  return __FZErrorTypeFromResponseCodeAndError();
}

uint64_t _IDSiMessageProtocolVersionNumber()
{
  return __IDSiMessageProtocolVersionNumber();
}

uint64_t _IMAlwaysLog()
{
  return __IMAlwaysLog();
}

uint64_t _IMWarn()
{
  return __IMWarn();
}

uint64_t _IMWillLog()
{
  return __IMWillLog();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t _iMessageTelemetryLogHandle()
{
  return __iMessageTelemetryLogHandle();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return __os_activity_create(dso, description, activity, flags);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

uint64_t im_checkpointIDSService()
{
  return _im_checkpointIDSService();
}

uint64_t im_dispatch_after()
{
  return _im_dispatch_after();
}

uint64_t im_primary_queue()
{
  return _im_primary_queue();
}

uint64_t im_sendMessageCheckpointIfNecessary()
{
  return _im_sendMessageCheckpointIfNecessary();
}

uint64_t kdebug_trace()
{
  return _kdebug_trace();
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return _objc_getAssociatedObject(object, key);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeak(id *location)
{
  return _objc_loadWeak(location);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return _os_signpost_enabled(log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return _os_signpost_id_make_with_pointer(log, ptr);
}

uint64_t sandbox_extension_consume()
{
  return _sandbox_extension_consume();
}

uint64_t sandbox_extension_release()
{
  return _sandbox_extension_release();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

id objc_msgSend_APNSMessageDeliveryClass(void *a1, const char *a2, ...)
{
  return _[a1 APNSMessageDeliveryClass];
}

id objc_msgSend_AuxGUIDFromFileTransferGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "AuxGUIDFromFileTransferGUID:");
}

id objc_msgSend_AuxHTML(void *a1, const char *a2, ...)
{
  return _[a1 AuxHTML];
}

id objc_msgSend_BIAContext(void *a1, const char *a2, ...)
{
  return _[a1 BIAContext];
}

id objc_msgSend_GUID(void *a1, const char *a2, ...)
{
  return _[a1 GUID];
}

id objc_msgSend_ID(void *a1, const char *a2, ...)
{
  return _[a1 ID];
}

id objc_msgSend_IDSServerBagiMessageSharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 IDSServerBagiMessageSharedInstance];
}

id objc_msgSend_IMIsEagerUploadEnabledForPhoneNumber_simID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "IMIsEagerUploadEnabledForPhoneNumber:simID:");
}

id objc_msgSend_MIMETypeOfPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "MIMETypeOfPath:");
}

id objc_msgSend_NicknameWithRecordID_URI_decryptionKey_wallpaperDataTag_wallpaperLowResDataTag_wallpaperMetadataTag_hasWallpaperUpdate_dropNicknameForUnknownContacts_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "NicknameWithRecordID:URI:decryptionKey:wallpaperDataTag:wallpaperLowResDataTag:wallpaperMetadataTag:hasWallpaperUpdate:dropNicknameForUnknownContacts:withCompletionBlock:");
}

id objc_msgSend_URI(void *a1, const char *a2, ...)
{
  return _[a1 URI];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 URLByDeletingLastPathComponent];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UTITypeOfPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTITypeOfPath:");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__FTAWDLogForMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_FTAWDLogForMessage:withContext:");
}

id objc_msgSend__FTCopyGzippedData(void *a1, const char *a2, ...)
{
  return _[a1 _FTCopyGzippedData];
}

id objc_msgSend__FTDataFromHexString(void *a1, const char *a2, ...)
{
  return _[a1 _FTDataFromHexString];
}

id objc_msgSend__FTOptionallyDecompressData(void *a1, const char *a2, ...)
{
  return _[a1 _FTOptionallyDecompressData];
}

id objc_msgSend__IDSDataFromBase64String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_IDSDataFromBase64String:");
}

id objc_msgSend__IDsFromURIs(void *a1, const char *a2, ...)
{
  return _[a1 _IDsFromURIs];
}

id objc_msgSend__URIFromCanonicalizedPhoneNumber(void *a1, const char *a2, ...)
{
  return _[a1 _URIFromCanonicalizedPhoneNumber];
}

id objc_msgSend__URIsForChatParticipants_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_URIsForChatParticipants:fromID:");
}

id objc_msgSend__URIsFromApplicationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_URIsFromApplicationData:");
}

id objc_msgSend__URIsFromHandles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_URIsFromHandles:");
}

id objc_msgSend__URIsFromIDs(void *a1, const char *a2, ...)
{
  return _[a1 _URIsFromIDs];
}

id objc_msgSend___imArrayByApplyingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__imArrayByApplyingBlock:");
}

id objc_msgSend___imArrayByFilteringWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__imArrayByFilteringWithBlock:");
}

id objc_msgSend___imFirstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__imFirstObject");
}

id objc_msgSend___imHexString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__imHexString");
}

id objc_msgSend___imSetFromArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__imSetFromArray");
}

id objc_msgSend___im_apfsCompatibleFilename(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_apfsCompatibleFilename");
}

id objc_msgSend___im_associatedMessagePluginBundleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_associatedMessagePluginBundleID");
}

id objc_msgSend___im_attributedStringByAppendingFileTransfers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_attributedStringByAppendingFileTransfers:");
}

id objc_msgSend___im_attributedStringByAssigningMessagePartNumbers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_attributedStringByAssigningMessagePartNumbers");
}

id objc_msgSend___im_attributedStringByReplacingAdaptiveImageGlyphFileTransfersUsingFileTransferProvider_replacementTextProvider_removedTransferGUIDsOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_attributedStringByReplacingAdaptiveImageGlyphFileTransfersUsingFileTransferProvider:replacementTextProvider:removedTransferGUIDsOut:");
}

id objc_msgSend___im_attributedStringWithFileTransfers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_attributedStringWithFileTransfers:");
}

id objc_msgSend___im_canonicalIDSIDsFromAddresses(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_canonicalIDSIDsFromAddresses");
}

id objc_msgSend___im_engramDataRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_engramDataRepresentation");
}

id objc_msgSend___im_engramStringRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_engramStringRepresentation");
}

id objc_msgSend___im_iMessageDateFromTimeStamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_iMessageDateFromTimeStamp:");
}

id objc_msgSend___im_isOnlyAdaptiveImageGlyphFileTransfersAndWhitespaceUsingFileTransferProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_isOnlyAdaptiveImageGlyphFileTransfersAndWhitespaceUsingFileTransferProvider:");
}

id objc_msgSend___im_messagePartMatchingPartIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_messagePartMatchingPartIndex:");
}

id objc_msgSend___im_messageTextByAddingMessagePart_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_messageTextByAddingMessagePart:atIndex:");
}

id objc_msgSend___im_nanosecondTimeIntervalSinceEpochTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_nanosecondTimeIntervalSinceEpochTime");
}

id objc_msgSend___im_subscriptionContextForPhoneNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_subscriptionContextForPhoneNumber:");
}

id objc_msgSend___im_transferGUIDsInAttributedString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_transferGUIDsInAttributedString");
}

id objc_msgSend___im_visitMessageParts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_visitMessageParts:");
}

id objc_msgSend__addGroupPhotoRefreshDate_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addGroupPhotoRefreshDate:context:");
}

id objc_msgSend__addOriginalTimestampIfNecessary_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addOriginalTimestampIfNecessary:context:");
}

id objc_msgSend__addRemoveParticipantsToENGroupForChat_participantsToAdd_participantsToRemove_service_fromID_attemptCount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addRemoveParticipantsToENGroupForChat:participantsToAdd:participantsToRemove:service:fromID:attemptCount:completion:");
}

id objc_msgSend__amIMentioned_inMentions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_amIMentioned:inMentions:");
}

id objc_msgSend__appearsToBeEmail(void *a1, const char *a2, ...)
{
  return _[a1 _appearsToBeEmail];
}

id objc_msgSend__appendFilePathsWithGUIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendFilePathsWithGUIDs:");
}

id objc_msgSend__appendMyNicknameToMessageDictionary_forMessage_chat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendMyNicknameToMessageDictionary:forMessage:chat:");
}

id objc_msgSend__appendOffGridAvailabilityPropertiesToMessageDictionary_participantHandleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendOffGridAvailabilityPropertiesToMessageDictionary:participantHandleID:");
}

id objc_msgSend__appendRecipientAvailabilityVerificationInfoToMessageDictionary_forChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendRecipientAvailabilityVerificationInfoToMessageDictionary:forChat:");
}

id objc_msgSend__appendRecipientNicknameTruncatedRecordIDToMessageDictionary_forChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendRecipientNicknameTruncatedRecordIDToMessageDictionary:forChat:");
}

id objc_msgSend__appendSeenOffGridStatusToMessageDictionary_forChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendSeenOffGridStatusToMessageDictionary:forChat:");
}

id objc_msgSend__arrayForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_arrayForKey:");
}

id objc_msgSend__associatedMessageFallbackHashForMessageItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_associatedMessageFallbackHashForMessageItem:");
}

id objc_msgSend__autoReportChatAsUnknown_chatIsNew_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_autoReportChatAsUnknown:chatIsNew:");
}

id objc_msgSend__bestGuessURI(void *a1, const char *a2, ...)
{
  return _[a1 _bestGuessURI];
}

id objc_msgSend__buildSendMessageContextWithChatIdentifier_withChatStyle_withServiceSession_withMessage_destinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildSendMessageContextWithChatIdentifier:withChatStyle:withServiceSession:withMessage:destinations:");
}

id objc_msgSend__callerURIForChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callerURIForChat:");
}

id objc_msgSend__canSendMessagesWithEngram(void *a1, const char *a2, ...)
{
  return _[a1 _canSendMessagesWithEngram];
}

id objc_msgSend__capabilitiesForTransfers_supportsASTC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_capabilitiesForTransfers:supportsASTC:");
}

id objc_msgSend__chatForChatIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_chatForChatIdentifier:");
}

id objc_msgSend__checkAndPerformLegacyAddRemove_participantsToAdd_participantsToRemove_service_fromIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkAndPerformLegacyAddRemove:participantsToAdd:participantsToRemove:service:fromIdentifier:");
}

id objc_msgSend__checkAndSetUpContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkAndSetUpContext:");
}

id objc_msgSend__checkForParticipantLeaveOnENGroup_groupMessagePayload_toIdentifier_fromIdentifier_service_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkForParticipantLeaveOnENGroup:groupMessagePayload:toIdentifier:fromIdentifier:service:");
}

id objc_msgSend__checkGlobalReadReceiptValueAndUpdateIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkGlobalReadReceiptValueAndUpdateIfNeeded:");
}

id objc_msgSend__checkStickerRepositioningMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkStickerRepositioningMetadata:");
}

id objc_msgSend__clearDowngradeMarkersForChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearDowngradeMarkersForChat:");
}

id objc_msgSend__combinedTransferUserInfoForAttachmentSendContexts_transfer_message_commonCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_combinedTransferUserInfoForAttachmentSendContexts:transfer:message:commonCapabilities:");
}

id objc_msgSend__commandReadyForBlastdoor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_commandReadyForBlastdoor:");
}

id objc_msgSend__compressedAttributionInfoForMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_compressedAttributionInfoForMessage:");
}

id objc_msgSend__computeFlagsForIncomingMessage_isFromMe_unfinished_isAudioMessage_isAutoReply_isExpirable_messageSource_participants_hasUnseenMention_isSOS_isCritical_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeFlagsForIncomingMessage:isFromMe:unfinished:isAudioMessage:isAutoReply:isExpirable:messageSource:participants:hasUnseenMention:isSOS:isCritical:");
}

id objc_msgSend__computeRegPropertiesForNewFeatures_currentRegProperties_currentInterestingProp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeRegPropertiesForNewFeatures:currentRegProperties:currentInterestingProp:");
}

id objc_msgSend__configurePrimaryServiceSessionWithAccount_service_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configurePrimaryServiceSessionWithAccount:service:");
}

id objc_msgSend__convergesDisplayNames(void *a1, const char *a2, ...)
{
  return _[a1 _convergesDisplayNames];
}

id objc_msgSend__copyGenmojiHEICFileToTemporaryDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyGenmojiHEICFileToTemporaryDirectory:");
}

id objc_msgSend__copyiMessageDictionaryForLogging(void *a1, const char *a2, ...)
{
  return _[a1 _copyiMessageDictionaryForLogging];
}

id objc_msgSend__createApplicationDataForDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createApplicationDataForDestinations:");
}

id objc_msgSend__createEngramGroupForChat_fromID_service_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createEngramGroupForChat:fromID:service:completion:");
}

id objc_msgSend__createGroupForExistingChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createGroupForExistingChat:");
}

id objc_msgSend__createParticipantsAndUpdateGroup_addParticipantsURIs_removeParticipantURIs_fromID_service_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createParticipantsAndUpdateGroup:addParticipantsURIs:removeParticipantURIs:fromID:service:completion:");
}

id objc_msgSend__createPayloadRequestDictionaryForMessageGUID_requestKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createPayloadRequestDictionaryForMessageGUID:requestKey:");
}

id objc_msgSend__createPayloadResponseDictionaryWithDictionary_payloadData_attachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createPayloadResponseDictionaryWithDictionary:payloadData:attachments:");
}

id objc_msgSend__currentCachedRemoteDevicesForDestinations_service_listenerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentCachedRemoteDevicesForDestinations:service:listenerID:");
}

id objc_msgSend__dataForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dataForKey:");
}

id objc_msgSend__daysToWaitBeforeCreatingEngroup(void *a1, const char *a2, ...)
{
  return _[a1 _daysToWaitBeforeCreatingEngroup];
}

id objc_msgSend__deleteTransferInfoForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteTransferInfoForKey:");
}

id objc_msgSend__deliverMessage_withContext_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deliverMessage:withContext:withBlock:");
}

id objc_msgSend__dictionaryForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dictionaryForKey:");
}

id objc_msgSend__dictionaryToSend(void *a1, const char *a2, ...)
{
  return _[a1 _dictionaryToSend];
}

id objc_msgSend__didSendMessage_withContext_forceDate_fromStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didSendMessage:withContext:forceDate:fromStorage:");
}

id objc_msgSend__downloadRestrictionForUTIType_fileSize_qualityType_isSticker_forceAutoDownloadIfPossible_lqmEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_downloadRestrictionForUTIType:fileSize:qualityType:isSticker:forceAutoDownloadIfPossible:lqmEnabled:");
}

id objc_msgSend__downloadRestrictionForUTIType_fileSize_qualityType_isSticker_lqmEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_downloadRestrictionForUTIType:fileSize:qualityType:isSticker:lqmEnabled:");
}

id objc_msgSend__enableStrictSecureDecodingMode(void *a1, const char *a2, ...)
{
  return _[a1 _enableStrictSecureDecodingMode];
}

id objc_msgSend__engroupForChat_idsAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_engroupForChat:idsAccount:completion:");
}

id objc_msgSend__enparticipantsForDestinations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enparticipantsForDestinations:completion:");
}

id objc_msgSend__enqueueBlock_withTimeout_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueBlock:withTimeout:description:");
}

id objc_msgSend__enqueueSendMessageWorkBlock_forURIs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueSendMessageWorkBlock:forURIs:");
}

id objc_msgSend__enqueueUpdateBlock_willSendBlock_identifier_callbackID_messageCommandOption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueUpdateBlock:willSendBlock:identifier:callbackID:messageCommandOption:");
}

id objc_msgSend__failSendingMessageIfNeeded_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_failSendingMessageIfNeeded:withContext:");
}

id objc_msgSend__failuresForID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_failuresForID:");
}

id objc_msgSend__fallbackMessageItemFromLinkMetadata_originalMessageItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fallbackMessageItemFromLinkMetadata:originalMessageItem:");
}

id objc_msgSend__fallbackMesssageItemByConvertingGenmojiToUnknownEmojiCharacterInOriginalMessageItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fallbackMesssageItemByConvertingGenmojiToUnknownEmojiCharacterInOriginalMessageItem:");
}

id objc_msgSend__fileHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileHash:");
}

id objc_msgSend__fileTransferGUIDsInMessageBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileTransferGUIDsInMessageBody:");
}

id objc_msgSend__findChatFromIdentifier_toIdentifier_displayName_participants_groupID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findChatFromIdentifier:toIdentifier:displayName:participants:groupID:");
}

id objc_msgSend__firstiMessageChat(void *a1, const char *a2, ...)
{
  return _[a1 _firstiMessageChat];
}

id objc_msgSend__fixParticipantsForChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fixParticipantsForChat:");
}

id objc_msgSend__flushQueuedMessageWrapperBlocks(void *a1, const char *a2, ...)
{
  return _[a1 _flushQueuedMessageWrapperBlocks];
}

id objc_msgSend__forwardP2PGroupCommand_fromPerson_toPerson_toGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forwardP2PGroupCommand:fromPerson:toPerson:toGroup:");
}

id objc_msgSend__forwardP2PGroupCommand_fromPerson_toPerson_toGroup_toToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forwardP2PGroupCommand:fromPerson:toPerson:toGroup:toToken:");
}

id objc_msgSend__forwardP2PGroupCommand_fromPerson_toPerson_toGroup_toToken_messageID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forwardP2PGroupCommand:fromPerson:toPerson:toGroup:toToken:messageID:");
}

id objc_msgSend__generateAndStoreGroupActionItemForChat_sender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateAndStoreGroupActionItemForChat:sender:");
}

id objc_msgSend__getQueueIdentifierFromGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getQueueIdentifierFromGUID:");
}

id objc_msgSend__groupPhotoRequestRateLimit(void *a1, const char *a2, ...)
{
  return _[a1 _groupPhotoRequestRateLimit];
}

id objc_msgSend__handleDeleteCommandWithMessageDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDeleteCommandWithMessageDictionary:");
}

id objc_msgSend__handleDeliveryFailureForMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDeliveryFailureForMessage:withContext:");
}

id objc_msgSend__handleDeviceRegistrationForMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDeviceRegistrationForMessage:withContext:");
}

id objc_msgSend__handleFileTransfer_acceptedWithPath_autoRename_overwrite_options_postNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleFileTransfer:acceptedWithPath:autoRename:overwrite:options:postNotification:");
}

id objc_msgSend__handleGroupVisualIdentityRequest_fromParticipants_groupID_identifier_session_toIdentifier_fromToken_requestGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleGroupVisualIdentityRequest:fromParticipants:groupID:identifier:session:toIdentifier:fromToken:requestGUID:");
}

id objc_msgSend__handleIDsForDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleIDsForDestinations:");
}

id objc_msgSend__handleIsMeToMeForMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleIsMeToMeForMessage:withContext:");
}

id objc_msgSend__handleMessageSentToSelf_chatIdentifier_style_isLocal_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMessageSentToSelf:chatIdentifier:style:isLocal:account:");
}

id objc_msgSend__handleMessageSentToSelf_withContext_isLocal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMessageSentToSelf:withContext:isLocal:");
}

id objc_msgSend__handleNicknameReceived_fromIdentifier_withMessageItem_isSnapTrustedUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNicknameReceived:fromIdentifier:withMessageItem:isSnapTrustedUser:");
}

id objc_msgSend__handleScheduledMessageSendFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleScheduledMessageSendFailure:");
}

id objc_msgSend__handleTypingIndicatorMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTypingIndicatorMessage:withContext:");
}

id objc_msgSend__handleUpdateNotificationTimeManagerForMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUpdateNotificationTimeManagerForMessage:withContext:");
}

id objc_msgSend__hasRecentlyMessaged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasRecentlyMessaged:");
}

id objc_msgSend__hasValidSendParametersForMessage_toChat_fromID_fromAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasValidSendParametersForMessage:toChat:fromID:fromAccount:");
}

id objc_msgSend__incrementDecryptionFailureForID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_incrementDecryptionFailureForID:");
}

id objc_msgSend__initiateTelephonyConversationForMessage_chatIdentifier_chatStyle_onSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initiateTelephonyConversationForMessage:chatIdentifier:chatStyle:onSession:");
}

id objc_msgSend__isAllowlistedUnencryptedSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isAllowlistedUnencryptedSender:");
}

id objc_msgSend__isDeviceRegisteredForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isDeviceRegisteredForAccount:");
}

id objc_msgSend__isFromLinkedID_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isFromLinkedID:fromID:");
}

id objc_msgSend__isRegisteredURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isRegisteredURI:");
}

id objc_msgSend__keyTransparencyEnforcementDictionaryForChatIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyTransparencyEnforcementDictionaryForChatIdentifier:");
}

id objc_msgSend__lastAddressedURIForChatLogMetricIfNeededOnChat_withIDSAccount_withServiceSession_shouldLog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lastAddressedURIForChatLogMetricIfNeededOnChat:withIDSAccount:withServiceSession:shouldLog:");
}

id objc_msgSend__localizedBackwardsCompatibleExpressiveSendText(void *a1, const char *a2, ...)
{
  return _[a1 _localizedBackwardsCompatibleExpressiveSendText];
}

id objc_msgSend__logCompletedMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_logCompletedMessage:withContext:");
}

id objc_msgSend__logLocalInfo(void *a1, const char *a2, ...)
{
  return _[a1 _logLocalInfo];
}

id objc_msgSend__maxCompressedPayloadDataLength(void *a1, const char *a2, ...)
{
  return _[a1 _maxCompressedPayloadDataLength];
}

id objc_msgSend__maxFailuresAllowed(void *a1, const char *a2, ...)
{
  return _[a1 _maxFailuresAllowed];
}

id objc_msgSend__messageDictionaryForDeleteCommandShouldResetPreference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_messageDictionaryForDeleteCommandShouldResetPreference:");
}

id objc_msgSend__messageDictionaryToReflectWithDeliveryReceipt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_messageDictionaryToReflectWithDeliveryReceipt:");
}

id objc_msgSend__messageItemToConsumeForNewBreadcrumbMessage_outBreadcrumbItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_messageItemToConsumeForNewBreadcrumbMessage:outBreadcrumbItems:");
}

id objc_msgSend__messageRetryTimeout(void *a1, const char *a2, ...)
{
  return _[a1 _messageRetryTimeout];
}

id objc_msgSend__newSendContextForMessage_withChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newSendContextForMessage:withChat:");
}

id objc_msgSend__nicknameFeatureEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _nicknameFeatureEnabled];
}

id objc_msgSend__nonAdaptiveFileTransferForAdaptiveImageFileTransfer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nonAdaptiveFileTransferForAdaptiveImageFileTransfer:");
}

id objc_msgSend__notifyDidSendMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyDidSendMessage:withContext:");
}

id objc_msgSend__notifyNameAndPhotoControllerOfMessage_onChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyNameAndPhotoControllerOfMessage:onChat:");
}

id objc_msgSend__notifyOfSendMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyOfSendMessage:withContext:");
}

id objc_msgSend__numberForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_numberForKey:");
}

id objc_msgSend__numberOfOffGridCapableDevicesForDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_numberOfOffGridCapableDevicesForDestination:");
}

id objc_msgSend__originalTimestampWithinAcceptableWindow_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_originalTimestampWithinAcceptableWindow:timestamp:");
}

id objc_msgSend__participantsContainBizID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_participantsContainBizID:");
}

id objc_msgSend__populateP2PDictionary_chat_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateP2PDictionary:chat:fromID:");
}

id objc_msgSend__populateP2PDictionary_chat_omitName_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateP2PDictionary:chat:omitName:fromID:");
}

id objc_msgSend__previewAttachmentEnabledForStickers(void *a1, const char *a2, ...)
{
  return _[a1 _previewAttachmentEnabledForStickers];
}

id objc_msgSend__primeServerBags(void *a1, const char *a2, ...)
{
  return _[a1 _primeServerBags];
}

id objc_msgSend__processDownloadedPayload_forMessageGUID_balloonBundleID_fromIdentifier_senderToken_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processDownloadedPayload:forMessageGUID:balloonBundleID:fromIdentifier:senderToken:withCompletionBlock:");
}

id objc_msgSend__processMessageForSending_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processMessageForSending:withContext:");
}

id objc_msgSend__processMessageForSendingToGroupIfNeeded_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processMessageForSendingToGroupIfNeeded:withContext:");
}

id objc_msgSend__processMessagesForRelayIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _processMessagesForRelayIfNeeded];
}

id objc_msgSend__propertyForExpressiveSendStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_propertyForExpressiveSendStyle:");
}

id objc_msgSend__pushHandlerForIDSAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pushHandlerForIDSAccount:");
}

id objc_msgSend__reAttemptMessageDeliveryForGUID_toIdentifier_fromIdentifier_fromIDSID_isReflection_shouldShowError_cacheFlushError_imdAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reAttemptMessageDeliveryForGUID:toIdentifier:fromIdentifier:fromIDSID:isReflection:shouldShowError:cacheFlushError:imdAccount:");
}

id objc_msgSend__receivingDevicesForHandle_skippedDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivingDevicesForHandle:skippedDestinations:");
}

id objc_msgSend__refreshGroupPhotoTTLIfNecessary_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshGroupPhotoTTLIfNecessary:withContext:");
}

id objc_msgSend__registerKeepMessagesSettingReflection(void *a1, const char *a2, ...)
{
  return _[a1 _registerKeepMessagesSettingReflection];
}

id objc_msgSend__registerReadReceiptSettingReflection(void *a1, const char *a2, ...)
{
  return _[a1 _registerReadReceiptSettingReflection];
}

id objc_msgSend__relayLegacySatelliteMessage_toChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_relayLegacySatelliteMessage:toChat:");
}

id objc_msgSend__replicationEditDelay(void *a1, const char *a2, ...)
{
  return _[a1 _replicationEditDelay];
}

id objc_msgSend__replicationSourceIDForSending(void *a1, const char *a2, ...)
{
  return _[a1 _replicationSourceIDForSending];
}

id objc_msgSend__requestGroupPhotoUpdate_fromIdentifier_toIdentifier_session_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestGroupPhotoUpdate:fromIdentifier:toIdentifier:session:");
}

id objc_msgSend__richLinkDelayTimeInterval(void *a1, const char *a2, ...)
{
  return _[a1 _richLinkDelayTimeInterval];
}

id objc_msgSend__richLinkPendSendingWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_richLinkPendSendingWithGUID:");
}

id objc_msgSend__sendAttachmentToPeerDevice_fileTransferGUID_messageGuid_fileURL_useLocalPeersFileAPI_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendAttachmentToPeerDevice:fileTransferGUID:messageGuid:fileURL:useLocalPeersFileAPI:error:");
}

id objc_msgSend__sendAttachmentsForMessage_canSendInline_displayIDs_additionalContext_fromID_recipients_uploadStartTime_fromAccount_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendAttachmentsForMessage:canSendInline:displayIDs:additionalContext:fromID:recipients:uploadStartTime:fromAccount:completionBlock:");
}

id objc_msgSend__sendBackwardCompatibilityMessageForEditedMessage_usingMessageGUID_toBackwardCompatabilityDestinations_withOriginalDestinations_chatIdentifier_fromAccount_fromID_backwardCompatabilityText_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendBackwardCompatibilityMessageForEditedMessage:usingMessageGUID:toBackwardCompatabilityDestinations:withOriginalDestinations:chatIdentifier:fromAccount:fromID:backwardCompatabilityText:completionBlock:");
}

id objc_msgSend__sendCertifiedDeliveryReceiptIfPossible_messageContext_guid_messageWasStored_needsDeliveryReceipt_failureReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendCertifiedDeliveryReceiptIfPossible:messageContext:guid:messageWasStored:needsDeliveryReceipt:failureReason:");
}

id objc_msgSend__sendFTMessage_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendFTMessage:withCompletionBlock:");
}

id objc_msgSend__sendGroupPhoto_toIdentifier_fromIdentifier_toToken_session_requestGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendGroupPhoto:toIdentifier:fromIdentifier:toToken:session:requestGUID:");
}

id objc_msgSend__sendIDSMessageWithTransferGUID_andTransfer_fromAccount_fromID_toRecipient_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendIDSMessageWithTransferGUID:andTransfer:fromAccount:fromID:toRecipient:withCompletion:");
}

id objc_msgSend__sendMessage_context_deliveryContext_fromID_fromAccount_toID_chatIdentifier_toSessionToken_toGroup_toParticipants_originallyToParticipants_requiredRegProperties_interestingRegProperties_requiresLackOfRegProperties_canInlineAttachments_type_msgPayloadUploadDictionary_originalPayload_replyToMessageGUID_willSendBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendMessage:context:deliveryContext:fromID:fromAccount:toID:chatIdentifier:toSessionToken:toGroup:toParticipants:originallyToParticipants:requiredRegProperties:interestingRegProperties:requiresLackOfRegProperties:canInlineAttachments:type:msgPayloadUploadDictionary:originalPayload:replyToMessageGUID:willSendBlock:completionBlock:");
}

id objc_msgSend__sendNicknameToRecipientsIfNeededForChat_forMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendNicknameToRecipientsIfNeededForChat:forMessage:");
}

id objc_msgSend__sendSyndicationAction_toChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendSyndicationAction:toChat:");
}

id objc_msgSend__sendURL_urlToRemove_topic_sessionInfo_messageGUID_transferID_fileTransferGUID_attachmentSendContexts_failIfError_sendStatus_attachmentStatus_group_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendURL:urlToRemove:topic:sessionInfo:messageGUID:transferID:fileTransferGUID:attachmentSendContexts:failIfError:sendStatus:attachmentStatus:group:");
}

id objc_msgSend__service_account_incomingTopLevelMessage_fromID_messageContext_isBeingReplayed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_service:account:incomingTopLevelMessage:fromID:messageContext:isBeingReplayed:");
}

id objc_msgSend__setCallerIDOnMessage_onChat_withIDSAccount_withServiceSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCallerIDOnMessage:onChat:withIDSAccount:withServiceSession:");
}

id objc_msgSend__setExpectedOffGridDeliveriesForMessage_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setExpectedOffGridDeliveriesForMessage:context:");
}

id objc_msgSend__setLocalPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLocalPath:");
}

id objc_msgSend__setLocalURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLocalURL:");
}

id objc_msgSend__setMessageID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setMessageID:");
}

id objc_msgSend__setNeedsWrapper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNeedsWrapper:");
}

id objc_msgSend__setReplyToGUIDForMessage_messageDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setReplyToGUIDForMessage:messageDictionary:");
}

id objc_msgSend__setTransferInfo_key_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setTransferInfo:key:");
}

id objc_msgSend__setWeeklyFailureResetTimer(void *a1, const char *a2, ...)
{
  return _[a1 _setWeeklyFailureResetTimer];
}

id objc_msgSend__setupPushHandlerWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupPushHandlerWithAccount:");
}

id objc_msgSend__shouldAdjustTimestampOfResentMessages(void *a1, const char *a2, ...)
{
  return _[a1 _shouldAdjustTimestampOfResentMessages];
}

id objc_msgSend__shouldBlackholeChatFromSender_toRecipient_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldBlackholeChatFromSender:toRecipient:forAccount:");
}

id objc_msgSend__shouldBlackholeGroupChatFromSender_toRecipient_withOtherParticipants_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldBlackholeGroupChatFromSender:toRecipient:withOtherParticipants:forAccount:");
}

id objc_msgSend__shouldDisableFasterDownload_message_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldDisableFasterDownload:message:");
}

id objc_msgSend__shouldDropMessageGroupID_participants_fromIdentifier_toIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldDropMessageGroupID:participants:fromIdentifier:toIdentifier:");
}

id objc_msgSend__shouldIgnoreMessageFromSender_balloonBID_fromMe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldIgnoreMessageFromSender:balloonBID:fromMe:");
}

id objc_msgSend__shouldImmediatelySendAckForMessage_command_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldImmediatelySendAckForMessage:command:");
}

id objc_msgSend__shouldInitiateTelephonyConversationForMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldInitiateTelephonyConversationForMessage:");
}

id objc_msgSend__shouldOptimizedDeliveryReceiptForConversation_withMessageTimeStamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldOptimizedDeliveryReceiptForConversation:withMessageTimeStamp:");
}

id objc_msgSend__shouldOverrideTypingIndicator(void *a1, const char *a2, ...)
{
  return _[a1 _shouldOverrideTypingIndicator];
}

id objc_msgSend__shouldRequestGroupPhoto_incomingParticipantVersion_incomingGroupPhotoCreationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldRequestGroupPhoto:incomingParticipantVersion:incomingGroupPhotoCreationDate:");
}

id objc_msgSend__shouldSendAppTypingIndicator(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSendAppTypingIndicator];
}

id objc_msgSend__shouldSendAuxXML_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldSendAuxXML:");
}

id objc_msgSend__shouldSendEngramOnChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldSendEngramOnChat:");
}

id objc_msgSend__shouldUploadPayloadDataOverMMCS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldUploadPayloadDataOverMMCS:");
}

id objc_msgSend__startTimingMessageSend(void *a1, const char *a2, ...)
{
  return _[a1 _startTimingMessageSend];
}

id objc_msgSend__stickerUploadTTL(void *a1, const char *a2, ...)
{
  return _[a1 _stickerUploadTTL];
}

id objc_msgSend__stopTimingMessageSend(void *a1, const char *a2, ...)
{
  return _[a1 _stopTimingMessageSend];
}

id objc_msgSend__storeSentMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeSentMessage:withContext:");
}

id objc_msgSend__stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForKey:");
}

id objc_msgSend__stripFZIDPrefix(void *a1, const char *a2, ...)
{
  return _[a1 _stripFZIDPrefix];
}

id objc_msgSend__stripPotentialTokenURIWithToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stripPotentialTokenURIWithToken:");
}

id objc_msgSend__threadOriginatorFallbackHashForMessageItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_threadOriginatorFallbackHashForMessageItem:");
}

id objc_msgSend__transcodeURL_reason_transfer_sizes_commonCapabilities_sendStatus_urlGroup_didTranscode_handleURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transcodeURL:reason:transfer:sizes:commonCapabilities:sendStatus:urlGroup:didTranscode:handleURL:");
}

id objc_msgSend__transferInfoFileForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transferInfoFileForKey:");
}

id objc_msgSend__transferInfoForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transferInfoForKey:");
}

id objc_msgSend__transferIsUserGeneratedOrEmojiSticker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transferIsUserGeneratedOrEmojiSticker:");
}

id objc_msgSend__updateBlackholeStatusIfNeededWithMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBlackholeStatusIfNeededWithMessage:withContext:");
}

id objc_msgSend__updateChatProperties_withProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateChatProperties:withProperties:");
}

id objc_msgSend__updateExpireStateTimerWithInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateExpireStateTimerWithInterval:");
}

id objc_msgSend__updateGlobalReadReceiptValue_withVersionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateGlobalReadReceiptValue:withVersionID:");
}

id objc_msgSend__updateGroupWithParticipants_chat_service_participants_destinations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateGroupWithParticipants:chat:service:participants:destinations:completion:");
}

id objc_msgSend__updateLastDeviceActivityForCloudKit(void *a1, const char *a2, ...)
{
  return _[a1 _updateLastDeviceActivityForCloudKit];
}

id objc_msgSend__updateLocalParticipantsFromEngroup_chat_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLocalParticipantsFromEngroup:chat:fromID:");
}

id objc_msgSend__updateNetworkOverride(void *a1, const char *a2, ...)
{
  return _[a1 _updateNetworkOverride];
}

id objc_msgSend__updateOffGridStatusIfNeededWithMessage_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOffGridStatusIfNeededWithMessage:context:");
}

id objc_msgSend__updateOrRemoveGroupPhotoForChat_sender_completedTransfer_isHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOrRemoveGroupPhotoForChat:sender:completedTransfer:isHidden:");
}

id objc_msgSend__updateReadReceiptProperties_withIncomingProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateReadReceiptProperties:withIncomingProperties:");
}

id objc_msgSend__updateRoutingTimerWithInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRoutingTimerWithInterval:");
}

id objc_msgSend__updateStoredBreadcrumbIfNeeded_onChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStoredBreadcrumbIfNeeded:onChat:");
}

id objc_msgSend__updateSuccessfulEditsForScheduledMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSuccessfulEditsForScheduledMessage:");
}

id objc_msgSend__updateSuccessfulRetractionsForScheduledMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSuccessfulRetractionsForScheduledMessage:");
}

id objc_msgSend__updateTimeStampForMessageIdentifierIfNeeded_pendingTimeStampUpdateIdentifier_alternateCallbackID_messageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTimeStampForMessageIdentifierIfNeeded:pendingTimeStampUpdateIdentifier:alternateCallbackID:messageContext:");
}

id objc_msgSend__updateTransfersForAttributionInfoArray_message_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTransfersForAttributionInfoArray:message:");
}

id objc_msgSend__updateWithDictionaryRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithDictionaryRepresentation:");
}

id objc_msgSend__updateWithDictionaryRepresentationForWhitelistedKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithDictionaryRepresentationForWhitelistedKeys:");
}

id objc_msgSend__validateIDSAccount(void *a1, const char *a2, ...)
{
  return _[a1 _validateIDSAccount];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_acceptTransfer_path_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptTransfer:path:");
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _[a1 account];
}

id objc_msgSend_account_capabilitiesChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account:capabilitiesChanged:");
}

id objc_msgSend_account_chat_style_chatProperties_groupID_chatPersonCentricID_messageReceived_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account:chat:style:chatProperties:groupID:chatPersonCentricID:messageReceived:");
}

id objc_msgSend_account_chat_style_chatProperties_groupID_chatPersonCentricID_messageSent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account:chat:style:chatProperties:groupID:chatPersonCentricID:messageSent:");
}

id objc_msgSend_account_chat_style_chatProperties_messageUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account:chat:style:chatProperties:messageUpdated:");
}

id objc_msgSend_account_chat_style_chatProperties_messagesUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account:chat:style:chatProperties:messagesUpdated:");
}

id objc_msgSend_accountID(void *a1, const char *a2, ...)
{
  return _[a1 accountID];
}

id objc_msgSend_accountType(void *a1, const char *a2, ...)
{
  return _[a1 accountType];
}

id objc_msgSend_accountUniqueID(void *a1, const char *a2, ...)
{
  return _[a1 accountUniqueID];
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _[a1 accounts];
}

id objc_msgSend_accountsForService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsForService:");
}

id objc_msgSend_acquireAssertionToUnsuspendProcess(void *a1, const char *a2, ...)
{
  return _[a1 acquireAssertionToUnsuspendProcess];
}

id objc_msgSend_activeAccountsAreEligibleForHawking(void *a1, const char *a2, ...)
{
  return _[a1 activeAccountsAreEligibleForHawking];
}

id objc_msgSend_activeAccountsForService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeAccountsForService:");
}

id objc_msgSend_activeDeviceForHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeDeviceForHandle:");
}

id objc_msgSend_adaptiveImageGlyphContentDescription(void *a1, const char *a2, ...)
{
  return _[a1 adaptiveImageGlyphContentDescription];
}

id objc_msgSend_adaptiveImageGlyphContentIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 adaptiveImageGlyphContentIdentifier];
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribute:value:range:");
}

id objc_msgSend_addBIAContextWithUserID_referenceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBIAContextWithUserID:referenceID:");
}

id objc_msgSend_addBlock_withTimeout_forKey_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBlock:withTimeout:forKey:description:");
}

id objc_msgSend_addDefaultGatekeeperPropertiesToDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDefaultGatekeeperPropertiesToDirectory:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addFailedRetractPartIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFailedRetractPartIndex:");
}

id objc_msgSend_addGroupContextToSendMessageDictionary_callerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGroupContextToSendMessageDictionary:callerID:");
}

id objc_msgSend_addItem_toChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addItem:toChat:");
}

id objc_msgSend_addItemToRecentsIfApplicable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addItemToRecentsIfApplicable:");
}

id objc_msgSend_addListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addListener:");
}

id objc_msgSend_addLocalLockdownCommandHandlersToRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLocalLockdownCommandHandlersToRegistry:");
}

id objc_msgSend_addLocalStandardCommandHandlersToRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLocalStandardCommandHandlersToRegistry:");
}

id objc_msgSend_addLockdownCommandHandlersToRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLockdownCommandHandlersToRegistry:");
}

id objc_msgSend_addMembers_toHandleInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMembers:toHandleInfo:");
}

id objc_msgSend_addMessageWithGUID_toChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMessageWithGUID:toChat:");
}

id objc_msgSend_addMessagesID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMessagesID:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addParametersToSendMessageDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addParametersToSendMessageDictionary:");
}

id objc_msgSend_addParticipants_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addParticipants:");
}

id objc_msgSend_addParticipants_toChat_fromID_fromAccount_session_service_groupPhoto_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addParticipants:toChat:fromID:fromAccount:session:service:groupPhoto:completionBlock:");
}

id objc_msgSend_addParticipantsToENGroup_chat_service_fromID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addParticipantsToENGroup:chat:service:fromID:completion:");
}

id objc_msgSend_addRecentItemWithData_GUID_infoDictionary_forDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecentItemWithData:GUID:infoDictionary:forDomain:");
}

id objc_msgSend_addStandardCommandHandlersToRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStandardCommandHandlersToRegistry:");
}

id objc_msgSend_addTransfer_forGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTransfer:forGUID:");
}

id objc_msgSend_additionalErrorInfo(void *a1, const char *a2, ...)
{
  return _[a1 additionalErrorInfo];
}

id objc_msgSend_additionalPayload(void *a1, const char *a2, ...)
{
  return _[a1 additionalPayload];
}

id objc_msgSend_allExistingChatsWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allExistingChatsWithIdentifier:");
}

id objc_msgSend_allExistingChatsWithIdentifier_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allExistingChatsWithIdentifier:style:");
}

id objc_msgSend_allExistingSupportedServiceChatsWithIdentifier_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allExistingSupportedServiceChatsWithIdentifier:style:");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allowAnyNetwork(void *a1, const char *a2, ...)
{
  return _[a1 allowAnyNetwork];
}

id objc_msgSend_allowDownload(void *a1, const char *a2, ...)
{
  return _[a1 allowDownload];
}

id objc_msgSend_anonymizedSenderID(void *a1, const char *a2, ...)
{
  return _[a1 anonymizedSenderID];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_appMessageFallbackImage(void *a1, const char *a2, ...)
{
  return _[a1 appMessageFallbackImage];
}

id objc_msgSend_appNameAndBundleIDFoURL_outAppName_outBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appNameAndBundleIDFoURL:outAppName:outBundleID:");
}

id objc_msgSend_appendAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAttributedString:");
}

id objc_msgSend_appendChatRelatedPropertiesToMessageDictionary_forMessage_chatIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendChatRelatedPropertiesToMessageDictionary:forMessage:chatIdentifier:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendInlineImageWithGUID_filename_width_height_isAnimoji_isAdaptiveImageGlyph_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendInlineImageWithGUID:filename:width:height:isAnimoji:isAdaptiveImageGlyph:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applicationDataDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationDataDictionary:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayByApplyingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByApplyingSelector:");
}

id objc_msgSend_arrayByExcludingObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByExcludingObjectsInArray:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assignTransfer_toAccount_otherPerson_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assignTransfer:toAccount:otherPerson:");
}

id objc_msgSend_associatedMessageEmoji(void *a1, const char *a2, ...)
{
  return _[a1 associatedMessageEmoji];
}

id objc_msgSend_associatedMessageGUID(void *a1, const char *a2, ...)
{
  return _[a1 associatedMessageGUID];
}

id objc_msgSend_associatedMessageRange(void *a1, const char *a2, ...)
{
  return _[a1 associatedMessageRange];
}

id objc_msgSend_associatedMessageType(void *a1, const char *a2, ...)
{
  return _[a1 associatedMessageType];
}

id objc_msgSend_attachToTransfer_message_commonCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachToTransfer:message:commonCapabilities:");
}

id objc_msgSend_attachmentController(void *a1, const char *a2, ...)
{
  return _[a1 attachmentController];
}

id objc_msgSend_attachmentRefreshDeliveryController(void *a1, const char *a2, ...)
{
  return _[a1 attachmentRefreshDeliveryController];
}

id objc_msgSend_attachmentSendContexts(void *a1, const char *a2, ...)
{
  return _[a1 attachmentSendContexts];
}

id objc_msgSend_attachmentStatus(void *a1, const char *a2, ...)
{
  return _[a1 attachmentStatus];
}

id objc_msgSend_attachmentWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentWithGUID:");
}

id objc_msgSend_attribute_atIndex_effectiveRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attribute:atIndex:effectiveRange:");
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_attributionInfo(void *a1, const char *a2, ...)
{
  return _[a1 attributionInfo];
}

id objc_msgSend_authURL(void *a1, const char *a2, ...)
{
  return _[a1 authURL];
}

id objc_msgSend_backwardsCompatibleVersion(void *a1, const char *a2, ...)
{
  return _[a1 backwardsCompatibleVersion];
}

id objc_msgSend_balloonBundleID(void *a1, const char *a2, ...)
{
  return _[a1 balloonBundleID];
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_biaReferenceID(void *a1, const char *a2, ...)
{
  return _[a1 biaReferenceID];
}

id objc_msgSend_bizIDSAccountFromMadridIDSAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bizIDSAccountFromMadridIDSAccount:");
}

id objc_msgSend_bizIntent(void *a1, const char *a2, ...)
{
  return _[a1 bizIntent];
}

id objc_msgSend_block(void *a1, const char *a2, ...)
{
  return _[a1 block];
}

id objc_msgSend_body(void *a1, const char *a2, ...)
{
  return _[a1 body];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_BOOLValueForKey_withDefault_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValueForKey:withDefault:");
}

id objc_msgSend_breadcrumbText(void *a1, const char *a2, ...)
{
  return _[a1 breadcrumbText];
}

id objc_msgSend_broadcaster(void *a1, const char *a2, ...)
{
  return _[a1 broadcaster];
}

id objc_msgSend_broadcasterForChatListeners(void *a1, const char *a2, ...)
{
  return _[a1 broadcasterForChatListeners];
}

id objc_msgSend_broadcasterForChatListenersUsingBlackholeRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "broadcasterForChatListenersUsingBlackholeRegistry:");
}

id objc_msgSend_broadcasterForChatListenersWithBlackholeStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "broadcasterForChatListenersWithBlackholeStatus:");
}

id objc_msgSend_broadcasterForKeyTransparencyListeners(void *a1, const char *a2, ...)
{
  return _[a1 broadcasterForKeyTransparencyListeners];
}

id objc_msgSend_businessChatContext(void *a1, const char *a2, ...)
{
  return _[a1 businessChatContext];
}

id objc_msgSend_businessChatContextWithServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "businessChatContextWithServiceName:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cachedAvailabilityTokensForHandleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedAvailabilityTokensForHandleID:");
}

id objc_msgSend_cachedAvailabilityVerificationTokensForHandleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedAvailabilityVerificationTokensForHandleID:");
}

id objc_msgSend_cachedOffGridMode(void *a1, const char *a2, ...)
{
  return _[a1 cachedOffGridMode];
}

id objc_msgSend_cachedOffGridModeAndLastPublisherWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedOffGridModeAndLastPublisherWithCompletion:");
}

id objc_msgSend_callerURIForIDSAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callerURIForIDSAccount:");
}

id objc_msgSend_callerURIForMessageServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callerURIForMessageServiceType:");
}

id objc_msgSend_callerURIUsingCalleeURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callerURIUsingCalleeURI:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelMessageWithOptions_destinations_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelMessageWithOptions:destinations:identifier:error:");
}

id objc_msgSend_cancelMessageWithOptions_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelMessageWithOptions:identifier:error:");
}

id objc_msgSend_cancelScheduledMessageWithGUID_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelScheduledMessageWithGUID:fromID:");
}

id objc_msgSend_cancelScheduledMessageWithGUID_fromID_destinations_cancelType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelScheduledMessageWithGUID:fromID:destinations:cancelType:");
}

id objc_msgSend_cancelSendTransferID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelSendTransferID:");
}

id objc_msgSend_canonicalizeChatIdentifier_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canonicalizeChatIdentifier:style:");
}

id objc_msgSend_capabilities(void *a1, const char *a2, ...)
{
  return _[a1 capabilities];
}

id objc_msgSend_certifiedDeliveryEnabled(void *a1, const char *a2, ...)
{
  return _[a1 certifiedDeliveryEnabled];
}

id objc_msgSend_chat(void *a1, const char *a2, ...)
{
  return _[a1 chat];
}

id objc_msgSend_chat_propertiesUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chat:propertiesUpdated:");
}

id objc_msgSend_chatForChatIdentifier_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chatForChatIdentifier:style:");
}

id objc_msgSend_chatForGroupMessagePayload_fromIdentifier_toIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chatForGroupMessagePayload:fromIdentifier:toIdentifier:");
}

id objc_msgSend_chatForMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chatForMessage:");
}

id objc_msgSend_chatForMessageGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chatForMessageGUID:");
}

id objc_msgSend_chatIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 chatIdentifier];
}

id objc_msgSend_chatProperties(void *a1, const char *a2, ...)
{
  return _[a1 chatProperties];
}

id objc_msgSend_chatRegistry(void *a1, const char *a2, ...)
{
  return _[a1 chatRegistry];
}

id objc_msgSend_chatStore(void *a1, const char *a2, ...)
{
  return _[a1 chatStore];
}

id objc_msgSend_chatWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chatWithGUID:");
}

id objc_msgSend_chats(void *a1, const char *a2, ...)
{
  return _[a1 chats];
}

id objc_msgSend_chatsGUIDsForMessageWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chatsGUIDsForMessageWithGUID:");
}

id objc_msgSend_checkExistingAttachmentSensitivityIfNeededFor_attachmentURL_isFromMe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkExistingAttachmentSensitivityIfNeededFor:attachmentURL:isFromMe:");
}

id objc_msgSend_ckUtilities(void *a1, const char *a2, ...)
{
  return _[a1 ckUtilities];
}

id objc_msgSend_cloudKitSyncingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitSyncingEnabled];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_collectMetricsForDownloadedFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectMetricsForDownloadedFile:");
}

id objc_msgSend_collectMetricsForLimitExceededWithReportedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectMetricsForLimitExceededWithReportedSize:");
}

id objc_msgSend_command(void *a1, const char *a2, ...)
{
  return _[a1 command];
}

id objc_msgSend_commandHandlerRegistry(void *a1, const char *a2, ...)
{
  return _[a1 commandHandlerRegistry];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_compare_withResult_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:withResult:error:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_compressFileTransfer_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compressFileTransfer:completionBlock:");
}

id objc_msgSend_conformsToType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToType:");
}

id objc_msgSend_consumedSessionPayloads(void *a1, const char *a2, ...)
{
  return _[a1 consumedSessionPayloads];
}

id objc_msgSend_contactsAvatarRecipeData(void *a1, const char *a2, ...)
{
  return _[a1 contactsAvatarRecipeData];
}

id objc_msgSend_containsActiveBIASession(void *a1, const char *a2, ...)
{
  return _[a1 containsActiveBIASession];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsObjectIdenticalTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObjectIdenticalTo:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_contextWithKnownSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextWithKnownSender:");
}

id objc_msgSend_contextWithKnownSender_serviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextWithKnownSender:serviceName:");
}

id objc_msgSend_convergeOnIncomingGroup_chat_service_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convergeOnIncomingGroup:chat:service:");
}

id objc_msgSend_conversationID(void *a1, const char *a2, ...)
{
  return _[a1 conversationID];
}

id objc_msgSend_coordinateReadingItemAtURL_options_error_byAccessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinateReadingItemAtURL:options:error:byAccessor:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyForBackwardsCompatibility(void *a1, const char *a2, ...)
{
  return _[a1 copyForBackwardsCompatibility];
}

id objc_msgSend_copyHandlersForEnumerating(void *a1, const char *a2, ...)
{
  return _[a1 copyHandlersForEnumerating];
}

id objc_msgSend_copyItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtPath:toPath:error:");
}

id objc_msgSend_copyWithFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithFlags:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return _[a1 countryCode];
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createEngramGroupOnMessageSend(void *a1, const char *a2, ...)
{
  return _[a1 createEngramGroupOnMessageSend];
}

id objc_msgSend_createGroupWithParticipants_sharedApplicationData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createGroupWithParticipants:sharedApplicationData:completion:");
}

id objc_msgSend_createNewOutgoingTransferWithLocalFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNewOutgoingTransferWithLocalFileURL:");
}

id objc_msgSend_ctSubscriptionInfo(void *a1, const char *a2, ...)
{
  return _[a1 ctSubscriptionInfo];
}

id objc_msgSend_currentMessageSendServerVersion(void *a1, const char *a2, ...)
{
  return _[a1 currentMessageSendServerVersion];
}

id objc_msgSend_currentRemoteDevicesForDestinations_service_listenerID_queue_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentRemoteDevicesForDestinations:service:listenerID:queue:completionBlock:");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataActiveAndReachable(void *a1, const char *a2, ...)
{
  return _[a1 dataActiveAndReachable];
}

id objc_msgSend_dataRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dataRepresentation];
}

id objc_msgSend_dataRepresentationWithOutOfLineAttachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataRepresentationWithOutOfLineAttachments:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:");
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:options:error:");
}

id objc_msgSend_dataWithMessageSummaryInfoDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithMessageSummaryInfoDictionary:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateEdited(void *a1, const char *a2, ...)
{
  return _[a1 dateEdited];
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_deactivateAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivateAccount:");
}

id objc_msgSend_deactivateAndPurgeIdentify(void *a1, const char *a2, ...)
{
  return _[a1 deactivateAndPurgeIdentify];
}

id objc_msgSend_decodeEncodedDataSecurely_ofClass_includesAllowlistedClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeEncodedDataSecurely:ofClass:includesAllowlistedClasses:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decodeiMessageAppPayload_senderContext_bundleID_completionBlock_blockUntilReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeiMessageAppPayload:senderContext:bundleID:completionBlock:blockUntilReply:");
}

id objc_msgSend_decrementPendingReadReceiptFromStorageCount(void *a1, const char *a2, ...)
{
  return _[a1 decrementPendingReadReceiptFromStorageCount];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultEmojiStickerPackID(void *a1, const char *a2, ...)
{
  return _[a1 defaultEmojiStickerPackID];
}

id objc_msgSend_defaultHFSFileManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultHFSFileManager];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteAttachmentWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAttachmentWithGUID:");
}

id objc_msgSend_deleteAttachmentsWithGUIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAttachmentsWithGUIDs:");
}

id objc_msgSend_deleteBIAContext(void *a1, const char *a2, ...)
{
  return _[a1 deleteBIAContext];
}

id objc_msgSend_deleteChatsForCommandDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteChatsForCommandDictionary:");
}

id objc_msgSend_deleteCommandDictionaryWithIncomingDictionary_inferredRecoverableDeleteForLegacyCommandsWithDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCommandDictionaryWithIncomingDictionary:inferredRecoverableDeleteForLegacyCommandsWithDate:");
}

id objc_msgSend_deleteMessagePartsForCommandDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteMessagePartsForCommandDictionary:");
}

id objc_msgSend_deleteMessagesForCommandDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteMessagesForCommandDictionary:");
}

id objc_msgSend_deleteMessagesWithChatIdentifiers_style_onServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteMessagesWithChatIdentifiers:style:onServices:");
}

id objc_msgSend_deliveryController(void *a1, const char *a2, ...)
{
  return _[a1 deliveryController];
}

id objc_msgSend_destinationCallerID(void *a1, const char *a2, ...)
{
  return _[a1 destinationCallerID];
}

id objc_msgSend_destinationWithAlias_pushToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationWithAlias:pushToken:");
}

id objc_msgSend_deviceSupportsSubscriptionValidationTokens(void *a1, const char *a2, ...)
{
  return _[a1 deviceSupportsSubscriptionValidationTokens];
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return _[a1 devices];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryValue(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryValue];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithMessageSummaryInfoData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithMessageSummaryInfoData:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didChangeMemberStatus_forHandle_fromHandle_unformattedNumber_countryCode_forChat_style_account_destinationCallerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChangeMemberStatus:forHandle:fromHandle:unformattedNumber:countryCode:forChat:style:account:destinationCallerID:");
}

id objc_msgSend_didJoinChat_style_displayName_groupID_handleInfo_account_isBlackholed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didJoinChat:style:displayName:groupID:handleInfo:account:isBlackholed:");
}

id objc_msgSend_didJoinChat_style_displayName_groupID_lastAddressedHandle_lastAddressedSIMID_handleInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didJoinChat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:");
}

id objc_msgSend_didLeaveChat_style_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didLeaveChat:style:account:");
}

id objc_msgSend_didReceiveBalloonPayload_forChat_style_messageGUID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveBalloonPayload:forChat:style:messageGUID:account:");
}

id objc_msgSend_didReceiveDisplayNameChange_fromID_toIdentifier_forChat_style_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveDisplayNameChange:fromID:toIdentifier:forChat:style:account:");
}

id objc_msgSend_didReceiveDisplayNameChange_guid_fromID_toIdentifier_forChat_style_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveDisplayNameChange:guid:fromID:toIdentifier:forChat:style:account:");
}

id objc_msgSend_didReceiveError_forMessageID_forceError_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveError:forMessageID:forceError:account:");
}

id objc_msgSend_didReceiveMessage_forChat_style_account_fromIDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessage:forChat:style:account:fromIDSID:");
}

id objc_msgSend_didReceiveMessageDeliveryReceiptForMessageID_date_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessageDeliveryReceiptForMessageID:date:account:");
}

id objc_msgSend_didReceiveMessageEditingSendFailure_forMessageGUID_partIndex_editType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessageEditingSendFailure:forMessageGUID:partIndex:editType:");
}

id objc_msgSend_didReceiveMessageEditingUnsupportedHandleIDs_forMessageGUID_partIndex_previousMessage_backwardCompatibilityMessageGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessageEditingUnsupportedHandleIDs:forMessageGUID:partIndex:previousMessage:backwardCompatibilityMessageGUID:");
}

id objc_msgSend_didReceiveMessagePlayedForMessageID_date_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessagePlayedForMessageID:date:completionBlock:");
}

id objc_msgSend_didReceiveMessagePlayedReceiptForMessageID_date_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessagePlayedReceiptForMessageID:date:completionBlock:");
}

id objc_msgSend_didReceiveMessageReadForMessageID_date_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessageReadForMessageID:date:completionBlock:");
}

id objc_msgSend_didReceiveMessageReadReceiptForMessageID_date_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessageReadReceiptForMessageID:date:completionBlock:");
}

id objc_msgSend_didReceiveMessageSavedForMessageID_ofType_forChat_fromHandle_fromMe_date_account_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:account:completionBlock:");
}

id objc_msgSend_didReceiveMessages_forChat_style_account_fromIDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessages:forChat:style:account:fromIDSID:");
}

id objc_msgSend_didReceiveOffGridStatus_forID_messageGUID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveOffGridStatus:forID:messageGUID:account:");
}

id objc_msgSend_didSendBalloonPayload_forChat_style_messageGUID_account_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendBalloonPayload:forChat:style:messageGUID:account:completionBlock:");
}

id objc_msgSend_didSendDeliveredQuietlyReceiptForMessageID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendDeliveredQuietlyReceiptForMessageID:account:");
}

id objc_msgSend_didSendMessage_forChat_style_account_forceDate_itemIsComingFromStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendMessage:forChat:style:account:forceDate:itemIsComingFromStorage:");
}

id objc_msgSend_didSendMessageEditForMessageGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendMessageEditForMessageGUID:");
}

id objc_msgSend_didSendMessagePlayedReceiptForMessageID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendMessagePlayedReceiptForMessageID:account:");
}

id objc_msgSend_didSendMessageReadReceiptForMessageID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendMessageReadReceiptForMessageID:account:");
}

id objc_msgSend_didSendMessageSavedReceiptForMessageID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendMessageSavedReceiptForMessageID:account:");
}

id objc_msgSend_didSendNotifyRecipientCommandForMessageID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendNotifyRecipientCommandForMessageID:account:");
}

id objc_msgSend_didSendSyndicationActionItem_forChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendSyndicationActionItem:forChat:");
}

id objc_msgSend_didUpdateChatStatus_chat_style_displayName_groupID_handleInfo_account_isBlackholed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateChatStatus:chat:style:displayName:groupID:handleInfo:account:isBlackholed:");
}

id objc_msgSend_displayIDs(void *a1, const char *a2, ...)
{
  return _[a1 displayIDs];
}

id objc_msgSend_displayName(void *a1, const char *a2, ...)
{
  return _[a1 displayName];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_doneRetrievingAttachmentsForGroupPhotoForChat_fileTransferError_success_transferGuid_sender_isHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doneRetrievingAttachmentsForGroupPhotoForChat:fileTransferError:success:transferGuid:sender:isHidden:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downloadPayloadDataForMessageGUID_payLoadDictionary_topic_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadPayloadDataForMessageGUID:payLoadDictionary:topic:completionBlock:");
}

id objc_msgSend_eagerUploadCancel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eagerUploadCancel:");
}

id objc_msgSend_eagerUploadKeyForURL_sizes_transcodeDictionary_capabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eagerUploadKeyForURL:sizes:transcodeDictionary:capabilities:");
}

id objc_msgSend_eagerUploadStatusForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eagerUploadStatusForKey:");
}

id objc_msgSend_eagerUploadTransfer_recipients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eagerUploadTransfer:recipients:");
}

id objc_msgSend_editedPartIndexes(void *a1, const char *a2, ...)
{
  return _[a1 editedPartIndexes];
}

id objc_msgSend_emergencyUserPersona(void *a1, const char *a2, ...)
{
  return _[a1 emergencyUserPersona];
}

id objc_msgSend_encodedMessagePartGUID(void *a1, const char *a2, ...)
{
  return _[a1 encodedMessagePartGUID];
}

id objc_msgSend_encryptionValidationToken(void *a1, const char *a2, ...)
{
  return _[a1 encryptionValidationToken];
}

id objc_msgSend_endTransfer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endTransfer:");
}

id objc_msgSend_engramControllerSharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 engramControllerSharedInstance];
}

id objc_msgSend_engramID(void *a1, const char *a2, ...)
{
  return _[a1 engramID];
}

id objc_msgSend_engroupCreationDate(void *a1, const char *a2, ...)
{
  return _[a1 engroupCreationDate];
}

id objc_msgSend_engroupForChat_service_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "engroupForChat:service:completionBlock:");
}

id objc_msgSend_engroupParticipantsUpdatedForChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "engroupParticipantsUpdatedForChat:");
}

id objc_msgSend_enumerateAttribute_inRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:");
}

id objc_msgSend_enumerateIndexesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateIndexesUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateMessagesToRelayOnService_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateMessagesToRelayOnService:usingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorCode(void *a1, const char *a2, ...)
{
  return _[a1 errorCode];
}

id objc_msgSend_errorFileSize(void *a1, const char *a2, ...)
{
  return _[a1 errorFileSize];
}

id objc_msgSend_errorURLString(void *a1, const char *a2, ...)
{
  return _[a1 errorURLString];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_evaluateAccountStateForFeatureEligibility(void *a1, const char *a2, ...)
{
  return _[a1 evaluateAccountStateForFeatureEligibility];
}

id objc_msgSend_existingChatForID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingChatForID:account:");
}

id objc_msgSend_existingChatForIDs_account_displayName_groupID_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingChatForIDs:account:displayName:groupID:style:");
}

id objc_msgSend_existingChatWithEngramID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingChatWithEngramID:");
}

id objc_msgSend_existingChatWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingChatWithGUID:");
}

id objc_msgSend_existingChatWithIdentifier_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingChatWithIdentifier:account:");
}

id objc_msgSend_existingChatsWithGroupID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingChatsWithGroupID:");
}

id objc_msgSend_existingSMSChatForID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingSMSChatForID:");
}

id objc_msgSend_existingSMSChatForID_withChatStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingSMSChatForID:withChatStyle:");
}

id objc_msgSend_existingiMessageChatForID_withChatStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingiMessageChatForID:withChatStyle:");
}

id objc_msgSend_existsAtLocalPath(void *a1, const char *a2, ...)
{
  return _[a1 existsAtLocalPath];
}

id objc_msgSend_expiration(void *a1, const char *a2, ...)
{
  return _[a1 expiration];
}

id objc_msgSend_expireState(void *a1, const char *a2, ...)
{
  return _[a1 expireState];
}

id objc_msgSend_expressiveSendStyleID(void *a1, const char *a2, ...)
{
  return _[a1 expressiveSendStyleID];
}

id objc_msgSend_failMessageSendWithMessageDictionary_URIs_error_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failMessageSendWithMessageDictionary:URIs:error:completionHandler:");
}

id objc_msgSend_failReason(void *a1, const char *a2, ...)
{
  return _[a1 failReason];
}

id objc_msgSend_failTransfer_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failTransfer:error:");
}

id objc_msgSend_failTransfer_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failTransfer:reason:");
}

id objc_msgSend_failed(void *a1, const char *a2, ...)
{
  return _[a1 failed];
}

id objc_msgSend_fallBackBizIDSAccount(void *a1, const char *a2, ...)
{
  return _[a1 fallBackBizIDSAccount];
}

id objc_msgSend_fallbackHash(void *a1, const char *a2, ...)
{
  return _[a1 fallbackHash];
}

id objc_msgSend_fetchLatestGroupWithStableID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLatestGroupWithStableID:completion:");
}

id objc_msgSend_fetchSizeLimitsForTransfer_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSizeLimitsForTransfer:mode:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileLength(void *a1, const char *a2, ...)
{
  return _[a1 fileLength];
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return _[a1 fileSize];
}

id objc_msgSend_fileTransferDictionaryForChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileTransferDictionaryForChat:");
}

id objc_msgSend_fileTransferGUIDs(void *a1, const char *a2, ...)
{
  return _[a1 fileTransferGUIDs];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_fileURLWithPathComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPathComponents:");
}

id objc_msgSend_filename(void *a1, const char *a2, ...)
{
  return _[a1 filename];
}

id objc_msgSend_findChatWithMessageData_account_session_toIdentifier_fromIdentifier_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findChatWithMessageData:account:session:toIdentifier:fromIdentifier:timestamp:");
}

id objc_msgSend_findCommonCapabilitiesAcrossRecipients_serviceName_capsToCheck_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findCommonCapabilitiesAcrossRecipients:serviceName:capsToCheck:completion:");
}

id objc_msgSend_findTranscoderCapabilitiesAcrossRecipients_forTransfers_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findTranscoderCapabilitiesAcrossRecipients:forTransfers:completion:");
}

id objc_msgSend_finish(void *a1, const char *a2, ...)
{
  return _[a1 finish];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return _[a1 flags];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_forceAutoBugCaptureWithSubType_errorPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceAutoBugCaptureWithSubType:errorPayload:");
}

id objc_msgSend_forceAutoBugCaptureWithSubType_errorPayload_type_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceAutoBugCaptureWithSubType:errorPayload:type:context:");
}

id objc_msgSend_forwardDeliveryReceiptForMessageID_withAccount_callerURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forwardDeliveryReceiptForMessageID:withAccount:callerURI:");
}

id objc_msgSend_freeSpaceInHomeDirectory(void *a1, const char *a2, ...)
{
  return _[a1 freeSpaceInHomeDirectory];
}

id objc_msgSend_fromID(void *a1, const char *a2, ...)
{
  return _[a1 fromID];
}

id objc_msgSend_fromMeContext(void *a1, const char *a2, ...)
{
  return _[a1 fromMeContext];
}

id objc_msgSend_fromMeContextWithServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fromMeContextWithServiceName:");
}

id objc_msgSend_fromMeToMe(void *a1, const char *a2, ...)
{
  return _[a1 fromMeToMe];
}

id objc_msgSend_fromURI(void *a1, const char *a2, ...)
{
  return _[a1 fromURI];
}

id objc_msgSend_generateAndStoreGroupPhotoChangeStatusItemForChat_sender_fileTransferGuid_isHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateAndStoreGroupPhotoChangeStatusItemForChat:sender:fileTransferGuid:isHidden:");
}

id objc_msgSend_generatePreviewForTransfer_messageItem_senderContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generatePreviewForTransfer:messageItem:senderContext:");
}

id objc_msgSend_generateSafeRender_constraints_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateSafeRender:constraints:completionBlock:");
}

id objc_msgSend_generateSnapshotForMessageGUID_payloadData_balloonBundleID_senderContext_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateSnapshotForMessageGUID:payloadData:balloonBundleID:senderContext:completionBlock:");
}

id objc_msgSend_generateSnapshotForMessageGUID_payloadURL_balloonBundleID_senderContext_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateSnapshotForMessageGUID:payloadURL:balloonBundleID:senderContext:completionBlock:");
}

id objc_msgSend_generateUnusedChatIdentifierForGroupChatWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateUnusedChatIdentifierForGroupChatWithAccount:");
}

id objc_msgSend_getBoolFromDomain_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBoolFromDomain:forKey:");
}

id objc_msgSend_getBoolFromDomain_forKey_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBoolFromDomain:forKey:defaultValue:");
}

id objc_msgSend_getValueFromDomain_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getValueFromDomain:forKey:");
}

id objc_msgSend_globalReadReceiptSettingVersion(void *a1, const char *a2, ...)
{
  return _[a1 globalReadReceiptSettingVersion];
}

id objc_msgSend_groupActivity(void *a1, const char *a2, ...)
{
  return _[a1 groupActivity];
}

id objc_msgSend_groupController(void *a1, const char *a2, ...)
{
  return _[a1 groupController];
}

id objc_msgSend_groupID(void *a1, const char *a2, ...)
{
  return _[a1 groupID];
}

id objc_msgSend_groupIDForChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupIDForChat:");
}

id objc_msgSend_groupMessageContext(void *a1, const char *a2, ...)
{
  return _[a1 groupMessageContext];
}

id objc_msgSend_groupParticipantVersion(void *a1, const char *a2, ...)
{
  return _[a1 groupParticipantVersion];
}

id objc_msgSend_groupPayload(void *a1, const char *a2, ...)
{
  return _[a1 groupPayload];
}

id objc_msgSend_groupPhotoDownloadCompletedForChat_fileTransferError_success_transferGuid_sender_isHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupPhotoDownloadCompletedForChat:fileTransferError:success:transferGuid:sender:isHidden:");
}

id objc_msgSend_groupPhotoGuid(void *a1, const char *a2, ...)
{
  return _[a1 groupPhotoGuid];
}

id objc_msgSend_groupPhotoRefreshController(void *a1, const char *a2, ...)
{
  return _[a1 groupPhotoRefreshController];
}

id objc_msgSend_groupPhotoRequestsFromStorage(void *a1, const char *a2, ...)
{
  return _[a1 groupPhotoRequestsFromStorage];
}

id objc_msgSend_groupPhotoRequestsInFlight(void *a1, const char *a2, ...)
{
  return _[a1 groupPhotoRequestsInFlight];
}

id objc_msgSend_groupPhotoUpdatedForChatIdentifier_style_account_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupPhotoUpdatedForChatIdentifier:style:account:userInfo:");
}

id objc_msgSend_groupPhotoUploadCompletedForChat_fileTransferGuid_callerURI_fromAccount_message_displayIDs_additionalContext_success_isPhotoRefresh_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupPhotoUploadCompletedForChat:fileTransferGuid:callerURI:fromAccount:message:displayIDs:additionalContext:success:isPhotoRefresh:error:");
}

id objc_msgSend_groupPhotoUploadFailedForChat_fileTransferGuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupPhotoUploadFailedForChat:fileTransferGuid:");
}

id objc_msgSend_groupPhotoUploadFailureCount(void *a1, const char *a2, ...)
{
  return _[a1 groupPhotoUploadFailureCount];
}

id objc_msgSend_guid(void *a1, const char *a2, ...)
{
  return _[a1 guid];
}

id objc_msgSend_guidForFileTransferDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guidForFileTransferDictionary:");
}

id objc_msgSend_guidForNewIncomingTransferWithFilename_isDirectory_totalBytes_hfsType_hfsCreator_hfsFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guidForNewIncomingTransferWithFilename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:");
}

id objc_msgSend_guidForNewOutgoingTransferWithFilename_isDirectory_totalBytes_hfsType_hfsCreator_hfsFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guidForNewOutgoingTransferWithFilename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:");
}

id objc_msgSend_guidsForStoredAttachmentPayloadData_messageGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guidsForStoredAttachmentPayloadData:messageGUID:");
}

id objc_msgSend_guidsForStoredAttachmentPayloadDataURLs_messageGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guidsForStoredAttachmentPayloadDataURLs:messageGUID:");
}

id objc_msgSend_handle(void *a1, const char *a2, ...)
{
  return _[a1 handle];
}

id objc_msgSend_handleAddToNewGroup_groupID_groupPhotoTransferDict_identifier_session_toIdentifier_toName_toParticipants_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAddToNewGroup:groupID:groupPhotoTransferDict:identifier:session:toIdentifier:toName:toParticipants:");
}

id objc_msgSend_handleBreadcrumbForNewSentMessageItemIfNecessary_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleBreadcrumbForNewSentMessageItemIfNecessary:withContext:");
}

id objc_msgSend_handleMessageDidReplace_newMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMessageDidReplace:newMessage:");
}

id objc_msgSend_handleNicknameUpdatesFromPeerDevice_fromPeerDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNicknameUpdatesFromPeerDevice:fromPeerDevice:");
}

id objc_msgSend_handlePayloadDataRequest_attempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePayloadDataRequest:attempts:");
}

id objc_msgSend_handlePayloadDataResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePayloadDataResponse:");
}

id objc_msgSend_handleScheduledMessageSend_sentSuccessfully_idsMessage_messageDictionary_canInlineAttachments_msgPayloadUploadDictionary_fromID_fromAccount_originalIDSIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleScheduledMessageSend:sentSuccessfully:idsMessage:messageDictionary:canInlineAttachments:msgPayloadUploadDictionary:fromID:fromAccount:originalIDSIdentifier:");
}

id objc_msgSend_handleScheduledMessageSendFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleScheduledMessageSendFailure:");
}

id objc_msgSend_handleTranscodeCompletionBlockForMessage_displayIDs_additionalContext_attemptedTranscode_transcodedTransferGUIDs_containsAutoLoopVideo_outputURLs_text_success_error_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTranscodeCompletionBlockForMessage:displayIDs:additionalContext:attemptedTranscode:transcodedTransferGUIDs:containsAutoLoopVideo:outputURLs:text:success:error:completionBlock:");
}

id objc_msgSend_handler_account_groupMessagePayload_messageID_toIdentifier_fromIdentifier_idsService_fromToken_timeStamp_storageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:account:groupMessagePayload:messageID:toIdentifier:fromIdentifier:idsService:fromToken:timeStamp:storageContext:");
}

id objc_msgSend_handler_bubblePayloadData_forMessageID_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:bubblePayloadData:forMessageID:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_deleteCommand_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:deleteCommand:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_genericNotification_incomingMessage_userInfo_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:genericNotification:incomingMessage:userInfo:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_groupMessageCommand_encryptedGroupCommand_messageID_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:groupMessageCommand:encryptedGroupCommand:messageID:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_incomingMessage_originalEncryptionType_messageID_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_incomingEngroup_needsDeliveryReceipt_deliveryContext_storageContext_messageContext_isBeingReplayed_mergeID_wantsCheckpointing_isSnapTrustedUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:incomingMessage:originalEncryptionType:messageID:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:incomingEngroup:needsDeliveryReceipt:deliveryContext:storageContext:messageContext:isBeingReplayed:mergeID:wantsCheckpointing:isSnapTrustedUser:");
}

id objc_msgSend_handler_locationShareInfo_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:locationShareInfo:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_messageIDDelivered_toIdentifier_status_deliveryContext_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:messageIDDelivered:toIdentifier:status:deliveryContext:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_messageIDPlayed_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:messageIDPlayed:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_messageIDRead_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:messageIDRead:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_messageIDReflectedDelivered_incomingMessage_toIdentifier_fromIdentifier_status_deliveryContext_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:messageIDReflectedDelivered:incomingMessage:toIdentifier:fromIdentifier:status:deliveryContext:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_messageIDSaved_ofType_toIdentifier_fromIdentifier_groupContext_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:messageIDSaved:ofType:toIdentifier:fromIdentifier:groupContext:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_nicknameInfoReceived_userInfo_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:nicknameInfoReceived:userInfo:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_payloadDataRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:payloadDataRequest:");
}

id objc_msgSend_handler_payloadDataResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:payloadDataResponse:");
}

id objc_msgSend_handler_receivedError_forMessageID_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_additionalInfo_shouldShowPeerErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:receivedError:forMessageID:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:additionalInfo:shouldShowPeerErrors:");
}

id objc_msgSend_handler_recoverCommand_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:recoverCommand:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_remoteFileRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:remoteFileRequest:");
}

id objc_msgSend_handler_remoteFileResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:remoteFileResponse:");
}

id objc_msgSend_handler_updateAttachments_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_fileTransferUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:updateAttachments:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:fileTransferUpdates:");
}

id objc_msgSend_handlers(void *a1, const char *a2, ...)
{
  return _[a1 handlers];
}

id objc_msgSend_hasActivePhoneAccount(void *a1, const char *a2, ...)
{
  return _[a1 hasActivePhoneAccount];
}

id objc_msgSend_hasKnownSenderChatWithChatIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasKnownSenderChatWithChatIdentifier:");
}

id objc_msgSend_hasLTEDataConnection(void *a1, const char *a2, ...)
{
  return _[a1 hasLTEDataConnection];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasStoredMessageWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStoredMessageWithGUID:");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hfsCreator(void *a1, const char *a2, ...)
{
  return _[a1 hfsCreator];
}

id objc_msgSend_hfsFlags(void *a1, const char *a2, ...)
{
  return _[a1 hfsFlags];
}

id objc_msgSend_hfsType(void *a1, const char *a2, ...)
{
  return _[a1 hfsType];
}

id objc_msgSend_historicalMessageGUIDsDeleted_chatGUIDs_queryID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "historicalMessageGUIDsDeleted:chatGUIDs:queryID:");
}

id objc_msgSend_historyForMessagePart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "historyForMessagePart:");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_idsAccount(void *a1, const char *a2, ...)
{
  return _[a1 idsAccount];
}

id objc_msgSend_idsAccountForFromURI_toURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsAccountForFromURI:toURI:");
}

id objc_msgSend_idsAccountForURI_IDSServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsAccountForURI:IDSServiceName:");
}

id objc_msgSend_idsAccounts(void *a1, const char *a2, ...)
{
  return _[a1 idsAccounts];
}

id objc_msgSend_idsAccountsDidChange(void *a1, const char *a2, ...)
{
  return _[a1 idsAccountsDidChange];
}

id objc_msgSend_idsDestination(void *a1, const char *a2, ...)
{
  return _[a1 idsDestination];
}

id objc_msgSend_idsDeviceForFromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsDeviceForFromID:");
}

id objc_msgSend_idsDeviceFromPushToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsDeviceFromPushToken:");
}

id objc_msgSend_idsOptionsWithMessageItem_toID_fromID_sendGUIDData_alternateCallbackID_isBusinessMessage_chatIdentifier_requiredRegProperties_interestingRegProperties_requiresLackOfRegProperties_deliveryContext_isGroupChat_canInlineAttachments_msgPayloadUploadDictionary_messageDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsOptionsWithMessageItem:toID:fromID:sendGUIDData:alternateCallbackID:isBusinessMessage:chatIdentifier:requiredRegProperties:interestingRegProperties:requiresLackOfRegProperties:deliveryContext:isGroupChat:canInlineAttachments:msgPayloadUploadDictionary:messageDictionary:");
}

id objc_msgSend_idsService(void *a1, const char *a2, ...)
{
  return _[a1 idsService];
}

id objc_msgSend_idsServiceForIDSAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsServiceForIDSAccount:");
}

id objc_msgSend_im_URLByAppendingPathComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_URLByAppendingPathComponents:");
}

id objc_msgSend_im_enqueuiMessageBlock_withTimeout_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_enqueuiMessageBlock:withTimeout:description:");
}

id objc_msgSend_im_generateCopyForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_generateCopyForURL:");
}

id objc_msgSend_im_lastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_lastPathComponent");
}

id objc_msgSend_im_randomTemporaryFileURLWithFileName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_randomTemporaryFileURLWithFileName:");
}

id objc_msgSend_im_registeredURIs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_registeredURIs");
}

id objc_msgSend_imdAccount(void *a1, const char *a2, ...)
{
  return _[a1 imdAccount];
}

id objc_msgSend_imdAccountForIDSAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imdAccountForIDSAccount:");
}

id objc_msgSend_immediatelyReachable(void *a1, const char *a2, ...)
{
  return _[a1 immediatelyReachable];
}

id objc_msgSend_incrementPendingReadReceiptFromStorageCount(void *a1, const char *a2, ...)
{
  return _[a1 incrementPendingReadReceiptFromStorageCount];
}

id objc_msgSend_incrementUseCount(void *a1, const char *a2, ...)
{
  return _[a1 incrementUseCount];
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return _[a1 indexSet];
}

id objc_msgSend_infoFromDictionary_isStewieTranscriptSharingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "infoFromDictionary:isStewieTranscriptSharingMessage:");
}

id objc_msgSend_informOfCancelledMessageWithMessageGUID_success_cancelType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informOfCancelledMessageWithMessageGUID:success:cancelType:error:");
}

id objc_msgSend_informOfCancelledScheduledMessageSendWithMessageGUID_sentSuccessfully_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informOfCancelledScheduledMessageSendWithMessageGUID:sentSuccessfully:error:");
}

id objc_msgSend_informOfChangedGroupPhoto_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informOfChangedGroupPhoto:");
}

id objc_msgSend_informOfIncomingMessageWithMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informOfIncomingMessageWithMessage:");
}

id objc_msgSend_informOfOutgoingMessageWithMessage_sentSuccessfully_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informOfOutgoingMessageWithMessage:sentSuccessfully:error:");
}

id objc_msgSend_informOfScheduledMessage_sentSuccessfully_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informOfScheduledMessage:sentSuccessfully:error:");
}

id objc_msgSend_initForReadingFromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForReadingFromData:error:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithAttributedString_includeMessageParts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributedString:includeMessageParts:");
}

id objc_msgSend_initWithAttributedString_includeMessageParts_isAudioMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributedString:includeMessageParts:isAudioMessage:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCharacters_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCharacters:length:");
}

id objc_msgSend_initWithChat_withIMDAccount_withIDSAccount_withCallerURI_serviceSession_withIDSService_withParticipantURIs_withOriginalParticipantURIs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChat:withIMDAccount:withIDSAccount:withCallerURI:serviceSession:withIDSService:withParticipantURIs:withOriginalParticipantURIs:");
}

id objc_msgSend_initWithContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContent:");
}

id objc_msgSend_initWithDataRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataRepresentation:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDictionary_accountUniqueID_fromID_loginID_serviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:accountUniqueID:fromID:loginID:serviceName:");
}

id objc_msgSend_initWithDisplayIDs_didSucceed_error_isFromMeToMe_shouldDeactivate_isBackwardsCompatibleMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDisplayIDs:didSucceed:error:isFromMeToMe:shouldDeactivate:isBackwardsCompatibleMessage:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDouble:");
}

id objc_msgSend_initWithFlags_options_timeout_wifiTimeout_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFlags:options:timeout:wifiTimeout:completionBlock:");
}

id objc_msgSend_initWithGroupPayload_additionalPayload_isGroupChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGroupPayload:additionalPayload:isGroupChat:");
}

id objc_msgSend_initWithHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHandle:");
}

id objc_msgSend_initWithIDSAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIDSAccount:");
}

id objc_msgSend_initWithIdentifier_timeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:timeout:");
}

id objc_msgSend_initWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInt:");
}

id objc_msgSend_initWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInteger:");
}

id objc_msgSend_initWithLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLength:");
}

id objc_msgSend_initWithLimitType_limitSize_qualityType_isSticker_allowDownload_lqmEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLimitType:limitSize:qualityType:isSticker:allowDownload:lqmEnabled:");
}

id objc_msgSend_initWithMessageItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMessageItem:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithOriginalURL_transferId_targetSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOriginalURL:transferId:targetSize:");
}

id objc_msgSend_initWithRemoteMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRemoteMembers:");
}

id objc_msgSend_initWithSender_time_body_attributes_fileTransferGUIDs_flags_error_guid_associatedMessageGUID_associatedMessageType_associatedMessageRange_associatedMessageEmoji_messageSummaryInfo_threadIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:associatedMessageGUID:associatedMessageType:associatedMessageRange:associatedMessageEmoji:messageSummaryInfo:threadIdentifier:");
}

id objc_msgSend_initWithSender_time_body_attributes_fileTransferGUIDs_flags_error_guid_threadIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:threadIdentifier:");
}

id objc_msgSend_initWithSender_time_guid_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSender:time:guid:type:");
}

id objc_msgSend_initWithSenderInfo_time_timeRead_timeDelivered_timePlayed_subject_body_bodyData_attributes_fileTransferGUIDs_flags_guid_messageID_account_accountID_service_handle_roomName_unformattedID_countryCode_expireState_balloonBundleID_payloadData_expressiveSendStyleID_timeExpressiveSendPlayed_errorType_associatedMessageGUID_associatedMessageType_associatedMessageRange_bizIntent_locale_biaReferenceID_messageSummaryInfo_partCount_threadIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSenderInfo:time:timeRead:timeDelivered:timePlayed:subject:body:bodyData:attributes:fileTransferGUIDs:flags:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:expireState:balloonBundleID:payloadData:expressiveSendStyleID:timeExpressiveSendPlayed:errorType:associatedMessageGUID:associatedMessageType:associatedMessageRange:bizIntent:locale:biaReferenceID:messageSummaryInfo:partCount:threadIdentifier:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithService_commands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:commands:");
}

id objc_msgSend_initWithService_commands_manuallyAckMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:commands:manuallyAckMessages:");
}

id objc_msgSend_initWithService_manuallyAckMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:manuallyAckMessages:");
}

id objc_msgSend_initWithServiceSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceSession:");
}

id objc_msgSend_initWithSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSession:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:attributes:");
}

id objc_msgSend_initWithTimeInterval_name_shouldWake_target_selector_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeInterval:name:shouldWake:target:selector:userInfo:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_internalName(void *a1, const char *a2, ...)
{
  return _[a1 internalName];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invitationPreferencesForAllHandlesWithStyles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invitationPreferencesForAllHandlesWithStyles:");
}

id objc_msgSend_invitePersonInfo_withMessage_toChatID_identifier_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invitePersonInfo:withMessage:toChatID:identifier:style:");
}

id objc_msgSend_isAVLessSharePlayEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isAVLessSharePlayEnabled];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isAdaptiveImageGlyph(void *a1, const char *a2, ...)
{
  return _[a1 isAdaptiveImageGlyph];
}

id objc_msgSend_isAnimojiV2(void *a1, const char *a2, ...)
{
  return _[a1 isAnimojiV2];
}

id objc_msgSend_isAudioMessage(void *a1, const char *a2, ...)
{
  return _[a1 isAudioMessage];
}

id objc_msgSend_isAutoReply(void *a1, const char *a2, ...)
{
  return _[a1 isAutoReply];
}

id objc_msgSend_isAutoloopVideo(void *a1, const char *a2, ...)
{
  return _[a1 isAutoloopVideo];
}

id objc_msgSend_isAuxImage(void *a1, const char *a2, ...)
{
  return _[a1 isAuxImage];
}

id objc_msgSend_isAuxVideo(void *a1, const char *a2, ...)
{
  return _[a1 isAuxVideo];
}

id objc_msgSend_isBIAEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isBIAEnabled];
}

id objc_msgSend_isBackwardsCompatibleMessage(void *a1, const char *a2, ...)
{
  return _[a1 isBackwardsCompatibleMessage];
}

id objc_msgSend_isBeingRetried(void *a1, const char *a2, ...)
{
  return _[a1 isBeingRetried];
}

id objc_msgSend_isBizAccount(void *a1, const char *a2, ...)
{
  return _[a1 isBizAccount];
}

id objc_msgSend_isBlackholeEnabledForEligibleAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBlackholeEnabledForEligibleAccounts:");
}

id objc_msgSend_isBlackholed(void *a1, const char *a2, ...)
{
  return _[a1 isBlackholed];
}

id objc_msgSend_isBreadcrumb(void *a1, const char *a2, ...)
{
  return _[a1 isBreadcrumb];
}

id objc_msgSend_isCanceled(void *a1, const char *a2, ...)
{
  return _[a1 isCanceled];
}

id objc_msgSend_isCarrierPigeonEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isCarrierPigeonEnabled];
}

id objc_msgSend_isClingBackwardsCompatibilityEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isClingBackwardsCompatibilityEnabled];
}

id objc_msgSend_isComplete(void *a1, const char *a2, ...)
{
  return _[a1 isComplete];
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _[a1 isConnected];
}

id objc_msgSend_isCritical(void *a1, const char *a2, ...)
{
  return _[a1 isCritical];
}

id objc_msgSend_isDefaultPairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 isDefaultPairedDevice];
}

id objc_msgSend_isDelayedRichLinkBlock(void *a1, const char *a2, ...)
{
  return _[a1 isDelayedRichLinkBlock];
}

id objc_msgSend_isDirectory(void *a1, const char *a2, ...)
{
  return _[a1 isDirectory];
}

id objc_msgSend_isEmpty(void *a1, const char *a2, ...)
{
  return _[a1 isEmpty];
}

id objc_msgSend_isEngramEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isEngramEnabled];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToIgnoringCase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToIgnoringCase:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExpirable(void *a1, const char *a2, ...)
{
  return _[a1 isExpirable];
}

id objc_msgSend_isFiltered(void *a1, const char *a2, ...)
{
  return _[a1 isFiltered];
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _[a1 isFinished];
}

id objc_msgSend_isFromExternalSource(void *a1, const char *a2, ...)
{
  return _[a1 isFromExternalSource];
}

id objc_msgSend_isFromMe(void *a1, const char *a2, ...)
{
  return _[a1 isFromMe];
}

id objc_msgSend_isFromMomentShare(void *a1, const char *a2, ...)
{
  return _[a1 isFromMomentShare];
}

id objc_msgSend_isGroupChat(void *a1, const char *a2, ...)
{
  return _[a1 isGroupChat];
}

id objc_msgSend_isGroupInBlocklist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isGroupInBlocklist:");
}

id objc_msgSend_isHighQualityPhotosEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isHighQualityPhotosEnabled];
}

id objc_msgSend_isIMLLegacyRelayEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isIMLLegacyRelayEnabled];
}

id objc_msgSend_isInternalInstall(void *a1, const char *a2, ...)
{
  return _[a1 isInternalInstall];
}

id objc_msgSend_isInternationalSpamFilteringEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isInternationalSpamFilteringEnabled];
}

id objc_msgSend_isKnownContact_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKnownContact:");
}

id objc_msgSend_isLocation(void *a1, const char *a2, ...)
{
  return _[a1 isLocation];
}

id objc_msgSend_isLockedDown(void *a1, const char *a2, ...)
{
  return _[a1 isLockedDown];
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return _[a1 isMainThread];
}

id objc_msgSend_isOffGridModeWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOffGridModeWithCompletion:");
}

id objc_msgSend_isOpusAudioMessage(void *a1, const char *a2, ...)
{
  return _[a1 isOpusAudioMessage];
}

id objc_msgSend_isOscarChat(void *a1, const char *a2, ...)
{
  return _[a1 isOscarChat];
}

id objc_msgSend_isPendingSatelliteSend(void *a1, const char *a2, ...)
{
  return _[a1 isPendingSatelliteSend];
}

id objc_msgSend_isPreviewAttachmentSizeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isPreviewAttachmentSizeEnabled];
}

id objc_msgSend_isRecipeBasedSticker(void *a1, const char *a2, ...)
{
  return _[a1 isRecipeBasedSticker];
}

id objc_msgSend_isReplicating(void *a1, const char *a2, ...)
{
  return _[a1 isReplicating];
}

id objc_msgSend_isSOS(void *a1, const char *a2, ...)
{
  return _[a1 isSOS];
}

id objc_msgSend_isScheduledMessagesCoreEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isScheduledMessagesCoreEnabled];
}

id objc_msgSend_isScreenLit(void *a1, const char *a2, ...)
{
  return _[a1 isScreenLit];
}

id objc_msgSend_isSimpleString(void *a1, const char *a2, ...)
{
  return _[a1 isSimpleString];
}

id objc_msgSend_isStewieSharingChat(void *a1, const char *a2, ...)
{
  return _[a1 isStewieSharingChat];
}

id objc_msgSend_isSticker(void *a1, const char *a2, ...)
{
  return _[a1 isSticker];
}

id objc_msgSend_isSuccess(void *a1, const char *a2, ...)
{
  return _[a1 isSuccess];
}

id objc_msgSend_isTapToRetry(void *a1, const char *a2, ...)
{
  return _[a1 isTapToRetry];
}

id objc_msgSend_isTemporaryBackwardCompatibilityAsset(void *a1, const char *a2, ...)
{
  return _[a1 isTemporaryBackwardCompatibilityAsset];
}

id objc_msgSend_isTranscriptSharingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isTranscriptSharingEnabled];
}

id objc_msgSend_isTypingMessage(void *a1, const char *a2, ...)
{
  return _[a1 isTypingMessage];
}

id objc_msgSend_isUnderFirstDataProtectionLock(void *a1, const char *a2, ...)
{
  return _[a1 isUnderFirstDataProtectionLock];
}

id objc_msgSend_isWiFiUsable(void *a1, const char *a2, ...)
{
  return _[a1 isWiFiUsable];
}

id objc_msgSend_itemWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemWithGUID:");
}

id objc_msgSend_joinChat_handleInfo_style_groupID_lastAddressedHandle_lastAddressedSIMID_joinProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "joinChat:handleInfo:style:groupID:lastAddressedHandle:lastAddressedSIMID:joinProperties:");
}

id objc_msgSend_labelID(void *a1, const char *a2, ...)
{
  return _[a1 labelID];
}

id objc_msgSend_largeFileSizeFor_allowedLargerRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeFileSizeFor:allowedLargerRepresentation:");
}

id objc_msgSend_lastAddressedLocalHandle(void *a1, const char *a2, ...)
{
  return _[a1 lastAddressedLocalHandle];
}

id objc_msgSend_lastMessage(void *a1, const char *a2, ...)
{
  return _[a1 lastMessage];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_lastSeenMessageGuid(void *a1, const char *a2, ...)
{
  return _[a1 lastSeenMessageGuid];
}

id objc_msgSend_lastSentMessageDate(void *a1, const char *a2, ...)
{
  return _[a1 lastSentMessageDate];
}

id objc_msgSend_lastUsedBIAReferenceID(void *a1, const char *a2, ...)
{
  return _[a1 lastUsedBIAReferenceID];
}

id objc_msgSend_lastUsedBIAUserID(void *a1, const char *a2, ...)
{
  return _[a1 lastUsedBIAUserID];
}

id objc_msgSend_launchAppForJoinRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchAppForJoinRequest:");
}

id objc_msgSend_leaveChat_fromID_fromAccount_session_service_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leaveChat:fromID:fromAccount:session:service:completionBlock:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_limitSize(void *a1, const char *a2, ...)
{
  return _[a1 limitSize];
}

id objc_msgSend_limitType(void *a1, const char *a2, ...)
{
  return _[a1 limitType];
}

id objc_msgSend_linkQualityValueForInterfaceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkQualityValueForInterfaceType:");
}

id objc_msgSend_localCommandHandlerRegistry(void *a1, const char *a2, ...)
{
  return _[a1 localCommandHandlerRegistry];
}

id objc_msgSend_localDevice(void *a1, const char *a2, ...)
{
  return _[a1 localDevice];
}

id objc_msgSend_localPath(void *a1, const char *a2, ...)
{
  return _[a1 localPath];
}

id objc_msgSend_localURL(void *a1, const char *a2, ...)
{
  return _[a1 localURL];
}

id objc_msgSend_locale(void *a1, const char *a2, ...)
{
  return _[a1 locale];
}

id objc_msgSend_lockDownManager(void *a1, const char *a2, ...)
{
  return _[a1 lockDownManager];
}

id objc_msgSend_logDumpAndSendMessageTo_forHours_reason_requirePreviousPrompt_willSendBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logDumpAndSendMessageTo:forHours:reason:requirePreviousPrompt:willSendBlock:");
}

id objc_msgSend_logMessageReceivedWithGUID_fromIdentifier_toIdentifier_conversationType_messageType_messageProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logMessageReceivedWithGUID:fromIdentifier:toIdentifier:conversationType:messageType:messageProtocol:");
}

id objc_msgSend_logMessageSendFailureWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logMessageSendFailureWithError:");
}

id objc_msgSend_logMessageSentWithGUID_fromIdentifier_toIdentifier_conversationType_messageType_sendDuration_errorCode_messageProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logMessageSentWithGUID:fromIdentifier:toIdentifier:conversationType:messageType:sendDuration:errorCode:messageProtocol:");
}

id objc_msgSend_loginID(void *a1, const char *a2, ...)
{
  return _[a1 loginID];
}

id objc_msgSend_loginServiceSessionWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loginServiceSessionWithAccount:");
}

id objc_msgSend_loginStatus(void *a1, const char *a2, ...)
{
  return _[a1 loginStatus];
}

id objc_msgSend_logoutServiceSessionWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logoutServiceSessionWithAccount:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return _[a1 longValue];
}

id objc_msgSend_lookUpENGroupForChat_service_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lookUpENGroupForChat:service:completion:");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_lqmEnabled(void *a1, const char *a2, ...)
{
  return _[a1 lqmEnabled];
}

id objc_msgSend_mainSession(void *a1, const char *a2, ...)
{
  return _[a1 mainSession];
}

id objc_msgSend_makeNewIncomingTransferWithGUID_filename_isDirectory_totalBytes_hfsType_hfsCreator_hfsFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeNewIncomingTransferWithGUID:filename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:");
}

id objc_msgSend_manuallyAckMessagesEnabled(void *a1, const char *a2, ...)
{
  return _[a1 manuallyAckMessagesEnabled];
}

id objc_msgSend_markAsSpamForIDs_style_onServices_chatID_queryID_autoReport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markAsSpamForIDs:style:onServices:chatID:queryID:autoReport:");
}

id objc_msgSend_markHandlesAsAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markHandlesAsAllowed:");
}

id objc_msgSend_maxRefreshTime(void *a1, const char *a2, ...)
{
  return _[a1 maxRefreshTime];
}

id objc_msgSend_meCardUpdated(void *a1, const char *a2, ...)
{
  return _[a1 meCardUpdated];
}

id objc_msgSend_memberDisplayIDsFromParticipants_toIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "memberDisplayIDsFromParticipants:toIdentifier:");
}

id objc_msgSend_messageAttachmentSendableUTIs(void *a1, const char *a2, ...)
{
  return _[a1 messageAttachmentSendableUTIs];
}

id objc_msgSend_messageBody(void *a1, const char *a2, ...)
{
  return _[a1 messageBody];
}

id objc_msgSend_messageDeliveryContext(void *a1, const char *a2, ...)
{
  return _[a1 messageDeliveryContext];
}

id objc_msgSend_messageDeliveryController_serverUpdatedTimestampMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageDeliveryController:serverUpdatedTimestampMessage:");
}

id objc_msgSend_messageDeliveryController_service_didFlushCacheForKTPeerURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageDeliveryController:service:didFlushCacheForKTPeerURI:");
}

id objc_msgSend_messageDeliveryController_service_didFlushCacheForRemoteURI_fromURI_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageDeliveryController:service:didFlushCacheForRemoteURI:fromURI:guid:");
}

id objc_msgSend_messageDictionaryWithMessageItem_isBusiness_chatIdentifier_toParticipants_originallyToParticipants_additionalContext_msgPayloadUploadDictionary_originalPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageDictionaryWithMessageItem:isBusiness:chatIdentifier:toParticipants:originallyToParticipants:additionalContext:msgPayloadUploadDictionary:originalPayload:");
}

id objc_msgSend_messageGUID(void *a1, const char *a2, ...)
{
  return _[a1 messageGUID];
}

id objc_msgSend_messageHadEncryptedData(void *a1, const char *a2, ...)
{
  return _[a1 messageHadEncryptedData];
}

id objc_msgSend_messageHandshakeState(void *a1, const char *a2, ...)
{
  return _[a1 messageHandshakeState];
}

id objc_msgSend_messageID(void *a1, const char *a2, ...)
{
  return _[a1 messageID];
}

id objc_msgSend_messagePartBody(void *a1, const char *a2, ...)
{
  return _[a1 messagePartBody];
}

id objc_msgSend_messagePartGUID(void *a1, const char *a2, ...)
{
  return _[a1 messagePartGUID];
}

id objc_msgSend_messagePartRange(void *a1, const char *a2, ...)
{
  return _[a1 messagePartRange];
}

id objc_msgSend_messagePartText(void *a1, const char *a2, ...)
{
  return _[a1 messagePartText];
}

id objc_msgSend_messageServiceTypeForURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageServiceTypeForURI:");
}

id objc_msgSend_messageStore(void *a1, const char *a2, ...)
{
  return _[a1 messageStore];
}

id objc_msgSend_messageSummaryInfo(void *a1, const char *a2, ...)
{
  return _[a1 messageSummaryInfo];
}

id objc_msgSend_messageSummaryInfoForSending(void *a1, const char *a2, ...)
{
  return _[a1 messageSummaryInfoForSending];
}

id objc_msgSend_messageType(void *a1, const char *a2, ...)
{
  return _[a1 messageType];
}

id objc_msgSend_messageWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageWithGUID:");
}

id objc_msgSend_messagesWithAssociatedGUID_shouldLoadAttachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messagesWithAssociatedGUID:shouldLoadAttachments:");
}

id objc_msgSend_mimeType(void *a1, const char *a2, ...)
{
  return _[a1 mimeType];
}

id objc_msgSend_minRefreshTime(void *a1, const char *a2, ...)
{
  return _[a1 minRefreshTime];
}

id objc_msgSend_minimumFreeSpace(void *a1, const char *a2, ...)
{
  return _[a1 minimumFreeSpace];
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_mmcsTargetReportSizeForHighQualityPhotoSize_commonCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mmcsTargetReportSizeForHighQualityPhotoSize:commonCapabilities:");
}

id objc_msgSend_modernHighQualityPhotoSizeLimit(void *a1, const char *a2, ...)
{
  return _[a1 modernHighQualityPhotoSizeLimit];
}

id objc_msgSend_mostRecentGroupPhotoRequestDates(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentGroupPhotoRequestDates];
}

id objc_msgSend_msgSession(void *a1, const char *a2, ...)
{
  return _[a1 msgSession];
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _[a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nanoSecondsFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nanoSecondsFromDate:");
}

id objc_msgSend_needsRelay(void *a1, const char *a2, ...)
{
  return _[a1 needsRelay];
}

id objc_msgSend_newGroupMessagePayloadForChat_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newGroupMessagePayloadForChat:fromID:");
}

id objc_msgSend_newNicknameInfoToSend(void *a1, const char *a2, ...)
{
  return _[a1 newNicknameInfoToSend];
}

id objc_msgSend_newlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 newlineCharacterSet];
}

id objc_msgSend_nicknameForHandleURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nicknameForHandleURI:");
}

id objc_msgSend_noSpaceForHighQualityLimit_qualityType_isSticker_lqmEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noSpaceForHighQualityLimit:qualityType:isSticker:lqmEnabled:");
}

id objc_msgSend_noSpaceForLowQualityLimit_qualityType_isSticker_lqmEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noSpaceForLowQualityLimit:qualityType:isSticker:lqmEnabled:");
}

id objc_msgSend_nonRetainingArray(void *a1, const char *a2, ...)
{
  return _[a1 nonRetainingArray];
}

id objc_msgSend_normalizedHandleWithDestinationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "normalizedHandleWithDestinationID:");
}

id objc_msgSend_noteItemFromStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteItemFromStorage:");
}

id objc_msgSend_noteLastItemFromStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteLastItemFromStorage:");
}

id objc_msgSend_noteLastItemProcessed(void *a1, const char *a2, ...)
{
  return _[a1 noteLastItemProcessed];
}

id objc_msgSend_noteRecentMessageForPeople_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteRecentMessageForPeople:");
}

id objc_msgSend_noteRecentMessageFromChatID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteRecentMessageFromChatID:");
}

id objc_msgSend_notificationIDSTokenURI(void *a1, const char *a2, ...)
{
  return _[a1 notificationIDSTokenURI];
}

id objc_msgSend_notifyDidSendMessageID_account_shouldNotify_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyDidSendMessageID:account:shouldNotify:");
}

id objc_msgSend_notifyPeersWithScheduledMessageUpdate_scheduleState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyPeersWithScheduledMessageUpdate:scheduleState:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numMessagesSent(void *a1, const char *a2, ...)
{
  return _[a1 numMessagesSent];
}

id objc_msgSend_numberFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberFromString:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_originalParticipantURIs(void *a1, const char *a2, ...)
{
  return _[a1 originalParticipantURIs];
}

id objc_msgSend_originalTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 originalTimestamp];
}

id objc_msgSend_originalURL(void *a1, const char *a2, ...)
{
  return _[a1 originalURL];
}

id objc_msgSend_outHTML(void *a1, const char *a2, ...)
{
  return _[a1 outHTML];
}

id objc_msgSend_outgoingReplicationCallerIDForChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outgoingReplicationCallerIDForChat:");
}

id objc_msgSend_overwritePerChatReadReceiptSettingsWithGlobalValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overwritePerChatReadReceiptSettingsWithGlobalValue:");
}

id objc_msgSend_owner(void *a1, const char *a2, ...)
{
  return _[a1 owner];
}

id objc_msgSend_pairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 pairedDevice];
}

id objc_msgSend_parentChatID(void *a1, const char *a2, ...)
{
  return _[a1 parentChatID];
}

id objc_msgSend_parseContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseContext:");
}

id objc_msgSend_parser_foundAttributes_atCharacterIndex_fileTransferGUID_filename_bookmark_width_height_isAnimoji_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:foundAttributes:atCharacterIndex:fileTransferGUID:filename:bookmark:width:height:isAnimoji:");
}

id objc_msgSend_parser_foundAttributes_inRange_fileTransferGUID_filename_bookmark_width_height_isAnimoji_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:foundAttributes:inRange:fileTransferGUID:filename:bookmark:width:height:isAnimoji:");
}

id objc_msgSend_participantURIs(void *a1, const char *a2, ...)
{
  return _[a1 participantURIs];
}

id objc_msgSend_participants(void *a1, const char *a2, ...)
{
  return _[a1 participants];
}

id objc_msgSend_participantsForDestinations_service_listenerID_queue_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "participantsForDestinations:service:listenerID:queue:completionBlock:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _[a1 pathExtension];
}

id objc_msgSend_pathExtensionForMIMEType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathExtensionForMIMEType:");
}

id objc_msgSend_pathExtensionForUTIType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathExtensionForUTIType:");
}

id objc_msgSend_payloadData(void *a1, const char *a2, ...)
{
  return _[a1 payloadData];
}

id objc_msgSend_pendingENGroupParticipantUpdate(void *a1, const char *a2, ...)
{
  return _[a1 pendingENGroupParticipantUpdate];
}

id objc_msgSend_pendingGroupPhotoDownloads(void *a1, const char *a2, ...)
{
  return _[a1 pendingGroupPhotoDownloads];
}

id objc_msgSend_pendingRemoteFileRequests(void *a1, const char *a2, ...)
{
  return _[a1 pendingRemoteFileRequests];
}

id objc_msgSend_performGroupTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performGroupTask:");
}

id objc_msgSend_performSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:");
}

id objc_msgSend_personCentricID(void *a1, const char *a2, ...)
{
  return _[a1 personCentricID];
}

id objc_msgSend_populateCacheForHandleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "populateCacheForHandleID:");
}

id objc_msgSend_populateCacheWithAvailabilityVerificationTokensForHandleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "populateCacheWithAvailabilityVerificationTokensForHandleID:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_powerLogConversationType(void *a1, const char *a2, ...)
{
  return _[a1 powerLogConversationType];
}

id objc_msgSend_powerLogMessageType(void *a1, const char *a2, ...)
{
  return _[a1 powerLogMessageType];
}

id objc_msgSend_preWarmMMCSForOwnerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preWarmMMCSForOwnerID:");
}

id objc_msgSend_prefixedURI(void *a1, const char *a2, ...)
{
  return _[a1 prefixedURI];
}

id objc_msgSend_processDownloadedPayloadData_forMessageGUID_balloonBundleID_fromIdentifier_senderToken_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processDownloadedPayloadData:forMessageGUID:balloonBundleID:fromIdentifier:senderToken:withCompletionBlock:");
}

id objc_msgSend_processMessageAttachmentDictionary_forMessageGUID_balloonBundleID_fromIdentifier_senderToken_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processMessageAttachmentDictionary:forMessageGUID:balloonBundleID:fromIdentifier:senderToken:withCompletionBlock:");
}

id objc_msgSend_processMessageForSending_toChat_style_allowWatchdog_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processMessageForSending:toChat:style:allowWatchdog:account:");
}

id objc_msgSend_processMessageForSending_toChat_style_allowWatchdog_account_didReplaceMessageBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processMessageForSending:toChat:style:allowWatchdog:account:didReplaceMessageBlock:completionBlock:");
}

id objc_msgSend_productVersion(void *a1, const char *a2, ...)
{
  return _[a1 productVersion];
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return _[a1 properties];
}

id objc_msgSend_pushToken(void *a1, const char *a2, ...)
{
  return _[a1 pushToken];
}

id objc_msgSend_qualityType(void *a1, const char *a2, ...)
{
  return _[a1 qualityType];
}

id objc_msgSend_queueChatToSendNicknamePostUploadIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queueChatToSendNicknamePostUploadIfNeeded:");
}

id objc_msgSend_readReceiptsGloballyEnabled(void *a1, const char *a2, ...)
{
  return _[a1 readReceiptsGloballyEnabled];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_receiveFileTransfer_topic_path_requestURLString_ownerID_signature_decryptionKey_fileSize_progressBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveFileTransfer:topic:path:requestURLString:ownerID:signature:decryptionKey:fileSize:progressBlock:completionBlock:");
}

id objc_msgSend_receiveFileTransfer_transferGUID_topic_path_requestURLString_ownerID_signature_decryptionKey_fileSize_balloonBundleID_senderContext_progressBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveFileTransfer:transferGUID:topic:path:requestURLString:ownerID:signature:decryptionKey:fileSize:balloonBundleID:senderContext:progressBlock:completionBlock:");
}

id objc_msgSend_receiveGroupUpdate_chat_service_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveGroupUpdate:chat:service:");
}

id objc_msgSend_receiveMessageData_account_session_toIdentifier_fromIdentifier_incomingEngroup_service_timestamp_fromStorage_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveMessageData:account:session:toIdentifier:fromIdentifier:incomingEngroup:service:timestamp:fromStorage:completionBlock:");
}

id objc_msgSend_receivedBlackholeError(void *a1, const char *a2, ...)
{
  return _[a1 receivedBlackholeError];
}

id objc_msgSend_receivedGroupPhotoUpdate_chat_sender_isHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedGroupPhotoUpdate:chat:sender:isHidden:");
}

id objc_msgSend_receivedIncomingLocationSharePacket_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedIncomingLocationSharePacket:");
}

id objc_msgSend_receiverIsCandidateForHawking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiverIsCandidateForHawking:");
}

id objc_msgSend_receiverIsCandidateForJunk_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiverIsCandidateForJunk:forAccount:");
}

id objc_msgSend_recipient(void *a1, const char *a2, ...)
{
  return _[a1 recipient];
}

id objc_msgSend_recoverChatsForCommandDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recoverChatsForCommandDictionary:");
}

id objc_msgSend_recoverParticipantsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 recoverParticipantsIfNeeded];
}

id objc_msgSend_refreshDate(void *a1, const char *a2, ...)
{
  return _[a1 refreshDate];
}

id objc_msgSend_refreshRequests(void *a1, const char *a2, ...)
{
  return _[a1 refreshRequests];
}

id objc_msgSend_refreshStatusForKTPeerURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshStatusForKTPeerURI:");
}

id objc_msgSend_refreshTTLForGroupPhoto_chat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshTTLForGroupPhoto:chat:");
}

id objc_msgSend_registeredSIMIDs(void *a1, const char *a2, ...)
{
  return _[a1 registeredSIMIDs];
}

id objc_msgSend_registeredURIs(void *a1, const char *a2, ...)
{
  return _[a1 registeredURIs];
}

id objc_msgSend_registration(void *a1, const char *a2, ...)
{
  return _[a1 registration];
}

id objc_msgSend_rejectTransfer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rejectTransfer:");
}

id objc_msgSend_remapMessageError_toError_forChat_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remapMessageError:toError:forChat:completion:");
}

id objc_msgSend_remoteFileResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteFileResponse:");
}

id objc_msgSend_remotefileRequest_attempts_shouldRetry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remotefileRequest:attempts:shouldRetry:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDelegate:");
}

id objc_msgSend_removeFastDormancyDisableToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFastDormancyDisableToken:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeListener:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectIdenticalTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectIdenticalTo:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeParticipants_toChat_fromID_fromAccount_session_service_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeParticipants:toChat:fromID:fromAccount:session:service:completionBlock:");
}

id objc_msgSend_removeParticipantsFromENGroup_chat_service_fromID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeParticipantsFromENGroup:chat:service:fromID:completion:");
}

id objc_msgSend_removeTransferForGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeTransferForGUID:");
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_replaceTransferWithSafeTransfer_constraints_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceTransferWithSafeTransfer:constraints:completionBlock:");
}

id objc_msgSend_replayMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replayMessage:");
}

id objc_msgSend_replicatedFallbackGUIDs(void *a1, const char *a2, ...)
{
  return _[a1 replicatedFallbackGUIDs];
}

id objc_msgSend_replicationAccount(void *a1, const char *a2, ...)
{
  return _[a1 replicationAccount];
}

id objc_msgSend_replicationSourceID(void *a1, const char *a2, ...)
{
  return _[a1 replicationSourceID];
}

id objc_msgSend_replicationSourceIDForSending(void *a1, const char *a2, ...)
{
  return _[a1 replicationSourceIDForSending];
}

id objc_msgSend_replyToGUID(void *a1, const char *a2, ...)
{
  return _[a1 replyToGUID];
}

id objc_msgSend_requestContentHeaders(void *a1, const char *a2, ...)
{
  return _[a1 requestContentHeaders];
}

id objc_msgSend_requestContentVersion(void *a1, const char *a2, ...)
{
  return _[a1 requestContentVersion];
}

id objc_msgSend_requestGroupPhotoIfNecessary_incomingParticipantVersion_incomingGroupPhotoCreationDate_toIdentifier_fromIdentifier_messageIsFromStorage_session_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestGroupPhotoIfNecessary:incomingParticipantVersion:incomingGroupPhotoCreationDate:toIdentifier:fromIdentifier:messageIsFromStorage:session:");
}

id objc_msgSend_resetTransfer_andPostError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetTransfer:andPostError:");
}

id objc_msgSend_responseCode(void *a1, const char *a2, ...)
{
  return _[a1 responseCode];
}

id objc_msgSend_responseContentBody(void *a1, const char *a2, ...)
{
  return _[a1 responseContentBody];
}

id objc_msgSend_responseContentHeaders(void *a1, const char *a2, ...)
{
  return _[a1 responseContentHeaders];
}

id objc_msgSend_responseContentVersion(void *a1, const char *a2, ...)
{
  return _[a1 responseContentVersion];
}

id objc_msgSend_restrictionAllowedBySettingWithQualityType_isSticker_lqmEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restrictionAllowedBySettingWithQualityType:isSticker:lqmEnabled:");
}

id objc_msgSend_restrictionDisallowedBySettingWithQualityType_isSticker_lqmEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restrictionDisallowedBySettingWithQualityType:isSticker:lqmEnabled:");
}

id objc_msgSend_restrictionForceAllowedWithQualityType_isSticker_lqmEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restrictionForceAllowedWithQualityType:isSticker:lqmEnabled:");
}

id objc_msgSend_restrictionWithLimitType_limitSize_qualityType_isSticker_allowDownload_lqmEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restrictionWithLimitType:limitSize:qualityType:isSticker:allowDownload:lqmEnabled:");
}

id objc_msgSend_retractedPartIndexes(void *a1, const char *a2, ...)
{
  return _[a1 retractedPartIndexes];
}

id objc_msgSend_retrieveAttachmentsForMessage_inlineAttachments_displayID_topic_comingFromStorage_shouldForceAutoDownload_senderContext_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveAttachmentsForMessage:inlineAttachments:displayID:topic:comingFromStorage:shouldForceAutoDownload:senderContext:completionBlock:");
}

id objc_msgSend_retrieveStickerWithProperties_isAdaptiveImageGlyph_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveStickerWithProperties:isAdaptiveImageGlyph:completionBlock:");
}

id objc_msgSend_retryToParticipant(void *a1, const char *a2, ...)
{
  return _[a1 retryToParticipant];
}

id objc_msgSend_richLinkURLs(void *a1, const char *a2, ...)
{
  return _[a1 richLinkURLs];
}

id objc_msgSend_roomName(void *a1, const char *a2, ...)
{
  return _[a1 roomName];
}

id objc_msgSend_sandboxToken(void *a1, const char *a2, ...)
{
  return _[a1 sandboxToken];
}

id objc_msgSend_sanitizeParticipants_excludingHandles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sanitizeParticipants:excludingHandles:");
}

id objc_msgSend_scheduleState(void *a1, const char *a2, ...)
{
  return _[a1 scheduleState];
}

id objc_msgSend_scheduleType(void *a1, const char *a2, ...)
{
  return _[a1 scheduleType];
}

id objc_msgSend_scheduledMessageCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 scheduledMessageCoordinator];
}

id objc_msgSend_scheduledMessageOriginalTransferGUIDs(void *a1, const char *a2, ...)
{
  return _[a1 scheduledMessageOriginalTransferGUIDs];
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _[a1 scheme];
}

id objc_msgSend_sendAckForMessageWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAckForMessageWithContext:");
}

id objc_msgSend_sendAttachmentsForMessage_canSendInline_displayIDs_additionalContext_commonCapabilities_mode_sessionInfo_topic_completionBlock_uploadFailureBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAttachmentsForMessage:canSendInline:displayIDs:additionalContext:commonCapabilities:mode:sessionInfo:topic:completionBlock:uploadFailureBlock:");
}

id objc_msgSend_sendAttachmentsForMessage_canSendInline_displayIDs_additionalContext_mode_fromID_recipients_completionBlock_uploadFailureBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAttachmentsForMessage:canSendInline:displayIDs:additionalContext:mode:fromID:recipients:completionBlock:uploadFailureBlock:");
}

id objc_msgSend_sendBlastDoorError_guid_messageTypeString_senderURI_senderToken_messageContext_payloadAttachmentURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:");
}

id objc_msgSend_sendBubblePayloadMessageDictionary_fromID_fromAccount_toURIs_toGroup_priority_options_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendBubblePayloadMessageDictionary:fromID:fromAccount:toURIs:toGroup:priority:options:completionBlock:");
}

id objc_msgSend_sendCloseSessionMessageDictionary_toBusinessURI_fromURI_fromAccount_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCloseSessionMessageDictionary:toBusinessURI:fromURI:fromAccount:completionBlock:");
}

id objc_msgSend_sendCommand_withProperties_toPerson_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCommand:withProperties:toPerson:");
}

id objc_msgSend_sendCommand_withProperties_toPerson_toChatID_identifier_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCommand:withProperties:toPerson:toChatID:identifier:style:");
}

id objc_msgSend_sendDate(void *a1, const char *a2, ...)
{
  return _[a1 sendDate];
}

id objc_msgSend_sendDeleteCommand_forChatGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendDeleteCommand:forChatGUID:");
}

id objc_msgSend_sendDeliveryReceiptForMessageID_toID_deliveryContext_needsDeliveryReceipt_callerID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendDeliveryReceiptForMessageID:toID:deliveryContext:needsDeliveryReceipt:callerID:account:");
}

id objc_msgSend_sendDuration(void *a1, const char *a2, ...)
{
  return _[a1 sendDuration];
}

id objc_msgSend_sendEditedMessage_partIndex_editType_destinations_chatIdentifier_account_fromID_backwardCompatabilityText_unsupportedDestinationsHandler_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEditedMessage:partIndex:editType:destinations:chatIdentifier:account:fromID:backwardCompatabilityText:unsupportedDestinationsHandler:completionBlock:");
}

id objc_msgSend_sendFTMessage_attempts_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFTMessage:attempts:withCompletionBlock:");
}

id objc_msgSend_sendFallbackAttachmentsForMessage_displayIDs_additionalContext_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFallbackAttachmentsForMessage:displayIDs:additionalContext:completionBlock:");
}

id objc_msgSend_sendFilePath_topic_userInfo_transferID_encryptFile_progressBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFilePath:topic:userInfo:transferID:encryptFile:progressBlock:completionBlock:");
}

id objc_msgSend_sendGroupPhotoUpdate_toChatID_identifier_style_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendGroupPhotoUpdate:toChatID:identifier:style:account:");
}

id objc_msgSend_sendGroupPhotoUpdate_toChatID_identifier_style_account_isPhotoRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendGroupPhotoUpdate:toChatID:identifier:style:account:isPhotoRefresh:");
}

id objc_msgSend_sendLogDumpMessageAtFilePath_fromAccount_fromID_toRecipient_shouldDeleteFile_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendLogDumpMessageAtFilePath:fromAccount:fromID:toRecipient:shouldDeleteFile:withCompletion:");
}

id objc_msgSend_sendManualAckForMessageWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendManualAckForMessageWithContext:");
}

id objc_msgSend_sendMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:");
}

id objc_msgSend_sendMessage_context_groupContext_toGroup_toParticipants_originallyToParticipants_fromID_fromAccount_chatIdentifier_originalPayload_replyToMessageGUID_fakeSavedReceiptBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:context:groupContext:toGroup:toParticipants:originallyToParticipants:fromID:fromAccount:chatIdentifier:originalPayload:replyToMessageGUID:fakeSavedReceiptBlock:completionBlock:");
}

id objc_msgSend_sendMessage_toChat_fromID_fromAccount_session_service_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:toChat:fromID:fromAccount:session:service:completionBlock:");
}

id objc_msgSend_sendMessage_toChat_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:toChat:style:");
}

id objc_msgSend_sendMessage_toChat_style_account_destinationHandles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:toChat:style:account:destinationHandles:");
}

id objc_msgSend_sendMessageDictionary_encryptDictionary_fromID_fromAccount_toURIs_toGroup_priority_options_willSendBlock_callCompletionOnSuccess_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageDictionary:encryptDictionary:fromID:fromAccount:toURIs:toGroup:priority:options:willSendBlock:callCompletionOnSuccess:completionBlock:");
}

id objc_msgSend_sendMessageDictionary_encryptDictionary_fromID_fromAccount_toURIs_toGroup_priority_options_willSendBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageDictionary:encryptDictionary:fromID:fromAccount:toURIs:toGroup:priority:options:willSendBlock:completionBlock:");
}

id objc_msgSend_sendMessageDictionary_fromID_fromAccount_toURIs_toGroup_priority_options_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageDictionary:fromID:fromAccount:toURIs:toGroup:priority:options:completionBlock:");
}

id objc_msgSend_sendMessageDictionary_fromID_fromAccount_toURIs_toGroup_priority_options_willSendBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageDictionary:fromID:fromAccount:toURIs:toGroup:priority:options:willSendBlock:completionBlock:");
}

id objc_msgSend_sendMessageError_toToken_toID_toGroup_fromID_fromAccount_forMessageID_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageError:toToken:toID:toGroup:fromID:fromAccount:forMessageID:completionBlock:");
}

id objc_msgSend_sendMessageErrorWithInfo_toToken_toID_toGroup_fromID_fromAccount_forMessageID_additionalInfo_fileSize_failureTimeSeconds_failReasonMessage_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageErrorWithInfo:toToken:toID:toGroup:fromID:fromAccount:forMessageID:additionalInfo:fileSize:failureTimeSeconds:failReasonMessage:completionBlock:");
}

id objc_msgSend_sendMessageWithEngram_chat_service_fromID_fromAccount_session_context_groupController_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageWithEngram:chat:service:fromID:fromAccount:session:context:groupController:completionBlock:");
}

id objc_msgSend_sendNotificationMessageIfNeededForIncomingMessageFromChatIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendNotificationMessageIfNeededForIncomingMessageFromChatIdentifier:");
}

id objc_msgSend_sendPayloadData_messageGUID_fromID_recipients_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPayloadData:messageGUID:fromID:recipients:completionBlock:");
}

id objc_msgSend_sendPayloadData_messageGUID_sessionInfo_topic_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPayloadData:messageGUID:sessionInfo:topic:completionBlock:");
}

id objc_msgSend_sendPersonalNicknameToRecipients_chatGUID_fromHandle_onlySendToThoseLoggedOutOfIMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPersonalNicknameToRecipients:chatGUID:fromHandle:onlySendToThoseLoggedOutOfIMessage:");
}

id objc_msgSend_sendReceivedPhotoEvent(void *a1, const char *a2, ...)
{
  return _[a1 sendReceivedPhotoEvent];
}

id objc_msgSend_sendRepositionedStickerMetadata_forEditedMessage_destinations_account_fromID_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRepositionedStickerMetadata:forEditedMessage:destinations:account:fromID:completionBlock:");
}

id objc_msgSend_sendResourceAtURL_metadata_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendResourceAtURL:metadata:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendServerMessage_command_fromAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendServerMessage:command:fromAccount:");
}

id objc_msgSend_sendToLocalPeers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendToLocalPeers:");
}

id objc_msgSend_sendToLocalPeersFile_dictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendToLocalPeersFile:dictionary:");
}

id objc_msgSend_sender(void *a1, const char *a2, ...)
{
  return _[a1 sender];
}

id objc_msgSend_senderID(void *a1, const char *a2, ...)
{
  return _[a1 senderID];
}

id objc_msgSend_senderInfo(void *a1, const char *a2, ...)
{
  return _[a1 senderInfo];
}

id objc_msgSend_senderPersona(void *a1, const char *a2, ...)
{
  return _[a1 senderPersona];
}

id objc_msgSend_serverReceivedTime(void *a1, const char *a2, ...)
{
  return _[a1 serverReceivedTime];
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _[a1 service];
}

id objc_msgSend_service_sendMessage_fromAccount_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "service:sendMessage:fromAccount:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_serviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 serviceIdentifier];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return _[a1 serviceName];
}

id objc_msgSend_serviceSession(void *a1, const char *a2, ...)
{
  return _[a1 serviceSession];
}

id objc_msgSend_serviceSessionDelegates(void *a1, const char *a2, ...)
{
  return _[a1 serviceSessionDelegates];
}

id objc_msgSend_serviceType(void *a1, const char *a2, ...)
{
  return _[a1 serviceType];
}

id objc_msgSend_serviceWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceWithName:");
}

id objc_msgSend_serviceWithReplicationSourceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceWithReplicationSourceID:");
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _[a1 session];
}

id objc_msgSend_sessionForReplicationSourceServiceName_replicatingAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionForReplicationSourceServiceName:replicatingAccount:");
}

id objc_msgSend_sessionInfoForBusinessReceipients_fromID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionInfoForBusinessReceipients:fromID:completion:");
}

id objc_msgSend_sessionSpecificTransferIDForTransferID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionSpecificTransferIDForTransferID:");
}

id objc_msgSend_sessionToken(void *a1, const char *a2, ...)
{
  return _[a1 sessionToken];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccount:");
}

id objc_msgSend_setAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountID:");
}

id objc_msgSend_setActionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionType:");
}

id objc_msgSend_setActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivity:");
}

id objc_msgSend_setAdaptiveImageGlyphContentDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdaptiveImageGlyphContentDescription:");
}

id objc_msgSend_setAdaptiveImageGlyphContentIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdaptiveImageGlyphContentIdentifier:");
}

id objc_msgSend_setAdditionalErrorInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdditionalErrorInfo:");
}

id objc_msgSend_setAppMessageFallbackImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppMessageFallbackImage:");
}

id objc_msgSend_setAssociatedMessageGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssociatedMessageGUID:");
}

id objc_msgSend_setAssociatedMessageType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssociatedMessageType:");
}

id objc_msgSend_setAttachmentSendContexts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttachmentSendContexts:");
}

id objc_msgSend_setAttributes_ofItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:ofItemAtPath:error:");
}

id objc_msgSend_setAttributionInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributionInfo:");
}

id objc_msgSend_setAudioTranscriptionText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioTranscriptionText:");
}

id objc_msgSend_setAuthURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthURL:");
}

id objc_msgSend_setAuxStateWasDowngraded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuxStateWasDowngraded:");
}

id objc_msgSend_setAvMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAvMode:");
}

id objc_msgSend_setBackwardsCompatibleVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackwardsCompatibleVersion:");
}

id objc_msgSend_setBalloonBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBalloonBundleID:");
}

id objc_msgSend_setBiaReferenceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBiaReferenceID:");
}

id objc_msgSend_setBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlock:");
}

id objc_msgSend_setBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBody:");
}

id objc_msgSend_setByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setByAddingObject:");
}

id objc_msgSend_setCallerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallerID:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setConsumedSessionPayloads_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConsumedSessionPayloads:");
}

id objc_msgSend_setContactsAvatarRecipeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContactsAvatarRecipeData:");
}

id objc_msgSend_setCreateEngramGroupOnMessageSend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreateEngramGroupOnMessageSend:");
}

id objc_msgSend_setDate_forChatIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDate:forChatIdentifier:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDestinationCallerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationCallerID:");
}

id objc_msgSend_setEditedPartIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEditedPartIndexes:");
}

id objc_msgSend_setEmergencyUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEmergencyUserInfo:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setError:");
}

id objc_msgSend_setErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorCode:");
}

id objc_msgSend_setErrorFileSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorFileSize:");
}

id objc_msgSend_setErrorURLString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorURLString:");
}

id objc_msgSend_setExpectedOffGridCapableDeliveries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpectedOffGridCapableDeliveries:");
}

id objc_msgSend_setExpressiveSendStyleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpressiveSendStyleID:");
}

id objc_msgSend_setFailReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFailReason:");
}

id objc_msgSend_setFailed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFailed:");
}

id objc_msgSend_setFileLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileLength:");
}

id objc_msgSend_setFileTransferGUIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileTransferGUIDs:");
}

id objc_msgSend_setFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlags:");
}

id objc_msgSend_setGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGUID:");
}

id objc_msgSend_setGlobalReadReceiptSettingVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGlobalReadReceiptSettingVersion:");
}

id objc_msgSend_setGroupID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupID:");
}

id objc_msgSend_setGroupMessageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupMessageContext:");
}

id objc_msgSend_setGroupParticipantVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupParticipantVersion:");
}

id objc_msgSend_setGroupPhoto_forChat_fromID_fromAccount_session_isPhotoRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupPhoto:forChat:fromID:fromAccount:session:isPhotoRefresh:");
}

id objc_msgSend_setGuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGuid:");
}

id objc_msgSend_setHideAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHideAttachment:");
}

id objc_msgSend_setInitialTranscriptSharingItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialTranscriptSharingItem:");
}

id objc_msgSend_setInvitationPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvitationPreferences:");
}

id objc_msgSend_setIsAuxImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAuxImage:");
}

id objc_msgSend_setIsAuxVideo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAuxVideo:");
}

id objc_msgSend_setIsBeingRetried_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsBeingRetried:");
}

id objc_msgSend_setIsDelayedRichLinkBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsDelayedRichLinkBlock:");
}

id objc_msgSend_setIsGenmojiFallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsGenmojiFallback:");
}

id objc_msgSend_setIsTapToRetry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsTapToRetry:");
}

id objc_msgSend_setIsTemporaryBackwardCompatibilityAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsTemporaryBackwardCompatibilityAsset:");
}

id objc_msgSend_setLastMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastMessage:");
}

id objc_msgSend_setLastReplicationSinceLoadDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastReplicationSinceLoadDate:");
}

id objc_msgSend_setLatestNotificationIDSTokenURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatestNotificationIDSTokenURI:");
}

id objc_msgSend_setMaxConcurrentMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentMessages:");
}

id objc_msgSend_setMeCardUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeCardUpdated:");
}

id objc_msgSend_setMessageDeliveryContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageDeliveryContext:");
}

id objc_msgSend_setMessageGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageGUID:");
}

id objc_msgSend_setMessageSummaryInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageSummaryInfo:");
}

id objc_msgSend_setMessagesGroupName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessagesGroupName:");
}

id objc_msgSend_setMessagesGroupUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessagesGroupUUID:");
}

id objc_msgSend_setMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetadata:");
}

id objc_msgSend_setName_fromName_forChat_fromID_fromAccount_messageID_session_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:fromName:forChat:fromID:fromAccount:messageID:session:completionBlock:");
}

id objc_msgSend_setNeedsRelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsRelay:");
}

id objc_msgSend_setNetworkDataAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkDataAvailable:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOwner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOwner:");
}

id objc_msgSend_setPassThroughLockdownHandlerForCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassThroughLockdownHandlerForCommand:");
}

id objc_msgSend_setPayloadData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadData:");
}

id objc_msgSend_setPendingENGroupParticipantUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingENGroupParticipantUpdate:");
}

id objc_msgSend_setPendingRemoteFileRequests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingRemoteFileRequests:");
}

id objc_msgSend_setPresentationMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentationMode:");
}

id objc_msgSend_setReadReceiptsGloballyEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadReceiptsGloballyEnabled:");
}

id objc_msgSend_setRecoverableErrorForTransfer_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecoverableErrorForTransfer:error:");
}

id objc_msgSend_setRefreshDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRefreshDate:");
}

id objc_msgSend_setReplyToGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReplyToGUID:");
}

id objc_msgSend_setRequestContentHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestContentHeaders:");
}

id objc_msgSend_setRequestContentVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestContentVersion:");
}

id objc_msgSend_setResponseContentBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseContentBody:");
}

id objc_msgSend_setResponseContentHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseContentHeaders:");
}

id objc_msgSend_setResponseContentVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseContentVersion:");
}

id objc_msgSend_setRetractedPartIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetractedPartIndexes:");
}

id objc_msgSend_setRetryToParticipant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetryToParticipant:");
}

id objc_msgSend_setRoomName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRoomName:");
}

id objc_msgSend_setScheduleState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheduleState:");
}

id objc_msgSend_setScheduleType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheduleType:");
}

id objc_msgSend_setScheduledMessageLastModifiedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheduledMessageLastModifiedTime:");
}

id objc_msgSend_setSendDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendDate:");
}

id objc_msgSend_setSendDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendDuration:");
}

id objc_msgSend_setSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSender:");
}

id objc_msgSend_setService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setService:");
}

id objc_msgSend_setSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSignature:");
}

id objc_msgSend_setStandardHandler_forCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStandardHandler:forCommand:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStickerUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStickerUserInfo:");
}

id objc_msgSend_setSubject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubject:");
}

id objc_msgSend_setSwyAppName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwyAppName:");
}

id objc_msgSend_setSwyBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwyBundleID:");
}

id objc_msgSend_setTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTime:");
}

id objc_msgSend_setTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopic:");
}

id objc_msgSend_setTranscoderUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTranscoderUserInfo:");
}

id objc_msgSend_setTranscriptSharingMessageType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTranscriptSharingMessageType:");
}

id objc_msgSend_setTransferError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransferError:");
}

id objc_msgSend_setTransferredFilename_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransferredFilename:");
}

id objc_msgSend_setTransferredName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransferredName:");
}

id objc_msgSend_setTypingIndicatorIcon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTypingIndicatorIcon:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setValue_forDomain_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forDomain:forKey:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setWantsResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWantsResponse:");
}

id objc_msgSend_setWatchesScreenLightState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWatchesScreenLightState:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithSet:");
}

id objc_msgSend_sharedAccountController(void *a1, const char *a2, ...)
{
  return _[a1 sharedAccountController];
}

id objc_msgSend_sharedApplicationData(void *a1, const char *a2, ...)
{
  return _[a1 sharedApplicationData];
}

id objc_msgSend_sharedController(void *a1, const char *a2, ...)
{
  return _[a1 sharedController];
}

id objc_msgSend_sharedCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 sharedCoordinator];
}

id objc_msgSend_sharedFeatureFlags(void *a1, const char *a2, ...)
{
  return _[a1 sharedFeatureFlags];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedInstanceForBagType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstanceForBagType:");
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedManager];
}

id objc_msgSend_sharedProvider(void *a1, const char *a2, ...)
{
  return _[a1 sharedProvider];
}

id objc_msgSend_sharedTracker(void *a1, const char *a2, ...)
{
  return _[a1 sharedTracker];
}

id objc_msgSend_shouldBlackholeGroupMessageFromSender_toRecipient_ifRecipientIsCandidate_withOtherParticipants_givenHistory_forEligibleAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldBlackholeGroupMessageFromSender:toRecipient:ifRecipientIsCandidate:withOtherParticipants:givenHistory:forEligibleAccounts:");
}

id objc_msgSend_shouldBlackholeMessageFromSender_toRecipient_ifRecipientIsCandidate_givenHistory_forEligibleAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldBlackholeMessageFromSender:toRecipient:ifRecipientIsCandidate:givenHistory:forEligibleAccounts:");
}

id objc_msgSend_shouldCompressGroupPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCompressGroupPayload:");
}

id objc_msgSend_shouldDeactivate(void *a1, const char *a2, ...)
{
  return _[a1 shouldDeactivate];
}

id objc_msgSend_shouldDisplayAttachmentDownloadFailure(void *a1, const char *a2, ...)
{
  return _[a1 shouldDisplayAttachmentDownloadFailure];
}

id objc_msgSend_shouldDisplayRemoteDecryptionFailure(void *a1, const char *a2, ...)
{
  return _[a1 shouldDisplayRemoteDecryptionFailure];
}

id objc_msgSend_shouldDownloadGroupPhoto_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldDownloadGroupPhoto:");
}

id objc_msgSend_shouldDropDueToGroupSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldDropDueToGroupSize:");
}

id objc_msgSend_shouldEnablePreviewTranscodingQualityForTransfer_isSending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldEnablePreviewTranscodingQualityForTransfer:isSending:");
}

id objc_msgSend_shouldFastSend(void *a1, const char *a2, ...)
{
  return _[a1 shouldFastSend];
}

id objc_msgSend_shouldInferRecoverableDeleteForCommandDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldInferRecoverableDeleteForCommandDictionary:");
}

id objc_msgSend_shouldRefreshTTLForGroupPhoto_chatGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRefreshTTLForGroupPhoto:chatGUID:");
}

id objc_msgSend_shouldSendBackwardsCompatibleMessageForBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSendBackwardsCompatibleMessageForBundleID:");
}

id objc_msgSend_shouldSendLowResolutionOnly(void *a1, const char *a2, ...)
{
  return _[a1 shouldSendLowResolutionOnly];
}

id objc_msgSend_shouldSendMeCard(void *a1, const char *a2, ...)
{
  return _[a1 shouldSendMeCard];
}

id objc_msgSend_shouldSendPartIndexesInMessageBody(void *a1, const char *a2, ...)
{
  return _[a1 shouldSendPartIndexesInMessageBody];
}

id objc_msgSend_shouldSendReadReceiptsForChat_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSendReadReceiptsForChat:style:");
}

id objc_msgSend_shouldSendTypingIndicator(void *a1, const char *a2, ...)
{
  return _[a1 shouldSendTypingIndicator];
}

id objc_msgSend_shouldUploadGroupPhoto_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUploadGroupPhoto:");
}

id objc_msgSend_signature(void *a1, const char *a2, ...)
{
  return _[a1 signature];
}

id objc_msgSend_smsHandshakeState(void *a1, const char *a2, ...)
{
  return _[a1 smsHandshakeState];
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_stableGroupID(void *a1, const char *a2, ...)
{
  return _[a1 stableGroupID];
}

id objc_msgSend_stageMessageWrapperBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stageMessageWrapperBlock:");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_startFinalizingTransfer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startFinalizingTransfer:");
}

id objc_msgSend_startTrackingHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startTrackingHandle:");
}

id objc_msgSend_startTransfer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startTransfer:");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_stickerUserInfo(void *a1, const char *a2, ...)
{
  return _[a1 stickerUserInfo];
}

id objc_msgSend_storeAttachment_associateWithMessageWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeAttachment:associateWithMessageWithGUID:");
}

id objc_msgSend_storeAttachment_associateWithMessageWithGUID_chatGUID_storeAtExternalLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeAttachment:associateWithMessageWithGUID:chatGUID:storeAtExternalLocation:");
}

id objc_msgSend_storeBreadcrumbAndSetConsumedPayloadsForNewMessageItemIfNecessary_inChatWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeBreadcrumbAndSetConsumedPayloadsForNewMessageItemIfNecessary:inChatWithIdentifier:");
}

id objc_msgSend_storeChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeChat:");
}

id objc_msgSend_storeEditedMessage_editedPartIndex_editType_previousMessage_chat_updatedAssociatedMessageItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeEditedMessage:editedPartIndex:editType:previousMessage:chat:updatedAssociatedMessageItems:");
}

id objc_msgSend_storeEditedMessage_editedPartIndexes_editType_previousMessage_chat_updatedAssociatedMessageItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeEditedMessage:editedPartIndexes:editType:previousMessage:chat:updatedAssociatedMessageItems:");
}

id objc_msgSend_storeItem_forceReplace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeItem:forceReplace:");
}

id objc_msgSend_storeMessage_forceReplace_modifyError_modifyFlags_flagMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:");
}

id objc_msgSend_storeMessage_forceReplace_modifyError_modifyFlags_flagMask_updateMessageCache_calculateUnreadCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:updateMessageCache:calculateUnreadCount:");
}

id objc_msgSend_storeRepositionedStickerLocally_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeRepositionedStickerLocally:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _[a1 string];
}

id objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAddingPercentEncodingWithAllowedCharacters:");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathExtension:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingLastPathComponent];
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingPathExtension];
}

id objc_msgSend_stringByExpandingTildeInPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByExpandingTildeInPath];
}

id objc_msgSend_stringByRemovingCharactersFromSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByRemovingCharactersFromSet:");
}

id objc_msgSend_stringByRemovingURLEscapes(void *a1, const char *a2, ...)
{
  return _[a1 stringByRemovingURLEscapes];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByResolvingAndStandardizingPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByResolvingAndStandardizingPath];
}

id objc_msgSend_stringGUID(void *a1, const char *a2, ...)
{
  return _[a1 stringGUID];
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_style(void *a1, const char *a2, ...)
{
  return _[a1 style];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subject(void *a1, const char *a2, ...)
{
  return _[a1 subject];
}

id objc_msgSend_submitCloudKitMetricWithOperationGroupName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitCloudKitMetricWithOperationGroupName:");
}

id objc_msgSend_subscriptionValidationToken(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionValidationToken];
}

id objc_msgSend_substringRecordIDForNickname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringRecordIDForNickname:");
}

id objc_msgSend_success(void *a1, const char *a2, ...)
{
  return _[a1 success];
}

id objc_msgSend_supportsCapability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsCapability:");
}

id objc_msgSend_supportsFaceTime(void *a1, const char *a2, ...)
{
  return _[a1 supportsFaceTime];
}

id objc_msgSend_syndicatedItemType(void *a1, const char *a2, ...)
{
  return _[a1 syndicatedItemType];
}

id objc_msgSend_syndicationActionType(void *a1, const char *a2, ...)
{
  return _[a1 syndicationActionType];
}

id objc_msgSend_syndicationStartDate(void *a1, const char *a2, ...)
{
  return _[a1 syndicationStartDate];
}

id objc_msgSend_targetSize(void *a1, const char *a2, ...)
{
  return _[a1 targetSize];
}

id objc_msgSend_tearDownSessionForChatIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tearDownSessionForChatIdentifier:");
}

id objc_msgSend_threadIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 threadIdentifier];
}

id objc_msgSend_time(void *a1, const char *a2, ...)
{
  return _[a1 time];
}

id objc_msgSend_timeDelivered(void *a1, const char *a2, ...)
{
  return _[a1 timeDelivered];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_totalBytes(void *a1, const char *a2, ...)
{
  return _[a1 totalBytes];
}

id objc_msgSend_trackAttachmentDownloadLimitExceeded_limitSize_fileSize_qualityType_isSticker_lowQualityModeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackAttachmentDownloadLimitExceeded:limitSize:fileSize:qualityType:isSticker:lowQualityModeEnabled:");
}

id objc_msgSend_trackAttachmentDownloadSuccess_limitType_limitSize_qualityType_isSticker_lowQualityModeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackAttachmentDownloadSuccess:limitType:limitSize:qualityType:isSticker:lowQualityModeEnabled:");
}

id objc_msgSend_trackEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackEvent:");
}

id objc_msgSend_trackEvent_withDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackEvent:withDictionary:");
}

id objc_msgSend_trackSpamEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackSpamEvent:");
}

id objc_msgSend_trackiMessageTranscodeFailureWithReason_sourceFile_sizeLimits_isSticker_lowQualityModeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackiMessageTranscodeFailureWithReason:sourceFile:sizeLimits:isSticker:lowQualityModeEnabled:");
}

id objc_msgSend_trackiMessageTranscodeWithReason_sourceFile_highQualityFile_lowQualityFile_sizeLimits_isSticker_transcoded_lowQualityModeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackiMessageTranscodeWithReason:sourceFile:highQualityFile:lowQualityFile:sizeLimits:isSticker:transcoded:lowQualityModeEnabled:");
}

id objc_msgSend_transcodeFallbackFileTransferContents_utiType_allowUnfilteredUTIs_target_sizes_commonCapabilities_maxDimension_transcoderUserInfo_representations_isLQMEnabled_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transcodeFallbackFileTransferContents:utiType:allowUnfilteredUTIs:target:sizes:commonCapabilities:maxDimension:transcoderUserInfo:representations:isLQMEnabled:completionBlock:");
}

id objc_msgSend_transcodeFallbackFileTransferContents_utiType_transcoderUserInfo_sizes_commonCapabilities_representations_isLQMEnabled_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transcodeFallbackFileTransferContents:utiType:transcoderUserInfo:sizes:commonCapabilities:representations:isLQMEnabled:completionBlock:");
}

id objc_msgSend_transcodeFallbackFileTransferPayloadData_balloonBundleID_attachments_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transcodeFallbackFileTransferPayloadData:balloonBundleID:attachments:completionBlock:");
}

id objc_msgSend_transcodeFileTransferContents_utiType_isSticker_allowUnfilteredUTIs_target_sizes_commonCapabilities_maxDimension_transcoderUserInfo_representations_isLQMEnabled_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transcodeFileTransferContents:utiType:isSticker:allowUnfilteredUTIs:target:sizes:commonCapabilities:maxDimension:transcoderUserInfo:representations:isLQMEnabled:completionBlock:");
}

id objc_msgSend_transcodeFileTransferContents_utiType_isSticker_transcoderUserInfo_sizes_commonCapabilities_representations_isLQMEnabled_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transcodeFileTransferContents:utiType:isSticker:transcoderUserInfo:sizes:commonCapabilities:representations:isLQMEnabled:completionBlock:");
}

id objc_msgSend_transcodePayloadData_balloonBundleID_attachments_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transcodePayloadData:balloonBundleID:attachments:completionBlock:");
}

id objc_msgSend_transcoderUserInfo(void *a1, const char *a2, ...)
{
  return _[a1 transcoderUserInfo];
}

id objc_msgSend_transcribeAudioForAudioTransferURL_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transcribeAudioForAudioTransferURL:withCompletion:");
}

id objc_msgSend_transcribeMessageIfNeeded_forTransfer_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transcribeMessageIfNeeded:forTransfer:completion:");
}

id objc_msgSend_transferDataURL(void *a1, const char *a2, ...)
{
  return _[a1 transferDataURL];
}

id objc_msgSend_transferError(void *a1, const char *a2, ...)
{
  return _[a1 transferError];
}

id objc_msgSend_transferForGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transferForGUID:");
}

id objc_msgSend_transferId(void *a1, const char *a2, ...)
{
  return _[a1 transferId];
}

id objc_msgSend_transferState(void *a1, const char *a2, ...)
{
  return _[a1 transferState];
}

id objc_msgSend_transferredFilename(void *a1, const char *a2, ...)
{
  return _[a1 transferredFilename];
}

id objc_msgSend_transferredName(void *a1, const char *a2, ...)
{
  return _[a1 transferredName];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeWithIdentifier:");
}

id objc_msgSend_typingIndicatorIcon(void *a1, const char *a2, ...)
{
  return _[a1 typingIndicatorIcon];
}

id objc_msgSend_unformattedID(void *a1, const char *a2, ...)
{
  return _[a1 unformattedID];
}

id objc_msgSend_uniqueID(void *a1, const char *a2, ...)
{
  return _[a1 uniqueID];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_updateCollaborationMetadata_forMessageGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCollaborationMetadata:forMessageGUID:");
}

id objc_msgSend_updateEngramID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEngramID:");
}

id objc_msgSend_updateEngroupCreationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEngroupCreationDate:");
}

id objc_msgSend_updateFaceTimeGroupPhoto_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFaceTimeGroupPhoto:");
}

id objc_msgSend_updateGroup_withParticipants_sharedApplicationData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGroup:withParticipants:sharedApplicationData:completion:");
}

id objc_msgSend_updateGroupPhoto_forChat_messageGuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGroupPhoto:forChat:messageGuid:");
}

id objc_msgSend_updateGroupPhotoGuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGroupPhotoGuid:");
}

id objc_msgSend_updateGroupPhotoUploadFailureCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGroupPhotoUploadFailureCount:");
}

id objc_msgSend_updateIsBlackholed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateIsBlackholed:");
}

id objc_msgSend_updateIsFiltered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateIsFiltered:");
}

id objc_msgSend_updateLastAddressedHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLastAddressedHandle:");
}

id objc_msgSend_updateLastAddressedSIMID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLastAddressedSIMID:");
}

id objc_msgSend_updateLastSeenMessageGuidIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLastSeenMessageGuidIfNeeded:");
}

id objc_msgSend_updateLatestActiveDestination_ForHandle_incomingType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLatestActiveDestination:ForHandle:incomingType:");
}

id objc_msgSend_updateMessageHandshakeState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMessageHandshakeState:");
}

id objc_msgSend_updateNicknameData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNicknameData:");
}

id objc_msgSend_updatePersonCentricIDForHandlesInChatWithMessage_fromIdentifier_personCentricID_chat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePersonCentricIDForHandlesInChatWithMessage:fromIdentifier:personCentricID:chat:");
}

id objc_msgSend_updateProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateProperties:");
}

id objc_msgSend_updateReceivedBlackholeError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateReceivedBlackholeError:");
}

id objc_msgSend_updateSMSHandshakeState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSMSHandshakeState:");
}

id objc_msgSend_updateShouldForceToSMS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateShouldForceToSMS:");
}

id objc_msgSend_updateTimerForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTimerForTimeInterval:");
}

id objc_msgSend_updateTransfer_currentBytes_totalBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTransfer:currentBytes:totalBytes:");
}

id objc_msgSend_uploadGroupPhotoForChat_fileTransferGUID_itemGUID_callerURI_idsAccount_isPhotoRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadGroupPhotoForChat:fileTransferGUID:itemGUID:callerURI:idsAccount:isPhotoRefresh:");
}

id objc_msgSend_useCount(void *a1, const char *a2, ...)
{
  return _[a1 useCount];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_valueForCapability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForCapability:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_verifyOffGridSubscriptionMatchesSubscriptionValidationToken_encryptionValidationToken_receivedByHandleID_fromHandleID_messageDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyOffGridSubscriptionMatchesSubscriptionValidationToken:encryptionValidationToken:receivedByHandleID:fromHandleID:messageDate:");
}

id objc_msgSend_verifyPersonalSubscriptionMatchesSubscriptionValidationToken_encryptionValidationToken_receivedByHandleID_fromHandleID_messageDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyPersonalSubscriptionMatchesSubscriptionValidationToken:encryptionValidationToken:receivedByHandleID:fromHandleID:messageDate:");
}

id objc_msgSend_verifyTruncatedRecordIDMatchesPersonalNickname_forChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyTruncatedRecordIDMatchesPersonalNickname:forChat:");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _[a1 version];
}

id objc_msgSend_vettedAliases(void *a1, const char *a2, ...)
{
  return _[a1 vettedAliases];
}

id objc_msgSend_wait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wait:");
}

id objc_msgSend_wantsAlphaRemoved(void *a1, const char *a2, ...)
{
  return _[a1 wantsAlphaRemoved];
}

id objc_msgSend_wasMessageDeduplicatedWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wasMessageDeduplicatedWithGUID:");
}

id objc_msgSend_wasReportedAsJunk(void *a1, const char *a2, ...)
{
  return _[a1 wasReportedAsJunk];
}

id objc_msgSend_wiFiActiveAndReachable(void *a1, const char *a2, ...)
{
  return _[a1 wiFiActiveAndReachable];
}

id objc_msgSend_writeAccountDefaults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeAccountDefaults:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_writeToURL_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:atomically:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}