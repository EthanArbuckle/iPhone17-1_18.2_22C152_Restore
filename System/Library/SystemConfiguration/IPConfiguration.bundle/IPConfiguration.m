void sub_37C4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  CFStringRef v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;

  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    v0 = _os_log_pack_size();
    __chkstk_darwin(v0);
    __error();
    v1 = _os_log_pack_fill();
    *(_DWORD *)v1 = 136315138;
    *(void *)(v1 + 4) = "ActiveDuringSleepProcess";
    __SC_log_send();
  }
  v2 = sub_5B24(&unk_70150);
  if (v2 >= 1)
  {
    v3 = v2;
    v4 = 0;
    v5 = (const __CFString *)kSCEntNetInterfaceActiveDuringSleepSupported;
    do
    {
      v6 = sub_5B4C(&unk_70150, v4);
      if (*(_DWORD *)(v6 + 144))
      {
        v7 = v6;
        *(_DWORD *)(v6 + 144) = 0;
        v10 = *(_DWORD *)(v6 + 148);
        v11 = 1;
        sub_483C(v6 + 24, 17, (__CFDictionary *)&v10);
        if (*(_DWORD *)(v7 + 148)) {
          v8 = v11 == 0;
        }
        else {
          v8 = 1;
        }
        v9 = !v8;
        sub_5D54(v7, v5, v9);
      }
      v4 = (v4 + 1);
    }
    while (v3 != v4);
  }
}

uint64_t timer_callout_set_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  if (result)
  {
    uint64_t v11 = result;
    sub_3BD4(result);
    if (a2)
    {
      *(void *)(v11 + 8) = a2;
      *(void *)(v11 + 16) = a3;
      *(void *)(v11 + 24) = a4;
      *(void *)(v11 + 32) = a5;
      *(_DWORD *)(v11 + 48) = dword_70230;
      *(_DWORD *)(v11 + 52) = 1;
      v12 = *(NSObject **)(v11 + 40);
      if (v12)
      {
        dispatch_time_t v13 = dispatch_time(0, (unint64_t)(a6 * 1000000000.0));
        dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0);
        if (*(_DWORD *)(v11 + 56))
        {
          dispatch_resume(*(dispatch_object_t *)(v11 + 40));
          *(_DWORD *)(v11 + 56) = 0;
        }
      }
      else
      {
        v14 = sub_2EC08();
        v15 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v14);
        *(void *)(v11 + 40) = v15;
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 0x40000000;
        handler[2] = sub_BEC8;
        handler[3] = &unk_69008;
        handler[4] = v11;
        dispatch_source_set_event_handler(v15, handler);
        v16 = *(NSObject **)(v11 + 40);
        dispatch_time_t v17 = dispatch_time(0, (unint64_t)(a6 * 1000000000.0));
        dispatch_source_set_timer(v16, v17, 0xFFFFFFFFFFFFFFFFLL, 0);
        dispatch_activate(*(dispatch_object_t *)(v11 + 40));
      }
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v18 = _os_log_pack_size();
        __chkstk_darwin(v18);
        __error();
        uint64_t v19 = _os_log_pack_fill();
        uint64_t v20 = *(void *)v11;
        *(_DWORD *)uint64_t v19 = 136315394;
        *(void *)(v19 + 4) = v20;
        *(_WORD *)(v19 + 12) = 2048;
        *(double *)(v19 + 14) = a6;
        __SC_log_send();
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_3BD4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 48) = dword_70230;
  v2 = *(NSObject **)(a1 + 40);
  if (v2 && !*(_DWORD *)(a1 + 56))
  {
    dispatch_suspend(v2);
    *(_DWORD *)(a1 + 56) = 1;
  }
  *(_DWORD *)(a1 + 52) = 0;
}

void sub_3C24(uint64_t a1)
{
  if (sub_3EC0(a1 + 24)) {
    int v2 = 1;
  }
  else {
    int v2 = sub_3EC0(a1 + 56) != 0;
  }
  int v3 = (*(_DWORD *)a1 >> 1) & 1;
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    uint64_t v6 = nullsub_1(*(void *)(a1 + 8));
    v7 = "busy";
    *(_DWORD *)uint64_t v5 = 136315906;
    *(void *)(v5 + 4) = "IFStateProcessBusy";
    if (v3) {
      v8 = "busy";
    }
    else {
      v8 = "not busy";
    }
    *(void *)(v5 + 14) = v6;
    *(_WORD *)(v5 + 12) = 2080;
    *(_WORD *)(v5 + 22) = 2080;
    if (!v2) {
      v7 = "not busy";
    }
    *(void *)(v5 + 24) = v8;
    *(_WORD *)(v5 + 32) = 2080;
    *(void *)(v5 + 34) = v7;
    __SC_log_send();
  }
  if (v2 != v3)
  {
    *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFFFFFD | (2 * (v2 & 1));
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t v11 = nullsub_1(*(void *)(a1 + 8));
      v12 = "busy";
      if (!v2) {
        v12 = "not busy";
      }
      *(_DWORD *)uint64_t v10 = 136315394;
      *(void *)(v10 + 4) = v11;
      *(_WORD *)(v10 + 12) = 2080;
      *(void *)(v10 + 14) = v12;
      __SC_log_send();
    }
    sub_5D54(a1, @"IPConfigurationBusy", (*(_DWORD *)a1 >> 1) & 1);
  }
}

uint64_t sub_3EC0(uint64_t a1)
{
  if ((int)((uint64_t (*)(void))sub_5B24)() < 1) {
    return 0;
  }
  uint64_t v2 = 0;
  while (!*(_DWORD *)(sub_5B4C(a1, v2) + 72))
  {
    uint64_t v2 = (v2 + 1);
    if ((int)v2 >= (int)sub_5B24(a1)) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_3F24(void *a1)
{
  uint64_t result = sub_BA78();
  if (*((_DWORD *)a1 + 2))
  {
    uint64_t v3 = result;
    int v4 = *(_DWORD *)(result + 40);
    if (v4 <= 0)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v10 = _os_log_pack_size();
        __chkstk_darwin(v10);
        __error();
        uint64_t v11 = _os_log_pack_fill();
        uint64_t v12 = nullsub_1(*a1);
        int v13 = *(_DWORD *)(v3 + 40);
        *(_DWORD *)uint64_t v11 = 136315394;
        *(void *)(v11 + 4) = v12;
        *(_WORD *)(v11 + 12) = 1024;
        *(_DWORD *)(v11 + 14) = v13;
        return __SC_log_send();
      }
    }
    else
    {
      *(_DWORD *)(result + 40) = v4 - 1;
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v5 = _os_log_pack_size();
        __chkstk_darwin(v5);
        __error();
        uint64_t v6 = _os_log_pack_fill();
        uint64_t v7 = nullsub_1(*a1);
        int v8 = *(_DWORD *)(v3 + 40);
        *(_DWORD *)uint64_t v6 = 136315394;
        *(void *)(v6 + 4) = v7;
        *(_WORD *)(v6 + 12) = 1024;
        *(_DWORD *)(v6 + 14) = v8;
        uint64_t result = __SC_log_send();
      }
      *((_DWORD *)a1 + 2) = 0;
      if (!*(_DWORD *)(v3 + 40))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v9 = _os_log_pack_size();
          __chkstk_darwin(v9);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send();
        }
        return timer_set_relative(*(void *)(v3 + 48), 1, 0, (uint64_t)sub_11DD4, v3, 0, 0);
      }
    }
  }
  return result;
}

uint64_t sub_4220()
{
  return qword_702E0;
}

void sub_422C(const __CFArray *a1)
{
  v32[0] = 0;
  v32[1] = 0;
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v3 = 136315138;
    *(void *)(v3 + 4) = "DisableUntilNeededProcess";
    __SC_log_send();
  }
  sub_9140(v32);
  int v4 = sub_5B24(&unk_70150);
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4;
    do
    {
      uint64_t v7 = (_DWORD *)sub_5B4C(&unk_70150, v5);
      int v33 = 0;
      *v7 &= ~4u;
      unsigned int v8 = sub_46D0((uint64_t)(v7 + 6), a1, &v33);
      if (v33) {
        *v7 |= 4u;
      }
      unsigned int v9 = sub_46D0((uint64_t)(v7 + 14), a1, &v33);
      if (v33) {
        *v7 |= 4u;
      }
      if (v8 >= v9) {
        unsigned int v10 = v9;
      }
      else {
        unsigned int v10 = v8;
      }
      v7[41] = v10;
      int v11 = sub_5B08((uint64_t)v32);
      if (v11 < 1)
      {
LABEL_16:
        sub_9178((uint64_t)v32, (uint64_t)v7);
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = v11;
        while (v7[41] >= *(_DWORD *)(sub_5B28((uint64_t)v32, v12) + 164))
        {
          if (v13 == ++v12) {
            goto LABEL_16;
          }
        }
        sub_909C((uint64_t)v32, (uint64_t)v7, v12);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  int v14 = sub_5B08((uint64_t)v32);
  if (v14 >= 1)
  {
    char v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = v14;
    uint64_t v18 = &off_70000;
    do
    {
      uint64_t v19 = sub_5B28((uint64_t)v32, v16);
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)(v19 + 8);
      if (*((_DWORD *)v18 + 48)
        && *(_DWORD *)(v19 + 156)
        && (*(_DWORD *)(v19 + 160) ? (BOOL v22 = v15 == 0) : (BOOL v22 = 1), !v22))
      {
        if (!*(_DWORD *)(v19 + 152))
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v28 = _os_log_pack_size();
            __chkstk_darwin(v28);
            __error();
            uint64_t v29 = _os_log_pack_fill();
            uint64_t v30 = nullsub_1(v21);
            *(_DWORD *)uint64_t v29 = 136315138;
            *(void *)(v29 + 4) = v30;
            __SC_log_send();
            uint64_t v18 = &off_70000;
          }
          v31 = (const char *)nullsub_1(v21);
          sub_35878(v31, 0);
          *(_DWORD *)(v20 + 152) = 1;
        }
      }
      else if (*(_DWORD *)(v19 + 152))
      {
        *(_DWORD *)(v19 + 152) = 0;
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v23 = _os_log_pack_size();
          __chkstk_darwin(v23);
          __error();
          uint64_t v24 = _os_log_pack_fill();
          uint64_t v25 = nullsub_1(v21);
          *(_DWORD *)uint64_t v24 = 136315138;
          *(void *)(v24 + 4) = v25;
          __SC_log_send();
          uint64_t v18 = &off_70000;
        }
        v26 = (const char *)nullsub_1(v21);
        sub_35878(v26, 1);
        if ((int)sub_5B24(v20 + 24) >= 1)
        {
          v27 = (const char *)nullsub_1(v21);
          sub_35D90(v27, 1);
        }
        if ((int)sub_5B24(v20 + 56) >= 1) {
          sub_260AC(v20, 1);
        }
      }
      if ((*(unsigned char *)v20 & 4) != 0) {
        char v15 = 1;
      }
      ++v16;
    }
    while (v17 != v16);
  }
  sub_9148((uint64_t)v32);
}

uint64_t sub_46D0(uint64_t a1, const __CFArray *a2, _DWORD *a3)
{
  uint64_t v6 = 1048577;
  *a3 = 0;
  int v7 = sub_5B24(a1);
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v7;
    do
    {
      uint64_t v10 = sub_5B4C(a1, v8);
      if (!*(void *)(v10 + 48))
      {
        int v11 = (_DWORD *)v10;
        unsigned int v12 = sub_479C(v10, a2);
        if (v12 >= v6) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v12;
        }
        int v13 = v11[6];
        if (v13 != 261 && v13 != 517 && v11[10] && !v11[7]) {
          *a3 = 1;
        }
      }
      ++v8;
    }
    while (v9 != v8);
  }
  return v6;
}

CFIndex sub_479C(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v3 = *(const void **)a1;
  if ((**(unsigned char **)(a1 + 16) & 0x10) != 0 && *(_DWORD *)(a1 + 24) == 259) {
    return 0;
  }
  CFIndex v4 = 0x100000;
  if (theArray && v3)
  {
    int Count = CFArrayGetCount(theArray);
    if (Count < 1)
    {
      return 0x100000;
    }
    else
    {
      CFIndex v4 = 0;
      uint64_t v6 = Count;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
        if (CFEqual(v3, ValueAtIndex)) {
          break;
        }
        if (v6 == ++v4) {
          return 0x100000;
        }
      }
    }
  }
  return v4;
}

uint64_t sub_483C(uint64_t a1, uint64_t a2, __CFDictionary *a3)
{
  uint64_t result = sub_5B24(a1);
  if ((int)result >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = sub_5B4C(a1, v7);
      sub_48A8(v8, a2, a3);
      uint64_t v7 = (v7 + 1);
      uint64_t result = sub_5B24(a1);
    }
    while ((int)v7 < (int)result);
  }
  return result;
}

uint64_t sub_48A8(uint64_t a1, uint64_t a2, __CFDictionary *a3)
{
  int v6 = *(_DWORD *)(a1 + 24);
  uint64_t v7 = sub_5858(v6);
  if (v7)
  {
    v7(a1, a2, a3);
    return 0;
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v10 = 67109376;
      *(_DWORD *)(v10 + 4) = a2;
      *(_WORD *)(v10 + 8) = 1024;
      *(_DWORD *)(v10 + 10) = v6;
      __SC_log_send();
    }
    return 6;
  }
}

void sub_4A0C(_DWORD *a1, int a2, uint64_t a3)
{
  double current_time = timer_get_current_time();
  double v66 = current_time;
  uint64_t v7 = sub_557C((uint64_t)a1);
  uint64_t v8 = sub_8B80((uint64_t)a1);
  if (a2 == 5)
  {
    LODWORD(v67[0]) = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    unsigned int v63 = 0;
    unsigned int v19 = sub_17E24((uint64_t *)a3, *(_DWORD *)(v7 + 2332), v8, (unsigned int *)&v65, (_DWORD *)&v64 + 1);
    int v20 = HIDWORD(v64);
    if (v19) {
      BOOL v21 = HIDWORD(v64) == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21 && v65 == 2)
    {
      if (dword_70138
        && sub_1CEF4((uint64_t)a1)
        && !*(_DWORD *)(v7 + 44)
        && sub_1A034(a3 + 16, v67))
      {
        sub_1A098(a1, 0, v67);
      }
      else if ((*(_DWORD *)(*(void *)a3 + 16) + 1) >= 2)
      {
        int v23 = dword_70018;
        dhcp_get_lease_from_options(a3 + 16, (unsigned int *)&v65 + 1, (unsigned int *)&v64, &v63);
        int v24 = sub_54F8C(a3 + 16, (unsigned __int8 *)off_70010, dword_70018);
        unsigned int v25 = *(_DWORD *)(*(void *)a3 + 16);
        unsigned int v26 = bswap32(v25);
        if ((unsigned __int16)v25 == 65193) {
          int v27 = 0;
        }
        else {
          int v27 = 1000;
        }
        BOOL v28 = v26 >> 20 == 2753 || HIBYTE(v26) == 10;
        unsigned int v29 = HIWORD(v26);
        if (v28 || v29 == 49320) {
          int v27 = 100;
        }
        unsigned int v31 = v27 + v24;
        if (!*(_DWORD *)(v7 + 1724) || v31 > *(_DWORD *)(v7 + 1728))
        {
          sub_1BAC0((uint64_t)a1);
          sub_54A34(v7 + 208);
          memmove((void *)(v7 + 224), *(const void **)a3, *(int *)(a3 + 8));
          unsigned int v32 = *(_DWORD *)(a3 + 8);
          *(_DWORD *)(v7 + 1724) = v32;
          *(_DWORD *)(v7 + 1728) = v31;
          sub_54D30((char **)(v7 + 208), v7 + 224, v32, 0);
          *(_DWORD *)(v7 + 1732) = *(_DWORD *)(*(void *)a3 + 16);
          *(_DWORD *)(v7 + 1736) = v20;
          sub_18A6C((uint64_t)a1, (uint64_t)"INIT", HIDWORD(v65), v64, v63, current_time);
          if (v31 == v23 + 1000 || sub_1A31C(v8))
          {
LABEL_57:
            sub_18F04(a1, 0, 0);
            return;
          }
          if (!*(_DWORD *)(v7 + 44))
          {
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v33 = _os_log_pack_size();
              __chkstk_darwin(v33);
              __error();
              uint64_t v34 = _os_log_pack_fill();
              uint64_t v35 = nullsub_1(v8);
              double v36 = current_time - *(double *)(v7 + 1752);
              *(_DWORD *)uint64_t v34 = 136315394;
              *(void *)(v34 + 4) = v35;
              *(_WORD *)(v34 + 12) = 2048;
              *(double *)(v34 + 14) = v36;
              __SC_log_send();
            }
            *(_DWORD *)(v7 + 44) = 1;
            timer_callout_set(*(void *)(v7 + 1760), sub_4A0C, a1, 2, 0, (double)G_gather_secs);
          }
        }
      }
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (a2) {
        return;
      }
      HIDWORD(v65) = 10974720;
      memset(v67, 0, sizeof(v67));
      int v9 = *(_DWORD *)(v7 + 1744);
      sub_18C3C((uint64_t)a1, 3u);
      *(_DWORD *)uint64_t v7 = 1;
      *(_DWORD *)(v7 + 200) = 0;
      sub_ABF0((uint64_t)a1);
      if (*(double *)(v7 + 1776) == 0.0) {
        *(double *)(v7 + 1776) = current_time;
      }
      unsigned int v10 = *(_DWORD *)(v7 + 168) != 0;
      if (sub_1CEF4((uint64_t)a1)) {
        v10 |= 2u;
      }
      int v11 = (const void *)sub_58CAC(v8);
      unsigned __int8 v12 = sub_934C(v8);
      unsigned __int8 v13 = sub_58034(v8);
      int v14 = sub_17440((char *)(v7 + 1784), 1, v11, v12, v13, *(const void **)(v7 + 24), *(_DWORD *)(v7 + 32), v10, (uint64_t *)v67);
      *(void *)(v7 + 176) = v14;
      if (!v14)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_50;
        }
        uint64_t v37 = _os_log_pack_size();
        __chkstk_darwin(v37);
        __error();
LABEL_48:
        uint64_t v39 = _os_log_pack_fill();
        uint64_t v40 = nullsub_1(v8);
        *(_DWORD *)uint64_t v39 = 136315138;
        *(void *)(v39 + 4) = v40;
        goto LABEL_49;
      }
      if (sub_55080((uint64_t)v67, 51, 4, (char *)&v65 + 4))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v15 = _os_log_pack_size();
          __chkstk_darwin(v15);
          __error();
          uint64_t v16 = _os_log_pack_fill();
          uint64_t v17 = nullsub_1(v8);
          uint64_t v18 = sub_552A0((uint64_t *)v67);
          *(_DWORD *)uint64_t v16 = 136315394;
          *(void *)(v16 + 4) = v17;
          *(_WORD *)(v16 + 12) = 2080;
          *(void *)(v16 + 14) = v18;
LABEL_49:
          __SC_log_send();
        }
LABEL_50:
        sub_13A98((uint64_t)a1, 5u);
        return;
      }
      sub_17914((uint64_t)a1, (uint64_t *)v67);
      if (sub_55080((uint64_t)v67, 255, 0, 0))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_50;
        }
        uint64_t v38 = _os_log_pack_size();
        __chkstk_darwin(v38);
        __error();
        goto LABEL_48;
      }
      unsigned int v41 = sub_55248((uint64_t)v67) + 240;
      if (v41 <= 0x12C) {
        unsigned int v41 = 300;
      }
      *(_DWORD *)(v7 + 184) = v41;
      if (v9 != 6) {
        *(double *)(v7 + 1752) = current_time;
      }
      *(_DWORD *)(v7 + 2340) = G_initial_wait_secs;
      *(_DWORD *)(v7 + 1768) = 0;
      ++*(_DWORD *)(v7 + 2332);
      *(_DWORD *)(v7 + 1728) = 0;
      *(_DWORD *)(v7 + 44) = 0;
      *(_DWORD *)(v7 + 48) = 0;
      sub_1D384((uint64_t)a1);
      bootp_client_enable_receive(*(void **)(v7 + 16), (uint64_t)sub_4A0C, (uint64_t)a1, 5);
      sub_BEF8((uint64_t)a1, 1);
    }
    if (*(_DWORD *)(v7 + 44) == 1) {
      goto LABEL_57;
    }
    int v42 = *(_DWORD *)(v7 + 1768);
    int v43 = v42 + 1;
    *(_DWORD *)(v7 + 1768) = v42 + 1;
    if (v42 >= 1)
    {
      unint64_t v44 = sub_9030((uint64_t)a1);
      if (!HIDWORD(v44) && v44)
      {
        sub_149A0((uint64_t)a1);
        return;
      }
      int v43 = *(_DWORD *)(v7 + 1768);
    }
    if (v43 > dword_70034 && !sub_5558((uint64_t)a1)) {
      sub_AC48((uint64_t)a1, 0, (uint64_t)&v66);
    }
    BOOL v45 = sub_5558((uint64_t)a1);
    int v46 = *(_DWORD *)(v7 + 1768);
    if (!v45)
    {
      if (v46 > dword_7002C && dword_70024 != 0)
      {
        sub_BEF0((uint64_t)a1, 9);
        sub_5584((uint64_t)a1, 1);
        int v46 = *(_DWORD *)(v7 + 1768);
      }
      if (v46 > dword_70030)
      {
        sub_C120((uint64_t)a1);
        int v46 = *(_DWORD *)(v7 + 1768);
      }
    }
    if (v46 <= G_max_retries + 1)
    {
      uint64_t v48 = *(void *)(v7 + 176);
      *(_DWORD *)(v48 + 4) = bswap32(*(_DWORD *)(v7 + 2332));
      *(_WORD *)(v48 + 8) = __rev16((int)(v66 - *(double *)(v7 + 1752)));
      if ((bootp_client_transmit(*(void **)(v7 + 16), 0xFFFFFFFF, 0, (unsigned __int16)word_70044, (unsigned __int16)word_70020, (void *)v48, *(unsigned int *)(v7 + 184)) & 0x80000000) != 0)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v49 = _os_log_pack_size();
          __chkstk_darwin(v49);
          __error();
          uint64_t v50 = _os_log_pack_fill();
          uint64_t v51 = nullsub_1(v8);
          *(_DWORD *)uint64_t v50 = 136315138;
          *(void *)(v50 + 4) = v51;
          __SC_log_send();
        }
      }
      uint64_t v52 = *(int *)(v7 + 2340);
      unsigned int v53 = sub_9054(0, 999999);
      int v54 = v53;
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v55 = _os_log_pack_size();
        uint64_t v61 = (uint64_t)&v61;
        __chkstk_darwin(v55);
        uint64_t v62 = v53;
        __error();
        uint64_t v56 = _os_log_pack_fill();
        uint64_t v57 = nullsub_1(v8);
        double v58 = v66 - *(double *)(v7 + 1752);
        *(_DWORD *)uint64_t v56 = 136315906;
        *(void *)(v56 + 4) = v57;
        *(_WORD *)(v56 + 12) = 2048;
        *(double *)(v56 + 14) = v58;
        *(_WORD *)(v56 + 22) = 2048;
        *(void *)(v56 + 24) = v52;
        *(_WORD *)(v56 + 32) = 1024;
        *(_DWORD *)(v56 + 34) = v53;
        int v54 = v62;
        __SC_log_send();
      }
      timer_set_relative(*(void *)(v7 + 1760), v52, v54, (uint64_t)sub_4A0C, (uint64_t)a1, 2, 0);
      int v59 = 2 * *(_DWORD *)(v7 + 2340);
      if (v59 >= G_max_wait_secs) {
        int v59 = G_max_wait_secs;
      }
      *(_DWORD *)(v7 + 2340) = v59;
    }
    else if (sub_5558((uint64_t)a1))
    {
      sub_19810(a1, 0, 0);
    }
    else
    {
      uint64_t v60 = sub_557C((uint64_t)a1);
      if (dword_70024) {
        sub_5584((uint64_t)a1, 1);
      }
      sub_ABF0((uint64_t)a1);
      sub_9028((uint64_t)a1, 9u);
      sub_BEF8((uint64_t)a1, 0);
      timer_set_relative(*(void *)(v60 + 1760), 60, 0, (uint64_t)sub_4A0C, (uint64_t)a1, 0, 0);
    }
  }
}

BOOL sub_5558(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 25) & 1) != 0 && (~*(_DWORD *)(a1 + 116) & 7) == 0;
}

uint64_t sub_557C(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

void sub_5584(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 + 88);
  if (!v4) {
    goto LABEL_5;
  }
  int v6 = *(const void **)(v4 + 48);
  if (!v6) {
    return;
  }
  uint64_t v7 = sub_5990(v3, v6, 1);
  if (v7 && v7 == (CFTypeRef *)a1)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    LODWORD(v10[0]) = 261;
    DWORD2(v10[0]) = a2;
    sub_568C(v4, (unsigned int *)v10, &v9);
  }
  else
  {
LABEL_5:
    byte_70180 = 1;
    uint64_t v8 = qword_701B0;
    dispatch_source_merge_data(v8, 1uLL);
  }
}

uint64_t sub_568C(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v15 = 0;
  if ((*((unsigned char *)a2 + 1) & 2) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (sub_5B24(v6 + 56) == 1)
    {
      if (a2[8] != (HIWORD(*(_DWORD *)v6) & 1)
        || (*(void *)(a2 + 9) == *(void *)(v6 + 120)
          ? (BOOL v7 = *(void *)(a2 + 11) == *(void *)(v6 + 128))
          : (BOOL v7 = 0),
            !v7))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        uint64_t result = __SC_log_enabled();
        if (result)
        {
          uint64_t v9 = _os_log_pack_size();
          __chkstk_darwin(v9);
          __error();
          uint64_t v10 = _os_log_pack_fill();
          uint64_t v11 = nullsub_1(*(void *)(v6 + 8));
          *(_DWORD *)uint64_t v10 = 136315138;
          *(void *)(v10 + 4) = v11;
          __SC_log_send();
          int v12 = 1;
          uint64_t result = 0;
        }
        else
        {
          int v12 = 1;
        }
        goto LABEL_12;
      }
    }
  }
  *a3 = 0;
  unsigned __int8 v13 = (uint64_t (*)(uint64_t, uint64_t, unsigned int **))sub_5858(*a2);
  if (v13)
  {
    int v14 = a2 + 2;
    LODWORD(v15) = 0;
    uint64_t result = v13(a1, 7, &v14);
    int v12 = v15;
LABEL_12:
    *a3 = v12;
    return result;
  }
  return 7;
}

uint64_t (*sub_5858(int a1))(uint64_t a1, int a2, __CFDictionary *a3)
{
  if (!v2 & v1)
  {
    switch(a1)
    {
      case 513:
        BOOL v3 = dword_700C4 == 0;
        uint64_t v4 = (uint64_t (*)(uint64_t, int, __CFDictionary *))sub_42408;
        goto LABEL_11;
      case 514:
      case 515:
        BOOL v3 = dword_700C4 == 0;
        uint64_t v4 = (uint64_t (*)(uint64_t, int, __CFDictionary *))sub_3C380;
        goto LABEL_11;
      case 516:
        BOOL v3 = dword_700C4 == 0;
        uint64_t v4 = (uint64_t (*)(uint64_t, int, __CFDictionary *))sub_4D710;
        goto LABEL_11;
      case 517:
        BOOL v3 = dword_700C4 == 0;
        uint64_t v4 = (uint64_t (*)(uint64_t, int, __CFDictionary *))sub_4CCF8;
LABEL_11:
        if (v3) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = v4;
        }
        break;
      case 518:
        return sub_45008;
      default:
        uint64_t result = 0;
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 257:
        uint64_t v5 = sub_2EC44;
        break;
      case 258:
      case 259:
        uint64_t v5 = sub_938C;
        break;
      case 260:
        uint64_t v5 = sub_124A4;
        break;
      case 261:
        uint64_t v5 = linklocal_thread;
        break;
      case 262:
        uint64_t v5 = failover_thread;
        break;
      default:
        JUMPOUT(0);
    }
    return (uint64_t (*)(uint64_t, int, __CFDictionary *))v5;
  }
  return result;
}

CFTypeRef *sub_5990(uint64_t a1, const void *a2, int a3)
{
  if (a3) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = a1 + 56;
  }
  if ((int)sub_5B24(v4) < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = (CFTypeRef *)sub_5B4C(v4, v5);
    if (CFEqual(a2, *v6)) {
      break;
    }
    uint64_t v5 = (v5 + 1);
    if ((int)v5 >= (int)sub_5B24(v4)) {
      return 0;
    }
  }
  return v6;
}

uint64_t sub_5A18()
{
  if ((int)sub_5B24(&unk_70150) < 1)
  {
LABEL_10:
    uint64_t v5 = (const __SCDynamicStore *)qword_70178;
    return SCDynamicStoreSetValue(v5, @"Plugin:IPConfiguration", @"Plugin:IPConfiguration");
  }
  else
  {
    uint64_t v0 = 0;
    while (1)
    {
      char v1 = (unsigned char *)sub_5B4C(&unk_70150, v0);
      char v2 = v1 + 24;
      uint64_t result = sub_5B24(v1 + 24);
      if (!result && (*v1 & 1) == 0) {
        break;
      }
      if ((int)sub_5B24(v2) >= 1)
      {
        uint64_t v4 = 0;
        do
        {
          uint64_t result = sub_5B4C(v2, v4);
          if (!*(_DWORD *)(result + 40)) {
            return result;
          }
          uint64_t v4 = (v4 + 1);
        }
        while ((int)v4 < (int)sub_5B24(v2));
      }
      uint64_t v0 = (v0 + 1);
      if ((int)v0 >= (int)sub_5B24(&unk_70150)) {
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t sub_5B08(uint64_t result)
{
  if (result)
  {
    if (*(void *)result) {
      return *(unsigned int *)(result + 12);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_5B28(uint64_t a1, int a2)
{
  if (*(void *)a1 && *(_DWORD *)(a1 + 12) > a2) {
    return *(void *)(*(void *)a1 + 8 * a2);
  }
  else {
    return 0;
  }
}

CFDictionaryRef sub_5B50(__CFString *a1, uint64_t a2)
{
  BOOL v3 = a1;
  LODWORD(keys) = 0;
  if (a1)
  {
    if (sub_121C4(114) && (uint64_t data = (uint64_t)v3->data) != 0)
    {
      uint64_t v5 = sub_54B38(data, 114, &keys, 0);
      BOOL v3 = (__CFString *)sub_542FC(v5, keys);
    }
    else
    {
      BOOL v3 = 0;
    }
  }
  int v12 = v3;
  uint64_t v6 = (__CFString *)sub_CC7C(a2);
  BOOL v7 = v6;
  uint64_t v11 = v6;
  if (v3)
  {
    if (v6)
    {
      if (CFStringCompare(v3, v6, 1uLL))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v8 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v8 = 138412546;
          *(void *)(v8 + 4) = v3;
          *(_WORD *)(v8 + 12) = 2112;
          *(void *)(v8 + 14) = v7;
          __SC_log_send();
        }
      }
    }
    values = v3;
    keys = (void *)kSCPropNetCaptivePortalURL;
  }
  else
  {
    if (!v6)
    {
      CFDictionaryRef v9 = 0;
      goto LABEL_15;
    }
    values = v6;
    keys = (void *)kSCPropNetCaptivePortalURL;
  }
  CFDictionaryRef v9 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
LABEL_15:
  sub_6DB0((const void **)&v12);
  sub_6DB0((const void **)&v11);
  return v9;
}

void sub_5D54(uint64_t a1, const __CFString *a2, int a3)
{
  if (a3) {
    CFDictionaryRef v5 = CFDictionaryCreate(0, 0, 0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  else {
    CFDictionaryRef v5 = 0;
  }
  CFDictionaryRef v6 = v5;
  sub_5DE4((const __SCDynamicStore *)qword_70178, *(CFStringRef *)(a1 + 16), a2, v5);
  sub_6DB0((const void **)&v6);
  dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
}

void sub_5DE4(const __SCDynamicStore *a1, CFStringRef ifname, CFStringRef entity, const void *a4)
{
  if (!qword_70258) {
    qword_70258 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  if (!qword_70260)
  {
    qword_70260 = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    xmmword_70268 = 0uLL;
  }
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, ifname, entity);
  sub_60E4(a1, NetworkInterfaceEntity, a4);

  CFRelease(NetworkInterfaceEntity);
}

void sub_5EC0(const __SCDynamicStore *a1, CFStringRef serviceID, const void **a3, const __CFDictionary **a4, int a5, int a6)
{
  if (a5)
  {
    LODWORD(v7) = a5;
    if (!qword_70258) {
      qword_70258 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    if (!qword_70260)
    {
      qword_70260 = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      xmmword_70268 = 0uLL;
    }
    if (a6)
    {
      CFMutableDictionaryRef Mutable = 0;
      if ((int)v7 >= 1)
      {
        uint64_t v7 = v7;
        do
        {
          CFDictionaryRef v13 = *a4;
          if (*a4)
          {
            CFNullRef v14 = (CFNullRef)*a3;
            if (!Mutable) {
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            }
            if (v14 == kCFNull) {
              CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)sub_3BDA4, Mutable);
            }
            else {
              CFDictionarySetValue(Mutable, v14, v13);
            }
          }
          ++a4;
          ++a3;
          --v7;
        }
        while (v7);
      }
      CFStringRef v15 = CFStringCreateWithFormat(0, 0, @"Plugin:IPConfigurationService:%@", serviceID);
      sub_60E4(a1, v15, Mutable);
      CFRelease(v15);
      if (Mutable)
      {
        CFRelease(Mutable);
      }
    }
    else if ((int)v7 >= 1)
    {
      uint64_t v16 = v7;
      do
      {
        CFNullRef v18 = (const __CFNull *)*a3++;
        CFNullRef v17 = v18;
        if (v18 == kCFNull) {
          CFStringRef v19 = 0;
        }
        else {
          CFStringRef v19 = (const __CFString *)v17;
        }
        CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, serviceID, v19);
        BOOL v21 = *a4++;
        sub_60E4(a1, NetworkServiceEntity, v21);
        CFRelease(NetworkServiceEntity);
        --v16;
      }
      while (v16);
    }
  }
}

void sub_60E4(const __SCDynamicStore *a1, const __CFString *value, const void *a3)
{
  CFRange v6 = (CFRange)xmmword_70268;
  if (a3)
  {
    CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue((CFArrayRef)qword_70260, v6, value);
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_70260, FirstIndexOfValue);
      --*((void *)&xmmword_70268 + 1);
LABEL_4:
      CFDictionarySetValue((CFMutableDictionaryRef)qword_70258, value, a3);
      return;
    }
    CFPropertyListRef v9 = sub_91BC(a1, value);
    uint64_t v11 = v9;
    if (!v9) {
      goto LABEL_4;
    }
    int v10 = CFEqual(a3, v9);
    sub_6DB0(&v11);
    if (!v10) {
      goto LABEL_4;
    }
  }
  else
  {
    if (!CFArrayContainsValue((CFArrayRef)qword_70260, v6, value))
    {
      CFArrayAppendValue((CFMutableArrayRef)qword_70260, value);
      ++*((void *)&xmmword_70268 + 1);
    }
    uint64_t v8 = (__CFDictionary *)qword_70258;
    CFDictionaryRemoveValue(v8, value);
  }
}

void sub_61FC(uint64_t a1, uint64_t a2)
{
  v74 = 0;
  CFMutableDictionaryRef v75 = 0;
  uint64_t v73 = 0;
  memset(v81, 0, 64);
  int v71 = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 8);
  int v69 = 0;
  if (!*(void *)a1) {
    return;
  }
  v72 = 0;
  memset(v80, 0, sizeof(v80));
  CFRange v6 = &off_70000;
  if (!*(_DWORD *)(a1 + 40))
  {
    *(_DWORD *)(a1 + 40) = 1;
    *(_DWORD *)(a1 + 28) = 0;
    if (!qword_70178) {
      return;
    }
LABEL_8:
    byte_701A0 = 1;
    *(_DWORD *)v2 |= 0x40u;
    dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
    if (a2) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  int v7 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 40) = 1;
  *(_DWORD *)(a1 + 28) = 0;
  if (!qword_70178) {
    return;
  }
  if (v7) {
    goto LABEL_8;
  }
  if (a2)
  {
LABEL_6:
    uint64_t v8 = *(void *)(a2 + 16);
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v8 = 0;
LABEL_10:
  int v10 = (void *)(a1 + 48);
  CFPropertyListRef v9 = *(const void **)(a1 + 48);
  if (v9)
  {
    uint64_t v11 = sub_5990(v2, v9, 1);
    if (!v11 || *((_DWORD *)v11 + 25)) {
      return;
    }
    if (*(_DWORD *)(a1 + 24) == 261)
    {
      int v12 = (const __CFString **)(a1 + 48);
      if ((*(unsigned char *)(v2 + 2) & 0x40) != 0)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v13 = _os_log_pack_fill();
          uint64_t v14 = nullsub_1(v3);
          *(_DWORD *)uint64_t v13 = 136315138;
          *(void *)(v13 + 4) = v14;
          __SC_log_send();
        }
        return;
      }
    }
    else
    {
      int v12 = (const __CFString **)(a1 + 48);
    }
  }
  else
  {
    uint64_t v11 = 0;
    int v12 = (const __CFString **)a1;
  }
  CFStringRef v15 = *v12;
  double v66 = v11;
  CFStringRef v67 = v15;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v70 = Mutable;
  sub_6F28(Mutable, kSCPropNetIPv4Addresses, *(_DWORD *)(a1 + 100));
  sub_6F28(Mutable, kSCPropNetIPv4SubnetMasks, *(_DWORD *)(a1 + 104));
  CFDictionarySetValue(Mutable, kSCPropInterfaceName, *(const void **)(v2 + 16));
  if ((*(unsigned char *)v2 & 0x10) != 0 && !*v10)
  {
    valuePtr[0] = 1;
    CFNumberRef v17 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
    CFDictionarySetValue(Mutable, kSCPropNetOverridePrimary, v17);
    CFRelease(v17);
  }
  if (!v8)
  {
    if (*(unsigned char *)(a1 + 25) & 1) != 0 && (*(unsigned char *)(a1 + 116))
    {
      int v22 = *(_DWORD *)(a1 + 120);
      if ((v22 - 1) <= 0xFFFFFFFD) {
        sub_53D38(Mutable, kSCPropNetIPv4Router, v22);
      }
    }
    int v23 = 0;
    goto LABEL_48;
  }
  valuePtr[0] = 0;
  if (*(_DWORD *)(a1 + 24) == 258 || sub_121C4(12))
  {
    CFNullRef v18 = sub_54B38(v8, 12, valuePtr, 0);
    if (v18)
    {
      if (valuePtr[0] >= 1)
      {
        CFStringRef v19 = CFStringCreateWithBytes(0, v18, valuePtr[0], 0x8000100u, 0);
        if (v19)
        {
          CFStringRef v20 = v19;
          CFDictionarySetValue(Mutable, @"Hostname", v19);
          CFRelease(v20);
        }
      }
    }
  }
  if (sub_121C4(3)) {
    BOOL v21 = sub_54BE8(v8, 3, 4);
  }
  else {
    BOOL v21 = 0;
  }
  if (!sub_121C4(121))
  {
    int v23 = 0;
    goto LABEL_42;
  }
  int v24 = (__CFString *)sub_168F8(v8, &v69);
  int v23 = v24;
  if (v21 || !v24)
  {
LABEL_42:
    if (v21) {
      goto LABEL_43;
    }
    goto LABEL_48;
  }
  unsigned int v25 = sub_57BA8(v24, v69);
  if (v25)
  {
    BOOL v21 = (unsigned __int8 *)(v25 + 2);
LABEL_43:
    v68 = v23;
    int v26 = *v21;
    int v27 = v21[1];
    int v28 = v21[2];
    int v29 = (v28 << 16) | (v27 << 8) | (v21[3] << 24) | v26;
    if ((v29 + 1) > 1)
    {
      sub_53D38(Mutable, kSCPropNetIPv4Router, v29);
    }
    else
    {
      int v61 = v21[3];
      int v63 = v27;
      int v64 = v28;
      uint64_t v30 = sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t v62 = v30;
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        uint64_t v65 = (void *)(a1 + 48);
        v60[1] = v60;
        v60[0] = (char *)v60 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v31 = _os_log_pack_fill();
        uint64_t v32 = nullsub_1(v3);
        *(_DWORD *)uint64_t v31 = 136316162;
        *(void *)(v31 + 4) = v32;
        *(_WORD *)(v31 + 12) = 1024;
        *(_DWORD *)(v31 + 14) = v26;
        *(_WORD *)(v31 + 18) = 1024;
        *(_DWORD *)(v31 + 20) = v63;
        *(_WORD *)(v31 + 24) = 1024;
        *(_DWORD *)(v31 + 26) = v64;
        *(_WORD *)(v31 + 30) = 1024;
        *(_DWORD *)(v31 + 32) = v61;
        int v10 = v65;
        CFRange v6 = &off_70000;
        __SC_log_send();
      }
    }
    int v23 = v68;
  }
LABEL_48:
  if ((sub_9384(v3) & 0x18) == 0)
  {
    v68 = v23;
    if ((*(unsigned char *)(a1 + 25) & 1) != 0 && (~*(_DWORD *)(a1 + 116) & 7) == 0)
    {
      uint64_t v33 = *(void *)(*(void *)(a1 + 16) + 8);
      CFStringRef v34 = CFStringCreateWithFormat(0, 0, @"%d.%d.%d.%d", *(unsigned __int8 *)(a1 + 120), *(unsigned __int8 *)(a1 + 121), *(unsigned __int8 *)(a1 + 122), *(unsigned __int8 *)(a1 + 123));
      uint64_t v35 = v10;
      int v36 = sub_58034(v33);
      sub_5997C((char *)valuePtr, 48, (unsigned __int8 *)(a1 + 124), v36);
      CFStringRef v37 = CFStringCreateWithCString(0, (const char *)valuePtr, 0x600u);
      CFStringRef v38 = CFStringCreateWithFormat(0, 0, @"IPv4.Router=%@;IPv4.RouterHardwareAddress=%s", v34, valuePtr);
      CFDictionarySetValue(Mutable, @"NetworkSignature", v38);
      CFDictionarySetValue(Mutable, @"ARPResolvedIPAddress", v34);
      CFDictionarySetValue(Mutable, @"ARPResolvedHardwareAddress", v37);
      CFStringRef v39 = v38;
      int v10 = v35;
      CFRelease(v39);
      CFRelease(v34);
      CFRelease(v37);
    }
    LODWORD(v40) = v69;
    valuePtr[0] = *(_DWORD *)(a1 + 100);
    int v78 = 65193;
    int v79 = 0xFFFF;
    unsigned int v41 = CFArrayCreateMutable(0, v69 + 2, &kCFTypeArrayCallBacks);
    CFDictionaryRef v42 = sub_7520(valuePtr, &G_ip_broadcast, 0);
    CFArrayAppendValue(v41, v42);
    CFRelease(v42);
    if (SLOWORD(valuePtr[0]) != -343)
    {
      CFDictionaryRef v43 = sub_7520(&v78, &v79, 0);
      CFArrayAppendValue(v41, v43);
      CFRelease(v43);
    }
    unint64_t v44 = Mutable;
    if (v68)
    {
      uint64_t v40 = v40;
      unint64_t v44 = Mutable;
      if ((int)v40 >= 1)
      {
        uint64_t v65 = v10;
        p_info = &v68->info;
        do
        {
          if (*(_DWORD *)p_info) {
            int v46 = (int *)p_info;
          }
          else {
            int v46 = 0;
          }
          int v47 = *((_DWORD *)p_info - 1);
          unsigned int v48 = v47 - 33;
          unsigned int v49 = -1 << -(char)v47;
          if (v48 < 0xFFFFFFE0) {
            unsigned int v49 = 0;
          }
          unsigned int v76 = bswap32(v49);
          unsigned int v77 = v76 & *(_DWORD *)(p_info - 1);
          CFDictionaryRef v50 = sub_7520((int *)&v77, (int *)&v76, v46);
          CFArrayAppendValue(v41, v50);
          CFRelease(v50);
          p_info = (uint64_t *)((char *)p_info + 12);
          --v40;
        }
        while (v40);
        unint64_t v44 = v70;
        int v10 = v65;
        CFRange v6 = &off_70000;
      }
    }
    CFDictionarySetValue(Mutable, kSCPropNetIPv4AdditionalRoutes, v41);
    CFRelease(v41);
    CFDictionarySetValue(v44, kSCPropConfirmedInterfaceName, *(const void **)(v2 + 16));
    CFMutableDictionaryRef Mutable = v44;
    int v23 = v68;
  }
  if (v23)
  {
    free(v23);
    CFMutableDictionaryRef Mutable = v70;
  }
  int v71 = 0;
  sub_6DE8((uint64_t)v81, (uint64_t)v80, (uint64_t)kSCEntNetIPv4, (uint64_t)Mutable, &v71);
  if (v66) {
    uint64_t v51 = (uint64_t)v66;
  }
  else {
    uint64_t v51 = a1;
  }
  v74 = sub_C074(v51, (__CFString *)a2, (CFDictionaryRef *)&v73);
  sub_6DE8((uint64_t)v81, (uint64_t)v80, (uint64_t)kSCEntNetDNS, (uint64_t)v74, &v71);
  sub_6DE8((uint64_t)v81, (uint64_t)v80, kSCEntNetCaptivePortal, v73, &v71);
  if (a2 && *(_DWORD *)(a2 + 8)) {
    CFMutableDictionaryRef v75 = sub_3B400(*(_DWORD *)(a1 + 24), *(void *)(a2 + 16), *(CFAbsoluteTime *)(a2 + 24), *(CFAbsoluteTime *)(a2 + 32));
  }
  sub_6DE8((uint64_t)v81, (uint64_t)v80, (uint64_t)kSCEntNetDHCP, (uint64_t)v75, &v71);
  if (*(_DWORD *)(a1 + 24) != 261) {
    sub_6DE8((uint64_t)v81, (uint64_t)v80, (uint64_t)kCFNull, 0, &v71);
  }
  int v52 = v71;
  sub_5EC0((const __SCDynamicStore *)v6[47], v67, (const void **)v81, (const __CFDictionary **)v80, v71, *(_DWORD *)(a1 + 36));
  dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
  v68 = sub_B764(v81, v80, v52);
  v72 = v68;
  sub_6DB0((const void **)&v70);
  sub_6DB0((const void **)&v74);
  sub_6DB0((const void **)&v73);
  sub_6DB0((const void **)&v75);
  sub_5A18();
  uint64_t v53 = *(void *)(a1 + 16);
  byte_701A4 = 1;
  *(_DWORD *)(v53 + 144) = 1;
  dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
  if (dword_700C0)
  {
    byte_7019C = 1;
    dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
  }
  if (sub_932C(*(_DWORD *)(a1 + 24)) && (*(unsigned char *)v2 & 8) != 0)
  {
    sub_58DC8(*(void *)(v2 + 8));
    sub_FE28();
    *(_DWORD *)v2 &= ~8u;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v54 = _os_log_pack_fill();
      uint64_t v55 = sub_9218(*(_DWORD *)(a1 + 24));
      uint64_t v56 = nullsub_1(*(void *)(v2 + 8));
      *(_DWORD *)uint64_t v54 = 136315394;
      *(void *)(v54 + 4) = v55;
      *(_WORD *)(v54 + 12) = 2080;
      *(void *)(v54 + 14) = v56;
      __SC_log_send();
    }
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v57 = _os_log_pack_fill();
    double v58 = sub_9218(*(_DWORD *)(a1 + 24));
    uint64_t v59 = nullsub_1(*(void *)(v2 + 8));
    *(_DWORD *)uint64_t v57 = 136315650;
    *(void *)(v57 + 4) = v58;
    *(_WORD *)(v57 + 12) = 2080;
    *(void *)(v57 + 14) = v59;
    *(_WORD *)(v57 + 22) = 2112;
    *(void *)(v57 + 24) = v68;
    __SC_log_send();
  }
  sub_6DB0((const void **)&v72);
  if (!*v10) {
    sub_1BC98(a1);
  }
}

void sub_6DB0(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
  }
}

uint64_t sub_6DE8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v5 = *a5;
  if (*a5 < 8)
  {
    *(void *)(result + 8 * v5) = a3;
    *(void *)(a2 + 8 * v5) = a4;
    *a5 = v5 + 1;
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v6 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v6 = 67109376;
      *(_DWORD *)(v6 + 4) = v5;
      *(_WORD *)(v6 + 8) = 1024;
      *(_DWORD *)(v6 + 10) = 8;
      return __SC_log_send();
    }
  }
  return result;
}

void sub_6F28(__CFDictionary *a1, const void *a2, int a3)
{
  int v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"%d.%d.%d.%d", a3, BYTE1(a3), BYTE2(a3), HIBYTE(a3));
  sub_6FB0(a1, a2, v5);

  CFRelease(v5);
}

void sub_6FB0(__CFDictionary *a1, const void *a2, void *a3)
{
  values = a3;
  CFArrayRef v5 = CFArrayCreate(0, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  if (v5)
  {
    CFArrayRef v6 = v5;
    CFDictionarySetValue(a1, a2, v5);
    CFRelease(v6);
  }
}

ssize_t sub_7020(int a1, _WORD *a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, unsigned int a8, unsigned __int16 a9, void *a10, int a11)
{
  if ((byte_702D8 & 1) == 0)
  {
    byte_702D8 = 1;
    dword_702DC = arc4random();
  }
  if ((a4 == 24 || a4 == 1) && (a5 || a6 == -1))
  {
    int v20 = sub_5ACA4(a3);
    if (v20 < 0)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      int v21 = v20;
      uint64_t v37 = a3;
      if (a4 == 24)
      {
        *(void *)a2 = -1;
        a2[8] = 8;
        int v22 = (char *)(a2 + 9);
        int v23 = (char *)(a2 + 13);
        int v24 = a2 + 23;
        int v25 = 46;
      }
      else
      {
        int v22 = (char *)(a2 + 7);
        int v23 = (char *)(a2 + 11);
        int v24 = a2 + 21;
        if (a6 == -1)
        {
          int v27 = -1;
          a2[2] = -1;
        }
        else
        {
          int v27 = *(_DWORD *)a5;
          a2[2] = *(_WORD *)(a5 + 4);
        }
        *(_DWORD *)a2 = v27;
        a2[6] = 8;
        int v25 = 42;
      }
      int v28 = v25 + a11;
      memmove(v24, a10, a11);
      *(_DWORD *)int v23 = a7;
      *((_DWORD *)v23 + 1) = a6;
      *((_WORD *)v23 + 4) = 4352;
      unsigned int v29 = bswap32(a11 + 8) >> 16;
      *((_WORD *)v23 + 5) = v29;
      *((_WORD *)v22 + 10) = __rev16(a9);
      *((_WORD *)v22 + 11) = __rev16(a8);
      *((_DWORD *)v22 + 6) = (unsigned __int16)v29;
      *((_WORD *)v22 + 13) = sub_7420(v23, a11 + 20);
      *(void *)int v22 = 0;
      *((void *)v22 + 1) = 0;
      *int v22 = 69;
      *((_DWORD *)v22 + 2) = 4607;
      *((_DWORD *)v22 + 3) = a7;
      *((_DWORD *)v22 + 4) = a6;
      *((_WORD *)v22 + 1) = bswap32(a11 + 28) >> 16;
      unsigned int v30 = dword_702DC++;
      *((_WORD *)v22 + 2) = bswap32(v30) >> 16;
      *((_WORD *)v22 + 5) = sub_7420(v22, 20);
      ssize_t v19 = sub_B848(v21, a2, v28);
      if ((v19 & 0x80000000) != 0)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v31 = _os_log_pack_size();
          __chkstk_darwin(v31);
          __error();
          uint64_t v32 = _os_log_pack_fill();
          uint64_t v33 = __error();
          CFStringRef v34 = strerror(*v33);
          int v35 = *__error();
          *(_DWORD *)uint64_t v32 = 136315650;
          *(void *)(v32 + 4) = v37;
          *(_WORD *)(v32 + 12) = 2080;
          *(void *)(v32 + 14) = v34;
          *(_WORD *)(v32 + 22) = 1024;
          *(_DWORD *)(v32 + 24) = v35;
          __SC_log_send();
        }
      }
      sub_BA68(v21);
    }
  }
  else if (a1 < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v26 = _os_log_pack_size();
      __chkstk_darwin(v26);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    return 0;
  }
  else
  {
    *(void *)&v38.sa_data[6] = 0;
    *(_WORD *)&v38.sa_len = 528;
    *(_WORD *)v38.sa_uint64_t data = __rev16(a8);
    *(_DWORD *)&v38.sa_data[2] = a6;
    if (sendto(a1, a10, a11, 0, &v38, 0x10u) >= a11) {
      return 0;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return v19;
}

uint64_t sub_7420(_OWORD *a1, int a2)
{
  if (a2 < 32)
  {
    unsigned int v2 = 0;
  }
  else
  {
    unsigned int v2 = 0;
    unsigned int v3 = a2;
    do
    {
      a2 = v3 - 32;
      uint16x8_t v4 = *(uint16x8_t *)a1;
      uint16x8_t v5 = *((uint16x8_t *)a1 + 1);
      a1 += 2;
      v2 += vaddvq_s32(vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v4.i8, *(uint16x4_t *)v5.i8), (int32x4_t)vaddl_high_u16(v4, v5)));
      BOOL v6 = v3 > 0x3F;
      v3 -= 32;
    }
    while (v6);
  }
  if (a2 < 8)
  {
    int v7 = a2;
    if (!a2) {
      return (unsigned __int16)~(HIWORD(v2) + v2 + ((HIWORD(v2) + (unsigned __int16)v2) >> 16));
    }
  }
  else
  {
    do
    {
      int v7 = a2 - 8;
      uint16x4_t v8 = *(uint16x4_t *)a1;
      a1 = (_OWORD *)((char *)a1 + 8);
      v2 += vaddvq_s32((int32x4_t)vmovl_u16(v8));
      BOOL v6 = a2 > 0xF;
      a2 -= 8;
    }
    while (v6);
    if (!v7) {
      return (unsigned __int16)~(HIWORD(v2) + v2 + ((HIWORD(v2) + (unsigned __int16)v2) >> 16));
    }
  }
  unsigned int v2 = HIWORD(v2) + (unsigned __int16)v2;
  if (HIWORD(v2)) {
    v2 -= 0xFFFF;
  }
  int v9 = v7 - 2;
  if (v7 < 2)
  {
    uint64_t v11 = (unsigned __int8 *)a1;
  }
  else
  {
    uint64_t v10 = v9 & 0xFFFFFFFE;
    uint64_t v11 = (unsigned __int8 *)a1 + v10 + 2;
    for (unsigned int i = v7; i > 1; i -= 2)
    {
      int v13 = *(unsigned __int16 *)a1;
      a1 = (_OWORD *)((char *)a1 + 2);
      v2 += v13;
    }
    int v9 = v7 - v10 - 4;
  }
  if (v9 == -1) {
    v2 += *v11;
  }
  return (unsigned __int16)~(HIWORD(v2) + v2 + ((HIWORD(v2) + (unsigned __int16)v2) >> 16));
}

CFDictionaryRef sub_7520(int *a1, int *a2, int *a3)
{
  memset(keys, 0, sizeof(keys));
  memset(values, 0, sizeof(values));
  if (a1)
  {
    keys[0] = (void *)kSCPropNetIPv4RouteDestinationAddress;
    values[0] = (void *)sub_766C(*a1);
    unsigned int v5 = 1;
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unsigned int v5 = 0;
  if (a2)
  {
LABEL_3:
    keys[v5] = (void *)kSCPropNetIPv4RouteSubnetMask;
    values[v5++] = (void *)sub_766C(*a2);
  }
LABEL_4:
  if (a3)
  {
    keys[v5] = (void *)kSCPropNetIPv4RouteGatewayAddress;
    values[v5++] = (void *)sub_766C(*a3);
  }
  else if (!v5)
  {
    return 0;
  }
  CFIndex v6 = v5;
  int v7 = values;
  CFDictionaryRef v8 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v6, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  do
  {
    int v9 = *v7++;
    CFRelease(v9);
    --v6;
  }
  while (v6);
  return v8;
}

CFStringRef sub_766C(int a1)
{
  return CFStringCreateWithFormat(0, 0, @"%d.%d.%d.%d", a1, BYTE1(a1), BYTE2(a1), HIBYTE(a1));
}

void sub_76B8()
{
  if (!qword_70178) {
    return;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v0 = _os_log_pack_size();
    __chkstk_darwin(v0);
    __error();
    uint64_t v1 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v1 = 136315138;
    *(void *)(v1 + 4) = "perform_async_work";
    __SC_log_send();
  }
  if ((byte_70180 & 1) != 0 || byte_7019C)
  {
    Value = (const __SCDynamicStore *)qword_70178;
    uint64_t v11 = 0;
    int v12 = 0;
    if (qword_70178)
    {
      CFStringRef NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainSetup, kSCEntNetIPv4);
      int v12 = (void *)NetworkGlobalEntity;
      if (!NetworkGlobalEntity) {
        goto LABEL_18;
      }
      CFPropertyListRef v4 = sub_91BC(Value, NetworkGlobalEntity);
      uint64_t v11 = v4;
      if (!v4) {
        goto LABEL_18;
      }
      Value = (const __SCDynamicStore *)CFDictionaryGetValue((CFDictionaryRef)v4, kSCPropNetServiceOrder);
      CFTypeID TypeID = CFArrayGetTypeID();
      if (!Value) {
        goto LABEL_19;
      }
      if (CFGetTypeID(Value) != TypeID || (CFIndex Count = CFArrayGetCount(Value)) == 0)
      {
LABEL_18:
        Value = 0;
        goto LABEL_19;
      }
      CFIndex v7 = Count;
      if (Count >= 1)
      {
        CFIndex v8 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(Value, v8);
          CFTypeID v10 = CFStringGetTypeID();
          if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v10) {
            goto LABEL_18;
          }
        }
        while (v7 != ++v8);
      }
      CFRetain(Value);
    }
LABEL_19:
    sub_6DB0((const void **)&v12);
    sub_6DB0(&v11);
    int v12 = Value;
    if (byte_70180 == 1)
    {
      byte_70180 = 0;
      sub_2C144(Value);
    }
    if (byte_7019C == 1)
    {
      byte_7019C = 0;
      sub_422C(Value);
    }
    sub_6DB0((const void **)&v12);
  }
  if (byte_701A4 == 1)
  {
    byte_701A4 = 0;
    sub_37C4();
  }
  if (byte_701A0 == 1)
  {
    byte_701A0 = 0;
    sub_2C430();
  }
  sub_8B8C((SCDynamicStoreRef)qword_70178);
}

ssize_t bootp_client_transmit(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5, void *a6, uint64_t a7)
{
  uint64_t v45 = a3;
  int v46 = a6;
  unsigned int v12 = a2 >> 8;
  unsigned __int8 v13 = BYTE2(a2);
  uint64_t v43 = HIBYTE(a2);
  uint64_t v44 = sub_BA78();
  int v42 = a2;
  unsigned int v14 = a2 & 0xFF000000 | (v13 << 16) | (v12 << 8) | a2;
  if (v14 == -1)
  {
    int v15 = 0;
    int v16 = 0;
  }
  else
  {
    if (*((_DWORD *)a1 + 2))
    {
      int v15 = 0;
    }
    else
    {
      sub_10244(a1);
      int v15 = 1;
    }
    int v16 = sub_58DC8(*a1);
    if (v16) {
      sub_10520(a1, v16);
    }
  }
  int v40 = BYTE1(a2);
  int v41 = BYTE2(a2);
  if (byte_70128)
  {
    LODWORD(v38) = a5;
    CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
    sub_552C8(Mutable, (unsigned __int8 *)v46, a7);
    sub_4220();
    _SC_syslog_os_log_mapping();
    int v18 = __SC_log_enabled();
    if (v16)
    {
      if (v18)
      {
        int v37 = v15;
        unsigned int v39 = a4;
        uint64_t v19 = _os_log_pack_size();
        int v36 = &v35;
        __chkstk_darwin(v19);
        __error();
        uint64_t v20 = _os_log_pack_fill();
        uint64_t v21 = nullsub_1(*a1);
        *(_DWORD *)uint64_t v20 = 136316930;
        *(void *)(v20 + 4) = v21;
        *(_WORD *)(v20 + 12) = 1024;
        *(_DWORD *)(v20 + 14) = a7;
        *(_WORD *)(v20 + 18) = 1024;
        *(_DWORD *)(v20 + 20) = v42;
        *(_WORD *)(v20 + 24) = 1024;
        *(_DWORD *)(v20 + 26) = v40;
        *(_WORD *)(v20 + 30) = 1024;
        *(_DWORD *)(v20 + 32) = v41;
        *(_WORD *)(v20 + 36) = 1024;
        *(_DWORD *)(v20 + 38) = v43;
        *(_WORD *)(v20 + 42) = 1024;
        *(_DWORD *)(v20 + 44) = v16;
        *(_WORD *)(v20 + 48) = 2112;
        *(void *)(v20 + 50) = Mutable;
LABEL_16:
        __SC_log_send();
        a4 = v39;
        int v15 = v37;
      }
    }
    else if (v18)
    {
      int v37 = v15;
      unsigned int v39 = a4;
      uint64_t v26 = _os_log_pack_size();
      int v36 = &v35;
      __chkstk_darwin(v26);
      __error();
      uint64_t v27 = _os_log_pack_fill();
      uint64_t v28 = nullsub_1(*a1);
      *(_DWORD *)uint64_t v27 = 136315650;
      *(void *)(v27 + 4) = v28;
      *(_WORD *)(v27 + 12) = 1024;
      *(_DWORD *)(v27 + 14) = a7;
      *(_WORD *)(v27 + 18) = 2112;
      *(void *)(v27 + 20) = Mutable;
      goto LABEL_16;
    }
    CFRelease(Mutable);
    LOWORD(a5) = (_WORD)v38;
    goto LABEL_18;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v22 = _os_log_pack_size();
    int v37 = v15;
    unsigned int v39 = a4;
    sockaddr v38 = &v35;
    __chkstk_darwin(v22);
    __error();
    uint64_t v23 = _os_log_pack_fill();
    uint64_t v24 = nullsub_1(*a1);
    uint64_t v25 = bswap32(*((_DWORD *)v46 + 1));
    *(_DWORD *)uint64_t v23 = 136316930;
    *(void *)(v23 + 4) = v24;
    *(_WORD *)(v23 + 12) = 1024;
    *(_DWORD *)(v23 + 14) = a7;
    *(_WORD *)(v23 + 18) = 2048;
    *(void *)(v23 + 20) = v25;
    *(_WORD *)(v23 + 28) = 1024;
    *(_DWORD *)(v23 + 30) = v42;
    *(_WORD *)(v23 + 34) = 1024;
    *(_DWORD *)(v23 + 36) = v40;
    *(_WORD *)(v23 + 40) = 1024;
    *(_DWORD *)(v23 + 42) = v41;
    *(_WORD *)(v23 + 46) = 1024;
    *(_DWORD *)(v23 + 48) = v43;
    *(_WORD *)(v23 + 52) = 1024;
    *(_DWORD *)(v23 + 54) = v16;
    int v15 = v37;
    __SC_log_send();
    a4 = v39;
  }
LABEL_18:
  unsigned int v29 = *(unsigned int **)(v44 + 32);
  if (v29) {
    int v30 = sub_C448(v29);
  }
  else {
    int v30 = -1;
  }
  uint64_t v31 = nullsub_1(*a1);
  int v32 = sub_934C(*a1);
  ssize_t v33 = sub_7020(v30, v47, v31, v32, 0, v14, v45, a4, a5, v46, a7);
  if (v15) {
    sub_3F24(a1);
  }
  if (v16) {
    sub_10520(a1, 0);
  }
  return v33;
}

uint64_t linklocal_thread(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v6 = sub_8B80(a1);
  CFIndex v7 = (_DWORD *)sub_557C(a1);
  uint64_t v8 = 0;
  int v9 = v7;
  switch(a2)
  {
    case 0:
      if ((sub_9384(v6) & 8) != 0) {
        return 4;
      }
      sub_4220();
      if (v9)
      {
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          return 6;
        }
        uint64_t v12 = _os_log_pack_size();
        __chkstk_darwin(v12);
        __error();
        uint64_t v13 = _os_log_pack_fill();
        uint64_t v14 = nullsub_1(v6);
        *(_DWORD *)uint64_t v13 = 136315138;
        *(void *)(v13 + 4) = v14;
        __SC_log_send();
        return 6;
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v16 = _os_log_pack_size();
        __chkstk_darwin(v16);
        __error();
        uint64_t v17 = _os_log_pack_fill();
        uint64_t v18 = nullsub_1(v6);
        *(_DWORD *)uint64_t v17 = 136315138;
        *(void *)(v17 + 4) = v18;
        __SC_log_send();
      }
      int v9 = malloc_type_malloc(0x28uLL, 0x1020040EF90260EuLL);
      *(_OWORD *)int v9 = 0u;
      *((_OWORD *)v9 + 1) = 0u;
      *((void *)v9 + 4) = 0;
      sub_1E5C8(a1, (uint64_t)v9);
      uint64_t v19 = (const char *)nullsub_1(v6);
      snprintf(__str, 0x20uLL, "linklocal-%s", v19);
      uint64_t v20 = timer_callout_init(__str);
      *((void *)v9 + 1) = v20;
      if (!v20)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled()) {
          goto LABEL_41;
        }
        goto LABEL_42;
      }
      uint64_t v21 = sub_CE80(v6);
      *(void *)int v9 = v21;
      if (!v21)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
LABEL_41:
          uint64_t v22 = _os_log_pack_size();
          __chkstk_darwin(v22);
          __error();
          uint64_t v23 = _os_log_pack_fill();
          uint64_t v24 = nullsub_1(v6);
          *(_DWORD *)uint64_t v23 = 136315138;
          *(void *)(v23 + 4) = v24;
          __SC_log_send();
        }
LABEL_42:
        uint64_t v8 = 5;
        goto LABEL_43;
      }
      sub_D370((uint64_t)v21, 1);
      *((_DWORD *)v9 + 7) = 1;
      if (a3 && !*a3)
      {
        *((_DWORD *)v9 + 7) = 0;
        goto LABEL_11;
      }
LABEL_26:
      *((_DWORD *)v9 + 5) = S_find_linklocal_address(a1);
LABEL_27:
      sub_2D54C(a1, 0, 0);
      return 0;
    case 1:
LABEL_43:
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v25 = _os_log_pack_size();
        __chkstk_darwin(v25);
        __error();
        uint64_t v26 = _os_log_pack_fill();
        uint64_t v27 = nullsub_1(v6);
        *(_DWORD *)uint64_t v26 = 136315138;
        *(void *)(v26 + 4) = v27;
        __SC_log_send();
      }
      if (v9)
      {
        uint64_t v28 = (const char *)nullsub_1(v6);
        sub_2DD64(v28, 0);
        sub_1DB14(a1);
        sub_9028(a1, 0);
        if (*((void *)v9 + 1)) {
          timer_callout_free((uint64_t *)v9 + 1);
        }
        if (*(void *)v9) {
          sub_D020((uint64_t **)v9);
        }
        free(v9);
        sub_1E5C8(a1, 0);
      }
      else
      {
        sub_4220();
        uint64_t v8 = 6;
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v29 = _os_log_pack_size();
          __chkstk_darwin(v29);
          __error();
          uint64_t v30 = _os_log_pack_fill();
          uint64_t v31 = nullsub_1(v6);
          *(_DWORD *)uint64_t v30 = 136315138;
          *(void *)(v30 + 4) = v31;
          uint64_t v8 = 6;
          __SC_log_send();
        }
      }
      return v8;
    case 3:
    case 11:
      if (!v7) {
        return 6;
      }
      if (a3[1] && !a3[2])
      {
        sub_2DD0C(a1);
        uint64_t v8 = 0;
        *((_DWORD *)v9 + 8) = 0;
        return v8;
      }
      if (*(_DWORD *)(sub_557C(a1) + 28)) {
        goto LABEL_27;
      }
      goto LABEL_11;
    case 4:
      sub_2DC80(a1, 0xCu);
      return 0;
    case 7:
      if (*(void *)a3)
      {
        int v10 = **(_DWORD **)a3;
        int v11 = v10 != 0;
        if (v7[7] == v11) {
          return 0;
        }
        v7[7] = v11;
        if (!v10)
        {
          sub_2DC80(a1, 0);
LABEL_11:
          sub_2CFE0(a1, 0, 0);
          return 0;
        }
      }
      else
      {
        if (v7[7] == 1) {
          return 0;
        }
        v7[7] = 1;
      }
      goto LABEL_26;
    case 9:
      if (!v7) {
        return 6;
      }
      if (v7[7] && v7[8] && *a3 == v7[5])
      {
        v7[5] = 0;
        sub_1DB14(a1);
        sub_9028(a1, 8u);
        goto LABEL_27;
      }
      return 0;
    default:
      return v8;
  }
}

uint64_t timer_set_relative(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double v7 = (double)a3 / 1000000.0;
  if (a2 < 0) {
    double v7 = 0.000001;
  }
  return timer_callout_set_0(a1, a4, a5, a6, a7, v7 + (double)(a2 & ~(a2 >> 63)));
}

_DWORD *DHCPLeaseListCopyARPAddressInfo(uint64_t *a1, const void *a2, const void *a3, double *a4, int a5, _DWORD *a6)
{
  sub_CA80(a1);
  int v10 = sub_5B24(a1);
  if (!v10)
  {
LABEL_28:
    int v36 = 0;
    uint64_t result = 0;
    goto LABEL_29;
  }
  int v11 = v10;
  uint64_t result = malloc_type_malloc(24 * v10, 0x1000040504FFAC1uLL);
  if (v11 < 1) {
    goto LABEL_27;
  }
  sockaddr v38 = a6;
  int v41 = 0;
  uint64_t v13 = 0;
  int v37 = result;
  unsigned int v39 = result;
  do
  {
    uint64_t v14 = sub_5B4C(a1, v13);
    uint64_t v15 = v14;
    if (!a2) {
      goto LABEL_9;
    }
    uint64_t v16 = *(const void **)(v14 + 48);
    if (!v16)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v32 = _os_log_pack_size();
        __chkstk_darwin(v32);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
      goto LABEL_22;
    }
    if (CFEqual(v16, a2) || sub_543B8(a3, *(const void **)(v15 + 56)))
    {
LABEL_9:
      if (!*(_DWORD *)(v15 + 20) || (size_t v17 = *(unsigned __int8 *)(v15 + 40), !*(unsigned char *)(v15 + 40)))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_22;
        }
        uint64_t v26 = _os_log_pack_size();
        __chkstk_darwin(v26);
        __error();
        uint64_t v27 = _os_log_pack_fill();
        int v28 = *(unsigned __int8 *)(v15 + 4);
        int v29 = *(unsigned __int8 *)(v15 + 5);
        int v30 = *(unsigned __int8 *)(v15 + 6);
        int v31 = *(unsigned __int8 *)(v15 + 7);
        *(_DWORD *)uint64_t v27 = 67109888;
        *(_DWORD *)(v27 + 4) = v28;
        *(_WORD *)(v27 + 8) = 1024;
        *(_DWORD *)(v27 + 10) = v29;
        *(_WORD *)(v27 + 14) = 1024;
        *(_DWORD *)(v27 + 16) = v30;
        *(_WORD *)(v27 + 20) = 1024;
        *(_DWORD *)(v27 + 22) = v31;
        goto LABEL_18;
      }
      if (!*(unsigned char *)v15 || a5)
      {
        if (a4 && *(double *)(v15 + 8) < *a4)
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (!__SC_log_enabled()) {
            goto LABEL_22;
          }
          uint64_t v18 = _os_log_pack_size();
          __chkstk_darwin(v18);
          __error();
          uint64_t v19 = _os_log_pack_fill();
          int v20 = *(unsigned __int8 *)(v15 + 4);
          int v21 = *(unsigned __int8 *)(v15 + 5);
          int v22 = *(unsigned __int8 *)(v15 + 6);
          int v23 = *(unsigned __int8 *)(v15 + 7);
          uint64_t v24 = *(void *)(v15 + 8);
          double v25 = *a4;
          *(_DWORD *)uint64_t v19 = 67110400;
          *(_DWORD *)(v19 + 4) = v20;
          *(_WORD *)(v19 + 8) = 1024;
          *(_DWORD *)(v19 + 10) = v21;
          *(_WORD *)(v19 + 14) = 1024;
          *(_DWORD *)(v19 + 16) = v22;
          *(_WORD *)(v19 + 20) = 1024;
          *(_DWORD *)(v19 + 22) = v23;
          *(_WORD *)(v19 + 26) = 2048;
          *(void *)(v19 + 28) = v24;
          *(_WORD *)(v19 + 36) = 2048;
          *(double *)(v19 + 38) = v25;
          goto LABEL_18;
        }
        *unsigned int v39 = *(_DWORD *)(v15 + 4);
        v39[1] = *(_DWORD *)(v15 + 20);
        memmove(v39 + 2, (const void *)(v15 + 24), v17);
        ++v41;
        v39 += 6;
      }
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v33 = _os_log_pack_size();
        __chkstk_darwin(v33);
        __error();
        uint64_t v34 = _os_log_pack_fill();
        uint64_t v35 = *(void *)(v15 + 48);
        *(_DWORD *)uint64_t v34 = 138412290;
        *(void *)(v34 + 4) = v35;
LABEL_18:
        __SC_log_send();
      }
    }
LABEL_22:
    uint64_t v13 = (v13 + 1);
  }
  while (v11 != v13);
  uint64_t result = v37;
  a6 = v38;
  int v36 = v41;
  if (!v41)
  {
LABEL_27:
    free(result);
    goto LABEL_28;
  }
LABEL_29:
  *a6 = v36;
  return result;
}

void timer_cancel(uint64_t a1)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 52))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v2 = _os_log_pack_fill();
        uint64_t v3 = *(void *)a1;
        *(_DWORD *)uint64_t v2 = 136315138;
        *(void *)(v2 + 4) = v3;
        __SC_log_send();
      }
    }
    sub_3BD4(a1);
  }
}

uint64_t sub_8B80(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 8);
}

void sub_8B8C(SCDynamicStoreRef store)
{
  if (*((void *)&xmmword_70258 + 1) && !CFArrayGetCount(*((CFArrayRef *)&xmmword_70258 + 1))) {
    sub_6DB0((const void **)&xmmword_70258 + 1);
  }
  if ((void)xmmword_70258 && !CFDictionaryGetCount((CFDictionaryRef)xmmword_70258)) {
    sub_6DB0((const void **)&xmmword_70258);
  }
  if (xmmword_70258 != 0)
  {
    SCDynamicStoreSetMultiple(store, (CFDictionaryRef)xmmword_70258, *((CFArrayRef *)&xmmword_70258 + 1), 0);
    if (G_IPConfiguration_verbose)
    {
      if ((void)xmmword_70258)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v2 = _os_log_pack_size();
          __chkstk_darwin(v2);
          __error();
          uint64_t v3 = _os_log_pack_fill();
          uint64_t v4 = xmmword_70258;
          *(_DWORD *)uint64_t v3 = 138412290;
          *(void *)(v3 + 4) = v4;
          __SC_log_send();
        }
      }
      if (*((void *)&xmmword_70258 + 1))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v5 = _os_log_pack_size();
          __chkstk_darwin(v5);
          __error();
          uint64_t v6 = _os_log_pack_fill();
          uint64_t v7 = *((void *)&xmmword_70258 + 1);
          *(_DWORD *)uint64_t v6 = 138412290;
          *(void *)(v6 + 4) = v7;
          __SC_log_send();
        }
      }
    }
    sub_6DB0((const void **)&xmmword_70258 + 1);
    sub_6DB0((const void **)&xmmword_70258);
  }
}

uint64_t bootp_client_disable_receive(void *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return sub_3F24(a1);
}

uint64_t sub_8DF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)(a1 + 116) >> 2) & 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_8E14(uint64_t a1, unsigned int a2, int a3)
{
  if ((*(unsigned char *)(a1 + 25) & 1) == 0) {
    goto LABEL_2;
  }
  uint64_t v13 = *(const void **)(a1 + 56);
  if (v13) {
    uint64_t v14 = sub_5990(*(void *)(a1 + 16), v13, 1);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(const void **)(a1 + 48);
  if (v15)
  {
    uint64_t v6 = sub_5990(*(void *)(a1 + 16), v15, 1);
    if (!v14) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (!v14)
    {
LABEL_21:
      if (v6 && !*((_DWORD *)v6 + 25))
      {
        int v7 = *((_DWORD *)v6 + 7);
        goto LABEL_3;
      }
LABEL_2:
      uint64_t v6 = (CFTypeRef *)a1;
      int v7 = 0;
LABEL_3:
      sub_1D0A4((uint64_t)v6, v7);
      goto LABEL_4;
    }
  }
  if (!*((_DWORD *)v14 + 25)) {
    goto LABEL_21;
  }
  sub_61FC((uint64_t)v14, 0);
LABEL_4:
  *(_DWORD *)(a1 + 40) = 1;
  *(_DWORD *)(a1 + 28) = a2;
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v9 = _os_log_pack_fill();
    int v10 = sub_9218(*(_DWORD *)(a1 + 24));
    uint64_t v11 = nullsub_1(*(void *)(*(void *)(a1 + 16) + 8));
    if (a2 <= 0x15) {
      uint64_t v12 = off_68DD0[a2];
    }
    else {
      uint64_t v12 = "<unknown>";
    }
    *(_DWORD *)uint64_t v9 = 136315650;
    *(void *)(v9 + 4) = v10;
    *(_WORD *)(v9 + 12) = 2080;
    *(void *)(v9 + 14) = v11;
    *(_WORD *)(v9 + 22) = 2080;
    *(void *)(v9 + 24) = v12;
    uint64_t result = __SC_log_send();
  }
  if (a3 == 1) {
    return sub_5A18();
  }
  return result;
}

uint64_t sub_9028(uint64_t a1, unsigned int a2)
{
  return sub_8E14(a1, a2, 1);
}

uint64_t sub_9030(uint64_t a1)
{
  return sub_9374(*(void *)(*(void *)(a1 + 16) + 8));
}

uint64_t sub_9054(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = 0xFFFFFFFFLL / (a2 - a1 + 1);
  if (v3) {
    return arc4random() / v3 + a1;
  }
  return v2;
}

BOOL sub_909C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 12);
  BOOL result = sub_59508(a1);
  if (v6 <= (int)a3)
  {
    if (!result) {
      return result;
    }
    uint64_t v8 = *(void *)a1;
    uint64_t v9 = *(int *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v9 + 1;
    *(void *)(v8 + 8 * v9) = a2;
  }
  else
  {
    if (!result) {
      return result;
    }
    memmove((void *)(*(void *)a1 + 8 * a3 + 8), (const void *)(*(void *)a1 + 8 * a3), 8 * (int)(*(_DWORD *)(a1 + 12) - a3));
    *(void *)(*(void *)a1 + 8 * a3) = a2;
    ++*(_DWORD *)(a1 + 12);
  }
  return 1;
}

void *sub_9140(void *result)
{
  *BOOL result = 0;
  result[1] = 0;
  return result;
}

void sub_9148(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2) {
    free(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
}

BOOL sub_9178(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_59508(a1);
  if (result)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *(int *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v6 + 1;
    *(void *)(v5 + 8 * v6) = a2;
    return 1;
  }
  return result;
}

CFPropertyListRef sub_91BC(const __SCDynamicStore *a1, const __CFString *a2)
{
  CFPropertyListRef v2 = SCDynamicStoreCopyValue(a1, a2);
  uint64_t v5 = v2;
  if (v2)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v2) != TypeID)
    {
      sub_6DB0(&v5);
      return v5;
    }
  }
  return v2;
}

const char *sub_9218(int a1)
{
  if (!v2 & v1)
  {
    switch(a1)
    {
      case 512:
        BOOL result = "NONE-V6";
        break;
      case 513:
        BOOL result = "MANUAL-V6";
        break;
      case 514:
        BOOL result = "AUTOMATIC-V6";
        break;
      case 515:
        BOOL result = "RTADV";
        break;
      case 516:
        BOOL result = "6TO4";
        break;
      case 517:
        BOOL result = "LINKLOCAL-V6";
        break;
      case 518:
        BOOL result = "DHCPV6-PD";
        break;
      default:
        if (a1) {
          BOOL result = 0;
        }
        else {
          BOOL result = "NONE";
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 256:
        BOOL result = "NONE-V4";
        break;
      case 257:
        BOOL result = "MANUAL";
        break;
      case 258:
        BOOL result = "BOOTP";
        break;
      case 259:
        BOOL result = "DHCP";
        break;
      case 260:
        BOOL result = "INFORM";
        break;
      case 261:
        BOOL result = "LINKLOCAL";
        break;
      case 262:
        BOOL result = "FAILOVER";
        break;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

BOOL sub_932C(int a1)
{
  return (a1 - 257) < 4 || (a1 - 513) < 3;
}

uint64_t sub_934C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 75);
  if (v1 == 144) {
    unsigned int v2 = 24;
  }
  else {
    unsigned int v2 = -1;
  }
  if (v1 == 6) {
    return 1;
  }
  else {
    return v2;
  }
}

uint64_t sub_9368(uint64_t a1)
{
  return *(unsigned char *)(a1 + 19) & 1;
}

uint64_t sub_9374(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_9384(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 16);
}

uint64_t sub_938C(_DWORD *a1, int a2, unsigned int *a3)
{
  uint64_t v6 = sub_557C((uint64_t)a1);
  uint64_t v7 = sub_8B80((uint64_t)a1);
  uint64_t v8 = 0;
  uint64_t v9 = v7;
  switch(a2)
  {
    case 0:
      if ((sub_9384(v7) & 8) != 0) {
        return 4;
      }
      if (v6)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          return 6;
        }
        goto LABEL_41;
      }
      uint64_t v6 = (uint64_t)malloc_type_malloc(0x930uLL, 0x10E0040563940C1uLL);
      bzero((void *)v6, 0x930uLL);
      *(_DWORD *)(v6 + 168) = sub_934C(v9) == 24;
      sub_54A30((void *)(v6 + 208));
      sub_1E5C8((uint64_t)a1, v6);
      sub_1343C(v6);
      sub_1BAC0((uint64_t)a1);
      *(_DWORD *)(v6 + 1744) = 0;
      int v52 = (const char *)nullsub_1(v9);
      snprintf(__str, 0x20uLL, "dhcp-%s", v52);
      uint64_t v53 = timer_callout_init(__str);
      *(void *)(v6 + 1760) = v53;
      if (!v53)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_103;
        }
        goto LABEL_102;
      }
      sub_1D384((uint64_t)a1);
      uint64_t v54 = bootp_client_init(v9);
      *(void *)(v6 + 16) = v54;
      if (!v54)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_103;
        }
        goto LABEL_102;
      }
      uint64_t v55 = sub_CE80(v9);
      *(void *)(v6 + 8) = v55;
      if (!v55)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_103;
        }
        goto LABEL_102;
      }
      if (!a3) {
        goto LABEL_91;
      }
      size_t v56 = *a3;
      if ((int)v56 < 1) {
        goto LABEL_91;
      }
      *(_DWORD *)(v6 + 32) = v56;
      uint64_t v57 = malloc_type_malloc(v56, 0xDD48CA1EuLL);
      *(void *)(v6 + 24) = v57;
      if (v57)
      {
        memmove(v57, *((const void **)a3 + 1), *(int *)(v6 + 32));
LABEL_91:
        sub_13480((uint64_t)a1);
        return 0;
      }
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
LABEL_102:
        uint64_t v59 = _os_log_pack_size();
        __chkstk_darwin(v59);
        __error();
        uint64_t v60 = _os_log_pack_fill();
        uint64_t v61 = nullsub_1(v9);
        *(_DWORD *)uint64_t v60 = 136315138;
        *(void *)(v60 + 4) = v61;
        __SC_log_send();
      }
LABEL_103:
      uint64_t v8 = 5;
LABEL_104:
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v62 = _os_log_pack_size();
        __chkstk_darwin(v62);
        __error();
        uint64_t v63 = _os_log_pack_fill();
        uint64_t v64 = nullsub_1(v9);
        *(_DWORD *)uint64_t v63 = 136315138;
        *(void *)(v63 + 4) = v64;
        __SC_log_send();
      }
      if (!v6)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v68 = _os_log_pack_size();
          __chkstk_darwin(v68);
          __error();
          goto LABEL_124;
        }
        return 6;
      }
      if (a2 == 1) {
        sub_13608((uint64_t)a1);
      }
      sub_13A98((uint64_t)a1, 0xCu);
      if (*(void *)(v6 + 1760)) {
        timer_callout_free((uint64_t *)(v6 + 1760));
      }
      if (*(void *)(v6 + 16)) {
        bootp_client_free((void **)(v6 + 16));
      }
      if (*(void *)(v6 + 8)) {
        sub_D020((uint64_t **)(v6 + 8));
      }
      uint64_t v65 = *(void **)(v6 + 24);
      if (v65)
      {
        free(v65);
        *(void *)(v6 + 24) = 0;
      }
      DHCPLeaseListFree((uint64_t *)(v6 + 136));
      sub_54A34(v6 + 208);
      double v66 = *(const void **)(v6 + 120);
      if (v66) {
        CFRelease(v66);
      }
      *(void *)(v6 + 120) = 0;
      CFStringRef v67 = *(const void **)(v6 + 128);
      if (v67) {
        CFRelease(v67);
      }
      free((void *)v6);
      sub_1E5C8((uint64_t)a1, 0);
      return v8;
    case 1:
      goto LABEL_104;
    case 3:
    case 8:
      if (!v6) {
        return 6;
      }
      if (*a3 == 1)
      {
        sub_1DB14((uint64_t)a1);
        sub_9028((uint64_t)a1, 0x13u);
        sub_5584((uint64_t)a1, 0);
      }
      int v10 = (int *)(a3 + 1);
      uint64_t v11 = a1;
      int v12 = a2;
      goto LABEL_6;
    case 4:
      sub_149A0((uint64_t)a1);
      return 0;
    case 7:
      if (!v6)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
LABEL_41:
          uint64_t v33 = _os_log_pack_size();
          __chkstk_darwin(v33);
          __error();
LABEL_124:
          uint64_t v69 = _os_log_pack_fill();
          uint64_t v70 = nullsub_1(v9);
          *(_DWORD *)uint64_t v69 = 136315138;
          *(void *)(v69 + 4) = v70;
          __SC_log_send();
          return 6;
        }
        return 6;
      }
      uint64_t v13 = *(const void ***)a3;
      a3[2] = 0;
      if (v13 && (size_t v14 = *(unsigned int *)v13, (int)v14 >= 1))
      {
        uint64_t v15 = *(const void **)(v6 + 24);
        if (v15 && *(_DWORD *)(v6 + 32) == v14 && !bcmp(v15, v13[1], v14)) {
          return 0;
        }
      }
      else if (!*(void *)(v6 + 24))
      {
        return 0;
      }
      uint64_t v8 = 0;
      a3[2] = 1;
      return v8;
    case 9:
      if (!v6) {
        return 6;
      }
      if (!*(_DWORD *)(v6 + 40))
      {
        int v34 = sub_1E5D0((uint64_t)a1);
        if (v34 == *(_DWORD *)(v6 + 1732) && *a3 == v34 && !sub_1BE88((uint64_t)a1, (uint64_t)a3))
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v35 = _os_log_pack_size();
            __chkstk_darwin(v35);
            __error();
            uint64_t v36 = _os_log_pack_fill();
            uint64_t v37 = nullsub_1(v9);
            sockaddr v38 = (unsigned __int8 *)*((void *)a3 + 1);
            sub_13BA0(v36, v37, *(unsigned __int8 *)(v6 + 1732), *(unsigned __int8 *)(v6 + 1733), *(unsigned __int8 *)(v6 + 1734), *(unsigned __int8 *)(v6 + 1735), *v38, v38[1], v38[2], v38[3], v38[4], v38[5], *(unsigned __int8 *)(v6 + 1736), *(unsigned __int8 *)(v6 + 1737), *(unsigned __int8 *)(v6 + 1738), *(unsigned __int8 *)(v6 + 1739));
            __SC_log_send();
          }
          sub_13C38((uint64_t)a1, 0);
          sub_9028((uint64_t)a1, 8u);
          sub_13DA4((uint64_t)a1);
        }
      }
      return 0;
    case 10:
    case 12:
      if (!v6) {
        return 6;
      }
      if (*(_DWORD *)(v6 + 56)) {
        sub_14A18((uint64_t)a1, (const void *)(v6 + 224), *(_DWORD *)(v6 + 1724), 1);
      }
      return 0;
    case 11:
      if (sub_1E5B8((uint64_t)a1)) {
        return 0;
      }
      if (a3[1] && !a3[2] || sub_9368(v9) && *a3 == 1 || !sub_9368(v9) && !a3[3])
      {
        sub_1DB14((uint64_t)a1);
        sub_9028((uint64_t)a1, 0x13u);
        uint64_t v11 = a1;
        int v12 = 11;
        int v10 = (int *)(a3 + 1);
LABEL_6:
        sub_14358(v11, v12, v10);
      }
      else
      {
        double current_time = timer_get_current_time();
        if (sub_14B74((uint64_t)a1, current_time))
        {
          unsigned int v40 = *(_DWORD *)(v6 + 1744);
          if (v40 <= 8 && ((1 << v40) & 0x1A0) != 0 && sub_1BC54((uint64_t)a1) && !*(_DWORD *)(v6 + 200))
          {
            if (*a3 == 2
              && (*(void *)__str = 0, v74 = 0, uint64_t v75 = 0, sub_1B778((uint64_t)a1, (uint64_t)__str)))
            {
LABEL_26:
              sub_159E4(a1, 0, __str);
            }
            else if (*(_DWORD *)(v6 + 72) != -1)
            {
              double v71 = *(double *)(v6 + 192);
              if (current_time >= v71 || (double v72 = v71 - current_time, LODWORD(v41) = dword_7007C, v72 < (double)v41))
              {
                sub_15EC4((uint64_t)a1, 0, 0);
              }
              else
              {
                uint64_t v29 = (uint64_t)v72;
                uint64_t v27 = *(void *)(v6 + 1760);
                int v28 = sub_15EC4;
                int v30 = 0;
                uint64_t v31 = (uint64_t)a1;
                uint64_t v32 = 0;
LABEL_37:
                timer_set_relative(v27, v29, v30, (uint64_t)v28, v31, v32, 0);
              }
            }
          }
          else
          {
            *(_DWORD *)__str = *(_DWORD *)(v6 + 1732);
            sub_14BF0(a1, 0, (uint64_t)__str);
          }
        }
        else
        {
          sub_4A0C(a1, 0, 0);
        }
      }
      return 0;
    case 13:
      if (!sub_1E5D0((uint64_t)a1)) {
        return 0;
      }
      unsigned int v16 = *(_DWORD *)(v6 + 1724);
      if (!v16) {
        return 0;
      }
      uint64_t v8 = 0;
      *(void *)a3 = v6 + 224;
      a3[2] = v16;
      *((void *)a3 + 2) = v6 + 208;
      *((void *)a3 + 3) = *(void *)(v6 + 80);
      *((void *)a3 + 4) = *(void *)(v6 + 64);
      return v8;
    case 16:
      *(void *)__str = 0;
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      unsigned int v17 = *(_DWORD *)(v6 + 1744);
      BOOL v18 = v17 > 8;
      int v19 = (1 << v17) & 0x1A0;
      BOOL v20 = v18 || v19 == 0;
      if (!v20 && sub_1BC54((uint64_t)a1) && sub_1B778((uint64_t)a1, (uint64_t)__str)) {
        goto LABEL_26;
      }
      return 0;
    case 17:
      sub_A1E8((uint64_t)a1, a3);
      return 0;
    case 20:
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v21 = _os_log_pack_size();
        __chkstk_darwin(v21);
        __error();
        uint64_t v22 = _os_log_pack_fill();
        uint64_t v23 = nullsub_1(v9);
        *(_DWORD *)uint64_t v22 = 136315394;
        *(void *)(v22 + 4) = v23;
        *(_WORD *)(v22 + 12) = 2112;
        *(void *)(v22 + 14) = a3;
        __SC_log_send();
      }
      DHCPLeaseListRemoveLeaseForWiFi((uint64_t *)(v6 + 136), a3, 0);
      uint64_t v24 = *(const void **)(v6 + 120);
      if (!v24 || !CFEqual(v24, a3)) {
        return 0;
      }
      sub_13608((uint64_t)a1);
      sub_1DB14((uint64_t)a1);
      sub_9028((uint64_t)a1, 0xBu);
      sub_54A34(v6 + 208);
      double v25 = *(const void **)(v6 + 120);
      if (v25) {
        CFRelease(v25);
      }
      *(void *)(v6 + 120) = 0;
      uint64_t v26 = *(const void **)(v6 + 128);
      if (v26) {
        CFRelease(v26);
      }
      *(void *)(v6 + 128) = 0;
      sub_BEF8((uint64_t)a1, 0);
      uint64_t v27 = *(void *)(v6 + 1760);
      int v28 = sub_16750;
      uint64_t v29 = 0;
      int v30 = 500000;
      uint64_t v31 = (uint64_t)a1;
      uint64_t v32 = 20;
      goto LABEL_37;
    case 22:
      uint64_t v42 = sub_557C((uint64_t)a1);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      uint64_t v44 = Mutable;
      uint64_t v45 = *(unsigned int *)(v42 + 1744);
      if (v45 > 8) {
        int v46 = "<undefined>";
      }
      else {
        int v46 = off_68D08[v45];
      }
      sub_53ED0(Mutable, @"State", v46);
      if (sub_1E5D0((uint64_t)a1) && *(_DWORD *)(v42 + 56))
      {
        int v47 = sub_182AC(v42 + 208);
        if (v47)
        {
          unsigned int v48 = v47;
          CFDictionarySetValue(v44, @"Packet", v47);
          CFRelease(v48);
        }
        sub_53F38(v44, @"LeaseStartTime", *(CFAbsoluteTime *)(v42 + 80));
        if (*(_DWORD *)(v42 + 72) == -1) {
          CFDictionarySetValue(v44, @"LeaseIsInfinite", kCFBooleanTrue);
        }
        else {
          sub_53F38(v44, @"LeaseExpirationTime", *(CFAbsoluteTime *)(v42 + 64));
        }
      }
      else
      {
        unsigned int v49 = *(_DWORD *)(v42 + 1744);
        if (v49 <= 6 && ((1 << v49) & 0x58) != 0 && *(double *)(v42 + 1776) != 0.0)
        {
          double v50 = timer_get_current_time();
          double v51 = *(double *)(v42 + 1776);
          if (v50 > v51) {
            sub_53F94(v44, @"ElapsedTime", (unint64_t)(v50 - v51));
          }
        }
      }
      CFDictionarySetValue((CFMutableDictionaryRef)a3, @"DHCP", v44);
      CFRelease(v44);
      return 0;
    default:
      return v8;
  }
}

void sub_A1E8(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = sub_557C(a1);
  uint64_t v5 = sub_8B80(a1);
  uint64_t valuePtr = 0;
  if (!*a2 || !sub_1E5D0(a1) || !*(_DWORD *)(v4 + 56) || *(double *)(v4 + 64) == 0.0)
  {
LABEL_34:
    if (*(double *)(v4 + 2344) != 0.0)
    {
      CFStringRef v23 = sub_23014(a1);
      CFDateRef v24 = CFDateCreate(0, *(CFAbsoluteTime *)(v4 + 2344));
      IOPMCancelScheduledPowerEvent(v24, v23, @"wake");
      CFRelease(v23);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v25 = _os_log_pack_size();
        __chkstk_darwin(v25);
        __error();
        uint64_t v26 = _os_log_pack_fill();
        uint64_t v27 = nullsub_1(v5);
        uint64_t v28 = *(void *)(v4 + 2344);
        *(_DWORD *)uint64_t v26 = 136315650;
        *(void *)(v26 + 4) = v27;
        *(_WORD *)(v26 + 12) = 2112;
        *(void *)(v26 + 14) = v24;
        *(_WORD *)(v26 + 22) = 2048;
        *(void *)(v26 + 24) = v28;
        __SC_log_send();
      }
      CFRelease(v24);
      *(void *)(v4 + 2344) = 0;
    }
    return;
  }
  double current_time = timer_get_current_time();
  double v8 = *(double *)(v4 + 64);
  if (current_time >= v8)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      uint64_t v15 = nullsub_1(v5);
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = v15;
      __SC_log_send();
    }
    unsigned int v16 = "lease is expired";
    goto LABEL_31;
  }
  double v9 = *(double *)(v4 + 192);
  double v10 = (double)dword_70078;
  double v11 = *(double *)(v4 + 96);
  if (current_time < v9 && v9 - current_time >= v10)
  {
    if (v11 <= v9)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = (uint64_t)((v11 - v9) * 0.5);
      uint64_t valuePtr = v12;
    }
    unsigned int v16 = "wake at renew_rebind_time";
    goto LABEL_30;
  }
  double v17 = v11 - current_time;
  if (current_time < v11 && v17 >= v10)
  {
    if (v8 <= v11)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = (uint64_t)((v8 - v11) * 0.5);
      uint64_t valuePtr = v12;
    }
    unsigned int v16 = "wake at t2";
    goto LABEL_29;
  }
  if (*(_DWORD *)v4)
  {
    if (current_time < v11)
    {
      LODWORD(v6) = dword_70074;
      if (v17 >= (double)v6)
      {
        uint64_t v12 = 0;
        unsigned int v16 = "wake at t2 (allow short first wake)";
LABEL_29:
        double v9 = v11;
        goto LABEL_30;
      }
    }
  }
  unsigned int v16 = "expiration is too soon";
  if (current_time >= v8 || v8 - current_time < v10) {
    goto LABEL_31;
  }
  uint64_t v12 = 0;
  double v9 = current_time + (double)dword_70078;
  unsigned int v16 = "wake in min_interval";
LABEL_30:
  if (v9 == 0.0)
  {
LABEL_31:
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v18 = _os_log_pack_size();
      int v19 = v16;
      uint64_t v55 = &v54;
      __chkstk_darwin(v18);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      uint64_t v21 = nullsub_1(v5);
      *(_DWORD *)uint64_t v20 = 136315394;
      *(void *)(v20 + 4) = v21;
      *(_WORD *)(v20 + 12) = 2080;
      *(void *)(v20 + 14) = v19;
      __SC_log_send();
    }
    uint64_t v22 = nullsub_1(v5);
    sub_18DA4(v22, (void *)(v4 + 56), current_time);
    a2[1] = 0;
    goto LABEL_34;
  }
  uint64_t v55 = (uint64_t *)v12;
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v29 = _os_log_pack_size();
    int v30 = v16;
    uint64_t v54 = (uint64_t)&v54;
    __chkstk_darwin(v29);
    __error();
    uint64_t v31 = _os_log_pack_fill();
    uint64_t v32 = nullsub_1(v5);
    *(_DWORD *)uint64_t v31 = 136315650;
    *(void *)(v31 + 4) = v32;
    *(_WORD *)(v31 + 12) = 2048;
    *(double *)(v31 + 14) = v9;
    *(_WORD *)(v31 + 22) = 2080;
    *(void *)(v31 + 24) = v30;
    __SC_log_send();
  }
  uint64_t v33 = nullsub_1(v5);
  sub_18DA4(v33, (void *)(v4 + 56), current_time);
  if (v9 == *(double *)(v4 + 2344))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v34 = _os_log_pack_size();
      __chkstk_darwin(v34);
      __error();
      uint64_t v35 = _os_log_pack_fill();
      uint64_t v36 = nullsub_1(v5);
      *(_DWORD *)uint64_t v35 = 136315394;
      *(void *)(v35 + 4) = v36;
      *(_WORD *)(v35 + 12) = 2048;
      *(double *)(v35 + 14) = v9;
      __SC_log_send();
    }
  }
  else
  {
    CFStringRef v37 = sub_23014(a1);
    double v38 = *(double *)(v4 + 2344);
    if (v38 != 0.0)
    {
      CFDateRef v39 = CFDateCreate(0, v38);
      IOPMCancelScheduledPowerEvent(v39, v37, @"wake");
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v40 = _os_log_pack_size();
        __chkstk_darwin(v40);
        __error();
        uint64_t v41 = _os_log_pack_fill();
        uint64_t v42 = nullsub_1(v5);
        uint64_t v43 = *(void *)(v4 + 2344);
        *(_DWORD *)uint64_t v41 = 136315650;
        *(void *)(v41 + 4) = v42;
        *(_WORD *)(v41 + 12) = 2112;
        *(void *)(v41 + 14) = v39;
        *(_WORD *)(v41 + 22) = 2048;
        *(void *)(v41 + 24) = v43;
        __SC_log_send();
      }
      CFRelease(v39);
    }
    CFDateRef v44 = CFDateCreate(0, v9);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionarySetValue(Mutable, @"scheduledby", v37);
    CFDictionarySetValue(Mutable, @"time", v44);
    if ((uint64_t)v55 >= 1)
    {
      CFNumberRef v46 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
      CFDictionarySetValue(Mutable, @"leeway", v46);
      CFRelease(v46);
    }
    int v47 = IOPMRequestSysWake();
    CFRelease(Mutable);
    CFRelease(v37);
    sub_4220();
    if (v47)
    {
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v48 = _os_log_pack_size();
        __chkstk_darwin(v48);
        __error();
        uint64_t v49 = _os_log_pack_fill();
        uint64_t v50 = nullsub_1(v5);
        *(_DWORD *)uint64_t v49 = 136315650;
        *(void *)(v49 + 4) = v50;
        *(_WORD *)(v49 + 12) = 2112;
        *(void *)(v49 + 14) = v44;
        *(_WORD *)(v49 + 22) = 2048;
        *(double *)(v49 + 24) = v9;
        __SC_log_send();
      }
      *(void *)(v4 + 2344) = 0;
      a2[1] = 0;
    }
    else
    {
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v51 = _os_log_pack_size();
        __chkstk_darwin(v51);
        __error();
        uint64_t v52 = _os_log_pack_fill();
        uint64_t v53 = nullsub_1(v5);
        *(_DWORD *)uint64_t v52 = 136315650;
        *(void *)(v52 + 4) = v53;
        *(_WORD *)(v52 + 12) = 2112;
        *(void *)(v52 + 14) = v44;
        *(_WORD *)(v52 + 22) = 2048;
        *(double *)(v52 + 24) = v9;
        __SC_log_send();
      }
      *(double *)(v4 + 2344) = v9;
    }
    CFRelease(v44);
  }
}

void sub_ABF0(uint64_t a1)
{
  uint64_t v1 = sub_557C(a1);
  if (v1)
  {
    uint64_t v2 = v1;
    timer_cancel(*(void *)(v1 + 1760));
    bootp_client_disable_receive(*(void **)(v2 + 16));
    uint64_t v3 = *(void *)(v2 + 8);
    sub_BE68(v3);
  }
}

void sub_AC48(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_557C(a1);
  uint64_t v7 = sub_8B80(a1);
  if (a2 == 6)
  {
    if (*(_DWORD *)(a3 + 8))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled())
      {
LABEL_12:
        if (!*(_DWORD *)(v6 + 48)) {
          return;
        }
        sub_9028(a1, 0xBu);
        uint64_t v16 = a1;
        int v17 = 1;
        goto LABEL_14;
      }
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      uint64_t v14 = nullsub_1(v7);
      uint64_t v15 = sub_E73C(*(void *)(v6 + 8));
      *(_DWORD *)uint64_t v13 = 136315394;
      *(void *)(v13 + 4) = v14;
      *(_WORD *)(v13 + 12) = 2080;
      *(void *)(v13 + 14) = v15;
LABEL_11:
      __SC_log_send();
      goto LABEL_12;
    }
    if (!*(_DWORD *)(a3 + 12))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_12;
      }
      uint64_t v40 = _os_log_pack_size();
      __chkstk_darwin(v40);
      __error();
      uint64_t v41 = _os_log_pack_fill();
      uint64_t v42 = nullsub_1(v7);
      *(_DWORD *)uint64_t v41 = 136315138;
      *(void *)(v41 + 4) = v42;
      goto LABEL_11;
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v18 = _os_log_pack_size();
      __chkstk_darwin(v18);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      uint64_t v20 = nullsub_1(v7);
      int v21 = *(unsigned __int8 *)(a3 + 16);
      int v22 = *(unsigned __int8 *)(a3 + 17);
      int v23 = *(unsigned __int8 *)(a3 + 18);
      int v24 = *(unsigned __int8 *)(a3 + 19);
      int v25 = *(unsigned __int8 *)(a3 + 20);
      int v26 = *(unsigned __int8 *)(a3 + 21);
      int v27 = *(unsigned __int8 *)(a3 + 22);
      int v28 = *(unsigned __int8 *)(a3 + 23);
      *(_DWORD *)uint64_t v19 = 136317186;
      *(void *)(v19 + 4) = v20;
      *(_WORD *)(v19 + 12) = 1024;
      *(_DWORD *)(v19 + 14) = v21;
      *(_WORD *)(v19 + 18) = 1024;
      *(_DWORD *)(v19 + 20) = v22;
      *(_WORD *)(v19 + 24) = 1024;
      *(_DWORD *)(v19 + 26) = v23;
      *(_WORD *)(v19 + 30) = 1024;
      *(_DWORD *)(v19 + 32) = v24;
      *(_WORD *)(v19 + 36) = 1024;
      *(_DWORD *)(v19 + 38) = v25;
      *(_WORD *)(v19 + 42) = 1024;
      *(_DWORD *)(v19 + 44) = v26;
      *(_WORD *)(v19 + 48) = 1024;
      *(_DWORD *)(v19 + 50) = v27;
      *(_WORD *)(v19 + 54) = 1024;
      *(_DWORD *)(v19 + 56) = v28;
      __SC_log_send();
    }
    unsigned int v29 = sub_58034(v7);
    uint64_t Lease = DHCPLeaseListFindLease(v6 + 136, *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20), (const void *)(a3 + 24), v29);
    if (Lease == -1)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v60 = _os_log_pack_size();
        __chkstk_darwin(v60);
        __error();
        uint64_t v61 = _os_log_pack_fill();
        uint64_t v62 = nullsub_1(v7);
        int v63 = *(unsigned __int8 *)(a3 + 16);
        int v64 = *(unsigned __int8 *)(a3 + 17);
        int v65 = *(unsigned __int8 *)(a3 + 18);
        int v66 = *(unsigned __int8 *)(a3 + 19);
        *(_DWORD *)uint64_t v61 = 136316162;
        *(void *)(v61 + 4) = v62;
        *(_WORD *)(v61 + 12) = 1024;
        *(_DWORD *)(v61 + 14) = v63;
        *(_WORD *)(v61 + 18) = 1024;
        *(_DWORD *)(v61 + 20) = v64;
        *(_WORD *)(v61 + 24) = 1024;
        *(_DWORD *)(v61 + 26) = v65;
        *(_WORD *)(v61 + 30) = 1024;
        *(_DWORD *)(v61 + 32) = v66;
        __SC_log_send();
      }
      if (!*(_DWORD *)(v6 + 48)) {
        return;
      }
    }
    else
    {
      uint64_t v31 = sub_5B4C(v6 + 136, Lease);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v32 = _os_log_pack_size();
        __chkstk_darwin(v32);
        __error();
        uint64_t v33 = _os_log_pack_fill();
        uint64_t v34 = nullsub_1(v7);
        int v35 = *(unsigned __int8 *)(v31 + 4);
        int v36 = *(unsigned __int8 *)(v31 + 5);
        int v37 = *(unsigned __int8 *)(v31 + 6);
        int v38 = *(unsigned __int8 *)(v31 + 7);
        *(_DWORD *)uint64_t v33 = 136316162;
        *(void *)(v33 + 4) = v34;
        *(_WORD *)(v33 + 12) = 1024;
        *(_DWORD *)(v33 + 14) = v35;
        *(_WORD *)(v33 + 18) = 1024;
        *(_DWORD *)(v33 + 20) = v36;
        *(_WORD *)(v33 + 24) = 1024;
        *(_DWORD *)(v33 + 26) = v37;
        *(_WORD *)(v33 + 30) = 1024;
        *(_DWORD *)(v33 + 32) = v38;
        __SC_log_send();
      }
      int v39 = *(_DWORD *)(v6 + 1744);
      if (v39 != 6)
      {
        if (v39 == 3 && *(_DWORD *)(v6 + 44) != 1)
        {
          sub_185D0(a1, v31, 0);
          sub_1E594(a1);
        }
        return;
      }
      if (*(_DWORD *)(v6 + 44) == 1)
      {
        LODWORD(v78[0]) = 0;
        int v73 = *(_DWORD *)(v31 + 4);
        if (v73 != *(_DWORD *)(v6 + 1732)
          || !sub_1695C(v6 + 208, v73, v78)
          || LODWORD(v78[0]) != *(_DWORD *)(v31 + 20))
        {
          return;
        }
        goto LABEL_56;
      }
      if (sub_185D0(a1, v31, 0))
      {
        v78[0] = 0;
        v78[1] = 0;
        unsigned int v74 = *(_DWORD *)(v6 + 2332) + 1;
        *(_DWORD *)(v6 + 2332) = v74;
        *(_DWORD *)(*(void *)(v6 + 176) + 4) = bswap32(v74);
        sub_54A30(v78);
        sub_54D30(v78, v6 + 1784, 0x224u, 0);
        uint64_t v75 = sub_54BE8((uint64_t)v78, 50, 4);
        if (v75)
        {
          *(_DWORD *)uint64_t v75 = *(_DWORD *)(v31 + 4);
          *(_DWORD *)(v6 + 1768) = 0;
        }
        sub_54A34((uint64_t)v78);
        goto LABEL_56;
      }
      if (!*(_DWORD *)(v6 + 48))
      {
LABEL_56:
        sub_1E594(a1);
        unsigned int v76 = sub_54BE8(v6 + 208, 1, 4);
        if (v76) {
          unint64_t v77 = *(unsigned int *)v76;
        }
        else {
          unint64_t v77 = 0;
        }
        *(_DWORD *)(v6 + 36) = 0;
        *(_DWORD *)(v6 + 2336) = 0;
        sub_1D47C(a1, *(unsigned int *)(v6 + 1732), v77, 0);
        sub_1A604(a1);
        if (dword_70028) {
          sub_5584(a1, 0);
        }
        return;
      }
    }
    sub_9028(a1, 0xBu);
    uint64_t v16 = a1;
    int v17 = 0;
LABEL_14:
    sub_1A35C(v16, v17);
    return;
  }
  if (a2) {
    return;
  }
  int v79 = 0;
  v78[0] = 0;
  if (!G_router_arp || sub_8DF8(a1)) {
    return;
  }
  if (!sub_9368(v7))
  {
    double v11 = 0;
    double v9 = 0;
    double v10 = 0;
LABEL_29:
    uint64_t v43 = DHCPLeaseListCopyARPAddressInfo((uint64_t *)(v6 + 136), v9, v10, v11, 1, &v79);
    sub_4220();
    _SC_syslog_os_log_mapping();
    int v44 = __SC_log_enabled();
    if (v43)
    {
      if (v44)
      {
        uint64_t v45 = _os_log_pack_size();
        __chkstk_darwin(v45);
        __error();
        uint64_t v46 = _os_log_pack_fill();
        uint64_t v47 = nullsub_1(v7);
        *(_DWORD *)uint64_t v46 = 136315138;
        *(void *)(v46 + 4) = v47;
        __SC_log_send();
      }
      int v48 = v79;
      if (v79 >= 1)
      {
        uint64_t v49 = 0;
        do
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v50 = _os_log_pack_size();
            __chkstk_darwin(v50);
            __error();
            uint64_t v51 = _os_log_pack_fill();
            uint64_t v52 = (unsigned __int8 *)&v43[6 * v49];
            int v53 = *v52;
            int v54 = v52[1];
            ++v49;
            int v55 = v52[2];
            int v56 = v52[3];
            int v57 = v52[4];
            int v58 = v52[5];
            int v59 = v52[6];
            LODWORD(v52) = v52[7];
            *(_DWORD *)uint64_t v51 = 67111168;
            *(_DWORD *)(v51 + 4) = v49;
            *(_WORD *)(v51 + 8) = 1024;
            *(_DWORD *)(v51 + 10) = v53;
            *(_WORD *)(v51 + 14) = 1024;
            *(_DWORD *)(v51 + 16) = v54;
            *(_WORD *)(v51 + 20) = 1024;
            *(_DWORD *)(v51 + 22) = v55;
            *(_WORD *)(v51 + 26) = 1024;
            *(_DWORD *)(v51 + 28) = v56;
            *(_WORD *)(v51 + 32) = 1024;
            *(_DWORD *)(v51 + 34) = v57;
            *(_WORD *)(v51 + 38) = 1024;
            *(_DWORD *)(v51 + 40) = v58;
            *(_WORD *)(v51 + 44) = 1024;
            *(_DWORD *)(v51 + 46) = v59;
            *(_WORD *)(v51 + 50) = 1024;
            *(_DWORD *)(v51 + 52) = v52;
            __SC_log_send();
          }
          else
          {
            ++v49;
          }
          int v48 = v79;
        }
        while (v49 < v79);
      }
      sub_E52C(*(void *)(v6 + 8), (uint64_t)sub_AC48, a1, 6, v43, v48);
      free(v43);
    }
    else if (v44)
    {
      uint64_t v67 = _os_log_pack_size();
      __chkstk_darwin(v67);
      __error();
      uint64_t v68 = _os_log_pack_fill();
      uint64_t v69 = nullsub_1(v7);
      *(_DWORD *)uint64_t v68 = 136315138;
      *(void *)(v68 + 4) = v69;
      __SC_log_send();
    }
    return;
  }
  uint64_t v8 = sub_1ED00(a1);
  if (v8)
  {
    double v9 = (const void *)v8;
    double v10 = (const void *)sub_1ED14(a1);
    *(double *)int v78 = *(double *)a3 - (double)G_router_arp_wifi_lease_start_threshold_secs;
    double v11 = (double *)v78;
    goto LABEL_29;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v70 = _os_log_pack_size();
    __chkstk_darwin(v70);
    __error();
    uint64_t v71 = _os_log_pack_fill();
    uint64_t v72 = nullsub_1(v7);
    *(_DWORD *)uint64_t v71 = 136315138;
    *(void *)(v71 + 4) = v72;
    __SC_log_send();
  }
}

__CFString *sub_B764(CFNullRef *a1, void *a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  if (a3 >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      if (*a2)
      {
        CFNullRef v8 = *a1;
        if (*a1 == kCFNull) {
          CFNullRef v8 = (CFNullRef)@"RankLast";
        }
        uint64_t v9 = v7 + 1;
        if (v7) {
          double v10 = ", ";
        }
        else {
          double v10 = "";
        }
        CFStringAppendFormat(Mutable, 0, @"%s%@", v10, v8);
        uint64_t v7 = v9;
      }
      ++a2;
      ++a1;
      --a3;
    }
    while (a3);
  }
  return Mutable;
}

ssize_t sub_B848(int a1, const void *a2, int a3)
{
  return write(a1, a2, a3);
}

uint64_t sub_B864(int a1)
{
  memset(v3, 0, sizeof(v3));
  __strlcpy_chk();
  return ioctl(a1, 0x8020426CuLL, v3);
}

uint64_t sub_B8E8()
{
  snprintf(__str, 0x100uLL, "/dev/bpf%d", 0);
  uint64_t v0 = open(__str, 2, 0);
  if ((v0 & 0x80000000) != 0)
  {
    if (*__error() != 16) {
      return v0;
    }
    for (int i = 1; ; ++i)
    {
      snprintf(__str, 0x100uLL, "/dev/bpf%d", i);
      uint64_t v0 = open(__str, 2, 0);
      if ((v0 & 0x80000000) == 0) {
        break;
      }
      if (*__error() != 16) {
        return v0;
      }
    }
  }
  int v3 = 900;
  ioctl(v0, 0x8004427BuLL, &v3);
  return v0;
}

uint64_t sub_B9F4(int a1)
{
  uint64_t v3 = 6;
  v2[1] = &v3;
  v2[0] = 1;
  return ioctl(a1, 0x80104267uLL, v2);
}

uint64_t sub_BA68(int a1)
{
  if (a1 < 0) {
    return 0;
  }
  else {
    return close(a1);
  }
}

uint64_t sub_BA78()
{
  uint64_t result = qword_70130;
  if (!qword_70130)
  {
    uint64_t v1 = malloc_type_malloc(0x40uLL, 0x10A00402BC2289AuLL);
    qword_70130 = (uint64_t)v1;
    *uint64_t v1 = 0u;
    v1[1] = 0u;
    v1[2] = 0u;
    v1[3] = 0u;
    sub_57BE0(v1, (uint64_t)sub_100D8, 0);
    uint64_t v2 = timer_callout_init("bootp_session");
    uint64_t result = qword_70130;
    *(void *)(qword_70130 + 48) = v2;
  }
  return result;
}

void sub_BAF8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8))
  {
    uint64_t v2 = *(void **)(a1 + 16);
    int v3 = *((_DWORD *)v2 + 16);
    if (v3 <= 0)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v11 = _os_log_pack_fill();
        uint64_t v12 = nullsub_1(*v2);
        int v13 = *((_DWORD *)v2 + 16);
        *(_DWORD *)uint64_t v11 = 136315394;
        *(void *)(v11 + 4) = v12;
        *(_WORD *)(v11 + 12) = 1024;
        *(_DWORD *)(v11 + 14) = v13;
        __SC_log_send();
      }
    }
    else
    {
      *((_DWORD *)v2 + 16) = v3 - 1;
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v4 = _os_log_pack_fill();
        uint64_t v5 = nullsub_1(*v2);
        int v6 = *((_DWORD *)v2 + 16);
        *(_DWORD *)uint64_t v4 = 136315394;
        *(void *)(v4 + 4) = v5;
        *(_WORD *)(v4 + 12) = 1024;
        *(_DWORD *)(v4 + 14) = v6;
        __SC_log_send();
      }
      *(_DWORD *)(a1 + 8) = 0;
      if (!*((_DWORD *)v2 + 16))
      {
        if (v2[7])
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            _os_log_pack_size();
            __chkstk_darwin();
            __error();
            uint64_t v7 = _os_log_pack_fill();
            uint64_t v8 = nullsub_1(*v2);
            int v9 = sub_C448((unsigned int *)v2[7]);
            *(_DWORD *)uint64_t v7 = 136315394;
            *(void *)(v7 + 4) = v8;
            *(_WORD *)(v7 + 12) = 1024;
            *(_DWORD *)(v7 + 14) = v9;
            __SC_log_send();
          }
          sub_1AFD8((dispatch_object_t **)v2 + 7);
        }
        double v10 = (void *)v2[5];
        if (v10)
        {
          free(v10);
          v2[5] = 0;
        }
      }
    }
  }
}

void sub_BE18(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 272);
  if (v1)
  {
    *(void *)(a1 + 272) = 0;
    dispatch_source_cancel(v1);
    dispatch_release(v1);
  }
}

void sub_BE68(uint64_t a1)
{
  *(unsigned char *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  sub_BAF8(a1);
  timer_cancel(*(void *)(a1 + 64));
  uint64_t v2 = *(void **)(a1 + 256);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 256) = 0;
  }

  sub_BE18(a1);
}

uint64_t sub_BEC8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(uint64_t (**)(void, void, void))(v1 + 8);
  if (v2)
  {
    if (*(_DWORD *)(v1 + 52))
    {
      *(_DWORD *)(v1 + 52) = 0;
      return v2(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
    }
  }
  return result;
}

uint64_t sub_BEF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

void sub_BEF8(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 72) != a2)
  {
    *(_DWORD *)(a1 + 72) = a2;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      int v6 = sub_9218(*(_DWORD *)(a1 + 24));
      uint64_t v7 = nullsub_1(*(void *)(*(void *)(a1 + 16) + 8));
      uint64_t v8 = "busy";
      *(_DWORD *)uint64_t v5 = 136315650;
      *(void *)(v5 + 4) = v6;
      *(_WORD *)(v5 + 12) = 2080;
      if (!a2) {
        uint64_t v8 = "not busy";
      }
      *(void *)(v5 + 14) = v7;
      *(_WORD *)(v5 + 22) = 2080;
      *(void *)(v5 + 24) = v8;
      __SC_log_send();
    }
    sub_3C24(*(void *)(a1 + 16));
  }
}

__CFDictionary *sub_C074(uint64_t a1, __CFString *a2, CFDictionaryRef *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  int v6 = sub_5990(*(void *)(a1 + 16), *(const void **)a1, 0);
  memset(v15, 0, sizeof(v15));
  if (v6 && *((_DWORD *)v6 + 10) && !*((_DWORD *)v6 + 7)) {
    ((void (*)(CFTypeRef *, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_48A8)(v6, 14, v15, v7, v8, v9, v10, v11);
  }
  uint64_t v12 = nullsub_1(v5);
  int v13 = sub_C450(v12, (uint64_t)a2, (uint64_t)v15);
  *a3 = sub_5B50(a2, (uint64_t)v15);
  return v13;
}

uint64_t sub_C120(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if ((*(unsigned char *)v2 & 8) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  int v3 = sub_255B8(v2 + 24);
  if (v3 || (int v3 = sub_255B8(v2 + 56)) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
    uint64_t v5 = _os_log_pack_size();
    __chkstk_darwin(v5);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    uint64_t v7 = sub_9218(*(_DWORD *)(a1 + 24));
    uint64_t v8 = nullsub_1(*(void *)(v2 + 8));
    uint64_t v9 = sub_9218(v3[6]);
    *(_DWORD *)uint64_t v6 = 136315650;
    *(void *)(v6 + 4) = v7;
    *(_WORD *)(v6 + 12) = 2080;
    *(void *)(v6 + 14) = v8;
    *(_WORD *)(v6 + 22) = 2080;
    *(void *)(v6 + 24) = v9;
    return __SC_log_send();
  }
  sub_58DC8(*(void *)(v2 + 8));
  uint64_t result = sub_FE28();
  if (result)
  {
    *(_DWORD *)v2 |= 8u;
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
LABEL_7:
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      uint64_t v12 = sub_9218(*(_DWORD *)(a1 + 24));
      uint64_t v13 = nullsub_1(*(void *)(v2 + 8));
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)(v11 + 4) = v12;
      *(_WORD *)(v11 + 12) = 2080;
      *(void *)(v11 + 14) = v13;
      return __SC_log_send();
    }
  }
  return result;
}

uint64_t sub_C448(unsigned int *a1)
{
  return *a1;
}

__CFDictionary *sub_C450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef v42 = 0;
  CFDictionaryRef v43 = 0;
  LODWORD(v46) = 0;
  LODWORD(theArray) = 0;
  LODWORD(v44) = 0;
  if (!a2)
  {
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_53;
  }
  CFMutableDictionaryRef Mutable = *(__CFDictionary **)(a2 + 16);
  if (!Mutable) {
    goto LABEL_53;
  }
  if (sub_121C4(6)) {
    uint64_t v6 = sub_54B38((uint64_t)Mutable, 6, &theArray, 0);
  }
  else {
    uint64_t v6 = 0;
  }
  if (sub_121C4(15)) {
    uint64_t v7 = sub_54B38((uint64_t)Mutable, 15, &v46, 0);
  }
  else {
    uint64_t v7 = 0;
  }
  if (sub_121C4(119)) {
    uint64_t v9 = sub_54C30((uint64_t)Mutable, 119, &v44);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = sub_3BDB8(a1, (uint64_t)v6, (signed int)theArray, v8);
  if (!v10)
  {
    CFMutableDictionaryRef Mutable = 0;
    if (v9) {
      goto LABEL_52;
    }
    goto LABEL_53;
  }
  uint64_t v11 = v10;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(Mutable, kSCPropNetDNSServerAddresses, v11);
  CFRelease(v11);
  if (!v7) {
    goto LABEL_49;
  }
  int v12 = (int)v46;
  if ((int)v46 < 1)
  {
    uint64_t v47 = 0;
    goto LABEL_48;
  }
  uint64_t v13 = 0;
  CFMutableArrayRef v14 = 0;
  uint64_t v15 = v7;
  do
  {
    uint64_t v16 = *v7;
    if (*v7)
    {
      if ((v16 & 0x80) != 0)
      {
        if (!__maskrune(*v7, 0x4000uLL))
        {
LABEL_28:
          if (!v13) {
            uint64_t v13 = v7;
          }
          goto LABEL_30;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[v16] & 0x4000) == 0)
      {
        goto LABEL_28;
      }
    }
    if (v13)
    {
      if (v9 || !v16)
      {
        uint64_t v47 = v14;
        goto LABEL_37;
      }
      CFStringRef v17 = CFStringCreateWithBytes(0, v13, v15 - v13, 0x8000100u, 0);
      if (!v17)
      {
        uint64_t v47 = v14;
        goto LABEL_48;
      }
      CFStringRef v18 = v17;
      if (!v14) {
        CFMutableArrayRef v14 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      }
      CFArrayAppendValue(v14, v18);
      CFRelease(v18);
      uint64_t v13 = 0;
    }
LABEL_30:
    ++v7;
    ++v15;
    --v12;
  }
  while (v12);
  uint64_t v47 = v14;
  if (!v13) {
    goto LABEL_43;
  }
LABEL_37:
  CFStringRef v19 = CFStringCreateWithBytes(0, v13, v7 - v13, 0x8000100u, 0);
  if (!v19) {
    goto LABEL_48;
  }
  CFStringRef v20 = v19;
  if (v14) {
    CFArrayAppendValue(v14, v19);
  }
  else {
    CFDictionarySetValue(Mutable, kSCPropNetDNSDomainName, v19);
  }
  CFRelease(v20);
LABEL_43:
  if (v14)
  {
    if (CFArrayGetCount(v14) == 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v14, 0);
      int v22 = Mutable;
      CFStringRef v23 = kSCPropNetDNSDomainName;
    }
    else
    {
      CFStringRef v23 = kSCPropNetDNSSearchDomains;
      int v22 = Mutable;
      ValueAtIndex = v14;
    }
    CFDictionarySetValue(v22, v23, ValueAtIndex);
  }
LABEL_48:
  sub_6DB0((const void **)&v47);
LABEL_49:
  if (v9)
  {
    int v24 = sub_57468((uint64_t)v9, v44);
    if (v24)
    {
      int v25 = v24;
      CFDictionarySetValue(Mutable, kSCPropNetDNSSearchDomains, v24);
      CFRelease(v25);
    }
LABEL_52:
    free(v9);
  }
LABEL_53:
  CFDictionaryRef v43 = Mutable;
  int v44 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  CFArrayRef theArray = 0;
  if (!a3 || !sub_CA18(23)) {
    goto LABEL_69;
  }
  uint64_t v26 = *(void *)(a3 + 16);
  if (v26)
  {
    int v49 = 0;
    int v27 = sub_5B848(v26, 23, (unsigned int *)&v49, 0);
    CFArrayRef v28 = 0;
    if (v27)
    {
      unsigned int v29 = 0;
      if (v49 >= 0x10)
      {
        int v30 = (char *)v27;
        int v31 = v49 >> 4;
        CFArrayRef v28 = CFArrayCreateMutable(0, (uint64_t)v49 >> 4, &kCFTypeArrayCallBacks);
        sub_3C2F0(v28, v30, v31);
        if (sub_CA18(24) && (v48 = 0, (uint64_t v32 = sub_5B848(v26, 24, &v48, 0)) != 0)) {
          unsigned int v29 = sub_57468((uint64_t)v32, v48);
        }
        else {
          unsigned int v29 = 0;
        }
      }
    }
    else
    {
      unsigned int v29 = 0;
    }
    uint64_t v46 = v28;
    uint64_t v47 = v29;
  }
  else
  {
    unsigned int v29 = 0;
    CFArrayRef v28 = 0;
  }
  uint64_t v33 = *(void *)(a3 + 40);
  if (v33)
  {
    CFArrayRef v34 = sub_3BFBC(v33, a1, (uint64_t *)&theArray);
    int v44 = v34;
  }
  else
  {
    CFArrayRef v34 = 0;
  }
  if (!((unint64_t)v28 | (unint64_t)v34))
  {
LABEL_69:
    int v35 = 0;
    goto LABEL_70;
  }
  int v35 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  int v37 = &v46;
  if (v28)
  {
    if (v34)
    {
      sub_3C254(v28, v34);
      int v37 = &v46;
      unsigned int v29 = v47;
    }
  }
  else
  {
    int v37 = &v44;
  }
  CFDictionarySetValue(v35, kSCPropNetDNSServerAddresses, *v37);
  CFArrayRef v38 = theArray;
  if (!v29)
  {
    if (!theArray) {
      goto LABEL_89;
    }
    CFStringRef v40 = kSCPropNetDNSSearchDomains;
    uint64_t v41 = v35;
LABEL_88:
    CFDictionarySetValue(v41, v40, v38);
    goto LABEL_89;
  }
  if (!theArray)
  {
    CFStringRef v40 = kSCPropNetDNSSearchDomains;
    uint64_t v41 = v35;
    CFArrayRef v38 = v29;
    goto LABEL_88;
  }
  CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, v29);
  sub_3C254(MutableCopy, theArray);
  CFDictionarySetValue(v35, kSCPropNetDNSSearchDomains, MutableCopy);
  CFRelease(MutableCopy);
LABEL_89:
  sub_6DB0((const void **)&v47);
  sub_6DB0(&v46);
  sub_6DB0((const void **)&theArray);
  sub_6DB0(&v44);
  CFMutableDictionaryRef Mutable = v43;
LABEL_70:
  CFDictionaryRef v42 = v35;
  if (!((unint64_t)Mutable | (unint64_t)v35)) {
    return 0;
  }
  if (Mutable && v35)
  {
    int v35 = CFDictionaryCreateMutableCopy(0, 0, Mutable);
    sub_3B770(v35, v43, v42, (void *)kSCPropNetDNSServerAddresses);
    sub_3B770(v35, v43, v42, (void *)kSCPropNetDNSSearchDomains);
    sub_6DB0((const void **)&v43);
    sub_6DB0((const void **)&v42);
  }
  else if (Mutable)
  {
    return Mutable;
  }
  return v35;
}

uint64_t sub_CA18(int a1)
{
  if (a1 - 1) < 0x1A && ((0x30FFDFFu >> (a1 - 1))) {
    return 1;
  }
  if (dword_700F8 < 1) {
    return 0;
  }
  uint64_t v1 = off_700F0;
  uint64_t v2 = dword_700F8 - 1;
  do
  {
    int v3 = (unsigned __int16)*v1++;
    BOOL v4 = v3 == a1;
  }
  while (v3 != a1 && v2-- != 0);
  return v4;
}

void sub_CA80(uint64_t *a1)
{
  int v2 = sub_5B24(a1);
  if (v2)
  {
    int v3 = v2;
    double current_time = timer_get_current_time();
    if (v3 >= 1)
    {
      double v5 = current_time;
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = sub_5B4C(a1, v6);
        unsigned int v8 = *(_DWORD *)(v7 + 16);
        if (v8 == -1 || (uint64_t v9 = (unsigned __int8 *)v7, v5 < *(double *)(v7 + 8) + (double)v8))
        {
          uint64_t v6 = (v6 + 1);
        }
        else
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v10 = _os_log_pack_size();
            __chkstk_darwin(v10);
            __error();
            uint64_t v11 = _os_log_pack_fill();
            int v12 = v9[4];
            int v13 = v9[5];
            int v14 = v9[6];
            int v15 = v9[7];
            int v16 = v9[20];
            int v17 = v9[21];
            int v18 = v9[22];
            int v19 = v9[23];
            *(_DWORD *)uint64_t v11 = 67110912;
            *(_DWORD *)(v11 + 4) = v12;
            *(_WORD *)(v11 + 8) = 1024;
            *(_DWORD *)(v11 + 10) = v13;
            *(_WORD *)(v11 + 14) = 1024;
            *(_DWORD *)(v11 + 16) = v14;
            *(_WORD *)(v11 + 20) = 1024;
            *(_DWORD *)(v11 + 22) = v15;
            *(_WORD *)(v11 + 26) = 1024;
            *(_DWORD *)(v11 + 28) = v16;
            *(_WORD *)(v11 + 32) = 1024;
            *(_DWORD *)(v11 + 34) = v17;
            *(_WORD *)(v11 + 38) = 1024;
            *(_DWORD *)(v11 + 40) = v18;
            *(_WORD *)(v11 + 44) = 1024;
            *(_DWORD *)(v11 + 46) = v19;
            __SC_log_send();
          }
          sub_57C84(a1, v6);
          --v3;
        }
      }
      while ((int)v6 < v3);
    }
  }
}

CFStringRef sub_CC7C(uint64_t a1)
{
  if (!a1 || !sub_CA18(103)) {
    return 0;
  }
  unsigned int v11 = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    int v3 = sub_5B848(v2, 103, &v11, 0);
    CFStringRef v4 = sub_542FC((UInt8 *)v3, v11);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5)
    {
      CFStringRef v6 = sub_56A7C(v5);
      CFStringRef v7 = v6;
      CFStringRef v12 = v6;
      if (v4)
      {
        if (v6)
        {
          if (CFStringCompare(v4, v6, 1uLL))
          {
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              _os_log_pack_size();
              __chkstk_darwin();
              __error();
              uint64_t v8 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v8 = 138412546;
              *(void *)(v8 + 4) = v4;
              *(_WORD *)(v8 + 12) = 2112;
              *(void *)(v8 + 14) = v7;
              __SC_log_send();
            }
          }
          sub_6DB0((const void **)&v12);
        }
      }
      else
      {
        return v6;
      }
    }
    return v4;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (!v9) {
    return 0;
  }

  return sub_56A7C(v9);
}

BOOL sub_CE70(uint64_t a1)
{
  return *(void *)(a1 + 24) != 0;
}

_OWORD *sub_CE80(uint64_t a1)
{
  sub_CFA4();
  uint64_t v2 = sub_EE54(a1);
  if (!v2) {
    return 0;
  }
  int v3 = v2;
  uint64_t v4 = sub_CFA4();
  uint64_t v5 = malloc_type_malloc(0x118uLL, 0x10A004088E64768uLL);
  *uint64_t v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((void *)v5 + 34) = 0;
  if (!sub_57C7C(v3 + 1, v5))
  {
    free(v5);
    return 0;
  }
  *((void *)v5 + 2) = v3;
  long long v6 = *(_OWORD *)(v4 + 8);
  *((void *)v5 + 30) = *(void *)(v4 + 24);
  v5[14] = v6;
  CFStringRef v7 = (const char *)nullsub_1(*v3);
  snprintf(__str, 0x20uLL, "arp-%s", v7);
  *((void *)v5 + 8) = timer_callout_init(__str);
  return v5;
}

uint64_t sub_CFA4()
{
  uint64_t result = qword_70110;
  if (!qword_70110)
  {
    uint64_t v1 = malloc_type_malloc(0x68uLL, 0x1080040E1C1558CuLL);
    qword_70110 = (uint64_t)v1;
    *uint64_t v1 = 0u;
    v1[1] = 0u;
    v1[2] = 0u;
    v1[3] = 0u;
    v1[4] = 0u;
    v1[5] = 0u;
    *((void *)v1 + 12) = 0;
    sub_57BE0((void *)v1 + 9, (uint64_t)sub_FDEC, 0);
    return qword_70110;
  }
  return result;
}

void sub_D020(uint64_t **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      int v3 = (void *)v2[2];
      uint64_t v8 = v3;
      unsigned int v4 = sub_57D68(v3 + 1, (uint64_t)v2);
      if (v4 == -1)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v5 = _os_log_pack_size();
          __chkstk_darwin(v5);
          __error();
          uint64_t v6 = _os_log_pack_fill();
          uint64_t v7 = nullsub_1(*v3);
          *(_DWORD *)uint64_t v6 = 136315138;
          *(void *)(v6 + 4) = v7;
          __SC_log_send();
        }
      }
      else
      {
        sub_57C80(v3 + 1, v4, 0);
      }
      sub_BE68((uint64_t)v2);
      timer_callout_free(v2 + 8);
      free(v2);
      *a1 = 0;
      if (!sub_5B24(v3 + 1)) {
        sub_D1FC(&v8);
      }
    }
  }
}

void sub_D1BC(uint64_t *a1)
{
  sub_BE68((uint64_t)a1);
  timer_callout_free(a1 + 8);

  free(a1);
}

void sub_D1FC(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      int v3 = (uint64_t *)(sub_CFA4() + 72);
      unsigned int v4 = sub_57D68(v3, (uint64_t)v2);
      if (v4 == -1)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v5 = _os_log_pack_fill();
          uint64_t v6 = nullsub_1(*v2);
          *(_DWORD *)uint64_t v5 = 136315138;
          *(void *)(v5 + 4) = v6;
          __SC_log_send();
        }
      }
      else
      {
        sub_57C80(v3, v4, 0);
      }
      DHCPLeaseListFree_0(v2 + 1);
      free(v2);
      *a1 = 0;
    }
  }
}

uint64_t sub_D370(uint64_t result, int a2)
{
  *(_DWORD *)(result + 248) = a2;
  return result;
}

void sub_D378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int v14 = *(uint64_t **)(a1 + 16);
  sub_BE68(a1);
  sub_E334(v14);
  *(_DWORD *)(a1 + 48) = a5;
  *(_DWORD *)(a1 + 52) = a6;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(unsigned char *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 240) = a7;
  *(void *)(a1 + 56) = *(unsigned int *)(a1 + 232);
  if (sub_D454(a1))
  {
    *(void *)a1 = 0x400000001;
    sub_DE1C(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 4) = 3;
    sub_DD68(a1);
  }
}

uint64_t sub_D454(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8)) {
    return 1;
  }
  int v3 = *(void **)(a1 + 16);
  int v54 = 0;
  ++*((_DWORD *)v3 + 16);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    uint64_t v6 = nullsub_1(*v3);
    int v7 = *((_DWORD *)v3 + 16);
    *(_DWORD *)uint64_t v5 = 136315394;
    *(void *)(v5 + 4) = v6;
    *(_WORD *)(v5 + 12) = 1024;
    *(_DWORD *)(v5 + 14) = v7;
    __SC_log_send();
  }
  uint64_t result = 1;
  *(_DWORD *)(a1 + 8) = 1;
  if (*((int *)v3 + 16) > 1) {
    return result;
  }
  int v8 = sub_B8E8();
  if (v8 < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      uint64_t v15 = nullsub_1(*v3);
      int v16 = __error();
      int v17 = strerror(*v16);
      int v18 = *__error();
      *(_DWORD *)uint64_t v14 = 136315650;
      *(void *)(v14 + 4) = v15;
      *(_WORD *)(v14 + 12) = 2080;
      *(void *)(v14 + 14) = v17;
      *(_WORD *)(v14 + 22) = 1024;
      *(_DWORD *)(v14 + 24) = v18;
      __SC_log_send();
    }
    int v19 = (const char *)nullsub_1(*v3);
    CFStringRef v20 = __error();
    int v21 = strerror(*v20);
    int v22 = __error();
    snprintf((char *)(a1 + 96), 0x80uLL, "arp_client_open_fd: bpf_new(%s) failed, %s (%d)", v19, v21, *v22);
    goto LABEL_32;
  }
  int v9 = v8;
  int v54 = 1;
  if (ioctl(v8, 0x8004667EuLL, &v54) < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v23 = _os_log_pack_size();
      __chkstk_darwin(v23);
      __error();
      uint64_t v24 = _os_log_pack_fill();
      int v25 = __error();
      uint64_t v26 = strerror(*v25);
      *(_DWORD *)uint64_t v24 = 136315138;
      *(void *)(v24 + 4) = v26;
      __SC_log_send();
    }
    goto LABEL_31;
  }
  nullsub_1(*v3);
  if ((sub_B864(v9) & 0x80000000) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v27 = _os_log_pack_size();
      __chkstk_darwin(v27);
      __error();
      uint64_t v28 = _os_log_pack_fill();
      uint64_t v29 = nullsub_1(*v3);
      int v30 = __error();
      int v31 = strerror(*v30);
      int v32 = *__error();
      *(_DWORD *)uint64_t v28 = 136315650;
      *(void *)(v28 + 4) = v29;
      *(_WORD *)(v28 + 12) = 2080;
      *(void *)(v28 + 14) = v31;
      *(_WORD *)(v28 + 22) = 1024;
      *(_DWORD *)(v28 + 24) = v32;
      __SC_log_send();
    }
    nullsub_1(*v3);
    uint64_t v33 = __error();
    strerror(*v33);
    __error();
    snprintf((char *)(a1 + 96), 0x80uLL, "arp_client_open_fd: bpf_setif (%s) failed: %s (%d)");
    goto LABEL_31;
  }
  sub_536C8(v9, 1);
  sub_536FC(v9, 1);
  if (sub_58CA4(*v3) == 144)
  {
    int v10 = v9;
    int v11 = 16;
    int v12 = 50;
  }
  else
  {
    int v10 = v9;
    int v11 = 12;
    int v12 = 42;
  }
  if ((sub_53730(v10, v11, 2054, v12) & 0x80000000) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v38 = _os_log_pack_size();
      __chkstk_darwin(v38);
      __error();
      uint64_t v39 = _os_log_pack_fill();
      uint64_t v40 = nullsub_1(*v3);
      uint64_t v41 = __error();
      CFDictionaryRef v42 = strerror(*v41);
      int v43 = *__error();
      *(_DWORD *)uint64_t v39 = 136315650;
      *(void *)(v39 + 4) = v40;
      *(_WORD *)(v39 + 12) = 2080;
      *(void *)(v39 + 14) = v42;
      *(_WORD *)(v39 + 22) = 1024;
      *(_DWORD *)(v39 + 24) = v43;
      __SC_log_send();
    }
    nullsub_1(*v3);
    int v44 = __error();
    strerror(*v44);
    __error();
    snprintf((char *)(a1 + 96), 0x80uLL, "arp_client_open_fd: bpf_arp_filter(%s) failed: %s (%d)");
    goto LABEL_31;
  }
  if ((sub_5369C(v9, (uint64_t)(v3 + 6)) & 0x80000000) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v45 = _os_log_pack_size();
      __chkstk_darwin(v45);
      __error();
      uint64_t v46 = _os_log_pack_fill();
      uint64_t v47 = nullsub_1(*v3);
      unsigned int v48 = __error();
      int v49 = strerror(*v48);
      int v50 = *__error();
      *(_DWORD *)uint64_t v46 = 136315650;
      *(void *)(v46 + 4) = v47;
      *(_WORD *)(v46 + 12) = 2080;
      *(void *)(v46 + 14) = v49;
      *(_WORD *)(v46 + 22) = 1024;
      *(_DWORD *)(v46 + 24) = v50;
      __SC_log_send();
    }
    nullsub_1(*v3);
    uint64_t v51 = __error();
    strerror(*v51);
    __error();
    snprintf((char *)(a1 + 96), 0x80uLL, "arp_client_open_fd: bpf_get_blen(%s) failed, %s (%d)");
    goto LABEL_31;
  }
  v3[5] = malloc_type_malloc(*((int *)v3 + 12), 0x19879E54uLL);
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 0x40000000;
  v52[2] = sub_F1F8;
  v52[3] = &unk_68C20;
  int v53 = v9;
  CFArrayRef v34 = sub_1AD6C(v9, (uint64_t)sub_F314, (uint64_t)v3, 0, v52);
  v3[7] = v34;
  if (!v34)
  {
LABEL_31:
    close(v9);
LABEL_32:
    sub_BAF8(a1);
    return 0;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (!__SC_log_enabled()) {
    return 1;
  }
  uint64_t v35 = _os_log_pack_size();
  __chkstk_darwin(v35);
  __error();
  uint64_t v36 = _os_log_pack_fill();
  uint64_t v37 = nullsub_1(*v3);
  *(_DWORD *)uint64_t v36 = 136315394;
  *(void *)(v36 + 4) = v37;
  *(_WORD *)(v36 + 12) = 1024;
  *(_DWORD *)(v36 + 14) = v9;
  __SC_log_send();
  return 1;
}

void sub_DD68(uint64_t a1)
{
  sub_BE18(a1);
  uint64_t v2 = sub_2EC08();
  int v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_data_add, 0, 0, v2);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_FCE8;
  handler[3] = &unk_68C40;
  handler[4] = a1;
  dispatch_source_set_event_handler(v3, handler);
  dispatch_activate(v3);
  dispatch_source_merge_data(v3, 1uLL);
  *(void *)(a1 + 272) = v3;
}

void sub_DE1C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 236);
  int v3 = *(_DWORD *)(a1 + 56);
  int v4 = v2 + *(_DWORD *)(a1 + 232) - v3;
  if (v4 <= 0)
  {
    int v9 = 1;
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 16);
    *(_DWORD *)(a1 + 56) = v3 + 1;
    if (*(_DWORD *)(a1 + 240)) {
      goto LABEL_3;
    }
    if (sub_E978(a1, v4 <= v2, 0))
    {
      if (!*(_DWORD *)(a1 + 240))
      {
        int v10 = *(_DWORD *)(a1 + 236);
        sub_4220();
        _SC_syslog_os_log_mapping();
        int v11 = __SC_log_enabled();
        if (v4 <= v10)
        {
          if (!v11) {
            goto LABEL_6;
          }
          uint64_t v17 = _os_log_pack_size();
          __chkstk_darwin(v17);
          __error();
          uint64_t v18 = _os_log_pack_fill();
          uint64_t v19 = nullsub_1(*v5);
          int v20 = *(_DWORD *)(a1 + 236);
          *(_DWORD *)uint64_t v18 = 136315650;
          *(void *)(v18 + 4) = v19;
          *(_WORD *)(v18 + 12) = 1024;
          *(_DWORD *)(v18 + 14) = v20 - v4 + 1;
          *(_WORD *)(v18 + 18) = 1024;
          *(_DWORD *)(v18 + 20) = v20;
        }
        else
        {
          if (!v11) {
            goto LABEL_6;
          }
          uint64_t v12 = _os_log_pack_size();
          __chkstk_darwin(v12);
          __error();
          uint64_t v13 = _os_log_pack_fill();
          uint64_t v14 = nullsub_1(*v5);
          int v15 = *(_DWORD *)(a1 + 56);
          int v16 = *(_DWORD *)(a1 + 232);
          *(_DWORD *)uint64_t v13 = 136315650;
          *(void *)(v13 + 4) = v14;
          *(_WORD *)(v13 + 12) = 1024;
          *(_DWORD *)(v13 + 14) = v15;
          *(_WORD *)(v13 + 18) = 1024;
          *(_DWORD *)(v13 + 20) = v16;
        }
        goto LABEL_5;
      }
LABEL_3:
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled())
      {
LABEL_6:
        timer_callout_set(*(void *)(a1 + 64), sub_DE1C, a1, 0, 0, *(double *)(a1 + 224));
        *(_DWORD *)(a1 + 240) = 0;
        return;
      }
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      uint64_t v8 = nullsub_1(*v5);
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v7 + 4) = v8;
LABEL_5:
      __SC_log_send();
      goto LABEL_6;
    }
    int v9 = 3;
  }
  *(_DWORD *)(a1 + 4) = v9;

  sub_DD68(a1);
}

void sub_E17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12 = *(uint64_t **)(a1 + 16);
  sub_BE68(a1);
  sub_E334(v12);
  *(_DWORD *)(a1 + 48) = a5;
  *(_DWORD *)(a1 + 52) = a6;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  if (sub_D454(a1))
  {
    *(void *)a1 = 0x400000001;
    sub_DE1C(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 4) = 3;
    sub_DD68(a1);
  }
}

void sub_E250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v14 = *(uint64_t **)(a1 + 16);
  sub_BE68(a1);
  sub_E334(v14);
  *(_DWORD *)(a1 + 48) = a5;
  *(_DWORD *)(a1 + 52) = a6;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 56) = 0;
  if (sub_D454(a1))
  {
    if (a7) {
      int v15 = a7;
    }
    else {
      int v15 = 16;
    }
    *(_DWORD *)(a1 + 252) = v15;
    *(void *)a1 = 0x400000002;
    sub_E478(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 4) = 3;
    sub_DD68(a1);
  }
}

uint64_t sub_E334(uint64_t *a1)
{
  uint64_t result = sub_58CA4(*a1);
  if (result == 144)
  {
    int v3 = (char *)nullsub_1(*a1);
    uint64_t result = sub_F134(v3, (uint64_t)(a1 + 9));
    if (!result)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v4 = _os_log_pack_size();
        __chkstk_darwin(v4);
        __error();
        uint64_t v5 = _os_log_pack_fill();
        uint64_t v6 = nullsub_1(*a1);
        *(_DWORD *)uint64_t v5 = 136315138;
        *(void *)(v5 + 4) = v6;
        return __SC_log_send();
      }
    }
  }
  return result;
}

void sub_E478(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (*(_DWORD *)(a1 + 252) - v2 <= 0)
  {
    int v4 = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 56) = v2 + 1;
    if (sub_E978(a1, 0, 0))
    {
      uint64_t v3 = *(void *)(a1 + 64);
      timer_callout_set(v3, sub_E478, a1, 0, 0, 1.0);
      return;
    }
    int v4 = 3;
  }
  *(_DWORD *)(a1 + 4) = v4;

  sub_DD68(a1);
}

void sub_E52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, int a6)
{
  uint64_t v12 = *(uint64_t **)(a1 + 16);
  sub_BE68(a1);
  sub_E334(v12);
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 56) = 0;
  if (a6 && sub_D454(a1))
  {
    uint64_t v13 = malloc_type_malloc(24 * a6, 0x917365E6uLL);
    *(void *)(a1 + 256) = v13;
    memmove(v13, a5, 24 * a6);
    *(_DWORD *)(a1 + 264) = a6;
    *(void *)a1 = 0x400000003;
    sub_E62C(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 4) = 3;
    sub_DD68(a1);
  }
}

void sub_E62C(uint64_t a1)
{
  uint64_t v2 = sub_CFA4();
  int v3 = *(_DWORD *)(a1 + 56);
  if (*(_DWORD *)(v2 + 32) <= v3)
  {
    int v11 = 1;
  }
  else
  {
    uint64_t v4 = v2;
    int v5 = v3 + 1;
    *(_DWORD *)(a1 + 56) = v5;
    if (*(int *)(a1 + 264) < 1)
    {
LABEL_7:
      double v8 = (double)(2 << (v5 - 2));
      if (v5 < 2) {
        double v8 = 1.0;
      }
      double v9 = *(double *)(v4 + 40) * v8;
      uint64_t v10 = *(void *)(a1 + 64);
      timer_callout_set(v10, sub_E62C, a1, 0, 0, v9);
      return;
    }
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    while (sub_E978(a1, 0, *(void *)(a1 + 256) + v6))
    {
      ++v7;
      v6 += 24;
      if (v7 >= *(int *)(a1 + 264))
      {
        int v5 = *(_DWORD *)(a1 + 56);
        goto LABEL_7;
      }
    }
    int v11 = 3;
  }
  *(_DWORD *)(a1 + 4) = v11;

  sub_DD68(a1);
}

uint64_t sub_E73C(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_E744(uint64_t a1, int a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  sub_BE68(a1);
  sub_E334(v4);
  if (sub_D454(a1))
  {
    *(_DWORD *)(a1 + 48) = a2;
    *(_DWORD *)(a1 + 52) = a2;
    if (sub_E978(a1, 0, 0))
    {
      uint64_t v5 = 1;
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9);
        __error();
        uint64_t v10 = _os_log_pack_fill();
        uint64_t v11 = nullsub_1(*v4);
        *(_DWORD *)uint64_t v10 = 136315138;
        *(void *)(v10 + 4) = v11;
        __SC_log_send();
      }
      uint64_t v5 = 0;
    }
    sub_BAF8(a1);
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      uint64_t v8 = nullsub_1(*v4);
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v7 + 4) = v8;
      __SC_log_send();
    }
    return 0;
  }
  return v5;
}

uint64_t sub_E978(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(a1 + 16);
  memset(v32, 0, sizeof(v32));
  int v7 = sub_934C(*v6);
  if (v7 == 24)
  {
    LOWORD(v32[1]) = 1544;
    uint64_t v11 = *(void *)sub_58CAC(*v6);
    uint64_t v12 = (int *)(a3 + 8);
    if (!a3) {
      uint64_t v12 = &dword_5D410;
    }
    *(void *)&v32[0] = *(void *)v12;
    *((void *)&v32[0] + 1) = v11;
    *(void *)((char *)&v32[1] + 2) = 0x100041000081800;
    *(_OWORD *)((char *)&v32[1] + 10) = *(_OWORD *)(v6 + 9);
    if (a3)
    {
      *(void *)((char *)&v32[2] + 10) = *(void *)a3;
    }
    else
    {
      if (a2 != 1 || *(_DWORD *)(a1 + 48))
      {
        *(_DWORD *)((char *)&v32[2] + 10) = *(_DWORD *)(a1 + 48);
        int v17 = *(_DWORD *)(a1 + 52);
      }
      else
      {
        int v17 = *(_DWORD *)(a1 + 52);
        *(_DWORD *)((char *)&v32[2] + 10) = v17;
      }
      *(_DWORD *)((char *)&v32[2] + 14) = v17;
    }
    int v19 = 50;
  }
  else
  {
    if (v7 != 1)
    {
      uint64_t v13 = (const char *)nullsub_1(*v6);
      snprintf((char *)(a1 + 96), 0x80uLL, "arp_client_transmit(%s): interface hardware type not yet known", v13);
      return 0;
    }
    WORD6(v32[0]) = 1544;
    uint64_t v8 = sub_58CAC(*v6);
    __int16 v9 = *(_WORD *)(v8 + 4);
    *(_DWORD *)((char *)v32 + 6) = *(_DWORD *)v8;
    WORD5(v32[0]) = v9;
    if (a3)
    {
      LODWORD(v32[0]) = *(_DWORD *)(a3 + 8);
      __int16 v10 = *(_WORD *)(a3 + 12);
    }
    else
    {
      LODWORD(v32[0]) = -1;
      __int16 v10 = -1;
    }
    WORD2(v32[0]) = v10;
    *(void *)((char *)v32 + 14) = 0x100040600080100;
    uint64_t v14 = sub_58CAC(*v6);
    __int16 v15 = *(_WORD *)(v14 + 4);
    *(_DWORD *)((char *)&v32[1] + 6) = *(_DWORD *)v14;
    WORD5(v32[1]) = v15;
    if (a3)
    {
      int v16 = *(_DWORD *)(a3 + 4);
      HIDWORD(v32[1]) = *(_DWORD *)a3;
      *(_DWORD *)((char *)&v32[2] + 6) = v16;
    }
    else
    {
      if (a2 != 1 || *(_DWORD *)(a1 + 48))
      {
        HIDWORD(v32[1]) = *(_DWORD *)(a1 + 48);
        int v18 = *(_DWORD *)(a1 + 52);
      }
      else
      {
        int v18 = *(_DWORD *)(a1 + 52);
        HIDWORD(v32[1]) = v18;
      }
      *(_DWORD *)((char *)&v32[2] + 6) = v18;
    }
    int v19 = 42;
  }
  int v20 = sub_C448((unsigned int *)v6[7]);
  if ((sub_B848(v20, v32, v19) & 0x80000000) == 0) {
    return 1;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v22 = _os_log_pack_size();
    __chkstk_darwin(v22);
    __error();
    uint64_t v23 = _os_log_pack_fill();
    uint64_t v24 = nullsub_1(*v6);
    int v25 = __error();
    uint64_t v26 = strerror(*v25);
    int v27 = *__error();
    *(_DWORD *)uint64_t v23 = 136315650;
    *(void *)(v23 + 4) = v24;
    *(_WORD *)(v23 + 12) = 2080;
    *(void *)(v23 + 14) = v26;
    *(_WORD *)(v23 + 22) = 1024;
    *(_DWORD *)(v23 + 24) = v27;
    __SC_log_send();
  }
  uint64_t v28 = (const char *)nullsub_1(*v6);
  uint64_t v29 = __error();
  int v30 = strerror(*v29);
  int v31 = __error();
  snprintf((char *)(a1 + 96), 0x80uLL, "arp_client_transmit(%s) failed, %s (%d)", v28, v30, *v31);
  return 0;
}

uint64_t sub_ECEC(BOOL (*a1)(uint64_t a1, int a2, const void *a3, int a4), uint64_t a2)
{
  uint64_t result = sub_CFA4();
  if (a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = sub_EDDC;
  }
  *(void *)(result + 64) = v5;
  uint64_t v6 = *(uint64_t **)(a2 + 16);
  if (v6) {
    uint64_t v7 = *v6;
  }
  else {
    uint64_t v7 = 0x3FD47AE147AE147BLL;
  }
  *(void *)(result + 8) = v7;
  if (*(void *)a2) {
    int v8 = **(_DWORD **)a2;
  }
  else {
    int v8 = 3;
  }
  *(_DWORD *)(result + 16) = v8;
  __int16 v9 = *(int **)(a2 + 8);
  if (v9) {
    int v10 = *v9;
  }
  else {
    int v10 = 2;
  }
  *(_DWORD *)(result + 20) = v10;
  uint64_t v11 = *(int **)(a2 + 24);
  if (v11) {
    int v12 = *v11;
  }
  else {
    int v12 = 6;
  }
  *(_DWORD *)(result + 32) = v12;
  uint64_t v13 = *(uint64_t **)(a2 + 32);
  if (v13) {
    uint64_t v14 = *v13;
  }
  else {
    uint64_t v14 = 0x3F947AE147AE147BLL;
  }
  *(void *)(result + 40) = v14;
  __int16 v15 = *(int **)(a2 + 40);
  if (v15) {
    int v16 = *v15;
  }
  else {
    int v16 = 2;
  }
  *(_DWORD *)(result + 48) = v16;
  int v17 = *(double **)(a2 + 48);
  if (v17) {
    double v18 = *v17;
  }
  else {
    double v18 = 0.75;
  }
  *(double *)(result + 56) = v18;
  return result;
}

BOOL sub_EDDC(uint64_t a1, int a2, const void *a3, int a4)
{
  if (sub_58034(a1) != a4 || sub_934C(a1) != a2) {
    return 0;
  }
  int v8 = (const void *)sub_58CAC(a1);
  return bcmp(a3, v8, a4) == 0;
}

_OWORD *sub_EE54(uint64_t a1)
{
  long long v17 = 0uLL;
  uint64_t v2 = sub_CFA4();
  int v3 = (const char *)nullsub_1(a1);
  uint64_t v4 = v2 + 72;
  int v5 = sub_5B24(v4);
  if (v5 < 1)
  {
LABEL_5:
    int v10 = sub_58CA4(a1);
    if ((v10 - 135) < 2 || v10 == 6) {
      goto LABEL_9;
    }
    if (v10 == 144)
    {
      uint64_t v11 = (char *)nullsub_1(a1);
      if (sub_F134(v11, (uint64_t)&v17))
      {
LABEL_9:
        int v8 = malloc_type_malloc(0x58uLL, 0x10B00403B75941AuLL);
        _OWORD *v8 = 0u;
        v8[1] = 0u;
        v8[2] = 0u;
        v8[3] = 0u;
        v8[4] = 0u;
        *((void *)v8 + 10) = 0;
        sub_57BE0((void *)v8 + 1, (uint64_t)sub_D1BC, 0);
        if (sub_58CA4(a1) == 144) {
          *(_OWORD *)((char *)v8 + 72) = v17;
        }
        *(void *)int v8 = a1;
        sub_57C7C(v4, v8);
        return v8;
      }
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v14 = _os_log_pack_fill();
        uint64_t v15 = nullsub_1(a1);
        *(_DWORD *)uint64_t v14 = 136315138;
        *(void *)(v14 + 4) = v15;
        goto LABEL_16;
      }
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v12 = _os_log_pack_fill();
        uint64_t v13 = nullsub_1(a1);
        *(_DWORD *)uint64_t v12 = 136315138;
        *(void *)(v12 + 4) = v13;
LABEL_16:
        __SC_log_send();
      }
    }
    return 0;
  }
  int v6 = v5;
  uint64_t v7 = 0;
  while (1)
  {
    int v8 = (_OWORD *)sub_5B4C(v4, v7);
    __int16 v9 = (const char *)nullsub_1(*(void *)v8);
    if (!strcmp(v9, v3)) {
      return v8;
    }
    uint64_t v7 = (v7 + 1);
    if (v6 == v7) {
      goto LABEL_5;
    }
  }
}

uint64_t sub_F134(char *a1, uint64_t a2)
{
  CFDictionaryRef v3 = sub_59334(a1, 1);
  if (!v3) {
    return 0;
  }
  CFDictionaryRef v4 = v3;
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v3, @"IOFWHWAddr");
  CFTypeID TypeID = CFDataGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFDataGetLength(Value) == 16)
  {
    v9.location = 0;
    v9.length = 16;
    CFDataGetBytes(Value, v9, (UInt8 *)a2);
    *(_WORD *)(a2 + 10) = bswap32(*(unsigned __int16 *)(a2 + 10)) >> 16;
    *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a2 + 12));
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  CFRelease(v4);
  return v7;
}

uint64_t sub_F1F8(uint64_t a1)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    _os_log_pack_size();
    __error();
    uint64_t v2 = _os_log_pack_fill();
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)uint64_t v2 = 136315394;
    *(void *)(v2 + 4) = "arp_client_open_fd_block_invoke";
    *(_WORD *)(v2 + 12) = 1024;
    *(_DWORD *)(v2 + 14) = v3;
    __SC_log_send();
  }
  return close(*(_DWORD *)(a1 + 32));
}

void sub_F314(void *a1)
{
  __str[0] = 0;
  if (!*((_DWORD *)a1 + 16))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v52 = _os_log_pack_size();
      __chkstk_darwin(v52);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    return;
  }
  uint64_t v2 = (_DWORD *)sub_CFA4();
  int v82 = *v2;
  int v3 = a1 + 1;
  int v4 = sub_5B24(a1 + 1);
  uint64_t v74 = sub_58034(*a1);
  unsigned int v5 = sub_934C(*a1);
  unsigned int v77 = v5;
  if (v5 == 24) {
    uint64_t v6 = 18;
  }
  else {
    uint64_t v6 = 14;
  }
  if (v5 == 24) {
    int v7 = 16;
  }
  else {
    int v7 = 6;
  }
  int v80 = v7;
  int v8 = sub_C448((unsigned int *)a1[7]);
  ssize_t v9 = read(v8, (void *)a1[5], *((int *)a1 + 12));
  int v79 = v4;
  if (v9 < 0)
  {
    if (*__error() != 35)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v53 = _os_log_pack_size();
        __chkstk_darwin(v53);
        __error();
        uint64_t v54 = _os_log_pack_fill();
        uint64_t v55 = nullsub_1(*a1);
        int v56 = __error();
        int v57 = strerror(*v56);
        int v58 = *__error();
        *(_DWORD *)uint64_t v54 = 136315650;
        *(void *)(v54 + 4) = v55;
        *(_WORD *)(v54 + 12) = 2080;
        *(void *)(v54 + 14) = v57;
        *(_WORD *)(v54 + 22) = 1024;
        *(_DWORD *)(v54 + 24) = v58;
        __SC_log_send();
      }
      int v59 = (const char *)nullsub_1(*a1);
      uint64_t v60 = __error();
      uint64_t v61 = strerror(*v60);
      uint64_t v62 = __error();
      snprintf(__str, 0x80uLL, "arp_if_session_read: read(%s) failed, %s (%d)", v59, v61, *v62);
      int v63 = v79;
      if (v79 >= 1)
      {
        uint64_t v64 = 0;
        do
        {
          uint64_t v65 = sub_5B4C(v3, v64);
          if (*(void *)(v65 + 24))
          {
            uint64_t v66 = v65;
            strncpy((char *)(v65 + 96), __str, 0x80uLL);
            *(_DWORD *)(v66 + 4) = 3;
            sub_DD68(v66);
          }
          uint64_t v64 = (v64 + 1);
        }
        while (v63 != v64);
      }
    }
    return;
  }
  uint64_t v11 = v9;
  uint64_t v71 = v2;
  if (!v9) {
    return;
  }
  uint64_t v12 = a1[5];
  if (v77 == 24) {
    int v13 = 50;
  }
  else {
    int v13 = 42;
  }
  unsigned int v81 = v13;
  size_t v73 = (int)v74;
  *(void *)&long long v10 = 67109376;
  long long v69 = v10;
  do
  {
    uint64_t v83 = 0;
    uint64_t v14 = (unsigned __int16 *)(v12 + v6 + *(unsigned __int16 *)(v12 + 16));
    if (!v82) {
      goto LABEL_27;
    }
    unsigned int v15 = *v14;
    putchar(10);
    unsigned int v16 = bswap32(v14[3]);
    int v17 = HIWORD(v16) - 1;
    unsigned int v18 = (unsigned __int16)(HIWORD(v16) - 1);
    int v19 = "<unknown>";
    if (v18 <= 3) {
      int v19 = (&off_68C60)[(__int16)v17];
    }
    unsigned int v20 = bswap32(v15) >> 16;
    printf("%s type=0x%x proto=0x%x\n", v19, v20, bswap32(v14[1]) >> 16);
    if (v20 == 24)
    {
      if (*((unsigned char *)v14 + 4) == 16) {
        printf("Sender H/W\t%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x\n", *((unsigned __int8 *)v14 + 8), *((unsigned __int8 *)v14 + 9), *((unsigned __int8 *)v14 + 10), *((unsigned __int8 *)v14 + 11), *((unsigned __int8 *)v14 + 12), *((unsigned __int8 *)v14 + 13), *((unsigned __int8 *)v14 + 14), *((unsigned __int8 *)v14 + 15));
      }
      int v27 = inet_ntop(2, v14 + 12, (char *)&v86, 0x10u);
      printf("Sender IP\t%s\n", v27);
      uint64_t v26 = (int *)(v14 + 14);
      goto LABEL_25;
    }
    if (v20 == 1)
    {
      if (*((unsigned char *)v14 + 4) == 6)
      {
        int v21 = *((_DWORD *)v14 + 2);
        *(_WORD *)&v86.octet[4] = v14[6];
        *(_DWORD *)v86.octet = v21;
        uint64_t v22 = ether_ntoa(&v86);
        printf("Sender H/W\t%s\n", v22);
        unsigned __int16 v23 = v14[11];
        *(_DWORD *)v86.octet = *(_DWORD *)(v14 + 9);
        *(_WORD *)&v86.octet[4] = v23;
        uint64_t v24 = ether_ntoa(&v86);
        printf("Target H/W\t%s\n", v24);
      }
      int v84 = *(_DWORD *)(v14 + 7);
      int v25 = inet_ntop(2, &v84, (char *)&v86, 0x10u);
      printf("Sender IP\t%s\n", v25);
      int v84 = *((_DWORD *)v14 + 6);
      uint64_t v26 = &v84;
LABEL_25:
      uint64_t v28 = inet_ntop(2, v26, (char *)&v86, 0x10u);
      printf("Target IP\t%s\n", v28);
    }
    fflush(__stdoutp);
LABEL_27:
    if (*(_DWORD *)(v12 + 8) < v81) {
      goto LABEL_71;
    }
    if (v80 != *((unsigned __int8 *)v14 + 4)) {
      goto LABEL_71;
    }
    unsigned int v76 = v14[3];
    unsigned int v29 = __rev16(v76) - 3;
    if ((unsigned __int16)v29 != 65534 && (unsigned __int16)v29 != 0xFFFF || v77 != bswap32(*v14) >> 16 || v14[1] != 8) {
      goto LABEL_71;
    }
    if (v77 == 24)
    {
      uint64_t v75 = v14 + 12;
      int v78 = (uint64_t *)(v14 + 14);
      int v30 = v14 + 4;
    }
    else
    {
      int v31 = *(_DWORD *)(v14 + 7);
      LODWORD(v83) = *((_DWORD *)v14 + 6);
      HIDWORD(v83) = v31;
      int v30 = v14 + 4;
      int v78 = &v83;
      uint64_t v75 = (_DWORD *)&v83 + 1;
    }
    int v32 = (uint64_t (*)(uint64_t, void))*((void *)v71 + 8);
    uint64_t v33 = *a1;
    uint64_t v72 = v30;
    int v70 = v32(v33, v77);
    if (v4 < 1) {
      goto LABEL_71;
    }
    uint64_t v34 = 0;
    while (1)
    {
      uint64_t v35 = sub_5B4C(a1 + 1, v34);
      if (!*(void *)(v35 + 24)) {
        goto LABEL_67;
      }
      uint64_t v36 = v35;
      if (*(_DWORD *)(v35 + 4) == 2) {
        goto LABEL_67;
      }
      int v37 = *(_DWORD *)v35;
      if (*(_DWORD *)v35 == 3) {
        break;
      }
      if (v37 == 2)
      {
        int v38 = *(_DWORD *)(v35 + 52);
        if (v38 == *v75 && v76 == 512)
        {
LABEL_60:
          *(_DWORD *)(v35 + 72) = *(_DWORD *)(v35 + 48);
          *(_DWORD *)(v35 + 76) = v38;
          memmove((void *)(v35 + 80), v72, v73);
          goto LABEL_61;
        }
      }
      else if (v37 == 1 && !v70)
      {
        int v38 = *(_DWORD *)(v35 + 52);
        if (v38 == *v75 || !*v75 && *(_DWORD *)(v35 + 248) && v76 == 256 && v38 == *(_DWORD *)v78) {
          goto LABEL_60;
        }
      }
LABEL_67:
      uint64_t v34 = (v34 + 1);
      if (v34 == v4) {
        goto LABEL_71;
      }
    }
    if (v76 != 512) {
      goto LABEL_67;
    }
    int v39 = *(_DWORD *)(v35 + 264);
    if (v39 < 1) {
      goto LABEL_67;
    }
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    while (1)
    {
      uint64_t v42 = *(void *)(v36 + 256);
      if (*(_DWORD *)(v42 + v40) != *(_DWORD *)v78 || *(_DWORD *)(v42 + v40 + 4) != *v75) {
        goto LABEL_56;
      }
      if (!bcmp((const void *)(v42 + v40 + 8), v72, v73)) {
        break;
      }
      int v39 = *(_DWORD *)(v36 + 264);
LABEL_56:
      ++v41;
      v40 += 24;
      int v4 = v79;
      if (v41 >= v39) {
        goto LABEL_67;
      }
    }
    long long v50 = *(_OWORD *)(v42 + v40);
    *(void *)(v36 + 88) = *(void *)(v42 + v40 + 16);
    *(_OWORD *)(v36 + 72) = v50;
    int v4 = v79;
LABEL_61:
    *(_DWORD *)(v36 + 4) = 2;
    if (*(_DWORD *)v36 != 1 || *(_DWORD *)(v36 + 248)) {
      goto LABEL_66;
    }
    ++*(_DWORD *)(v36 + 60);
    uint64_t v43 = sub_4220();
    int v68 = _SC_syslog_os_log_mapping();
    int v44 = __SC_log_enabled();
    uint64_t v45 = v71;
    if (v44)
    {
      uint64_t v46 = _os_log_pack_size();
      v67[1] = v43;
      v67[2] = v67;
      __chkstk_darwin(v46);
      __error();
      uint64_t v45 = v71;
      uint64_t v47 = _os_log_pack_fill();
      int v48 = *(_DWORD *)(v36 + 60);
      int v49 = v45[12] + 1;
      *(_DWORD *)uint64_t v47 = v69;
      *(_DWORD *)(v47 + 4) = v48;
      *(_WORD *)(v47 + 8) = 1024;
      *(_DWORD *)(v47 + 10) = v49;
      __SC_log_send();
    }
    if (*(_DWORD *)(v36 + 60) > v45[12])
    {
LABEL_66:
      sub_DD68(v36);
      goto LABEL_67;
    }
    timer_callout_set(*(void *)(v36 + 64), sub_FCD8, v36, 0, 0, *((double *)v71 + 7));
LABEL_71:
    signed int v51 = (*(_DWORD *)(v12 + 8) + *(unsigned __int16 *)(v12 + 16) + 3) & 0xFFFFFFFC;
    if (!v51) {
      break;
    }
    v12 += v51;
    v11 -= v51;
  }
  while (v11 > 0);
}

void sub_FCD8(uint64_t a1)
{
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 4) = 4;
  sub_DE1C(a1);
}

uint64_t sub_FCE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_BE18(v1);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v2 = *(void *)(v1 + 40);
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, void *))(v1 + 24);
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 24) = 0;
  sub_BAF8(v1);
  timer_cancel(*(void *)(v1 + 64));
  memset(&v8[1], 0, 32);
  int v5 = *(_DWORD *)(v1 + 4);
  if (v5 != 1)
  {
    if (v5 == 2)
    {
      HIDWORD(v8[1]) = 1;
      *(_OWORD *)&v8[2] = *(_OWORD *)(v1 + 72);
      v8[4] = *(void *)(v1 + 88);
    }
    else if (v5 == 3)
    {
      LODWORD(v8[1]) = 1;
    }
    else
    {
      uint64_t v6 = (const char *)nullsub_1(**(void **)(v1 + 16));
      printf("No result for %s?\n", v6);
    }
  }
  v8[0] = v1;
  return v4(v3, v2, v8);
}

void sub_FDEC(uint64_t *a1)
{
  DHCPLeaseListFree_0(a1 + 1);

  free(a1);
}

uint64_t sub_FE28()
{
  if (qword_70118 != -1) {
    dispatch_once(&qword_70118, &stru_68CA0);
  }
  uint64_t result = qword_70120;
  if (qword_70120)
  {
    uint64_t result = symptom_new();
    if (result)
    {
      symptom_set_qualifier();
      return symptom_send() == 0;
    }
  }
  return result;
}

void sub_FEB8(id a1)
{
  qword_70120 = symptom_framework_init();
}

_OWORD *bootp_client_init(uint64_t a1)
{
  uint64_t v2 = sub_BA78();
  uint64_t v3 = malloc_type_malloc(0x28uLL, 0x10A004021536C6AuLL);
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  *((void *)v3 + 4) = 0;
  if (sub_57C7C(v2, v3))
  {
    *(void *)uint64_t v3 = a1;
  }
  else
  {
    free(v3);
    return 0;
  }
  return v3;
}

void bootp_client_free(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t *)sub_BA78();
    unsigned int v4 = sub_57D68(v3, (uint64_t)v1);
    if (v4 == -1)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v5 = _os_log_pack_size();
        __chkstk_darwin(v5);
        __error();
        uint64_t v6 = _os_log_pack_fill();
        uint64_t v7 = nullsub_1(*v1);
        *(_DWORD *)uint64_t v6 = 136315138;
        *(void *)(v6 + 4) = v7;
        __SC_log_send();
      }
    }
    else
    {
      sub_57C80(v3, v4, 0);
    }
    v1[2] = 0;
    v1[3] = 0;
    v1[4] = 0;
    sub_3F24(v1);
    free(v1);
    *a1 = 0;
  }
}

void sub_100D8(void *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_3F24();

  free(a1);
}

uint64_t bootp_client_enable_receive(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[2] = a2;
  a1[3] = a3;
  a1[4] = a4;
  uint64_t result = sub_10244(a1);
  if (!result)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      uint64_t v8 = nullsub_1(*a1);
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v7 + 4) = v8;
      return __SC_log_send();
    }
  }
  return result;
}

uint64_t sub_10244(void *a1)
{
  uint64_t v2 = sub_BA78();
  if (*((_DWORD *)a1 + 2)) {
    return 1;
  }
  uint64_t v4 = v2;
  timer_cancel(*(void *)(v2 + 48));
  ++*(_DWORD *)(v4 + 40);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v5 = _os_log_pack_size();
    __chkstk_darwin(v5);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    uint64_t v7 = nullsub_1(*a1);
    int v8 = *(_DWORD *)(v4 + 40);
    *(_DWORD *)uint64_t v6 = 136315394;
    *(void *)(v6 + 4) = v7;
    *(_WORD *)(v6 + 12) = 1024;
    *(_DWORD *)(v6 + 14) = v8;
    __SC_log_send();
  }
  uint64_t result = 1;
  *((_DWORD *)a1 + 2) = 1;
  if (*(int *)(v4 + 40) <= 1)
  {
    if (*(void *)(v4 + 32))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
        return 1;
      }
      return 1;
    }
    if (sub_108A8(v4)) {
      return 1;
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    sub_3F24(a1);
    return 0;
  }
  return result;
}

uint64_t sub_10520(void *a1, int a2)
{
  int v16 = a2;
  uint64_t v4 = *(unsigned int **)(sub_BA78() + 32);
  if (!v4 || (int v5 = sub_C448(v4), v5 < 0))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
    uint64_t v13 = _os_log_pack_size();
    __chkstk_darwin(v13);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    uint64_t v15 = nullsub_1(*a1);
    *(_DWORD *)uint64_t v14 = 136315394;
    *(void *)(v14 + 4) = v15;
    *(_WORD *)(v14 + 12) = 1024;
    *(_DWORD *)(v14 + 14) = a2;
    return __SC_log_send();
  }
  uint64_t result = setsockopt(v5, 0, 25, &v16, 4u);
  if ((result & 0x80000000) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      uint64_t v9 = nullsub_1(*a1);
      int v10 = v16;
      uint64_t v11 = __error();
      uint64_t v12 = strerror(*v11);
      *(_DWORD *)uint64_t v8 = 136315650;
      *(void *)(v8 + 4) = v9;
      *(_WORD *)(v8 + 12) = 1024;
      *(_DWORD *)(v8 + 14) = v10;
      *(_WORD *)(v8 + 18) = 2080;
      *(void *)(v8 + 20) = v12;
      return __SC_log_send();
    }
  }
  return result;
}

uint64_t bootp_session_init(int a1)
{
  uint64_t result = sub_BA78();
  if (*(_WORD *)(result + 44))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v3 = _os_log_pack_size();
      __chkstk_darwin(v3);
      __error();
      uint64_t v4 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v4 = 136315394;
      *(void *)(v4 + 4) = "bootp_session_init";
      *(_WORD *)(v4 + 12) = 1024;
      *(_DWORD *)(v4 + 14) = a1;
      return __SC_log_send();
    }
  }
  else
  {
    *(_WORD *)(result + 44) = a1;
  }
  return result;
}

uint64_t bootp_session_set_verbose(uint64_t result)
{
  byte_70128 = result;
  return result;
}

uint64_t sub_108A8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 57))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v1 = _os_log_pack_size();
      __chkstk_darwin(v1);
      __error();
      uint64_t v2 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v2 = 136315138;
      *(void *)(v2 + 4) = "bootp_session_open_socket";
      __SC_log_send();
      return 1;
    }
    return 1;
  }
  int v5 = sub_10B60(*(unsigned __int16 *)(a1 + 44));
  sub_4220();
  if ((v5 & 0x80000000) == 0)
  {
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6);
      __error();
      uint64_t v7 = (_DWORD *)_os_log_pack_fill();
      _DWORD *v7 = 67109120;
      v7[1] = v5;
      __SC_log_send();
    }
    sub_11250(a1, v5);
    return 1;
  }
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v8 = _os_log_pack_size();
    __chkstk_darwin(v8);
    __error();
    uint64_t v9 = _os_log_pack_fill();
    int v10 = __error();
    uint64_t v11 = strerror(*v10);
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v9 + 4) = v11;
    __SC_log_send();
    return 0;
  }
  return result;
}

uint64_t sub_10B60(unsigned int a1)
{
  int v29 = 0;
  uint64_t v2 = socket(2, 2, 0);
  if ((v2 & 0x80000000) == 0)
  {
    uint64_t v3 = v2;
    *(void *)&v30.sa_len = 512;
    *(void *)&v30.sa_data[6] = 0;
    *(_WORD *)v30.sa_uint64_t data = __rev16(a1);
    if (bind(v2, &v30, 0x10u))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v4 = _os_log_pack_size();
        __chkstk_darwin(v4);
        __error();
        uint64_t v5 = _os_log_pack_fill();
        uint64_t v6 = __error();
        uint64_t v7 = strerror(*v6);
        *(_DWORD *)uint64_t v5 = 67109378;
        *(_DWORD *)(v5 + 4) = a1;
        *(_WORD *)(v5 + 8) = 2080;
        *(void *)(v5 + 10) = v7;
LABEL_25:
        __SC_log_send();
      }
LABEL_26:
      close(v3);
      return 0xFFFFFFFFLL;
    }
    int v29 = 1;
    if (setsockopt(v3, 0xFFFF, 32, &v29, 4u) < 0)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_26;
      }
    }
    else if (ioctl(v3, 0x8004667EuLL, &v29) < 0)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_26;
      }
    }
    else
    {
      if ((setsockopt(v3, 0, 20, &v29, 4u) & 0x80000000) == 0)
      {
        if (setsockopt(v3, 0xFFFF, 4356, &v29, 4u) < 0)
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v12 = _os_log_pack_size();
            __chkstk_darwin(v12);
            __error();
            uint64_t v13 = _os_log_pack_fill();
            uint64_t v14 = __error();
            uint64_t v15 = strerror(*v14);
            *(_DWORD *)uint64_t v13 = 136315138;
            *(void *)(v13 + 4) = v15;
            __SC_log_send();
          }
        }
        int v29 = 900;
        if (setsockopt(v3, 0xFFFF, 4230, &v29, 4u) < 0)
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v16 = _os_log_pack_size();
            __chkstk_darwin(v16);
            __error();
            uint64_t v17 = _os_log_pack_fill();
            unsigned int v18 = __error();
            int v19 = strerror(*v18);
            *(_DWORD *)uint64_t v17 = 136315138;
            *(void *)(v17 + 4) = v19;
            __SC_log_send();
          }
        }
        int v29 = 0;
        if (setsockopt(v3, 0xFFFF, 4352, &v29, 4u) < 0)
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v20 = _os_log_pack_size();
            __chkstk_darwin(v20);
            __error();
            uint64_t v21 = _os_log_pack_fill();
            uint64_t v22 = __error();
            unsigned __int16 v23 = strerror(*v22);
            *(_DWORD *)uint64_t v21 = 136315138;
            *(void *)(v21 + 4) = v23;
            __SC_log_send();
          }
        }
        return v3;
      }
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_26;
      }
    }
    uint64_t v24 = _os_log_pack_size();
    __chkstk_darwin(v24);
    __error();
    uint64_t v25 = _os_log_pack_fill();
    uint64_t v26 = __error();
    int v27 = strerror(*v26);
    *(_DWORD *)uint64_t v25 = 136315138;
    *(void *)(v25 + 4) = v27;
    goto LABEL_25;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (!__SC_log_enabled()) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = _os_log_pack_size();
  __chkstk_darwin(v8);
  __error();
  uint64_t v9 = _os_log_pack_fill();
  int v10 = __error();
  uint64_t v11 = strerror(*v10);
  *(_DWORD *)uint64_t v9 = 136315138;
  *(void *)(v9 + 4) = v11;
  __SC_log_send();
  return 0xFFFFFFFFLL;
}

char *sub_11250(uint64_t a1, int a2)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 136315394;
    *(void *)(v5 + 4) = "bootp_session_enable_receive";
    *(_WORD *)(v5 + 12) = 1024;
    *(_DWORD *)(v5 + 14) = a2;
    __SC_log_send();
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_113F4;
  v7[3] = &unk_68CC0;
  v7[4] = a1;
  int v8 = a2;
  uint64_t result = sub_1AD6C(a2, (uint64_t)sub_116A8, a1, 0, v7);
  *(void *)(a1 + 32) = result;
  return result;
}

uint64_t sub_113F4(uint64_t a1)
{
  return sub_11404(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t sub_11404(uint64_t a1, uint64_t a2)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 136315394;
    *(void *)(v5 + 4) = "bootp_session_fd_complete";
    *(_WORD *)(v5 + 12) = 1024;
    *(_DWORD *)(v5 + 14) = a2;
    __SC_log_send();
  }
  *(unsigned char *)(a1 + 57) = 0;
  int v6 = *(_DWORD *)(a1 + 40);
  sub_4220();
  _SC_syslog_os_log_mapping();
  int v7 = __SC_log_enabled();
  if (v6 < 1)
  {
    if (v7)
    {
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)(v12 + 4) = "bootp_session_fd_complete";
      *(_WORD *)(v12 + 12) = 1024;
      *(_DWORD *)(v12 + 14) = a2;
      __SC_log_send();
    }
    return close(a2);
  }
  else
  {
    if (v7)
    {
      uint64_t v8 = _os_log_pack_size();
      __chkstk_darwin(v8);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v9 = 136315394;
      *(void *)(v9 + 4) = "bootp_session_fd_complete";
      *(_WORD *)(v9 + 12) = 1024;
      *(_DWORD *)(v9 + 14) = a2;
      __SC_log_send();
    }
    return sub_11250(a1, a2);
  }
}

void sub_116A8(uint64_t a1)
{
  v15[1] = 0;
  v15[0] = 0;
  *(void *)&v11.msg_iovlen = 1;
  v11.msg_name = v15;
  *(void *)&v11.msg_namelen = 16;
  v11.msg_iov = (iovec *)v12;
  v11.msg_control = &v16;
  *(void *)&v11.msg_controllen = 512;
  v12[0] = v13;
  v12[1] = 1500;
  int v2 = sub_C448(*(unsigned int **)(a1 + 32));
  ssize_t v3 = recvmsg(v2, &v11, 0);
  uint64_t v4 = v3;
  if (v3 < 1)
  {
    if (v3 < 0)
    {
      int v6 = *__error();
      if (v6 != 35)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v7 = _os_log_pack_size();
          __chkstk_darwin(v7);
          __error();
          uint64_t v8 = _os_log_pack_fill();
          int v9 = sub_C448(*(unsigned int **)(a1 + 32));
          int v10 = strerror(v6);
          *(_DWORD *)uint64_t v8 = 67109378;
          *(_DWORD *)(v8 + 4) = v9;
          *(_WORD *)(v8 + 8) = 2080;
          *(void *)(v8 + 10) = v10;
          __SC_log_send();
        }
        if (v6 == 57) {
          sub_11C6C(a1);
        }
      }
    }
  }
  else if (v11.msg_controllen >= 0xC)
  {
    msg_control = (unsigned int *)v11.msg_control;
    if (v11.msg_control)
    {
      while (msg_control[1] || msg_control[2] != 20)
      {
        msg_control = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
        if ((char *)(msg_control + 3) > (char *)v11.msg_control + v11.msg_controllen) {
          return;
        }
      }
      if (*msg_control >= 0xD && *((unsigned __int8 *)msg_control + 17) <= 0x10uLL)
      {
        __memmove_chk();
        v14[*((unsigned __int8 *)msg_control + 17)] = 0;
        sub_11920(a1, v14, (unsigned __int8 *)v15 + 4, v13, v4);
      }
    }
  }
}

void sub_11920(uint64_t a1, const char *a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5)
{
  if (a5 >= 0xEC)
  {
    v29[0] = 0;
    v29[1] = 0;
    v28[0] = a4;
    v28[1] = (unsigned __int8 *)a5;
    sub_54D30(v29, (uint64_t)a4, a5, 0);
    if (byte_70128)
    {
      CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
      sub_55360(Mutable, v28[0], a5, (uint64_t)v29);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v10 = _os_log_pack_size();
        uint64_t v27 = (uint64_t)&v27;
        __chkstk_darwin(v10);
        __error();
        uint64_t v11 = _os_log_pack_fill();
        int v12 = *a3;
        int v13 = a3[1];
        int v14 = a3[2];
        int v15 = a3[3];
        *(_DWORD *)uint64_t v11 = 136316674;
        *(void *)(v11 + 4) = a2;
        *(_WORD *)(v11 + 12) = 1024;
        *(_DWORD *)(v11 + 14) = a5;
        *(_WORD *)(v11 + 18) = 1024;
        *(_DWORD *)(v11 + 20) = v12;
        *(_WORD *)(v11 + 24) = 1024;
        *(_DWORD *)(v11 + 26) = v13;
        *(_WORD *)(v11 + 30) = 1024;
        *(_DWORD *)(v11 + 32) = v14;
        *(_WORD *)(v11 + 36) = 1024;
        *(_DWORD *)(v11 + 38) = v15;
        *(_WORD *)(v11 + 42) = 2112;
        *(void *)(v11 + 44) = Mutable;
        __SC_log_send();
      }
      CFRelease(Mutable);
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v16 = _os_log_pack_size();
        __chkstk_darwin(v16);
        __error();
        uint64_t v17 = _os_log_pack_fill();
        uint64_t v18 = bswap32(*((_DWORD *)v28[0] + 1));
        int v19 = *a3;
        int v20 = a3[1];
        int v21 = a3[2];
        int v22 = a3[3];
        *(_DWORD *)uint64_t v17 = 136316674;
        *(void *)(v17 + 4) = a2;
        *(_WORD *)(v17 + 12) = 1024;
        *(_DWORD *)(v17 + 14) = a5;
        *(_WORD *)(v17 + 18) = 2048;
        *(void *)(v17 + 20) = v18;
        *(_WORD *)(v17 + 28) = 1024;
        *(_DWORD *)(v17 + 30) = v19;
        *(_WORD *)(v17 + 34) = 1024;
        *(_DWORD *)(v17 + 36) = v20;
        *(_WORD *)(v17 + 40) = 1024;
        *(_DWORD *)(v17 + 42) = v21;
        *(_WORD *)(v17 + 46) = 1024;
        *(_DWORD *)(v17 + 48) = v22;
        __SC_log_send();
      }
    }
    if ((int)sub_5B24(a1) >= 1)
    {
      uint64_t v23 = 0;
      do
      {
        uint64_t v24 = (void *)sub_5B4C(a1, v23);
        uint64_t v25 = (const char *)nullsub_1(*v24);
        if (!strcmp(v25, a2))
        {
          uint64_t v26 = (void (*)(void, void, unsigned __int8 **))v24[2];
          if (v26) {
            v26(v24[3], v24[4], v28);
          }
        }
        uint64_t v23 = (v23 + 1);
      }
      while ((int)v23 < (int)sub_5B24(a1));
    }
    sub_54A34((uint64_t)v29);
  }
}

void sub_11C6C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 57))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v1 = _os_log_pack_size();
      __chkstk_darwin(v1);
      __error();
      uint64_t v2 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v2 = 136315138;
      *(void *)(v2 + 4) = "bootp_session_schedule_close";
      __SC_log_send();
    }
  }
  else
  {
    *(unsigned char *)(a1 + 57) = 1;
    ssize_t v3 = (dispatch_object_t **)(a1 + 32);
    sub_1AFD8(v3);
  }
}

void sub_11DD4(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
    goto LABEL_6;
  }
  int v2 = *(_DWORD *)(a1 + 40);
  sub_4220();
  if (v2 >= 1)
  {
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
LABEL_6:
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
    return;
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
    uint64_t v5 = (_DWORD *)_os_log_pack_fill();
    int v6 = sub_C448(*(unsigned int **)(a1 + 32));
    *uint64_t v5 = 67109120;
    v5[1] = v6;
    __SC_log_send();
  }
  sub_11C6C(a1);
}

uint64_t sub_12024(char *a1, unsigned int a2)
{
  BOOL v2 = a1 != 0;
  BOOL v3 = a2 != 0;
  BOOL v4 = !v2 || !v3;
  if (v2 && v3) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = &byte_5D478;
  }
  if (v4) {
    uint64_t v6 = 9;
  }
  else {
    uint64_t v6 = a2;
  }
  off_70000 = v5;
  dword_70008 = v6;
  off_70010 = v5;
  dword_70018 = v6;
  if ((int)v6 < 1)
  {
LABEL_10:
    int v8 = 0;
  }
  else
  {
    while (1)
    {
      int v7 = *v5++;
      if (v7 == 108) {
        break;
      }
      if (!--v6) {
        goto LABEL_10;
      }
    }
    int v8 = 1;
  }
  dword_70138 = v8;
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v10 = _os_log_pack_size();
    __chkstk_darwin(v10);
    __error();
    uint64_t v11 = _os_log_pack_fill();
    if (dword_70138) {
      int v12 = "TRUE";
    }
    else {
      int v12 = "FALSE";
    }
    *(_DWORD *)uint64_t v11 = 136315138;
    *(void *)(v11 + 4) = v12;
    return __SC_log_send();
  }
  return result;
}

uint64_t sub_121C4(int a1)
{
  if (a1 - 51) < 0xB && ((0x7ADu >> (a1 - 51))) {
    return 1;
  }
  if (dword_70018 < 1) {
    return 0;
  }
  uint64_t v1 = off_70010;
  uint64_t v2 = dword_70018 - 1;
  do
  {
    int v3 = *v1++;
    BOOL v4 = v3 == a1;
  }
  while (v3 != a1 && v2-- != 0);
  return v4;
}

void sub_12228(unsigned __int8 *a1, int a2)
{
  BOOL v4 = off_70000;
  if (off_70010) {
    BOOL v5 = off_70010 == off_70000;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    free(off_70010);
  }
  dword_70018 = dword_70008;
  if (a1 && a2)
  {
    uint64_t v6 = (unsigned __int8 *)malloc_type_malloc(dword_70008 + a2, 0x23AF8F2CuLL);
    if (!v6)
    {
      off_70010 = v4;
      goto LABEL_23;
    }
    int v7 = v6;
    int v8 = dword_70008;
    memmove(v6, off_70000, dword_70008);
    if (a2 < 1) {
      goto LABEL_19;
    }
    uint64_t v9 = 0;
    int v10 = v8;
    do
    {
      int v11 = a1[v9];
      if (v10 < 1)
      {
LABEL_15:
        v7[v10++] = v11;
      }
      else
      {
        uint64_t v12 = v10;
        int v13 = v7;
        while (1)
        {
          int v14 = *v13++;
          if (v14 == v11) {
            break;
          }
          if (!--v12) {
            goto LABEL_15;
          }
        }
      }
      ++v9;
    }
    while (v9 != a2);
    if (v10 <= v8)
    {
LABEL_19:
      free(v7);
    }
    else
    {
      dword_70018 = v10;
      BOOL v4 = (char *)v7;
    }
  }
  off_70010 = v4;
  if (a1) {
LABEL_23:
  }
    free(a1);
  if (G_IPConfiguration_verbose)
  {
    CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
    uint64_t v16 = dword_70018;
    if (dword_70018 >= 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = (unsigned __int8 *)off_70010;
      do
      {
        if (v17) {
          CFStringAppendFormat(Mutable, 0, @", %d", v18[v17]);
        }
        else {
          CFStringAppendFormat(Mutable, 0, @"%d", *v18);
        }
        ++v17;
      }
      while (v16 != v17);
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v19 = _os_log_pack_size();
      __chkstk_darwin(v19);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v20 = 138412290;
      *(void *)(v20 + 4) = Mutable;
      __SC_log_send();
    }
    CFRelease(Mutable);
  }
}

uint64_t sub_124A4(_DWORD *a1, int a2, unsigned __int8 *a3)
{
  uint64_t v6 = sub_8B80((uint64_t)a1);
  uint64_t v7 = sub_557C((uint64_t)a1);
  uint64_t v8 = 0;
  uint64_t v9 = (uint64_t *)v7;
  switch(a2)
  {
    case 0:
      if ((sub_9384(v6) & 8) != 0) {
        return 4;
      }
      if (v9)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          return 6;
        }
LABEL_40:
        uint64_t v26 = _os_log_pack_size();
        __chkstk_darwin(v26);
        __error();
        uint64_t v27 = _os_log_pack_fill();
        uint64_t v28 = nullsub_1(v6);
        *(_DWORD *)uint64_t v27 = 136315138;
        *(void *)(v27 + 4) = v28;
        __SC_log_send();
        return 6;
      }
      uint64_t v9 = (uint64_t *)malloc_type_malloc(0x878uLL, 0x10A004082C9D559uLL);
      sub_1E5C8((uint64_t)a1, (uint64_t)v9);
      bzero(v9, 0x878uLL);
      sub_54A30(v9 + 5);
      sub_1E4E8((uint64_t)a1, *(_DWORD *)a3);
      sub_1E510((uint64_t)a1, *((_DWORD *)a3 + 1));
      *((_DWORD *)v9 + 5) = sub_1E520((uint64_t)a1);
      int v29 = (const char *)nullsub_1(v6);
      snprintf(__str, 0x20uLL, "inform-%s", v29);
      sockaddr v30 = timer_callout_init(__str);
      v9[199] = (uint64_t)v30;
      if (!v30)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled()) {
          goto LABEL_54;
        }
        goto LABEL_55;
      }
      int v31 = bootp_client_init(v6);
      v9[1] = (uint64_t)v31;
      if (!v31)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled()) {
          goto LABEL_54;
        }
        goto LABEL_55;
      }
      int v32 = sub_CE80(v6);
      *uint64_t v9 = (uint64_t)v32;
      sub_4220();
      _SC_syslog_os_log_mapping();
      int v33 = __SC_log_enabled();
      if (!v32)
      {
        if (v33)
        {
LABEL_54:
          uint64_t v37 = _os_log_pack_size();
          __chkstk_darwin(v37);
          __error();
          uint64_t v38 = _os_log_pack_fill();
          uint64_t v39 = nullsub_1(v6);
          *(_DWORD *)uint64_t v38 = 136315138;
          *(void *)(v38 + 4) = v39;
          __SC_log_send();
        }
LABEL_55:
        uint64_t v8 = 5;
        goto LABEL_56;
      }
      if (v33)
      {
        uint64_t v34 = _os_log_pack_size();
        __chkstk_darwin(v34);
        __error();
        uint64_t v35 = _os_log_pack_fill();
        uint64_t v36 = nullsub_1(v6);
        *(_DWORD *)uint64_t v35 = 136315138;
        *(void *)(v35 + 4) = v36;
        __SC_log_send();
      }
      *((_DWORD *)v9 + 538) = arc4random();
LABEL_7:
      sub_12E6C(a1, 0, 0);
      return 0;
    case 1:
LABEL_56:
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v40 = _os_log_pack_size();
        __chkstk_darwin(v40);
        __error();
        uint64_t v41 = _os_log_pack_fill();
        uint64_t v42 = nullsub_1(v6);
        *(_DWORD *)uint64_t v41 = 136315138;
        *(void *)(v41 + 4) = v42;
        __SC_log_send();
      }
      if (v9)
      {
        sub_1DB14((uint64_t)a1);
        if (v9[199]) {
          timer_callout_free(v9 + 199);
        }
        if (v9[1]) {
          bootp_client_free((void **)v9 + 1);
        }
        if (*v9) {
          sub_D020((uint64_t **)v9);
        }
        sub_54A34((uint64_t)(v9 + 5));
        free(v9);
        sub_1E5C8((uint64_t)a1, 0);
      }
      return v8;
    case 3:
    case 8:
    case 11:
      if (!v7) {
        return 6;
      }
      *(_DWORD *)(v7 + 2156) = 0;
      if (*((_DWORD *)a3 + 1) && !*((_DWORD *)a3 + 2))
      {
        sub_13314((uint64_t)a1);
        return 0;
      }
      if (a2 != 11 || !sub_1BC54((uint64_t)a1)) {
        goto LABEL_7;
      }
      return 0;
    case 4:
      sub_1337C((uint64_t)a1);
      return 0;
    case 7:
      if (!v7)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled()) {
          goto LABEL_40;
        }
        return 6;
      }
      int v10 = *(unsigned int **)a3;
      *((_DWORD *)a3 + 2) = 0;
      int v11 = *v10;
      if (v11 != sub_1E4F8((uint64_t)a1))
      {
        uint64_t v8 = 0;
        *((_DWORD *)a3 + 2) = 1;
        return v8;
      }
      uint64_t v8 = v10[1];
      if (!v8) {
        return v8;
      }
      if (v8 != sub_1E520((uint64_t)a1))
      {
        sub_1E510((uint64_t)a1, v10[1]);
        unint64_t v12 = v10[1];
        *((_DWORD *)v9 + 5) = v12;
        sub_1D47C((uint64_t)a1, *v10, v12, 0);
      }
      return 0;
    case 9:
      if (!v7) {
        return 6;
      }
      int v13 = *(_DWORD *)a3;
      if (v13 == sub_1E4F8((uint64_t)a1) && !sub_1BE88((uint64_t)a1, (uint64_t)a3))
      {
        int v14 = (unsigned __int8 *)*((void *)a3 + 1);
        snprintf(__str, 0x80uLL, "%d.%d.%d.%d in use by %02x:%02x:%02x:%02x:%02x:%02x", *a3, a3[1], a3[2], a3[3], *v14, v14[1], v14[2], v14[3], v14[4], v14[5]);
        if (!*((_DWORD *)v9 + 539)) {
          *((_DWORD *)v9 + 539) = 1;
        }
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v15 = _os_log_pack_size();
          __chkstk_darwin(v15);
          __error();
          uint64_t v16 = _os_log_pack_fill();
          uint64_t v17 = nullsub_1(v6);
          *(_DWORD *)uint64_t v16 = 136315394;
          *(void *)(v16 + 4) = v17;
          *(_WORD *)(v16 + 12) = 2080;
          *(void *)(v16 + 14) = __str;
          __SC_log_send();
        }
      }
      return 0;
    case 13:
      if (!sub_1E5D0((uint64_t)a1)) {
        return 0;
      }
      if (!*((_DWORD *)v9 + 389)) {
        return 0;
      }
      *((void *)a3 + 4) = 0;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      int v18 = *((_DWORD *)v9 + 389);
      if (!v18) {
        return 0;
      }
      uint64_t v8 = 0;
      *(void *)a3 = v9 + 7;
      *((_DWORD *)a3 + 2) = v18;
      *((void *)a3 + 2) = v9 + 5;
      return v8;
    case 22:
      uint64_t v19 = sub_557C((uint64_t)a1);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      int v21 = Mutable;
      uint64_t v22 = *(unsigned int *)(v19 + 1584);
      if (v22 > 4) {
        uint64_t v23 = "<unknown>";
      }
      else {
        uint64_t v23 = off_68CE0[v22];
      }
      sub_53ED0(Mutable, @"State", v23);
      if (sub_1E5D0((uint64_t)a1))
      {
        uint64_t v24 = sub_182AC(v19 + 40);
        if (v24)
        {
          uint64_t v25 = v24;
          CFDictionarySetValue(v21, @"Packet", v24);
          CFRelease(v25);
        }
      }
      CFDictionarySetValue((CFMutableDictionaryRef)a3, @"INFORM", v21);
      CFRelease(v21);
      return 0;
    default:
      return v8;
  }
}

void sub_12E6C(_DWORD *a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_8B80((uint64_t)a1);
  uint64_t v7 = sub_557C((uint64_t)a1);
  if (a2 == 6)
  {
    if (*(_DWORD *)(a3 + 8))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v10 = _os_log_pack_size();
        __chkstk_darwin(v10);
        __error();
        uint64_t v11 = _os_log_pack_fill();
        uint64_t v12 = nullsub_1(v6);
        uint64_t v13 = sub_E73C(*(void *)v7);
        *(_DWORD *)uint64_t v11 = 136315394;
        *(void *)(v11 + 4) = v12;
        *(_WORD *)(v11 + 12) = 2080;
        *(void *)(v11 + 14) = v13;
        __SC_log_send();
      }
      sub_16BCC((uint64_t)a1, 6u);
      timer_callout_set(*(void *)(v7 + 1592), sub_12E6C, a1, 0, 0, 8.0);
    }
    else if (*(_DWORD *)(a3 + 12))
    {
      unsigned int v14 = sub_1E4F8((uint64_t)a1);
      snprintf(__str, 0x80uLL, "%d.%d.%d.%d in use by %02x:%02x:%02x:%02x:%02x:%02x", v14, BYTE1(v14), BYTE2(v14), HIBYTE(v14), *(unsigned __int8 *)(a3 + 24), *(unsigned __int8 *)(a3 + 25), *(unsigned __int8 *)(a3 + 26), *(unsigned __int8 *)(a3 + 27), *(unsigned __int8 *)(a3 + 28), *(unsigned __int8 *)(a3 + 29));
      if (!*(_DWORD *)(v7 + 2156)) {
        *(_DWORD *)(v7 + 2156) = 1;
      }
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v15 = _os_log_pack_size();
        __chkstk_darwin(v15);
        __error();
        uint64_t v16 = _os_log_pack_fill();
        uint64_t v17 = nullsub_1(v6);
        *(_DWORD *)uint64_t v16 = 136315394;
        *(void *)(v16 + 4) = v17;
        *(_WORD *)(v16 + 12) = 2080;
        *(void *)(v16 + 14) = __str;
        __SC_log_send();
      }
      sub_1DB14((uint64_t)a1);
      sub_16BCC((uint64_t)a1, 8u);
      if (dword_70048 >= 1) {
        timer_set_relative(*(void *)(v7 + 1592), dword_70048, 0, (uint64_t)sub_12E6C, (uint64_t)a1, 0, 0);
      }
    }
    else if (sub_9030((uint64_t)a1) == 1)
    {
      sub_1337C((uint64_t)a1);
    }
    else
    {
      unsigned int v18 = *(_DWORD *)(v7 + 20);
      if (v18) {
        unint64_t v19 = v18;
      }
      else {
        unint64_t v19 = 0xFFFFFFFFLL;
      }
      unsigned int v20 = sub_1E4F8((uint64_t)a1);
      sub_1D47C((uint64_t)a1, v20, v19, 0);
      sub_16C18(a1, 0, 0);
    }
  }
  else if (!a2)
  {
    sub_13314((uint64_t)a1);
    sub_16A64((uint64_t)a1, 1u);
    uint64_t v8 = *(void *)v7;
    int v9 = sub_1E4F8((uint64_t)a1);
    sub_E17C(v8, (uint64_t)sub_12E6C, (uint64_t)a1, 6, 0, v9);
  }
}

void sub_13314(uint64_t a1)
{
  uint64_t v2 = sub_557C(a1);
  if (v2)
  {
    int v3 = (uint64_t *)v2;
    uint64_t v4 = *(void *)(v2 + 1592);
    if (v4) {
      timer_cancel(v4);
    }
    BOOL v5 = (void *)v3[1];
    if (v5) {
      bootp_client_disable_receive(v5);
    }
    uint64_t v6 = *v3;
    sub_1B064(a1, v6);
  }
}

uint64_t sub_1337C(uint64_t a1)
{
  uint64_t v2 = sub_557C(a1);
  sub_13314(a1);
  sub_1DB14(a1);
  sub_54A34(v2 + 40);
  sub_9028(a1, 0xCu);

  return sub_16A64(a1, 0);
}

void sub_1343C(uint64_t a1)
{
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v2 = *(const void **)(a1 + 120);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 120) = 0;
  int v3 = *(const void **)(a1 + 128);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(a1 + 128) = 0;
}

uint64_t sub_13480(uint64_t a1)
{
  uint64_t v2 = sub_557C(a1);
  uint64_t v3 = sub_8B80(a1);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    uint64_t v6 = nullsub_1(v3);
    *(_DWORD *)uint64_t v5 = 136315138;
    *(void *)(v5 + 4) = v6;
    __SC_log_send();
  }
  DHCPLeaseListInit((void *)(v2 + 136));
  *(_DWORD *)(v2 + 2332) = arc4random();
  if (!sub_1E5B8(a1)) {
    sub_18300(a1);
  }
  return timer_set_relative(*(void *)(v2 + 1760), 0, 0, (uint64_t)sub_184F4, a1, 0, 0);
}

unint64_t sub_13608(uint64_t a1)
{
  uint64_t v2 = sub_8B80(a1);
  unint64_t result = sub_557C(a1);
  memset(v19, 0, sizeof(v19));
  if (*(_DWORD *)(result + 56))
  {
    uint64_t v4 = result;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      uint64_t v7 = nullsub_1(v2);
      *(_DWORD *)uint64_t v6 = 136315138;
      *(void *)(v6 + 4) = v7;
      __SC_log_send();
    }
    sub_13C38(a1, 0);
    sub_1343C(v4);
    sub_1BAC0(a1);
    sub_ABF0(a1);
    unint64_t result = sub_9030(a1);
    if (HIDWORD(result) || !result)
    {
      uint64_t v8 = (const void *)sub_58CAC(v2);
      unsigned __int8 v9 = sub_934C(v2);
      unsigned __int8 v10 = sub_58034(v2);
      unint64_t result = (unint64_t)sub_17440((char *)(v4 + 1784), 7, v8, v9, v10, *(const void **)(v4 + 24), *(_DWORD *)(v4 + 32), 0, (uint64_t *)v19);
      *(void *)(v4 + 176) = result;
      if (result)
      {
        unsigned int v11 = *(_DWORD *)(v4 + 2332) + 1;
        *(_DWORD *)(v4 + 2332) = v11;
        *(_DWORD *)(result + 4) = bswap32(v11);
        *(_DWORD *)(result + 12) = *(_DWORD *)(v4 + 1732);
        if (sub_55080((uint64_t)v19, 54, 4, (void *)(v4 + 1736)))
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          unint64_t result = __SC_log_enabled();
          if (!result) {
            return result;
          }
          uint64_t v12 = _os_log_pack_size();
          __chkstk_darwin(v12);
          __error();
          uint64_t v13 = _os_log_pack_fill();
          uint64_t v14 = nullsub_1(v2);
          uint64_t v15 = sub_552A0((uint64_t *)v19);
          *(_DWORD *)uint64_t v13 = 136315394;
          *(void *)(v13 + 4) = v14;
          *(_WORD *)(v13 + 12) = 2080;
          *(void *)(v13 + 14) = v15;
          return __SC_log_send();
        }
        if (sub_55080((uint64_t)v19, 255, 0, 0))
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          unint64_t result = __SC_log_enabled();
          if (!result) {
            return result;
          }
          goto LABEL_12;
        }
        if ((bootp_client_transmit(*(void **)(v4 + 16), *(_DWORD *)(v4 + 1736), *(unsigned int *)(v4 + 1732), (unsigned __int16)word_70044, (unsigned __int16)word_70020, *(void **)(v4 + 176), *(unsigned int *)(v4 + 184)) & 0x80000000) == 0)
        {
          unint64_t result = sub_1A91C(a1);
          *(_DWORD *)(v4 + 1732) = 0;
          return result;
        }
        sub_4220();
        _SC_syslog_os_log_mapping();
        unint64_t result = __SC_log_enabled();
        if (result)
        {
LABEL_12:
          uint64_t v16 = _os_log_pack_size();
          __chkstk_darwin(v16);
          __error();
          uint64_t v17 = _os_log_pack_fill();
          uint64_t v18 = nullsub_1(v2);
          *(_DWORD *)uint64_t v17 = 136315138;
          *(void *)(v17 + 4) = v18;
          return __SC_log_send();
        }
      }
    }
  }
  return result;
}

void sub_13A98(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (_DWORD *)sub_557C(a1);
  sub_ABF0(a1);
  sub_1D3B8(a1);
  sub_54A34((uint64_t)(v4 + 52));
  sub_1DB14(a1);
  sub_9028(a1, a2);
  sub_18C3C(a1, 0);
  *uint64_t v4 = 0;

  sub_BEF8(a1, 0);
}

void sub_13B20(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = *(const void **)(a1 + 120);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(a1 + 120) = cf;
}

void sub_13B60(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = *(const void **)(a1 + 128);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(a1 + 128) = cf;
}

double sub_13BA0(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16)
{
  *(void *)&double result = 136318722;
  *(_DWORD *)a1 = 136318722;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 1024;
  *(_DWORD *)(a1 + 20) = a4;
  *(_WORD *)(a1 + 24) = 1024;
  *(_DWORD *)(a1 + 26) = a5;
  *(_WORD *)(a1 + 30) = 1024;
  *(_DWORD *)(a1 + 32) = a6;
  *(_WORD *)(a1 + 36) = 1024;
  *(_DWORD *)(a1 + 38) = a7;
  *(_WORD *)(a1 + 42) = 1024;
  *(_DWORD *)(a1 + 44) = a8;
  *(_WORD *)(a1 + 48) = 1024;
  *(_DWORD *)(a1 + 50) = a9;
  *(_WORD *)(a1 + 54) = 1024;
  *(_DWORD *)(a1 + 56) = a10;
  *(_WORD *)(a1 + 60) = 1024;
  *(_DWORD *)(a1 + 62) = a11;
  *(_WORD *)(a1 + 66) = 1024;
  *(_DWORD *)(a1 + 68) = a12;
  *(_WORD *)(a1 + 72) = 1024;
  *(_DWORD *)(a1 + 74) = a13;
  *(_WORD *)(a1 + 78) = 1024;
  *(_DWORD *)(a1 + 80) = a14;
  *(_WORD *)(a1 + 84) = 1024;
  *(_DWORD *)(a1 + 86) = a15;
  *(_WORD *)(a1 + 90) = 1024;
  *(_DWORD *)(a1 + 92) = a16;
  return result;
}

void sub_13C38(uint64_t a1, int a2)
{
  uint64_t v4 = sub_557C(a1);
  uint64_t v5 = sub_8B80(a1);
  if (!sub_1B388(a1))
  {
    unsigned int v9 = 0;
    uint64_t v7 = 0;
    int v6 = 0;
LABEL_12:
    uint64_t v15 = 0;
    char v14 = 0;
    int v13 = 0;
    sub_1855C(v4, v5, (uint64_t *)&v15, &v14, &v13);
    DHCPLeaseListRemoveLease((uint64_t *)(v4 + 136), *(_DWORD *)(v4 + 1732), v6, v7, v9);
    uint64_t v12 = (const char *)nullsub_1(v5);
    DHCPLeaseListWrite((uint64_t *)(v4 + 136), v12, v14, v15, v13);
    return;
  }
  int v6 = sub_1B3A4(a1);
  if (!sub_1E560(a1))
  {
    unsigned int v9 = 0;
    uint64_t v7 = 0;
    goto LABEL_12;
  }
  uint64_t v7 = (const void *)sub_1BA08(a1);
  unsigned int v8 = sub_58034(v5);
  unsigned int v9 = v8;
  if (!a2 || !v6 || !v8) {
    goto LABEL_12;
  }
  uint64_t Lease = DHCPLeaseListFindLease(v4 + 136, *(_DWORD *)(v4 + 1732), v6, v7, v8);
  if (Lease != -1)
  {
    uint64_t v11 = sub_5B4C(v4 + 136, Lease);
    DHCPLeaseSetNAK(v11, 1);
  }
}

void sub_13DA4(uint64_t a1)
{
  uint64_t v2 = sub_557C(a1);
  uint64_t v3 = sub_8B80(a1);
  memset(v24, 0, sizeof(v24));
  sub_18C3C(a1, 1u);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    uint64_t v6 = nullsub_1(v3);
    uint64_t v7 = inet_ntop(2, (const void *)(v2 + 1732), v23, 0x10u);
    *(_DWORD *)uint64_t v5 = 136315394;
    *(void *)(v5 + 4) = v6;
    *(_WORD *)(v5 + 12) = 2080;
    *(void *)(v5 + 14) = v7;
    __SC_log_send();
  }
  sub_ABF0(a1);
  unsigned int v8 = (const void *)sub_58CAC(v3);
  unsigned __int8 v9 = sub_934C(v3);
  unsigned __int8 v10 = sub_58034(v3);
  uint64_t v11 = sub_17440((char *)(v2 + 1784), 4, v8, v9, v10, *(const void **)(v2 + 24), *(_DWORD *)(v2 + 32), 0, (uint64_t *)v24);
  *(void *)(v2 + 176) = v11;
  if (!v11) {
    goto LABEL_11;
  }
  if (sub_55080((uint64_t)v24, 50, 4, (void *)(v2 + 1732)))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled()) {
      goto LABEL_9;
    }
    goto LABEL_11;
  }
  if (sub_55080((uint64_t)v24, 54, 4, (void *)(v2 + 1736)))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
LABEL_9:
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      uint64_t v14 = nullsub_1(v3);
      uint64_t v15 = sub_552A0((uint64_t *)v24);
      *(_DWORD *)uint64_t v13 = 136315394;
      *(void *)(v13 + 4) = v14;
      *(_WORD *)(v13 + 12) = 2080;
      *(void *)(v13 + 14) = v15;
LABEL_10:
      __SC_log_send();
    }
LABEL_11:
    sub_13A98(a1, 5u);
    return;
  }
  if (sub_55080((uint64_t)v24, 255, 0, 0))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_11;
    }
    uint64_t v16 = _os_log_pack_size();
    __chkstk_darwin(v16);
    __error();
    uint64_t v17 = _os_log_pack_fill();
    uint64_t v18 = nullsub_1(v3);
    *(_DWORD *)uint64_t v17 = 136315138;
    *(void *)(v17 + 4) = v18;
    goto LABEL_10;
  }
  if ((bootp_client_transmit(*(void **)(v2 + 16), 0xFFFFFFFF, 0, (unsigned __int16)word_70044, (unsigned __int16)word_70020, *(void **)(v2 + 176), *(unsigned int *)(v2 + 184)) & 0x80000000) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v19 = _os_log_pack_size();
      __chkstk_darwin(v19);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      uint64_t v21 = nullsub_1(v3);
      *(_DWORD *)uint64_t v20 = 136315138;
      *(void *)(v20 + 4) = v21;
      __SC_log_send();
    }
  }
  sub_1DB14(a1);
  *(_DWORD *)(v2 + 1732) = 0;
  sub_1343C(v2);
  sub_1BAC0(a1);
  sub_1D3B8(a1);
  sub_BEF8(a1, 0);
  if (sub_1A31C(v3)) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = 10;
  }
  timer_set_relative(*(void *)(v2 + 1760), v22, 0, (uint64_t)sub_4A0C, a1, 0, 0);
}

void sub_14358(_DWORD *a1, int a2, int *a3)
{
  double current_time = timer_get_current_time();
  uint64_t v7 = sub_557C((uint64_t)a1);
  uint64_t v8 = sub_8B80((uint64_t)a1);
  int v9 = sub_9368(v8);
  int v10 = *a3;
  if (v9)
  {
    if (!v10) {
      goto LABEL_22;
    }
  }
  else if (!v10)
  {
    goto LABEL_6;
  }
  if (!a3[1])
  {
LABEL_22:
    *(_DWORD *)(v7 + 1768) = 0;
    *(_DWORD *)(v7 + 1744) = 0;
    sub_ABF0((uint64_t)a1);
    return;
  }
LABEL_6:
  *(_DWORD *)(v7 + 36) = 0;
  *(_DWORD *)(v7 + 2336) = 0;
  if (*(_DWORD *)(v7 + 56) && *(void *)(v7 + 120))
  {
    uint64_t v11 = (const void *)sub_1ED14((uint64_t)a1);
    uint64_t v12 = (const void *)sub_1ED00((uint64_t)a1);
    if (v12)
    {
      uint64_t v13 = v12;
      if (sub_543B8(*(const void **)(v7 + 120), v12)
        || sub_543B8(*(const void **)(v7 + 128), v11))
      {
        if (*(_DWORD *)(v7 + 112))
        {
          uint64_t v14 = sub_58CAC(v8);
          BOOL v16 = *(_DWORD *)(v7 + 104) != *(_DWORD *)v14
             || *(unsigned __int16 *)(v7 + 108) != *(unsigned __int16 *)(v14 + 4);
          sub_4220();
          _SC_syslog_os_log_mapping();
          int v17 = __SC_log_enabled();
          if (v16)
          {
            if (v17)
            {
              uint64_t v18 = _os_log_pack_size();
              __chkstk_darwin(v18);
              __error();
              uint64_t v19 = _os_log_pack_fill();
              uint64_t v20 = nullsub_1(v8);
              *(_DWORD *)uint64_t v19 = 136315394;
              *(void *)(v19 + 4) = v20;
              *(_WORD *)(v19 + 12) = 2112;
              *(void *)(v19 + 14) = v13;
              __SC_log_send();
            }
            sub_1343C(v7);
            *(_DWORD *)(v7 + 1768) = 0;
          }
          else if (v17)
          {
            uint64_t v24 = _os_log_pack_size();
            __chkstk_darwin(v24);
            __error();
            uint64_t v25 = _os_log_pack_fill();
            uint64_t v26 = nullsub_1(v8);
            *(_DWORD *)uint64_t v25 = 136315394;
            *(void *)(v25 + 4) = v26;
            *(_WORD *)(v25 + 12) = 2112;
            *(void *)(v25 + 14) = v13;
            __SC_log_send();
          }
          *(_DWORD *)(v7 + 112) = 0;
        }
      }
      else
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v27 = _os_log_pack_size();
          v36[1] = v36;
          __chkstk_darwin(v27);
          __error();
          uint64_t v28 = _os_log_pack_fill();
          uint64_t v29 = nullsub_1(v8);
          uint64_t v30 = *(void *)(v7 + 120);
          *(_DWORD *)uint64_t v28 = 136315650;
          *(void *)(v28 + 4) = v29;
          *(_WORD *)(v28 + 12) = 2112;
          *(void *)(v28 + 14) = v13;
          *(_WORD *)(v28 + 22) = 2112;
          *(void *)(v28 + 24) = v30;
          __SC_log_send();
        }
        LeaseForWiFint i = DHCPLeaseListFindLeaseForWiFi(v7 + 136, v13, v11);
        if (LeaseForWiFi == -1)
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v33 = _os_log_pack_size();
            __chkstk_darwin(v33);
            __error();
            uint64_t v34 = _os_log_pack_fill();
            uint64_t v35 = nullsub_1(v8);
            *(_DWORD *)uint64_t v34 = 136315394;
            *(void *)(v34 + 4) = v35;
            *(_WORD *)(v34 + 12) = 2112;
            *(void *)(v34 + 14) = v13;
            __SC_log_send();
          }
          sub_1343C(v7);
        }
        else
        {
          uint64_t v32 = sub_5B4C(v7 + 136, LeaseForWiFi);
          sub_185D0((uint64_t)a1, v32, 0);
        }
        *(_DWORD *)(v7 + 1768) = 0;
      }
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v21 = _os_log_pack_size();
        __chkstk_darwin(v21);
        __error();
        uint64_t v22 = _os_log_pack_fill();
        uint64_t v23 = nullsub_1(v8);
        *(_DWORD *)uint64_t v22 = 136315394;
        *(void *)(v22 + 4) = v23;
        *(_WORD *)(v22 + 12) = 2080;
        *(void *)(v22 + 14) = "dhcp_check_link_with_status";
        __SC_log_send();
      }
    }
  }
  if (sub_14B74((uint64_t)a1, current_time))
  {
    if (a2 == 8 || *(_DWORD *)(v7 + 1744) != 6 || *(_DWORD *)(v7 + 1768) != 1)
    {
      int v37 = *(_DWORD *)(v7 + 1732);
      sub_14BF0(a1, 0, (uint64_t)&v37);
    }
  }
  else if (a2 == 8 || *(_DWORD *)(v7 + 1744) != 3 || *(_DWORD *)(v7 + 1768) != 1)
  {
    sub_4A0C(a1, 0, 0);
  }
}

void sub_149A0(uint64_t a1)
{
  uint64_t v2 = sub_557C(a1);
  sub_ABF0(a1);
  sub_BEF0(a1, 12);
  sub_1DB14(a1);
  sub_1D3B8(a1);
  sub_9028(a1, 0xCu);
  sub_18C3C(a1, 0);
  *(_DWORD *)uint64_t v2 = 0;
  sub_BEF8(a1, 0);
  *(void *)(v2 + 1776) = 0;
}

void sub_14A18(uint64_t a1, const void *a2, int a3, int a4)
{
  uint64_t v8 = sub_557C(a1);
  uint64_t v9 = sub_8B80(a1);
  if (sub_1B388(a1))
  {
    int v10 = sub_1B3A4(a1);
    if (sub_1E560(a1))
    {
      uint64_t v11 = (const void *)sub_1BA08(a1);
      unsigned int v12 = sub_58034(v9);
      goto LABEL_6;
    }
  }
  else
  {
    int v10 = 0;
  }
  uint64_t v11 = 0;
  unsigned int v12 = 0;
LABEL_6:
  uint64_t v19 = 0;
  char v18 = 0;
  int v17 = 0;
  sub_1855C(v8, v9, (uint64_t *)&v19, &v18, &v17);
  DHCPLeaseListUpdateLease((uint64_t *)(v8 + 136), *(_DWORD *)(v8 + 1732), v10, v11, v12, *(_DWORD *)(v8 + 72), a2, a3, *(double *)(v8 + 80), *(const void **)(v8 + 120), *(const void **)(v8 + 128));
  if (a4)
  {
    uint64_t v13 = (const char *)nullsub_1(v9);
    char v14 = v18;
    uint64_t v15 = v19;
    int v16 = v17;
    DHCPLeaseListWrite((uint64_t *)(v8 + 136), v13, v14, v15, v16);
  }
}

uint64_t sub_14B74(uint64_t a1, double a2)
{
  uint64_t v4 = sub_557C(a1);
  uint64_t result = *(unsigned int *)(v4 + 56);
  if (result && *(_DWORD *)(v4 + 72) != -1 && *(double *)(v4 + 64) <= a2)
  {
    sub_1343C(v4);
    sub_1BAC0(a1);
    sub_1DB14(a1);
    sub_9028(a1, 0x14u);
    return *(unsigned int *)(v4 + 56);
  }
  return result;
}

void sub_14BF0(_DWORD *a1, int a2, uint64_t a3)
{
  double current_time = timer_get_current_time();
  double v77 = current_time;
  uint64_t v7 = sub_557C((uint64_t)a1);
  uint64_t v8 = sub_8B80((uint64_t)a1);
  unsigned int v76 = 0;
  if (sub_1E5B8((uint64_t)a1)) {
    sub_1BBC4(&v76, 0);
  }
  if (a2 == 5)
  {
    LODWORD(v78[0]) = 0;
    *(_DWORD *)int v79 = 0;
    unsigned int v75 = 0;
    uint64_t v74 = 0;
    unsigned int v73 = 0;
    if (!sub_17E24((uint64_t *)a3, *(_DWORD *)(v7 + 2332), v8, &v75, (_DWORD *)&v74 + 1)) {
      return;
    }
    int v19 = sub_1E5B8((uint64_t)a1);
    unsigned int v20 = v75;
    if (!v19 && v75 == 6)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v21 = _os_log_pack_size();
        __chkstk_darwin(v21);
        __error();
        uint64_t v22 = _os_log_pack_fill();
        uint64_t v23 = nullsub_1(v8);
        *(_DWORD *)uint64_t v22 = 136315138;
        *(void *)(v22 + 4) = v23;
        __SC_log_send();
      }
      if (!sub_CE70(*(void *)(v7 + 8)))
      {
        sub_9028((uint64_t)a1, 0xBu);
        sub_1A35C((uint64_t)a1, 1);
        return;
      }
      *(_DWORD *)(v7 + 48) = 1;
      unsigned int v20 = v75;
    }
    int v24 = HIDWORD(v74);
    if (HIDWORD(v74) && v20 == 5)
    {
      if (dword_70138
        && sub_1CEF4((uint64_t)a1)
        && !*(_DWORD *)(v7 + 44)
        && sub_1A034(a3 + 16, v78))
      {
        sub_1A098(a1, 0, v78);
        return;
      }
      if (*(_DWORD *)(*(void *)a3 + 16) == *(_DWORD *)(v7 + 1732))
      {
        dhcp_get_lease_from_options(a3 + 16, (unsigned int *)v79, (unsigned int *)&v74, &v73);
        unsigned int v25 = sub_54F8C(a3 + 16, (unsigned __int8 *)off_70010, dword_70018);
        unsigned int v26 = v25;
        if (!*(_DWORD *)(v7 + 1724) || v25 > *(_DWORD *)(v7 + 1728))
        {
          sub_1BAC0((uint64_t)a1);
          sub_54A34(v7 + 208);
          memmove((void *)(v7 + 224), *(const void **)a3, *(int *)(a3 + 8));
          unsigned int v27 = *(_DWORD *)(a3 + 8);
          *(_DWORD *)(v7 + 1724) = v27;
          *(_DWORD *)(v7 + 1728) = v26;
          sub_54D30((char **)(v7 + 208), v7 + 224, v27, 0);
          *(_DWORD *)(v7 + 1732) = *(_DWORD *)(*(void *)a3 + 16);
          *(_DWORD *)(v7 + 1736) = v24;
          sub_18A6C((uint64_t)a1, (uint64_t)"INIT-REBOOT", *(unsigned int *)v79, v74, v73, current_time);
          if (sub_1A31C(v8) || v26 == dword_70018 && sub_5558((uint64_t)a1))
          {
LABEL_55:
            sub_19810(a1, 0, 0);
            return;
          }
          if (!*(_DWORD *)(v7 + 44))
          {
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v28 = _os_log_pack_size();
              __chkstk_darwin(v28);
              __error();
              uint64_t v29 = _os_log_pack_fill();
              uint64_t v30 = nullsub_1(v8);
              int v31 = *(unsigned __int8 *)(v7 + 1732);
              int v32 = *(unsigned __int8 *)(v7 + 1733);
              int v33 = *(unsigned __int8 *)(v7 + 1734);
              int v34 = *(unsigned __int8 *)(v7 + 1735);
              double v35 = current_time - *(double *)(v7 + 1752);
              *(_DWORD *)uint64_t v29 = 136316418;
              *(void *)(v29 + 4) = v30;
              *(_WORD *)(v29 + 12) = 1024;
              *(_DWORD *)(v29 + 14) = v31;
              *(_WORD *)(v29 + 18) = 1024;
              *(_DWORD *)(v29 + 20) = v32;
              *(_WORD *)(v29 + 24) = 1024;
              *(_DWORD *)(v29 + 26) = v33;
              *(_WORD *)(v29 + 30) = 1024;
              *(_DWORD *)(v29 + 32) = v34;
              *(_WORD *)(v29 + 36) = 2048;
              *(double *)(v29 + 38) = v35;
              __SC_log_send();
            }
            *(_DWORD *)(v7 + 44) = 1;
            timer_callout_set(*(void *)(v7 + 1760), sub_14BF0, a1, 2, 0, (double)G_gather_secs);
          }
        }
      }
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (a2) {
        return;
      }
      unsigned int v75 = 10974720;
      memset(v78, 0, 304);
      uint64_t v9 = &v76;
      if (!v76) {
        uint64_t v9 = (unsigned int *)a3;
      }
      HIDWORD(v74) = *v9;
      sub_18C3C((uint64_t)a1, 6u);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v10 = _os_log_pack_size();
        __chkstk_darwin(v10);
        __error();
        uint64_t v11 = _os_log_pack_fill();
        uint64_t v12 = nullsub_1(v8);
        uint64_t v13 = inet_ntop(2, (char *)&v74 + 4, v79, 0x10u);
        *(_DWORD *)uint64_t v11 = 136315394;
        *(void *)(v11 + 4) = v12;
        *(_WORD *)(v11 + 12) = 2080;
        *(void *)(v11 + 14) = v13;
        __SC_log_send();
      }
      *(_DWORD *)(v7 + 200) = 0;
      *(_DWORD *)uint64_t v7 = 1;
      *(double *)(v7 + 1752) = current_time;
      if (*(double *)(v7 + 1776) == 0.0) {
        *(double *)(v7 + 1776) = current_time;
      }
      *(_DWORD *)(v7 + 1768) = 0;
      *(_DWORD *)(v7 + 2340) = G_initial_wait_secs;
      sub_ABF0((uint64_t)a1);
      unsigned int v14 = *(_DWORD *)(v7 + 168) != 0;
      if (sub_1CEF4((uint64_t)a1)) {
        v14 |= 2u;
      }
      uint64_t v15 = (const void *)sub_58CAC(v8);
      unsigned __int8 v16 = sub_934C(v8);
      unsigned __int8 v17 = sub_58034(v8);
      char v18 = sub_17440((char *)(v7 + 1784), 3, v15, v16, v17, *(const void **)(v7 + 24), *(_DWORD *)(v7 + 32), v14, v78);
      *(void *)(v7 + 176) = v18;
      if (!v18) {
        goto LABEL_44;
      }
      if (sub_55080((uint64_t)v78, 50, 4, (char *)&v74 + 4))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled()) {
          goto LABEL_42;
        }
        goto LABEL_44;
      }
      if (sub_55080((uint64_t)v78, 51, 4, &v75))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
LABEL_42:
          uint64_t v36 = _os_log_pack_size();
          __chkstk_darwin(v36);
          __error();
          uint64_t v37 = _os_log_pack_fill();
          uint64_t v38 = nullsub_1(v8);
          uint64_t v39 = sub_552A0(v78);
          *(_DWORD *)uint64_t v37 = 136315394;
          *(void *)(v37 + 4) = v38;
          *(_WORD *)(v37 + 12) = 2080;
          *(void *)(v37 + 14) = v39;
LABEL_43:
          __SC_log_send();
        }
LABEL_44:
        sub_13A98((uint64_t)a1, 5u);
        return;
      }
      sub_17914((uint64_t)a1, v78);
      if (sub_55080((uint64_t)v78, 255, 0, 0))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_44;
        }
        uint64_t v40 = _os_log_pack_size();
        __chkstk_darwin(v40);
        __error();
        uint64_t v41 = _os_log_pack_fill();
        uint64_t v42 = nullsub_1(v8);
        *(_DWORD *)uint64_t v41 = 136315138;
        *(void *)(v41 + 4) = v42;
        goto LABEL_43;
      }
      unsigned int v43 = sub_55248((uint64_t)v78) + 240;
      if (v43 <= 0x12C) {
        unsigned int v43 = 300;
      }
      *(_DWORD *)(v7 + 184) = v43;
      *(_DWORD *)(v7 + 44) = 0;
      *(_DWORD *)(v7 + 48) = 0;
      ++*(_DWORD *)(v7 + 2332);
      *(_DWORD *)(v7 + 1732) = HIDWORD(v74);
      *(_DWORD *)(v7 + 1728) = 0;
      sub_1D384((uint64_t)a1);
      bootp_client_enable_receive(*(void **)(v7 + 16), (uint64_t)sub_14BF0, (uint64_t)a1, 5);
      sub_BEF8((uint64_t)a1, 1);
    }
    if (*(_DWORD *)(v7 + 44) == 1) {
      goto LABEL_55;
    }
    int v44 = *(_DWORD *)(v7 + 1768);
    *(_DWORD *)(v7 + 1768) = v44 + 1;
    if (v44 < 1 || (unint64_t v45 = sub_9030((uint64_t)a1), HIDWORD(v45)) || !v45)
    {
      sub_AC48((uint64_t)a1, 0, (uint64_t)&v77);
      BOOL v46 = sub_5558((uint64_t)a1);
      int v47 = *(_DWORD *)(v7 + 1768);
      if (!v46 && v47 > dword_7002C && dword_70024)
      {
        sub_BEF0((uint64_t)a1, 9);
        sub_5584((uint64_t)a1, 1);
        int v47 = *(_DWORD *)(v7 + 1768);
      }
      if (v47 <= dword_70038 + 1)
      {
        uint64_t v55 = *(void *)(v7 + 176);
        *(_DWORD *)(v55 + 4) = bswap32(*(_DWORD *)(v7 + 2332));
        *(_WORD *)(v55 + 8) = __rev16((int)(v77 - *(double *)(v7 + 1752)));
        if ((bootp_client_transmit(*(void **)(v7 + 16), 0xFFFFFFFF, v76, (unsigned __int16)word_70044, (unsigned __int16)word_70020, (void *)v55, *(unsigned int *)(v7 + 184)) & 0x80000000) != 0)
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v56 = _os_log_pack_size();
            __chkstk_darwin(v56);
            __error();
            uint64_t v57 = _os_log_pack_fill();
            uint64_t v58 = nullsub_1(v8);
            *(_DWORD *)uint64_t v57 = 136315138;
            *(void *)(v57 + 4) = v58;
            __SC_log_send();
          }
        }
        uint64_t v59 = *(int *)(v7 + 2340);
        unsigned int v60 = sub_9054(0, 999999);
        int v61 = v60;
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v62 = _os_log_pack_size();
          uint64_t v72 = v60;
          uint64_t v71 = (uint64_t)&v71;
          __chkstk_darwin(v62);
          __error();
          uint64_t v63 = _os_log_pack_fill();
          uint64_t v64 = nullsub_1(v8);
          int v65 = *(unsigned __int8 *)(v7 + 1732);
          int v66 = *(unsigned __int8 *)(v7 + 1733);
          int v67 = *(unsigned __int8 *)(v7 + 1734);
          int v68 = *(unsigned __int8 *)(v7 + 1735);
          double v69 = v77 - *(double *)(v7 + 1752);
          *(_DWORD *)uint64_t v63 = 136316930;
          *(void *)(v63 + 4) = v64;
          *(_WORD *)(v63 + 12) = 1024;
          *(_DWORD *)(v63 + 14) = v65;
          *(_WORD *)(v63 + 18) = 1024;
          *(_DWORD *)(v63 + 20) = v66;
          *(_WORD *)(v63 + 24) = 1024;
          *(_DWORD *)(v63 + 26) = v67;
          *(_WORD *)(v63 + 30) = 1024;
          *(_DWORD *)(v63 + 32) = v68;
          *(_WORD *)(v63 + 36) = 2048;
          *(double *)(v63 + 38) = v69;
          *(_WORD *)(v63 + 46) = 2048;
          *(void *)(v63 + 48) = v59;
          *(_WORD *)(v63 + 56) = 1024;
          *(_DWORD *)(v63 + 58) = v60;
          int v61 = v72;
          __SC_log_send();
        }
        timer_set_relative(*(void *)(v7 + 1760), v59, v61, (uint64_t)sub_14BF0, (uint64_t)a1, 2, 0);
        int v70 = 2 * *(_DWORD *)(v7 + 2340);
        if (v70 >= G_max_wait_secs) {
          int v70 = G_max_wait_secs;
        }
        *(_DWORD *)(v7 + 2340) = v70;
      }
      else
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v48 = _os_log_pack_size();
          __chkstk_darwin(v48);
          __error();
          uint64_t v49 = _os_log_pack_fill();
          uint64_t v50 = nullsub_1(v8);
          int v51 = *(unsigned __int8 *)(v7 + 1732);
          int v52 = *(unsigned __int8 *)(v7 + 1733);
          int v53 = *(unsigned __int8 *)(v7 + 1734);
          int v54 = *(unsigned __int8 *)(v7 + 1735);
          *(_DWORD *)uint64_t v49 = 136316162;
          *(void *)(v49 + 4) = v50;
          *(_WORD *)(v49 + 12) = 1024;
          *(_DWORD *)(v49 + 14) = v51;
          *(_WORD *)(v49 + 18) = 1024;
          *(_DWORD *)(v49 + 20) = v52;
          *(_WORD *)(v49 + 24) = 1024;
          *(_DWORD *)(v49 + 26) = v53;
          *(_WORD *)(v49 + 30) = 1024;
          *(_DWORD *)(v49 + 32) = v54;
          __SC_log_send();
        }
        sub_1DB14((uint64_t)a1);
        sub_8E14((uint64_t)a1, 0xAu, 0);
        --*(_DWORD *)(v7 + 1768);
        sub_4A0C(a1, 0, 0);
      }
    }
    else
    {
      sub_149A0((uint64_t)a1);
    }
  }
}

void sub_159E4(_DWORD *a1, int a2, _DWORD *a3)
{
  uint64_t v6 = sub_557C((uint64_t)a1);
  uint64_t v7 = sub_8B80((uint64_t)a1);
  if (a2 != 6)
  {
    if (!a2)
    {
      sub_BEF8((uint64_t)a1, 1);
      *a3 = *(_DWORD *)(v6 + 1732);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v8 = _os_log_pack_size();
        __chkstk_darwin(v8);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        uint64_t v10 = nullsub_1(v7);
        int v11 = *((unsigned __int8 *)a3 + 4);
        int v12 = *((unsigned __int8 *)a3 + 5);
        int v13 = *((unsigned __int8 *)a3 + 6);
        int v14 = *((unsigned __int8 *)a3 + 7);
        int v15 = *(unsigned __int8 *)a3;
        int v16 = *((unsigned __int8 *)a3 + 1);
        int v17 = *((unsigned __int8 *)a3 + 2);
        int v18 = *((unsigned __int8 *)a3 + 3);
        *(_DWORD *)uint64_t v9 = 136317186;
        *(void *)(v9 + 4) = v10;
        *(_WORD *)(v9 + 12) = 1024;
        *(_DWORD *)(v9 + 14) = v11;
        *(_WORD *)(v9 + 18) = 1024;
        *(_DWORD *)(v9 + 20) = v12;
        *(_WORD *)(v9 + 24) = 1024;
        *(_DWORD *)(v9 + 26) = v13;
        *(_WORD *)(v9 + 30) = 1024;
        *(_DWORD *)(v9 + 32) = v14;
        *(_WORD *)(v9 + 36) = 1024;
        *(_DWORD *)(v9 + 38) = v15;
        *(_WORD *)(v9 + 42) = 1024;
        *(_DWORD *)(v9 + 44) = v16;
        *(_WORD *)(v9 + 48) = 1024;
        *(_DWORD *)(v9 + 50) = v17;
        *(_WORD *)(v9 + 54) = 1024;
        *(_DWORD *)(v9 + 56) = v18;
        __SC_log_send();
      }
      sub_E52C(*(void *)(v6 + 8), (uint64_t)sub_159E4, (uint64_t)a1, 6, a3, 1);
    }
    return;
  }
  sub_BEF8((uint64_t)a1, 0);
  if (a3[2])
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled())
    {
LABEL_10:
      uint64_t v32 = sub_9030((uint64_t)a1);
      int v33 = v23;
      sub_14358(a1, 6, (int *)&v32);
      return;
    }
    uint64_t v19 = _os_log_pack_size();
    __chkstk_darwin(v19);
    __error();
    uint64_t v20 = _os_log_pack_fill();
    uint64_t v21 = nullsub_1(v7);
    uint64_t v22 = sub_E73C(*(void *)(v6 + 8));
    *(_DWORD *)uint64_t v20 = 136315394;
    *(void *)(v20 + 4) = v21;
    *(_WORD *)(v20 + 12) = 2080;
    *(void *)(v20 + 14) = v22;
LABEL_9:
    __SC_log_send();
    goto LABEL_10;
  }
  if (!a3[3])
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_10;
    }
    uint64_t v29 = _os_log_pack_size();
    __chkstk_darwin(v29);
    __error();
    uint64_t v30 = _os_log_pack_fill();
    uint64_t v31 = nullsub_1(v7);
    *(_DWORD *)uint64_t v30 = 136315138;
    *(void *)(v30 + 4) = v31;
    goto LABEL_9;
  }
  double current_time = timer_get_current_time();
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v25 = _os_log_pack_size();
    __chkstk_darwin(v25);
    __error();
    uint64_t v26 = _os_log_pack_fill();
    uint64_t v27 = nullsub_1(v7);
    *(_DWORD *)uint64_t v26 = 136315138;
    *(void *)(v26 + 4) = v27;
    __SC_log_send();
  }
  if (*(_DWORD *)(v6 + 72) != -1)
  {
    double v28 = *(double *)(v6 + 192);
    if (current_time >= v28) {
      sub_15EC4((uint64_t)a1, 0, 0);
    }
    else {
      timer_set_relative(*(void *)(v6 + 1760), (uint64_t)(v28 - current_time), 0, (uint64_t)sub_15EC4, (uint64_t)a1, 0, 0);
    }
  }
}

void sub_15EC4(uint64_t a1, int a2, uint64_t a3)
{
  double current_time = timer_get_current_time();
  uint64_t v7 = sub_557C(a1);
  uint64_t v8 = sub_8B80(a1);
  if (a2 == 5)
  {
    LODWORD(v50[0]) = 7776000;
    v49[0] = 0;
    uint64_t v48 = 0;
    unsigned int v47 = 0;
    if (!sub_17E24((uint64_t *)a3, *(_DWORD *)(v7 + 2332), v8, v49, (_DWORD *)&v48 + 1)) {
      return;
    }
    if (v49[0] == 6)
    {
      unsigned int v22 = 11;
    }
    else
    {
      if (v49[0] != 5) {
        return;
      }
      int v24 = HIDWORD(v48);
      if (!HIDWORD(v48) || (*(_DWORD *)(*(void *)a3 + 16) + 1) < 2) {
        return;
      }
      dhcp_get_lease_from_options(a3 + 16, (unsigned int *)v50, (unsigned int *)&v48, &v47);
      if (*(_DWORD *)(*(void *)a3 + 16) == *(_DWORD *)(v7 + 1732))
      {
        sub_18A6C(a1, (uint64_t)"RENEW/REBIND", v50[0], v48, v47, current_time);
        sub_54A34(v7 + 208);
        memmove((void *)(v7 + 224), *(const void **)a3, *(int *)(a3 + 8));
        unsigned int v25 = *(_DWORD *)(a3 + 8);
        *(void *)(v7 + 1724) = v25;
        sub_54D30((char **)(v7 + 208), v7 + 224, v25, 0);
        *(_DWORD *)(v7 + 1736) = v24;
        sub_19810(a1, 0, 0);
        return;
      }
      unsigned int v22 = 13;
    }
    uint64_t v23 = a1;
LABEL_34:
    sub_9028(v23, v22);
    sub_1A35C(a1, 0);
    return;
  }
  if (a2 != 2)
  {
    if (a2) {
      return;
    }
    HIDWORD(v48) = 0;
    memset(v50, 0, sizeof(v50));
    sub_ABF0(a1);
    *(_DWORD *)uint64_t v7 = 0;
    *(double *)(v7 + 1752) = current_time;
    if (*(double *)(v7 + 1776) == 0.0) {
      *(double *)(v7 + 1776) = current_time;
    }
    sub_18C3C(a1, 7u);
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t v11 = nullsub_1(v8);
      int v12 = inet_ntop(2, (const void *)(v7 + 1732), (char *)v49, 0x10u);
      *(_DWORD *)uint64_t v10 = 136315394;
      *(void *)(v10 + 4) = v11;
      *(_WORD *)(v10 + 12) = 2080;
      *(void *)(v10 + 14) = v12;
      __SC_log_send();
    }
    unsigned int v13 = 2 * (sub_1CEF4(a1) != 0);
    int v14 = (const void *)sub_58CAC(v8);
    unsigned __int8 v15 = sub_934C(v8);
    unsigned __int8 v16 = sub_58034(v8);
    int v17 = sub_17440((char *)(v7 + 1784), 3, v14, v15, v16, *(const void **)(v7 + 24), *(_DWORD *)(v7 + 32), v13, (uint64_t *)v50);
    *(void *)(v7 + 176) = v17;
    if (!v17) {
      goto LABEL_25;
    }
    *(_DWORD *)(v7 + 1768) = 0;
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v7 + 1732);
    HIDWORD(v48) = 10974720;
    if (sub_55080((uint64_t)v50, 51, 4, (char *)&v48 + 4))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v18 = _os_log_pack_size();
        __chkstk_darwin(v18);
        __error();
        uint64_t v19 = _os_log_pack_fill();
        uint64_t v20 = nullsub_1(v8);
        uint64_t v21 = sub_552A0((uint64_t *)v50);
        *(_DWORD *)uint64_t v19 = 136315394;
        *(void *)(v19 + 4) = v20;
        *(_WORD *)(v19 + 12) = 2080;
        *(void *)(v19 + 14) = v21;
LABEL_24:
        __SC_log_send();
        goto LABEL_25;
      }
      goto LABEL_25;
    }
    sub_17914(a1, (uint64_t *)v50);
    if (sub_55080((uint64_t)v50, 255, 0, 0))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v26 = _os_log_pack_size();
        __chkstk_darwin(v26);
        __error();
        uint64_t v27 = _os_log_pack_fill();
        uint64_t v28 = nullsub_1(v8);
        *(_DWORD *)uint64_t v27 = 136315138;
        *(void *)(v27 + 4) = v28;
        goto LABEL_24;
      }
LABEL_25:
      sub_13A98(a1, 5u);
      return;
    }
    bootp_client_enable_receive(*(void **)(v7 + 16), (uint64_t)sub_15EC4, a1, 5);
  }
  if (!timer_still_pending(*(void *)(v7 + 1760)) && timer_time_changed(*(void *)(v7 + 1760))) {
    sub_1A7AC(a1, current_time - *(double *)(v7 + 192));
  }
  if (current_time >= *(double *)(v7 + 64))
  {
    uint64_t v23 = a1;
    unsigned int v22 = 10;
    goto LABEL_34;
  }
  uint64_t v29 = (double *)(v7 + 96);
  if (current_time >= *(double *)(v7 + 96))
  {
    sub_18C3C(a1, 8u);
    uint64_t v30 = (unsigned int *)&G_ip_broadcast;
    uint64_t v29 = (double *)(v7 + 64);
  }
  else
  {
    sub_18C3C(a1, 7u);
    uint64_t v30 = (unsigned int *)(v7 + 1736);
  }
  double v31 = (*v29 - current_time) * 0.5;
  unsigned int v32 = *v30;
  unsigned int v33 = *(_DWORD *)(v7 + 2332) + 1;
  *(_DWORD *)(v7 + 2332) = v33;
  uint64_t v34 = *(void *)(v7 + 176);
  *(_DWORD *)(v34 + 4) = bswap32(v33);
  double v35 = current_time + v31;
  *(_WORD *)(v34 + 8) = __rev16((int)(current_time - *(double *)(v7 + 1752)));
  if ((bootp_client_transmit(*(void **)(v7 + 16), v32, *(unsigned int *)(v7 + 1732), (unsigned __int16)word_70044, (unsigned __int16)word_70020, (void *)v34, *(unsigned int *)(v7 + 184)) & 0x80000000) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v36 = _os_log_pack_size();
      __chkstk_darwin(v36);
      __error();
      uint64_t v37 = _os_log_pack_fill();
      uint64_t v38 = nullsub_1(v8);
      *(_DWORD *)uint64_t v37 = 136315138;
      *(void *)(v37 + 4) = v38;
      __SC_log_send();
    }
  }
  double v39 = v35 - current_time;
  double v40 = current_time + 60.0;
  if (v35 - current_time >= 60.0) {
    double v40 = v35;
  }
  if (v35 - current_time <= 60.0) {
    double v39 = 60.0;
  }
  uint64_t v41 = (uint64_t)v39;
  *(double *)(v7 + 192) = v40;
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v42 = _os_log_pack_size();
    __chkstk_darwin(v42);
    __error();
    uint64_t v43 = _os_log_pack_fill();
    uint64_t v44 = nullsub_1(v8);
    double v45 = current_time - *(double *)(v7 + 1752);
    *(_DWORD *)uint64_t v43 = 136315906;
    *(void *)(v43 + 4) = v44;
    *(_WORD *)(v43 + 12) = 2048;
    *(double *)(v43 + 14) = v45;
    *(_WORD *)(v43 + 22) = 2048;
    *(void *)(v43 + 24) = v41;
    *(_WORD *)(v43 + 32) = 1024;
    *(_DWORD *)(v43 + 34) = 0;
    __SC_log_send();
  }
  timer_set_relative(*(void *)(v7 + 1760), v41, 0, (uint64_t)sub_15EC4, a1, 2, 0);
  double v46 = *(double *)(v7 + 2344);
  if (v46 == 0.0 || current_time > v46 || v46 - current_time < (double)dword_7007C) {
    sub_1BC74(a1);
  }
}

void sub_16750(_DWORD *a1, int a2)
{
  uint64_t v5 = sub_9030((uint64_t)a1);
  int v6 = v4;
  sub_14358(a1, a2, (int *)&v5);
}

double dhcp_get_lease_from_options(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v8 = sub_54BE8(a1, 51, 4);
  uint64_t v9 = sub_54BE8(a1, 58, 4);
  uint64_t v10 = sub_54BE8(a1, 59, 4);
  if (v8)
  {
    unsigned int v12 = bswap32(*(_DWORD *)v8);
    if (v12 <= 3) {
      unsigned int v12 = 3;
    }
    *a2 = v12;
  }
  if (v9)
  {
    unsigned int v13 = bswap32(*(_DWORD *)v9);
    if (v13 <= 2) {
      unsigned int v13 = 2;
    }
    *a3 = v13;
  }
  if (v10)
  {
    unsigned int v14 = bswap32(*(_DWORD *)v10);
    if (v14 <= 2) {
      unsigned int v14 = 2;
    }
    *a4 = v14;
  }
  if (!v8)
  {
    if (!v9)
    {
      if (v10)
      {
        unsigned int v15 = *a4;
        *a2 = *a4;
        if (v15 == -1) {
          goto LABEL_26;
        }
      }
      else
      {
        unsigned int v15 = 3600;
        *a2 = 3600;
      }
LABEL_28:
      *a3 = v15 >> 1;
      LODWORD(result) = *a2;
      double result = (double)*(unint64_t *)&result * 0.875;
      *a4 = result;
      return result;
    }
    unsigned int v15 = *a3;
    *a2 = *a3;
    if (v15 != -1) {
      goto LABEL_19;
    }
LABEL_26:
    *a4 = 0;
    *a3 = 0;
    return result;
  }
  unsigned int v15 = *a2;
  if (*a2 == -1) {
    goto LABEL_26;
  }
  if (!v9) {
    goto LABEL_28;
  }
LABEL_19:
  if (!v10 || *a3 >= v15 || *a4 >= v15 || *a4 < *a3) {
    goto LABEL_28;
  }
  return result;
}

_DWORD *sub_168F8(uint64_t a1, int *a2)
{
  int v7 = 0;
  uint64_t v3 = (unsigned __int8 *)sub_54C30(a1, 121, &v7);
  if (!v3) {
    return 0;
  }
  int v4 = v3;
  uint64_t v5 = sub_577CC(v3, v7, a2);
  free(v4);
  return v5;
}

unsigned __int8 *sub_1695C(uint64_t a1, int a2, _DWORD *a3)
{
  int v5 = sub_169D4(a1, a2);
  if (v5 == -1)
  {
    uint64_t v6 = a1;
    int v7 = 54;
  }
  else
  {
    if (v5) {
      goto LABEL_7;
    }
    uint64_t v6 = a1;
    int v7 = 6;
  }
  double result = sub_54BE8(v6, v7, 4);
  if (!result) {
    return result;
  }
  int v5 = *(_DWORD *)result;
LABEL_7:
  if ((v5 + 1) < 2) {
    return 0;
  }
  *a3 = v5;
  return (unsigned char *)(&def_58C8 + 1);
}

uint64_t sub_169D4(uint64_t a1, int a2)
{
  int v4 = sub_54BE8(a1, 3, 4);
  if (v4)
  {
    if (*(_DWORD *)v4 == a2) {
      return 0;
    }
    else {
      return *(unsigned int *)v4;
    }
  }
  else
  {
    int v10 = 0;
    uint64_t v6 = sub_168F8(a1, &v10);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = sub_57BA8(v6, v10);
      if (v8) {
        uint64_t v5 = v8[2];
      }
      else {
        uint64_t v5 = 0xFFFFFFFFLL;
      }
      free(v7);
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

uint64_t sub_16A64(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = sub_8B80(a1);
  *(_DWORD *)(sub_557C(a1) + 1584) = a2;
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v6 = _os_log_pack_size();
    __chkstk_darwin(v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    uint64_t v8 = nullsub_1(v4);
    if (a2 > 4) {
      uint64_t v9 = "<unknown>";
    }
    else {
      uint64_t v9 = off_68CE0[a2];
    }
    *(_DWORD *)uint64_t v7 = 136315394;
    *(void *)(v7 + 4) = v8;
    *(_WORD *)(v7 + 12) = 2080;
    *(void *)(v7 + 14) = v9;
    return __SC_log_send();
  }
  return result;
}

uint64_t sub_16BCC(uint64_t a1, unsigned int a2)
{
  sub_13314(a1);
  sub_9028(a1, a2);

  return sub_16A64(a1, 0);
}

void sub_16C18(_DWORD *a1, int a2, uint64_t a3)
{
  double current_time = timer_get_current_time();
  uint64_t v7 = sub_8B80((uint64_t)a1);
  uint64_t v8 = sub_557C((uint64_t)a1);
  uint64_t v9 = v8;
  if (a2 == 5)
  {
    int v49 = 0;
    LODWORD(v50[0]) = 0;
    if (sub_17E24((uint64_t *)a3, *(_DWORD *)(v8 + 2152), v7, (unsigned int *)v50, &v49)) {
      BOOL v14 = LODWORD(v50[0]) == 5;
    }
    else {
      BOOL v14 = 0;
    }
    if (v14)
    {
      unsigned int v15 = sub_54F8C(a3 + 16, (unsigned __int8 *)off_70010, dword_70018);
      unsigned int v16 = v15;
      if (!*(_DWORD *)(v9 + 1556) || v15 > *(_DWORD *)(v9 + 1560))
      {
        sub_54A34(v9 + 40);
        memmove((void *)(v9 + 56), *(const void **)a3, *(int *)(a3 + 8));
        unsigned int v17 = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(v9 + 1556) = v17;
        *(_DWORD *)(v9 + 1560) = v16;
        sub_54D30((char **)(v9 + 40), v9 + 56, v17, 0);
        *(_DWORD *)(v9 + 1568) = v49;
        if (v16 == dword_70018)
        {
LABEL_27:
          sub_17D20(a1);
          return;
        }
        if (*(_DWORD *)(v9 + 16)) {
          return;
        }
        uint64_t v18 = G_gather_secs;
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v19 = _os_log_pack_size();
          __chkstk_darwin(v19);
          __error();
          uint64_t v20 = _os_log_pack_fill();
          uint64_t v21 = nullsub_1(v7);
          double v22 = current_time - *(double *)(v9 + 1576);
          *(_DWORD *)uint64_t v20 = 136315394;
          *(void *)(v20 + 4) = v21;
          *(_WORD *)(v20 + 12) = 2048;
          *(double *)(v20 + 14) = v22;
          __SC_log_send();
        }
        *(_DWORD *)(v9 + 16) = 1;
        uint64_t v23 = *(void *)(v9 + 1592);
        uint64_t v24 = v18;
        uint64_t v25 = (uint64_t)a1;
        uint64_t v26 = 2;
        goto LABEL_35;
      }
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (a2) {
        return;
      }
      memset(v50, 0, sizeof(v50));
      sub_16A64((uint64_t)a1, 2u);
      *(double *)(v9 + 1576) = current_time;
      sub_13314((uint64_t)a1);
      int v10 = (const void *)sub_58CAC(v7);
      unsigned __int8 v11 = sub_934C(v7);
      unsigned __int8 v12 = sub_58034(v7);
      unsigned int v13 = sub_17440((char *)(v9 + 1604), 8, v10, v11, v12, 0, 0, 0, (uint64_t *)v50);
      *(void *)(v9 + 24) = v13;
      if (!v13)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
LABEL_21:
          uint64_t v27 = _os_log_pack_size();
          __chkstk_darwin(v27);
          __error();
          uint64_t v28 = _os_log_pack_fill();
          uint64_t v29 = nullsub_1(v7);
          *(_DWORD *)uint64_t v28 = 136315138;
          *(void *)(v28 + 4) = v29;
          __SC_log_send();
        }
LABEL_22:
        sub_16BCC((uint64_t)a1, 5u);
        return;
      }
      *((_DWORD *)v13 + 3) = sub_1E4F8((uint64_t)a1);
      sub_17914((uint64_t)a1, (uint64_t *)v50);
      if (sub_55080((uint64_t)v50, 255, 0, 0))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled()) {
          goto LABEL_21;
        }
        goto LABEL_22;
      }
      unsigned int v30 = sub_55248((uint64_t)v50) + 240;
      if (v30 <= 0x12C) {
        unsigned int v30 = 300;
      }
      *(_DWORD *)(v9 + 32) = v30;
      *(_DWORD *)(v9 + 1600) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 2160) = G_initial_wait_secs;
      bootp_client_enable_receive(*(void **)(v9 + 8), (uint64_t)sub_16C18, (uint64_t)a1, 5);
      *(_DWORD *)(v9 + 1560) = 0;
      ++*(_DWORD *)(v9 + 2152);
    }
    if (*(_DWORD *)(v9 + 16) == 1) {
      goto LABEL_27;
    }
    int v31 = *(_DWORD *)(v9 + 1600);
    int v32 = v31 + 1;
    *(_DWORD *)(v9 + 1600) = v31 + 1;
    if (v31 >= 1)
    {
      unint64_t v33 = sub_9030((uint64_t)a1);
      if (!HIDWORD(v33) && v33)
      {
        sub_1337C((uint64_t)a1);
        return;
      }
      int v32 = *(_DWORD *)(v9 + 1600);
    }
    if (v32 > G_max_retries + 1)
    {
      uint64_t v34 = sub_557C((uint64_t)a1);
      sub_13314((uint64_t)a1);
      sub_16A64((uint64_t)a1, 4u);
      uint64_t v23 = *(void *)(v34 + 1592);
      uint64_t v24 = 60;
      uint64_t v25 = (uint64_t)a1;
      uint64_t v26 = 0;
LABEL_35:
      timer_set_relative(v23, v24, 0, (uint64_t)sub_16C18, v25, v26, 0);
      return;
    }
    uint64_t v35 = *(void *)(v9 + 24);
    *(_DWORD *)(v35 + 4) = bswap32(*(_DWORD *)(v9 + 2152));
    *(_WORD *)(v35 + 8) = __rev16((int)(current_time - *(double *)(v9 + 1576)));
    if ((bootp_client_transmit(*(void **)(v9 + 8), 0xFFFFFFFF, 0, (unsigned __int16)word_70044, (unsigned __int16)word_70020, (void *)v35, *(unsigned int *)(v9 + 32)) & 0x80000000) != 0)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v36 = _os_log_pack_size();
        __chkstk_darwin(v36);
        __error();
        uint64_t v37 = _os_log_pack_fill();
        uint64_t v38 = nullsub_1(v7);
        *(_DWORD *)uint64_t v37 = 136315138;
        *(void *)(v37 + 4) = v38;
        __SC_log_send();
      }
    }
    uint64_t v39 = *(int *)(v9 + 2160);
    unsigned int v40 = sub_9054(0, 999999);
    int v41 = v40;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v42 = _os_log_pack_size();
      v47[1] = v47;
      __chkstk_darwin(v42);
      uint64_t v48 = v40;
      __error();
      uint64_t v43 = _os_log_pack_fill();
      uint64_t v44 = nullsub_1(v7);
      double v45 = current_time - *(double *)(v9 + 1576);
      *(_DWORD *)uint64_t v43 = 136315906;
      *(void *)(v43 + 4) = v44;
      *(_WORD *)(v43 + 12) = 2048;
      *(double *)(v43 + 14) = v45;
      *(_WORD *)(v43 + 22) = 2048;
      *(void *)(v43 + 24) = v39;
      *(_WORD *)(v43 + 32) = 1024;
      *(_DWORD *)(v43 + 34) = v40;
      int v41 = v48;
      __SC_log_send();
    }
    timer_set_relative(*(void *)(v9 + 1592), v39, v41, (uint64_t)sub_16C18, (uint64_t)a1, 2, 0);
    int v46 = 2 * *(_DWORD *)(v9 + 2160);
    if (v46 >= G_max_wait_secs) {
      int v46 = G_max_wait_secs;
    }
    *(_DWORD *)(v9 + 2160) = v46;
  }
}

char *sub_17440(char *a1, int a2, const void *a3, int a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int a8, uint64_t *a9)
{
  BOOL v14 = a1;
  if (a6) {
    BOOL v15 = a7 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15) {
    char v16 = a4;
  }
  else {
    char v16 = 0;
  }
  if (v15) {
    unsigned int v17 = a5;
  }
  else {
    unsigned int v17 = a7;
  }
  if (v15) {
    uint64_t v18 = a3;
  }
  else {
    uint64_t v18 = a6;
  }
  bzero(a1, 0x224uLL);
  v14[1] = a4;
  char *v14 = 1;
  if (a4 == 24)
  {
    v14[2] = 0;
    if (v18 == a3) {
      char v16 = 27;
    }
  }
  else
  {
    v14[2] = a5;
    memmove(v14 + 28, a3, a5);
  }
  if (a8 & 1 | G_must_broadcast) {
    *((_WORD *)v14 + 5) = 128;
  }
  *((_DWORD *)v14 + 59) = 1666417251;
  sub_55078((uint64_t)a9, v14 + 240, 308);
  if (sub_55270((uint64_t)a9, a2))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v19 = _os_log_pack_size();
      __chkstk_darwin(v19);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      uint64_t v21 = sub_552A0(a9);
      *(_DWORD *)uint64_t v20 = 136315650;
      *(void *)(v20 + 4) = "make_dhcp_request";
      *(_WORD *)(v20 + 12) = 1024;
      *(_DWORD *)(v20 + 14) = a2;
      *(_WORD *)(v20 + 18) = 2080;
      *(void *)(v20 + 20) = v21;
      __SC_log_send();
    }
    return 0;
  }
  if (a2 != 4 && a2 != 7)
  {
    __int16 __src = -9211;
    if (!sub_17F34(a9, (a8 >> 1) & 1)) {
      return 0;
    }
    if (sub_55080((uint64_t)a9, 57, 2, &__src))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
LABEL_32:
        uint64_t v25 = _os_log_pack_size();
        __chkstk_darwin(v25);
        __error();
        uint64_t v26 = _os_log_pack_fill();
        uint64_t v27 = sub_552A0(a9);
        *(_DWORD *)uint64_t v26 = 136315394;
        *(void *)(v26 + 4) = "make_dhcp_request";
        *(_WORD *)(v26 + 12) = 2080;
        *(void *)(v26 + 14) = v27;
LABEL_35:
        __SC_log_send();
      }
      return 0;
    }
  }
  double v22 = malloc_type_malloc((int)(v17 + 1), 0x5C8D1B93uLL);
  if (!v22)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v28 = _os_log_pack_size();
      __chkstk_darwin(v28);
      __error();
      uint64_t v29 = _os_log_pack_fill();
      unsigned int v30 = __error();
      int v31 = strerror(*v30);
      int v32 = *__error();
      *(_DWORD *)uint64_t v29 = 136315650;
      *(void *)(v29 + 4) = "make_dhcp_request";
      *(_WORD *)(v29 + 12) = 2080;
      *(void *)(v29 + 14) = v31;
      *(_WORD *)(v29 + 22) = 1024;
      *(_DWORD *)(v29 + 24) = v32;
      goto LABEL_35;
    }
    return 0;
  }
  uint64_t v23 = v22;
  *double v22 = v16;
  memmove(v22 + 1, v18, (int)v17);
  int v24 = sub_55080((uint64_t)a9, 61, v17 + 1, v23);
  free(v23);
  if (v24)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled()) {
      goto LABEL_32;
    }
    return 0;
  }
  return v14;
}

uint64_t sub_17914(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_8B80(a1);
  int v27 = 0;
  if (sub_1ED44(a1, &v27))
  {
    if (!v27)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (!result) {
        return result;
      }
      uint64_t v17 = _os_log_pack_size();
      __chkstk_darwin(v17);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      uint64_t v19 = nullsub_1(v4);
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v18 + 4) = v19;
      return __SC_log_send();
    }
    if (!qword_70140)
    {
      CFStringRef v5 = (const __CFString *)MGCopyAnswer();
      if (v5)
      {
        CFStringRef v6 = v5;
        uint64_t v7 = sub_54270(v5, 0x8000100u);
        qword_70140 = (uint64_t)v7;
        if (v7)
        {
          uint64_t v8 = (uint64_t)v7;
          size_t v9 = strlen((const char *)v7);
          if (v9)
          {
            size_t v10 = v9;
            for (uint64_t i = 0; v10 != i; ++i)
            {
              __darwin_ct_rune_t v12 = *(char *)(v8 + i);
              if (v12 < 0)
              {
                int v14 = __maskrune(v12, 0x100uLL);
                uint64_t v13 = qword_70140;
                if (!v14)
                {
LABEL_18:
                  *(unsigned char *)(v8 + i) = 0;
                  break;
                }
              }
              else
              {
                uint64_t v13 = v8;
                if ((_DefaultRuneLocale.__runetype[v12] & 0x100) == 0) {
                  goto LABEL_18;
                }
              }
              uint64_t v8 = v13;
            }
          }
        }
        CFRelease(v6);
      }
    }
    BOOL v15 = (char *)qword_70140;
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result) {
      goto LABEL_21;
    }
  }
  else
  {
    BOOL v15 = (char *)sub_1B058();
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
LABEL_21:
      uint64_t v20 = _os_log_pack_size();
      __chkstk_darwin(v20);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      uint64_t v22 = nullsub_1(v4);
      *(_DWORD *)uint64_t v21 = 136315394;
      *(void *)(v21 + 4) = v22;
      *(_WORD *)(v21 + 12) = 2080;
      *(void *)(v21 + 14) = v15;
      uint64_t result = __SC_log_send();
    }
  }
  if (v15)
  {
    int v23 = strlen(v15);
    uint64_t result = sub_55080((uint64_t)a2, 12, v23, v15);
    if (result)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v24 = _os_log_pack_size();
        __chkstk_darwin(v24);
        __error();
        uint64_t v25 = _os_log_pack_fill();
        uint64_t v26 = sub_552A0(a2);
        *(_DWORD *)uint64_t v25 = 136315138;
        *(void *)(v25 + 4) = v26;
        return __SC_log_send();
      }
    }
  }
  return result;
}

void sub_17D20(_DWORD *a1)
{
  uint64_t v2 = sub_557C((uint64_t)a1);
  sub_16A64((uint64_t)a1, 3u);
  uint64_t v3 = sub_54BE8(v2 + 40, 1, 4);
  if (!sub_1E520((uint64_t)a1) && v3)
  {
    *(_DWORD *)(v2 + 20) = *(_DWORD *)v3;
    unsigned int v4 = sub_1E4F8((uint64_t)a1);
    sub_1D47C((uint64_t)a1, v4, *(unsigned int *)(v2 + 20), 0);
  }
  sub_13314((uint64_t)a1);
  *(_DWORD *)(v2 + 36) = 0;
  if (!sub_1BA2C(a1, v2 + 40, *(_DWORD *)(v2 + 1564))
    || (uint64_t v5 = *(void *)v2,
        int v6 = sub_1E4F8((uint64_t)a1),
        !sub_1B0A4((uint64_t)a1, v5, (uint64_t)sub_18154, v6)))
  {
    sub_181FC((uint64_t)a1);
  }
}

unsigned __int8 *sub_17E24(uint64_t *a1, int a2, uint64_t a3, unsigned int *a4, _DWORD *a5)
{
  uint64_t v10 = *a1;
  unsigned __int8 v11 = sub_934C(a3);
  __darwin_ct_rune_t v12 = (void *)sub_58CAC(a3);
  unsigned int v13 = sub_58034(a3);
  uint64_t result = (unsigned __int8 *)sub_556C8(v10, a2, v11, v12, v13);
  if (result)
  {
    uint64_t v15 = (uint64_t)(a1 + 2);
    int v18 = 0;
    uint64_t result = sub_54B38(v15, 53, &v18, 0);
    if (a4 && result)
    {
      unsigned int v16 = *result;
      *a4 = v16;
    }
    else
    {
      if (!result) {
        return result;
      }
      unsigned int v16 = *a4;
    }
    if (v16 <= 8 && ((1 << v16) & 0x10A) != 0)
    {
      return 0;
    }
    else
    {
      *a5 = 0;
      uint64_t v17 = sub_54BE8(v15, 54, 4);
      if (v17) {
        *a5 = *(_DWORD *)v17;
      }
      return (unsigned char *)(&def_58C8 + 1);
    }
  }
  return result;
}

uint64_t sub_17F34(uint64_t *a1, int a2)
{
  int v3 = dword_70018;
  if (a2)
  {
    unsigned int v4 = 0;
    uint64_t v5 = off_70010;
  }
  else
  {
    uint64_t v5 = off_70010;
    if (dword_70018 < 1)
    {
LABEL_7:
      unsigned int v4 = 0;
    }
    else
    {
      uint64_t v6 = 0;
      while (off_70010[v6] != 108)
      {
        if (dword_70018 == ++v6) {
          goto LABEL_7;
        }
      }
      uint64_t v7 = (char *)malloc_type_malloc(dword_70018, 0x7ECA93D8uLL);
      int v8 = dword_70018;
      if (dword_70018 < 1) {
        goto LABEL_22;
      }
      uint64_t v5 = v7;
      uint64_t v9 = 0;
      int v3 = 0;
      uint64_t v10 = off_70010;
      int v11 = dword_70018;
      do
      {
        int v12 = v10[v9];
        if (v12 != 108)
        {
          v7[v3] = v12;
          int v8 = v11;
          ++v3;
        }
        ++v9;
      }
      while (v9 < v8);
      unsigned int v4 = v7;
      if (v3 < 1) {
LABEL_22:
      }
        sub_5C3D4();
    }
  }
  if (!sub_55080((uint64_t)a1, 55, v3, v5))
  {
    uint64_t v16 = 1;
    if (!v4) {
      return v16;
    }
    goto LABEL_18;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v13 = _os_log_pack_size();
    __chkstk_darwin(v13);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    uint64_t v15 = sub_552A0(a1);
    *(_DWORD *)uint64_t v14 = 136315394;
    *(void *)(v14 + 4) = "add_parameter_request_list";
    *(_WORD *)(v14 + 12) = 2080;
    *(void *)(v14 + 14) = v15;
    __SC_log_send();
  }
  uint64_t v16 = 0;
  if (v4) {
LABEL_18:
  }
    free(v4);
  return v16;
}

void sub_18154(uint64_t a1, int a2)
{
  uint64_t v4 = sub_557C(a1);
  uint64_t v5 = v4;
  if (a2)
  {
    if (a2 != 1) {
      return;
    }
    timer_set_relative(*(void *)(v4 + 1592), 60, 0, (uint64_t)sub_1825C, a1, 0, 0);
    if (*(_DWORD *)(v5 + 36)) {
      return;
    }
    *(_DWORD *)(v5 + 36) = 1;
  }
  else
  {
    *(_DWORD *)(v4 + 36) = 0;
  }

  sub_181FC(a1);
}

void sub_181FC(uint64_t a1)
{
  uint64_t v2 = sub_557C(a1);
  long long v4 = 0u;
  long long v5 = 0u;
  uint64_t v6 = 0;
  int v3 = *(_DWORD *)(v2 + 1556);
  if (v3)
  {
    *(void *)&long long v4 = v2 + 56;
    DWORD2(v4) = v3;
    *(void *)&long long v5 = v2 + 40;
  }
  sub_61FC(a1, (uint64_t)&v4);
}

uint64_t sub_1825C(uint64_t a1)
{
  uint64_t v2 = sub_557C(a1);
  uint64_t v3 = *(void *)v2;
  int v4 = *(_DWORD *)(v2 + 1564);

  return sub_1B0A4(a1, v3, (uint64_t)sub_18154, v4);
}

__CFString *sub_182AC(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 1516)) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  sub_55360(Mutable, (unsigned __int8 *)(a1 + 16), *(unsigned int *)(a1 + 1516), a1);
  return Mutable;
}

uint64_t sub_18300(uint64_t a1)
{
  int v18 = 0;
  unsigned __int8 v17 = 0;
  int v16 = 0;
  uint64_t v2 = sub_557C(a1);
  uint64_t v3 = sub_8B80(a1);
  sub_1855C(v2, v3, (uint64_t *)&v18, &v17, &v16);
  int v4 = (uint64_t *)(v2 + 136);
  long long v5 = (const char *)nullsub_1(v3);
  BOOL v6 = sub_9368(v3) != 0;
  DHCPLeaseListRead(v4, v5, v6, v17, v18, v16);
  uint64_t result = sub_5B24(v4);
  if (result)
  {
    int v8 = (unsigned __int8 *)sub_5B4C(v4, (result - 1));
    sub_185D0(a1, (uint64_t)v8, 1);
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t v11 = nullsub_1(v3);
      int v12 = v8[4];
      int v13 = v8[5];
      int v14 = v8[6];
      int v15 = v8[7];
      *(_DWORD *)uint64_t v10 = 136316162;
      *(void *)(v10 + 4) = v11;
      *(_WORD *)(v10 + 12) = 1024;
      *(_DWORD *)(v10 + 14) = v12;
      *(_WORD *)(v10 + 18) = 1024;
      *(_DWORD *)(v10 + 20) = v13;
      *(_WORD *)(v10 + 24) = 1024;
      *(_DWORD *)(v10 + 26) = v14;
      *(_WORD *)(v10 + 30) = 1024;
      *(_DWORD *)(v10 + 32) = v15;
      return __SC_log_send();
    }
  }
  return result;
}

void sub_184F4(_DWORD *a1)
{
  if (sub_1E5B8((uint64_t)a1))
  {
    LODWORD(v3) = 0;
    sub_14BF0(a1, 0, (uint64_t)&v3);
  }
  else
  {
    uint64_t v3 = sub_9030((uint64_t)a1);
    int v4 = v2;
    sub_14358(a1, 0, (int *)&v3);
  }
}

uint64_t sub_1855C(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4, _DWORD *a5)
{
  if (*(void *)(a1 + 24))
  {
    *a4 = 0;
    *a3 = *(void *)(a1 + 24);
    uint64_t result = *(unsigned int *)(a1 + 32);
  }
  else
  {
    *a4 = sub_934C(a2);
    *a3 = sub_58CAC(a2);
    uint64_t result = sub_58034(a2);
  }
  *a5 = result;
  return result;
}

uint64_t sub_185D0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_557C(a1);
  uint64_t v7 = sub_8B80(a1);
  unsigned int v8 = *(_DWORD *)(a2 + 4);
  if (v8 != *(_DWORD *)(v6 + 1732)) {
    goto LABEL_14;
  }
  unsigned int v9 = bswap32(v8);
  if (HIWORD(v9) != 49320 && (v9 & 0xFF000000) != 167772160 && (v9 & 0xFFF00000) != -1408237568)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result) {
      goto LABEL_32;
    }
    return result;
  }
  if (!sub_1B388(a1)
    || !sub_1E560(a1)
    || (int v12 = *(_DWORD *)(a2 + 20), v12 != sub_1B3A4(a1))
    || (int v13 = (const void *)sub_1BA08(a1), v14 = sub_58034(v7), bcmp((const void *)(a2 + 24), v13, v14)))
  {
LABEL_14:
    sub_1DB14(a1);
    unsigned int v15 = *(_DWORD *)(a2 + 64);
    if (v15 >= 0x5DC) {
      size_t v16 = 1500;
    }
    else {
      size_t v16 = v15;
    }
    uint64_t v34 = 0;
    unsigned int v33 = 0;
    *(_DWORD *)(v6 + 1724) = v16;
    memmove((void *)(v6 + 224), (const void *)(a2 + 68), v16);
    sub_54A34(v6 + 208);
    sub_54D30((char **)(v6 + 208), v6 + 224, *(_DWORD *)(v6 + 1724), 0);
    dhcp_get_lease_from_options(v6 + 208, (unsigned int *)&v34 + 1, (unsigned int *)&v34, &v33);
    sub_18A6C(a1, (uint64_t)"RECOVERED", HIDWORD(v34), v34, v33, *(double *)(a2 + 8));
    *(_DWORD *)(v6 + 56) = 1;
    *(_DWORD *)(v6 + 1728) = 0;
    *(_DWORD *)(v6 + 1732) = *(_DWORD *)(a2 + 4);
    unsigned __int8 v17 = sub_54BE8(v6 + 208, 54, 4);
    if (v17) {
      *(_DWORD *)(v6 + 1736) = *(_DWORD *)v17;
    }
    sub_13B20(v6, *(CFTypeRef *)(a2 + 48));
    sub_13B60(v6, *(CFTypeRef *)(a2 + 56));
    sub_1BAC0(a1);
    *(_DWORD *)(v6 + 112) = 0;
    if (a3 && *(unsigned char *)(a2 + 47))
    {
      *(_DWORD *)(v6 + 112) = 1;
      int v18 = *(_DWORD *)(a2 + 41);
      *(_WORD *)(v6 + 108) = *(_WORD *)(a2 + 45);
      *(_DWORD *)(v6 + 104) = v18;
    }
    int v19 = *(_DWORD *)(a2 + 20);
    if (v19)
    {
      sub_1BAD0(a1, v19);
      sub_1BAE0(a1);
      int v20 = *(unsigned __int8 *)(a2 + 40);
      if (*(unsigned char *)(a2 + 40))
      {
        if ((int)sub_1BA1C(a1) < v20) {
          int v20 = sub_1BA1C(a1);
        }
        uint64_t v21 = (void *)sub_1BA08(a1);
        memmove(v21, (const void *)(a2 + 24), v20);
        sub_1E57C(a1);
      }
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v22 = _os_log_pack_size();
      __chkstk_darwin(v22);
      __error();
      uint64_t v23 = _os_log_pack_fill();
      uint64_t v24 = nullsub_1(v7);
      int v25 = *(unsigned __int8 *)(a2 + 4);
      int v26 = *(unsigned __int8 *)(a2 + 5);
      int v27 = *(unsigned __int8 *)(a2 + 6);
      int v28 = *(unsigned __int8 *)(a2 + 7);
      *(_DWORD *)uint64_t v23 = 136316162;
      *(void *)(v23 + 4) = v24;
      *(_WORD *)(v23 + 12) = 1024;
      *(_DWORD *)(v23 + 14) = v25;
      *(_WORD *)(v23 + 18) = 1024;
      *(_DWORD *)(v23 + 20) = v26;
      *(_WORD *)(v23 + 24) = 1024;
      *(_DWORD *)(v23 + 26) = v27;
      *(_WORD *)(v23 + 30) = 1024;
      *(_DWORD *)(v23 + 32) = v28;
      __SC_log_send();
    }
    return 1;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
LABEL_32:
    uint64_t v30 = _os_log_pack_size();
    __chkstk_darwin(v30);
    __error();
    uint64_t v31 = _os_log_pack_fill();
    uint64_t v32 = nullsub_1(v7);
    *(_DWORD *)uint64_t v31 = 136315138;
    *(void *)(v31 + 4) = v32;
    __SC_log_send();
    return 0;
  }
  return result;
}

uint64_t sub_18A6C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, double a6)
{
  uint64_t v12 = sub_557C(a1);
  uint64_t v13 = sub_8B80(a1);
  *(double *)(v12 + 80) = a6;
  *(_DWORD *)(v12 + 72) = a3;
  if (a3 == -1)
  {
    double v14 = 0.0;
    double v16 = 0.0;
    double v15 = 0.0;
  }
  else
  {
    double v14 = (double)a3 + a6;
    double v15 = (double)a4 + a6;
    double v16 = (double)a5 + a6;
  }
  *(double *)(v12 + 64) = v14;
  *(double *)(v12 + 88) = v15;
  *(double *)(v12 + 96) = v16;
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v18 = _os_log_pack_size();
    __chkstk_darwin(v18);
    __error();
    uint64_t v19 = _os_log_pack_fill();
    uint64_t v20 = nullsub_1(v13);
    uint64_t v21 = *(void *)(v12 + 80);
    uint64_t v22 = *(void *)(v12 + 88);
    uint64_t v23 = *(void *)(v12 + 96);
    uint64_t v24 = *(void *)(v12 + 64);
    *(_DWORD *)uint64_t v19 = 136316418;
    *(void *)(v19 + 4) = v20;
    *(_WORD *)(v19 + 12) = 2080;
    *(void *)(v19 + 14) = a2;
    *(_WORD *)(v19 + 22) = 2048;
    *(void *)(v19 + 24) = v21;
    *(_WORD *)(v19 + 32) = 2048;
    *(void *)(v19 + 34) = v22;
    *(_WORD *)(v19 + 42) = 2048;
    *(void *)(v19 + 44) = v23;
    *(_WORD *)(v19 + 52) = 2048;
    *(void *)(v19 + 54) = v24;
    return __SC_log_send();
  }
  return result;
}

uint64_t sub_18C3C(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = sub_8B80(a1);
  *(_DWORD *)(sub_557C(a1) + 1744) = a2;
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v6 = _os_log_pack_size();
    __chkstk_darwin(v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    uint64_t v8 = nullsub_1(v4);
    if (a2 > 8) {
      unsigned int v9 = "<undefined>";
    }
    else {
      unsigned int v9 = off_68D08[a2];
    }
    *(_DWORD *)uint64_t v7 = 136315394;
    *(void *)(v7 + 4) = v8;
    *(_WORD *)(v7 + 12) = 2080;
    *(void *)(v7 + 14) = v9;
    return __SC_log_send();
  }
  return result;
}

uint64_t sub_18DA4(uint64_t a1, void *a2, double a3)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    uint64_t v9 = a2[3];
    uint64_t v10 = a2[4];
    uint64_t v11 = a2[5];
    uint64_t v12 = a2[1];
    *(_DWORD *)uint64_t v8 = 136316418;
    *(void *)(v8 + 4) = a1;
    *(_WORD *)(v8 + 12) = 2048;
    *(double *)(v8 + 14) = a3;
    *(_WORD *)(v8 + 22) = 2048;
    *(void *)(v8 + 24) = v9;
    *(_WORD *)(v8 + 32) = 2048;
    *(void *)(v8 + 34) = v10;
    *(_WORD *)(v8 + 42) = 2048;
    *(void *)(v8 + 44) = v11;
    *(_WORD *)(v8 + 52) = 2048;
    *(void *)(v8 + 54) = v12;
    return __SC_log_send();
  }
  return result;
}

void sub_18F04(_DWORD *a1, int a2, uint64_t a3)
{
  double current_time = timer_get_current_time();
  uint64_t v7 = sub_557C((uint64_t)a1);
  uint64_t v8 = sub_8B80((uint64_t)a1);
  if (a2 == 5)
  {
    LODWORD(v39[0]) = 7776000;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    if (sub_17E24((uint64_t *)a3, *(_DWORD *)(v7 + 2332), v8, (unsigned int *)&v38 + 1, &v38))
    {
      if (HIDWORD(v38) == 5)
      {
        if ((*(_DWORD *)(*(void *)a3 + 16) + 1) >= 2)
        {
          dhcp_get_lease_from_options(a3 + 16, (unsigned int *)v39, (unsigned int *)&v37 + 1, (unsigned int *)&v37);
          sub_18A6C((uint64_t)a1, (uint64_t)"SELECT", v39[0], HIDWORD(v37), v37, current_time);
          sub_54A34(v7 + 208);
          memmove((void *)(v7 + 224), *(const void **)a3, *(int *)(a3 + 8));
          unsigned int v21 = *(_DWORD *)(a3 + 8);
          *(void *)(v7 + 1724) = v21;
          sub_54D30((char **)(v7 + 208), v7 + 224, v21, 0);
          *(_DWORD *)(v7 + 1732) = *(_DWORD *)(*(void *)a3 + 16);
          if (v38) {
            *(_DWORD *)(v7 + 1736) = v38;
          }
          sub_19810(a1, 0, 0);
        }
      }
      else if (HIDWORD(v38) == 6 && v38 && v38 == *(_DWORD *)(v7 + 1736))
      {
        sub_ABF0((uint64_t)a1);
        timer_set_relative(*(void *)(v7 + 1760), 10, 0, (uint64_t)sub_4A0C, (uint64_t)a1, 0, 0);
      }
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (a2) {
        return;
      }
      memset(v39, 0, sizeof(v39));
      sub_18C3C((uint64_t)a1, 4u);
      sub_ABF0((uint64_t)a1);
      unsigned int v9 = *(_DWORD *)(v7 + 168) != 0;
      if (sub_1CEF4((uint64_t)a1)) {
        v9 |= 2u;
      }
      uint64_t v10 = (const void *)sub_58CAC(v8);
      unsigned __int8 v11 = sub_934C(v8);
      unsigned __int8 v12 = sub_58034(v8);
      uint64_t v13 = sub_17440((char *)(v7 + 1784), 3, v10, v11, v12, *(const void **)(v7 + 24), *(_DWORD *)(v7 + 32), v9, (uint64_t *)v39);
      *(void *)(v7 + 176) = v13;
      if (!v13)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_22;
        }
LABEL_17:
        uint64_t v14 = _os_log_pack_size();
        __chkstk_darwin(v14);
        __error();
        uint64_t v15 = _os_log_pack_fill();
        uint64_t v16 = nullsub_1(v8);
        *(_DWORD *)uint64_t v15 = 136315138;
        *(void *)(v15 + 4) = v16;
LABEL_21:
        __SC_log_send();
        goto LABEL_22;
      }
      if (sub_55080((uint64_t)v39, 50, 4, (void *)(v7 + 1732)))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled()) {
          goto LABEL_20;
        }
        goto LABEL_22;
      }
      if (sub_55080((uint64_t)v39, 54, 4, (void *)(v7 + 1736)))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
LABEL_20:
          uint64_t v17 = _os_log_pack_size();
          __chkstk_darwin(v17);
          __error();
          uint64_t v18 = _os_log_pack_fill();
          uint64_t v19 = nullsub_1(v8);
          uint64_t v20 = sub_552A0((uint64_t *)v39);
          *(_DWORD *)uint64_t v18 = 136315394;
          *(void *)(v18 + 4) = v19;
          *(_WORD *)(v18 + 12) = 2080;
          *(void *)(v18 + 14) = v20;
          goto LABEL_21;
        }
LABEL_22:
        sub_13A98((uint64_t)a1, 5u);
        return;
      }
      sub_17914((uint64_t)a1, (uint64_t *)v39);
      if (sub_55080((uint64_t)v39, 255, 0, 0))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_22;
        }
        goto LABEL_17;
      }
      unsigned int v22 = sub_55248((uint64_t)v39) + 240;
      if (v22 <= 0x12C) {
        unsigned int v22 = 300;
      }
      *(_DWORD *)(v7 + 184) = v22;
      *(_DWORD *)(v7 + 1768) = 0;
      *(_DWORD *)(v7 + 44) = 0;
      *(_DWORD *)(v7 + 2340) = G_initial_wait_secs;
      bootp_client_enable_receive(*(void **)(v7 + 16), (uint64_t)sub_18F04, (uint64_t)a1, 5);
    }
    int v23 = *(_DWORD *)(v7 + 1768);
    *(_DWORD *)(v7 + 1768) = v23 + 1;
    if (v23 <= dword_7003C)
    {
      uint64_t v27 = *(void *)(v7 + 176);
      *(_DWORD *)(v27 + 4) = bswap32(*(_DWORD *)(v7 + 2332));
      *(_WORD *)(v27 + 8) = __rev16((int)(current_time - *(double *)(v7 + 1752)));
      if ((bootp_client_transmit(*(void **)(v7 + 16), 0xFFFFFFFF, 0, (unsigned __int16)word_70044, (unsigned __int16)word_70020, (void *)v27, *(unsigned int *)(v7 + 184)) & 0x80000000) != 0)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v28 = _os_log_pack_size();
          __chkstk_darwin(v28);
          __error();
          uint64_t v29 = _os_log_pack_fill();
          uint64_t v30 = nullsub_1(v8);
          *(_DWORD *)uint64_t v29 = 136315138;
          *(void *)(v29 + 4) = v30;
          __SC_log_send();
        }
      }
      uint64_t v31 = *(int *)(v7 + 2340);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v32 = _os_log_pack_size();
        __chkstk_darwin(v32);
        __error();
        uint64_t v33 = _os_log_pack_fill();
        uint64_t v34 = nullsub_1(v8);
        double v35 = current_time - *(double *)(v7 + 1752);
        *(_DWORD *)uint64_t v33 = 136315906;
        *(void *)(v33 + 4) = v34;
        *(_WORD *)(v33 + 12) = 2048;
        *(double *)(v33 + 14) = v35;
        *(_WORD *)(v33 + 22) = 2048;
        *(void *)(v33 + 24) = v31;
        *(_WORD *)(v33 + 32) = 1024;
        *(_DWORD *)(v33 + 34) = 0;
        __SC_log_send();
      }
      timer_set_relative(*(void *)(v7 + 1760), v31, 0, (uint64_t)sub_18F04, (uint64_t)a1, 2, 0);
      int v36 = 2 * *(_DWORD *)(v7 + 2340);
      if (v36 >= G_max_wait_secs) {
        int v36 = G_max_wait_secs;
      }
      *(_DWORD *)(v7 + 2340) = v36;
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v24 = _os_log_pack_size();
        __chkstk_darwin(v24);
        __error();
        uint64_t v25 = _os_log_pack_fill();
        uint64_t v26 = nullsub_1(v8);
        *(_DWORD *)uint64_t v25 = 136315138;
        *(void *)(v25 + 4) = v26;
        __SC_log_send();
      }
      sub_4A0C(a1, 0, 0);
    }
  }
}

void sub_19810(_DWORD *a1, int a2, uint64_t a3)
{
  double current_time = timer_get_current_time();
  uint64_t v7 = sub_557C((uint64_t)a1);
  uint64_t v8 = sub_8B80((uint64_t)a1);
  if (a2 != 6)
  {
    if (a2) {
      return;
    }
    int v9 = *(_DWORD *)(v7 + 1744);
    sub_18C3C((uint64_t)a1, 5u);
    *(_DWORD *)(v7 + 116) = 1;
    *(_DWORD *)(v7 + 40) = 1;
    *(void *)(v7 + 1776) = 0;
    sub_ABF0((uint64_t)a1);
    if ((v9 - 7) > 1)
    {
      sub_1D3B8((uint64_t)a1);
      if (!sub_1E5B8((uint64_t)a1))
      {
        if (!sub_1A31C(v8) && v9 == 4)
        {
          uint64_t v16 = *(void *)(v7 + 8);
          int v17 = *(_DWORD *)(v7 + 1732);
          sub_E17C(v16, (uint64_t)sub_19810, (uint64_t)a1, 6, 0, v17);
          return;
        }
        int v23 = sub_1E5D0((uint64_t)a1);
        if (v23 == *(_DWORD *)(v7 + 1732) && (v9 == 6 || v9 == 3))
        {
          int v24 = v23;
          uint64_t v25 = *(void *)(v7 + 8);
          sub_D378(v25, (uint64_t)sub_19810, (uint64_t)a1, 6, 0, v24, 1);
          return;
        }
      }
    }
    else
    {
      double v10 = *(double *)(v7 + 88);
      BOOL v11 = v10 >= current_time && v10 - current_time > (double)dword_70040;
      *(_DWORD *)(v7 + 116) = v11;
    }
    goto LABEL_34;
  }
  if (*(_DWORD *)(a3 + 8))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      uint64_t v14 = nullsub_1(v8);
      uint64_t v15 = sub_E73C(*(void *)(v7 + 8));
      *(_DWORD *)uint64_t v13 = 136315394;
      *(void *)(v13 + 4) = v14;
      *(_WORD *)(v13 + 12) = 2080;
      *(void *)(v13 + 14) = v15;
      __SC_log_send();
    }
    sub_13A98((uint64_t)a1, 6u);
    return;
  }
  if (*(_DWORD *)(a3 + 12))
  {
    snprintf(__str, 0x80uLL, "%d.%d.%d.%d in use by %02x:%02x:%02x:%02x:%02x:%02x, DHCP Server %d.%d.%d.%d", *(unsigned __int8 *)(v7 + 1732), *(unsigned __int8 *)(v7 + 1733), *(unsigned __int8 *)(v7 + 1734), *(unsigned __int8 *)(v7 + 1735), *(unsigned __int8 *)(a3 + 24), *(unsigned __int8 *)(a3 + 25), *(unsigned __int8 *)(a3 + 26), *(unsigned __int8 *)(a3 + 27), *(unsigned __int8 *)(a3 + 28), *(unsigned __int8 *)(a3 + 29), *(unsigned __int8 *)(v7 + 1736), *(unsigned __int8 *)(v7 + 1737), *(unsigned __int8 *)(v7 + 1738), *(unsigned __int8 *)(v7 + 1739));
    int v18 = *(_DWORD *)(v7 + 1732);
    if (*(_DWORD *)(v7 + 36) == v18)
    {
      if (*(_DWORD *)(v7 + 2336))
      {
LABEL_25:
        *(_DWORD *)(v7 + 36) = v18;
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v20 = _os_log_pack_size();
          __chkstk_darwin(v20);
          __error();
          uint64_t v21 = _os_log_pack_fill();
          uint64_t v22 = nullsub_1(v8);
          *(_DWORD *)uint64_t v21 = 136315394;
          *(void *)(v21 + 4) = v22;
          *(_WORD *)(v21 + 12) = 2080;
          *(void *)(v21 + 14) = __str;
          __SC_log_send();
        }
        sub_13C38((uint64_t)a1, 0);
        sub_1343C(v7);
        sub_1BAC0((uint64_t)a1);
        sub_9028((uint64_t)a1, 8u);
        sub_13DA4((uint64_t)a1);
        return;
      }
      int v19 = 1;
    }
    else
    {
      int v19 = 0;
    }
    *(_DWORD *)(v7 + 2336) = v19;
    goto LABEL_25;
  }
  sub_ABF0((uint64_t)a1);
LABEL_34:
  *(_DWORD *)(v7 + 56) = 1;
  uint64_t v26 = (const void *)sub_1ED00((uint64_t)a1);
  sub_13B20(v7, v26);
  uint64_t v27 = (const void *)sub_1ED14((uint64_t)a1);
  sub_13B60(v7, v27);
  *(_DWORD *)(v7 + 36) = 0;
  *(_DWORD *)(v7 + 2336) = 0;
  uint64_t v28 = v7 + 208;
  uint64_t v29 = sub_54BE8(v7 + 208, 1, 4);
  if (v29) {
    unsigned int v30 = *(_DWORD *)v29;
  }
  else {
    unsigned int v30 = 0;
  }
  int v31 = *(_DWORD *)(v7 + 1732);
  if (v31 != sub_1E5D0((uint64_t)a1) || v30 != sub_1E5E8((uint64_t)a1)) {
    sub_1D47C((uint64_t)a1, *(unsigned int *)(v7 + 1732), v30, 0);
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v32 = _os_log_pack_size();
    v42[1] = v42;
    __chkstk_darwin(v32);
    __error();
    uint64_t v33 = _os_log_pack_fill();
    uint64_t v34 = v8;
    uint64_t v35 = nullsub_1(v8);
    int v36 = inet_ntop(2, (const void *)(v7 + 1732), __str, 0x10u);
    *(_DWORD *)uint64_t v33 = 136315394;
    *(void *)(v33 + 4) = v35;
    uint64_t v8 = v34;
    uint64_t v28 = v7 + 208;
    *(_WORD *)(v33 + 12) = 2080;
    *(void *)(v33 + 14) = v36;
    __SC_log_send();
  }
  if (dword_70028) {
    sub_5584((uint64_t)a1, 0);
  }
  *(_DWORD *)(v7 + 40) = 0;
  if (*(_DWORD *)(v7 + 72) == -1)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v39 = _os_log_pack_size();
      __chkstk_darwin(v39);
      __error();
      uint64_t v40 = _os_log_pack_fill();
      uint64_t v41 = nullsub_1(v8);
      *(_DWORD *)uint64_t v40 = 136315138;
      *(void *)(v40 + 4) = v41;
      __SC_log_send();
    }
  }
  else
  {
    double v37 = *(double *)(v7 + 88);
    if (v37 >= current_time) {
      uint64_t v38 = (uint64_t)(v37 - current_time);
    }
    else {
      uint64_t v38 = 0;
    }
    *(double *)(v7 + 192) = v37;
    timer_set_relative(*(void *)(v7 + 1760), v38, v37 < current_time, (uint64_t)sub_15EC4, (uint64_t)a1, 0, 0);
    if (v37 < current_time)
    {
      *(_DWORD *)(v7 + 200) = 0;
LABEL_54:
      sub_14A18((uint64_t)a1, (const void *)(v7 + 224), *(_DWORD *)(v7 + 1724), *(_DWORD *)(v7 + 116));
      *(_DWORD *)(v7 + 116) = 0;
      sub_1A604((uint64_t)a1);
      sub_BEF8((uint64_t)a1, 0);
      return;
    }
  }
  *(_DWORD *)(v7 + 200) = 0;
  if (!sub_1BA2C(a1, v28, *(_DWORD *)(v7 + 1732))
    || !sub_1B0A4((uint64_t)a1, *(void *)(v7 + 8), (uint64_t)sub_1A660, *(_DWORD *)(v7 + 1732)))
  {
    goto LABEL_54;
  }
}

uint64_t sub_1A034(uint64_t a1, _DWORD *a2)
{
  int v5 = 0;
  uint64_t v3 = sub_54B38(a1, 108, &v5, 0);
  uint64_t result = 0;
  if (v3)
  {
    if (v5 == 4)
    {
      *a2 = bswap32(*(_DWORD *)v3);
      return 1;
    }
  }
  return result;
}

void sub_1A098(_DWORD *a1, int a2, _DWORD *a3)
{
  uint64_t v6 = sub_557C((uint64_t)a1);
  uint64_t v7 = sub_8B80((uint64_t)a1);
  if (a2 == 2)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      uint64_t v14 = nullsub_1(v7);
      *(_DWORD *)uint64_t v13 = 136315138;
      *(void *)(v13 + 4) = v14;
      __SC_log_send();
    }
    uint64_t v16 = sub_9030((uint64_t)a1);
    int v17 = v15;
    sub_14358(a1, 0, (int *)&v16);
  }
  else if (!a2)
  {
    if (*a3 <= 0x12Cu) {
      uint64_t v8 = 300;
    }
    else {
      uint64_t v8 = *a3;
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t v11 = nullsub_1(v7);
      *(_DWORD *)uint64_t v10 = 136315394;
      *(void *)(v10 + 4) = v11;
      *(_WORD *)(v10 + 12) = 1024;
      *(_DWORD *)(v10 + 14) = v8;
      __SC_log_send();
    }
    sub_13A98((uint64_t)a1, 0x15u);
    timer_set_relative(*(void *)(v6 + 1760), v8, 0, (uint64_t)sub_1A098, (uint64_t)a1, 2, 0);
  }
}

BOOL sub_1A31C(uint64_t a1)
{
  return sub_58D10(a1) || sub_58D04(a1) != 0;
}

uint64_t sub_1A35C(uint64_t a1, int a2)
{
  uint64_t v4 = sub_557C(a1);
  uint64_t v5 = sub_8B80(a1);
  sub_18C3C(a1, 2u);
  if (a2)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      uint64_t v8 = nullsub_1(v5);
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v7 + 4) = v8;
      __SC_log_send();
    }
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v9 = _os_log_pack_size();
    __chkstk_darwin(v9);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    uint64_t v11 = nullsub_1(v5);
    uint64_t v12 = inet_ntop(2, (const void *)(v4 + 1732), v14, 0x10u);
    *(_DWORD *)uint64_t v10 = 136315394;
    *(void *)(v10 + 4) = v11;
    *(_WORD *)(v10 + 12) = 2080;
    *(void *)(v10 + 14) = v12;
    __SC_log_send();
  }
  sub_ABF0(a1);
  sub_13C38(a1, a2 != 0);
  sub_1DB14(a1);
  *(_DWORD *)(v4 + 1732) = 0;
  sub_1343C(v4);
  *(_DWORD *)(v4 + 48) = 0;
  sub_1BAC0(a1);
  sub_BEF8(a1, 0);
  return timer_set_relative(*(void *)(v4 + 1760), 0, 1000, (uint64_t)sub_4A0C, a1, 0, 0);
}

void sub_1A604(uint64_t a1)
{
  uint64_t v2 = sub_557C(a1);
  uint64_t v4 = v2 + 224;
  uint64_t v5 = 0;
  LODWORD(v5) = *(_DWORD *)(v2 + 1724);
  uint64_t v6 = v2 + 208;
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v7 = *(void *)(v2 + 80);
  uint64_t v8 = v3;
  sub_61FC(a1, (uint64_t)&v4);
}

void sub_1A660(uint64_t a1, int a2)
{
  uint64_t v4 = sub_557C(a1);
  sub_BEF8(a1, 0);
  if (a2)
  {
    if (a2 == 1)
    {
      timer_set_relative(*(void *)(v4 + 1760), 60, 0, (uint64_t)sub_1A75C, a1, 0, 0);
      if (!*(_DWORD *)(v4 + 200))
      {
        *(_DWORD *)(v4 + 200) = 1;
        sub_1A604(a1);
        int v5 = *(_DWORD *)(v4 + 1724);
        sub_14A18(a1, (const void *)(v4 + 224), v5, 1);
      }
    }
  }
  else
  {
    sub_14A18(a1, (const void *)(v4 + 224), *(_DWORD *)(v4 + 1724), *(_DWORD *)(v4 + 116));
    *(_DWORD *)(v4 + 116) = 0;
    sub_1A604(a1);
  }
}

uint64_t sub_1A75C(uint64_t a1)
{
  uint64_t v2 = sub_557C(a1);
  uint64_t v3 = *(void *)(v2 + 8);
  int v4 = *(_DWORD *)(v2 + 1732);

  return sub_1B0A4(a1, v3, (uint64_t)sub_1A660, v4);
}

uint64_t sub_1A7AC(uint64_t a1, double a2)
{
  uint64_t v3 = (float64x2_t *)sub_557C(a1);
  uint64_t v4 = sub_8B80(a1);
  v3[4].f64[0] = v3[4].f64[0] + a2;
  v3[5] = vaddq_f64(v3[5], (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0));
  v3[6].f64[0] = v3[6].f64[0] + a2;
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v6 = _os_log_pack_size();
    __chkstk_darwin(v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    uint64_t v8 = nullsub_1(v4);
    *(_DWORD *)uint64_t v7 = 136315394;
    *(void *)(v7 + 4) = v8;
    *(_WORD *)(v7 + 12) = 2048;
    *(double *)(v7 + 14) = a2;
    return __SC_log_send();
  }
  return result;
}

uint64_t sub_1A91C(uint64_t a1)
{
  uint64_t v2 = sub_8B80(a1);
  uint64_t v3 = sub_557C(a1);
  int v4 = sub_1E5E8(a1);
  int v5 = *(_DWORD *)(v3 + 1732);
  int v6 = *(_DWORD *)(v3 + 1736);
  if (((v6 ^ v5) & v4) != 0)
  {
    int v6 = sub_169D4(v3 + 208, v5);
    if ((v6 + 1) <= 1) {
      int v6 = *(_DWORD *)(v3 + 1736);
    }
  }
  memset(v30, 0, 512);
  int v28 = v6;
  int v7 = arp_open_routing_socket();
  if (v7 == -1)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      uint64_t v13 = nullsub_1(v2);
      uint64_t v14 = __error();
      int v15 = strerror(*v14);
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)(v12 + 4) = v13;
      *(_WORD *)(v12 + 12) = 2080;
      *(void *)(v12 + 14) = v15;
      return __SC_log_send();
    }
  }
  else
  {
    int v8 = v7;
    int v9 = sub_58DC8(v2);
    if (!arp_get(v8, (uint64_t)v30, v6, v9))
    {
      for (int i = 1; ; ++i)
      {
        int v17 = (const sockaddr_dl *)&v30[v30[92] + 92];
        if (v17->sdl_family == 18)
        {
          if (v17->sdl_alen) {
            break;
          }
        }
        if (i == 5)
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (!__SC_log_enabled()) {
            return close(v8);
          }
          uint64_t v18 = _os_log_pack_size();
          __chkstk_darwin(v18);
          __error();
          uint64_t v19 = _os_log_pack_fill();
          uint64_t v20 = nullsub_1(v2);
          uint64_t v21 = inet_ntop(2, &v28, v29, 0x10u);
          *(_DWORD *)uint64_t v19 = 136315394;
          *(void *)(v19 + 4) = v20;
          *(_WORD *)(v19 + 12) = 2080;
          *(void *)(v19 + 14) = v21;
          goto LABEL_20;
        }
        usleep(0x3E8u);
        if (arp_get(v8, (uint64_t)v30, v28, v9)) {
          return close(v8);
        }
      }
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        return close(v8);
      }
      uint64_t v22 = _os_log_pack_size();
      uint64_t v27 = (uint64_t)&v27;
      __chkstk_darwin(v22);
      __error();
      uint64_t v23 = _os_log_pack_fill();
      uint64_t v24 = nullsub_1(v2);
      uint64_t v25 = inet_ntop(2, &v28, v29, 0x10u);
      uint64_t v26 = link_ntoa(v17);
      *(_DWORD *)uint64_t v23 = 136315906;
      *(void *)(v23 + 4) = v24;
      *(_WORD *)(v23 + 12) = 2080;
      *(void *)(v23 + 14) = v25;
      *(_WORD *)(v23 + 22) = 2080;
      *(void *)(v23 + 24) = v26;
      *(_WORD *)(v23 + 32) = 1024;
      *(_DWORD *)(v23 + 34) = i;
LABEL_20:
      __SC_log_send();
    }
    return close(v8);
  }
  return result;
}

char *sub_1AD6C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  memset(&v20, 0, sizeof(v20));
  if (fstat(a1, &v20) < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      int v15 = __error();
      uint64_t v16 = strerror(*v15);
      int v17 = *__error();
      *(_DWORD *)uint64_t v14 = 136315650;
      *(void *)(v14 + 4) = "FDCalloutCreate";
      *(_WORD *)(v14 + 12) = 2080;
      *(void *)(v14 + 14) = v16;
      *(_WORD *)(v14 + 22) = 1024;
      *(_DWORD *)(v14 + 24) = v17;
      __SC_log_send();
    }
    return 0;
  }
  else
  {
    uint64_t v10 = (char *)malloc_type_malloc(0x28uLL, 0x10A0040DF4813A1uLL);
    *(void *)(v10 + 4) = 0;
    *((_DWORD *)v10 + 3) = 0;
    *(_DWORD *)uint64_t v10 = a1;
    *((void *)v10 + 2) = a2;
    *((void *)v10 + 3) = a3;
    *((void *)v10 + 4) = a4;
    uint64_t v11 = sub_2EC08();
    uint64_t v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, a1, 0, v11);
    *((void *)v10 + 1) = v12;
    dispatch_source_set_cancel_handler(v12, a5);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = sub_1AFC0;
    handler[3] = &unk_68D50;
    handler[4] = v10;
    dispatch_source_set_event_handler(*((dispatch_source_t *)v10 + 1), handler);
    dispatch_activate(*((dispatch_object_t *)v10 + 1));
  }
  return v10;
}

uint64_t sub_1AFC0(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 32);
  uint64_t v2 = (uint64_t (*)(void, void))v1[2];
  if (v2) {
    return v2(v1[3], v1[4]);
  }
  return result;
}

void sub_1AFD8(dispatch_object_t **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = v1[1];
    if (v3)
    {
      dispatch_source_cancel(v3);
      dispatch_release(v1[1]);
    }
    free(v1);
    *a1 = 0;
  }
}

uint64_t sub_1B058()
{
  return qword_70148;
}

void sub_1B064(uint64_t a1, uint64_t a2)
{
  if (a2) {
    sub_BE68(a2);
  }
  if (*(unsigned char *)(a1 + 25)) {
    *(_DWORD *)(a1 + 116) &= ~8u;
  }
}

uint64_t sub_1B0A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!G_discover_and_publish_router_mac_address) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if ((*(unsigned char *)(a1 + 25) & 1) == 0
    || (int v6 = *(_DWORD *)(a1 + 116), *(_DWORD *)(a1 + 116) = v6 & 0xFFFFFFFB, (v6 & 1) == 0))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
    uint64_t v8 = _os_log_pack_size();
    __chkstk_darwin(v8);
    __error();
    uint64_t v9 = _os_log_pack_fill();
    uint64_t v10 = nullsub_1(v5);
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v9 + 4) = v10;
    __SC_log_send();
    return 0;
  }
  *(_DWORD *)(a1 + 116) = v6 & 0xFFFFFFE3 | 8;
  int v14 = *(_DWORD *)(a1 + 120);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    v18[0] = HIBYTE(a4);
    uint64_t v19 = HIBYTE(v14);
    uint64_t v15 = _os_log_pack_size();
    v18[1] = v18;
    __chkstk_darwin(v15);
    __error();
    uint64_t v16 = _os_log_pack_fill();
    uint64_t v17 = nullsub_1(v5);
    *(_DWORD *)uint64_t v16 = 136317186;
    *(void *)(v16 + 4) = v17;
    *(_WORD *)(v16 + 12) = 1024;
    *(_DWORD *)(v16 + 14) = a4;
    *(_WORD *)(v16 + 18) = 1024;
    *(_DWORD *)(v16 + 20) = BYTE1(a4);
    *(_WORD *)(v16 + 24) = 1024;
    *(_DWORD *)(v16 + 26) = BYTE2(a4);
    *(_WORD *)(v16 + 30) = 1024;
    *(_DWORD *)(v16 + 32) = v18[0];
    *(_WORD *)(v16 + 36) = 1024;
    *(_DWORD *)(v16 + 38) = v14;
    *(_WORD *)(v16 + 42) = 1024;
    *(_DWORD *)(v16 + 44) = BYTE1(v14);
    *(_WORD *)(v16 + 48) = 1024;
    *(_DWORD *)(v16 + 50) = BYTE2(v14);
    *(_WORD *)(v16 + 54) = 1024;
    *(_DWORD *)(v16 + 56) = v19;
    __SC_log_send();
  }
  sub_E250(a2, (uint64_t)sub_1B3BC, a1, a3, a4, v14, dword_70080);
  return 1;
}

uint64_t sub_1B388(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)(a1 + 116) & 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1B3A4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 25)) {
    return *(unsigned int *)(a1 + 120);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B3BC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  if (*(unsigned char *)(a1 + 25)) {
    *(_DWORD *)(a1 + 116) &= ~8u;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 16) + 8);
  if (*(_DWORD *)(a3 + 8))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      uint64_t v9 = nullsub_1(v6);
      uint64_t v10 = sub_E73C(*(void *)a3);
      *(_DWORD *)uint64_t v8 = 136315394;
      *(void *)(v8 + 4) = v9;
      *(_WORD *)(v8 + 12) = 2080;
      *(void *)(v8 + 14) = v10;
      __SC_log_send();
    }
    uint64_t v11 = 99;
  }
  else if (*(_DWORD *)(a3 + 12))
  {
    int v12 = sub_58034(*(void *)(*(void *)(a1 + 16) + 8));
    memmove((void *)(a1 + 124), (const void *)(a3 + 24), v12);
    if (*(unsigned char *)(a1 + 25)) {
      *(_DWORD *)(a1 + 116) |= 7u;
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      uint64_t v15 = nullsub_1(v6);
      int v16 = *(unsigned __int8 *)(a1 + 120);
      int v17 = *(unsigned __int8 *)(a1 + 121);
      int v18 = *(unsigned __int8 *)(a1 + 122);
      int v19 = *(unsigned __int8 *)(a1 + 123);
      *(_DWORD *)uint64_t v14 = 136316162;
      *(void *)(v14 + 4) = v15;
      *(_WORD *)(v14 + 12) = 1024;
      *(_DWORD *)(v14 + 14) = v16;
      *(_WORD *)(v14 + 18) = 1024;
      *(_DWORD *)(v14 + 20) = v17;
      *(_WORD *)(v14 + 24) = 1024;
      *(_DWORD *)(v14 + 26) = v18;
      *(_WORD *)(v14 + 30) = 1024;
      *(_DWORD *)(v14 + 32) = v19;
      __SC_log_send();
    }
    uint64_t v11 = 0;
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v20 = _os_log_pack_size();
      __chkstk_darwin(v20);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      uint64_t v22 = nullsub_1(v6);
      int v23 = *(unsigned __int8 *)(a1 + 120);
      int v24 = *(unsigned __int8 *)(a1 + 121);
      int v25 = *(unsigned __int8 *)(a1 + 122);
      int v26 = *(unsigned __int8 *)(a1 + 123);
      *(_DWORD *)uint64_t v21 = 136316162;
      *(void *)(v21 + 4) = v22;
      *(_WORD *)(v21 + 12) = 1024;
      *(_DWORD *)(v21 + 14) = v23;
      *(_WORD *)(v21 + 18) = 1024;
      *(_DWORD *)(v21 + 20) = v24;
      *(_WORD *)(v21 + 24) = 1024;
      *(_DWORD *)(v21 + 26) = v25;
      *(_WORD *)(v21 + 30) = 1024;
      *(_DWORD *)(v21 + 32) = v26;
      __SC_log_send();
    }
    if (*(unsigned char *)(a1 + 25)) {
      *(_DWORD *)(a1 + 116) |= 0x10u;
    }
    uint64_t v11 = 1;
  }
  return a2(a1, v11);
}

uint64_t sub_1B778(uint64_t a1, uint64_t a2)
{
  if (!G_discover_and_publish_router_mac_address) {
    return 0;
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  if ((*(unsigned char *)(a1 + 25) & 1) == 0
    || (int v4 = *(_DWORD *)(a1 + 116), *(_DWORD *)(a1 + 116) = v4 & 0xFFFFFFFB, (v4 & 1) == 0))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
    uint64_t v6 = _os_log_pack_size();
    __chkstk_darwin(v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    uint64_t v8 = nullsub_1(v3);
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v7 + 4) = v8;
    __SC_log_send();
    return 0;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 120);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v11 = _os_log_pack_size();
    __chkstk_darwin(v11);
    __error();
    uint64_t v12 = _os_log_pack_fill();
    uint64_t v13 = nullsub_1(v3);
    *(_DWORD *)uint64_t v12 = 136316162;
    *(void *)(v12 + 4) = v13;
    *(_WORD *)(v12 + 12) = 1024;
    *(_DWORD *)(v12 + 14) = v10;
    *(_WORD *)(v12 + 18) = 1024;
    *(_DWORD *)(v12 + 20) = BYTE1(v10);
    *(_WORD *)(v12 + 24) = 1024;
    *(_DWORD *)(v12 + 26) = BYTE2(v10);
    *(_WORD *)(v12 + 30) = 1024;
    *(_DWORD *)(v12 + 32) = HIBYTE(v10);
    __SC_log_send();
  }
  *(_DWORD *)(a2 + 4) = v10;
  unint64_t v14 = *(unsigned int *)(a1 + 24);
  if ((v14 & 0x100) != 0) {
    uint64_t v15 = (const void *)(a1 + 124);
  }
  else {
    uint64_t v15 = 0;
  }
  memmove((void *)(a2 + 8), v15, (v14 >> 4) & 0x10);
  return 1;
}

uint64_t sub_1BA08(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 25)) {
    return a1 + 124;
  }
  else {
    return 0;
  }
}

uint64_t sub_1BA1C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 24) >> 4) & 0x10;
}

uint64_t sub_1BA2C(_DWORD *a1, uint64_t a2, int a3)
{
  int v8 = 0;
  unsigned int v4 = sub_1695C(a2, a3, &v8);
  int v5 = a1[6];
  if (!v4)
  {
    if ((v5 & 0x100) != 0)
    {
      uint64_t result = 0;
      a1[29] = 0;
      return result;
    }
    return 0;
  }
  if ((v5 & 0x100) == 0) {
    return 1;
  }
  int v7 = v8;
  if ((~a1[29] & 7) == 0 && v8 == a1[30]) {
    return 0;
  }
  uint64_t result = 1;
  a1[29] = 1;
  a1[30] = v7;
  return result;
}

uint64_t sub_1BAC0(uint64_t result)
{
  if (*(unsigned char *)(result + 25)) {
    *(_DWORD *)(result + 116) = 0;
  }
  return result;
}

uint64_t sub_1BAD0(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 25)) {
    *(_DWORD *)(result + 120) = a2;
  }
  return result;
}

uint64_t sub_1BAE0(uint64_t result)
{
  if (*(unsigned char *)(result + 25)) {
    *(_DWORD *)(result + 116) |= 1u;
  }
  return result;
}

uint64_t sub_1BAF8(uint64_t a1, int a2)
{
  if ((int)sub_5B24(&unk_70150) < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = sub_5B4C(&unk_70150, v4) + 24;
    if ((int)sub_5B24(v5) >= 1) {
      break;
    }
LABEL_8:
    uint64_t v4 = (v4 + 1);
    if ((int)v4 >= (int)sub_5B24(&unk_70150)) {
      return 0;
    }
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = sub_5B4C(v5, v6);
    if (v7 != a1 && *(_DWORD *)(v7 + 100) == a2) {
      return 1;
    }
    uint64_t v6 = (v6 + 1);
    if ((int)v6 >= (int)sub_5B24(v5)) {
      goto LABEL_8;
    }
  }
}

_DWORD *sub_1BBC4(_DWORD *result, _DWORD *a2)
{
  if (result) {
    *uint64_t result = dword_70170;
  }
  if (a2) {
    *a2 = dword_70174;
  }
  return result;
}

const char *sub_1BBE8(uint64_t a1)
{
  return sub_9218(*(_DWORD *)(a1 + 24));
}

uint64_t sub_1BBF0(uint64_t a1)
{
  return sub_1BBF8(*(void *)(a1 + 16));
}

uint64_t sub_1BBF8(uint64_t a1)
{
  uint64_t result = sub_5B24(a1 + 24);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)a1 |= 1u;
    uint64_t v4 = (const char *)nullsub_1(v3);
    return sub_3602C(v4);
  }
  return result;
}

BOOL sub_1BC54(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) && *(_DWORD *)(a1 + 28) == 0;
}

void sub_1BC74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  byte_701A4 = 1;
  *(_DWORD *)(v1 + 144) = 1;
  dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
}

uint64_t sub_1BC98(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if ((*(_DWORD *)v1 & 0x80) == 0)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(v1 + 8);
    *(_DWORD *)v1 |= 0x80u;
    uint64_t result = sub_5B24(v1 + 24);
    uint64_t v4 = *(void *)(v1 + 88);
    if (v4)
    {
      if ((int)result > 2) {
        return result;
      }
      uint64_t v5 = v4 + 88;
    }
    else
    {
      if ((int)result > 1) {
        return result;
      }
      uint64_t v5 = 0;
    }
    uint64_t result = sub_588E4(v3);
    if ((int)result >= 1)
    {
      int v7 = result;
      uint64_t v8 = 0;
      int v9 = 0;
      *(void *)&long long v6 = 136315138;
      long long v14 = v6;
      do
      {
        uint64_t result = sub_588EC(v3, v8);
        if (*(_DWORD *)result != *(_DWORD *)(v2 + 100))
        {
          unsigned int v10 = (int *)result;
          if (!v5 || *(_DWORD *)result != *(_DWORD *)(v5 + 12))
          {
            if (!v9)
            {
              sub_4220();
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                _os_log_pack_size();
                uint64_t v15 = &v14;
                __chkstk_darwin();
                __error();
                uint64_t v11 = _os_log_pack_fill();
                uint64_t v12 = nullsub_1(v3);
                *(_DWORD *)uint64_t v11 = v14;
                *(void *)(v11 + 4) = v12;
                __SC_log_send();
              }
            }
            uint64_t v13 = (const char *)nullsub_1(v3);
            uint64_t result = sub_1DDA8(v13, *v10);
            int v9 = 1;
          }
        }
        uint64_t v8 = (v8 + 1);
      }
      while (v7 != v8);
    }
  }
  return result;
}

uint64_t sub_1BE88(uint64_t a1, uint64_t a2)
{
  double current_time = timer_get_current_time();
  if (!*(_DWORD *)(a2 + 20) && current_time - *(double *)(a1 + 144) <= (double)dword_70084) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 160);
  if (v5 >= 1 && current_time - *(double *)(a1 + 152) > (double)dword_70084) {
    int v5 = 0;
  }
  *(double *)(a1 + 152) = current_time;
  *(_DWORD *)(a1 + 160) = v5 + 1;
  if (v5 >= dword_70088) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 16) + 8);
  int v7 = (uint64_t *)sub_CE80(v6);
  int v19 = v7;
  if (!v7)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v16 = _os_log_pack_size();
      __chkstk_darwin(v16);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
      return 0;
    }
    return 0;
  }
  uint64_t v8 = (uint64_t)v7;
  sub_1C194(v6, a2);
  uint64_t v9 = sub_E744(v8, *(_DWORD *)(a1 + 100));
  sub_D020(&v19);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v10 = _os_log_pack_size();
    v18[1] = v18;
    __chkstk_darwin(v10);
    __error();
    uint64_t v11 = _os_log_pack_fill();
    uint64_t v12 = sub_9218(*(_DWORD *)(a1 + 24));
    uint64_t v13 = nullsub_1(v6);
    if (*(_DWORD *)(a2 + 20)) {
      long long v14 = "BonjourSleepProxy ";
    }
    else {
      long long v14 = "";
    }
    uint64_t v15 = *(unsigned __int8 **)(a2 + 8);
    sub_1C348(v11, (uint64_t)v12, v13, *(unsigned __int8 *)(a1 + 100), *(unsigned __int8 *)(a1 + 101), *(unsigned __int8 *)(a1 + 102), *(unsigned __int8 *)(a1 + 103), (uint64_t)v14, *v15, v15[1], v15[2], v15[3], v15[4], v15[5], *(_DWORD *)(a1 + 160), dword_70088);
    __SC_log_send();
  }
  return v9;
}

uint64_t sub_1C194(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 32))
  {
    uint64_t v3 = result;
    uint64_t v4 = nullsub_1(result);
    int v5 = sub_934C(v3);
    uint64_t v6 = *(void *)(a2 + 8);
    BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a2 + 32));
    int Length = CFDataGetLength(*(CFDataRef *)(a2 + 32));
    int v9 = sub_7020(-1, v13, v4, v5, v6, *(_DWORD *)(a2 + 24), *(_DWORD *)a2, 0x14E9u, 0x14E9u, BytePtr, Length);
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      uint64_t v12 = nullsub_1(v3);
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)(v11 + 4) = v12;
      *(_WORD *)(v11 + 12) = 1024;
      *(_DWORD *)(v11 + 14) = v9;
      return __SC_log_send();
    }
  }
  return result;
}

double sub_1C348(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16)
{
  *(void *)&double result = 136318722;
  *(_DWORD *)a1 = 136318722;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 1024;
  *(_DWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 28) = 1024;
  *(_DWORD *)(a1 + 30) = a5;
  *(_WORD *)(a1 + 34) = 1024;
  *(_DWORD *)(a1 + 36) = a6;
  *(_WORD *)(a1 + 40) = 1024;
  *(_DWORD *)(a1 + 42) = a7;
  *(_WORD *)(a1 + 46) = 2080;
  *(void *)(a1 + 48) = a8;
  *(_WORD *)(a1 + 56) = 1024;
  *(_DWORD *)(a1 + 58) = a9;
  *(_WORD *)(a1 + 62) = 1024;
  *(_DWORD *)(a1 + 64) = a10;
  *(_WORD *)(a1 + 68) = 1024;
  *(_DWORD *)(a1 + 70) = a11;
  *(_WORD *)(a1 + 74) = 1024;
  *(_DWORD *)(a1 + 76) = a12;
  *(_WORD *)(a1 + 80) = 1024;
  *(_DWORD *)(a1 + 82) = a13;
  *(_WORD *)(a1 + 86) = 1024;
  *(_DWORD *)(a1 + 88) = a14;
  *(_WORD *)(a1 + 92) = 1024;
  *(_DWORD *)(a1 + 94) = a15;
  *(_WORD *)(a1 + 98) = 1024;
  *(_DWORD *)(a1 + 100) = a16;
  return result;
}

void sub_1C3E4(uint64_t a1, _DWORD *a2, int a3, void *a4, uint64_t a5, uint64_t a6, const void *a7)
{
  uint64_t v57 = 0;
  CFMutableDictionaryRef v58 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  memset(v60, 0, sizeof(v60));
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 8);
  CFDictionaryRef v51 = 0;
  if (!*(void *)a1) {
    return;
  }
  *(_DWORD *)(a1 + 40) = 1;
  *(_DWORD *)(a1 + 28) = 0;
  if (!qword_70178) {
    return;
  }
  uint64_t v13 = a2;
  uint64_t v48 = v8;
  int v54 = 0;
  memset(v59, 0, sizeof(v59));
  if (a2) {
    BOOL v14 = a3 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  int v15 = !v14;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  int v17 = Mutable;
  CFMutableDictionaryRef v52 = Mutable;
  if (a6)
  {
    uint64_t v44 = a4;
    int v18 = v15;
    if (*(_DWORD *)(a6 + 72))
    {
      uint64_t v19 = *(unsigned __int8 *)(a6 + 92);
      if (*(unsigned char *)(a6 + 92))
      {
        uint64_t v20 = *(unsigned int *)(a6 + 96);
        uint64_t v21 = *(unsigned int *)(a6 + 100);
        if (*(_DWORD *)(a6 + 76) || *(_DWORD *)(a6 + 80) || *(_DWORD *)(a6 + 84) || *(_DWORD *)(a6 + 88))
        {
          sub_53E2C(Mutable, @"DelegatedPrefix", (void *)(a6 + 76));
          sub_53F94(v17, @"DelegatedPrefixLength", v19);
          sub_53F94(v17, @"DelegatedPrefixValidLifetime", v20);
          sub_53F94(v17, @"DelegatedPrefixPreferredLifetime", v21);
        }
      }
    }
    int v15 = v18;
    if (v18)
    {
      uint64_t v23 = *(void *)(a6 + 56);
      uint64_t v22 = *(const void **)(a6 + 64);
      if (v22)
      {
        CFDictionarySetValue(v17, @"NAT64Prefix", v22);
        int v46 = 0;
        a4 = v44;
      }
      else
      {
        a4 = v44;
        if (v23)
        {
          int v46 = 0;
        }
        else
        {
          if (*(_DWORD *)(a6 + 48))
          {
            int v46 = *(_DWORD *)(a6 + 48);
            CFDictionarySetValue(v17, kSCPropNetIPv6PerformPLATDiscovery, kCFBooleanTrue);
          }
          else
          {
            int v46 = 0;
          }
          uint64_t v23 = 0;
        }
      }
      goto LABEL_29;
    }
    int v24 = 0;
    int v46 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    int v46 = 0;
    uint64_t v23 = 0;
    int v24 = 0;
    if (v15)
    {
LABEL_29:
      int v43 = v15;
      uint64_t v45 = v23;
      int v25 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      int v26 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      if (a3 >= 1)
      {
        uint64_t v27 = a3;
        do
        {
          LODWORD(valuePtr) = 0;
          CFStringRef v28 = sub_53DC0(v13);
          CFArrayAppendValue(v25, v28);
          CFRelease(v28);
          LODWORD(valuePtr) = v13[4];
          CFNumberRef v29 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          CFArrayAppendValue(v26, v29);
          CFRelease(v29);
          v13 += 8;
          --v27;
        }
        while (v27);
      }
      CFDictionarySetValue(v17, kSCPropNetIPv6Addresses, v25);
      CFRelease(v25);
      CFDictionarySetValue(v17, kSCPropNetIPv6PrefixLength, v26);
      CFRelease(v26);
      if (a4) {
        sub_53E2C(v17, kSCPropNetIPv6Router, a4);
      }
      int v24 = sub_1CC28(a1, a6, (CFDictionaryRef *)&v55);
      uint64_t v57 = v24;
      uint64_t v23 = v45;
      int v15 = v43;
    }
  }
  CFDictionarySetValue(v17, kSCPropInterfaceName, *(const void **)(v7 + 16));
  if ((sub_9384(v48) & 8) == 0)
  {
    CFDictionarySetValue(v17, kSCPropConfirmedInterfaceName, *(const void **)(v7 + 16));
    if (a7) {
      CFDictionarySetValue(v17, @"NetworkSignature", a7);
    }
  }
  if (a6)
  {
    CFMutableDictionaryRef v58 = sub_3B8E4(a6);
    uint64_t v56 = PvDEntityCreateWithInfo(a6);
  }
  int v53 = 0;
  sub_6DE8((uint64_t)v60, (uint64_t)v59, (uint64_t)kSCEntNetIPv6, (uint64_t)v17, &v53);
  if (v23)
  {
    sub_6DE8((uint64_t)v60, (uint64_t)v59, (uint64_t)kSCEntNetIPv4, v23, &v53);
    int v24 = v57;
  }
  sub_6DE8((uint64_t)v60, (uint64_t)v59, (uint64_t)kSCEntNetDNS, (uint64_t)v24, &v53);
  sub_6DE8((uint64_t)v60, (uint64_t)v59, @"DHCPv6", (uint64_t)v58, &v53);
  sub_6DE8((uint64_t)v60, (uint64_t)v59, kSCEntNetCaptivePortal, v55, &v53);
  sub_6DE8((uint64_t)v60, (uint64_t)v59, kSCEntNetPvD, (uint64_t)v56, &v53);
  if (v15)
  {
    BOOL v30 = sub_1CCCC(a1);
    if (!v23 && !v30)
    {
      uint64_t valuePtr = (const void *)kSCPropNetServicePrimaryRank;
      values = (void *)kSCValNetServicePrimaryRankLast;
      CFDictionaryRef v51 = CFDictionaryCreate(0, &valuePtr, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
  }
  sub_6DE8((uint64_t)v60, (uint64_t)v59, (uint64_t)kCFNull, (uint64_t)v51, &v53);
  int v31 = v53;
  uint64_t v32 = sub_B764((CFNullRef *)v60, v59, v53);
  int v54 = v32;
  sub_5EC0((const __SCDynamicStore *)qword_70178, *(CFStringRef *)a1, (const void **)v60, (const __CFDictionary **)v59, v31, *(_DWORD *)(a1 + 36));
  dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
  sub_6DB0((const void **)&v52);
  sub_6DB0((const void **)&v57);
  sub_6DB0((const void **)&v58);
  sub_6DB0((const void **)&v55);
  sub_6DB0((const void **)&v51);
  sub_6DB0((const void **)&v56);
  if (dword_700C0)
  {
    byte_7019C = 1;
    dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
  }
  if (sub_932C(*(_DWORD *)(a1 + 24)) && (*(unsigned char *)v7 & 8) != 0)
  {
    sub_58DC8(*(void *)(v7 + 8));
    sub_FE28();
    *(_DWORD *)v7 &= ~8u;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v33 = _os_log_pack_size();
      __chkstk_darwin(v33);
      __error();
      uint64_t v34 = _os_log_pack_fill();
      uint64_t v35 = sub_9218(*(_DWORD *)(a1 + 24));
      uint64_t v36 = nullsub_1(*(void *)(v7 + 8));
      *(_DWORD *)uint64_t v34 = 136315394;
      *(void *)(v34 + 4) = v35;
      *(_WORD *)(v34 + 12) = 2080;
      *(void *)(v34 + 14) = v36;
      __SC_log_send();
    }
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    double v37 = " [PLATDiscovery]";
    if (!v46) {
      double v37 = "";
    }
    if (v23) {
      uint64_t v38 = " [464XLAT]";
    }
    else {
      uint64_t v38 = v37;
    }
    uint64_t v39 = _os_log_pack_size();
    __chkstk_darwin(v39);
    __error();
    uint64_t v40 = _os_log_pack_fill();
    uint64_t v41 = sub_9218(*(_DWORD *)(a1 + 24));
    uint64_t v42 = nullsub_1(*(void *)(v7 + 8));
    *(_DWORD *)uint64_t v40 = 136315906;
    *(void *)(v40 + 4) = v41;
    *(_WORD *)(v40 + 12) = 2080;
    *(void *)(v40 + 14) = v42;
    *(_WORD *)(v40 + 22) = 2112;
    *(void *)(v40 + 24) = v32;
    *(_WORD *)(v40 + 32) = 2080;
    *(void *)(v40 + 34) = v38;
    __SC_log_send();
  }
  sub_6DB0((const void **)&v54);
}

__CFDictionary *sub_1CC28(uint64_t a1, uint64_t a2, CFDictionaryRef *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v6 = sub_5990(*(void *)(a1 + 16), *(const void **)a1, 1);
  memset(&v15, 0, sizeof(v15));
  uint64_t v16 = 0;
  if (v6 && *((_DWORD *)v6 + 10) && !*((_DWORD *)v6 + 7)) {
    ((void (*)(CFTypeRef *, uint64_t, __CFString *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_48A8)(v6, 13, &v15, v7, v8, v9, v10, v11);
  }
  uint64_t v12 = nullsub_1(v5);
  uint64_t v13 = sub_C450(v12, (uint64_t)&v15, a2);
  *a3 = sub_5B50(&v15, a2);
  return v13;
}

BOOL sub_1CCCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16) + 24;
  int v2 = sub_5B24(v1);
  if (v2 < 1)
  {
    return 0;
  }
  else
  {
    int v3 = v2;
    uint64_t v4 = 0;
    BOOL v5 = 1;
    do
    {
      uint64_t v6 = (_DWORD *)sub_5B4C(v1, v4);
      if (v6[6] != 261 && v6[10] && !v6[7]) {
        break;
      }
      uint64_t v4 = (v4 + 1);
      BOOL v5 = (int)v4 < v3;
    }
    while (v3 != v4);
  }
  return v5;
}

void sub_1CD5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if ((*(unsigned char *)(v1 + 2) & 0x40) != 0)
  {
    CFDictionaryRef v7 = 0;
    CFStringRef v8 = kSCEntNetIPv4;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v3 = _os_log_pack_size();
      __chkstk_darwin(v3);
      __error();
      uint64_t v4 = _os_log_pack_fill();
      BOOL v5 = sub_9218(*(_DWORD *)(a1 + 24));
      uint64_t v6 = nullsub_1(*(void *)(v1 + 8));
      *(_DWORD *)uint64_t v4 = 136315394;
      *(void *)(v4 + 4) = v5;
      *(_WORD *)(v4 + 12) = 2080;
      *(void *)(v4 + 14) = v6;
      __SC_log_send();
    }
    sub_5EC0((const __SCDynamicStore *)qword_70178, *(CFStringRef *)a1, (const void **)&v8, &v7, 1, *(_DWORD *)(a1 + 36));
    dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
  }
}

uint64_t sub_1CEE4(uint64_t a1)
{
  return (**(_DWORD **)(a1 + 16) >> 22) & 1;
}

uint64_t sub_1CEF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if ((int)sub_5B24(v1 + 56) < 1)
  {
    uint64_t v5 = 0;
    BOOL v4 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    while (1)
    {
      unsigned int v3 = *(_DWORD *)(sub_5B4C(v1 + 56, v2) + 24) & 0xFFFFFFFE;
      BOOL v4 = v3 != 514;
      if (v3 == 514) {
        break;
      }
      uint64_t v2 = (v2 + 1);
      if ((int)v2 >= (int)sub_5B24(v1 + 56))
      {
        uint64_t v5 = 0;
        goto LABEL_8;
      }
    }
    uint64_t v5 = 1;
  }
LABEL_8:
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v6 = _os_log_pack_size();
    __chkstk_darwin(v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    uint64_t v8 = nullsub_1(*(void *)(v1 + 8));
    uint64_t v9 = "";
    if (v4) {
      uint64_t v9 = "not ";
    }
    *(_DWORD *)uint64_t v7 = 136315394;
    *(void *)(v7 + 4) = v8;
    *(_WORD *)(v7 + 12) = 2080;
    *(void *)(v7 + 14) = v9;
    __SC_log_send();
  }
  return v5;
}

void sub_1D0A4(uint64_t a1, int a2)
{
  uint64_t v7 = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  if (qword_70178)
  {
    memset(v10, 0, sizeof(v10));
    memset(v9, 0, sizeof(v9));
    int v3 = *(_DWORD *)(a1 + 24);
    int v6 = 0;
    if ((v3 & 0x100) != 0)
    {
      if ((*(unsigned char *)(*(void *)(a1 + 16) + 2) & 0x40) == 0) {
        sub_6DE8((uint64_t)v10, (uint64_t)v9, (uint64_t)kSCEntNetIPv4, 0, &v6);
      }
      uint64_t v8 = sub_C074(a1, 0, (CFDictionaryRef *)&v7);
      sub_6DE8((uint64_t)v10, (uint64_t)v9, (uint64_t)kSCEntNetDNS, (uint64_t)v8, &v6);
      sub_6DE8((uint64_t)v10, (uint64_t)v9, kSCEntNetCaptivePortal, v7, &v6);
      sub_6DE8((uint64_t)v10, (uint64_t)v9, (uint64_t)kSCEntNetDHCP, 0, &v6);
      uint64_t v4 = *(void *)(a1 + 16);
      byte_701A4 = 1;
      *(_DWORD *)(v4 + 144) = 1;
      dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
      uint64_t v5 = *(_DWORD **)(a1 + 16);
      byte_701A0 = 1;
      *v5 |= 0x40u;
      dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
    }
    else
    {
      sub_6DE8((uint64_t)v10, (uint64_t)v9, (uint64_t)kSCEntNetIPv6, 0, &v6);
      if ((*(unsigned char *)(*(void *)(a1 + 16) + 2) & 0x40) != 0) {
        sub_6DE8((uint64_t)v10, (uint64_t)v9, (uint64_t)kSCEntNetIPv4, 0, &v6);
      }
      sub_6DE8((uint64_t)v10, (uint64_t)v9, @"DHCPv6", 0, &v6);
      uint64_t v8 = sub_1CC28(a1, 0, (CFDictionaryRef *)&v7);
      sub_6DE8((uint64_t)v10, (uint64_t)v9, (uint64_t)kSCEntNetDNS, (uint64_t)v8, &v6);
      sub_6DE8((uint64_t)v10, (uint64_t)v9, kSCEntNetCaptivePortal, v7, &v6);
      sub_6DE8((uint64_t)v10, (uint64_t)v9, (uint64_t)kCFNull, 0, &v6);
      sub_6DE8((uint64_t)v10, (uint64_t)v9, kSCEntNetPvD, 0, &v6);
    }
    sub_5EC0((const __SCDynamicStore *)qword_70178, *(CFStringRef *)a1, (const void **)v10, (const __CFDictionary **)v9, v6, *(_DWORD *)(a1 + 36));
    dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
    sub_6DB0((const void **)&v8);
    sub_6DB0((const void **)&v7);
    if (dword_700C0)
    {
      byte_7019C = 1;
      dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
    }
  }
}

uint64_t sub_1D384(uint64_t a1)
{
  uint64_t v1 = (const char *)nullsub_1(*(void *)(*(void *)(a1 + 16) + 8));

  return sub_361FC(v1, 1);
}

uint64_t sub_1D3B8(uint64_t a1)
{
  int v2 = sub_58DC8(*(void *)(*(void *)(a1 + 16) + 8));
  sub_3B01C(v2, 0, 0);
  int v3 = (const char *)nullsub_1(*(void *)(*(void *)(a1 + 16) + 8));

  return sub_361FC(v3, 0);
}

CFTypeRef *sub_1D410(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(const void **)(a1 + 48)) != 0) {
    return sub_5990(*(void *)(a1 + 16), v1, (*(_DWORD *)(a1 + 24) >> 8) & 1);
  }
  else {
    return 0;
  }
}

BOOL sub_1D434(uint64_t a1)
{
  return ((**(_DWORD **)(a1 + 16) >> 18) & 1) == 0;
}

void sub_1D448()
{
  byte_70180 = 1;
  dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
}

uint64_t sub_1D464(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 16) + 112) = a2;
  return result;
}

uint64_t sub_1D470(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 16) + 112);
}

uint64_t sub_1D47C(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  unint64_t v5 = a3;
  unint64_t v64 = a2;
  uint64_t v6 = a1;
  int v65 = a4;
  int v66 = a3;
  uint64_t v63 = *(void *)(*(void *)(a1 + 16) + 8);
  int v61 = sub_354D0();
  if (v5)
  {
    uint64_t v59 = v5 >> 16;
    int v7 = v5;
    uint64_t v57 = v5 >> 8;
    CFMutableDictionaryRef v58 = (uint64_t *)(v5 >> 24);
  }
  else
  {
    unsigned int v8 = bswap32(v64);
    if ((v8 & 0x80000000) != 0)
    {
      if (v8 >> 30 == 2)
      {
        CFMutableDictionaryRef v58 = 0;
        uint64_t v59 = 0;
        int v7 = 0xFFFF;
        int v66 = 0xFFFF;
        LOBYTE(v5) = -1;
        uint64_t v57 = 255;
      }
      else
      {
        int v7 = 0xFFFFFF;
        int v66 = 0xFFFFFF;
        LOBYTE(v5) = -1;
        uint64_t v57 = 255;
        CFMutableDictionaryRef v58 = 0;
        uint64_t v59 = 255;
      }
    }
    else
    {
      CFMutableDictionaryRef v58 = 0;
      uint64_t v59 = 0;
      uint64_t v57 = 0;
      LOBYTE(v5) = -1;
      int v66 = 255;
      int v7 = 255;
    }
  }
  unint64_t v62 = v64 >> 24;
  uint64_t v9 = v64 >> 16;
  unint64_t v10 = v64 >> 8;
  if (v4)
  {
    uint64_t v55 = v4 >> 16;
    unint64_t v56 = v4 >> 8;
    int v11 = v64;
  }
  else
  {
    int v11 = v64;
    unsigned int v12 = (v62 << 24) | (BYTE2(v64) << 16) | (BYTE1(v64) << 8) | ~v7;
    LODWORD(v4) = v12 | v64;
    int v65 = v4;
    uint64_t v55 = HIWORD(v12);
    unint64_t v56 = v12 >> 8;
  }
  int v60 = v62;
  int v13 = BYTE2(v64);
  int v14 = BYTE1(v64);
  uint64_t v54 = sub_4220();
  int v53 = _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    unsigned int v49 = BYTE3(v4);
    uint64_t v15 = _os_log_pack_size();
    int v52 = BYTE1(v64);
    uint64_t v50 = &v47;
    __chkstk_darwin(v15);
    int v51 = v7;
    __error();
    uint64_t v48 = _os_log_pack_fill();
    uint64_t v16 = sub_9218(*(_DWORD *)(v6 + 24));
    int v17 = v11;
    char v18 = v10;
    unint64_t v10 = v6;
    char v19 = v9;
    uint64_t v9 = (uint64_t)v16;
    uint64_t v20 = nullsub_1(v63);
    uint64_t v21 = v9;
    LOBYTE(v9) = v19;
    uint64_t v6 = v10;
    LOBYTE(v10) = v18;
    int v11 = v17;
    int v14 = v52;
    sub_1DA80(v48, v21, v20, v17, v52, v13, v60, v5, v57, v59, v58, v4, v56, v55, v49);
    int v7 = v51;
    __SC_log_send();
  }
  if (v61 < 0)
  {
    uint64_t v27 = *__error();
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v28 = _os_log_pack_size();
      __chkstk_darwin(v28);
      __error();
      uint64_t v29 = _os_log_pack_fill();
      uint64_t v30 = nullsub_1(v63);
      int v31 = __error();
      uint64_t v32 = strerror(*v31);
      int v33 = *__error();
      *(_DWORD *)uint64_t v29 = 136315650;
      *(void *)(v29 + 4) = v30;
      *(_WORD *)(v29 + 12) = 2080;
      *(void *)(v29 + 14) = v32;
      *(_WORD *)(v29 + 22) = 1024;
      *(_DWORD *)(v29 + 24) = v33;
      __SC_log_send();
    }
  }
  else
  {
    int v22 = v11;
    int v23 = (v13 << 16) | (v62 << 24) | (v10 << 8) | v11;
    int v24 = v7 & v23;
    int v25 = (void *)(v6 + 100);
    int v26 = (const char *)nullsub_1(v63);
    if ((sub_3655C(v61, v26, v23, &v66, &v65) & 0x80000000) != 0)
    {
      LODWORD(v59) = v22;
      uint64_t v27 = *__error();
      uint64_t v34 = sub_4220();
      int v35 = _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v36 = _os_log_pack_size();
        int v52 = v14;
        CFMutableDictionaryRef v58 = &v47;
        __chkstk_darwin(v36);
        LODWORD(v57) = v13;
        __error();
        uint64_t v37 = _os_log_pack_fill();
        uint64_t v38 = nullsub_1(v63);
        LODWORD(v56) = v35;
        char v39 = v10;
        unint64_t v10 = v6;
        char v40 = v9;
        uint64_t v9 = v38;
        uint64_t v41 = __error();
        uint64_t v42 = strerror(*v41);
        uint64_t v55 = v34;
        int v43 = v42;
        int v44 = *__error();
        *(_DWORD *)uint64_t v37 = 136316674;
        *(void *)(v37 + 4) = v9;
        LOBYTE(v9) = v40;
        uint64_t v6 = v10;
        LOBYTE(v10) = v39;
        *(_WORD *)(v37 + 12) = 1024;
        *(_DWORD *)(v37 + 14) = v59;
        *(_WORD *)(v37 + 18) = 1024;
        *(_DWORD *)(v37 + 20) = v52;
        *(_WORD *)(v37 + 24) = 1024;
        *(_DWORD *)(v37 + 26) = v57;
        *(_WORD *)(v37 + 30) = 1024;
        *(_DWORD *)(v37 + 32) = v60;
        *(_WORD *)(v37 + 36) = 2080;
        *(void *)(v37 + 38) = v43;
        *(_WORD *)(v37 + 46) = 1024;
        *(_DWORD *)(v37 + 48) = v44;
        __SC_log_send();
      }
    }
    else
    {
      uint64_t v27 = 0;
    }
    *int v25 = 0;
    v25[1] = 0;
    *(unsigned char *)(v6 + 100) = v64;
    *(unsigned char *)(v6 + 101) = v10;
    *(unsigned char *)(v6 + 102) = v9;
    *(unsigned char *)(v6 + 103) = v62;
    *(_DWORD *)(v6 + 104) = v66;
    *(_DWORD *)(v6 + 108) = v24;
    *(_DWORD *)(v6 + 112) = v65;
    close(v61);
  }
  *(CFAbsoluteTime *)(v6 + 144) = timer_get_current_time();
  *(_DWORD *)(v6 + 160) = 0;
  int v45 = sub_58DC8(v63);
  sub_3B01C(v45, 0, v65);
  byte_70180 = 1;
  dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
  return v27;
}

double sub_1DA80(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15)
{
  *(void *)&double result = 136318466;
  *(_DWORD *)a1 = 136318466;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 1024;
  *(_DWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 28) = 1024;
  *(_DWORD *)(a1 + 30) = a5;
  *(_WORD *)(a1 + 34) = 1024;
  *(_DWORD *)(a1 + 36) = a6;
  *(_WORD *)(a1 + 40) = 1024;
  *(_DWORD *)(a1 + 42) = a7;
  *(_WORD *)(a1 + 46) = 1024;
  *(_DWORD *)(a1 + 48) = a8;
  *(_WORD *)(a1 + 52) = 1024;
  *(_DWORD *)(a1 + 54) = a9;
  *(_WORD *)(a1 + 58) = 1024;
  *(_DWORD *)(a1 + 60) = a10;
  *(_WORD *)(a1 + 64) = 1024;
  *(_DWORD *)(a1 + 66) = a11;
  *(_WORD *)(a1 + 70) = 1024;
  *(_DWORD *)(a1 + 72) = a12;
  *(_WORD *)(a1 + 76) = 1024;
  *(_DWORD *)(a1 + 78) = a13;
  *(_WORD *)(a1 + 82) = 1024;
  *(_DWORD *)(a1 + 84) = a14;
  *(_WORD *)(a1 + 88) = 1024;
  *(_DWORD *)(a1 + 90) = a15;
  return result;
}

uint64_t sub_1DB14(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 100);
  unsigned int v2 = *(_DWORD *)(a1 + 100);
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
    int v6 = *(_DWORD *)(a1 + 112);
    *uint64_t v1 = 0;
    v1[1] = 0;
    unsigned int v7 = v2 & 0xFF000000 | (BYTE2(v2) << 16) | (BYTE1(v2) << 8) | v2;
    if (sub_1DD38(v4, v7))
    {
      uint64_t v8 = 0;
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        int v19 = BYTE2(v2);
        unsigned int v20 = HIBYTE(v2);
        int v9 = v2;
        int v10 = BYTE1(v2);
        uint64_t v11 = _os_log_pack_size();
        v18[1] = v18;
        __chkstk_darwin(v11);
        __error();
        uint64_t v12 = _os_log_pack_fill();
        int v13 = sub_9218(*(_DWORD *)(a1 + 24));
        uint64_t v14 = nullsub_1(v5);
        *(_DWORD *)uint64_t v12 = 136316418;
        *(void *)(v12 + 4) = v13;
        *(_WORD *)(v12 + 12) = 2080;
        *(void *)(v12 + 14) = v14;
        *(_WORD *)(v12 + 22) = 1024;
        *(_DWORD *)(v12 + 24) = v9;
        *(_WORD *)(v12 + 28) = 1024;
        *(_DWORD *)(v12 + 30) = v10;
        *(_WORD *)(v12 + 34) = 1024;
        *(_DWORD *)(v12 + 36) = v19;
        *(_WORD *)(v12 + 40) = 1024;
        *(_DWORD *)(v12 + 42) = v20;
        __SC_log_send();
      }
      uint64_t v15 = (const char *)nullsub_1(v5);
      uint64_t v8 = sub_1DDA8(v15, v7);
    }
    int v16 = sub_58DC8(v5);
    sub_3B01C(v16, v7, v6);
  }
  else
  {
    uint64_t v8 = 0;
  }
  byte_70180 = 1;
  dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
  return v8;
}

uint64_t sub_1DD38(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 24;
  if ((int)sub_5B24(a1 + 24) < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t result = sub_5B4C(v3, v4);
    if (*(_DWORD *)(result + 100) == a2) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if ((int)v4 >= (int)sub_5B24(v3)) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DDA8(const char *a1, int a2)
{
  int v4 = sub_354D0();
  if (v4 < 0)
  {
    uint64_t v11 = *__error();
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v12 = _os_log_pack_fill();
      int v13 = __error();
      uint64_t v14 = strerror(*v13);
      int v15 = *__error();
      *(_DWORD *)uint64_t v12 = 136315650;
      *(void *)(v12 + 4) = a1;
      *(_WORD *)(v12 + 12) = 2080;
      *(void *)(v12 + 14) = v14;
      *(_WORD *)(v12 + 22) = 1024;
      *(_DWORD *)(v12 + 24) = v15;
      __SC_log_send();
    }
  }
  else
  {
    int v5 = v4;
    uint64_t v6 = HIBYTE(a2);
    int v7 = BYTE2(a2);
    int v8 = BYTE1(a2);
    int v9 = a2;
    if ((sub_364C8(v4, a1, a2 & 0xFF000000 | (BYTE2(a2) << 16) | (BYTE1(a2) << 8) | a2) & 0x80000000) != 0)
    {
      uint64_t v11 = *__error();
      uint64_t v16 = sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        uint64_t v24 = v6;
        int v25 = &v23;
        __chkstk_darwin();
        __error();
        uint64_t v17 = _os_log_pack_fill();
        char v18 = __error();
        int v19 = strerror(*v18);
        uint64_t v23 = v16;
        unsigned int v20 = v19;
        int v21 = *__error();
        *(_DWORD *)uint64_t v17 = 136316674;
        *(void *)(v17 + 4) = a1;
        *(_WORD *)(v17 + 12) = 1024;
        *(_DWORD *)(v17 + 14) = v9;
        *(_WORD *)(v17 + 18) = 1024;
        *(_DWORD *)(v17 + 20) = v8;
        *(_WORD *)(v17 + 24) = 1024;
        *(_DWORD *)(v17 + 26) = v7;
        *(_WORD *)(v17 + 30) = 1024;
        *(_DWORD *)(v17 + 32) = v24;
        *(_WORD *)(v17 + 36) = 2080;
        *(void *)(v17 + 38) = v20;
        *(_WORD *)(v17 + 46) = 1024;
        *(_DWORD *)(v17 + 48) = v21;
        __SC_log_send();
      }
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        int v25 = &v23;
        __chkstk_darwin();
        __error();
        uint64_t v10 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v10 = 136316162;
        *(void *)(v10 + 4) = a1;
        *(_WORD *)(v10 + 12) = 1024;
        *(_DWORD *)(v10 + 14) = a2;
        *(_WORD *)(v10 + 18) = 1024;
        *(_DWORD *)(v10 + 20) = BYTE1(a2);
        *(_WORD *)(v10 + 24) = 1024;
        *(_DWORD *)(v10 + 26) = BYTE2(a2);
        *(_WORD *)(v10 + 30) = 1024;
        *(_DWORD *)(v10 + 32) = HIBYTE(a2);
        __SC_log_send();
      }
      uint64_t v11 = 0;
    }
    close(v5);
  }
  return v11;
}

uint64_t sub_1E150(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 25) & 2) != 0) {
    return *(unsigned int *)(a1 + 108);
  }
  else {
    return 0;
  }
}

void sub_1E168(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (((*(_DWORD *)v2 >> 22) & 1) != a2)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      uint64_t v6 = nullsub_1(*(void *)(v2 + 8));
      int v7 = "";
      if (!a2) {
        int v7 = "not ";
      }
      *(_DWORD *)uint64_t v5 = 136315394;
      *(void *)(v5 + 4) = v6;
      *(_WORD *)(v5 + 12) = 2080;
      *(void *)(v5 + 14) = v7;
      __SC_log_send();
    }
    *(_DWORD *)uint64_t v2 = *(_DWORD *)v2 & 0xFFBFFFFF | ((a2 != 0) << 22);
    byte_70180 = 1;
    dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
  }
}

uint64_t sub_1E2F4(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (((*(_DWORD *)v2 >> 21) & 1) != a2)
  {
    *(_DWORD *)uint64_t v2 = *(_DWORD *)v2 & 0xFFDFFFFF | ((a2 != 0) << 21);
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      uint64_t v6 = nullsub_1(*(void *)(v2 + 8));
      int v7 = "";
      if (!a2) {
        int v7 = "not ";
      }
      *(_DWORD *)uint64_t v5 = 136315394;
      *(void *)(v5 + 4) = v6;
      *(_WORD *)(v5 + 12) = 2080;
      *(void *)(v5 + 14) = v7;
      return __SC_log_send();
    }
  }
  return result;
}

uint64_t sub_1E460(uint64_t a1)
{
  return (**(_DWORD **)(a1 + 16) >> 20) & 1;
}

uint64_t sub_1E470(uint64_t a1)
{
  return (**(_DWORD **)(a1 + 16) >> 19) & ~(**(_DWORD **)(a1 + 16) >> 20) & 1;
}

uint64_t sub_1E488(uint64_t a1)
{
  return (**(_DWORD **)(a1 + 16) >> 19) & 1;
}

uint64_t sub_1E498(uint64_t result)
{
  **(_DWORD **)(result + 16) &= 0xFFE7FFFF;
  return result;
}

uint64_t sub_1E4AC(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 25) & 2) != 0) {
    return *(unsigned int *)(a1 + 112);
  }
  else {
    return 0;
  }
}

BOOL sub_1E4C4(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 25) & 1) != 0 && *(_DWORD *)(a1 + 100) == *(_DWORD *)(a1 + 88);
}

uint64_t sub_1E4E8(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 25)) {
    *(_DWORD *)(result + 88) = a2;
  }
  return result;
}

uint64_t sub_1E4F8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 25)) {
    return *(unsigned int *)(a1 + 88);
  }
  else {
    return 0;
  }
}

uint64_t sub_1E510(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 25)) {
    *(_DWORD *)(result + 92) = a2;
  }
  return result;
}

uint64_t sub_1E520(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 25)) {
    return *(unsigned int *)(a1 + 92);
  }
  else {
    return 0;
  }
}

uint64_t sub_1E538(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 25)) {
    *(_DWORD *)(result + 96) = a2;
  }
  return result;
}

uint64_t sub_1E548(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 25)) {
    return *(unsigned int *)(a1 + 96);
  }
  else {
    return 0;
  }
}

uint64_t sub_1E560(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)(a1 + 116) >> 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1E57C(uint64_t result)
{
  if (*(unsigned char *)(result + 25)) {
    *(_DWORD *)(result + 116) |= 2u;
  }
  return result;
}

uint64_t sub_1E594(uint64_t result)
{
  if (*(unsigned char *)(result + 25)) {
    *(_DWORD *)(result + 116) |= 7u;
  }
  return result;
}

uint64_t sub_1E5AC(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 16);
}

uint64_t sub_1E5B8(uint64_t a1)
{
  return (**(_DWORD **)(a1 + 16) >> 4) & 1;
}

uint64_t sub_1E5C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t sub_1E5D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 25)) {
    return *(unsigned int *)(a1 + 100);
  }
  else {
    return 0;
  }
}

uint64_t sub_1E5E8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 25)) {
    return *(unsigned int *)(a1 + 104);
  }
  else {
    return 0;
  }
}

__n128 sub_1E600(uint64_t a1, __n128 *a2, int a3)
{
  if ((*(unsigned char *)(a1 + 25) & 2) != 0)
  {
    __n128 result = *a2;
    *(__n128 *)(a1 + 88) = *a2;
    *(_DWORD *)(a1 + 104) = a3;
  }
  return result;
}

__n128 sub_1E618(uint64_t a1, __n128 *a2, _DWORD *a3)
{
  if ((*(unsigned char *)(a1 + 25) & 2) != 0)
  {
    __n128 result = *(__n128 *)(a1 + 88);
    *a2 = result;
    *a3 = *(_DWORD *)(a1 + 104);
  }
  return result;
}

uint64_t sub_1E634(uint64_t a1, _OWORD *a2, int a3, int a4, int a5, int a6)
{
  if ((*(unsigned char *)(a1 + 25) & 2) == 0) {
    return 22;
  }
  uint64_t v41 = a2;
  uint64_t v12 = *(void *)(*(void *)(a1 + 16) + 8);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v13 = _os_log_pack_size();
    int v40 = a6;
    uint64_t v39 = (uint64_t)&v39;
    __chkstk_darwin(v13);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    int v15 = sub_9218(*(_DWORD *)(a1 + 24));
    int v16 = a4;
    int v17 = a5;
    uint64_t v18 = v12;
    uint64_t v19 = nullsub_1(v12);
    unsigned int v20 = inet_ntop(30, v41, v42, 0x2Eu);
    *(_DWORD *)uint64_t v14 = 136315906;
    *(void *)(v14 + 4) = v15;
    *(_WORD *)(v14 + 12) = 2080;
    *(void *)(v14 + 14) = v19;
    uint64_t v12 = v18;
    a5 = v17;
    a4 = v16;
    *(_WORD *)(v14 + 22) = 2080;
    *(void *)(v14 + 24) = v20;
    *(_WORD *)(v14 + 32) = 1024;
    *(_DWORD *)(v14 + 34) = a3;
    a6 = v40;
    __SC_log_send();
  }
  int v21 = sub_36628();
  if (v21 < 0)
  {
    uint64_t v24 = v12;
    uint64_t v6 = *__error();
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v25 = _os_log_pack_size();
      __chkstk_darwin(v25);
      __error();
      uint64_t v26 = _os_log_pack_fill();
      uint64_t v27 = nullsub_1(v24);
      uint64_t v28 = __error();
      uint64_t v29 = strerror(*v28);
      int v30 = *__error();
      *(_DWORD *)uint64_t v26 = 136315650;
      *(void *)(v26 + 4) = v27;
      *(_WORD *)(v26 + 12) = 2080;
      *(void *)(v26 + 14) = v29;
      *(_WORD *)(v26 + 22) = 1024;
      *(_DWORD *)(v26 + 24) = v30;
      __SC_log_send();
    }
  }
  else
  {
    int v22 = v21;
    uint64_t v23 = (const char *)nullsub_1(v12);
    if ((sub_38ABC(v22, v23, v41, 0, a3, a4, a5, a6) & 0x80000000) != 0)
    {
      uint64_t v31 = v12;
      uint64_t v6 = *__error();
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v32 = _os_log_pack_size();
        __chkstk_darwin(v32);
        __error();
        uint64_t v33 = _os_log_pack_fill();
        uint64_t v34 = nullsub_1(v31);
        int v35 = __error();
        uint64_t v36 = strerror(*v35);
        int v37 = *__error();
        *(_DWORD *)uint64_t v33 = 136315650;
        *(void *)(v33 + 4) = v34;
        *(_WORD *)(v33 + 12) = 2080;
        *(void *)(v33 + 14) = v36;
        *(_WORD *)(v33 + 22) = 1024;
        *(_DWORD *)(v33 + 24) = v37;
        __SC_log_send();
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    close(v22);
  }
  return v6;
}

uint64_t sub_1EA3C(uint64_t result, _DWORD *a2, int a3)
{
  if ((*(unsigned char *)(result + 25) & 2) != 0)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(*(void *)(result + 16) + 8);
    if (*a2 || a2[1] || a2[2] || a2[3])
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v7 = _os_log_pack_size();
        __chkstk_darwin(v7);
        __error();
        uint64_t v8 = _os_log_pack_fill();
        int v9 = sub_9218(*(_DWORD *)(v5 + 24));
        uint64_t v10 = nullsub_1(v6);
        uint64_t v11 = inet_ntop(30, a2, v21, 0x2Eu);
        *(_DWORD *)uint64_t v8 = 136315906;
        *(void *)(v8 + 4) = v9;
        *(_WORD *)(v8 + 12) = 2080;
        *(void *)(v8 + 14) = v10;
        *(_WORD *)(v8 + 22) = 2080;
        *(void *)(v8 + 24) = v11;
        *(_WORD *)(v8 + 32) = 1024;
        *(_DWORD *)(v8 + 34) = a3;
        __SC_log_send();
      }
      int v12 = sub_36628();
      if (v12 < 0)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        __n128 result = __SC_log_enabled();
        if (result)
        {
          uint64_t v15 = _os_log_pack_size();
          __chkstk_darwin(v15);
          __error();
          uint64_t v16 = _os_log_pack_fill();
          uint64_t v17 = nullsub_1(v6);
          uint64_t v18 = __error();
          uint64_t v19 = strerror(*v18);
          int v20 = *__error();
          *(_DWORD *)uint64_t v16 = 136315650;
          *(void *)(v16 + 4) = v17;
          *(_WORD *)(v16 + 12) = 2080;
          *(void *)(v16 + 14) = v19;
          *(_WORD *)(v16 + 22) = 1024;
          *(_DWORD *)(v16 + 24) = v20;
          return __SC_log_send();
        }
      }
      else
      {
        int v13 = v12;
        uint64_t v14 = (const char *)nullsub_1(v6);
        sub_38684(v13, v14, a2);
        return close(v13);
      }
    }
  }
  return result;
}

uint64_t sub_1ED00(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 16) + 96);
  if (result) {
    return sub_2E96C(result);
  }
  return result;
}

uint64_t sub_1ED14(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 16) + 96);
  if (result) {
    return sub_2EA04(result);
  }
  return result;
}

uint64_t sub_1ED28(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

BOOL sub_1ED30(uint64_t a1)
{
  return (*(_WORD *)(*(void *)(a1 + 16) + 2) & 1) == 0;
}

uint64_t sub_1ED44(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(unsigned __int8 **)(*(void *)(a1 + 16) + 8);
  int v5 = sub_9368((uint64_t)v4);
  if (!v5) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 + 96);
  if (!v7 || ((v8 = sub_2E9FC(*(void *)(v6 + 96))) != 0 ? (BOOL v9 = v8 == 0xFFFF) : (BOOL v9 = 1), v9))
  {
    int v5 = 0;
    goto LABEL_9;
  }
  int v5 = sub_58CB4(v4);
  if (!v5)
  {
LABEL_14:
    uint64_t v10 = 0;
    if (!a2) {
      return v10;
    }
    goto LABEL_10;
  }
  int v5 = WiFiInfoAllowSharingDeviceType(v7);
LABEL_9:
  uint64_t v10 = 1;
  if (a2) {
LABEL_10:
  }
    *a2 = v5;
  return v10;
}

uint64_t remove_unused_ip(const char *a1, int a2)
{
  uint64_t result = sub_1EF8C(a1, 0);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = sub_1DD38(result, a2 & 0xFF000000 | (BYTE2(a2) << 16) | (BYTE1(a2) << 8) | a2);
    if (!result)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v6 = _os_log_pack_size();
        __chkstk_darwin(v6);
        __error();
        uint64_t v7 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v7 = 136316162;
        *(void *)(v7 + 4) = a1;
        *(_WORD *)(v7 + 12) = 1024;
        *(_DWORD *)(v7 + 14) = a2;
        *(_WORD *)(v7 + 18) = 1024;
        *(_DWORD *)(v7 + 20) = BYTE1(a2);
        *(_WORD *)(v7 + 24) = 1024;
        *(_DWORD *)(v7 + 26) = BYTE2(a2);
        *(_WORD *)(v7 + 30) = 1024;
        *(_DWORD *)(v7 + 32) = HIBYTE(a2);
        __SC_log_send();
      }
      int v8 = (const char *)nullsub_1(*(void *)(v5 + 8));
      return sub_1DDA8(v8, a2 & 0xFF000000 | (BYTE2(a2) << 16) | (BYTE1(a2) << 8) | a2);
    }
  }
  return result;
}

uint64_t sub_1EF8C(const char *a1, _DWORD *a2)
{
  if ((int)sub_5B24(&unk_70150) < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = sub_5B4C(&unk_70150, v4);
    uint64_t v6 = (const char *)nullsub_1(*(void *)(v5 + 8));
    if (!strcmp(v6, a1)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if ((int)v4 >= (int)sub_5B24(&unk_70150)) {
      return 0;
    }
  }
  if (a2) {
    *a2 = v4;
  }
  return v5;
}

CFIndex sub_1F02C(CFIndex result, in_addr *a2)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = (const void *)result;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(v3) != TypeID) {
    return 3;
  }
  CFDataRef Value = CFDictionaryGetValue((CFDictionaryRef)v3, kSCEntNetIPv4);
  if (Value)
  {
    uint64_t v6 = Value;
    BOOL v7 = 0;
  }
  else
  {
    int v8 = CFDictionaryGetValue((CFDictionaryRef)v3, kSCEntNetIPv6);
    BOOL v7 = v8 != 0;
    if (v8) {
      uint64_t v6 = v8;
    }
    else {
      uint64_t v6 = v3;
    }
  }
  CFTypeID v9 = CFDictionaryGetTypeID();
  if (CFGetTypeID(v6) != v9 || v6 == 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11);
      __error();
      int v12 = (_DWORD *)_os_log_pack_fill();
      if (v7) {
        int v13 = 54;
      }
      else {
        int v13 = 52;
      }
      _DWORD *v12 = 67109120;
      v12[1] = v13;
      __SC_log_send();
      return 3;
    }
    return 3;
  }
  uint64_t result = CFDictionaryGetCount((CFDictionaryRef)v6);
  if (result)
  {
    if (v7)
    {
      return sub_1FA14((const __CFDictionary *)v6, (uint64_t)a2);
    }
    else
    {
      return sub_1F290((const __CFDictionary *)v6, a2);
    }
  }
  else
  {
    if (v7) {
      int v14 = 512;
    }
    else {
      int v14 = 256;
    }
    a2->s_addr = v14;
  }
  return result;
}

uint64_t sub_1F290(const __CFDictionary *a1, in_addr *a2)
{
  CFDataRef Value = CFDictionaryGetValue(a1, kSCPropNetIPv4ConfigMethod);
  if (sub_268F0(Value, (int *)a2))
  {
    uint64_t result = 0;
    switch(a2->s_addr)
    {
      case 0x101u:
      case 0x104u:
      case 0x106u:
        v34[0].s_addr = 0;
        uint64_t v33 = 0;
        if (!sub_26AE0(a1, kSCPropNetIPv4Addresses, v34)) {
          return 3;
        }
        if (v34[0].s_addr)
        {
          CFStringRef v6 = kSCPropNetIPv4SubnetMasks;
          if (CFDictionaryContainsKey(a1, kSCPropNetIPv4SubnetMasks)
            && !sub_26AE0(a1, kSCPropNetIPv4SubnetMasks, (in_addr *)&v33))
          {
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (!__SC_log_enabled()) {
              return 3;
            }
          }
          else
          {
            CFStringRef v6 = kSCPropNetIPv4DestAddresses;
            if (!CFDictionaryContainsKey(a1, kSCPropNetIPv4DestAddresses))
            {
              in_addr_t v7 = 0;
LABEL_23:
              in_addr_t v18 = v33;
              a2[2].s_addr = (in_addr_t)v34[0];
              a2[3].s_addr = v18;
              a2[5].s_addr = v7;
              if (a2->s_addr == 262)
              {
                CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a1, @"FailoverAddressTimeout");
                if (!v22) {
                  return 0;
                }
                CFNumberRef v23 = v22;
                CFTypeID TypeID = CFNumberGetTypeID();
                if (CFGetTypeID(v23) == TypeID)
                {
                  if (CFNumberGetValue(v23, kCFNumberSInt32Type, &a2[7])) {
                    return 0;
                  }
                }
                sub_4220();
                _SC_syslog_os_log_mapping();
                if (!__SC_log_enabled()) {
                  return 0;
                }
                uint64_t v25 = _os_log_pack_size();
                __chkstk_darwin(v25);
                __error();
                *(_WORD *)_os_log_pack_fill() = 0;
              }
              else
              {
                if (a2->s_addr != 257) {
                  return 0;
                }
                CFBooleanRef v19 = (const __CFBoolean *)CFDictionaryGetValue(a1, kSCPropNetIgnoreLinkStatus);
                CFTypeID v20 = CFBooleanGetTypeID();
                if (v19 && CFGetTypeID(v19) == v20) {
                  in_addr_t v21 = CFBooleanGetValue(v19);
                }
                else {
                  in_addr_t v21 = 0;
                }
                a2[6].s_addr = v21;
                CFStringRef v29 = (const __CFString *)CFDictionaryGetValue(a1, kSCPropNetIPv4Router);
                if (!v29) {
                  return 0;
                }
                if (sub_53A68(v29, a2 + 4)) {
                  return 0;
                }
                sub_4220();
                _SC_syslog_os_log_mapping();
                if (!__SC_log_enabled()) {
                  return 0;
                }
                uint64_t v30 = _os_log_pack_size();
                __chkstk_darwin(v30);
                __error();
                uint64_t v31 = _os_log_pack_fill();
                uint64_t v32 = sub_9218(a2->s_addr);
                *(_DWORD *)uint64_t v31 = 136315394;
                *(void *)(v31 + 4) = v32;
                *(_WORD *)(v31 + 12) = 2112;
                *(void *)(v31 + 14) = kSCPropNetIPv4Router;
              }
              __SC_log_send();
              return 0;
            }
            if (sub_26AE0(a1, kSCPropNetIPv4DestAddresses, (in_addr *)&v33 + 1))
            {
              in_addr_t v7 = HIDWORD(v33);
              goto LABEL_23;
            }
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (!__SC_log_enabled()) {
              return 3;
            }
          }
          uint64_t v26 = _os_log_pack_size();
          __chkstk_darwin(v26);
          __error();
          uint64_t v27 = _os_log_pack_fill();
          uint64_t v28 = sub_9218(a2->s_addr);
          *(_DWORD *)uint64_t v27 = 136315394;
          *(void *)(v27 + 4) = v28;
          *(_WORD *)(v27 + 12) = 2112;
          *(void *)(v27 + 14) = v6;
        }
        else
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (!__SC_log_enabled()) {
            return 3;
          }
          uint64_t v15 = _os_log_pack_size();
          __chkstk_darwin(v15);
          __error();
          uint64_t v16 = _os_log_pack_fill();
          uint64_t v17 = sub_9218(a2->s_addr);
          *(_DWORD *)uint64_t v16 = 136315138;
          *(void *)(v16 + 4) = v17;
        }
        __SC_log_send();
        return 3;
      case 0x103u:
        CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(a1, kSCPropNetIPv4DHCPClientID);
        CFTypeID v10 = CFStringGetTypeID();
        if (!v9) {
          return 0;
        }
        if (CFGetTypeID(v9) != v10) {
          return 0;
        }
        int v11 = sub_539E0(v9, (UInt8 *)v34, 256, 0);
        int v12 = v11 - (v11 > 0);
        if (v12 < 1) {
          return 0;
        }
        a2[2].s_addr = v12;
        int v13 = strdup((const char *)v34);
        *(void *)&a2[4].s_addr = v13;
        if (v13) {
          return 0;
        }
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v14 = _os_log_pack_size();
          __chkstk_darwin(v14);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send();
        }
        return 5;
      case 0x105u:
        uint64_t result = 0;
        a2[2].s_addr = 1;
        return result;
      default:
        return result;
    }
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (!__SC_log_enabled()) {
    return 3;
  }
  uint64_t v8 = _os_log_pack_size();
  __chkstk_darwin(v8);
  __error();
  *(_WORD *)_os_log_pack_fill() = 0;
  __SC_log_send();
  return 3;
}

uint64_t sub_1FA14(const __CFDictionary *a1, uint64_t a2)
{
  long long v48 = 0uLL;
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, kSCPropNetIPv6LinkLocalAddress);
  if (sub_53B1C(Value, &v48) && v48 == 254 && (BYTE1(v48) & 0xC0) == 0x80) {
    *(_OWORD *)(a2 + 36) = v48;
  }
  if (!sub_26300(a1, kSCPropNetIPv6EnableCGA, 1)) {
    *(_DWORD *)(a2 + 32) = 1;
  }
  uint64_t v5 = CFDictionaryGetValue(a1, kSCPropNetIPv6ConfigMethod);
  CFTypeID TypeID = CFStringGetTypeID();
  if (!v5 || CFGetTypeID(v5) != TypeID) {
    goto LABEL_66;
  }
  if (!CFEqual(v5, kSCValNetIPv6ConfigMethodManual))
  {
    if (CFEqual(v5, kSCValNetIPv6ConfigMethodAutomatic))
    {
      int v12 = 514;
LABEL_36:
      CFStringRef v20 = 0;
      *(_DWORD *)a2 = v12;
      return (uint64_t)v20;
    }
    if (CFEqual(v5, kSCValNetIPv6ConfigMethodRouterAdvertisement))
    {
      int v12 = 515;
      goto LABEL_36;
    }
    if (CFEqual(v5, kSCValNetIPv6ConfigMethod6to4))
    {
      *(_DWORD *)a2 = 516;
      CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(a1, @"6to4Relay");
      if (!v21) {
        return 0;
      }
      CFStringRef v22 = v21;
      v47.s_addr = 0;
      long long v46 = 0uLL;
      CFTypeID v23 = CFStringGetTypeID();
      if (CFGetTypeID(v22) == v23)
      {
        if (sub_539E0(v22, v49, 256, 0))
        {
          if (inet_aton((const char *)v49, &v47) == 1)
          {
            *(_DWORD *)(a2 + 8) = 1;
            *(in_addr *)(a2 + 16) = v47;
          }
          else if (inet_pton(30, (const char *)v49, &v46) == 1)
          {
            *(_DWORD *)(a2 + 8) = 2;
            *(_OWORD *)(a2 + 16) = v46;
          }
          else
          {
            *(_DWORD *)(a2 + 8) = 3;
            uint64_t v39 = strdup((const char *)v49);
            *(void *)(a2 + 16) = v39;
            if (!v39)
            {
              sub_4220();
              CFStringRef v20 = (const __CFString *)(&dword_4 + 1);
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                uint64_t v42 = _os_log_pack_size();
                __chkstk_darwin(v42);
                __error();
                *(_WORD *)_os_log_pack_fill() = 0;
                CFStringRef v20 = (const __CFString *)(&dword_4 + 1);
                __SC_log_send();
              }
              return (uint64_t)v20;
            }
          }
          return 0;
        }
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          return 3;
        }
      }
      else
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          return 3;
        }
      }
      uint64_t v36 = _os_log_pack_size();
      __chkstk_darwin(v36);
      __error();
      uint64_t v37 = _os_log_pack_fill();
      uint64_t v38 = sub_9218(*(_DWORD *)a2);
      *(_DWORD *)uint64_t v37 = 136315138;
      *(void *)(v37 + 4) = v38;
      __SC_log_send();
      return 3;
    }
    if (CFEqual(v5, kSCValNetIPv6ConfigMethodLinkLocal))
    {
      int v12 = 517;
      goto LABEL_36;
    }
    if (CFEqual(v5, @"DHCPv6PD"))
    {
      *(_DWORD *)a2 = 518;
      CFStringRef v28 = (const __CFString *)CFDictionaryGetValue(a1, @"RequestedPrefix");
      if (!v28) {
        goto LABEL_60;
      }
      CFStringRef v29 = v28;
      CFTypeID v30 = CFStringGetTypeID();
      if (CFGetTypeID(v29) == v30)
      {
        if (sub_53B1C(v29, (void *)(a2 + 8)))
        {
          inet_ntop(30, (const void *)(a2 + 8), (char *)v49, 0x2Eu);
LABEL_60:
          CFStringRef v20 = (const __CFString *)CFDictionaryGetValue(a1, @"RequestedPrefixLength");
          if (v20)
          {
            *(_DWORD *)unsigned int v49 = 0;
            CFTypeID v31 = CFNumberGetTypeID();
            if (CFGetTypeID(v20) == v31)
            {
              if (sub_53C74(v20, v49))
              {
                if (*(_DWORD *)v49 < 0x81u)
                {
                  CFStringRef v20 = 0;
                  *(unsigned char *)(a2 + 24) = v49[0];
                  return (uint64_t)v20;
                }
                sub_4220();
                _SC_syslog_os_log_mapping();
                if (!__SC_log_enabled()) {
                  return 3;
                }
                uint64_t v32 = _os_log_pack_size();
                __chkstk_darwin(v32);
                __error();
                uint64_t v33 = _os_log_pack_fill();
                int v34 = *(_DWORD *)v49;
                *(_DWORD *)uint64_t v33 = 136315650;
                *(void *)(v33 + 4) = "method_info_from_ipv6_dict";
                *(_WORD *)(v33 + 12) = 2112;
                *(void *)(v33 + 14) = @"RequestedPrefixLength";
                *(_WORD *)(v33 + 22) = 1024;
                *(_DWORD *)(v33 + 24) = v34;
                goto LABEL_50;
              }
              sub_4220();
              _SC_syslog_os_log_mapping();
              if (!__SC_log_enabled()) {
                return 3;
              }
            }
            else
            {
              sub_4220();
              _SC_syslog_os_log_mapping();
              if (!__SC_log_enabled()) {
                return 3;
              }
            }
            uint64_t v43 = _os_log_pack_size();
            __chkstk_darwin(v43);
            __error();
            uint64_t v44 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v44 = 136315394;
            *(void *)(v44 + 4) = "method_info_from_ipv6_dict";
            *(_WORD *)(v44 + 12) = 2112;
            *(void *)(v44 + 14) = @"RequestedPrefixLength";
LABEL_50:
            __SC_log_send();
            return 3;
          }
          return (uint64_t)v20;
        }
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          return 3;
        }
      }
      else
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          return 3;
        }
      }
      uint64_t v40 = _os_log_pack_size();
      __chkstk_darwin(v40);
      __error();
      uint64_t v41 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v41 = 136315394;
      *(void *)(v41 + 4) = "method_info_from_ipv6_dict";
      *(_WORD *)(v41 + 12) = 2112;
      *(void *)(v41 + 14) = @"RequestedPrefix";
      goto LABEL_50;
    }
LABEL_66:
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return 3;
    }
    uint64_t v35 = _os_log_pack_size();
    __chkstk_darwin(v35);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
    return 3;
  }
  *(_DWORD *)a2 = 513;
  *(_OWORD *)unsigned int v49 = 0uLL;
  LODWORD(v46) = 0;
  in_addr_t v7 = CFDictionaryGetValue(a1, kSCPropNetIPv6Addresses);
  CFTypeID v8 = CFArrayGetTypeID();
  if (v7 && CFGetTypeID(v7) != v8) {
    in_addr_t v7 = 0;
  }
  CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(a1, kSCPropNetIPv6PrefixLength);
  CFTypeID v10 = CFArrayGetTypeID();
  if (v9)
  {
    if (CFGetTypeID(v9) == v10) {
      CFArrayRef v11 = v9;
    }
    else {
      CFArrayRef v11 = 0;
    }
    if (!v7)
    {
LABEL_32:
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled()) {
        goto LABEL_46;
      }
      return 3;
    }
  }
  else
  {
    CFArrayRef v11 = 0;
    if (!v7) {
      goto LABEL_32;
    }
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v7);
  if (!Count) {
    goto LABEL_32;
  }
  uint64_t v14 = Count;
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v7, 0);
  if ((sub_53B1C(ValueAtIndex, v49) & 1) == 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled()) {
      goto LABEL_46;
    }
    return 3;
  }
  if (v11)
  {
    if (v14 != CFArrayGetCount(v11))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
LABEL_46:
        uint64_t v24 = _os_log_pack_size();
        __chkstk_darwin(v24);
        __error();
LABEL_49:
        uint64_t v26 = _os_log_pack_fill();
        uint64_t v27 = sub_9218(*(_DWORD *)a2);
        *(_DWORD *)uint64_t v26 = 136315138;
        *(void *)(v26 + 4) = v27;
        goto LABEL_50;
      }
      return 3;
    }
    uint64_t v16 = CFArrayGetValueAtIndex(v11, 0);
    if (!sub_2654C(v16) || !CFNumberGetValue((CFNumberRef)v16, kCFNumberIntType, &v46))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v25 = _os_log_pack_size();
        __chkstk_darwin(v25);
        __error();
        goto LABEL_49;
      }
      return 3;
    }
  }
  if (v14 >= 2)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v17 = _os_log_pack_size();
      __chkstk_darwin(v17);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      CFBooleanRef v19 = sub_9218(*(_DWORD *)a2);
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v18 + 4) = v19;
      __SC_log_send();
    }
  }
  CFStringRef v20 = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v49;
  *(_DWORD *)(a2 + 24) = v46;
  return (uint64_t)v20;
}

uint64_t sub_20714()
{
  return sub_5B24(&unk_70150);
}

uint64_t sub_20720(const char *a1, _DWORD *a2)
{
  uint64_t v3 = sub_1EF8C(a1, 0);
  if (!v3) {
    return 2;
  }
  uint64_t v4 = v3 + 24;
  if ((int)sub_5B24(v3 + 24) < 1) {
    return 17;
  }
  uint64_t v5 = 0;
  while (1)
  {
    int v6 = *(_DWORD *)(sub_5B4C(v4, v5) + 100);
    if (v6) {
      break;
    }
    uint64_t v5 = (v5 + 1);
    if ((int)v5 >= (int)sub_5B24(v4)) {
      return 17;
    }
  }
  uint64_t result = 0;
  *a2 = v6;
  return result;
}

uint64_t sub_207AC(const char *a1, int a2, vm_address_t *a3, _DWORD *a4)
{
  *a3 = 0;
  *a4 = 0;
  if ((int)sub_5B24(qword_70150) < 1) {
    return 2;
  }
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = sub_5B4C(qword_70150, v8);
    uint64_t v10 = v9;
    if (*a1)
    {
      CFArrayRef v11 = (const char *)nullsub_1(*(void *)(v9 + 8));
      if (strcmp(v11, a1))
      {
        int v12 = 0;
        goto LABEL_16;
      }
      int v12 = 1;
    }
    else
    {
      int v12 = 0;
    }
    uint64_t v13 = v10 + 24;
    if ((int)sub_5B24(v13) >= 1) {
      break;
    }
LABEL_16:
    int v18 = sub_5B24(qword_70150);
    if (!v12)
    {
      uint64_t v8 = (v8 + 1);
      if ((int)v8 < v18) {
        continue;
      }
    }
    if (v12) {
      return 17;
    }
    else {
      return 2;
    }
  }
  uint64_t v14 = 0;
  while (1)
  {
    uint64_t v15 = sub_5B4C(v13, v14);
    if ((*(_DWORD *)(v15 + 24) - 258) <= 2)
    {
      size[0] = 0;
      if (*(_DWORD *)(v15 + 40))
      {
        uint64_t v22 = 0;
        *(_OWORD *)&size[1] = 0u;
        long long v21 = 0u;
        sub_48A8(v15, 13, (__CFDictionary *)&size[1]);
        if (size[3])
        {
          uint64_t v16 = sub_54B38(v21, a2, size, 0);
          if (v16)
          {
            vm_address_t v17 = sub_20A2C(v16, size[0], a4);
            *a3 = v17;
            if (v17) {
              return 0;
            }
          }
        }
      }
    }
    uint64_t v14 = (v14 + 1);
    if ((int)v14 >= (int)sub_5B24(v13)) {
      goto LABEL_16;
    }
  }
}

uint64_t sub_20940(const char *a1, vm_address_t *a2, _DWORD *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v5 = sub_1EF8C(a1, 0);
  if (!v5) {
    return 2;
  }
  uint64_t v13 = 0;
  *(_OWORD *)size = 0u;
  long long v12 = 0u;
  uint64_t v6 = v5 + 24;
  if ((int)sub_5B24(v5 + 24) < 1) {
    return 17;
  }
  uint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = sub_5B4C(v6, v7);
    if ((*(_DWORD *)(v8 + 24) - 258) <= 2)
    {
      if (*(_DWORD *)(v8 + 40))
      {
        uint64_t v13 = 0;
        *(_OWORD *)size = 0u;
        long long v12 = 0u;
        sub_48A8(v8, 13, (__CFDictionary *)size);
        if (LODWORD(size[1]))
        {
          vm_address_t v9 = sub_20A2C((const void *)size[0], SLODWORD(size[1]), a3);
          *a2 = v9;
          if (v9) {
            break;
          }
        }
      }
    }
    uint64_t v7 = (v7 + 1);
    if ((int)v7 >= (int)sub_5B24(v6)) {
      return 17;
    }
  }
  return 0;
}

vm_address_t sub_20A2C(const void *a1, vm_size_t size, _DWORD *a3)
{
  kern_return_t v6;
  vm_address_t result;
  vm_address_t address;

  address = 0;
  *a3 = 0;
  uint64_t v6 = vm_allocate(mach_task_self_, &address, size, 1);
  uint64_t result = 0;
  if (!v6)
  {
    memmove((void *)address, a1, size);
    *a3 = size;
    return address;
  }
  return result;
}

uint64_t sub_20AAC(const char *a1, vm_address_t *a2, _DWORD *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v5 = sub_1EF8C(a1, 0);
  if (!v5) {
    return 2;
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v6 = v5 + 56;
  *(_OWORD *)size = 0u;
  if ((int)sub_5B24(v5 + 56) < 1) {
    return 17;
  }
  uint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = sub_5B4C(v6, v7);
    if ((*(_DWORD *)(v8 + 24) & 0xFFFFFFFE) == 0x202)
    {
      if (*(_DWORD *)(v8 + 40))
      {
        long long v16 = 0u;
        long long v17 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v12 = 0u;
        long long v13 = 0u;
        *(_OWORD *)size = 0u;
        sub_48A8(v8, 14, (__CFDictionary *)size);
        if (LODWORD(size[1]))
        {
          vm_address_t v9 = sub_20A2C((const void *)size[0], SLODWORD(size[1]), a3);
          *a2 = v9;
          if (v9) {
            break;
          }
        }
      }
    }
    uint64_t v7 = (v7 + 1);
    if ((int)v7 >= (int)sub_5B24(v6)) {
      return 17;
    }
  }
  return 0;
}

uint64_t sub_20BA8(const char *a1, const __CFData **a2, _DWORD *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v5 = sub_1EF8C(a1, 0);
  if (!v5) {
    return 2;
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v6 = v5 + 56;
  long long v13 = 0u;
  if ((int)sub_5B24(v5 + 56) < 1) {
    return 17;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 17;
  do
  {
    uint64_t v9 = sub_5B4C(v6, v7);
    if ((*(_DWORD *)(v9 + 24) & 0xFFFFFFFE) == 0x202)
    {
      if (*(_DWORD *)(v9 + 40))
      {
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v13 = 0u;
        sub_48A8(v9, 14, (__CFDictionary *)&v13);
        if (*((void *)&v15 + 1))
        {
          CFDictionaryRef v10 = sub_56CB8(*((uint64_t *)&v15 + 1));
          if (v10)
          {
            CFDictionaryRef v11 = v10;
            *a2 = sub_543CC(v10, a3);
            CFRelease(v11);
            if (*a2) {
              uint64_t v8 = 0;
            }
            else {
              uint64_t v8 = v8;
            }
          }
        }
      }
    }
    uint64_t v7 = (v7 + 1);
  }
  while ((int)v7 < (int)sub_5B24(v6));
  return v8;
}

uint64_t sub_20CC8(const char *a1, uint64_t *a2)
{
  uint64_t v3 = sub_1EF8C(a1, 0);
  if (v3)
  {
    uint64_t v3 = (uint64_t)sub_20D14(v3);
    if (v3) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = 17;
    }
  }
  else
  {
    uint64_t v4 = 2;
  }
  *a2 = v3;
  return v4;
}

__CFDictionary *sub_20D14(uint64_t a1)
{
  uint64_t v45 = *(void *)(a1 + 8);
  uint64_t v1 = a1 + 24;
  v51[0] = a1 + 24;
  v51[1] = a1 + 56;
  v51[2] = 0;
  v50[0] = kSCEntNetIPv4;
  v50[1] = kSCEntNetIPv6;
  theDict = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v2 = 0;
  CFStringRef v47 = (const __CFString *)kSCValNetIPv4ConfigMethodFailover;
  uint64_t v3 = (const void *)kIPConfigurationServiceOptionAPNName;
  uint64_t v4 = v51;
  do
  {
    uint64_t v48 = v2;
    CFAllocatorRef allocator = 0;
    int v5 = sub_5B24(v1);
    if (v5 >= 1)
    {
      int v6 = v5;
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = sub_5B4C(*v4, v7);
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        CFDictionaryRef v10 = Mutable;
        int v11 = *(_DWORD *)(v8 + 24);
        if (!v13 & v12)
        {
          CFStringRef v14 = @"DHCPv6PD";
          switch(v11)
          {
            case 513:
              CFStringRef v14 = kSCValNetIPv6ConfigMethodManual;
              break;
            case 514:
              CFStringRef v14 = kSCValNetIPv6ConfigMethodAutomatic;
              break;
            case 515:
              CFStringRef v14 = kSCValNetIPv6ConfigMethodRouterAdvertisement;
              break;
            case 516:
              CFStringRef v14 = kSCValNetIPv6ConfigMethod6to4;
              break;
            case 517:
              CFStringRef v14 = kSCValNetIPv6ConfigMethodLinkLocal;
              break;
            case 518:
              break;
            default:
              CFStringRef v14 = @"<unknown>";
              break;
          }
        }
        else
        {
          switch(v11)
          {
            case 257:
              CFStringRef v14 = kSCValNetIPv4ConfigMethodManual;
              break;
            case 258:
              CFStringRef v14 = kSCValNetIPv4ConfigMethodBOOTP;
              break;
            case 259:
              CFStringRef v14 = kSCValNetIPv4ConfigMethodDHCP;
              break;
            case 260:
              CFStringRef v14 = kSCValNetIPv4ConfigMethodINFORM;
              break;
            case 261:
              CFStringRef v14 = kSCValNetIPv4ConfigMethodLinkLocal;
              break;
            case 262:
              CFStringRef v14 = v47;
              break;
            default:
              JUMPOUT(0);
          }
        }
        CFDictionarySetValue(Mutable, kSCPropNetIPv4ConfigMethod, v14);
        if (!*(_DWORD *)(v8 + 40) || (CFBooleanRef v15 = kCFBooleanTrue, *(_DWORD *)(v8 + 28))) {
          CFBooleanRef v15 = kCFBooleanFalse;
        }
        CFDictionarySetValue(v10, @"IsPublished", v15);
        if (*(_DWORD *)(v8 + 32)) {
          CFDictionarySetValue(v10, @"IsDynamic", kCFBooleanTrue);
        }
        uint64_t v16 = *(unsigned int *)(v8 + 28);
        if (v16)
        {
          long long v17 = "<unknown>";
          if (v16 <= 0x15) {
            long long v17 = off_68DD0[v16];
          }
          CFStringRef v18 = CFStringCreateWithCString(0, v17, 0x600u);
          CFDictionarySetValue(v10, @"LastFailureStatus", v18);
          CFRelease(v18);
        }
        CFDictionarySetValue(v10, @"ServiceID", *(const void **)v8);
        long long v19 = *(const void **)(v8 + 56);
        if (v19)
        {
          CFStringRef v20 = v10;
          CFStringRef v21 = @"ChildServiceID";
        }
        else
        {
          long long v19 = *(const void **)(v8 + 48);
          if (!v19) {
            goto LABEL_34;
          }
          CFStringRef v20 = v10;
          CFStringRef v21 = @"ParentServiceID";
        }
        CFDictionarySetValue(v20, v21, v19);
LABEL_34:
        uint64_t v22 = (int *)(v8 + 88);
        if (*(unsigned char *)(v8 + 25))
        {
          int v23 = *(_DWORD *)(v8 + 100);
          if (v23) {
            sub_6F28(v10, kSCPropNetIPv4Addresses, v23);
          }
          int v24 = *(_DWORD *)(v8 + 104);
          if (v24) {
            sub_6F28(v10, kSCPropNetIPv4SubnetMasks, v24);
          }
          if (*(unsigned char *)(v8 + 25))
          {
            if (*(_DWORD *)(v8 + 100))
            {
              int v25 = *(_DWORD *)(v8 + 120);
              if (v25)
              {
                sub_53D38(v10, kSCPropNetIPv4Router, v25);
                if ((*(_DWORD *)(v8 + 116) & 4) != 0) {
                  CFBooleanRef v26 = kCFBooleanTrue;
                }
                else {
                  CFBooleanRef v26 = kCFBooleanFalse;
                }
                CFDictionarySetValue(v10, @"RouterARPVerified", v26);
              }
            }
          }
          if (*v22)
          {
            sub_53D38(v10, @"ManualAddress", *v22);
            int v27 = *(_DWORD *)(v8 + 92);
            if (v27) {
              sub_53D38(v10, @"ManualSubnetMask", v27);
            }
          }
          if ((*(unsigned char *)(v8 + 25) & 1) == 0) {
            goto LABEL_60;
          }
          int v28 = *(_DWORD *)(v8 + 116);
          if ((v28 & 8) == 0) {
            goto LABEL_58;
          }
          CFDictionarySetValue(v10, @"RouterARPInProgress", kCFBooleanTrue);
          if (*(unsigned char *)(v8 + 25))
          {
            int v28 = *(_DWORD *)(v8 + 116);
LABEL_58:
            if ((v28 & 0x10) != 0) {
              CFDictionarySetValue(v10, @"RouterARPTimedOut", kCFBooleanTrue);
            }
          }
        }
        else if (*v22 || *(_DWORD *)(v8 + 92) || *(_DWORD *)(v8 + 96) || *(_DWORD *)(v8 + 100))
        {
          sub_53E2C(v10, @"ManualAddress", (void *)(v8 + 88));
          sub_53F94(v10, @"ManualPrefixLength", *(int *)(v8 + 104));
        }
LABEL_60:
        CFStringRef v29 = *(const void **)(v8 + 8);
        if (v29) {
          CFDictionarySetValue(v10, v3, v29);
        }
        sub_48A8(v8, 22, v10);
        if (v10)
        {
          CFAllocatorRef v30 = allocator;
          if (!allocator)
          {
            CFAllocatorRef v30 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            CFAllocatorRef allocator = v30;
          }
          CFArrayAppendValue(v30, v10);
          CFRelease(v10);
        }
        uint64_t v7 = (v7 + 1);
      }
      while (v6 != v7);
    }
    if (allocator)
    {
      CFDictionarySetValue(theDict, (const void *)v50[v48], allocator);
      sub_6DB0((const void **)&allocator);
    }
    uint64_t v31 = v4[1];
    ++v4;
    uint64_t v1 = v31;
    uint64_t v2 = v48 + 1;
  }
  while (v31);
  unint64_t v32 = sub_9374(v45);
  if (v32)
  {
    if (!HIDWORD(v32))
    {
      CFStringRef v33 = kSCPropNetLinkActive;
      int v34 = theDict;
      CFBooleanRef v35 = kCFBooleanFalse;
      goto LABEL_77;
    }
    uint64_t v36 = *(void *)(a1 + 96);
    CFDictionarySetValue(theDict, @"LinkStatusActive", kCFBooleanTrue);
    if (sub_58CE0(v45))
    {
      if (v36)
      {
        int v37 = sub_2E9FC(v36);
        uint64_t v38 = (char *)sub_2E050(v37);
        sub_53ED0(theDict, @"Security", v38);
        CFStringRef v39 = sub_2E974(v36);
        CFDictionarySetValue(theDict, @"BSSID", v39);
        uint64_t v40 = (const void *)sub_2E96C(v36);
        CFDictionarySetValue(theDict, @"SSID", v40);
        uint64_t v41 = sub_2EA04(v36);
        if (v41)
        {
          CFBooleanRef v35 = (CFBooleanRef)v41;
          CFStringRef v33 = @"NetworkID";
          int v34 = theDict;
LABEL_77:
          CFDictionarySetValue(v34, v33, v35);
        }
      }
    }
  }
  uint64_t v42 = (char *)sub_58D1C(v45);
  if (v42) {
    sub_53ED0(theDict, @"InterfaceType", v42);
  }
  if (sub_58D10(v45)) {
    CFDictionarySetValue(theDict, @"IsExpensive", kCFBooleanTrue);
  }
  if (sub_58CF8(v45)) {
    CFDictionarySetValue(theDict, @"IsTethered", kCFBooleanTrue);
  }
  return theDict;
}

uint64_t sub_21414(__CFArray **a1)
{
  if ((int)sub_5B24(qword_70150) < 1)
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = sub_5B4C(qword_70150, v3);
      if (sub_5B24(v4 + 24) || sub_5B24(v4 + 56))
      {
        if (!Mutable) {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
        }
        CFArrayAppendValue(Mutable, *(const void **)(v4 + 16));
      }
      uint64_t v3 = (v3 + 1);
    }
    while ((int)v3 < (int)sub_5B24(qword_70150));
  }
  *a1 = Mutable;
  return 0;
}

uint64_t sub_214E0(vm_address_t *a1, _DWORD *a2)
{
  CFDataRef v4 = (const __CFData *)sub_4F39C();
  if (!v4) {
    return 17;
  }
  CFDataRef v5 = v4;
  BytePtr = CFDataGetBytePtr(v4);
  vm_size_t Length = CFDataGetLength(v5);
  vm_address_t v8 = sub_20A2C(BytePtr, Length, a2);
  *a1 = v8;
  if (v8) {
    return 0;
  }
  else {
    return 5;
  }
}

uint64_t sub_21550(char *a1, _DWORD *a2)
{
  uint64_t v4 = sub_1EF8C(a1, 0);
  if (!v4) {
    return 2;
  }
  if ((int)sub_5B24(v4 + 56) < 1 || !sub_4F39C()) {
    return 17;
  }
  int v5 = sub_4FDE0(a1);
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_215BC(char *__s2, int *a2)
{
  uint64_t v4 = (_OWORD *)sub_57EB8((uint64_t *)qword_70188, __s2);
  int v5 = *a2;
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v6 = _os_log_pack_size();
    __chkstk_darwin(v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    vm_address_t v8 = sub_9218(v5);
    *(_DWORD *)uint64_t v7 = 136315394;
    *(void *)(v7 + 4) = __s2;
    *(_WORD *)(v7 + 12) = 2080;
    *(void *)(v7 + 14) = v8;
    __SC_log_send();
  }
  if (!v4) {
    return 2;
  }
  uint64_t v9 = sub_21790(v4);
  if (!v9) {
    return 5;
  }
  uint64_t v10 = v9;
  if ((v5 & 0xFFFFFEFF) == 0 || (v5 & 0x100) != 0) {
    sub_217E8(v9, 1);
  }
  else {
    sub_21860(v9, 1);
  }
  uint64_t result = 0;
  if (v5 && v5 != 256 && v5 != 512) {
    return sub_218D8(v10, 0, (uint64_t)a2, 0, 0, 0);
  }
  return result;
}

uint64_t sub_21790(_OWORD *a1)
{
  uint64_t v2 = (const char *)nullsub_1(a1);
  uint64_t v3 = sub_1EF8C(v2, 0);
  if (!v3)
  {
    uint64_t v3 = sub_25668(a1);
    if (v3) {
      sub_57C7C(qword_70150, v3);
    }
  }
  return v3;
}

void sub_217E8(uint64_t a1, int a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 24);
  int v5 = sub_5B24(a1 + 24);
  if (a2)
  {
    DHCPLeaseListFree_0(v4);
    if (!v5) {
      return;
    }
  }
  else
  {
    sub_25FA8(v4);
    if (!v5) {
      return;
    }
  }

  sub_1BBF8(a1);
}

void sub_21860(uint64_t a1, int a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 56);
  int v5 = sub_5B24(a1 + 56);
  if (a2)
  {
    DHCPLeaseListFree_0(v4);
    if (!v5) {
      return;
    }
  }
  else
  {
    sub_25FA8(v4);
    if (!v5) {
      return;
    }
  }

  sub_26018(a1);
}

uint64_t sub_218D8(uint64_t a1, void *a2, uint64_t a3, CFTypeRef *a4, uint64_t a5, void *a6)
{
  uint64_t v6 = a6;
  uint64_t v12 = *(void *)(a1 + 8);
  char v13 = &off_70000;
  int v49 = *(_DWORD *)a3;
  if ((v49 & 0x100) != 0)
  {
    if (a4 || !dword_700C0 || !*(_DWORD *)(a1 + 156) || !*(_DWORD *)(a1 + 160))
    {
      int v27 = (const char *)nullsub_1(v12);
      sub_35D90(v27, 1);
      goto LABEL_22;
    }
  }
  else
  {
    if (*(_DWORD *)(a3 + 32))
    {
      uint64_t v48 = a6;
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v14 = _os_log_pack_size();
        uint64_t v15 = a5;
        uint64_t v16 = a2;
        CFStringRef v47 = v46;
        __chkstk_darwin(v14);
        __error();
        uint64_t v17 = _os_log_pack_fill();
        uint64_t v18 = nullsub_1(v12);
        *(_DWORD *)uint64_t v17 = 136315138;
        *(void *)(v17 + 4) = v18;
        a2 = v16;
        a5 = v15;
        char v13 = &off_70000;
        __SC_log_send();
      }
      *(_DWORD *)a1 |= 0x10000u;
      uint64_t v6 = v48;
    }
    if (*(unsigned __int8 *)(a3 + 36) == 254 && (*(unsigned char *)(a3 + 37) & 0xC0) == 0x80)
    {
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 36);
      uint64_t v19 = sub_4220();
      LODWORD(v48) = _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v20 = _os_log_pack_size();
        CFStringRef v47 = a2;
        v46[1] = v46;
        __chkstk_darwin(v20);
        __error();
        uint64_t v21 = _os_log_pack_fill();
        uint64_t v22 = nullsub_1(v12);
        v46[0] = v19;
        int v23 = v6;
        uint64_t v24 = v22;
        int v25 = inet_ntop(30, (const void *)(a3 + 36), v50, 0x2Eu);
        *(_DWORD *)uint64_t v21 = 136315394;
        *(void *)(v21 + 4) = v24;
        uint64_t v6 = v23;
        *(_WORD *)(v21 + 12) = 2080;
        *(void *)(v21 + 14) = v25;
        a2 = v47;
        char v13 = &off_70000;
        __SC_log_send();
      }
    }
    if (a4 || !*((_DWORD *)v13 + 48) || !*(_DWORD *)(a1 + 156) || !*(_DWORD *)(a1 + 160))
    {
      sub_260AC(a1, 1);
      goto LABEL_22;
    }
  }
  if (!*(_DWORD *)(a1 + 152))
  {
    *(_DWORD *)(a1 + 152) = 1;
    CFBooleanRef v26 = (const char *)nullsub_1(v12);
    sub_35878(v26, 0);
  }
LABEL_22:
  int v28 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == 261)
  {
    uint64_t v29 = *(void *)(a1 + 88);
    if (v29) {
      sub_261CC(a1, *(const void **)v29, (*(_DWORD *)(v29 + 24) >> 8) & 1);
    }
  }
  CFAllocatorRef v30 = malloc_type_malloc(0xA8uLL, 0x10E00405B6A6570uLL);
  if (!v30)
  {
    uint64_t v33 = 5;
    int v34 = v49;
    goto LABEL_38;
  }
  uint64_t v31 = v30;
  v30[20] = 0;
  *((_OWORD *)v30 + 8) = 0u;
  *((_OWORD *)v30 + 9) = 0u;
  *((_OWORD *)v30 + 6) = 0u;
  *((_OWORD *)v30 + 7) = 0u;
  *((_OWORD *)v30 + 4) = 0u;
  *((_OWORD *)v30 + 5) = 0u;
  *((_OWORD *)v30 + 2) = 0u;
  *((_OWORD *)v30 + 3) = 0u;
  *(_OWORD *)CFAllocatorRef v30 = 0u;
  *((_OWORD *)v30 + 1) = 0u;
  *((_DWORD *)v30 + 6) = v28;
  v30[2] = a1;
  if (a2)
  {
    unint64_t v32 = (void *)CFRetain(a2);
  }
  else
  {
    CFBooleanRef v35 = sub_9218(v28);
    uint64_t v36 = nullsub_1(*(void *)(a1 + 8));
    unint64_t v32 = (void *)CFStringCreateWithFormat(0, 0, @"%s-%s", v35, v36);
  }
  *(void *)uint64_t v31 = v32;
  int v34 = v49;
  if (a4) {
    *((void *)v31 + 6) = CFRetain(*a4);
  }
  if (a5) {
    (*(void (**)(uint64_t, void *))(a5 + 16))(a5, v31);
  }
  int v37 = *(_DWORD *)a3;
  int v38 = sub_58CA4(*(void *)(*((void *)v31 + 2) + 8));
  if (v37 == 516 && v38 != 57) {
    goto LABEL_36;
  }
  if (v38 > 134)
  {
    if ((v38 - 135) < 2) {
      goto LABEL_56;
    }
    if (v38 == 144)
    {
      if (v37 == 258) {
        goto LABEL_36;
      }
LABEL_56:
      uint64_t v44 = sub_5858(v37);
      if (v44)
      {
        uint64_t v33 = v44((uint64_t)v31, 0, (__CFDictionary *)(a3 + 8));
        if (!v33)
        {
          if (a4)
          {
            sub_6DB0(a4 + 7);
            a4[7] = CFRetain(*(CFTypeRef *)v31);
          }
          if (*((_DWORD *)v31 + 6) == 261) {
            *(void *)(a1 + 88) = v31;
          }
          if ((v34 & 0x100) != 0) {
            uint64_t v45 = a1 + 24;
          }
          else {
            uint64_t v45 = a1 + 56;
          }
          sub_57C7C(v45, v31);
          uint64_t v33 = 0;
          if (v6) {
            goto LABEL_53;
          }
          return v33;
        }
      }
      else
      {
        uint64_t v33 = 7;
      }
      goto LABEL_37;
    }
LABEL_71:
    if ((v37 - 258) < 4) {
      goto LABEL_36;
    }
    goto LABEL_56;
  }
  if (v38 == 6) {
    goto LABEL_56;
  }
  if (v38 == 24)
  {
    if (v37 != 257 && v37 != 513) {
      goto LABEL_36;
    }
    goto LABEL_56;
  }
  if (v38 != 57) {
    goto LABEL_71;
  }
  if (v37 == 516) {
    goto LABEL_56;
  }
LABEL_36:
  uint64_t v33 = 4;
LABEL_37:
  sub_6DB0((const void **)v31);
  sub_6DB0((const void **)v31 + 6);
  free(v31);
LABEL_38:
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v39 = _os_log_pack_size();
    __chkstk_darwin(v39);
    __error();
    uint64_t v40 = _os_log_pack_fill();
    uint64_t v41 = sub_9218(v34);
    if (v33 <= 0x15) {
      uint64_t v42 = off_68DD0[v33];
    }
    else {
      uint64_t v42 = "<unknown>";
    }
    *(_DWORD *)uint64_t v40 = 136315394;
    *(void *)(v40 + 4) = v41;
    *(_WORD *)(v40 + 12) = 2080;
    *(void *)(v40 + 14) = v42;
    __SC_log_send();
  }
  if ((v34 & 0x100) != 0) {
    sub_1BBF8(a1);
  }
  else {
    sub_26018(a1);
  }
  sub_5A18();
  uint64_t v31 = 0;
  if (v6) {
LABEL_53:
  }
    *uint64_t v6 = v31;
  return v33;
}

uint64_t sub_21F20(char *a1, int *a2, uint64_t a3, const __CFDictionary *a4, int a5)
{
  return sub_21F34(a1, a2, 1, a3, a4, a5);
}

uint64_t sub_21F34(char *__s2, int *a2, int a3, uint64_t a4, const __CFDictionary *Value, int a6)
{
  uint64_t v12 = (_OWORD *)sub_57EB8((uint64_t *)qword_70188, __s2);
  int v13 = *a2;
  uint64_t v14 = 3;
  if (!*a2 || v13 == 256 || v13 == 512) {
    return v14;
  }
  uint64_t v15 = (uint64_t)v12;
  if (!v12) {
    return 2;
  }
  uint64_t v16 = sub_21790(v12);
  if (!v16) {
    return 5;
  }
  uint64_t v17 = (_DWORD *)v16;
  uint64_t v18 = sub_22938(v16, a2, 0);
  int v60 = v18;
  if (v18)
  {
    int v59 = 0;
    if (a3) {
      return 15;
    }
    uint64_t v19 = (const void **)v18;
    int v20 = sub_568C((uint64_t)v18, (unsigned int *)a2, &v59);
    if (!(v20 | v59)) {
      return 0;
    }
    sub_261CC((uint64_t)v17, *v19, (*((_DWORD *)v19 + 6) >> 8) & 1);
  }
  int v21 = sub_5802C(v15);
  BOOL v50 = v21 == 255;
  uint64_t v54 = v17;
  if (!Value)
  {
    int v29 = 0;
    CFTypeRef v44 = 0;
    int v49 = 1;
    int v51 = 0;
    int v52 = -1;
    int v45 = -1;
    int v47 = 0;
    int v48 = 1;
    BOOL v26 = 1;
    goto LABEL_33;
  }
  int v22 = v21;
  CFStringRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, @"__IPConfigurationServiceOptions");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value)
  {
LABEL_24:
    int v29 = 0;
    CFTypeRef v44 = 0;
    int v49 = 1;
    int v51 = 0;
    int v52 = -1;
    int v45 = -1;
    int v47 = 0;
    int v48 = 1;
    BOOL v26 = 1;
    uint64_t v17 = v54;
    goto LABEL_33;
  }
  if (CFGetTypeID(Value) != TypeID)
  {
    CFStringRef Value = 0;
    goto LABEL_24;
  }
  LODWORD(v53) = v22 != 255;
  if (sub_262A4(Value, @"MonitorPID", 0)) {
    int v24 = a6;
  }
  else {
    int v24 = -1;
  }
  int v45 = v24;
  LODWORD(v46) = sub_262A4(Value, @"NoPublish", 0);
  int v52 = sub_26300(Value, kIPConfigurationServiceOptionMTU, 0xFFFFFFFFLL);
  int v49 = sub_262A4(Value, kIPConfigurationServiceOptionPerformNUD, 1);
  int v48 = sub_262A4(Value, kIPConfigurationServiceOptionEnableDAD, 1);
  int v25 = (const void *)kIPConfigurationServiceOptionEnableCLAT46;
  int v51 = sub_262A4(Value, kIPConfigurationServiceOptionEnableCLAT46, 0);
  BOOL v26 = CFDictionaryContainsKey(Value, v25) == 0;
  BOOL v50 = sub_262A4(Value, kIPConfigurationServiceOptionEnableDHCPv6, v53) == 0;
  int v27 = CFDictionaryGetValue(Value, @"ServiceID");
  CFTypeID v28 = CFStringGetTypeID();
  if (v27 && CFGetTypeID(v27) == v28) {
    CFDictionaryRef v53 = (const __CFDictionary *)CFRetain(v27);
  }
  else {
    CFDictionaryRef v53 = 0;
  }
  int v29 = (int)v46;
  int v47 = sub_262A4(Value, kIPConfigurationServiceOptionClearState, 0);
  CFAllocatorRef v30 = CFDictionaryGetValue(Value, kIPConfigurationServiceOptionAPNName);
  CFTypeID v31 = CFStringGetTypeID();
  if (v30)
  {
    if (CFGetTypeID(v30) == v31) {
      unint64_t v32 = v30;
    }
    else {
      unint64_t v32 = 0;
    }
    CFTypeRef v44 = v32;
  }
  else
  {
    CFTypeRef v44 = 0;
  }
  CFStringRef Value = v53;
  uint64_t v17 = v54;
LABEL_33:
  if (v26 && dword_701AC && sub_5802C(v15) == 255 && v29)
  {
    CFDictionaryRef v53 = Value;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v33 = _os_log_pack_size();
      long long v46 = &v44;
      __chkstk_darwin(v33);
      __error();
      uint64_t v17 = v54;
      uint64_t v34 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v34 = 136315138;
      *(void *)(v34 + 4) = __s2;
      __SC_log_send();
    }
    int v51 = 1;
    CFStringRef Value = v53;
  }
  if (!Value)
  {
    CFStringRef Value = (const __CFDictionary *)sub_542B8(0);
    if (!Value) {
      return 5;
    }
  }
  CFDictionaryRef v53 = Value;
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v35 = _os_log_pack_size();
    LODWORD(v46) = v29;
    __chkstk_darwin(v35);
    __error();
    uint64_t v36 = _os_log_pack_fill();
    if (a3) {
      int v37 = "add_service";
    }
    else {
      int v37 = "set_service";
    }
    int v38 = sub_9218(v13);
    *(_DWORD *)uint64_t v36 = 136315650;
    *(void *)(v36 + 4) = v37;
    *(_WORD *)(v36 + 12) = 2080;
    *(void *)(v36 + 14) = __s2;
    *(_WORD *)(v36 + 22) = 2080;
    *(void *)(v36 + 24) = v38;
    uint64_t v17 = v54;
    __SC_log_send();
    int v29 = (int)v46;
  }
  int v39 = v52;
  if (v52 >= 1)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v40 = _os_log_pack_size();
      __chkstk_darwin(v40);
      __error();
      uint64_t v17 = v54;
      uint64_t v41 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v41 = 136315394;
      *(void *)(v41 + 4) = __s2;
      *(_WORD *)(v41 + 12) = 1024;
      *(_DWORD *)(v41 + 14) = v52;
      int v39 = v52;
      __SC_log_send();
    }
    sub_356B0(__s2, v39);
  }
  *uint64_t v17 = *v17 & 0xFFE1FFFF | ((v49 == 0) << 17) | ((v48 == 0) << 18);
  if ((v13 & 0x200) != 0 && v47) {
    sub_26018((uint64_t)v17);
  }
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 0x40000000;
  v55[2] = sub_26378;
  v55[3] = &unk_68E80;
  int v56 = v29;
  BOOL v57 = v50;
  int v58 = v51;
  CFStringRef v42 = (const __CFString *)v53;
  uint64_t v14 = sub_218D8((uint64_t)v17, v53, (uint64_t)a2, 0, (uint64_t)v55, &v60);
  if (!v14)
  {
    if (v44) {
      sub_25F68((uint64_t)v60, v44);
    }
    if (v45 != -1) {
      sub_263A8((uint64_t)v60, v45);
    }
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    sub_539E0(v42, (UInt8 *)a4, 128, 0);
  }
  CFRelease(v42);
  return v14;
}

uint64_t sub_226AC(char *a1, int *a2, uint64_t a3)
{
  return sub_21F34(a1, a2, 0, a3, 0, -1);
}

uint64_t sub_226C0(const char *a1, const char *a2)
{
  CFStringRef v3 = CFStringCreateWithCString(0, a2, 0x8000100u);
  if (!v3) {
    return 5;
  }
  CFStringRef v4 = v3;
  uint64_t v5 = sub_2271C(a1, v3);
  CFRelease(v4);
  return v5;
}

uint64_t sub_2271C(const char *a1, const void *a2)
{
  uint64_t v5 = 0;
  if (!a1)
  {
    uint64_t v3 = sub_2679C(a2, &v5, 0);
    if (!v3)
    {
      uint64_t v3 = sub_2679C(a2, &v5, 1);
      if (!v3) {
        return 14;
      }
    }
    return sub_22B08(v3, (uint64_t)v5);
  }
  uint64_t v3 = sub_22E2C(a1, a2, (uint64_t *)&v5);
  if (v3) {
    return sub_22B08(v3, (uint64_t)v5);
  }
  return 14;
}

uint64_t sub_22798(const char *a1, int a2, int *a3, uint64_t a4)
{
  int v5 = *a3;
  uint64_t result = 3;
  if (*a3 && v5 != 256 && v5 != 512)
  {
    uint64_t v10 = sub_1EF8C(a1, 0);
    if (v10)
    {
      if (a2)
      {
        int v11 = (const __CFString **)sub_22850(v10, a3);
        if (v11)
        {
LABEL_7:
          CFStringRef v12 = *v11;
          *(_OWORD *)(a4 + 96) = 0u;
          *(_OWORD *)(a4 + 112) = 0u;
          *(_OWORD *)(a4 + 64) = 0u;
          *(_OWORD *)(a4 + 80) = 0u;
          *(_OWORD *)(a4 + 32) = 0u;
          *(_OWORD *)(a4 + 48) = 0u;
          *(_OWORD *)a4 = 0u;
          *(_OWORD *)(a4 + 16) = 0u;
          sub_539E0(v12, (UInt8 *)a4, 128, 0);
          return 0;
        }
      }
      else
      {
        int v11 = (const __CFString **)sub_22938(v10, a3, 0);
        if (v11) {
          goto LABEL_7;
        }
      }
      return 14;
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t sub_22850(uint64_t a1, int *a2)
{
  int v3 = *a2;
  if ((*a2 & 0x100) != 0)
  {
    char v5 = v3 - 1;
    BOOL v6 = (v3 - 257) > 5;
    uint64_t v7 = a1 + 24;
    if ((int)sub_5B24(a1 + 24) < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v8 = 0;
      unsigned int v9 = v6 | (0x16u >> v5);
      while (1)
      {
        uint64_t result = sub_5B4C(v7, v8);
        if (*a2 == *(_DWORD *)(result + 24))
        {
          if (v9) {
            break;
          }
          int v10 = (*a2 & 0x100) != 0 ? *(_DWORD *)(result + 88) : 0;
          if (a2[2] == v10) {
            break;
          }
        }
        uint64_t v8 = (v8 + 1);
        if ((int)v8 >= (int)sub_5B24(v7)) {
          return 0;
        }
      }
    }
  }
  else
  {
    return sub_26850(a1, (uint64_t)a2, 0);
  }
  return result;
}

_DWORD *sub_22938(uint64_t a1, int *a2, int a3)
{
  int v5 = *a2;
  if ((*a2 & 0x100) != 0)
  {
    BOOL v7 = (v5 - 257) > 5 || ((1 << (v5 - 1)) & 0x29) == 0;
    char v8 = v7;
    BOOL v9 = v7 && (v5 & 0xFFFFFFFE) == 258;
    uint64_t v10 = a1 + 24;
    if ((int)sub_5B24(a1 + 24) >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t result = (_DWORD *)sub_5B4C(v10, v11);
        if (!a3 || result[8])
        {
          int v12 = result[6];
          if (v8)
          {
            if ((v12 & 0xFFFFFFFE) == 0x102 && v9 || v12 == v5) {
              return result;
            }
          }
          else
          {
            unsigned int v15 = v12 - 257;
            BOOL v16 = v15 > 5;
            int v17 = (1 << v15) & 0x29;
            BOOL v18 = v16 || v17 == 0;
            if (!v18 && a2[2] == result[22]) {
              return result;
            }
          }
        }
        uint64_t v11 = (v11 + 1);
      }
      while ((int)v11 < (int)sub_5B24(v10));
    }
    return 0;
  }
  else
  {
    return (_DWORD *)sub_26850(a1, (uint64_t)a2, a3);
  }
}

uint64_t sub_22A78(const char *a1, int *a2)
{
  int v3 = *a2;
  uint64_t result = 3;
  if (*a2 && v3 != 256 && v3 != 512)
  {
    uint64_t v6 = sub_1EF8C(a1, 0);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = sub_22850(v6, a2);
      if (v8)
      {
        return sub_22B08(v7, v8);
      }
      else
      {
        return 14;
      }
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t sub_22B08(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 32)) {
    return 4;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    uint64_t v6 = nullsub_1(*(void *)(a1 + 8));
    uint64_t v7 = sub_9218(*(_DWORD *)(a2 + 24));
    *(_DWORD *)uint64_t v5 = 136315394;
    *(void *)(v5 + 4) = v6;
    *(_WORD *)(v5 + 12) = 2080;
    *(void *)(v5 + 14) = v7;
    __SC_log_send();
  }
  sub_261CC(a1, *(const void **)a2, (*(_DWORD *)(a2 + 24) >> 8) & 1);
  return 0;
}

uint64_t sub_22C70(const char *a1, const char *a2)
{
  CFStringRef v3 = CFStringCreateWithCString(0, a2, 0x8000100u);
  if (!v3) {
    return 5;
  }
  CFStringRef v4 = v3;
  uint64_t v18 = 0;
  uint64_t v5 = sub_22E2C(a1, v3, &v18);
  if (v5)
  {
    uint64_t v6 = v5;
    int v15 = 0;
    uint64_t v7 = v18;
    uint64_t v16 = sub_9374(*(void *)(*(void *)(v18 + 16) + 8));
    int v17 = v8;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t v11 = nullsub_1(*(void *)(v6 + 8));
      int v12 = sub_9218(*(_DWORD *)(v7 + 24));
      *(_DWORD *)uint64_t v10 = 136315394;
      *(void *)(v10 + 4) = v11;
      *(_WORD *)(v10 + 12) = 2080;
      *(void *)(v10 + 14) = v12;
      __SC_log_send();
    }
    uint64_t v13 = sub_48A8(v7, 8, (__CFDictionary *)&v15);
  }
  else
  {
    uint64_t v13 = 14;
  }
  CFRelease(v4);
  return v13;
}

uint64_t sub_22E2C(const char *a1, const void *a2, uint64_t *a3)
{
  uint64_t v5 = sub_1EF8C(a1, 0);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v5 = (uint64_t)sub_5990(v5, a2, 0);
    if (!v5) {
      uint64_t v5 = (uint64_t)sub_5990(v6, a2, 1);
    }
    if (v5) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a3 = v5;
  return v7;
}

uint64_t sub_22EA0(const char *a1, const char *a2)
{
  CFStringRef v3 = CFStringCreateWithCString(0, a2, 0x8000100u);
  if (!v3) {
    return 5;
  }
  CFStringRef v4 = v3;
  if (sub_22E2C(a1, v3, &v7)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 14;
  }
  CFRelease(v4);
  return v5;
}

uint64_t sub_22F10(const char *a1, __CFDictionary *a2)
{
  if (!a2) {
    return 3;
  }
  uint64_t v3 = sub_1EF8C(a1, 0);
  if (!v3) {
    return 2;
  }
  uint64_t v4 = v3;
  if (!sub_58CE0(*(void *)(v3 + 8))) {
    return 3;
  }
  sub_483C(v4 + 24, 20, a2);
  sub_483C(v4 + 56, 20, a2);
  return 0;
}

uint64_t sub_22F90(uint64_t a1, uint64_t a2, __CFDictionary *a3)
{
  sub_483C(a1 + 24, a2, a3);

  return sub_483C(a1 + 56, a2, a3);
}

void **get_interface_list()
{
  uint64_t result = (void **)qword_70188;
  if (!qword_70188)
  {
    uint64_t result = sub_5803C();
    qword_70188 = (uint64_t)result;
  }
  return result;
}

CFStringRef sub_23014(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = sub_9218(*(_DWORD *)(a1 + 24));
  uint64_t v3 = nullsub_1(*(void *)(v1 + 8));
  return CFStringCreateWithFormat(0, 0, @"com.apple.networking.IPConfiguration.%s.%s", v3, v2);
}

dispatch_queue_t load(const void *a1)
{
  os_log_t v2 = os_log_create("com.apple.IPConfiguration", "Server");
  sub_5AFE8((uint64_t)v2);
  qword_70190 = (uint64_t)CFRetain(a1);
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_2EBFC((uint64_t)Current);
  dispatch_queue_t result = sub_2EC08();
  if (&_wd_endpoint_add_queue) {
    return (dispatch_queue_t)wd_endpoint_add_queue();
  }
  return result;
}

void start()
{
  BOOL v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  SCPreferencesRef v22 = 0;
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v0 = _os_log_pack_size();
    __chkstk_darwin(v0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  uint64_t v1 = sub_2EC08();
  sub_5A130(v1, (uint64_t (*)(void))sub_23A10);
  sub_23A10();
  sub_23F8C();
  sub_2FFFC(dword_70198 != 0);
  unsigned int v28 = 0;
  if (qword_70190)
  {
    CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary((CFBundleRef)qword_70190);
    if (InfoDictionary)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(InfoDictionary, @"IPConfiguration");
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID)
        {
          G_must_broadcast = sub_26D44(Value, @"MustBroadcast", 0);
          G_max_retries = sub_26E9C(Value, @"RetryCount", 9);
          G_gather_secs = sub_26E9C(Value, @"GatherTimeSeconds", 1);
          qword_700C8 = sub_26FDC(Value, @"LinkInactiveWaitTimeSeconds", *(double *)&qword_700C8);
          G_initial_wait_secs = sub_26E9C(Value, @"InitialRetryTimeSeconds", 1);
          G_max_wait_secs = sub_26E9C(Value, @"MaximumRetryTimeSeconds", 8);
          dword_7008C = sub_26E9C(Value, @"ARPProbeCount", 3);
          dword_70090 = sub_26E9C(Value, @"ARPGratuitousCount", 2);
          qword_70098 = sub_26FDC(Value, @"ARPRetryTimeSeconds", *(double *)&qword_70098);
          dword_700A0 = sub_26E9C(Value, @"ARPDetectCount", 6);
          qword_700A8 = sub_26FDC(Value, @"ARPDetectRetryTimeSeconds", *(double *)&qword_700A8);
          dword_702E8 = sub_26D44(Value, @"DHCPAcceptsBOOTP", 0);
          dword_70024 = sub_26D44(Value, @"DHCPFailureConfiguresLinkLocal", 1);
          dword_70028 = sub_26D44(Value, @"DHCPSuccessDeconfiguresLinkLocal", 1);
          dword_70038 = sub_26E9C(Value, @"DHCPInitRebootRetryCount", 2);
          dword_7003C = sub_26E9C(Value, @"DHCPSelectRetryCount", 3);
          dword_7002C = sub_26E9C(Value, @"DHCPAllocateLinkLocalAtRetryCount", 4);
          dword_70030 = sub_26E9C(Value, @"DHCPGenerateFailureSymptomAtRetryCount", 6);
          dword_70034 = sub_26E9C(Value, @"DHCPRouterARPAtRetryCount", 3);
          uint64_t v5 = (char *)sub_2715C(Value, @"DHCPRequestedParameterList", 1u, &v28);
          sub_12024(v5, v28);
          G_router_arp = sub_26D44(Value, @"RouterARPEnabled", 1);
          G_router_arp_wifi_lease_start_threshold_secs = sub_26E9C(Value, @"RouterARPWiFiLeaseStartThresholdSeconds", G_router_arp_wifi_lease_start_threshold_secs);
          dword_700D0 = sub_26E9C(Value, @"DHCPLocalHostNameLengthMax", 15);
          G_discover_and_publish_router_mac_address = sub_26D44(Value, @"DiscoverAndPublishRouterMACAddress", 1);
          dword_70080 = sub_26E9C(Value, @"DiscoverRouterMACAddressTimeSeconds", 60);
          dword_70084 = sub_26E9C(Value, @"DefendIPAddressIntervalSeconds", 10);
          dword_70088 = sub_26E9C(Value, @"DefendIPAddressCount", 5);
          dword_70040 = sub_26E9C(Value, @"DHCPLeaseWriteT1ThresholdSeconds", 3600);
          dword_700B0 = sub_26E9C(Value, @"ARPConflictRetryCount", 2);
          qword_700B8 = sub_26FDC(Value, @"ARPConflictRetryDelaySeconds", *(double *)&qword_700B8);
          dword_70048 = sub_26E9C(Value, @"ManualConflictRetryIntervalSeconds", 300);
          dword_70074 = sub_26E9C(Value, @"MinimumShortWakeIntervalSeconds", 60);
          dword_70078 = sub_26E9C(Value, @"MinimumWakeIntervalSeconds", 900);
          dword_7007C = sub_26E9C(Value, @"WakeSkewSeconds", 30);
          dword_700C4 = sub_26D44(Value, @"ConfigureIPv6", 1);
          if (dword_700C4)
          {
            int v27 = 0;
            G_dhcpv6_enabled = sub_26D44(Value, @"DHCPv6Enabled", 1);
            uint64_t v6 = (__int16 *)sub_2715C(Value, @"DHCPv6RequestedOptions", 2u, &v27);
            sub_42BE4(v6, v27);
            G_dhcpv6_stateful_enabled = sub_26D44(Value, @"DHCPv6StatefulEnabled", 1);
          }
          dword_700C0 = sub_26D44(Value, @"DisableUnneededInterfaces", 1);
        }
      }
    }
  }
  SCPreferencesRef v7 = SCPreferencesCreate(0, @"IPConfiguration.DHCPClient", @"DHCPClient.plist");
  SCPreferencesRef v22 = v7;
  if (v7)
  {
    int v8 = v7;
    if (SCPreferencesSetCallback(v7, (SCPreferencesCallBack)sub_240D4, 0)
      && (uint64_t v9 = sub_2EC08(), SCPreferencesSetDispatchQueue(v8, v9)))
    {
      sub_241C8(v8);
      SCPreferencesSynchronize(v8);
      qword_70178 = (uint64_t)SCDynamicStoreCreate(0, @"IPConfiguration", (SCDynamicStoreCallBack)sub_2422C, 0);
      if (!qword_70178)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v10 = _os_log_pack_size();
          __chkstk_darwin(v10);
          __error();
          uint64_t v11 = _os_log_pack_fill();
          int v12 = SCError();
          uint64_t v13 = SCErrorString(v12);
          *(_DWORD *)uint64_t v11 = 136315138;
          *(void *)(v11 + 4) = v13;
          __SC_log_send();
        }
      }
      bootp_session_init((unsigned __int16)word_70020);
      *(void *)&long long v23 = &dword_7008C;
      *((void *)&v23 + 1) = &dword_70090;
      *(void *)&long long v24 = &qword_70098;
      *((void *)&v24 + 1) = &dword_700A0;
      *(void *)&long long v25 = &qword_700A8;
      *((void *)&v25 + 1) = &dword_700B0;
      BOOL v26 = &qword_700B8;
      sub_ECEC((BOOL (*)(uint64_t, int, const void *, int))sub_2484C, (uint64_t)&v23);
      sub_57BE0(qword_70150, (uint64_t)sub_24910, 0);
      sub_24A78();
      sub_2BE14();
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v14 = _os_log_pack_size();
        __chkstk_darwin(v14);
        __error();
        uint64_t v15 = _os_log_pack_fill();
        int v16 = SCError();
        int v17 = SCErrorString(v16);
        *(_DWORD *)uint64_t v15 = 136315138;
        *(void *)(v15 + 4) = v17;
        __SC_log_send();
      }
      sub_6DB0((const void **)&v22);
    }
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v18 = _os_log_pack_size();
      __chkstk_darwin(v18);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      int v20 = SCError();
      int v21 = SCErrorString(v20);
      *(_DWORD *)uint64_t v19 = 136315138;
      *(void *)(v19 + 4) = v21;
      __SC_log_send();
    }
  }
}

void sub_23A10()
{
  int v0 = sub_5A28C(0);
  if (G_IPConfiguration_verbose == v0) {
    goto LABEL_8;
  }
  int v1 = v0;
  G_IPConfiguration_verbose = v0;
  sub_4220();
  _SC_syslog_os_log_mapping();
  int v2 = __SC_log_enabled();
  if (v1)
  {
    if (v2) {
      goto LABEL_6;
    }
  }
  else if (v2)
  {
LABEL_6:
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  BOOL v4 = v1 != 0;
  bootp_session_set_verbose(v4);
  DHCPv6SocketSetVerbose(v4);
  sub_3A134(v4);
LABEL_8:
  unsigned int v5 = sub_5A3A8();
  if (v5) {
    int v6 = v5;
  }
  else {
    int v6 = 2;
  }
  if (v6 != dword_7004C)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      uint64_t v9 = sub_5A254(v6);
      *(_DWORD *)uint64_t v8 = 138412290;
      *(void *)(v8 + 4) = v9;
      __SC_log_send();
    }
    dword_7004C = v6;
  }
  int v10 = sub_5A478(0);
  if (dword_701AC != v10)
  {
    int v11 = v10;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      uint64_t v14 = "";
      if (!v11) {
        uint64_t v14 = "not ";
      }
      *(_DWORD *)uint64_t v13 = 136315138;
      *(void *)(v13 + 4) = v14;
      __SC_log_send();
    }
    dword_701AC = v11;
  }
  int v15 = sub_5A4C8(1);
  if (dword_70198 != v15)
  {
    int v16 = v15;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v17 = _os_log_pack_size();
      __chkstk_darwin(v17);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      uint64_t v19 = "expires";
      if (!v16) {
        uint64_t v19 = "does not expire";
      }
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v18 + 4) = v19;
      __SC_log_send();
    }
    dword_70198 = v16;
  }
  if (dword_702EC)
  {
    G_dhcp_duid_type = 3;
  }
  else
  {
    if (os_variant_is_darwinos()) {
      __int16 v20 = 4;
    }
    else {
      __int16 v20 = 1;
    }
    G_dhcp_duid_type = v20;
    int v21 = sub_5A518();
    int v22 = v21;
    if ((v21 - 3) < 2) {
      goto LABEL_35;
    }
    if (!v21) {
      goto LABEL_36;
    }
    if (v21 == 1)
    {
LABEL_35:
      G_dhcp_duid_type = v21;
      goto LABEL_36;
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v23 = _os_log_pack_size();
      __chkstk_darwin(v23);
      __error();
      uint64_t v24 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v24 = 136315394;
      *(void *)(v24 + 4) = "check_prefs";
      *(_WORD *)(v24 + 12) = 1024;
      *(_DWORD *)(v24 + 14) = v22;
      __SC_log_send();
    }
  }
LABEL_36:
  sub_5A0E8();
}

uint64_t sub_23F8C()
{
  uint64_t result = sub_5984C("/var/db/dhcpclient/leases", 0x1C0u);
  if ((result & 0x80000000) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v1 = _os_log_pack_size();
      __chkstk_darwin(v1);
      __error();
      uint64_t v2 = _os_log_pack_fill();
      uint64_t v3 = __error();
      BOOL v4 = strerror(*v3);
      int v5 = *__error();
      *(_DWORD *)uint64_t v2 = 136315394;
      *(void *)(v2 + 4) = v4;
      *(_WORD *)(v2 + 12) = 1024;
      *(_DWORD *)(v2 + 14) = v5;
      return __SC_log_send();
    }
  }
  return result;
}

const __SCPreferences *sub_240D4(const __SCPreferences *result, char a2)
{
  if ((a2 & 2) != 0)
  {
    uint64_t v2 = result;
    sub_241C8(result);
    SCPreferencesSynchronize(v2);
    uint64_t result = (const __SCPreferences *)sub_5B24(&unk_70150);
    if ((int)result >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        uint64_t v4 = sub_5B4C(&unk_70150, v3);
        long long v9 = 0uLL;
        *(void *)((char *)&v9 + 4) = sub_9374(*(void *)(v4 + 8));
        HIDWORD(v9) = v5;
        uint64_t v6 = v4 + 24;
        if ((int)sub_5B24(v6) >= 1)
        {
          uint64_t v7 = 0;
          do
          {
            uint64_t v8 = sub_5B4C(v6, v7);
            if (*(unsigned char *)(v8 + 25)) {
              *(_DWORD *)(v8 + 116) &= ~4u;
            }
            sub_48A8(v8, 8, (__CFDictionary *)&v9);
            uint64_t v7 = (v7 + 1);
          }
          while ((int)v7 < (int)sub_5B24(v6));
        }
        uint64_t v3 = (v3 + 1);
        uint64_t result = (const __SCPreferences *)sub_5B24(&unk_70150);
      }
      while ((int)v3 < (int)result);
    }
  }
  return result;
}

void sub_241C8(const __SCPreferences *a1)
{
  int v5 = 0;
  CFMutableArrayRef v1 = sub_27334(a1);
  CFMutableArrayRef v4 = v1;
  if (v1)
  {
    uint64_t v2 = (unsigned __int8 *)sub_271DC(v1, 1u, &v5);
    sub_6DB0((const void **)&v4);
    int v3 = v5;
  }
  else
  {
    int v3 = 0;
    uint64_t v2 = 0;
  }
  sub_12228(v2, v3);
}

void sub_2422C(const __SCDynamicStore *a1, CFArrayRef theArray)
{
  CFArrayRef v41 = 0;
  CFStringRef v42 = 0;
  CFIndex Count = CFArrayGetCount(theArray);
  if (!Count) {
    goto LABEL_72;
  }
  CFIndex v5 = Count;
  if (G_IPConfiguration_verbose)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v7 = 138412546;
      *(void *)(v7 + 4) = theArray;
      *(_WORD *)(v7 + 12) = 1024;
      *(_DWORD *)(v7 + 14) = v5;
      __SC_log_send();
    }
  }
  if (v5 < 1)
  {
    int v14 = 0;
  }
  else
  {
    uint64_t v34 = a1;
    CFStringRef NetworkGlobalEntity = 0;
    int v39 = 0;
    CFIndex v9 = 0;
    int v37 = 0;
    int v10 = 0;
    int v11 = 0;
    do
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v9);
      if (CFEqual(ValueAtIndex, (CFTypeRef)qword_701B8) || CFEqual(ValueAtIndex, (CFTypeRef)qword_701C0))
      {
        int v10 = 1;
      }
      else if (CFStringHasPrefix(ValueAtIndex, kSCDynamicStoreDomainSetup))
      {
        if (!NetworkGlobalEntity)
        {
          CFStringRef NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainSetup, kSCEntNetIPv4);
          CFStringRef v42 = NetworkGlobalEntity;
        }
        if (CFEqual(ValueAtIndex, NetworkGlobalEntity)) {
          int v11 = 1;
        }
        int v39 = 1;
      }
      else if (CFStringHasSuffix(ValueAtIndex, kSCCompInterface))
      {
        int v37 = 1;
      }
      else
      {
        CFMutableArrayRef Mutable = v41;
        if (!v41)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(0, v5, &kCFTypeArrayCallBacks);
          CFArrayRef v41 = Mutable;
        }
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
      ++v9;
    }
    while (v5 != v9);
    if (v10) {
      sub_27600(v34);
    }
    int v14 = v11;
    if (v37 && sub_28B48())
    {
      sub_28C7C();
      a1 = v34;
    }
    else
    {
      a1 = v34;
      if (!v39) {
        goto LABEL_31;
      }
    }
    CFTypeRef v44 = 0;
    *(void *)&long long v43 = sub_28F04(a1, &v44);
    sub_298F0((const __CFArray *)v43, v44);
    sub_6DB0((const void **)&v43);
    sub_6DB0((const void **)&v44);
  }
LABEL_31:
  CFArrayRef v15 = v41;
  if (v41)
  {
    CFIndex v16 = CFArrayGetCount(v41);
    if (v16 >= 1)
    {
      CFIndex v17 = v16;
      CFIndex v18 = 0;
      CFStringRef v19 = (const __CFString *)kSCEntNetRefreshConfiguration;
      CFStringRef v20 = kSCEntNetIPv6;
      CFStringRef v40 = (const __CFString *)kSCEntNetNAT64;
      CFStringRef v38 = (const __CFString *)kSCEntNetInterfaceActiveDuringSleepRequested;
      CFStringRef v36 = (const __CFString *)kSCEntNetIPv6RouterExpired;
      CFStringRef v35 = (const __CFString *)kSCEntNetIPv4ARPCollision;
      do
      {
        CFStringRef v21 = (const __CFString *)CFArrayGetValueAtIndex(v15, v18);
        if (CFStringHasSuffix(v21, kSCEntNetLink))
        {
          sub_27858(a1, v21);
        }
        else if (CFStringHasSuffix(v21, kSCEntNetAirPort))
        {
          sub_28160(v21);
        }
        else if (CFStringHasSuffix(v21, v19))
        {
          if (CFStringHasPrefix(v21, (CFStringRef)qword_701D0))
          {
            int v22 = (__CFArray *)sub_54084(v21, @"/", 3);
            CFTypeRef v44 = v22;
            if (v22)
            {
              long long v43 = 0uLL;
              uint64_t v23 = sub_2AEC8(v22);
              if (v23)
              {
                uint64_t v24 = v23;
                if ((*(unsigned char *)v23 & 0x10) == 0)
                {
                  CFStringRef v32 = v20;
                  LODWORD(v43) = 0;
                  *(void *)((char *)&v43 + 4) = sub_9374(*(void *)(v23 + 8));
                  HIDWORD(v43) = v25;
                  if ((int)sub_5B24(v24 + 24) >= 1)
                  {
                    uint64_t v26 = 0;
                    do
                    {
                      uint64_t v27 = sub_5B4C(v24 + 24, v26);
                      if (*(unsigned char *)(v27 + 25)) {
                        *(_DWORD *)(v27 + 116) &= ~4u;
                      }
                      sub_48A8(v27, 8, (__CFDictionary *)&v43);
                      uint64_t v26 = (v26 + 1);
                    }
                    while ((int)v26 < (int)sub_5B24(v24 + 24));
                  }
                  sub_483C(v24 + 56, 8, (__CFDictionary *)&v43);
                  CFStringRef v20 = v32;
                }
              }
              sub_6DB0((const void **)&v44);
            }
          }
        }
        else if (CFStringHasSuffix(v21, v20))
        {
          sub_283D8(v21);
        }
        else if (CFStringHasSuffix(v21, v40))
        {
          sub_285E0(a1, v21);
        }
        else if (CFStringHasSuffix(v21, v38))
        {
          CFStringRef v33 = v20;
          if (CFStringHasPrefix(v21, (CFStringRef)qword_701D0))
          {
            CFTypeRef v28 = sub_54084(v21, @"/", 3);
            *(void *)&long long v43 = v28;
            if (v28)
            {
              uint64_t v29 = sub_2AEC8(v28);
              sub_6DB0((const void **)&v43);
              if (v29)
              {
                CFPropertyListRef v30 = SCDynamicStoreCopyValue(a1, v21);
                if (v30)
                {
                  CFRelease(v30);
                  int v31 = 1;
                }
                else
                {
                  int v31 = 0;
                }
                sub_2B968(v29, v31);
              }
            }
          }
          CFStringRef v20 = v33;
        }
        else if (CFStringHasSuffix(v21, v36))
        {
          sub_28894(v21);
        }
        else
        {
          v45.length = CFStringGetLength(v21);
          v45.location = 0;
          if (CFStringFindWithOptions(v21, v35, v45, 0, 0)) {
            sub_28A30(a1, v21);
          }
        }
        ++v18;
      }
      while (v18 != v17);
    }
  }
  if (v14)
  {
    byte_70180 = 1;
    dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
    if (dword_700C0)
    {
      byte_7019C = 1;
      dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
    }
  }
LABEL_72:
  sub_6DB0((const void **)&v42);
  sub_6DB0((const void **)&v41);
}

uint64_t sub_2484C(uint64_t a1, int a2, const void *a3, int a4)
{
  if ((int)sub_57DB4(qword_70188) < 1) {
    return 0;
  }
  unsigned int v7 = 0;
  while (1)
  {
    uint64_t v8 = sub_57DC0(qword_70188, v7);
    if (sub_58034(v8) == a4 && sub_934C(v8) == a2)
    {
      CFIndex v9 = (const void *)sub_58CAC(v8);
      if (!bcmp(a3, v9, a4)) {
        break;
      }
    }
    if ((int)++v7 >= (int)sub_57DB4(qword_70188)) {
      return 0;
    }
  }
  return 1;
}

void sub_24910(uint64_t a1)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    uint64_t v4 = nullsub_1(*(void *)(a1 + 8));
    *(_DWORD *)uint64_t v3 = 136315138;
    *(void *)(v3 + 4) = v4;
    __SC_log_send();
  }
  sub_217E8(a1, 1);
  sub_21860(a1, 1);
  sub_6DB0((const void **)(a1 + 16));
  sub_6DB0((const void **)(a1 + 136));
  sub_6DB0((const void **)(a1 + 96));
  *(void *)(a1 + 96) = 0;
  sub_588F4((uint64_t **)(a1 + 8));
  timer_callout_free((uint64_t *)(a1 + 104));
  free((void *)a1);
}

void sub_24A78()
{
  CFArrayRef v0 = IOPMCopyScheduledPowerEvents();
  if (v0)
  {
    CFArrayRef v1 = v0;
    CFIndex Count = CFArrayGetCount(v0);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      CFIndex v5 = 0;
      *(void *)&long long v3 = 138412290;
      long long v11 = v3;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v1, v5);
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"scheduledby");
        if (CFStringHasPrefix(Value, @"com.apple.networking.IPConfiguration"))
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v8 = _os_log_pack_size();
            uint64_t v12 = &v11;
            __chkstk_darwin(v8);
            __error();
            uint64_t v9 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v9 = v11;
            *(void *)(v9 + 4) = Value;
            __SC_log_send();
          }
          CFDateRef v10 = (const __CFDate *)CFDictionaryGetValue(ValueAtIndex, @"time");
          IOPMCancelScheduledPowerEvent(v10, Value, @"wake");
        }
        ++v5;
      }
      while (v4 != v5);
    }
    CFRelease(v1);
  }
}

void prime()
{
  CFArrayRef v0 = sub_2EC08();

  dispatch_async(v0, &stru_68D90);
}

void sub_24C80(id a1)
{
  CFArrayRef v1 = (const __SCDynamicStore *)qword_70178;
  if (!qword_70178)
  {
    sub_28B48();
    goto LABEL_38;
  }
  uint64_t v2 = sub_2EC08();
  long long v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_data_add, 0, 0, v2);
  qword_701B0 = (uint64_t)v3;
  dispatch_source_set_event_handler(v3, &stru_68EE0);
  dispatch_activate(v3);
  qword_701C8 = (uint64_t)SCDynamicStoreKeyCreate(0, @"%@/%@/%@/", kSCDynamicStoreDomainSetup, kSCCompNetwork, kSCCompService);
  qword_701D0 = (uint64_t)SCDynamicStoreKeyCreate(0, @"%@/%@/%@/", kSCDynamicStoreDomainState, kSCCompNetwork, kSCCompInterface);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  CFIndex v5 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetIPv4);
  CFArrayAppendValue(v5, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFStringRef v7 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetIPv6);
  CFArrayAppendValue(v5, v7);
  CFRelease(v7);
  CFStringRef v8 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNet6to4);
  CFArrayAppendValue(v5, v8);
  CFRelease(v8);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetIPv6);
  CFArrayAppendValue(v5, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  CFStringRef v10 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetInterface);
  CFArrayAppendValue(v5, v10);
  CFRelease(v10);
  CFStringRef v11 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetLink);
  CFArrayAppendValue(v5, v11);
  CFRelease(v11);
  CFStringRef v12 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetAirPort);
  CFArrayAppendValue(v5, v12);
  CFRelease(v12);
  CFStringRef v13 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetNAT64);
  CFArrayAppendValue(v5, v13);
  CFRelease(v13);
  CFStringRef v14 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetRefreshConfiguration);
  CFArrayAppendValue(v5, v14);
  CFRelease(v14);
  CFStringRef v15 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetIPv4ARPCollision);
  CFArrayRef MutableCopy = CFStringCreateMutableCopy(0, 0, v15);
  CFStringAppend(MutableCopy, @".*");
  CFRelease(v15);
  CFArrayAppendValue(v5, MutableCopy);
  CFRelease(MutableCopy);
  CFStringRef v17 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetInterfaceActiveDuringSleepRequested);
  CFArrayAppendValue(v5, v17);
  CFRelease(v17);
  CFStringRef v18 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, 0);
  CFArrayAppendValue(v5, v18);
  CFRelease(v18);
  CFStringRef v19 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetIPv6RouterExpired);
  CFArrayAppendValue(v5, v19);
  CFRelease(v19);
  CFStringRef NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
  CFArrayAppendValue(Mutable, NetworkInterface);
  CFRelease(NetworkInterface);
  CFStringRef NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainSetup, kSCEntNetIPv4);
  CFArrayAppendValue(Mutable, NetworkGlobalEntity);
  CFRelease(NetworkGlobalEntity);
  qword_701B8 = (uint64_t)SCDynamicStoreKeyCreateComputerName(0);
  CFArrayAppendValue(Mutable, (const void *)qword_701B8);
  qword_701C0 = (uint64_t)SCDynamicStoreKeyCreateHostNames(0);
  CFArrayAppendValue(Mutable, (const void *)qword_701C0);
  SCDynamicStoreSetNotificationKeys(v1, Mutable, v5);
  CFRelease(Mutable);
  CFRelease(v5);
  int v22 = sub_2EC08();
  SCDynamicStoreSetDispatchQueue(v1, v22);
  sub_27600(v1);
  sub_28B48();
  CFMutableDictionaryRef v52 = 0;
  int v53 = 0;
  thePortRef[0] = (IONotificationPortRef)0x2800000001;
  size_t v54 = 4;
  sysctl((int *)thePortRef, 2u, &v53, &v54, 0, 0);
  if (v53)
  {
    CFMutableDictionaryRef v23 = sub_592BC("IODeviceTree:/chosen");
    CFMutableDictionaryRef v52 = v23;
    if (v23)
    {
      CFDictionaryRef v24 = v23;
      CFStringRef Value = CFDictionaryGetValue(v23, @"dhcp-response");
      CFTypeID TypeID = CFDataGetTypeID();
      if (Value && CFGetTypeID(Value) == TypeID)
      {
        char v27 = 0;
      }
      else
      {
        CFStringRef Value = CFDictionaryGetValue(v24, @"bootp-response");
        CFTypeID v28 = CFDataGetTypeID();
        if (!Value || CFGetTypeID(Value) != v28) {
          goto LABEL_19;
        }
        char v27 = 1;
      }
      BytePtr = CFDataGetBytePtr((CFDataRef)Value);
      unsigned int Length = CFDataGetLength((CFDataRef)Value);
      int v31 = *((_DWORD *)BytePtr + 4);
      if (v31 || (int v31 = *((_DWORD *)BytePtr + 3)) != 0)
      {
        dword_70170 = v31;
        dword_70174 = *((_DWORD *)BytePtr + 5);
        CFStringRef v32 = (_OWORD *)sub_57DF4((uint64_t *)qword_70188, v31);
        if (v32)
        {
          CFStringRef v33 = v32;
          uint64_t v34 = (_DWORD *)sub_21790(v32);
          *v34 |= 0x10u;
          if ((v27 & 1) == 0)
          {
            thePortRef[0] = 0;
            thePortRef[1] = 0;
            sub_54D30((char **)thePortRef, (uint64_t)BytePtr, Length, 0);
            CFStringRef v35 = sub_54BE8((uint64_t)thePortRef, 54, 4);
            if (v35) {
              dword_70174 = *(_DWORD *)v35;
            }
            sub_54A34((uint64_t)thePortRef);
          }
          nullsub_1(v33);
          __strlcpy_chk();
          dword_702EC = 1;
        }
      }
    }
  }
LABEL_19:
  sub_6DB0((const void **)&v52);
  size_t v54 = 0;
  CFStringRef v36 = sub_28F04(v1, (__CFArray **)&v54);
  thePortRef[0] = v36;
  if (!v36) {
    goto LABEL_34;
  }
  CFArrayRef v37 = v36;
  if ((int)sub_57DB4(qword_70188) < 1) {
    goto LABEL_34;
  }
  signed int v38 = 0;
  int v39 = 0;
  do
  {
    CFStringRef v40 = (_OWORD *)sub_57DC0(qword_70188, v38);
    CFArrayRef v41 = (const char *)nullsub_1(v40);
    CFStringRef v42 = CFStringCreateWithCString(0, v41, 0x600u);
    if (v42)
    {
      CFStringRef v43 = v42;
      CFIndex Count = CFArrayGetCount(v37);
      if (Count >= 1)
      {
        CFIndex v45 = Count;
        CFIndex v46 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v37, v46);
          int v48 = CFDictionaryGetValue(ValueAtIndex, kSCPropNetInterfaceDeviceName);
          if (CFEqual(v48, v43)) {
            break;
          }
          if (v45 == ++v46) {
            goto LABEL_30;
          }
        }
        if (ValueAtIndex)
        {
          sub_21790(v40);
          ++v39;
        }
      }
LABEL_30:
      CFRelease(v43);
    }
    ++v38;
  }
  while (v38 < (int)sub_57DB4(qword_70188));
  if (v39) {
    sub_298F0(v37, (const __CFArray *)v54);
  }
  else {
LABEL_34:
  }
    SCDynamicStoreSetValue(v1, @"Plugin:IPConfiguration", @"Plugin:IPConfiguration");
  sub_6DB0((const void **)thePortRef);
  sub_6DB0((const void **)&v54);
  LODWORD(v54) = 0;
  thePortRef[0] = 0;
  io_connect_t v49 = IORegisterForSystemPower(0, thePortRef, (IOServiceInterestCallback)sub_2C730, (io_object_t *)&v54);
  if (v49)
  {
    BOOL v50 = thePortRef[0];
    int v51 = sub_2EC08();
    IONotificationPortSetDispatchQueue(v50, v51);
  }
  dword_701E8 = v49;
LABEL_38:
  sub_3263C();
  sub_2EC08();
  os_state_add_handler();
}

void stop(uint64_t a1)
{
  uint64_t v2 = sub_2EC08();
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_25514;
  block[3] = &unk_68DB0;
  block[4] = a1;
  dispatch_async(v2, block);
}

void sub_25514(uint64_t a1)
{
  CFArrayRef v1 = *(__CFRunLoopSource **)(a1 + 32);
  int v2 = sub_5B24(qword_70150);
  if (v2 >= 1)
  {
    int v3 = v2;
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = sub_5B4C(qword_70150, v4);
      sub_483C(v5 + 24, 12, 0);
      sub_483C(v5 + 56, 12, 0);
      uint64_t v4 = (v4 + 1);
    }
    while (v3 != v4);
  }

  CFRunLoopSourceSignal(v1);
}

int *sub_255B8(uint64_t a1)
{
  if ((int)sub_5B24(a1) < 1) {
    return 0;
  }
  uint64_t v2 = 0;
  while (1)
  {
    int v3 = (int *)sub_5B4C(a1, v2);
    if (v3[10])
    {
      uint64_t v4 = v3;
      if (!v3[7] && sub_932C(v3[6])) {
        break;
      }
    }
    uint64_t v2 = (v2 + 1);
    if ((int)v2 >= (int)sub_5B24(a1)) {
      return 0;
    }
  }
  return v4;
}

uint64_t sub_25668(_OWORD *a1)
{
  uint64_t v2 = malloc_type_malloc(0xB0uLL, 0x10E004002212FC4uLL);
  uint64_t v3 = (uint64_t)v2;
  if (v2)
  {
    v2[9] = 0u;
    v2[10] = 0u;
    v2[7] = 0u;
    v2[8] = 0u;
    v2[5] = 0u;
    v2[6] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
    v2[1] = 0u;
    void v2[2] = 0u;
    _OWORD *v2 = 0u;
    *((void *)v2 + 1) = sub_58938(a1);
    uint64_t v4 = (const char *)nullsub_1(a1);
    *(void *)(v3 + 16) = CFStringCreateWithCString(0, v4, 0x600u);
    sub_25884(v3);
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, *(CFStringRef *)(v3 + 16), kSCEntNetInterfaceActiveDuringSleepRequested);
    CFPropertyListRef v6 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_70178, NetworkInterfaceEntity);
    CFRelease(NetworkInterfaceEntity);
    if (v6)
    {
      *(_DWORD *)(v3 + 148) = 1;
      CFRelease(v6);
    }
    CFStringRef v7 = (const char *)nullsub_1(a1);
    *(void *)(v3 + 104) = timer_callout_init(v7);
    *(_DWORD *)(v3 + 116) = dword_701A8;
    sub_57BE0((void *)(v3 + 24), (uint64_t)sub_25A90, 0);
    sub_57BE0((void *)(v3 + 56), (uint64_t)sub_25A90, 0);
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v8 = _os_log_pack_size();
      __chkstk_darwin(v8);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
  }
  return v3;
}

void sub_25884(uint64_t a1)
{
  uint64_t v2 = nullsub_1(*(void *)(a1 + 8));
  unint64_t v3 = sub_58DD0(*(void *)(a1 + 8));
  sub_4220();
  _SC_syslog_os_log_mapping();
  int v4 = __SC_log_enabled();
  if (v3)
  {
    if (!v4) {
      goto LABEL_9;
    }
    uint64_t v5 = _os_log_pack_size();
    __chkstk_darwin(v5);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    CFStringRef v7 = "up";
    if (!HIDWORD(v3)) {
      CFStringRef v7 = "down";
    }
    *(_DWORD *)uint64_t v6 = 136315394;
    *(void *)(v6 + 4) = v2;
    *(_WORD *)(v6 + 12) = 2080;
    *(void *)(v6 + 14) = v7;
  }
  else
  {
    if (!v4) {
      goto LABEL_9;
    }
    uint64_t v8 = _os_log_pack_size();
    __chkstk_darwin(v8);
    __error();
    uint64_t v9 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v9 + 4) = v2;
  }
  __SC_log_send();
LABEL_9:
  if (sub_58CE0(*(void *)(a1 + 8)))
  {
    CFStringRef v10 = (const void *)sub_25C48(*(void *)(a1 + 16));
    CFStringRef v11 = v10;
    CFStringRef v12 = v10;
    if (v10) {
      CFRetain(v10);
    }
    sub_6DB0((const void **)(a1 + 96));
    *(void *)(a1 + 96) = v11;
    sub_6DB0(&v12);
  }
}

void sub_25A90(uint64_t a1)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    int v4 = *(const void **)a1;
    uint64_t v5 = sub_9218(*(_DWORD *)(a1 + 24));
    *(_DWORD *)uint64_t v3 = 138412546;
    *(void *)(v3 + 4) = v4;
    *(_WORD *)(v3 + 12) = 2080;
    *(void *)(v3 + 14) = v5;
    __SC_log_send();
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6 && *(void *)(v6 + 88) == a1) {
    *(void *)(v6 + 88) = 0;
  }
  sub_48A8(a1, 1, 0);
  sub_1D0A4(a1, 0);
  sub_6DB0((const void **)a1);
  sub_6DB0((const void **)(a1 + 48));
  sub_6DB0((const void **)(a1 + 56));
  CFStringRef v7 = *(NSObject **)(a1 + 64);
  if (v7)
  {
    context = dispatch_get_context(v7);
    CFRelease(context);
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 64));
    dispatch_release(*(dispatch_object_t *)(a1 + 64));
    *(void *)(a1 + 64) = 0;
  }
  uint64_t v9 = *(const void **)(a1 + 8);
  if (v9) {
    CFRelease(v9);
  }
  free((void *)a1);
}

uint64_t sub_25C48(uint64_t a1)
{
  uint64_t v2 = sub_2E21C();
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = sub_2EA04(v2);
    sub_4220();
    _SC_syslog_os_log_mapping();
    int v5 = __SC_log_enabled();
    if (v4)
    {
      if (v5)
      {
        uint64_t v6 = _os_log_pack_size();
        __chkstk_darwin(v6);
        __error();
        uint64_t v7 = _os_log_pack_fill();
        uint64_t v8 = sub_2E96C(v3);
        CFStringRef v9 = sub_2E974(v3);
        int v10 = sub_2E9FC(v3);
        CFStringRef v11 = sub_2E050(v10);
        *(_DWORD *)uint64_t v7 = 138413314;
        *(void *)(v7 + 4) = a1;
        *(_WORD *)(v7 + 12) = 2112;
        *(void *)(v7 + 14) = v8;
        *(_WORD *)(v7 + 22) = 2112;
        *(void *)(v7 + 24) = v9;
        *(_WORD *)(v7 + 32) = 2112;
        *(void *)(v7 + 34) = v4;
        *(_WORD *)(v7 + 42) = 2080;
        *(void *)(v7 + 44) = v11;
LABEL_9:
        __SC_log_send();
      }
    }
    else if (v5)
    {
      uint64_t v14 = _os_log_pack_size();
      __chkstk_darwin(v14);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      uint64_t v16 = sub_2E96C(v3);
      CFStringRef v17 = sub_2E974(v3);
      int v18 = sub_2E9FC(v3);
      CFStringRef v19 = sub_2E050(v18);
      *(_DWORD *)uint64_t v15 = 138413058;
      *(void *)(v15 + 4) = a1;
      *(_WORD *)(v15 + 12) = 2112;
      *(void *)(v15 + 14) = v16;
      *(_WORD *)(v15 + 22) = 2112;
      *(void *)(v15 + 24) = v17;
      *(_WORD *)(v15 + 32) = 2080;
      *(void *)(v15 + 34) = v19;
      goto LABEL_9;
    }
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v13 = 138412290;
      *(void *)(v13 + 4) = a1;
      goto LABEL_9;
    }
  }
  return v3;
}

void sub_25F2C(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  sub_6DB0((const void **)(a1 + 96));
  *(void *)(a1 + 96) = cf;
}

void sub_25F68(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = *(const void **)(a1 + 8);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(a1 + 8) = cf;
}

uint64_t sub_25FA8(uint64_t *a1)
{
  uint64_t result = sub_5B24(a1);
  if ((int)result >= 1)
  {
    int v3 = result;
    uint64_t v4 = 0;
    do
    {
      uint64_t result = sub_5B4C(a1, v4);
      if (*(_DWORD *)(result + 32))
      {
        uint64_t v4 = (v4 + 1);
      }
      else
      {
        uint64_t result = sub_57C84(a1, v4);
        --v3;
      }
    }
    while ((int)v4 < v3);
  }
  return result;
}

uint64_t sub_26018(uint64_t a1)
{
  uint64_t result = sub_5B24(a1 + 56);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    int v4 = sub_5802C(v3);
    if (v4 != 24 && v4 != 57)
    {
      int v5 = (const char *)nullsub_1(v3);
      sub_37D64(v5);
      uint64_t v6 = (const char *)nullsub_1(v3);
      sub_37494(v6);
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = 0;
      *(_DWORD *)a1 &= ~0x10000u;
    }
    uint64_t v7 = (const char *)nullsub_1(v3);
    return sub_369C0(v7);
  }
  return result;
}

BOOL sub_260AC(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = sub_5802C(v4);
  int v6 = v5;
  uint64_t v7 = 0;
  BOOL v8 = 0;
  if (v5 != 24 && v5 != 57)
  {
    if (sub_58CEC(v4))
    {
      BOOL v8 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = (_OWORD *)(a1 + 120);
      if (*(unsigned __int8 *)(a1 + 120) != 254 || (*(unsigned char *)(a1 + 121) & 0xC0) != 0x80) {
        uint64_t v7 = 0;
      }
      BOOL v8 = (*(_WORD *)(a1 + 2) & 1) == 0;
    }
  }
  CFStringRef v9 = (const char *)nullsub_1(v4);
  int v10 = sub_36638(v9, a2);
  if (v6 != 24 && v6 != 57)
  {
    unint64_t v11 = sub_9374(v4);
    if (HIDWORD(v11) || !v11)
    {
      BOOL v12 = ((*(_DWORD *)a1 >> 17) & 1) == 0;
      BOOL v13 = ((*(_DWORD *)a1 >> 18) & 1) == 0;
      uint64_t v14 = (char *)nullsub_1(v4);
      sub_36D90(v14, v7, v12, v8, v13, *(unsigned __int8 *)(a1 + 168));
    }
  }
  return v10 == 0;
}

uint64_t sub_261CC(uint64_t a1, const void *a2, int a3)
{
  if (a3) {
    int v6 = (uint64_t *)(a1 + 24);
  }
  else {
    int v6 = (uint64_t *)(a1 + 56);
  }
  if ((int)sub_5B24(v6) >= 1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      BOOL v8 = (CFTypeRef *)sub_5B4C(v6, v7);
      if (CFEqual(a2, *v8)) {
        break;
      }
      uint64_t v7 = (v7 + 1);
      if ((int)v7 >= (int)sub_5B24(v6)) {
        goto LABEL_10;
      }
    }
    sub_57C84(v6, v7);
  }
LABEL_10:
  if (a3)
  {
    return sub_1BBF8(a1);
  }
  else
  {
    return sub_26018(a1);
  }
}

uint64_t sub_262A4(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID) {
    return CFBooleanGetValue(Value);
  }
  return a3;
}

uint64_t sub_26300(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int valuePtr = a3;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    if (CFNumberGetValue(Value, kCFNumberIntType, &valuePtr)) {
      return valuePtr;
    }
    else {
      return v3;
    }
  }
  return v3;
}

_DWORD *sub_26378(_DWORD *result, uint64_t a2)
{
  int v2 = result[8];
  *(_DWORD *)(a2 + 32) = 1;
  *(_DWORD *)(a2 + 36) = v2;
  if ((*(unsigned char *)(a2 + 25) & 2) != 0)
  {
    *(_DWORD *)(a2 + 112) = result[9];
    if (result[10]) {
      *(_DWORD *)(a2 + 108) = 1;
    }
  }
  return result;
}

void sub_263A8(uint64_t a1, int a2)
{
  uintptr_t v3 = a2;
  uint64_t v4 = sub_2EC08();
  dispatch_source_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_proc, v3, 0x80000000uLL, v4);
  if (v5)
  {
    int v6 = v5;
    CFRetain(*(CFTypeRef *)a1);
    dispatch_set_context(v6, *(void **)a1);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = sub_26590;
    handler[3] = &unk_68EA0;
    handler[4] = v6;
    dispatch_source_set_event_handler(v6, handler);
    dispatch_resume(v6);
    *(void *)(a1 + 64) = v6;
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
  }
}

const void *sub_2654C(const void *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0;
}

uint64_t sub_26590(uint64_t a1)
{
  return sub_26598(*(NSObject **)(a1 + 32));
}

uint64_t sub_26598(NSObject *a1)
{
  int handle = dispatch_source_get_handle(a1);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3);
    __error();
    uint64_t v4 = (_DWORD *)_os_log_pack_fill();
    *uint64_t v4 = 67109120;
    v4[1] = handle;
    __SC_log_send();
  }
  context = dispatch_get_context(a1);
  uint64_t result = sub_2271C(0, context);
  if (result)
  {
    int v7 = result;
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v8 = _os_log_pack_size();
      __chkstk_darwin(v8);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      int v10 = off_68DD0[v7];
      *(_DWORD *)uint64_t v9 = 138412546;
      *(void *)(v9 + 4) = context;
      *(_WORD *)(v9 + 12) = 2080;
      *(void *)(v9 + 14) = v10;
      return __SC_log_send();
    }
  }
  return result;
}

uint64_t sub_2679C(const void *a1, CFTypeRef **a2, int a3)
{
  if ((int)sub_5B24(qword_70150) < 1)
  {
LABEL_5:
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    if (!a2) {
      return v9;
    }
LABEL_6:
    *a2 = v8;
    return v7;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = sub_5B4C(qword_70150, v6);
    uint64_t v8 = sub_5990(v7, a1, a3);
    if (v8) {
      break;
    }
    uint64_t v6 = (v6 + 1);
    if ((int)v6 >= (int)sub_5B24(qword_70150)) {
      goto LABEL_5;
    }
  }
  uint64_t v9 = v7;
  if (a2) {
    goto LABEL_6;
  }
  return v9;
}

uint64_t sub_26850(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 56;
  if ((int)sub_5B24(a1 + 56) < 1) {
    return 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t result = sub_5B4C(v5, v6);
    if (!a3 || *(_DWORD *)(result + 32))
    {
      int v8 = *(_DWORD *)(result + 24);
      if (v8 == *(_DWORD *)a2)
      {
        if (v8 != 513) {
          break;
        }
        if (*(void *)(a2 + 8) == *(void *)result && *(void *)(a2 + 16) == *(void *)(result + 8)) {
          break;
        }
      }
    }
    uint64_t v6 = (v6 + 1);
    if ((int)v6 >= (int)sub_5B24(v5)) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_268F0(const void *a1, int *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  if (CFEqual(a1, kSCValNetIPv4ConfigMethodBOOTP))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
      int v6 = 259;
LABEL_9:
      *a2 = v6;
      return 1;
    }
LABEL_8:
    int v6 = 259;
    goto LABEL_9;
  }
  if (CFEqual(a1, kSCValNetIPv4ConfigMethodDHCP)) {
    goto LABEL_8;
  }
  if (CFEqual(a1, kSCValNetIPv4ConfigMethodManual))
  {
    int v6 = 257;
    goto LABEL_9;
  }
  if (CFEqual(a1, kSCValNetIPv4ConfigMethodINFORM))
  {
    int v6 = 260;
    goto LABEL_9;
  }
  if (CFEqual(a1, kSCValNetIPv4ConfigMethodLinkLocal))
  {
    int v6 = 261;
    goto LABEL_9;
  }
  uint64_t result = CFEqual(a1, kSCValNetIPv4ConfigMethodFailover);
  if (result)
  {
    int v6 = 262;
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_26AE0(const __CFDictionary *a1, const void *a2, in_addr *a3)
{
  a3->s_addr = 0;
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    int v6 = (const void *)result;
    CFTypeID TypeID = CFArrayGetTypeID();
    if (CFGetTypeID(v6) != TypeID)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (!result) {
        return result;
      }
      goto LABEL_11;
    }
    if (!CFArrayGetCount((CFArrayRef)v6))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (!result) {
        return result;
      }
      goto LABEL_11;
    }
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v6, 0);
    if (sub_53A68(ValueAtIndex, a3)) {
      return 1;
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
LABEL_11:
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v10 = 138412290;
      *(void *)(v10 + 4) = a2;
      __SC_log_send();
      return 0;
    }
  }
  return result;
}

uint64_t sub_26D44(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v4 = sub_262A4(a1, a2, a3);
  if (G_IPConfiguration_verbose)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      uint64_t v7 = "false";
      if (v4 == 1) {
        uint64_t v7 = "true";
      }
      *(_DWORD *)uint64_t v6 = 138412546;
      *(void *)(v6 + 4) = a2;
      *(_WORD *)(v6 + 12) = 2080;
      *(void *)(v6 + 14) = v7;
      __SC_log_send();
    }
  }
  return v4;
}

uint64_t sub_26E9C(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v4 = sub_26300(a1, a2, a3);
  if (G_IPConfiguration_verbose)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v6 = 138412546;
      *(void *)(v6 + 4) = a2;
      *(_WORD *)(v6 + 12) = 1024;
      *(_DWORD *)(v6 + 14) = v4;
      __SC_log_send();
    }
  }
  return v4;
}

double sub_26FDC(const __CFDictionary *a1, const void *a2, double a3)
{
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      double valuePtr = 0.0;
      if (CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr) == 1) {
        a3 = valuePtr;
      }
    }
  }
  if (G_IPConfiguration_verbose)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v8 = 138412546;
      *(void *)(v8 + 4) = a2;
      *(_WORD *)(v8 + 12) = 2048;
      *(double *)(v8 + 14) = a3;
      __SC_log_send();
    }
  }
  return a3;
}

void *sub_2715C(const __CFDictionary *a1, const void *a2, unsigned int a3, _DWORD *a4)
{
  CFNumberRef Value = CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return 0;
  }

  return sub_271DC((const __CFArray *)Value, a3, a4);
}

void *sub_271DC(const __CFArray *a1, unsigned int a2, _DWORD *a3)
{
  if (a2 <= 4
    && ((1 << a2) & 0x16) != 0
    && (CFIndex Count = CFArrayGetCount(a1)) != 0
    && (uint64_t v7 = Count, (v8 = malloc_type_malloc(Count * a2, 0x3E7564A6uLL)) != 0))
  {
    uint64_t v9 = v8;
    if (v7 < 1)
    {
      *a3 = 0;
LABEL_20:
      free(v9);
      return 0;
    }
    uint64_t v16 = a3;
    CFIndex v10 = 0;
    int v11 = 0;
    BOOL v12 = v8;
    do
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v10);
      CFTypeID TypeID = CFNumberGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == TypeID)
        {
          int valuePtr = 0;
          if (CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr))
          {
            if (a2 == 2)
            {
              _WORD *v12 = valuePtr;
            }
            else if (a2 == 1)
            {
              *(unsigned char *)BOOL v12 = valuePtr;
            }
            ++v11;
            BOOL v12 = (_WORD *)((char *)v12 + a2);
          }
        }
      }
      ++v10;
    }
    while (v7 != v10);
    _DWORD *v16 = v11;
    if (!v11) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = 0;
    *a3 = 0;
  }
  return v9;
}

CFMutableArrayRef sub_27334(const __SCPreferences *a1)
{
  CFPropertyListRef Value = SCPreferencesGetValue(a1, @"Application");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  if (G_IPConfiguration_verbose)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v3 = _os_log_pack_size();
      __chkstk_darwin(v3);
      __error();
      uint64_t v4 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v4 = 138412290;
      *(void *)(v4 + 4) = Value;
      __SC_log_send();
    }
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    CFDictionaryApplyFunction((CFDictionaryRef)Value, (CFDictionaryApplierFunction)sub_274D0, Mutable);
    if (!CFArrayGetCount(Mutable))
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

void sub_274D0(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a2)
  {
    if (CFGetTypeID(a2) == TypeID)
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a2, @"DHCPRequestedParameterList");
      CFTypeID v7 = CFArrayGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == v7)
        {
          v8.length = CFArrayGetCount(Value);
          v8.location = 0;
          CFArrayApplyFunction(Value, v8, (CFArrayApplierFunction)sub_27590, a3);
        }
      }
    }
  }
}

void sub_27590(const void *a1, const __CFArray *a2)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    sub_53FF8(a2, a1);
  }
}

void sub_27600(SCDynamicStoreRef store)
{
  if (store)
  {
    if (qword_70148)
    {
      free((void *)qword_70148);
      qword_70148 = 0;
    }
    CFStringEncoding nameEncoding = 0;
    CFStringRef theString = SCDynamicStoreCopyComputerName(store, &nameEncoding);
    if (!theString) {
      goto LABEL_19;
    }
    if (_SC_CFStringIsValidDNSName())
    {
      CFArrayRef MutableCopy = (__CFString *)theString;
    }
    else
    {
      sub_6DB0((const void **)&theString);
      CFStringRef theString = SCDynamicStoreCopyLocalHostName(store);
      if (!theString || !_SC_CFStringIsValidDNSName()) {
        goto LABEL_19;
      }
      CFIndex Length = CFStringGetLength(theString);
      CFStringRef v4 = theString;
      if (Length <= dword_700D0)
      {
        CFArrayRef MutableCopy = (__CFString *)theString;
      }
      else
      {
        uint64_t v5 = dword_700D0;
        if (dword_700D0 < 3 || !theString) {
          goto LABEL_19;
        }
        CFArrayRef MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0, theString);
        v12.length = CFStringGetLength(v4);
        v12.location = 0;
        CFStringFindAndReplace(MutableCopy, @"macbook-air", @"Air", v12, 1uLL);
        v13.length = CFStringGetLength(v4);
        v13.location = 0;
        CFStringFindAndReplace(MutableCopy, @"macbook-pro", @"MBP", v13, 1uLL);
        v14.length = CFStringGetLength(v4);
        v14.location = 0;
        CFStringFindAndReplace(MutableCopy, @"mac-mini", @"Mini", v14, 1uLL);
        v15.length = CFStringGetLength(v4);
        v15.location = 0;
        CFStringFindAndReplace(MutableCopy, @"mac-pro", @"Pro", v15, 1uLL);
        CFIndex v6 = CFStringGetLength(MutableCopy);
        if (v6 > v5)
        {
          v16.length = v6 - 1;
          v16.location = 0;
          CFStringFindAndReplace(MutableCopy, @"-", &stru_6B760, v16, 1uLL);
          CFIndex v7 = CFStringGetLength(MutableCopy);
          if (v7 > v5)
          {
            v11.location = v5 >> 1;
            v11.length = v7 - v5;
            CFStringDelete(MutableCopy, v11);
          }
        }
        if (!MutableCopy) {
          goto LABEL_19;
        }
        sub_6DB0((const void **)&theString);
        CFStringRef theString = MutableCopy;
      }
    }
    if (CFStringGetCString(MutableCopy, buffer, 256, 0x600u)) {
      qword_70148 = (uint64_t)strdup(buffer);
    }
LABEL_19:
    sub_6DB0((const void **)&theString);
  }
}

void sub_27858(const __SCDynamicStore *a1, CFStringRef theString)
{
  if (CFStringHasPrefix(theString, (CFStringRef)qword_701D0))
  {
    CFStringRef v4 = (const __CFString *)sub_54084(theString, @"/", 3);
    CFStringRef v59 = v4;
    if (v4)
    {
      v56[0] = 0;
      v56[1] = 0;
      sub_539E0(v4, (UInt8 *)__s2, 17, 0);
      sub_6DB0((const void **)&v59);
      uint64_t v5 = sub_1EF8C(__s2, 0);
      CFPropertyListRef v6 = sub_91BC(a1, theString);
      int v60 = v6;
      if (v6 && CFDictionaryContainsKey((CFDictionaryRef)v6, kSCPropNetLinkDetaching))
      {
        if (v5)
        {
          sub_217E8(v5, 1);
          sub_21860(v5, 1);
        }
        goto LABEL_59;
      }
      uint64_t v7 = sub_57EB8((uint64_t *)qword_70188, __s2);
      if (v7)
      {
        uint64_t v8 = v7;
        unint64_t v9 = sub_58DD0(v7);
        int v11 = v10;
        unint64_t v57 = v9;
        int v58 = v10;
        uint64_t v12 = v9;
        if (v9)
        {
          int v13 = sub_589D0(v8);
          if (!v5) {
            goto LABEL_59;
          }
        }
        else
        {
          int v13 = 0;
          if (!v5) {
            goto LABEL_59;
          }
        }
        int v14 = *(_DWORD *)v5;
        if ((*(_DWORD *)v5 & 0x10) == 0)
        {
          unint64_t v15 = HIDWORD(v9);
          *(unsigned char *)(v5 + 168) = 0;
          *(_DWORD *)uint64_t v5 = v14 & 0xFFE7FFF7;
          sub_589A4(*(void *)(v5 + 8), v8);
          sub_4220();
          _SC_syslog_os_log_mapping();
          int v16 = __SC_log_enabled();
          if (v9)
          {
            if (!v16) {
              goto LABEL_31;
            }
            uint64_t v17 = _os_log_pack_size();
            uint64_t v55 = &v50;
            __chkstk_darwin(v17);
            __error();
            uint64_t v18 = _os_log_pack_fill();
            if (HIDWORD(v9)) {
              CFStringRef v19 = "ACTIVE";
            }
            else {
              CFStringRef v19 = "INACTIVE";
            }
            CFStringRef v20 = " [link address changed]";
            unint64_t v54 = HIDWORD(v9);
            if (!v13) {
              CFStringRef v20 = "";
            }
            int v51 = v20;
            CFMutableDictionaryRef v52 = v19;
            CFStringRef v21 = " [wake on same network]";
            if (!v11) {
              CFStringRef v21 = "";
            }
            BOOL v50 = v21;
            int v22 = sub_58D10(v8);
            uint64_t v53 = v9;
            int v23 = v13;
            if (v22) {
              CFDictionaryRef v24 = " [expensive]";
            }
            else {
              CFDictionaryRef v24 = "";
            }
            int v25 = sub_58D04(v8);
            *(void *)(v18 + 4) = __s2;
            uint64_t v26 = " [carplay]";
            *(_DWORD *)uint64_t v18 = 136316418;
            *(_WORD *)(v18 + 12) = 2080;
            if (!v25) {
              uint64_t v26 = "";
            }
            *(void *)(v18 + 14) = v52;
            *(_WORD *)(v18 + 22) = 2080;
            *(void *)(v18 + 24) = v51;
            *(_WORD *)(v18 + 32) = 2080;
            *(void *)(v18 + 34) = v50;
            *(_WORD *)(v18 + 42) = 2080;
            *(void *)(v18 + 44) = v24;
            int v13 = v23;
            uint64_t v12 = v53;
            unint64_t v15 = v54;
            *(_WORD *)(v18 + 52) = 2080;
            *(void *)(v18 + 54) = v26;
          }
          else
          {
            if (!v16) {
              goto LABEL_31;
            }
            uint64_t v27 = _os_log_pack_size();
            uint64_t v55 = &v50;
            __chkstk_darwin(v27);
            __error();
            uint64_t v28 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v28 = 136315138;
            *(void *)(v28 + 4) = __s2;
          }
          __SC_log_send();
LABEL_31:
          if (!v13 && dword_701A8 != *(_DWORD *)(v5 + 116))
          {
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v29 = _os_log_pack_size();
              unint64_t v54 = v15;
              __chkstk_darwin(v29);
              __error();
              uint64_t v30 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v30 = 136315138;
              *(void *)(v30 + 4) = __s2;
              __SC_log_send();
              LODWORD(v15) = v54;
            }
            sub_2A4CC(v5);
            if (v11) {
              goto LABEL_59;
            }
          }
          sub_2A8E0((const void **)v5, (uint64_t)v56, (uint64_t *)&v57);
          if (v12) {
            BOOL v31 = v15 == 0;
          }
          else {
            BOOL v31 = 0;
          }
          int v32 = !v31;
          if (v31)
          {
            if (byte_701D8 == 1)
            {
              sub_4220();
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                uint64_t v33 = _os_log_pack_size();
                __chkstk_darwin(v33);
                __error();
                uint64_t v34 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v34 = 136315138;
                *(void *)(v34 + 4) = __s2;
                __SC_log_send();
              }
              timer_cancel(*(void *)(v5 + 104));
              *(_DWORD *)v5 |= 0x20u;
            }
            else
            {
              *(_DWORD *)v5 &= ~0x20u;
              sub_4220();
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                uint64_t v35 = _os_log_pack_size();
                __chkstk_darwin(v35);
                __error();
                uint64_t v36 = _os_log_pack_fill();
                uint64_t v37 = qword_700C8;
                *(_DWORD *)uint64_t v36 = 136315394;
                *(void *)(v36 + 4) = __s2;
                *(_WORD *)(v36 + 12) = 2048;
                *(void *)(v36 + 14) = v37;
                __SC_log_send();
              }
              timer_callout_set(*(void *)(v5 + 104), sub_2AB70, v5, 0, 0, *(double *)&qword_700C8);
            }
          }
          else
          {
            *(_DWORD *)v5 &= ~0x20u;
            timer_cancel(*(void *)(v5 + 104));
          }
          if (sub_5802C(*(void *)(v5 + 8)) == 57 || *(_DWORD *)(v5 + 152)) {
            goto LABEL_53;
          }
          if (v13)
          {
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v40 = _os_log_pack_size();
              __chkstk_darwin(v40);
              __error();
              uint64_t v41 = _os_log_pack_fill();
              uint64_t v42 = nullsub_1(v8);
              *(_DWORD *)uint64_t v41 = 136315138;
              *(void *)(v41 + 4) = v42;
              __SC_log_send();
            }
            CFStringRef v43 = (const char *)nullsub_1(v8);
            sub_37494(v43);
          }
          if (sub_5B24(v5 + 24))
          {
            CFTypeRef v44 = (const char *)nullsub_1(v8);
            int v45 = sub_35D90(v44, v32);
            BOOL v46 = v45 == 0;
            if (!sub_5B24(v5 + 56))
            {
              if (!v45) {
                goto LABEL_72;
              }
              goto LABEL_53;
            }
          }
          else
          {
            if (!sub_5B24(v5 + 56)) {
              goto LABEL_53;
            }
            BOOL v46 = 0;
          }
          if (sub_260AC(v5, v32) || v46)
          {
LABEL_72:
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v47 = _os_log_pack_size();
              __chkstk_darwin(v47);
              __error();
              uint64_t v48 = _os_log_pack_fill();
              uint64_t v49 = nullsub_1(v8);
              *(_DWORD *)uint64_t v48 = 136315138;
              *(void *)(v48 + 4) = v49;
              __SC_log_send();
            }
            sub_22F90(v5, 4, 0);
          }
LABEL_53:
          if ((int)sub_5B24(v5 + 24) >= 1)
          {
            uint64_t v38 = 0;
            do
            {
              uint64_t v39 = sub_5B4C(v5 + 24, v38);
              if (*(unsigned char *)(v39 + 25)) {
                *(_DWORD *)(v39 + 116) &= ~4u;
              }
              sub_48A8(v39, 3, (__CFDictionary *)v56);
              uint64_t v38 = (v38 + 1);
            }
            while ((int)v38 < (int)sub_5B24(v5 + 24));
          }
          sub_483C(v5 + 56, 3, (__CFDictionary *)v56);
        }
      }
LABEL_59:
      sub_6DB0(&v60);
    }
  }
}

void sub_28160(const __CFString *a1)
{
  uint64_t v17 = 0;
  if (CFStringHasPrefix(a1, (CFStringRef)qword_701D0))
  {
    CFTypeRef v2 = sub_54084(a1, @"/", 3);
    uint64_t v18 = v2;
    if (v2)
    {
      uint64_t v3 = sub_2AEC8(v2);
      sub_6DB0(&v18);
      if (v3)
      {
        if ((*(unsigned char *)v3 & 0x10) == 0)
        {
          CFStringRef v4 = (uint64_t *)qword_70188;
          uint64_t v5 = (char *)nullsub_1(*(void *)(v3 + 8));
          uint64_t v6 = sub_57EB8(v4, v5);
          if (v6)
          {
            uint64_t v7 = v6;
            unint64_t v8 = sub_58DD0(v6);
            if (sub_58CE0(*(void *)(v3 + 8)))
            {
              if (HIDWORD(v8) || v8 == 0)
              {
                uint64_t v10 = *(void *)(v3 + 8);
                if (!*(_DWORD *)(v10 + 80) || *(_DWORD *)(v10 + 84))
                {
                  int v11 = (const void *)sub_25C48(*(void *)(v3 + 16));
                  uint64_t v17 = v11;
                  if (sub_2EA0C(*(void *)(v3 + 96), (uint64_t)v11) == 3)
                  {
                    if (!sub_58CEC(v7))
                    {
                      sub_4220();
                      _SC_syslog_os_log_mapping();
                      if (__SC_log_enabled())
                      {
                        uint64_t v12 = _os_log_pack_size();
                        __chkstk_darwin(v12);
                        __error();
                        uint64_t v13 = _os_log_pack_fill();
                        uint64_t v14 = nullsub_1(v7);
                        *(_DWORD *)uint64_t v13 = 136315138;
                        *(void *)(v13 + 4) = v14;
                        __SC_log_send();
                      }
                    }
                    sub_25F2C(v3, v11);
                    if (sub_5B24(v3 + 24))
                    {
                      uint64_t v15 = 0;
                      do
                      {
                        uint64_t v16 = sub_5B4C(v3 + 24, v15);
                        if (*(unsigned char *)(v16 + 25)) {
                          *(_DWORD *)(v16 + 116) &= ~4u;
                        }
                        sub_48A8(v16, 16, 0);
                        uint64_t v15 = (v15 + 1);
                      }
                      while (v15 < sub_5B24(v3 + 24));
                    }
                    sub_483C(v3 + 56, 16, 0);
                  }
                }
              }
            }
          }
        }
      }
      sub_6DB0(&v17);
    }
  }
}

void sub_283D8(const __CFString *a1)
{
  if (CFStringHasPrefix(a1, (CFStringRef)qword_701D0))
  {
    CFTypeRef v2 = sub_54084(a1, @"/", 3);
    uint64_t v10 = v2;
    if (v2)
    {
      CFTypeRef v3 = v2;
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      uint64_t v4 = sub_2AEC8(v2);
      if (v4)
      {
        uint64_t v5 = v4;
        int v6 = sub_58DC8(*(void *)(v4 + 8));
        sub_399B8((uint64_t)v11, v6);
        if (G_IPConfiguration_verbose)
        {
          uint64_t v7 = sub_39E9C((uint64_t)v11);
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v8 = _os_log_pack_size();
            __chkstk_darwin(v8);
            __error();
            uint64_t v9 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v9 = 138412546;
            *(void *)(v9 + 4) = v3;
            *(_WORD *)(v9 + 12) = 2112;
            *(void *)(v9 + 14) = v7;
            __SC_log_send();
          }
          CFRelease(v7);
        }
        sub_2AF4C(v5, (uint64_t)v11);
        sub_483C(v5 + 56, 15, (__CFDictionary *)v11);
        sub_2B294(v5, (uint64_t *)v11);
        sub_3A038((uint64_t)v11);
      }
      sub_6DB0(&v10);
    }
  }
}

void sub_285E0(const __SCDynamicStore *a1, CFStringRef theString)
{
  if (CFStringHasPrefix(theString, (CFStringRef)qword_701D0))
  {
    CFTypeRef v4 = sub_54084(theString, @"/", 3);
    CFStringRef v21 = v4;
    if (v4)
    {
      CFTypeRef v5 = v4;
      uint64_t v6 = sub_2AEC8(v4);
      if (v6)
      {
        uint64_t v7 = (int *)v6;
        uint64_t v8 = (const char *)nullsub_1(*(void *)(v6 + 8));
        int v9 = sub_380CC(v8);
        int v20 = v9;
        int v10 = *v7;
        if (v9)
        {
          int v11 = v10 | 0x100000;
        }
        else
        {
          int *v7 = v10 & 0xFFEFFFFF;
          CFDictionaryRef v15 = (const __CFDictionary *)sub_91BC(a1, theString);
          if (!v15
            || (CFDictionaryRef v16 = v15,
                int v17 = CFDictionaryContainsKey(v15, kSCPropNetNAT64PLATDiscoveryCompletionTime),
                CFRelease(v16),
                !v17))
          {
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v18 = _os_log_pack_size();
              __chkstk_darwin(v18);
              __error();
              uint64_t v19 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v19 = 138412290;
              *(void *)(v19 + 4) = v5;
              __SC_log_send();
            }
            goto LABEL_11;
          }
          int v11 = *v7;
        }
        int *v7 = v11 | 0x80000;
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v12 = _os_log_pack_size();
          __chkstk_darwin(v12);
          __error();
          uint64_t v13 = _os_log_pack_fill();
          uint64_t v14 = "";
          if (!v9) {
            uint64_t v14 = "no ";
          }
          *(_DWORD *)uint64_t v13 = 138412546;
          *(void *)(v13 + 4) = v5;
          *(_WORD *)(v13 + 12) = 2080;
          *(void *)(v13 + 14) = v14;
          __SC_log_send();
        }
        sub_483C((uint64_t)(v7 + 14), 19, (__CFDictionary *)&v20);
      }
LABEL_11:
      sub_6DB0(&v21);
    }
  }
}

void sub_28894(const __CFString *a1)
{
  if (CFStringHasPrefix(a1, (CFStringRef)qword_701D0))
  {
    CFTypeRef v2 = sub_54084(a1, @"/", 3);
    uint64_t v12 = v2;
    if (v2)
    {
      CFTypeRef v3 = v2;
      uint64_t v4 = sub_2AEC8(v2);
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t v11 = 0;
        int v6 = sub_58DC8(*(void *)(v4 + 8));
        HIDWORD(v11) = sub_389FC(v6, &v11);
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v7 = _os_log_pack_size();
          __chkstk_darwin(v7);
          __error();
          uint64_t v8 = _os_log_pack_fill();
          int v10 = v11;
          int v9 = HIDWORD(v11);
          *(_DWORD *)uint64_t v8 = 138412802;
          *(void *)(v8 + 4) = v3;
          *(_WORD *)(v8 + 12) = 1024;
          *(_DWORD *)(v8 + 14) = v9;
          *(_WORD *)(v8 + 18) = 1024;
          *(_DWORD *)(v8 + 20) = v10;
          __SC_log_send();
        }
        sub_483C(v5 + 56, 18, (__CFDictionary *)&v11);
      }
      sub_6DB0(&v12);
    }
  }
}

void sub_28A30(const __SCDynamicStore *a1, CFStringRef theString)
{
  v14[0] = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v11 = 0;
  int v10 = 0;
  v8.s_addr = 0;
  CFTypeRef v3 = sub_3B688(theString, &v8, &v11, &v10);
  int v9 = v3;
  uint64_t v4 = v11;
  if (v3 && v11)
  {
    uint64_t v5 = sub_2AEC8(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if ((*(unsigned char *)v5 & 0x10) == 0)
      {
        uint64_t v7 = sub_934C(*(void *)(v5 + 8));
        if (!sub_2484C(v7, v7, v11, v10))
        {
          long long v13 = 0u;
          v14[0] = 0;
          *(void *)&long long v12 = v8.s_addr;
          *((void *)&v12 + 1) = v11;
          LODWORD(v13) = v10;
          DWORD1(v13) = sub_2BAE0(a1, *(CFStringRef *)(v6 + 16), v11, v10, (in_addr *)&v13 + 2, v14);
          sub_483C(v6 + 24, 9, (__CFDictionary *)&v12);
          sub_6DB0(v14);
        }
      }
    }
    uint64_t v4 = v11;
  }
  if (v4) {
    free(v4);
  }
  sub_6DB0(&v9);
}

uint64_t sub_28B48()
{
  CFArrayRef v0 = sub_5803C();
  if (v0)
  {
    uint64_t v1 = (uint64_t)v0;
    if (qword_70188) {
      sub_58860(&qword_70188);
    }
    qword_70188 = v1;
    return 1;
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v3 = _os_log_pack_size();
      __chkstk_darwin(v3);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
      return 0;
    }
  }
  return result;
}

void sub_28C7C()
{
  uint64_t v0 = sub_5B24(qword_70150);
  if (!v0) {
    return;
  }
  uint64_t v1 = v0;
  CFTypeRef v2 = (const char **)malloc_type_malloc(8 * (int)v0, 0x10040436913F5uLL);
  if (!v2) {
    return;
  }
  uint64_t v4 = v2;
  if ((int)v1 < 1) {
    goto LABEL_16;
  }
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = qword_70150;
  in_addr v8 = &off_70000;
  *(void *)&long long v3 = 136315650;
  long long v29 = v3;
  uint64_t v30 = v2;
  do
  {
    uint64_t v9 = sub_5B4C(v7, v6);
    int v10 = (uint64_t *)v8[49];
    uint64_t v11 = (char *)nullsub_1(*(void *)(v9 + 8));
    uint64_t v12 = sub_57EB8(v10, v11);
    if (v12)
    {
      uint64_t v13 = v12;
      int v14 = sub_58DC8(v12);
      if (v14 == sub_58DC8(*(void *)(v9 + 8))) {
        goto LABEL_10;
      }
      uint64_t v15 = sub_4220();
      int v16 = _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v17 = _os_log_pack_size();
        uint64_t v33 = &v29;
        __chkstk_darwin(v17);
        __error();
        uint64_t v18 = _os_log_pack_fill();
        uint64_t v19 = nullsub_1(v13);
        int v32 = v16;
        int v20 = v7;
        uint64_t v21 = v19;
        int v22 = sub_58DC8(*(void *)(v9 + 8));
        uint64_t v31 = v15;
        uint64_t v23 = v1;
        int v24 = v22;
        int v25 = sub_58DC8(v13);
        *(_DWORD *)uint64_t v18 = v29;
        *(void *)(v18 + 4) = v21;
        uint64_t v7 = v20;
        *(_WORD *)(v18 + 12) = 1024;
        *(_DWORD *)(v18 + 14) = v24;
        uint64_t v1 = v23;
        *(_WORD *)(v18 + 18) = 1024;
        *(_DWORD *)(v18 + 20) = v25;
        uint64_t v4 = v30;
        in_addr v8 = &off_70000;
        __SC_log_send();
      }
    }
    v4[v5++] = (const char *)nullsub_1(*(void *)(v9 + 8));
LABEL_10:
    uint64_t v6 = (v6 + 1);
  }
  while (v1 != v6);
  if (v5 >= 1)
  {
    uint64_t v26 = v5;
    uint64_t v27 = v4;
    do
    {
      uint64_t v28 = *v27;
      unsigned int v34 = -1;
      if (sub_1EF8C(v28, &v34)) {
        sub_57C84(qword_70150, v34);
      }
      ++v27;
      --v26;
    }
    while (v26);
  }
LABEL_16:
  free(v4);
}

__CFArray *sub_28F04(const __SCDynamicStore *a1, __CFArray **a2)
{
  CFMutableArrayRef v67 = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  int v68 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  CFMutableArrayRef v4 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  uint64_t v71 = v4;
  int v70 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetIPv4);
  CFArrayAppendValue(v68, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFStringRef v6 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetIPv6);
  CFArrayAppendValue(v68, v6);
  CFRelease(v6);
  CFStringRef v7 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNet6to4);
  CFArrayAppendValue(v68, v7);
  CFRelease(v7);
  CFStringRef v8 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetInterface);
  CFArrayAppendValue(v68, v8);
  CFRelease(v8);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, 0);
  CFArrayAppendValue(v68, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  CFStringRef NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainSetup, kSCEntNetIPv4);
  CFStringRef v66 = NetworkGlobalEntity;
  CFArrayAppendValue(Mutable, NetworkGlobalEntity);
  CFDictionaryRef v11 = SCDynamicStoreCopyMultiple(a1, Mutable, v68);
  CFDictionaryRef v65 = v11;
  if (!v11) {
    goto LABEL_68;
  }
  CFDictionaryRef v12 = v11;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v11, NetworkGlobalEntity);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, kSCPropNetServiceOrder);
      CFTypeID v15 = CFArrayGetTypeID();
      if (!Value) {
        goto LABEL_10;
      }
      if (CFGetTypeID(Value) == v15)
      {
        if (!CFArrayGetCount(Value)) {
          CFDictionaryRef Value = 0;
        }
        goto LABEL_10;
      }
    }
    CFDictionaryRef Value = 0;
  }
LABEL_10:
  CFIndex Count = CFDictionaryGetCount(v12);
  if (Count)
  {
    uint64_t v17 = Count;
    CFDictionaryRef v64 = Value;
    uint64_t v63 = a2;
    CFMutableArrayRef v18 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    int valuePtr = v18;
    uint64_t v19 = (const void **)malloc_type_malloc(8 * v17, 0xC0040B8AA526DuLL);
    CFDictionaryGetKeysAndValues(v12, v19, 0);
    if (v17 >= 1)
    {
      int v20 = (CFStringRef *)v19;
      do
      {
        if (CFStringHasPrefix(*v20, (CFStringRef)qword_701C8))
        {
          CFTypeRef v21 = sub_54084(*v20, @"/", 3);
          if (v21)
          {
            int v22 = v21;
            sub_53FF8(v18, v21);
            CFRelease(v22);
          }
        }
        ++v20;
        --v17;
      }
      while (v17);
    }
    free(v19);
    CFIndex v23 = CFArrayGetCount(v18);
    if (v23)
    {
      if (v64)
      {
        v73.length = v23;
        v73.location = 0;
        CFArraySortValues(v18, v73, (CFComparatorFunction)sub_2997C, v64);
      }
    }
    else
    {
      sub_6DB0((const void **)&valuePtr);
      CFMutableArrayRef v18 = valuePtr;
    }
    CFMutableArrayRef v67 = v18;
    if (v18)
    {
      CFIndex v24 = CFArrayGetCount(v18);
      if (v24 >= 1)
      {
        CFIndex v25 = v24;
        CFIndex v26 = 0;
        CFStringRef v59 = (const void *)kSCValNetInterfaceTypeLoopback;
        CFStringRef v27 = kSCEntNetInterface;
        unint64_t v62 = v18;
        do
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v18, v26);
          CFStringRef v29 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, ValueAtIndex, v27);
          CFDictionaryRef v30 = (const __CFDictionary *)CFDictionaryGetValue(v12, v29);
          CFRelease(v29);
          CFTypeID v31 = CFDictionaryGetTypeID();
          if (v30 && CFGetTypeID(v30) == v31)
          {
            int v32 = CFDictionaryGetValue(v30, kSCPropNetInterfaceType);
            CFTypeID v33 = CFStringGetTypeID();
            if (v32 && CFGetTypeID(v32) == v33)
            {
              CFStringRef v34 = (const __CFString *)CFDictionaryGetValue(v30, kSCPropNetInterfaceDeviceName);
              CFTypeID v35 = CFStringGetTypeID();
              if (v34 && CFGetTypeID(v34) == v35)
              {
                CFStringRef v61 = v34;
                CFStringRef v36 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainSetup, v34, 0);
                uint64_t v37 = CFDictionaryGetValue(v12, v36);
                CFRelease(v36);
                CFTypeID v38 = CFDictionaryGetTypeID();
                if (v37
                  && CFGetTypeID(v37) == v38
                  && (CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v37, @"DisableUntilNeeded"),
                      CFTypeID v40 = CFNumberGetTypeID(),
                      v39)
                  && CFGetTypeID(v39) == v40)
                {
                  LODWORD(valuePtr) = 0;
                  int v41 = CFNumberGetValue(v39, kCFNumberIntType, &valuePtr);
                  CFBooleanRef v42 = kCFBooleanFalse;
                  if (valuePtr) {
                    CFBooleanRef v42 = kCFBooleanTrue;
                  }
                  if (!v41) {
                    CFBooleanRef v42 = 0;
                  }
                  CFBooleanRef v60 = v42;
                }
                else
                {
                  CFBooleanRef v60 = 0;
                }
                CFDictionaryRef v12 = v65;
                if (CFEqual(v32, kSCValNetInterfaceTypeEthernet)
                  || CFEqual(v32, kSCValNetInterfaceTypeFireWire)
                  || CFEqual(v32, v59))
                {
                  CFStringRef v45 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, ValueAtIndex, kSCEntNetIPv4);
                  CFDictionaryRef v46 = (const __CFDictionary *)CFDictionaryGetValue(v65, v45);
                  CFRelease(v45);
                  CFTypeID v47 = CFDictionaryGetTypeID();
                  if (v46)
                  {
                    if (CFGetTypeID(v46) == v47)
                    {
                      CFArrayRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v46);
                      CFDictionarySetValue(MutableCopy, kSCPropNetInterfaceDeviceName, v61);
                      CFDictionarySetValue(MutableCopy, @"ServiceID", ValueAtIndex);
                      if (v60) {
                        CFDictionarySetValue(MutableCopy, @"_DisableUntilNeeded", v60);
                      }
                      if (MutableCopy)
                      {
                        CFArrayAppendValue(v71, MutableCopy);
                        CFRelease(MutableCopy);
                      }
                    }
                  }
                }
                if (CFEqual(v32, kSCValNetInterfaceTypeEthernet)
                  || CFEqual(v32, kSCValNetInterfaceTypeFireWire)
                  || CFEqual(v32, kSCValNetInterfaceType6to4)
                  || CFEqual(v32, v59))
                {
                  CFStringRef v49 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, ValueAtIndex, kSCEntNetIPv6);
                  CFDictionaryRef v50 = (const __CFDictionary *)CFDictionaryGetValue(v65, v49);
                  CFRelease(v49);
                  CFTypeID v51 = CFDictionaryGetTypeID();
                  if (v50)
                  {
                    if (CFGetTypeID(v50) == v51)
                    {
                      CFMutableDictionaryRef v52 = CFDictionaryCreateMutableCopy(0, 0, v50);
                      CFDictionarySetValue(v52, kSCPropNetInterfaceDeviceName, v61);
                      CFDictionarySetValue(v52, @"ServiceID", ValueAtIndex);
                      CFStringRef v53 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, ValueAtIndex, kSCEntNet6to4);
                      CFDictionaryRef v54 = (const __CFDictionary *)CFDictionaryGetValue(v65, v53);
                      CFRelease(v53);
                      if (v60) {
                        CFDictionarySetValue(v52, @"_DisableUntilNeeded", v60);
                      }
                      CFTypeID v55 = CFDictionaryGetTypeID();
                      if (v54)
                      {
                        if (CFGetTypeID(v54) == v55)
                        {
                          int v56 = CFDictionaryGetValue(v54, kSCPropNet6to4Relay);
                          if (v56) {
                            CFDictionarySetValue(v52, @"6to4Relay", v56);
                          }
                        }
                      }
                      if (v52)
                      {
                        CFArrayAppendValue(v70, v52);
                        CFRelease(v52);
                      }
                    }
                  }
                }
              }
            }
            else
            {
              sub_4220();
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                uint64_t v43 = _os_log_pack_size();
                __chkstk_darwin(v43);
                __error();
                uint64_t v44 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v44 = 138412290;
                *(void *)(v44 + 4) = v30;
                CFStringRef v27 = kSCEntNetInterface;
                __SC_log_send();
                CFMutableArrayRef v18 = v62;
              }
            }
          }
          ++v26;
        }
        while (v25 != v26);
        CFMutableArrayRef v4 = v71;
        a2 = v63;
      }
    }
  }
  else
  {
    CFMutableArrayRef v67 = 0;
  }
LABEL_68:
  sub_6DB0((const void **)&v65);
  sub_6DB0((const void **)&v66);
  sub_6DB0((const void **)&Mutable);
  sub_6DB0((const void **)&v68);
  sub_6DB0((const void **)&v67);
  if (v4 && !CFArrayGetCount(v4)) {
    sub_6DB0((const void **)&v71);
  }
  unint64_t v57 = v70;
  if (v70 && !CFArrayGetCount(v70))
  {
    sub_6DB0((const void **)&v70);
    unint64_t v57 = v70;
  }
  *a2 = v57;
  return v71;
}

uint64_t sub_298F0(const __CFArray *a1, const __CFArray *a2)
{
  uint64_t result = sub_57DB4(qword_70188);
  if ((int)result >= 1)
  {
    signed int v5 = 0;
    do
    {
      CFStringRef v6 = (_OWORD *)sub_57DC0(qword_70188, v5);
      sub_29A58(v6, a1, 1);
      sub_29A58(v6, a2, 0);
      ++v5;
      uint64_t result = sub_57DB4(qword_70188);
    }
    while (v5 < (int)result);
  }
  return result;
}

uint64_t sub_2997C(const void *a1, const void *a2, const __CFArray *a3)
{
  int v5 = sub_299D4(a3, a1);
  int v6 = sub_299D4(a3, a2);
  uint64_t v7 = -1;
  if (v5 >= v6) {
    uint64_t v7 = 1;
  }
  if (v5 == v6) {
    return 0;
  }
  else {
    return v7;
  }
}

CFIndex sub_299D4(const __CFArray *a1, const void *a2)
{
  uint64_t v2 = 1000000;
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
        if (CFEqual(ValueAtIndex, a2)) {
          break;
        }
        if (v6 == ++v7) {
          return v2;
        }
      }
      return v7;
    }
  }
  return v2;
}

void sub_29A58(_OWORD *a1, const __CFArray *a2, uint64_t a3)
{
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  CFBooleanRef BOOLean = 0;
  CFIndex v6 = (char *)nullsub_1(a1);
  LODWORD(a2) = sub_29D00((uint64_t)&v36, a3, a2, v6);
  CFIndex v7 = (const char *)nullsub_1(a1);
  if (a2)
  {
    uint64_t v8 = sub_1EF8C(v7, 0);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = HIDWORD(v37) ? v8 + 24 : v8 + 56;
      CFMutableArrayRef Mutable = (CFTypeRef *)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      CFTypeID v40 = Mutable;
      if (Mutable)
      {
        CFDictionaryRef v12 = (__CFArray *)Mutable;
        if ((int)sub_5B24(v10) >= 1)
        {
          uint64_t v13 = 0;
          do
          {
            uint64_t v14 = sub_5B4C(v10, v13);
            if (!*(_DWORD *)(v14 + 32) && !*(void *)(v14 + 48))
            {
              CFTypeID v15 = *(const void **)v14;
              if ((int)v37 < 1)
              {
LABEL_15:
                CFArrayAppendValue(v12, v15);
              }
              else
              {
                int v16 = 0;
                uint64_t v17 = (CFTypeRef *)v36;
                while (!CFEqual(v15, *v17))
                {
                  ++v16;
                  v17 += 8;
                  if (v16 >= (int)v37) {
                    goto LABEL_15;
                  }
                }
              }
            }
            uint64_t v13 = (v13 + 1);
          }
          while ((int)v13 < (int)sub_5B24(v10));
        }
        CFIndex Count = CFArrayGetCount(v12);
        if (Count >= 1)
        {
          CFIndex v19 = Count;
          for (CFIndex i = 0; i != v19; ++i)
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v12, i);
            sub_261CC(v9, ValueAtIndex, SHIDWORD(v37));
          }
        }
        sub_6DB0((const void **)&v40);
      }
    }
    uint64_t v22 = sub_21790(a1);
    if (v22)
    {
      uint64_t v23 = v22;
      sub_2A24C(v22, BOOLean);
      if ((int)v37 >= 1)
      {
        int v24 = 0;
        CFIndex v25 = (unsigned int *)(v36 + 8);
        while (1)
        {
          int v26 = HIDWORD(v37);
          CFStringRef v27 = (void *)*((void *)v25 - 1);
          uint64_t v28 = sub_5990(v23, v27, SHIDWORD(v37));
          CFTypeID v40 = v28;
          if (!v28) {
            break;
          }
          CFStringRef v29 = v28;
          int v39 = 0;
          unsigned int v30 = *((_DWORD *)v28 + 6);
          if (v30 != *v25) {
            goto LABEL_28;
          }
          int v31 = sub_568C((uint64_t)v28, v25, &v39);
          if (v31 | v39)
          {
            unsigned int v30 = *((_DWORD *)v29 + 6);
LABEL_28:
            CFTypeRef v32 = *v29;
            int v33 = (v30 >> 8) & 1;
            uint64_t v34 = v23;
LABEL_31:
            sub_261CC(v34, v32, v33);
            goto LABEL_32;
          }
LABEL_33:
          ++v24;
          v25 += 16;
          if (v24 >= (int)v37) {
            goto LABEL_34;
          }
        }
        uint64_t v34 = sub_2679C(v27, &v40, v26);
        if (v34)
        {
          CFTypeRef v32 = *v40;
          int v33 = (*((_DWORD *)v40 + 6) >> 8) & 1;
          goto LABEL_31;
        }
LABEL_32:
        sub_218D8(v23, v27, (uint64_t)v25, 0, 0, 0);
        goto LABEL_33;
      }
    }
LABEL_34:
    sub_2A408((uint64_t)&v36);
  }
  else
  {
    uint64_t v35 = sub_1EF8C(v7, 0);
    if (v35)
    {
      if (a3) {
        sub_217E8(v35, 0);
      }
      else {
        sub_21860(v35, 0);
      }
    }
  }
}

uint64_t sub_29D00(uint64_t a1, uint64_t a2, const __CFArray *a3, char *cStr)
{
  uint64_t v6 = a2;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 12) = a2;
  CFStringRef v8 = CFStringCreateWithCString(0, cStr, 0x600u);
  CFStringRef v62 = v8;
  if (a3
    && (CFStringRef v9 = v8, Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks), (*(void *)&v64 = Mutable) != 0))
  {
    CFDictionaryRef v11 = Mutable;
    CFStringRef v61 = cStr;
    CFIndex Count = CFArrayGetCount(a3);
    if (Count >= 1)
    {
      CFIndex v13 = Count;
      for (CFIndex i = 0; i != v13; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, i);
        CFDictionaryRef Value = CFDictionaryGetValue(ValueAtIndex, kSCPropNetInterfaceDeviceName);
        if (CFEqual(Value, v9)) {
          CFArrayAppendValue(v11, ValueAtIndex);
        }
      }
    }
    if (!CFArrayGetCount(v11))
    {
      sub_6DB0((const void **)&v64);
      CFDictionaryRef v11 = (__CFArray *)v64;
    }
    uint64_t v63 = v11;
    uint64_t v17 = v61;
    if (v11)
    {
      CFIndex v18 = CFArrayGetCount(v11);
      CFIndex v19 = malloc_type_malloc(v18 << 6, 0x10720402F6CFC52uLL);
      *(void *)a1 = v19;
      if (v19)
      {
        *(_DWORD *)(a1 + 8) = 0;
        if (v18 >= 1)
        {
          CFIndex v21 = 0;
          *(void *)&long long v20 = 136315650;
          long long v59 = v20;
          do
          {
            uint64_t v67 = 0;
            long long v65 = 0u;
            long long v66 = 0u;
            long long v64 = 0u;
            CFDictionaryRef v22 = (const __CFDictionary *)CFArrayGetValueAtIndex(v11, v21);
            CFDictionaryRef v23 = v22;
            if (v6)
            {
              if (sub_1F290(v22, (in_addr *)&v64)) {
                goto LABEL_71;
              }
            }
            else if (sub_1FA14(v22, (uint64_t)&v64))
            {
              goto LABEL_71;
            }
            if ((int)v64 > 512)
            {
              if ((v64 - 516) < 3) {
                goto LABEL_43;
              }
              if ((v64 - 514) >= 2)
              {
                if (v64 == 513)
                {
                  int v40 = *(_DWORD *)(a1 + 8);
                  if (v40 >= 1)
                  {
                    int v41 = (void *)(*(void *)a1 + 16);
                    while (*((_DWORD *)v41 - 2) != 513 || *((void *)&v64 + 1) != *v41 || (void)v65 != v41[1])
                    {
                      v41 += 8;
                      if (!--v40) {
                        goto LABEL_57;
                      }
                    }
                    goto LABEL_61;
                  }
                }
              }
              else
              {
                int v31 = *(_DWORD *)(a1 + 8);
                if (v31 >= 1)
                {
                  CFTypeRef v32 = (int *)(*(void *)a1 + 8);
                  do
                  {
                    int v33 = *v32;
                    v32 += 16;
                    if ((v33 & 0xFFFFFFFE) == 0x202) {
                      goto LABEL_61;
                    }
                  }
                  while (--v31);
                }
              }
            }
            else if ((v64 - 257) <= 5)
            {
              int v24 = 1 << (v64 - 1);
              if ((v24 & 0x29) != 0)
              {
                int v25 = *(_DWORD *)(a1 + 8);
                if (v25 >= 1)
                {
                  int v26 = (_DWORD *)(*(void *)a1 + 16);
                  while (1)
                  {
                    unsigned int v27 = *(v26 - 2) - 257;
                    BOOL v28 = v27 > 5;
                    int v29 = (1 << v27) & 0x29;
                    BOOL v30 = v28 || v29 == 0;
                    if (!v30 && DWORD2(v64) == *v26) {
                      break;
                    }
                    v26 += 16;
                    if (!--v25) {
                      goto LABEL_57;
                    }
                  }
LABEL_61:
                  uint64_t v44 = "duplicate configured service";
LABEL_62:
                  sub_4220();
                  _SC_syslog_os_log_mapping();
                  if (__SC_log_enabled())
                  {
                    uint64_t v51 = _os_log_pack_size();
                    uint64_t v52 = v6;
                    CFIndex v53 = v18;
                    CFBooleanRef v60 = &v59;
                    __chkstk_darwin(v51);
                    __error();
                    uint64_t v54 = _os_log_pack_fill();
                    CFTypeID v55 = sub_9218(v64);
                    *(_DWORD *)uint64_t v54 = v59;
                    *(void *)(v54 + 4) = v61;
                    *(_WORD *)(v54 + 12) = 2080;
                    *(void *)(v54 + 14) = v55;
                    *(_WORD *)(v54 + 22) = 2080;
                    *(void *)(v54 + 24) = v44;
                    CFIndex v18 = v53;
                    uint64_t v6 = v52;
                    __SC_log_send();
                  }
                  if (v64 == 516) {
                    BOOL v56 = DWORD2(v64) == 3;
                  }
                  else {
                    BOOL v56 = v64 == 259;
                  }
                  uint64_t v17 = v61;
                  if (v56 && (void)v65) {
                    free((void *)v65);
                  }
                  goto LABEL_71;
                }
                goto LABEL_57;
              }
              if ((v24 & 6) != 0)
              {
                int v34 = *(_DWORD *)(a1 + 8);
                if (v34 >= 1)
                {
                  uint64_t v35 = (int *)(*(void *)a1 + 8);
                  while (1)
                  {
                    int v36 = *v35;
                    v35 += 16;
                    if ((v36 & 0xFFFFFFFE) == 0x102) {
                      goto LABEL_61;
                    }
                    if (!--v34) {
                      goto LABEL_57;
                    }
                  }
                }
                goto LABEL_57;
              }
LABEL_43:
              int v37 = *(_DWORD *)(a1 + 8);
              if (v37 >= 1)
              {
                CFTypeID v38 = (int *)(*(void *)a1 + 8);
                do
                {
                  int v39 = *v38;
                  v38 += 16;
                  if (v64 == v39) {
                    goto LABEL_61;
                  }
                }
                while (--v37);
              }
            }
LABEL_57:
            if (sub_57EB8((uint64_t *)qword_70188, v17))
            {
              uint64_t v43 = sub_1EF8C(v17, 0);
              if (v43)
              {
                uint64_t v44 = "configured service conflicts with dynamic service";
                if (sub_22938(v43, (int *)&v64, 1)) {
                  goto LABEL_62;
                }
              }
            }
            *(void *)(a1 + 16) = CFDictionaryGetValue(v23, @"_DisableUntilNeeded");
            CFStringRef v45 = CFDictionaryGetValue(v23, @"ServiceID");
            CFTypeRef v46 = CFRetain(v45);
            uint64_t v47 = *(void *)a1 + ((uint64_t)*(int *)(a1 + 8) << 6);
            *(void *)uint64_t v47 = v46;
            long long v48 = v64;
            long long v49 = v65;
            long long v50 = v66;
            *(void *)(v47 + 56) = v67;
            *(_OWORD *)(v47 + 40) = v50;
            *(_OWORD *)(v47 + 24) = v49;
            *(_OWORD *)(v47 + 8) = v48;
            ++*(_DWORD *)(a1 + 8);
LABEL_71:
            ++v21;
          }
          while (v21 != v18);
        }
      }
    }
  }
  else
  {
    uint64_t v63 = 0;
  }
  if (*(_DWORD *)(a1 + 8))
  {
    uint64_t v57 = 1;
  }
  else
  {
    sub_2A408(a1);
    uint64_t v57 = 0;
  }
  sub_6DB0((const void **)&v62);
  sub_6DB0((const void **)&v63);
  return v57;
}

void sub_2A24C(uint64_t a1, CFBooleanRef BOOLean)
{
  if (!dword_700C0) {
    return;
  }
  if (*(_DWORD *)(a1 + 156))
  {
    int v3 = *(_DWORD *)(a1 + 160);
    if (BOOLean)
    {
LABEL_4:
      *(_DWORD *)(a1 + 156) = 1;
      int Value = CFBooleanGetValue(BOOLean);
      *(_DWORD *)(a1 + 160) = Value;
      goto LABEL_7;
    }
  }
  else
  {
    int v3 = 0;
    if (BOOLean) {
      goto LABEL_4;
    }
  }
  int Value = 0;
  *(_DWORD *)(a1 + 156) = 0;
LABEL_7:
  if (Value != v3)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      uint64_t v7 = nullsub_1(*(void *)(a1 + 8));
      CFStringRef v8 = "";
      if (!Value) {
        CFStringRef v8 = "not ";
      }
      *(_DWORD *)uint64_t v6 = 136315394;
      *(void *)(v6 + 4) = v7;
      *(_WORD *)(v6 + 12) = 2080;
      *(void *)(v6 + 14) = v8;
      __SC_log_send();
    }
    if (dword_700C0)
    {
      byte_7019C = 1;
      dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
    }
  }
}

void sub_2A408(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  if (!*(void *)a1) {
    return;
  }
  if (*(int *)(a1 + 8) < 1) {
    goto LABEL_13;
  }
  int v3 = 0;
  CFMutableArrayRef v4 = v1 + 3;
  do
  {
    uint64_t v5 = v4 - 3;
    sub_6DB0((const void **)v4 - 3);
    int v6 = *((_DWORD *)v4 - 4);
    if (v6 == 516)
    {
      if (*((_DWORD *)v4 - 2) == 3)
      {
        uint64_t v7 = *v4;
        CFStringRef v8 = v4;
        if (*v4) {
          goto LABEL_10;
        }
      }
    }
    else if (v6 == 259)
    {
      uint64_t v7 = *v4;
      if (*v4)
      {
        CFStringRef v8 = v1 + 3;
LABEL_10:
        free(v7);
        const char *v8 = 0;
      }
    }
    ++v3;
    v4 += 8;
    uint64_t v1 = v5 + 8;
  }
  while (v3 < *(_DWORD *)(a1 + 8));
  uint64_t v1 = *(void ***)a1;
LABEL_13:
  free(v1);
  *(void *)a1 = 0;
}

uint64_t sub_2A4CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v23[0] = 0;
  v23[1] = 0;
  unint64_t v21 = sub_9374(v2);
  int v22 = v3;
  if (v21) {
    BOOL v4 = HIDWORD(v21) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4 || v3 == 0)
  {
    int v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 0x20) != 0)
    {
      *(_DWORD *)a1 = v6 & 0xFFFFFFDF;
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v7 = _os_log_pack_size();
        __chkstk_darwin(v7);
        __error();
        uint64_t v8 = _os_log_pack_fill();
        uint64_t v9 = nullsub_1(v2);
        *(_DWORD *)uint64_t v8 = 136315138;
        *(void *)(v8 + 4) = v9;
        __SC_log_send();
      }
      sub_2AB74(a1);
    }
    *(_DWORD *)(a1 + 116) = dword_701A8;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      uint64_t v12 = nullsub_1(v2);
      *(_DWORD *)uint64_t v11 = 136315138;
      *(void *)(v11 + 4) = v12;
      __SC_log_send();
    }
    sub_2A8E0((const void **)a1, (uint64_t)v23, (uint64_t *)&v21);
    if (*(_DWORD *)(a1 + 152))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (!result) {
        return result;
      }
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13);
      __error();
      goto LABEL_20;
    }
    if ((int)sub_5B24(a1 + 24) >= 1)
    {
      CFIndex v18 = (const char *)nullsub_1(v2);
      sub_35D90(v18, 1);
      sub_483C(a1 + 24, 11, (__CFDictionary *)v23);
    }
    uint64_t result = sub_5B24(a1 + 56);
    if ((int)result >= 1)
    {
      if ((v6 & 0x20) != 0 || (uint64_t v19 = nullsub_1(v2), !sub_36D20(v19))) {
        sub_260AC(a1, 1);
      }
      long long v20 = *(const void **)(a1 + 136);
      if (v20) {
        CFRelease(v20);
      }
      *(void *)(a1 + 136) = sub_2ACCC((const __SCDynamicStore *)qword_70178, *(CFStringRef *)(a1 + 16));
      return sub_483C(a1 + 56, 11, (__CFDictionary *)v23);
    }
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v15 = _os_log_pack_size();
      __chkstk_darwin(v15);
      __error();
LABEL_20:
      uint64_t v16 = _os_log_pack_fill();
      uint64_t v17 = nullsub_1(v2);
      *(_DWORD *)uint64_t v16 = 136315138;
      *(void *)(v16 + 4) = v17;
      return __SC_log_send();
    }
  }
  return result;
}

void sub_2A8E0(const void **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t)a1[1];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = *a3;
  *(_DWORD *)(a2 + 12) = *((_DWORD *)a3 + 2);
  *(void *)(a2 + 4) = v7;
  if (sub_58CE0(v6))
  {
    uint64_t v8 = (const void *)sub_25C48((uint64_t)a1[2]);
    uint64_t v16 = v8;
    if (v8)
    {
      int v9 = sub_2EA0C((uint64_t)a1[12], (uint64_t)v8);
      if (v9 == 3)
      {
        if (!sub_58CEC(v6))
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v13 = _os_log_pack_size();
            __chkstk_darwin(v13);
            __error();
            uint64_t v14 = _os_log_pack_fill();
            uint64_t v15 = nullsub_1(v6);
            *(_DWORD *)uint64_t v14 = 136315138;
            *(void *)(v14 + 4) = v15;
            __SC_log_send();
          }
        }
        *(_DWORD *)a2 = 2;
      }
      else if (v9 == 2)
      {
        *(_DWORD *)a2 = 1;
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v10 = _os_log_pack_size();
          __chkstk_darwin(v10);
          __error();
          uint64_t v11 = _os_log_pack_fill();
          uint64_t v12 = nullsub_1(v6);
          *(_DWORD *)uint64_t v11 = 136315138;
          *(void *)(v11 + 4) = v12;
          __SC_log_send();
        }
      }
      CFRetain(v8);
    }
    else if (!*(_DWORD *)a3 || *((_DWORD *)a3 + 1))
    {
      goto LABEL_16;
    }
    sub_6DB0(a1 + 12);
    a1[12] = v8;
LABEL_16:
    sub_6DB0(&v16);
  }
}

uint64_t sub_2AB74(uint64_t a1)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    uint64_t v4 = nullsub_1(*(void *)(a1 + 8));
    *(_DWORD *)uint64_t v3 = 136315138;
    *(void *)(v3 + 4) = v4;
    __SC_log_send();
  }
  sub_483C(a1 + 24, 4, 0);
  sub_483C(a1 + 56, 4, 0);
  uint64_t result = sub_5B24(a1 + 56);
  if (result)
  {
    uint64_t v6 = (const char *)nullsub_1(*(void *)(a1 + 8));
    return sub_37494(v6);
  }
  return result;
}

CFMutableArrayRef sub_2ACCC(const __SCDynamicStore *a1, CFStringRef ifname)
{
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, ifname, @"BonjourSleepProxyAddress");
  CFPropertyListRef v5 = SCDynamicStoreCopyValue(a1, NetworkInterfaceEntity);
  uint64_t v14 = v5;
  CFRelease(NetworkInterfaceEntity);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v5 || CFGetTypeID(v5) != TypeID)
  {
    sub_6DB0(&v14);
    CFPropertyListRef v5 = v14;
    if (!v14) {
      return 0;
    }
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v5, @"RegisteredAddresses");
  CFTypeID v8 = CFArrayGetTypeID();
  if (Value && CFGetTypeID(Value) == v8)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v10 = 138412546;
      *(void *)(v10 + 4) = ifname;
      *(_WORD *)(v10 + 12) = 2112;
      *(void *)(v10 + 14) = Value;
      __SC_log_send();
    }
    CFIndex Count = CFArrayGetCount(Value);
    CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(0, Count, Value);
  }
  else
  {
    CFMutableArrayRef MutableCopy = 0;
  }
  CFRelease(v5);
  return MutableCopy;
}

uint64_t sub_2AEC8(const void *a1)
{
  if ((int)sub_5B24(&unk_70150) < 1) {
    return 0;
  }
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = sub_5B4C(&unk_70150, v2);
    if (CFEqual(a1, *(CFTypeRef *)(v3 + 16))) {
      break;
    }
    uint64_t v2 = (v2 + 1);
    if ((int)v2 >= (int)sub_5B24(&unk_70150)) {
      return 0;
    }
  }
  return v3;
}

unsigned char *sub_2AF4C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (unsigned char *)sub_5B24(a1 + 56);
  if (result)
  {
    uint64_t result = (unsigned char *)sub_3A128(a2);
    if (result)
    {
      if ((result[20] & 4) != 0)
      {
        inet_ntop(30, result, v20, 0x2Eu);
        sub_4220();
        _SC_syslog_os_log_mapping();
        uint64_t result = (unsigned char *)__SC_log_enabled();
        if (result)
        {
          uint64_t v5 = _os_log_pack_size();
          __chkstk_darwin(v5);
          __error();
          uint64_t v6 = _os_log_pack_fill();
          uint64_t v7 = nullsub_1(*(void *)(a1 + 8));
          *(_DWORD *)uint64_t v6 = 136315394;
          *(void *)(v6 + 4) = v7;
          *(_WORD *)(v6 + 12) = 2080;
          *(void *)(v6 + 14) = v20;
          uint64_t result = (unsigned char *)__SC_log_send();
        }
        if ((*(unsigned char *)(a1 + 2) & 1) == 0)
        {
          int v8 = *(unsigned __int8 *)(a1 + 168);
          if (v8 == 3)
          {
            sub_4220();
            _SC_syslog_os_log_mapping();
            uint64_t result = (unsigned char *)__SC_log_enabled();
            if (result)
            {
              uint64_t v9 = _os_log_pack_size();
              __chkstk_darwin(v9);
              __error();
              uint64_t v10 = _os_log_pack_fill();
              uint64_t v11 = nullsub_1(*(void *)(a1 + 8));
              *(_DWORD *)uint64_t v10 = 136315394;
              *(void *)(v10 + 4) = v11;
              *(_WORD *)(v10 + 12) = 1024;
              *(_DWORD *)(v10 + 14) = 3;
              return (unsigned char *)__SC_log_send();
            }
          }
          else
          {
            *(unsigned char *)(a1 + 168) = v8 + 1;
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v12 = _os_log_pack_size();
              __chkstk_darwin(v12);
              __error();
              uint64_t v13 = _os_log_pack_fill();
              uint64_t v14 = nullsub_1(*(void *)(a1 + 8));
              int v15 = *(unsigned __int8 *)(a1 + 168);
              *(_DWORD *)uint64_t v13 = 136315394;
              *(void *)(v13 + 4) = v14;
              *(_WORD *)(v13 + 12) = 1024;
              *(_DWORD *)(v13 + 14) = v15;
              __SC_log_send();
            }
            uint64_t v16 = (const char *)nullsub_1(*(void *)(a1 + 8));
            sub_37494(v16);
            unint64_t v17 = sub_9374(*(void *)(a1 + 8));
            if (HIDWORD(v17)) {
              BOOL v18 = 1;
            }
            else {
              BOOL v18 = v17 == 0;
            }
            int v19 = v18;
            return (unsigned char *)sub_260AC(a1, v19);
          }
        }
      }
    }
  }
  return result;
}

void sub_2B294(uint64_t a1, uint64_t *a2)
{
  CFTypeRef v46 = a2;
  uint64_t v47 = a1;
  uint64_t v2 = (const void **)(a1 + 136);
  if (!*(void *)(a1 + 136)) {
    return;
  }
  double current_time = timer_get_current_time();
  if (current_time - *(double *)&qword_701E0 > 60.0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      uint64_t v6 = *(void *)(v47 + 16);
      uint64_t v7 = qword_701E0;
      *(_DWORD *)uint64_t v5 = 138413058;
      *(void *)(v5 + 4) = v6;
      *(_WORD *)(v5 + 12) = 2048;
      *(double *)(v5 + 14) = current_time;
      *(_WORD *)(v5 + 22) = 2048;
      *(void *)(v5 + 24) = v7;
      *(_WORD *)(v5 + 32) = 1024;
      *(_DWORD *)(v5 + 34) = 60;
      __SC_log_send();
    }
    sub_6DB0(v2);
    return;
  }
  uint64_t v44 = *(void *)(v47 + 8);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v47 + 136));
  if (Count < 1)
  {
    LODWORD(v13) = -1;
    goto LABEL_27;
  }
  CFIndex v10 = Count;
  CFIndex v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0xFFFFFFFFLL;
  *(void *)&long long v9 = 138412546;
  long long v43 = v9;
  *(void *)&long long v9 = 136315394;
  long long v41 = v9;
  CFStringRef v45 = v2;
  while (1)
  {
    long long v48 = 0uLL;
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)*v2, v11);
    if (sub_53B1C(ValueAtIndex, &v48)) {
      break;
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v26 = _os_log_pack_size();
      __chkstk_darwin(v26);
      __error();
      uint64_t v27 = _os_log_pack_fill();
      uint64_t v28 = *(void *)(v47 + 16);
      *(_DWORD *)uint64_t v27 = v43;
      *(void *)(v27 + 4) = v28;
      *(_WORD *)(v27 + 12) = 2112;
      *(void *)(v27 + 14) = ValueAtIndex;
      __SC_log_send();
LABEL_17:
      uint64_t v2 = v45;
    }
LABEL_18:
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)*v2, v11);
    --v10;
LABEL_19:
    CFIndex v11 = v12;
    if (v10 <= v12) {
      goto LABEL_27;
    }
  }
  if (!sub_3A08C(v46, &v48))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v29 = _os_log_pack_size();
      __chkstk_darwin(v29);
      __error();
      uint64_t v30 = _os_log_pack_fill();
      uint64_t v31 = *(void *)(v47 + 16);
      *(_DWORD *)uint64_t v30 = v43;
      *(void *)(v30 + 4) = v31;
      *(_WORD *)(v30 + 12) = 2112;
      *(void *)(v30 + 14) = ValueAtIndex;
      __SC_log_send();
      uint64_t v2 = v45;
    }
    ++v12;
    goto LABEL_19;
  }
  if ((v13 & 0x80000000) == 0 || (uint64_t v13 = sub_4D01C(0), (v13 & 0x80000000) == 0))
  {
    uint64_t v15 = v44;
    int v16 = sub_58DC8(v44);
    uint64_t v17 = sub_58CAC(v15);
    int v18 = sub_58034(v15);
    int v19 = sub_4D620(v13, v16, v17, v18, &v48);
    if (v19)
    {
      int v20 = v19;
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v21 = _os_log_pack_size();
        CFBooleanRef v42 = &v41;
        __chkstk_darwin(v21);
        __error();
        uint64_t v22 = _os_log_pack_fill();
        uint64_t v23 = v13;
        uint64_t v24 = nullsub_1(v44);
        int v25 = strerror(v20);
        *(_DWORD *)uint64_t v22 = v41;
        *(void *)(v22 + 4) = v24;
        uint64_t v13 = v23;
        uint64_t v2 = v45;
        *(_WORD *)(v22 + 12) = 2080;
        *(void *)(v22 + 14) = v25;
        __SC_log_send();
      }
      goto LABEL_18;
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v32 = _os_log_pack_size();
      uint64_t v33 = v13;
      __chkstk_darwin(v32);
      __error();
      uint64_t v34 = _os_log_pack_fill();
      uint64_t v35 = nullsub_1(v44);
      int v36 = inet_ntop(30, &v48, v49, 0x2Eu);
      *(_DWORD *)uint64_t v34 = v41;
      *(void *)(v34 + 4) = v35;
      *(_WORD *)(v34 + 12) = 2080;
      *(void *)(v34 + 14) = v36;
      uint64_t v13 = v33;
      __SC_log_send();
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v37 = _os_log_pack_size();
    __chkstk_darwin(v37);
    __error();
    uint64_t v38 = _os_log_pack_fill();
    int v39 = __error();
    int v40 = strerror(*v39);
    *(_DWORD *)uint64_t v38 = 136315138;
    *(void *)(v38 + 4) = v40;
    __SC_log_send();
  }
LABEL_27:
  if (!CFArrayGetCount((CFArrayRef)*v2)) {
    sub_6DB0(v2);
  }
  if ((v13 & 0x80000000) == 0) {
    close(v13);
  }
}

void sub_2B968(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 148) != a2)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      uint64_t v6 = nullsub_1(*(void *)(a1 + 8));
      uint64_t v7 = "";
      if (!a2) {
        uint64_t v7 = "not ";
      }
      *(_DWORD *)uint64_t v5 = 136315394;
      *(void *)(v5 + 4) = v6;
      *(_WORD *)(v5 + 12) = 2080;
      *(void *)(v5 + 14) = v7;
      __SC_log_send();
    }
    byte_701A4 = 1;
    *(_DWORD *)(a1 + 144) = 1;
    *(_DWORD *)(a1 + 148) = a2;
    dispatch_source_merge_data((dispatch_source_t)qword_701B0, 1uLL);
  }
}

uint64_t sub_2BAE0(const __SCDynamicStore *a1, CFStringRef ifname, const void *a3, int a4, in_addr *a5, CFTypeRef *a6)
{
  a5->s_addr = 0;
  *a6 = 0;
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, ifname, @"BonjourSleepProxyAddress");
  values[0] = (void *)NetworkInterfaceEntity;
  CFStringRef v13 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, ifname, @"BonjourSleepProxyOPTRecord");
  values[1] = (void *)v13;
  CFArrayRef v14 = CFArrayCreate(0, (const void **)values, 2, &kCFTypeArrayCallBacks);
  CFDictionaryRef v15 = SCDynamicStoreCopyMultiple(a1, v14, 0);
  CFDictionaryRef v33 = v15;
  CFRelease(v14);
  if (v15)
  {
    uint64_t v31 = a3;
    CFArrayRef Value = CFDictionaryGetValue(v15, NetworkInterfaceEntity);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value && CFGetTypeID(Value) != TypeID) {
      CFArrayRef Value = 0;
    }
    int v18 = CFDictionaryGetValue(v15, v13);
    CFTypeID v19 = CFDictionaryGetTypeID();
    if (v18 && CFGetTypeID(v18) != v19) {
      int v18 = 0;
    }
    if (Value)
    {
      CFStringRef v20 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)Value, kSCPropMACAddress);
      CFTypeID v21 = CFStringGetTypeID();
      if (v20)
      {
        if (CFGetTypeID(v20) == v21)
        {
          int v32 = 0;
          uint64_t v22 = sub_3B5A8(v20, &v32);
          if (v22)
          {
            uint64_t v23 = v22;
            if (v32 == a4 && !bcmp(v22, v31, a4))
            {
              free(v23);
              if (v18)
              {
                CFStringRef v26 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)Value, @"IPAddress");
                if (sub_53A68(v26, a5))
                {
                  uint64_t v27 = CFDictionaryGetValue((CFDictionaryRef)v18, @"OwnerOPTRecord");
                  CFTypeID v28 = CFDataGetTypeID();
                  if (v27)
                  {
                    if (CFGetTypeID(v27) == v28) {
                      *a6 = CFRetain(v27);
                    }
                  }
                }
              }
              else
              {
                sub_4220();
                _SC_syslog_os_log_mapping();
                if (__SC_log_enabled())
                {
                  uint64_t v29 = _os_log_pack_size();
                  __chkstk_darwin(v29);
                  __error();
                  uint64_t v30 = _os_log_pack_fill();
                  *(_DWORD *)uint64_t v30 = 138412290;
                  *(void *)(v30 + 4) = ifname;
                  __SC_log_send();
                  uint64_t v24 = 1;
                  goto LABEL_16;
                }
              }
              uint64_t v24 = 1;
              goto LABEL_16;
            }
            free(v23);
          }
        }
      }
    }
  }
  uint64_t v24 = 0;
LABEL_16:
  sub_6DB0((const void **)&v33);
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v13);
  return v24;
}

uint64_t sub_2BE14()
{
  int v0 = sub_354D0();
  int v18 = 255;
  if (v0 < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
    uint64_t v13 = _os_log_pack_size();
    __chkstk_darwin(v13);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    CFDictionaryRef v15 = __error();
    int v16 = strerror(*v15);
    int v17 = *__error();
    *(_DWORD *)uint64_t v14 = 136315394;
    *(void *)(v14 + 4) = v16;
    *(_WORD *)(v14 + 12) = 1024;
    *(_DWORD *)(v14 + 14) = v17;
    return __SC_log_send();
  }
  int v1 = v0;
  if ((sub_3655C(v0, "lo0", 16777343, &v18, 0) & 0x80000000) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v2 = _os_log_pack_size();
      __chkstk_darwin(v2);
      __error();
      uint64_t v3 = _os_log_pack_fill();
      uint64_t v4 = __error();
      uint64_t v5 = strerror(*v4);
      int v6 = *__error();
      *(_DWORD *)uint64_t v3 = 136315394;
      *(void *)(v3 + 4) = v5;
      *(_WORD *)(v3 + 12) = 1024;
      *(_DWORD *)(v3 + 14) = v6;
      __SC_log_send();
    }
  }
  close(v1);
  uint64_t result = sub_3AC78(16777343, 127, v18, "lo0");
  if (!result)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v8 = _os_log_pack_size();
      __chkstk_darwin(v8);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      CFIndex v10 = __error();
      CFIndex v11 = strerror(*v10);
      int v12 = *__error();
      *(_DWORD *)uint64_t v9 = 136315394;
      *(void *)(v9 + 4) = v11;
      *(_WORD *)(v9 + 12) = 1024;
      *(_DWORD *)(v9 + 14) = v12;
      return __SC_log_send();
    }
  }
  return result;
}

uint64_t sub_2C144(const __CFArray *a1)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v3 = 136315138;
    *(void *)(v3 + 4) = "linklocal_elect";
    __SC_log_send();
  }
  uint64_t result = sub_5B24(&unk_70150);
  if ((int)result >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = sub_5B4C(&unk_70150, v5);
      if ((sub_9384(*(void *)(v6 + 8)) & 0x18) == 0)
      {
        uint64_t v7 = *(void *)(v6 + 88);
        if (v7)
        {
          uint64_t v8 = *(const void **)(v7 + 48);
          if (!v8)
          {
            if (*(_DWORD *)(v7 + 100)) {
              sub_479C(*(void *)(v6 + 88), a1);
            }
            goto LABEL_6;
          }
          uint64_t v9 = sub_5990(v6, v8, 1);
          if (!v9)
          {
            sub_261CC(v6, *(const void **)v7, (*(_DWORD *)(v7 + 24) >> 8) & 1);
            uint64_t v7 = 0;
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        if ((int)sub_5B24(v6 + 24) < 1)
        {
          uint64_t v11 = 0;
        }
        else
        {
          uint64_t v10 = 0;
          uint64_t v11 = 0;
          unsigned int v12 = 1048577;
          do
          {
            uint64_t v13 = sub_5B4C(v6 + 24, v10);
            int v14 = *(_DWORD *)(v13 + 24);
            if (v14 != 261)
            {
              uint64_t v15 = v13;
              if (*(_DWORD *)(v13 + 100)
                || (v14 == 259 ? (BOOL v17 = dword_70024 == 0) : (BOOL v17 = 1),
                    !v17 && *(_DWORD *)(v13 + 28) == 9 && (*(unsigned char *)(*(void *)(v13 + 16) + 2) & 0x40) == 0))
              {
                unsigned int v16 = sub_479C(v13, a1);
                if (!v11 || v16 < v12 || !*(_DWORD *)(v11 + 100) && *(_DWORD *)(v15 + 100))
                {
                  unsigned int v12 = v16;
                  uint64_t v11 = v15;
                }
              }
            }
            uint64_t v10 = (v10 + 1);
          }
          while ((int)v10 < (int)sub_5B24(v6 + 24));
        }
        if (v9 != (CFTypeRef *)v11)
        {
          if (v9)
          {
            sub_6DB0(v9 + 7);
            sub_261CC(v6, *(const void **)v7, (*(_DWORD *)(v7 + 24) >> 8) & 1);
          }
          if (v11) {
            sub_2C59C(v11, *(_DWORD *)(v11 + 100) == 0);
          }
        }
      }
LABEL_6:
      uint64_t v5 = (v5 + 1);
      uint64_t result = sub_5B24(&unk_70150);
    }
    while ((int)v5 < (int)result);
  }
  return result;
}

_DWORD *sub_2C430()
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v0 = _os_log_pack_size();
    __chkstk_darwin(v0);
    __error();
    uint64_t v1 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v1 = 136315138;
    *(void *)(v1 + 4) = "IPv4ServicePublishProcess";
    __SC_log_send();
  }
  uint64_t result = (_DWORD *)sub_5B24(&unk_70150);
  if ((int)result >= 1)
  {
    int v3 = (int)result;
    uint64_t v4 = 0;
    do
    {
      uint64_t result = (_DWORD *)sub_5B4C(&unk_70150, v4);
      if ((*result & 0x40) != 0)
      {
        *result &= ~0x40u;
        uint64_t result = (_DWORD *)sub_483C((uint64_t)(result + 14), 21, 0);
      }
      uint64_t v4 = (v4 + 1);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_2C59C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v9 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v11 = 0;
  LODWORD(v10[0]) = 261;
  DWORD2(v10[0]) = a2;
  uint64_t result = sub_218D8(v2, 0, (uint64_t)v10, (CFTypeRef *)a1, 0, &v9);
  if (result)
  {
    unsigned int v4 = result;
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      uint64_t v7 = nullsub_1(*(void *)(v2 + 8));
      if (v4 <= 0x15) {
        uint64_t v8 = off_68DD0[v4];
      }
      else {
        uint64_t v8 = "<unknown>";
      }
      *(_DWORD *)uint64_t v6 = 136315394;
      *(void *)(v6 + 4) = v7;
      *(_WORD *)(v6 + 12) = 2080;
      *(void *)(v6 + 14) = v8;
      return __SC_log_send();
    }
  }
  return result;
}

void sub_2C730(int a1, int a2, int a3, intptr_t notificationID)
{
  HIDWORD(v6) = a3;
  LODWORD(v6) = a3 + 536870320;
  int v5 = v6 >> 4;
  if (v5 <= 3)
  {
    if (v5 == 1) {
      return;
    }
    if (v5 == 3 && (byte_701D8 & 1) == 0)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
      byte_701D8 = 1;
      int v10 = sub_5B24(qword_70150);
      if (v10 >= 1)
      {
        int v11 = v10;
        uint64_t v12 = 0;
        do
        {
          uint64_t v13 = sub_5B4C(qword_70150, v12);
          sub_483C(v13 + 24, 10, 0);
          sub_483C(v13 + 56, 10, 0);
          sub_6DB0((const void **)(v13 + 136));
          uint64_t v12 = (v12 + 1);
        }
        while (v11 != v12);
      }
    }
    goto LABEL_19;
  }
  if (v5 != 4 && v5 != 11)
  {
    if (v5 == 13 && byte_701D8 == 1)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v8 = _os_log_pack_size();
        __chkstk_darwin(v8);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
      byte_701D8 = 0;
      qword_701E0 = timer_get_current_time();
      ++dword_701A8;
      sub_2C9DC();
    }
LABEL_19:
    IOAllowPowerChange(dword_701E8, notificationID);
  }
}

uint64_t sub_2C9DC()
{
  uint64_t result = sub_5B24(qword_70150);
  if ((int)result >= 1)
  {
    int v1 = result;
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = sub_5B4C(qword_70150, v2);
      uint64_t v4 = v3;
      if (*(_DWORD *)(v3 + 116) == dword_701A8)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        uint64_t result = __SC_log_enabled();
        if (result)
        {
          uint64_t v5 = _os_log_pack_size();
          __chkstk_darwin(v5);
          __error();
          uint64_t v6 = _os_log_pack_fill();
          uint64_t v7 = nullsub_1(*(void *)(v4 + 8));
          *(_DWORD *)uint64_t v6 = 136315138;
          *(void *)(v6 + 4) = v7;
          uint64_t result = __SC_log_send();
        }
      }
      else
      {
        uint64_t result = sub_2A4CC(v3);
      }
      uint64_t v2 = (v2 + 1);
    }
    while (v1 != v2);
  }
  return result;
}

_DWORD *sub_2CB70()
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  int v1 = sub_5B24(qword_70150);
  if (v1 >= 1)
  {
    int v2 = v1;
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = sub_5B4C(qword_70150, v3);
      uint64_t v5 = sub_20D14(v4);
      if (v5)
      {
        uint64_t v6 = v5;
        CFDictionarySetValue(Mutable, *(const void **)(v4 + 16), v5);
        CFRelease(v6);
      }
      uint64_t v3 = (v3 + 1);
    }
    while (v2 != v3);
  }
  if (CFDictionaryGetCount(Mutable))
  {
    CFDataRef Data = CFPropertyListCreateData(0, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    CFRelease(Mutable);
    CFIndex Length = CFDataGetLength(Data);
    size_t v9 = Length + 200;
    if ((unint64_t)(Length + 200) <= 0x8000)
    {
      size_t v13 = Length;
      uint64_t v12 = malloc_type_calloc(1uLL, v9, 0x920F4E57uLL);
      _DWORD *v12 = 1;
      v12[1] = v13;
      __strlcpy_chk();
      BytePtr = CFDataGetBytePtr(Data);
      memcpy(v12 + 50, BytePtr, v13);
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v10 = _os_log_pack_size();
        __chkstk_darwin(v10);
        __error();
        uint64_t v11 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v11 = 136315650;
        *(void *)(v11 + 4) = "IPConfigurationCopyOSStateData";
        *(_WORD *)(v11 + 12) = 2048;
        *(void *)(v11 + 14) = v9;
        *(_WORD *)(v11 + 22) = 1024;
        *(_DWORD *)(v11 + 24) = 0x8000;
        __SC_log_send();
      }
      uint64_t v12 = 0;
    }
    CFRelease(Data);
  }
  else
  {
    CFRelease(Mutable);
    return 0;
  }
  return v12;
}

uint64_t S_find_linklocal_address(uint64_t a1)
{
  uint64_t result = sub_1D470(a1);
  if (!result)
  {
    uint64_t v3 = sub_8B80(a1);
    int v4 = sub_588E4(v3);
    if (v4 < 1)
    {
      uint64_t v8 = (unsigned __int8 *)&G_ip_zeroes;
    }
    else
    {
      int v5 = v4;
      uint64_t v6 = 0;
      while (1)
      {
        uint64_t v7 = (unsigned __int8 *)sub_588EC(v3, v6);
        if (*(__int16 *)v7 == -343) {
          break;
        }
        uint64_t v6 = (v6 + 1);
        if (v5 == v6)
        {
          uint64_t v8 = (unsigned __int8 *)&G_ip_zeroes;
          return *(unsigned int *)v8;
        }
      }
      uint64_t v8 = v7;
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9);
        __error();
        uint64_t v10 = _os_log_pack_fill();
        uint64_t v11 = nullsub_1(v3);
        int v12 = *v8;
        int v13 = v8[1];
        int v14 = v8[2];
        int v15 = v8[3];
        *(_DWORD *)uint64_t v10 = 136316162;
        *(void *)(v10 + 4) = v11;
        *(_WORD *)(v10 + 12) = 1024;
        *(_DWORD *)(v10 + 14) = v12;
        *(_WORD *)(v10 + 18) = 1024;
        *(_DWORD *)(v10 + 20) = v13;
        *(_WORD *)(v10 + 24) = 1024;
        *(_DWORD *)(v10 + 26) = v14;
        *(_WORD *)(v10 + 30) = 1024;
        *(_DWORD *)(v10 + 32) = v15;
        __SC_log_send();
      }
    }
    return *(unsigned int *)v8;
  }
  return result;
}

void sub_2CFE0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_8B80(a1);
  uint64_t v7 = (uint64_t *)sub_557C(a1);
  if (a2 == 6)
  {
    if (*(_DWORD *)(a3 + 8))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v10 = _os_log_pack_size();
        __chkstk_darwin(v10);
        __error();
        uint64_t v11 = _os_log_pack_fill();
        uint64_t v12 = nullsub_1(v6);
        uint64_t v13 = sub_E73C(*v7);
        *(_DWORD *)uint64_t v11 = 136315394;
        *(void *)(v11 + 4) = v12;
        *(_WORD *)(v11 + 12) = 2080;
        *(void *)(v11 + 14) = v13;
        __SC_log_send();
      }
    }
    else
    {
      sub_1D448();
      if (*(_DWORD *)(a3 + 12))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v20 = _os_log_pack_size();
          __chkstk_darwin(v20);
          __error();
          uint64_t v21 = _os_log_pack_fill();
          uint64_t v22 = nullsub_1(v6);
          int v23 = *(unsigned __int8 *)(a3 + 24);
          int v24 = *(unsigned __int8 *)(a3 + 25);
          int v25 = *(unsigned __int8 *)(a3 + 26);
          int v26 = *(unsigned __int8 *)(a3 + 27);
          int v27 = *(unsigned __int8 *)(a3 + 28);
          int v28 = *(unsigned __int8 *)(a3 + 29);
          *(_DWORD *)uint64_t v21 = 136316674;
          *(void *)(v21 + 4) = v22;
          *(_WORD *)(v21 + 12) = 1024;
          *(_DWORD *)(v21 + 14) = v23;
          *(_WORD *)(v21 + 18) = 1024;
          *(_DWORD *)(v21 + 20) = v24;
          *(_WORD *)(v21 + 24) = 1024;
          *(_DWORD *)(v21 + 26) = v25;
          *(_WORD *)(v21 + 30) = 1024;
          *(_DWORD *)(v21 + 32) = v26;
          *(_WORD *)(v21 + 36) = 1024;
          *(_DWORD *)(v21 + 38) = v27;
          *(_WORD *)(v21 + 42) = 1024;
          *(_DWORD *)(v21 + 44) = v28;
          __SC_log_send();
        }
        sub_9028(a1, 8u);
      }
      else
      {
        if (sub_9030(a1) != 1)
        {
          uint64_t v9 = (const char *)nullsub_1(v6);
LABEL_4:
          sub_2DD64(v9, 1u);
          sub_9028(a1, 0);
          return;
        }
        sub_2DC80(a1, 0xCu);
      }
    }
  }
  else
  {
    if (a2) {
      return;
    }
    int v8 = sub_9368(v6);
    uint64_t v9 = (const char *)nullsub_1(v6);
    if (v8) {
      goto LABEL_4;
    }
    sub_2DD64(v9, 0);
    sub_2DD0C(a1);
    int v14 = sub_1D410(a1);
    if (v14 && (unsigned int v15 = sub_1E5D0((uint64_t)v14)) != 0)
    {
      unsigned int v16 = v15;
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v17 = _os_log_pack_size();
        __chkstk_darwin(v17);
        __error();
        uint64_t v18 = _os_log_pack_fill();
        uint64_t v19 = nullsub_1(v6);
        *(_DWORD *)uint64_t v18 = 136316162;
        *(void *)(v18 + 4) = v19;
        *(_WORD *)(v18 + 12) = 1024;
        *(_DWORD *)(v18 + 14) = v16;
        *(_WORD *)(v18 + 18) = 1024;
        *(_DWORD *)(v18 + 20) = BYTE1(v16);
        *(_WORD *)(v18 + 24) = 1024;
        *(_DWORD *)(v18 + 26) = BYTE2(v16);
        *(_WORD *)(v18 + 30) = 1024;
        *(_DWORD *)(v18 + 32) = HIBYTE(v16);
        __SC_log_send();
      }
      sub_E17C(*v7, (uint64_t)sub_2CFE0, a1, 6, v16, -343);
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v29 = _os_log_pack_size();
        __chkstk_darwin(v29);
        __error();
        uint64_t v30 = _os_log_pack_fill();
        uint64_t v31 = nullsub_1(v6);
        *(_DWORD *)uint64_t v30 = 136315138;
        *(void *)(v30 + 4) = v31;
        __SC_log_send();
      }
    }
  }
}

void sub_2D54C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_8B80(a1);
  uint64_t v7 = sub_557C(a1);
  uint64_t v8 = v7;
  if (a2 != 6)
  {
    if (a2 != 2)
    {
      if (!a2)
      {
        *(_DWORD *)(v7 + 32) = 0;
        uint64_t v9 = (const char *)nullsub_1(v6);
        sub_2DD64(v9, 0);
        sub_2DD0C(a1);
        *(_DWORD *)(v8 + 16) = 1;
        unsigned int v10 = *(_DWORD *)(v8 + 20);
        if (!v10) {
          unsigned int v10 = bswap32(sub_9054(0, 65024) - 1442971392);
        }
        *(_DWORD *)(v8 + 24) = v10;
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v11 = _os_log_pack_size();
          __chkstk_darwin(v11);
          __error();
          uint64_t v12 = _os_log_pack_fill();
          uint64_t v13 = nullsub_1(v6);
          int v14 = *(unsigned __int8 *)(v8 + 24);
          int v15 = *(unsigned __int8 *)(v8 + 25);
          int v16 = *(unsigned __int8 *)(v8 + 26);
          int v17 = *(unsigned __int8 *)(v8 + 27);
          *(_DWORD *)uint64_t v12 = 136316162;
          *(void *)(v12 + 4) = v13;
          *(_WORD *)(v12 + 12) = 1024;
          *(_DWORD *)(v12 + 14) = v14;
          *(_WORD *)(v12 + 18) = 1024;
          *(_DWORD *)(v12 + 20) = v15;
          *(_WORD *)(v12 + 24) = 1024;
          *(_DWORD *)(v12 + 26) = v16;
          *(_WORD *)(v12 + 30) = 1024;
          *(_DWORD *)(v12 + 32) = v17;
          __SC_log_send();
        }
        sub_E17C(*(void *)v8, (uint64_t)sub_2D54C, a1, 6, 0, *(_DWORD *)(v8 + 24));
      }
      return;
    }
    goto LABEL_21;
  }
  if (*(_DWORD *)(a3 + 8))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
    uint64_t v18 = _os_log_pack_size();
    __chkstk_darwin(v18);
    __error();
    uint64_t v19 = _os_log_pack_fill();
    uint64_t v20 = nullsub_1(v6);
    uint64_t v21 = sub_E73C(*(void *)v8);
    *(_DWORD *)uint64_t v19 = 136315394;
    *(void *)(v19 + 4) = v20;
    *(_WORD *)(v19 + 12) = 2080;
    *(void *)(v19 + 14) = v21;
LABEL_23:
    __SC_log_send();
    return;
  }
  if (*(_DWORD *)(a3 + 12)) {
    goto LABEL_13;
  }
  if (sub_1BAF8(a1, *(_DWORD *)(v7 + 24)))
  {
    if (!*(_DWORD *)(a3 + 12))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_16;
      }
      uint64_t v34 = _os_log_pack_size();
      __chkstk_darwin(v34);
      __error();
      uint64_t v35 = _os_log_pack_fill();
      uint64_t v36 = nullsub_1(v6);
      int v37 = *(unsigned __int8 *)(v8 + 24);
      int v38 = *(unsigned __int8 *)(v8 + 25);
      int v39 = *(unsigned __int8 *)(v8 + 26);
      int v40 = *(unsigned __int8 *)(v8 + 27);
      *(_DWORD *)uint64_t v35 = 136316162;
      *(void *)(v35 + 4) = v36;
      *(_WORD *)(v35 + 12) = 1024;
      *(_DWORD *)(v35 + 14) = v37;
      *(_WORD *)(v35 + 18) = 1024;
      *(_DWORD *)(v35 + 20) = v38;
      *(_WORD *)(v35 + 24) = 1024;
      *(_DWORD *)(v35 + 26) = v39;
      *(_WORD *)(v35 + 30) = 1024;
      *(_DWORD *)(v35 + 32) = v40;
      goto LABEL_15;
    }
LABEL_13:
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled())
    {
LABEL_16:
      if (*(_DWORD *)(v8 + 20) == *(_DWORD *)(v8 + 24))
      {
        *(_DWORD *)(v8 + 20) = 0;
        sub_1DB14(a1);
        sub_9028(a1, 8u);
      }
      int v25 = *(_DWORD *)(v8 + 16);
      if (v25 >= 10)
      {
        timer_set_relative(*(void *)(v8 + 8), 30, 0, (uint64_t)sub_2D54C, a1, 2, 0);
        return;
      }
      *(_DWORD *)(v8 + 16) = v25 + 1;
LABEL_21:
      int v26 = bswap32(sub_9054(0, 65024) - 1442971392);
      *(_DWORD *)(v8 + 24) = v26;
      sub_E17C(*(void *)v8, (uint64_t)sub_2D54C, a1, 6, 0, v26);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        return;
      }
      uint64_t v27 = _os_log_pack_size();
      __chkstk_darwin(v27);
      __error();
      uint64_t v28 = _os_log_pack_fill();
      uint64_t v29 = nullsub_1(v6);
      int v30 = *(unsigned __int8 *)(v8 + 24);
      int v31 = *(unsigned __int8 *)(v8 + 25);
      int v32 = *(unsigned __int8 *)(v8 + 26);
      int v33 = *(unsigned __int8 *)(v8 + 27);
      *(_DWORD *)uint64_t v28 = 136316162;
      *(void *)(v28 + 4) = v29;
      *(_WORD *)(v28 + 12) = 1024;
      *(_DWORD *)(v28 + 14) = v30;
      *(_WORD *)(v28 + 18) = 1024;
      *(_DWORD *)(v28 + 20) = v31;
      *(_WORD *)(v28 + 24) = 1024;
      *(_DWORD *)(v28 + 26) = v32;
      *(_WORD *)(v28 + 30) = 1024;
      *(_DWORD *)(v28 + 32) = v33;
      goto LABEL_23;
    }
    uint64_t v22 = _os_log_pack_size();
    __chkstk_darwin(v22);
    __error();
    uint64_t v23 = _os_log_pack_fill();
    uint64_t v24 = nullsub_1(v6);
    sub_2DFE0(v23, v24, *(unsigned __int8 *)(v8 + 24), *(unsigned __int8 *)(v8 + 25), *(unsigned __int8 *)(v8 + 26), *(unsigned __int8 *)(v8 + 27), *(unsigned __int8 *)(a3 + 24), *(unsigned __int8 *)(a3 + 25), *(unsigned __int8 *)(a3 + 26), *(unsigned __int8 *)(a3 + 27), *(unsigned __int8 *)(a3 + 28), *(unsigned __int8 *)(a3 + 29));
LABEL_15:
    __SC_log_send();
    goto LABEL_16;
  }
  if (sub_9030(a1) == 1)
  {
    sub_2DC80(a1, 0xCu);
  }
  else
  {
    sub_1D47C(a1, *(unsigned int *)(v8 + 24), 0xFFFFuLL, 0);
    sub_1D464(a1, *(_DWORD *)(v8 + 24));
    long long v41 = (const char *)nullsub_1(v6);
    sub_2DD64(v41, 1u);
    sub_2DD0C(a1);
    *(_DWORD *)(v8 + 20) = *(_DWORD *)(v8 + 24);
    sub_61FC(a1, 0);
    *(_DWORD *)(v8 + 32) = 1;
  }
}

uint64_t sub_2DC80(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = sub_557C(a1);
  *(_DWORD *)(v4 + 32) = 0;
  sub_2DD0C(a1);
  uint64_t v5 = sub_8B80(a1);
  uint64_t v6 = (const char *)nullsub_1(v5);
  sub_2DD64(v6, 0);
  sub_1DB14(a1);
  if (a2 != 12) {
    *(_DWORD *)(v4 + 20) = 0;
  }

  return sub_9028(a1, a2);
}

void sub_2DD0C(uint64_t a1)
{
  uint64_t v1 = sub_557C(a1);
  if (v1)
  {
    int v2 = (uint64_t *)v1;
    uint64_t v3 = *(void *)(v1 + 8);
    if (v3) {
      timer_cancel(v3);
    }
    uint64_t v4 = *v2;
    if (*v2)
    {
      sub_BE68(v4);
    }
  }
}

uint64_t sub_2DD64(const char *a1, unsigned int a2)
{
  int v4 = socket(2, 2, 0);
  if (v4 == -1)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      uint64_t v13 = __error();
      int v14 = strerror(*v13);
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)(v12 + 4) = a1;
      *(_WORD *)(v12 + 12) = 2080;
      *(void *)(v12 + 14) = v14;
      return __SC_log_send();
    }
  }
  else
  {
    int v5 = v4;
    uint64_t v17 = 0;
    uint64_t v16 = a2;
    strncpy(__dst, a1, 0x10uLL);
    if (ioctl(v5, 0xC0206928uLL, __dst) < 0 && *__error() != 6)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v6 = _os_log_pack_size();
        __chkstk_darwin(v6);
        __error();
        uint64_t v7 = _os_log_pack_fill();
        uint64_t v8 = __error();
        uint64_t v9 = strerror(*v8);
        *(_DWORD *)uint64_t v7 = 136315650;
        *(void *)(v7 + 4) = a1;
        *(_WORD *)(v7 + 12) = 1024;
        *(_DWORD *)(v7 + 14) = a2;
        *(_WORD *)(v7 + 18) = 2080;
        *(void *)(v7 + 20) = v9;
        __SC_log_send();
      }
    }
    return close(v5);
  }
  return result;
}

double sub_2DFE0(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12)
{
  *(void *)&double result = 136317698;
  *(_DWORD *)a1 = 136317698;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 1024;
  *(_DWORD *)(a1 + 20) = a4;
  *(_WORD *)(a1 + 24) = 1024;
  *(_DWORD *)(a1 + 26) = a5;
  *(_WORD *)(a1 + 30) = 1024;
  *(_DWORD *)(a1 + 32) = a6;
  *(_WORD *)(a1 + 36) = 1024;
  *(_DWORD *)(a1 + 38) = a7;
  *(_WORD *)(a1 + 42) = 1024;
  *(_DWORD *)(a1 + 44) = a8;
  *(_WORD *)(a1 + 48) = 1024;
  *(_DWORD *)(a1 + 50) = a9;
  *(_WORD *)(a1 + 54) = 1024;
  *(_DWORD *)(a1 + 56) = a10;
  *(_WORD *)(a1 + 60) = 1024;
  *(_DWORD *)(a1 + 62) = a11;
  *(_WORD *)(a1 + 66) = 1024;
  *(_DWORD *)(a1 + 68) = a12;
  return result;
}

const char *sub_2E050(int a1)
{
  if (a1 > 255)
  {
    if (a1 <= 4095)
    {
      if (a1 > 1023)
      {
        if (a1 == 1024) {
          return "SHA256_PSK";
        }
        if (a1 == 2048) {
          return "SHA256_8021X";
        }
      }
      else
      {
        if (a1 == 256) {
          return "WPS";
        }
        if (a1 == 512) {
          return "WAPI";
        }
      }
    }
    else if (a1 < 0x4000)
    {
      if (a1 == 4096) {
        return "WPA3_SAE";
      }
      if (a1 == 0x2000) {
        return "FT_SAE";
      }
    }
    else
    {
      switch(a1)
      {
        case 0x4000:
          return "SHA384_8021X";
        case 0x8000:
          return "SHA384_FT_8021X";
        case 0xFFFF:
          return "UNKNOWN";
      }
    }
    return "UNRECOGNIZED";
  }
  if (a1 > 15)
  {
    if (a1 > 63)
    {
      if (a1 == 64) {
        return "8021X";
      }
      if (a1 == 128) {
        return "FT_8021X";
      }
    }
    else
    {
      if (a1 == 16) {
        return "FT_PSK";
      }
      if (a1 == 32) {
        return "LEAP";
      }
    }
    return "UNRECOGNIZED";
  }
  double result = "NONE";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      double result = "WPA";
      break;
    case 2:
      double result = "WPA_PSK";
      break;
    case 4:
      double result = "WPA2";
      break;
    case 8:
      double result = "WPA2_PSK";
      break;
    default:
      return "UNRECOGNIZED";
  }
  return result;
}

uint64_t sub_2E21C()
{
  int v0 = Apple80211Open();
  if (v0)
  {
    int v1 = v0;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v2 = _os_log_pack_size();
      __chkstk_darwin(v2);
      __error();
      uint64_t v3 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v3 = 67109120;
      v3[1] = v1;
      __SC_log_send();
    }
    return 0;
  }
  if (Apple80211BindToInterface()) {
    return 0;
  }
  CFDataRef Mutable = CFDataCreateMutable(0, 0);
  uint64_t Instance = 0;
  if (!Apple80211Get())
  {
    if (Apple80211Get())
    {
      uint64_t Instance = 0;
    }
    else
    {
      pthread_once(&stru_700D8, (void (*)(void))sub_2EAA0);
      uint64_t Instance = _CFRuntimeCreateInstance();
      *(void *)(Instance + 16) = sub_54338(Mutable);
      *(_DWORD *)(Instance + 36) = 0;
      *(_WORD *)(Instance + 40) = 0;
      *(_DWORD *)(Instance + 32) = sub_2E448();
      *(void *)(Instance + 24) = sub_2E604();
      *(unsigned char *)(Instance + 56) = sub_2E758();
    }
  }
  CFRelease(Mutable);
  return Instance;
}

uint64_t sub_2E448()
{
  int valuePtr = 0;
  int v5 = 0;
  int v0 = Apple80211CopyValue();
  if (v0)
  {
    int v1 = v0;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v2 = _os_log_pack_size();
      __chkstk_darwin(v2);
      __error();
      uint64_t v3 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v3 = 67109120;
      v3[1] = v1;
      __SC_log_send();
    }
  }
  sub_6DB0(&v5);
  return 0xFFFFLL;
}

CFMutableStringRef sub_2E604()
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFMutableStringRef v6 = Mutable;
  int v1 = Apple80211Get();
  if (v1)
  {
    int v2 = v1;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v3 = _os_log_pack_size();
      __chkstk_darwin(v3);
      __error();
      int v4 = (_DWORD *)_os_log_pack_fill();
      *int v4 = 67109120;
      v4[1] = v2;
      __SC_log_send();
    }
    sub_6DB0((const void **)&v6);
    return v6;
  }
  return Mutable;
}

uint64_t sub_2E758()
{
  int v0 = Apple80211Get();
  if (v0)
  {
    int v1 = v0;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v2 = _os_log_pack_size();
      __chkstk_darwin(v2);
      __error();
      uint64_t v3 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v3 = 67109120;
      v3[1] = v1;
      __SC_log_send();
    }
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v5 = 136315138;
      *(void *)(v5 + 4) = "false";
      __SC_log_send();
    }
  }
  return 0;
}

uint64_t sub_2E96C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

CFStringRef sub_2E974(uint64_t a1)
{
  CFStringRef result = *(CFStringRef *)(a1 + 48);
  if (!result)
  {
    sub_5997C(cStr, 18, (unsigned __int8 *)(a1 + 36), 6);
    CFStringRef result = CFStringCreateWithCString(0, cStr, 0x8000100u);
    *(void *)(a1 + 48) = result;
  }
  return result;
}

uint64_t sub_2E9FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_2EA04(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_2EA0C(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2) {
    return 2 * (a1 != a2);
  }
  if (!CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16))
    && !sub_543B8(*(const void **)(a1 + 24), *(const void **)(a2 + 24)))
  {
    return 2;
  }
  if (*(_DWORD *)(a1 + 36) ^ *(_DWORD *)(a2 + 36) | *(unsigned __int16 *)(a1 + 40) ^ *(unsigned __int16 *)(a2 + 40)) {
    return 3;
  }
  return 1;
}

uint64_t WiFiInfoAllowSharingDeviceType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t sub_2EAA0()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_70200 = result;
  return result;
}

void sub_2EAC8(const void **a1)
{
  sub_6DB0(a1 + 2);
  sub_6DB0(a1 + 3);

  sub_6DB0(a1 + 6);
}

__CFString *sub_2EB0C(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v2, 0);
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  CFStringRef v6 = sub_2E974(a1);
  uint64_t v7 = sub_2E050(v4);
  CFStringAppendFormat(Mutable, 0, @"<WiFiInfo %p [%p]> { SSID \"%@\" BSSID %@ Security %s", a1, v2, v5, v6, v7);
  if (*(void *)(a1 + 24)) {
    CFStringAppendFormat(Mutable, 0, @" NetworkID %@", *(void *)(a1 + 24));
  }
  if (*(unsigned char *)(a1 + 56)) {
    uint64_t v8 = "1";
  }
  else {
    uint64_t v8 = "0";
  }
  CFStringAppendFormat(Mutable, 0, @" AllowSharingDeviceType=%s", v8);
  CFStringAppend(Mutable, @" }");
  return Mutable;
}

uint64_t sub_2EBFC(uint64_t result)
{
  qword_70208 = result;
  return result;
}

dispatch_queue_t sub_2EC08()
{
  dispatch_queue_t result = (dispatch_queue_t)qword_70210;
  if (!qword_70210)
  {
    dispatch_queue_t result = dispatch_queue_create("IPConfigurationAgentQueue", 0);
    qword_70210 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_2EC44(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v6 = sub_8B80(a1);
  uint64_t v7 = sub_557C(a1);
  uint64_t v8 = 0;
  uint64_t v9 = v7;
  switch(a2)
  {
    case 0:
      if (v7)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v10 = _os_log_pack_size();
          __chkstk_darwin(v10);
          __error();
          uint64_t v11 = _os_log_pack_fill();
          uint64_t v12 = nullsub_1(v6);
          *(_DWORD *)uint64_t v11 = 136315138;
          *(void *)(v11 + 4) = v12;
          __SC_log_send();
        }
        return 6;
      }
      uint64_t v9 = (uint64_t)malloc_type_malloc(0x20uLL, 0x10200401C4E69EBuLL);
      sub_1E5C8(a1, v9);
      *(_OWORD *)uint64_t v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      *(_DWORD *)(v9 + 20) = *((_DWORD *)a3 + 4);
      sub_1E4E8(a1, *(_DWORD *)a3);
      sub_1E510(a1, *((_DWORD *)a3 + 1));
      sub_1E538(a1, *((_DWORD *)a3 + 3));
      int v26 = *((_DWORD *)a3 + 2);
      if (v26)
      {
        sub_1BAD0(a1, v26);
        sub_1BAE0(a1);
      }
      if ((sub_9384(v6) & 0x18) != 0)
      {
        unsigned int v27 = sub_1E4F8(a1);
        unsigned int v28 = sub_1E520(a1);
        unsigned int v29 = sub_1E548(a1);
        unint64_t v18 = v27;
        unint64_t v19 = v28;
        unint64_t v20 = v29;
        goto LABEL_37;
      }
      uint64_t v33 = nullsub_1(v6);
      snprintf(__str, 0x20uLL, "manual-%s", (const char *)v33);
      uint64_t v34 = timer_callout_init(__str);
      *(void *)(v9 + 8) = v34;
      if (v34)
      {
        uint64_t v35 = sub_CE80(v6);
        *(void *)uint64_t v9 = v35;
        if (!v35)
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v36 = _os_log_pack_size();
            __chkstk_darwin(v36);
            __error();
            uint64_t v37 = _os_log_pack_fill();
            uint64_t v38 = nullsub_1(v6);
            *(_DWORD *)uint64_t v37 = 136315138;
            *(void *)(v37 + 4) = v38;
            __SC_log_send();
          }
        }
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v39 = _os_log_pack_size();
          __chkstk_darwin(v39);
          __error();
          uint64_t v40 = _os_log_pack_fill();
          uint64_t v41 = nullsub_1(v6);
          *(_DWORD *)uint64_t v40 = 136315138;
          *(void *)(v40 + 4) = v41;
          __SC_log_send();
        }
        goto LABEL_47;
      }
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v43 = _os_log_pack_size();
        __chkstk_darwin(v43);
        __error();
        uint64_t v44 = _os_log_pack_fill();
        uint64_t v45 = nullsub_1(v6);
        *(_DWORD *)uint64_t v44 = 136315138;
        *(void *)(v44 + 4) = v45;
        __SC_log_send();
      }
      uint64_t v8 = 5;
      goto LABEL_53;
    case 1:
LABEL_53:
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v46 = _os_log_pack_size();
        __chkstk_darwin(v46);
        __error();
        uint64_t v47 = _os_log_pack_fill();
        uint64_t v48 = nullsub_1(v6);
        *(_DWORD *)uint64_t v47 = 136315138;
        *(void *)(v47 + 4) = v48;
        __SC_log_send();
      }
      if (v9)
      {
        sub_1DB14(a1);
        if (*(void *)v9) {
          sub_D020((uint64_t **)v9);
        }
        if (*(void *)(v9 + 8)) {
          timer_callout_free((uint64_t *)(v9 + 8));
        }
        free((void *)v9);
        sub_1E5C8(a1, 0);
      }
      return v8;
    case 3:
    case 8:
    case 11:
      if (!v7) {
        return 6;
      }
      if (!*(_DWORD *)(v7 + 20))
      {
        *(_DWORD *)(v7 + 24) = 0;
        if (*((_DWORD *)a3 + 1) && !*((_DWORD *)a3 + 2))
        {
          sub_2FB18(a1);
        }
        else if (a2 != 11 || !sub_1BC54(a1))
        {
LABEL_47:
          sub_2F5C0(a1, 0, 0);
        }
      }
      return 0;
    case 4:
      if (!*(_DWORD *)(v7 + 20)) {
        sub_2FB74(a1);
      }
      return 0;
    case 7:
      if (!v7)
      {
        sub_4220();
        uint64_t v8 = 6;
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v30 = _os_log_pack_size();
          __chkstk_darwin(v30);
          __error();
          uint64_t v31 = _os_log_pack_fill();
          uint64_t v32 = nullsub_1(v6);
          *(_DWORD *)uint64_t v31 = 136315138;
          *(void *)(v31 + 4) = v32;
          uint64_t v8 = 6;
          __SC_log_send();
        }
        return v8;
      }
      uint64_t v13 = *(unsigned int **)a3;
      *((_DWORD *)a3 + 2) = 0;
      int v14 = *v13;
      if (v14 != sub_1E4F8(a1)
        || sub_1B388(a1) && (unsigned int v15 = v13[2], v15 != sub_1B3A4(a1))
        || v13[4] != *(_DWORD *)(v9 + 20))
      {
        uint64_t v8 = 0;
        *((_DWORD *)a3 + 2) = 1;
        return v8;
      }
      unsigned int v16 = v13[1];
      if (v16 != sub_1E520(a1) || (unsigned int v17 = v13[3], v17 != sub_1E548(a1)))
      {
        sub_1E510(a1, v13[1]);
        sub_1E538(a1, v13[3]);
        unint64_t v18 = *v13;
        unint64_t v19 = v13[1];
        unint64_t v20 = v13[3];
LABEL_37:
        sub_1D47C(a1, v18, v19, v20);
        sub_61FC(a1, 0);
      }
      return 0;
    case 9:
      if (!v7) {
        return 6;
      }
      int v21 = *(_DWORD *)a3;
      if (v21 == sub_1E4F8(a1) && !sub_1BE88(a1, (uint64_t)a3))
      {
        uint64_t v22 = (unsigned __int8 *)*((void *)a3 + 1);
        snprintf(__str, 0x80uLL, "%d.%d.%d.%d in use by %02x:%02x:%02x:%02x:%02x:%02x", *a3, a3[1], a3[2], a3[3], *v22, v22[1], v22[2], v22[3], v22[4], v22[5]);
        if (!*(_DWORD *)(v9 + 24)) {
          *(_DWORD *)(v9 + 24) = 1;
        }
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v23 = _os_log_pack_size();
          __chkstk_darwin(v23);
          __error();
          uint64_t v24 = _os_log_pack_fill();
          uint64_t v25 = nullsub_1(v6);
          *(_DWORD *)uint64_t v24 = 136315394;
          *(void *)(v24 + 4) = v25;
          *(_WORD *)(v24 + 12) = 2080;
          *(void *)(v24 + 14) = __str;
          __SC_log_send();
        }
        sub_1DB14(a1);
        sub_9028(a1, 8u);
        if (dword_70048 >= 1) {
          timer_set_relative(*(void *)(v9 + 8), dword_70048, 0, (uint64_t)sub_2F5C0, a1, 0, 0);
        }
      }
      return 0;
    default:
      return v8;
  }
}

void sub_2F5C0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_8B80(a1);
  uint64_t v7 = (uint64_t *)sub_557C(a1);
  uint64_t v8 = v7;
  if (a2 != 6)
  {
    if (a2) {
      return;
    }
    if (*v7)
    {
      sub_2FB18(a1);
      uint64_t v9 = *v8;
      int v10 = sub_1E4F8(a1);
      sub_E17C(v9, (uint64_t)sub_2F5C0, a1, 6, 0, v10);
      return;
    }
    unint64_t v15 = sub_9030(a1);
    if (*((_DWORD *)v8 + 5) || v15 != 1 || HIDWORD(v15))
    {
      unsigned int v16 = sub_1E4F8(a1);
      unsigned int v17 = sub_1E520(a1);
      unsigned int v18 = sub_1E548(a1);
      sub_1D47C(a1, v16, v17, v18);
LABEL_16:
      sub_61FC(a1, 0);
      return;
    }
LABEL_29:
    sub_2FB74(a1);
    return;
  }
  if (*(_DWORD *)(a3 + 8))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      uint64_t v13 = nullsub_1(v6);
      uint64_t v14 = sub_E73C(*v8);
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)(v12 + 4) = v13;
      *(_WORD *)(v12 + 12) = 2080;
      *(void *)(v12 + 14) = v14;
      __SC_log_send();
    }
    timer_callout_set(v8[1], sub_2F5C0, a1, 0, 0, 8.0);
  }
  else
  {
    if (!*(_DWORD *)(a3 + 12))
    {
      unint64_t v23 = sub_9030(a1);
      if (*((_DWORD *)v8 + 5) || v23 != 1 || HIDWORD(v23))
      {
        unsigned int v24 = sub_1E4F8(a1);
        unsigned int v25 = sub_1E520(a1);
        unsigned int v26 = sub_1E548(a1);
        sub_1D47C(a1, v24, v25, v26);
        if (sub_1B388(a1))
        {
          int v27 = sub_1E4F8(a1);
          if (v27 != sub_1B3A4(a1))
          {
            uint64_t v28 = *v8;
            int v29 = sub_1E4F8(a1);
            if (sub_1B0A4(a1, v28, (uint64_t)sub_2FBB8, v29))
            {
              *((_DWORD *)v8 + 4) = 0;
              return;
            }
          }
        }
        goto LABEL_16;
      }
      goto LABEL_29;
    }
    unsigned int v19 = sub_1E4F8(a1);
    snprintf(__str, 0x80uLL, "%d.%d.%d.%d in use by %02x:%02x:%02x:%02x:%02x:%02x", v19, BYTE1(v19), BYTE2(v19), HIBYTE(v19), *(unsigned __int8 *)(a3 + 24), *(unsigned __int8 *)(a3 + 25), *(unsigned __int8 *)(a3 + 26), *(unsigned __int8 *)(a3 + 27), *(unsigned __int8 *)(a3 + 28), *(unsigned __int8 *)(a3 + 29));
    if (!*((_DWORD *)v8 + 6)) {
      *((_DWORD *)v8 + 6) = 1;
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v20 = _os_log_pack_size();
      __chkstk_darwin(v20);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      uint64_t v22 = nullsub_1(v6);
      *(_DWORD *)uint64_t v21 = 136315394;
      *(void *)(v21 + 4) = v22;
      *(_WORD *)(v21 + 12) = 2080;
      *(void *)(v21 + 14) = __str;
      __SC_log_send();
    }
    sub_1DB14(a1);
    sub_9028(a1, 8u);
    if (dword_70048 >= 1) {
      timer_set_relative(v8[1], dword_70048, 0, (uint64_t)sub_2F5C0, a1, 0, 0);
    }
  }
}

void sub_2FB18(uint64_t a1)
{
  uint64_t v2 = sub_557C(a1);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)v2;
    uint64_t v4 = *(void *)(v2 + 8);
    if (v4) {
      timer_cancel(v4);
    }
    uint64_t v5 = *v3;
    sub_1B064(a1, v5);
  }
}

uint64_t sub_2FB74(uint64_t a1)
{
  sub_2FB18(a1);
  sub_1DB14(a1);

  return sub_9028(a1, 0xCu);
}

void sub_2FBB8(uint64_t a1, int a2)
{
  uint64_t v4 = sub_8B80(a1);
  uint64_t v5 = sub_557C(a1);
  uint64_t v6 = v5;
  if (!a2)
  {
    *(_DWORD *)(v5 + 16) = 0;
LABEL_7:
    sub_61FC(a1, 0);
    return;
  }
  if (a2 != 99)
  {
    if (a2 != 1) {
      return;
    }
    timer_set_relative(*(void *)(v5 + 8), 60, 0, (uint64_t)sub_2FDB0, a1, 0, 0);
    if (*(_DWORD *)(v6 + 16)) {
      return;
    }
    *(_DWORD *)(v6 + 16) = 1;
    goto LABEL_7;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    uint64_t v9 = nullsub_1(v4);
    uint64_t v10 = sub_E73C(*(void *)v6);
    *(_DWORD *)uint64_t v8 = 136315394;
    *(void *)(v8 + 4) = v9;
    *(_WORD *)(v8 + 12) = 2080;
    *(void *)(v8 + 14) = v10;
    __SC_log_send();
  }
}

uint64_t sub_2FDB0(uint64_t a1)
{
  uint64_t v2 = *(void *)sub_557C(a1);
  int v3 = sub_1E4F8(a1);

  return sub_1B0A4(a1, v2, (uint64_t)sub_2FBB8, v3);
}

void sub_2FE0C(char *a1, uint64_t a2)
{
}

void sub_2FE14(char *cStr, uint64_t a2, int a3)
{
  __int16 v18 = 0;
  if (qword_70218) {
    BOOL v3 = qword_70220 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
  }
  else
  {
    uint64_t v7 = (__CFString *)CFStringCreateWithCString(0, cStr, 0x600u);
    CFDataRef v8 = (const __CFData *)sub_30BD4(v7, (CFDictionaryRef)qword_70218, (char *)&v18, (unsigned char *)&v18 + 1);
    int v9 = HIBYTE(v18);
    BOOL v10 = a3 == 0;
    if (a3) {
      char v11 = v18;
    }
    else {
      char v11 = 0;
    }
    if (v10) {
      CFDataRef v12 = 0;
    }
    else {
      CFDataRef v12 = v8;
    }
    CFDataRef v13 = (const __CFData *)sub_30BD4(v7, (CFDictionaryRef)qword_70220, (char *)&v18, (unsigned char *)&v18 + 1);
    int v14 = HIBYTE(v18) | v9;
    if (v12) {
      char v15 = v11;
    }
    else {
      char v15 = v18;
    }
    if (v12) {
      CFDataRef v16 = v12;
    }
    else {
      CFDataRef v16 = v13;
    }
    CFRelease(v7);
    sub_30C9C(a2, v16, v15);
    if (v14)
    {
      unsigned int v17 = (void *)sub_3AC0C();
      sub_30CF4(v17, (void *)qword_70228, qword_70218, (void *)qword_70220);
    }
  }
}

void sub_2FFE0(char *a1, uint64_t a2)
{
}

BOOL sub_2FFE8()
{
  return qword_70218 != 0;
}

void sub_2FFFC(int a1)
{
  if (!dword_702EC && sub_30164())
  {
    uint64_t v2 = (void *)sub_3AC0C();
    if (v2)
    {
      sub_302D0(v2, a1);
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v3 = _os_log_pack_size();
        __chkstk_darwin(v3);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
    }
  }
}

uint64_t sub_30164()
{
  int v6 = 0;
  size_t v5 = 4;
  if (!sysctlbyname("net.inet6.send.opmode", &v6, &v5, 0, 0)) {
    return v6 != 0;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v1 = _os_log_pack_size();
    __chkstk_darwin(v1);
    __error();
    uint64_t v2 = _os_log_pack_fill();
    uint64_t v3 = __error();
    uint64_t v4 = strerror(*v3);
    *(_DWORD *)uint64_t v2 = 136315394;
    *(void *)(v2 + 4) = "net.inet6.send.opmode";
    *(_WORD *)(v2 + 12) = 2080;
    *(void *)(v2 + 14) = v4;
    __SC_log_send();
    return 0;
  }
  return result;
}

void sub_302D0(void *a1, int a2)
{
  uint64_t v41 = 0;
  char v39 = 0;
  uint64_t v4 = "/var/db/dhcpclient/CGA.plist";
  CFPropertyListRef v5 = sub_537BC("/var/db/dhcpclient/CGA.plist");
  uint64_t v40 = v5;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v5) {
    goto LABEL_34;
  }
  if (CFGetTypeID(v5) != TypeID)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_34;
    }
    uint64_t v27 = _os_log_pack_size();
    __chkstk_darwin(v27);
    __error();
    uint64_t v28 = _os_log_pack_fill();
    int v29 = 136315138;
LABEL_32:
    *(_DWORD *)uint64_t v28 = v29;
    *(void *)(v28 + 4) = v4;
LABEL_33:
    __SC_log_send();
    goto LABEL_34;
  }
  uint64_t v4 = @"HostUUID";
  CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)v5, @"HostUUID");
  CFTypeID v8 = CFDataGetTypeID();
  if (!Value || CFGetTypeID(Value) != v8 || !CFEqual(Value, a1))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_34;
    }
    uint64_t v30 = _os_log_pack_size();
    __chkstk_darwin(v30);
    __error();
    uint64_t v28 = _os_log_pack_fill();
    int v29 = 138412290;
    goto LABEL_32;
  }
  CFStringRef v9 = @"GlobalModifier";
  BOOL v10 = CFDictionaryGetValue((CFDictionaryRef)v5, @"GlobalModifier");
  if (!v10 || (char v11 = v10, !sub_30F04(v10, &v39)))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_34;
    }
    goto LABEL_47;
  }
  CFStringRef v9 = (const __CFString *)"/var/db/dhcpclient/CGAKeys.plist";
  CFPropertyListRef v12 = sub_537BC("/var/db/dhcpclient/CGAKeys.plist");
  uint64_t v41 = v12;
  CFTypeID v13 = CFDictionaryGetTypeID();
  if (v12)
  {
    if (CFGetTypeID(v12) != v13)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_34;
      }
      uint64_t v37 = _os_log_pack_size();
      __chkstk_darwin(v37);
      __error();
      uint64_t v35 = _os_log_pack_fill();
      int v36 = 136315138;
      goto LABEL_48;
    }
    CFStringRef v9 = @"PrivateKey";
    int v14 = CFDictionaryGetValue((CFDictionaryRef)v12, @"PrivateKey");
    CFTypeID v15 = CFDataGetTypeID();
    if (!v14 || CFGetTypeID(v14) != v15)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_34;
      }
      goto LABEL_47;
    }
    CFStringRef v9 = @"PublicKey";
    CFDataRef v16 = CFDictionaryGetValue((CFDictionaryRef)v12, @"PublicKey");
    CFTypeID v17 = CFDataGetTypeID();
    if (v16 && CFGetTypeID(v16) == v17)
    {
      if (sub_31108((uint64_t)v14))
      {
        __int16 v18 = CFDictionaryGetValue((CFDictionaryRef)v5, @"LinkLocalModifiers");
        if (v18)
        {
          CFTypeID v19 = CFDictionaryGetTypeID();
          if (CFGetTypeID(v18) != v19)
          {
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v20 = _os_log_pack_size();
              __chkstk_darwin(v20);
              __error();
              uint64_t v21 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v21 = 138412290;
              *(void *)(v21 + 4) = @"LinkLocalModifiers";
              __SC_log_send();
            }
            __int16 v18 = 0;
          }
        }
        uint64_t v22 = CFDictionaryGetValue((CFDictionaryRef)v5, @"InterfaceModifiers");
        if (v22)
        {
          CFTypeID v23 = CFDictionaryGetTypeID();
          if (CFGetTypeID(v22) != v23)
          {
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v24 = _os_log_pack_size();
              __chkstk_darwin(v24);
              __error();
              uint64_t v25 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v25 = 138412290;
              *(void *)(v25 + 4) = @"InterfaceModifiers";
              __SC_log_send();
            }
            uint64_t v22 = 0;
          }
        }
        qword_70228 = (uint64_t)CFRetain(v11);
        if (v18)
        {
          CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)v18);
          qword_70218 = (uint64_t)MutableCopy;
          if (a2) {
            sub_312FC(MutableCopy);
          }
          goto LABEL_41;
        }
LABEL_40:
        qword_70218 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
LABEL_41:
        if (v22) {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)v22);
        }
        else {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        }
        qword_70220 = (uint64_t)Mutable;
        goto LABEL_45;
      }
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v38 = _os_log_pack_size();
        __chkstk_darwin(v38);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
      goto LABEL_45;
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
LABEL_47:
      uint64_t v34 = _os_log_pack_size();
      __chkstk_darwin(v34);
      __error();
      uint64_t v35 = _os_log_pack_fill();
      int v36 = 138412290;
LABEL_48:
      *(_DWORD *)uint64_t v35 = v36;
      *(void *)(v35 + 4) = v9;
      goto LABEL_33;
    }
  }
LABEL_34:
  uint64_t v31 = sub_30FDC(4uLL);
  CFBooleanRef v42 = v31;
  uint64_t v32 = sub_30FDC(0x8CuLL);
  uint64_t v43 = v32;
  uint64_t v44 = sub_30FDC(0x10uLL);
  CFDictionaryRef v45 = sub_31028(v44, 0);
  if (!sub_30CF4(a1, v45, 0, 0) || !sub_31568(v31, v32) || !sub_31108((uint64_t)v31)) {
    sub_6DB0((const void **)&v45);
  }
  sub_6DB0((const void **)&v43);
  sub_6DB0((const void **)&v42);
  sub_6DB0((const void **)&v44);
  if (v45)
  {
    uint64_t v22 = 0;
    qword_70228 = (uint64_t)v45;
    goto LABEL_40;
  }
LABEL_45:
  sub_6DB0(&v41);
  sub_6DB0(&v40);
}

void *sub_30BD4(void *key, CFDictionaryRef theDict, char *a3, unsigned char *a4)
{
  *a4 = 0;
  CFArrayRef Value = CFDictionaryGetValue(theDict, key);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID || (BOOL v10 = (void *)sub_30F04(Value, a3)) == 0)
  {
    *a3 = 0;
    BOOL v10 = sub_30FDC(0x10uLL);
    CFDictionaryRef v11 = sub_31028(v10, *a3);
    CFRelease(v10);
    CFDictionarySetValue(theDict, key, v11);
    CFRelease(v11);
    *a4 = 1;
  }
  return v10;
}

void sub_30C9C(uint64_t a1, CFDataRef theData, char a3)
{
  v6.length = CFDataGetLength(theData);
  v6.location = 0;
  CFDataGetBytes(theData, v6, (UInt8 *)a1);
  *(unsigned char *)(a1 + 16) = a3;
  *(void *)(a1 + 17) = 0;
  *(void *)(a1 + 24) = 0;
}

BOOL sub_30CF4(void *a1, void *a2, uint64_t a3, void *a4)
{
  *(_OWORD *)keys = *(_OWORD *)off_68FB8;
  long long v16 = unk_68FC8;
  values[0] = a1;
  values[1] = a2;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (!a3)
  {
    CFIndex v4 = 2;
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  *(void *)&long long v16 = @"LinkLocalModifiers";
  uint64_t v13 = a3;
  CFIndex v4 = 3;
  if (a4)
  {
LABEL_3:
    keys[v4] = @"InterfaceModifiers";
    values[v4++] = a4;
  }
LABEL_4:
  CFDictionaryRef v5 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  int v6 = sub_538BC(v5, (const std::__fs::filesystem::path *)"/var/db/dhcpclient/CGA.plist", 0x1A4u);
  if (v6 < 0)
  {
    sub_4220();
    __error();
    _SC_syslog_os_log_mapping();
    __error();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      CFStringRef v9 = __error();
      BOOL v10 = strerror(*v9);
      *(_DWORD *)uint64_t v8 = 136315394;
      *(void *)(v8 + 4) = "/var/db/dhcpclient/CGA.plist";
      *(_WORD *)(v8 + 12) = 2080;
      *(void *)(v8 + 14) = v10;
      __error();
      __SC_log_send();
    }
  }
  CFRelease(v5);
  return v6 >= 0;
}

const void *sub_30F04(const void *a1, unsigned char *a2)
{
  *a2 = 0;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, @"Modifier");
  CFTypeID v6 = CFDataGetTypeID();
  if (!Value) {
    return Value;
  }
  if (CFGetTypeID(Value) != v6 || CFDataGetLength((CFDataRef)Value) != 16) {
    return 0;
  }
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"SecurityLevel");
  CFTypeID v8 = CFNumberGetTypeID();
  if (v7 && CFGetTypeID(v7) == v8) {
    CFNumberGetValue(v7, kCFNumberSInt8Type, a2);
  }
  return Value;
}

__CFData *sub_30FDC(size_t capacity)
{
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(0, capacity);
  CFDataSetLength(Mutable, capacity);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  arc4random_buf(MutableBytePtr, capacity);
  return Mutable;
}

CFDictionaryRef sub_31028(void *a1, char a2)
{
  char valuePtr = a2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v4 = CFDateCreate(0, Current);
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt8Type, &valuePtr);
  *(_OWORD *)keys = *(_OWORD *)off_68FA0;
  CFStringRef v11 = @"CreationDate";
  values[0] = a1;
  values[1] = v5;
  values[2] = v4;
  CFDictionaryRef v6 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFRelease(v4);
  CFRelease(v5);
  return v6;
}

BOOL sub_31108(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  CFDataRef v3 = v2;
  CFDataRef v4 = (const __CFData *)v1;
  sub_30C9C((uint64_t)v16, v5, v6);
  unsigned __int16 Length = CFDataGetLength(v4);
  v16[16] = Length;
  v18.length = Length;
  v18.location = 0;
  CFDataGetBytes(v4, v18, v17);
  CFTypeID v8 = &v17[Length];
  unsigned __int16 v9 = CFDataGetLength(v3);
  *(_WORD *)CFTypeID v8 = v9;
  v8 += 2;
  v19.length = v9;
  v19.location = 0;
  CFDataGetBytes(v3, v19, v8);
  int v10 = sysctlbyname("net.inet6.send.cga_parameters", 0, 0, v16, &v8[v9] - (UInt8 *)v16);
  if (v10)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      uint64_t v13 = __error();
      uint64_t v14 = strerror(*v13);
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)(v12 + 4) = "net.inet6.send.cga_parameters";
      *(_WORD *)(v12 + 12) = 2080;
      *(void *)(v12 + 14) = v14;
      __SC_log_send();
    }
  }
  return v10 == 0;
}

void sub_312FC(const __CFDictionary *a1)
{
  CFIndex Count = CFDictionaryGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v3 = Count;
    uint64_t v18 = (uint64_t)&v18;
    unint64_t v4 = 8 * Count;
    __chkstk_darwin(Count);
    unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
    char v6 = (const void **)((char *)&v18 - v5);
    if (v4 >= 0x200) {
      size_t v7 = 512;
    }
    else {
      size_t v7 = v4;
    }
    bzero((char *)&v18 - v5, v7);
    __chkstk_darwin(v8);
    unsigned __int16 v9 = (const void **)((char *)&v18 - v5);
    bzero((char *)&v18 - v5, v7);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v19 = CFDateCreate(0, Current);
    CFDictionaryGetKeysAndValues(a1, (const void **)((char *)&v18 - v5), (const void **)((char *)&v18 - v5));
    *(void *)&long long v11 = 138412290;
    long long v20 = v11;
    do
    {
      uint64_t v12 = *v9;
      char v21 = 0;
      if (!sub_30F04(v12, &v21)
        || (Value = CFDictionaryGetValue((CFDictionaryRef)v12, @"CreationDate"), CFTypeID TypeID = CFDateGetTypeID(),
                                                                                       !Value)
        || CFGetTypeID(Value) != TypeID
        || CFDateGetTimeIntervalSinceDate(v19, (CFDateRef)Value) >= 86400.0)
      {
        CFTypeID v15 = *v6;
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v16 = _os_log_pack_size();
          __chkstk_darwin(v16);
          __error();
          uint64_t v17 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v17 = v20;
          *(void *)(v17 + 4) = v15;
          __SC_log_send();
        }
        CFDictionaryRemoveValue(a1, v15);
      }
      ++v6;
      ++v9;
      --v3;
    }
    while (v3);
    CFRelease(v19);
  }
}

BOOL sub_31568(void *a1, void *a2)
{
  *(_OWORD *)keys = *(_OWORD *)off_68FD8;
  values[0] = a1;
  values[1] = a2;
  CFDictionaryRef v2 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  int v3 = sub_538BC(v2, (const std::__fs::filesystem::path *)"/var/db/dhcpclient/CGAKeys.plist", 0x180u);
  if (v3 < 0)
  {
    sub_4220();
    __error();
    _SC_syslog_os_log_mapping();
    __error();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      char v6 = __error();
      size_t v7 = strerror(*v6);
      *(_DWORD *)uint64_t v5 = 136315394;
      *(void *)(v5 + 4) = "/var/db/dhcpclient/CGAKeys.plist";
      *(_WORD *)(v5 + 12) = 2080;
      *(void *)(v5 + 14) = v7;
      __error();
      __SC_log_send();
    }
  }
  CFRelease(v2);
  return v3 >= 0;
}

uint64_t sub_31730(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  *(unsigned char *)(a2 + 15) = 0;
  *a4 = sub_20720((const char *)a2, a3);
  return 0;
}

uint64_t sub_31768(uint64_t a1, _DWORD *a2)
{
  *a2 = sub_20714();
  return 0;
}

uint64_t sub_31794(uint64_t a1, uint64_t a2, int a3, vm_address_t *a4, _DWORD *a5, _DWORD *a6)
{
  *(unsigned char *)(a2 + 15) = 0;
  *a6 = sub_207AC((const char *)a2, a3, a4, a5);
  return 0;
}

uint64_t sub_317D4(uint64_t a1, uint64_t a2, vm_address_t *a3, _DWORD *a4, _DWORD *a5)
{
  *(unsigned char *)(a2 + 15) = 0;
  *a5 = sub_20940((const char *)a2, a3, a4);
  return 0;
}

uint64_t sub_31810(uint64_t a1, uint64_t a2, vm_address_t *a3, _DWORD *a4, _DWORD *a5)
{
  *(unsigned char *)(a2 + 15) = 0;
  *a5 = sub_20AAC((const char *)a2, a3, a4);
  return 0;
}

uint64_t sub_3184C(uint64_t a1, char *a2, UInt8 *a3, unsigned int a4, int *a5, _OWORD *a6)
{
  uint64_t v17 = 0;
  *(_OWORD *)CFTypeID v15 = 0u;
  long long v16 = 0u;
  long long v10 = a6[1];
  *(_OWORD *)atoken.val = *a6;
  *(_OWORD *)&atoken.val[4] = v10;
  long long v14 = 0u;
  dword_700E8 = -1;
  dword_700EC = -1;
  audit_token_to_au32(&atoken, 0, (uid_t *)&dword_700E8, 0, 0, 0, &dword_700EC, 0, 0);
  if (dword_700E8)
  {
    int v11 = 1;
    goto LABEL_4;
  }
  uint64_t v17 = 0;
  *(_OWORD *)CFTypeID v15 = 0u;
  long long v16 = 0u;
  long long v14 = 0u;
  int v11 = sub_319BC(a3, a4, (in_addr *)&v14);
  if (!v11)
  {
    a2[15] = 0;
    int v11 = sub_215BC(a2, (int *)&v14);
    if (v14 == 516)
    {
      if (DWORD2(v14) != 3) {
        goto LABEL_4;
      }
    }
    else if (v14 != 259)
    {
      goto LABEL_4;
    }
    if (v15[0])
    {
      free(v15[0]);
      v15[0] = 0;
    }
  }
LABEL_4:
  if (a3) {
    vm_deallocate(mach_task_self_, (vm_address_t)a3, a4);
  }
  *a5 = v11;
  return 0;
}

CFIndex sub_319BC(UInt8 *a1, int a2, in_addr *a3)
{
  if (a1)
  {
    CFDataRef v4 = sub_54484(a1, a2);
    CFIndex v5 = sub_1F02C((CFIndex)v4, a3);
    if (v4) {
      CFRelease(v4);
    }
    return v5;
  }
  else
  {
    return sub_1F02C(0, a3);
  }
}

uint64_t sub_31A24(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 1;
  return 0;
}

uint64_t sub_31A34(uint64_t a1, char *a2, UInt8 *a3, unsigned int a4, _OWORD *a5, int *a6, _OWORD *a7)
{
  uint64_t v20 = 0;
  *(_OWORD *)uint64_t v18 = 0u;
  long long v19 = 0u;
  long long v12 = a7[1];
  v16[0] = *a7;
  v16[1] = v12;
  long long v17 = 0u;
  if (!sub_31BBC(v16))
  {
    int v14 = 1;
    goto LABEL_9;
  }
  if (a3) {
    CFDataRef v13 = sub_54484(a3, a4);
  }
  else {
    CFDataRef v13 = 0;
  }
  uint64_t v20 = 0;
  *(_OWORD *)uint64_t v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  int v14 = sub_1F02C((CFIndex)v13, (in_addr *)&v17);
  if (!v14)
  {
    a5[6] = 0u;
    a5[7] = 0u;
    a5[4] = 0u;
    a5[5] = 0u;
    a5[2] = 0u;
    a5[3] = 0u;
    *a5 = 0u;
    a5[1] = 0u;
    a2[15] = 0;
    int v14 = sub_21F20(a2, (int *)&v17, (uint64_t)a5, v13, dword_700EC);
    if (v17 == 516)
    {
      if (DWORD2(v17) != 3) {
        goto LABEL_7;
      }
    }
    else if (v17 != 259)
    {
      goto LABEL_7;
    }
    if (v18[0])
    {
      free(v18[0]);
      v18[0] = 0;
    }
  }
LABEL_7:
  if (v13) {
    CFRelease(v13);
  }
LABEL_9:
  if (a3) {
    vm_deallocate(mach_task_self_, (vm_address_t)a3, a4);
  }
  *a6 = v14;
  return 0;
}

BOOL sub_31BBC(_OWORD *a1)
{
  long long v2 = a1[1];
  *(_OWORD *)atoken.val = *a1;
  *(_OWORD *)&atoken.val[4] = v2;
  dword_700E8 = -1;
  dword_700EC = -1;
  audit_token_to_au32(&atoken, 0, (uid_t *)&dword_700E8, 0, 0, 0, &dword_700EC, 0, 0);
  if (!dword_700E8) {
    return 1;
  }
  long long v3 = a1[1];
  *(_OWORD *)atoken.val = *a1;
  *(_OWORD *)&atoken.val[4] = v3;
  CFDataRef v4 = SecTaskCreateWithAuditToken(0, &atoken);
  if (v4)
  {
    CFIndex v5 = v4;
    CFBooleanRef v6 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v4, @"com.apple.IPConfigurationService", 0);
    if (v6)
    {
      CFBooleanRef v7 = v6;
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (CFGetTypeID(v7) == TypeID)
      {
        int Value = CFBooleanGetValue(v7);
        CFRelease(v7);
        CFRelease(v5);
        return Value != 0;
      }
      CFRelease(v7);
    }
    CFRelease(v5);
  }
  return 0;
}

uint64_t _ipconfig_set_service(uint64_t a1, char *a2, UInt8 *a3, unsigned int a4, _OWORD *a5, int *a6, _OWORD *a7)
{
  uint64_t v19 = 0;
  *(_OWORD *)long long v17 = 0u;
  long long v18 = 0u;
  long long v12 = a7[1];
  v15[0] = *a7;
  v15[1] = v12;
  long long v16 = 0u;
  if (!sub_31BBC(v15))
  {
    int v13 = 1;
    goto LABEL_7;
  }
  uint64_t v19 = 0;
  *(_OWORD *)long long v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  int v13 = sub_319BC(a3, a4, (in_addr *)&v16);
  if (v13) {
    goto LABEL_7;
  }
  a5[6] = 0u;
  a5[7] = 0u;
  a5[4] = 0u;
  a5[5] = 0u;
  a5[2] = 0u;
  a5[3] = 0u;
  *a5 = 0u;
  a5[1] = 0u;
  a2[15] = 0;
  int v13 = sub_226AC(a2, (int *)&v16, (uint64_t)a5);
  if (v16 == 516)
  {
    if (DWORD2(v16) != 3) {
      goto LABEL_7;
    }
  }
  else if (v16 != 259)
  {
    goto LABEL_7;
  }
  if (v17[0])
  {
    free(v17[0]);
    v17[0] = 0;
  }
LABEL_7:
  if (a3) {
    vm_deallocate(mach_task_self_, (vm_address_t)a3, a4);
  }
  *a6 = v13;
  return 0;
}

uint64_t sub_31E10(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, _OWORD *a5)
{
  long long v8 = a5[1];
  v11[0] = *a5;
  v11[1] = v8;
  if (sub_31BBC(v11))
  {
    if (*(unsigned char *)a2) {
      *(unsigned char *)(a2 + 15) = 0;
    }
    else {
      a2 = 0;
    }
    *(unsigned char *)(a3 + 127) = 0;
    int v9 = sub_226C0((const char *)a2, (const char *)a3);
  }
  else
  {
    int v9 = 1;
  }
  *a4 = v9;
  return 0;
}

uint64_t sub_31E90(uint64_t a1, uint64_t a2, int a3, UInt8 *a4, unsigned int a5, _OWORD *a6, _DWORD *a7)
{
  a6[6] = 0u;
  a6[7] = 0u;
  a6[4] = 0u;
  a6[5] = 0u;
  a6[2] = 0u;
  a6[3] = 0u;
  *a6 = 0u;
  a6[1] = 0u;
  long long v15 = 0u;
  *(_OWORD *)long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  int v13 = sub_319BC(a4, a5, (in_addr *)&v15);
  if (!v13)
  {
    *(unsigned char *)(a2 + 15) = 0;
    int v13 = sub_22798((const char *)a2, a3, (int *)&v15, (uint64_t)a6);
    if (v15 == 516)
    {
      if (DWORD2(v15) != 3) {
        goto LABEL_2;
      }
    }
    else if (v15 != 259)
    {
      goto LABEL_2;
    }
    if (v16[0])
    {
      free(v16[0]);
      v16[0] = 0;
    }
  }
LABEL_2:
  if (a4) {
    vm_deallocate(mach_task_self_, (vm_address_t)a4, a5);
  }
  *a7 = v13;
  return 0;
}

uint64_t sub_31FC0(uint64_t a1, uint64_t a2, UInt8 *a3, unsigned int a4, int *a5, _OWORD *a6)
{
  uint64_t v17 = 0;
  *(_OWORD *)long long v15 = 0u;
  long long v16 = 0u;
  long long v10 = a6[1];
  v13[0] = *a6;
  v13[1] = v10;
  long long v14 = 0u;
  if (!sub_31BBC(v13))
  {
    int v11 = 1;
    goto LABEL_7;
  }
  uint64_t v17 = 0;
  *(_OWORD *)long long v15 = 0u;
  long long v16 = 0u;
  long long v14 = 0u;
  int v11 = sub_319BC(a3, a4, (in_addr *)&v14);
  if (v11) {
    goto LABEL_7;
  }
  *(unsigned char *)(a2 + 15) = 0;
  int v11 = sub_22A78((const char *)a2, (int *)&v14);
  if (v14 == 516)
  {
    if (DWORD2(v14) != 3) {
      goto LABEL_7;
    }
  }
  else if (v14 != 259)
  {
    goto LABEL_7;
  }
  if (v15[0])
  {
    free(v15[0]);
    v15[0] = 0;
  }
LABEL_7:
  if (a3) {
    vm_deallocate(mach_task_self_, (vm_address_t)a3, a4);
  }
  *a5 = v11;
  return 0;
}

uint64_t sub_320F0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, _OWORD *a5)
{
  long long v8 = a5[1];
  v11[0] = *a5;
  v11[1] = v8;
  if (sub_31BBC(v11))
  {
    *(unsigned char *)(a3 + 127) = 0;
    *(unsigned char *)(a2 + 15) = 0;
    int v9 = sub_22C70((const char *)a2, (const char *)a3);
  }
  else
  {
    int v9 = 1;
  }
  *a4 = v9;
  return 0;
}

uint64_t sub_32160(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(unsigned char *)(a2 + 15) = 0;
  *(unsigned char *)(a3 + 127) = 0;
  *a4 = sub_22EA0((const char *)a2, (const char *)a3);
  return 0;
}

uint64_t sub_3219C(uint64_t a1, uint64_t a2, UInt8 *a3, unsigned int a4, int *a5, _OWORD *a6)
{
  long long v10 = a6[1];
  *(_OWORD *)atoken.val = *a6;
  *(_OWORD *)&atoken.val[4] = v10;
  dword_700E8 = -1;
  dword_700EC = -1;
  CFDataRef v18 = 0;
  audit_token_to_au32(&atoken, 0, (uid_t *)&dword_700E8, 0, 0, 0, &dword_700EC, 0, 0);
  if (dword_700E8)
  {
    int v11 = 1;
    if (a3) {
LABEL_3:
    }
      vm_deallocate(mach_task_self_, (vm_address_t)a3, a4);
  }
  else
  {
    if (a3
      && (CFDataRef v13 = sub_54484(a3, a4), v18 = v13, TypeID = CFDictionaryGetTypeID(), v13)
      && CFGetTypeID(v13) == TypeID
      && (Value = (__CFDictionary *)CFDictionaryGetValue(v13, @"SSID"), CFTypeID v16 = CFStringGetTypeID(), Value))
    {
      if (CFGetTypeID(Value) == v16) {
        uint64_t v17 = Value;
      }
      else {
        uint64_t v17 = 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    *(unsigned char *)(a2 + 15) = 0;
    int v11 = sub_22F10((const char *)a2, v17);
    sub_6DB0((const void **)&v18);
    if (a3) {
      goto LABEL_3;
    }
  }
  *a5 = v11;
  return 0;
}

uint64_t sub_322E4(uint64_t a1, uint64_t a2, const __CFData **a3, _DWORD *a4, _DWORD *a5)
{
  *(unsigned char *)(a2 + 15) = 0;
  *a5 = sub_20BA8((const char *)a2, a3, a4);
  return 0;
}

uint64_t sub_32320(uint64_t a1, uint64_t a2, const __CFData **a3, _DWORD *a4, int *a5)
{
  long long v12 = 0;
  *a3 = 0;
  *a4 = 0;
  *(unsigned char *)(a2 + 15) = 0;
  int v8 = sub_20CC8((const char *)a2, (uint64_t *)&v12);
  if (v12)
  {
    CFDataRef v9 = sub_543CC(v12, a4);
    *a3 = v9;
    if (!v9)
    {
      sub_4220();
      int v8 = 5;
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v10 = _os_log_pack_size();
        __chkstk_darwin(v10);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        int v8 = 5;
        __SC_log_send();
      }
    }
  }
  sub_6DB0(&v12);
  *a5 = v8;
  return 0;
}

uint64_t sub_3247C(uint64_t a1, const __CFData **a2, _DWORD *a3, int *a4)
{
  int v11 = 0;
  *a2 = 0;
  *a3 = 0;
  int v7 = sub_21414(&v11);
  if (v11)
  {
    CFDataRef v8 = sub_543CC(v11, a3);
    *a2 = v8;
    if (!v8)
    {
      sub_4220();
      int v7 = 5;
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        int v7 = 5;
        __SC_log_send();
      }
    }
  }
  sub_6DB0((const void **)&v11);
  *a4 = v7;
  return 0;
}

uint64_t sub_325D0(uint64_t a1, vm_address_t *a2, _DWORD *a3, _DWORD *a4)
{
  *a4 = sub_214E0(a2, a3);
  return 0;
}

uint64_t sub_32604(uint64_t a1, char *a2, _DWORD *a3, _DWORD *a4)
{
  a2[15] = 0;
  *a4 = sub_21550(a2, a3);
  return 0;
}

void sub_3263C()
{
  kern_return_t v0;
  mach_error_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uintptr_t v5;
  NSObject *v6;
  NSObject *v7;
  void handler[5];
  mach_port_t sp;

  sp = 0;
  int v0 = bootstrap_check_in(bootstrap_port, "com.apple.network.IPConfiguration", &sp);
  if (v0)
  {
    uint64_t v1 = v0;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      long long v2 = _os_log_pack_size();
      __chkstk_darwin(v2);
      __error();
      long long v3 = _os_log_pack_fill();
      CFDataRef v4 = mach_error_string(v1);
      *(_DWORD *)long long v3 = 136315138;
      *(void *)(v3 + 4) = v4;
      __SC_log_send();
    }
  }
  else
  {
    CFIndex v5 = sp;
    CFBooleanRef v6 = sub_2EC08();
    int v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_mach_recv, v5, 0, v6);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = sub_327FC;
    handler[3] = &unk_68FE8;
    handler[4] = v7;
    dispatch_source_set_event_handler(v7, handler);
    dispatch_activate(v7);
  }
}

uint64_t sub_327FC()
{
  uint64_t result = dispatch_mig_server();
  if (result)
  {
    int v1 = result;
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      _os_log_pack_size();
      __error();
      uint64_t v2 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v2 = 136315394;
      *(void *)(v2 + 4) = "server_init_block_invoke";
      *(_WORD *)(v2 + 12) = 1024;
      *(_DWORD *)(v2 + 14) = v1;
      return __SC_log_send();
    }
  }
  return result;
}

_OWORD *timer_callout_init(const char *a1)
{
  uint64_t v2 = malloc_type_malloc(0x40uLL, 0x10B00406D5306C6uLL);
  long long v3 = v2;
  if (v2)
  {
    void v2[2] = 0u;
    v2[3] = 0u;
    _OWORD *v2 = 0u;
    v2[1] = 0u;
    *(void *)uint64_t v2 = strdup(a1);
    sub_32998();
    *((_DWORD *)v3 + 12) = dword_70230;
  }
  return v3;
}

void sub_32998()
{
  if ((byte_70234 & 1) == 0)
  {
    uint32_t v0 = notify_register_check("com.apple.system.clock_set", &dword_70238);
    if (v0)
    {
      uint32_t v1 = v0;
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v2 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v2 = 136315394;
        *(void *)(v2 + 4) = "com.apple.system.clock_set";
        *(_WORD *)(v2 + 12) = 1024;
        *(_DWORD *)(v2 + 14) = v1;
        __SC_log_send();
      }
    }
    else
    {
      byte_70234 = 1;
      sub_32C4C();
    }
  }
}

void timer_callout_free(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    long long v3 = *(NSObject **)(v1 + 40);
    if (v3)
    {
      dispatch_source_cancel(v3);
      if (*(_DWORD *)(v1 + 56))
      {
        dispatch_resume(*(dispatch_object_t *)(v1 + 40));
        *(_DWORD *)(v1 + 56) = 0;
      }
      dispatch_release(*(dispatch_object_t *)(v1 + 40));
      *(void *)(v1 + 40) = 0;
    }
    free(*(void **)v1);
    free((void *)v1);
    *a1 = 0;
  }
}

uint64_t timer_callout_set_absolute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double v11 = a6 - CFAbsoluteTimeGetCurrent();

  return timer_callout_set_0(a1, a2, a3, a4, a5, v11);
}

BOOL timer_time_changed(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) != dword_70230;
}

void sub_32C4C()
{
  int check = 0;
  if (byte_70234 == 1)
  {
    uint32_t v0 = notify_check(dword_70238, &check);
    if (v0)
    {
      uint32_t v1 = v0;
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v2 = (_DWORD *)_os_log_pack_fill();
        _DWORD *v2 = 67109120;
        v2[1] = v1;
        __SC_log_send();
      }
    }
    else if (check)
    {
      ++dword_70230;
    }
  }
}

uint64_t timer_still_pending(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t failover_thread(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v6 = sub_8B80(a1);
  uint64_t v7 = sub_557C(a1);
  uint64_t v8 = 0;
  uint64_t v9 = (unsigned int *)v7;
  switch(a2)
  {
    case 0:
      if (v7)
      {
        sub_4220();
        uint64_t v8 = 6;
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled()) {
          goto LABEL_27;
        }
      }
      else
      {
        if ((sub_9384(v6) & 8) == 0)
        {
          uint64_t v9 = (unsigned int *)malloc_type_malloc(0x20uLL, 0x102004070E7FC99uLL);
          sub_1E5C8(a1, (uint64_t)v9);
          *(_OWORD *)uint64_t v9 = 0u;
          *((_OWORD *)v9 + 1) = 0u;
          sub_1E4E8(a1, *(_DWORD *)a3);
          sub_1E510(a1, *((_DWORD *)a3 + 1));
          uint64_t v22 = timer_callout_init("failover");
          *((void *)v9 + 1) = v22;
          if (v22)
          {
            CFTypeID v23 = sub_CE80(v6);
            *(void *)uint64_t v9 = v23;
            if (v23)
            {
              _OWORD v9[4] = *((_DWORD *)a3 + 5);
              sub_4220();
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                uint64_t v24 = _os_log_pack_size();
                __chkstk_darwin(v24);
                __error();
                uint64_t v25 = _os_log_pack_fill();
                uint64_t v26 = nullsub_1(v6);
                *(_DWORD *)uint64_t v25 = 136315138;
                *(void *)(v25 + 4) = v26;
                __SC_log_send();
              }
              goto LABEL_22;
            }
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v30 = _os_log_pack_size();
              __chkstk_darwin(v30);
              __error();
              uint64_t v31 = _os_log_pack_fill();
              uint64_t v32 = nullsub_1(v6);
              *(_DWORD *)uint64_t v31 = 136315138;
              *(void *)(v31 + 4) = v32;
              __SC_log_send();
            }
            uint64_t v8 = 0;
          }
          else
          {
            sub_4220();
            uint64_t v8 = 5;
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v27 = _os_log_pack_size();
              __chkstk_darwin(v27);
              __error();
              uint64_t v28 = _os_log_pack_fill();
              uint64_t v29 = nullsub_1(v6);
              *(_DWORD *)uint64_t v28 = 136315138;
              *(void *)(v28 + 4) = v29;
              uint64_t v8 = 5;
              __SC_log_send();
            }
          }
          goto LABEL_39;
        }
        return 3;
      }
      return v8;
    case 1:
LABEL_39:
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v33 = _os_log_pack_size();
        __chkstk_darwin(v33);
        __error();
        uint64_t v34 = _os_log_pack_fill();
        uint64_t v35 = nullsub_1(v6);
        *(_DWORD *)uint64_t v34 = 136315138;
        *(void *)(v34 + 4) = v35;
        __SC_log_send();
      }
      if (v9)
      {
        sub_1DB14(a1);
        if (*(void *)v9) {
          sub_D020((uint64_t **)v9);
        }
        if (*((void *)v9 + 1)) {
          timer_callout_free((uint64_t *)v9 + 1);
        }
        free(v9);
        sub_1E5C8(a1, 0);
      }
      return v8;
    case 3:
    case 11:
      if (!v7) {
        return 6;
      }
      if (!*((_DWORD *)a3 + 1) || *((_DWORD *)a3 + 2)) {
        goto LABEL_22;
      }
      *(unsigned char *)(v7 + 20) = 0;
      sub_2DD0C(a1);
      return 0;
    case 4:
      sub_33C14(a1);
      return 0;
    case 7:
      if (!v7)
      {
        sub_4220();
        uint64_t v8 = 6;
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
LABEL_27:
          uint64_t v19 = _os_log_pack_size();
          __chkstk_darwin(v19);
          __error();
          uint64_t v20 = _os_log_pack_fill();
          uint64_t v21 = nullsub_1(v6);
          *(_DWORD *)uint64_t v20 = 136315138;
          *(void *)(v20 + 4) = v21;
          uint64_t v8 = 6;
          __SC_log_send();
        }
        return v8;
      }
      uint64_t v10 = *(int **)a3;
      *((_DWORD *)a3 + 2) = 0;
      int v11 = *v10;
      if (v11 != sub_1E4F8(a1) || (int v12 = v10[1], v12 != sub_1E520(a1)))
      {
        uint64_t v8 = 0;
        *((_DWORD *)a3 + 2) = 1;
        return v8;
      }
      _OWORD v9[4] = v10[5];
      if (sub_1E4C4(a1) && *((unsigned char *)v9 + 20))
      {
        uint64_t v13 = v9[4];
        if (v13) {
          timer_set_relative(*((void *)v9 + 1), v13, 0, (uint64_t)sub_33AD8, a1, 0, 0);
        }
        else {
          timer_cancel(*((void *)v9 + 1));
        }
        return 0;
      }
      goto LABEL_22;
    case 9:
      if (!v7) {
        return 6;
      }
      int v14 = *(_DWORD *)a3;
      if (v14 == sub_1E4F8(a1))
      {
        long long v15 = (unsigned __int8 *)*((void *)a3 + 1);
        snprintf(__str, 0x80uLL, "%d.%d.%d.%d in use by %02x:%02x:%02x:%02x:%02x:%02x", *a3, a3[1], a3[2], a3[3], *v15, v15[1], v15[2], v15[3], v15[4], v15[5]);
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v16 = _os_log_pack_size();
          __chkstk_darwin(v16);
          __error();
          uint64_t v17 = _os_log_pack_fill();
          uint64_t v18 = nullsub_1(v6);
          *(_DWORD *)uint64_t v17 = 136315394;
          *(void *)(v17 + 4) = v18;
          *(_WORD *)(v17 + 12) = 2080;
          *(void *)(v17 + 14) = __str;
          __SC_log_send();
        }
        sub_1DB14(a1);
        sub_9028(a1, 8u);
LABEL_22:
        sub_335E4(a1, 0, 0);
      }
      return 0;
    default:
      return v8;
  }
}

void sub_335E4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_8B80(a1);
  uint64_t v7 = sub_557C(a1);
  uint64_t v8 = v7;
  if (a2 == 6)
  {
    if (*(_DWORD *)(a3 + 8))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v19 = _os_log_pack_size();
        __chkstk_darwin(v19);
        __error();
        uint64_t v20 = _os_log_pack_fill();
        uint64_t v21 = nullsub_1(v6);
        uint64_t v22 = sub_E73C(*(void *)v8);
        *(_DWORD *)uint64_t v20 = 136315394;
        *(void *)(v20 + 4) = v21;
        *(_WORD *)(v20 + 12) = 2080;
        *(void *)(v20 + 14) = v22;
        __SC_log_send();
      }
    }
    else if (*(_DWORD *)(a3 + 12))
    {
      unsigned int v23 = sub_1E4F8(a1);
      snprintf(__str, 0x80uLL, "%d.%d.%d.%d in use by %02x:%02x:%02x:%02x:%02x:%02x", v23, BYTE1(v23), BYTE2(v23), HIBYTE(v23), *(unsigned __int8 *)(a3 + 24), *(unsigned __int8 *)(a3 + 25), *(unsigned __int8 *)(a3 + 26), *(unsigned __int8 *)(a3 + 27), *(unsigned __int8 *)(a3 + 28), *(unsigned __int8 *)(a3 + 29));
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v24 = _os_log_pack_size();
        __chkstk_darwin(v24);
        __error();
        uint64_t v25 = _os_log_pack_fill();
        uint64_t v26 = nullsub_1(v6);
        *(_DWORD *)uint64_t v25 = 136315394;
        *(void *)(v25 + 4) = v26;
        *(_WORD *)(v25 + 12) = 2080;
        *(void *)(v25 + 14) = __str;
        __SC_log_send();
      }
      sub_1DB14(a1);
      sub_9028(a1, 8u);
      timer_set_relative(*(void *)(v8 + 8), 10, 0, (uint64_t)sub_335E4, a1, 0, 0);
    }
    else
    {
      if (sub_9030(a1) != 1)
      {
        unsigned int v27 = sub_1E4F8(a1);
        unsigned int v28 = sub_1E520(a1);
        sub_1D47C(a1, v27, v28, 0);
        sub_61FC(a1, 0);
        *(unsigned char *)(v8 + 20) = 1;
        uint64_t v13 = *(unsigned int *)(v8 + 16);
        if (!v13) {
          return;
        }
        uint64_t v11 = *(void *)(v8 + 8);
        int v14 = sub_33AD8;
        int v12 = 0;
        uint64_t v15 = a1;
        uint64_t v16 = 0;
        goto LABEL_5;
      }
      sub_33C14(a1);
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (a2) {
        return;
      }
      *(unsigned char *)(v7 + 20) = 0;
      sub_2DD0C(a1);
      uint64_t v9 = sub_9054(0, 4);
      int v10 = sub_9054(0, 999999);
      uint64_t v11 = *(void *)(v8 + 8);
      int v12 = v10;
      uint64_t v13 = v9;
      int v14 = (uint64_t (*)(uint64_t))sub_335E4;
      uint64_t v15 = a1;
      uint64_t v16 = 2;
LABEL_5:
      timer_set_relative(v11, v13, v12, (uint64_t)v14, v15, v16, 0);
      return;
    }
    uint64_t v17 = *(void *)v7;
    int v18 = sub_1E4F8(a1);
    sub_E17C(v17, (uint64_t)sub_335E4, a1, 6, 0, v18);
  }
}

uint64_t sub_33AD8(uint64_t a1)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    uint64_t v4 = sub_8B80(a1);
    uint64_t v5 = nullsub_1(v4);
    *(_DWORD *)uint64_t v3 = 136315138;
    *(void *)(v3 + 4) = v5;
    __SC_log_send();
  }
  sub_2DD0C(a1);
  sub_1DB14(a1);
  return sub_9028(a1, 0x10u);
}

uint64_t sub_33C14(uint64_t a1)
{
  sub_2DD0C(a1);
  sub_1DB14(a1);

  return sub_9028(a1, 0xCu);
}

uint64_t DHCPLeaseSetNAK(uint64_t result, int a2)
{
  *(unsigned char *)(result + 1) = a2 != 0;
  return result;
}

void *DHCPLeaseListInit(void *a1)
{
  return sub_57BE0(a1, (uint64_t)sub_33C80, 0);
}

void sub_33C80(const void **a1)
{
  sub_6DB0(a1 + 6);
  sub_6DB0(a1 + 7);

  free(a1);
}

void DHCPLeaseListRead(uint64_t *a1, const char *a2, int a3, int a4, const void *a5, int a6)
{
  sub_57BE0(a1, (uint64_t)sub_33C80, 0);
  snprintf(__str, 0x400uLL, "/var/db/dhcpclient/leases/%s.plist", a2);
  CFPropertyListRef v12 = sub_537BC(__str);
  uint64_t v38 = v12;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (v12)
  {
    if (CFGetTypeID(v12) == TypeID)
    {
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v12, @"ClientIdentifier");
      if (a6)
      {
        CFDataRef v15 = Value;
        CFTypeID v16 = CFDataGetTypeID();
        if (v15)
        {
          if (CFGetTypeID(v15) == v16 && CFDataGetLength(v15) == a6 + 1)
          {
            unsigned int v41 = 0;
            v40[0] = 0;
            v40[1] = 0;
            uint64_t v39 = 0;
            BytePtr = CFDataGetBytePtr(v15);
            if (*BytePtr == a4)
            {
              int v18 = BytePtr + 1;
              int v19 = bcmp(BytePtr + 1, a5, a6);
              if (!v19 || a4 == 1 && a6 == 6 && (*v18 & 2) != 0 && a3)
              {
                CFDateRef v20 = (const __CFDate *)CFDictionaryGetValue((CFDictionaryRef)v12, @"LeaseStartDate");
                CFTypeID v21 = CFDateGetTypeID();
                if (v20)
                {
                  if (CFGetTypeID(v20) == v21)
                  {
                    CFDataRef v22 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v12, @"PacketData");
                    CFTypeID v23 = CFDataGetTypeID();
                    if (v22)
                    {
                      if (CFGetTypeID(v22) == v23)
                      {
                        if (a3)
                        {
                          uint64_t v24 = CFDictionaryGetValue((CFDictionaryRef)v12, @"SSID");
                          CFTypeID v25 = CFStringGetTypeID();
                          if (!v24) {
                            goto LABEL_43;
                          }
                          if (CFGetTypeID(v24) != v25) {
                            goto LABEL_43;
                          }
                          uint64_t v26 = CFDictionaryGetValue((CFDictionaryRef)v12, @"NetworkID");
                          if (v26)
                          {
                            CFTypeID v27 = CFStringGetTypeID();
                            if (CFGetTypeID(v26) != v27) {
                              goto LABEL_43;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v26 = 0;
                          uint64_t v24 = 0;
                        }
                        unint64_t Length = CFDataGetLength(v22);
                        if (Length >= 0xEC)
                        {
                          CFIndex v29 = Length;
                          CFTypeRef v37 = v26;
                          uint64_t v30 = malloc_type_malloc(Length + 68, 0xB17B06CCuLL);
                          *(_OWORD *)uint64_t v30 = 0u;
                          *((_OWORD *)v30 + 1) = 0u;
                          *((_OWORD *)v30 + 2) = 0u;
                          *((_OWORD *)v30 + 3) = 0u;
                          *((_DWORD *)v30 + 16) = 0;
                          v43.location = 0;
                          v43.length = v29;
                          CFDataGetBytes(v22, v43, (UInt8 *)v30 + 68);
                          *((_DWORD *)v30 + 16) = v29;
                          *((CFAbsoluteTime *)v30 + 1) = CFDateGetAbsoluteTime(v20);
                          sub_54D30(v40, (uint64_t)v30 + 68, v29, 0);
                          dhcp_get_lease_from_options((uint64_t)v40, &v41, (unsigned int *)&v39 + 1, (unsigned int *)&v39);
                          *((_DWORD *)v30 + 4) = v41;
                          int v31 = *((_DWORD *)v30 + 21);
                          *((_DWORD *)v30 + 1) = v31;
                          if (sub_1695C((uint64_t)v40, v31, (_DWORD *)v30 + 5))
                          {
                            CFDataRef v32 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v12, @"RouterHardwareAddress");
                            CFTypeID v33 = CFDataGetTypeID();
                            if (v32)
                            {
                              if (CFGetTypeID(v32) == v33)
                              {
                                uint64_t v34 = CFDataGetLength(v32);
                                if (v34 >= 1)
                                {
                                  if ((unint64_t)v34 >= 0x10) {
                                    v35.length = 16;
                                  }
                                  else {
                                    v35.length = v34;
                                  }
                                  *((unsigned char *)v30 + 40) = v35.length;
                                  v35.location = 0;
                                  CFDataGetBytes(v32, v35, (UInt8 *)v30 + 24);
                                }
                              }
                            }
                          }
                          sub_54A34((uint64_t)v40);
                          if (v24)
                          {
                            CFRetain(v24);
                            *((void *)v30 + 6) = v24;
                          }
                          if (v37)
                          {
                            CFRetain(v37);
                            *((void *)v30 + 7) = v37;
                          }
                          if (v19)
                          {
                            v44.location = 1;
                            v44.length = 6;
                            CFDataGetBytes(v15, v44, (UInt8 *)v30 + 41);
                            *((unsigned char *)v30 + 47) = 1;
                          }
                          *(unsigned char *)uint64_t v30 = 1;
                          sub_57C7C(a1, v30);
                          if (G_IPConfiguration_verbose) {
                            sub_340D0((uint64_t)a1);
                          }
                          int v36 = *((_DWORD *)v30 + 1);
                          sub_CA80(a1);
                          if (!sub_5B24(a1)) {
                            remove_unused_ip(a2, v36);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_43:
  sub_6DB0(&v38);
}

void sub_340D0(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  int v3 = sub_5B24(a1);
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = sub_5B4C(a1, v4);
      uint64_t v4 = (v4 + 1);
      CFStringAppendFormat(Mutable, 0, @"\n%d. ", v4);
      CFStringAppendFormat(Mutable, 0, @"IP %d.%d.%d.%d Start %d Length", *(unsigned __int8 *)(v5 + 4), *(unsigned __int8 *)(v5 + 5), *(unsigned __int8 *)(v5 + 6), *(unsigned __int8 *)(v5 + 7), (int)*(double *)(v5 + 8));
      if (*(_DWORD *)(v5 + 16) == -1) {
        CFStringAppendFormat(Mutable, 0, @" infinite");
      }
      else {
        CFStringAppendFormat(Mutable, 0, @" %d", *(unsigned int *)(v5 + 16));
      }
      if (*(_DWORD *)(v5 + 20))
      {
        CFStringAppendFormat(Mutable, 0, @" Router IP %d.%d.%d.%d", *(_DWORD *)(v5 + 20), BYTE1(*(_DWORD *)(v5 + 20)), BYTE2(*(_DWORD *)(v5 + 20)), HIBYTE(*(_DWORD *)(v5 + 20)));
        if (*(unsigned char *)(v5 + 40))
        {
          sub_5997C(__str, 48, (unsigned __int8 *)(v5 + 24), *(unsigned __int8 *)(v5 + 40));
          CFStringAppendFormat(Mutable, 0, @" MAC %s", __str);
        }
      }
      if (*(void *)(v5 + 48))
      {
        CFStringAppendFormat(Mutable, 0, @" SSID '%@'", *(void *)(v5 + 48));
        if (*(void *)(v5 + 56)) {
          CFStringAppendFormat(Mutable, 0, @" NetworkID '%@'", *(void *)(v5 + 56));
        }
      }
    }
    while (v3 != v4);
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v6 = _os_log_pack_size();
    __chkstk_darwin(v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v7 = 67109378;
    *(_DWORD *)(v7 + 4) = v3;
    *(_WORD *)(v7 + 8) = 2112;
    *(void *)(v7 + 10) = Mutable;
    __SC_log_send();
  }
  CFRelease(Mutable);
}

void DHCPLeaseListWrite(uint64_t *a1, const char *a2, char a3, const UInt8 *a4, int a5)
{
  snprintf((char *)v26, 0x400uLL, "/var/db/dhcpclient/leases/%s.plist", a2);
  sub_CA80(a1);
  int v9 = sub_5B24(a1);
  if (v9)
  {
    uint64_t v10 = sub_5B4C(a1, (v9 - 1));
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    LOBYTE(v25) = a3;
    CFPropertyListRef v12 = CFDataCreateMutable(0, a5 + 1);
    CFDataAppendBytes(v12, (const UInt8 *)&v25, 1);
    CFDataAppendBytes(v12, a4, a5);
    CFDictionarySetValue(Mutable, @"ClientIdentifier", v12);
    CFRelease(v12);
    CFStringRef v13 = CFStringCreateWithFormat(0, 0, @"%d.%d.%d.%d", *(unsigned __int8 *)(v10 + 4), *(unsigned __int8 *)(v10 + 5), *(unsigned __int8 *)(v10 + 6), *(unsigned __int8 *)(v10 + 7), v25);
    CFDictionarySetValue(Mutable, @"IPAddress", v13);
    CFRelease(v13);
    CFDateRef v14 = CFDateCreate(0, *(CFAbsoluteTime *)(v10 + 8));
    CFDictionarySetValue(Mutable, @"LeaseStartDate", v14);
    CFRelease(v14);
    CFNumberRef v15 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(v10 + 16));
    CFDictionarySetValue(Mutable, @"LeaseLength", v15);
    CFRelease(v15);
    CFTypeID v16 = *(const void **)(v10 + 48);
    if (v16)
    {
      CFDictionarySetValue(Mutable, @"SSID", v16);
      uint64_t v17 = *(const void **)(v10 + 56);
      if (v17) {
        CFDictionarySetValue(Mutable, @"NetworkID", v17);
      }
    }
    CFDataRef v18 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)(v10 + 68), *(int *)(v10 + 64), kCFAllocatorNull);
    CFDictionarySetValue(Mutable, @"PacketData", v18);
    CFRelease(v18);
    if (*(_DWORD *)(v10 + 20))
    {
      CFStringRef v19 = CFStringCreateWithFormat(0, 0, @"%d.%d.%d.%d", *(_DWORD *)(v10 + 20), BYTE1(*(_DWORD *)(v10 + 20)), BYTE2(*(_DWORD *)(v10 + 20)), HIBYTE(*(_DWORD *)(v10 + 20)));
      CFDictionarySetValue(Mutable, @"RouterIPAddress", v19);
      CFRelease(v19);
      if (*(unsigned char *)(v10 + 40))
      {
        CFDataRef v20 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)(v10 + 24), *(unsigned __int8 *)(v10 + 40), kCFAllocatorNull);
        CFDictionarySetValue(Mutable, @"RouterHardwareAddress", v20);
        CFRelease(v20);
      }
    }
    CFTypeID v25 = Mutable;
    if ((sub_538BC(Mutable, v26, 0x1A4u) & 0x80000000) != 0 && *__error() != 2)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v21 = _os_log_pack_size();
        __chkstk_darwin(v21);
        __error();
        uint64_t v22 = _os_log_pack_fill();
        CFTypeID v23 = __error();
        uint64_t v24 = strerror(*v23);
        *(_DWORD *)uint64_t v22 = 136315394;
        *(void *)(v22 + 4) = v26;
        *(_WORD *)(v22 + 12) = 2080;
        *(void *)(v22 + 14) = v24;
        __SC_log_send();
      }
    }
    sub_6DB0((const void **)&v25);
  }
  else
  {
    unlink((const char *)v26);
  }
}

uint64_t DHCPLeaseListFindLease(uint64_t a1, unsigned int a2, int a3, const void *a4, unsigned int a5)
{
  unsigned int v10 = bswap32(a2);
  BOOL v11 = HIBYTE(v10) == 10 || v10 >> 20 == 2753;
  unsigned int v12 = HIWORD(v10);
  int v14 = v11 || v12 == 49320;
  int v15 = sub_5B24(a1);
  if (v15 < 1) {
    return 0xFFFFFFFFLL;
  }
  int v16 = v15;
  uint64_t v17 = 0;
  if (a4) {
    BOOL v18 = a5 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  char v19 = v18;
  while (1)
  {
    uint64_t v20 = sub_5B4C(a1, v17);
    if (*(_DWORD *)(v20 + 4) == a2
      && (!v14
       || *(_DWORD *)(v20 + 20) == a3
       && (!a3 || *(unsigned __int8 *)(v20 + 40) == a5 && ((v19 & 1) != 0 || !bcmp((const void *)(v20 + 24), a4, a5)))))
    {
      break;
    }
    uint64_t v17 = (v17 + 1);
    if (v16 == v17) {
      return 0xFFFFFFFFLL;
    }
  }
  return v17;
}

uint64_t DHCPLeaseListFindLeaseForWiFi(uint64_t a1, const void *a2, const void *a3)
{
  int v6 = sub_5B24(a1);
  if (v6 >= 1)
  {
    LODWORD(v7) = v6;
    for (unsigned int i = v6 + 1; i > 1; --i)
    {
      uint64_t v7 = (v7 - 1);
      uint64_t v9 = sub_5B4C(a1, i - 2);
      unsigned int v10 = *(const void **)(v9 + 48);
      if (v10)
      {
        if (CFEqual(v10, a2)) {
          return i - 2;
        }
        if (sub_543B8(a3, *(const void **)(v9 + 56))) {
          return v7;
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t DHCPLeaseListRemoveLeaseForWiFi(uint64_t *a1, const void *a2, const void *a3)
{
  uint64_t result = DHCPLeaseListFindLeaseForWiFi((uint64_t)a1, a2, a3);
  if (result != -1)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t v7 = (unsigned __int8 *)sub_5B4C(a1, v6);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v8 = _os_log_pack_size();
        __chkstk_darwin(v8);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        int v10 = v7[4];
        int v11 = v7[5];
        int v12 = v7[6];
        int v13 = v7[7];
        int v14 = v7[20];
        int v15 = v7[21];
        int v16 = v7[22];
        int v17 = v7[23];
        *(_DWORD *)uint64_t v9 = 138414338;
        *(void *)(v9 + 4) = a2;
        *(_WORD *)(v9 + 12) = 1024;
        *(_DWORD *)(v9 + 14) = v10;
        *(_WORD *)(v9 + 18) = 1024;
        *(_DWORD *)(v9 + 20) = v11;
        *(_WORD *)(v9 + 24) = 1024;
        *(_DWORD *)(v9 + 26) = v12;
        *(_WORD *)(v9 + 30) = 1024;
        *(_DWORD *)(v9 + 32) = v13;
        *(_WORD *)(v9 + 36) = 1024;
        *(_DWORD *)(v9 + 38) = v14;
        *(_WORD *)(v9 + 42) = 1024;
        *(_DWORD *)(v9 + 44) = v15;
        *(_WORD *)(v9 + 48) = 1024;
        *(_DWORD *)(v9 + 50) = v16;
        *(_WORD *)(v9 + 54) = 1024;
        *(_DWORD *)(v9 + 56) = v17;
        __SC_log_send();
      }
      sub_57C84(a1, v6);
      uint64_t result = DHCPLeaseListFindLeaseForWiFi((uint64_t)a1, a2, a3);
      uint64_t v6 = result;
    }
    while (result != -1);
  }
  return result;
}

void DHCPLeaseListUpdateLease(uint64_t *a1, unsigned int a2, int a3, const void *a4, unsigned int a5, int a6, const void *a7, int a8, double a9, const void *a10, const void *a11)
{
  unsigned int v18 = bswap32(a2);
  BOOL v19 = HIBYTE(v18) == 10 || v18 >> 20 == 2753;
  unsigned int v20 = HIWORD(v18);
  int v22 = v19 || v20 == 49320;
  CFTypeID v23 = malloc_type_malloc(a8 + 68, 0x5B535797uLL);
  *CFTypeID v23 = 0u;
  v23[1] = 0u;
  void v23[2] = 0u;
  v23[3] = 0u;
  *((_DWORD *)v23 + 16) = 0;
  *((_DWORD *)v23 + 1) = a2;
  *((double *)v23 + 1) = a9;
  *((_DWORD *)v23 + 4) = a6;
  *((_DWORD *)v23 + 5) = a3;
  memmove((char *)v23 + 68, a7, a8);
  *((_DWORD *)v23 + 16) = a8;
  if (a4 && a5)
  {
    if (a5 >= 0x10) {
      size_t v24 = 16;
    }
    else {
      size_t v24 = a5;
    }
    *((unsigned char *)v23 + 40) = v24;
    memmove((char *)v23 + 24, a4, v24);
  }
  if (a10)
  {
    CFRetain(a10);
    *((void *)v23 + 6) = a10;
    if (a11)
    {
      CFRetain(a11);
      *((void *)v23 + 7) = a11;
    }
  }
  int v25 = sub_5B24(a1);
  if (v25 >= 1)
  {
    int v26 = v25;
    uint64_t v27 = 0;
    do
    {
      uint64_t v28 = sub_5B4C(a1, v27);
      if (sub_34DC4(v28, (uint64_t)v23, v22))
      {
        sub_57C84(a1, v27);
        LODWORD(v27) = v27 - 1;
        --v26;
      }
      uint64_t v27 = (v27 + 1);
    }
    while ((int)v27 < v26);
  }
  sub_57C7C(a1, v23);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v29 = _os_log_pack_size();
    __chkstk_darwin(v29);
    __error();
    uint64_t v30 = _os_log_pack_fill();
    int v31 = *((unsigned __int8 *)v23 + 4);
    int v32 = *((unsigned __int8 *)v23 + 5);
    int v33 = *((unsigned __int8 *)v23 + 6);
    int v34 = *((unsigned __int8 *)v23 + 7);
    *(_DWORD *)uint64_t v30 = 67109888;
    *(_DWORD *)(v30 + 4) = v31;
    *(_WORD *)(v30 + 8) = 1024;
    *(_DWORD *)(v30 + 10) = v32;
    *(_WORD *)(v30 + 14) = 1024;
    *(_DWORD *)(v30 + 16) = v33;
    *(_WORD *)(v30 + 20) = 1024;
    *(_DWORD *)(v30 + 22) = v34;
    __SC_log_send();
  }
  if (G_IPConfiguration_verbose) {
    sub_340D0((uint64_t)a1);
  }
}

uint64_t sub_34DC4(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(_DWORD *)(a1 + 20) || (size_t v5 = *(unsigned __int8 *)(a1 + 40), !*(unsigned char *)(a1 + 40)))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return 1;
    }
LABEL_23:
    uint64_t v18 = _os_log_pack_size();
    __chkstk_darwin(v18);
    __error();
    uint64_t v19 = _os_log_pack_fill();
    int v20 = *(unsigned __int8 *)(a1 + 4);
    int v21 = *(unsigned __int8 *)(a1 + 5);
    int v22 = *(unsigned __int8 *)(a1 + 6);
    int v23 = *(unsigned __int8 *)(a1 + 7);
    *(_DWORD *)uint64_t v19 = 67109888;
    *(_DWORD *)(v19 + 4) = v20;
    *(_WORD *)(v19 + 8) = 1024;
    *(_DWORD *)(v19 + 10) = v21;
    *(_WORD *)(v19 + 14) = 1024;
    *(_DWORD *)(v19 + 16) = v22;
    *(_WORD *)(v19 + 20) = 1024;
    *(_DWORD *)(v19 + 22) = v23;
LABEL_24:
    __SC_log_send();
    return 1;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    *(unsigned char *)(a1 + 1) = 0;
    unsigned int v7 = bswap32(*(_DWORD *)(a1 + 4));
    BOOL v8 = HIBYTE(v7) == 10 || v7 >> 20 == 2753;
    unsigned int v9 = HIWORD(v7);
    int v11 = v8 || v9 == 49320;
    if (v11 == a3 && (!*(unsigned char *)(a2 + 40) || !bcmp((const void *)(a1 + 24), (const void *)(a2 + 24), v5)))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        return 1;
      }
      goto LABEL_23;
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      int v14 = *(unsigned __int8 *)(a1 + 4);
      int v15 = *(unsigned __int8 *)(a1 + 5);
      int v16 = *(unsigned __int8 *)(a1 + 6);
      int v17 = *(unsigned __int8 *)(a1 + 7);
      *(_DWORD *)uint64_t v13 = 67109888;
      *(_DWORD *)(v13 + 4) = v14;
      *(_WORD *)(v13 + 8) = 1024;
      *(_DWORD *)(v13 + 10) = v15;
      *(_WORD *)(v13 + 14) = 1024;
      *(_DWORD *)(v13 + 16) = v16;
      *(_WORD *)(v13 + 20) = 1024;
      *(_DWORD *)(v13 + 22) = v17;
      __SC_log_send();
    }
  }
  if (!a3 && *(_DWORD *)(a2 + 4) == *(_DWORD *)(a1 + 4))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled()) {
      goto LABEL_23;
    }
    return 1;
  }
  int v25 = *(_DWORD *)(a2 + 20);
  if (v25
    && *(unsigned char *)(a2 + 40)
    && v25 == *(_DWORD *)(a1 + 20)
    && !bcmp((const void *)(a2 + 24), (const void *)(a1 + 24), *(unsigned __int8 *)(a2 + 40)))
  {
    int v26 = *(_DWORD *)(a2 + 4);
    int v27 = *(_DWORD *)(a1 + 4);
    sub_4220();
    _SC_syslog_os_log_mapping();
    int v28 = __SC_log_enabled();
    if (v26 != v27)
    {
      if (!v28) {
        return 1;
      }
      uint64_t v29 = _os_log_pack_size();
      __chkstk_darwin(v29);
      __error();
      uint64_t v30 = _os_log_pack_fill();
      sub_3547C(v30, *(unsigned __int8 *)(a1 + 4), *(unsigned __int8 *)(a1 + 5), *(unsigned __int8 *)(a1 + 6), *(unsigned __int8 *)(a1 + 7), *(unsigned __int8 *)(a2 + 4), *(unsigned __int8 *)(a2 + 5), *(unsigned __int8 *)(a2 + 6), *(unsigned __int8 *)(a2 + 7));
      goto LABEL_24;
    }
    if (!v28) {
      return 1;
    }
    goto LABEL_23;
  }
  return 0;
}

uint64_t DHCPLeaseListRemoveLease(uint64_t *a1, unsigned int a2, int a3, const void *a4, unsigned int a5)
{
  uint64_t result = DHCPLeaseListFindLease((uint64_t)a1, a2, a3, a4, a5);
  if (result != -1)
  {
    unsigned int v7 = result;
    BOOL v8 = (unsigned __int8 *)sub_5B4C(a1, result);
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      int v11 = v8[4];
      int v12 = v8[5];
      int v13 = v8[6];
      int v14 = v8[7];
      *(_DWORD *)uint64_t v10 = 67109888;
      *(_DWORD *)(v10 + 4) = v11;
      *(_WORD *)(v10 + 8) = 1024;
      *(_DWORD *)(v10 + 10) = v12;
      *(_WORD *)(v10 + 14) = 1024;
      *(_DWORD *)(v10 + 16) = v13;
      *(_WORD *)(v10 + 20) = 1024;
      *(_DWORD *)(v10 + 22) = v14;
      __SC_log_send();
    }
    return sub_57C84(a1, v7);
  }
  return result;
}

double sub_3547C(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  *(void *)&double result = 67110912;
  *(_DWORD *)a1 = 67110912;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 14) = 1024;
  *(_DWORD *)(a1 + 16) = a4;
  *(_WORD *)(a1 + 20) = 1024;
  *(_DWORD *)(a1 + 22) = a5;
  *(_WORD *)(a1 + 26) = 1024;
  *(_DWORD *)(a1 + 28) = a6;
  *(_WORD *)(a1 + 32) = 1024;
  *(_DWORD *)(a1 + 34) = a7;
  *(_WORD *)(a1 + 38) = 1024;
  *(_DWORD *)(a1 + 40) = a8;
  *(_WORD *)(a1 + 44) = 1024;
  *(_DWORD *)(a1 + 46) = a9;
  return result;
}

uint64_t sub_354D0()
{
  return socket(2, 2, 0);
}

uint64_t sub_354E0(int a1, uint64_t a2, void *a3)
{
  uint64_t result = sub_35504(a1, a2, a3);
  if (result) {
    return *__error();
  }
  return result;
}

uint64_t sub_35504(int a1, uint64_t a2, void *a3)
{
  long long v16 = 0u;
  long long v17 = 0u;
  __strlcpy_chk();
  uint64_t v6 = ioctl(a1, 0xC020698EuLL, &v16);
  if (v6)
  {
    unsigned int v7 = __error();
    uint64_t v8 = 0;
    int v9 = *v7;
    BOOL v10 = *v7 == 6 || v9 == 22;
    if (!v10 && v9 != 82)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v11 = _os_log_pack_size();
        __chkstk_darwin(v11);
        __error();
        uint64_t v12 = _os_log_pack_fill();
        int v13 = __error();
        int v14 = strerror(*v13);
        *(_DWORD *)uint64_t v12 = 136315394;
        *(void *)(v12 + 4) = a2;
        *(_WORD *)(v12 + 12) = 2080;
        *(void *)(v12 + 14) = v14;
        __SC_log_send();
      }
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = v17;
  }
  *a3 = v8;
  return v6;
}

uint64_t sub_356B0(const char *a1, int a2)
{
  int v4 = socket(2, 2, 0);
  if (v4 < 0) {
    return *__error();
  }
  int v5 = v4;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  strncpy(__dst, a1, 0x10uLL);
  LODWORD(v12) = a2;
  if (ioctl(v5, 0x80206934uLL, __dst) < 0)
  {
    uint64_t v6 = *__error();
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      int v9 = strerror(v6);
      *(_DWORD *)uint64_t v8 = 136315906;
      *(void *)(v8 + 4) = a1;
      *(_WORD *)(v8 + 12) = 1024;
      *(_DWORD *)(v8 + 14) = a2;
      *(_WORD *)(v8 + 18) = 2080;
      *(void *)(v8 + 20) = v9;
      *(_WORD *)(v8 + 28) = 1024;
      *(_DWORD *)(v8 + 30) = v6;
      __SC_log_send();
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  close(v5);
  return v6;
}

uint64_t sub_35878(const char *a1, int a2)
{
  int v4 = socket(2, 2, 0);
  if (v4 < 0) {
    return *__error();
  }
  int v5 = v4;
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v6 = _os_log_pack_size();
    __chkstk_darwin(v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    uint64_t v8 = "UP";
    *(void *)(v7 + 4) = "interface_up_down";
    *(_DWORD *)uint64_t v7 = 136315650;
    if (!a2) {
      uint64_t v8 = "DOWN";
    }
    *(_WORD *)(v7 + 12) = 2080;
    *(void *)(v7 + 14) = a1;
    *(_WORD *)(v7 + 22) = 2080;
    *(void *)(v7 + 24) = v8;
    __SC_log_send();
  }
  uint64_t v9 = sub_35A14(v5, a1, a2 != 0, a2 == 0);
  close(v5);
  return v9;
}

uint64_t sub_35A14(int a1, const char *a2, int a3, int a4)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  strncpy(__dst, a2, 0x10uLL);
  uint64_t v8 = ioctl(a1, 0xC0206911uLL, __dst);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  int v9 = (unsigned __int16)v17;
  int v10 = ((unsigned __int16)v17 | a3) & (a4 ^ 0xFFFF);
  LOWORD(v17) = (v17 | a3) & ~(_WORD)a4;
  if (v9 == v10) {
    return 0;
  }
  uint64_t v11 = ioctl(a1, 0x80206910uLL, __dst);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v12 = _os_log_pack_size();
    uint64_t v15 = (uint64_t)&v15;
    __chkstk_darwin(v12);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v13 = 136316162;
    *(void *)(v13 + 4) = a2;
    *(_WORD *)(v13 + 12) = 1024;
    *(_DWORD *)(v13 + 14) = a3;
    *(_WORD *)(v13 + 18) = 1024;
    *(_DWORD *)(v13 + 20) = a4;
    *(_WORD *)(v13 + 24) = 1024;
    *(_DWORD *)(v13 + 26) = v9;
    *(_WORD *)(v13 + 30) = 1024;
    *(_DWORD *)(v13 + 32) = v10;
    __SC_log_send();
  }
  return v11;
}

uint64_t sub_35BEC(const char *a1, int a2)
{
  int v4 = socket(2, 2, 0);
  if (v4 < 0) {
    return *__error();
  }
  int v5 = v4;
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v6 = _os_log_pack_size();
    __chkstk_darwin(v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    uint64_t v8 = "set";
    *(void *)(v7 + 4) = "interface_set_noarp";
    *(_DWORD *)uint64_t v7 = 136315650;
    if (!a2) {
      uint64_t v8 = "clear";
    }
    *(_WORD *)(v7 + 12) = 2080;
    *(void *)(v7 + 14) = a1;
    *(_WORD *)(v7 + 22) = 2080;
    *(void *)(v7 + 24) = v8;
    __SC_log_send();
  }
  uint64_t v9 = sub_35A14(v5, a1, (a2 != 0) << 7, (a2 == 0) << 7);
  close(v5);
  return v9;
}

uint64_t sub_35D90(const char *a1, int a2)
{
  int v4 = socket(2, 2, 0);
  if (v4 < 0) {
    return *__error();
  }
  int v5 = v4;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  strncpy(__dst, a1, 0x10uLL);
  if (ioctl(v5, 0xC0206950uLL, __dst) < 0)
  {
    uint64_t v6 = *__error();
    if (v6 != 6 && v6 != 17)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v8 = _os_log_pack_size();
        __chkstk_darwin(v8);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        int v10 = __error();
        uint64_t v11 = strerror(*v10);
        int v12 = *__error();
        *(_DWORD *)uint64_t v9 = 136315650;
        *(void *)(v9 + 4) = a1;
        *(_WORD *)(v9 + 12) = 2080;
        *(void *)(v9 + 14) = v11;
        *(_WORD *)(v9 + 22) = 1024;
        *(_DWORD *)(v9 + 24) = v12;
        __SC_log_send();
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v13 = _os_log_pack_size();
    __chkstk_darwin(v13);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v14 = 136315138;
    *(void *)(v14 + 4) = a1;
    __SC_log_send();
  }
  if (a2) {
    sub_35A14(v5, a1, 1, 0);
  }
  close(v5);
  return v6;
}

uint64_t sub_3602C(const char *a1)
{
  int v2 = socket(2, 2, 0);
  if (v2 < 0) {
    return *__error();
  }
  int v3 = v2;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  strncpy(__dst, a1, 0x10uLL);
  if (ioctl(v3, 0xC0206951uLL, __dst) < 0)
  {
    uint64_t v4 = *__error();
    if (v4 != 6)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v5 = _os_log_pack_size();
        __chkstk_darwin(v5);
        __error();
        uint64_t v6 = _os_log_pack_fill();
        uint64_t v7 = __error();
        uint64_t v8 = strerror(*v7);
        int v9 = *__error();
        *(_DWORD *)uint64_t v6 = 136315650;
        *(void *)(v6 + 4) = a1;
        *(_WORD *)(v6 + 12) = 2080;
        *(void *)(v6 + 14) = v8;
        *(_WORD *)(v6 + 22) = 1024;
        *(_DWORD *)(v6 + 24) = v9;
        __SC_log_send();
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  close(v3);
  return v4;
}

uint64_t sub_361FC(const char *a1, int a2)
{
  int v4 = socket(2, 2, 0);
  if (v4 < 0)
  {
    uint64_t v6 = *__error();
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      int v9 = __error();
      int v10 = strerror(*v9);
      int v11 = *__error();
      *(_DWORD *)uint64_t v8 = 136315906;
      *(void *)(v8 + 4) = a1;
      *(_WORD *)(v8 + 12) = 1024;
      *(_DWORD *)(v8 + 14) = a2;
      *(_WORD *)(v8 + 18) = 2080;
      *(void *)(v8 + 20) = v10;
      *(_WORD *)(v8 + 28) = 1024;
      *(_DWORD *)(v8 + 30) = v11;
      __SC_log_send();
    }
  }
  else
  {
    int v5 = v4;
    uint64_t v20 = 0;
    strncpy(__dst, a1, 0x10uLL);
    uint64_t v19 = a2;
    if (ioctl(v5, 0xC0206926uLL, __dst) < 0)
    {
      uint64_t v6 = *__error();
      if (v6 != 6)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v12 = _os_log_pack_size();
          __chkstk_darwin(v12);
          __error();
          uint64_t v13 = _os_log_pack_fill();
          uint64_t v14 = __error();
          uint64_t v15 = strerror(*v14);
          int v16 = *__error();
          *(_DWORD *)uint64_t v13 = 136315906;
          *(void *)(v13 + 4) = a1;
          *(_WORD *)(v13 + 12) = 1024;
          *(_DWORD *)(v13 + 14) = a2;
          *(_WORD *)(v13 + 18) = 2080;
          *(void *)(v13 + 20) = v15;
          *(_WORD *)(v13 + 28) = 1024;
          *(_DWORD *)(v13 + 30) = v16;
          __SC_log_send();
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    close(v5);
  }
  return v6;
}

uint64_t sub_364C8(int a1, const char *a2, int a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  strncpy(__dst, a2, 0x10uLL);
  LOWORD(v7) = 528;
  HIDWORD(v7) = a3;
  return ioctl(a1, 0x80206919uLL, __dst);
}

uint64_t sub_3655C(int a1, const char *a2, int a3, int *a4, int *a5)
{
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  strncpy(__dst, a2, 0x10uLL);
  LOWORD(v13) = 528;
  DWORD1(v13) = a3;
  if (a4)
  {
    int v9 = *a4;
    LOWORD(v15) = 528;
    DWORD1(v15) = v9;
  }
  if (a5)
  {
    int v10 = *a5;
    LOWORD(v14) = 528;
    DWORD1(v14) = v10;
  }
  return ioctl(a1, 0x8040691AuLL, __dst);
}

uint64_t sub_36628()
{
  return socket(30, 2, 0);
}

uint64_t sub_36638(const char *a1, int a2)
{
  int v4 = socket(30, 2, 0);
  if (v4 < 0)
  {
    uint64_t v6 = *__error();
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      int v9 = strerror(v6);
      *(_DWORD *)uint64_t v8 = 136315650;
      *(void *)(v8 + 4) = a1;
      *(_WORD *)(v8 + 12) = 2080;
      *(void *)(v8 + 14) = v9;
      *(_WORD *)(v8 + 22) = 1024;
      *(_DWORD *)(v8 + 24) = v6;
      __SC_log_send();
    }
  }
  else
  {
    int v5 = v4;
    long long v26 = 0u;
    long long v25 = 0u;
    long long v24 = 0u;
    long long v23 = 0u;
    long long v22 = 0u;
    long long v21 = 0u;
    long long v20 = 0u;
    strncpy(__dst, a1, 0x10uLL);
    if (ioctl(v5, 0xC080696EuLL, __dst) < 0)
    {
      uint64_t v6 = *__error();
      if (v6 != 6 && v6 != 17)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v11 = _os_log_pack_size();
          __chkstk_darwin(v11);
          __error();
          uint64_t v12 = _os_log_pack_fill();
          long long v13 = __error();
          long long v14 = strerror(*v13);
          int v15 = *__error();
          *(_DWORD *)uint64_t v12 = 136315650;
          *(void *)(v12 + 4) = a1;
          *(_WORD *)(v12 + 12) = 2080;
          *(void *)(v12 + 14) = v14;
          *(_WORD *)(v12 + 22) = 1024;
          *(_DWORD *)(v12 + 24) = v15;
          __SC_log_send();
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v16 = _os_log_pack_size();
      __chkstk_darwin(v16);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v17 + 4) = a1;
      __SC_log_send();
    }
    if (a2) {
      sub_35A14(v5, a1, 1, 0);
    }
    close(v5);
  }
  return v6;
}

uint64_t sub_369C0(const char *a1)
{
  int v2 = socket(30, 2, 0);
  if (v2 < 0)
  {
    uint64_t v4 = *__error();
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      uint64_t v7 = strerror(v4);
      *(_DWORD *)uint64_t v6 = 136315650;
      *(void *)(v6 + 4) = a1;
      *(_WORD *)(v6 + 12) = 2080;
      *(void *)(v6 + 14) = v7;
      *(_WORD *)(v6 + 22) = 1024;
      *(_DWORD *)(v6 + 24) = v4;
LABEL_11:
      __SC_log_send();
    }
  }
  else
  {
    int v3 = v2;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    strncpy(v16, a1, 0x10uLL);
    if (ioctl(v3, 0xC120696FuLL, v16) < 0)
    {
      uint64_t v4 = *__error();
      if (v4 != 6)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v8 = _os_log_pack_size();
          __chkstk_darwin(v8);
          __error();
          uint64_t v9 = _os_log_pack_fill();
          int v10 = __error();
          uint64_t v11 = strerror(*v10);
          int v12 = *__error();
          *(_DWORD *)uint64_t v9 = 136315650;
          *(void *)(v9 + 4) = a1;
          *(_WORD *)(v9 + 12) = 2080;
          *(void *)(v9 + 14) = v11;
          *(_WORD *)(v9 + 22) = 1024;
          *(_DWORD *)(v9 + 24) = v12;
          __SC_log_send();
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    close(v3);
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = a1;
      goto LABEL_11;
    }
  }
  return v4;
}

uint64_t sub_36D20(uint64_t a1)
{
  unsigned int v7 = 0;
  uint32_t v1 = (int *)sub_3A32C(a1, &v7);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v7;
  if (v7)
  {
    int v3 = v1;
    while (1)
    {
      int v4 = *v3++;
      if (v4 == 30) {
        break;
      }
      if (!--v2) {
        goto LABEL_6;
      }
    }
    uint64_t v5 = 1;
  }
  else
  {
LABEL_6:
    uint64_t v5 = 0;
  }
  free(v1);
  return v5;
}

uint64_t sub_36D90(char *a1, _OWORD *a2, int a3, int a4, int a5, int a6)
{
  int v12 = socket(30, 2, 0);
  if (v12 < 0)
  {
    uint64_t v18 = *__error();
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v19 = _os_log_pack_size();
      __chkstk_darwin(v19);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      long long v21 = strerror(v18);
      *(_DWORD *)uint64_t v20 = 136315650;
      *(void *)(v20 + 4) = a1;
      *(_WORD *)(v20 + 12) = 2080;
      *(void *)(v20 + 14) = v21;
      *(_WORD *)(v20 + 22) = 1024;
      *(_DWORD *)(v20 + 24) = v18;
      __SC_log_send();
    }
  }
  else
  {
    int v13 = v12;
    if (a4) {
      int v14 = 136;
    }
    else {
      int v14 = 8;
    }
    int v15 = v14 | (a3 == 0);
    if (a5) {
      int v16 = (a3 != 0) | ((a4 == 0) << 7) | 0x200;
    }
    else {
      int v16 = (a3 != 0) | ((a4 == 0) << 7);
    }
    if (a5) {
      int v17 = v15;
    }
    else {
      int v17 = v15 | 0x200;
    }
    sub_37078(v12, a1, v16, v17);
    if ((sub_372A4(v13, a1, a2, a4, a6) & 0x80000000) != 0)
    {
      uint64_t v18 = *__error();
      if (*__error() != 6)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v22 = _os_log_pack_size();
          __chkstk_darwin(v22);
          __error();
          uint64_t v23 = _os_log_pack_fill();
          long long v24 = __error();
          long long v25 = strerror(*v24);
          int v26 = *__error();
          *(_DWORD *)uint64_t v23 = 136315650;
          *(void *)(v23 + 4) = a1;
          *(_WORD *)(v23 + 12) = 2080;
          *(void *)(v23 + 14) = v25;
          *(_WORD *)(v23 + 22) = 1024;
          *(_DWORD *)(v23 + 24) = v26;
          __SC_log_send();
        }
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    close(v13);
  }
  return v18;
}

uint64_t sub_37078(int a1, const char *a2, int a3, int a4)
{
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v14 = 0u;
  strncpy(__dst, a2, 0x10uLL);
  uint64_t result = ioctl(a1, 0xC030694CuLL, __dst);
  if (result)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
    goto LABEL_3;
  }
  if (((DWORD1(v15) | a3) & ~a4) != DWORD1(v15))
  {
    DWORD1(v15) = (DWORD1(v15) | a3) & ~a4;
    uint64_t result = ioctl(a1, 0xC0486957uLL, __dst);
    if (result)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
LABEL_3:
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9);
        __error();
        uint64_t v10 = _os_log_pack_fill();
        uint64_t v11 = __error();
        int v12 = strerror(*v11);
        *(_DWORD *)uint64_t v10 = 136315394;
        *(void *)(v10 + 4) = a2;
        *(_WORD *)(v10 + 12) = 2080;
        *(void *)(v10 + 14) = v12;
        return __SC_log_send();
      }
    }
  }
  return result;
}

uint64_t sub_372A4(int a1, char *a2, _OWORD *a3, int a4, int a5)
{
  if (!a3 && a4 && sub_2FFE8())
  {
    uint64_t v14 = 0;
    long long v13 = 0u;
    memset(&__dst[16], 0, 48);
    strncpy(__dst, a2, 0x10uLL);
    sub_2FE0C(a2, (uint64_t)&__dst[20]);
    *((void *)&v13 + 1) = -1;
    LOBYTE(v14) = a5;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v10 = 136315394;
      *(void *)(v10 + 4) = a2;
      *(_WORD *)(v10 + 12) = 1024;
      *(_DWORD *)(v10 + 14) = a5;
      __SC_log_send();
    }
    return ioctl(a1, 0x805869A0uLL, __dst);
  }
  else
  {
    return sub_3A790(a1, a2, a3);
  }
}

uint64_t sub_37494(const char *a1)
{
  int v2 = socket(30, 2, 0);
  if (v2 < 0)
  {
    uint64_t v4 = *__error();
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      unsigned int v7 = strerror(v4);
      *(_DWORD *)uint64_t v6 = 136315650;
      *(void *)(v6 + 4) = a1;
      *(_WORD *)(v6 + 12) = 2080;
      *(void *)(v6 + 14) = v7;
      *(_WORD *)(v6 + 22) = 1024;
      *(_DWORD *)(v6 + 24) = v4;
      __SC_log_send();
    }
  }
  else
  {
    int v3 = v2;
    if ((sub_37714(v2, a1) & 0x80000000) != 0)
    {
      uint64_t v4 = *__error();
      if (*__error() != 6)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v8 = _os_log_pack_size();
          __chkstk_darwin(v8);
          __error();
          uint64_t v9 = _os_log_pack_fill();
          uint64_t v10 = __error();
          uint64_t v11 = strerror(*v10);
          int v12 = *__error();
          *(_DWORD *)uint64_t v9 = 136315650;
          *(void *)(v9 + 4) = a1;
          *(_WORD *)(v9 + 12) = 2080;
          *(void *)(v9 + 14) = v11;
          *(_WORD *)(v9 + 22) = 1024;
          *(_DWORD *)(v9 + 24) = v12;
          __SC_log_send();
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    close(v3);
  }
  return v4;
}

uint64_t sub_37714(int a1, const char *a2)
{
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  long long v9 = 0u;
  long long v8 = 0u;
  strncpy(v7, a2, 0x10uLL);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 136315138;
    *(void *)(v5 + 4) = a2;
    __SC_log_send();
  }
  return ioctl(a1, 0xC1206983uLL, v7);
}

uint64_t sub_378B4(char *a1, int a2)
{
  int v4 = socket(30, 2, 0);
  if ((v4 & 0x80000000) == 0)
  {
    int v5 = v4;
    if (!a2) {
      goto LABEL_5;
    }
    if (!sub_2FFE8()) {
      goto LABEL_5;
    }
    *(void *)&long long v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    strncpy(v21, a1, 0x10uLL);
    sub_2FFE0(a1, (uint64_t)&v22 + 4);
    *((void *)&v25 + 1) = -1;
    if (ioctl(v5, 0xC05869BCuLL, v21) < 0)
    {
      uint64_t v6 = *__error();
      if (v6 == 6) {
        goto LABEL_15;
      }
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_15;
      }
      uint64_t v18 = _os_log_pack_size();
      __chkstk_darwin(v18);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      long long v20 = strerror(v6);
      *(_DWORD *)uint64_t v19 = 136315650;
      *(void *)(v19 + 4) = a1;
      *(_WORD *)(v19 + 12) = 2080;
      *(void *)(v19 + 14) = v20;
      *(_WORD *)(v19 + 22) = 1024;
      *(_DWORD *)(v19 + 24) = v6;
    }
    else
    {
LABEL_5:
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      strncpy(v21, a1, 0x10uLL);
      if (ioctl(v5, 0xC1206984uLL, v21) < 0)
      {
        uint64_t v6 = *__error();
        if (*__error() != 6)
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v10 = _os_log_pack_size();
            __chkstk_darwin(v10);
            __error();
            uint64_t v11 = _os_log_pack_fill();
            long long v12 = __error();
            long long v13 = strerror(*v12);
            int v14 = *__error();
            *(_DWORD *)uint64_t v11 = 136315650;
            *(void *)(v11 + 4) = a1;
            *(_WORD *)(v11 + 12) = 2080;
            *(void *)(v11 + 14) = v13;
            *(_WORD *)(v11 + 22) = 1024;
            *(_DWORD *)(v11 + 24) = v14;
            __SC_log_send();
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_15;
      }
      uint64_t v15 = _os_log_pack_size();
      __chkstk_darwin(v15);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 136315138;
      *(void *)(v16 + 4) = a1;
    }
    __SC_log_send();
LABEL_15:
    close(v5);
    return v6;
  }
  uint64_t v6 = *__error();
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    long long v9 = strerror(v6);
    *(_DWORD *)uint64_t v8 = 136315650;
    *(void *)(v8 + 4) = a1;
    *(_WORD *)(v8 + 12) = 2080;
    *(void *)(v8 + 14) = v9;
    *(_WORD *)(v8 + 22) = 1024;
    *(_DWORD *)(v8 + 24) = v6;
    __SC_log_send();
  }
  return v6;
}

uint64_t sub_37D64(const char *a1)
{
  int v2 = socket(30, 2, 0);
  if (v2 < 0)
  {
    uint64_t v4 = *__error();
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      uint64_t v7 = strerror(v4);
      *(_DWORD *)uint64_t v6 = 136315650;
      *(void *)(v6 + 4) = a1;
      *(_WORD *)(v6 + 12) = 2080;
      *(void *)(v6 + 14) = v7;
      *(_WORD *)(v6 + 22) = 1024;
      *(_DWORD *)(v6 + 24) = v4;
LABEL_11:
      __SC_log_send();
    }
  }
  else
  {
    int v3 = v2;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    strncpy(v16, a1, 0x10uLL);
    if (ioctl(v3, 0xC1206985uLL, v16) < 0)
    {
      uint64_t v4 = *__error();
      if (*__error() != 6)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v8 = _os_log_pack_size();
          __chkstk_darwin(v8);
          __error();
          uint64_t v9 = _os_log_pack_fill();
          uint64_t v10 = __error();
          uint64_t v11 = strerror(*v10);
          int v12 = *__error();
          *(_DWORD *)uint64_t v9 = 136315650;
          *(void *)(v9 + 4) = a1;
          *(_WORD *)(v9 + 12) = 2080;
          *(void *)(v9 + 14) = v11;
          *(_WORD *)(v9 + 22) = 1024;
          *(_DWORD *)(v9 + 24) = v12;
          __SC_log_send();
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    close(v3);
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = a1;
      goto LABEL_11;
    }
  }
  return v4;
}

uint64_t sub_380CC(const char *a1)
{
  int v2 = socket(30, 2, 0);
  if (v2 < 0)
  {
    int v7 = *__error();
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v8 = _os_log_pack_size();
      __chkstk_darwin(v8);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      uint64_t v10 = strerror(v7);
      *(_DWORD *)uint64_t v9 = 136315906;
      *(void *)(v9 + 4) = "inet6_has_nat64_prefixlist";
      *(_WORD *)(v9 + 12) = 2080;
      *(void *)(v9 + 14) = a1;
      *(_WORD *)(v9 + 22) = 2080;
      *(void *)(v9 + 24) = v10;
      *(_WORD *)(v9 + 32) = 1024;
      *(_DWORD *)(v9 + 34) = v7;
      __SC_log_send();
      return 0;
    }
  }
  else
  {
    int v3 = v2;
    long long v16 = 0u;
    long long v15 = 0u;
    long long v14 = 0u;
    long long v13 = 0u;
    long long v12 = 0u;
    strncpy(__dst, a1, 0x10uLL);
    int v4 = ioctl(v3, 0xC06069C1uLL, __dst);
    close(v3);
    if (v4) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v13 == 0;
    }
    return !v5;
  }
  return result;
}

BOOL sub_382A0(const char *a1, long long *a2, unsigned __int8 *a3, int a4)
{
  int v8 = socket(30, 2, 0);
  if (v8 < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v22 = _os_log_pack_size();
      __chkstk_darwin(v22);
      __error();
      uint64_t v23 = _os_log_pack_fill();
      long long v24 = __error();
      long long v25 = strerror(*v24);
      int v26 = *__error();
      *(_DWORD *)uint64_t v23 = 136315906;
      *(void *)(v23 + 4) = "inet6_set_nat64_prefixlist";
      *(_WORD *)(v23 + 12) = 2080;
      *(void *)(v23 + 14) = a1;
      *(_WORD *)(v23 + 22) = 2080;
      *(void *)(v23 + 24) = v25;
      *(_WORD *)(v23 + 32) = 1024;
      *(_DWORD *)(v23 + 34) = v26;
      __SC_log_send();
    }
    return 0;
  }
  else
  {
    int v9 = v8;
    memset(v31, 0, sizeof(v31));
    strncpy(__dst, a1, 0x10uLL);
    if (a4 >= 4) {
      int v10 = 4;
    }
    else {
      int v10 = a4;
    }
    if (a4 >= 1)
    {
      uint64_t v11 = v31;
      if (v10 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v10;
      }
      do
      {
        long long v13 = *a2++;
        long long v14 = v13;
        LODWORD(v13) = *a3++;
        *uint64_t v11 = v14;
        *((_DWORD *)v11 + 4) = v13 >> 3;
        uint64_t v11 = (_OWORD *)((char *)v11 + 20);
        --v12;
      }
      while (v12);
    }
    if (ioctl(v9, 0xC06069C2uLL, __dst))
    {
      int v15 = *__error();
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v16 = _os_log_pack_size();
        __chkstk_darwin(v16);
        __error();
        uint64_t v17 = _os_log_pack_fill();
        long long v18 = __error();
        long long v19 = strerror(*v18);
        int v20 = *__error();
        *(_DWORD *)uint64_t v17 = 136315906;
        *(void *)(v17 + 4) = a1;
        *(_WORD *)(v17 + 12) = 1024;
        *(_DWORD *)(v17 + 14) = v10;
        *(_WORD *)(v17 + 18) = 2080;
        *(void *)(v17 + 20) = v19;
        *(_WORD *)(v17 + 28) = 1024;
        *(_DWORD *)(v17 + 30) = v20;
        __SC_log_send();
      }
      BOOL v21 = v15 == 0;
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v27 = _os_log_pack_size();
        __chkstk_darwin(v27);
        __error();
        uint64_t v28 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v28 = 136315394;
        *(void *)(v28 + 4) = a1;
        *(_WORD *)(v28 + 12) = 1024;
        *(_DWORD *)(v28 + 14) = v10;
        __SC_log_send();
      }
      BOOL v21 = 1;
    }
    close(v9);
  }
  return v21;
}

uint64_t sub_38684(int a1, const char *a2, _OWORD *a3)
{
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  long long v9 = 0u;
  long long v8 = 0u;
  long long v7 = 0u;
  memset(&__dst[16], 0, 32);
  strncpy(__dst, a2, 0x10uLL);
  if (a3)
  {
    *(_WORD *)&char __dst[16] = 7708;
    *(_OWORD *)&__dst[24] = *a3;
  }
  return ioctl(a1, 0x81206919uLL, __dst);
}

int8x16_t sub_3876C(int8x16_t *a1, int a2)
{
  int8x16_t v4 = 0uLL;
  sub_387B0(&v4, a2);
  int8x16_t result = vandq_s8(*a1, v4);
  *a1 = result;
  return result;
}

void *sub_387B0(void *__b, int a2)
{
  int v3 = __b;
  size_t v4 = 0;
  *__b = 0;
  __b[1] = 0;
  if (a2 >= 8)
  {
    size_t v4 = (a2 >> 3) - 1 + 1;
    __b = memset(__b, 255, v4);
  }
  if (a2 <= 0) {
    int v5 = -(-a2 & 7);
  }
  else {
    int v5 = a2 & 7;
  }
  if (v5) {
    *((unsigned char *)v3 + v4) = 0xFF00u >> v5;
  }
  return __b;
}

uint64_t sub_38828(int8x16_t *a1, int a2)
{
  uint64_t v15 = 0;
  size_t v4 = sub_38918((size_t *)&v15);
  if (!v4) {
    return 0;
  }
  int v5 = v4;
  if (v15 < 1)
  {
LABEL_11:
    uint64_t v12 = 0;
  }
  else
  {
    unint64_t v6 = (unint64_t)v4 + v15;
    long long v7 = v4;
    while (1)
    {
      unsigned int v8 = *((unsigned __int16 *)v7 + 33);
      if (!a2 || *((unsigned __int16 *)v7 + 32) == a2)
      {
        int8x16_t v14 = *a1;
        int v9 = *((unsigned __int8 *)v7 + 29);
        int8x16_t __b = 0uLL;
        sub_387B0(&__b, v9);
        int8x16_t v10 = vandq_s8(v14, __b);
        if (v10.i64[0] == v7[1] && v10.i64[1] == v7[2]) {
          break;
        }
      }
      long long v7 = (void *)((char *)v7 + 28 * v8 + 72);
      if ((unint64_t)v7 >= v6) {
        goto LABEL_11;
      }
    }
    uint64_t v12 = *((unsigned __int8 *)v7 + 29);
  }
  free(v5);
  return v12;
}

void *sub_38918(size_t *a1)
{
  size_t v4 = 0;
  *(_OWORD *)int v5 = xmmword_5D520;
  *a1 = 0;
  if (sysctl(v5, 4u, 0, &v4, 0, 0) < 0) {
    return 0;
  }
  v4 += 1024;
  int v2 = malloc_type_malloc(v4, 0x893B2339uLL);
  if (sysctl(v5, 4u, v2, &v4, 0, 0) < 0)
  {
    free(v2);
    return 0;
  }
  *a1 = v4;
  return v2;
}

uint64_t sub_389FC(int a1, _DWORD *a2)
{
  uint64_t v11 = 0;
  size_t v4 = (char *)sub_38918((size_t *)&v11);
  if (v4)
  {
    if (v11 >= 1)
    {
      uint64_t v5 = 0;
      int v6 = 0;
      long long v7 = v4;
      while (1)
      {
        int v8 = *((unsigned __int16 *)v7 + 33);
        if (a1)
        {
          if (*((unsigned __int16 *)v7 + 32) != a1 || v8 == 0) {
            goto LABEL_10;
          }
        }
        else if (!*((_WORD *)v7 + 33))
        {
          goto LABEL_10;
        }
        uint64_t v5 = (v5 + v8);
        ++v6;
LABEL_10:
        v7 += 28 * *((unsigned __int16 *)v7 + 33) + 72;
        if (v7 >= &v4[v11]) {
          goto LABEL_16;
        }
      }
    }
    int v6 = 0;
    uint64_t v5 = 0;
LABEL_16:
    free(v4);
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = 0;
  }
  *a2 = v6;
  return v5;
}

uint64_t sub_38ABC(int a1, const char *a2, _OWORD *a3, _OWORD *a4, int a5, int a6, int a7, int a8)
{
  uint64_t v20 = 0;
  long long v19 = 0u;
  long long v18 = 0u;
  memset(&__dst[16], 0, 64);
  strncpy(__dst, a2, 0x10uLL);
  int v21 = a7;
  int v22 = a8;
  DWORD1(v19) = a6;
  if (a3)
  {
    *(_WORD *)&char __dst[16] = 7708;
    *(_OWORD *)&__dst[24] = *a3;
  }
  if (a4)
  {
    *(_WORD *)&__dst[44] = 7708;
    *(_OWORD *)&__dst[52] = *a4;
  }
  if (a5)
  {
    long long __b = 0uLL;
    sub_387B0(&__b, a5);
    *(_WORD *)&__dst[72] = 7708;
    long long v18 = __b;
  }
  return ioctl(a1, 0x8080691AuLL, __dst);
}

uint64_t sub_38BD8(const char *a1)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v3 = 136315138;
    *(void *)(v3 + 4) = a1;
    __SC_log_send();
  }
  return sub_38CF8(a1, 0xC120694FuLL);
}

uint64_t sub_38CF8(const char *a1, unint64_t a2)
{
  int v4 = socket(30, 2, 0);
  if (v4 < 0) {
    return *__error();
  }
  int v5 = v4;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  long long v9 = 0u;
  strncpy(&__dst, a1, 0x10uLL);
  if (ioctl(v5, a2, &__dst) < 0) {
    uint64_t v6 = *__error();
  }
  else {
    uint64_t v6 = 0;
  }
  close(v5);
  return v6;
}

uint64_t sub_38E18(const char *a1)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v3 = 136315138;
    *(void *)(v3 + 4) = a1;
    __SC_log_send();
  }
  return sub_38CF8(a1, 0xC1206950uLL);
}

uint64_t sub_38F38(const char *a1, uint64_t a2)
{
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  int v4 = socket(30, 2, 0);
  if (v4 < 0)
  {
    uint64_t v6 = *__error();
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      long long v9 = __error();
      long long v10 = strerror(*v9);
      *(_DWORD *)uint64_t v8 = 136315394;
      *(void *)(v8 + 4) = a1;
      *(_WORD *)(v8 + 12) = 2080;
      *(void *)(v8 + 14) = v10;
      __SC_log_send();
    }
    long long v11 = v40;
    *(_OWORD *)(a2 + 160) = v39;
    *(_OWORD *)(a2 + 176) = v11;
    *(void *)(a2 + 192) = v41;
    long long v12 = v36;
    *(_OWORD *)(a2 + 96) = v35;
    *(_OWORD *)(a2 + 112) = v12;
    long long v13 = v38;
    *(_OWORD *)(a2 + 128) = v37;
    *(_OWORD *)(a2 + 144) = v13;
    long long v14 = v32;
    *(_OWORD *)(a2 + 32) = v31;
    *(_OWORD *)(a2 + 48) = v14;
    long long v15 = v34;
    *(_OWORD *)(a2 + 64) = v33;
    *(_OWORD *)(a2 + 80) = v15;
    long long v16 = v30;
    *(_OWORD *)a2 = v29;
    *(_OWORD *)(a2 + 16) = v16;
  }
  else
  {
    int v5 = v4;
    strncpy((char *)&v28, a1, 0x10uLL);
    if (ioctl(v5, 0xC1206953uLL, &v28) < 0)
    {
      uint64_t v6 = *__error();
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v17 = _os_log_pack_size();
        __chkstk_darwin(v17);
        __error();
        uint64_t v18 = _os_log_pack_fill();
        long long v19 = __error();
        long long v20 = strerror(*v19);
        *(_DWORD *)uint64_t v18 = 136315394;
        *(void *)(v18 + 4) = a1;
        *(_WORD *)(v18 + 12) = 2080;
        *(void *)(v18 + 14) = v20;
        __SC_log_send();
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    long long v21 = v40;
    *(_OWORD *)(a2 + 160) = v39;
    *(_OWORD *)(a2 + 176) = v21;
    *(void *)(a2 + 192) = v41;
    long long v22 = v36;
    *(_OWORD *)(a2 + 96) = v35;
    *(_OWORD *)(a2 + 112) = v22;
    long long v23 = v38;
    *(_OWORD *)(a2 + 128) = v37;
    *(_OWORD *)(a2 + 144) = v23;
    long long v24 = v32;
    *(_OWORD *)(a2 + 32) = v31;
    *(_OWORD *)(a2 + 48) = v24;
    long long v25 = v34;
    *(_OWORD *)(a2 + 64) = v33;
    *(_OWORD *)(a2 + 80) = v25;
    long long v26 = v30;
    *(_OWORD *)a2 = v29;
    *(_OWORD *)(a2 + 16) = v26;
    close(v5);
  }
  return v6;
}

uint64_t sub_3924C(uint64_t a1)
{
  return sub_39254(a1, 1);
}

uint64_t sub_39254(uint64_t a1, int a2)
{
  int v4 = socket(30, 2, 0);
  if ((v4 & 0x80000000) == 0)
  {
    int v5 = v4;
    sub_4220();
    _SC_syslog_os_log_mapping();
    int v6 = __SC_log_enabled();
    if (a2)
    {
      if (v6)
      {
        uint64_t v7 = _os_log_pack_size();
        __chkstk_darwin(v7);
        __error();
        uint64_t v8 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v8 = 136315138;
        *(void *)(v8 + 4) = a1;
        __SC_log_send();
      }
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      __strlcpy_chk();
      if (ioctl(v5, 0xC12069BDuLL, &v22) < 0)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled()) {
          goto LABEL_15;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (v6)
      {
        uint64_t v14 = _os_log_pack_size();
        __chkstk_darwin(v14);
        __error();
        uint64_t v15 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v15 = 136315138;
        *(void *)(v15 + 4) = a1;
        __SC_log_send();
      }
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      __strlcpy_chk();
      if (ioctl(v5, 0xC12069BEuLL, &v22) < 0)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
LABEL_15:
          uint64_t v16 = _os_log_pack_size();
          __chkstk_darwin(v16);
          __error();
          uint64_t v17 = _os_log_pack_fill();
          uint64_t v18 = __error();
          long long v19 = strerror(*v18);
          int v20 = *__error();
          *(_DWORD *)uint64_t v17 = 136315650;
          *(void *)(v17 + 4) = a1;
          *(_WORD *)(v17 + 12) = 2080;
          *(void *)(v17 + 14) = v19;
          *(_WORD *)(v17 + 22) = 1024;
          *(_DWORD *)(v17 + 24) = v20;
          __SC_log_send();
        }
LABEL_16:
        uint64_t v9 = *__error();
        goto LABEL_17;
      }
    }
    uint64_t v9 = 0;
LABEL_17:
    close(v5);
    return v9;
  }
  uint64_t v9 = *__error();
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v10 = _os_log_pack_size();
    __chkstk_darwin(v10);
    __error();
    uint64_t v11 = _os_log_pack_fill();
    long long v12 = __error();
    long long v13 = strerror(*v12);
    *(_DWORD *)uint64_t v11 = 136315394;
    *(void *)(v11 + 4) = a1;
    *(_WORD *)(v11 + 12) = 2080;
    *(void *)(v11 + 14) = v13;
    __SC_log_send();
  }
  return v9;
}

uint64_t sub_39728(uint64_t a1)
{
  return sub_39254(a1, 0);
}

uint64_t sub_39730(int a1, uint64_t a2)
{
  int v17 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = (char *)sub_3987C(a1, &v17);
  if (!v3) {
    return 0;
  }
  int v4 = v3;
  if (v17 >= 1)
  {
    int v5 = (unsigned __int16 *)&v3[v17];
    long long v6 = 0uLL;
    uint64_t v7 = (unsigned __int16 *)v3;
    do
    {
      uint64_t v16 = 0;
      v14[2] = v6;
      long long v15 = v6;
      v14[0] = v6;
      v14[1] = v6;
      if (*((unsigned char *)v7 + 2) == 5 && *((unsigned char *)v7 + 3) == 12)
      {
        LODWORD(v14[0]) = *((_DWORD *)v7 + 1);
        int v8 = sub_59AC0((unsigned __int8 *)v7 + 20, (unint64_t)v7 + *v7, (int *)v14);
        if (v8)
        {
          int v10 = v8;
          uint64_t v11 = __stderrp;
          long long v12 = strerror(v8);
          fprintf(v11, "couldn't extract rt_addrinfo %s (%d)\n", v12, v10);
          break;
        }
        if ((void)v15 && *(unsigned __int8 *)v15 >= 0x1Cu)
        {
          long long v6 = 0uLL;
          if (*(unsigned __int8 *)(v15 + 8) == 254 && (*(unsigned char *)(v15 + 9) & 0xC0) == 0x80)
          {
            *(_OWORD *)a2 = *(_OWORD *)(v15 + 8);
            *(_WORD *)(a2 + 2) = 0;
            uint64_t v9 = 1;
            goto LABEL_18;
          }
        }
        else
        {
          long long v6 = 0uLL;
        }
      }
      uint64_t v7 = (unsigned __int16 *)((char *)v7 + *v7);
    }
    while (v7 < v5);
  }
  uint64_t v9 = 0;
LABEL_18:
  free(v4);
  return v9;
}

void *sub_3987C(int a1, _DWORD *a2)
{
  size_t v9 = 0;
  *(_OWORD *)int v10 = xmmword_5D510;
  int v11 = 3;
  int v12 = a1;
  *a2 = 0;
  if (sysctl(v10, 6u, 0, &v9, 0, 0) < 0)
  {
    int v4 = __stderrp;
    int v5 = __error();
    strerror(*v5);
    fprintf(v4, "sysctl() size failed: %s");
    return 0;
  }
  v9 *= 2;
  uint64_t v3 = malloc_type_malloc(v9, 0x12940EAFuLL);
  if (sysctl(v10, 6u, v3, &v9, 0, 0) < 0)
  {
    free(v3);
    long long v6 = __stderrp;
    uint64_t v7 = __error();
    strerror(*v7);
    fprintf(v6, "sysctl() failed: %s");
    return 0;
  }
  *a2 = v9;
  return v3;
}

void sub_399B8(uint64_t a1, int a2)
{
  int v41 = 0;
  uint64_t v3 = (char *)sub_3987C(a2, &v41);
  if (!v3)
  {
    int v13 = 0;
    int v12 = 0;
    int v11 = 0;
    goto LABEL_21;
  }
  int v4 = (unsigned __int16 *)v3;
  int v5 = v41;
  __src[0] = 0;
  if (v41 < 1) {
    goto LABEL_17;
  }
  int v6 = 0;
  uint64_t v7 = (unsigned __int16 *)&v3[v41];
  int v8 = (unsigned __int16 *)v3;
  do
  {
    if (*((unsigned char *)v8 + 2) == 5)
    {
      int v9 = *((unsigned __int8 *)v8 + 3);
      if (v9 == 12)
      {
        ++v6;
      }
      else if (v9 == 14 && (v8[2] & 0x10) != 0)
      {
        if (*((unsigned __int8 *)v8 + 117) - 17 < 0xFFFFFFF0) {
          goto LABEL_17;
        }
        __memmove_chk();
        __src[*((unsigned __int8 *)v8 + 117)] = 0;
      }
    }
    int v8 = (unsigned __int16 *)((char *)v8 + *v8);
  }
  while (v8 < v7);
  if (!__src[0] || v6 == 0)
  {
LABEL_17:
    int v11 = 0;
LABEL_18:
    int v12 = 0;
    int v13 = 0;
    goto LABEL_19;
  }
  if (v6 < 6)
  {
    int v11 = (_DWORD *)(a1 + 12);
  }
  else
  {
    int v11 = malloc_type_malloc(32 * v6, 0x1000040E0EAB150uLL);
    if (!v11) {
      goto LABEL_18;
    }
  }
  if (v5 < 1)
  {
    int v12 = 0;
    int v33 = -1;
    goto LABEL_75;
  }
  int v13 = 0;
  long long v37 = 0;
  int v38 = -1;
  long long v14 = 0uLL;
  long long v15 = v4;
  do
  {
    uint64_t v40 = 0;
    v39[2] = v14;
    v39[3] = v14;
    v39[0] = v14;
    v39[1] = v14;
    if (*((unsigned char *)v15 + 2) != 5 || *((unsigned char *)v15 + 3) != 12) {
      goto LABEL_71;
    }
    LODWORD(v39[0]) = *((_DWORD *)v15 + 1);
    int v16 = sub_59AC0((unsigned __int8 *)v15 + 20, (unint64_t)v15 + *v15, (int *)v39);
    if (v16)
    {
      int v34 = v16;
      long long v35 = __stderrp;
      long long v36 = strerror(v16);
      fprintf(v35, "couldn't extract rt_addrinfo %s (%d)\n", v36, v34);
      int v12 = v37;
      int v33 = v38;
      if ((v38 & 0x80000000) == 0) {
        goto LABEL_79;
      }
      goto LABEL_19;
    }
    uint64_t v17 = 0;
    uint64_t v18 = (unsigned __int8 *)&v11[8 * v13];
    char v19 = 1;
    long long v14 = 0uLL;
    do
    {
      while (1)
      {
        int v20 = (unsigned __int8 *)*((void *)v39 + v17 + 1);
        if (!v20 || *v20 < 0x1Cu) {
          goto LABEL_56;
        }
        if (v17 == 2) {
          break;
        }
        if (v17 != 5) {
          goto LABEL_56;
        }
        char v19 = 0;
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v20 + 8);
        if (++v17 == 8) {
          goto LABEL_58;
        }
      }
      uint64_t v21 = 0;
      int v22 = 0;
      long long v23 = v20 + 8;
      while (v23[v21] == 255)
      {
        ++v21;
        v22 += 8;
        if (v21 == 16)
        {
          int v22 = 128;
          goto LABEL_55;
        }
      }
      if (v21 != 16)
      {
        int v24 = 0;
        unsigned int v25 = v23[v21];
        int v26 = v22 + 7;
        while (1)
        {
          int v27 = v24 + 7;
          if (((v25 >> (v24 + 7)) & 1) == 0) {
            break;
          }
          if (--v24 == -7)
          {
LABEL_50:
            long long v28 = v20 + 9;
            while (v21 != 15)
            {
              if (v28[v21++]) {
                goto LABEL_53;
              }
            }
            int v22 = v26;
            goto LABEL_55;
          }
        }
        int v26 = v22 - v24;
        while (((v25 >> v27) & 1) == 0)
        {
          if (!--v27) {
            goto LABEL_50;
          }
        }
LABEL_53:
        int v22 = 0;
      }
LABEL_55:
      *((_DWORD *)v18 + 4) = v22;
LABEL_56:
      ++v17;
    }
    while (v17 != 8);
    if (v19) {
      goto LABEL_71;
    }
LABEL_58:
    if ((v38 & 0x80000000) == 0 || (v30 = socket(30, 2, 0), long long v14 = 0uLL, v38 = v30, (v30 & 0x80000000) == 0))
    {
      long long v57 = v14;
      long long v58 = v14;
      long long v55 = v14;
      long long v56 = v14;
      long long v53 = v14;
      long long v54 = v14;
      long long v51 = v14;
      long long v52 = v14;
      long long v49 = v14;
      long long v50 = v14;
      long long v47 = v14;
      long long v48 = v14;
      long long v45 = v14;
      long long v46 = v14;
      *(_OWORD *)&__dst[32] = v14;
      long long v44 = v14;
      *(_OWORD *)&char __dst[16] = v14;
      strncpy(__dst, __src, 0x10uLL);
      *(_WORD *)&char __dst[16] = 7708;
      *(_OWORD *)&__dst[24] = *(_OWORD *)v18;
      if ((ioctl(v38, 0xC1206949uLL, __dst) & 0x80000000) == 0) {
        v11[8 * v13 + 5] = *(_DWORD *)&__dst[16];
      }
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v44 = 0u;
      memset(&__dst[16], 0, 32);
      strncpy(__dst, __src, 0x10uLL);
      *(_WORD *)&char __dst[16] = 7708;
      *(_OWORD *)&__dst[24] = *(_OWORD *)v18;
      if ((ioctl(v38, 0xC1206951uLL, __dst) & 0x80000000) == 0)
      {
        long long v31 = (char *)&v11[8 * v13];
        *((_DWORD *)v31 + 6) = *(_DWORD *)&__dst[32];
        *((_DWORD *)v31 + 7) = *(_DWORD *)&__dst[36];
      }
      long long v14 = 0uLL;
    }
    if (*v18 == 254 && (v18[1] & 0xC0) == 0x80)
    {
      *((_WORD *)v18 + 1) = 0;
      long long v32 = v37;
      if (!v37) {
        long long v32 = (char *)&v11[8 * v13];
      }
      long long v37 = v32;
    }
    ++v13;
LABEL_71:
    long long v15 = (unsigned __int16 *)((char *)v15 + *v15);
  }
  while (v15 < v7);
  int v12 = v37;
  int v33 = v38;
  if (!v13)
  {
LABEL_75:
    if (v11 != (_DWORD *)(a1 + 12)) {
      free(v11);
    }
    int v13 = 0;
    int v11 = 0;
  }
  if ((v33 & 0x80000000) == 0) {
LABEL_79:
  }
    close(v33);
LABEL_19:
  free(v4);
LABEL_21:
  *(void *)a1 = v11;
  *(_DWORD *)(a1 + 8) = v13;
  *(void *)(a1 + 176) = v12;
}

__CFString *sub_39E9C(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"{");
  if (*(int *)(a1 + 8) >= 1)
  {
    int v3 = 0;
    int v4 = *(unsigned int **)a1;
    do
    {
      sub_39FE4(v4[6], __str);
      sub_39FE4(v4[7], v9);
      if (v3) {
        int v5 = "";
      }
      else {
        int v5 = "\n";
      }
      int v6 = inet_ntop(30, v4, v10, 0x2Eu);
      CFStringAppendFormat(Mutable, 0, @"%s%s/%d flags 0x%04x vltime=%s pltime=%s\n", v5, v6, v4[4], v4[5], __str, v9);
      ++v3;
      v4 += 8;
    }
    while (v3 < *(_DWORD *)(a1 + 8));
  }
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

uint64_t sub_39FE4(uint64_t result, char *__str)
{
  if (result != -1) {
    return snprintf(__str, 0x20uLL, "%u", result);
  }
  strcpy(__str, "infinity");
  return result;
}

void sub_3A038(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    if (v2 != (void *)(a1 + 12)) {
      free(v2);
    }
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(void *)(a1 + 176) = 0;
  }
}

uint64_t sub_3A07C(uint64_t result)
{
  *(void *)int8x16_t result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 176) = 0;
  return result;
}

BOOL sub_3A08C(uint64_t *a1, void *a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  if (v2 < 1) {
    return 0;
  }
  for (uint64_t i = *a1; *(void *)i != *a2 || *(void *)(i + 8) != a2[1]; i += 32)
  {
    if (!--v2) {
      return 0;
    }
  }
  return (*(_WORD *)(i + 20) & 0x206) == 0;
}

uint64_t sub_3A0D8(uint64_t *a1, uint64_t a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  if (v2 < 1) {
    return 0;
  }
  for (uint64_t i = *a1; ; i += 32)
  {
    BOOL v4 = *(void *)i == *(void *)a2 && *(void *)(i + 8) == *(void *)(a2 + 8);
    if (v4 && *(_DWORD *)(i + 16) == *(_DWORD *)(a2 + 16)) {
      break;
    }
    if (!--v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_3A128(uint64_t result)
{
  if (result) {
    return *(void *)(result + 176);
  }
  return result;
}

uint64_t sub_3A134(int a1)
{
  if (a1)
  {
    BOOL v1 = sub_3A9E8("net.route.verbose", 2, &dword_7023C);
    char v2 = dword_7023C != 2 && v1;
    byte_70240 = v2;
    uint64_t result = sub_3A9E8("net.inet6.icmp6.nd6_debug", 2, &dword_70244);
    if (dword_70244 == 2) {
      char v4 = 0;
    }
    else {
      char v4 = result;
    }
    byte_70248 = v4;
  }
  else
  {
    sub_3A204("net.route.verbose", dword_7023C, byte_70240);
    int v5 = dword_70244;
    int v6 = byte_70248;
    return sub_3A204("net.inet6.icmp6.nd6_debug", v5, v6);
  }
  return result;
}

uint64_t sub_3A204(const char *a1, int a2, int a3)
{
  if (a3)
  {
    int v7 = 0;
    return sub_3A9E8(a1, a2, &v7);
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v6 = 136315138;
      *(void *)(v6 + 4) = a1;
      return __SC_log_send();
    }
  }
  return result;
}

void *sub_3A32C(uint64_t a1, unsigned int *a2)
{
  unsigned int v24 = 0;
  int v4 = socket(2, 2, 0);
  if (v4 < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      int v13 = __error();
      long long v14 = strerror(*v13);
      int v15 = *__error();
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)(v12 + 4) = v14;
      *(_WORD *)(v12 + 12) = 1024;
      *(_DWORD *)(v12 + 14) = v15;
      __SC_log_send();
    }
    unsigned int v16 = 0;
    goto LABEL_17;
  }
  int v5 = v4;
  if (sub_3A6D4(v4, a1, 0, &v24))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      int v8 = __error();
      int v9 = strerror(*v8);
      int v10 = *__error();
      *(_DWORD *)uint64_t v7 = 136315394;
      *(void *)(v7 + 4) = v9;
      *(_WORD *)(v7 + 12) = 1024;
      *(_DWORD *)(v7 + 14) = v10;
      __SC_log_send();
    }
    goto LABEL_13;
  }
  if (!v24)
  {
LABEL_13:
    unsigned int v16 = 0;
    uint64_t v17 = 0;
    goto LABEL_14;
  }
  uint64_t v17 = malloc_type_malloc(4 * v24, 0x100004052888210uLL);
  if (sub_3A6D4(v5, a1, (uint64_t)v17, &v24))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v18 = _os_log_pack_size();
      __chkstk_darwin(v18);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      int v20 = __error();
      uint64_t v21 = strerror(*v20);
      int v22 = *__error();
      *(_DWORD *)uint64_t v19 = 136315394;
      *(void *)(v19 + 4) = v21;
      *(_WORD *)(v19 + 12) = 1024;
      *(_DWORD *)(v19 + 14) = v22;
      __SC_log_send();
    }
    unsigned int v16 = 0;
  }
  else
  {
    unsigned int v16 = v24;
  }
LABEL_14:
  close(v5);
  if (v17 && !v16)
  {
    free(v17);
LABEL_17:
    uint64_t v17 = 0;
  }
  *a2 = v16;
  return v17;
}

uint64_t sub_3A6D4(int a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  long long v8 = 0u;
  long long v9 = 0u;
  __strlcpy_chk();
  if (a3)
  {
    LODWORD(v9) = *a4;
    *((void *)&v9 + 1) = a3;
  }
  if (ioctl(a1, 0xC02069C4uLL, &v8) < 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *a4 = v9;
  return result;
}

uint64_t sub_3A790(int a1, const char *a2, _OWORD *a3)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  memset(&__dst[16], 0, 32);
  strncpy(__dst, a2, 0x10uLL);
  if (a3)
  {
    *(_WORD *)&char __dst[16] = 7708;
    *(_OWORD *)&__dst[24] = *a3;
    inet_ntop(30, a3, v11, 0x2Eu);
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v7 = 136315394;
      *(void *)(v7 + 4) = a2;
      *(_WORD *)(v7 + 12) = 2080;
      *(void *)(v7 + 14) = v11;
      __SC_log_send();
    }
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v8 = _os_log_pack_size();
      __chkstk_darwin(v8);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v9 = 136315138;
      *(void *)(v9 + 4) = a2;
      __SC_log_send();
    }
  }
  return ioctl(a1, 0xC0806982uLL, __dst);
}

BOOL sub_3A9E8(const char *a1, int a2, int *a3)
{
  int v19 = a2;
  size_t v18 = 4;
  int v5 = sysctlbyname(a1, a3, &v18, &v19, 4uLL);
  sub_4220();
  _SC_syslog_os_log_mapping();
  int v6 = __SC_log_enabled();
  if (v5)
  {
    if (v6)
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      int v9 = v19;
      int v10 = __error();
      uint64_t v11 = strerror(*v10);
      int v12 = *__error();
      *(_DWORD *)uint64_t v8 = 136315906;
      *(void *)(v8 + 4) = a1;
      *(_WORD *)(v8 + 12) = 1024;
      *(_DWORD *)(v8 + 14) = v9;
      *(_WORD *)(v8 + 18) = 2080;
      *(void *)(v8 + 20) = v11;
      *(_WORD *)(v8 + 28) = 1024;
      *(_DWORD *)(v8 + 30) = v12;
LABEL_6:
      __SC_log_send();
    }
  }
  else if (v6)
  {
    uint64_t v13 = _os_log_pack_size();
    __chkstk_darwin(v13);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    int v15 = *a3;
    int v16 = v19;
    *(_DWORD *)uint64_t v14 = 136315650;
    *(void *)(v14 + 4) = a1;
    *(_WORD *)(v14 + 12) = 1024;
    *(_DWORD *)(v14 + 14) = v15;
    *(_WORD *)(v14 + 18) = 1024;
    *(_DWORD *)(v14 + 20) = v16;
    goto LABEL_6;
  }
  return v5 == 0;
}

uint64_t sub_3AC0C()
{
  v2.tv_sec = 0;
  v2.tv_nsec = 0;
  uint64_t result = qword_70250;
  if (!qword_70250)
  {
    qword_70250 = (uint64_t)CFDataCreateMutable(0, 16);
    CFDataSetLength((CFMutableDataRef)qword_70250, 16);
    MutableBytePtr = CFDataGetMutableBytePtr((CFMutableDataRef)qword_70250);
    if (gethostuuid(MutableBytePtr, &v2)) {
      sub_6DB0((const void **)&qword_70250);
    }
    return qword_70250;
  }
  return result;
}

uint64_t sub_3AC78(int a1, int a2, int a3, const char *a4)
{
  return sub_3AC88(a1, a2, a3, a4);
}

uint64_t sub_3AC88(int a1, int a2, int a3, const char *a4)
{
  int v8 = arp_open_routing_socket();
  if ((v8 & 0x80000000) == 0)
  {
    int v9 = v8;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t __buf = 17104896;
    DWORD1(v23) = arp_get_next_seq();
    uint64_t __buf_8 = 0x700000901;
    WORD6(v27) = 528;
    LODWORD(v28) = a2;
    WORD6(v28) = 528;
    LODWORD(v29) = a1;
    WORD6(v29) = 528;
    LODWORD(v30) = a3;
    if (a4)
    {
      HIDWORD(__buf_8) = 55;
      WORD6(v30) = 4628;
      BYTE1(v31) = strlen(a4);
      __memmove_chk();
      LOWORD(v32) = 528;
      DWORD1(v32) = a1;
      unsigned int v10 = 176;
    }
    else
    {
      unsigned int v10 = 140;
    }
    LOWORD(__buf) = v10;
    if ((write(v9, &__buf, v10) & 0x8000000000000000) == 0)
    {
      uint64_t v15 = 1;
LABEL_17:
      close(v9);
      return v15;
    }
    int v16 = *__error();
    if (v16 == 17 || v16 == 3)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled()) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
LABEL_15:
        uint64_t v17 = _os_log_pack_size();
        __chkstk_darwin(v17);
        __error();
        uint64_t v18 = _os_log_pack_fill();
        int v19 = strerror(v16);
        *(_DWORD *)uint64_t v18 = 136315138;
        *(void *)(v18 + 4) = v19;
        __SC_log_send();
      }
    }
    uint64_t v15 = 0;
    goto LABEL_17;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v11 = _os_log_pack_size();
    __chkstk_darwin(v11);
    __error();
    uint64_t v12 = _os_log_pack_fill();
    uint64_t v13 = __error();
    uint64_t v14 = strerror(*v13);
    *(_DWORD *)uint64_t v12 = 136315138;
    *(void *)(v12 + 4) = v14;
    __SC_log_send();
  }
  return 0;
}

uint64_t sub_3B01C(int a1, int a2, int a3)
{
  uint64_t result = arp_open_routing_socket();
  if ((result & 0x80000000) == 0)
  {
    uint64_t v7 = result;
    if (a2) {
      arp_delete(result, a2, 0);
    }
    if (a3) {
      arp_delete(v7, a3, 0);
    }
    arp_flush(v7, 0, a1);
    sub_3B0BC(v7);
    return close(v7);
  }
  return result;
}

void sub_3B0BC(uint64_t a1)
{
  size_t v29 = 0;
  *(_OWORD *)long long v30 = xmmword_5D550;
  uint64_t v31 = 0x1000000002;
  int v2 = 3;
  while (1)
  {
    if (sysctl(v30, 6u, 0, &v29, 0, 0) < 0) {
      return;
    }
    int v3 = (unsigned __int16 *)malloc_type_malloc(v29, 0xA476F1EBuLL);
    if (!v3) {
      return;
    }
    int v4 = v3;
    if ((sysctl(v30, 6u, v3, &v29, 0, 0) & 0x80000000) == 0) {
      break;
    }
    free(v4);
    if (!--v2) {
      return;
    }
  }
  if ((uint64_t)v29 >= 1)
  {
    unint64_t v6 = (unint64_t)v4 + v29;
    *(void *)&long long v5 = 67110146;
    long long v25 = v5;
    uint64_t v7 = v4;
    do
    {
      *((unsigned char *)v7 + 3) = 2;
      *((_DWORD *)v7 + 5) = arp_get_next_seq();
      ssize_t v8 = write(a1, v7, *v7);
      sub_4220();
      if (v8 < 0)
      {
        int v15 = _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v16 = _os_log_pack_size();
          long long v28 = &v25;
          __chkstk_darwin(v16);
          __error();
          uint64_t v17 = _os_log_pack_fill();
          int v27 = v15;
          uint64_t v18 = a1;
          int v19 = *((unsigned __int8 *)v7 + 96);
          unint64_t v20 = v6;
          int v21 = *((unsigned __int8 *)v7 + 97);
          int v22 = *((unsigned __int8 *)v7 + 98);
          int v26 = *((unsigned __int8 *)v7 + 99);
          long long v23 = __error();
          long long v24 = strerror(*v23);
          *(_DWORD *)uint64_t v17 = v25;
          *(_DWORD *)(v17 + 4) = v19;
          a1 = v18;
          *(_WORD *)(v17 + 8) = 1024;
          *(_DWORD *)(v17 + 10) = v21;
          unint64_t v6 = v20;
          *(_WORD *)(v17 + 14) = 1024;
          *(_DWORD *)(v17 + 16) = v22;
          *(_WORD *)(v17 + 20) = 1024;
          *(_DWORD *)(v17 + 22) = v26;
          *(_WORD *)(v17 + 26) = 2080;
          *(void *)(v17 + 28) = v24;
          goto LABEL_14;
        }
      }
      else
      {
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v9 = _os_log_pack_size();
          long long v28 = &v25;
          __chkstk_darwin(v9);
          __error();
          uint64_t v10 = _os_log_pack_fill();
          int v11 = *((unsigned __int8 *)v7 + 96);
          int v12 = *((unsigned __int8 *)v7 + 97);
          int v13 = *((unsigned __int8 *)v7 + 98);
          int v14 = *((unsigned __int8 *)v7 + 99);
          *(_DWORD *)uint64_t v10 = 67109888;
          *(_DWORD *)(v10 + 4) = v11;
          *(_WORD *)(v10 + 8) = 1024;
          *(_DWORD *)(v10 + 10) = v12;
          *(_WORD *)(v10 + 14) = 1024;
          *(_DWORD *)(v10 + 16) = v13;
          *(_WORD *)(v10 + 20) = 1024;
          *(_DWORD *)(v10 + 22) = v14;
LABEL_14:
          __SC_log_send();
        }
      }
      uint64_t v7 = (unsigned __int16 *)((char *)v7 + *v7);
    }
    while ((unint64_t)v7 < v6);
  }
  free(v4);
}

CFMutableDictionaryRef sub_3B400(int a1, uint64_t a2, CFAbsoluteTime a3, CFAbsoluteTime a4)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFMutableDictionaryRef v19 = Mutable;
  int v9 = sub_5B24(a2);
  if (v9 >= 1)
  {
    int v10 = v9;
    uint64_t v11 = 0;
    do
    {
      memset(length, 0, sizeof(length));
      int v12 = (unsigned __int8 *)sub_5B4C(a2, v11);
      uint64_t v13 = *v12;
      if (a1 == 258 && v13 == 12 || sub_121C4(*v12))
      {
        *(void *)&length[1] = CFStringCreateWithFormat(0, 0, @"Option_%d", v13);
        if (!CFDictionaryGetValue(Mutable, *(const void **)&length[1]))
        {
          int v14 = sub_54C30(a2, v13, length);
          if (v14)
          {
            int v15 = v14;
            CFDataRef v16 = CFDataCreate(0, (const UInt8 *)v14, length[0]);
            CFDictionarySetValue(Mutable, *(const void **)&length[1], v16);
            CFRelease(v16);
            free(v15);
          }
        }
        sub_6DB0((const void **)&length[1]);
      }
      uint64_t v11 = (v11 + 1);
    }
    while (v10 != v11);
  }
  if (a1 == 259)
  {
    sub_53F38(Mutable, @"LeaseStartTime", a3);
    if (a4 != 0.0) {
      sub_53F38(Mutable, @"LeaseExpirationTime", a4);
    }
  }
  if (!CFDictionaryGetCount(Mutable))
  {
    sub_6DB0((const void **)&v19);
    return v19;
  }
  return Mutable;
}

unsigned char *sub_3B5A8(CFStringRef theString, int *a2)
{
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, theString, @":");
  CFArrayRef theArray = ArrayBySeparatingStrings;
  if (ArrayBySeparatingStrings && (Count = CFArrayGetCount(ArrayBySeparatingStrings), (int v5 = Count) != 0))
  {
    unint64_t v6 = malloc_type_malloc(Count, 0xE2C62394uLL);
    if (v5 >= 1)
    {
      for (CFIndex i = 0; i != v5; v6[i++] = strtoul(__str, 0, 16))
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
        sub_539E0(ValueAtIndex, (UInt8 *)__str, 4, 0);
      }
    }
    sub_6DB0((const void **)&theArray);
    *a2 = v5;
  }
  else
  {
    sub_6DB0((const void **)&theArray);
    return 0;
  }
  return v6;
}

const void *sub_3B688(CFStringRef theString, in_addr *a2, void *a3, int *a4)
{
  a2->s_addr = 0;
  *a3 = 0;
  *a4 = 0;
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, theString, @"/");
  CFArrayRef v13 = ArrayBySeparatingStrings;
  if (ArrayBySeparatingStrings
    && (CFArrayRef v8 = ArrayBySeparatingStrings, CFArrayGetCount(ArrayBySeparatingStrings) >= 7)
    && (CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v8, 3),
        CFStringRef v10 = (const __CFString *)CFArrayGetValueAtIndex(v8, 5),
        CFStringRef v11 = (const __CFString *)CFArrayGetValueAtIndex(v8, 6),
        sub_53A68(v10, a2),
        a2->s_addr))
  {
    *a3 = sub_3B5A8(v11, a4);
    CFRetain(ValueAtIndex);
  }
  else
  {
    CFStringRef ValueAtIndex = 0;
  }
  sub_6DB0((const void **)&v13);
  return ValueAtIndex;
}

void sub_3B770(__CFDictionary *a1, CFDictionaryRef theDict, const __CFDictionary *a3, void *key)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, key);
  CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(a3, key);
  if ((unint64_t)Value | (unint64_t)v8)
  {
    CFArrayRef v9 = v8;
    if (Value && v8)
    {
      CFIndex Count = CFArrayGetCount(Value);
      CFDictionaryRef MutableCopy = CFArrayCreateMutableCopy(0, 0, Value);
      CFIndex v12 = CFArrayGetCount(v9);
      if (v12 >= 1)
      {
        CFIndex v13 = v12;
        for (CFIndex i = 0; i != v13; ++i)
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
          v18.location = 0;
          v18.length = Count;
          if (!CFArrayContainsValue(Value, v18, ValueAtIndex)) {
            CFArrayAppendValue(MutableCopy, ValueAtIndex);
          }
        }
      }
      CFDictionarySetValue(a1, key, MutableCopy);
      CFRelease(MutableCopy);
    }
    else
    {
      if (Value) {
        CFDataRef v16 = Value;
      }
      else {
        CFDataRef v16 = v8;
      }
      CFDictionarySetValue(a1, key, v16);
    }
  }
}

CFMutableDictionaryRef sub_3B8E4(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  int v3 = sub_5B24(*(void *)(a1 + 16));
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFMutableDictionaryRef v15 = Mutable;
  if ((int)v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v7 = (const UInt8 *)sub_5B4C(v2, i);
      unsigned int v8 = bswap32(*(unsigned __int16 *)v7);
      uint64_t v9 = HIWORD(v8);
      if (sub_CA18(HIWORD(v8)))
      {
        CFDataRef v10 = CFDataCreate(0, v7 + 4, bswap32(*((unsigned __int16 *)v7 + 1)) >> 16);
        CFStringRef v11 = CFStringCreateWithFormat(0, 0, @"Option_%d", v9);
        CFArrayRef Value = (void *)CFDictionaryGetValue(Mutable, v11);
        if (!Value)
        {
          CFArrayRef Value = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          CFDictionarySetValue(Mutable, v11, Value);
          CFRelease(Value);
        }
        CFArrayAppendValue((CFMutableArrayRef)Value, v10);
        CFRelease(v11);
        CFRelease(v10);
      }
    }
  }
  if (*(_DWORD *)(a1 + 72))
  {
    sub_53F38(Mutable, @"LeaseStartTime", *(CFAbsoluteTime *)(a1 + 24));
    double v13 = *(double *)(a1 + 32);
    if (v13 != 0.0) {
      sub_53F38(Mutable, @"LeaseExpirationTime", v13);
    }
  }
  if (!CFDictionaryGetCount(Mutable))
  {
    sub_6DB0((const void **)&v15);
    return v15;
  }
  return Mutable;
}

__CFDictionary *PvDEntityCreateWithInfo(uint64_t a1)
{
  unsigned __int16 v20 = 0;
  int v19 = 0;
  uint64_t v18 = 0;
  unsigned __int16 v17 = 0;
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = sub_56874(v2, &v18, &v17, (uint64_t)&v19);
  if (!v3 || v18 == 0) {
    return 0;
  }
  if (BYTE2(v19))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    return 0;
  }
  uint64_t v6 = v3;
  CFStringRef v7 = sub_57594(v3, v18);
  CFStringRef v16 = v7;
  if (!v7)
  {
    CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
    CFMutableStringRef v15 = Mutable;
    sub_59658(Mutable, v6, v18);
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v13 = 138412290;
      *(void *)(v13 + 4) = Mutable;
      __SC_log_send();
    }
    sub_6DB0((const void **)&v15);
    return 0;
  }
  CFStringRef v8 = v7;
  uint64_t v9 = CFDictionaryCreateMutable(0, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(v9, kSCPropNetPvDIdentifier, v8);
  if ((_BYTE)v19)
  {
    sub_53F94(v9, kSCPropNetPvDHTTPSupported, 1);
    sub_53F94(v9, kSCPropNetPvDSequenceNumber, v17);
    sub_53F94(v9, kSCPropNetPvDDelay, v20);
    CFDataRef v10 = *(const void **)(a1 + 104);
    if (v10) {
      CFDictionarySetValue(v9, kSCPropNetPvDAdditionalInformation, v10);
    }
  }
  if (BYTE1(v19)) {
    sub_53F94(v9, kSCPropNetPvDLegacy, 1);
  }
  sub_6DB0((const void **)&v16);
  return v9;
}

void sub_3BDA4(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

__CFArray *sub_3BDB8(uint64_t a1, uint64_t a2, signed int a3, __n128 a4)
{
  uint64_t v15 = a1;
  CFMutableStringRef Mutable = 0;
  if (a2 && a3 >= 4)
  {
    CFMutableStringRef Mutable = 0;
    if ((unint64_t)a3 >> 2 <= 1) {
      unint64_t v5 = 1;
    }
    else {
      unint64_t v5 = (unint64_t)a3 >> 2;
    }
    uint64_t v6 = (unsigned __int8 *)(a2 + 3);
    a4.n128_u64[0] = 136316162;
    __n128 v14 = a4;
    do
    {
      unsigned int v7 = *(v6 - 3);
      int v8 = *(v6 - 2);
      int v9 = *(v6 - 1);
      int v10 = *v6;
      if (((v9 << 16) | (v8 << 8) | (v10 << 24) | v7) + 1 > 1)
      {
        if (!Mutable) {
          CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
        }
        CFStringRef v12 = sub_766C((v9 << 16) | (v8 << 8) | (v10 << 24) | v7);
        CFArrayAppendValue(Mutable, v12);
        CFRelease(v12);
      }
      else
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          _os_log_pack_size();
          unsigned __int16 v17 = Mutable;
          CFStringRef v16 = &v14;
          __chkstk_darwin();
          __error();
          CFMutableStringRef Mutable = v17;
          uint64_t v11 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v11 = v14.n128_u32[0];
          *(void *)(v11 + 4) = v15;
          *(_WORD *)(v11 + 12) = 1024;
          *(_DWORD *)(v11 + 14) = v7;
          *(_WORD *)(v11 + 18) = 1024;
          *(_DWORD *)(v11 + 20) = v8;
          *(_WORD *)(v11 + 24) = 1024;
          *(_DWORD *)(v11 + 26) = v9;
          *(_WORD *)(v11 + 30) = 1024;
          *(_DWORD *)(v11 + 32) = v10;
          __SC_log_send();
        }
      }
      v6 += 4;
      --v5;
    }
    while (v5);
  }
  return Mutable;
}

CFArrayRef sub_3BFBC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v15 = 0;
  uint64_t v6 = sub_566CC(a1, &v15, (unsigned int *)&v15 + 1);
  if (v6)
  {
    unsigned int v7 = (char *)v6;
    double Current = CFAbsoluteTimeGetCurrent();
    if (!sub_55864(a1, HIDWORD(v15), Current))
    {
      CFArrayRef Mutable = CFArrayCreateMutable(0, (int)v15, &kCFTypeArrayCallBacks);
      sub_3C2F0(Mutable, v7, v15);
      if (sub_CA18(24))
      {
        unsigned int v14 = 0;
        uint64_t v6 = sub_5678C(a1, &v14, (unsigned int *)&v15 + 1);
        if (!v6) {
          goto LABEL_15;
        }
        uint64_t v11 = v6;
        if (!sub_55864(a1, HIDWORD(v15), Current))
        {
          uint64_t v6 = (uint64_t)sub_57468(v11, v14);
          goto LABEL_15;
        }
        if (a2)
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            _os_log_pack_size();
            __chkstk_darwin();
            __error();
            uint64_t v12 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v12 = 136315138;
            *(void *)(v12 + 4) = a2;
            __SC_log_send();
          }
        }
      }
      uint64_t v6 = 0;
      goto LABEL_15;
    }
    if (a2)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v9 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v9 = 136315138;
        *(void *)(v9 + 4) = a2;
        __SC_log_send();
      }
    }
    uint64_t v6 = 0;
  }
  CFArrayRef Mutable = 0;
LABEL_15:
  *a3 = v6;
  return Mutable;
}

void sub_3C254(const __CFArray *a1, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  CFIndex v5 = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v6 = v5;
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      v9.location = 0;
      v9.length = v6;
      if (!CFArrayContainsValue(a1, v9, ValueAtIndex))
      {
        CFArrayAppendValue(a1, ValueAtIndex);
        ++v6;
      }
    }
  }
}

void sub_3C2F0(const __CFArray *a1, char *a2, int a3)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (a3 >= 1)
  {
    CFIndex v7 = Count;
    do
    {
      CFStringRef v8 = sub_53DC0(a2);
      v9.location = 0;
      v9.length = v7;
      if (!CFArrayContainsValue(a1, v9, v8))
      {
        CFArrayAppendValue(a1, v8);
        ++v7;
      }
      CFRelease(v8);
      a2 += 16;
      --a3;
    }
    while (a3);
  }
}

uint64_t sub_3C380(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_8B80(a1);
  uint64_t v7 = sub_557C(a1);
  CFStringRef v8 = (void *)v7;
  if (a2 && !v7)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
LABEL_4:
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t v11 = nullsub_1(v6);
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = v11;
      __SC_log_send();
      return 6;
    }
    return 6;
  }
  uint64_t v12 = 0;
  switch(a2)
  {
    case 0:
      if ((sub_9384(v6) & 8) != 0) {
        return 4;
      }
      if (v8)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled()) {
          goto LABEL_4;
        }
        return 6;
      }
      long long v39 = malloc_type_malloc(0xA8uLL, 0x10700401DDFF929uLL);
      if (!v39)
      {
        sub_4220();
        uint64_t v12 = 5;
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v46 = _os_log_pack_size();
          __chkstk_darwin(v46);
          __error();
          uint64_t v47 = _os_log_pack_fill();
          uint64_t v48 = nullsub_1(v6);
          *(_DWORD *)uint64_t v47 = 136315138;
          *(void *)(v47 + 4) = v48;
          __SC_log_send();
        }
        return v12;
      }
      CFStringRef v8 = v39;
      v39[20] = 0;
      *((_OWORD *)v39 + 8) = 0u;
      *((_OWORD *)v39 + 9) = 0u;
      *((_OWORD *)v39 + 6) = 0u;
      *((_OWORD *)v39 + 7) = 0u;
      *((_OWORD *)v39 + 4) = 0u;
      *((_OWORD *)v39 + 5) = 0u;
      *((_OWORD *)v39 + 2) = 0u;
      *((_OWORD *)v39 + 3) = 0u;
      *(_OWORD *)long long v39 = 0u;
      *((_OWORD *)v39 + 1) = 0u;
      sub_1E5C8(a1, (uint64_t)v39);
      uint64_t v40 = (const char *)nullsub_1(v6);
      snprintf(__str, 0x20uLL, "rtadv-%s", v40);
      int v41 = timer_callout_init(__str);
      v8[1] = v41;
      if (!v41)
      {
        sub_4220();
        uint64_t v12 = 5;
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_78;
        }
LABEL_77:
        uint64_t v49 = _os_log_pack_size();
        __chkstk_darwin(v49);
        __error();
        uint64_t v50 = _os_log_pack_fill();
        uint64_t v51 = nullsub_1(v6);
        *(_DWORD *)uint64_t v50 = 136315138;
        *(void *)(v50 + 4) = v51;
        __SC_log_send();
        uint64_t v12 = 5;
        goto LABEL_78;
      }
      long long v42 = sub_50044(v6);
      void *v8 = v42;
      if (!v42)
      {
        sub_4220();
        uint64_t v12 = 5;
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_78;
        }
        goto LABEL_77;
      }
      if (G_dhcpv6_enabled)
      {
        if (sub_1E4AC(a1))
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v43 = _os_log_pack_size();
            __chkstk_darwin(v43);
            __error();
            uint64_t v44 = _os_log_pack_fill();
            uint64_t v45 = nullsub_1(v6);
            *(_DWORD *)uint64_t v44 = 136315138;
            *(void *)(v44 + 4) = v45;
            __SC_log_send();
          }
        }
        else
        {
          long long v57 = sub_43100(a1);
          v8[3] = v57;
          sub_442E0(v57, (uint64_t)sub_3CE4C, a1);
        }
      }
      sub_3CE70(a1, 0);
      sub_3CF5C(a1);
      return 0;
    case 1:
LABEL_78:
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v52 = _os_log_pack_size();
        __chkstk_darwin(v52);
        __error();
        uint64_t v53 = _os_log_pack_fill();
        uint64_t v54 = nullsub_1(v6);
        *(_DWORD *)uint64_t v53 = 136315138;
        *(void *)(v53 + 4) = v54;
        __SC_log_send();
      }
      if (!sub_1BC54(a1)) {
        sub_3CFB8(a1, 0);
      }
      sub_3D66C(a1, 0x12u);
      sub_50358((void **)v8);
      sub_43EE4(v8 + 3);
      if (v8[1]) {
        timer_callout_free(v8 + 1);
      }
      long long v55 = (const char *)nullsub_1(v6);
      sub_38BD8(v55);
      long long v56 = (const char *)nullsub_1(v6);
      sub_38E18(v56);
      sub_1E5C8(a1, 0);
      free(v8);
      return v12;
    case 3:
    case 8:
    case 11:
      if (*(_DWORD *)(a3 + 4) && !*(_DWORD *)(a3 + 8))
      {
        *(_DWORD *)(v7 + 36) = 0;
        goto LABEL_46;
      }
      if (*(_DWORD *)a3 == 1)
      {
        *(_DWORD *)(v7 + 68) = 0;
        uint64_t v13 = sub_8B80(a1);
        uint64_t v14 = sub_557C(a1);
        uint64_t v15 = (const char *)nullsub_1(v13);
        sub_38BD8(v15);
        CFStringRef v16 = (const char *)nullsub_1(v13);
        sub_38E18(v16);
        unsigned __int16 v17 = (const char *)nullsub_1(v13);
        sub_37D64(v17);
        uint64_t v18 = *(void *)(v14 + 24);
        if (v18)
        {
          sub_43950(v18);
          sub_4389C(*(void *)(v14 + 24));
        }
        sub_3D66C(a1, 0x13u);
        int v19 = 1;
      }
      else
      {
        int v19 = 1;
        if (a2 == 8) {
          goto LABEL_19;
        }
        if (a2 == 11) {
          int v19 = sub_3E3D4(a1);
        }
        if (*((_DWORD *)v8 + 9) == 1 && !v8[2]) {
          int v19 = 0;
        }
      }
      if (a2 != 8) {
        goto LABEL_21;
      }
LABEL_19:
      if (sub_5802C(v6) == 255) {
        *((_DWORD *)v8 + 16) = 1;
      }
LABEL_21:
      if (v19) {
        sub_3E6BC(a1);
      }
LABEL_46:
      uint64_t v24 = v8[3];
      if (v24)
      {
        int v25 = a2;
LABEL_48:
        DHCPv6ClientHandleEvent(v24, v25, (uint64_t *)a3);
      }
      return 0;
    case 4:
      sub_3E704(a1);
      uint64_t v20 = v8[3];
      if (v20) {
        sub_43950(v20);
      }
      return 0;
    case 14:
      uint64_t v21 = *(void *)(v7 + 24);
      if (v21) {
        sub_443CC(v21, a3);
      }
      uint64_t v22 = v8[2];
      if (!v22) {
        return 0;
      }
      uint64_t v12 = 0;
      *(void *)(a3 + 40) = v22;
      return v12;
    case 15:
      uint64_t v23 = *(void *)(v7 + 24);
      if (v23) {
        DHCPv6ClientHandleEvent(v23, 15, (uint64_t *)a3);
      }
      sub_3D724(a1, a3);
      return 0;
    case 16:
      uint64_t v24 = *(void *)(v7 + 24);
      if (!v24) {
        return 0;
      }
      int v25 = 16;
      goto LABEL_48;
    case 18:
      sub_3E774(a1, a3);
      return 0;
    case 19:
      if (!sub_1E150(a1) || a3 && *(_DWORD *)a3) {
        goto LABEL_42;
      }
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v36 = _os_log_pack_size();
        __chkstk_darwin(v36);
        __error();
        uint64_t v37 = _os_log_pack_fill();
        uint64_t v38 = nullsub_1(v6);
        *(_DWORD *)uint64_t v37 = 136315138;
        *(void *)(v37 + 4) = v38;
        __SC_log_send();
      }
      sub_3CFB8(a1, 0);
      return 0;
    case 21:
LABEL_42:
      sub_3E8D8(a1);
      return 0;
    case 22:
      uint64_t v26 = sub_557C(a1);
      CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      long long v28 = Mutable;
      uint64_t v29 = *(unsigned int *)(v26 + 32);
      if (v29 > 3) {
        long long v30 = "<unknown>";
      }
      else {
        long long v30 = off_69028[v29];
      }
      sub_53ED0(Mutable, @"State", v30);
      uint64_t v32 = *(void *)(v26 + 16);
      if (v32)
      {
        int v33 = sub_558A8(v32);
        if (v33)
        {
          int v34 = v33;
          CFDictionarySetValue(v28, @"RouterAdvertisement", v33);
          CFRelease(v34);
        }
      }
      if (sub_1E150(a1)) {
        CFDictionarySetValue(v28, @"CLAT46Enabled", kCFBooleanTrue);
      }
      if (sub_1CEE4(a1)) {
        CFDictionarySetValue(v28, @"CLAT46Active", kCFBooleanTrue);
      }
      CFDictionarySetValue((CFMutableDictionaryRef)a3, @"RTADV", v28);
      CFRelease(v28);
      uint64_t v35 = *(void *)(v26 + 24);
      if (v35) {
        sub_42E6C(v35, (__CFDictionary *)a3);
      }
      return 0;
    default:
      return v12;
  }
}

void sub_3CE4C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 2)
  {
    sub_C120(a2);
  }
  else if (a3 == 1)
  {
    sub_3E8D8(a2);
  }
}

void sub_3CE70(uint64_t a1, const void *a2)
{
  uint64_t v4 = sub_8B80(a1);
  long long v14 = 0uLL;
  unsigned __int8 v13 = 0;
  __int16 v12 = 0;
  uint64_t v5 = sub_557C(a1);
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6 || (sub_56B48(v6, (char *)&v14, &v13, &v12) ? (BOOL v7 = v12 == 0) : (BOOL v7 = 1), v7))
  {
    sub_6DB0((const void **)(v5 + 88));
    if (!*(_DWORD *)(v5 + 76)) {
      return;
    }
    int v8 = 0;
  }
  else
  {
    if (a2)
    {
      uint64_t v9 = *(const void **)(v5 + 88);
      if (v9 && CFEqual(a2, v9)) {
        return;
      }
      CFRetain(a2);
      sub_6DB0((const void **)(v5 + 88));
      *(void *)(v5 + 88) = a2;
    }
    int v8 = 1;
  }
  uint64_t v10 = (const char *)nullsub_1(v4);
  if (sub_382A0(v10, &v14, &v13, v8)) {
    int v11 = v8;
  }
  else {
    int v11 = 0;
  }
  *(_DWORD *)(v5 + 76) = v11;
}

uint64_t sub_3CF5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(sub_557C(a1) + 8);

  return timer_set_relative(v2, 0, 0, (uint64_t)sub_3E948, a1, 0, 0);
}

void sub_3CFB8(uint64_t a1, int a2)
{
  uint64_t v55 = 0;
  memset(v54, 0, sizeof(v54));
  char v53 = 0;
  uint64_t v4 = sub_8B80(a1);
  unsigned int v52 = 0;
  uint64_t v5 = sub_557C(a1);
  uint64_t v6 = v5;
  uint64_t v51 = 0;
  long long v50 = 0u;
  memset(v49, 0, sizeof(v49));
  if (!a2) {
    goto LABEL_4;
  }
  if (*(_DWORD *)(v5 + 56)) {
    return;
  }
  if (!*(void *)(v5 + 16))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v17 = _os_log_pack_size();
      __chkstk_darwin(v17);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      uint64_t v19 = nullsub_1(v4);
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v18 + 4) = v19;
      __SC_log_send();
    }
  }
  else
  {
LABEL_4:
    int v7 = sub_5802C(v4);
    if (v7 == 6)
    {
      uint64_t v8 = 0;
      if (sub_9368(v4)) {
        int v9 = 1;
      }
      else {
        int v9 = 3;
      }
    }
    else if (v7 == 255)
    {
      uint64_t v8 = sub_1ED28(a1);
      int v9 = 2;
    }
    else
    {
      int v9 = 0;
      uint64_t v8 = 0;
    }
    if (dword_7004C == 3 || dword_7004C == 2 && v9 == 2)
    {
      uint64_t v10 = sub_4FFC0();
      if (v10)
      {
        int v11 = (const void *)v10;
        int v48 = a2;
        int v12 = sub_58DC8(v4);
        sub_399B8((uint64_t)v54, v12);
        if (SDWORD2(v54[0]) >= 1)
        {
          int v13 = 0;
          int v14 = 0;
          uint64_t v15 = (unsigned char *)(*(void *)&v54[0] + 20);
          while (1)
          {
            if (*(v15 - 20) == 254 && (*(v15 - 19) & 0xC0) == 0x80)
            {
              if ((*v15 & 4) != 0) {
                IPv6AWDReportSetLinkLocalAddressDuplicated(v11);
              }
              goto LABEL_27;
            }
            if ((*v15 & 0x40) != 0) {
              break;
            }
LABEL_27:
            ++v14;
            v15 += 32;
            if (v14 >= SDWORD2(v54[0])) {
              goto LABEL_35;
            }
          }
          IPv6AWDReportSetAutoconfAddressAcquired(v11);
          int v16 = *(_DWORD *)v15;
          if ((*(_DWORD *)v15 & 4) != 0)
          {
            IPv6AWDReportSetAutoconfAddressDuplicated(v11);
            int v16 = *(_DWORD *)v15;
            if ((*(_DWORD *)v15 & 0x10) == 0)
            {
LABEL_24:
              if ((v16 & 8) == 0)
              {
LABEL_26:
                int v13 = 1;
                goto LABEL_27;
              }
LABEL_25:
              IPv6AWDReportSetAutoconfAddressDetached(v11);
              goto LABEL_26;
            }
          }
          else if ((v16 & 0x10) == 0)
          {
            goto LABEL_24;
          }
          IPv6AWDReportSetAutoconfAddressDeprecated(v11);
          if ((*(_DWORD *)v15 & 8) == 0) {
            goto LABEL_26;
          }
          goto LABEL_25;
        }
        int v13 = 0;
LABEL_35:
        sub_3A038((uint64_t)v54);
        if (v8) {
          IPv6AWDReportSetAPNName(v11, v8);
        }
        if (v13)
        {
          uint64_t v20 = *(void *)(v6 + 16);
          if (v20)
          {
            LODWORD(v56) = 0;
            uint64_t v21 = sub_56438(v20);
            uint64_t v22 = sub_5662C(*(void *)(v6 + 16), &v56);
            IPv6AWDReportSetRouterLifetime(v11, v21);
            IPv6AWDReportSetPrefixPreferredLifetime(v11, v22);
            IPv6AWDReportSetPrefixValidLifetime(v11, v56);
            if (v9 == 2)
            {
              if (v21 != 0xFFFF) {
                IPv6AWDReportSetRouterLifetimeNotMaximum(v11);
              }
              if (v56 != -1) {
                IPv6AWDReportSetPrefixLifetimeNotInfinite(v11);
              }
            }
          }
        }
        if (sub_1E150(a1)) {
          IPv6AWDReportSetXLAT464Enabled(v11);
        }
        uint64_t v23 = *(void *)(v6 + 16);
        if (v23 && sub_566CC(v23, 0, 0))
        {
          IPv6AWDReportSetAutoconfRDNSS(v11);
          if (sub_5678C(*(void *)(v6 + 16), 0, 0)) {
            IPv6AWDReportSetAutoconfDNSSL(v11);
          }
          int v24 = 1;
        }
        else
        {
          int v24 = 0;
        }
        uint64_t v25 = *(void *)(v6 + 24);
        if (v25 && sub_42DE4(v25, &v53))
        {
          IPv6AWDReportSetDHCPv6DNSServers(v11);
          if (v53) {
            IPv6AWDReportSetDHCPv6DNSDomainList(v11);
          }
          int v24 = 1;
        }
        if (v48)
        {
          double v26 = sub_5585C(*(void *)(v6 + 16));
          double v27 = *(double *)(v6 + 40);
          if (v26 > v27) {
            IPv6AWDReportSetAutoconfAddressAcquisitionSeconds(v11, (v26 - v27));
          }
          double v28 = *(double *)(v6 + 48);
          if (v28 != 0.0)
          {
            double v29 = *(double *)(v6 + 40);
            if (v28 > v29) {
              IPv6AWDReportSetDHCPv6AddressAcquisitionSeconds(v11, (v28 - v29));
            }
          }
          if (v24)
          {
            double current_time = timer_get_current_time();
            double v31 = *(double *)(v6 + 40);
            if (current_time > v31) {
              IPv6AWDReportSetDNSConfigurationAcquisitionSeconds(v11, (current_time - v31));
            }
          }
          int v32 = 1;
        }
        else
        {
          if (*(_DWORD *)(v6 + 80)) {
            IPv6AWDReportSetRouterLifetimeZero(v11);
          }
          if (sub_1E470(a1)) {
            IPv6AWDReportSetXLAT464PLATDiscoveryFailed(v11);
          }
          int v32 = 0;
        }
        *(_DWORD *)(v6 + 56) = v32;
        uint64_t v33 = sub_8B80(a1);
        if (sub_5802C(v33) == 255)
        {
          uint64_t v34 = sub_557C(a1);
          if (*(void *)(v34 + 16))
          {
            uint64_t v35 = v34;
            uint64_t v56 = 0;
            uint64_t v57 = 0;
            int v36 = sub_58DC8(v33);
            if (sub_39730(v36, (uint64_t)&v56))
            {
              uint64_t v37 = (void *)sub_558A0(*(void *)(v35 + 16));
              if (*v37 == v56 && v37[1] == v57) {
                IPv6AWDReportSetRouterSourceAddressCollision(v11);
              }
            }
          }
        }
        int v39 = *(_DWORD *)(v6 + 36);
        if (v39 >= 3) {
          uint64_t v40 = 3;
        }
        else {
          uint64_t v40 = v39;
        }
        IPv6AWDReportSetRouterSolicitationCount(v11, v40);
        int v41 = (const char *)nullsub_1(v4);
        if (!sub_38F38(v41, (uint64_t)v49))
        {
          if (*((void *)&v50 + 1)) {
            IPv6AWDReportSetExpiredPrefixCount(v11);
          }
          if (v51) {
            IPv6AWDReportSetExpiredDefaultRouterCount(v11);
          }
        }
        int v42 = sub_58DC8(v4);
        uint64_t v43 = sub_389FC(v42, &v52);
        if ((int)v43 >= 1)
        {
          IPv6AWDReportSetDefaultRouterCount(v11, v43);
          IPv6AWDReportSetPrefixCount(v11, v52);
        }
        if (*(_DWORD *)(v6 + 68)) {
          IPv6AWDReportSetAutoconfRestarted(v11);
        }
        nullsub_1(v11);
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v44 = _os_log_pack_size();
          __chkstk_darwin(v44);
          __error();
          uint64_t v45 = _os_log_pack_fill();
          uint64_t v46 = nullsub_1(v4);
          uint64_t v47 = "success";
          *(_DWORD *)uint64_t v45 = 136315650;
          *(void *)(v45 + 4) = v46;
          if (!v48) {
            uint64_t v47 = "failure";
          }
          *(_WORD *)(v45 + 12) = 2080;
          *(void *)(v45 + 14) = v47;
          *(_WORD *)(v45 + 22) = 2112;
          *(void *)(v45 + 24) = v11;
          __SC_log_send();
        }
        CFRelease(v11);
      }
    }
  }
}

void sub_3D66C(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = sub_557C(a1);
  sub_3EA7C(a1, 0);
  *(_DWORD *)(v4 + 36) = 0;
  sub_6DB0((const void **)(v4 + 16));
  sub_3EBE8(v4);
  sub_3EC38(a1);
  uint64_t v5 = sub_8B80(a1);
  uint64_t v6 = (const char *)nullsub_1(v5);
  sub_37D64(v6);
  sub_3CE70(a1, 0);
  sub_3EC88(a1, 0);
  sub_9028(a1, a2);
  sub_1E168(a1, 0);
  *(_DWORD *)(v4 + 80) = 0;

  sub_BEF8(a1, 0);
}

void sub_3D724(uint64_t a1, uint64_t a2)
{
  uint64_t v73 = sub_8B80(a1);
  uint64_t v4 = sub_557C(a1);
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t v74 = a2;
  if (__SC_log_enabled())
  {
    uint64_t v5 = _os_log_pack_size();
    __chkstk_darwin(v5);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v6 + 4) = "rtadv_address_changed_common";
    __SC_log_send();
    a2 = v74;
  }
  uint64_t v7 = sub_3A128(a2);
  if (!v7)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
    goto LABEL_24;
  }
  int v8 = *(_DWORD *)(v7 + 20);
  if ((v8 & 6) != 0)
  {
    sub_4220();
    if ((v8 & 4) != 0)
    {
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        return;
      }
    }
    else
    {
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        return;
      }
    }
LABEL_24:
    uint64_t v23 = _os_log_pack_size();
    __chkstk_darwin(v23);
    __error();
    uint64_t v24 = _os_log_pack_fill();
    uint64_t v25 = nullsub_1(v73);
    *(_DWORD *)uint64_t v24 = 136315138;
    *(void *)(v24 + 4) = v25;
    __SC_log_send();
    return;
  }
  *(_DWORD *)(v4 + 60) = (*(_DWORD *)(v7 + 20) & 0x202) == 0;
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t v9 = __SC_log_enabled();
  if (v9)
  {
    uint64_t v10 = _os_log_pack_size();
    __chkstk_darwin(v10);
    __error();
    uint64_t v11 = _os_log_pack_fill();
    uint64_t v12 = nullsub_1(v73);
    int v13 = "";
    if (!*(_DWORD *)(v4 + 60)) {
      int v13 = "not ";
    }
    *(_DWORD *)uint64_t v11 = 136315394;
    *(void *)(v11 + 4) = v12;
    *(_WORD *)(v11 + 12) = 2080;
    *(void *)(v11 + 14) = v13;
    uint64_t v9 = __SC_log_send();
  }
  int v14 = *(_DWORD *)(v4 + 36);
  if (!v14)
  {
    uint64_t v9 = sub_9030(a1);
    if (!v9 || (v9 & 0xFFFFFFFF00000000) == 0x100000000)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v15 = _os_log_pack_size();
        __chkstk_darwin(v15);
        __error();
        uint64_t v16 = _os_log_pack_fill();
        uint64_t v17 = nullsub_1(v73);
        *(_DWORD *)uint64_t v16 = 136315138;
        *(void *)(v16 + 4) = v17;
        __SC_log_send();
      }
      sub_3F58C(a1, 0, 0);
    }
  }
  if (!(*(_DWORD *)(v4 + 64) | v14)) {
    return;
  }
  int v68 = v64;
  long long v82 = 0u;
  memset(v83, 0, 184);
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  uint64_t v18 = v74;
  __chkstk_darwin(v9);
  uint64_t v20 = (int8x16_t *)&v64[-32 * v19];
  unsigned int v75 = 0;
  sub_3A07C((uint64_t)v83);
  uint64_t v22 = *(void *)(v4 + 24);
  if (v22)
  {
    sub_4447C(v22, (uint64_t)v83);
    BOOL v65 = LODWORD(v83[1]) != 0;
  }
  else
  {
    BOOL v65 = 0;
  }
  uint64_t v67 = a1;
  if (*(int *)(v18 + 8) <= 0)
  {
    sub_3A038((uint64_t)v83);
    LODWORD(v26) = 0;
    int v37 = 0;
    int v38 = 0;
LABEL_42:
    if (*(_DWORD *)(v4 + 72))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v39 = _os_log_pack_size();
        __chkstk_darwin(v39);
        __error();
        uint64_t v40 = _os_log_pack_fill();
        uint64_t v41 = nullsub_1(v73);
        *(_DWORD *)uint64_t v40 = 136315138;
        *(void *)(v40 + 4) = v41;
        __SC_log_send();
      }
      uint64_t v42 = v67;
      sub_3CFB8(v67, 0);
      sub_3FB5C(v42, 0);
    }
    else
    {
      int v28 = 0;
      if (v26) {
        goto LABEL_47;
      }
    }
    return;
  }
  uint64_t v66 = v4;
  uint64_t v26 = 0;
  int v27 = 0;
  uint64_t v72 = 0;
  int v28 = 0;
  uint64_t v29 = *(void *)v18;
  *(void *)&long long v21 = 136315138;
  long long v69 = v21;
  do
  {
    unsigned int v30 = *(_DWORD *)(v29 + 20);
    unsigned int v31 = v30 & 0x40;
    if ((v30 & 6) != 0)
    {
      if ((v30 & 4) != 0)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v32 = _os_log_pack_size();
          int v70 = v64;
          __chkstk_darwin(v32);
          uint64_t v71 = v26;
          __error();
          uint64_t v33 = _os_log_pack_fill();
          uint64_t v34 = nullsub_1(v73);
          *(_DWORD *)uint64_t v33 = v69;
          *(void *)(v33 + 4) = v34;
          uint64_t v18 = v74;
          uint64_t v26 = v71;
          __SC_log_send();
        }
      }
    }
    else
    {
      if ((v30 & 0x40) != 0)
      {
        LODWORD(v72) = ((v30 >> 4) & 1) + v72;
        HIDWORD(v72) += (v30 >> 3) & 1;
LABEL_36:
        int8x16_t v35 = *(int8x16_t *)(v29 + 16);
        int v36 = &v20[2 * (int)v26];
        *int v36 = *(int8x16_t *)v29;
        v36[1] = v35;
        uint64_t v26 = (v26 + 1);
        goto LABEL_37;
      }
      if (sub_3A0D8(v83, v29)) {
        goto LABEL_36;
      }
    }
LABEL_37:
    v28 += v31 >> 6;
    ++v27;
    v29 += 32;
  }
  while (v27 < *(_DWORD *)(v18 + 8));
  sub_3A038((uint64_t)v83);
  uint64_t v4 = v66;
  int v38 = v72;
  int v37 = HIDWORD(v72);
  if (!v28) {
    goto LABEL_42;
  }
  if (!v26) {
    return;
  }
LABEL_47:
  int v43 = v26;
  if (v28)
  {
    if (v37 + v38 == v28)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v44 = _os_log_pack_size();
        __chkstk_darwin(v44);
        __error();
        uint64_t v45 = _os_log_pack_fill();
        uint64_t v46 = nullsub_1(v73);
        *(_DWORD *)uint64_t v45 = 136315138;
        *(void *)(v45 + 4) = v46;
        __SC_log_send();
      }
    }
  }
  *(_DWORD *)(v4 + 72) = v28 != 0;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v80 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  if (*(void *)(v4 + 16))
  {
    uint64_t v47 = *(void *)(v4 + 24);
    uint64_t v48 = v67;
    if (v47 && sub_443CC(v47, (uint64_t)&v76) && v65 && *(double *)(v4 + 48) == 0.0) {
      *(CFAbsoluteTime *)(v4 + 48) = timer_get_current_time();
    }
    if (sub_5226C(v4 + 104)) {
      *((void *)&v82 + 1) = sub_5227C(v4 + 104);
    }
    int v49 = sub_1E150(v48);
    *((void *)&v78 + 1) = *(void *)(v4 + 16);
    *(void *)&long long v80 = sub_3FD5C(*((uint64_t *)&v78 + 1));
    if ((void)v80 || sub_1E460(v48))
    {
      sub_1E2F4(v48, 1);
      if ((void)v80) {
        sub_3CE70(v48, (const void *)v80);
      }
      if (sub_1CCCC(v48)) {
        goto LABEL_64;
      }
      char v53 = (const void *)sub_1E5AC(v48);
      if (sub_3FEA8(v48)) {
        *((void *)&v79 + 1) = sub_40428(v53, *(unsigned __int8 *)(v4 + 160));
      }
    }
    else
    {
      sub_1E2F4(v48, 0);
      if (v49 || sub_5802C(v73) != 255) {
        LODWORD(v79) = sub_1E488(v48) == 0;
      }
LABEL_64:
      sub_3CE70(v48, 0);
      if (*(unsigned char *)(v4 + 160))
      {
        sub_3EC88(v48, 0);
        sub_1E168(v48, 0);
      }
    }
    uint64_t v51 = (void *)sub_558A0(*(void *)(v4 + 16));
    uint64_t v54 = *(void *)(v4 + 16);
    if (v54 && (v85 = 0, (uint64_t v55 = sub_56448(v54, &v85)) != 0))
    {
      uint64_t v56 = (uint64_t)v55;
      int8x16_t v84 = *v20;
      uint64_t v57 = v20[1].u32[0];
      sub_3876C(&v84, v20[1].i32[0]);
      CFArrayRef Mutable = CFStringCreateMutable(0, 0);
      long long v58 = inet_ntop(30, &v84, v86, 0x2Eu);
      CFStringAppendFormat(Mutable, 0, @"IPv6.Prefix=%s/%d;IPv6.RouterHardwareAddress=", v58, v57);
      sub_540F8(Mutable, v56, v85, 58);
    }
    else
    {
      CFArrayRef Mutable = 0;
    }
    unsigned int v75 = Mutable;
    uint64_t v52 = 1;
  }
  else
  {
    CFArrayRef Mutable = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v48 = v67;
  }
  sub_1C3E4(v48, v20, v43, v51, v52, (uint64_t)&v76, Mutable);
  sub_6DB0((const void **)&v75);
  sub_6DB0((const void **)&v79 + 1);
  sub_6DB0((const void **)&v80);
  if (*(void *)(v4 + 16))
  {
    uint64_t v59 = *(void *)(sub_557C(v48) + 24);
    if (!v59 || !sub_42DDC(v59)) {
      sub_3CFB8(v48, 1);
    }
    uint64_t v60 = *(void *)(v4 + 24);
    if (v60 && sub_42DDC(v60))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v61 = _os_log_pack_size();
        __chkstk_darwin(v61);
        __error();
        uint64_t v62 = _os_log_pack_fill();
        uint64_t v63 = nullsub_1(v73);
        *(_DWORD *)uint64_t v62 = 136315138;
        *(void *)(v62 + 4) = v63;
        __SC_log_send();
      }
    }
    else
    {
      sub_BEF8(v48, 0);
    }
  }
  if (*(_DWORD *)(v4 + 64))
  {
    sub_40528(v48, (uint64_t)v20, v43);
    *(_DWORD *)(v4 + 64) = 0;
  }
}

uint64_t sub_3E3D4(uint64_t a1)
{
  __int16 v18 = 0;
  uint64_t v2 = sub_8B80(a1);
  uint64_t v3 = sub_557C(a1);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t v4 = v3;
  double current_time = timer_get_current_time();
  double v6 = sub_56958(*(void *)(v4 + 16), (BOOL *)&v18 + 1, (char *)&v18, current_time);
  if (!HIBYTE(v18)) {
    return 0;
  }
  double v7 = v6;
  uint64_t result = sub_5226C(v4 + 104);
  if (!result) {
    return result;
  }
  if (!(_BYTE)v18)
  {
    double v12 = sub_52710(v4 + 104);
    if (v12 != 0.0)
    {
      double v13 = v12;
      if (v12 < v7)
      {
        sub_410EC(a1);
        double v7 = v13;
      }
    }
    if (v7 != 0.0)
    {
      CFDateRef v14 = CFDateCreate(0, v7);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v15 = _os_log_pack_size();
        __chkstk_darwin(v15);
        __error();
        uint64_t v16 = _os_log_pack_fill();
        uint64_t v17 = nullsub_1(v2);
        *(_DWORD *)uint64_t v16 = 136315650;
        *(void *)(v16 + 4) = "rtadv_handle_wake";
        *(_WORD *)(v16 + 12) = 2080;
        *(void *)(v16 + 14) = v17;
        *(_WORD *)(v16 + 22) = 2112;
        *(void *)(v16 + 24) = v14;
        __SC_log_send();
      }
      CFRelease(v14);
      timer_callout_set_absolute(*(void *)(v4 + 8), (uint64_t)sub_408E4, a1, 2, 0, v7);
    }
    return 0;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v9 = _os_log_pack_size();
    __chkstk_darwin(v9);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    uint64_t v11 = nullsub_1(v2);
    *(_DWORD *)uint64_t v10 = 136315138;
    *(void *)(v10 + 4) = v11;
    __SC_log_send();
  }
  timer_cancel(*(void *)(v4 + 8));
  return 1;
}

void sub_3E6BC(uint64_t a1)
{
  *(_DWORD *)(sub_557C(a1) + 36) = 0;
  sub_3E8D8(a1);

  sub_BEF8(a1, 1);
}

void sub_3E704(uint64_t a1)
{
  uint64_t v2 = sub_8B80(a1);
  sub_3EA7C(a1, 0);
  uint64_t v3 = sub_557C(a1);
  uint64_t v4 = (const char *)nullsub_1(v2);
  sub_38BD8(v4);
  uint64_t v5 = (const char *)nullsub_1(v2);
  sub_38E18(v5);
  sub_3D66C(a1, 0xCu);
  *(_DWORD *)(v3 + 68) = 0;
}

void sub_3E774(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_8B80(a1);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v5 = _os_log_pack_size();
    __chkstk_darwin(v5);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    uint64_t v7 = nullsub_1(v4);
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v6 + 4) = v7;
    __SC_log_send();
  }
  sub_3CFB8(a1, 0);
  if (*(_DWORD *)(a2 + 4)) {
    sub_3F58C(a1, 0, 0);
  }
  else {
    sub_3FB5C(a1, 0);
  }
}

void sub_3E8D8(uint64_t a1)
{
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  uint64_t v2 = sub_8B80(a1);
  int v3 = sub_58DC8(v2);
  sub_399B8((uint64_t)v4, v3);
  sub_3D724(a1, (uint64_t)v4);
  sub_3A038((uint64_t)v4);
}

void sub_3E948(uint64_t a1)
{
  uint64_t v2 = sub_8B80(a1);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3);
    __error();
    uint64_t v4 = _os_log_pack_fill();
    uint64_t v5 = nullsub_1(v2);
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v4 + 4) = v5;
    __SC_log_send();
  }
  sub_3E6BC(a1);
}

uint64_t sub_3EA7C(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = sub_8B80(a1);
  uint64_t v5 = sub_557C(a1);
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    uint64_t v9 = nullsub_1(v4);
    if (a2 > 3) {
      uint64_t v10 = "<unknown>";
    }
    else {
      uint64_t v10 = off_69028[a2];
    }
    *(_DWORD *)uint64_t v8 = 136315394;
    *(void *)(v8 + 4) = v9;
    *(_WORD *)(v8 + 12) = 2080;
    *(void *)(v8 + 14) = v10;
    uint64_t result = __SC_log_send();
  }
  *(_DWORD *)(v5 + 32) = a2;
  return result;
}

void sub_3EBE8(uint64_t a1)
{
  uint64_t v2 = (const void **)(a1 + 96);
  if (*(void *)(a1 + 96))
  {
    PvDInfoRequestCancel();
    sub_6DB0(v2);
  }

  sub_52150(a1 + 104, 0);
}

uint64_t sub_3EC38(uint64_t a1)
{
  BOOL v1 = (uint64_t *)sub_557C(a1);
  timer_cancel(v1[1]);
  uint64_t result = *v1;
  if (*v1)
  {
    return sub_508B8(result);
  }
  return result;
}

uint64_t sub_3EC88(uint64_t a1, int a2)
{
  uint64_t v39 = 0;
  uint64_t v4 = sub_8B80(a1);
  uint64_t v5 = sub_557C(a1);
  uint64_t v6 = sub_354D0();
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (const char *)nullsub_1(v4);
    sub_35BEC(v8, 0);
    int v10 = *(unsigned __int8 *)(v5 + 160);
    if (!*(unsigned char *)(v5 + 160))
    {
LABEL_12:
      if (a2) {
        sub_3F3B4(v7, v4, v10, v9);
      }
      uint64_t v33 = nullsub_1(v4);
      sub_354E0(v7, v33, &v39);
      if ((v39 & 0x1000) != 0)
      {
        uint64_t v34 = nullsub_1(v4);
        sub_39728(v34);
      }
      close(v7);
      return sub_1BBF0(a1);
    }
    uint64_t v11 = nullsub_1(v4);
    sub_3F0C8(v11, v10);
    *(unsigned char *)(v5 + 160) = 0;
    unsigned int v12 = bswap32(v10 | 0xC0000000);
    double v13 = (const char *)nullsub_1(v4);
    if (sub_364C8(v7, v13, v12))
    {
      int v14 = *__error();
      uint64_t v15 = sub_4220();
      int v16 = _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v17 = _os_log_pack_size();
        unsigned int v37 = HIBYTE(v12);
        int v38 = v35;
        __chkstk_darwin(v17);
        int v36 = v16;
        __error();
        uint64_t v18 = _os_log_pack_fill();
        uint64_t v19 = nullsub_1(v4);
        v35[1] = v15;
        int v20 = a2;
        uint64_t v21 = v19;
        uint64_t v22 = strerror(v14);
        *(_DWORD *)uint64_t v18 = 136316674;
        *(void *)(v18 + 4) = v21;
        a2 = v20;
        *(_WORD *)(v18 + 12) = 1024;
        *(_DWORD *)(v18 + 14) = 192;
        *(_WORD *)(v18 + 18) = 1024;
        *(_DWORD *)(v18 + 20) = 0;
        *(_WORD *)(v18 + 24) = 1024;
        *(_DWORD *)(v18 + 26) = 0;
        *(_WORD *)(v18 + 30) = 1024;
        *(_DWORD *)(v18 + 32) = v37;
        *(_WORD *)(v18 + 36) = 2080;
        *(void *)(v18 + 38) = v22;
        *(_WORD *)(v18 + 46) = 1024;
        *(_DWORD *)(v18 + 48) = v14;
LABEL_10:
        __SC_log_send();
      }
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v29 = _os_log_pack_size();
        int v38 = v35;
        __chkstk_darwin(v29);
        unsigned int v37 = HIBYTE(v12);
        __error();
        uint64_t v30 = _os_log_pack_fill();
        uint64_t v31 = nullsub_1(v4);
        *(_DWORD *)uint64_t v30 = 136316162;
        *(void *)(v30 + 4) = v31;
        *(_WORD *)(v30 + 12) = 1024;
        *(_DWORD *)(v30 + 14) = 192;
        *(_WORD *)(v30 + 18) = 1024;
        *(_DWORD *)(v30 + 20) = 0;
        *(_WORD *)(v30 + 24) = 1024;
        *(_DWORD *)(v30 + 26) = 0;
        *(_WORD *)(v30 + 30) = 1024;
        *(_DWORD *)(v30 + 32) = v37;
        goto LABEL_10;
      }
    }
    int v32 = sub_58DC8(v4);
    sub_3B01C(v32, 0, v12);
    goto LABEL_12;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v24 = _os_log_pack_size();
    __chkstk_darwin(v24);
    __error();
    uint64_t v25 = _os_log_pack_fill();
    uint64_t v26 = __error();
    int v27 = strerror(*v26);
    int v28 = *__error();
    *(_DWORD *)uint64_t v25 = 136315394;
    *(void *)(v25 + 4) = v27;
    *(_WORD *)(v25 + 12) = 1024;
    *(_DWORD *)(v25 + 14) = v28;
    return __SC_log_send();
  }
  return result;
}

uint64_t sub_3F0C8(uint64_t a1, int a2)
{
  if ((a2 - 6) <= 0xFBu)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
LABEL_9:
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 136315394;
    *(void *)(v8 + 4) = a1;
    *(_WORD *)(v8 + 12) = 1024;
    *(_DWORD *)(v8 + 14) = a2;
    return __SC_log_send();
  }
  uint64_t v5 = (a2 - 2);
  int v6 = word_70278[v5];
  if (!word_70278[v5])
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  word_70278[v5] = v6 - 1;
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (v6 == 1)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  if (result)
  {
    uint64_t v9 = _os_log_pack_size();
    __chkstk_darwin(v9);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    int v11 = word_70278[v5];
    *(_DWORD *)uint64_t v10 = 136315650;
    *(void *)(v10 + 4) = a1;
    *(_WORD *)(v10 + 12) = 1024;
    *(_DWORD *)(v10 + 14) = a2;
    *(_WORD *)(v10 + 18) = 1024;
    *(_DWORD *)(v10 + 20) = v11;
    return __SC_log_send();
  }
  return result;
}

uint64_t sub_3F3B4(uint64_t result, uint64_t a2, int a3, __n128 a4)
{
  int v6 = result;
  uint64_t v15 = 0;
  int v7 = 2;
  a4.n128_u64[0] = 136316162;
  __n128 v14 = a4;
  do
  {
    if (a3 != v7)
    {
      unsigned int v8 = bswap32(v7 | 0xC0000000);
      uint64_t v9 = (const char *)nullsub_1(a2);
      uint64_t result = sub_364C8(v6, v9, v8 & 0x7F000000 | 0xC0);
      if (!result)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v10 = _os_log_pack_size();
          int v16 = &v14;
          __chkstk_darwin(v10);
          __error();
          uint64_t v11 = _os_log_pack_fill();
          uint64_t v12 = nullsub_1(a2);
          *(_DWORD *)uint64_t v11 = v14.n128_u32[0];
          *(void *)(v11 + 4) = v12;
          *(_WORD *)(v11 + 12) = 1024;
          *(_DWORD *)(v11 + 14) = 192;
          *(_WORD *)(v11 + 18) = 1024;
          *(_DWORD *)(v11 + 20) = 0;
          *(_WORD *)(v11 + 24) = 1024;
          *(_DWORD *)(v11 + 26) = 0;
          *(_WORD *)(v11 + 30) = 1024;
          *(_DWORD *)(v11 + 32) = HIBYTE(v8);
          __SC_log_send();
        }
        int v13 = sub_58DC8(a2);
        uint64_t result = sub_3B01C(v13, v15, v8 & 0x7F000000 | 0xC0);
      }
    }
    ++v7;
  }
  while (v7 != 6);
  return result;
}

void sub_3F58C(uint64_t a1, int a2, const void *a3)
{
  uint64_t v6 = sub_8B80(a1);
  uint64_t v7 = sub_557C(a1);
  if (a2 == 5)
  {
    if (sub_56438((uint64_t)a3))
    {
      sub_408E4(a1, 0, a3);
    }
  }
  else
  {
    uint64_t v8 = v7;
    if (a2 != 2)
    {
      if (a2) {
        return;
      }
      sub_3EA7C(a1, 1u);
      sub_1E498(a1);
      sub_BEF8(a1, 1);
      *(CFAbsoluteTime *)(v8 + 40) = timer_get_current_time();
      *(void *)(v8 + 48) = 0;
      *(_DWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 80) = 0;
      sub_1CD5C(a1);
      sub_3EC88(a1, 1);
      sub_1E168(a1, 0);
      sub_3EC38(a1);
      sub_50500(*(void **)v8, (uint64_t)sub_3F58C, a1, 5);
      uint64_t v9 = (char *)nullsub_1(v6);
      BOOL v10 = sub_1ED30(a1);
      if (sub_378B4(v9, v10))
      {
        sub_3D66C(a1, 6u);
        return;
      }
      *(_DWORD *)(v8 + 36) = 0;
      sub_6DB0((const void **)(v8 + 16));
      *(_DWORD *)(v8 + 72) = 0;
    }
    int v11 = *(_DWORD *)(v8 + 36);
    *(_DWORD *)(v8 + 36) = v11 + 1;
    if (v11 < 1) {
      goto LABEL_26;
    }
    if (sub_9030(a1) == 1)
    {
      sub_3E704(a1);
      return;
    }
    if (sub_1CCCC(a1))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v12 = _os_log_pack_size();
        __chkstk_darwin(v12);
        __error();
        uint64_t v13 = _os_log_pack_fill();
        uint64_t v14 = nullsub_1(v6);
        *(_DWORD *)uint64_t v13 = 136315138;
        *(void *)(v13 + 4) = v14;
        __SC_log_send();
      }
      sub_BEF8(a1, 0);
    }
    int v15 = *(_DWORD *)(v8 + 36);
    if (v15 < 4)
    {
LABEL_26:
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v19 = _os_log_pack_size();
        __chkstk_darwin(v19);
        __error();
        uint64_t v20 = _os_log_pack_fill();
        uint64_t v21 = nullsub_1(v6);
        int v22 = *(_DWORD *)(v8 + 36);
        *(_DWORD *)uint64_t v20 = 136315650;
        *(void *)(v20 + 4) = v21;
        *(_WORD *)(v20 + 12) = 1024;
        *(_DWORD *)(v20 + 14) = v22;
        *(_WORD *)(v20 + 18) = 1024;
        *(_DWORD *)(v20 + 20) = 3;
        __SC_log_send();
      }
      unsigned int v23 = sub_50BD4(*(void *)v8, *(_DWORD *)(v8 + 60) != 0);
      if (v23 > 0x32 || ((1 << v23) & 0x6000000000041) == 0)
      {
        int v25 = v23;
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v26 = _os_log_pack_size();
          __chkstk_darwin(v26);
          __error();
          uint64_t v27 = _os_log_pack_fill();
          uint64_t v28 = nullsub_1(v6);
          uint64_t v29 = strerror(v25);
          *(_DWORD *)uint64_t v27 = 136315394;
          *(void *)(v27 + 4) = v28;
          *(_WORD *)(v27 + 12) = 2080;
          *(void *)(v27 + 14) = v29;
          __SC_log_send();
        }
      }
      if (sub_5802C(v6) == 255) {
        int v18 = 0;
      }
      else {
        int v18 = sub_9054(0, 999999);
      }
      uint64_t v16 = *(void *)(v8 + 8);
      uint64_t v17 = 4;
      goto LABEL_36;
    }
    if (v15 == 5)
    {
      sub_C120(a1);
      sub_BEF8(a1, 0);
      return;
    }
    if (v15 == 4)
    {
      uint64_t v16 = *(void *)(v8 + 8);
      uint64_t v17 = 20;
      int v18 = 0;
LABEL_36:
      timer_set_relative(v16, v17, v18, (uint64_t)sub_3F58C, a1, 2, 0);
    }
  }
}

void sub_3FB5C(uint64_t a1, int a2)
{
  uint64_t v4 = sub_8B80(a1);
  uint64_t v5 = sub_557C(a1);
  uint64_t v6 = v5;
  if (a2 == 2)
  {
    ++*(_DWORD *)(v5 + 68);
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t v11 = nullsub_1(v4);
      int v12 = *(_DWORD *)(v6 + 68);
      *(_DWORD *)uint64_t v10 = 136315394;
      *(void *)(v10 + 4) = v11;
      *(_WORD *)(v10 + 12) = 1024;
      *(_DWORD *)(v10 + 14) = v12;
      __SC_log_send();
    }
    sub_3F58C(a1, 0, 0);
  }
  else if (!a2)
  {
    sub_3EA7C(a1, 3u);
    int v7 = sub_9054(0, 999999);
    uint64_t v8 = *(void *)(v6 + 8);
    timer_set_relative(v8, 1, v7, (uint64_t)sub_3FB5C, a1, 2, 0);
  }
}

CFStringRef sub_3FD5C(uint64_t a1)
{
  unsigned __int16 v6 = 0;
  CFStringRef v1 = sub_56C00(a1, &v6);
  CFStringRef v7 = v1;
  if (v1)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v2 = _os_log_pack_size();
      __chkstk_darwin(v2);
      __error();
      uint64_t v3 = _os_log_pack_fill();
      int v4 = v6;
      *(_DWORD *)uint64_t v3 = 138412546;
      *(void *)(v3 + 4) = v1;
      *(_WORD *)(v3 + 12) = 1024;
      *(_DWORD *)(v3 + 14) = v4;
      __SC_log_send();
    }
    if (!v6)
    {
      sub_6DB0((const void **)&v7);
      return v7;
    }
  }
  return v1;
}

uint64_t sub_3FEA8(uint64_t a1)
{
  uint64_t v2 = sub_8B80(a1);
  uint64_t v3 = sub_557C(a1);
  if (sub_1CEE4(a1)) {
    return 1;
  }
  int v5 = sub_354D0();
  if (v5 < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v24 = _os_log_pack_size();
      __chkstk_darwin(v24);
      __error();
      uint64_t v25 = _os_log_pack_fill();
      uint64_t v26 = __error();
      uint64_t v27 = strerror(*v26);
      int v28 = *__error();
      *(_DWORD *)uint64_t v25 = 136315394;
      *(void *)(v25 + 4) = v27;
      *(_WORD *)(v25 + 12) = 1024;
      *(_DWORD *)(v25 + 14) = v28;
      __SC_log_send();
    }
    return 0;
  }
  int v6 = v5;
  CFStringRef v7 = (const char *)nullsub_1(v2);
  sub_35BEC(v7, 1);
  uint64_t v8 = nullsub_1(v2);
  int v9 = sub_42238(v8);
  int v50 = bswap32(v9 | 0xC0000000);
  uint64_t v10 = (const char *)nullsub_1(v2);
  int v11 = sub_3655C(v6, v10, v50, &G_ip_broadcast, &v50);
  if (v11)
  {
    int v12 = v11;
    uint64_t v13 = sub_4220();
    int v14 = _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v15 = _os_log_pack_size();
      uint64_t v48 = v46;
      __chkstk_darwin(v15);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      uint64_t v17 = nullsub_1(v2);
      uint64_t v47 = v13;
      int v18 = v9;
      int v19 = v50;
      int v20 = BYTE1(v50);
      v46[1] = v14;
      int v21 = v6;
      int v22 = BYTE2(v50);
      v46[0] = HIBYTE(v50);
      unsigned int v23 = strerror(v12);
      *(_DWORD *)uint64_t v16 = 136316674;
      *(void *)(v16 + 4) = v17;
      *(_WORD *)(v16 + 12) = 1024;
      *(_DWORD *)(v16 + 14) = v19;
      int v9 = v18;
      *(_WORD *)(v16 + 18) = 1024;
      *(_DWORD *)(v16 + 20) = v20;
      *(_WORD *)(v16 + 24) = 1024;
      *(_DWORD *)(v16 + 26) = v22;
      int v6 = v21;
      *(_WORD *)(v16 + 30) = 1024;
      *(_DWORD *)(v16 + 32) = v46[0];
      *(_WORD *)(v16 + 36) = 2080;
      *(void *)(v16 + 38) = v23;
      *(_WORD *)(v16 + 46) = 1024;
      *(_DWORD *)(v16 + 48) = v12;
      __SC_log_send();
    }
LABEL_14:
    close(v6);
    if (v9)
    {
      uint64_t v36 = nullsub_1(v2);
      sub_3F0C8(v36, v9);
    }
    return 0;
  }
  uint64_t v49 = 0;
  uint64_t v29 = nullsub_1(v2);
  sub_354E0(v6, v29, &v49);
  if ((v49 & 0x1000) == 0)
  {
    uint64_t v30 = nullsub_1(v2);
    if (sub_3924C(v30))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v31 = _os_log_pack_size();
        __chkstk_darwin(v31);
        __error();
        uint64_t v32 = _os_log_pack_fill();
        uint64_t v33 = nullsub_1(v2);
        *(_DWORD *)uint64_t v32 = 136315138;
        *(void *)(v32 + 4) = v33;
        __SC_log_send();
      }
      uint64_t v34 = (const char *)nullsub_1(v2);
      sub_364C8(v6, v34, v50);
      sub_1BBF0(a1);
      int v35 = sub_58DC8(v2);
      sub_3B01C(v35, 0, v50);
      goto LABEL_14;
    }
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v38 = _os_log_pack_size();
    __chkstk_darwin(v38);
    __error();
    uint64_t v39 = _os_log_pack_fill();
    uint64_t v40 = nullsub_1(v2);
    int v41 = v50;
    int v42 = BYTE1(v50);
    int v43 = BYTE2(v50);
    int v44 = HIBYTE(v50);
    *(_DWORD *)uint64_t v39 = 136316162;
    *(void *)(v39 + 4) = v40;
    *(_WORD *)(v39 + 12) = 1024;
    *(_DWORD *)(v39 + 14) = v41;
    *(_WORD *)(v39 + 18) = 1024;
    *(_DWORD *)(v39 + 20) = v42;
    *(_WORD *)(v39 + 24) = 1024;
    *(_DWORD *)(v39 + 26) = v43;
    *(_WORD *)(v39 + 30) = 1024;
    *(_DWORD *)(v39 + 32) = v44;
    __SC_log_send();
  }
  uint64_t v4 = 1;
  sub_1E168(a1, 1);
  int v45 = sub_58DC8(v2);
  sub_3B01C(v45, 0, v50);
  close(v6);
  *(unsigned char *)(v3 + 160) = v9;
  return v4;
}

__CFDictionary *sub_40428(const void *a1, int a2)
{
  int v3 = bswap32(a2 | 0xC0000000);
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  sub_6F28(Mutable, kSCPropNetIPv4Addresses, v3);
  sub_53D38(Mutable, kSCPropNetIPv4Router, 16777408);
  CFDictionarySetValue(Mutable, kSCPropInterfaceName, a1);
  CFDictionarySetValue(Mutable, kSCPropNetIPv4CLAT46, kCFBooleanTrue);
  int v7 = v3;
  CFDictionaryRef v5 = sub_7520(&v7, &G_ip_broadcast, 0);
  sub_6FB0(Mutable, kSCPropNetIPv4AdditionalRoutes, v5);
  CFRelease(v5);
  return Mutable;
}

uint64_t sub_40528(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = sub_8B80(a1);
  uint64_t v6 = sub_36628();
  if ((v6 & 0x80000000) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v28 = _os_log_pack_size();
      __chkstk_darwin(v28);
      __error();
      uint64_t v29 = _os_log_pack_fill();
      uint64_t v30 = nullsub_1(v5);
      uint64_t v31 = __error();
      uint64_t v32 = strerror(*v31);
      *(_DWORD *)uint64_t v29 = 136315394;
      *(void *)(v29 + 4) = v30;
      *(_WORD *)(v29 + 12) = 2080;
      *(void *)(v29 + 14) = v32;
      return __SC_log_send();
    }
  }
  else
  {
    uint64_t v8 = v6;
    if (a3 >= 1)
    {
      *(void *)&long long v7 = 136315906;
      long long v33 = v7;
      *(void *)&long long v7 = 136315650;
      long long v34 = v7;
      do
      {
        int v9 = (const char *)nullsub_1(v5);
        int v10 = sub_38ABC(v8, v9, (_OWORD *)a2, 0, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20) | 0x800u, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
        sub_4220();
        if (v10 < 0)
        {
          int v16 = _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v17 = _os_log_pack_size();
            uint64_t v36 = &v33;
            __chkstk_darwin(v17);
            __error();
            uint64_t v18 = _os_log_pack_fill();
            uint64_t v19 = nullsub_1(v5);
            int v20 = inet_ntop(30, (const void *)a2, v37, 0x2Eu);
            int v35 = v16;
            int v21 = v20;
            uint64_t v22 = v8;
            uint64_t v23 = v5;
            int v24 = *(_DWORD *)(a2 + 16);
            uint64_t v25 = __error();
            uint64_t v26 = strerror(*v25);
            *(_DWORD *)uint64_t v18 = v33;
            *(void *)(v18 + 4) = v19;
            *(_WORD *)(v18 + 12) = 2080;
            *(void *)(v18 + 14) = v21;
            *(_WORD *)(v18 + 22) = 1024;
            *(_DWORD *)(v18 + 24) = v24;
            uint64_t v5 = v23;
            uint64_t v8 = v22;
            *(_WORD *)(v18 + 28) = 2080;
            *(void *)(v18 + 30) = v26;
            goto LABEL_9;
          }
        }
        else
        {
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v11 = _os_log_pack_size();
            __chkstk_darwin(v11);
            __error();
            uint64_t v12 = _os_log_pack_fill();
            uint64_t v13 = nullsub_1(v5);
            int v14 = inet_ntop(30, (const void *)a2, v37, 0x2Eu);
            int v15 = *(_DWORD *)(a2 + 16);
            *(_DWORD *)uint64_t v12 = v34;
            *(void *)(v12 + 4) = v13;
            *(_WORD *)(v12 + 12) = 2080;
            *(void *)(v12 + 14) = v14;
            *(_WORD *)(v12 + 22) = 1024;
            *(_DWORD *)(v12 + 24) = v15;
LABEL_9:
            __SC_log_send();
          }
        }
        a2 += 32;
        --a3;
      }
      while (a3);
    }
    return close(v8);
  }
  return result;
}

void sub_408E4(uint64_t a1, int a2, const void *a3)
{
  uint64_t v6 = sub_8B80(a1);
  uint64_t v7 = sub_557C(a1);
  uint64_t v8 = v7;
  if (a2 != 5)
  {
    if (a2 == 2)
    {
      if (*(void *)(v7 + 16))
      {
        if (sub_5226C(v7 + 104))
        {
          double v19 = sub_52710(v8 + 104);
          double current_time = timer_get_current_time();
          if (v19 != 0.0 && v19 < current_time) {
            sub_410EC(a1);
          }
        }
        sub_3E8D8(a1);
        if (*(void *)(v8 + 16))
        {
          double v21 = timer_get_current_time();
          double v22 = sub_56958(*(void *)(v8 + 16), 0, 0, v21);
          if (sub_5226C(v8 + 104))
          {
            double v23 = sub_52710(v8 + 104);
            if (v23 < v22 && v23 != 0.0) {
              double v22 = v23;
            }
          }
          if (v22 != 0.0)
          {
            CFDateRef v25 = CFDateCreate(0, v22);
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled()) {
              goto LABEL_57;
            }
            goto LABEL_58;
          }
        }
      }
      return;
    }
    if (a2) {
      return;
    }
    sub_3EA7C(a1, 2u);
    timer_cancel(*(void *)(v8 + 8));
    sub_50500(*(void **)v8, (uint64_t)sub_408E4, a1, 5);
  }
  uint64_t v9 = nullsub_1(v6);
  sub_40FB4(v9, (uint64_t)a3);
  uint64_t v11 = (uint64_t *)(v8 + 16);
  uint64_t v10 = *(void *)(v8 + 16);
  if (v10)
  {
    uint64_t v12 = (void *)sub_558A0(v10);
    uint64_t v13 = (void *)sub_558A0((uint64_t)a3);
    if (*v12 != *v13 || v12[1] != v13[1])
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v15 = _os_log_pack_size();
        __chkstk_darwin(v15);
        __error();
        uint64_t v16 = _os_log_pack_fill();
        uint64_t v17 = nullsub_1(v6);
        uint64_t v18 = sub_5227C(*v11);
        *(_DWORD *)uint64_t v16 = 136315394;
        *(void *)(v16 + 4) = v17;
        *(_WORD *)(v16 + 12) = 2112;
        *(void *)(v16 + 14) = v18;
        __SC_log_send();
      }
      return;
    }
  }
  else if (!sub_56438((uint64_t)a3))
  {
    *(_DWORD *)(v8 + 80) = 1;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v31 = _os_log_pack_size();
      __chkstk_darwin(v31);
      __error();
      uint64_t v32 = _os_log_pack_fill();
      uint64_t v33 = nullsub_1(v6);
      *(_DWORD *)uint64_t v32 = 136315138;
      *(void *)(v32 + 4) = v33;
      __SC_log_send();
    }
    return;
  }
  timer_cancel(*(void *)(v8 + 8));
  sub_6DB0((const void **)(v8 + 16));
  if (sub_56438((uint64_t)a3))
  {
    CFRetain(a3);
    *uint64_t v11 = (uint64_t)a3;
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v26 = _os_log_pack_size();
      __chkstk_darwin(v26);
      __error();
      uint64_t v27 = _os_log_pack_fill();
      uint64_t v28 = nullsub_1(v6);
      *(_DWORD *)uint64_t v27 = 136315138;
      *(void *)(v27 + 4) = v28;
      __SC_log_send();
    }
  }
  uint64_t v29 = *(void *)(v8 + 24);
  if (v29)
  {
    if (*v11 && (v30 = sub_56430(*v11), uint64_t v29 = *(void *)(v8 + 24), v30 >= 0x40))
    {
      if ((v30 & 0x80u) == 0) {
        int v34 = 1;
      }
      else {
        int v34 = 2;
      }
      if (sub_430F8(v29) != v34)
      {
        char v35 = sub_1ED44(a1, 0) != 0;
        sub_43950(*(void *)(v8 + 24));
        sub_42C20(*(void *)(v8 + 24), v35);
        sub_43838(*(void *)(v8 + 24), v34);
        sub_43278(*(void *)(v8 + 24));
      }
    }
    else if (sub_42DDC(v29))
    {
      sub_43950(*(void *)(v8 + 24));
    }
  }
  if (*v11)
  {
    double v36 = sub_5585C(*v11);
    double v22 = sub_56958(*v11, 0, 0, v36);
  }
  else
  {
    double v22 = 0.0;
  }
  sub_3E8D8(a1);
  if (*v11) {
    sub_410EC(a1);
  }
  if (sub_5226C(v8 + 104))
  {
    double v37 = sub_52710(v8 + 104);
    if (v37 < v22 && v37 != 0.0) {
      double v22 = v37;
    }
  }
  if (v22 != 0.0)
  {
    CFDateRef v25 = CFDateCreate(0, v22);
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
LABEL_57:
      uint64_t v39 = _os_log_pack_size();
      __chkstk_darwin(v39);
      __error();
      uint64_t v40 = _os_log_pack_fill();
      uint64_t v41 = nullsub_1(v6);
      *(_DWORD *)uint64_t v40 = 136315394;
      *(void *)(v40 + 4) = v41;
      *(_WORD *)(v40 + 12) = 2112;
      *(void *)(v40 + 14) = v25;
      __SC_log_send();
    }
LABEL_58:
    CFRelease(v25);
    timer_callout_set_absolute(*(void *)(v8 + 8), (uint64_t)sub_408E4, a1, 2, 0, v22);
  }
}

void sub_40FB4(uint64_t a1, uint64_t a2)
{
  int v3 = sub_558A8(a2);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 136315394;
    *(void *)(v5 + 4) = a1;
    *(_WORD *)(v5 + 12) = 2112;
    *(void *)(v5 + 14) = v3;
    __SC_log_send();
  }
  CFRelease(v3);
}

void sub_410EC(uint64_t a1)
{
  unsigned __int16 v40 = 0;
  int v39 = 0;
  CFStringRef v37 = 0;
  uint64_t v38 = 0;
  unsigned __int16 v36 = 0;
  uint64_t v2 = sub_557C(a1);
  uint64_t v3 = sub_56874(*(void *)(v2 + 16), &v38, &v36, (uint64_t)&v39);
  if (!(_BYTE)v39)
  {
LABEL_9:
    uint64_t v12 = v2 + 104;
LABEL_10:
    sub_52150(v12, 1);
    goto LABEL_11;
  }
  uint64_t v4 = v3;
  CFStringRef v5 = sub_57594(v3, v38);
  CFStringRef v37 = v5;
  if (!v5)
  {
    CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
    CFMutableStringRef v35 = Mutable;
    sub_59658(Mutable, v4, v38);
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)(v11 + 4) = "rtadv_pvd_additional_info_schedule_fetch";
      *(_WORD *)(v11 + 12) = 2112;
      *(void *)(v11 + 14) = Mutable;
      __SC_log_send();
    }
    sub_6DB0((const void **)&v35);
    goto LABEL_9;
  }
  CFStringRef v6 = v5;
  uint64_t v7 = v2 + 104;
  CFStringRef v8 = (const __CFString *)sub_4A334(v7);
  if (!v8)
  {
LABEL_12:
    sub_41AEC(a1, v6, v36);
    int v13 = 1;
    goto LABEL_13;
  }
  if (CFStringCompare(v6, v8, 1uLL))
  {
LABEL_5:
    sub_52150(v7, 0);
    goto LABEL_12;
  }
  if ((sub_5226C(v7) & 1) == 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v25 = _os_log_pack_size();
      __chkstk_darwin(v25);
      __error();
      uint64_t v26 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v26 = 136315394;
      *(void *)(v26 + 4) = "rtadv_pvd_additional_info_schedule_fetch";
      *(_WORD *)(v26 + 12) = 2112;
      *(void *)(v26 + 14) = v6;
      __SC_log_send();
    }
    goto LABEL_11;
  }
  if (!sub_522C0(v7))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v27 = _os_log_pack_size();
      __chkstk_darwin(v27);
      __error();
      uint64_t v28 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v28 = 136315394;
      *(void *)(v28 + 4) = "rtadv_pvd_additional_info_schedule_fetch";
      *(_WORD *)(v28 + 12) = 1024;
      *(_DWORD *)(v28 + 14) = 10;
      __SC_log_send();
    }
    goto LABEL_11;
  }
  int v17 = sub_5225C(v7);
  double v18 = sub_52710(v7);
  double Current = CFAbsoluteTimeGetCurrent();
  if (v36 != v17)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v29 = _os_log_pack_size();
      __chkstk_darwin(v29);
      __error();
      uint64_t v30 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v30 = 136315138;
      *(void *)(v30 + 4) = "rtadv_pvd_additional_info_schedule_fetch";
      __SC_log_send();
    }
    if (sub_418D8(v40) != -1)
    {
      int v24 = "new sequence number";
LABEL_39:
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v33 = _os_log_pack_size();
        __chkstk_darwin(v33);
        __error();
        uint64_t v34 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v34 = 136315650;
        *(void *)(v34 + 4) = "rtadv_pvd_additional_info_schedule_fetch";
        *(_WORD *)(v34 + 12) = 2112;
        *(void *)(v34 + 14) = v6;
        *(_WORD *)(v34 + 22) = 2080;
        *(void *)(v34 + 24) = v24;
        __SC_log_send();
      }
      goto LABEL_5;
    }
    uint64_t v12 = v7;
    goto LABEL_10;
  }
  double v20 = Current;
  sub_4220();
  _SC_syslog_os_log_mapping();
  int v21 = __SC_log_enabled();
  if (v18 != 0.0 && v18 < v20)
  {
    if (v21)
    {
      uint64_t v22 = _os_log_pack_size();
      __chkstk_darwin(v22);
      __error();
      uint64_t v23 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v23 = 136315138;
      *(void *)(v23 + 4) = "rtadv_pvd_additional_info_schedule_fetch";
      __SC_log_send();
    }
    int v24 = "expired";
    goto LABEL_39;
  }
  if (v21)
  {
    uint64_t v31 = _os_log_pack_size();
    __chkstk_darwin(v31);
    __error();
    uint64_t v32 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v32 = 136315138;
    *(void *)(v32 + 4) = "rtadv_pvd_additional_info_schedule_fetch";
    __SC_log_send();
  }
LABEL_11:
  int v13 = 0;
LABEL_13:
  if ((_BYTE)v39)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v14 = _os_log_pack_size();
      __chkstk_darwin(v14);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      uint64_t v16 = "not ";
      if (v13) {
        uint64_t v16 = "";
      }
      *(_DWORD *)uint64_t v15 = 136315394;
      *(void *)(v15 + 4) = "rtadv_pvd_additional_info_schedule_fetch";
      *(_WORD *)(v15 + 12) = 2080;
      *(void *)(v15 + 14) = v16;
      __SC_log_send();
    }
  }
  sub_6DB0((const void **)&v37);
}

uint64_t sub_418D8(unsigned int a1)
{
  if (a1 < 0x10)
  {
    if (a1 >= 4) {
      char v3 = 4;
    }
    else {
      char v3 = a1;
    }
    uint32_t v4 = arc4random_uniform(1 << (v3 + 10));
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v6 = 136315394;
      *(void *)(v6 + 4) = "_calculate_randomized_backoff";
      *(_WORD *)(v6 + 12) = 1024;
      *(_DWORD *)(v6 + 14) = v4;
      __SC_log_send();
    }
    if (v4 != -1) {
      return v4;
    }
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v1 = _os_log_pack_size();
      __chkstk_darwin(v1);
      __error();
      uint64_t v2 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v2 = 136315138;
      *(void *)(v2 + 4) = "_calculate_randomized_backoff";
      __SC_log_send();
    }
  }
  return -1;
}

void sub_41AEC(uint64_t a1, const void *a2, __int16 a3)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v6 = _os_log_pack_size();
    __chkstk_darwin(v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v7 + 4) = "_new_pvd_info_request";
    __SC_log_send();
  }
  uint64_t v8 = sub_557C(a1);
  uint64_t v9 = *(void *)(v8 + 16);
  sub_3EBE8(v8);
  sub_521DC((const void **)(v8 + 104), a2);
  sub_52264(v8 + 104, a3);
  uint64_t v10 = sub_564D8(v9);
  double v19 = v10;
  if (!v10)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled()) {
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  uint64_t v11 = v10;
  sub_52218(v8 + 104, v10);
  uint64_t v12 = sub_8B80(a1);
  uint64_t v13 = nullsub_1(v12);
  sub_52254(v8 + 104, v13);
  uint64_t v14 = PvDInfoRequestCreate();
  *(void *)(v8 + 96) = v14;
  if (!v14)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
LABEL_11:
      uint64_t v17 = _os_log_pack_size();
      __chkstk_darwin(v17);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v18 + 4) = "_new_pvd_info_request";
      __SC_log_send();
    }
LABEL_12:
    sub_52150(v8 + 104, 0);
    goto LABEL_13;
  }
  sub_2EC08();
  PvDInfoRequestSetCompletionHandler();
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v15 = _os_log_pack_size();
    __chkstk_darwin(v15);
    __error();
    uint64_t v16 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v16 = 136315906;
    *(void *)(v16 + 4) = "_new_pvd_info_request";
    *(_WORD *)(v16 + 12) = 2080;
    *(void *)(v16 + 14) = v13;
    *(_WORD *)(v16 + 22) = 2112;
    *(void *)(v16 + 24) = a2;
    *(_WORD *)(v16 + 32) = 2112;
    *(void *)(v16 + 34) = v11;
    __SC_log_send();
  }
  PvDInfoRequestResume();
LABEL_13:
  sub_6DB0((const void **)&v19);
}

void sub_41F2C(uint64_t a1)
{
}

void sub_41F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 136315138;
    *(void *)(v5 + 4) = "rtadv_pvd_additional_info_request_callback";
    __SC_log_send();
  }
  if (!a2)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled()) {
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  if (!a1)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
LABEL_11:
      uint64_t v8 = _os_log_pack_size();
      __chkstk_darwin(v8);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
LABEL_12:
    uint64_t v6 = 0;
    goto LABEL_16;
  }
  uint64_t v6 = sub_557C(a1);
  int CompletionStatus = PvDInfoRequestGetCompletionStatus();
  if (CompletionStatus)
  {
    if (CompletionStatus == 2)
    {
      uint64_t v9 = (const void *)PvDInfoRequestCopyAdditionalInformation();
      sub_52284(v6 + 104, v9);
      sub_52274(v6 + 104, 1);
      sub_522F8(v6 + 104);
      sub_52330((const void **)(v6 + 104));
    }
    else
    {
      sub_52274(v6 + 104, 0);
      sub_52150(v6 + 104, 1);
      sub_522F8(v6 + 104);
    }
  }
  else
  {
    sub_52150(v6 + 104, 0);
  }
  sub_3E8D8(a1);
LABEL_16:
  sub_6DB0((const void **)(v6 + 96));
  sub_6DB0(&v9);
}

uint64_t sub_42238(uint64_t a1)
{
  uint64_t v2 = 0;
  while (word_70278[v2])
  {
    if (++v2 == 4)
    {
      LOBYTE(v2) = 0;
      break;
    }
  }
  unsigned __int8 v3 = v2 + 2;
  uint64_t v4 = v2;
  int v5 = word_70278[v2];
  sub_4220();
  _SC_syslog_os_log_mapping();
  int v6 = __SC_log_enabled();
  if (v5)
  {
    if (v6) {
      goto LABEL_9;
    }
  }
  else if (v6)
  {
LABEL_9:
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 136315394;
    *(void *)(v8 + 4) = a1;
    *(_WORD *)(v8 + 12) = 1024;
    *(_DWORD *)(v8 + 14) = v3;
    __SC_log_send();
  }
  ++word_70278[v4];
  return v3;
}

uint64_t sub_42408(uint64_t a1, int a2, __n128 *a3)
{
  uint64_t v6 = sub_8B80(a1);
  switch(a2)
  {
    case 0:
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v7 = _os_log_pack_size();
        __chkstk_darwin(v7);
        __error();
        uint64_t v8 = _os_log_pack_fill();
        uint64_t v9 = sub_1BBE8(a1);
        uint64_t v10 = nullsub_1(v6);
        *(_DWORD *)uint64_t v8 = 136315394;
        *(void *)(v8 + 4) = v9;
        *(_WORD *)(v8 + 12) = 2080;
        *(void *)(v8 + 14) = v10;
        __SC_log_send();
      }
      sub_1E600(a1, a3, a3[1].n128_i32[0]);
      sub_42810(a1);
      uint64_t v21 = 0;
      memset(&v20, 0, 176);
      uint64_t v11 = sub_8B80(a1);
      int v12 = sub_58DC8(v11);
      sub_399B8((uint64_t)&v20, v12);
      sub_42904(a1, (uint64_t *)&v20);
      sub_3A038((uint64_t)&v20);
      break;
    case 1:
      __n128 v20 = 0uLL;
      int v19 = 0;
      sub_1E618(a1, &v20, &v19);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v13 = _os_log_pack_size();
        __chkstk_darwin(v13);
        __error();
        uint64_t v14 = _os_log_pack_fill();
        uint64_t v15 = sub_1BBE8(a1);
        uint64_t v16 = nullsub_1(v6);
        *(_DWORD *)uint64_t v14 = 136315394;
        *(void *)(v14 + 4) = v15;
        *(_WORD *)(v14 + 12) = 2080;
        *(void *)(v14 + 14) = v16;
        __SC_log_send();
      }
      sub_1EA3C(a1, &v20, v19);
      break;
    case 3:
    case 8:
    case 11:
      if (a3->n128_u32[1] == 1 && a3->n128_u32[2] == 1 && (a2 != 11 || !sub_1BC54(a1))) {
        sub_42810(a1);
      }
      break;
    case 4:
      sub_428AC(a1);
      break;
    case 7:
      __n128 v20 = 0uLL;
      int v19 = 0;
      sub_1E618(a1, &v20, &v19);
      BOOL v17 = *(void *)a3->n128_u64[0] == v20.n128_u64[0] && *(void *)(a3->n128_u64[0] + 8) == v20.n128_u64[1];
      if (!v17 || *(_DWORD *)(a3->n128_u64[0] + 16) != v19) {
        a3->n128_u32[2] = 1;
      }
      break;
    case 15:
      sub_42904(a1, (uint64_t *)a3);
      break;
    default:
      return 0;
  }
  return 0;
}

void sub_42810(uint64_t a1)
{
  uint64_t v2 = sub_8B80(a1);
  if (sub_5802C(v2) == 24)
  {
    sub_42AFC(a1);
    sub_42B84(a1);
  }
  else if (sub_9030(a1) == 1)
  {
    sub_428AC(a1);
  }
  else
  {
    sub_42AFC(a1);
  }
}

uint64_t sub_428AC(uint64_t a1)
{
  __n128 v4 = 0uLL;
  int v3 = 0;
  sub_1E618(a1, &v4, &v3);
  sub_1EA3C(a1, &v4, v3);
  return sub_9028(a1, 0xCu);
}

void sub_42904(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_8B80(a1);
  if (a2)
  {
    if (*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = v4;
      __n128 v16 = 0uLL;
      int v15 = 0;
      sub_1E618(a1, &v16, &v15);
      int v6 = *((_DWORD *)a2 + 2);
      if (v6 >= 1)
      {
        for (uint64_t i = *a2; ; i += 32)
        {
          int v8 = *(_DWORD *)(i + 20);
          if ((v8 & 0x40) == 0 && *(void *)i == v16.n128_u64[0] && *(void *)(i + 8) == v16.n128_u64[1]) {
            break;
          }
          if (!--v6) {
            return;
          }
        }
        if ((v8 & 4) != 0)
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v10 = _os_log_pack_size();
            __chkstk_darwin(v10);
            __error();
            uint64_t v11 = _os_log_pack_fill();
            int v12 = sub_1BBE8(a1);
            uint64_t v13 = nullsub_1(v5);
            uint64_t v14 = inet_ntop(30, &v16, v17, 0x2Eu);
            *(_DWORD *)uint64_t v11 = 136315650;
            *(void *)(v11 + 4) = v12;
            *(_WORD *)(v11 + 12) = 2080;
            *(void *)(v11 + 14) = v13;
            *(_WORD *)(v11 + 22) = 2080;
            *(void *)(v11 + 24) = v14;
            __SC_log_send();
          }
          sub_1EA3C(a1, &v16, v15);
          sub_9028(a1, 8u);
        }
        else if ((v8 & 2) == 0)
        {
          sub_42B84(a1);
        }
      }
    }
  }
}

uint64_t sub_42AFC(uint64_t a1)
{
  __n128 v6 = 0uLL;
  uint64_t v2 = sub_8B80(a1);
  int v5 = 0;
  sub_1E618(a1, &v6, &v5);
  if (sub_5802C(v2) == 255 && sub_1D434(a1)) {
    int v3 = 512;
  }
  else {
    int v3 = 0;
  }
  return sub_1E634(a1, &v6, v5, v3, -1, -1);
}

void sub_42B84(uint64_t a1)
{
  __n128 v2 = 0u;
  long long v3 = 0u;
  sub_1E618(a1, &v2, &v3);
  sub_1C3E4(a1, &v2, 1, 0, 0, 0, 0);
}

__int16 *sub_42BE4(__int16 *result, int a2)
{
  BOOL v2 = result != 0;
  BOOL v3 = a2 != 0;
  BOOL v4 = !v2 || !v3;
  if (v2 && v3) {
    int v5 = result;
  }
  else {
    int v5 = &word_5D5A0;
  }
  if (v4) {
    int v6 = 3;
  }
  else {
    int v6 = a2;
  }
  off_700F0 = v5;
  dword_700F8 = v6;
  return result;
}

BOOL sub_42C20(uint64_t a1, char a2)
{
  BOOL result = sub_42C58(a1, (uint64_t)"DHCPv6ClientSetUsePrivateAddress");
  if (result) {
    *(unsigned char *)(a1 + 241) = a2;
  }
  return result;
}

BOOL sub_42C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4A334(*(void *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 116);
  if (v5)
  {
    uint64_t v6 = v4;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      uint64_t v9 = nullsub_1(v6);
      uint64_t v10 = *(unsigned int *)(a1 + 116);
      if (v10 > 3) {
        uint64_t v11 = "<unknown>";
      }
      else {
        uint64_t v11 = off_690E8[v10];
      }
      *(_DWORD *)uint64_t v8 = 136315650;
      *(void *)(v8 + 4) = a2;
      *(_WORD *)(v8 + 12) = 2080;
      *(void *)(v8 + 14) = v9;
      *(_WORD *)(v8 + 22) = 2080;
      *(void *)(v8 + 24) = v11;
      __SC_log_send();
    }
  }
  return v5 == 0;
}

BOOL sub_42DDC(uint64_t a1)
{
  return sub_4AA80(*(void *)(a1 + 128));
}

uint64_t sub_42DE4(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 192);
  if (result)
  {
    uint64_t v7 = 0;
    if (sub_5B848(result, 24, (unsigned int *)&v7 + 1, 0)) {
      BOOL v5 = SHIDWORD(v7) < 1;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      *a2 = 1;
    }
    return sub_5B848(*(void *)(a1 + 192), 23, (unsigned int *)&v7, 0) && v7 > 0xF;
  }
  return result;
}

void sub_42E6C(uint64_t a1, __CFDictionary *a2)
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  BOOL v5 = Mutable;
  uint64_t v6 = *(unsigned int *)(a1 + 120);
  if (v6 > 0xB) {
    uint64_t v7 = "<unknown>";
  }
  else {
    uint64_t v7 = off_69088[v6];
  }
  sub_53ED0(Mutable, @"State", v7);
  uint64_t v8 = *(unsigned int *)(a1 + 116);
  if (v8 > 3) {
    uint64_t v9 = "<unknown>";
  }
  else {
    uint64_t v9 = off_690E8[v8];
  }
  sub_53ED0(v5, @"Mode", v9);
  if (*(unsigned char *)(a1 + 224) && *(_DWORD *)(a1 + 184) && *(unsigned char *)(a1 + 240))
  {
    int v10 = *(_DWORD *)(a1 + 116);
    if (v10 == 3)
    {
      if (*(_DWORD *)(a1 + 76) || *(_DWORD *)(a1 + 80) || *(_DWORD *)(a1 + 84) || *(_DWORD *)(a1 + 88))
      {
        sub_53E2C(v5, @"DelegatedPrefix", (void *)(a1 + 76));
        sub_53F94(v5, @"DelegatedPrefixLength", *(unsigned __int8 *)(a1 + 92));
      }
    }
    else if (v10 == 2 && (*(_DWORD *)(a1 + 56) || *(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 64) || *(_DWORD *)(a1 + 68)))
    {
      sub_53E2C(v5, @"StatefulAddress", (void *)(a1 + 56));
    }
    sub_53F38(v5, @"LeaseStartTime", *(CFAbsoluteTime *)(a1 + 200));
    unsigned int v14 = *(_DWORD *)(a1 + 216);
    if (v14 == -1) {
      CFDictionarySetValue(v5, @"LeaseIsInfinite", kCFBooleanTrue);
    }
    else {
      sub_53F38(v5, @"LeaseExpirationTime", *(double *)(a1 + 200) + (double)v14);
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(a1 + 120);
    if (v11 <= 0xA && ((1 << v11) & 0x446) != 0)
    {
      double current_time = timer_get_current_time();
      double v13 = *(double *)(a1 + 160);
      if (current_time > v13) {
        sub_53F94(v5, @"ElapsedTime", (unint64_t)(current_time - v13));
      }
    }
  }
  if (*(unsigned char *)(a1 + 240) && *(void *)(a1 + 176) && *(void *)(a1 + 192))
  {
    int v15 = CFStringCreateMutable(0, 0);
    DHCPv6PacketPrintToString(v15, *(unsigned __int8 **)(a1 + 176), *(unsigned int *)(a1 + 184));
    sub_5B670(v15, *(void *)(a1 + 192));
    CFDictionarySetValue(v5, @"Packet", v15);
    CFRelease(v15);
  }
  CFDictionarySetValue(a2, @"DHCPv6", v5);

  CFRelease(v5);
}

uint64_t sub_430F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 116);
}

_OWORD *sub_43100(uint64_t a1)
{
  uint64_t v2 = sub_8B80(a1);
  BOOL v3 = malloc_type_malloc(0x120uLL, 0x10F2040391352C3uLL);
  *BOOL v3 = 0u;
  v3[1] = 0u;
  _OWORD v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[17] = 0u;
  *((void *)v3 + 17) = a1;
  *((void *)v3 + 16) = sub_4A33C(v2);
  uint64_t v4 = (const char *)nullsub_1(v2);
  snprintf(__str, 0x20uLL, "DHCPv6-%s", v4);
  *((void *)v3 + 18) = timer_callout_init(__str);
  sub_431F0((uint64_t)v3);
  return v3;
}

uint64_t sub_431F0(uint64_t a1)
{
  uint64_t v2 = sub_8B80(*(void *)(a1 + 136));
  if (*(_DWORD *)(a1 + 116))
  {
    nullsub_1(v2);
    return snprintf((char *)a1, 0x20uLL, "DHCPv6-%s %s");
  }
  else
  {
    nullsub_1(v2);
    return snprintf((char *)a1, 0x20uLL, "DHCPv6 %s");
  }
}

void sub_43278(uint64_t a1)
{
  uint64_t v2 = sub_4A334(*(void *)(a1 + 128));
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3);
    __error();
    uint64_t v4 = _os_log_pack_fill();
    uint64_t v5 = nullsub_1(v2);
    uint64_t v6 = *(unsigned int *)(a1 + 116);
    if (v6 > 3) {
      uint64_t v7 = "<unknown>";
    }
    else {
      uint64_t v7 = off_690E8[v6];
    }
    uint64_t v8 = "private";
    int v9 = *(unsigned __int8 *)(a1 + 241);
    *(void *)(v4 + 4) = "DHCPv6ClientStart";
    *(_DWORD *)uint64_t v4 = 136315906;
    *(_WORD *)(v4 + 12) = 2080;
    if (!v9) {
      uint64_t v8 = "permanent";
    }
    *(void *)(v4 + 14) = v5;
    *(_WORD *)(v4 + 22) = 2080;
    *(void *)(v4 + 24) = v7;
    *(_WORD *)(v4 + 32) = 2080;
    *(void *)(v4 + 34) = v8;
    __SC_log_send();
  }
  sub_43414(a1);
}

void sub_43414(uint64_t a1)
{
  uint64_t v2 = sub_4A334(*(void *)(a1 + 128));
  int v3 = *(_DWORD *)(a1 + 116);
  if ((v3 - 2) >= 2)
  {
    if (v3 == 1)
    {
      sub_45680(a1, 0, 0);
    }
    else
    {
      uint64_t v11 = v2;
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v12 = _os_log_pack_size();
        __chkstk_darwin(v12);
        __error();
        uint64_t v13 = _os_log_pack_fill();
        uint64_t v14 = nullsub_1(v11);
        *(_DWORD *)uint64_t v13 = 136315394;
        *(void *)(v13 + 4) = "DHCPv6ClientStartInternal";
        *(_WORD *)(v13 + 12) = 2080;
        *(void *)(v13 + 14) = v14;
        __SC_log_send();
      }
    }
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v5 = 136315394;
      *(void *)(v5 + 4) = a1;
      *(_WORD *)(v5 + 12) = 2080;
      *(void *)(v5 + 14) = "DHCPv6ClientStartInternal";
      __SC_log_send();
    }
    double current_time = timer_get_current_time();
    if (sub_43F84(a1, current_time) && sub_45AA0(a1))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v7 = _os_log_pack_size();
        __chkstk_darwin(v7);
        __error();
        uint64_t v8 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v8 = 136315394;
        *(void *)(v8 + 4) = a1;
        *(_WORD *)(v8 + 12) = 2080;
        *(void *)(v8 + 14) = "DHCPv6ClientStartInternal";
        __SC_log_send();
      }
      sub_45C10(a1, 0, 0);
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9);
        __error();
        uint64_t v10 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v10 = 136315394;
        *(void *)(v10 + 4) = a1;
        *(_WORD *)(v10 + 12) = 2080;
        *(void *)(v10 + 14) = "DHCPv6ClientStartInternal";
        __SC_log_send();
      }
      sub_46258(a1, 0, 0);
    }
  }
}

uint64_t sub_43838(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 116) != a2)
  {
    uint64_t v3 = result;
    uint64_t result = sub_42C58(result, (uint64_t)"DHCPv6ClientSetMode");
    if (result)
    {
      *(_DWORD *)(v3 + 116) = a2;
      return sub_431F0(v3);
    }
  }
  return result;
}

void sub_4389C(uint64_t a1)
{
  if (sub_42C58(a1, (uint64_t)"DHCPv6ClientDiscardInformation"))
  {
    sub_438EC(a1);
  }
}

void sub_438EC(uint64_t a1)
{
  sub_6DB0((const void **)(a1 + 232));
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v2 = *(void **)(a1 + 176);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 176) = 0;
    *(_DWORD *)(a1 + 184) = 0;
  }
  sub_5B620((void **)(a1 + 192));
  *(unsigned char *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
}

void sub_43950(uint64_t a1)
{
  sub_439DC(a1, (uint64_t)"Stop");
  sub_4AA90(*(void *)(a1 + 128));
  timer_cancel(*(void *)(a1 + 144));
  *(void *)(a1 + 84) = 0;
  *(void *)(a1 + 76) = 0;
  *(unsigned char *)(a1 + 92) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  sub_43D98(a1, 0);
  *(_DWORD *)(a1 + 116) = 0;
  sub_6DB0((const void **)(a1 + 248));
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_source_merge_data(v2, 1uLL);
  }
}

uint64_t sub_439DC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_4A334(*(void *)(a1 + 128));
  uint64_t v5 = result;
  if (*(_DWORD *)(a1 + 56) || *(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 64) || *(_DWORD *)(a1 + 68))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      uint64_t v8 = inet_ntop(30, (const void *)(a1 + 56), v26, 0x2Eu);
      *(_DWORD *)uint64_t v7 = 136315650;
      *(void *)(v7 + 4) = a1;
      *(_WORD *)(v7 + 12) = 2080;
      *(void *)(v7 + 14) = a2;
      *(_WORD *)(v7 + 22) = 2080;
      *(void *)(v7 + 24) = v8;
      __SC_log_send();
    }
    int v9 = sub_36628();
    if (v9 < 0)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v19 = _os_log_pack_size();
        __chkstk_darwin(v19);
        __error();
        uint64_t v20 = _os_log_pack_fill();
        uint64_t v21 = nullsub_1(v5);
        uint64_t v22 = __error();
        uint64_t v23 = strerror(*v22);
        int v24 = *__error();
        *(_DWORD *)uint64_t v20 = 136315650;
        *(void *)(v20 + 4) = v21;
        *(_WORD *)(v20 + 12) = 2080;
        *(void *)(v20 + 14) = v23;
        *(_WORD *)(v20 + 22) = 1024;
        *(_DWORD *)(v20 + 24) = v24;
        uint64_t result = __SC_log_send();
      }
    }
    else
    {
      int v10 = v9;
      uint64_t v11 = (const char *)nullsub_1(v5);
      if ((sub_38684(v10, v11, (_OWORD *)(a1 + 56)) & 0x80000000) != 0)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v12 = _os_log_pack_size();
          uint64_t v25 = (uint64_t)&v25;
          __chkstk_darwin(v12);
          __error();
          uint64_t v13 = _os_log_pack_fill();
          uint64_t v14 = nullsub_1(v5);
          int v15 = inet_ntop(30, (const void *)(a1 + 56), v26, 0x2Eu);
          __n128 v16 = __error();
          BOOL v17 = strerror(*v16);
          int v18 = *__error();
          *(_DWORD *)uint64_t v13 = 136315906;
          *(void *)(v13 + 4) = v14;
          *(_WORD *)(v13 + 12) = 2080;
          *(void *)(v13 + 14) = v15;
          *(_WORD *)(v13 + 22) = 2080;
          *(void *)(v13 + 24) = v17;
          *(_WORD *)(v13 + 32) = 1024;
          *(_DWORD *)(v13 + 34) = v18;
          __SC_log_send();
        }
      }
      uint64_t result = close(v10);
    }
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
  }
  return result;
}

uint64_t sub_43D98(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 120) = a2;
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v5 = _os_log_pack_size();
    __chkstk_darwin(v5);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    if (a2 > 0xB) {
      uint64_t v7 = "<unknown>";
    }
    else {
      uint64_t v7 = off_69088[a2];
    }
    *(_DWORD *)uint64_t v6 = 136315394;
    *(void *)(v6 + 4) = a1;
    *(_WORD *)(v6 + 12) = 2080;
    *(void *)(v6 + 14) = v7;
    return __SC_log_send();
  }
  return result;
}

void sub_43EE4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    *a1 = 0;
    double current_time = timer_get_current_time();
    if (sub_43F84(v1, current_time)) {
      sub_44190(v1);
    }
    if (*(void *)(v1 + 144)) {
      timer_callout_free((uint64_t *)(v1 + 144));
    }
    sub_4A500((void **)(v1 + 128));
    sub_438EC(v1);
    sub_442E0((void *)v1, 0, 0);
    sub_5B620((void **)(v1 + 192));
    sub_6DB0((const void **)(v1 + 248));
    free((void *)v1);
  }
}

uint64_t sub_43F84(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 224))
  {
    unsigned int v3 = *(_DWORD *)(a1 + 216);
    if (v3 != -1)
    {
      double v4 = *(double *)(a1 + 200);
      if (v4 <= a2)
      {
        if (a2 - v4 >= (double)v3)
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v7 = _os_log_pack_size();
            __chkstk_darwin(v7);
            __error();
            uint64_t v8 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v8 = 136315138;
            *(void *)(v8 + 4) = a1;
            __SC_log_send();
          }
          sub_438EC(a1);
          *(unsigned char *)(a1 + 224) = 0;
        }
      }
      else
      {
        sub_438EC(a1);
        *(unsigned char *)(a1 + 224) = 0;
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v5 = _os_log_pack_size();
          __chkstk_darwin(v5);
          __error();
          uint64_t v6 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v6 = 136315138;
          *(void *)(v6 + 4) = a1;
          __SC_log_send();
        }
      }
    }
  }
  return *(unsigned __int8 *)(a1 + 224);
}

uint64_t sub_44190(uint64_t a1)
{
  sub_43D98(a1, 7u);
  sub_439DC(a1, (uint64_t)"Release");
  sub_4AA90(*(void *)(a1 + 128));
  timer_cancel(*(void *)(a1 + 144));
  *(_DWORD *)(a1 + 156) = 0;
  *(_DWORD *)(a1 + 152) = arc4random() & 0xFFFFFF;
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v3 = 136315138;
    *(void *)(v3 + 4) = a1;
    __SC_log_send();
  }
  return sub_47C90(a1);
}

void sub_442E0(void *a1, uint64_t a2, uint64_t a3)
{
  a1[5] = a2;
  a1[6] = a3;
  double v4 = a1[4];
  if (a2)
  {
    if (!v4)
    {
      uint64_t v5 = sub_2EC08();
      uint64_t v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_data_add, 0, 0, v5);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 0x40000000;
      handler[2] = sub_444CC;
      handler[3] = &unk_69068;
      handler[4] = a1;
      dispatch_source_set_event_handler(v6, handler);
      dispatch_activate(v6);
      a1[4] = v6;
    }
  }
  else if (v4)
  {
    a1[4] = 0;
    dispatch_source_cancel(v4);
    dispatch_release(v4);
  }
}

uint64_t sub_443CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 192);
  if (v2 && *(unsigned char *)(a1 + 240) && (int v3 = *(_DWORD *)(a1 + 184)) != 0)
  {
    *(void *)a2 = *(void *)(a1 + 176);
    *(_DWORD *)(a2 + 8) = v3;
    *(void *)(a2 + 16) = v2;
    int v4 = *(_DWORD *)(a1 + 116);
    if (v4 == 3)
    {
      *(_OWORD *)(a2 + 76) = *(_OWORD *)(a1 + 76);
      *(unsigned char *)(a2 + 92) = *(unsigned char *)(a1 + 92);
      uint64_t v8 = *(void *)(a1 + 216);
      *(void *)(a2 + 96) = v8;
      unsigned int v5 = v8;
    }
    else
    {
      if (v4 != 2) {
        return 1;
      }
      unsigned int v5 = *(_DWORD *)(a1 + 216);
    }
    uint64_t v6 = 1;
    *(_DWORD *)(a2 + 72) = 1;
    double v9 = *(double *)(a1 + 200);
    *(double *)(a2 + 24) = v9;
    *(void *)(a2 + 32) = 0;
    if (v5 != -1) {
      *(double *)(a2 + 32) = v9 + (double)v5;
    }
  }
  else
  {
    uint64_t v6 = 0;
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 72) = 0;
  }
  return v6;
}

uint64_t sub_4447C(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(result + 56) && !*(_DWORD *)(result + 60) && !*(_DWORD *)(result + 64) && !*(_DWORD *)(result + 68)) {
    return sub_3A07C(a2);
  }
  *(void *)a2 = a2 + 12;
  *(_DWORD *)(a2 + 8) = 1;
  *(_OWORD *)(a2 + 12) = *(_OWORD *)(result + 56);
  *(void *)(a2 + 28) = *(unsigned __int8 *)(result + 72);
  return result;
}

uint64_t sub_444CC(uint64_t a1)
{
  return sub_444D4(*(void *)(a1 + 32));
}

uint64_t sub_444D4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 48);
    return v1(a1, v2, 1);
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      return __SC_log_send();
    }
  }
  return result;
}

void DHCPv6ClientHandleEvent(uint64_t a1, int a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 116) == 2)
  {
    switch(a2)
    {
      case 8:
        goto LABEL_5;
      case 9:
      case 10:
      case 12:
      case 13:
      case 14:
        return;
      case 11:
        sub_4488C(a1, a3);
        break;
      case 15:
        sub_446A8(a1, a3);
        break;
      case 16:
        sub_44E88(a1);
        break;
      default:
        if (a2 == 3) {
LABEL_5:
        }
          sub_44C88(a1, (uint64_t)a3);
        break;
    }
  }
}

void sub_446A8(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    int v2 = *((_DWORD *)a2 + 2);
    if (v2)
    {
      if (*(_DWORD *)(a1 + 120) == 3 && v2 >= 1)
      {
        for (uint64_t i = *a2; *(void *)(a1 + 56) != *(void *)i || *(void *)(a1 + 64) != *(void *)(i + 8); i += 32)
        {
          if (!--v2) {
            return;
          }
        }
        int v6 = *(_DWORD *)(i + 20);
        if ((v6 & 4) != 0)
        {
          sub_49DC4(a1, 0, 0);
        }
        else if ((v6 & 2) != 0)
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v8 = _os_log_pack_size();
            __chkstk_darwin(v8);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send();
          }
        }
        else
        {
          uint64_t v7 = *(NSObject **)(a1 + 32);
          if (v7)
          {
            dispatch_source_merge_data(v7, 1uLL);
          }
        }
      }
    }
  }
}

void sub_4488C(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = sub_4A334(*(void *)(a1 + 128));
  uint64_t v5 = v4;
  if (a2[1] && !a2[2])
  {
    sub_439DC(a1, (uint64_t)"Wake");
  }
  else if (sub_9368(v4) && *a2 == 1 || !sub_9368(v5) && !a2[3])
  {
    sub_439DC(a1, (uint64_t)"Wake");
    if (*(_DWORD *)(a1 + 120) != 1)
    {
      sub_46258(a1, 0, 0);
    }
  }
  else
  {
    double current_time = timer_get_current_time();
    char v7 = sub_43F84(a1, current_time);
    int v8 = *(_DWORD *)(a1 + 120);
    if (v7)
    {
      if ((v8 - 3) > 2 || *a2 == 2)
      {
        sub_45C10(a1, 0, 0);
      }
      else if (*(_DWORD *)(a1 + 216) != -1)
      {
        double v9 = *(double *)(a1 + 256);
        int v10 = dword_7007C;
        sub_4220();
        _SC_syslog_os_log_mapping();
        int v11 = __SC_log_enabled();
        if (current_time >= v9 || (double v12 = v9 - current_time, v12 < (double)v10))
        {
          if (v11)
          {
            uint64_t v15 = _os_log_pack_size();
            __chkstk_darwin(v15);
            __error();
            uint64_t v16 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v16 = 136315138;
            *(void *)(v16 + 4) = a1;
            __SC_log_send();
          }
          sub_48E78(a1, 0, 0);
        }
        else
        {
          if (v11)
          {
            uint64_t v13 = _os_log_pack_size();
            __chkstk_darwin(v13);
            __error();
            uint64_t v14 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v14 = 136315394;
            *(void *)(v14 + 4) = a1;
            *(_WORD *)(v14 + 12) = 2048;
            *(void *)(v14 + 14) = (unint64_t)v12;
            __SC_log_send();
          }
          timer_callout_set(*(void *)(a1 + 144), sub_48E78, a1, 0, 0, v12);
        }
      }
    }
    else if (v8 != 1)
    {
      sub_48354((void *)a1);
    }
  }
}

void sub_44C88(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) && !*(_DWORD *)(a2 + 8))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v6 = 136315394;
      *(void *)(v6 + 4) = a1;
      *(_WORD *)(v6 + 12) = 2080;
      *(void *)(v6 + 14) = "DHCPv6ClientHandleLinkStatusRenew";
      __SC_log_send();
    }
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v3 = _os_log_pack_size();
      __chkstk_darwin(v3);
      __error();
      uint64_t v4 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v4 = 136315394;
      *(void *)(v4 + 4) = a1;
      *(_WORD *)(v4 + 12) = 2080;
      *(void *)(v4 + 14) = "DHCPv6ClientHandleLinkStatusRenew";
      __SC_log_send();
    }
    sub_43414(a1);
  }
}

void sub_44E88(uint64_t a1)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    uint64_t v4 = *(unsigned int *)(a1 + 120);
    if (v4 > 0xB) {
      uint64_t v5 = "<unknown>";
    }
    else {
      uint64_t v5 = off_69088[v4];
    }
    *(_DWORD *)uint64_t v3 = 136315650;
    *(void *)(v3 + 4) = a1;
    *(_WORD *)(v3 + 12) = 2080;
    *(void *)(v3 + 14) = "DHCPv6ClientHandleRoam";
    *(_WORD *)(v3 + 22) = 2080;
    *(void *)(v3 + 24) = v5;
    __SC_log_send();
  }
  double current_time = timer_get_current_time();
  if (sub_43F84(a1, current_time))
  {
    if ((*(_DWORD *)(a1 + 120) - 3) <= 2) {
      sub_45C10(a1, 0, 0);
    }
  }
}

uint64_t sub_45008(uint64_t a1, int a2, __CFDictionary *a3)
{
  uint64_t v6 = sub_557C(a1);
  uint64_t v23 = v6;
  uint64_t v7 = sub_8B80(a1);
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
      if (!v6)
      {
        sub_454D8(a1, (uint64_t)a3);
        goto LABEL_25;
      }
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_30;
      }
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v12 = 136315138;
      *(void *)(v12 + 4) = v6;
      goto LABEL_29;
    case 1:
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v13 = _os_log_pack_size();
        __chkstk_darwin(v13);
        __error();
        uint64_t v14 = _os_log_pack_fill();
        uint64_t v15 = nullsub_1(v7);
        *(_DWORD *)uint64_t v14 = 136315138;
        *(void *)(v14 + 4) = v15;
        __SC_log_send();
      }
      if (v6)
      {
        sub_43EE4(&v23);
        sub_1E5C8(a1, 0);
LABEL_25:
        uint64_t result = 0;
      }
      else
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v20 = _os_log_pack_size();
          __chkstk_darwin(v20);
          __error();
          uint64_t v21 = _os_log_pack_fill();
          uint64_t v22 = nullsub_1(v7);
          *(_DWORD *)uint64_t v21 = 136315138;
          *(void *)(v21 + 4) = v22;
LABEL_29:
          __SC_log_send();
          uint64_t result = 6;
        }
        else
        {
LABEL_30:
          uint64_t result = 6;
        }
      }
      break;
    case 3:
    case 8:
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9);
        __error();
        uint64_t v10 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v10 = 136315394;
        *(void *)(v10 + 4) = v6;
        *(_WORD *)(v10 + 12) = 2080;
        *(void *)(v10 + 14) = "dhcpv6_pd_thread";
        __SC_log_send();
      }
      sub_43838(v6, 3);
      sub_44C88(v6, (uint64_t)a3);
      goto LABEL_25;
    case 4:
      sub_43950(v6);
      goto LABEL_25;
    case 7:
      uint64_t v16 = *(uint64_t **)a3;
      *((_DWORD *)a3 + 2) = 0;
      if (!v16) {
        goto LABEL_25;
      }
      if (*(unsigned __int8 *)(v6 + 112) == *((unsigned __int8 *)v16 + 16))
      {
        uint64_t v18 = *v16;
        uint64_t v17 = v16[1];
        if (v18 == *(void *)(v6 + 96) && v17 == *(void *)(v6 + 104)) {
          goto LABEL_25;
        }
      }
      uint64_t result = 0;
      *((_DWORD *)a3 + 2) = 1;
      break;
    case 11:
      sub_4488C(v6, a3);
      goto LABEL_25;
    case 14:
      sub_443CC(v6, (uint64_t)a3);
      goto LABEL_25;
    case 16:
      sub_44E88(v6);
      goto LABEL_25;
    case 22:
      sub_42E6C(v6, a3);
      goto LABEL_25;
    default:
      return result;
  }
  return result;
}

void sub_454D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_8B80(a1);
  uint64_t v5 = sub_43100(a1);
  sub_1E5C8(a1, (uint64_t)v5);
  sub_43838((uint64_t)v5, 3);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v6 = _os_log_pack_size();
    __chkstk_darwin(v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v7 + 4) = v5;
    __SC_log_send();
  }
  if (a2 && *(unsigned char *)(a2 + 16) && *((_DWORD *)v5 + 29) == 3)
  {
    *((unsigned char *)v5 + 112) = *(unsigned char *)(a2 + 16);
    int v5[6] = *(_OWORD *)a2;
  }
  sub_442E0(v5, (uint64_t)sub_4A15C, 0);
  unint64_t v8 = sub_9374(v4);
  if (HIDWORD(v8) || !v8) {
    sub_43278((uint64_t)v5);
  }
}

void sub_45680(uint64_t a1, int a2, unsigned __int8 **a3)
{
  uint64_t v6 = sub_4A334(*(void *)(a1 + 128));
  if (a2 == 5)
  {
    int v24 = 0;
    if (**a3 == 7)
    {
      if (sub_46BA4(a1, (uint64_t)a3[2]))
      {
        uint64_t v11 = sub_5B848((uint64_t)a3[2], 2, (unsigned int *)&v24, 0);
        if (v11)
        {
          if (sub_5A924(v11, v24))
          {
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v12 = _os_log_pack_size();
              __chkstk_darwin(v12);
              __error();
              uint64_t v13 = _os_log_pack_fill();
              uint64_t v14 = DHCPv6MessageTypeName(**a3);
              int v15 = *(_DWORD *)(a1 + 156);
              *(_DWORD *)uint64_t v13 = 136315650;
              *(void *)(v13 + 4) = a1;
              *(_WORD *)(v13 + 12) = 2080;
              *(void *)(v13 + 14) = v14;
              *(_WORD *)(v13 + 22) = 1024;
              *(_DWORD *)(v13 + 24) = v15;
              __SC_log_send();
            }
            sub_46C30(a1, (uint64_t)a3);
            uint64_t v16 = *(NSObject **)(a1 + 32);
            if (v16) {
              dispatch_source_merge_data(v16, 1uLL);
            }
            sub_46F6C(a1);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v7 = v6;
    if (a2 == 2) {
      goto LABEL_32;
    }
    if (a2) {
      return;
    }
    sub_43D98(a1, 0xAu);
    sub_438EC(a1);
    *(_DWORD *)(a1 + 156) = 0;
    uint32_t v8 = arc4random();
    *(_DWORD *)(a1 + 152) = v8 & 0xFFFFFF;
    sub_4A6B4(*(void *)(a1 + 128), v8 & 0xFFFFFF, (uint64_t)sub_45680, a1, 5);
    if (sub_5802C(v7) == 255)
    {
LABEL_32:
      if (*(_DWORD *)(a1 + 156))
      {
        unint64_t v9 = sub_9374(v7);
        if (HIDWORD(v9)) {
          BOOL v10 = 1;
        }
        else {
          BOOL v10 = v9 == 0;
        }
        if (!v10)
        {
          sub_468B4((void *)a1);
          return;
        }
      }
      else
      {
        *(CFAbsoluteTime *)(a1 + 160) = timer_get_current_time();
      }
      uint64_t v17 = *(void *)(a1 + 144);
      sub_46924(a1, 1.0, 3600.0);
      timer_callout_set(v17, sub_45680, a1, 2, 0, v18);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v19 = _os_log_pack_size();
        __chkstk_darwin(v19);
        __error();
        uint64_t v20 = _os_log_pack_fill();
        int v21 = *(_DWORD *)(a1 + 156);
        *(_DWORD *)uint64_t v20 = 136315394;
        *(void *)(v20 + 4) = a1;
        *(_WORD *)(v20 + 12) = 1024;
        *(_DWORD *)(v20 + 14) = v21;
        __SC_log_send();
      }
      sub_46A04(a1);
    }
    else
    {
      uint64_t v22 = *(void *)(a1 + 144);
      double v23 = (double)arc4random() / 4294967300.0;
      timer_callout_set(v22, sub_45680, a1, 2, 0, v23);
    }
  }
}

uint64_t sub_45AA0(uint64_t a1)
{
  uint64_t v2 = sub_8B80(*(void *)(a1 + 136));
  if (!sub_9368(v2)) {
    return 1;
  }
  uint64_t v3 = (const void *)sub_1ED00(*(void *)(a1 + 136));
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *(const void **)(a1 + 232);
    if (v5)
    {
      if (CFEqual(v3, v5)) {
        return 1;
      }
    }
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    uint64_t v9 = *(void *)(a1 + 232);
    *(_DWORD *)uint64_t v8 = 136315650;
    *(void *)(v8 + 4) = a1;
    *(_WORD *)(v8 + 12) = 2112;
    *(void *)(v8 + 14) = v4;
    *(_WORD *)(v8 + 22) = 2112;
    *(void *)(v8 + 24) = v9;
    __SC_log_send();
    return 0;
  }
  return result;
}

void sub_45C10(uint64_t a1, int a2, unsigned __int8 **a3)
{
  double current_time = timer_get_current_time();
  uint64_t v7 = sub_4A334(*(void *)(a1 + 128));
  if (a2 == 5)
  {
    unsigned __int16 v37 = 0;
    unsigned int v36 = 0;
    CFMutableStringRef v35 = 0;
    int v34 = 0;
    if (**a3 == 7)
    {
      if (sub_46BA4(a1, (uint64_t)a3[2]))
      {
        int v15 = sub_5B848((uint64_t)a3[2], 2, &v36, 0);
        if (v15)
        {
          if (sub_5A924(v15, v36) && sub_5C120((uint64_t)a3[2], &v37, &v35, &v34))
          {
            int v16 = v37;
            sub_4220();
            if (v16)
            {
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                uint64_t v17 = _os_log_pack_size();
                __chkstk_darwin(v17);
                __error();
                uint64_t v18 = _os_log_pack_fill();
                uint64_t v19 = DHCPv6MessageTypeName(**a3);
                uint64_t v20 = sub_5C0F8(v37);
                int v21 = v34;
                uint64_t v22 = v35;
                *(_DWORD *)uint64_t v18 = 136316162;
                *(void *)(v18 + 4) = a1;
                *(_WORD *)(v18 + 12) = 2080;
                *(void *)(v18 + 14) = v19;
                *(_WORD *)(v18 + 22) = 2080;
                *(void *)(v18 + 24) = v20;
                *(_WORD *)(v18 + 32) = 1040;
                *(_DWORD *)(v18 + 34) = v21;
                *(_WORD *)(v18 + 38) = 2080;
                *(void *)(v18 + 40) = v22;
                __SC_log_send();
              }
              sub_48354((void *)a1);
            }
            else
            {
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                uint64_t v28 = _os_log_pack_size();
                __chkstk_darwin(v28);
                __error();
                uint64_t v29 = _os_log_pack_fill();
                uint64_t v30 = DHCPv6MessageTypeName(**a3);
                int v31 = *(_DWORD *)(a1 + 156);
                *(_DWORD *)uint64_t v29 = 136315650;
                *(void *)(v29 + 4) = a1;
                *(_WORD *)(v29 + 12) = 2080;
                *(void *)(v29 + 14) = v30;
                *(_WORD *)(v29 + 22) = 1024;
                *(_DWORD *)(v29 + 24) = v31;
                __SC_log_send();
              }
              if (*(_DWORD *)(a1 + 116) == 3)
              {
                uint64_t v33 = 0;
                if (sub_4743C(a1, **a3, 0, (uint64_t)a3[2], &v33, 0))
                {
                  sub_483D0(a1, **a3, 0, (int8x8_t **)&v33, v32);
                  sub_46C30(a1, (uint64_t)a3);
                }
              }
              sub_47B3C(a1);
            }
          }
        }
      }
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (!a2)
      {
        sub_43D98(a1, 6u);
        sub_4AA90(*(void *)(a1 + 128));
        timer_cancel(*(void *)(a1 + 144));
        *(_DWORD *)(a1 + 156) = 0;
        *(unsigned char *)(a1 + 240) = 0;
        uint32_t v8 = arc4random();
        *(_DWORD *)(a1 + 152) = v8 & 0xFFFFFF;
        sub_4A6B4(*(void *)(a1 + 128), v8 & 0xFFFFFF, (uint64_t)sub_45C10, a1, 5);
        uint64_t v9 = *(void *)(a1 + 144);
        double v10 = (double)arc4random() / 4294967300.0;
        timer_callout_set(v9, sub_45C10, a1, 2, 0, v10);
      }
      return;
    }
    if (*(_DWORD *)(a1 + 156))
    {
      unint64_t v11 = sub_9374(v7);
      if (HIDWORD(v11)) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = v11 == 0;
      }
      if (!v12)
      {
        sub_468B4((void *)a1);
        return;
      }
      double v13 = *(double *)(a1 + 160);
      if (current_time <= v13 || current_time - v13 >= 10.0)
      {
        if (sub_43F84(a1, current_time))
        {
          sub_47B3C(a1);
        }
        else
        {
          sub_46258(a1, 0, 0);
        }
        return;
      }
    }
    else
    {
      *(double *)(a1 + 160) = current_time;
    }
    uint64_t v23 = *(void *)(a1 + 144);
    sub_46924(a1, 1.0, 4.0);
    timer_callout_set(v23, sub_45C10, a1, 2, 0, v24);
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v25 = _os_log_pack_size();
      __chkstk_darwin(v25);
      __error();
      uint64_t v26 = _os_log_pack_fill();
      int v27 = *(_DWORD *)(a1 + 156);
      *(_DWORD *)uint64_t v26 = 136315394;
      *(void *)(v26 + 4) = a1;
      *(_WORD *)(v26 + 12) = 1024;
      *(_DWORD *)(v26 + 14) = v27;
      __SC_log_send();
    }
    sub_47C90(a1);
  }
}

void sub_46258(uint64_t a1, int a2, unsigned __int8 **a3)
{
  uint64_t v6 = sub_4A334(*(void *)(a1 + 128));
  if (a2 == 5)
  {
    unsigned int v36 = 0;
    unsigned __int16 v35 = 0;
    uint64_t v33 = 0;
    int v34 = 0;
    if (**a3 == 2)
    {
      if (sub_46BA4(a1, (uint64_t)a3[2]))
      {
        BOOL v12 = sub_5B848((uint64_t)a3[2], 2, (unsigned int *)&v33, 0);
        if (v12)
        {
          double v13 = v12;
          if (sub_5A924(v12, v33))
          {
            if (sub_5C120((uint64_t)a3[2], &v35, &v34, (int *)&v33 + 1))
            {
              if (v35)
              {
                sub_4220();
                _SC_syslog_os_log_mapping();
                if (__SC_log_enabled())
                {
                  uint64_t v14 = _os_log_pack_size();
                  __chkstk_darwin(v14);
                  __error();
                  uint64_t v15 = _os_log_pack_fill();
                  int v16 = DHCPv6MessageTypeName(**a3);
                  uint64_t v17 = sub_5C0F8(v35);
                  int v18 = HIDWORD(v33);
                  uint64_t v19 = v34;
                  *(_DWORD *)uint64_t v15 = 136316162;
                  *(void *)(v15 + 4) = a1;
                  *(_WORD *)(v15 + 12) = 2080;
                  *(void *)(v15 + 14) = v16;
                  *(_WORD *)(v15 + 22) = 2080;
                  *(void *)(v15 + 24) = v17;
                  *(_WORD *)(v15 + 32) = 1040;
                  *(_DWORD *)(v15 + 34) = v18;
                  *(_WORD *)(v15 + 38) = 2080;
                  *(void *)(v15 + 40) = v19;
                  __SC_log_send();
                }
              }
              if ((v35 & 0xFFFB) != 2)
              {
                int v20 = *(_DWORD *)(a1 + 116);
                if (v20 == 2)
                {
                  int v21 = 1;
                }
                else
                {
                  if (v20 != 3) {
                    return;
                  }
                  int v21 = 0;
                }
                if (sub_4743C(a1, **a3, v21, (uint64_t)a3[2], &v36, 0))
                {
                  sub_483D0(a1, **a3, v21, (int8x8_t **)&v36, v27);
                  unsigned int v28 = sub_49D78((uint64_t)a3[2]);
                  uint64_t v29 = *(void *)(a1 + 192);
                  if (!v29 || sub_49D78(v29) < v28)
                  {
                    CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
                    sub_5A640(Mutable, v13, bswap32(*(v13 - 1)) >> 16);
                    sub_4220();
                    _SC_syslog_os_log_mapping();
                    if (__SC_log_enabled())
                    {
                      uint64_t v31 = _os_log_pack_size();
                      __chkstk_darwin(v31);
                      __error();
                      uint64_t v32 = _os_log_pack_fill();
                      *(_DWORD *)uint64_t v32 = 136315394;
                      *(void *)(v32 + 4) = a1;
                      *(_WORD *)(v32 + 12) = 2112;
                      *(void *)(v32 + 14) = Mutable;
                      __SC_log_send();
                    }
                    CFRelease(Mutable);
                    sub_46C30(a1, (uint64_t)a3);
                    if (*(int *)(a1 + 156) > 1 || v28 == 255) {
                      sub_49554(a1, 0, 0);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (!a2)
      {
        sub_43D98(a1, 1u);
        *(_DWORD *)(a1 + 156) = 0;
        sub_438EC(a1);
        uint32_t v7 = arc4random();
        *(_DWORD *)(a1 + 152) = v7 & 0xFFFFFF;
        sub_4A6B4(*(void *)(a1 + 128), v7 & 0xFFFFFF, (uint64_t)sub_46258, a1, 5);
        uint64_t v8 = *(void *)(a1 + 144);
        double v9 = (double)arc4random() / 4294967300.0;
        timer_callout_set(v8, sub_46258, a1, 2, 0, v9);
      }
      return;
    }
    if (*(_DWORD *)(a1 + 156))
    {
      unint64_t v10 = sub_9374(v6);
      if (HIDWORD(v10)) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = v10 == 0;
      }
      if (!v11)
      {
        sub_468B4((void *)a1);
        return;
      }
    }
    else
    {
      *(CFAbsoluteTime *)(a1 + 160) = timer_get_current_time();
    }
    if (*(_DWORD *)(a1 + 184))
    {
      sub_49554(a1, 0, 0);
    }
    else
    {
      uint64_t v22 = *(void *)(a1 + 144);
      sub_46924(a1, 1.0, 3600.0);
      timer_callout_set(v22, sub_46258, a1, 2, 0, v23);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v24 = _os_log_pack_size();
        __chkstk_darwin(v24);
        __error();
        uint64_t v25 = _os_log_pack_fill();
        int v26 = *(_DWORD *)(a1 + 156);
        *(_DWORD *)uint64_t v25 = 136315394;
        *(void *)(v25 + 4) = a1;
        *(_WORD *)(v25 + 12) = 1024;
        *(_DWORD *)(v25 + 14) = v26;
        __SC_log_send();
      }
      sub_49A34(a1);
      if (*(_DWORD *)(a1 + 116) == 2 && *(int *)(a1 + 156) >= 6) {
        (*(void (**)(uint64_t, void, uint64_t))(a1 + 40))(a1, *(void *)(a1 + 48), 2);
      }
    }
  }
}

void sub_468B4(void *a1)
{
  sub_4AA90(a1[16]);
  timer_cancel(a1[18]);
  sub_438EC((uint64_t)a1);
  sub_439DC((uint64_t)a1, (uint64_t)"Inactive");
  uint64_t v2 = a1[4];
  if (v2)
  {
    dispatch_source_merge_data(v2, 1uLL);
  }
}

uint64_t sub_46924(uint64_t a1, double a2, double a3)
{
  int v4 = *(_DWORD *)(a1 + 156);
  *(_DWORD *)(a1 + 156) = v4 + 1;
  if (v4)
  {
    double v6 = *(double *)(a1 + 168);
    uint64_t result = arc4random();
    double v8 = v6 * ((double)result / 4294967300.0 * 0.2 + -0.1) + v6 * 2.0;
    if (a3 != 0.0 && v8 > a3)
    {
      uint64_t result = arc4random();
      double v8 = a3 + ((double)result / 4294967300.0 * 0.2 + -0.1) * a3;
    }
  }
  else
  {
    uint64_t result = arc4random();
    double v8 = a2 + ((double)result / 4294967300.0 * 0.2 + -0.1) * a2;
  }
  *(double *)(a1 + 168) = v8;
  return result;
}

uint64_t sub_46A04(uint64_t a1)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t result = (uint64_t)sub_46FB0(a1, 11, v12, (uint64_t)v11);
  if (result)
  {
    uint64_t v3 = (unsigned __int8 *)result;
    int v4 = *(uint64_t **)(a1 + 128);
    int v5 = sub_5B370((uint64_t)v11);
    uint64_t result = sub_4ADA8(v4, v3, (v5 + 4));
    if (result > 0x32 || ((1 << result) & 0x4000000000041) == 0)
    {
      int v7 = result;
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v8 = _os_log_pack_size();
        __chkstk_darwin(v8);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        unint64_t v10 = strerror(v7);
        *(_DWORD *)uint64_t v9 = 136315394;
        *(void *)(v9 + 4) = a1;
        *(_WORD *)(v9 + 12) = 2080;
        *(void *)(v9 + 14) = v10;
        return __SC_log_send();
      }
    }
  }
  return result;
}

unsigned __int16 *sub_46BA4(uint64_t a1, uint64_t a2)
{
  LODWORD(v8) = 0;
  CFDataRef v3 = (const __CFData *)sub_473D8(a1);
  uint64_t result = sub_5B848(a2, 1, (unsigned int *)&v8, 0);
  if (result)
  {
    int v5 = result;
    CFIndex Length = CFDataGetLength(v3);
    if (Length == (int)v8)
    {
      BytePtr = CFDataGetBytePtr(v3);
      return (unsigned __int16 *)(bcmp(v5, BytePtr, (int)v8) == 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_46C30(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime current_time = timer_get_current_time();
  sub_438EC(a1);
  int v5 = (const void *)sub_1ED00(*(void *)(a1 + 136));
  double v6 = v5;
  if (v5) {
    CFRetain(v5);
  }
  memset(v26, 0, 256);
  unsigned int v25 = 0;
  sub_6DB0((const void **)(a1 + 232));
  *(void *)(a1 + 232) = v6;
  size_t v7 = *(int *)(a2 + 8);
  *(_DWORD *)(a1 + 184) = v7;
  size_t v8 = malloc_type_malloc(v7, 0x4846E733uLL);
  *(void *)(a1 + 176) = v8;
  memmove(v8, *(const void **)a2, *(int *)(a1 + 184));
  uint64_t v9 = sub_5B608(*(void *)(a1 + 176), *(_DWORD *)(a1 + 184), v26);
  *(void *)(a1 + 192) = v9;
  uint64_t result = (uint64_t)sub_5B848((uint64_t)v9, 2, &v25, 0);
  *(void *)(a1 + 264) = result;
  int v11 = *(_DWORD *)(a1 + 116);
  if (v11 == 2)
  {
    int v12 = 1;
  }
  else
  {
    if (v11 != 3)
    {
LABEL_34:
      *(unsigned char *)(a1 + 240) = 1;
      return result;
    }
    int v12 = 0;
  }
  uint64_t result = (uint64_t)sub_4743C(a1, **(unsigned __int8 **)(a1 + 176), v12, *(void *)(a1 + 192), (unsigned __int16 **)(a1 + 280), 0);
  *(void *)(a1 + 272) = result;
  if (result)
  {
    double v13 = *(unsigned int **)(a1 + 280);
    int32x2_t v14 = (int32x2_t)vrev32_s8(*(int8x8_t *)(result + 4));
    if (v12)
    {
      unsigned int v15 = bswap32(v13[5]);
      v13 += 4;
    }
    else
    {
      unsigned int v15 = bswap32(v13[1]);
    }
    unsigned int v22 = *v13;
    unsigned int v23 = bswap32(v22);
    if (v22) {
      unsigned int v24 = v23;
    }
    else {
      unsigned int v24 = v15;
    }
    if (v14.i32[0] && v14.i32[1])
    {
      if (v14.i32[0] == -1 || v14.i32[1] == -1)
      {
        *(CFAbsoluteTime *)(a1 + 200) = current_time;
        int32x2_t v14 = 0;
        unsigned int v15 = -1;
        goto LABEL_32;
      }
    }
    else if (v24 == -1)
    {
      int32x2_t v14 = 0;
    }
    else
    {
      int32x2_t v14 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmulq_n_f64((float64x2_t)xmmword_5D590, (double)v24)));
    }
    *(CFAbsoluteTime *)(a1 + 200) = current_time;
    if (v15 != -1)
    {
LABEL_33:
      *(int32x2_t *)(a1 + 208) = v14;
      *(_DWORD *)(a1 + 216) = v15;
      *(_DWORD *)(a1 + 220) = v24;
      goto LABEL_34;
    }
    int32x2_t v14 = 0;
LABEL_32:
    unsigned int v24 = -1;
    goto LABEL_33;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v16 = _os_log_pack_size();
    __chkstk_darwin(v16);
    __error();
    uint64_t v17 = _os_log_pack_fill();
    if (v12) {
      int v18 = 3;
    }
    else {
      int v18 = 25;
    }
    if (v12) {
      int v19 = 5;
    }
    else {
      int v19 = 26;
    }
    int v20 = sub_5B130(v18);
    int v21 = sub_5B130(v19);
    *(_DWORD *)uint64_t v17 = 136315906;
    *(void *)(v17 + 4) = a1;
    *(_WORD *)(v17 + 12) = 2080;
    *(void *)(v17 + 14) = "DHCPv6ClientSavePacket";
    *(_WORD *)(v17 + 22) = 2080;
    *(void *)(v17 + 24) = v20;
    *(_WORD *)(v17 + 32) = 2080;
    *(void *)(v17 + 34) = v21;
    return __SC_log_send();
  }
  return result;
}

void sub_46F6C(uint64_t a1)
{
  sub_43D98(a1, 0xBu);
  sub_4AA90(*(void *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 144);

  timer_cancel(v2);
}

unsigned char *sub_46FB0(uint64_t a1, char a2, unsigned char *a3, uint64_t a4)
{
  int v5 = a3;
  DHCPv6PacketSetMessageType(a3, a2);
  DHCPv6PacketSetTransactionID(v5, *(_DWORD *)(a1 + 152));
  sub_5B364(a4, (uint64_t)(v5 + 4), 1496);
  if (!sub_4724C(a1, a4)) {
    return 0;
  }
  memset(v14, 0, sizeof(v14));
  if (*(_DWORD *)(a1 + 116) != 3 && !sub_5B440(a4))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
LABEL_14:
      uint64_t v11 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v11 = 136315138;
      *(void *)(v11 + 4) = v14;
      __SC_log_send();
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 156) == 1)
  {
    LOWORD(v7) = 0;
  }
  else
  {
    unsigned int v8 = ((timer_get_current_time() - *(double *)(a1 + 160)) * 100.0);
    if (HIWORD(v8)) {
      LOWORD(v7) = -1;
    }
    else {
      unsigned int v7 = bswap32(v8) >> 16;
    }
  }
  __int16 v13 = v7;
  if (!sub_5B378(a4, 8u, 2uLL, &v13, (char *)v14))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10);
      __error();
      goto LABEL_14;
    }
    return 0;
  }
  return v5;
}

CFDataRef sub_4724C(uint64_t a1, uint64_t a2)
{
  CFDataRef v3 = (const __CFData *)sub_473D8(a1);
  CFDataRef v4 = v3;
  if (v3)
  {
    memset(v10, 0, sizeof(v10));
    unsigned __int16 Length = CFDataGetLength(v3);
    BytePtr = (UInt8 *)CFDataGetBytePtr(v4);
    CFDataRef v4 = (const __CFData *)(&def_58C8 + 1);
    if (!sub_5B378(a2, 1u, Length, BytePtr, (char *)v10))
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v7 = _os_log_pack_size();
        __chkstk_darwin(v7);
        __error();
        uint64_t v8 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v8 = 136315138;
        *(void *)(v8 + 4) = v10;
        __SC_log_send();
      }
      return 0;
    }
  }
  return v4;
}

uint64_t sub_473D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 241))
  {
    uint64_t result = *(void *)(a1 + 248);
    if (!result)
    {
      uint64_t v3 = sub_4A334(*(void *)(a1 + 128));
      uint64_t result = sub_4FD7C(v3);
      *(void *)(a1 + 248) = result;
    }
  }
  else
  {
    uint64_t result = qword_70280;
    if (!qword_70280)
    {
      uint64_t result = sub_4F3A8((unsigned __int16)G_dhcp_duid_type);
      qword_70280 = result;
    }
  }
  return result;
}

unsigned __int16 *sub_4743C(uint64_t a1, unsigned int a2, int a3, uint64_t a4, unsigned __int16 **a5, unsigned __int16 *a6)
{
  uint64_t v7 = a5;
  memset(v67, 0, sizeof(v67));
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  unsigned __int16 v64 = 0;
  uint64_t v63 = 0;
  if (a3) {
    int v11 = 3;
  }
  else {
    int v11 = 25;
  }
  *a5 = 0;
  int v12 = sub_5B848(a4, v11, (unsigned int *)&v65, 0);
  __int16 v13 = v12;
  if (!v12
    || (int v14 = v65, (int)v65 < 13)
    || (unsigned int v15 = bswap32(*((_DWORD *)v12 + 1))) != 0 && (v16 = *((_DWORD *)v12 + 2)) != 0 && v15 > bswap32(v16))
  {
LABEL_9:
    uint64_t v17 = 0;
    goto LABEL_10;
  }
  int v57 = v11;
  unsigned int v60 = a2;
  uint64_t v61 = a1;
  LODWORD(v65) = v65 - 12;
  int v20 = sub_5B4E8(v12 + 6, v14 - 12, (char *)v67);
  uint64_t v63 = v20;
  if (!v20)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v44 = _os_log_pack_size();
      __chkstk_darwin(v44);
      __error();
      uint64_t v45 = _os_log_pack_fill();
      uint64_t v46 = sub_5B130(v57);
      uint64_t v47 = DHCPv6MessageTypeName(v60);
      *(_DWORD *)uint64_t v45 = 136315650;
      *(void *)(v45 + 4) = v61;
      *(_WORD *)(v45 + 12) = 2080;
      *(void *)(v45 + 14) = v46;
      *(_WORD *)(v45 + 22) = 2080;
      *(void *)(v45 + 24) = v47;
      __SC_log_send();
    }
    goto LABEL_9;
  }
  uint64_t v17 = (uint64_t)v20;
  if (sub_5C120((uint64_t)v20, &v64, &v66, (int *)&v65 + 1))
  {
    uint64_t v54 = a6;
    uint64_t v55 = v7;
    if (v64)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v21 = _os_log_pack_size();
        __chkstk_darwin(v21);
        __error();
        uint64_t v22 = _os_log_pack_fill();
        unsigned int v23 = sub_5B130(v57);
        unsigned int v24 = sub_5C0F8(v64);
        int v25 = HIDWORD(v65);
        int v26 = v66;
        *(_DWORD *)uint64_t v22 = 136316162;
        *(void *)(v22 + 4) = v61;
        *(_WORD *)(v22 + 12) = 2080;
        *(void *)(v22 + 14) = v23;
        *(_WORD *)(v22 + 22) = 2080;
        *(void *)(v22 + 24) = v24;
        *(_WORD *)(v22 + 32) = 1040;
        *(_DWORD *)(v22 + 34) = v25;
        *(_WORD *)(v22 + 38) = 2080;
        *(void *)(v22 + 40) = v26;
        __SC_log_send();
      }
    }
    if (a3) {
      int v27 = 5;
    }
    else {
      int v27 = 26;
    }
    int v62 = 0;
    unsigned int v28 = sub_5B848(v17, v27, (unsigned int *)&v65, &v62);
    if (v28)
    {
      if (a3) {
        int v30 = 24;
      }
      else {
        int v30 = 25;
      }
      LODWORD(v58) = v30;
      *(void *)&long long v29 = 136315650;
      long long v56 = v29;
      while ((int)v65 >= (int)v58)
      {
        if (a3)
        {
          unsigned int v31 = bswap32(*((_DWORD *)v28 + 5));
          uint64_t v32 = (unsigned int *)(v28 + 8);
        }
        else
        {
          unsigned int v31 = bswap32(*((_DWORD *)v28 + 1));
          uint64_t v32 = (unsigned int *)v28;
        }
        unsigned int v33 = *v32;
        if (v31) {
          BOOL v34 = v33 == 0;
        }
        else {
          BOOL v34 = 1;
        }
        if (!v34)
        {
          unsigned int v48 = bswap32(v33);
          if (v48 <= v31)
          {
            *uint64_t v55 = v28;
            goto LABEL_46;
          }
          uint64_t v49 = sub_4220();
          _SC_syslog_os_log_mapping();
          if (!__SC_log_enabled()) {
            goto LABEL_46;
          }
          uint64_t v50 = _os_log_pack_size();
          uint64_t v58 = v49;
          uint64_t v59 = &v54;
          __chkstk_darwin(v50);
          __error();
          uint64_t v51 = _os_log_pack_fill();
          uint64_t v52 = DHCPv6MessageTypeName(v60);
          char v53 = sub_5B130(v27);
          *(_DWORD *)uint64_t v51 = 136316162;
          *(void *)(v51 + 4) = v61;
          *(_WORD *)(v51 + 12) = 2080;
          *(void *)(v51 + 14) = v52;
          *(_WORD *)(v51 + 22) = 2080;
          *(void *)(v51 + 24) = v53;
          *(_WORD *)(v51 + 32) = 1024;
          *(_DWORD *)(v51 + 34) = v48;
          *(_WORD *)(v51 + 38) = 1024;
          *(_DWORD *)(v51 + 40) = v31;
          goto LABEL_45;
        }
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v35 = _os_log_pack_size();
          uint64_t v59 = &v54;
          __chkstk_darwin(v35);
          __error();
          uint64_t v36 = _os_log_pack_fill();
          unsigned __int16 v37 = DHCPv6MessageTypeName(v60);
          uint64_t v38 = sub_5B130(v27);
          *(_DWORD *)uint64_t v36 = v56;
          *(void *)(v36 + 4) = v61;
          *(_WORD *)(v36 + 12) = 2080;
          *(void *)(v36 + 14) = v37;
          *(_WORD *)(v36 + 22) = 2080;
          *(void *)(v36 + 24) = v38;
          __SC_log_send();
        }
        ++v62;
        unsigned int v28 = sub_5B848(v17, v27, (unsigned int *)&v65, &v62);
        if (!v28) {
          break;
        }
      }
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v39 = _os_log_pack_size();
      uint64_t v59 = &v54;
      __chkstk_darwin(v39);
      __error();
      uint64_t v40 = _os_log_pack_fill();
      uint64_t v41 = DHCPv6MessageTypeName(v60);
      int v42 = sub_5B130(v57);
      int v43 = sub_5B130(v27);
      *(_DWORD *)uint64_t v40 = 136315906;
      *(void *)(v40 + 4) = v61;
      *(_WORD *)(v40 + 12) = 2080;
      *(void *)(v40 + 14) = v41;
      *(_WORD *)(v40 + 22) = 2080;
      *(void *)(v40 + 24) = v42;
      *(_WORD *)(v40 + 32) = 2080;
      *(void *)(v40 + 34) = v43;
LABEL_45:
      __SC_log_send();
    }
LABEL_46:
    a6 = v54;
    uint64_t v7 = v55;
  }
LABEL_10:
  int v18 = *v7;
  if (a6) {
    *a6 = v64;
  }
  if (v17) {
    sub_5B620(&v63);
  }
  if (v18) {
    return v13;
  }
  else {
    return 0;
  }
}

void sub_47B3C(uint64_t a1)
{
  double current_time = timer_get_current_time();
  sub_43D98(a1, 3u);
  *(unsigned char *)(a1 + 224) = 1;
  *(unsigned char *)(a1 + 240) = 1;
  sub_4AA90(*(void *)(a1 + 128));
  timer_cancel(*(void *)(a1 + 144));
  unsigned int v4 = *(_DWORD *)(a1 + 216);
  unsigned int v3 = *(_DWORD *)(a1 + 220);
  if (v4 == -1)
  {
    unsigned int v6 = 0;
    int v7 = -1;
  }
  else
  {
    double v5 = *(double *)(a1 + 200);
    if (current_time < v5 || (unsigned int v6 = (current_time - v5), v7 = v4 - v6, v4 <= v6))
    {
      sub_48354((void *)a1);
      return;
    }
    if (v3 >= v6) {
      v3 -= v6;
    }
    else {
      unsigned int v3 = 0;
    }
  }
  if (*(_DWORD *)(a1 + 116) == 2)
  {
    BOOL v8 = sub_48600(a1, v7, v3);
    if (v7 == -1 || !v8) {
      return;
    }
  }
  else
  {
    sub_48C7C(a1, v7, v3);
    if (v7 == -1) {
      return;
    }
  }
  unsigned int v9 = *(_DWORD *)(a1 + 208);
  BOOL v10 = v9 >= v6;
  unsigned int v11 = v9 - v6;
  double v12 = (double)v11;
  if (v11 == 0 || !v10) {
    double v12 = 10.0;
  }
  *(double *)(a1 + 256) = current_time + v12;
  uint64_t v13 = *(void *)(a1 + 144);

  timer_callout_set(v13, sub_48E78, a1, 0, 0, v12);
}

uint64_t sub_47C90(uint64_t a1)
{
  memset(v24, 0, sizeof(v24));
  v23[0] = 0;
  v23[1] = 0;
  if (!*(void *)(a1 + 264))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
LABEL_8:
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 136315394;
    *(void *)(v5 + 4) = a1;
    *(_WORD *)(v5 + 12) = 2080;
    *(void *)(v5 + 14) = "DHCPv6ClientSendPacket";
    return __SC_log_send();
  }
  if (!*(void *)(a1 + 272))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
    goto LABEL_8;
  }
  int v2 = 3;
  switch(*(_DWORD *)(a1 + 120))
  {
    case 2:
      goto LABEL_18;
    case 4:
      int v2 = 5;
      goto LABEL_18;
    case 5:
      int v2 = 6;
      goto LABEL_18;
    case 6:
      if (*(_DWORD *)(a1 + 116) == 3) {
        int v2 = 6;
      }
      else {
        int v2 = 4;
      }
      goto LABEL_18;
    case 7:
      int v2 = 8;
      goto LABEL_18;
    case 9:
      int v2 = 9;
LABEL_18:
      uint64_t result = (uint64_t)sub_46FB0(a1, v2, v25, (uint64_t)v23);
      if (!result) {
        return result;
      }
      BOOL v10 = (unsigned __int8 *)result;
      if ((v2 | 2) != 6
        && !sub_5B378((uint64_t)v23, 2u, bswap32(*(unsigned __int16 *)(*(void *)(a1 + 264) - 2)) >> 16, *(void **)(a1 + 264), (char *)v24))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        uint64_t result = __SC_log_enabled();
        if (!result) {
          return result;
        }
        uint64_t v17 = _os_log_pack_size();
        __chkstk_darwin(v17);
        __error();
        uint64_t v18 = _os_log_pack_fill();
        uint64_t v19 = *(unsigned int *)(a1 + 120);
        if (v19 > 0xB) {
          int v20 = "<unknown>";
        }
        else {
          int v20 = off_69088[v19];
        }
        *(_DWORD *)uint64_t v18 = 136315650;
        *(void *)(v18 + 4) = a1;
        *(_WORD *)(v18 + 12) = 2080;
        *(void *)(v18 + 14) = v20;
        *(_WORD *)(v18 + 22) = 2080;
        *(void *)(v18 + 24) = v24;
        return __SC_log_send();
      }
      if (*(_DWORD *)(a1 + 116) == 2)
      {
        if (!sub_49370(a1, 0, (uint64_t)v23, (char *)v24))
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          uint64_t result = __SC_log_enabled();
          if (!result) {
            return result;
          }
LABEL_34:
          uint64_t v21 = _os_log_pack_size();
          __chkstk_darwin(v21);
          __error();
          uint64_t v22 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v22 = 136315138;
          *(void *)(v22 + 4) = v24;
          return __SC_log_send();
        }
      }
      else if (!sub_49428(a1, 0, (uint64_t)v23, (char *)v24))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        uint64_t result = __SC_log_enabled();
        if (!result) {
          return result;
        }
        goto LABEL_34;
      }
      unsigned int v11 = *(uint64_t **)(a1 + 128);
      int v12 = sub_5B370((uint64_t)v23);
      uint64_t result = sub_4ADA8(v11, v10, (v12 + 4));
      int v13 = result;
      if (result > 0x32 || ((1 << result) & 0x4000000000041) == 0)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        uint64_t result = __SC_log_enabled();
        if (result)
        {
          uint64_t v14 = _os_log_pack_size();
          __chkstk_darwin(v14);
          __error();
          uint64_t v15 = _os_log_pack_fill();
          unsigned int v16 = strerror(v13);
          *(_DWORD *)uint64_t v15 = 136315394;
          *(void *)(v15 + 4) = a1;
          *(_WORD *)(v15 + 12) = 2080;
          *(void *)(v15 + 14) = v16;
          return __SC_log_send();
        }
      }
      return result;
    default:
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (!result) {
        return result;
      }
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      uint64_t v8 = *(unsigned int *)(a1 + 120);
      if (v8 > 0xB) {
        unsigned int v9 = "<unknown>";
      }
      else {
        unsigned int v9 = off_69088[v8];
      }
      *(_DWORD *)uint64_t v7 = 136315394;
      *(void *)(v7 + 4) = a1;
      *(_WORD *)(v7 + 12) = 2080;
      *(void *)(v7 + 14) = v9;
      return __SC_log_send();
  }
}

uint64_t sub_48354(void *a1)
{
  sub_43D98((uint64_t)a1, 8u);
  sub_4AA90(a1[16]);
  timer_cancel(a1[18]);
  sub_439DC((uint64_t)a1, (uint64_t)"Unbound");
  sub_438EC((uint64_t)a1);
  int v2 = a1[4];
  if (v2) {
    dispatch_source_merge_data(v2, 1uLL);
  }

  return sub_46258(a1, 0, 0);
}

uint64_t sub_483D0(uint64_t a1, unsigned int a2, int a3, int8x8_t **a4, __n128 a5)
{
  uint64_t v7 = *a4;
  if (a3)
  {
    a5.n128_u64[0] = (unint64_t)vrev32_s8(v7[2]);
    __n128 v21 = a5;
    __str[0] = 0;
    int v8 = 5;
  }
  else
  {
    int v9 = v7[1].u8[0];
    a5.n128_u64[0] = (unint64_t)vrev32_s8(*v7);
    __n128 v21 = a5;
    snprintf(__str, 8uLL, "/%d", v9);
    int v8 = 26;
    uint64_t v7 = (int8x8_t *)((char *)v7 + 9);
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v11 = _os_log_pack_size();
    v20[1] = v20;
    __chkstk_darwin(v11);
    __error();
    uint64_t v12 = _os_log_pack_fill();
    uint64_t v13 = *(unsigned int *)(a1 + 120);
    if (v13 > 0xB) {
      uint64_t v14 = "<unknown>";
    }
    else {
      uint64_t v14 = off_69088[v13];
    }
    uint64_t v15 = DHCPv6MessageTypeName(a2);
    int v16 = *(_DWORD *)(a1 + 156);
    uint64_t v17 = sub_5B130(v8);
    uint64_t v18 = inet_ntop(30, v7, v23, 0x2Eu);
    *(_DWORD *)uint64_t v12 = 136317186;
    *(void *)(v12 + 4) = a1;
    *(_WORD *)(v12 + 12) = 2080;
    *(void *)(v12 + 14) = v14;
    *(_WORD *)(v12 + 22) = 2080;
    *(void *)(v12 + 24) = v15;
    *(_WORD *)(v12 + 32) = 1024;
    *(_DWORD *)(v12 + 34) = v16;
    *(_WORD *)(v12 + 38) = 2080;
    *(void *)(v12 + 40) = v17;
    *(_WORD *)(v12 + 48) = 2080;
    *(void *)(v12 + 50) = v18;
    *(_WORD *)(v12 + 58) = 2080;
    *(void *)(v12 + 60) = __str;
    *(_WORD *)(v12 + 68) = 1024;
    unsigned __int32 v19 = v21.n128_u32[1];
    *(_DWORD *)(v12 + 70) = v21.n128_u32[0];
    *(_WORD *)(v12 + 74) = 1024;
    *(_DWORD *)(v12 + 76) = v19;
    return __SC_log_send();
  }
  return result;
}

BOOL sub_48600(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_4A334(*(void *)(a1 + 128));
  int8x16_t v47 = *(int8x16_t *)*(void *)(a1 + 280);
  int v7 = sub_36628();
  if ((v7 & 0x80000000) == 0)
  {
    int v8 = (int8x16_t *)(a1 + 56);
    if ((*(_DWORD *)(a1 + 56) || *(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 64) || *(_DWORD *)(a1 + 68))
      && (v8->i64[0] != v47.i64[0] || *(void *)(a1 + 64) != v47.i64[1]))
    {
      inet_ntop(30, (const void *)(a1 + 56), v49, 0x2Eu);
      BOOL v10 = (const char *)nullsub_1(v6);
      int v11 = sub_38684(v7, v10, (_OWORD *)(a1 + 56));
      sub_4220();
      _SC_syslog_os_log_mapping();
      int v12 = __SC_log_enabled();
      if (v11 < 0)
      {
        if (!v12) {
          goto LABEL_18;
        }
        int v46 = a3;
        uint64_t v22 = _os_log_pack_size();
        uint64_t v45 = &v43;
        __chkstk_darwin(v22);
        __error();
        uint64_t v23 = _os_log_pack_fill();
        uint64_t v44 = nullsub_1(v6);
        unsigned int v24 = __error();
        int v43 = strerror(*v24);
        int v25 = *__error();
        *(_DWORD *)uint64_t v23 = 136316162;
        *(void *)(v23 + 4) = "DHCPv6ClientBoundAddress";
        *(_WORD *)(v23 + 12) = 2080;
        *(void *)(v23 + 14) = v44;
        *(_WORD *)(v23 + 22) = 2080;
        *(void *)(v23 + 24) = v49;
        *(_WORD *)(v23 + 32) = 2080;
        *(void *)(v23 + 34) = v43;
        *(_WORD *)(v23 + 42) = 1024;
        *(_DWORD *)(v23 + 44) = v25;
      }
      else
      {
        if (!v12) {
          goto LABEL_18;
        }
        int v46 = a3;
        uint64_t v13 = _os_log_pack_size();
        uint64_t v45 = &v43;
        __chkstk_darwin(v13);
        __error();
        uint64_t v14 = _os_log_pack_fill();
        uint64_t v15 = nullsub_1(v6);
        *(_DWORD *)uint64_t v14 = 136315650;
        *(void *)(v14 + 4) = "DHCPv6ClientBoundAddress";
        *(_WORD *)(v14 + 12) = 2080;
        *(void *)(v14 + 14) = v15;
        *(_WORD *)(v14 + 22) = 2080;
        *(void *)(v14 + 24) = v49;
      }
      __SC_log_send();
      a3 = v46;
    }
LABEL_18:
    int v26 = sub_58DC8(v6);
    int v27 = sub_38828(&v47, v26);
    if (v27) {
      int v28 = v27;
    }
    else {
      int v28 = 128;
    }
    inet_ntop(30, &v47, v49, 0x2Eu);
    long long v29 = (const char *)nullsub_1(v6);
    int v46 = v7;
    int v30 = sub_38ABC(v7, v29, &v47, 0, v28, 256, a2, a3);
    sub_4220();
    _SC_syslog_os_log_mapping();
    int v31 = __SC_log_enabled();
    if (v30 < 0)
    {
      if (v31)
      {
        uint64_t v34 = _os_log_pack_size();
        __chkstk_darwin(v34);
        __error();
        uint64_t v35 = _os_log_pack_fill();
        uint64_t v45 = (char **)nullsub_1(v6);
        uint64_t v36 = __error();
        unsigned __int16 v37 = strerror(*v36);
        int v38 = *__error();
        *(_DWORD *)uint64_t v35 = 136316162;
        *(void *)(v35 + 4) = "DHCPv6ClientBoundAddress";
        *(_WORD *)(v35 + 12) = 2080;
        *(void *)(v35 + 14) = v45;
        *(_WORD *)(v35 + 22) = 2080;
        *(void *)(v35 + 24) = v49;
        *(_WORD *)(v35 + 32) = 2080;
        *(void *)(v35 + 34) = v37;
        *(_WORD *)(v35 + 42) = 1024;
        *(_DWORD *)(v35 + 44) = v38;
        goto LABEL_26;
      }
    }
    else if (v31)
    {
      uint64_t v32 = _os_log_pack_size();
      uint64_t v45 = &v43;
      __chkstk_darwin(v32);
      __error();
      uint64_t v33 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v33 = 136316162;
      *(void *)(v33 + 4) = a1;
      *(_WORD *)(v33 + 12) = 2080;
      *(void *)(v33 + 14) = v49;
      *(_WORD *)(v33 + 22) = 1024;
      *(_DWORD *)(v33 + 24) = v28;
      *(_WORD *)(v33 + 28) = 1024;
      *(_DWORD *)(v33 + 30) = a2;
      *(_WORD *)(v33 + 34) = 1024;
      *(_DWORD *)(v33 + 36) = a3;
LABEL_26:
      __SC_log_send();
    }
    uint64_t v39 = *(NSObject **)(a1 + 32);
    if (v39) {
      dispatch_source_merge_data(v39, 1uLL);
    }
    int8x16_t *v8 = v47;
    *(unsigned char *)(a1 + 72) = v28;
    memset(v48, 0, 184);
    uint64_t v40 = sub_4A334(*(void *)(a1 + 128));
    int v41 = sub_58DC8(v40);
    sub_399B8((uint64_t)v48, v41);
    sub_446A8(a1, v48);
    sub_3A038((uint64_t)v48);
    int v7 = v46;
    close(v46);
    return v7 >= 0;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v16 = _os_log_pack_size();
    __chkstk_darwin(v16);
    __error();
    uint64_t v17 = _os_log_pack_fill();
    uint64_t v18 = nullsub_1(v6);
    unsigned __int32 v19 = __error();
    int v20 = strerror(*v19);
    int v21 = *__error();
    *(_DWORD *)uint64_t v17 = 136315906;
    *(void *)(v17 + 4) = "DHCPv6ClientBoundAddress";
    *(_WORD *)(v17 + 12) = 2080;
    *(void *)(v17 + 14) = v18;
    *(_WORD *)(v17 + 22) = 2080;
    *(void *)(v17 + 24) = v20;
    *(_WORD *)(v17 + 32) = 1024;
    *(_DWORD *)(v17 + 34) = v21;
    __SC_log_send();
  }
  return v7 >= 0;
}

void sub_48C7C(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = (_OWORD *)(a1 + 76);
  uint64_t v7 = *(void *)(a1 + 280);
  int v8 = (_OWORD *)(v7 + 9);
  long long v15 = *(_OWORD *)(v7 + 9);
  char v9 = *(unsigned char *)(v7 + 8);
  if (*(_DWORD *)(a1 + 76) || *(_DWORD *)(a1 + 80) || *(_DWORD *)(a1 + 84) || *(_DWORD *)(a1 + 88))
  {
    if (*(_OWORD *)(a1 + 76) == v15) {
      BOOL v10 = "Maintained";
    }
    else {
      BOOL v10 = "Changed";
    }
  }
  else
  {
    BOOL v10 = "New";
  }
  *uint64_t v6 = *v8;
  *(unsigned char *)(a1 + 92) = v9;
  inet_ntop(30, v6, v16, 0x2Eu);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v11 = _os_log_pack_size();
    __chkstk_darwin(v11);
    __error();
    uint64_t v12 = _os_log_pack_fill();
    int v13 = *(unsigned __int8 *)(a1 + 92);
    *(_DWORD *)uint64_t v12 = 136316418;
    *(void *)(v12 + 4) = a1;
    *(_WORD *)(v12 + 12) = 2080;
    *(void *)(v12 + 14) = v10;
    *(_WORD *)(v12 + 22) = 2080;
    *(void *)(v12 + 24) = v16;
    *(_WORD *)(v12 + 32) = 1024;
    *(_DWORD *)(v12 + 34) = v13;
    *(_WORD *)(v12 + 38) = 1024;
    *(_DWORD *)(v12 + 40) = a2;
    *(_WORD *)(v12 + 44) = 1024;
    *(_DWORD *)(v12 + 46) = a3;
    __SC_log_send();
  }
  uint64_t v14 = *(NSObject **)(a1 + 32);
  if (v14) {
    dispatch_source_merge_data(v14, 1uLL);
  }
}

void sub_48E78(uint64_t a1, int a2, unsigned __int8 **a3)
{
  double current_time = timer_get_current_time();
  if (a2 == 5)
  {
    uint64_t v32 = 0;
    unsigned __int16 v31 = 0;
    uint64_t v29 = 0;
    int v30 = 0;
    if (**a3 == 7)
    {
      if (sub_46BA4(a1, (uint64_t)a3[2]))
      {
        uint64_t v12 = sub_5B848((uint64_t)a3[2], 2, (unsigned int *)&v29, 0);
        if (v12)
        {
          if (sub_5A924(v12, v29) && sub_5C120((uint64_t)a3[2], &v31, &v30, (int *)&v29 + 1))
          {
            if (v31)
            {
              sub_4220();
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                uint64_t v13 = _os_log_pack_size();
                __chkstk_darwin(v13);
                __error();
                uint64_t v14 = _os_log_pack_fill();
                long long v15 = DHCPv6MessageTypeName(**a3);
                uint64_t v16 = sub_5C0F8(v31);
                int v17 = HIDWORD(v29);
                uint64_t v18 = v30;
                *(_DWORD *)uint64_t v14 = 136316162;
                *(void *)(v14 + 4) = a1;
                *(_WORD *)(v14 + 12) = 2080;
                *(void *)(v14 + 14) = v15;
                *(_WORD *)(v14 + 22) = 2080;
                *(void *)(v14 + 24) = v16;
                *(_WORD *)(v14 + 32) = 1040;
                *(_DWORD *)(v14 + 34) = v17;
                *(_WORD *)(v14 + 38) = 2080;
                *(void *)(v14 + 40) = v18;
                __SC_log_send();
              }
            }
            else
            {
              int v27 = *(_DWORD *)(a1 + 116);
              if (sub_4743C(a1, **a3, v27 == 2, (uint64_t)a3[2], &v32, 0))
              {
                sub_483D0(a1, **a3, v27 == 2, (int8x8_t **)&v32, v28);
                sub_46C30(a1, (uint64_t)a3);
                sub_47B3C(a1);
                return;
              }
            }
            sub_48354((void *)a1);
          }
        }
      }
    }
  }
  else
  {
    double v7 = current_time;
    if (a2 != 2)
    {
      if (a2) {
        return;
      }
      sub_43D98(a1, 4u);
      sub_4AA90(*(void *)(a1 + 128));
      timer_cancel(*(void *)(a1 + 144));
      *(_DWORD *)(a1 + 156) = 0;
      *(double *)(a1 + 160) = v7;
      uint32_t v8 = arc4random();
      *(_DWORD *)(a1 + 152) = v8 & 0xFFFFFF;
      sub_4A6B4(*(void *)(a1 + 128), v8 & 0xFFFFFF, (uint64_t)sub_48E78, a1, 5);
    }
    if (sub_43F84(a1, v7))
    {
      unsigned int v9 = (v7 - *(double *)(a1 + 200));
      if (*(_DWORD *)(a1 + 212) <= v9)
      {
        if (*(_DWORD *)(a1 + 120) != 5)
        {
          uint32_t v19 = arc4random();
          *(_DWORD *)(a1 + 152) = v19 & 0xFFFFFF;
          sub_4A6B4(*(void *)(a1 + 128), v19 & 0xFFFFFF, (uint64_t)sub_48E78, a1, 5);
          *(double *)(a1 + 160) = v7;
          sub_43D98(a1, 5u);
          *(_DWORD *)(a1 + 156) = 0;
        }
        sub_46924(a1, 10.0, 600.0);
        int v11 = *(_DWORD *)(a1 + 216);
      }
      else
      {
        sub_46924(a1, 10.0, 600.0);
        int v11 = *(_DWORD *)(a1 + 212);
      }
      unsigned int v20 = v11 - v9;
      if (v10 <= (double)v20) {
        double v21 = v10;
      }
      else {
        double v21 = (double)v20;
      }
      *(double *)(a1 + 256) = v7 + v21;
      timer_callout_set(*(void *)(a1 + 144), sub_48E78, a1, 2, 0, v21);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v22 = _os_log_pack_size();
        __chkstk_darwin(v22);
        __error();
        uint64_t v23 = _os_log_pack_fill();
        uint64_t v24 = *(unsigned int *)(a1 + 120);
        if (v24 > 0xB) {
          int v25 = "<unknown>";
        }
        else {
          int v25 = off_69088[v24];
        }
        int v26 = *(_DWORD *)(a1 + 156);
        *(_DWORD *)uint64_t v23 = 136315906;
        *(void *)(v23 + 4) = a1;
        *(_WORD *)(v23 + 12) = 2080;
        *(void *)(v23 + 14) = v25;
        *(_WORD *)(v23 + 22) = 1024;
        *(_DWORD *)(v23 + 24) = v26;
        *(_WORD *)(v23 + 28) = 2048;
        *(void *)(v23 + 30) = (unint64_t)v21;
        __SC_log_send();
      }
      sub_47C90(a1);
    }
    else
    {
      sub_48354((void *)a1);
    }
  }
}

BOOL sub_49370(uint64_t a1, char a2, uint64_t a3, char *a4)
{
  v10[1] = 0;
  v10[2] = 0;
  v10[0] = bswap32(sub_49510(a1));
  if (a2)
  {
    size_t v8 = 12;
  }
  else
  {
    _OWORD v10[3] = 402654464;
    long long v11 = *(_OWORD *)*(void *)(a1 + 280);
    uint64_t v12 = 0;
    size_t v8 = 40;
  }
  return sub_5B378(a3, 3u, v8, v10, a4);
}

BOOL sub_49428(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v15 = 0;
  unsigned int __src = bswap32(sub_49510(a1));
  if (a2)
  {
    size_t v8 = (char *)(a1 + 112);
    if (!*(unsigned char *)(a1 + 112))
    {
      size_t v12 = 12;
      return sub_5B378(a3, 0x19u, v12, &__src, a4);
    }
    int v16 = 419437056;
    unsigned int v9 = (long long *)(a1 + 96);
  }
  else
  {
    int v16 = 419437056;
    uint64_t v10 = *(void *)(a1 + 280);
    unsigned int v9 = (long long *)(v10 + 9);
    size_t v8 = (char *)(v10 + 8);
  }
  char v11 = *v8;
  long long v19 = *v9;
  char v18 = v11;
  uint64_t v17 = 0;
  size_t v12 = 41;
  return sub_5B378(a3, 0x19u, v12, &__src, a4);
}

CFIndex sub_49510(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 241)) {
    return 0;
  }
  uint64_t v2 = sub_4A334(*(void *)(a1 + 128));
  unsigned int v3 = (char *)nullsub_1(v2);

  return sub_4FDE0(v3);
}

void sub_49554(uint64_t a1, int a2, unsigned __int8 **a3)
{
  if (a2 == 5)
  {
    int v26 = 0;
    unsigned __int16 v25 = 0;
    unsigned int v24 = 0;
    uint64_t v23 = 0;
    int v22 = 0;
    if (**a3 == 7)
    {
      if (sub_46BA4(a1, (uint64_t)a3[2]))
      {
        uint64_t v5 = sub_5B848((uint64_t)a3[2], 2, &v24, 0);
        if (v5)
        {
          if (sub_5A924(v5, v24) && sub_5C120((uint64_t)a3[2], &v25, &v23, &v22))
          {
            if (v25)
            {
              sub_4220();
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                uint64_t v6 = _os_log_pack_size();
                __chkstk_darwin(v6);
                __error();
                uint64_t v7 = _os_log_pack_fill();
                size_t v8 = DHCPv6MessageTypeName(**a3);
                unsigned int v9 = sub_5C0F8(v25);
                int v10 = v22;
                char v11 = v23;
                *(_DWORD *)uint64_t v7 = 136316162;
                *(void *)(v7 + 4) = a1;
                *(_WORD *)(v7 + 12) = 2080;
                *(void *)(v7 + 14) = v8;
                *(_WORD *)(v7 + 22) = 2080;
                *(void *)(v7 + 24) = v9;
                *(_WORD *)(v7 + 32) = 1040;
                *(_DWORD *)(v7 + 34) = v10;
                *(_WORD *)(v7 + 38) = 2080;
                *(void *)(v7 + 40) = v11;
                __SC_log_send();
              }
            }
            if ((v25 & 0xFFFB) != 2)
            {
              int v12 = *(_DWORD *)(a1 + 116);
              uint64_t v13 = sub_4743C(a1, **a3, v12 == 2, (uint64_t)a3[2], &v26, &v25);
              if (v25 == 4)
              {
                sub_4220();
                _SC_syslog_os_log_mapping();
                if (__SC_log_enabled())
                {
                  uint64_t v15 = _os_log_pack_size();
                  __chkstk_darwin(v15);
                  __error();
                  uint64_t v16 = _os_log_pack_fill();
                  *(_DWORD *)uint64_t v16 = 136315138;
                  *(void *)(v16 + 4) = a1;
                  __SC_log_send();
                }
                sub_439DC(a1, (uint64_t)"Request");
                sub_46258(a1, 0, 0);
              }
              else if (v13)
              {
                sub_483D0(a1, **a3, v12 == 2, (int8x8_t **)&v26, v14);
                sub_46C30(a1, (uint64_t)a3);
                sub_47B3C(a1);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (a2) {
        return;
      }
      sub_43D98(a1, 2u);
      *(_DWORD *)(a1 + 156) = 0;
      *(_DWORD *)(a1 + 152) = arc4random() & 0xFFFFFF;
      *(CFAbsoluteTime *)(a1 + 160) = timer_get_current_time();
      sub_4A6B4(*(void *)(a1 + 128), *(_DWORD *)(a1 + 152), (uint64_t)sub_49554, a1, 5);
    }
    if (*(int *)(a1 + 156) < 10)
    {
      uint64_t v17 = *(void *)(a1 + 144);
      sub_46924(a1, 1.0, 30.0);
      timer_callout_set(v17, sub_49554, a1, 2, 0, v18);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v19 = _os_log_pack_size();
        __chkstk_darwin(v19);
        __error();
        uint64_t v20 = _os_log_pack_fill();
        int v21 = *(_DWORD *)(a1 + 156);
        *(_DWORD *)uint64_t v20 = 136315394;
        *(void *)(v20 + 4) = a1;
        *(_WORD *)(v20 + 12) = 1024;
        *(_DWORD *)(v20 + 14) = v21;
        __SC_log_send();
      }
      sub_47C90(a1);
    }
    else
    {
      sub_46258(a1, 0, 0);
    }
  }
}

uint64_t sub_49A34(uint64_t a1)
{
  memset(v15, 0, sizeof(v15));
  v14[0] = 0;
  v14[1] = 0;
  uint64_t result = (uint64_t)sub_46FB0(a1, 1, v16, (uint64_t)v14);
  if (result)
  {
    unsigned int v3 = (unsigned __int8 *)result;
    int v4 = *(_DWORD *)(a1 + 116);
    if (v4 == 3)
    {
      if (!sub_49428(a1, 1, (uint64_t)v14, (char *)v15))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        uint64_t result = __SC_log_enabled();
        if (!result) {
          return result;
        }
        goto LABEL_13;
      }
    }
    else
    {
      if (v4 != 2) {
        return result;
      }
      unsigned int v5 = sub_49510(a1);
      uint64_t v18 = 0;
      unsigned int __src = bswap32(v5);
      if (!sub_5B378((uint64_t)v14, 3u, 0xCuLL, &__src, (char *)v15))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        uint64_t result = __SC_log_enabled();
        if (!result) {
          return result;
        }
LABEL_13:
        uint64_t v12 = _os_log_pack_size();
        __chkstk_darwin(v12);
        __error();
        uint64_t v13 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v13 = 136315138;
        *(void *)(v13 + 4) = v15;
        return __SC_log_send();
      }
    }
    uint64_t v6 = *(uint64_t **)(a1 + 128);
    int v7 = sub_5B370((uint64_t)v14);
    uint64_t result = sub_4ADA8(v6, v3, (v7 + 4));
    int v8 = result;
    if (result > 0x32 || ((1 << result) & 0x4000000000041) == 0)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9);
        __error();
        uint64_t v10 = _os_log_pack_fill();
        char v11 = strerror(v8);
        *(_DWORD *)uint64_t v10 = 136315394;
        *(void *)(v10 + 4) = a1;
        *(_WORD *)(v10 + 12) = 2080;
        *(void *)(v10 + 14) = v11;
        return __SC_log_send();
      }
    }
  }
  return result;
}

uint64_t sub_49D78(uint64_t a1)
{
  int v3 = 0;
  uint64_t v1 = sub_5B848(a1, 7, (unsigned int *)&v3, 0);
  uint64_t result = 0;
  if (v1)
  {
    if (v3 >= 1) {
      return *(unsigned __int8 *)v1;
    }
  }
  return result;
}

uint64_t sub_49DC4(uint64_t result, int a2, unsigned __int8 **a3)
{
  uint64_t v3 = result;
  if (a2 == 5)
  {
    int v16 = 0;
    if (**a3 == 7)
    {
      uint64_t result = (uint64_t)sub_46BA4(result, (uint64_t)a3[2]);
      if (result)
      {
        uint64_t result = (uint64_t)sub_5B848((uint64_t)a3[2], 2, (unsigned int *)&v16, 0);
        if (result)
        {
          uint64_t result = sub_5A924((unsigned __int16 *)result, v16);
          if (result)
          {
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v7 = _os_log_pack_size();
              __chkstk_darwin(v7);
              __error();
              uint64_t v8 = _os_log_pack_fill();
              uint64_t v9 = DHCPv6MessageTypeName(**a3);
              int v10 = *(_DWORD *)(v3 + 156);
              *(_DWORD *)uint64_t v8 = 136315650;
              *(void *)(v8 + 4) = v3;
              *(_WORD *)(v8 + 12) = 2080;
              *(void *)(v8 + 14) = v9;
              *(_WORD *)(v8 + 22) = 1024;
              *(_DWORD *)(v8 + 24) = v10;
              __SC_log_send();
            }
            return sub_46258(v3, 0, 0);
          }
        }
      }
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (a2) {
        return result;
      }
      sub_43D98(result, 9u);
      sub_439DC(v3, (uint64_t)"Decline");
      sub_4AA90(*(void *)(v3 + 128));
      timer_cancel(*(void *)(v3 + 144));
      sub_6DB0((const void **)(v3 + 232));
      *(void *)(v3 + 232) = 0;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(unsigned char *)(v3 + 240) = 0;
      int v4 = *(NSObject **)(v3 + 32);
      if (v4) {
        dispatch_source_merge_data(v4, 1uLL);
      }
      *(_DWORD *)(v3 + 156) = 0;
      uint32_t v5 = arc4random();
      *(_DWORD *)(v3 + 152) = v5 & 0xFFFFFF;
      sub_4A6B4(*(void *)(v3 + 128), v5 & 0xFFFFFF, (uint64_t)sub_49DC4, v3, 5);
    }
    if (*(int *)(v3 + 156) < 5)
    {
      uint64_t v11 = *(void *)(v3 + 144);
      sub_46924(v3, 1.0, 0.0);
      timer_callout_set(v11, sub_49DC4, v3, 2, 0, v12);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v13 = _os_log_pack_size();
        __chkstk_darwin(v13);
        __error();
        uint64_t v14 = _os_log_pack_fill();
        int v15 = *(_DWORD *)(v3 + 156);
        *(_DWORD *)uint64_t v14 = 136315394;
        *(void *)(v14 + 4) = v3;
        *(_WORD *)(v14 + 12) = 1024;
        *(_DWORD *)(v14 + 14) = v15;
        __SC_log_send();
      }
      return sub_47C90(v3);
    }
    else
    {
      return sub_46258(v3, 0, 0);
    }
  }
  return result;
}

void sub_4A15C(uint64_t a1)
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  sub_42E6C(a1, Mutable);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3);
    __error();
    uint64_t v4 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v4 = 136315650;
    *(void *)(v4 + 4) = a1;
    *(_WORD *)(v4 + 12) = 2080;
    *(void *)(v4 + 14) = "dhcpv6_pd_notify";
    *(_WORD *)(v4 + 22) = 2112;
    *(void *)(v4 + 24) = Mutable;
    __SC_log_send();
  }
  CFRelease(Mutable);
  memset(v7, 0, sizeof(v7));
  int v5 = sub_443CC(a1, (uint64_t)v7);
  uint64_t v6 = *(void *)(a1 + 136);
  if (v5)
  {
    sub_1C3E4(v6, 0, 0, 0, 0, (uint64_t)v7, 0);
  }
  else if (sub_1BC54(v6))
  {
    sub_9028(*(void *)(a1 + 136), 0xCu);
  }
}

uint64_t DHCPv6SocketSetVerbose(uint64_t result)
{
  byte_70288 = result;
  return result;
}

uint64_t sub_4A334(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_4A33C(uint64_t a1)
{
  uint64_t v2 = qword_70290;
  if (!qword_70290)
  {
    uint64_t v3 = malloc_type_malloc(0x40uLL, 0x10A004042BA1A1AuLL);
    if (!v3)
    {
      qword_70290 = 0;
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v6 = _os_log_pack_size();
        __chkstk_darwin(v6);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
      return 0;
    }
    uint64_t v2 = (uint64_t)v3;
    _OWORD v3[2] = 0u;
    v3[3] = 0u;
    *uint64_t v3 = 0u;
    v3[1] = 0u;
    sub_57BE0(v3, (uint64_t)sub_4A674, 0);
    *(void *)(v2 + 48) = timer_callout_init("DHCPv6Socket");
    qword_70290 = v2;
  }
  uint64_t v4 = malloc_type_malloc(0x28uLL, 0x10A0040C62F783CuLL);
  int v5 = v4;
  if (v4)
  {
    v4[4] = 0;
    *(_OWORD *)uint64_t v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    if (sub_57C7C(v2, v4))
    {
      *int v5 = a1;
      return v5;
    }
    free(v5);
    return 0;
  }
  return v5;
}

void sub_4A500(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    unsigned int v3 = sub_57D68((uint64_t *)qword_70290, (uint64_t)v1);
    if (v3 == -1)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v4 = _os_log_pack_size();
        __chkstk_darwin(v4);
        __error();
        uint64_t v5 = _os_log_pack_fill();
        uint64_t v6 = nullsub_1(*v1);
        *(_DWORD *)uint64_t v5 = 136315138;
        *(void *)(v5 + 4) = v6;
        __SC_log_send();
      }
    }
    else
    {
      sub_57C80((uint64_t *)qword_70290, v3, 0);
    }
    v1[2] = 0;
    v1[3] = 0;
    v1[4] = 0;
    sub_4AA9C((uint64_t)v1);
    free(v1);
    *a1 = 0;
  }
}

void sub_4A674(void *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_4AA9C((uint64_t)a1);

  free(a1);
}

uint64_t sub_4A6B4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 12) = a2;
  uint64_t result = sub_4A818(a1);
  if (result)
  {
    int v7 = result;
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v8 = _os_log_pack_size();
      __chkstk_darwin(v8);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      uint64_t v10 = nullsub_1(*(void *)a1);
      uint64_t v11 = strerror(v7);
      *(_DWORD *)uint64_t v9 = 136315650;
      *(void *)(v9 + 4) = "DHCPv6SocketEnableReceive";
      *(_WORD *)(v9 + 12) = 2080;
      *(void *)(v9 + 14) = v10;
      *(_WORD *)(v9 + 22) = 2080;
      *(void *)(v9 + 24) = v11;
      return __SC_log_send();
    }
  }
  return result;
}

uint64_t sub_4A818(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  timer_cancel(*(void *)(qword_70290 + 48));
  ++*(_DWORD *)(qword_70290 + 40);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    uint64_t v4 = nullsub_1(*(void *)a1);
    int v5 = *(_DWORD *)(qword_70290 + 40);
    *(_DWORD *)uint64_t v3 = 136315650;
    *(void *)(v3 + 4) = "DHCPv6SocketOpenSocket";
    *(_WORD *)(v3 + 12) = 2080;
    *(void *)(v3 + 14) = v4;
    *(_WORD *)(v3 + 22) = 1024;
    *(_DWORD *)(v3 + 24) = v5;
    __SC_log_send();
  }
  *(unsigned char *)(a1 + 8) = 1;
  if (*(int *)(qword_70290 + 40) > 1) {
    return 0;
  }
  if (*(void *)(qword_70290 + 32))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v7 + 4) = "DHCPv6SocketOpenSocket";
      __SC_log_send();
    }
    return 0;
  }
  uint64_t v8 = sub_4B340();
  if (v8) {
    sub_4AA9C(a1);
  }
  return v8;
}

BOOL sub_4AA80(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t sub_4AA90(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return sub_4AA9C(result);
}

uint64_t sub_4AA9C(uint64_t result)
{
  if (*(unsigned char *)(result + 8))
  {
    uint64_t v1 = (void *)result;
    int v2 = *(_DWORD *)(qword_70290 + 40);
    if (v2 <= 0)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v8 = _os_log_pack_size();
        __chkstk_darwin(v8);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        uint64_t v10 = nullsub_1(*v1);
        int v11 = *(_DWORD *)(qword_70290 + 40);
        *(_DWORD *)uint64_t v9 = 136315394;
        *(void *)(v9 + 4) = v10;
        *(_WORD *)(v9 + 12) = 1024;
        *(_DWORD *)(v9 + 14) = v11;
        return __SC_log_send();
      }
    }
    else
    {
      *(_DWORD *)(qword_70290 + 40) = v2 - 1;
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v3 = _os_log_pack_size();
        __chkstk_darwin(v3);
        __error();
        uint64_t v4 = _os_log_pack_fill();
        uint64_t v5 = nullsub_1(*v1);
        int v6 = *(_DWORD *)(qword_70290 + 40);
        *(_DWORD *)uint64_t v4 = 136315394;
        *(void *)(v4 + 4) = v5;
        *(_WORD *)(v4 + 12) = 1024;
        *(_DWORD *)(v4 + 14) = v6;
        uint64_t result = __SC_log_send();
      }
      *((unsigned char *)v1 + 8) = 0;
      if (!*(_DWORD *)(qword_70290 + 40))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v7 = _os_log_pack_size();
          __chkstk_darwin(v7);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send();
        }
        return timer_set_relative(*(void *)(qword_70290 + 48), 1, 0, (uint64_t)sub_4CAA4, 0, 0, 0);
      }
    }
  }
  return result;
}

uint64_t sub_4ADA8(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  memset(v32, 0, sizeof(v32));
  uint64_t v3 = &off_70000;
  if (*(void *)(qword_70290 + 32))
  {
    int v7 = *((unsigned __int8 *)a1 + 8);
    if (*((unsigned char *)a1 + 8) || (uint64_t v13 = sub_4A818((uint64_t)a1), !v13))
    {
      if (byte_70288)
      {
        CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
        DHCPv6PacketPrintToString(Mutable, a2, a3);
        uint64_t v9 = sub_5B608((uint64_t)a2, a3, (char *)v32);
        *(void *)unsigned __int16 v31 = v9;
        if (v9)
        {
          sub_5B670(Mutable, (uint64_t)v9);
          sub_5B620((void **)v31);
        }
        else
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v21 = _os_log_pack_size();
            int v30 = &v29;
            __chkstk_darwin(v21);
            __error();
            uint64_t v3 = &off_70000;
            uint64_t v22 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v22 = 136315138;
            *(void *)(v22 + 4) = v32;
            __SC_log_send();
          }
        }
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v23 = _os_log_pack_size();
          LODWORD(v30) = v7;
          __chkstk_darwin(v23);
          __error();
          uint64_t v24 = _os_log_pack_fill();
          uint64_t v25 = nullsub_1(*a1);
          *(_DWORD *)uint64_t v24 = 136315394;
          *(void *)(v24 + 4) = v25;
          *(_WORD *)(v24 + 12) = 2112;
          *(void *)(v24 + 14) = Mutable;
          uint64_t v3 = &off_70000;
          __SC_log_send();
          int v7 = (int)v30;
        }
        CFRelease(Mutable);
      }
      else
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v16 = _os_log_pack_size();
          int v30 = &v29;
          __chkstk_darwin(v16);
          __error();
          uint64_t v17 = _os_log_pack_fill();
          uint64_t v18 = nullsub_1(*a1);
          uint64_t v19 = DHCPv6MessageTypeName(*a2);
          int v20 = *a2;
          *(_DWORD *)uint64_t v17 = 136315906;
          *(void *)(v17 + 4) = v18;
          *(_WORD *)(v17 + 12) = 2080;
          *(void *)(v17 + 14) = v19;
          *(_WORD *)(v17 + 22) = 1024;
          *(_DWORD *)(v17 + 24) = v20;
          *(_WORD *)(v17 + 28) = 1024;
          *(_DWORD *)(v17 + 30) = a3;
          uint64_t v3 = &off_70000;
          __SC_log_send();
        }
      }
      int v26 = sub_C448(*((unsigned int **)v3[82] + 4));
      int v27 = sub_58DC8(*a1);
      *(_OWORD *)unsigned __int16 v31 = xmmword_5D5B0;
      *(_OWORD *)&v31[12] = *(long long *)((char *)&xmmword_5D5B0 + 12);
      *(_WORD *)&v31[2] = bswap32((unsigned __int16)word_700FE) >> 16;
      uint64_t v12 = sub_59FF4(v26, v27, v31, (uint64_t)a2, a3, -1);
      if (!v7) {
        sub_4AA9C((uint64_t)a1);
      }
    }
    else
    {
      uint64_t v12 = v13;
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v14 = _os_log_pack_size();
        __chkstk_darwin(v14);
        __error();
        uint64_t v15 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v15 = 136315138;
        *(void *)(v15 + 4) = "DHCPv6SocketTransmit";
        __SC_log_send();
      }
    }
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v11 = 136315138;
      *(void *)(v11 + 4) = "DHCPv6SocketTransmit";
      __SC_log_send();
    }
    return 0;
  }
  return v12;
}

uint64_t sub_4B340()
{
  if (*(unsigned char *)(qword_70290 + 56))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v0 = _os_log_pack_size();
      __chkstk_darwin(v0);
      __error();
      uint64_t v1 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v1 = 136315138;
      *(void *)(v1 + 4) = "DHCPv6SocketOpenSocketFD";
      __SC_log_send();
    }
    return 0;
  }
  int v2 = sub_4B624((unsigned __int16)word_700FC);
  if ((v2 & 0x80000000) == 0)
  {
    int v3 = v2;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v5 = 136315394;
      *(void *)(v5 + 4) = "DHCPv6SocketOpenSocketFD";
      *(_WORD *)(v5 + 12) = 1024;
      *(_DWORD *)(v5 + 14) = v3;
      __SC_log_send();
    }
    sub_4BCC8(v3);
    return 0;
  }
  uint64_t v6 = *__error();
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v8 = _os_log_pack_size();
    __chkstk_darwin(v8);
    __error();
    uint64_t v9 = _os_log_pack_fill();
    uint64_t v10 = strerror(v6);
    *(_DWORD *)uint64_t v9 = 136315394;
    *(void *)(v9 + 4) = "DHCPv6SocketOpenSocketFD";
    *(_WORD *)(v9 + 12) = 2080;
    *(void *)(v9 + 14) = v10;
    __SC_log_send();
  }
  return v6;
}

uint64_t sub_4B624(unsigned int a1)
{
  int v27 = 1;
  uint64_t v2 = socket(30, 2, 0);
  uint64_t v3 = v2;
  if ((v2 & 0x80000000) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return v3;
    }
    uint64_t v8 = _os_log_pack_size();
    __chkstk_darwin(v8);
    __error();
LABEL_9:
    uint64_t v9 = _os_log_pack_fill();
    uint64_t v10 = __error();
    uint64_t v11 = strerror(*v10);
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v9 + 4) = v11;
    __SC_log_send();
    return v3;
  }
  *(void *)&v28.sa_len = 7680;
  *(void *)&v28.sa_data[6] = 0;
  int v30 = 0;
  uint64_t v29 = 0;
  *(_WORD *)v28.sa_uint64_t data = __rev16(a1);
  if (bind(v2, &v28, 0x1Cu))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled())
    {
LABEL_6:
      close(v3);
      return 0xFFFFFFFFLL;
    }
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
LABEL_5:
    uint64_t v5 = _os_log_pack_fill();
    uint64_t v6 = __error();
    int v7 = strerror(*v6);
    *(_DWORD *)uint64_t v5 = 136315138;
    *(void *)(v5 + 4) = v7;
    __SC_log_send();
    goto LABEL_6;
  }
  if (ioctl(v3, 0x8004667EuLL, &v27) < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
  if (setsockopt(v3, 41, 61, &v27, 4u) < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_6;
    }
LABEL_26:
    uint64_t v26 = _os_log_pack_size();
    __chkstk_darwin(v26);
    __error();
    goto LABEL_5;
  }
  if (setsockopt(v3, 0xFFFF, 4356, &v27, 4u) < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      uint64_t v15 = __error();
      uint64_t v16 = strerror(*v15);
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = v16;
      __SC_log_send();
    }
  }
  int v27 = 900;
  if (setsockopt(v3, 0xFFFF, 4230, &v27, 4u) < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v17 = _os_log_pack_size();
      __chkstk_darwin(v17);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      uint64_t v19 = __error();
      int v20 = strerror(*v19);
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v18 + 4) = v20;
      __SC_log_send();
    }
  }
  int v27 = 0;
  if (setsockopt(v3, 0xFFFF, 4352, &v27, 4u) < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v21 = _os_log_pack_size();
      __chkstk_darwin(v21);
      __error();
      uint64_t v22 = _os_log_pack_fill();
      uint64_t v23 = __error();
      uint64_t v24 = strerror(*v23);
      *(_DWORD *)uint64_t v22 = 136315138;
      *(void *)(v22 + 4) = v24;
      __SC_log_send();
    }
  }
  int v27 = 0;
  if (setsockopt(v3, 41, 11, &v27, 4u) < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v25 = _os_log_pack_size();
      __chkstk_darwin(v25);
      __error();
      goto LABEL_9;
    }
  }
  return v3;
}

char *sub_4BCC8(int a1)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v3 = 136315394;
    *(void *)(v3 + 4) = "DHCPv6SocketEnableReceiveCallBack";
    *(_WORD *)(v3 + 12) = 1024;
    *(_DWORD *)(v3 + 14) = a1;
    __SC_log_send();
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_4BE64;
  v5[3] = &unk_69128;
  int v6 = a1;
  uint64_t result = sub_1AD6C(a1, (uint64_t)sub_4C108, 0, 0, v5);
  *(void *)(qword_70290 + 32) = result;
  return result;
}

uint64_t sub_4BE64(uint64_t a1)
{
  return sub_4BE6C(*(unsigned int *)(a1 + 32));
}

uint64_t sub_4BE6C(uint64_t a1)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v3 = 136315394;
    *(void *)(v3 + 4) = "DHCPv6SocketFDComplete";
    *(_WORD *)(v3 + 12) = 1024;
    *(_DWORD *)(v3 + 14) = a1;
    __SC_log_send();
  }
  uint64_t v4 = qword_70290;
  *(unsigned char *)(qword_70290 + 56) = 0;
  int v5 = *(_DWORD *)(v4 + 40);
  sub_4220();
  _SC_syslog_os_log_mapping();
  int v6 = __SC_log_enabled();
  if (v5 < 1)
  {
    if (v6)
    {
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)(v11 + 4) = "DHCPv6SocketFDComplete";
      *(_WORD *)(v11 + 12) = 1024;
      *(_DWORD *)(v11 + 14) = a1;
      __SC_log_send();
    }
    return close(a1);
  }
  else
  {
    if (v6)
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v8 = 136315394;
      *(void *)(v8 + 4) = "DHCPv6SocketFDComplete";
      *(_WORD *)(v8 + 12) = 1024;
      *(_DWORD *)(v8 + 14) = a1;
      __SC_log_send();
    }
    return sub_4BCC8(a1);
  }
}

void sub_4C108()
{
  uint64_t v15 = 0;
  v16[0] = 0;
  int v17 = 0;
  v16[1] = 0;
  *(void *)&v14.msg_iovlen = 1;
  v18[0] = v19;
  v18[1] = 1500;
  v14.msg_name = &v15;
  *(void *)&v14.msg_namelen = 28;
  v14.msg_iov = (iovec *)v18;
  v14.msg_control = &v20;
  *(void *)&v14.msg_controllen = 32;
  int v0 = sub_C448(*(unsigned int **)(qword_70290 + 32));
  ssize_t v1 = recvmsg(v0, &v14, 0);
  if (v1 < 0)
  {
    int v8 = *__error();
    if (v8 != 35)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9);
        __error();
        uint64_t v10 = _os_log_pack_fill();
        uint64_t v11 = __error();
        uint64_t v12 = strerror(*v11);
        *(_DWORD *)uint64_t v10 = 136315394;
        *(void *)(v10 + 4) = v12;
        *(_WORD *)(v10 + 12) = 1024;
        *(_DWORD *)(v10 + 14) = v8;
        __SC_log_send();
      }
      if (v8 == 57) {
        sub_4C4C4();
      }
    }
  }
  else
  {
    uint64_t v2 = v1;
    if (v1)
    {
      if (v14.msg_controllen < 0xC) {
        goto LABEL_21;
      }
      msg_control = (unsigned int *)v14.msg_control;
      if (!v14.msg_control) {
        goto LABEL_21;
      }
      uint64_t v4 = 0;
      do
      {
        if (msg_control[1] == 41)
        {
          if (msg_control[2] == 46)
          {
            if (*msg_control >= 0x20) {
              uint64_t v4 = msg_control + 3;
            }
          }
          else
          {
            sub_4220();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v5 = _os_log_pack_size();
              __chkstk_darwin(v5);
              __error();
              int v6 = (_DWORD *)_os_log_pack_fill();
              unsigned int v7 = msg_control[2];
              *int v6 = 67109120;
              v6[1] = v7;
              __SC_log_send();
            }
          }
        }
        msg_control = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
      }
      while ((char *)(msg_control + 3) <= (char *)v14.msg_control + v14.msg_controllen);
      if (v4)
      {
        sub_4C634(v4[4], v16, v19, v2);
      }
      else
      {
LABEL_21:
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v13 = _os_log_pack_size();
          __chkstk_darwin(v13);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send();
        }
      }
    }
  }
}

void sub_4C4C4()
{
  uint64_t v0 = qword_70290;
  if (*(unsigned char *)(qword_70290 + 56))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v1 = _os_log_pack_size();
      __chkstk_darwin(v1);
      __error();
      uint64_t v2 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v2 = 136315138;
      *(void *)(v2 + 4) = "DHCPv6SocketScheduleClose";
      __SC_log_send();
    }
  }
  else
  {
    *(unsigned char *)(qword_70290 + 56) = 1;
    sub_1AFD8((dispatch_object_t **)(v0 + 32));
  }
}

void sub_4C634(int a1, const void *a2, unsigned __int8 *a3, uint64_t a4)
{
  if ((int)a4 >= 4)
  {
    memset(v36, 0, sizeof(v36));
    v33[0] = a3;
    v33[1] = a4;
    uint64_t v34 = sub_5B608((uint64_t)a3, a4, (char *)v36);
    if (v34)
    {
      if ((int)sub_5B24(qword_70290) >= 1)
      {
        uint64_t v8 = 0;
        while (1)
        {
          uint64_t v9 = (void *)sub_5B4C(qword_70290, v8);
          if (sub_58DC8(*v9) == a1)
          {
            int v10 = *((_DWORD *)v9 + 3);
            if (v10 == DHCPv6PacketGetTransactionID(a3)) {
              break;
            }
          }
          uint64_t v8 = (v8 + 1);
          if ((int)v8 >= (int)sub_5B24(qword_70290)) {
            goto LABEL_21;
          }
        }
        if (byte_70288)
        {
          CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
          DHCPv6PacketPrintToString(Mutable, a3, a4);
          sub_5B670(Mutable, (uint64_t)v34);
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v14 = _os_log_pack_size();
            uint64_t v32 = &v28;
            __chkstk_darwin(v14);
            __error();
            uint64_t v15 = _os_log_pack_fill();
            uint64_t v16 = nullsub_1(*v9);
            int v17 = inet_ntop(30, a2, v35, 0x2Eu);
            *(_DWORD *)uint64_t v15 = 136315650;
            *(void *)(v15 + 4) = v16;
            *(_WORD *)(v15 + 12) = 2080;
            *(void *)(v15 + 14) = v17;
            *(_WORD *)(v15 + 22) = 2112;
            *(void *)(v15 + 24) = Mutable;
            __SC_log_send();
          }
          CFRelease(Mutable);
        }
        else
        {
          uint64_t v18 = sub_4220();
          int v19 = _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v20 = _os_log_pack_size();
            uint64_t v32 = &v28;
            __chkstk_darwin(v20);
            __error();
            uint64_t v21 = _os_log_pack_fill();
            uint64_t v29 = nullsub_1(*v9);
            uint64_t v22 = DHCPv6MessageTypeName(*a3);
            int v31 = v19;
            uint64_t v23 = v22;
            uint64_t v30 = v18;
            int v24 = *a3;
            int TransactionID = DHCPv6PacketGetTransactionID(a3);
            uint64_t v26 = inet_ntop(30, a2, v35, 0x2Eu);
            *(_DWORD *)uint64_t v21 = 136316418;
            *(void *)(v21 + 4) = v29;
            *(_WORD *)(v21 + 12) = 2080;
            *(void *)(v21 + 14) = v23;
            *(_WORD *)(v21 + 22) = 1024;
            *(_DWORD *)(v21 + 24) = v24;
            *(_WORD *)(v21 + 28) = 1024;
            *(_DWORD *)(v21 + 30) = a4;
            *(_WORD *)(v21 + 34) = 1024;
            *(_DWORD *)(v21 + 36) = TransactionID;
            *(_WORD *)(v21 + 40) = 2080;
            *(void *)(v21 + 42) = v26;
            __SC_log_send();
          }
        }
        int v27 = (void (*)(void, void, void *))v9[2];
        if (v27) {
          v27(v9[3], v9[4], v33);
        }
      }
LABEL_21:
      sub_5B620((void **)&v34);
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v11 = _os_log_pack_size();
        __chkstk_darwin(v11);
        __error();
        uint64_t v12 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v12 = 136315138;
        *(void *)(v12 + 4) = v36;
        __SC_log_send();
      }
    }
  }
}

void sub_4CAA4()
{
  if (!*(void *)(qword_70290 + 32))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
    goto LABEL_6;
  }
  int v0 = *(_DWORD *)(qword_70290 + 40);
  sub_4220();
  if (v0 >= 1)
  {
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
LABEL_6:
    uint64_t v1 = _os_log_pack_size();
    __chkstk_darwin(v1);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
    return;
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = (_DWORD *)_os_log_pack_fill();
    int v4 = sub_C448(*(unsigned int **)(qword_70290 + 32));
    *uint64_t v3 = 67109120;
    v3[1] = v4;
    __SC_log_send();
  }
  sub_4C4C4();
}

uint64_t sub_4CCF8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_8B80(a1);
  if (a2 == 15)
  {
    sub_4CF94(a1, a3);
  }
  else
  {
    uint64_t v7 = v6;
    if (a2 == 1)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v13 = _os_log_pack_size();
        __chkstk_darwin(v13);
        __error();
        uint64_t v14 = _os_log_pack_fill();
        uint64_t v15 = sub_1BBE8(a1);
        uint64_t v16 = nullsub_1(v7);
        *(_DWORD *)uint64_t v14 = 136315394;
        *(void *)(v14 + 4) = v15;
        *(_WORD *)(v14 + 12) = 2080;
        *(void *)(v14 + 14) = v16;
        __SC_log_send();
      }
    }
    else if (!a2)
    {
      uint64_t v19 = 0;
      memset(v18, 0, sizeof(v18));
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v8 = _os_log_pack_size();
        __chkstk_darwin(v8);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        int v10 = sub_1BBE8(a1);
        uint64_t v11 = nullsub_1(v7);
        *(_DWORD *)uint64_t v9 = 136315394;
        *(void *)(v9 + 4) = v10;
        *(_WORD *)(v9 + 12) = 2080;
        *(void *)(v9 + 14) = v11;
        __SC_log_send();
      }
      int v12 = sub_58DC8(v7);
      sub_399B8((uint64_t)v18, v12);
      sub_4CF94(a1, (uint64_t)v18);
      sub_3A038((uint64_t)v18);
    }
  }
  return 0;
}

void sub_4CF94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_3A128(a2);
  if (v3 && (*(unsigned char *)(v3 + 20) & 6) == 0)
  {
    sub_1C3E4(a1, (_DWORD *)v3, 1, 0, 0, 0, 0);
  }
  else
  {
    sub_9028(a1, 0x12u);
  }
}

uint64_t sub_4D01C(int a1)
{
  int v25 = 1;
  uint64_t v2 = socket(30, 3, 58);
  if ((v2 & 0x80000000) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v16 = _os_log_pack_size();
      __chkstk_darwin(v16);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      uint64_t v18 = __error();
      uint64_t v19 = strerror(*v18);
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v17 + 4) = v19;
      __SC_log_send();
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = v2;
  if (ioctl(v2, 0x8004667EuLL, &v25) < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled()) {
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  if (setsockopt(v3, 0xFFFF, 4356, &v25, 4u) < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      uint64_t v6 = __error();
      uint64_t v7 = strerror(*v6);
      *(_DWORD *)uint64_t v5 = 136315138;
      *(void *)(v5 + 4) = v7;
      __SC_log_send();
    }
  }
  if (!a1) {
    goto LABEL_9;
  }
  if (setsockopt(v3, 41, 61, &v25, 4u) < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled()) {
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  if (setsockopt(v3, 41, 37, &v25, 4u) < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
LABEL_22:
      uint64_t v20 = _os_log_pack_size();
      __chkstk_darwin(v20);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      uint64_t v22 = __error();
      uint64_t v23 = strerror(*v22);
      *(_DWORD *)uint64_t v21 = 136315138;
      *(void *)(v21 + 4) = v23;
      __SC_log_send();
    }
LABEL_23:
    close(v3);
    return 0xFFFFFFFFLL;
  }
LABEL_9:
  int v25 = 900;
  if (setsockopt(v3, 0xFFFF, 4230, &v25, 4u) < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v8 = _os_log_pack_size();
      __chkstk_darwin(v8);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      int v10 = __error();
      uint64_t v11 = strerror(*v10);
      *(_DWORD *)uint64_t v9 = 136315138;
      *(void *)(v9 + 4) = v11;
      __SC_log_send();
    }
  }
  int v25 = 0;
  if (setsockopt(v3, 0xFFFF, 4352, &v25, 4u) < 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      uint64_t v14 = __error();
      uint64_t v15 = strerror(*v14);
      *(_DWORD *)uint64_t v13 = 136315138;
      *(void *)(v13 + 4) = v15;
      __SC_log_send();
    }
  }
  return v3;
}

uint64_t sub_4D620(int a1, int a2, uint64_t a3, int a4, long long *a5)
{
  uint64_t v10 = 0x2000000088;
  long long v11 = *a5;
  if (a3)
  {
    if (((a4 + 2) & 7) != 0) {
      int v7 = a4 - ((a4 + 2) & 7) + 10;
    }
    else {
      int v7 = a4 + 2;
    }
    char v12 = 2;
    char v13 = v7 / 8;
    __memmove_chk();
    int v8 = v7 + 24;
  }
  else
  {
    int v8 = 24;
  }
  return sub_59FF4(a1, a2, &unk_5D5CC, (uint64_t)&v10, v8, 255);
}

uint64_t sub_4D710(void *a1, int a2, int **a3)
{
  uint64_t v6 = sub_8B80((uint64_t)a1);
  uint64_t v7 = sub_557C((uint64_t)a1);
  if (a2 == 7)
  {
    char v12 = *a3;
    char v13 = a1;
LABEL_9:
    sub_4DFBC(v13, v12);
    return 0;
  }
  int v8 = (const void **)v7;
  if (a2 == 1)
  {
    v29[0] = 0;
    v29[1] = 0;
    sub_4220();
    _SC_syslog_os_log_mapping();
    int v14 = __SC_log_enabled();
    if (!v8)
    {
      if (v14)
      {
        uint64_t v22 = _os_log_pack_size();
        __chkstk_darwin(v22);
        __error();
        uint64_t v23 = _os_log_pack_fill();
        uint64_t v24 = nullsub_1(v6);
        *(_DWORD *)uint64_t v23 = 136315138;
        *(void *)(v23 + 4) = v24;
        goto LABEL_23;
      }
      return 6;
    }
    if (v14)
    {
      uint64_t v15 = _os_log_pack_size();
      __chkstk_darwin(v15);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      uint64_t v17 = nullsub_1(v6);
      *(_DWORD *)uint64_t v16 = 136315138;
      *(void *)(v16 + 4) = v17;
      __SC_log_send();
    }
    sub_4E570(a1, 0);
    uint64_t v18 = *(unsigned int *)v8;
    if (v18)
    {
      sub_4E8FC(v18, (uint64_t)v29, 1);
      sub_1EA3C((uint64_t)a1, v29, 16);
    }
    uint64_t v19 = (const __SCDynamicStore *)v8[6];
    if (v19) {
      SCDynamicStoreSetDispatchQueue(v19, 0);
    }
    sub_6DB0(v8 + 6);
    sub_6DB0(v8 + 5);
    sub_1E5C8((uint64_t)a1, 0);
    free(v8);
    return 0;
  }
  if (a2) {
    return 0;
  }
  if ((sub_9384(v6) & 8) != 0) {
    return 4;
  }
  if (v8)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t v11 = nullsub_1(v6);
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = v11;
LABEL_23:
      __SC_log_send();
      return 6;
    }
    return 6;
  }
  int v25 = malloc_type_malloc(0x38uLL, 0x10700401F685EB6uLL);
  if (v25)
  {
    v25[6] = 0;
    *((_OWORD *)v25 + 1) = 0u;
    *((_OWORD *)v25 + 2) = 0u;
    *(_OWORD *)int v25 = 0u;
    sub_1E5C8((uint64_t)a1, (uint64_t)v25);
    sub_4DB70((uint64_t)a1);
    sub_4DDBC(a1);
    char v13 = a1;
    char v12 = (int *)a3;
    goto LABEL_9;
  }
  sub_4220();
  uint64_t v20 = 5;
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v26 = _os_log_pack_size();
    __chkstk_darwin(v26);
    __error();
    uint64_t v27 = _os_log_pack_fill();
    uint64_t v28 = nullsub_1(v6);
    *(_DWORD *)uint64_t v27 = 136315138;
    *(void *)(v27 + 4) = v28;
    uint64_t v20 = 5;
    __SC_log_send();
  }
  return v20;
}

void sub_4DB70(uint64_t a1)
{
  uint64_t v1 = sub_8B80(a1);
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  int v2 = sub_58DC8(v1);
  sub_399B8((uint64_t)v13, v2);
  if (DWORD2(v13[0]))
  {
    int v3 = sub_36628();
    if ((v3 & 0x80000000) == 0)
    {
      int v4 = v3;
      if (SDWORD2(v13[0]) >= 1)
      {
        uint64_t v5 = 0;
        uint64_t v6 = 0;
        do
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v7 = _os_log_pack_size();
            __chkstk_darwin(v7);
            __error();
            uint64_t v8 = _os_log_pack_fill();
            uint64_t v9 = nullsub_1(v1);
            uint64_t v10 = inet_ntop(30, (const void *)(*(void *)&v13[0] + v5), v15, 0x2Eu);
            int v11 = *(_DWORD *)(*(void *)&v13[0] + v5 + 16);
            *(_DWORD *)uint64_t v8 = 136315650;
            *(void *)(v8 + 4) = v9;
            *(_WORD *)(v8 + 12) = 2080;
            *(void *)(v8 + 14) = v10;
            *(_WORD *)(v8 + 22) = 1024;
            *(_DWORD *)(v8 + 24) = v11;
            __SC_log_send();
          }
          char v12 = (const char *)nullsub_1(v1);
          sub_38684(v4, v12, (_OWORD *)(*(void *)&v13[0] + v5));
          ++v6;
          v5 += 32;
        }
        while (v6 < SDWORD2(v13[0]));
      }
      close(v4);
    }
    sub_3A038((uint64_t)v13);
  }
}

void sub_4DDBC(void *a1)
{
  context.version = 0;
  memset(&context.retain, 0, 24);
  uint64_t v2 = sub_557C((uint64_t)a1);
  context.info = a1;
  *(void *)(v2 + 48) = SCDynamicStoreCreate(0, @"IPConfiguration:STF", (SCDynamicStoreCallBack)sub_4E920, &context);
  values = (void *)SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainState, kSCEntNetIPv4);
  CFArrayRef v3 = CFArrayCreate(0, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(v2 + 48), v3, 0);
  CFRelease(v3);
  int v4 = *(const __SCDynamicStore **)(v2 + 48);
  uint64_t v5 = sub_2EC08();
  if (!SCDynamicStoreSetDispatchQueue(v4, v5))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v7 + 4) = "stf_configure_address";
      __SC_log_send();
    }
  }
  CFDictionaryRef v10 = sub_4E9A4(*(const __SCDynamicStore **)(v2 + 48), values);
  sub_4EA70((uint64_t)a1, v10, values);
  CFRelease(values);
  sub_6DB0((const void **)&v10);
}

void sub_4DFBC(void *a1, int *a2)
{
  uint64_t v4 = sub_557C((uint64_t)a1);
  uint64_t v5 = sub_8B80((uint64_t)a1);
  if (a2)
  {
    int v6 = *a2;
    switch(*a2)
    {
      case 0:
        goto LABEL_3;
      case 1:
        memset(v39, 0, sizeof(v39));
        sub_4E8FC(a2[2], (uint64_t)v39, 0);
        sub_4E570(a1, 0);
        uint64_t v13 = *(void *)(v4 + 4);
        uint64_t v7 = v4 + 4;
        if (*(void *)v39 == v13 && *(void *)&v39[8] == *(void *)(v7 + 8)) {
          return;
        }
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v15 = _os_log_pack_size();
          __chkstk_darwin(v15);
          __error();
          uint64_t v16 = _os_log_pack_fill();
          uint64_t v17 = nullsub_1(v5);
          int v18 = *((unsigned __int8 *)a2 + 8);
          int v19 = *((unsigned __int8 *)a2 + 9);
          int v20 = *((unsigned __int8 *)a2 + 10);
          int v21 = *((unsigned __int8 *)a2 + 11);
          *(_DWORD *)uint64_t v16 = 136316162;
          *(void *)(v16 + 4) = v17;
          *(_WORD *)(v16 + 12) = 1024;
          *(_DWORD *)(v16 + 14) = v18;
          *(_WORD *)(v16 + 18) = 1024;
          *(_DWORD *)(v16 + 20) = v19;
          *(_WORD *)(v16 + 24) = 1024;
          *(_DWORD *)(v16 + 26) = v20;
          *(_WORD *)(v16 + 30) = 1024;
          *(_DWORD *)(v16 + 32) = v21;
          __SC_log_send();
        }
        long long v12 = *(_OWORD *)v39;
        break;
      case 2:
        sub_4E570(a1, 0);
        uint64_t v22 = *((void *)a2 + 1);
        uint64_t v23 = *((void *)a2 + 2);
        uint64_t v24 = a2 + 2;
        uint64_t v25 = *(void *)(v4 + 4);
        uint64_t v7 = v4 + 4;
        if (v22 == v25 && v23 == *(void *)(v7 + 8)) {
          return;
        }
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v27 = _os_log_pack_size();
          __chkstk_darwin(v27);
          __error();
          uint64_t v28 = _os_log_pack_fill();
          uint64_t v29 = nullsub_1(v5);
          uint64_t v30 = inet_ntop(30, v24, v39, 0x2Eu);
          *(_DWORD *)uint64_t v28 = 136315394;
          *(void *)(v28 + 4) = v29;
          *(_WORD *)(v28 + 12) = 2080;
          *(void *)(v28 + 14) = v30;
          __SC_log_send();
        }
        long long v12 = *v24;
        break;
      case 3:
        int v31 = *(const char **)(v4 + 24);
        if (!v31 || strcmp(v31, *((const char **)a2 + 1)))
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v32 = _os_log_pack_size();
            __chkstk_darwin(v32);
            __error();
            uint64_t v33 = _os_log_pack_fill();
            uint64_t v34 = nullsub_1(v5);
            uint64_t v35 = *((void *)a2 + 1);
            *(_DWORD *)uint64_t v33 = 136315394;
            *(void *)(v33 + 4) = v34;
            *(_WORD *)(v33 + 12) = 2080;
            *(void *)(v33 + 14) = v35;
            __SC_log_send();
          }
          sub_4E570(a1, *((const char **)a2 + 1));
        }
        return;
      default:
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v36 = _os_log_pack_size();
          __chkstk_darwin(v36);
          __error();
          uint64_t v37 = _os_log_pack_fill();
          uint64_t v38 = nullsub_1(v5);
          *(_DWORD *)uint64_t v37 = 136315394;
          *(void *)(v37 + 4) = v38;
          *(_WORD *)(v37 + 12) = 1024;
          *(_DWORD *)(v37 + 14) = v6;
          __SC_log_send();
        }
        return;
    }
  }
  else
  {
LABEL_3:
    sub_4E570(a1, 0);
    uint64_t v8 = *(void *)(v4 + 4);
    uint64_t v7 = v4 + 4;
    if (!(v8 ^ 0x16358C00220 | *(void *)(v7 + 8))) {
      return;
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t v11 = nullsub_1(v5);
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = v11;
      __SC_log_send();
    }
    long long v12 = xmmword_5D5F0;
  }
  *(_OWORD *)uint64_t v7 = v12;
  sub_4EF88((uint64_t)a1);
}

void sub_4E570(void *a1, const char *a2)
{
  memset(&context, 0, sizeof(context));
  uint64_t v4 = sub_8B80((uint64_t)a1);
  uint64_t v5 = sub_557C((uint64_t)a1);
  int v6 = *(void **)(v5 + 24);
  if (v6)
  {
    free(v6);
    *(void *)(v5 + 24) = 0;
  }
  uint64_t v8 = (const __SCNetworkReachability **)(v5 + 32);
  uint64_t v7 = *(const __SCNetworkReachability **)(v5 + 32);
  if (v7)
  {
    SCNetworkReachabilitySetDispatchQueue(v7, 0);
    sub_6DB0((const void **)(v5 + 32));
  }
  if (a2)
  {
    uint64_t v9 = SCNetworkReachabilityCreateWithName(0, a2);
    const char *v8 = v9;
    if (v9)
    {
      context.info = a1;
      if (!SCNetworkReachabilitySetCallback(v9, (SCNetworkReachabilityCallBack)sub_4F070, &context))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v10 = _os_log_pack_size();
          __chkstk_darwin(v10);
          __error();
          uint64_t v11 = _os_log_pack_fill();
          uint64_t v12 = nullsub_1(v4);
          int v13 = SCError();
          uint64_t v14 = SCErrorString(v13);
          *(_DWORD *)uint64_t v11 = 136315394;
          *(void *)(v11 + 4) = v12;
          *(_WORD *)(v11 + 12) = 2080;
          *(void *)(v11 + 14) = v14;
          __SC_log_send();
        }
        sub_6DB0((const void **)(v5 + 32));
      }
      uint64_t v15 = *v8;
      uint64_t v16 = sub_2EC08();
      SCNetworkReachabilitySetDispatchQueue(v15, v16);
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v17 = _os_log_pack_size();
        __chkstk_darwin(v17);
        __error();
        uint64_t v18 = _os_log_pack_fill();
        uint64_t v19 = nullsub_1(v4);
        *(_DWORD *)uint64_t v18 = 136315394;
        *(void *)(v18 + 4) = v19;
        *(_WORD *)(v18 + 12) = 2080;
        *(void *)(v18 + 14) = a2;
        __SC_log_send();
      }
      *(void *)(v5 + 24) = strdup(a2);
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v20 = _os_log_pack_size();
        __chkstk_darwin(v20);
        __error();
        uint64_t v21 = _os_log_pack_fill();
        uint64_t v22 = nullsub_1(v4);
        int v23 = SCError();
        uint64_t v24 = SCErrorString(v23);
        *(_DWORD *)uint64_t v21 = 136315394;
        *(void *)(v21 + 4) = v22;
        *(_WORD *)(v21 + 12) = 2080;
        *(void *)(v21 + 14) = v24;
        __SC_log_send();
      }
    }
  }
}

uint64_t sub_4E8FC(uint64_t result, uint64_t a2, int a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_WORD *)a2 = 544;
  *(_DWORD *)(a2 + 2) = result;
  if (a3)
  {
    *(unsigned char *)(a2 + 7) = 1;
    *(unsigned char *)(a2 + 15) = 1;
  }
  return result;
}

void sub_4E920(const __SCDynamicStore *a1, CFArrayRef theArray, uint64_t a3)
{
  if (theArray)
  {
    if (CFArrayGetCount(theArray))
    {
      CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, 0);
      CFDictionaryRef v7 = sub_4E9A4(a1, ValueAtIndex);
      sub_4EA70(a3, v7, ValueAtIndex);
      sub_6DB0((const void **)&v7);
    }
  }
}

CFDictionaryRef sub_4E9A4(const __SCDynamicStore *a1, void *a2)
{
  values = a2;
  CFArrayRef v3 = CFArrayCreate(0, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  CFTypeRef cf = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetIPv4);
  CFArrayRef v4 = CFArrayCreate(0, &cf, 1, &kCFTypeArrayCallBacks);
  CFRelease(cf);
  CFDictionaryRef v5 = SCDynamicStoreCopyMultiple(a1, v3, v4);
  CFRelease(v3);
  CFRelease(v4);
  return v5;
}

void sub_4EA70(uint64_t a1, const __CFDictionary *a2, const void *a3)
{
  uint64_t v34 = 0;
  int v6 = (unsigned int *)sub_557C(a1);
  if (!a2
    || (Value = CFDictionaryGetValue(a2, a3), CFTypeID TypeID = CFDictionaryGetTypeID(), !Value)
    || CFGetTypeID(Value) != TypeID)
  {
    CFStringGetTypeID();
    goto LABEL_24;
  }
  CFStringRef v9 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)Value, kSCDynamicStorePropNetPrimaryService);
  CFTypeID v10 = CFStringGetTypeID();
  if (!v9 || CFGetTypeID(v9) != v10) {
    goto LABEL_24;
  }
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, v9, kSCEntNetIPv4);
  uint64_t v12 = CFDictionaryGetValue(a2, NetworkServiceEntity);
  CFTypeID v13 = CFDictionaryGetTypeID();
  if (!v12 || CFGetTypeID(v12) != v13)
  {
    CFRelease(NetworkServiceEntity);
    goto LABEL_24;
  }
  CFRelease(NetworkServiceEntity);
  uint64_t v14 = CFDictionaryGetValue((CFDictionaryRef)v12, @"NetworkSignature");
  CFTypeID v15 = CFStringGetTypeID();
  if (v14 && CFGetTypeID(v14) != v15) {
    uint64_t v14 = 0;
  }
  uint64_t v16 = CFDictionaryGetValue((CFDictionaryRef)v12, kSCPropNetIPv4Addresses);
  CFTypeID v17 = CFArrayGetTypeID();
  if (!v16) {
    goto LABEL_25;
  }
  if (CFGetTypeID(v16) != v17 || CFArrayGetCount((CFArrayRef)v16) < 1)
  {
LABEL_24:
    uint64_t v16 = 0;
LABEL_25:
    unsigned int v19 = 0;
    goto LABEL_26;
  }
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v16, 0);
  LODWORD(v33) = 0;
  unsigned int v19 = 0;
  uint64_t v16 = 0;
  if (sub_53A68(ValueAtIndex, (in_addr *)&v33))
  {
    if (v33)
    {
      if ((unsigned __int16)v33 != 65193)
      {
        unsigned int v19 = 0;
        uint64_t v16 = 0;
        unsigned int v20 = bswap32(v33);
        if (HIWORD(v20) != 49320 && (v20 & 0xFF000000) != 0xA000000 && (v20 & 0xFFF00000) != 0xAC100000)
        {
          if (v14)
          {
            uint64_t v16 = CFRetain(v14);
            uint64_t v34 = v16;
          }
          else
          {
            uint64_t v16 = 0;
          }
          unsigned int v19 = v33;
        }
      }
    }
  }
LABEL_26:
  unsigned int v21 = v19 & 0xFF000000 | (BYTE2(v19) << 16) | (BYTE1(v19) << 8) | v19;
  if (v21)
  {
    if (v21 == *v6) {
      goto LABEL_41;
    }
    long long v33 = 0uLL;
    uint64_t v22 = sub_8B80(a1);
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v32 = v16;
      uint64_t v23 = _os_log_pack_size();
      __chkstk_darwin(v23);
      __error();
      uint64_t v24 = _os_log_pack_fill();
      uint64_t v25 = nullsub_1(v22);
      *(_DWORD *)uint64_t v24 = 136316162;
      *(void *)(v24 + 4) = v25;
      *(_WORD *)(v24 + 12) = 1024;
      *(_DWORD *)(v24 + 14) = v19;
      *(_WORD *)(v24 + 18) = 1024;
      *(_DWORD *)(v24 + 20) = BYTE1(v19);
      *(_WORD *)(v24 + 24) = 1024;
      *(_DWORD *)(v24 + 26) = BYTE2(v19);
      *(_WORD *)(v24 + 30) = 1024;
      *(_DWORD *)(v24 + 32) = HIBYTE(v19);
LABEL_32:
      __SC_log_send();
      uint64_t v16 = v32;
    }
  }
  else
  {
    long long v33 = 0uLL;
    uint64_t v26 = sub_8B80(a1);
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v32 = v16;
      uint64_t v27 = _os_log_pack_size();
      __chkstk_darwin(v27);
      __error();
      uint64_t v28 = _os_log_pack_fill();
      uint64_t v29 = nullsub_1(v26);
      *(_DWORD *)uint64_t v28 = 136315138;
      *(void *)(v28 + 4) = v29;
      goto LABEL_32;
    }
  }
  uint64_t v30 = *v6;
  if (v30)
  {
    sub_4E8FC(v30, (uint64_t)&v33, 1);
    sub_1EA3C(a1, &v33, 16);
  }
  sub_6DB0((const void **)v6 + 5);
  *int v6 = v19;
  if (v21)
  {
    sub_4E8FC(v19 & 0xFF000000 | (BYTE2(v19) << 16) | (BYTE1(v19) << 8) | v19, (uint64_t)&v33, 1);
    sub_1E634(a1, &v33, 16, 0, -1, -1);
    CFTypeID v31 = CFStringGetTypeID();
    if (v16 && CFGetTypeID(v16) == v31) {
      *((void *)v6 + 5) = CFRetain(v34);
    }
    sub_4EF88(a1);
  }
  else
  {
    sub_9028(a1, 0x12u);
  }
LABEL_41:
  sub_6DB0(&v34);
}

void sub_4EF88(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  CFStringRef v7 = 0;
  uint64_t v2 = sub_557C(a1);
  CFArrayRef v3 = (unsigned int *)v2;
  CFArrayRef v4 = (void *)(v2 + 4);
  if (*(_DWORD *)(v2 + 4) || *(_DWORD *)(v2 + 8) || *(_DWORD *)(v2 + 12) || *(_DWORD *)(v2 + 16))
  {
    unsigned int v5 = *(_DWORD *)v2;
    if (*(_DWORD *)v2)
    {
      if (*(void *)(v2 + 40))
      {
        CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"IPv6.6to4=(%@)", *(void *)(v2 + 40), v7, v8, v9);
        CFStringRef v7 = v6;
        unsigned int v5 = *v3;
      }
      else
      {
        CFStringRef v6 = 0;
      }
      sub_4E8FC(v5, (uint64_t)&v8, 1);
      *(void *)&long long v9 = 16;
      sub_1C3E4(a1, &v8, 1, v4, 1, 0, v6);
      sub_6DB0((const void **)&v7);
    }
  }
}

void sub_4F070(uint64_t a1, char a2, uint64_t a3)
{
  int v32 = 0;
  uint64_t v5 = sub_557C(a3);
  uint64_t v6 = sub_8B80(a3);
  if ((a2 & 6) == 2)
  {
    CFArrayRef v7 = (const __CFArray *)SCNetworkReachabilityCopyResolvedAddress();
    if (v7)
    {
      CFArrayRef v8 = v7;
      CFIndex Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        CFIndex v10 = Count;
        CFIndex v11 = 0;
        while (1)
        {
          CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v8, v11);
          BytePtr = CFDataGetBytePtr(ValueAtIndex);
          if (BytePtr[1] == 2)
          {
            uint64_t v14 = (unsigned __int8 *)BytePtr;
            if (*((_DWORD *)BytePtr + 1)) {
              break;
            }
          }
          if (v10 == ++v11) {
            goto LABEL_18;
          }
        }
        long long v31 = 0uLL;
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v19 = _os_log_pack_size();
          v30[1] = v30;
          __chkstk_darwin(v19);
          __error();
          uint64_t v20 = _os_log_pack_fill();
          uint64_t v21 = nullsub_1(v6);
          uint64_t v22 = *(void *)(v5 + 24);
          int v23 = v14[4];
          int v24 = v14[5];
          int v25 = v14[6];
          int v26 = v14[7];
          *(_DWORD *)uint64_t v20 = 136316418;
          *(void *)(v20 + 4) = v21;
          *(_WORD *)(v20 + 12) = 2080;
          *(void *)(v20 + 14) = v22;
          *(_WORD *)(v20 + 22) = 1024;
          *(_DWORD *)(v20 + 24) = v23;
          *(_WORD *)(v20 + 28) = 1024;
          *(_DWORD *)(v20 + 30) = v24;
          *(_WORD *)(v20 + 34) = 1024;
          *(_DWORD *)(v20 + 36) = v25;
          *(_WORD *)(v20 + 40) = 1024;
          *(_DWORD *)(v20 + 42) = v26;
          __SC_log_send();
        }
        SCNetworkReachabilitySetDispatchQueue(*(SCNetworkReachabilityRef *)(v5 + 32), 0);
        sub_6DB0((const void **)(v5 + 32));
        sub_4E8FC(*((unsigned int *)v14 + 1), (uint64_t)&v31, 0);
        uint64_t v28 = *(void *)(v5 + 4);
        uint64_t v27 = v5 + 4;
        if (v28 != (void)v31 || *(void *)(v27 + 8) != *((void *)&v31 + 1))
        {
          *(_OWORD *)uint64_t v27 = v31;
          sub_4EF88(a3);
        }
      }
LABEL_18:
      CFRelease(v8);
    }
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v15 = _os_log_pack_size();
      __chkstk_darwin(v15);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      uint64_t v17 = nullsub_1(v6);
      uint64_t v18 = *(void *)(v5 + 24);
      *(_DWORD *)uint64_t v16 = 136315394;
      *(void *)(v16 + 4) = v17;
      *(_WORD *)(v16 + 12) = 2080;
      *(void *)(v16 + 14) = v18;
      __SC_log_send();
    }
  }
}

uint64_t sub_4F39C()
{
  return qword_70298;
}

uint64_t sub_4F3A8(unsigned int a1)
{
  if (!qword_70298 && !sub_4F528(a1))
  {
    if (a1 == 4)
    {
      memset(v8, 0, sizeof(v8));
      v7.tv_sec = 0;
      v7.tv_nsec = 0;
      int v2 = gethostuuid(v8, &v7);
      CFArrayRef v3 = 0;
      if (!v2) {
        CFArrayRef v3 = sub_5AAC8(v8);
      }
    }
    else
    {
      CFArrayRef v3 = sub_4F830(a1);
    }
    qword_70298 = (uint64_t)v3;
    if (v3)
    {
      sub_4FA44(v3);
      sub_4FBA4();
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v4 = _os_log_pack_size();
        __chkstk_darwin(v4);
        __error();
        uint64_t v5 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v5 = 136315138;
        *(void *)(v5 + 4) = "DHCPDUIDEstablishAndGet";
        __SC_log_send();
      }
    }
  }
  return qword_70298;
}

BOOL sub_4F528(unsigned int a1)
{
  CFPropertyListRef v2 = sub_537BC("/var/db/dhcpclient/DUID_IA.plist");
  int v23 = v2;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (v2 && CFGetTypeID(v2) == TypeID)
  {
    CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)v2, @"HostUUID");
    CFTypeID v5 = CFDataGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == v5 && CFDataGetLength((CFDataRef)Value) == 16)
      {
        uint64_t v6 = (const void *)sub_3AC0C();
        if (v6)
        {
          if (!CFEqual(Value, v6))
          {
            syslog(5, "DHCPDUID: ignoring DUID - host UUID doesn't match", v23);
            goto LABEL_23;
          }
        }
      }
    }
    CFDataRef v7 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v2, @"DUID");
    CFTypeID v8 = CFDataGetTypeID();
    if (v7)
    {
      if (CFGetTypeID(v7) == v8)
      {
        unsigned int v9 = sub_4FE88(v7);
        if (v9 == a1)
        {
          CFIndex v10 = CFDictionaryGetValue((CFDictionaryRef)v2, @"IAIDList");
          CFTypeID v11 = CFArrayGetTypeID();
          if (!v10 || CFGetTypeID(v10) != v11)
          {
LABEL_21:
            qword_70298 = (uint64_t)CFRetain(v7);
            goto LABEL_23;
          }
          CFIndex Count = CFArrayGetCount((CFArrayRef)v10);
          if (Count >= 1)
          {
            CFIndex v13 = Count;
            CFIndex v14 = 0;
            do
            {
              CFDataRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v10, v14);
              CFTypeID v16 = CFStringGetTypeID();
              if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v16) {
                goto LABEL_21;
              }
            }
            while (v13 != ++v14);
          }
          qword_70298 = (uint64_t)CFRetain(v7);
          qword_702A0 = (uint64_t)CFArrayCreateMutableCopy(0, 0, (CFArrayRef)v10);
        }
        else
        {
          unsigned int v17 = v9;
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v18 = _os_log_pack_size();
            __chkstk_darwin(v18);
            __error();
            uint64_t v19 = _os_log_pack_fill();
            uint64_t v20 = sub_5A61C(v17);
            uint64_t v21 = sub_5A61C(a1);
            *(_DWORD *)uint64_t v19 = 136315906;
            *(void *)(v19 + 4) = v20;
            *(_WORD *)(v19 + 12) = 1024;
            *(_DWORD *)(v19 + 14) = v17;
            *(_WORD *)(v19 + 18) = 2080;
            *(void *)(v19 + 20) = v21;
            *(_WORD *)(v19 + 28) = 1024;
            *(_DWORD *)(v19 + 30) = a1;
            __SC_log_send();
          }
        }
      }
    }
  }
LABEL_23:
  sub_6DB0(&v23);
  return qword_70298 != 0;
}

__CFData *sub_4F830(int a1)
{
  uint64_t result = (__CFData *)get_interface_list();
  if (result)
  {
    uint64_t v3 = sub_57F3C((uint64_t)result);
    sub_4220();
    _SC_syslog_os_log_mapping();
    int v4 = __SC_log_enabled();
    if (v3)
    {
      if (v4)
      {
        uint64_t v5 = _os_log_pack_size();
        __chkstk_darwin(v5);
        __error();
        uint64_t v6 = _os_log_pack_fill();
        uint64_t v7 = nullsub_1(v3);
        *(_DWORD *)uint64_t v6 = 136315138;
        *(void *)(v6 + 4) = v7;
        __SC_log_send();
      }
      if (a1 == 3)
      {
        return sub_4FD80(v3);
      }
      else
      {
        CFIndex v10 = (const void *)sub_58CAC(v3);
        int v11 = sub_58034(v3);
        unsigned int v12 = sub_934C(v3);
        return sub_5A9F4(v10, v11, v12);
      }
    }
    else
    {
      if (v4)
      {
        uint64_t v8 = _os_log_pack_size();
        __chkstk_darwin(v8);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v9 = 136315138;
        *(void *)(v9 + 4) = "make_DUID_data";
        __SC_log_send();
      }
      return 0;
    }
  }
  return result;
}

void sub_4FA44(const __CFData *a1)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  BytePtr = (unsigned __int16 *)CFDataGetBytePtr(a1);
  CFIndex Length = CFDataGetLength(a1);
  sub_5A640(Mutable, BytePtr, Length);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v5 = _os_log_pack_size();
    __chkstk_darwin(v5);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v6 = 136315394;
    *(void *)(v6 + 4) = "Established";
    *(_WORD *)(v6 + 12) = 2112;
    *(void *)(v6 + 14) = Mutable;
    __SC_log_send();
  }
  CFRelease(Mutable);
}

void sub_4FBA4()
{
  if (qword_70298)
  {
    CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionarySetValue(Mutable, @"DUID", (const void *)qword_70298);
    if (qword_702A0) {
      CFDictionarySetValue(Mutable, @"IAIDList", (const void *)qword_702A0);
    }
    uint64_t v1 = (const void *)sub_3AC0C();
    if (v1) {
      CFDictionarySetValue(Mutable, @"HostUUID", v1);
    }
    if ((sub_538BC(Mutable, (const std::__fs::filesystem::path *)"/var/db/dhcpclient/DUID_IA.plist", 0x1A4u) & 0x80000000) != 0
      && *__error() != 2)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v2 = _os_log_pack_size();
        __chkstk_darwin(v2);
        __error();
        uint64_t v3 = _os_log_pack_fill();
        int v4 = __error();
        uint64_t v5 = strerror(*v4);
        *(_DWORD *)uint64_t v3 = 136315394;
        *(void *)(v3 + 4) = "/var/db/dhcpclient/DUID_IA.plist";
        *(_WORD *)(v3 + 12) = 2080;
        *(void *)(v3 + 14) = v5;
        __SC_log_send();
      }
    }
    CFRelease(Mutable);
  }
}

__CFData *sub_4FD80(uint64_t a1)
{
  uint64_t v2 = (const void *)sub_58CAC(a1);
  int v3 = sub_58034(a1);
  unsigned int v4 = sub_934C(a1);

  return sub_5A96C(v2, v3, v4);
}

CFIndex sub_4FDE0(char *cStr)
{
  CFStringRef v1 = CFStringCreateWithCString(0, cStr, 0x600u);
  if (!qword_702A0)
  {
    CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFIndex Count = 0;
    qword_702A0 = (uint64_t)Mutable;
LABEL_6:
    CFArrayAppendValue(Mutable, v1);
    sub_4FBA4();
    goto LABEL_7;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)qword_702A0);
  v6.location = 0;
  v6.length = Count;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue((CFArrayRef)qword_702A0, v6, v1);
  if (FirstIndexOfValue == -1)
  {
    CFMutableStringRef Mutable = (__CFArray *)qword_702A0;
    goto LABEL_6;
  }
  CFIndex Count = FirstIndexOfValue;
LABEL_7:
  CFRelease(v1);
  return Count;
}

uint64_t sub_4FE88(const __CFData *a1)
{
  BytePtr = (unsigned __int16 *)CFDataGetBytePtr(a1);
  int Length = CFDataGetLength(a1);
  if (sub_5A924(BytePtr, Length)) {
    return bswap32(*BytePtr) >> 16;
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v5 = _os_log_pack_size();
    __chkstk_darwin(v5);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
    return 0;
  }
  return result;
}

uint64_t sub_4FFC0()
{
  return 0;
}

uint64_t *sub_50044(uint64_t a1)
{
  uint64_t v2 = qword_702A8;
  if (!qword_702A8)
  {
    int v3 = malloc_type_malloc(0x38uLL, 0x10A004062DB933CuLL);
    if (!v3)
    {
      qword_702A8 = 0;
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v10 = _os_log_pack_size();
        __chkstk_darwin(v10);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
      return 0;
    }
    uint64_t v2 = (uint64_t)v3;
    v3[6] = 0;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)int v3 = 0u;
    sub_57BE0(v3, (uint64_t)sub_504BC, 0);
    *(void *)(v2 + 48) = timer_callout_init("RTADVSocket");
    qword_702A8 = v2;
  }
  int v4 = sub_58DC8(a1);
  if (sub_502DC(v4))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      uint64_t v7 = nullsub_1(a1);
      *(_DWORD *)uint64_t v6 = 136315138;
      *(void *)(v6 + 4) = v7;
      __SC_log_send();
    }
    return 0;
  }
  uint64_t v8 = (uint64_t *)malloc_type_malloc(0x38uLL, 0x10A0040537E56A6uLL);
  uint64_t v9 = v8;
  if (v8)
  {
    v8[6] = 0;
    *((_OWORD *)v8 + 1) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    if (!sub_57C7C(v2, v8))
    {
      free(v9);
      return 0;
    }
    *uint64_t v9 = a1;
  }
  return v9;
}

uint64_t *sub_502DC(int a1)
{
  if ((int)sub_5B24(qword_702A8) < 1) {
    return 0;
  }
  uint64_t v2 = 0;
  while (1)
  {
    int v3 = (uint64_t *)sub_5B4C(qword_702A8, v2);
    if (sub_58DC8(*v3) == a1) {
      break;
    }
    uint64_t v2 = (v2 + 1);
    if ((int)v2 >= (int)sub_5B24(qword_702A8)) {
      return 0;
    }
  }
  return v3;
}

void sub_50358(void **a1)
{
  CFStringRef v1 = *a1;
  if (*a1)
  {
    unsigned int v3 = sub_57D68((uint64_t *)qword_702A8, (uint64_t)v1);
    if (v3 == -1)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v4 = _os_log_pack_size();
        __chkstk_darwin(v4);
        __error();
        uint64_t v5 = _os_log_pack_fill();
        uint64_t v6 = nullsub_1(*v1);
        *(_DWORD *)uint64_t v5 = 136315138;
        *(void *)(v5 + 4) = v6;
        __SC_log_send();
      }
    }
    else
    {
      sub_57C80((uint64_t *)qword_702A8, v3, 0);
    }
    sub_504BC(v1);
    *a1 = 0;
  }
}

void sub_504BC(void *a1)
{
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_508C8((uint64_t)a1);

  free(a1);
}

uint64_t sub_50500(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[4] = a2;
  a1[5] = a3;
  a1[6] = a4;
  uint64_t result = sub_50650((uint64_t)a1);
  if (result)
  {
    int v6 = result;
    sub_4220();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      uint64_t v9 = nullsub_1(*a1);
      uint64_t v10 = strerror(v6);
      *(_DWORD *)uint64_t v8 = 136315394;
      *(void *)(v8 + 4) = v9;
      *(_WORD *)(v8 + 12) = 2080;
      *(void *)(v8 + 14) = v10;
      return __SC_log_send();
    }
  }
  return result;
}

uint64_t sub_50650(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  timer_cancel(*(void *)(qword_702A8 + 48));
  ++*(_DWORD *)(qword_702A8 + 40);
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    uint64_t v4 = nullsub_1(*(void *)a1);
    int v5 = *(_DWORD *)(qword_702A8 + 40);
    *(_DWORD *)uint64_t v3 = 136315650;
    *(void *)(v3 + 4) = "RTADVSocketOpenSocket";
    *(_WORD *)(v3 + 12) = 2080;
    *(void *)(v3 + 14) = v4;
    *(_WORD *)(v3 + 22) = 1024;
    *(_DWORD *)(v3 + 24) = v5;
    __SC_log_send();
  }
  *(unsigned char *)(a1 + 24) = 1;
  if (*(int *)(qword_702A8 + 40) > 1) {
    return 0;
  }
  if (*(void *)(qword_702A8 + 32))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v7 + 4) = "RTADVSocketOpenSocket";
      __SC_log_send();
    }
    return 0;
  }
  uint64_t v8 = sub_50E2C();
  if (v8) {
    sub_508C8(a1);
  }
  return v8;
}

uint64_t sub_508B8(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return sub_508C8(result);
}

uint64_t sub_508C8(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    CFStringRef v1 = (void *)result;
    int v2 = *(_DWORD *)(qword_702A8 + 40);
    if (v2 <= 0)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v8 = _os_log_pack_size();
        __chkstk_darwin(v8);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        uint64_t v10 = nullsub_1(*v1);
        int v11 = *(_DWORD *)(qword_702A8 + 40);
        *(_DWORD *)uint64_t v9 = 136315394;
        *(void *)(v9 + 4) = v10;
        *(_WORD *)(v9 + 12) = 1024;
        *(_DWORD *)(v9 + 14) = v11;
        return __SC_log_send();
      }
    }
    else
    {
      *(_DWORD *)(qword_702A8 + 40) = v2 - 1;
      sub_4220();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v3 = _os_log_pack_size();
        __chkstk_darwin(v3);
        __error();
        uint64_t v4 = _os_log_pack_fill();
        uint64_t v5 = nullsub_1(*v1);
        int v6 = *(_DWORD *)(qword_702A8 + 40);
        *(_DWORD *)uint64_t v4 = 136315394;
        *(void *)(v4 + 4) = v5;
        *(_WORD *)(v4 + 12) = 1024;
        *(_DWORD *)(v4 + 14) = v6;
        uint64_t result = __SC_log_send();
      }
      *((unsigned char *)v1 + 24) = 0;
      if (!*(_DWORD *)(qword_702A8 + 40))
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v7 = _os_log_pack_size();
          __chkstk_darwin(v7);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send();
        }
        return timer_set_relative(*(void *)(qword_702A8 + 48), 1, 0, (uint64_t)sub_51EF4, 0, 0, 0);
      }
    }
  }
  return result;
}

uint64_t sub_50BD4(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)a1;
  int v5 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v6 = *(void *)a1;
  if (*(unsigned char *)(a1 + 24)) {
    goto LABEL_2;
  }
  uint64_t v11 = sub_50650(a1);
  if (!v11)
  {
    uint64_t v6 = *(void *)a1;
LABEL_2:
    uint64_t v19 = 133;
    if (a2 && sub_58CA4(v6) == 6)
    {
      int v7 = (sub_58034(v6) + 2) & 7;
      int v8 = sub_58034(v6);
      if (v7) {
        int v9 = v8 - ((sub_58034(v6) + 2) & 7) + 10;
      }
      else {
        int v9 = v8 + 2;
      }
      char v20 = 1;
      char v21 = v9 / 8;
      sub_58CAC(v6);
      sub_58034(v6);
      __memmove_chk();
      int v10 = v9 + 8;
    }
    else
    {
      int v10 = 8;
    }
    int v16 = sub_C448(*(unsigned int **)(qword_702A8 + 32));
    int v17 = sub_58DC8(v4);
    uint64_t v12 = sub_59FF4(v16, v17, &unk_5D610, (uint64_t)&v19, v10, 255);
    if (!v5) {
      sub_508C8(a1);
    }
    return v12;
  }
  uint64_t v12 = v11;
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v13 = _os_log_pack_size();
    __chkstk_darwin(v13);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    uint64_t v15 = strerror(v12);
    *(_DWORD *)uint64_t v14 = 136315138;
    *(void *)(v14 + 4) = v15;
    __SC_log_send();
  }
  return v12;
}

uint64_t sub_50E2C()
{
  int v0 = sub_51040();
  if (v0 < 0)
  {
    uint64_t v4 = *__error();
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      int v7 = strerror(v4);
      *(_DWORD *)uint64_t v6 = 136315394;
      *(void *)(v6 + 4) = "RTADVSocketOpenSocketFD";
      *(_WORD *)(v6 + 12) = 2080;
      *(void *)(v6 + 14) = v7;
      __SC_log_send();
    }
  }
  else
  {
    int v1 = v0;
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v2 = _os_log_pack_size();
      __chkstk_darwin(v2);
      __error();
      uint64_t v3 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v3 = 136315394;
      *(void *)(v3 + 4) = "RTADVSocketOpenSocketFD";
      *(_WORD *)(v3 + 12) = 1024;
      *(_DWORD *)(v3 + 14) = v1;
      __SC_log_send();
    }
    sub_51270(v1);
    return 0;
  }
  return v4;
}

uint64_t sub_51040()
{
  uint64_t v0 = sub_4D01C(1);
  if ((v0 & 0x80000000) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v6 = _os_log_pack_size();
    __chkstk_darwin(v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    int v8 = __error();
    int v9 = strerror(*v8);
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v7 + 4) = v9;
    __SC_log_send();
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v1 = v0;
    long long v11 = 0u;
    long long v12 = 0u;
    LODWORD(v12) = 64;
    if (setsockopt(v0, 58, 18, &v11, 0x20u) == -1)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v2 = _os_log_pack_size();
        __chkstk_darwin(v2);
        __error();
        uint64_t v3 = _os_log_pack_fill();
        uint64_t v4 = __error();
        uint64_t v5 = strerror(*v4);
        *(_DWORD *)uint64_t v3 = 136315138;
        *(void *)(v3 + 4) = v5;
        __SC_log_send();
      }
      close(v1);
      return 0xFFFFFFFFLL;
    }
  }
  return v1;
}

char *sub_51270(int a1)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v3 = 136315394;
    *(void *)(v3 + 4) = "RTADVSocketEnableReceiveCallBack";
    *(_WORD *)(v3 + 12) = 1024;
    *(_DWORD *)(v3 + 14) = a1;
    __SC_log_send();
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_5140C;
  v5[3] = &unk_69148;
  int v6 = a1;
  uint64_t result = sub_1AD6C(a1, (uint64_t)sub_51540, 0, 0, v5);
  *(void *)(qword_702A8 + 32) = result;
  return result;
}

uint64_t sub_5140C(uint64_t a1)
{
  return sub_51414(*(_DWORD *)(a1 + 32));
}

uint64_t sub_51414(int a1)
{
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v3 = 136315394;
    *(void *)(v3 + 4) = "RTADVSocketFDComplete";
    *(_WORD *)(v3 + 12) = 1024;
    *(_DWORD *)(v3 + 14) = a1;
    __SC_log_send();
  }
  return close(a1);
}

void sub_51540()
{
  uint64_t v30 = 0;
  long long v31 = 0uLL;
  int v32 = 0;
  *(void *)&v29.msg_iovlen = 1;
  v33[0] = &v34;
  v33[1] = 1500;
  v29.msg_name = &v30;
  *(void *)&v29.msg_namelen = 28;
  v29.msg_iov = (iovec *)v33;
  v29.msg_control = &v37;
  *(void *)&v29.msg_controllen = 48;
  int v0 = sub_C448(*(unsigned int **)(qword_702A8 + 32));
  unint64_t v1 = recvmsg(v0, &v29, 0);
  if ((v1 & 0x8000000000000000) != 0)
  {
    if (*__error() != 35)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v5 = _os_log_pack_size();
        __chkstk_darwin(v5);
        __error();
        uint64_t v6 = _os_log_pack_fill();
        uint64_t v7 = __error();
        int v8 = strerror(*v7);
        int v9 = *__error();
        *(_DWORD *)uint64_t v6 = 136315394;
        *(void *)(v6 + 4) = v8;
        *(_WORD *)(v6 + 12) = 1024;
        *(_DWORD *)(v6 + 14) = v9;
LABEL_34:
        __SC_log_send();
        return;
      }
    }
    return;
  }
  size_t v2 = v1;
  if (!v1) {
    return;
  }
  if (v1 <= 0xF)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3);
    __error();
    uint64_t v4 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v4 = 134217984;
    *(void *)(v4 + 4) = v2;
    goto LABEL_34;
  }
  if (v31 != 254 || (BYTE1(v31) & 0xC0) != 0x80)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
    uint64_t v20 = _os_log_pack_size();
    __chkstk_darwin(v20);
    __error();
    uint64_t v21 = _os_log_pack_fill();
    uint64_t v22 = inet_ntop(30, &v31, v36, 0x2Eu);
    *(_DWORD *)uint64_t v21 = 136315138;
    *(void *)(v21 + 4) = v22;
    goto LABEL_34;
  }
  if (v29.msg_controllen < 0xC) {
    goto LABEL_36;
  }
  msg_control = (unsigned int *)v29.msg_control;
  if (!v29.msg_control) {
    goto LABEL_36;
  }
  long long v11 = 0;
  long long v12 = 0;
  do
  {
    if (msg_control[1] == 41)
    {
      unsigned int v13 = msg_control[2];
      if (v13 == 47)
      {
        if (*msg_control >= 0x10) {
          long long v11 = (int *)(msg_control + 3);
        }
      }
      else if (v13 == 46)
      {
        if (*msg_control >= 0x20) {
          long long v12 = msg_control + 3;
        }
      }
      else
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v14 = _os_log_pack_size();
          __chkstk_darwin(v14);
          __error();
          uint64_t v15 = (_DWORD *)_os_log_pack_fill();
          unsigned int v16 = msg_control[2];
          _DWORD *v15 = 67109120;
          v15[1] = v16;
          __SC_log_send();
        }
      }
    }
    msg_control = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
  }
  while ((char *)(msg_control + 3) <= (char *)v29.msg_control + v29.msg_controllen);
  if (!v12)
  {
LABEL_36:
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
    goto LABEL_37;
  }
  if (!v11)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
LABEL_37:
    uint64_t v23 = _os_log_pack_size();
    __chkstk_darwin(v23);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
LABEL_38:
    __SC_log_send();
    return;
  }
  if (v34 == 134)
  {
    if (v35)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        return;
      }
      uint64_t v17 = _os_log_pack_size();
      __chkstk_darwin(v17);
      __error();
      uint64_t v18 = (_DWORD *)_os_log_pack_fill();
      int v19 = v35;
      goto LABEL_43;
    }
    if (*v11 == 255)
    {
      sub_51D4C(v12[4], &v31, &v34, v2);
    }
    else
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v25 = _os_log_pack_size();
        __chkstk_darwin(v25);
        __error();
        uint64_t v26 = _os_log_pack_fill();
        int v27 = *v11;
        uint64_t v28 = inet_ntop(30, &v31, v36, 0x2Eu);
        *(_DWORD *)uint64_t v26 = 67109378;
        *(_DWORD *)(v26 + 4) = v27;
        *(_WORD *)(v26 + 8) = 2080;
        *(void *)(v26 + 10) = v28;
        __SC_log_send();
      }
    }
  }
  else
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v24 = _os_log_pack_size();
      __chkstk_darwin(v24);
      __error();
      uint64_t v18 = (_DWORD *)_os_log_pack_fill();
      int v19 = v34;
LABEL_43:
      *uint64_t v18 = 67109120;
      v18[1] = v19;
      goto LABEL_38;
    }
  }
}

void sub_51D4C(int a1, _OWORD *a2, const void *a3, size_t a4)
{
  uint64_t v7 = sub_502DC(a1);
  if (v7)
  {
    int v8 = v7;
    if (v7[4])
    {
      double Current = CFAbsoluteTimeGetCurrent();
      uint64_t v10 = sub_55744(a3, a4, a2, Current);
      if (v10)
      {
        long long v11 = (const void *)v10;
        ((void (*)(uint64_t, uint64_t, uint64_t))v8[4])(v8[5], v8[6], v10);
        CFRelease(v11);
      }
      else
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v12 = _os_log_pack_size();
          __chkstk_darwin(v12);
          __error();
          uint64_t v13 = _os_log_pack_fill();
          uint64_t v14 = nullsub_1(*v8);
          *(_DWORD *)uint64_t v13 = 136315138;
          *(void *)(v13 + 4) = v14;
          __SC_log_send();
        }
      }
    }
  }
}

void sub_51EF4()
{
  if (!*(void *)(qword_702A8 + 32))
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
    goto LABEL_6;
  }
  int v0 = *(_DWORD *)(qword_702A8 + 40);
  sub_4220();
  if (v0 >= 1)
  {
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
LABEL_6:
    uint64_t v1 = _os_log_pack_size();
    __chkstk_darwin(v1);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
    return;
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = (_DWORD *)_os_log_pack_fill();
    int v4 = sub_C448(*(unsigned int **)(qword_702A8 + 32));
    *uint64_t v3 = 67109120;
    v3[1] = v4;
    __SC_log_send();
  }
  sub_1AFD8((dispatch_object_t **)(qword_702A8 + 32));
}

void sub_52150(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 26)) {
    int v3 = 0;
  }
  else {
    int v3 = a2;
  }
  if (v3 == 1)
  {
    int v4 = *(const void **)a1;
  }
  else
  {
    sub_6DB0((const void **)a1);
    int v4 = 0;
  }
  sub_6DB0((const void **)(a1 + 8));
  sub_6DB0((const void **)(a1 + 32));
  sub_6DB0((const void **)(a1 + 40));
  sub_6DB0((const void **)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (v3)
  {
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 26) = 0;
  }
}

void sub_521DC(const void **a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  sub_6DB0(a1);
  *a1 = cf;
}

void sub_52218(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  sub_6DB0((const void **)(a1 + 8));
  *(void *)(a1 + 8) = cf;
}

uint64_t sub_52254(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t sub_5225C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 24);
}

uint64_t sub_52264(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_5226C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 26);
}

uint64_t sub_52274(uint64_t result, char a2)
{
  *(unsigned char *)(result + 26) = a2;
  return result;
}

uint64_t sub_5227C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_52284(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  sub_6DB0((const void **)(a1 + 32));
  *(void *)(a1 + 32) = cf;
}

BOOL sub_522C0(uint64_t a1)
{
  CFAbsoluteTime v1 = CFDateGetAbsoluteTime(*(CFDateRef *)(a1 + 40)) + 10.0;
  return v1 < CFAbsoluteTimeGetCurrent();
}

CFDateRef sub_522F8(uint64_t a1)
{
  sub_6DB0((const void **)(a1 + 40));
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef result = CFDateCreate(0, Current);
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_52330(const void **a1)
{
  CFStringRef v21 = 0;
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v3 = 136315138;
    *(void *)(v3 + 4) = "PvDInfoContextCalculateEffectiveExpiration";
    __SC_log_send();
  }
  int v4 = a1[4];
  if (v4)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a1[4], @"expires");
    CFAbsoluteTime atp = 0.0;
    CFLocaleRef v6 = CFLocaleCreate(0, @"en_US_POSIX");
    CFLocaleRef v24 = v6;
    if (v6 && (uint64_t v7 = CFDateFormatterCreate(0, v6, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle)) != 0)
    {
      int v8 = v7;
      CFDateFormatterSetFormat(v7, @"yyyy-MM-dd'T'HH:mm:ss'Z'");
      sub_6DB0((const void **)&v24);
      uint64_t v23 = v8;
      if (CFDateFormatterGetAbsoluteTimeFromString(v8, Value, 0, &atp))
      {
        double v9 = (CFAbsoluteTimeGetCurrent() + atp) * 0.5;
        double v10 = atp - v9;
        if (atp - v9 > 4294967300.0) {
          double v10 = 4294967300.0;
        }
        double v11 = v9 + (double)arc4random_uniform(v10);
        CFDateRef v12 = CFDateCreate(0, v11);
        if (v12)
        {
          CFDateRef v13 = v12;
          CFStringRef StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(0, v8, v11);
          CFStringRef v21 = StringWithAbsoluteTime;
          sub_6DB0((const void **)&v23);
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v15 = _os_log_pack_size();
            __chkstk_darwin(v15);
            __error();
            uint64_t v16 = _os_log_pack_fill();
            uint64_t v17 = *a1;
            *(_DWORD *)uint64_t v16 = 136315650;
            *(void *)(v16 + 4) = "PvDInfoContextCalculateEffectiveExpiration";
            *(_WORD *)(v16 + 12) = 2112;
            *(void *)(v16 + 14) = v17;
            *(_WORD *)(v16 + 22) = 2112;
            *(void *)(v16 + 24) = StringWithAbsoluteTime;
            __SC_log_send();
          }
          sub_6DB0(a1 + 6);
          a1[6] = v13;
          goto LABEL_18;
        }
      }
    }
    else
    {
      sub_6DB0((const void **)&v24);
      uint64_t v23 = 0;
    }
    sub_6DB0((const void **)&v23);
  }
  sub_4220();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v18 = _os_log_pack_size();
    __chkstk_darwin(v18);
    __error();
    uint64_t v19 = _os_log_pack_fill();
    uint64_t v20 = *a1;
    *(_DWORD *)uint64_t v19 = 136315650;
    *(void *)(v19 + 4) = "PvDInfoContextCalculateEffectiveExpiration";
    *(_WORD *)(v19 + 12) = 2112;
    *(void *)(v19 + 14) = v20;
    *(_WORD *)(v19 + 22) = 2112;
    *(void *)(v19 + 24) = v4;
    __SC_log_send();
  }
  sub_6DB0(a1 + 6);
LABEL_18:
  sub_6DB0((const void **)&v21);
}

double sub_52710(uint64_t a1)
{
  CFDateRef v1 = *(const __CFDate **)(a1 + 48);
  if (v1) {
    return CFDateGetAbsoluteTime(v1);
  }
  else {
    return 0.0;
  }
}

uint64_t sub_52724(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 20022) >= 0xFFFFFFEA) {
    return (uint64_t)*(&_ipconfig_subsystem + 5 * (v1 - 20000) + 5);
  }
  else {
    return 0;
  }
}

_DWORD *sub_52760(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    CFDateRef result = (_DWORD *)sub_31768(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_527DC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 52)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  CFDateRef result = (_DWORD *)sub_31794(result[3], (uint64_t)(result + 8), result[12], (vm_address_t *)(a2 + 28), (_DWORD *)(a2 + 52), (_DWORD *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_52894(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 48)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    CFDateRef result = (_DWORD *)sub_31730(result[3], (uint64_t)(result + 8), (_DWORD *)(a2 + 36), (_DWORD *)(a2 + 40));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 44;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_5291C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 48)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  CFDateRef result = (_DWORD *)sub_317D4(result[3], (uint64_t)(result + 8), (vm_address_t *)(a2 + 28), (_DWORD *)(a2 + 52), (_DWORD *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_529D0(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 72)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 72) || *(_DWORD *)(result + 76) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(result + 12);
  uint64_t v7 = *(UInt8 **)(result + 28);
  long long v8 = *(_OWORD *)(result + 108);
  v9[0] = *(_OWORD *)(result + 92);
  v9[1] = v8;
  CFDateRef result = sub_3184C(v6, (char *)(result + 52), v7, v3, (int *)(a2 + 36), v9);
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

_DWORD *sub_52AC0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (result[9] || result[10] <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_8;
  }
  CFDateRef result = (_DWORD *)sub_31A24(result[3], result[8], (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_52B7C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 72)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 72) || *(_DWORD *)(result + 76) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(result + 12);
  uint64_t v7 = *(UInt8 **)(result + 28);
  long long v8 = *(_OWORD *)(result + 108);
  v9[0] = *(_OWORD *)(result + 92);
  v9[1] = v8;
  CFDateRef result = sub_31A34(v6, (char *)(result + 52), v7, v3, (_OWORD *)(a2 + 36), (int *)(a2 + 164), v9);
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 168;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_52C70(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 76)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 72)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  CFDateRef result = sub_31E90(*(unsigned int *)(result + 12), result + 52, *(_DWORD *)(result + 68), *(UInt8 **)(result + 28), v3, (_OWORD *)(a2 + 36), (_DWORD *)(a2 + 164));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 168;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_52D30(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 72)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 72) || *(_DWORD *)(result + 76) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(result + 12);
  uint64_t v7 = *(UInt8 **)(result + 28);
  long long v8 = *(_OWORD *)(result + 108);
  v9[0] = *(_OWORD *)(result + 92);
  v9[1] = v8;
  CFDateRef result = sub_31FC0(v6, result + 52, v7, v3, (int *)(a2 + 36), v9);
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_52E20(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 72)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 72) || *(_DWORD *)(result + 76) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(result + 12);
  uint64_t v7 = *(UInt8 **)(result + 28);
  long long v8 = *(_OWORD *)(result + 108);
  v9[0] = *(_OWORD *)(result + 92);
  v9[1] = v8;
  CFDateRef result = _ipconfig_set_service(v6, (char *)(result + 52), v7, v3, (_OWORD *)(a2 + 36), (int *)(a2 + 164), v9);
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 168;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

_DWORD *sub_52F14(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 48)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  CFDateRef result = (_DWORD *)sub_31810(result[3], (uint64_t)(result + 8), (vm_address_t *)(a2 + 28), (_DWORD *)(a2 + 52), (_DWORD *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_52FC8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 176)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 176) || *(_DWORD *)(result + 180) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned int *)(result + 12);
  long long v6 = *(_OWORD *)(result + 212);
  v7[0] = *(_OWORD *)(result + 196);
  v7[1] = v6;
  CFDateRef result = sub_31E10(v5, result + 32, result + 48, (int *)(a2 + 36), v7);
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_53088(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 176)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 176) || *(_DWORD *)(result + 180) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    NDR_record_t v4 = NDR_record;
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned int *)(result + 12);
  long long v6 = *(_OWORD *)(result + 212);
  v7[0] = *(_OWORD *)(result + 196);
  v7[1] = v6;
  CFDateRef result = sub_320F0(v5, result + 32, result + 48, (int *)(a2 + 36), v7);
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_8:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_53148(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 72)
  {
    int v4 = -304;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68)))
  {
    int v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(result + 72) || *(_DWORD *)(result + 76) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v5 = NDR_record;
    goto LABEL_11;
  }
  uint64_t v6 = *(unsigned int *)(result + 12);
  uint64_t v7 = *(UInt8 **)(result + 28);
  long long v8 = *(_OWORD *)(result + 108);
  v9[0] = *(_OWORD *)(result + 92);
  v9[1] = v8;
  CFDateRef result = sub_3219C(v6, result + 52, v7, v3, (int *)(a2 + 36), v9);
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_11:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

_DWORD *sub_53238(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 48)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  CFDateRef result = (_DWORD *)sub_322E4(result[3], (uint64_t)(result + 8), (const __CFData **)(a2 + 28), (_DWORD *)(a2 + 52), (_DWORD *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_532EC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 48)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  CFDateRef result = (_DWORD *)sub_32320(result[3], (uint64_t)(result + 8), (const __CFData **)(a2 + 28), (_DWORD *)(a2 + 52), (int *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_533A0(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  CFDateRef result = (_DWORD *)sub_3247C(result[3], (const __CFData **)(a2 + 28), (_DWORD *)(a2 + 52), (int *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_5344C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  CFDateRef result = (_DWORD *)sub_325D0(result[3], (vm_address_t *)(a2 + 28), (_DWORD *)(a2 + 52), (_DWORD *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_534F8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 48)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    CFDateRef result = sub_32604(*(unsigned int *)(result + 12), (char *)(result + 32), (_DWORD *)(a2 + 36), (_DWORD *)(a2 + 40));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 44;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_53580(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 176)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    CFDateRef result = (_DWORD *)sub_32160(result[3], (uint64_t)(result + 8), (uint64_t)(result + 12), (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_53608(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  int v4 = a1[5];
  if ((v4 - 20022) >= 0xFFFFFFEA
    && (NDR_record_t v5 = (void (*)(void))*(&_ipconfig_subsystem + 5 * (v4 - 20000) + 5)) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t sub_5369C(int a1, uint64_t a2)
{
  return ioctl(a1, 0x40044266uLL, a2);
}

uint64_t sub_536C8(int a1, int a2)
{
  int v3 = a2;
  return ioctl(a1, 0x80044270uLL, &v3);
}

uint64_t sub_536FC(int a1, int a2)
{
  int v3 = a2;
  return ioctl(a1, 0x80044275uLL, &v3);
}

uint64_t sub_53730(int a1, int a2, int a3, int a4)
{
  v6[0] = 40;
  v6[1] = a2;
  v6[2] = 16777237;
  v6[3] = a3;
  v6[4] = 6;
  v6[5] = a4;
  uint64_t v7 = 6;
  v5[1] = v6;
  v5[0] = 4;
  return ioctl(a1, 0x80104267uLL, v5);
}

CFPropertyListRef sub_537BC(const char *a1)
{
  memset(&v11, 0, sizeof(v11));
  if (stat(a1, &v11) < 0) {
    return 0;
  }
  off_t st_size = v11.st_size;
  if (!v11.st_size) {
    return 0;
  }
  int v3 = malloc_type_malloc(v11.st_size, 0xE2EAFFC1uLL);
  if (!v3) {
    return 0;
  }
  int v4 = v3;
  int v5 = open(a1, 0);
  if ((v5 & 0x80000000) == 0)
  {
    int v6 = v5;
    read(v5, v4, st_size);
    close(v6);
  }
  CFDataRef v7 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v4, st_size, kCFAllocatorNull);
  if (v7)
  {
    CFDataRef v8 = v7;
    CFPropertyListRef v9 = CFPropertyListCreateWithData(0, v7, 0, 0, 0);
    CFRelease(v8);
  }
  else
  {
    CFPropertyListRef v9 = 0;
  }
  free(v4);
  return v9;
}

uint64_t sub_538BC(CFPropertyListRef propertyList, const std::__fs::filesystem::path *a2, unsigned int a3)
{
  if (!propertyList) {
    return 0;
  }
  CFDataRef Data = CFPropertyListCreateData(0, propertyList, kCFPropertyListXMLFormat_v1_0, 0, 0);
  if (!Data) {
    return 0;
  }
  CFDataRef v6 = Data;
  BytePtr = CFDataGetBytePtr(Data);
  size_t Length = CFDataGetLength(v6);
  snprintf((char *)__str, 0x400uLL, "%s-", (const char *)a2);
  int v9 = open((const char *)__str, 1537, a3);
  if (v9 < 0)
  {
    uint64_t v12 = 0xFFFFFFFFLL;
  }
  else
  {
    int v10 = v9;
    if (write(v9, BytePtr, Length) == Length)
    {
      rename(__str, a2, v11);
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = 0xFFFFFFFFLL;
    }
    close(v10);
  }
  CFRelease(v6);
  return v12;
}

uint64_t sub_539E0(const __CFString *a1, UInt8 *a2, int a3, Boolean a4)
{
  CFIndex usedBufLen = 0;
  v11.length = CFStringGetLength(a1);
  v11.location = 0;
  CFStringGetBytes(a1, v11, 0x8000100u, 0, a4, a2, a3 - 1, &usedBufLen);
  int v8 = usedBufLen;
  if (a2) {
    a2[usedBufLen] = 0;
  }
  return (v8 + 1);
}

uint64_t sub_53A68(const __CFString *a1, in_addr *a2)
{
  a2->s_addr = 0;
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  uint64_t result = CFStringGetCString(a1, buffer, 64, 0x600u);
  if (result) {
    return inet_aton(buffer, a2) == 1;
  }
  return result;
}

uint64_t sub_53B1C(const __CFString *a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  uint64_t result = CFStringGetCString(a1, buffer, 64, 0x600u);
  if (result) {
    return inet_pton(30, buffer, a2) == 1;
  }
  return result;
}

uint64_t sub_53BD4(const __CFString *a1, _DWORD *a2)
{
  sub_539E0(a1, (UInt8 *)__str, 64, 0);
  unint64_t v3 = strtoul(__str, 0, 0);
  if (v3 == -1) {
    return 0;
  }
  int v4 = v3;
  if (*__error() == 34) {
    return 0;
  }
  *a2 = v4;
  return 1;
}

uint64_t sub_53C74(const __CFString *a1, _DWORD *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1)
  {
    CFBooleanGetTypeID();
    CFNumberGetTypeID();
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return (sub_53BD4(a1, a2) & 1) != 0;
  }
  CFTypeID v6 = CFBooleanGetTypeID();
  if (CFGetTypeID(a1) != v6)
  {
    CFTypeID v7 = CFNumberGetTypeID();
    if (CFGetTypeID(a1) == v7)
    {
      uint64_t result = CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, a2);
      if (!result) {
        return result;
      }
      return 1;
    }
    return 0;
  }
  *a2 = CFBooleanGetValue((CFBooleanRef)a1);
  return 1;
}

void sub_53D38(__CFDictionary *a1, const void *a2, int a3)
{
  CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"%d.%d.%d.%d", a3, BYTE1(a3), BYTE2(a3), HIBYTE(a3));
  CFDictionarySetValue(a1, a2, v5);

  CFRelease(v5);
}

CFStringRef sub_53DC0(void *a1)
{
  int v1 = inet_ntop(30, a1, v3, 0x2Eu);
  return CFStringCreateWithCString(0, v1, 0x600u);
}

void sub_53E2C(__CFDictionary *a1, const void *a2, void *a3)
{
  CFStringRef v5 = inet_ntop(30, a3, v7, 0x2Eu);
  CFStringRef v6 = CFStringCreateWithCString(0, v5, 0x600u);
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v6);
}

void sub_53ED0(__CFDictionary *a1, const void *a2, char *cStr)
{
  CFStringRef v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFDictionarySetValue(a1, a2, v5);

  CFRelease(v5);
}

void sub_53F38(__CFDictionary *a1, const void *a2, CFAbsoluteTime a3)
{
  CFDateRef v5 = CFDateCreate(0, a3);
  CFDictionarySetValue(a1, a2, v5);

  CFRelease(v5);
}

void sub_53F94(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void sub_53FF8(const __CFArray *a1, const void *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1)
  {
LABEL_5:
    CFArrayAppendValue(a1, a2);
  }
  else
  {
    CFIndex v5 = Count;
    CFIndex v6 = 0;
    while (1)
    {
      CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
      if (CFEqual(ValueAtIndex, a2)) {
        break;
      }
      if (v5 == ++v6) {
        goto LABEL_5;
      }
    }
  }
}

CFTypeRef sub_54084(CFStringRef theString, CFStringRef separatorString, CFIndex a3)
{
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, theString, separatorString);
  if (!ArrayBySeparatingStrings) {
    return 0;
  }
  CFArrayRef v5 = ArrayBySeparatingStrings;
  if (CFArrayGetCount(ArrayBySeparatingStrings) <= a3)
  {
    CFTypeRef v7 = 0;
  }
  else
  {
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v5, a3);
    CFTypeRef v7 = CFRetain(ValueAtIndex);
  }
  CFRelease(v5);
  return v7;
}

void sub_540F8(CFMutableStringRef theString, uint64_t a2, int a3, int a4)
{
  if (a3 >= 1)
  {
    uint64_t v12 = v4;
    uint64_t v13 = v5;
    uint64_t v9 = 0;
    uint64_t v10 = a3;
    do
    {
      if (v9)
      {
        if (a4 != 32 || (v9 & 7) != 0) {
          *(_WORD *)CFRange v11 = a4;
        }
        else {
          strcpy(v11, "  ");
        }
      }
      else
      {
        v11[0] = 0;
      }
      CFStringAppendFormat(theString, 0, @"%s%02x", v11, *(unsigned __int8 *)(a2 + v9++));
    }
    while (v10 != v9);
  }
}

UInt8 *sub_541B8(const __CFString *a1, CFRange a2, CFStringEncoding a3)
{
  CFIndex length = a2.length;
  CFIndex location = a2.location;
  CFIndex maxBufLen = 0;
  CFStringGetBytes(a1, a2, a3, 0, 0, 0, 0, &maxBufLen);
  if (!maxBufLen) {
    return 0;
  }
  CFTypeRef v7 = (UInt8 *)malloc_type_malloc(maxBufLen + 1, 0x10A3B885uLL);
  v10.CFIndex location = location;
  v10.CFIndex length = length;
  CFStringGetBytes(a1, v10, a3, 0, 0, v7, maxBufLen, &maxBufLen);
  v7[maxBufLen] = 0;
  return v7;
}

UInt8 *sub_54270(const __CFString *a1, CFStringEncoding a2)
{
  v4.CFIndex length = CFStringGetLength(a1);
  v4.CFIndex location = 0;

  return sub_541B8(a1, v4, a2);
}

CFStringRef sub_542B8(const __CFAllocator *a1)
{
  CFUUIDRef v2 = CFUUIDCreate(a1);
  CFStringRef v3 = CFUUIDCreateString(a1, v2);
  CFRelease(v2);
  return v3;
}

CFStringRef sub_542FC(UInt8 *bytes, CFIndex numBytes)
{
  if (bytes && (int)numBytes >= 1) {
    return CFStringCreateWithBytes(kCFAllocatorDefault, bytes, numBytes, 0x8000100u, 0);
  }
  else {
    return 0;
  }
}

CFStringRef sub_54338(CFDataRef theData)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    BytePtr = CFDataGetBytePtr(theData);
    CFIndex Length = CFDataGetLength(theData);
    CFStringRef result = CFStringCreateWithBytes(0, BytePtr, Length, dword_5D62C[v2], 0);
    if (result) {
      break;
    }
    char v3 = 0;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

uint64_t sub_543B8(const void *a1, const void *a2)
{
  if (a1 && a2) {
    return CFEqual(a1, a2);
  }
  else {
    return 0;
  }
}

CFDataRef sub_543CC(CFPropertyListRef propertyList, _DWORD *a2)
{
  vm_address_t address = 0;
  *a2 = 0;
  CFDataRef result = CFPropertyListCreateData(0, propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (result)
  {
    CFDataRef v4 = result;
    int Length = CFDataGetLength(result);
    if (!vm_allocate(mach_task_self_, &address, Length, 1))
    {
      CFIndex v6 = (void *)address;
      BytePtr = CFDataGetBytePtr(v4);
      memmove(v6, BytePtr, Length);
      *a2 = Length;
    }
    CFRelease(v4);
    return (const __CFData *)address;
  }
  return result;
}

CFDataRef sub_54484(UInt8 *bytes, int a2)
{
  CFDataRef result = CFDataCreateWithBytesNoCopy(0, bytes, a2, kCFAllocatorNull);
  if (result)
  {
    CFDataRef v3 = result;
    CFPropertyListRef v4 = CFPropertyListCreateWithData(0, result, 0, 0, 0);
    CFRelease(v3);
    return (const __CFData *)v4;
  }
  return result;
}

void sub_544F0(CFMutableStringRef theString, int a2, unsigned __int8 *a3, uint64_t a4)
{
  int v4 = a4;
  switch(a2)
  {
    case 1:
      CFStringAppendFormat(theString, 0, @"\n");
      sub_59658(theString, (uint64_t)a3, v4);
      return;
    case 2:
      if (*a3) {
        int v8 = "TRUE";
      }
      else {
        int v8 = "FALSE";
      }
      CFStringAppendFormat(theString, 0, @"%s", v8);
      return;
    case 3:
      uint64_t v7 = *a3;
      goto LABEL_12;
    case 4:
      uint64_t v7 = bswap32(*(unsigned __int16 *)a3) >> 16;
      goto LABEL_12;
    case 5:
    case 6:
      uint64_t v7 = bswap32(*(_DWORD *)a3);
LABEL_12:
      CFStringAppendFormat(theString, 0, @"0x%x", v7);
      return;
    case 9:
      CFStringAppendFormat(theString, 0, @"%.*s", a4, a3);
      return;
    case 10:
      CFStringAppendFormat(theString, 0, @"%d.%d.%d.%d", *a3, a3[1], a3[2], a3[3]);
      return;
    case 13:
      int v20 = 0;
      uint64_t v9 = (unsigned __int8 *)sub_56FA4((uint64_t)a3, a4, &v20);
      CFStringAppendFormat(theString, 0, @"{");
      if (!v9) {
        goto LABEL_31;
      }
      if (v20 >= 1)
      {
        for (uint64_t i = 0; i < v20; CFStringAppendFormat(theString, 0, @"%s%s", v11, *(void *)&v9[8 * i++]))
        {
          if (i) {
            CFRange v11 = ", ";
          }
          else {
            CFRange v11 = "";
          }
        }
      }
      break;
    case 14:
      int v19 = 0;
      uint64_t v9 = (unsigned __int8 *)sub_577CC(a3, a4, &v19);
      CFStringAppendFormat(theString, 0, @"{");
      if (!v9) {
        goto LABEL_31;
      }
      if (v19 >= 1)
      {
        int v12 = 0;
        uint64_t v13 = v9;
        do
        {
          if (v12) {
            uint64_t v14 = "; ";
          }
          else {
            uint64_t v14 = "";
          }
          CFStringAppendFormat(theString, 0, @"%s%d.%d.%d.%d/%d, %d.%d.%d.%d", v14, *v13, v13[1], v13[2], v13[3], *((unsigned int *)v13 + 1), v13[8], v13[9], v13[10], v13[11]);
          ++v12;
          v13 += 12;
        }
        while (v12 < v19);
      }
      break;
    default:
      return;
  }
  free(v9);
LABEL_31:
  CFStringAppendFormat(theString, 0, @"}", v15, v16, v17, v18);
}

void sub_547E0(CFMutableStringRef theString, unsigned int a2, unsigned __int8 *a3, uint64_t a4)
{
  int v4 = a3;
  if (a2 <= 0xE && (unsigned int v6 = *((_DWORD *)&unk_694F8 + 6 * a2 + 1)) != 0)
  {
    if (v6 <= 0xE)
    {
      uint64_t v7 = *((int *)&unk_694F8 + 6 * v6);
      int v8 = (int)a4 / (int)v7;
      CFStringAppendFormat(theString, 0, @"{");
      if (v8 >= 1)
      {
        for (int i = 0; i != v8; ++i)
        {
          if (i) {
            CFStringAppendFormat(theString, 0, @", ");
          }
          sub_544F0(theString, v6, v4, v7);
          v4 += v7;
        }
      }
      CFStringAppendFormat(theString, 0, @"}");
    }
  }
  else
  {
    sub_544F0(theString, a2, a3, a4);
  }
}

BOOL sub_5491C(CFMutableStringRef theString, unsigned __int8 *a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = *((_DWORD *)&unk_69660 + 4 * v3);
  if (v4 >= 0xF)
  {
    CFStringAppendFormat(theString, 0, @"unknown type %d\n", *((unsigned int *)&unk_69660 + 4 * v3));
  }
  else
  {
    uint64_t v5 = a2[1];
    unsigned int v6 = a2 + 2;
    CFStringAppendFormat(theString, 0, @"%s (%s): ", *((void *)&unk_69660 + 2 * v3 + 1), *((void *)&unk_694F8 + 3 * v4 + 1));
    if (v3 == 53)
    {
      unint64_t v7 = *v6;
      if (v7 > 8) {
        int v8 = "<unknown>";
      }
      else {
        int v8 = off_6A660[v7];
      }
      CFStringAppendFormat(theString, 0, @"%s ", v8);
    }
    sub_547E0(theString, v4, v6, v5);
    CFStringAppendFormat(theString, 0, @"\n", v10);
  }
  return v4 < 0xF;
}

uint64_t sub_54A38(void *a1, unsigned __int8 *a2, int a3, char *a4)
{
  if (a4) {
    *a4 = 0;
  }
  sub_9140(a1);
  if (a3 < 1)
  {
    int v8 = 0;
    if ((a3 & 0x80000000) == 0) {
      return 1;
    }
    goto LABEL_16;
  }
  while (1)
  {
    int v8 = *a2;
    if (*a2) {
      break;
    }
    ++a2;
    --a3;
LABEL_9:
    if (a3 <= 0) {
      goto LABEL_14;
    }
  }
  if (v8 != 255)
  {
    if (a3 < 2) {
      goto LABEL_16;
    }
    uint64_t v9 = a2[1];
    sub_9178((uint64_t)a1, (uint64_t)a2);
    a3 -= v9 + 2;
    a2 += v9 + 2;
    goto LABEL_9;
  }
  sub_9178((uint64_t)a1, (uint64_t)a2);
  --a3;
LABEL_14:
  if ((a3 & 0x80000000) == 0) {
    return 1;
  }
LABEL_16:
  if (a4) {
    snprintf(a4, 0x100uLL, "parse failed near tag %d", v8);
  }
  sub_9148((uint64_t)a1);
  return 0;
}

unsigned __int8 *sub_54B38(uint64_t a1, int a2, _DWORD *a3, int *a4)
{
  CFDataRef result = 0;
  if (a2 && a2 != 255)
  {
    if (a4) {
      int v9 = *a4;
    }
    else {
      int v9 = 0;
    }
    while (1)
    {
      if (v9 >= (int)sub_5B08(a1)) {
        return 0;
      }
      uint64_t v10 = (unsigned __int8 *)sub_5B28(a1, v9);
      if (*v10 == a2) {
        break;
      }
      ++v9;
    }
    if (a3) {
      *a3 = v10[1];
    }
    if (a4) {
      *a4 = v9 + 1;
    }
    return v10 + 2;
  }
  return result;
}

unsigned __int8 *sub_54BE8(uint64_t a1, int a2, int a3)
{
  int v6 = 0;
  CFDataRef result = sub_54B38(a1, a2, &v6, 0);
  if (v6 < a3 || result == 0) {
    return 0;
  }
  return result;
}

char *sub_54C30(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v3 = 0;
  if (a2 && a2 != 255)
  {
    if ((int)sub_5B08(a1) < 1)
    {
      uint64_t v3 = 0;
      int v7 = 0;
    }
    else
    {
      int v7 = 0;
      uint64_t v3 = 0;
      int v8 = 0;
      do
      {
        int v9 = (unsigned __int8 *)sub_5B28(a1, v8);
        if (*v9 == a2)
        {
          uint64_t v10 = v9;
          size_t v11 = v9[1];
          if (v3)
          {
            int v12 = v11 + v7;
            uint64_t v3 = (char *)reallocf(v3, v11 + v7);
          }
          else
          {
            uint64_t v3 = (char *)malloc_type_malloc(v9[1], 0x81524677uLL);
            int v12 = v7 + v11;
          }
          memmove(&v3[v7], v10 + 2, v11);
          int v7 = v12;
        }
        ++v8;
      }
      while (v8 < (int)sub_5B08(a1));
    }
    *a3 = v7;
  }
  return v3;
}

uint64_t sub_54D30(char **a1, uint64_t a2, unsigned int a3, char *a4)
{
  sub_9140(a1);
  if (a4)
  {
    *a4 = 0;
    if (a3 <= 0xEF)
    {
      snprintf(a4, 0x100uLL, "packet is too short: %d < %d", a3, 240);
      return 0;
    }
    if (*(_DWORD *)(a2 + 236) != 1666417251)
    {
      uint64_t result = 0;
      strcpy(a4, "missing magic number");
      return result;
    }
  }
  else if (a3 < 0xF0 || *(_DWORD *)(a2 + 236) != 1666417251)
  {
    return 0;
  }
  uint64_t result = sub_54A38(a1, (unsigned __int8 *)(a2 + 240), a3 - 240, a4);
  if (result)
  {
    int v12 = 0;
    int v9 = sub_54B38((uint64_t)a1, 52, &v12, 0);
    if (v9 && v12 == 1)
    {
      uint64_t v10 = v9;
      v11[0] = 0;
      v11[1] = 0;
      sub_9140(v11);
      if ((*v10 | 2) == 3 && sub_54A38(v11, (unsigned __int8 *)(a2 + 108), 128, 0))
      {
        sub_5959C(a1, (uint64_t)v11);
        sub_9148((uint64_t)v11);
      }
      if ((*v10 & 0xFE) == 2)
      {
        if (sub_54A38(v11, (unsigned __int8 *)(a2 + 44), 64, 0))
        {
          sub_5959C(a1, (uint64_t)v11);
          sub_9148((uint64_t)v11);
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_54EC4(__CFString *a1, uint64_t a2)
{
  uint64_t v4 = sub_5B08(a2);
  CFStringAppendFormat(a1, 0, @"Options count is %d\n", v4);
  uint64_t result = sub_5B08(a2);
  if ((int)result >= 1)
  {
    int v6 = 0;
    do
    {
      int v7 = (unsigned __int8 *)sub_5B28(a2, v6);
      if (!sub_5491C(a1, v7)) {
        CFStringAppendFormat(a1, 0, @"undefined tag %d len %d\n", *v7, v7[1]);
      }
      ++v6;
      uint64_t result = sub_5B08(a2);
    }
    while (v6 < (int)result);
  }
  return result;
}

uint64_t sub_54F8C(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a3 < 1) {
    return 0;
  }
  LODWORD(v5) = 0;
  uint64_t v6 = a3;
  do
  {
    int v7 = *a2++;
    if (sub_54B38(a1, v7, 0, 0)) {
      uint64_t v5 = (v5 + 1);
    }
    else {
      uint64_t v5 = v5;
    }
    --v6;
  }
  while (v6);
  return v5;
}

double sub_54FF8(uint64_t a1, void *a2, int a3, int a4)
{
  bzero(a2, a3);
  double result = 0.0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)a1 = 287454020;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 296) = a4;
  return result;
}

double sub_55078(uint64_t a1, void *a2, int a3)
{
  return sub_54FF8(a1, a2, a3, 1);
}

uint64_t sub_55080(uint64_t a1, int a2, int a3, void *__src)
{
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v5 = (char *)(a1 + 40);
  if (a3 >= 256)
  {
    snprintf(v5, 0x100uLL, "tag %d option %d > %d", __src);
    return 1;
  }
  if (*(void *)a1 != 287454020 || *(_DWORD *)(a1 + 24))
  {
    __strlcpy_chk();
    return 1;
  }
  if (a2)
  {
    if (a2 == 255)
    {
      uint64_t v7 = *(int *)(a1 + 20);
      if ((int)v7 >= *(_DWORD *)(a1 + 16))
      {
        snprintf(v5, 0x100uLL, "can't add end tag %d > %d", __src);
        return 1;
      }
      *(unsigned char *)(*(void *)(a1 + 8) + v7) = -1;
      ++*(_DWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 24) = 1;
      goto LABEL_22;
    }
    int v10 = a3 + 2;
    uint64_t v11 = *(int *)(a1 + 20);
    if (a3 + 2 + (int)v11 + *(_DWORD *)(a1 + 296) > *(_DWORD *)(a1 + 16))
    {
      snprintf(v5, 0x100uLL, "can't add tag %d (%d > %d)", __src);
      return 2;
    }
    *(unsigned char *)(*(void *)(a1 + 8) + v11) = a2;
    *(unsigned char *)(*(int *)(a1 + 20) + *(void *)(a1 + 8) + 1) = a3;
    if (a3) {
      memmove((void *)(*(int *)(a1 + 20) + *(void *)(a1 + 8) + 2), __src, a3);
    }
    int v12 = *(_DWORD *)(a1 + 28);
    int v13 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 28) = v13;
    *(_DWORD *)(a1 + 32) = v12;
    int v9 = v10 + v13;
  }
  else
  {
    uint64_t v8 = *(int *)(a1 + 20);
    if (*(_DWORD *)(a1 + 296) + (int)v8 >= *(_DWORD *)(a1 + 16))
    {
      snprintf(v5, 0x100uLL, "can't add pad tag %d > %d", __src);
      return 2;
    }
    *(unsigned char *)(*(void *)(a1 + 8) + v8) = 0;
    int v9 = *(_DWORD *)(a1 + 20) + 1;
  }
  *(_DWORD *)(a1 + 20) = v9;
LABEL_22:
  uint64_t result = 0;
  ++*(_DWORD *)(a1 + 36);
  return result;
}

uint64_t sub_55248(uint64_t result)
{
  if (result)
  {
    if (*(void *)result == 287454020) {
      return *(unsigned int *)(result + 20);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_55270(uint64_t a1, char a2)
{
  char __src = a2;
  return sub_55080(a1, 53, 1, &__src);
}

const char *sub_552A0(uint64_t *a1)
{
  uint64_t result = "<bad parameter>";
  if (a1)
  {
    uint64_t v4 = *a1;
    uint64_t v3 = a1 + 5;
    if (v4 == 287454020) {
      return (const char *)v3;
    }
  }
  return result;
}

void sub_552C8(CFMutableStringRef theString, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3 = a3;
  if (a3 > 0xEB)
  {
    v7[0] = 0;
    v7[1] = 0;
    sub_54A30(v7);
    sub_54D30(v7, (uint64_t)a2, v3, 0);
    sub_55360(theString, a2, v6, (uint64_t)v7);
    sub_54A34((uint64_t)v7);
  }
  else
  {
    CFStringAppendFormat(theString, 0, @"Packet is too short %d < %d\n", a3, 236);
  }
}

void sub_55360(__CFString *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  CFStringAppendFormat(a1, 0, @"op = ");
  int v7 = *a2;
  if (v7 == 2)
  {
    CFStringAppendFormat(a1, 0, @"BOOTREPLY\n");
  }
  else if (v7 == 1)
  {
    CFStringAppendFormat(a1, 0, @"BOOTREQUEST\n");
  }
  else
  {
    CFStringAppendFormat(a1, 0, @"OP(%d)\n", *a2);
  }
  CFStringAppendFormat(a1, 0, @"htype = %d\n", a2[1]);
  CFStringAppendFormat(a1, 0, @"flags = 0x%x\n", bswap32(*((unsigned __int16 *)a2 + 5)) >> 16);
  unsigned int v8 = a2[2];
  if (v8 >= 0x11)
  {
    int v10 = 16;
    CFStringAppendFormat(a1, 0, @"hlen = %d (invalid > %lu)\n", a2[2], 16);
    int v9 = "[truncated] ";
  }
  else
  {
    CFStringAppendFormat(a1, 0, @"hlen = %d\n", a2[2]);
    int v9 = "";
    int v10 = v8;
  }
  CFStringAppendFormat(a1, 0, @"hops = %d\n", a2[3]);
  CFStringAppendFormat(a1, 0, @"xid = 0x%lx\n", bswap32(*((_DWORD *)a2 + 1)));
  CFStringAppendFormat(a1, 0, @"secs = %hu\n", bswap32(*((unsigned __int16 *)a2 + 4)) >> 16);
  uint64_t v11 = inet_ntop(2, a2 + 12, v16, 0x10u);
  CFStringAppendFormat(a1, 0, @"ciaddr = %s\n", v11);
  int v12 = inet_ntop(2, a2 + 16, v16, 0x10u);
  CFStringAppendFormat(a1, 0, @"yiaddr = %s\n", v12);
  int v13 = inet_ntop(2, a2 + 20, v16, 0x10u);
  CFStringAppendFormat(a1, 0, @"siaddr = %s\n", v13);
  uint64_t v14 = inet_ntop(2, a2 + 24, v16, 0x10u);
  CFStringAppendFormat(a1, 0, @"giaddr = %s\n", v14);
  CFStringAppendFormat(a1, 0, @"chaddr = %s", v9);
  if (v10)
  {
    for (uint64_t i = 0; i != v10; CFStringAppendFormat(a1, 0, @"%0x", a2[i++ + 28]))
    {
      if (i) {
        CFStringAppendFormat(a1, 0, @":");
      }
    }
  }
  CFStringAppendFormat(a1, 0, @"\n");
  CFStringAppendFormat(a1, 0, @"sname = %.*s\n", 64, a2 + 44);
  CFStringAppendFormat(a1, 0, @"file = %.*s\n", 128, a2 + 108);
  if (a4)
  {
    if ((int)sub_5B24(a4) >= 1)
    {
      CFStringAppendFormat(a1, 0, @"options:\n");
      sub_54EC4(a1, a4);
    }
  }
}

BOOL sub_556C8(uint64_t a1, int a2, int a3, void *a4, unsigned int a5)
{
  uint64_t v6 = 0;
  if (a3 == 24) {
    size_t v7 = 0;
  }
  else {
    size_t v7 = a5;
  }
  if (*(unsigned char *)a1 == 2) {
    return bswap32(*(_DWORD *)(a1 + 4)) == a2
  }
        && *(unsigned __int8 *)(a1 + 1) == a3
        && v7 == *(unsigned __int8 *)(a1 + 2)
        && (!v7 || !bcmp((const void *)(a1 + 28), a4, v7));
  return v6;
}

uint64_t sub_55744(const void *a1, size_t a2, _OWORD *a3, double a4)
{
  pthread_once(&stru_70100, (void (*)(void))sub_56D98);
  uint64_t Instance = _CFRuntimeCreateInstance();
  memcpy((void *)(Instance + 72), a1, a2);
  *(void *)(Instance + 64) = a2;
  *(_OWORD *)(Instance + 16) = *a3;
  *(void *)(Instance + 32) = sub_53DC0(a3);
  *(double *)(Instance + 40) = a4;
  unsigned int v9 = *(_DWORD *)(Instance + 64) - 16;
  sub_9140((void *)(Instance + 48));
  if (v9 >= 2)
  {
    uint64_t v10 = Instance + 88;
    while (1)
    {
      uint64_t v11 = 8 * *(unsigned __int8 *)(v10 + 1);
      if (!*(unsigned char *)(v10 + 1) || (int)v9 < (int)v11) {
        break;
      }
      sub_9178(Instance + 48, v10);
      v10 += v11;
      v9 -= v11;
      if (v9 < 2) {
        return Instance;
      }
    }
    sub_9148(Instance + 48);
    CFRelease((CFTypeRef)Instance);
    return 0;
  }
  return Instance;
}

double sub_5585C(uint64_t a1)
{
  return *(double *)(a1 + 40);
}

BOOL sub_55864(uint64_t a1, unsigned int a2, double a3)
{
  if (!a2) {
    return 1;
  }
  if (a2 == -1) {
    return 0;
  }
  double v4 = *(double *)(a1 + 40);
  return a3 - v4 >= (double)a2 || v4 > a3;
}

uint64_t sub_558A0(uint64_t a1)
{
  return a1 + 16;
}

__CFString *sub_558A8(uint64_t a1)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  sub_558E8(a1, Mutable);
  return Mutable;
}

void sub_558E8(uint64_t a1, CFMutableStringRef theString)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 77);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 78);
  uint64_t v6 = __rev16(v5);
  if (v5 == 0xFFFF) {
    size_t v7 = " (max)";
  }
  else {
    size_t v7 = "";
  }
  CFStringAppendFormat(theString, 0, @"from %@, length %ld, hop limit %d, lifetime %us%s, reachable %dms, retransmit %dms, flags 0x%x", *(void *)(a1 + 32), *(void *)(a1 + 64), *(unsigned __int8 *)(a1 + 76), v6, v7, bswap32(*(_DWORD *)(a1 + 80)), bswap32(*(_DWORD *)(a1 + 84)), v4);
  if (v4)
  {
    CFStringAppend(theString, @"=[");
    if ((v4 & 0x80) != 0)
    {
      CFStringAppend(theString, @" managed");
      if ((v4 & 0x40) == 0)
      {
LABEL_7:
        if ((v4 & 0x20) == 0) {
          goto LABEL_8;
        }
        goto LABEL_143;
      }
    }
    else if ((v4 & 0x40) == 0)
    {
      goto LABEL_7;
    }
    CFStringAppend(theString, @" other");
    if ((v4 & 0x20) == 0)
    {
LABEL_8:
      if ((v4 & 4) == 0)
      {
LABEL_10:
        CFStringAppend(theString, @" ]");
        CFStringAppend(theString, @", pref=");
        CFStringAppendFormat(theString, 0, @"%s\n", *(char **)((char *)off_6A720 + (v4 & 0x18)));
        goto LABEL_12;
      }
LABEL_9:
      CFStringAppend(theString, @" proxy");
      goto LABEL_10;
    }
LABEL_143:
    CFStringAppend(theString, @" home-agent");
    if ((v4 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  CFStringAppend(theString, @"\n");
LABEL_12:
  uint64_t v8 = a1 + 48;
  int v9 = sub_5B08(a1 + 48);
  if (v9 >= 1)
  {
    int v10 = v9;
    int v11 = 0;
    uint64_t v64 = a1 + 48;
    int v65 = v9;
    do
    {
      int v12 = (unsigned __int8 *)sub_5B28(v8, v11);
      int v13 = v12;
      uint64_t v14 = *v12;
      if (*v12 <= 0x14u)
      {
        uint64_t v15 = "source link-address";
        switch(*v12)
        {
          case 1u:
            break;
          case 2u:
            uint64_t v15 = "target link-address";
            break;
          case 3u:
            uint64_t v15 = "prefix info";
            break;
          case 4u:
            uint64_t v15 = "redirected header";
            break;
          case 5u:
            uint64_t v15 = "mtu";
            break;
          default:
            goto LABEL_33;
        }
      }
      else
      {
        if (*v12 > 0x1Eu)
        {
          switch(v14)
          {
            case 0x1F:
              uint64_t v15 = "dnssl";
              goto LABEL_34;
            case 0x25:
              uint64_t v15 = "captive portal";
              goto LABEL_34;
            case 0x26:
              uint64_t v15 = "pref64";
              goto LABEL_34;
          }
        }
        else
        {
          switch(v14)
          {
            case 0x15:
              uint64_t v15 = "provisioning domain";
              goto LABEL_34;
            case 0x18:
              uint64_t v15 = "route info";
              goto LABEL_34;
            case 0x19:
              uint64_t v15 = "rdnss";
              goto LABEL_34;
          }
        }
LABEL_33:
        uint64_t v15 = "<unknown>";
      }
LABEL_34:
      unsigned int v16 = v12[1];
      uint64_t v17 = 8 * v12[1];
      CFStringAppendFormat(theString, 0, @"\t%s option (%d), length %d (%d): ", v15, v14, v17, v12[1]);
      unsigned int v18 = *v13;
      if (v18 > 0x18)
      {
        if (*v13 <= 0x24u)
        {
          if (v18 == 25)
          {
            if (v16 <= 2)
            {
              CFStringAppendFormat(theString, 0, @"truncated (%d < %d) ", 8 * v16, 24);
              uint64_t v21 = (uint64_t)(v13 + 2);
              int v22 = v17 - 2;
              uint64_t v23 = theString;
              goto LABEL_89;
            }
            unsigned int v34 = *((_DWORD *)v13 + 1);
            CFStringAppend(theString, @" lifetime ");
            if (v34 == -1) {
              CFStringAppend(theString, @"infinite");
            }
            else {
              CFStringAppendFormat(theString, 0, @"%us", bswap32(v34));
            }
            CFStringAppend(theString, @", addr: ");
            if ((int)((unint64_t)(v17 + 0xFFFFFFFF8) >> 4) >= 1)
            {
              uint64_t v45 = 0;
              do
              {
                if (v45) {
                  int v46 = ", ";
                }
                else {
                  int v46 = "";
                }
                int8x16_t v47 = inet_ntop(30, &v13[v45 + 8], v70, 0x2Eu);
                CFStringAppendFormat(theString, 0, @"%s%s", v46, v47);
                v45 += 16;
              }
              while (((v17 + 0xFFFFFFFF8) & 0xFFFFFFFF0) != v45);
            }
LABEL_101:
            uint64_t v8 = v64;
LABEL_129:
            int v10 = v65;
            goto LABEL_133;
          }
          if (v18 == 31)
          {
            *(_DWORD *)int v70 = 0;
            if (v16 > 1)
            {
              unsigned int v39 = *((_DWORD *)v13 + 1);
              CFStringAppend(theString, @" lifetime ");
              if (v39 == -1) {
                CFStringAppend(theString, @"infinite");
              }
              else {
                CFStringAppendFormat(theString, 0, @"%us", bswap32(v39));
              }
              CFStringAppend(theString, @", domain(s): ");
              uint64_t v48 = (uint64_t)(v13 + 8);
              uint64_t v49 = (v17 - 8);
              while (!*(unsigned char *)(v48 + (v49 - 2)))
              {
                if (v49-- <= 2)
                {
                  LODWORD(v49) = 1;
                  goto LABEL_116;
                }
              }
              if (!v49)
              {
                CFStringAppendFormat(theString, 0, @"no domains ", v57, v60);
                goto LABEL_40;
              }
LABEL_116:
              uint64_t v51 = sub_56FA4(v48, v49, (int *)v70);
              uint64_t v52 = v51;
              if (*(int *)v70 < 1)
              {
                if (!v51) {
                  goto LABEL_129;
                }
              }
              else
              {
                uint64_t v53 = 0;
                do
                {
                  if (v53) {
                    uint64_t v54 = ", ";
                  }
                  else {
                    uint64_t v54 = "";
                  }
                  CFStringAppendFormat(theString, 0, @"%s%s", v54, *(void *)&v52[8 * v53++]);
                }
                while (v53 < *(int *)v70);
              }
              free(v52);
            }
            else
            {
              CFStringAppendFormat(theString, 0, @"truncated (%d < %d) ", 8 * v16, 16);
LABEL_40:
              sub_540F8(theString, (uint64_t)(v13 + 2), v17 - 2, 58);
            }
            goto LABEL_129;
          }
          goto LABEL_81;
        }
        if (v18 != 37)
        {
          if (v18 == 38)
          {
            uint64_t __dst = 0;
            uint64_t v69 = 0;
            unsigned __int8 v67 = 0;
            unsigned __int16 v66 = 0;
            if (sub_56E74((uint64_t)v13, 8 * v16, (char *)&__dst, &v67, &v66, theString))
            {
              int v20 = inet_ntop(30, &__dst, v70, 0x2Eu);
              CFStringAppendFormat(theString, 0, @"%s/%d lifetime %us", v20, v67, v66);
            }
            goto LABEL_133;
          }
          goto LABEL_81;
        }
        if (!v16)
        {
          uint64_t v24 = v17;
          uint64_t v25 = 3;
          goto LABEL_80;
        }
        int v27 = v13[2];
        uint64_t v26 = v13 + 2;
        if (v27)
        {
          uint64_t v28 = 0;
          while (!v26[(v17 - 4 + v28)])
          {
            --v28;
            if ((v17 - 8) + v28 + 7 <= 2)
            {
              uint64_t v29 = 1;
              goto LABEL_93;
            }
          }
          uint64_t v29 = (v17 + v28 - 2);
LABEL_93:
          CFStringAppendFormat(theString, 0, @"uri=%.*s", v29, v26, v62);
          goto LABEL_133;
        }
        CFStringAppend(theString, @"empty uri: ");
        int v41 = v17 - 2;
        int v42 = theString;
        uint64_t v40 = (uint64_t)v26;
LABEL_82:
        sub_540F8(v42, v40, v41, 58);
        goto LABEL_133;
      }
      if (v18 == 3)
      {
        if (v16 > 3)
        {
          unsigned __int8 v35 = inet_ntop(30, v13 + 16, v70, 0x2Eu);
          CFStringAppendFormat(theString, 0, @" %s/%d, flags [", v35, v13[2]);
          int v36 = (char)v13[3];
          if (v36 < 0)
          {
            CFStringAppend(theString, @" onlink");
            if ((v13[3] & 0x40) != 0) {
LABEL_73:
            }
              CFStringAppend(theString, @" auto");
          }
          else if ((v36 & 0x40) != 0)
          {
            goto LABEL_73;
          }
          CFStringAppend(theString, @" ], valid time ");
          unsigned int v37 = *((_DWORD *)v13 + 1);
          int v38 = *((_DWORD *)v13 + 2);
          if (v37 == -1) {
            CFStringAppendFormat(theString, 0, @"infinite", v58);
          }
          else {
            CFStringAppendFormat(theString, 0, @"%us", bswap32(v37));
          }
          CFStringAppend(theString, @", pref. time ");
          if (v38 == -1) {
            CFStringAppendFormat(theString, 0, @"infinite", v59, v61, v62);
          }
          else {
            CFStringAppendFormat(theString, 0, @"%us", bswap32(*((_DWORD *)v13 + 2)), v61, v62);
          }
          goto LABEL_133;
        }
        uint64_t v24 = 8 * v16;
        uint64_t v25 = 32;
LABEL_80:
        CFStringAppendFormat(theString, 0, @"truncated (%d < %d) ", v24, v25);
LABEL_81:
        uint64_t v40 = (uint64_t)(v13 + 2);
        int v41 = v17 - 2;
        int v42 = theString;
        goto LABEL_82;
      }
      if (v18 == 21)
      {
        *(void *)int v70 = 0;
        if (v16)
        {
          if (8 * v13[1])
          {
            unsigned __int8 v30 = v13[2];
            unsigned __int8 v63 = v13[3];
            unsigned int v31 = *((unsigned __int16 *)v13 + 2);
            unsigned int v32 = (8 * v13[1]) - 6;
            CFStringAppend(theString, @" ");
            CFStringRef v33 = sub_57594((uint64_t)(v13 + 6), v32);
            *(void *)int v70 = v33;
            if (v33)
            {
              CFStringAppendFormat(theString, 0, @"%@", v33);
              CFStringAppend(theString, @", flags [");
              uint64_t v8 = v64;
              if ((v30 & 0x80) == 0)
              {
                if ((v30 & 0x20) == 0) {
                  goto LABEL_66;
                }
LABEL_137:
                CFStringAppend(theString, @" ra");
                if ((v30 & 0x40) == 0) {
                  goto LABEL_68;
                }
LABEL_67:
                CFStringAppend(theString, @" legacy");
                goto LABEL_68;
              }
              CFStringAppend(theString, @" http");
              if ((v30 & 0x20) != 0) {
                goto LABEL_137;
              }
LABEL_66:
              if ((v30 & 0x40) != 0) {
                goto LABEL_67;
              }
LABEL_68:
              CFStringAppend(theString, @" ]");
              CFStringAppendFormat(theString, 0, @", delay %hu", v63 & 0xF);
              CFStringAppendFormat(theString, 0, @", sequence nr %hu", bswap32(v31) >> 16);
              int v10 = v65;
            }
            else
            {
              CFStringAppend(theString, @"invalid id");
              uint64_t v8 = v64;
            }
          }
          else
          {
            CFStringAppend(theString, @" ");
            CFStringAppend(theString, @"invalid id");
          }
        }
        else
        {
          CFStringAppendFormat(theString, 0, @"truncated (%d < %d) ", v17, 6);
          sub_540F8(theString, (uint64_t)(v13 + 2), v17 - 2, 58);
        }
        sub_6DB0((const void **)v70);
        goto LABEL_133;
      }
      if (v18 != 24) {
        goto LABEL_81;
      }
      if (!v16)
      {
        uint64_t v24 = v17;
        uint64_t v25 = 8;
        goto LABEL_80;
      }
      uint64_t v19 = v13[2];
      if (v19 < 0x81)
      {
        unsigned int v43 = v19 >> 3;
        if ((v19 & 7) != 0) {
          uint64_t v44 = v43 + 1;
        }
        else {
          uint64_t v44 = v43;
        }
        if (v44 + 8 <= (unint64_t)v17)
        {
          uint64_t __dst = 0;
          uint64_t v69 = 0;
          __memcpy_chk();
          if ((v19 & 7) != 0) {
            *((unsigned char *)&__dst + v44 - 1) &= -1 << (8 - (v19 & 7));
          }
          uint64_t v55 = inet_ntop(30, &__dst, v70, 0x2Eu);
          CFStringAppendFormat(theString, 0, @" %s/%d, pref=%s, lifetime ", v55, v19, *(char **)((char *)off_6A720 + (v13[3] & 0x18)));
          unsigned int v56 = *((_DWORD *)v13 + 1);
          uint64_t v8 = v64;
          int v10 = v65;
          if (v56 == -1) {
            CFStringAppend(theString, @"infinite");
          }
          else {
            CFStringAppendFormat(theString, 0, @"%us", bswap32(v56));
          }
          goto LABEL_133;
        }
        CFStringAppendFormat(theString, 0, @"truncated (%d < %d) ", v17, v44 + 8);
        int v22 = v17 - 2;
        uint64_t v23 = theString;
        uint64_t v21 = (uint64_t)(v13 + 2);
LABEL_89:
        sub_540F8(v23, v21, v22, 58);
        goto LABEL_101;
      }
      CFStringAppendFormat(theString, 0, @"invalid prefix length %d > %d", v13[2], 128);
      sub_540F8(theString, (uint64_t)(v13 + 2), v17 - 2, 58);
LABEL_133:
      CFStringAppend(theString, @"\n");
      ++v11;
    }
    while (v11 != v10);
  }
}

uint64_t sub_56430(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 77);
}

uint64_t sub_56438(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(a1 + 78)) >> 16;
}

unsigned char *sub_56448(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = a1 + 48;
  int v4 = sub_5B08(a1 + 48);
  *a2 = 0;
  if (v4 < 1) {
    return 0;
  }
  int v5 = v4;
  int v6 = 0;
  while (1)
  {
    size_t v7 = (unsigned char *)sub_5B28(v3, v6);
    if (*v7 == 1) {
      break;
    }
    if (v5 == ++v6) {
      return 0;
    }
  }
  if (!v7[1]) {
    return 0;
  }
  *a2 = 8 * v7[1] - 2;
  return v7 + 2;
}

__CFArray *sub_564D8(uint64_t a1)
{
  uint64_t v1 = a1 + 48;
  int v11 = 0;
  if ((int)sub_5B08(a1 + 48) < 1) {
    return 0;
  }
  CFMutableStringRef Mutable = 0;
  uint64_t v3 = 0;
  int v4 = 0;
  while (1)
  {
    CFStringRef v10 = 0;
    int v5 = (unsigned char *)sub_5B28(v1, v4);
    if (*v5 == 3) {
      break;
    }
LABEL_10:
    if (++v4 >= (int)sub_5B08(v1)) {
      return Mutable;
    }
  }
  int v6 = v5;
  if ((v5[1] & 0x1C) != 0)
  {
    if (v3 || (Mutable = CFArrayCreateMutable(0, 1, &kCFTypeArrayCallBacks), (int v11 = Mutable) != 0))
    {
      size_t v7 = inet_ntop(30, v6 + 16, v12, 0x2Eu);
      if (v7)
      {
        CFStringRef v8 = CFStringCreateWithCString(0, v7, 0x8000100u);
        CFStringRef v10 = v8;
        if (v8)
        {
          CFArrayAppendValue(Mutable, v8);
          sub_6DB0((const void **)&v10);
          uint64_t v3 = Mutable;
          goto LABEL_10;
        }
      }
    }
  }
  sub_6DB0((const void **)&v11);
  return v11;
}

uint64_t sub_5662C(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = a1 + 48;
  int v4 = sub_5B08(a1 + 48);
  if (v4 < 1)
  {
LABEL_8:
    *a2 = 0;
    return 0;
  }
  else
  {
    int v5 = v4;
    int v6 = 0;
    while (1)
    {
      uint64_t v7 = sub_5B28(v3, v6);
      if (*(unsigned char *)v7 == 3)
      {
        if (*(unsigned __int8 *)(v7 + 1) < 4u) {
          goto LABEL_8;
        }
        unsigned int v8 = *(_DWORD *)(v7 + 4);
        if (v8)
        {
          if (*(_DWORD *)(v7 + 8)) {
            break;
          }
        }
      }
      if (v5 == ++v6) {
        goto LABEL_8;
      }
    }
    *a2 = bswap32(v8);
    return bswap32(*(_DWORD *)(v7 + 8));
  }
}

uint64_t sub_566CC(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  uint64_t v5 = a1 + 48;
  int v6 = sub_5B08(a1 + 48);
  if (v6 < 1)
  {
LABEL_7:
    unsigned int v12 = 0;
    uint64_t result = 0;
    LODWORD(v14) = 0;
    if (!a2) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v7 = v6;
  int v8 = 0;
  while (1)
  {
    uint64_t v9 = sub_5B28(v5, v8);
    if (*(unsigned char *)v9 == 25)
    {
      unint64_t v10 = *(unsigned __int8 *)(v9 + 1);
      if (v10 < 3) {
        goto LABEL_7;
      }
      unsigned int v11 = *(_DWORD *)(v9 + 4);
      if (v11) {
        break;
      }
    }
    if (v7 == ++v8) {
      goto LABEL_7;
    }
  }
  uint64_t result = v9 + 8;
  unsigned int v12 = bswap32(v11);
  unint64_t v14 = (8 * v10 + 0xFFFFFFFF8) >> 4;
  if (a2) {
LABEL_8:
  }
    *a2 = v14;
LABEL_9:
  if (a3) {
    *a3 = v12;
  }
  return result;
}

uint64_t sub_5678C(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  uint64_t v5 = a1 + 48;
  int v6 = sub_5B08(a1 + 48);
  if (v6 < 1)
  {
LABEL_7:
    LODWORD(v12) = 0;
    uint64_t result = 0;
    unsigned int v14 = 0;
    if (!a2) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v7 = v6;
  int v8 = 0;
  while (1)
  {
    uint64_t v9 = sub_5B28(v5, v8);
    if (*(unsigned char *)v9 == 31)
    {
      unint64_t v10 = *(unsigned __int8 *)(v9 + 1);
      if (v10 < 2) {
        goto LABEL_7;
      }
      unsigned int v11 = *(_DWORD *)(v9 + 4);
      if (v11) {
        break;
      }
    }
    if (v7 == ++v8) {
      goto LABEL_7;
    }
  }
  uint64_t result = v9 + 8;
  uint64_t v12 = (8 * v10 - 8);
  while (!*(unsigned char *)(result + (v12 - 2)))
  {
    if (v12-- <= 2)
    {
      LODWORD(v12) = 1;
      goto LABEL_19;
    }
  }
  if (!v12) {
    uint64_t result = 0;
  }
LABEL_19:
  unsigned int v14 = bswap32(v11);
  if (a2) {
LABEL_8:
  }
    *a2 = v12;
LABEL_9:
  if (a3) {
    *a3 = v14;
  }
  return result;
}

uint64_t sub_56874(uint64_t a1, void *a2, _WORD *a3, uint64_t a4)
{
  uint64_t v7 = a1 + 48;
  int v8 = sub_5B08(a1 + 48);
  if (v8 < 1) {
    return 0;
  }
  int v9 = v8;
  int v10 = 0;
  while (1)
  {
    uint64_t v11 = sub_5B28(v7, v10);
    if (*(unsigned char *)v11 == 21) {
      break;
    }
    if (v9 == ++v10) {
      return 0;
    }
  }
  unsigned __int8 v12 = 8 * *(unsigned char *)(v11 + 1);
  if (!v12) {
    return 0;
  }
  *(unsigned char *)a4 = *(unsigned char *)(v11 + 2) >> 7;
  *(unsigned char *)(a4 + 1) = (*(unsigned char *)(v11 + 2) & 0x40) != 0;
  *(unsigned char *)(a4 + 2) = (*(unsigned char *)(v11 + 2) & 0x20) != 0;
  *(_WORD *)(a4 + 4) = *(unsigned char *)(v11 + 3) & 0xF;
  *a3 = bswap32(*(unsigned __int16 *)(v11 + 4)) >> 16;
  *a2 = v12 - 6;
  return v11 + 6;
}

double sub_56958(uint64_t a1, BOOL *a2, char *a3, double a4)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v8 = sub_566CC(a1, (_DWORD *)&v18 + 1, (unsigned int *)&v18);
  double v9 = 0.0;
  if (!v8)
  {
LABEL_19:
    char v12 = 0;
    if (!a2) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v18 != -1)
  {
    if (!v18
      || ((v10 = *(double *)(a1 + 40), v10 <= a4) ? (BOOL v11 = a4 - v10 < (double)v18) : (BOOL v11 = 0), !v11))
    {
      char v12 = 1;
      if (!a2) {
        goto LABEL_21;
      }
LABEL_20:
      *a2 = v8 != 0;
      goto LABEL_21;
    }
  }
  if (sub_5678C(a1, (_DWORD *)&v19 + 1, (unsigned int *)&v19)
    && ((unsigned int v13 = v19, v19 == -1)
     || v19
     && ((double v14 = *(double *)(a1 + 40), v14 <= a4) ? (v15 = a4 - v14 < (double)v19) : (v15 = 0), v15)))
  {
    unsigned int v16 = v18;
    if (v19 < v18) {
      goto LABEL_25;
    }
  }
  else
  {
    unsigned int v16 = v18;
  }
  unsigned int v13 = v16;
  if (v16 == -1) {
    goto LABEL_19;
  }
LABEL_25:
  char v12 = 0;
  double v9 = *(double *)(a1 + 40) + (double)v13;
  if (a2) {
    goto LABEL_20;
  }
LABEL_21:
  if (a3) {
    *a3 = v12;
  }
  return v9;
}

CFStringRef sub_56A7C(uint64_t a1)
{
  uint64_t v1 = a1 + 48;
  int v2 = sub_5B08(a1 + 48);
  if (v2 < 1) {
    goto LABEL_12;
  }
  int v3 = v2;
  int v4 = 0;
  while (1)
  {
    uint64_t v5 = (unsigned char *)sub_5B28(v1, v4);
    if (*v5 == 37) {
      break;
    }
    if (v3 == ++v4) {
      goto LABEL_12;
    }
  }
  int v6 = v5[1];
  if (v5[1] && (v8 = v5[2], uint64_t v7 = v5 + 2, v8))
  {
    uint64_t v9 = 2 * ((4 * v6 + 2147483644) & 0x7FFFFFFC);
    while (!v7[(v9 + 4)])
    {
      uint64_t v10 = v9 + 6;
      --v9;
      if (v10 <= 2)
      {
        CFIndex v11 = 1;
        goto LABEL_13;
      }
    }
    CFIndex v11 = (v9 + 6);
  }
  else
  {
LABEL_12:
    CFIndex v11 = 0;
    uint64_t v7 = 0;
  }
LABEL_13:

  return sub_542FC(v7, v11);
}

BOOL sub_56B48(uint64_t a1, char *a2, unsigned char *a3, _WORD *a4)
{
  uint64_t v7 = a1 + 48;
  int v8 = sub_5B08(a1 + 48);
  if (v8 < 1)
  {
    return 0;
  }
  else
  {
    int v9 = v8;
    int v10 = 0;
    BOOL v11 = 1;
    do
    {
      char v12 = (unsigned char *)sub_5B28(v7, v10);
      if (*v12 == 38 && (sub_56E74((uint64_t)v12, 8 * v12[1], a2, a3, a4, 0) & 1) != 0) {
        break;
      }
      BOOL v11 = ++v10 < v9;
    }
    while (v9 != v10);
  }
  return v11;
}

CFStringRef sub_56C00(uint64_t a1, _WORD *a2)
{
  v7[0] = 0;
  v7[1] = 0;
  unsigned __int8 v6 = 0;
  __int16 v5 = 0;
  BOOL v3 = sub_56B48(a1, (char *)v7, &v6, &v5);
  CFStringRef result = 0;
  if (v3)
  {
    inet_ntop(30, v7, v8, 0x2Eu);
    CFStringRef result = CFStringCreateWithFormat(0, 0, @"%s/%d", v8, v6);
    *a2 = v5;
  }
  return result;
}

CFDictionaryRef sub_56CB8(uint64_t a1)
{
  *(_OWORD *)keys = *(_OWORD *)off_6A6A8;
  CFStringRef v9 = @"ReceiveDate";
  CFDataRef v2 = CFDataCreate(0, (const UInt8 *)(a1 + 72), *(void *)(a1 + 64));
  CFDateRef v3 = CFDateCreate(0, *(CFAbsoluteTime *)(a1 + 40));
  int v4 = *(void **)(a1 + 32);
  values[0] = v2;
  values[1] = v4;
  values[2] = v3;
  CFDictionaryRef v5 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFRelease(v2);
  CFRelease(v3);
  return v5;
}

uint64_t sub_56D98()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_702B0 = result;
  return result;
}

void sub_56DC0(uint64_t a1)
{
  sub_9148(a1 + 48);

  sub_6DB0((const void **)(a1 + 32));
}

__CFString *sub_56DFC(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<RouterAdvertisement %p [%p]> { ", a1, v2);
  sub_558E8((uint64_t)a1, Mutable);
  CFStringAppend(Mutable, @"}");
  return Mutable;
}

uint64_t sub_56E74(uint64_t a1, uint64_t a2, char *__dst, unsigned char *a4, _WORD *a5, CFMutableStringRef theString)
{
  int v7 = a2;
  if (a2 > 0xF)
  {
    unsigned int v12 = bswap32(*(unsigned __int16 *)(a1 + 2));
    if ((HIWORD(v12) & 7) < 6u)
    {
      unsigned int v16 = HIWORD(v12);
      unint64_t v17 = 0x202830384060uLL >> (8 * (BYTE2(v12) & 7u));
      memmove(__dst, (const void *)(a1 + 4), (v17 >> 3) & 0xF);
      bzero(&__dst[(v17 >> 3) & 0xF], 16 - ((v17 & 0x78) >> 3));
      *a4 = v17;
      *a5 = v16 & 0xFFF8;
      return 1;
    }
    if (theString)
    {
      CFStringAppendFormat(theString, 0, @"invalid PLC=%d: ", HIWORD(v12) & 7);
      int v10 = v7 - 2;
      BOOL v11 = theString;
      uint64_t v9 = a1 + 2;
      goto LABEL_8;
    }
  }
  else if (theString)
  {
    CFStringAppendFormat(theString, 0, @"truncated (%d < %d) ", a2, 16);
    uint64_t v9 = a1 + 2;
    int v10 = v7 - 2;
    BOOL v11 = theString;
LABEL_8:
    sub_540F8(v11, v9, v10, 58);
  }
  return 0;
}

char *sub_56FA4(uint64_t a1, unsigned int a2, int *a3)
{
  __src[0] = 0;
  memset(v11, 0, sizeof(v11));
  __src[1] = v11;
  size_t __n = 0x8000000000;
  int v4 = sub_570C0(a1, a2, (uint64_t)v11, 0);
  int v5 = v4;
  if (v4)
  {
    unsigned __int8 v6 = (char *)malloc_type_malloc((int)__n + 8 * v4, 0x1C7CB10DuLL);
    int v7 = &v6[8 * v5];
    memcpy(v7, __src[1], (int)__n);
    if (v5 >= 1)
    {
      uint64_t v8 = 0;
      do
      {
        *(void *)&v6[v8] = v7;
        v7 += strlen(v7) + 1;
        v8 += 8;
      }
      while (8 * v5 != v8);
    }
  }
  else
  {
    unsigned __int8 v6 = 0;
  }
  if (v6) {
    int v9 = v5;
  }
  else {
    int v9 = 0;
  }
  *a3 = v9;
  sub_57410(v11);
  return v6;
}

uint64_t sub_570C0(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v4 = 0;
  if (a1 && a2)
  {
    size_t v7 = 0;
    size_t v8 = 0;
    uint64_t v4 = 0;
    unsigned int v9 = 0;
    v30[1] = (void *)0x800000000;
    memset(v29, 0, sizeof(v29));
    v30[0] = v29;
    char v10 = 1;
    unsigned int v11 = a2;
    do
    {
      unsigned int v12 = (unsigned __int8 *)(a1 + v8);
      unsigned int v13 = *v12;
      if ((~v13 & 0xC0) != 0)
      {
        if (v8 >= v7)
        {
          if (v13 >= 0x40)
          {
            fprintf(__stderrp, "label length %d > %d\n");
            goto LABEL_48;
          }
          unsigned int v18 = v13 + 1;
          if (v11 <= v13)
          {
            fprintf(__stderrp, "label truncated %d < %d\n");
            goto LABEL_48;
          }
          size_t v7 = v18 + v7;
          v11 -= v18;
        }
        if (*v12)
        {
          char __src = 46;
          if (SLODWORD(v30[1]) < 1) {
            goto LABEL_29;
          }
          if (*(_DWORD *)v30[0] != v8)
          {
            uint64_t v19 = 1;
            do
            {
              unint64_t v20 = v19;
              if (LODWORD(v30[1]) == v19) {
                break;
              }
              int v21 = *((_DWORD *)v30[0] + v19++);
            }
            while (v21 != v8);
            if (v20 >= LODWORD(v30[1])) {
LABEL_29:
            }
              sub_57648((int *)v29, v8);
          }
          if ((v10 & 1) == 0) {
            sub_576E0(a3, &__src, 1);
          }
          sub_576E0(a3, v12 + 1, v13);
          char v10 = 0;
          size_t v8 = v8 + v13 + 1;
        }
        else
        {
          char __src = 0;
          char v10 = 1;
          sub_576E0(a3, &__src, 1);
          uint64_t v4 = (v4 + 1);
          unsigned int v9 = v7;
          size_t v8 = v7;
          if (a4) {
            break;
          }
        }
      }
      else
      {
        if (a4)
        {
          int v22 = __stderrp;
          uint64_t v23 = "single name with pointers\n";
          size_t v24 = 26;
          goto LABEL_47;
        }
        if (v8 >= v7)
        {
          if (v11 <= 1)
          {
            int v22 = __stderrp;
            uint64_t v23 = "truncated pointer value\n";
            size_t v24 = 24;
            goto LABEL_47;
          }
          size_t v7 = (v7 + 2);
          v11 -= 2;
        }
        unsigned int v14 = bswap32(*(_WORD *)v12 & 0xFF3F);
        if (v8 <= HIWORD(v14))
        {
          int v22 = __stderrp;
          uint64_t v23 = "pointer points at or ahead of current position\n";
          size_t v24 = 47;
          goto LABEL_47;
        }
        size_t v8 = HIWORD(v14);
        if (v9 <= v8)
        {
          int v22 = __stderrp;
          uint64_t v23 = "attempt to create infinite loop\n";
          size_t v24 = 32;
          goto LABEL_47;
        }
        if (SLODWORD(v30[1]) < 1) {
          goto LABEL_38;
        }
        if (*(_DWORD *)v30[0] != v8)
        {
          uint64_t v15 = 1;
          do
          {
            unint64_t v16 = v15;
            if (LODWORD(v30[1]) == v15) {
              break;
            }
            int v17 = *((_DWORD *)v30[0] + v15++);
          }
          while (v17 != v8);
          if (v16 >= LODWORD(v30[1]))
          {
LABEL_38:
            int v22 = __stderrp;
            uint64_t v23 = "attempt to point off into the weeds\n";
            size_t v24 = 36;
            goto LABEL_47;
          }
        }
      }
    }
    while (v8 < a2);
    if (v4) {
      goto LABEL_49;
    }
    int v22 = __stderrp;
    if (*(_DWORD *)(a3 + 144))
    {
      uint64_t v23 = "name missing end label\n";
      size_t v24 = 23;
    }
    else
    {
      uint64_t v23 = "empty list\n";
      size_t v24 = 11;
    }
LABEL_47:
    fwrite(v23, v24, 1uLL, v22);
LABEL_48:
    sub_57410((_OWORD *)a3);
    uint64_t v4 = 0;
LABEL_49:
    if (v30[0] && v30[0] != v29) {
      free(v30[0]);
    }
  }
  return v4;
}

double sub_57410(_OWORD *a1)
{
  if (!*((unsigned char *)a1 + 128))
  {
    CFAllocatorRef v2 = (_OWORD *)*((void *)a1 + 17);
    if (v2) {
      BOOL v3 = v2 == a1;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3) {
      free(v2);
    }
  }
  *((void *)a1 + 18) = 0;
  double result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

__CFArray *sub_57468(uint64_t a1, unsigned int a2)
{
  cStr[0] = 0;
  memset(v9, 0, sizeof(v9));
  cStr[1] = (char *)v9;
  uint64_t v11 = 0x8000000000;
  int v2 = sub_570C0(a1, a2, (uint64_t)v9, 0);
  if (!v2) {
    return 0;
  }
  int v3 = v2;
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, v2, &kCFTypeArrayCallBacks);
  if (v3 >= 1)
  {
    int v5 = cStr[1];
    do
    {
      CFStringRef v6 = CFStringCreateWithCString(0, v5, 0x8000100u);
      if (v6)
      {
        CFStringRef v7 = v6;
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v7);
      }
      v5 += strlen(v5) + 1;
      --v3;
    }
    while (v3);
  }
  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    CFMutableStringRef Mutable = 0;
  }
  sub_57410(v9);
  return Mutable;
}

CFStringRef sub_57594(uint64_t a1, unsigned int a2)
{
  cStr[0] = 0;
  memset(v4, 0, sizeof(v4));
  cStr[1] = (char *)v4;
  uint64_t v6 = 0x8000000000;
  if (!sub_570C0(a1, a2, (uint64_t)v4, 1)) {
    return 0;
  }
  CFStringRef v2 = CFStringCreateWithCString(0, cStr[1], 0x8000100u);
  sub_57410(v4);
  return v2;
}

int *sub_57648(int *result, size_t size)
{
  int v2 = size;
  uint64_t v3 = (uint64_t)result;
  uint64_t v4 = result[11];
  if (v4 == result[10])
  {
    result[11] = 2 * v4;
    int v5 = (void *)*((void *)result + 4);
    if (v5 == (void *)v3)
    {
      uint64_t v6 = malloc_type_malloc(8 * v4, 0x100004052888210uLL);
      *(void *)(v3 + 32) = v6;
      double result = (int *)memmove(v6, (const void *)v3, 4 * *(int *)(v3 + 40));
    }
    else
    {
      double result = (int *)reallocf(v5, 8 * v4);
      *(void *)(v3 + 32) = result;
    }
  }
  uint64_t v7 = *(void *)(v3 + 32);
  uint64_t v8 = *(int *)(v3 + 40);
  *(_DWORD *)(v3 + 40) = v8 + 1;
  *(_DWORD *)(v7 + 4 * v8) = v2;
  return result;
}

uint64_t sub_576E0(uint64_t a1, void *__src, int a3)
{
  int v6 = *(_DWORD *)(a1 + 148);
  int v7 = v6 - *(_DWORD *)(a1 + 144);
  if (v7 < a3)
  {
    if (*(unsigned char *)(a1 + 128))
    {
      fprintf(__stderrp, "user-supplied buffer failed to add data with length %d (> %d)\n", a3, v7);
      return 0;
    }
    if (a3 <= 128) {
      int v9 = 128;
    }
    else {
      int v9 = a3;
    }
    int v10 = v6 + v9;
    *(_DWORD *)(a1 + 148) = v10;
    uint64_t v11 = *(void **)(a1 + 136);
    if (v11 == (void *)a1)
    {
      unsigned int v12 = malloc_type_malloc(v10, 0x6DA55C14uLL);
      *(void *)(a1 + 136) = v12;
      memcpy(v12, (const void *)a1, *(int *)(a1 + 144));
    }
    else
    {
      *(void *)(a1 + 136) = reallocf(v11, v10);
    }
  }
  memcpy((void *)(*(void *)(a1 + 136) + *(int *)(a1 + 144)), __src, a3);
  *(_DWORD *)(a1 + 144) += a3;
  return 1;
}

_DWORD *sub_577CC(unsigned __int8 *a1, int a2, int *a3)
{
  uint64_t v4 = 0;
  int v5 = 0;
  if (a1 && a2)
  {
    int v8 = sub_57880(a1, a2, 0, 0);
    int v5 = v8;
    if (!v8)
    {
LABEL_6:
      uint64_t v4 = 0;
      goto LABEL_7;
    }
    uint64_t v4 = malloc_type_malloc(12 * v8, 0x10000403E1C8BA9uLL);
    if (sub_57880(a1, a2, v4, v5) != v5)
    {
      free(v4);
      int v5 = 0;
      goto LABEL_6;
    }
  }
LABEL_7:
  *a3 = v5;
  return v4;
}

uint64_t sub_57880(unsigned __int8 *a1, int a2, _DWORD *__dst, int a4)
{
  if (a2 >= 1)
  {
    unsigned int v5 = a2;
    uint64_t v7 = 0;
    uint64_t v8 = a4;
    for (uint64_t i = __dst; ; i += 3)
    {
      unsigned int v10 = *a1;
      if (v10 >= 0x21) {
        break;
      }
      LODWORD(v11) = v10 + 8;
      if ((v10 & 7) != 0) {
        unint64_t v11 = v11;
      }
      else {
        unint64_t v11 = *a1;
      }
      unint64_t v12 = v11 >> 3;
      unsigned int v13 = (v11 >> 3) + 5;
      int v14 = v5 - v13;
      if (v5 < v13)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v16 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v16 = 67109376;
          *(_DWORD *)(v16 + 4) = v5;
          *(_WORD *)(v16 + 8) = 1024;
          *(_DWORD *)(v16 + 10) = v13;
          __SC_log_send();
        }
        return 0;
      }
      if (__dst)
      {
        if (v7 >= v8)
        {
          sub_4220();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            _os_log_pack_size();
            __chkstk_darwin();
            __error();
            int v17 = (_DWORD *)_os_log_pack_fill();
            *int v17 = 67109120;
            v17[1] = a4;
            __SC_log_send();
          }
          return 0;
        }
        *uint64_t i = 0;
        i[1] = v10;
        memcpy(i, a1 + 1, v11 >> 3);
        i[2] = *(_DWORD *)&a1[v12 + 1];
      }
      ++v7;
      a1 += v13;
      v5 -= v13;
      if (v14 <= 0) {
        return v7;
      }
    }
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v15 = (_DWORD *)_os_log_pack_fill();
      _DWORD *v15 = 67109120;
      v15[1] = v10;
      __SC_log_send();
    }
  }
  return 0;
}

_DWORD *sub_57BA8(_DWORD *a1, int a2)
{
  uint64_t v2 = 0;
  if (a1 && a2 >= 1)
  {
    while (*a1)
    {
      a1 += 3;
      if (!--a2) {
        return 0;
      }
    }
    return a1;
  }
  return (_DWORD *)v2;
}

void *sub_57BE0(void *a1, uint64_t a2, uint64_t a3)
{
  double result = sub_9140(a1);
  a1[2] = a2;
  a1[3] = a3;
  return result;
}

void DHCPLeaseListFree_0(uint64_t *a1)
{
  uint64_t v1 = (uint64_t)a1;
  uint64_t v3 = 0;
  while (sub_59480(a1, 0, &v3))
  {
    if (v3)
    {
      uint64_t v2 = *(void (**)(void))(v1 + 16);
      if (v2) {
        v2();
      }
    }
    a1 = (uint64_t *)v1;
  }
  sub_9148(v1);
}

uint64_t sub_57C84(uint64_t *a1, unsigned int a2)
{
  uint64_t v5 = 0;
  uint64_t result = sub_59480(a1, a2, &v5);
  if (result)
  {
    if (v5)
    {
      uint64_t v4 = (void (*)(void))a1[2];
      if (v4) {
        v4();
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_57CD4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_9140((void *)a1);
  if ((int)sub_5B08(a2) >= 1)
  {
    int v4 = 0;
    do
    {
      uint64_t v5 = sub_5B28(a2, v4);
      uint64_t v6 = v5;
      if (v5)
      {
        uint64_t v7 = *(uint64_t (**)(uint64_t))(a1 + 24);
        if (v7) {
          uint64_t v6 = v7(v5);
        }
      }
      sub_9178(a1, v6);
      ++v4;
    }
    while (v4 < (int)sub_5B08(a2));
  }
  return 1;
}

__n128 sub_57D6C(__n128 *a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
  if (v2)
  {
    __n128 result = *a1;
    _OWORD *v2 = *a1;
  }
  return result;
}

uint64_t sub_57DB4(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 8);
  }
  return result;
}

uint64_t sub_57DC0(uint64_t a1, unsigned int a2)
{
  if (a1) {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  else {
    int v2 = 0;
  }
  uint64_t v3 = 0;
  if ((a2 & 0x80000000) == 0 && v2 > (int)a2) {
    return *(void *)a1 + 96 * a2;
  }
  return v3;
}

uint64_t sub_57DF4(uint64_t *a1, int a2)
{
  uint64_t v4 = 0;
  if (!a1) {
    goto LABEL_3;
  }
LABEL_2:
  for (int i = *((_DWORD *)a1 + 2); ; int i = 0)
  {
    if (v4 >= i) {
      return 0;
    }
    uint64_t v6 = *a1;
    uint64_t v7 = *a1 + 96 * v4 + 24;
    if ((int)sub_5B24(v7) >= 1) {
      break;
    }
LABEL_9:
    ++v4;
    if (a1) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  uint64_t v8 = 0;
  while (*(_DWORD *)sub_5B4C(v7, v8) != a2)
  {
    uint64_t v8 = (v8 + 1);
    if ((int)v8 >= (int)sub_5B24(v7)) {
      goto LABEL_9;
    }
  }
  return v6 + 96 * v4;
}

uint64_t sub_57EB8(uint64_t *a1, char *__s2)
{
  uint64_t v4 = -96;
  uint64_t v5 = -1;
  while (1)
  {
    int v6 = a1 ? *((_DWORD *)a1 + 2) : 0;
    if (++v5 >= v6) {
      break;
    }
    uint64_t v7 = v4 + 96;
    uint64_t v8 = *a1;
    int v9 = strcmp((const char *)(*a1 + v4 + 96), __s2);
    uint64_t v4 = v7;
    if (!v9) {
      return v8 + v7;
    }
  }
  return 0;
}

uint64_t sub_57F3C(uint64_t a1)
{
  uint64_t result = sub_57EB8((uint64_t *)a1, "en0");
  if (!result)
  {
    if (a1 && (uint64_t v3 = *(unsigned int *)(a1 + 8), (int)v3 >= 1))
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      int v6 = 0;
      uint64_t v7 = *(int *)(a1 + 8);
      do
      {
        if (v4 >= v7) {
          uint64_t v8 = 0;
        }
        else {
          uint64_t v8 = *(void *)a1 + 96 * v4;
        }
        int v9 = *(unsigned __int8 *)(v8 + 18);
        if (v9 == 6 || v9 == 144)
        {
          if (v6)
          {
            if (strcmp((const char *)v8, v6) < 0) {
              int v6 = (const char *)v8;
            }
          }
          else
          {
            int v6 = (const char *)v8;
          }
        }
        else if (!v5)
        {
          if (*(unsigned char *)(v8 + 74)) {
            uint64_t v5 = v8;
          }
          else {
            uint64_t v5 = 0;
          }
        }
        ++v4;
      }
      while (v4 != v3);
    }
    else
    {
      int v6 = 0;
      uint64_t v5 = 0;
    }
    if (v5) {
      BOOL v10 = v6 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10) {
      return v5;
    }
    else {
      return (uint64_t)v6;
    }
  }
  return result;
}

uint64_t sub_5802C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 18);
}

uint64_t sub_58034(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 74);
}

void **sub_5803C()
{
  int v0 = (void **)malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
  uint64_t v1 = v0;
  if (v0 && !sub_58094(v0))
  {
    free(v1);
    return 0;
  }
  return v1;
}

void *sub_58094(void **a1)
{
  unsigned __int8 v63 = 0;
  memset(v67, 0, 44);
  *a1 = 0;
  int v2 = getifaddrs(&v63);
  uint64_t v3 = v63;
  if (v2 < 0) {
    goto LABEL_89;
  }
  if (!v63)
  {
LABEL_91:
    uint64_t result = *a1;
    if (*a1)
    {
      free(result);
      uint64_t result = 0;
      *a1 = 0;
    }
    return result;
  }
  int v4 = 0;
  uint64_t v5 = v63;
  while (v5->ifa_addr)
  {
    uint64_t v5 = v5->ifa_next;
    --v4;
    if (!v5) {
      goto LABEL_8;
    }
  }
  if (!v4)
  {
LABEL_89:
    if (v3) {
      freeifaddrs(v3);
    }
    goto LABEL_91;
  }
LABEL_8:
  int v6 = -v4;
  uint64_t v7 = malloc_type_malloc(96 * -v4, 0x1080040B03B560BuLL);
  *a1 = v7;
  if (!v7)
  {
    uint64_t v3 = v63;
    goto LABEL_89;
  }
  int v8 = socket(2, 2, 0);
  uint64_t v3 = v63;
  if (v8 < 0) {
    goto LABEL_89;
  }
  int v9 = v8;
  *((_DWORD *)a1 + 2) = 0;
  *((_DWORD *)a1 + 3) = v6;
  size_t v10 = 96;
  if (!v3) {
    goto LABEL_94;
  }
  int v62 = v8;
  do
  {
    ifa_addr = v3->ifa_addr;
    if (!ifa_addr) {
      goto LABEL_82;
    }
    ifa_name = v3->ifa_name;
    int sa_family = ifa_addr->sa_family;
    if (sa_family == 2)
    {
      uint64_t v20 = 96 * (a1[1] & ~(*((int *)a1 + 2) >> 31));
      uint64_t v21 = -96;
      do
      {
        uint64_t v22 = v21 + 96;
        if (v20 == v21 + 96) {
          goto LABEL_30;
        }
        uint64_t v23 = *a1;
        int v24 = strcmp((const char *)*a1 + v21 + 96, ifa_name);
        uint64_t v21 = v22;
      }
      while (v24);
      if (v23)
      {
        uint64_t v25 = (uint64_t)v23 + v22;
LABEL_32:
        int v33 = *(_DWORD *)&ifa_addr->sa_data[2];
        ifa_netmask = v3->ifa_netmask;
        if (ifa_netmask) {
          int v35 = *(_DWORD *)&ifa_netmask->sa_data[2];
        }
        else {
          int v35 = 0;
        }
        if ((*(_WORD *)(v25 + 16) & 2) != 0 && (ifa_dstaddr = v3->ifa_dstaddr) != 0) {
          int v37 = *(_DWORD *)&ifa_dstaddr->sa_data[2];
        }
        else {
          int v37 = 0;
        }
        int v38 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
        if (v38)
        {
          *int v38 = v33;
          v38[1] = v35;
          v38[2] = v35 & v33;
          v38[3] = v37;
        }
        sub_57C7C(v25 + 24, v38);
        goto LABEL_82;
      }
LABEL_30:
      uint64_t v32 = sub_59228((uint64_t *)a1);
      if (v32)
      {
        uint64_t v25 = v32;
        *(_WORD *)(v32 + 16) = v3->ifa_flags;
        ifa_addr = v3->ifa_addr;
        goto LABEL_32;
      }
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_82;
      }
      goto LABEL_45;
    }
    if (sa_family != 18) {
      goto LABEL_82;
    }
    uint64_t v14 = 96 * (a1[1] & ~(*((int *)a1 + 2) >> 31));
    uint64_t v15 = -96;
    do
    {
      uint64_t v16 = v15 + 96;
      if (v14 == v15 + 96) {
        goto LABEL_25;
      }
      uint64_t v17 = (uint64_t)*a1;
      int v18 = strcmp((const char *)*a1 + v15 + 96, ifa_name);
      uint64_t v15 = v16;
    }
    while (v18);
    if (v17)
    {
      uint64_t v19 = v17 + v16;
      goto LABEL_27;
    }
LABEL_25:
    uint64_t v26 = sub_59228((uint64_t *)a1);
    if (!v26)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_82;
      }
LABEL_45:
      uint64_t v39 = _os_log_pack_size();
      __chkstk_darwin(v39);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
      goto LABEL_82;
    }
    uint64_t v19 = v26;
    *(_WORD *)(v26 + 16) = v3->ifa_flags;
LABEL_27:
    unsigned int v27 = ifa_addr->sa_data[4];
    if (v27 >= 0x11)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v28 = _os_log_pack_size();
        __chkstk_darwin(v28);
        __error();
        uint64_t v29 = _os_log_pack_fill();
        int v30 = ifa_addr->sa_data[2];
        int v31 = ifa_addr->sa_data[4];
        *(_DWORD *)uint64_t v29 = 136315906;
        *(void *)(v29 + 4) = ifa_name;
        *(_WORD *)(v29 + 12) = 1024;
        *(_DWORD *)(v29 + 14) = v30;
        *(_WORD *)(v29 + 18) = 1024;
        *(_DWORD *)(v29 + 20) = v31;
        *(_WORD *)(v29 + 24) = 2048;
        unsigned int v27 = 16;
        *(void *)(v29 + 26) = 16;
        __SC_log_send();
        int v9 = v62;
      }
      else
      {
        unsigned int v27 = 16;
      }
    }
    *(unsigned char *)(v19 + 74) = v27;
    memmove((void *)(v19 + 56), &ifa_addr->sa_data[ifa_addr->sa_data[3] + 6], v27);
    char v40 = ifa_addr->sa_data[2];
    *(unsigned char *)(v19 + 75) = v40;
    *(_WORD *)(v19 + 72) = *(_WORD *)ifa_addr->sa_data;
    ifa_uint64_t data = (char *)v3->ifa_data;
    if (ifa_data) {
      char v40 = *ifa_data;
    }
    *(unsigned char *)(v19 + 18) = v40;
    if (sub_58FEC(v9, (uint64_t)ifa_name, (uint64_t)v67))
    {
      if (*(unsigned char *)(v19 + 18) == 6)
      {
        uint64_t v42 = sub_59080(v9, (uint64_t)ifa_name);
        if ((v42 & 0x4000) != 0) {
          *(unsigned char *)(v19 + 19) |= 8u;
        }
        if ((v67[1] & 0xE0) == 0x80)
        {
          char v43 = *(unsigned char *)(v19 + 19);
          *(unsigned char *)(v19 + 19) = v43 | 1;
          if ((v42 & 0x100000) != 0)
          {
            char v57 = v43 | 3;
            goto LABEL_70;
          }
          keys = @"IOInterfaceName";
          values = (void *)CFStringCreateWithCString(0, ifa_name, 0x8000100u);
          uint64_t v64 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFRelease(values);
          keys = @"IOPropertyMatch";
          CFDictionaryRef v44 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&v64, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFRelease(v64);
          io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v44);
          if (MatchingService)
          {
            io_object_t v46 = MatchingService;
            CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(MatchingService, @"IO80211InterfaceRole", kCFAllocatorDefault, 0);
            if (CFProperty)
            {
              uint64_t v48 = CFProperty;
              CFTypeID TypeID = CFStringGetTypeID();
              BOOL v50 = CFGetTypeID(v48) == TypeID && CFEqual(v48, @"Infrastructure") != 0;
              CFRelease(v48);
              IOObjectRelease(v46);
              if (v50)
              {
                char v57 = *(unsigned char *)(v19 + 19) | 0x10;
LABEL_70:
                *(unsigned char *)(v19 + 19) = v57;
              }
            }
            else
            {
              IOObjectRelease(v46);
            }
          }
        }
        else
        {
          CFStringRef v51 = CFStringCreateWithCString(0, ifa_name, 0x8000100u);
          uint64_t v52 = _SCNetworkInterfaceCreateWithBSDName();
          if (v52)
          {
            uint64_t v53 = (const void *)v52;
            int IsTetheredHotspot = _SCNetworkInterfaceIsTetheredHotspot();
            int IsCarPlay = _SCNetworkInterfaceIsCarPlay();
            CFRelease(v53);
            if (IsCarPlay)
            {
              if (IsTetheredHotspot) {
                char v56 = 36;
              }
              else {
                char v56 = 32;
              }
              CFRelease(v51);
            }
            else
            {
              CFRelease(v51);
              if (!IsTetheredHotspot) {
                goto LABEL_71;
              }
              char v56 = 4;
            }
            char v57 = *(unsigned char *)(v19 + 19) | v56;
            goto LABEL_70;
          }
          CFRelease(v51);
        }
      }
LABEL_71:
      if (SLODWORD(v67[2]) < 1)
      {
        int v59 = 0;
        unint64_t v58 = 0;
        uint64_t v60 = 0;
      }
      else
      {
        unint64_t v58 = (unint64_t)(BYTE8(v67[1]) & 2) << 31;
        if (BYTE8(v67[1])) {
          int v59 = (DWORD2(v67[1]) >> 2) & 1;
        }
        else {
          int v59 = 0;
        }
        if ((BYTE8(v67[1]) & 1) == 0) {
          unint64_t v58 = 0;
        }
        uint64_t v60 = 1;
        if ((BYTE8(v67[1]) & 1) == 0) {
          uint64_t v60 = 0;
        }
      }
      *(void *)(v19 + 80) = v60 | v58;
      *(_DWORD *)(v19 + 88) = v59;
    }
LABEL_82:
    uint64_t v3 = v3->ifa_next;
  }
  while (v3);
  size_t v10 = 96 * *((int *)a1 + 2) + 96;
LABEL_94:
  *a1 = reallocf(*a1, v10);
  if (v63) {
    freeifaddrs(v63);
  }
  if ((v9 & 0x80000000) == 0) {
    close(v9);
  }
  return &def_58C8 + 1;
}

void sub_58860(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      if (*(int *)(v2 + 8) >= 1)
      {
        uint64_t v3 = 0;
        uint64_t v4 = 24;
        do
        {
          DHCPLeaseListFree_0((uint64_t *)(*(void *)v2 + v4));
          ++v3;
          v4 += 96;
        }
        while (v3 < *(int *)(v2 + 8));
      }
      if (*(void *)v2) {
        free(*(void **)v2);
      }
      free((void *)v2);
      *a1 = 0;
    }
  }
}

uint64_t sub_588E4(uint64_t a1)
{
  return sub_5B24(a1 + 24);
}

uint64_t sub_588EC(uint64_t a1, uint64_t a2)
{
  return sub_5B4C(a1 + 24, a2);
}

void sub_588F4(uint64_t **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      DHCPLeaseListFree_0(v2 + 3);
      free(v2);
      *a1 = 0;
    }
  }
}

_OWORD *sub_58938(_OWORD *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x60uLL, 0x1080040B03B560BuLL);
  uint64_t v3 = v2;
  if (v2)
  {
    long long v4 = a1[1];
    _OWORD *v2 = *a1;
    v2[1] = v4;
    long long v5 = a1[2];
    long long v6 = a1[3];
    long long v7 = a1[5];
    v2[4] = a1[4];
    v2[5] = v7;
    void v2[2] = v5;
    v2[3] = v6;
    sub_57CD4((uint64_t)v2 + 24, (uint64_t)a1 + 24);
  }
  return v3;
}

__n128 sub_589A4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  uint64_t v2 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 80) = v2;
  __n128 result = *(__n128 *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(__n128 *)(a1 + 56) = result;
  return result;
}

uint64_t sub_589D0(uint64_t a1)
{
  size_t v18 = 0;
  *(_OWORD *)uint64_t v19 = xmmword_5D640;
  int v2 = *(unsigned __int16 *)(a1 + 72);
  int v20 = 3;
  int v21 = v2;
  if ((sysctl(v19, 6u, 0, &v18, 0, 0) & 0x80000000) == 0)
  {
    uint64_t v3 = malloc_type_malloc(v18, 0x714D220FuLL);
    if (sysctl(v19, 6u, v3, &v18, 0, 0) < 0)
    {
      unsigned int v13 = __stderrp;
      uint64_t v14 = __error();
      uint64_t v15 = strerror(*v14);
      fprintf(v13, "sysctl() failed: %s", v15);
    }
    else if (v18 >= 0x84)
    {
      if (v3[3] != 14) {
        goto LABEL_18;
      }
      long long v4 = &v3[v3[117] + 120];
      unsigned int v5 = v3[118];
      int v6 = v3[116];
      if (v5 >= 0x11)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v7 = _os_log_pack_size();
          uint64_t v17 = (uint64_t)&v17;
          __chkstk_darwin(v7);
          __error();
          uint64_t v8 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v8 = 136315906;
          *(void *)(v8 + 4) = a1;
          *(_WORD *)(v8 + 12) = 1024;
          *(_DWORD *)(v8 + 14) = v6;
          *(_WORD *)(v8 + 18) = 1024;
          *(_DWORD *)(v8 + 20) = v5;
          *(_WORD *)(v8 + 24) = 2048;
          unsigned int v5 = 16;
          *(void *)(v8 + 26) = 16;
          __SC_log_send();
        }
        else
        {
          unsigned int v5 = 16;
        }
      }
      if (*(unsigned __int8 *)(a1 + 75) != v6
        || v5 != *(unsigned __int8 *)(a1 + 74)
        || v5 && bcmp(v4, (const void *)(a1 + 56), v5))
      {
        *(unsigned char *)(a1 + 74) = v5;
        memmove((void *)(a1 + 56), v4, v5);
        *(unsigned char *)(a1 + 75) = v3[116];
        uint64_t v12 = 1;
      }
      else
      {
LABEL_18:
        uint64_t v12 = 0;
      }
LABEL_19:
      free(v3);
      return v12;
    }
    uint64_t v12 = 0;
    if (!v3) {
      return v12;
    }
    goto LABEL_19;
  }
  int v9 = __stderrp;
  size_t v10 = __error();
  unint64_t v11 = strerror(*v10);
  fprintf(v9, "sysctl() size failed: %s", v11);
  return 0;
}

uint64_t sub_58CA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 75);
}

uint64_t sub_58CAC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_58CB4(unsigned __int8 *a1)
{
  if (a1[75] == 6 && a1[74] == 6) {
    return (a1[56] >> 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_58CE0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 19) >> 4) & 1;
}

uint64_t sub_58CEC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 19) >> 1) & 1;
}

uint64_t sub_58CF8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 19) >> 2) & 1;
}

uint64_t sub_58D04(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 19) >> 5) & 1;
}

uint64_t sub_58D10(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 19) >> 3) & 1;
}

const char *sub_58D1C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 19) & 2) != 0) {
    return "AWDL";
  }
  if (*(unsigned char *)(a1 + 19)) {
    return "WiFi";
  }
  int v1 = *(unsigned __int8 *)(a1 + 18);
  int v2 = "Bridge";
  uint64_t v3 = "Cellular";
  if (v1 != 255) {
    uint64_t v3 = 0;
  }
  if (v1 != 209) {
    int v2 = v3;
  }
  long long v4 = "Link Aggregate";
  unsigned int v5 = "Firewire";
  if (v1 != 144) {
    unsigned int v5 = 0;
  }
  if (v1 != 136) {
    long long v4 = v5;
  }
  if (*(unsigned __int8 *)(a1 + 18) <= 0xD0u) {
    int v2 = v4;
  }
  int v6 = "Ethernet";
  uint64_t v7 = "6to4";
  uint64_t v8 = "VLAN";
  if (v1 != 135) {
    uint64_t v8 = 0;
  }
  if (v1 != 57) {
    uint64_t v7 = v8;
  }
  if (v1 != 6) {
    int v6 = v7;
  }
  if (*(unsigned __int8 *)(a1 + 18) <= 0x87u) {
    return v6;
  }
  else {
    return v2;
  }
}

uint64_t sub_58DC8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 72);
}

uint64_t sub_58DD0(uint64_t a1)
{
  int v2 = socket(2, 2, 0);
  if ((v2 & 0x80000000) == 0)
  {
    int v3 = v2;
    memset(v12, 0, 44);
    if (sub_58FEC(v2, a1, (uint64_t)v12))
    {
      if (SLODWORD(v12[2]) < 1)
      {
        int v5 = 0;
        unint64_t v4 = 0;
        uint64_t v6 = 0;
      }
      else
      {
        unint64_t v4 = (unint64_t)(BYTE8(v12[1]) & 2) << 31;
        if (BYTE8(v12[1])) {
          int v5 = (DWORD2(v12[1]) >> 2) & 1;
        }
        else {
          int v5 = 0;
        }
        if (BYTE8(v12[1]))
        {
          uint64_t v6 = 1;
        }
        else
        {
          unint64_t v4 = 0;
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 80) = v6 | v4;
      *(_DWORD *)(a1 + 88) = v5;
    }
    else if (*__error() != 6 && *__error() != 82 && *__error() != 22)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v7 = _os_log_pack_size();
        __chkstk_darwin(v7);
        __error();
        uint64_t v8 = _os_log_pack_fill();
        int v9 = __error();
        size_t v10 = strerror(*v9);
        *(_DWORD *)uint64_t v8 = 136315394;
        *(void *)(v8 + 4) = a1;
        *(_WORD *)(v8 + 12) = 2080;
        *(void *)(v8 + 14) = v10;
        __SC_log_send();
      }
    }
    *(unsigned char *)(a1 + 19) = *(unsigned char *)(a1 + 19) & 0xF7 | (sub_59080(v3, a1) >> 11) & 8;
    close(v3);
  }
  return *(void *)(a1 + 80);
}

uint64_t sub_58FEC(int a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a3 + 28) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  __strlcpy_chk();
  if (ioctl(a1, 0xC02C6938uLL, a3) != -1) {
    return 1;
  }
  if (*__error() != 102) {
    return 0;
  }
  *(_DWORD *)(a3 + 24) = 3;
  uint64_t result = 1;
  *(_DWORD *)(a3 + 32) = 1;
  return result;
}

uint64_t sub_59080(int a1, uint64_t a2)
{
  long long v9 = 0u;
  long long v10 = 0u;
  __strlcpy_chk();
  if (ioctl(a1, 0xC020698EuLL, &v9) != -1) {
    return v10;
  }
  if (*__error() != 6 && *__error() != 82 && *__error() != 22)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      uint64_t v7 = __error();
      uint64_t v8 = strerror(*v7);
      *(_DWORD *)uint64_t v6 = 136315394;
      *(void *)(v6 + 4) = a2;
      *(_WORD *)(v6 + 12) = 2080;
      *(void *)(v6 + 14) = v8;
      __SC_log_send();
    }
  }
  return 0;
}

uint64_t sub_59228(uint64_t *a1)
{
  int v1 = *((_DWORD *)a1 + 2);
  if (v1 >= *((_DWORD *)a1 + 3)) {
    return 0;
  }
  uint64_t v2 = *a1;
  *((_DWORD *)a1 + 2) = v1 + 1;
  uint64_t v3 = v2 + 96 * v1;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  __strlcpy_chk();
  sub_57BE0((void *)(v3 + 24), (uint64_t)j__free, (uint64_t)sub_57D6C);
  return v3;
}

CFMutableDictionaryRef sub_592BC(char *path)
{
  CFMutableDictionaryRef properties = 0;
  io_registry_entry_t v1 = IORegistryEntryFromPath(kIOMainPortDefault, path);
  if (!v1) {
    return 0;
  }
  io_object_t v2 = v1;
  if (IORegistryEntryCreateCFProperties(v1, &properties, kCFAllocatorDefault, 0)) {
    CFMutableDictionaryRef properties = 0;
  }
  IOObjectRelease(v2);
  return properties;
}

CFMutableDictionaryRef sub_59334(char *bsdName, int a2)
{
  kern_return_t ParentEntry;
  io_registry_entry_t parent;
  CFMutableDictionaryRef properties;

  CFMutableDictionaryRef properties = 0;
  CFDictionaryRef v3 = IOBSDNameMatching(kIOMainPortDefault, 0, bsdName);
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v3);
  if (!MatchingService) {
    return 0;
  }
  io_object_t v5 = MatchingService;
  if (a2)
  {
    parent = 0;
    ParentEntry = IORegistryEntryGetParentEntry(MatchingService, "IOService", &parent);
    if (!ParentEntry)
    {
      ParentEntry = IORegistryEntryCreateCFProperties(parent, &properties, kCFAllocatorDefault, 0);
      IOObjectRelease(parent);
    }
  }
  else
  {
    ParentEntry = IORegistryEntryCreateCFProperties(MatchingService, &properties, kCFAllocatorDefault, 0);
  }
  if (ParentEntry) {
    CFMutableDictionaryRef properties = 0;
  }
  IOObjectRelease(v5);
  return properties;
}

uint64_t sub_5941C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = 0;
  if (!a1) {
    goto LABEL_4;
  }
LABEL_2:
  uint64_t v4 = *a1;
  if (*a1) {
    LODWORD(v4) = *((_DWORD *)a1 + 3);
  }
  while (result < (int)v4)
  {
    uint64_t v5 = *a1;
    if (*a1)
    {
      if (result >= *((int *)a1 + 3)) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = *(void *)(v5 + 8 * result);
      }
    }
    if (v5 == a2) {
      return result;
    }
    ++result;
    if (a1) {
      goto LABEL_2;
    }
LABEL_4:
    LODWORD(v4) = 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_59480(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t result = 0;
  if ((a2 & 0x80000000) == 0)
  {
    int v6 = *((_DWORD *)a1 + 3);
    if (v6 > (int)a2)
    {
      if (a3) {
        *a3 = *(void *)(v3 + 8 * a2);
      }
      if ((int)(v6 + ~a2) >= 1)
      {
        memmove((void *)(*a1 + 8 * a2), (const void *)(*a1 + 8 * (a2 + 1)), 8 * (v6 + ~a2));
        int v6 = *((_DWORD *)a1 + 3);
      }
      *((_DWORD *)a1 + 3) = v6 - 1;
      return 1;
    }
  }
  return result;
}

BOOL sub_59508(uint64_t a1)
{
  io_object_t v2 = *(void **)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  if (!v2)
  {
    if (!v3)
    {
      int v3 = 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    *(_DWORD *)(a1 + 12) = 0;
    io_object_t v2 = malloc_type_malloc(8 * v3, 0x80040B8603338uLL);
    goto LABEL_7;
  }
  if (v3 == *(_DWORD *)(a1 + 12))
  {
    *(_DWORD *)(a1 + 8) = 2 * v3;
    io_object_t v2 = malloc_type_realloc(v2, 16 * v3, 0x80040B8603338uLL);
LABEL_7:
    *(void *)a1 = v2;
  }
  return v2 != 0;
}

char *sub_5959C(char **a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  if (!v2) {
    return (unsigned char *)(&def_58C8 + 1);
  }
  int v5 = *((_DWORD *)a1 + 3) + v2;
  if (v5 <= *((_DWORD *)a1 + 2))
  {
    uint64_t result = *a1;
    if (*a1)
    {
LABEL_9:
      memmove(&result[8 * *((int *)a1 + 3)], *(const void **)a2, 8 * *(int *)(a2 + 12));
      *((_DWORD *)a1 + 3) += *(_DWORD *)(a2 + 12);
      return (unsigned char *)(&def_58C8 + 1);
    }
  }
  else
  {
    *((_DWORD *)a1 + 2) = v5;
    int v6 = *a1;
    if (*a1) {
      uint64_t result = (char *)malloc_type_realloc(v6, 8 * v5, 0x80040B8603338uLL);
    }
    else {
      uint64_t result = (char *)malloc_type_malloc(8 * v5, 0x80040B8603338uLL);
    }
    *a1 = result;
    if (result) {
      goto LABEL_9;
    }
  }
  return result;
}

void sub_59658(CFMutableStringRef theString, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    do
    {
      if (!v6) {
        CFStringAppendFormat(theString, 0, @"%04x ", v5);
      }
      int v8 = *(char *)(a2 + v5);
      if (v8 < 0) {
        __uint32_t v9 = __maskrune(*(unsigned __int8 *)(a2 + v5), 0x40000uLL);
      }
      else {
        __uint32_t v9 = _DefaultRuneLocale.__runetype[*(unsigned __int8 *)(a2 + v5)] & 0x40000;
      }
      unsigned __int8 v10 = *(unsigned char *)(a2 + v5);
      if (v9) {
        char v11 = v8;
      }
      else {
        char v11 = 46;
      }
      v14[v6] = v11;
      CFStringAppendFormat(theString, 0, @" %02x", v10);
      if (v6 == 7)
      {
        CFStringAppendFormat(theString, 0, @" ");
        int v6 = 8;
      }
      else if (v6 == 15)
      {
        char v15 = 0;
        CFStringAppendFormat(theString, 0, @"  %s\n", v14);
        int v6 = 0;
      }
      else
      {
        ++v6;
      }
      ++v5;
    }
    while (a3 != v5);
    if (v6)
    {
      if (v6 >= 8) {
        uint64_t v12 = "";
      }
      else {
        uint64_t v12 = " ";
      }
      if (v6 <= 15)
      {
        uint64_t v13 = v6;
        do
        {
          CFStringAppendFormat(theString, 0, @"   ");
          v14[v13++] = 32;
        }
        while (v13 != 16);
      }
      char v15 = 0;
      CFStringAppendFormat(theString, 0, @"  %s%s\n", v12, v14);
    }
  }
}

void sub_59844(__CFString *a1, uint64_t a2, int a3)
{
}

uint64_t sub_5984C(const char *a1, mode_t a2)
{
  uint64_t result = mkdir(a1, a2);
  if (result)
  {
    if (*__error() == 17) {
      return 0;
    }
    if (*__error() == 2)
    {
      v7[0] = 0;
      if (a1)
      {
        uint64_t v5 = a1;
        while (*v5 == 47)
        {
          int v6 = strchr((char *)v5 + 1, 47);
          uint64_t v5 = v6;
          if (!v6) {
            uint64_t v5 = &a1[strlen(a1)];
          }
          __strncpy_chk();
          v7[v5 - a1] = 0;
          if (mkdir(v7, a2) && *__error() != 17) {
            return 0xFFFFFFFFLL;
          }
          uint64_t result = 0;
          if (!v6 || !v5) {
            return result;
          }
        }
      }
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

char *sub_5997C(char *__str, int a2, unsigned __int8 *a3, int a4)
{
  uint64_t v5 = __str;
  if (a4 == 6) {
    return (char *)snprintf(__str, a2, "%02x:%02x:%02x:%02x:%02x:%02x", *a3);
  }
  if (a4 == 8) {
    return (char *)snprintf(__str, a2, "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x", *a3, a3[1]);
  }
  if (a4 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a4;
    do
    {
      int v8 = a2;
      if (v6) {
        __uint32_t v9 = ":%02x";
      }
      else {
        __uint32_t v9 = "%02x";
      }
      if (v6) {
        uint64_t v10 = 3;
      }
      else {
        uint64_t v10 = 2;
      }
      if (v6) {
        int v11 = -3;
      }
      else {
        int v11 = -2;
      }
      __str = (char *)snprintf(v5, a2, v9, a3[v6]);
      v5 += v10;
      a2 = v8 + v11;
      ++v6;
    }
    while (v7 != v6);
  }
  return __str;
}

uint64_t sub_59AC0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  *(_OWORD *)(a3 + 14) = 0u;
  *(_OWORD *)(a3 + 10) = 0u;
  *(_OWORD *)(a3 + 6) = 0u;
  *(_OWORD *)(a3 + 2) = 0u;
  if ((unint64_t)a1 < a2)
  {
    unint64_t v3 = 0;
    unsigned int v6 = *a3;
    uint64_t v4 = a3 + 2;
    unsigned int v5 = v6;
    while (1)
    {
      if ((v5 >> v3))
      {
        uint64_t v7 = *a1;
        if ((unint64_t)&a1[v7] > a2) {
          return 22;
        }
        *(void *)&v4[2 * v3] = a1;
        if (v7) {
          uint64_t v8 = ((v7 - 1) & 0xFFFFFFFC) + 4;
        }
        else {
          uint64_t v8 = 4;
        }
        a1 += v8;
      }
      uint64_t v9 = 0;
      if (v3 <= 6)
      {
        ++v3;
        if ((unint64_t)a1 < a2) {
          continue;
        }
      }
      return v9;
    }
  }
  return 0;
}

uint64_t arp_open_routing_socket()
{
  uint64_t v0 = socket(17, 3, 17);
  if ((v0 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v1 = v0;
  int v3 = 1;
  if (ioctl(v0, 0x8004667EuLL, &v3) < 0)
  {
    close(v1);
    return 0xFFFFFFFFLL;
  }
  return v1;
}

uint64_t arp_get_next_seq()
{
  return ++dword_702B8;
}

uint64_t arp_get(int a1, uint64_t a2, int a3, int a4)
{
  pid_t v8 = getpid();
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 76) = 0u;
  *(_DWORD *)(a2 + 8) = 1024;
  if (a4)
  {
    *(_WORD *)(a2 + 4) = a4;
    *(_DWORD *)(a2 + 8) = 16778240;
  }
  *(_DWORD *)(a2 + 12) = 1;
  *(_OWORD *)(a2 + 92) = xmmword_5D658;
  *(_DWORD *)(a2 + 96) = a3;
  *(_DWORD *)a2 = 285540460;
  int v9 = dword_702B8 + 1;
  dword_702B8 = v9;
  *(_DWORD *)(a2 + 20) = v9;
  if (write(a1, (const void *)a2, 0x6CuLL) != 108) {
    return 3;
  }
  *__error() = 0;
  if (read(a1, (void *)a2, 0x25CuLL) < 1) {
    return 4;
  }
  while (*(unsigned char *)(a2 + 3) != 4 || *(_DWORD *)(a2 + 20) != v9 || *(_DWORD *)(a2 + 16) != v8)
  {
    if (read(a1, (void *)a2, 0x25CuLL) < 1) {
      return 4;
    }
  }
  if ((~*(_DWORD *)(a2 + 12) & 3) != 0) {
    return 5;
  }
  if ((*(_DWORD *)(a2 + 8) & 0x402) != 0x400) {
    return 5;
  }
  if (*(_DWORD *)(a2 + 96) != a3) {
    return 5;
  }
  uint64_t v11 = a2 + 92 + *(unsigned __int8 *)(a2 + 92);
  if (*(unsigned char *)(v11 + 1) != 18) {
    return 5;
  }
  uint64_t result = 0;
  unsigned int v12 = *(unsigned __int8 *)(v11 + 4);
  BOOL v13 = v12 > 0xF || ((1 << v12) & 0x83C0) == 0;
  if (v13 && v12 != 144) {
    return 5;
  }
  return result;
}

unint64_t arp_delete(int a1, int a2, int a3)
{
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)__nbyte = 0u;
  long long v6 = 0u;
  unint64_t result = arp_get(a1, (uint64_t)__nbyte, a2, a3);
  if (!result)
  {
    DWORD1(v6) = ++dword_702B8;
    BYTE3(__nbyte[0]) = 2;
    return (unint64_t)write(a1, __nbyte, LOWORD(__nbyte[0])) >> 63;
  }
  return result;
}

uint64_t arp_flush(int a1, int a2, int a3)
{
  size_t size = 0;
  *(_OWORD *)long long v12 = xmmword_5D550;
  uint64_t v13 = 0x40000000002;
  if (sysctl(v12, 6u, 0, &size, 0, 0) < 0) {
    return 1;
  }
  long long v6 = (unsigned __int16 *)malloc_type_malloc(size, 0xF287B7CuLL);
  if (!v6) {
    return 1;
  }
  long long v7 = v6;
  if (sysctl(v12, 6u, v6, &size, 0, 0) < 0)
  {
    free(v7);
    return 1;
  }
  if ((uint64_t)size >= 1)
  {
    unint64_t v8 = (unint64_t)v7 + size;
    long long v9 = v7;
    do
    {
      if ((a2 || *((_DWORD *)v9 + 12))
        && (!a3 || v9[48] != 65193 || v9[2] == a3)
        && *((unsigned char *)v9 + *((unsigned __int8 *)v9 + 92) + 93) == 18)
      {
        *((_DWORD *)v9 + 5) = ++dword_702B8;
        *((unsigned char *)v9 + 3) = 2;
        write(a1, v9, *v9);
      }
      long long v9 = (unsigned __int16 *)((char *)v9 + *v9);
    }
    while ((unint64_t)v9 < v8);
  }
  free(v7);
  return 0;
}

uint64_t sub_59FF4(int a1, int a2, void *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6 = a5;
  v11[0] = a4;
  v11[1] = a5;
  v10.msg_name = a3;
  *(&v10.msg_namelen + 1) = 0;
  v10.msg_namelen = 28;
  v10.msg_iov = (iovec *)v11;
  *(&v10.msg_iovlen + 1) = 0;
  v10.msg_iovlen = 1;
  v10.msg_control = &v12;
  if (a6 >= 0) {
    socklen_t v7 = 48;
  }
  else {
    socklen_t v7 = 32;
  }
  v10.msg_controllen = v7;
  v10.msg_flags = 0;
  long long v15 = 0u;
  long long v14 = 0u;
  int v13 = 46;
  uint64_t v12 = 0x2900000020;
  int v16 = 0;
  LODWORD(v15) = a2;
  if ((a6 & 0x80000000) == 0)
  {
    *(void *)((char *)&v15 + 4) = 0x2900000010;
    HIDWORD(v15) = 47;
    int v16 = a6;
  }
  ssize_t v8 = sendmsg(a1, &v10, 0);
  uint64_t result = 0;
  if (v8 != v6) {
    return *__error();
  }
  return result;
}

void sub_5A0E8()
{
  if (qword_702C0) {
    SCPreferencesSynchronize((SCPreferencesRef)qword_702C0);
  }
  uint64_t v0 = (const __SCPreferences *)qword_702C8;
  if (qword_702C8)
  {
    SCPreferencesSynchronize(v0);
  }
}

const __SCPreferences *sub_5A130(NSObject *a1, uint64_t (*a2)(void))
{
  uint64_t result = SCPreferencesCreate(0, @"IPConfigurationControlPrefs", @"com.apple.IPConfiguration.control.plist");
  qword_702C0 = (uint64_t)result;
  if (a1)
  {
    if (a2)
    {
      off_702D0 = a2;
      SCPreferencesSetCallback(result, (SCPreferencesCallBack)sub_5A1D0, 0);
      SCPreferencesSetDispatchQueue((SCPreferencesRef)qword_702C0, a1);
      _scprefs_observer_watch();
      return (const __SCPreferences *)qword_702C0;
    }
  }
  return result;
}

uint64_t sub_5A1D0()
{
  if (off_702D0) {
    return off_702D0(qword_702C0);
  }
  return result;
}

const void *sub_5A1EC(const void *cf2)
{
  if (cf2)
  {
    uint64_t v1 = cf2;
    uint64_t v2 = 0;
    while (!CFEqual(*(CFTypeRef *)&dword_6A740[v2 + 2], v1))
    {
      v2 += 4;
      if ((v2 * 4) == 48) {
        return 0;
      }
    }
    return (const void *)dword_6A740[v2];
  }
  return cf2;
}

uint64_t sub_5A254(int a1)
{
  uint64_t v1 = 0;
  while (dword_6A740[v1] != a1)
  {
    v1 += 4;
    if ((v1 * 4) == 48) {
      return 0;
    }
  }
  return *(void *)&dword_6A740[v1 + 2];
}

uint64_t sub_5A28C(uint64_t a1)
{
  CFBooleanRef v2 = (const __CFBoolean *)sub_5A2DC(@"Verbose");
  if (!v2) {
    return a1;
  }

  return CFBooleanGetValue(v2);
}

CFPropertyListRef sub_5A2DC(CFStringRef key)
{
  CFBooleanRef v2 = (const __SCPreferences *)qword_702C8;
  if (!qword_702C8)
  {
    CFBooleanRef v2 = SCPreferencesCreate(0, @"IPConfigurationControlPrefs", @"/Library/Managed Preferences/mobile/com.apple.IPConfiguration.control.plist");
    qword_702C8 = (uint64_t)v2;
  }
  CFPropertyListRef Value = SCPreferencesGetValue(v2, key);
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID)
  {
    unsigned int v5 = (const __SCPreferences *)qword_702C0;
    if (!qword_702C0)
    {
      unsigned int v5 = SCPreferencesCreate(0, @"IPConfigurationControlPrefs", @"com.apple.IPConfiguration.control.plist");
      qword_702C0 = (uint64_t)v5;
    }
    CFPropertyListRef v6 = SCPreferencesGetValue(v5, key);
    CFTypeID v7 = CFBooleanGetTypeID();
    if (v6)
    {
      if (CFGetTypeID(v6) == v7) {
        return v6;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return Value;
}

const void *sub_5A3A8()
{
  uint64_t v0 = (const __SCPreferences *)qword_702C8;
  if (!qword_702C8)
  {
    uint64_t v0 = SCPreferencesCreate(0, @"IPConfigurationControlPrefs", @"/Library/Managed Preferences/mobile/com.apple.IPConfiguration.control.plist");
    qword_702C8 = (uint64_t)v0;
  }
  CFPropertyListRef Value = SCPreferencesGetValue(v0, @"AWDReportInterfaceTypes");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID)
  {
    int v3 = (const __SCPreferences *)qword_702C0;
    if (!qword_702C0)
    {
      int v3 = SCPreferencesCreate(0, @"IPConfigurationControlPrefs", @"com.apple.IPConfiguration.control.plist");
      qword_702C0 = (uint64_t)v3;
    }
    CFPropertyListRef Value = SCPreferencesGetValue(v3, @"AWDReportInterfaceTypes");
    CFTypeID v4 = CFStringGetTypeID();
    if (Value && CFGetTypeID(Value) != v4) {
      CFPropertyListRef Value = 0;
    }
  }

  return sub_5A1EC(Value);
}

uint64_t sub_5A478(uint64_t a1)
{
  CFBooleanRef v2 = (const __CFBoolean *)sub_5A2DC(@"CellularCLAT46AutoEnable");
  if (!v2) {
    return a1;
  }

  return CFBooleanGetValue(v2);
}

uint64_t sub_5A4C8(uint64_t a1)
{
  CFBooleanRef v2 = (const __CFBoolean *)sub_5A2DC(@"IPv6LinkLocalModifierExpires");
  if (!v2) {
    return a1;
  }

  return CFBooleanGetValue(v2);
}

uint64_t sub_5A518()
{
  int valuePtr = 0;
  uint64_t v0 = (const __SCPreferences *)qword_702C8;
  if (!qword_702C8)
  {
    uint64_t v0 = SCPreferencesCreate(0, @"IPConfigurationControlPrefs", @"/Library/Managed Preferences/mobile/com.apple.IPConfiguration.control.plist");
    qword_702C8 = (uint64_t)v0;
  }
  CFPropertyListRef Value = SCPreferencesGetValue(v0, @"DHCPDUIDType");
  CFTypeID TypeID = CFNumberGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID) {
    goto LABEL_9;
  }
  int v3 = (const __SCPreferences *)qword_702C0;
  if (!qword_702C0)
  {
    int v3 = SCPreferencesCreate(0, @"IPConfigurationControlPrefs", @"com.apple.IPConfiguration.control.plist");
    qword_702C0 = (uint64_t)v3;
  }
  CFPropertyListRef Value = SCPreferencesGetValue(v3, @"DHCPDUIDType");
  CFTypeID v4 = CFNumberGetTypeID();
  if (Value && CFGetTypeID(Value) == v4)
  {
LABEL_9:
    CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr);
    return (unsigned __int16)valuePtr;
  }
  else
  {
    return 0;
  }
}

void sub_5A600(id a1)
{
  if (off_702D0) {
    off_702D0(qword_702C0);
  }
}

const char *sub_5A61C(unsigned int a1)
{
  if (a1 > 4) {
    return "<unknown>";
  }
  else {
    return (&off_6A7B0)[a1];
  }
}

void sub_5A640(CFMutableStringRef theString, unsigned __int16 *a2, uint64_t a3)
{
  int v3 = a3;
  if ((int)a3 >= 2)
  {
    uint64_t v7 = bswap32(*a2) >> 16;
    switch((int)v7)
    {
      case 1:
        int v8 = a3 - 8;
        if (a3 < 8)
        {
          uint64_t v6 = 8;
          goto LABEL_3;
        }
        CFStringAppendFormat(theString, 0, @"DUID LLT HW %d Time %u Addr ", bswap32(a2[1]) >> 16, bswap32(*((_DWORD *)a2 + 1)));
        uint64_t v10 = (uint64_t)(a2 + 4);
        goto LABEL_19;
      case 2:
        int v8 = a3 - 6;
        if (a3 < 6)
        {
          uint64_t v6 = 6;
          goto LABEL_3;
        }
        CFStringAppendFormat(theString, 0, @"DUID EN Num %d Id ", __rev16(a2[2]));
        uint64_t v10 = (uint64_t)(a2 + 3);
        goto LABEL_19;
      case 3:
        int v8 = a3 - 4;
        if (a3 < 4)
        {
          uint64_t v6 = 4;
          goto LABEL_3;
        }
        CFStringAppendFormat(theString, 0, @"DUID LL HW %d Addr ", bswap32(a2[1]) >> 16);
        uint64_t v10 = (uint64_t)(a2 + 2);
LABEL_19:
        long long v9 = theString;
        int v11 = v8;
        int v12 = 58;
LABEL_20:
        sub_540F8(v9, v10, v11, v12);
        return;
      case 4:
        if (a3 < 0x12)
        {
          uint64_t v6 = 18;
          goto LABEL_3;
        }
        memset(out, 0, 37);
        uuid_unparse((const unsigned __int8 *)a2 + 2, out);
        CFStringAppendFormat(theString, 0, @"DUID UUID %s", out);
        break;
      default:
        CFStringAppendFormat(theString, 0, @"DUID (unrecognized type=%d): ", v7);
        long long v9 = theString;
        uint64_t v10 = (uint64_t)a2;
        int v11 = v3;
        int v12 = 32;
        goto LABEL_20;
    }
  }
  else
  {
    uint64_t v6 = 2;
LABEL_3:
    CFStringAppendFormat(theString, 0, @"DUID too short (%d < %d), CFDataRef Data = { ", a3, v6);
    sub_540F8(theString, (uint64_t)a2, v3, 32);
    CFStringAppendCString(theString, " }", 0x600u);
  }
}

BOOL sub_5A924(unsigned __int16 *a1, int a2)
{
  if (a2 < 2) {
    return 0;
  }
  unsigned int v2 = (bswap32(*a1) >> 16) - 1;
  return (unsigned __int16)v2 <= 3u && dword_5D680[(__int16)v2] <= a2;
}

__CFData *sub_5A96C(const void *a1, int a2, unsigned int a3)
{
  size_t v5 = a2;
  CFIndex v6 = a2 + 4;
  CFMutableStringRef Mutable = CFDataCreateMutable(0, v6);
  CFDataSetLength(Mutable, v6);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  *(_WORD *)MutableBytePtr = 768;
  *((_WORD *)MutableBytePtr + 1) = bswap32(a3) >> 16;
  memcpy(MutableBytePtr + 4, a1, v5);
  return Mutable;
}

__CFData *sub_5A9F4(const void *a1, int a2, unsigned int a3)
{
  size_t v5 = a2;
  CFIndex v6 = a2 + 8;
  CFMutableStringRef Mutable = CFDataCreateMutable(0, v6);
  CFDataSetLength(Mutable, v6);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  *(_WORD *)MutableBytePtr = 256;
  *((_WORD *)MutableBytePtr + 1) = bswap32(a3) >> 16;
  memcpy(MutableBytePtr + 8, a1, v5);
  memset(&v11, 0, sizeof(v11));
  v11.tm_year = 100;
  v11.tm_mday = 1;
  int v9 = timegm(&v11);
  *((_DWORD *)MutableBytePtr + 1) = bswap32(time(0) - v9);
  return Mutable;
}

__CFData *sub_5AAC8(const unsigned __int8 *a1)
{
  CFMutableStringRef Mutable = CFDataCreateMutable(0, 18);
  CFDataSetLength(Mutable, 18);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  *(_WORD *)MutableBytePtr = 1024;
  uuid_copy(MutableBytePtr + 2, a1);
  return Mutable;
}

const char *DHCPv6MessageTypeName(unsigned int a1)
{
  if (a1 > 0xD) {
    return "<unknown";
  }
  else {
    return (&off_6A7D8)[(char)a1];
  }
}

unsigned char *DHCPv6PacketSetMessageType(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

unsigned char *DHCPv6PacketSetTransactionID(unsigned char *result, unsigned int a2)
{
  unsigned int v2 = bswap32(a2);
  result[1] = BYTE1(v2);
  result[2] = BYTE2(v2);
  result[3] = HIBYTE(v2);
  return result;
}

uint64_t DHCPv6PacketGetTransactionID(unsigned __int8 *a1)
{
  return bswap32((a1[1] << 8) | (a1[2] << 16) | (a1[3] << 24));
}

void DHCPv6PacketPrintToString(CFMutableStringRef theString, unsigned __int8 *a2, uint64_t a3)
{
  if ((int)a3 > 3)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = DHCPv6MessageTypeName(*a2);
    CFStringAppendFormat(theString, 0, @"DHCPv6 %s (%d) Transaction ID 0x%06x Length %d\n", v7, v6, bswap32((a2[1] << 8) | (a2[2] << 16) | (a2[3] << 24)), a3);
  }
  else
  {
    CFStringAppendFormat(theString, 0, @"Packet too short %d < %d\n", a3, 4);
  }
}

void DHCPv6PacketFPrint(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  DHCPv6PacketPrintToString(Mutable, a2, a3);
  SCPrint();

  CFRelease(Mutable);
}

uint64_t sub_5ACA4(uint64_t a1)
{
  uint64_t v2 = sub_B8E8();
  uint64_t v3 = v2;
  if ((v2 & 0x80000000) != 0)
  {
    sub_4220();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      tm v11 = __error();
      int v12 = strerror(*v11);
      int v13 = *__error();
      *(_DWORD *)uint64_t v10 = 136315394;
      *(void *)(v10 + 4) = v12;
      *(_WORD *)(v10 + 12) = 1024;
      *(_DWORD *)(v10 + 14) = v13;
      __SC_log_send();
    }
  }
  else
  {
    if ((sub_B9F4(v2) & 0x80000000) != 0)
    {
      sub_4220();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v14 = _os_log_pack_size();
        __chkstk_darwin(v14);
        __error();
        uint64_t v15 = _os_log_pack_fill();
        int v16 = __error();
        long long v17 = strerror(*v16);
        int v18 = *__error();
        *(_DWORD *)uint64_t v15 = 136315394;
        *(void *)(v15 + 4) = v17;
        *(_WORD *)(v15 + 12) = 1024;
        *(_DWORD *)(v15 + 14) = v18;
        __SC_log_send();
      }
      goto LABEL_11;
    }
    if ((sub_B864(v3) & 0x80000000) != 0)
    {
      if (*__error() != 6)
      {
        sub_4220();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v4 = _os_log_pack_size();
          __chkstk_darwin(v4);
          __error();
          uint64_t v5 = _os_log_pack_fill();
          uint64_t v6 = __error();
          uint64_t v7 = strerror(*v6);
          int v8 = *__error();
          *(_DWORD *)uint64_t v5 = 136315650;
          *(void *)(v5 + 4) = a1;
          *(_WORD *)(v5 + 12) = 2080;
          *(void *)(v5 + 14) = v7;
          *(_WORD *)(v5 + 22) = 1024;
          *(_DWORD *)(v5 + 24) = v8;
          __SC_log_send();
        }
      }
LABEL_11:
      sub_BA68(v3);
      return 0xFFFFFFFFLL;
    }
  }
  return v3;
}

uint64_t sub_5AFE8(uint64_t result)
{
  qword_702E0 = result;
  return result;
}

uint64_t sub_5AFF4(int a1)
{
  uint64_t result = 1;
  switch(a1)
  {
    case 1:
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 7;
      break;
    case 4:
    case 7:
    case 9:
    case 10:
    case 11:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return result;
    case 5:
      uint64_t result = 8;
      break;
    case 6:
    case 8:
      uint64_t result = 3;
      break;
    case 12:
    case 22:
    case 23:
      uint64_t result = 5;
      break;
    case 13:
      uint64_t result = 9;
      break;
    case 14:
      uint64_t result = 0;
      break;
    case 21:
    case 24:
      uint64_t result = 6;
      break;
    case 25:
      uint64_t result = 11;
      break;
    case 26:
      uint64_t result = 12;
      break;
    case 41:
    case 42:
      goto LABEL_7;
    default:
      if (a1 == 103) {
LABEL_7:
      }
        uint64_t result = 10;
      break;
  }
  return result;
}

const char *sub_5B130(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = "CLIENTID";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "SERVERID";
      break;
    case 2:
      uint64_t result = "IA_NA";
      break;
    case 3:
      uint64_t result = "IA_TA";
      break;
    case 4:
      uint64_t result = "IAADDR";
      break;
    case 5:
      uint64_t result = "ORO";
      break;
    case 6:
      uint64_t result = "PREFERENCE";
      break;
    case 7:
      uint64_t result = "ELAPSED_TIME";
      break;
    case 8:
      uint64_t result = "RELAY_MSG";
      break;
    case 9:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      goto LABEL_5;
    case 10:
      uint64_t result = "AUTH";
      break;
    case 11:
      uint64_t result = "UNICAST";
      break;
    case 12:
      uint64_t result = "STATUS_CODE";
      break;
    case 13:
      uint64_t result = "RAPID_COMMIT";
      break;
    case 14:
      uint64_t result = "USER_CLASS";
      break;
    case 15:
      uint64_t result = "VENDOR_CLASS";
      break;
    case 16:
      uint64_t result = "VENDOR_OPTS";
      break;
    case 17:
      uint64_t result = "INTERFACE_ID";
      break;
    case 18:
      uint64_t result = "RECONF_MSG";
      break;
    case 19:
      uint64_t result = "RECONF_ACCEPT";
      break;
    case 20:
      uint64_t result = "SIP_SERVER_D";
      break;
    case 21:
      uint64_t result = "SIP_SERVER_A";
      break;
    case 22:
      uint64_t result = "DNS_SERVERS";
      break;
    case 23:
      uint64_t result = "DOMAIN_LIST";
      break;
    case 24:
      uint64_t result = "IA_PD";
      break;
    case 25:
      uint64_t result = "IAPREFIX";
      break;
    case 40:
      uint64_t result = "POSIX_TIMEZONE";
      break;
    case 41:
      uint64_t result = "TZDB_TIMEZONE";
      break;
    default:
      if ("CLIENTID" == 103) {
        uint64_t result = "CAPTIVE_PORTAL_URL";
      }
      else {
LABEL_5:
      }
        uint64_t result = "<unknown>";
      break;
  }
  return result;
}

uint64_t sub_5B364(uint64_t result, uint64_t a2, int a3)
{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

uint64_t sub_5B370(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

BOOL sub_5B378(uint64_t a1, unsigned int a2, size_t __len, void *__src, char *a5)
{
  int v6 = *(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 12);
  int v7 = __len + 4;
  *a5 = 0;
  if (v6 < (int)__len + 4)
  {
    tm v11 = sub_5B130(a2);
    snprintf(a5, 0x100uLL, "No room for option %s (%d), %d < %d", v11, a2, v6, v7);
  }
  else
  {
    uint64_t v9 = (_WORD *)(*(void *)a1 + *(int *)(a1 + 12));
    *uint64_t v9 = __rev16(a2);
    v9[1] = __rev16(__len);
    if (__len) {
      memmove(v9 + 2, __src, __len);
    }
    *(_DWORD *)(a1 + 12) += v7;
  }
  return v6 >= v7;
}

BOOL sub_5B440(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  int v6 = (char *)&v11 - v5;
  if (v3 >= 1)
  {
    uint64_t v7 = v3;
    int v8 = v6;
    do
    {
      unsigned int v9 = *v2++;
      *v8++ = bswap32(v9) >> 16;
      --v7;
    }
    while (v7);
  }
  return sub_5B378(v1, 6u, 2 * (v3 & 0x7FFFu), v6, v4);
}

_OWORD *sub_5B4E8(unsigned __int16 *a1, unsigned int a2, char *a3)
{
  long long v10 = 0uLL;
  sub_9140(&v10);
  if (a2 >= 4)
  {
    uint64_t v7 = a1;
    while (1)
    {
      unsigned int v8 = (bswap32(v7[1]) >> 16) + 4;
      unsigned int v6 = a2 - v8;
      if ((int)a2 < (int)v8) {
        break;
      }
      sub_9178((uint64_t)&v10, (uint64_t)v7);
      uint64_t v7 = (unsigned __int16 *)((char *)v7 + v8);
      a2 -= v8;
      if (v6 < 4) {
        goto LABEL_6;
      }
    }
    if (a3)
    {
      sub_5B130(bswap32(*v7) >> 16);
      snprintf(a3, 0x100uLL, "truncated option %s (%d) at offset %d, left %d < need %d");
    }
  }
  else
  {
    unsigned int v6 = a2;
LABEL_6:
    if (!v6)
    {
      uint64_t result = malloc_type_malloc(0x10uLL, 0x1080040FC6463CFuLL);
      *uint64_t result = v10;
      return result;
    }
    if (a3) {
      snprintf(a3, 0x100uLL, "truncated buffer at offset %d\n");
    }
  }
  sub_9148((uint64_t)&v10);
  return 0;
}

_OWORD *sub_5B608(uint64_t a1, int a2, char *a3)
{
  BOOL v3 = __OFSUB__(a2, 4);
  signed int v4 = a2 - 4;
  if (v4 < 0 != v3) {
    return 0;
  }
  else {
    return sub_5B4E8((unsigned __int16 *)(a1 + 4), v4, a3);
  }
}

void sub_5B620(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    *a1 = 0;
    sub_9148((uint64_t)v1);
    free(v1);
  }
}

void sub_5B670(__CFString *a1, uint64_t a2)
{
}

void sub_5B678(__CFString *a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_5B08(a2);
  int v7 = v6;
  CFStringAppendFormat(a1, 0, @"Options[%d] = {\n", v6);
  if (v7 >= 1)
  {
    for (int i = 0; i != v7; ++i)
    {
      unsigned int v9 = (unsigned __int16 *)sub_5B28(a2, i);
      unsigned int v10 = *v9;
      unsigned int v11 = v9[1];
      if (a3 >= 1)
      {
        int v12 = a3;
        do
        {
          CFStringAppendFormat(a1, 0, @"  ");
          --v12;
        }
        while (v12);
      }
      CFStringAppendFormat(a1, 0, @"  ");
      sub_5B8F4(a1, bswap32(v10) >> 16, bswap32(v11) >> 16, v9 + 2, a3);
    }
  }
  if (a3 >= 1)
  {
    do
    {
      CFStringAppendFormat(a1, 0, @"  ");
      --a3;
    }
    while (a3);
  }

  CFStringAppendFormat(a1, 0, @"}\n");
}

void DHCPv6OptionListFPrint(uint64_t a1, uint64_t a2)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  sub_5B678(Mutable, a2, 0);
  SCPrint();

  CFRelease(Mutable);
}

unsigned __int16 *sub_5B848(uint64_t a1, int a2, unsigned int *a3, int *a4)
{
  int v8 = sub_5B08(a1);
  int v9 = v8;
  if (a4) {
    int v10 = *a4;
  }
  else {
    int v10 = 0;
  }
  if (v10 >= v8) {
    return 0;
  }
  while (1)
  {
    unsigned int v11 = (unsigned __int16 *)sub_5B28(a1, v10);
    if (a2 == bswap32(*v11) >> 16) {
      break;
    }
    if (v9 == ++v10) {
      return 0;
    }
  }
  if (a4) {
    *a4 = v10 + 1;
  }
  *a3 = bswap32(v11[1]) >> 16;
  return v11 + 2;
}

void sub_5B8F4(__CFString *a1, unsigned int a2, uint64_t a3, unsigned __int16 *a4, int a5)
{
  int v10 = sub_5B130(a2);
  CFStringAppendFormat(a1, 0, @"%s (%d) Length %d: ", v10, a2, a3);
  switch(sub_5AFF4(a2))
  {
    case 0u:
      return;
    case 2u:
      sub_5A640(a1, a4, a3);
      goto LABEL_55;
    case 3u:
      if (a3 >= 2)
      {
        uint64_t v11 = 0;
        do
        {
          unsigned int v12 = bswap32(a4[v11]);
          uint64_t v13 = HIWORD(v12);
          if ((v11 * 2)) {
            uint64_t v14 = ", ";
          }
          else {
            uint64_t v14 = "";
          }
          if (a2 == 6)
          {
            long long v35 = sub_5B130(HIWORD(v12));
            CFStringAppendFormat(a1, 0, @"%s%s (%d)", v14, v35, v13);
          }
          else
          {
            CFStringAppendFormat(a1, 0, @"%s%d", v14, HIWORD(v12), v37);
          }
          ++v11;
        }
        while ((a3 & 0xFFFE) != (v11 * 2));
      }
      goto LABEL_55;
    case 4u:
      if (a3 >= 4)
      {
        uint64_t v15 = 0;
        int v16 = a3 & 0xFFFC;
        do
        {
          if ((v15 * 2)) {
            long long v17 = ", ";
          }
          else {
            long long v17 = "";
          }
          CFStringAppendFormat(a1, 0, @"%s%d", v17, bswap32(*(_DWORD *)&a4[v15]));
          v15 += 2;
        }
        while (v16 != (v15 * 2));
      }
      goto LABEL_55;
    case 5u:
      if (a3 >= 0x10)
      {
        uint64_t v18 = 0;
        int v19 = a3 & 0xFFF0;
        do
        {
          if ((v18 * 2)) {
            long long v20 = ", ";
          }
          else {
            long long v20 = "";
          }
          long long v21 = inet_ntop(30, &a4[v18], v39, 0x2Eu);
          CFStringAppendFormat(a1, 0, @"%s%s", v20, v21);
          v18 += 8;
        }
        while (v19 != (v18 * 2));
      }
      goto LABEL_61;
    case 6u:
      *(_DWORD *)uint64_t v39 = 0;
      long long v22 = sub_56FA4((uint64_t)a4, a3, (int *)v39);
      if (v22)
      {
        long long v23 = v22;
        if (*(int *)v39 >= 1)
        {
          uint64_t v24 = 0;
          do
          {
            if (v24) {
              long long v25 = ", ";
            }
            else {
              long long v25 = "";
            }
            CFStringAppendFormat(a1, 0, @"%s%s", v25, *(void *)&v23[8 * v24++]);
          }
          while (v24 < *(int *)v39);
        }
        free(v23);
      }
      else
      {
        CFStringAppendFormat(a1, 0, @" Invalid");
LABEL_59:
        if (a3)
        {
          CFStringAppendFormat(a1, 0, @" Data ");
          sub_59844(a1, (uint64_t)a4, a3);
        }
      }
LABEL_61:
      CFStringAppendFormat(a1, 0, @"\n", v33, v34, v37);
      return;
    case 7u:
      if (a3 <= 0xB)
      {
        CFStringAppendFormat(a1, 0, @" IA_NA option is too short %d < %d\n", a3, 12, v37);
        return;
      }
      unsigned int v26 = a3 - 12;
      CFStringAppendFormat(a1, 0, @" IA_NA IAID=%d T1=%d T2=%d", bswap32(*(_DWORD *)a4), bswap32(*((_DWORD *)a4 + 1)), bswap32(*((_DWORD *)a4 + 2)));
      goto LABEL_52;
    case 8u:
      sub_5BF18(a1, (uint64_t)a4, a3, a5);
      return;
    case 9u:
      if (a3 > 1)
      {
        unsigned int v27 = bswap32(*a4);
        uint64_t v28 = HIWORD(v27);
        uint64_t v29 = (a3 - 2);
        long long v30 = sub_5C0F8(HIWORD(v27));
        if (v29) {
          CFStringAppendFormat(a1, 0, @" STATUS_CODE %s (%d) '%.*s'\n", v30, v28, v29, a4 + 1);
        }
        else {
          CFStringAppendFormat(a1, 0, @" STATUS_CODE %s (%d)\n", v30, v28, v37);
        }
      }
      else
      {
        CFStringAppendFormat(a1, 0, @" STATUS_CODE option is too short %d < %d\n", a3, 2, v37);
      }
      return;
    case 0xAu:
      *(void *)uint64_t v39 = CFStringCreateWithBytes(kCFAllocatorDefault, (const UInt8 *)a4, a3, 0x8000100u, 0);
      CFStringAppendFormat(a1, 0, @" %@\n", *(void *)v39);
      sub_6DB0((const void **)v39);
      return;
    case 0xBu:
      if (a3 > 0xB)
      {
        unsigned int v26 = a3 - 12;
        CFStringAppendFormat(a1, 0, @" IA_PD IAID=%d T1=%d T2=%d", bswap32(*(_DWORD *)a4), bswap32(*((_DWORD *)a4 + 1)), bswap32(*((_DWORD *)a4 + 2)));
LABEL_52:
        if (v26)
        {
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          *(_OWORD *)uint64_t v39 = 0u;
          long long v40 = 0u;
          long long v31 = sub_5B4E8(a4 + 6, v26, v39);
          if (v31)
          {
            long long v32 = v31;
            CFStringAppendFormat(a1, 0, @" ");
            sub_5B678(a1, v32, (a5 + 1));
            sub_9148((uint64_t)v32);
            free(v32);
          }
          else
          {
            CFStringAppendFormat(a1, 0, @" options invalid:\n\t%s\n", v39, v36, v38);
          }
        }
        else
        {
LABEL_55:
          CFStringAppendFormat(a1, 0, @"\n");
        }
      }
      else
      {
        CFStringAppendFormat(a1, 0, @" IA_PD option is too short %d < %d\n", a3, 12, v37);
      }
      return;
    case 0xCu:
      sub_5C004(a1, (uint64_t)a4, a3, a5);
      return;
    default:
      goto LABEL_59;
  }
}

void sub_5BF18(CFMutableStringRef theString, uint64_t a2, uint64_t a3, int a4)
{
  if ((int)a3 > 23)
  {
    unsigned int v7 = a3 - 24;
    int v8 = inet_ntop(30, (const void *)a2, v11, 0x2Eu);
    CFStringAppendFormat(theString, 0, @" IAADDR %s Preferred %d Valid=%d", v8, bswap32(*(_DWORD *)(a2 + 16)), bswap32(*(_DWORD *)(a2 + 20)));
    if (v7) {
      sub_5C2D8(theString, (unsigned __int16 *)(a2 + 24), v7, a4);
    }
    else {
      CFStringAppendFormat(theString, 0, @"\n", v9, v10);
    }
  }
  else
  {
    CFStringAppendFormat(theString, 0, @" IAADDR option is too short %d < %d\n", a3, 24);
  }
}

void sub_5C004(CFMutableStringRef theString, uint64_t a2, uint64_t a3, int a4)
{
  if ((int)a3 > 24)
  {
    unsigned int v7 = a3 - 25;
    int v8 = inet_ntop(30, (const void *)(a2 + 9), v11, 0x2Eu);
    CFStringAppendFormat(theString, 0, @" IAPREFIX %s/%d Preferred %d Valid=%d", v8, *(unsigned __int8 *)(a2 + 8), bswap32(*(_DWORD *)a2), bswap32(*(_DWORD *)(a2 + 4)));
    if (v7) {
      sub_5C2D8(theString, (unsigned __int16 *)(a2 + 25), v7, a4);
    }
    else {
      CFStringAppendFormat(theString, 0, @"\n", v9, v10);
    }
  }
  else
  {
    CFStringAppendFormat(theString, 0, @" IAPREFIX option is too short %d < %d\n", a3, 25);
  }
}

const char *sub_5C0F8(unsigned int a1)
{
  if (a1 > 0x16) {
    return "<unknown>";
  }
  else {
    return (&off_6A848)[(__int16)a1];
  }
}

uint64_t sub_5C120(uint64_t a1, _WORD *a2, unsigned __int16 **a3, int *a4)
{
  int v16 = 0;
  unsigned int v7 = sub_5B848(a1, 13, (unsigned int *)&v16, 0);
  if (!v7)
  {
    int v9 = 0;
    LOWORD(v11) = 0;
    goto LABEL_5;
  }
  int v8 = v16;
  int v9 = v16 - 2;
  if (v16 >= 2)
  {
    unsigned int v10 = *v7++;
    unsigned int v11 = bswap32(v10) >> 16;
LABEL_5:
    uint64_t v12 = 1;
    goto LABEL_9;
  }
  _SC_LOG_DEFAULT();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v13 = _os_log_pack_size();
    __chkstk_darwin(v13);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v14 = 67109376;
    *(_DWORD *)(v14 + 4) = v8;
    *(_WORD *)(v14 + 8) = 1024;
    *(_DWORD *)(v14 + 10) = 2;
    __SC_log_send();
    LOWORD(v11) = 1;
    uint64_t v12 = 0;
    int v9 = 0;
    unsigned int v7 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    int v9 = 0;
    unsigned int v7 = 0;
    LOWORD(v11) = 1;
  }
LABEL_9:
  *a2 = v11;
  if (a4) {
    *a4 = v9;
  }
  if (a3) {
    *a3 = v7;
  }
  return v12;
}

void sub_5C2D8(__CFString *a1, unsigned __int16 *a2, unsigned int a3, int a4)
{
  memset(v8, 0, sizeof(v8));
  uint64_t v6 = sub_5B4E8(a2, a3, (char *)v8);
  if (v6)
  {
    unsigned int v7 = v6;
    CFStringAppendFormat(a1, 0, @" ");
    sub_5B678(a1, v7, (a4 + 1));
    sub_9148((uint64_t)v7);
    free(v7);
  }
  else
  {
    CFStringAppendFormat(a1, 0, @" options invalid:\n\t%s\n", v8);
  }
}

void sub_5C3D4()
{
}

uint64_t Apple80211BindToInterface()
{
  return _Apple80211BindToInterface();
}

uint64_t Apple80211Close()
{
  return _Apple80211Close();
}

uint64_t Apple80211CopyValue()
{
  return _Apple80211CopyValue();
}

uint64_t Apple80211Get()
{
  return _Apple80211Get();
}

uint64_t Apple80211Open()
{
  return _Apple80211Open();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return _CFArrayContainsValue(theArray, range, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreate(allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreateMutable(allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return _CFArrayCreateMutableCopy(allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return _CFArrayGetFirstIndexOfValue(theArray, range, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return _CFArrayGetTypeID();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return _CFBundleGetInfoDictionary(bundle);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return _CFDataCreate(allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return _CFDataCreateMutable(allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return _CFDataCreateWithBytesNoCopy(allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return _CFDataGetBytePtr(theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return _CFDataGetLength(theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return _CFDataGetMutableBytePtr(theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return _CFDataGetTypeID();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return _CFDateCreate(allocator, at);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return _CFDateFormatterCreate(allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at)
{
  return _CFDateFormatterCreateStringWithAbsoluteTime(allocator, formatter, at);
}

Boolean CFDateFormatterGetAbsoluteTimeFromString(CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep, CFAbsoluteTime *atp)
{
  return _CFDateFormatterGetAbsoluteTimeFromString(formatter, string, rangep, atp);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  return _CFDateGetAbsoluteTime(theDate);
}

CFTimeInterval CFDateGetTimeIntervalSinceDate(CFDateRef theDate, CFDateRef otherDate)
{
  return _CFDateGetTimeIntervalSinceDate(theDate, otherDate);
}

CFTypeID CFDateGetTypeID(void)
{
  return _CFDateGetTypeID();
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryContainsKey(theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreate(allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateMutableCopy(allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return _CFDictionaryGetCount(theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return _CFGetAllocator(cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return _CFLocaleCreate(allocator, localeIdentifier);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return _CFNumberCreate(allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return _CFPropertyListCreateData(allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return _CFPropertyListCreateWithData(allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

void CFRunLoopSourceSignal(CFRunLoopSourceRef source)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return _CFStringCompare(theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return _CFStringCreateArrayBySeparatingStrings(alloc, theString, separatorString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return _CFStringCreateMutable(alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return _CFStringCreateMutableCopy(alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return _CFStringCreateWithBytes(alloc, bytes, numBytes, encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return _CFStringCreateWithFormat(alloc, formatOptions, format);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return _CFStringFindAndReplace(theString, stringToFind, replacementString, rangeToSearch, compareOptions);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return _CFStringFindWithOptions(theString, stringToFind, rangeToSearch, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return _CFStringGetBytes(theString, range, encoding, lossByte, isExternalRepresentation, buffer, maxBufLen, usedBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return _CFStringGetCString(theString, buffer, bufferSize, encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return _CFStringHasPrefix(theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return _CFStringHasSuffix(theString, suffix);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return _CFUUIDCreate(alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return _CFUUIDCreateString(alloc, uuid);
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return _IOAllowPowerChange(kernelPort, notificationID);
}

CFMutableDictionaryRef IOBSDNameMatching(mach_port_t mainPort, uint32_t options, const char *bsdName)
{
  return _IOBSDNameMatching(mainPort, options, bsdName);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

IOReturn IOPMCancelScheduledPowerEvent(CFDateRef time_to_wake, CFStringRef my_id, CFStringRef type)
{
  return _IOPMCancelScheduledPowerEvent(time_to_wake, my_id, type);
}

CFArrayRef IOPMCopyScheduledPowerEvents(void)
{
  return _IOPMCopyScheduledPowerEvents();
}

uint64_t IOPMRequestSysWake()
{
  return _IOPMRequestSysWake();
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return _IORegisterForSystemPower(refcon, thePortRef, callback, notifier);
}

kern_return_t IORegistryEntryCreateCFProperties(io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntryCreateCFProperties(entry, properties, allocator, options);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntryCreateCFProperty(entry, key, allocator, options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return _IORegistryEntryFromPath(mainPort, path);
}

kern_return_t IORegistryEntryGetParentEntry(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *parent)
{
  return _IORegistryEntryGetParentEntry(entry, plane, parent);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t PvDInfoRequestCancel()
{
  return _PvDInfoRequestCancel();
}

uint64_t PvDInfoRequestCopyAdditionalInformation()
{
  return _PvDInfoRequestCopyAdditionalInformation();
}

uint64_t PvDInfoRequestCreate()
{
  return _PvDInfoRequestCreate();
}

uint64_t PvDInfoRequestGetCompletionStatus()
{
  return _PvDInfoRequestGetCompletionStatus();
}

uint64_t PvDInfoRequestResume()
{
  return _PvDInfoRequestResume();
}

uint64_t PvDInfoRequestSetCompletionHandler()
{
  return _PvDInfoRequestSetCompletionHandler();
}

CFStringRef SCDynamicStoreCopyComputerName(SCDynamicStoreRef store, CFStringEncoding *nameEncoding)
{
  return _SCDynamicStoreCopyComputerName(store, nameEncoding);
}

CFStringRef SCDynamicStoreCopyLocalHostName(SCDynamicStoreRef store)
{
  return _SCDynamicStoreCopyLocalHostName(store);
}

CFDictionaryRef SCDynamicStoreCopyMultiple(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return _SCDynamicStoreCopyMultiple(store, keys, patterns);
}

CFPropertyListRef SCDynamicStoreCopyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return _SCDynamicStoreCopyValue(store, key);
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return _SCDynamicStoreCreate(allocator, name, callout, context);
}

CFStringRef SCDynamicStoreKeyCreate(CFAllocatorRef allocator, CFStringRef fmt, ...)
{
  return _SCDynamicStoreKeyCreate(allocator, fmt);
}

CFStringRef SCDynamicStoreKeyCreateComputerName(CFAllocatorRef allocator)
{
  return _SCDynamicStoreKeyCreateComputerName(allocator);
}

CFStringRef SCDynamicStoreKeyCreateHostNames(CFAllocatorRef allocator)
{
  return _SCDynamicStoreKeyCreateHostNames(allocator);
}

CFStringRef SCDynamicStoreKeyCreateNetworkGlobalEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef entity)
{
  return _SCDynamicStoreKeyCreateNetworkGlobalEntity(allocator, domain, entity);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterface(CFAllocatorRef allocator, CFStringRef domain)
{
  return _SCDynamicStoreKeyCreateNetworkInterface(allocator, domain);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterfaceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef ifname, CFStringRef entity)
{
  return _SCDynamicStoreKeyCreateNetworkInterfaceEntity(allocator, domain, ifname, entity);
}

CFStringRef SCDynamicStoreKeyCreateNetworkServiceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef serviceID, CFStringRef entity)
{
  return _SCDynamicStoreKeyCreateNetworkServiceEntity(allocator, domain, serviceID, entity);
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  return _SCDynamicStoreSetDispatchQueue(store, queue);
}

Boolean SCDynamicStoreSetMultiple(SCDynamicStoreRef store, CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFArrayRef keysToNotify)
{
  return _SCDynamicStoreSetMultiple(store, keysToSet, keysToRemove, keysToNotify);
}

Boolean SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return _SCDynamicStoreSetNotificationKeys(store, keys, patterns);
}

Boolean SCDynamicStoreSetValue(SCDynamicStoreRef store, CFStringRef key, CFPropertyListRef value)
{
  return _SCDynamicStoreSetValue(store, key, value);
}

int SCError(void)
{
  return _SCError();
}

const char *__cdecl SCErrorString(int status)
{
  return _SCErrorString(status);
}

uint64_t SCNetworkReachabilityCopyResolvedAddress()
{
  return _SCNetworkReachabilityCopyResolvedAddress();
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithName(CFAllocatorRef allocator, const char *nodename)
{
  return _SCNetworkReachabilityCreateWithName(allocator, nodename);
}

Boolean SCNetworkReachabilitySetCallback(SCNetworkReachabilityRef target, SCNetworkReachabilityCallBack callout, SCNetworkReachabilityContext *context)
{
  return _SCNetworkReachabilitySetCallback(target, callout, context);
}

Boolean SCNetworkReachabilitySetDispatchQueue(SCNetworkReachabilityRef target, dispatch_queue_t queue)
{
  return _SCNetworkReachabilitySetDispatchQueue(target, queue);
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return _SCPreferencesCreate(allocator, name, prefsID);
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return _SCPreferencesGetValue(prefs, key);
}

Boolean SCPreferencesSetCallback(SCPreferencesRef prefs, SCPreferencesCallBack callout, SCPreferencesContext *context)
{
  return _SCPreferencesSetCallback(prefs, callout, context);
}

Boolean SCPreferencesSetDispatchQueue(SCPreferencesRef prefs, dispatch_queue_t queue)
{
  return _SCPreferencesSetDispatchQueue(prefs, queue);
}

void SCPreferencesSynchronize(SCPreferencesRef prefs)
{
}

uint64_t SCPrint()
{
  return _SCPrint();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return _SecTaskCopyValueForEntitlement(task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

uint64_t _CFRuntimeCreateInstance()
{
  return __CFRuntimeCreateInstance();
}

uint64_t _CFRuntimeRegisterClass()
{
  return __CFRuntimeRegisterClass();
}

uint64_t _SCNetworkInterfaceCreateWithBSDName()
{
  return __SCNetworkInterfaceCreateWithBSDName();
}

uint64_t _SCNetworkInterfaceIsCarPlay()
{
  return __SCNetworkInterfaceIsCarPlay();
}

uint64_t _SCNetworkInterfaceIsTetheredHotspot()
{
  return __SCNetworkInterfaceIsTetheredHotspot();
}

uint64_t _SC_CFStringIsValidDNSName()
{
  return __SC_CFStringIsValidDNSName();
}

uint64_t _SC_LOG_DEFAULT()
{
  return __SC_LOG_DEFAULT();
}

uint64_t _SC_syslog_os_log_mapping()
{
  return __SC_syslog_os_log_mapping();
}

uint64_t __SC_log_enabled()
{
  return ___SC_log_enabled();
}

uint64_t __SC_log_send()
{
  return ___SC_log_send();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return ___error();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return ___maskrune(a1, a2);
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

uint64_t __memmove_chk()
{
  return ___memmove_chk();
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

uint64_t __strncpy_chk()
{
  return ___strncpy_chk();
}

uint64_t _os_log_pack_fill()
{
  return __os_log_pack_fill();
}

uint64_t _os_log_pack_size()
{
  return __os_log_pack_size();
}

uint64_t _scprefs_observer_watch()
{
  return __scprefs_observer_watch();
}

uint32_t arc4random(void)
{
  return _arc4random();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

void audit_token_to_au32(audit_token_t *atoken, uid_t *auidp, uid_t *euidp, gid_t *egidp, uid_t *ruidp, gid_t *rgidp, pid_t *pidp, au_asid_t *asidp, au_tid_t *tidp)
{
}

int bcmp(const void *a1, const void *a2, size_t a3)
{
  return _bcmp(a1, a2, a3);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return _bind(a1, a2, a3);
}

kern_return_t bootstrap_check_in(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return _bootstrap_check_in(bp, service_name, sp);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return _close(a1);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void *__cdecl dispatch_get_context(dispatch_object_t object)
{
  return _dispatch_get_context(object);
}

uint64_t dispatch_mig_server()
{
  return _dispatch_mig_server();
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

uintptr_t dispatch_source_get_handle(dispatch_source_t source)
{
  return _dispatch_source_get_handle(source);
}

void dispatch_source_merge_data(dispatch_source_t source, uintptr_t value)
{
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

char *__cdecl ether_ntoa(const ether_addr *a1)
{
  return _ether_ntoa(a1);
}

int fflush(FILE *a1)
{
  return _fflush(a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

void free(void *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

int fstat(int a1, stat *a2)
{
  return _fstat(a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fwrite(__ptr, __size, __nitems, __stream);
}

int gethostuuid(uuid_t a1, const timespec *a2)
{
  return _gethostuuid(a1, a2);
}

int getifaddrs(ifaddrs **a1)
{
  return _getifaddrs(a1);
}

pid_t getpid(void)
{
  return _getpid();
}

int inet_aton(const char *a1, in_addr *a2)
{
  return _inet_aton(a1, a2);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return _inet_ntop(a1, a2, a3, a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return _inet_pton(a1, a2, a3);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return _ioctl(a1, a2);
}

char *__cdecl link_ntoa(const sockaddr_dl *a1)
{
  return _link_ntoa(a1);
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return _mach_error_string(error_value);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_realloc(ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return _mkdir(a1, a2);
}

uint32_t notify_check(int token, int *check)
{
  return _notify_check(token, check);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

uint64_t os_state_add_handler()
{
  return _os_state_add_handler();
}

uint64_t os_variant_is_darwinos()
{
  return _os_variant_is_darwinos();
}

int printf(const char *a1, ...)
{
  return _printf(a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return _pthread_once(a1, a2);
}

int putchar(int a1)
{
  return _putchar(a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return _read(a1, a2, a3);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return _reallocf(__ptr, __size);
}

ssize_t recvmsg(int a1, msghdr *a2, int a3)
{
  return _recvmsg(a1, a2, a3);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

ssize_t sendmsg(int a1, const msghdr *a2, int a3)
{
  return _sendmsg(a1, a2, a3);
}

ssize_t sendto(int a1, const void *a2, size_t a3, int a4, const sockaddr *a5, socklen_t a6)
{
  return _sendto(a1, a2, a3, a4, a5, a6);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return _setsockopt(a1, a2, a3, a4, a5);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return _socket(a1, a2, a3);
}

int stat(const char *a1, stat *a2)
{
  return _stat(a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return _strchr(__s, __c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return _strdup(__s1);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return _strncpy(__dst, __src, __n);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return _strtoul(__str, __endptr, __base);
}

uint64_t symptom_framework_init()
{
  return _symptom_framework_init();
}

uint64_t symptom_new()
{
  return _symptom_new();
}

uint64_t symptom_send()
{
  return _symptom_send();
}

uint64_t symptom_set_qualifier()
{
  return _symptom_set_qualifier();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
}

time_t time(time_t *a1)
{
  return _time(a1);
}

time_t timegm(tm *const a1)
{
  return _timegm(a1);
}

int unlink(const char *a1)
{
  return _unlink(a1);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return _vm_allocate(target_task, address, size, flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return _vm_deallocate(target_task, address, size);
}

uint64_t wd_endpoint_add_queue()
{
  return _wd_endpoint_add_queue();
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return _write(__fd, __buf, __nbyte);
}