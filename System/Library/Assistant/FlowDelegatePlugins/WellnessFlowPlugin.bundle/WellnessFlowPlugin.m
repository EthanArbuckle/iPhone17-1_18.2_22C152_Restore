uint64_t variable initialization expression of GenericBinaryButtonSnippet._context()
{
  uint64_t vars8;

  sub_1ACD40();
  sub_2360();

  return sub_1AC880();
}

unint64_t sub_2360()
{
  unint64_t result = qword_201C48;
  if (!qword_201C48)
  {
    sub_1ACD40();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_201C48);
  }
  return result;
}

uint64_t _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t variable initialization expression of HeightQueryModel.dateLabel()
{
  sub_27F0();
  sub_1AC1E0();
  uint64_t v0 = sub_27AC();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, v1, v2, v3);
}

uint64_t variable initialization expression of LogBloodPressureFlow.identifier()
{
  return 82;
}

uint64_t variable initialization expression of BloodPressureQueryModel.url()
{
  sub_27F0();
  sub_1AAB10();
  uint64_t v0 = sub_27AC();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, v1, v2, v3);
}

unint64_t variable initialization expression of SpecificMedCompletedLogModel.sashBundleID()
{
  return sub_27DC();
}

uint64_t variable initialization expression of LogPeriodFlow.intentHandler()
{
  id v0 = objc_allocWithZone((Class)sub_1AC5C0());
  return sub_1AC5B0();
}

uint64_t variable initialization expression of LogPeriodFlow.flowIdentifier()
{
  return 42;
}

uint64_t variable initialization expression of LogPeriodFlow.spottingIdentifier()
{
  return 32;
}

uint64_t _s18WellnessFlowPlugin09LogPeriodB0V23catWrapperLoggingSimple33_D2AEAD270E2D4594A1CF2262EA495C80LLAA0ah4CATsI0Cvpfi_0()
{
  return sub_1AC210();
}

uint64_t variable initialization expression of PhoneRingsSnippet._dynamicTypeSize@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_2694(&qword_201C50);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25A8()
{
  return sub_1AC890();
}

uint64_t sub_25CC(uint64_t a1)
{
  sub_1AC860();
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_1AC8A0();
}

uint64_t sub_2694(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t variable initialization expression of LogHealthKitQuantityFlow.taskLogger()
{
  return 3;
}

uint64_t variable initialization expression of SleepQueryModel.appPunchout()
{
  sub_27F0();
  sub_1AAD90();
  uint64_t v0 = sub_27AC();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, v1, v2, v3);
}

uint64_t variable initialization expression of SleepQueryModel.snippetHeaderModel()
{
  sub_27F0();
  type metadata accessor for SnippetHeaderModel();
  uint64_t v0 = sub_27AC();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, v1, v2, v3);
}

uint64_t sub_2754@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _s18WellnessFlowPlugin26SingleActivitySummaryModelV4date16SiriDialogEngine0J8CalendarCSgvpfi_0();
  *a1 = result;
  return result;
}

void *sub_277C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV12skippedLabelSSSgvpfi_0()
{
  return 0;
}

uint64_t _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0()
{
  return 0;
}

uint64_t sub_27AC()
{
  return v0;
}

uint64_t _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV7medTypeSSvpfi_0()
{
  return 0;
}

uint64_t isAsNeeded(from:)()
{
  return 0;
}

uint64_t _s18WellnessFlowPlugin26SingleActivitySummaryModelV4date16SiriDialogEngine0J8CalendarCSgvpfi_0()
{
  return 0;
}

unint64_t sub_27DC()
{
  return 0xD000000000000010;
}

uint64_t sub_27F0()
{
  return 0;
}

unint64_t sub_27FC(void *a1, char a2, char a3)
{
  sub_2E38(a1, a1[3]);
  char v6 = sub_1AB030();
  sub_2E38(a1, a1[3]);
  char v7 = sub_1AB050();
  sub_2E38(a1, a1[3]);
  char v8 = sub_1AB040();
  char v9 = (v8 | v6) & a2;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
  uint64_t v10 = 0x100000000;
  if ((a3 & 1) == 0) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = 0x1000000;
  if ((v9 & 1) == 0) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0x10000;
  if ((v6 & 1) == 0) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = 256;
  if ((v7 & 1) == 0) {
    uint64_t v13 = 0;
  }
  return (v12 | v10 | v13) & 0xFFFFFFFFFFFFFFFELL | v8 & 1 | v11;
}

uint64_t sub_28F4(unint64_t a1)
{
  if (BYTE3(a1) == 2) {
    goto LABEL_10;
  }
  unint64_t v1 = a1 >> 24;
  if (!(a1 & 0x1000000 | (a1 >> 24) & 0x10000))
  {
    if ((v1 & 0x100) == 0) {
      return 2;
    }
    goto LABEL_10;
  }
  uint64_t v2 = v1 & 0x101000000;
  unint64_t v3 = (v1 & 0x1000000) != 0 ? 4 : 3;
  if (v2 == 0x1000000)
  {
LABEL_10:
    unint64_t v3 = 0x10000050100uLL >> ((a1 >> 13) & 0xF8);
    if (BYTE2(a1) <= 6u) {
      return v3;
    }
    else {
      return 5;
    }
  }
  return v3;
}

uint64_t sub_2970(unsigned __int16 a1)
{
  int v1 = a1;
  uint64_t v2 = sub_1AC800();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v1 == 270) {
    return 6;
  }
  uint64_t v7 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  char v8 = sub_1AC7F0();
  os_log_type_t v9 = sub_1ACF50();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    v15 = v10 + 4;
    LOWORD(v16) = v1;
    uint64_t v11 = sub_1ACE00();
    uint64_t v16 = sub_4A278(v11, v12, &v17);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v8, v9, "Selecting querying flow for dataType: %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t result = 0;
  char v13 = v1 + 37;
  if ((v1 - 219) > 0x32) {
    goto LABEL_9;
  }
  if (((1 << v13) & 0x73D0838D52801) != 0) {
    return result;
  }
  if (((1 << v13) & 0x2045201000) != 0) {
    return 2;
  }
LABEL_9:
  if ((v1 - 18) < 3) {
    return 1;
  }
  BOOL v14 = (v1 - 159) < 2 || v1 == 17;
  if (!v14 && v1 != 76)
  {
    if (v1 == 174) {
      return 3;
    }
    else {
      return 5;
    }
  }
  return result;
}

uint64_t sub_2C30(unint64_t a1)
{
  if (BYTE2(a1) == 9) {
    return 0;
  }
  __int16 v2 = a1;
  unint64_t v3 = a1 >> 16;
  if (sub_1950F4(SBYTE2(a1)) == 0x657461657263 && v4 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  char v6 = sub_1AD2F0();
  swift_bridgeObjectRelease();
  if (v6) {
    return 1;
  }
  if (sub_1950F4(v3) == 0x657461647075 && v7 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    if (v2 == 270) {
      return 0;
    }
  }
  else
  {
    char v9 = sub_1AD2F0();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if (v2 == 270 || (v9 & 1) == 0) {
      return result;
    }
  }

  return sub_7235C(v2, (uint64_t)&off_1F43B8);
}

uint64_t sub_2D8C(unint64_t a1)
{
  int v1 = (unsigned __int16)a1;
  if ((unsigned __int16)a1 == 270) {
    return 4;
  }
  if ((sub_2C30(a1) & 1) == 0) {
    return 3;
  }
  uint64_t result = 0;
  if ((v1 - 230) > 0x27 || ((1 << (v1 + 26)) & 0xE7A00708A5) == 0)
  {
    if ((v1 - 18) < 3) {
      return 2;
    }
    if (v1 != 17 && v1 != 76)
    {
      if (v1 == 191) {
        return 1;
      }
      if (v1 != 159)
      {
        if (v1 == 128) {
          return 1;
        }
        return 3;
      }
    }
  }
  return result;
}

void *sub_2E38(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_2ECC()
{
  sub_1AABD0();
  sub_52C4();
  uint64_t v3 = v2;
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  __chkstk_darwin(v4);
  uint64_t v5 = sub_2694(&qword_201CC8);
  uint64_t v6 = sub_53D4(v5);
  __chkstk_darwin(v6);
  uint64_t v7 = sub_5368();
  sub_52C4();
  __chkstk_darwin(v8);
  sub_5390();
  uint64_t v9 = type metadata accessor for SynthesizedWellnessIntent();
  sub_526C(v0 + *(int *)(v9 + 24), v1, &qword_201CC8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v7) == 1)
  {
    sub_520C(v1);
    return 0;
  }
  else
  {
    uint64_t v11 = sub_5348();
    v12(v11);
    sub_1AABC0();
    if (sub_1AAA00())
    {
      sub_53AC();
      v13();
      uint64_t v14 = sub_5330();
      v15(v14);
      return 2;
    }
    else
    {
      sub_1AA9C0();
      char v16 = sub_1AAB80();
      uint64_t v17 = *(void (**)(void))(v3 + 8);
      sub_53AC();
      v17();
      sub_53AC();
      v17();
      uint64_t v18 = sub_5330();
      v19(v18);
      return (v16 & 1) == 0;
    }
  }
}

uint64_t sub_30B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v3 = sub_2694(&qword_201CB8);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_53E0();
  uint64_t v53 = v5;
  uint64_t v6 = sub_2694(&qword_201CC0);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_53E0();
  uint64_t v52 = v8;
  uint64_t v9 = sub_2694(&qword_201CC8);
  uint64_t v10 = sub_53D4(v9);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SynthesizedWellnessIntent();
  uint64_t v14 = (int *)(v13 - 8);
  __chkstk_darwin(v13);
  char v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_WORD *)v16 + 1) = 270;
  uint64_t v17 = (uint64_t)&v16[v14[8]];
  uint64_t v18 = sub_1AAA10();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v17, 1, 1, v18);
  uint64_t v19 = v14[10];
  v16[v19] = 61;
  v20 = &v16[v14[12]];
  *(void *)v20 = 0;
  v20[8] = 1;
  v50 = &v16[v14[13]];
  uint64_t v21 = sub_1ABA20();
  sub_53F4(v21);
  v51 = &v16[v14[14]];
  uint64_t v22 = sub_1AB880();
  sub_53F4(v22);
  sub_2E38(a1, a1[3]);
  uint64_t v23 = sub_5414();
  *char v16 = v24(v23);
  sub_2E38(a1, a1[3]);
  uint64_t v25 = sub_5414();
  *((_WORD *)v16 + 1) = v26(v25);
  uint64_t v27 = a1[3];
  uint64_t v28 = a1[4];
  sub_2E38(a1, v27);
  (*(void (**)(uint64_t, uint64_t))(v28 + 32))(v27, v28);
  sub_34E8((uint64_t)v12, v17, &qword_201CC8);
  sub_530C();
  uint64_t v29 = sub_52F8();
  v16[v14[9]] = v30(v29) & 1;
  sub_530C();
  uint64_t v31 = sub_52F8();
  v16[v19] = v32(v31);
  sub_530C();
  uint64_t v33 = sub_52F8();
  *(void *)&v16[v14[11]] = v34(v33);
  sub_530C();
  uint64_t v35 = sub_52F8();
  *(void *)v20 = v36(v35);
  v20[8] = v37 & 1;
  uint64_t v38 = a1[3];
  uint64_t v39 = a1[4];
  sub_2E38(a1, v38);
  uint64_t v40 = v52;
  (*(void (**)(uint64_t, uint64_t))(v39 + 72))(v38, v39);
  sub_34E8(v40, (uint64_t)v50, &qword_201CC0);
  uint64_t v41 = a1[3];
  uint64_t v42 = a1[4];
  sub_2E38(a1, v41);
  uint64_t v43 = v53;
  (*(void (**)(uint64_t, uint64_t))(v42 + 80))(v41, v42);
  sub_34E8(v43, (uint64_t)v51, &qword_201CB8);
  sub_2E38(a1, a1[3]);
  uint64_t v44 = sub_5428();
  v16[v14[15]] = v45(v44) & 1;
  sub_2E38(a1, a1[3]);
  uint64_t v46 = sub_5428();
  v16[v14[16]] = v47(v46) & 1;
  sub_3540((uint64_t)v16, v54);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
  return sub_35A4((uint64_t)v16);
}

uint64_t type metadata accessor for SynthesizedWellnessIntent()
{
  uint64_t result = qword_201D28;
  if (!qword_201D28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_34E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2694(a3);
  sub_543C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
  return a2;
}

uint64_t sub_3540(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SynthesizedWellnessIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_35A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SynthesizedWellnessIntent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_3600(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_WORD *)(a1 + 2) = *((_WORD *)a2 + 1);
    uint64_t v7 = a3[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_1AAA10();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1, v10))
    {
      uint64_t v11 = sub_2694(&qword_201CC8);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0, 1, v10);
    }
    uint64_t v13 = a3[8];
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)v4 + v13) = *((unsigned char *)a2 + v13);
    uint64_t v14 = a3[10];
    *(void *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = *(unsigned char *)(v16 + 8);
    uint64_t v17 = a3[11];
    uint64_t v18 = (char *)v4 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = sub_1ABA20();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1, v20))
    {
      uint64_t v21 = sub_2694(&qword_201CC0);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v18, 0, 1, v20);
    }
    uint64_t v22 = a3[12];
    uint64_t v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    uint64_t v25 = sub_1AB880();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v25))
    {
      uint64_t v26 = sub_2694(&qword_201CB8);
      memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0, 1, v25);
    }
    uint64_t v27 = a3[14];
    *((unsigned char *)v4 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    *((unsigned char *)v4 + v27) = *((unsigned char *)a2 + v27);
  }
  return v4;
}

uint64_t _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_390C(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = sub_1AAA10();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[11];
  uint64_t v7 = sub_1ABA20();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  uint64_t v8 = a1 + a2[12];
  uint64_t v9 = sub_1AB880();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, 1, v9);
  if (!result)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
    return v11(v8, v9);
  }
  return result;
}

uint64_t sub_3A68(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_1AAA10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_2694(&qword_201CC8);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a3[11];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = sub_1ABA20();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v17, 1, v18))
  {
    uint64_t v19 = sub_2694(&qword_201CC0);
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v16, 0, 1, v18);
  }
  uint64_t v20 = a3[12];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (const void *)(a2 + v20);
  uint64_t v23 = sub_1AB880();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v23))
  {
    uint64_t v24 = sub_2694(&qword_201CB8);
    memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v23);
  }
  uint64_t v25 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  return a1;
}

uint64_t sub_3CFC(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_1AAA10();
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_2694(&qword_201CC8);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[10];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v17 = *v16;
  *(unsigned char *)(v15 + 8) = *((unsigned char *)v16 + 8);
  *(void *)uint64_t v15 = v17;
  uint64_t v18 = a3[11];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = sub_1ABA20();
  int v22 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1, v21);
  int v23 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v20, 1, v21);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v24 = *(void *)(v21 - 8);
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v19, v21);
LABEL_12:
    uint64_t v25 = sub_2694(&qword_201CC0);
    memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v24 + 24))(v19, v20, v21);
LABEL_13:
  uint64_t v26 = a3[12];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (const void *)(a2 + v26);
  uint64_t v29 = sub_1AB880();
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v29);
  int v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1, v29);
  if (!v30)
  {
    uint64_t v32 = *(void *)(v29 - 8);
    if (!v31)
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 24))(v27, v28, v29);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v27, v29);
    goto LABEL_18;
  }
  if (v31)
  {
LABEL_18:
    uint64_t v33 = sub_2694(&qword_201CB8);
    memcpy(v27, v28, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0, 1, v29);
LABEL_19:
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_4124(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_1AAA10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_2694(&qword_201CC8);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a3[11];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = sub_1ABA20();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v17, 1, v18))
  {
    uint64_t v19 = sub_2694(&qword_201CC0);
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v16, 0, 1, v18);
  }
  uint64_t v20 = a3[12];
  uint64_t v21 = (void *)(a1 + v20);
  int v22 = (const void *)(a2 + v20);
  uint64_t v23 = sub_1AB880();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v23))
  {
    uint64_t v24 = sub_2694(&qword_201CB8);
    memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v23);
  }
  uint64_t v25 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  return a1;
}

uint64_t sub_43A8(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_1AAA10();
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_2694(&qword_201CC8);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[10];
  uint64_t v16 = a3[11];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = (void *)(a1 + v16);
  uint64_t v20 = (const void *)(a2 + v16);
  uint64_t v21 = sub_1ABA20();
  int v22 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1, v21);
  int v23 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v20, 1, v21);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v24 = *(void *)(v21 - 8);
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v19, v21);
LABEL_12:
    uint64_t v25 = sub_2694(&qword_201CC0);
    memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v24 + 40))(v19, v20, v21);
LABEL_13:
  uint64_t v26 = a3[12];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (const void *)(a2 + v26);
  uint64_t v29 = sub_1AB880();
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v29);
  int v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1, v29);
  if (!v30)
  {
    uint64_t v32 = *(void *)(v29 - 8);
    if (!v31)
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 40))(v27, v28, v29);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v27, v29);
    goto LABEL_18;
  }
  if (v31)
  {
LABEL_18:
    uint64_t v33 = sub_2694(&qword_201CB8);
    memcpy(v27, v28, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0, 1, v29);
LABEL_19:
  uint64_t v34 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v34) = *(unsigned char *)(a2 + v34);
  return a1;
}

uint64_t sub_47BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_47D0);
}

uint64_t sub_47D0(uint64_t a1, uint64_t a2, int *a3)
{
  sub_2694(&qword_201CC8);
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[6];
    goto LABEL_10;
  }
  if (a2 != 0x7FFFFFFF)
  {
    sub_2694(&qword_201CC0);
    sub_52E0();
    if (*(_DWORD *)(v13 + 84) == a2)
    {
      uint64_t v8 = v12;
      uint64_t v9 = a3[11];
    }
    else
    {
      uint64_t v8 = sub_2694(&qword_201CB8);
      uint64_t v9 = a3[12];
    }
LABEL_10:
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1 + v9, a2, v8);
  }
  unint64_t v10 = *(void *)(a1 + a3[9]);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

uint64_t sub_48B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_48C4);
}

void sub_48C4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  sub_2694(&qword_201CC8);
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a4[6];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + a4[9]) = (a2 - 1);
      return;
    }
    sub_2694(&qword_201CC0);
    sub_52E0();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v11 = a4[11];
    }
    else
    {
      uint64_t v10 = sub_2694(&qword_201CB8);
      uint64_t v11 = a4[12];
    }
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1 + v11, a2, a2, v10);
}

void sub_49A0()
{
  sub_4B3C(319, (unint64_t *)&qword_201D38, (void (*)(uint64_t))&type metadata accessor for DateInterval);
  if (v0 <= 0x3F)
  {
    sub_4B3C(319, &qword_201D40, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues);
    if (v1 <= 0x3F)
    {
      sub_4B3C(319, (unint64_t *)&unk_201D48, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_4B3C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1ACFD0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_4B90()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_2694(&qword_201CC8);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  uint64_t v5 = sub_5368();
  sub_52C4();
  __chkstk_darwin(v6);
  sub_5390();
  uint64_t v7 = sub_1AAD60();
  sub_52C4();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)NSDateIntervalFormatter) init];
  [v13 setDateStyle:1];
  sub_1AAD50();
  Class isa = sub_1AAD40().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
  [v13 setTimeZone:isa];

  uint64_t v15 = (int *)type metadata accessor for SynthesizedWellnessIntent();
  sub_526C(v2 + v15[6], v1, &qword_201CC8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v5) == 1)
  {
    uint64_t v16 = 7104878;
    sub_520C(v1);
    uint64_t v17 = (void *)0xE300000000000000;
  }
  else
  {
    uint64_t v18 = sub_5348();
    v19(v18);
    Class v20 = sub_1AA9A0().super.isa;
    id v21 = [v13 stringFromDateInterval:v20];

    if (v21)
    {
      uint64_t v16 = sub_1ACDD0();
      uint64_t v17 = v22;
    }
    else
    {
      uint64_t v16 = 7104878;
      uint64_t v17 = (void *)0xE300000000000000;
    }
    uint64_t v23 = sub_5330();
    v24(v23);
  }
  uint64_t v36 = 0;
  unint64_t v37 = 0xE000000000000000;
  sub_1AD080(171);
  v38._countAndFlagsBits = 0x203A62726576;
  v38._object = (void *)0xE600000000000000;
  sub_1ACE70(v38);
  LOBYTE(v34) = *(unsigned char *)v2;
  sub_1AD140();
  v39._countAndFlagsBits = 0x707954617461640ALL;
  v39._object = (void *)0xEB00000000203A65;
  sub_1ACE70(v39);
  LOWORD(v34) = *(_WORD *)(v2 + 2);
  sub_2694(&qword_201DA8);
  v40._countAndFlagsBits = sub_1ACFC0();
  sub_53BC(v40);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 0x6E6152657461640ALL;
  v41._object = (void *)0xEC000000203A6567;
  sub_1ACE70(v41);
  v42._countAndFlagsBits = v16;
  v42._object = v17;
  sub_1ACE70(v42);
  swift_bridgeObjectRelease();
  v43._object = (void *)0x80000000001B72F0;
  v43._countAndFlagsBits = 0xD000000000000013;
  sub_1ACE70(v43);
  if (*(unsigned char *)(v2 + v15[7])) {
    v25._countAndFlagsBits = 1702195828;
  }
  else {
    v25._countAndFlagsBits = 0x65736C6166;
  }
  if (*(unsigned char *)(v2 + v15[7])) {
    uint64_t v26 = (void *)0xE400000000000000;
  }
  else {
    uint64_t v26 = (void *)0xE500000000000000;
  }
  v25._object = v26;
  sub_1ACE70(v25);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 0xD000000000000012;
  v44._object = (void *)0x80000000001B7310;
  sub_1ACE70(v44);
  LOBYTE(v34) = *(unsigned char *)(v2 + v15[8]);
  sub_2694(&qword_201DB0);
  v45._countAndFlagsBits = sub_1ACFC0();
  sub_53BC(v45);
  swift_bridgeObjectRelease();
  v46._object = (void *)0x80000000001B7330;
  v46._countAndFlagsBits = 0xD000000000000013;
  sub_1ACE70(v46);
  uint64_t v27 = (uint64_t *)(v2 + v15[10]);
  uint64_t v28 = *v27;
  LOBYTE(v27) = *((unsigned char *)v27 + 8);
  uint64_t v34 = v28;
  char v35 = (char)v27;
  sub_2694(qword_201DB8);
  v47._countAndFlagsBits = sub_1ACFC0();
  sub_53BC(v47);
  swift_bridgeObjectRelease();
  v48._countAndFlagsBits = 0xD000000000000017;
  v48._object = (void *)0x80000000001B7350;
  sub_1ACE70(v48);
  sub_2694(&qword_201CC0);
  v49._countAndFlagsBits = sub_1ACFC0();
  sub_53BC(v49);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 0x736F507473696C0ALL;
  v50._object = (void *)0xEF203A6E6F697469;
  sub_1ACE70(v50);
  sub_2694(&qword_201CB8);
  v51._countAndFlagsBits = sub_1ACFC0();
  sub_53BC(v51);
  swift_bridgeObjectRelease();
  v52._countAndFlagsBits = 0x726174537361680ALL;
  v52._object = (void *)0xEF203A6574614474;
  sub_1ACE70(v52);
  if (*(unsigned char *)(v2 + v15[13])) {
    v29._countAndFlagsBits = 1702195828;
  }
  else {
    v29._countAndFlagsBits = 0x65736C6166;
  }
  if (*(unsigned char *)(v2 + v15[13])) {
    int v30 = (void *)0xE400000000000000;
  }
  else {
    int v30 = (void *)0xE500000000000000;
  }
  v29._object = v30;
  sub_1ACE70(v29);
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = 0x44646E457361680ALL;
  v53._object = (void *)0xED0000203A657461;
  sub_1ACE70(v53);
  if (*(unsigned char *)(v2 + v15[14])) {
    v31._countAndFlagsBits = 1702195828;
  }
  else {
    v31._countAndFlagsBits = 0x65736C6166;
  }
  if (*(unsigned char *)(v2 + v15[14])) {
    uint64_t v32 = (void *)0xE400000000000000;
  }
  else {
    uint64_t v32 = (void *)0xE500000000000000;
  }
  v31._object = v32;
  sub_1ACE70(v31);

  swift_bridgeObjectRelease();
  return v36;
}

uint64_t SpecificMedCompletedLogModel.medStatus.getter()
{
  return *v0;
}

uint64_t sub_50B0()
{
  return *(unsigned __int16 *)(v0 + 2);
}

uint64_t sub_50B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_526C(v2 + *(int *)(a1 + 24), a2, &qword_201CC8);
}

uint64_t sub_50E4(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

uint64_t sub_50F0(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 32));
}

uint64_t sub_50FC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_5108(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 40));
}

uint64_t sub_511C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_526C(v2 + *(int *)(a1 + 44), a2, &qword_201CC0);
}

uint64_t sub_5148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_526C(v2 + *(int *)(a1 + 48), a2, &qword_201CB8);
}

uint64_t sub_5174(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 52));
}

uint64_t sub_5180(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 56));
}

unint64_t sub_5194(uint64_t a1)
{
  unint64_t result = sub_51BC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_51BC()
{
  unint64_t result = qword_201DA0;
  if (!qword_201DA0)
  {
    type metadata accessor for SynthesizedWellnessIntent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_201DA0);
  }
  return result;
}

uint64_t sub_520C(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201CC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_526C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2694(a3);
  sub_543C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_52F8()
{
  return v0;
}

void *sub_530C()
{
  return sub_2E38(v0, v0[3]);
}

uint64_t sub_5330()
{
  return v0;
}

uint64_t sub_5348()
{
  return v0;
}

uint64_t sub_5368()
{
  return sub_1AAA10();
}

uint64_t sub_5390()
{
  return 0;
}

void sub_53BC(Swift::String a1)
{
  sub_1ACE70(a1);
}

uint64_t sub_53D4(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_53F4(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, a1);
}

uint64_t sub_5414()
{
  return v0;
}

uint64_t sub_5428()
{
  return v0;
}

uint64_t initializeBufferWithCopyOfBuffer for WellnessPatternsProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for GetCycleTrackingFlow(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for GetCycleTrackingFlow(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  long long v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  long long v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GetCycleTrackingFlow(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(unsigned char *)(a1 + 249) = *(unsigned char *)(a2 + 249);
  return a1;
}

uint64_t *sub_577C(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

void *initializeWithTake for GetCycleTrackingFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xFAuLL);
}

uint64_t assignWithTake for GetCycleTrackingFlow(uint64_t a1, uint64_t a2)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  uint64_t v7 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v7;
  swift_unknownObjectRelease();
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetCycleTrackingFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 250))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GetCycleTrackingFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 248) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 250) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 250) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GetCycleTrackingFlow()
{
  return &type metadata for GetCycleTrackingFlow;
}

uint64_t LogPeriodFlow.on(input:)()
{
  return 1;
}

uint64_t sub_5B68()
{
  sub_A0C0();

  return sub_1AAF80();
}

uint64_t sub_5BBC()
{
  sub_A364();
  v1[114] = v0;
  v1[113] = v2;
  uint64_t v3 = type metadata accessor for UnavailableDataFlow();
  v1[115] = v3;
  sub_53D4(v3);
  v1[116] = sub_A42C();
  uint64_t v4 = sub_1AC250();
  sub_53D4(v4);
  v1[117] = sub_A42C();
  uint64_t v5 = sub_1AC800();
  v1[118] = v5;
  sub_A19C(v5);
  v1[119] = v6;
  v1[120] = sub_A220();
  v1[121] = swift_task_alloc();
  v1[122] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_5CA8()
{
  uint64_t v1 = (_DWORD *)v0[122];
  uint64_t v2 = v0[119];
  uint64_t v3 = v0[118];
  sub_1AC3B0();
  sub_683C(v4, v5, v6, v7, v8, v9, v10, v11, v29, v30, v31, v32, v33, v34, v35, v36, v37, (uint64_t)v0, v38, v39);
  id v13 = v12;
  v0[123] = v12;
  uint64_t v14 = sub_1AC7D0();
  v0[124] = v14;
  sub_A340();
  uint64_t v15 = *(void (**)(_DWORD *, uint64_t, uint64_t))(v2 + 16);
  v0[125] = v15;
  v0[126] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v15(v1, v14, v3);
  id v16 = v13;
  uint64_t v17 = (void *)sub_1AC7F0();
  os_log_type_t v18 = sub_1ACF50();
  if (sub_A3D0(v18))
  {
    sub_A4B0();
    uint64_t v19 = (void *)sub_A494();
    *uint64_t v1 = 138412290;
    v0[112] = v16;
    id v20 = v16;
    sub_1ACFE0();
    *uint64_t v19 = v16;

    sub_A27C(&def_342E4, v21, v22, "Created intent: %@");
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {

    uint64_t v17 = v16;
  }
  uint64_t v23 = v0[119];
  uint64_t v24 = v0[114];

  v0[127] = *(void *)(v23 + 8);
  v0[128] = (v23 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v25 = sub_A418();
  v26(v25);
  uint64_t v27 = *(void **)(v24 + 240);
  v0[2] = v0;
  v0[7] = v0 + 110;
  v0[3] = sub_5F2C;
  v0[99] = swift_continuation_init();
  v0[95] = _NSConcreteStackBlock;
  v0[96] = 0x40000000;
  v0[97] = sub_6AA8;
  v0[98] = &unk_1F4D68;
  [v27 handleGetMenstruationPrediction:v16 completion:v0 + 95];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_5F2C()
{
  sub_A364();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_5FFC()
{
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 1000);
  uint64_t v2 = *(_DWORD **)(v0 + 968);
  uint64_t v3 = *(unsigned char **)(v0 + 944);
  uint64_t v4 = *(void **)(v0 + 880);
  *(void *)(v0 + 1032) = v4;
  sub_A340();
  uint64_t v5 = sub_A7D0();
  v1(v5);
  uint64_t v6 = v4;
  uint64_t v7 = (void *)sub_1AC7F0();
  os_log_type_t v8 = sub_1ACF50();
  if (sub_A3D0(v8))
  {
    sub_A4B0();
    uint64_t v4 = (void *)sub_A494();
    *uint64_t v2 = 138412290;
    *(void *)(v0 + 888) = v6;
    uint64_t v3 = v6;
    sub_1ACFE0();
    *uint64_t v4 = v6;

    sub_A27C(&def_342E4, v9, v10, "Received response: %@");
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
  }
  uint64_t v11 = (*(uint64_t (**)(void, void))(v0 + 1016))(*(void *)(v0 + 968), *(void *)(v0 + 944));
  uint64_t v12 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *(void *)v6)))(v11);
  if (v12 == 4)
  {
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 1040) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_66B4;
    return sub_6AE4();
  }
  else
  {
    switch(v12)
    {
      case 'g':
        sub_A4FC();
        sub_9DE0((uint64_t)(v6 + 40), v0 + 344);
        sub_9B48((uint64_t)(v6 + 80), v0 + 384);
        sub_1AB1C0();
        sub_A550();
        uint64_t v19 = sub_1AB1B0();
        *(void *)(v0 + 568) = v3;
        *(void *)(v0 + 576) = &protocol witness table for ResponseFactory;
        *(void *)(v0 + 544) = v19;
        type metadata accessor for WellnessCATsSimple();
        sub_A6A4();
        uint64_t v20 = sub_1AC210();
        type metadata accessor for WellnessCATs();
        sub_A6A4();
        uint64_t v21 = sub_1AC1A0();
        *(void *)(v0 + 584) = v20;
        *(void *)(v0 + 592) = v21;
        sub_9C44();
        sub_1AB120();

        sub_9C90(v0 + 344);
        break;
      case 'f':
        uint64_t v22 = *(void **)(v0 + 984);
        uint64_t v23 = *(unsigned char **)(v0 + 928);
        uint64_t v24 = *(int **)(v0 + 920);
        uint64_t v25 = *(void *)(v0 + 912);
        sub_1AC320();
        char v26 = *(unsigned char *)(v25 + 248);
        uint64_t v27 = (uint64_t)&v23[v24[5]];
        uint64_t v28 = sub_1AAA10();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v27, 1, 1, v28);
        sub_9DE0(v25 + 40, (uint64_t)&v23[v24[6]]);
        sub_9B48(v25 + 80, (uint64_t)&v23[v24[7]]);
        sub_1AB1C0();
        sub_A550();
        uint64_t v29 = sub_1AB1B0();
        uint64_t v30 = (uint64_t *)&v23[v24[8]];
        v30[3] = v25;
        v30[4] = (uint64_t)&protocol witness table for ResponseFactory;
        *uint64_t v30 = v29;
        type metadata accessor for WellnessCATsSimple();
        sub_1AC240();
        uint64_t v31 = sub_1AC210();
        type metadata accessor for WellnessCATs();
        sub_1AC240();
        uint64_t v32 = sub_1AC1A0();
        *uint64_t v23 = v26;
        *(void *)&v23[v24[9]] = v31;
        *(void *)&v23[v24[10]] = v32;
        sub_9F60(&qword_201DF0, (void (*)(uint64_t))type metadata accessor for UnavailableDataFlow);
        sub_A7C4();
        sub_1AB120();

        sub_9CE4((uint64_t)v23);
        break;
      case 'e':
        sub_A4FC();
        char v13 = v6[248];
        sub_9DE0((uint64_t)(v6 + 40), v0 + 88);
        sub_9B48((uint64_t)(v6 + 80), v0 + 128);
        sub_1AB1C0();
        sub_A550();
        uint64_t v14 = sub_1AB1B0();
        *(void *)(v0 + 312) = v3;
        *(void *)(v0 + 320) = &protocol witness table for ResponseFactory;
        *(void *)(v0 + 288) = v14;
        type metadata accessor for WellnessCATsSimple();
        sub_A6A4();
        uint64_t v15 = sub_1AC210();
        type metadata accessor for WellnessCATs();
        sub_A6A4();
        uint64_t v16 = sub_1AC1A0();
        *(unsigned char *)(v0 + 80) = v13;
        *(void *)(v0 + 328) = v15;
        *(void *)(v0 + 336) = v16;
        sub_9D40();
        sub_1AB120();

        sub_9D8C(v0 + 80);
        break;
      default:
        uint64_t v33 = v0 + 600;
        uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
        uint64_t v35 = *(void *)(v0 + 992);
        uint64_t v36 = *(void *)(v0 + 960);
        uint64_t v37 = *(void *)(v0 + 944);
        sub_A340();
        v34(v36, v35, v37);
        uint64_t v38 = v6;
        uint64_t v39 = sub_1AC7F0();
        os_log_type_t v40 = sub_1ACF60();
        if (os_log_type_enabled(v39, v40))
        {
          Swift::String v41 = (_DWORD *)sub_A4B0();
          Swift::String v42 = (void *)swift_slowAlloc();
          *Swift::String v41 = 138412290;
          *(void *)(v0 + 872) = v38;
          Swift::String v43 = v38;
          uint64_t v33 = v0 + 600;
          sub_1ACFE0();
          *Swift::String v42 = v6;

          sub_A7DC(&def_342E4, v44, v45, "Received unhandled response code: %@");
          sub_2694(&qword_201DE0);
          swift_arrayDestroy();
          sub_A1F0();
          sub_A1F0();
        }
        else
        {
        }
        Swift::String v46 = *(void **)(v0 + 984);
        uint64_t v47 = *(void *)(v0 + 912);
        (*(void (**)(void, void))(v0 + 1016))(*(void *)(v0 + 960), *(void *)(v0 + 944));
        sub_1AC320();
        sub_9B48(v47 + 80, v33);
        sub_9BA4();
        sub_1AB120();

        sub_9BF0(v33);
        break;
    }
    sub_A660();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v48 = *(uint64_t (**)(void))(v0 + 8);
    return v48();
  }
}

uint64_t sub_66B4()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 1048) = v3;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_6780()
{
  uint64_t v1 = (void *)v0[129];
  uint64_t v2 = (void *)v0[123];
  sub_1AC350();
  sub_1AB130();
  swift_release();

  sub_A660();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void sub_683C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_A638();
  a19 = v22;
  a20 = v23;
  uint64_t v24 = &qword_201E38;
  uint64_t v25 = sub_2694(&qword_201E38);
  uint64_t v26 = v25 - 8;
  __chkstk_darwin(v25);
  sub_A620();
  uint64_t v27 = sub_2694(&qword_201CC0);
  uint64_t v28 = sub_53D4(v27);
  __chkstk_darwin(v28);
  sub_A314();
  uint64_t v31 = v29 - v30;
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&a9 - v33;
  id v35 = [objc_allocWithZone((Class)sub_1AC750()) init];
  uint64_t v37 = v21[3];
  uint64_t v36 = v21[4];
  sub_2E38(v21, v37);
  (*(void (**)(uint64_t, uint64_t))(v36 + 72))(v37, v36);
  uint64_t v38 = v21[3];
  uint64_t v39 = v21[4];
  sub_2E38(v21, v38);
  char v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 104))(v38, v39);
  uint64_t v41 = *(int *)(v26 + 56);
  sub_A008((uint64_t)v34, v20, &qword_201CC0);
  *(unsigned char *)(v20 + v41) = v40;
  uint64_t v42 = sub_1ABA20();
  sub_A208(v20, 1, v42);
  if (v43)
  {
    uint64_t v44 = 0;
  }
  else
  {
    sub_9FA8(v20, v31, &qword_201CC0);
    sub_A1CC();
    uint64_t v46 = v45;
    int v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 88))(v31, v42);
    if (v47 == enum case for UsoEntity_common_MeasurementQualifier.DefinedValues.common_MeasurementQualifier_StartOf(_:))
    {
      uint64_t v48 = v40;
      uint64_t v49 = &unk_1ADCC0;
    }
    else
    {
      if (v47 != enum case for UsoEntity_common_MeasurementQualifier.DefinedValues.common_MeasurementQualifier_EndOf(_:))
      {
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v31, v42);
        uint64_t v44 = 0;
        uint64_t v24 = &qword_201E38;
        goto LABEL_10;
      }
      uint64_t v48 = v40;
      uint64_t v49 = &unk_1ADCD8;
    }
    uint64_t v44 = v49[v48];
    uint64_t v24 = &qword_201CC0;
  }
LABEL_10:
  [v35 setProjectionFocus:v44];
  sub_A068(v20, v24);
  sub_A56C();
}

uint64_t sub_6AA8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;

  return sub_106A70(v2, v3);
}

uint64_t sub_6AE4()
{
  sub_A364();
  v1[53] = v2;
  v1[54] = v0;
  uint64_t v3 = sub_1AB0A0();
  v1[55] = v3;
  sub_A19C(v3);
  v1[56] = v4;
  v1[57] = sub_A220();
  v1[58] = swift_task_alloc();
  uint64_t v5 = sub_1AB3D0();
  v1[59] = v5;
  sub_A19C(v5);
  v1[60] = v6;
  v1[61] = sub_A42C();
  uint64_t v7 = sub_1AC250();
  sub_53D4(v7);
  v1[62] = sub_A42C();
  uint64_t v8 = type metadata accessor for UnavailableDataFlow();
  v1[63] = v8;
  sub_53D4(v8);
  v1[64] = sub_A42C();
  uint64_t v9 = sub_1AABD0();
  v1[65] = v9;
  sub_A19C(v9);
  v1[66] = v10;
  v1[67] = sub_A220();
  v1[68] = swift_task_alloc();
  v1[69] = swift_task_alloc();
  v1[70] = swift_task_alloc();
  uint64_t v11 = sub_1ABA20();
  v1[71] = v11;
  sub_A19C(v11);
  v1[72] = v12;
  v1[73] = sub_A42C();
  uint64_t v13 = sub_2694(&qword_201E08);
  v1[74] = v13;
  sub_53D4(v13);
  v1[75] = sub_A42C();
  uint64_t v14 = sub_2694(&qword_201CC0);
  sub_53D4(v14);
  v1[76] = sub_A220();
  v1[77] = swift_task_alloc();
  v1[78] = swift_task_alloc();
  uint64_t v15 = sub_2694(&qword_201E10);
  sub_53D4(v15);
  v1[79] = sub_A220();
  v1[80] = swift_task_alloc();
  v1[81] = swift_task_alloc();
  v1[82] = swift_task_alloc();
  v1[83] = swift_task_alloc();
  v1[84] = swift_task_alloc();
  uint64_t v16 = sub_1AC800();
  v1[85] = v16;
  sub_A19C(v16);
  v1[86] = v17;
  v1[87] = sub_A220();
  v1[88] = swift_task_alloc();
  v1[89] = swift_task_alloc();
  v1[90] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v18, v19, v20);
}

uint64_t sub_6D8C()
{
  v141 = v0;
  uint64_t v1 = v0[90];
  uint64_t v2 = v0[86];
  uint64_t v3 = v0[85];
  uint64_t v4 = sub_1AC7D0();
  v0[91] = v4;
  sub_A340();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[92] = v5;
  v0[93] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v135 = (uint64_t)v5;
  v5(v1, v4, v3);
  uint64_t v6 = sub_1AC7F0();
  os_log_type_t v7 = sub_1ACF50();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[90];
    uint64_t v9 = v0[86];
    uint64_t v136 = v0[85];
    uint64_t v10 = (_DWORD *)sub_A4B0();
    uint64_t v140 = swift_slowAlloc();
    *uint64_t v10 = 136315138;
    v0[52] = sub_4A278(0xD000000000000014, 0x80000000001ADC20, &v140);
    sub_1ACFE0();
    sub_A7DC(&def_342E4, v11, v12, "Executing %s success pattern");
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v13(v8, v136);
  }
  else
  {
    uint64_t v14 = v0[86];

    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    uint64_t v15 = sub_A7C4();
    ((void (*)(uint64_t))v13)(v15);
  }
  v0[94] = v13;
  uint64_t v16 = v0[83];
  uint64_t v17 = v0[78];
  uint64_t v18 = v0[77];
  uint64_t v19 = v0[75];
  uint64_t v137 = v0[74];
  uint64_t v20 = v0[72];
  uint64_t v21 = v0[71];
  uint64_t v22 = (void *)v0[54];
  sub_856C(v0[84]);
  sub_8B30(v16);
  uint64_t v23 = v22[3];
  uint64_t v24 = v22[4];
  sub_2E38(v22, v23);
  (*(void (**)(uint64_t, uint64_t))(v24 + 72))(v23, v24);
  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v18, enum case for UsoEntity_common_MeasurementQualifier.DefinedValues.common_MeasurementQualifier_EndOf(_:), v21);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v18, 0, 1, v21);
  uint64_t v25 = v19 + *(int *)(v137 + 48);
  sub_9FA8(v17, v19, &qword_201CC0);
  sub_9FA8(v18, v25, &qword_201CC0);
  sub_A208(v19, 1, v21);
  if (v88)
  {
    uint64_t v26 = v0[78];
    uint64_t v27 = v0[71];
    sub_A068(v0[77], &qword_201CC0);
    sub_A068(v26, &qword_201CC0);
    sub_A208(v25, 1, v27);
    if (!v88) {
      goto LABEL_11;
    }
    sub_A068(v0[75], &qword_201CC0);
  }
  else
  {
    uint64_t v28 = v0[71];
    sub_9FA8(v0[75], v0[76], &qword_201CC0);
    int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v25, 1, v28);
    uint64_t v30 = v0[78];
    uint64_t v31 = v0[77];
    uint64_t v32 = v0[76];
    if (v29 == 1)
    {
      sub_A068(v0[77], &qword_201CC0);
      sub_A068(v30, &qword_201CC0);
      uint64_t v33 = sub_A7D0();
      v34(v33);
LABEL_11:
      sub_A068(v0[75], &qword_201E08);
LABEL_12:
      uint64_t v35 = v0[79];
      uint64_t v36 = v0[65];
      sub_9FA8(v0[84], v35, &qword_201E10);
      sub_A208(v35, 1, v36);
      if (!v88)
      {
        uint64_t v58 = v0[83];
        uint64_t v59 = v0[68];
        uint64_t v60 = v0[67];
        uint64_t v61 = v0[66];
        uint64_t v62 = v0[54];
        (*(void (**)(uint64_t, void, void))(v61 + 32))(v60, v0[79], v0[65]);
        sub_1AABC0();
        sub_90CC(v60, v58, v59, v63, v64, v65, v66, v67, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134,
          v135);
        v68 = *(void (**)(uint64_t))(v61 + 8);
        v0[100] = v68;
        v0[101] = (v61 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v69 = sub_A418();
        v68(v69);
        sub_1AABC0();
        sub_92F4();
        uint64_t v70 = sub_A418();
        v68(v70);
        sub_9DE0(v62 + 200, (uint64_t)(v0 + 27));
        sub_2E38(v0 + 27, v0[30]);
        uint64_t v71 = swift_task_alloc();
        v0[102] = v71;
        *(void *)(v71 + 16) = v60;
        *(void *)(v71 + 24) = v62;
        v72 = (void *)swift_task_alloc();
        v0[103] = v72;
        void *v72 = v0;
        v72[1] = sub_8000;
        sub_A5EC();
        return sub_85FA8();
      }
      sub_A068(v0[79], &qword_201E10);
      sub_A340();
      uint64_t v37 = sub_A454();
      v38(v37);
      uint64_t v39 = sub_1AC7F0();
      os_log_type_t v40 = sub_1ACF60();
      if (os_log_type_enabled(v39, v40))
      {
        *(_WORD *)swift_slowAlloc() = 0;
        sub_A7FC(&def_342E4, v41, v42, "Failed to return cycle tracking prediction: start date not available.");
        sub_A1F0();
      }
      uint64_t v43 = v0[84];
      uint64_t v44 = v0[83];
      uint64_t v46 = (int *)v0[63];
      uint64_t v45 = (unsigned char *)v0[64];
      uint64_t v47 = v0[54];

      uint64_t v48 = sub_A520();
      v49(v48);
      char v50 = *(unsigned char *)(v47 + 248);
      uint64_t v51 = (uint64_t)&v45[v46[5]];
      uint64_t v52 = sub_1AAA10();
      sub_A708(v51, v53, v54, v52);
      sub_9DE0(v47 + 40, (uint64_t)&v45[v46[6]]);
      sub_9B48(v47 + 80, (uint64_t)&v45[v46[7]]);
      uint64_t v55 = sub_1AB1C0();
      swift_allocObject();
      uint64_t v56 = sub_1AB1B0();
      v57 = (uint64_t *)&v45[v46[8]];
      v57[3] = v55;
      v57[4] = (uint64_t)&protocol witness table for ResponseFactory;
      uint64_t *v57 = v56;
      type metadata accessor for WellnessCATsSimple();
LABEL_30:
      sub_1AC240();
      uint64_t v104 = sub_1AC210();
      type metadata accessor for WellnessCATs();
      sub_1AC240();
      uint64_t v105 = sub_1AC1A0();
      *uint64_t v45 = v50;
      *(void *)&v45[v46[9]] = v104;
      *(void *)&v45[v46[10]] = v105;
      sub_9F60(&qword_201DF0, (void (*)(uint64_t))type metadata accessor for UnavailableDataFlow);
      sub_1AAF70();
      sub_9CE4((uint64_t)v45);
      sub_A068(v44, &qword_201E10);
      sub_A068(v43, &qword_201E10);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_A5EC();
      __asm { BRAA            X2, X16 }
    }
    uint64_t v75 = v0[75];
    uint64_t v76 = v0[73];
    uint64_t v77 = v0[72];
    uint64_t v78 = v0[71];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v76, v25, v78);
    sub_9F60(&qword_201E18, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues);
    char v79 = sub_1ACDB0();
    v80 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
    v80(v76, v78);
    sub_A068(v31, &qword_201CC0);
    sub_A068(v30, &qword_201CC0);
    v80(v32, v78);
    sub_A068(v75, &qword_201CC0);
    if ((v79 & 1) == 0) {
      goto LABEL_12;
    }
  }
  uint64_t v81 = v0[82];
  uint64_t v82 = v0[65];
  sub_9FA8(v0[84], v81, &qword_201E10);
  sub_A208(v81, 1, v82);
  if (v88)
  {
    v83 = v0 + 82;
LABEL_27:
    sub_A068(*v83, &qword_201E10);
    sub_A340();
    uint64_t v89 = sub_A454();
    v90(v89);
    v91 = sub_1AC7F0();
    os_log_type_t v92 = sub_1ACF60();
    if (os_log_type_enabled(v91, v92))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_A7FC(&def_342E4, v93, v94, "Failed to return cycle tracking prediction: start and/or end dates not available.");
      sub_A1F0();
    }
    uint64_t v138 = v0[84];
    uint64_t v44 = v0[83];
    uint64_t v46 = (int *)v0[63];
    uint64_t v45 = (unsigned char *)v0[64];
    uint64_t v95 = v0[54];

    uint64_t v96 = sub_A520();
    v97(v96);
    char v50 = *(unsigned char *)(v95 + 248);
    uint64_t v98 = (uint64_t)&v45[v46[5]];
    uint64_t v99 = sub_1AAA10();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v98, 1, 1, v99);
    sub_9DE0(v95 + 40, (uint64_t)&v45[v46[6]]);
    uint64_t v100 = v95 + 80;
    uint64_t v43 = v138;
    sub_9B48(v100, (uint64_t)&v45[v46[7]]);
    uint64_t v101 = sub_1AB1C0();
    swift_allocObject();
    uint64_t v102 = sub_1AB1B0();
    v103 = (uint64_t *)&v45[v46[8]];
    v103[3] = v101;
    v103[4] = (uint64_t)&protocol witness table for ResponseFactory;
    uint64_t *v103 = v102;
    type metadata accessor for WellnessCATsSimple();
    goto LABEL_30;
  }
  uint64_t v84 = v0[83];
  uint64_t v85 = v0[81];
  uint64_t v86 = v0[65];
  v87 = *(void (**)(uint64_t, void, uint64_t))(v0[66] + 32);
  v87(v0[70], v0[82], v86);
  sub_9FA8(v84, v85, &qword_201E10);
  sub_A208(v85, 1, v86);
  if (v88)
  {
    v83 = v0 + 81;
    (*(void (**)(void, void))(v0[66] + 8))(v0[70], v0[65]);
    goto LABEL_27;
  }
  uint64_t v108 = v0[80];
  uint64_t v109 = v0[69];
  uint64_t v110 = v0[68];
  uint64_t v111 = v0[66];
  uint64_t v112 = v0[65];
  uint64_t v139 = v0[54];
  v87(v109, v0[81], v112);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 16))(v108, v109, v112);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v108, 0, 1, v112);
  sub_1AABC0();
  uint64_t v113 = sub_A7C4();
  sub_90CC(v113, v114, v110, v115, v116, v117, v118, v119, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134,
    v135);
  v120 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
  v0[95] = v120;
  v0[96] = (v111 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v120(v110, v112);
  sub_A068(v108, &qword_201E10);
  sub_9DE0(v139 + 200, (uint64_t)(v0 + 22));
  sub_2E38(v0 + 22, v0[25]);
  uint64_t v121 = swift_task_alloc();
  v0[97] = v121;
  *(void *)(v121 + 16) = v109;
  *(void *)(v121 + 24) = v139;
  v122 = (void *)swift_task_alloc();
  v0[98] = v122;
  void *v122 = v0;
  v122[1] = sub_7A6C;
  sub_A5EC();
  return sub_85C50();
}

uint64_t sub_7A6C()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  *uint64_t v3 = v2;
  v2[44] = v1;
  v2[45] = v4;
  v2[46] = v0;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v7 + 792) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_7B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_A370();
  sub_A6E8();
  int v29 = (void (*)(uint64_t))v27[95];
  uint64_t v30 = sub_A6D4();
  v29(v30);
  ((void (*)(uint64_t, uint64_t))v29)(v26, v28);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v27 + 22));
  uint64_t v31 = (void *)v27[45];
  sub_A2D0();
  uint64_t v32 = sub_A474();
  v33(v32);
  sub_1AB370();
  uint64_t v34 = sub_A584();
  v35(v34);
  id v36 = [v31 patternId];
  sub_1ACDD0();

  sub_1AB380();
  v27[50] = sub_A38C();
  sub_1AAEF0();
  uint64_t v48 = sub_1AAF70();

  swift_release();
  uint64_t v37 = sub_A538();
  v38(v37);
  sub_A068(a21, &qword_201E10);
  sub_A068(a22, &qword_201E10);
  sub_A10C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A444();
  sub_A324();
  return v41(v39, v40, v41, v42, v43, v44, v45, v46, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           v48,
           a24,
           a25,
           a26);
}

uint64_t sub_7D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_A370();
  sub_A6E8();
  uint64_t v31 = v27[96];
  uint64_t v32 = (void (*)(uint64_t))v27[95];
  uint64_t v33 = sub_A6D4();
  v32(v33);
  ((void (*)(uint64_t, uint64_t))v32)(v26, v28);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v27 + 22));
  uint64_t v34 = v27[99];
  sub_A29C();
  v29(v28, v27 + 22, v31);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v35 = (void *)sub_1AC7F0();
  os_log_type_t v36 = sub_1ACF60();
  if (sub_A3D0(v36))
  {
    sub_A4B0();
    uint64_t v37 = (void *)sub_A494();
    sub_A684(5.7779e-34);
    uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
    sub_A4C8(v38);
    *uint64_t v37 = v30;
    swift_errorRelease();
    swift_errorRelease();
    sub_A27C(&def_342E4, v39, v40, "Error executing pattern: %@");
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v41 = sub_A23C();
  v42(v41);
  sub_9B48(v28 + 80, (uint64_t)v35);
  sub_9BA4();
  uint64_t v52 = sub_1AAF70();
  sub_9BF0((uint64_t)v35);
  sub_A068((uint64_t)(v27 + 32), &qword_201E10);
  sub_A068(v34, &qword_201E10);
  sub_A10C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A444();
  sub_A324();
  return v45(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           v52,
           a24,
           a25,
           a26);
}

uint64_t sub_8000()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  *uint64_t v3 = v2;
  v2[47] = v1;
  v2[48] = v4;
  v2[49] = v0;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v7 + 832) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_80FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_A370();
  sub_A6E8();
  uint64_t v27 = sub_A7B0();
  v28(v27);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v26 + 216);
  int v29 = *(void **)(v26 + 384);
  sub_A2D0();
  uint64_t v30 = sub_A474();
  v31(v30);
  sub_1AB370();
  uint64_t v32 = sub_A584();
  v33(v32);
  id v34 = [v29 patternId];
  sub_1ACDD0();

  sub_1AB380();
  *(void *)(v26 + 400) = sub_A38C();
  sub_1AAEF0();
  uint64_t v46 = sub_1AAF70();

  swift_release();
  uint64_t v35 = sub_A538();
  v36(v35);
  sub_A068(a21, &qword_201E10);
  sub_A068(a22, &qword_201E10);
  sub_A10C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A444();
  sub_A324();
  return v39(v37, v38, v39, v40, v41, v42, v43, v44, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           v46,
           a24,
           a25,
           a26);
}

uint64_t sub_8300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_A370();
  sub_A6E8();
  uint64_t v31 = sub_A7B0();
  v32(v31);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v26 + 216);
  uint64_t v33 = *(void *)(v26 + 832);
  sub_A29C();
  v29(v27, v26 + 216, v28);
  swift_errorRetain();
  swift_errorRetain();
  id v34 = (void *)sub_1AC7F0();
  os_log_type_t v35 = sub_1ACF60();
  if (sub_A3D0(v35))
  {
    sub_A4B0();
    os_log_type_t v36 = (void *)sub_A494();
    sub_A684(5.7779e-34);
    uint64_t v37 = _swift_stdlib_bridgeErrorToNSError();
    sub_A4C8(v37);
    *os_log_type_t v36 = v30;
    swift_errorRelease();
    swift_errorRelease();
    sub_A27C(&def_342E4, v38, v39, "Error executing pattern: %@");
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v40 = sub_A23C();
  v41(v40);
  sub_9B48(v27 + 80, (uint64_t)v34);
  sub_9BA4();
  uint64_t v51 = sub_1AAF70();
  sub_9BF0((uint64_t)v34);
  sub_A068(v26 + 256, &qword_201E10);
  sub_A068(v33, &qword_201E10);
  sub_A10C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A444();
  sub_A324();
  return v44(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           v51,
           a24,
           a25,
           a26);
}

uint64_t sub_856C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v82 = sub_A77C(a1);
  sub_52C4();
  uint64_t v79 = v7;
  __chkstk_darwin(v8);
  uint64_t v78 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A358();
  __chkstk_darwin(v10);
  v80 = (char *)&v76 - v11;
  sub_A358();
  uint64_t v13 = __chkstk_darwin(v12);
  sub_A720(v13, v14, v15, v16, v17, v18, v19, v20, v76);
  uint64_t v21 = sub_2694(&qword_201E10);
  uint64_t v22 = sub_53D4(v21);
  __chkstk_darwin(v22);
  uint64_t v77 = (char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A358();
  __chkstk_darwin(v24);
  uint64_t v76 = (uint64_t)&v76 - v25;
  sub_A358();
  __chkstk_darwin(v26);
  sub_A754();
  __chkstk_darwin(v27);
  sub_A5DC();
  __chkstk_darwin(v28);
  sub_A768();
  __chkstk_darwin(v29);
  sub_A5CC();
  uint64_t v30 = sub_2694(&qword_201CB8);
  uint64_t v31 = sub_53D4(v30);
  __chkstk_darwin(v31);
  sub_A314();
  uint64_t v34 = v32 - v33;
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v76 - v36;
  uint64_t v39 = v2[3];
  uint64_t v38 = v2[4];
  sub_2E38(v2, v39);
  sub_A6F4();
  v40(v39, v38);
  uint64_t v41 = sub_1AB880();
  sub_A208((uint64_t)v37, 1, v41);
  if (v45) {
    goto LABEL_13;
  }
  sub_9FA8((uint64_t)v37, v34, &qword_201CB8);
  sub_A1CC();
  uint64_t v43 = v42;
  int v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 88))(v34, v41);
  BOOL v45 = v44 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Last(_:)
     || v44 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Previous(_:);
  if (!v45)
  {
    if (v44 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Next(_:))
    {
      id v49 = [v6 nextPeriodStart];
      if (v49)
      {
        uint64_t v50 = v49;
        sub_1AABB0();

        uint64_t v51 = 0;
      }
      else
      {
        uint64_t v51 = 1;
      }
      uint64_t v72 = v81;
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, v51, 1, v82);
      uint64_t v73 = v5;
      uint64_t v74 = v72;
      goto LABEL_35;
    }
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v34, v41);
LABEL_13:
    id v52 = [v6 lastPeriodStart];
    if (v52)
    {
      uint64_t v53 = v52;
      sub_A6BC();

      uint64_t v54 = v79;
      uint64_t v55 = *(void (**)(void))(v79 + 32);
      uint64_t v56 = v82;
      sub_A1E0();
      v55();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, v56);
      sub_A208(v1, 1, v56);
      if (!v45)
      {
        sub_A1E0();
        v55();
        id v57 = [v6 nextPeriodStart];
        if (v57)
        {
          uint64_t v58 = v57;
          sub_A6BC();

          sub_A1E0();
          v55();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v4, 0, 1, v56);
          sub_A208(v4, 1, v56);
          if (!v45)
          {
            sub_A1E0();
            v55();
            sub_1AABC0();
            sub_1AAB40();
            double v60 = v59;
            uint64_t v61 = *(void (**)(void))(v54 + 8);
            sub_A26C();
            v61();
            sub_1AAB40();
            double v63 = vabdd_f64(v62, v60);
            sub_1AAB40();
            if (v63 >= vabdd_f64(v64, v60))
            {
              id v75 = [v6 nextPeriodStart];
              if (!v75)
              {
                uint64_t v67 = (uint64_t)v77;
                goto LABEL_34;
              }
              uint64_t v66 = v75;
              uint64_t v67 = (uint64_t)v77;
            }
            else
            {
              id v65 = [v6 lastPeriodStart];
              if (!v65)
              {
                uint64_t v67 = v76;
                goto LABEL_34;
              }
              uint64_t v66 = v65;
              uint64_t v67 = v76;
            }
            sub_1AABB0();

LABEL_34:
            sub_A26C();
            v61();
            sub_A26C();
            v61();
            sub_A734();
            uint64_t v73 = v67;
            uint64_t v74 = v81;
LABEL_35:
            sub_A008(v73, v74, &qword_201E10);
            return sub_A068((uint64_t)v37, &qword_201CB8);
          }
        }
        else
        {
          sub_A3FC(v4);
        }
        uint64_t v69 = sub_A79C();
        v70(v69);
LABEL_26:
        uint64_t v71 = v81;
        sub_A068(v4, &qword_201E10);
        sub_A068((uint64_t)v37, &qword_201CB8);
        return sub_A3FC(v71);
      }
    }
    else
    {
      sub_A59C();
    }
    uint64_t v4 = v1;
    goto LABEL_26;
  }
  sub_A068((uint64_t)v37, &qword_201CB8);
  id v46 = [v6 lastPeriodStart];
  if (v46)
  {
    uint64_t v47 = v46;
    sub_1AABB0();

    uint64_t v48 = 0;
  }
  else
  {
    uint64_t v48 = 1;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, v48, 1, v82);
  return sub_A008(v3, v81, &qword_201E10);
}

uint64_t sub_8B30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v82 = sub_A77C(a1);
  sub_52C4();
  uint64_t v79 = v7;
  __chkstk_darwin(v8);
  uint64_t v78 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A358();
  __chkstk_darwin(v10);
  v80 = (char *)&v76 - v11;
  sub_A358();
  uint64_t v13 = __chkstk_darwin(v12);
  sub_A720(v13, v14, v15, v16, v17, v18, v19, v20, v76);
  uint64_t v21 = sub_2694(&qword_201E10);
  uint64_t v22 = sub_53D4(v21);
  __chkstk_darwin(v22);
  uint64_t v77 = (char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A358();
  __chkstk_darwin(v24);
  uint64_t v76 = (uint64_t)&v76 - v25;
  sub_A358();
  __chkstk_darwin(v26);
  sub_A754();
  __chkstk_darwin(v27);
  sub_A5DC();
  __chkstk_darwin(v28);
  sub_A768();
  __chkstk_darwin(v29);
  sub_A5CC();
  uint64_t v30 = sub_2694(&qword_201CB8);
  uint64_t v31 = sub_53D4(v30);
  __chkstk_darwin(v31);
  sub_A314();
  uint64_t v34 = v32 - v33;
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v76 - v36;
  uint64_t v39 = v2[3];
  uint64_t v38 = v2[4];
  sub_2E38(v2, v39);
  sub_A6F4();
  v40(v39, v38);
  uint64_t v41 = sub_1AB880();
  sub_A208((uint64_t)v37, 1, v41);
  if (!v42)
  {
    sub_9FA8((uint64_t)v37, v34, &qword_201CB8);
    sub_A1CC();
    uint64_t v44 = v43;
    int v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 88))(v34, v41);
    if (v45 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Last(_:))
    {
      id v46 = [v6 lastPeriodEnd];
      if (v46)
      {
        uint64_t v47 = v46;
        sub_1AABB0();

        uint64_t v48 = 0;
      }
      else
      {
        uint64_t v48 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, v48, 1, v82);
      uint64_t v68 = v3;
      goto LABEL_20;
    }
    if (v45 == enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Next(_:))
    {
      id v49 = [v6 nextPeriodEnd];
      if (v49)
      {
        uint64_t v50 = v49;
        sub_1AABB0();

        uint64_t v51 = 0;
      }
      else
      {
        uint64_t v51 = 1;
      }
      uint64_t v74 = v81;
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, v51, 1, v82);
      uint64_t v68 = v5;
      uint64_t v69 = v74;
      goto LABEL_26;
    }
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v34, v41);
  }
  id v52 = [v6 lastPeriodEnd];
  if (!v52)
  {
    sub_A59C();
    goto LABEL_17;
  }
  uint64_t v53 = v52;
  sub_A6BC();

  uint64_t v54 = v79;
  uint64_t v55 = *(void (**)(void))(v79 + 32);
  uint64_t v56 = v82;
  sub_A1E0();
  v55();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, v56);
  sub_A208(v1, 1, v56);
  if (v42)
  {
LABEL_17:
    uint64_t v4 = v1;
LABEL_23:
    uint64_t v72 = v81;
    sub_A068(v4, &qword_201E10);
    sub_A068((uint64_t)v37, &qword_201CB8);
    return sub_A3FC(v72);
  }
  sub_A1E0();
  v55();
  id v57 = [v6 nextPeriodEnd];
  if (!v57)
  {
    sub_A3FC(v4);
    goto LABEL_22;
  }
  uint64_t v58 = v57;
  sub_A6BC();

  sub_A1E0();
  v55();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v4, 0, 1, v56);
  sub_A208(v4, 1, v56);
  if (v42)
  {
LABEL_22:
    uint64_t v70 = sub_A79C();
    v71(v70);
    goto LABEL_23;
  }
  sub_A1E0();
  v55();
  sub_1AABC0();
  sub_1AAB40();
  double v60 = v59;
  uint64_t v61 = *(void (**)(void))(v54 + 8);
  sub_A26C();
  v61();
  sub_1AAB40();
  double v63 = vabdd_f64(v62, v60);
  sub_1AAB40();
  if (v63 >= vabdd_f64(v64, v60))
  {
    id v75 = [v6 nextPeriodEnd];
    if (!v75)
    {
      uint64_t v67 = (uint64_t)v77;
      goto LABEL_32;
    }
    uint64_t v66 = v75;
    uint64_t v67 = (uint64_t)v77;
  }
  else
  {
    id v65 = [v6 lastPeriodEnd];
    if (!v65)
    {
      uint64_t v67 = v76;
      goto LABEL_32;
    }
    uint64_t v66 = v65;
    uint64_t v67 = v76;
  }
  sub_1AABB0();

LABEL_32:
  sub_A26C();
  v61();
  sub_A26C();
  v61();
  sub_A734();
  uint64_t v68 = v67;
LABEL_20:
  uint64_t v69 = v81;
LABEL_26:
  sub_A008(v68, v69, &qword_201E10);
  return sub_A068((uint64_t)v37, &qword_201CB8);
}

void sub_90CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_A638();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v26 = sub_2694(&qword_201E10);
  uint64_t v27 = sub_53D4(v26);
  __chkstk_darwin(v27);
  sub_A608();
  uint64_t v28 = sub_1AABD0();
  sub_52C4();
  uint64_t v30 = v29;
  __chkstk_darwin(v31);
  sub_A314();
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v35 = (char *)&a9 - v34;
  __chkstk_darwin(v33);
  sub_A5CC();
  sub_9FA8(v25, v21, &qword_201E10);
  sub_A208(v21, 1, v28);
  if (v36)
  {
    sub_A068(v21, &qword_201E10);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v20, v21, v28);
    sub_9F60(&qword_201E30, (void (*)(uint64_t))&type metadata accessor for Date);
    char v37 = sub_1ACD80();
    uint64_t v38 = *(void (**)(void))(v30 + 16);
    sub_A3EC();
    v38();
    sub_A7C4();
    sub_A3EC();
    v38();
    if ((v37 & 1) == 0) {
      sub_1ACD80();
    }
    uint64_t v39 = *(void (**)(uint64_t))(v30 + 8);
    uint64_t v40 = sub_A7D0();
    v39(v40);
    ((void (*)(char *, uint64_t))v39)(v35, v28);
    ((void (*)(uint64_t, uint64_t))v39)(v20, v28);
  }
  sub_A56C();
}

void sub_92F4()
{
  sub_A638();
  uint64_t v2 = v1;
  uint64_t v3 = sub_1AABD0();
  sub_52C4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_A314();
  sub_A5DC();
  __chkstk_darwin(v7);
  LODWORD(v2) = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1, v3);
  uint64_t v8 = *(void (**)(void))(v5 + 16);
  sub_A3EC();
  v8();
  sub_A3EC();
  v8();
  if (v2 == 1)
  {
    sub_9F60(&qword_201E30, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_1ACD80();
  }
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v0, v3);
  uint64_t v10 = sub_A7D0();
  ((void (*)(uint64_t))v9)(v10);
  sub_A56C();
}

void sub_9454()
{
  sub_A638();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v56 = sub_1AAC20();
  sub_52C4();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_A608();
  uint64_t v11 = sub_2694(&qword_201CC8);
  uint64_t v12 = sub_53D4(v11);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_2694(&qword_201E20);
  uint64_t v16 = sub_53D4(v15);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_2694(&qword_201E28);
  uint64_t v20 = sub_53D4(v19);
  __chkstk_darwin(v20);
  sub_A620();
  sub_1AC100();
  uint64_t v21 = sub_1AC090();
  uint64_t v22 = *(int *)(v3(0) + 24);
  swift_release();
  uint64_t v57 = v7;
  *(void *)(v7 + v22) = v21;
  LOBYTE(v21) = *(unsigned char *)(v5 + 248);
  uint64_t v23 = sub_1AAA10();
  sub_A708((uint64_t)v14, v24, v25, v23);
  sub_153CEC(v21, v14);
  sub_A068((uint64_t)v14, &qword_201CC8);
  uint64_t v26 = sub_1AAB10();
  sub_A208((uint64_t)v18, 1, v26);
  if (v27)
  {
    sub_A068((uint64_t)v18, &qword_201E20);
    uint64_t v28 = sub_1AC1E0();
    sub_A708(v0, v29, v30, v28);
  }
  else
  {
    id v31 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v32);
    uint64_t v34 = v33;
    [v31 setPunchOutUri:v33];

    id v35 = v31;
    sub_1AAC10();
    uint64_t v36 = sub_1AABE0();
    uint64_t v38 = v37;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v56);
    sub_1949C4(v36, v38, v35);

    id v39 = [v35 dictionary];
    if (v39)
    {
      uint64_t v40 = v39;
      uint64_t v41 = self;
      id v58 = 0;
      id v42 = [v41 dataWithPropertyList:v40 format:200 options:0 error:&v58];
      id v43 = v58;
      if (v42)
      {
        uint64_t v44 = sub_1AAB30();
        unint64_t v46 = v45;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v44, v46);
        swift_bridgeObjectRelease();
        uint64_t v47 = sub_1AC1E0();
        uint64_t v48 = v0;
        uint64_t v49 = 0;
      }
      else
      {
        uint64_t v53 = v43;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v47 = sub_1AC1E0();
        uint64_t v48 = v0;
        uint64_t v49 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v48, v49, 1, v47);
    }
    else
    {
      uint64_t v50 = sub_1AC1E0();
      sub_A708(v0, v51, v52, v50);
    }
    sub_A5C0();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v18, v26);
  }
  sub_9EA0(v0, v57);
  sub_A56C();
}

uint64_t sub_9864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_9914;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t sub_9914()
{
  sub_A364();
  uint64_t v2 = v1;
  sub_A1B4();
  uint64_t v3 = *v0;
  sub_A304();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t sub_99E4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_9A7C;
  return sub_5BBC();
}

uint64_t sub_9A7C()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_9B48(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_9BA4()
{
  unint64_t result = qword_201DD8;
  if (!qword_201DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_201DD8);
  }
  return result;
}

uint64_t sub_9BF0(uint64_t a1)
{
  return a1;
}

unint64_t sub_9C44()
{
  unint64_t result = qword_201DE8;
  if (!qword_201DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_201DE8);
  }
  return result;
}

uint64_t sub_9C90(uint64_t a1)
{
  return a1;
}

uint64_t sub_9CE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnavailableDataFlow();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_9D40()
{
  unint64_t result = qword_201E00;
  if (!qword_201E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_201E00);
  }
  return result;
}

uint64_t sub_9D8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_9DE0(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  sub_A5C0();
  (*v3)(a2);
  return a2;
}

void sub_9E40()
{
}

void sub_9E70()
{
}

uint64_t sub_9EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_201E28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_9F08(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_9F60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_9FA8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2694(a3);
  sub_A5C0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_A008(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2694(a3);
  sub_A5C0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_A068(uint64_t a1, uint64_t *a2)
{
  sub_2694(a2);
  sub_A5C0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unint64_t sub_A0C0()
{
  unint64_t result = qword_201E40;
  if (!qword_201E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_201E40);
  }
  return result;
}

uint64_t sub_A10C()
{
  *(void *)(v1 - 88) = *(void *)(v0 + 456);
  return swift_task_dealloc();
}

uint64_t sub_A19C(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_A1F0()
{
  return swift_slowDealloc();
}

uint64_t sub_A208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, a2, a3);
}

uint64_t sub_A220()
{
  return swift_task_alloc();
}

uint64_t sub_A23C()
{
  return *(void *)(v0 + 696);
}

void sub_A27C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_A29C()
{
  return swift_beginAccess();
}

uint64_t sub_A2D0()
{
  *(void *)(v1 - 88) = *(void *)(v0 + 672);
  return sub_1AB070();
}

uint64_t sub_A340()
{
  return swift_beginAccess();
}

uint64_t sub_A38C()
{
  sub_2E38((void *)(v0 + 80), *(void *)(v0 + 104));
  return sub_1AAF40();
}

BOOL sub_A3D0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_A3FC(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 1, 1, v1);
}

uint64_t sub_A418()
{
  return v0;
}

uint64_t sub_A42C()
{
  return swift_task_alloc();
}

uint64_t sub_A444()
{
  return *(void *)(v0 - 80);
}

uint64_t sub_A454()
{
  return v0;
}

uint64_t sub_A474()
{
  return v0;
}

uint64_t sub_A494()
{
  return swift_slowAlloc();
}

uint64_t sub_A4B0()
{
  return swift_slowAlloc();
}

uint64_t sub_A4C8(uint64_t a1)
{
  *(void *)(v1 + 408) = a1;
  return sub_1ACFE0();
}

void sub_A4FC()
{
  sub_1AC390();
}

uint64_t sub_A520()
{
  return v0;
}

uint64_t sub_A538()
{
  return v0;
}

uint64_t sub_A550()
{
  return swift_allocObject();
}

uint64_t sub_A584()
{
  return v0;
}

uint64_t sub_A59C()
{
  uint64_t v3 = *(void *)(v1 - 104);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 1, 1, v3);
}

uint64_t sub_A660()
{
  return swift_task_dealloc();
}

uint64_t sub_A684(float a1)
{
  *uint64_t v1 = a1;
  return swift_errorRetain();
}

uint64_t sub_A6A4()
{
  return sub_1AC240();
}

uint64_t sub_A6BC()
{
  return sub_1AABB0();
}

uint64_t sub_A6D4()
{
  return *(void *)(v0 + 560);
}

uint64_t sub_A708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 1, 1, a4);
}

void sub_A720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 128) = (char *)&a9 - v9;
}

uint64_t sub_A734()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, v0, 1, v2);
}

uint64_t sub_A77C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 112) = a1;
  return sub_1AABD0();
}

uint64_t sub_A79C()
{
  return *(void *)(v0 - 128);
}

uint64_t sub_A7B0()
{
  return *(void *)(v0 + 536);
}

uint64_t sub_A7C4()
{
  return v0;
}

uint64_t sub_A7D0()
{
  return v0;
}

void sub_A7DC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void sub_A7FC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

__n128 GenericBinaryButtonSnippet.init(model:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v9 = (__n128)a1[1];
  long long v10 = *a1;
  uint64_t v3 = *((void *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 5);
  char v5 = a1[3] & 1;
  sub_1ACD40();
  sub_AF70((unint64_t *)&qword_201C48, (void (*)(uint64_t))&type metadata accessor for Context);
  uint64_t v6 = sub_1AC880();
  __n128 result = v9;
  *(_OWORD *)a2 = v10;
  *(__n128 *)(a2 + 16) = v9;
  *(void *)(a2 + 32) = v3;
  *(void *)(a2 + 40) = v4;
  *(unsigned char *)(a2 + 48) = v5;
  *(void *)(a2 + 56) = v6;
  *(void *)(a2 + 64) = v8;
  return result;
}

uint64_t GenericBinaryButtonSnippet.body.getter()
{
  uint64_t v1 = swift_allocObject();
  memcpy((void *)(v1 + 16), v0, 0x48uLL);
  sub_AF18((uint64_t)v0);
  sub_1ACCD0();
  sub_AF70(&qword_201E48, (void (*)(uint64_t))&type metadata accessor for BinaryButtonView);

  return sub_1ACCA0();
}

uint64_t sub_A99C(long long *a1)
{
  uint64_t v2 = sub_1ACC40();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2694(&qword_201E60);
  uint64_t v26 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2694(&qword_201E68);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v14 = a1[1];
  long long v31 = *a1;
  long long v32 = v14;
  long long v33 = a1[2];
  if (a1[3])
  {
    v35[0] = v33;
    long long v28 = v33;
    uint64_t v24 = v10;
    uint64_t v25 = v11;
    uint64_t v18 = swift_allocObject();
    memcpy((void *)(v18 + 16), a1, 0x48uLL);
    sub_B4D0((uint64_t)v35);
    sub_AF18((uint64_t)a1);
    sub_B4FC();
    sub_1ACC10();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for ButtonItemButtonStyle.Role.preferred(_:), v2);
    uint64_t v19 = sub_B56C((unint64_t *)&qword_201E78, &qword_201E60);
    sub_1ACB40();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v17 = *(void (**)(char *, uint64_t))(v26 + 8);
    v17(v8, v6);
    *(void *)&long long v28 = v6;
    *((void *)&v28 + 1) = v19;
    swift_getOpaqueTypeConformance2();
    uint64_t v20 = v24;
    uint64_t v16 = sub_1ACB30();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v20);
  }
  else
  {
    v35[0] = v33;
    long long v28 = v33;
    uint64_t v15 = swift_allocObject();
    memcpy((void *)(v15 + 16), a1, 0x48uLL);
    sub_AF18((uint64_t)a1);
    sub_B4D0((uint64_t)v35);
    sub_B4FC();
    sub_1ACC10();
    sub_B56C((unint64_t *)&qword_201E78, &qword_201E60);
    uint64_t v16 = sub_1ACB30();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v26 + 8);
    v17(v8, v6);
  }
  long long v34 = v32;
  long long v28 = v32;
  uint64_t v21 = swift_allocObject();
  memcpy((void *)(v21 + 16), a1, 0x48uLL);
  sub_AF18((uint64_t)a1);
  sub_B4D0((uint64_t)&v34);
  sub_B4FC();
  sub_1ACC10();
  uint64_t v29 = &type metadata for AnyView;
  uint64_t v30 = &protocol witness table for AnyView;
  *(void *)&long long v28 = v16;
  v27[3] = v6;
  v27[4] = sub_B56C(&qword_201E80, &qword_201E60);
  uint64_t v22 = sub_B5B0(v27);
  (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 16))(v22, v8, v6);
  sub_1ACCC0();
  return ((uint64_t (*)(char *, uint64_t))v17)(v8, v6);
}

uint64_t sub_AF10()
{
  return sub_A99C((long long *)(v0 + 16));
}

uint64_t sub_AF18(uint64_t a1)
{
  id v2 = *(id *)(a1 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_AF70(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_AFB8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_AFD4(uint64_t a1, char a2)
{
  id v2 = *(void **)(a1 + 56);
  if (v2)
  {
    sub_2694(&qword_201E88);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1ADCF0;
    id v5 = v2;
    sub_1AD030();
    *(void *)(inited + 96) = &type metadata for Bool;
    *(unsigned char *)(inited + 72) = a2;
    sub_1ACD60();
    sub_1ACD30();

    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1ACD40();
    sub_AF70((unint64_t *)&qword_201C48, (void (*)(uint64_t))&type metadata accessor for Context);
    uint64_t result = sub_1AC870();
    __break(1u);
  }
  return result;
}

uint64_t sub_B13C()
{
  return sub_1ACBA0();
}

uint64_t sub_B158()
{
  memcpy(__dst, v0, sizeof(__dst));
  return GenericBinaryButtonSnippet.body.getter();
}

void destroy for GenericBinaryButtonSnippet(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v2 = *(void **)(a1 + 56);
}

uint64_t initializeWithCopy for GenericBinaryButtonSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void **)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = v7;
  return a1;
}

uint64_t assignWithCopy for GenericBinaryButtonSnippet(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v5 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v5;
  id v6 = v5;

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

void *initializeWithTake for GenericBinaryButtonSnippet(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

uint64_t assignWithTake for GenericBinaryButtonSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericBinaryButtonSnippet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 72))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericBinaryButtonSnippet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericBinaryButtonSnippet()
{
  return &type metadata for GenericBinaryButtonSnippet;
}

uint64_t sub_B428()
{
  return sub_B56C(&qword_201E50, &qword_201E58);
}

uint64_t sub_B464(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_B4B0()
{
  return sub_AFD4(v0 + 16, 1);
}

uint64_t sub_B4D0(uint64_t a1)
{
  return a1;
}

unint64_t sub_B4FC()
{
  unint64_t result = qword_201E70;
  if (!qword_201E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_201E70);
  }
  return result;
}

uint64_t sub_B54C()
{
  return sub_AFD4(v0 + 16, 0);
}

uint64_t sub_B56C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_B464(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_B5B0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_B618()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_B66C()
{
  sub_A364();
  sub_E510();
  v0[16] = v1;
  v0[17] = v2;
  uint64_t v3 = sub_1AB4B0();
  v0[18] = v3;
  sub_A19C(v3);
  v0[19] = v4;
  v0[20] = sub_A42C();
  uint64_t v5 = sub_1AB420();
  v0[21] = v5;
  sub_A19C(v5);
  v0[22] = v6;
  v0[23] = sub_A42C();
  uint64_t v7 = sub_1AB450();
  v0[24] = v7;
  sub_A19C(v7);
  v0[25] = v8;
  v0[26] = sub_A42C();
  uint64_t v9 = sub_1AB3F0();
  v0[27] = v9;
  sub_A19C(v9);
  v0[28] = v10;
  v0[29] = sub_A42C();
  uint64_t v11 = sub_1AC800();
  v0[30] = v11;
  sub_A19C(v11);
  v0[31] = v12;
  v0[32] = sub_A220();
  v0[33] = swift_task_alloc();
  v0[34] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_B7D4()
{
  uint64_t v74 = v0;
  uint64_t v2 = v0 + 16;
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[28];
  uint64_t v7 = v2[13];
  uint64_t v8 = v2[11];
  uint64_t v9 = sub_1AC7D0();
  sub_A340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v9, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v1, v8);
  uint64_t v10 = sub_1AC7F0();
  os_log_type_t v11 = sub_1ACF50();
  uint64_t v12 = v72;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v71 = v72[31];
    uint64_t v13 = sub_E5BC();
    uint64_t v73 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = sub_1AD3E0();
    v72[14] = sub_4A278(v14, v15, &v73);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    sub_E468();
    uint64_t v16 = sub_1AD2C0();
    v72[15] = sub_4A278(v16, v17, &v73);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_E558();
    v18();
    _os_log_impl(&def_342E4, v10, v11, "%s received input: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v19 = *(void (**)(void))(v71 + 8);
    sub_E530();
    v19();
  }
  else
  {
    uint64_t v20 = v72[34];
    uint64_t v22 = v72[30];
    uint64_t v21 = v72[31];
    sub_E530();
    v23();

    uint64_t v19 = *(void (**)(void))(v21 + 8);
    ((void (*)(uint64_t, uint64_t))v19)(v20, v22);
  }
  uint64_t v25 = v72[22];
  uint64_t v24 = v72[23];
  uint64_t v26 = v72[21];
  sub_1AB3E0();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v25 + 88))(v24, v26) != enum case for Parse.uso(_:)) {
    goto LABEL_9;
  }
  uint64_t v28 = v72[25];
  uint64_t v27 = v72[26];
  uint64_t v29 = v72[23];
  uint64_t v30 = v72[24];
  uint64_t v32 = v72[19];
  uint64_t v31 = v72[20];
  uint64_t v33 = v72[18];
  (*(void (**)(uint64_t, void))(v72[22] + 96))(v29, v72[21]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v27, v29, v30);
  sub_1AB440();
  uint64_t v34 = sub_141EE8();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  if (!v34)
  {
LABEL_9:
    sub_E530();
    v43();
    sub_A340();
    sub_E524();
    v44();
    unint64_t v45 = sub_1AC7F0();
    os_log_type_t v46 = sub_1ACF60();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v73 = sub_E620();
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v48 = sub_1AD3E0();
      v72[11] = sub_4A278(v48, v49, &v73);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v45, v46, "%s received unsupported input", v47, 0xCu);
      uint64_t v42 = 1;
      swift_arrayDestroy();
      sub_A1F0();
      uint64_t v12 = v72;
      sub_A1F0();

      sub_E530();
      v50();
      uint64_t v37 = 0;
      uint64_t v41 = 0;
      goto LABEL_18;
    }

    sub_E530();
    v19();
    goto LABEL_17;
  }
  swift_retain();
  uint64_t v35 = sub_D8424();
  if (v36)
  {
    sub_A340();
    sub_E524();
    v51();
    swift_retain_n();
    uint64_t v52 = sub_1AC7F0();
    os_log_type_t v53 = sub_1ACF60();
    BOOL v54 = os_log_type_enabled(v52, v53);
    uint64_t v55 = v72[25];
    uint64_t v56 = v72[26];
    uint64_t v57 = v72[24];
    if (v54)
    {
      uint64_t v58 = sub_E5BC();
      uint64_t v73 = swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 136315394;
      uint64_t v59 = sub_1AD3E0();
      v72[12] = sub_4A278(v59, v60, &v73);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 12) = 2080;
      swift_retain();
      sub_D9A2C();
      uint64_t v62 = v61;
      unint64_t v64 = v63;
      swift_release();
      v72[13] = sub_4A278(v62, v64, &v73);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      sub_E608();
      _os_log_impl(&def_342E4, v52, v53, "%s did not find a magnitude in %s", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy();
      sub_A1F0();
      uint64_t v12 = v72;
      sub_A1F0();

      sub_E608();
    }
    else
    {

      swift_release_n();
    }
    sub_E530();
    v65();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v56, v57);
LABEL_17:
    uint64_t v37 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 1;
    goto LABEL_18;
  }
  uint64_t v37 = v35;
  char v38 = sub_D8704();
  if (v38 == 61)
  {
    uint64_t v39 = sub_E5D4();
    v40(v39);
    sub_E608();
    uint64_t v41 = 0;
    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v41 = sub_48170(v38);
    uint64_t v42 = v66;
    sub_E608();
    uint64_t v67 = sub_E5D4();
    v68(v67);
  }
LABEL_18:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v12[1];
  return v69(v37, v41, v42);
}

uint64_t sub_BFBC()
{
  sub_E510();
  uint64_t v35 = sub_1AB420();
  sub_52C4();
  uint64_t v34 = v0;
  __chkstk_darwin(v1);
  sub_E594();
  uint64_t v33 = v2;
  __chkstk_darwin(v3);
  sub_E638();
  sub_1AB3F0();
  sub_52C4();
  __chkstk_darwin(v4);
  sub_E548();
  sub_1AC800();
  sub_52C4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_E594();
  __chkstk_darwin(v8);
  sub_1AC7D0();
  sub_A340();
  sub_E524();
  v9();
  sub_E524();
  v10();
  os_log_type_t v11 = sub_1AC7F0();
  os_log_type_t v12 = sub_1ACF50();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v32 = v6;
    uint64_t v13 = sub_E5BC();
    v37[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = sub_1AD3E0();
    sub_4A278(v14, v15, v37);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    sub_1AB3E0();
    uint64_t v16 = sub_1ACE00();
    uint64_t v36 = sub_4A278(v16, v17, v37);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v18 = sub_E5A8();
    v19(v18);
    _os_log_impl(&def_342E4, v11, v12, "%s got %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    uint64_t v6 = v32;
    sub_A1F0();
  }
  else
  {
    uint64_t v20 = sub_E5A8();
    v21(v20);
  }

  uint64_t v22 = *(void (**)(void))(v6 + 8);
  sub_E530();
  v22();
  sub_1AB3E0();
  int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 88))(v33, v35);
  int v24 = enum case for Parse.uso(_:);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
  if (v23 == v24) {
    return sub_1AB0B0();
  }
  sub_A340();
  sub_E524();
  v26();
  uint64_t v27 = sub_1AC7F0();
  os_log_type_t v28 = sub_1ACF60();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = sub_E620();
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v30 = sub_1AD3E0();
    sub_4A278(v30, v31, &v36);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v27, v28, "%s not handling parse because it's not a uso parse", v29, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }

  sub_E530();
  v22();
  return sub_1AB0C0();
}

uint64_t sub_C4B8()
{
  sub_A364();
  v1[15] = v2;
  v1[16] = v0;
  sub_2694(&qword_202008);
  v1[17] = sub_A42C();
  uint64_t v3 = sub_1AB0A0();
  v1[18] = v3;
  sub_A19C(v3);
  v1[19] = v4;
  v1[20] = sub_A220();
  v1[21] = swift_task_alloc();
  uint64_t v5 = sub_1AB3D0();
  v1[22] = v5;
  sub_A19C(v5);
  v1[23] = v6;
  v1[24] = sub_A42C();
  uint64_t v7 = sub_1AC800();
  v1[25] = v7;
  sub_A19C(v7);
  v1[26] = v8;
  v1[27] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_C5D8()
{
  sub_E588();
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = sub_1AC7D0();
  sub_A340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&def_342E4, v5, v6, "prompt for value: defaulting to identifier", v7, 2u);
    sub_A1F0();
  }
  uint64_t v9 = v0[26];
  uint64_t v8 = v0[27];
  uint64_t v10 = v0[25];
  uint64_t v11 = v0[16];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  unint64_t v12 = sub_2F2B8(*(unsigned char *)(v11 + 16));
  uint64_t v14 = v13;
  v0[28] = v13;
  sub_E3FC(v11 + 104, (uint64_t)(v0 + 2));
  sub_2E38(v0 + 2, v0[5]);
  uint64_t v15 = swift_task_alloc();
  v0[29] = v15;
  *(void *)(v15 + 16) = v12;
  *(void *)(v15 + 24) = v14;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[30] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_C798;
  return sub_135120();
}

uint64_t sub_C798()
{
  sub_A364();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 248) = v5;
  *(void *)(v3 + 256) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_C88C()
{
  uint64_t v1 = (void *)v0[31];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[19];
  uint64_t v6 = v0[16];
  uint64_t v5 = v0[17];
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2));
  sub_1AB080();
  sub_E524();
  v7();
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1AB3B0();
  sub_1AB390();
  sub_D744(v5);
  uint64_t v8 = sub_1AB190();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, 0, 1, v8);
  sub_1AB3A0();
  id v9 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_E3FC(v6 + 184, (uint64_t)(v0 + 7));
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[11];
  sub_2E38(v0 + 7, v10);
  unint64_t v12 = (void *)swift_task_alloc();
  v0[33] = v12;
  *unint64_t v12 = v0;
  v12[1] = sub_CA68;
  uint64_t v13 = v0[31];
  uint64_t v14 = v0[24];
  uint64_t v15 = v0[15];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v15, v13, v14, v10, v11);
}

uint64_t sub_CA68()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 272) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_CB48()
{
  sub_E588();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  sub_E5E8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v1();
}

uint64_t sub_CBEC()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_CCC8()
{
  sub_E588();

  uint64_t v1 = sub_E570();
  v2(v1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  sub_E5E8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v3();
}

uint64_t sub_CD74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_2694(&qword_201E28);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    sub_1ACE40();
    uint64_t v8 = sub_1AC1E0();
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v8 = sub_1AC1E0();
    uint64_t v9 = 1;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, v9, 1, v8);
  return sub_9EA0((uint64_t)v7, a1);
}

uint64_t sub_CE40()
{
  sub_A364();
  v1[13] = v2;
  v1[14] = v0;
  v1[12] = v3;
  sub_E510();
  v1[15] = v4;
  uint64_t v5 = sub_1AB0A0();
  v1[16] = v5;
  sub_A19C(v5);
  v1[17] = v6;
  v1[18] = sub_A220();
  v1[19] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v1[20] = v7;
  sub_A19C(v7);
  v1[21] = v8;
  v1[22] = sub_A42C();
  uint64_t v9 = sub_1AC800();
  v1[23] = v9;
  sub_A19C(v9);
  v1[24] = v10;
  v1[25] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_CF44()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0;
  uint64_t v4 = v0 + 24;
  uint64_t v3 = v0[24];
  uint64_t v2 = v4[1];
  uint64_t v5 = v1[23];
  uint64_t v6 = sub_1AC7D0();
  sub_A340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v5);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = sub_1AC7F0();
  os_log_type_t v8 = sub_1ACF50();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = sub_E5BC();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v20 = sub_E620();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = sub_1AD3E0();
    v1[10] = sub_4A278(v11, v12, &v20);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v1[11] = v13;
    sub_1ACFE0();
    *uint64_t v10 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_342E4, v7, v8, "%s makeErrorResponse called with error: %@", (uint8_t *)v9, 0x16u);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    sub_E558();
    v14();
  }
  else
  {
    uint64_t v16 = v1[24];
    uint64_t v15 = v1[25];
    uint64_t v17 = v1[23];
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  sub_2E38((void *)(v1[14] + 64), *(void *)(v1[14] + 88));
  uint64_t v18 = (void *)swift_task_alloc();
  v1[26] = v18;
  *uint64_t v18 = v1;
  v18[1] = sub_D218;
  return sub_9D67C();
}

uint64_t sub_D218()
{
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 216) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    return v6();
  }
  else
  {
    sub_A4F0();
    return _swift_task_switch(v8, v9, v10);
  }
}

uint64_t sub_D350()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[14];
  sub_1AB090();
  sub_E524();
  v6();
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1AB390();
  id v7 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_E3FC(v5 + 184, (uint64_t)(v0 + 2));
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[6];
  sub_2E38(v0 + 2, v8);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[28] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_D4E8;
  uint64_t v11 = v0[27];
  uint64_t v12 = v0[22];
  uint64_t v13 = v0[12];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v13, v11, v12, v8, v9);
}

uint64_t sub_D4E8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 232) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_D5C8()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_D698()
{
  uint64_t v1 = sub_E570();
  v2(v1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v3();
}

uint64_t sub_D744@<X0>(uint64_t a1@<X8>)
{
  uint64_t v63 = a1;
  uint64_t v1 = sub_1AC800();
  sub_52C4();
  uint64_t v64 = v2;
  __chkstk_darwin(v3);
  sub_A314();
  uint64_t v6 = v4 - v5;
  __chkstk_darwin(v7);
  uint64_t v62 = (char *)v52 - v8;
  sub_E638();
  sub_1AB190();
  sub_52C4();
  uint64_t v53 = v10;
  uint64_t v54 = v9;
  __chkstk_darwin(v9);
  sub_E548();
  uint64_t v13 = v12 - v11;
  sub_1AB580();
  sub_52C4();
  uint64_t v60 = v15;
  uint64_t v61 = v14;
  __chkstk_darwin(v14);
  sub_E548();
  uint64_t v57 = v17 - v16;
  sub_E638();
  sub_1AB540();
  sub_52C4();
  uint64_t v58 = v19;
  uint64_t v59 = v18;
  __chkstk_darwin(v18);
  sub_A314();
  __chkstk_darwin(v20);
  uint64_t v21 = sub_2694(&qword_201FF8);
  __chkstk_darwin(v21 - 8);
  sub_E548();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = sub_1AB490();
  sub_52C4();
  uint64_t v56 = v26;
  __chkstk_darwin(v27);
  sub_A314();
  __chkstk_darwin(v28);
  uint64_t v55 = (char *)v52 - v29;
  sub_E638();
  sub_1ABB90();
  uint64_t v30 = sub_1ABB70();
  sub_1AB5F0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v24, 1, v25) == 1)
  {
    sub_E39C(v24);
    sub_1AC7E0();
    sub_A340();
    uint64_t v31 = v64;
    sub_E524();
    v32();
    uint64_t v33 = sub_1AC7F0();
    os_log_type_t v34 = sub_1ACF60();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&def_342E4, v33, v34, "Failed to create protobuf UsoGraph from UsoTask", v35, 2u);
      sub_A1F0();
    }

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v6, v1);
    sub_1AB180();
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v55, v24, v25);
    sub_1AB530();
    sub_E524();
    v37();
    sub_1AB520();
    sub_1AB570();
    sub_E524();
    v38();
    sub_1AB560();
    sub_1AB180();
    sub_2694(&qword_202000);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1ADCF0;
    sub_E524();
    v39();
    sub_1AB170();
    sub_1AC7E0();
    sub_A340();
    uint64_t v40 = v64;
    sub_E524();
    v41();
    swift_retain_n();
    uint64_t v42 = sub_1AC7F0();
    os_log_type_t v43 = sub_1ACF50();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = sub_E620();
      v52[1] = v1;
      uint64_t v65 = v30;
      uint64_t v66 = v45;
      *(_DWORD *)uint64_t v44 = 136315138;
      v52[0] = v44 + 4;
      sub_1ABA60();
      swift_retain();
      uint64_t v46 = sub_1ACE00();
      uint64_t v65 = sub_4A278(v46, v47, &v66);
      sub_1ACFE0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v42, v43, "Built nlContextUpdate with SystemPrompted for task: %s", v44, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();
      swift_release();

      sub_E558();
      v48();
    }
    else
    {
      swift_release_n();

      (*(void (**)(char *, uint64_t))(v40 + 8))(v62, v1);
    }
    sub_E558();
    v49();
    sub_E558();
    v50();
    sub_E558();
    v51();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v63, v13, v54);
  }
}

uint64_t sub_DD88()
{
  sub_E4B8(v0 + 24);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 184);

  return _swift_deallocClassInstance(v0, 224, 7);
}

uint64_t type metadata accessor for LogQuantityPromptStrategy()
{
  return self;
}

uint64_t sub_DDF0(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_DE88;
  return sub_B66C();
}

uint64_t sub_DE88()
{
  sub_E588();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_A1B4();
  uint64_t v9 = v8;
  sub_E53C();
  *uint64_t v10 = v9;
  uint64_t v11 = *v1;
  sub_E53C();
  *uint64_t v12 = v11;
  swift_task_dealloc();
  if (!v0)
  {
    uint64_t v13 = *(void **)(v9 + 16);
    *uint64_t v13 = v7;
    v13[1] = v5;
    v13[2] = v3;
  }
  uint64_t v14 = *(uint64_t (**)(void))(v11 + 8);
  return v14();
}

uint64_t sub_DF7C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_E50C;
  return sub_C4B8();
}

uint64_t sub_E014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_E50C;
  return PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()(a1, a2, a3);
}

uint64_t sub_E0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_E50C;
  return PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()(a1, a2, a3);
}

uint64_t sub_E17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_E230;
  return PromptForValueFlowStrategyAsync.makeFlowCancelledResponse()(a1, a2, a3);
}

uint64_t sub_E230()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_E53C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_E564();
  return v3();
}

uint64_t sub_E2F4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_E50C;
  return sub_CE40();
}

uint64_t sub_E39C(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_E3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_E460(uint64_t a1)
{
  return sub_CD74(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_E468()
{
  unint64_t result = qword_202010;
  if (!qword_202010)
  {
    sub_1AB3F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202010);
  }
  return result;
}

uint64_t sub_E4B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_E564()
{
  return v0 + 8;
}

uint64_t sub_E570()
{
  return v0;
}

uint64_t sub_E5A8()
{
  return v0;
}

uint64_t sub_E5BC()
{
  return swift_slowAlloc();
}

uint64_t sub_E5D4()
{
  return v0;
}

uint64_t sub_E5E8()
{
  return swift_task_dealloc();
}

uint64_t sub_E608()
{
  return swift_release_n();
}

uint64_t sub_E620()
{
  return swift_slowAlloc();
}

uint64_t sub_E638()
{
  return 0;
}

void *WellnessSnippets.bundleName.unsafeMutableAddressor()
{
  return &static WellnessSnippets.bundleName;
}

unint64_t static WellnessSnippets.bundleName.getter()
{
  return 0xD000000000000010;
}

Swift::Int sub_E670()
{
  return sub_EFC8();
}

uint64_t sub_E694(uint64_t a1)
{
  unint64_t v2 = sub_11620();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E6D0(uint64_t a1)
{
  unint64_t v2 = sub_11620();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_E70C(char a1, char a2)
{
  return a1 == a2;
}

void sub_E71C(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_E744(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x80000000001B7470 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000000001B7490 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000000001B74B0 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000000001B74D0 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    BOOL v5 = a1 == 0x42636972656E6567 && a2 == 0xED00006E6F747475;
    if (v5 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    else if (a1 == 0xD000000000000013 && a2 == 0x80000000001B74F0 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else if (a1 == 0xD000000000000016 && a2 == 0x80000000001B7510 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 6;
    }
    else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B7530 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 7;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x80000000001B7550 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 8;
    }
    else
    {
      BOOL v6 = a1 == 0x6144746867696568 && a2 == 0xEF79726575516174;
      if (v6 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 9;
      }
      else
      {
        BOOL v7 = a1 == 0x6E6952656E6F6870 && a2 == 0xEA00000000007367;
        if (v7 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 10;
        }
        else if (a1 == 0xD00000000000001ALL && a2 == 0x80000000001B7570 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 11;
        }
        else
        {
          BOOL v8 = a1 == 0x6575517065656C73 && a2 == 0xEA00000000007972;
          if (v8 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 12;
          }
          else if (a1 == 0xD000000000000017 && a2 == 0x80000000001B7590 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 13;
          }
          else if (a1 == 0xD000000000000014 && a2 == 0x80000000001B75B0 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 14;
          }
          else if (a1 == 0x6E69526863746177 && a2 == 0xEA00000000007367)
          {
            swift_bridgeObjectRelease();
            return 15;
          }
          else
          {
            char v10 = sub_1AD2F0();
            swift_bridgeObjectRelease();
            if (v10) {
              return 15;
            }
            else {
              return 16;
            }
          }
        }
      }
    }
  }
}

uint64_t sub_ED24()
{
  return 16;
}

Swift::Int sub_ED2C(unsigned __int8 a1)
{
  return sub_1AD390();
}

uint64_t sub_ED74(char a1)
{
  uint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000016;
      break;
    case 4:
      uint64_t result = 0x42636972656E6567;
      break;
    case 5:
      uint64_t result = 0xD000000000000013;
      break;
    case 6:
      uint64_t result = 0xD000000000000016;
      break;
    case 7:
      uint64_t result = 0xD000000000000012;
      break;
    case 8:
      uint64_t result = 0xD000000000000010;
      break;
    case 9:
      uint64_t result = 0x6144746867696568;
      break;
    case 10:
      uint64_t v3 = 0x52656E6F6870;
      goto LABEL_15;
    case 11:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 12:
      uint64_t result = 0x6575517065656C73;
      break;
    case 13:
      uint64_t result = 0xD000000000000017;
      break;
    case 15:
      uint64_t v3 = 0x526863746177;
LABEL_15:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6E69000000000000;
      break;
    default:
      return result;
  }
  return result;
}

void sub_EF24()
{
}

uint64_t sub_EF4C()
{
  return 12383;
}

uint64_t sub_EF58(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_1AD2F0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_EFC8()
{
  return sub_1AD390();
}

uint64_t sub_F00C(uint64_t a1)
{
  unint64_t v2 = sub_11588();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F048(uint64_t a1)
{
  unint64_t v2 = sub_11588();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F084(uint64_t a1)
{
  unint64_t v2 = sub_115D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F0C0(uint64_t a1)
{
  unint64_t v2 = sub_115D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_F0FC(char *a1, char *a2)
{
  return sub_E70C(*a1, *a2);
}

Swift::Int sub_F108()
{
  return sub_ED2C(*v0);
}

void sub_F110(uint64_t a1)
{
  sub_E71C(a1, *v1);
}

Swift::Int sub_F118()
{
  Swift::UInt v1 = *v0;
  sub_1AD360();
  sub_1AD370(v1);
  return sub_1AD390();
}

uint64_t sub_F15C()
{
  return sub_ED74(*v0);
}

uint64_t sub_F164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_E744(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_F18C()
{
  return _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
}

uint64_t sub_F1AC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_ED24();
  *a1 = result;
  return result;
}

uint64_t sub_F1D4(uint64_t a1)
{
  unint64_t v2 = sub_10F6C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F210(uint64_t a1)
{
  unint64_t v2 = sub_10F6C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F24C(uint64_t a1)
{
  unint64_t v2 = sub_1153C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F288(uint64_t a1)
{
  unint64_t v2 = sub_1153C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F2C4(uint64_t a1)
{
  unint64_t v2 = sub_11458();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F300(uint64_t a1)
{
  unint64_t v2 = sub_11458();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F33C(uint64_t a1)
{
  unint64_t v2 = sub_114F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F378(uint64_t a1)
{
  unint64_t v2 = sub_114F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F3B4(uint64_t a1)
{
  unint64_t v2 = sub_11374();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F3F0(uint64_t a1)
{
  unint64_t v2 = sub_11374();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F42C(uint64_t a1)
{
  unint64_t v2 = sub_113C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F468(uint64_t a1)
{
  unint64_t v2 = sub_113C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F4A4(uint64_t a1)
{
  unint64_t v2 = sub_1140C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F4E0(uint64_t a1)
{
  unint64_t v2 = sub_1140C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F51C(uint64_t a1)
{
  unint64_t v2 = sub_11328();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F558(uint64_t a1)
{
  unint64_t v2 = sub_11328();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_EF58(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_F5C0()
{
  return _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
}

uint64_t sub_F5DC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = LogPeriodFlow.on(input:)();
  *a1 = result & 1;
  return result;
}

uint64_t sub_F608(uint64_t a1)
{
  unint64_t v2 = sub_111E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F644(uint64_t a1)
{
  unint64_t v2 = sub_111E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F680(uint64_t a1)
{
  unint64_t v2 = sub_11198();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F6BC(uint64_t a1)
{
  unint64_t v2 = sub_11198();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F6F8(uint64_t a1)
{
  unint64_t v2 = sub_1114C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F734(uint64_t a1)
{
  unint64_t v2 = sub_1114C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F770(uint64_t a1)
{
  unint64_t v2 = sub_11100();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F7AC(uint64_t a1)
{
  unint64_t v2 = sub_11100();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F7E8(uint64_t a1)
{
  unint64_t v2 = sub_110B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F824(uint64_t a1)
{
  unint64_t v2 = sub_110B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_F860()
{
  return sub_1AD390();
}

uint64_t sub_F8A0(uint64_t a1)
{
  unint64_t v2 = sub_1101C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F8DC(uint64_t a1)
{
  unint64_t v2 = sub_1101C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WellnessSnippets.encode(to:)(void *a1)
{
  sub_2694(&qword_202018);
  sub_52C4();
  __chkstk_darwin(v2);
  sub_53E0();
  sub_2694(&qword_202020);
  sub_52C4();
  __chkstk_darwin(v3);
  sub_53E0();
  sub_E638();
  type metadata accessor for TemperatureQueryModel();
  sub_20688();
  __chkstk_darwin(v4);
  sub_53E0();
  uint64_t v102 = v5;
  sub_2694(&qword_202028);
  sub_52C4();
  __chkstk_darwin(v6);
  sub_53E0();
  sub_E638();
  type metadata accessor for SpecificMedCompletedLogModel();
  sub_20688();
  __chkstk_darwin(v7);
  sub_53E0();
  uint64_t v99 = v8;
  sub_2694(&qword_202030);
  sub_52C4();
  __chkstk_darwin(v9);
  sub_53E0();
  sub_E638();
  type metadata accessor for SleepQueryModel();
  sub_20688();
  __chkstk_darwin(v10);
  sub_53E0();
  uint64_t v98 = v11;
  sub_2694(&qword_202038);
  sub_52C4();
  __chkstk_darwin(v12);
  sub_53E0();
  sub_E638();
  type metadata accessor for SingleActivitySummaryModel();
  sub_20688();
  __chkstk_darwin(v13);
  sub_53E0();
  uint64_t v97 = v14;
  sub_2694(&qword_202040);
  sub_52C4();
  __chkstk_darwin(v15);
  sub_53E0();
  sub_2694(&qword_202048);
  sub_52C4();
  __chkstk_darwin(v16);
  sub_53E0();
  sub_E638();
  type metadata accessor for HeightQueryModel();
  sub_20688();
  __chkstk_darwin(v17);
  sub_53E0();
  uint64_t v96 = v18;
  sub_2694(&qword_202050);
  sub_52C4();
  __chkstk_darwin(v19);
  sub_53E0();
  sub_E638();
  type metadata accessor for GenericQueryModel();
  sub_20688();
  __chkstk_darwin(v20);
  sub_53E0();
  uint64_t v95 = v21;
  sub_2694(&qword_202058);
  sub_52C4();
  __chkstk_darwin(v22);
  sub_53E0();
  sub_E638();
  type metadata accessor for HealthDataLogModel();
  sub_20688();
  __chkstk_darwin(v23);
  sub_53E0();
  uint64_t v94 = v24;
  sub_2694(&qword_202060);
  sub_52C4();
  __chkstk_darwin(v25);
  sub_53E0();
  sub_E638();
  type metadata accessor for GenericMedCompletedLogModel();
  sub_20688();
  __chkstk_darwin(v26);
  sub_53E0();
  uint64_t v93 = v27;
  sub_2694(&qword_202068);
  sub_52C4();
  __chkstk_darwin(v28);
  sub_53E0();
  sub_2694(&qword_202070);
  sub_52C4();
  __chkstk_darwin(v29);
  sub_53E0();
  sub_E638();
  type metadata accessor for GenericButtonModel();
  sub_20688();
  __chkstk_darwin(v30);
  sub_53E0();
  uint64_t v92 = v31;
  sub_2694(&qword_202078);
  sub_52C4();
  __chkstk_darwin(v32);
  sub_53E0();
  sub_E638();
  type metadata accessor for CycleTrackingLogModel();
  sub_20688();
  __chkstk_darwin(v33);
  sub_53E0();
  uint64_t v91 = v34;
  sub_2694(&qword_202080);
  sub_52C4();
  __chkstk_darwin(v35);
  sub_53E0();
  sub_E638();
  type metadata accessor for BloodPressureLogModel();
  sub_20688();
  __chkstk_darwin(v36);
  sub_53E0();
  uint64_t v90 = v37;
  sub_2694(&qword_202088);
  sub_52C4();
  __chkstk_darwin(v38);
  sub_53E0();
  sub_E638();
  type metadata accessor for BloodPressureQueryModel();
  sub_20688();
  __chkstk_darwin(v39);
  sub_53E0();
  uint64_t v89 = v40;
  sub_2694(&qword_202090);
  sub_52C4();
  __chkstk_darwin(v41);
  sub_53E0();
  sub_E638();
  type metadata accessor for OxygenSaturationQueryModel();
  sub_20688();
  __chkstk_darwin(v42);
  sub_E548();
  uint64_t v45 = v44 - v43;
  type metadata accessor for WellnessSnippets();
  sub_20688();
  __chkstk_darwin(v46);
  sub_E548();
  uint64_t v49 = v48 - v47;
  uint64_t v115 = sub_2694(&qword_202098);
  sub_52C4();
  uint64_t v109 = v50;
  __chkstk_darwin(v51);
  sub_E548();
  uint64_t v54 = v53 - v52;
  sub_2E38(a1, a1[3]);
  sub_10F6C();
  uint64_t v108 = v54;
  sub_1AD3B0();
  sub_10FB8(v110, v49);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_12F3C(v49, v89, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
      LOBYTE(v114[0]) = 1;
      sub_115D4();
      sub_1AD240();
      sub_130C4(&qword_202190, (void (*)(uint64_t))type metadata accessor for BloodPressureQueryModel);
      sub_1AD2B0();
      sub_E558();
      v57();
      sub_1B368(v89, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v109 + 8))(v54, v115);
    case 2u:
      uint64_t v58 = v90;
      sub_12F3C(v49, v90, (void (*)(void))type metadata accessor for BloodPressureLogModel);
      LOBYTE(v114[0]) = 2;
      sub_11588();
      sub_2061C();
      sub_130C4(&qword_202180, (void (*)(uint64_t))type metadata accessor for BloodPressureLogModel);
      sub_2071C();
      sub_20704();
      sub_E558();
      v59();
      uint64_t v60 = type metadata accessor for BloodPressureLogModel;
      goto LABEL_17;
    case 3u:
      uint64_t v58 = v91;
      sub_12F3C(v49, v91, (void (*)(void))type metadata accessor for CycleTrackingLogModel);
      LOBYTE(v114[0]) = 3;
      sub_1153C();
      sub_2061C();
      sub_130C4(&qword_202170, (void (*)(uint64_t))type metadata accessor for CycleTrackingLogModel);
      sub_2071C();
      sub_20704();
      sub_E558();
      v61();
      uint64_t v60 = type metadata accessor for CycleTrackingLogModel;
      goto LABEL_17;
    case 4u:
      uint64_t v58 = v92;
      sub_12F3C(v49, v92, (void (*)(void))type metadata accessor for GenericButtonModel);
      LOBYTE(v114[0]) = 4;
      sub_114F0();
      sub_2061C();
      sub_130C4(&qword_202160, (void (*)(uint64_t))type metadata accessor for GenericButtonModel);
      sub_2071C();
      sub_20704();
      sub_E558();
      v62();
      uint64_t v60 = type metadata accessor for GenericButtonModel;
      goto LABEL_17;
    case 5u:
      uint64_t v63 = *(void *)(v49 + 8);
      uint64_t v111 = *(void *)v49;
      uint64_t v64 = *(void *)(v49 + 24);
      uint64_t v107 = *(void *)(v49 + 16);
      uint64_t v66 = *(void *)(v49 + 32);
      uint64_t v65 = *(void *)(v49 + 40);
      char v67 = *(unsigned char *)(v49 + 48);
      sub_11458();
      sub_1AD240();
      v114[0] = v111;
      v114[1] = v63;
      v114[2] = v107;
      v114[3] = v64;
      v114[4] = v66;
      v114[5] = v65;
      LOBYTE(v114[6]) = v67;
      sub_114A4();
      sub_1AD2B0();
      sub_E558();
      v68();
      sub_E558();
      v69();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 6u:
      uint64_t v58 = v93;
      sub_12F3C(v49, v93, (void (*)(void))type metadata accessor for GenericMedCompletedLogModel);
      LOBYTE(v114[0]) = 6;
      sub_1140C();
      sub_2061C();
      sub_130C4(&qword_202140, (void (*)(uint64_t))type metadata accessor for GenericMedCompletedLogModel);
      sub_2071C();
      sub_20704();
      sub_E558();
      v70();
      uint64_t v60 = type metadata accessor for GenericMedCompletedLogModel;
      goto LABEL_17;
    case 7u:
      uint64_t v58 = v94;
      sub_12F3C(v49, v94, (void (*)(void))type metadata accessor for HealthDataLogModel);
      LOBYTE(v114[0]) = 7;
      sub_113C0();
      sub_2061C();
      sub_130C4(&qword_202130, (void (*)(uint64_t))type metadata accessor for HealthDataLogModel);
      sub_2071C();
      sub_20704();
      sub_E558();
      v71();
      uint64_t v60 = type metadata accessor for HealthDataLogModel;
      goto LABEL_17;
    case 8u:
      uint64_t v58 = v95;
      sub_12F3C(v49, v95, (void (*)(void))type metadata accessor for GenericQueryModel);
      LOBYTE(v114[0]) = 8;
      sub_11374();
      sub_2061C();
      sub_130C4(&qword_202120, (void (*)(uint64_t))type metadata accessor for GenericQueryModel);
      sub_2071C();
      sub_20704();
      sub_E558();
      v72();
      uint64_t v60 = type metadata accessor for GenericQueryModel;
      goto LABEL_17;
    case 9u:
      uint64_t v58 = v96;
      sub_12F3C(v49, v96, (void (*)(void))type metadata accessor for HeightQueryModel);
      LOBYTE(v114[0]) = 9;
      sub_11328();
      sub_2061C();
      sub_130C4(&qword_202110, (void (*)(uint64_t))type metadata accessor for HeightQueryModel);
      sub_2071C();
      sub_20704();
      sub_E558();
      v73();
      uint64_t v60 = type metadata accessor for HeightQueryModel;
      goto LABEL_17;
    case 0xAu:
      memcpy(v114, (const void *)v49, 0xF1uLL);
      sub_111E4();
      sub_2061C();
      memcpy(v113, v114, sizeof(v113));
      sub_11230();
      sub_20704();
      sub_E558();
      v74();
      sub_20760();
      sub_E558();
      v75();
      return sub_1127C((uint64_t)v114);
    case 0xBu:
      uint64_t v58 = v97;
      sub_12F3C(v49, v97, (void (*)(void))type metadata accessor for SingleActivitySummaryModel);
      LOBYTE(v114[0]) = 11;
      sub_11198();
      sub_2061C();
      sub_130C4(&qword_2020F0, (void (*)(uint64_t))type metadata accessor for SingleActivitySummaryModel);
      sub_2071C();
      sub_20704();
      sub_E558();
      v76();
      uint64_t v60 = type metadata accessor for SingleActivitySummaryModel;
      goto LABEL_17;
    case 0xCu:
      uint64_t v58 = v98;
      sub_12F3C(v49, v98, (void (*)(void))type metadata accessor for SleepQueryModel);
      LOBYTE(v114[0]) = 12;
      sub_1114C();
      sub_2061C();
      sub_130C4(&qword_2020E0, (void (*)(uint64_t))type metadata accessor for SleepQueryModel);
      sub_2071C();
      sub_20704();
      sub_E558();
      v77();
      uint64_t v60 = type metadata accessor for SleepQueryModel;
      goto LABEL_17;
    case 0xDu:
      uint64_t v58 = v99;
      sub_12F3C(v49, v99, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
      LOBYTE(v114[0]) = 13;
      sub_11100();
      sub_2061C();
      sub_130C4(&qword_2020D0, (void (*)(uint64_t))type metadata accessor for SpecificMedCompletedLogModel);
      sub_2071C();
      sub_20704();
      sub_E558();
      v78();
      uint64_t v60 = type metadata accessor for SpecificMedCompletedLogModel;
      goto LABEL_17;
    case 0xEu:
      uint64_t v58 = v102;
      sub_12F3C(v49, v102, (void (*)(void))type metadata accessor for TemperatureQueryModel);
      LOBYTE(v114[0]) = 14;
      sub_110B4();
      sub_2061C();
      sub_130C4(&qword_2020C0, (void (*)(uint64_t))type metadata accessor for TemperatureQueryModel);
      sub_2071C();
      sub_20704();
      sub_E558();
      v79();
      uint64_t v60 = type metadata accessor for TemperatureQueryModel;
LABEL_17:
      sub_1B368(v58, (void (*)(void))v60);
      uint64_t v80 = sub_20760();
      uint64_t result = v82(v80, v81);
      break;
    case 0xFu:
      uint64_t v112 = *(void *)v49;
      char v83 = *(unsigned char *)(v49 + 8);
      uint64_t v106 = *(void *)(v49 + 16);
      char v84 = *(unsigned char *)(v49 + 24);
      uint64_t v85 = *(void *)(v49 + 32);
      char v86 = *(unsigned char *)(v49 + 40);
      uint64_t v105 = *(void *)(v49 + 48);
      char v104 = *(unsigned char *)(v49 + 56);
      uint64_t v103 = *(void *)(v49 + 64);
      char v101 = *(unsigned char *)(v49 + 72);
      uint64_t v100 = *(void *)(v49 + 80);
      char v87 = *(unsigned char *)(v49 + 88);
      sub_1101C();
      sub_1AD240();
      v114[0] = v112;
      LOBYTE(v114[1]) = v83;
      v114[2] = v106;
      LOBYTE(v114[3]) = v84;
      v114[4] = v85;
      LOBYTE(v114[5]) = v86;
      v114[6] = v105;
      LOBYTE(v114[7]) = v104;
      v114[8] = v103;
      LOBYTE(v114[9]) = v101;
      v114[10] = v100;
      LOBYTE(v114[11]) = v87;
      sub_11068();
      sub_1AD2B0();
      sub_E558();
      v88();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v109 + 8))(v108, v115);
      break;
    default:
      sub_12F3C(v49, v45, (void (*)(void))type metadata accessor for OxygenSaturationQueryModel);
      LOBYTE(v114[0]) = 0;
      sub_11620();
      sub_1AD240();
      sub_130C4(&qword_2021A0, (void (*)(uint64_t))type metadata accessor for OxygenSaturationQueryModel);
      sub_1AD2B0();
      sub_E558();
      v55();
      sub_1B368(v45, (void (*)(void))type metadata accessor for OxygenSaturationQueryModel);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v109 + 8))(v54, v115);
      break;
  }
  return result;
}

uint64_t type metadata accessor for WellnessSnippets()
{
  uint64_t result = qword_202348;
  if (!qword_202348) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10F6C()
{
  unint64_t result = qword_2020A0;
  if (!qword_2020A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2020A0);
  }
  return result;
}

uint64_t sub_10FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WellnessSnippets();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1101C()
{
  unint64_t result = qword_2020A8;
  if (!qword_2020A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2020A8);
  }
  return result;
}

unint64_t sub_11068()
{
  unint64_t result = qword_2020B0;
  if (!qword_2020B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2020B0);
  }
  return result;
}

unint64_t sub_110B4()
{
  unint64_t result = qword_2020B8;
  if (!qword_2020B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2020B8);
  }
  return result;
}

unint64_t sub_11100()
{
  unint64_t result = qword_2020C8;
  if (!qword_2020C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2020C8);
  }
  return result;
}

unint64_t sub_1114C()
{
  unint64_t result = qword_2020D8;
  if (!qword_2020D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2020D8);
  }
  return result;
}

unint64_t sub_11198()
{
  unint64_t result = qword_2020E8;
  if (!qword_2020E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2020E8);
  }
  return result;
}

unint64_t sub_111E4()
{
  unint64_t result = qword_2020F8;
  if (!qword_2020F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2020F8);
  }
  return result;
}

unint64_t sub_11230()
{
  unint64_t result = qword_202100;
  if (!qword_202100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202100);
  }
  return result;
}

uint64_t sub_1127C(uint64_t a1)
{
  return a1;
}

unint64_t sub_11328()
{
  unint64_t result = qword_202108;
  if (!qword_202108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202108);
  }
  return result;
}

unint64_t sub_11374()
{
  unint64_t result = qword_202118;
  if (!qword_202118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202118);
  }
  return result;
}

unint64_t sub_113C0()
{
  unint64_t result = qword_202128;
  if (!qword_202128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202128);
  }
  return result;
}

unint64_t sub_1140C()
{
  unint64_t result = qword_202138;
  if (!qword_202138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202138);
  }
  return result;
}

unint64_t sub_11458()
{
  unint64_t result = qword_202148;
  if (!qword_202148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202148);
  }
  return result;
}

unint64_t sub_114A4()
{
  unint64_t result = qword_202150;
  if (!qword_202150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202150);
  }
  return result;
}

unint64_t sub_114F0()
{
  unint64_t result = qword_202158;
  if (!qword_202158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202158);
  }
  return result;
}

unint64_t sub_1153C()
{
  unint64_t result = qword_202168;
  if (!qword_202168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202168);
  }
  return result;
}

unint64_t sub_11588()
{
  unint64_t result = qword_202178;
  if (!qword_202178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202178);
  }
  return result;
}

unint64_t sub_115D4()
{
  unint64_t result = qword_202188;
  if (!qword_202188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202188);
  }
  return result;
}

unint64_t sub_11620()
{
  unint64_t result = qword_202198;
  if (!qword_202198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202198);
  }
  return result;
}

uint64_t WellnessSnippets.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v218 = a2;
  uint64_t v217 = sub_2694(&qword_2021A8);
  sub_52C4();
  uint64_t v201 = v3;
  __chkstk_darwin(v4);
  sub_53E0();
  sub_206D4(v5);
  uint64_t v216 = sub_2694(&qword_2021B0);
  sub_52C4();
  uint64_t v200 = v6;
  __chkstk_darwin(v7);
  sub_53E0();
  sub_206D4(v8);
  uint64_t v215 = sub_2694(&qword_2021B8);
  sub_52C4();
  uint64_t v199 = v9;
  __chkstk_darwin(v10);
  sub_53E0();
  sub_206D4(v11);
  uint64_t v214 = sub_2694(&qword_2021C0);
  sub_52C4();
  uint64_t v198 = v12;
  __chkstk_darwin(v13);
  sub_53E0();
  sub_206D4(v14);
  uint64_t v213 = sub_2694(&qword_2021C8);
  sub_52C4();
  uint64_t v197 = v15;
  __chkstk_darwin(v16);
  sub_53E0();
  sub_206D4(v17);
  uint64_t v212 = sub_2694(&qword_2021D0);
  sub_52C4();
  uint64_t v219 = v18;
  __chkstk_darwin(v19);
  sub_53E0();
  sub_206D4(v20);
  uint64_t v211 = sub_2694(&qword_2021D8);
  sub_52C4();
  uint64_t v196 = v21;
  __chkstk_darwin(v22);
  sub_53E0();
  sub_206D4(v23);
  uint64_t v210 = sub_2694(&qword_2021E0);
  sub_52C4();
  uint64_t v195 = v24;
  __chkstk_darwin(v25);
  sub_53E0();
  sub_206D4(v26);
  uint64_t v209 = sub_2694(&qword_2021E8);
  sub_52C4();
  uint64_t v194 = v27;
  __chkstk_darwin(v28);
  sub_53E0();
  sub_206D4(v29);
  uint64_t v208 = sub_2694(&qword_2021F0);
  sub_52C4();
  uint64_t v193 = v30;
  __chkstk_darwin(v31);
  sub_53E0();
  sub_206D4(v32);
  uint64_t v207 = sub_2694(&qword_2021F8);
  sub_52C4();
  uint64_t v192 = v33;
  __chkstk_darwin(v34);
  sub_53E0();
  sub_206D4(v35);
  uint64_t v206 = sub_2694(&qword_202200);
  sub_52C4();
  uint64_t v191 = v36;
  __chkstk_darwin(v37);
  sub_53E0();
  sub_206D4(v38);
  uint64_t v205 = sub_2694(&qword_202208);
  sub_52C4();
  uint64_t v190 = v39;
  __chkstk_darwin(v40);
  sub_53E0();
  sub_206D4(v41);
  uint64_t v204 = sub_2694(&qword_202210);
  sub_52C4();
  uint64_t v189 = v42;
  __chkstk_darwin(v43);
  sub_53E0();
  sub_206D4(v44);
  uint64_t v203 = sub_2694(&qword_202218);
  sub_52C4();
  uint64_t v188 = v45;
  __chkstk_darwin(v46);
  sub_53E0();
  sub_206D4(v47);
  uint64_t v202 = sub_2694(&qword_202220);
  sub_52C4();
  uint64_t v187 = v48;
  __chkstk_darwin(v49);
  sub_53E0();
  sub_206D4(v50);
  uint64_t v223 = sub_2694(&qword_202228);
  sub_52C4();
  uint64_t v221 = v51;
  __chkstk_darwin(v52);
  sub_53E0();
  uint64_t v227 = v53;
  sub_E638();
  uint64_t v220 = type metadata accessor for WellnessSnippets();
  sub_20688();
  __chkstk_darwin(v54);
  sub_20698();
  __chkstk_darwin(v55);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v56);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v57);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v58);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v59);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v60);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v61);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v62);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v63);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v64);
  sub_2073C();
  sub_20698();
  uint64_t v66 = __chkstk_darwin(v65);
  uint64_t v68 = (char *)v181 - v67;
  uint64_t v69 = __chkstk_darwin(v66);
  uint64_t v71 = (char *)v181 - v70;
  uint64_t v72 = __chkstk_darwin(v69);
  uint64_t v74 = (char *)v181 - v73;
  uint64_t v75 = __chkstk_darwin(v72);
  uint64_t v77 = (char *)v181 - v76;
  uint64_t v78 = __chkstk_darwin(v75);
  uint64_t v80 = (char *)v181 - v79;
  __chkstk_darwin(v78);
  uint64_t v82 = (char *)v181 - v81;
  uint64_t v83 = a1[3];
  v224 = a1;
  sub_2E38(a1, v83);
  sub_10F6C();
  uint64_t v84 = (uint64_t)v225;
  sub_1AD3A0();
  if (!v84)
  {
    v181[2] = v80;
    v181[3] = v77;
    v181[4] = v74;
    v182 = v71;
    v183 = v68;
    uint64_t v85 = v222;
    v225 = v82;
    uint64_t v86 = v223;
    uint64_t v87 = v227;
    uint64_t v88 = sub_1AD230();
    uint64_t v89 = *(void *)(v88 + 16);
    if (v89
      && (v181[1] = 0,
          v181[0] = *(unsigned __int8 *)(v88 + 32),
          sub_12E74(1, v89, v88, v88 + 32, 0, (2 * v89) | 1),
          uint64_t v91 = v90,
          unint64_t v93 = v92,
          swift_bridgeObjectRelease(),
          v91 == v93 >> 1))
    {
      switch(v181[0])
      {
        case 1:
          sub_206E0(1);
          sub_115D4();
          sub_205F4((uint64_t)&type metadata for WellnessSnippets.BloodPressureDataQueryCodingKeys, (uint64_t)__src);
          type metadata accessor for BloodPressureQueryModel();
          sub_130C4(&qword_2022A8, (void (*)(uint64_t))type metadata accessor for BloodPressureQueryModel);
          sub_206B8();
          sub_20664();
          uint64_t v102 = sub_205D8();
          v103(v102);
          swift_unknownObjectRelease();
          uint64_t v104 = sub_205B8();
          v105(v104);
          sub_206A8();
          goto LABEL_23;
        case 2:
          sub_206E0(2);
          sub_11588();
          sub_20644((uint64_t)&type metadata for WellnessSnippets.BloodPressureDataLogCodingKeys, (uint64_t)__src);
          type metadata accessor for BloodPressureLogModel();
          sub_130C4(&qword_2022A0, (void (*)(uint64_t))type metadata accessor for BloodPressureLogModel);
          sub_206B8();
          sub_20664();
          uint64_t v106 = sub_205D8();
          v107(v106);
          swift_unknownObjectRelease();
          uint64_t v108 = sub_205B8();
          v109(v108);
          sub_206A8();
          goto LABEL_23;
        case 3:
          sub_206E0(3);
          sub_1153C();
          sub_20644((uint64_t)&type metadata for WellnessSnippets.CycleTrackingDataLogCodingKeys, (uint64_t)__src);
          type metadata accessor for CycleTrackingLogModel();
          sub_130C4(&qword_202298, (void (*)(uint64_t))type metadata accessor for CycleTrackingLogModel);
          uint64_t v110 = (uint64_t)v182;
          sub_206EC();
          sub_20774();
          sub_E558();
          v150();
          swift_unknownObjectRelease();
          uint64_t v151 = sub_205B8();
          v152(v151);
          sub_206C8();
          swift_storeEnumTagMultiPayload();
          uint64_t v153 = v110;
          break;
        case 4:
          sub_206E0(4);
          sub_114F0();
          sub_20644((uint64_t)&type metadata for WellnessSnippets.GenericButtonCodingKeys, (uint64_t)__src);
          type metadata accessor for GenericButtonModel();
          sub_130C4(&qword_202290, (void (*)(uint64_t))type metadata accessor for GenericButtonModel);
          uint64_t v111 = (uint64_t)v183;
          sub_1AD220();
          sub_E558();
          v154();
          swift_unknownObjectRelease();
          uint64_t v155 = sub_205B8();
          v156(v155);
          sub_206C8();
          swift_storeEnumTagMultiPayload();
          uint64_t v153 = v111;
          break;
        case 5:
          sub_206E0(5);
          sub_11458();
          sub_205F4((uint64_t)&type metadata for WellnessSnippets.GenericBinaryButtonCodingKeys, (uint64_t)__src);
          sub_12FE8();
          sub_206EC();
          uint64_t v112 = sub_205D8();
          v113(v112);
          swift_unknownObjectRelease();
          uint64_t v114 = sub_20728();
          v115(v114);
          long long v116 = *(_OWORD *)&__src[16];
          uint64_t v117 = *(void *)&__src[32];
          uint64_t v118 = *(void *)&__src[40];
          char v119 = __src[48];
          v120 = v184;
          _OWORD *v184 = *(_OWORD *)__src;
          v120[1] = v116;
          *((void *)v120 + 4) = v117;
          *((void *)v120 + 5) = v118;
          *((unsigned char *)v120 + 48) = v119;
          sub_206C8();
          goto LABEL_24;
        case 6:
          sub_206E0(6);
          sub_1140C();
          sub_205F4((uint64_t)&type metadata for WellnessSnippets.GenericMedCompletedLogCodingKeys, (uint64_t)__src);
          type metadata accessor for GenericMedCompletedLogModel();
          sub_130C4(&qword_202280, (void (*)(uint64_t))type metadata accessor for GenericMedCompletedLogModel);
          sub_206B8();
          sub_20664();
          uint64_t v121 = sub_205D8();
          v122(v121);
          swift_unknownObjectRelease();
          uint64_t v123 = sub_205B8();
          v124(v123);
          sub_206A8();
          goto LABEL_23;
        case 7:
          sub_206E0(7);
          sub_113C0();
          sub_205F4((uint64_t)&type metadata for WellnessSnippets.GenericDataTypeLogCodingKeys, (uint64_t)__src);
          type metadata accessor for HealthDataLogModel();
          sub_130C4(&qword_202278, (void (*)(uint64_t))type metadata accessor for HealthDataLogModel);
          sub_206B8();
          sub_20664();
          uint64_t v125 = sub_205D8();
          v126(v125);
          swift_unknownObjectRelease();
          uint64_t v127 = sub_205B8();
          v128(v127);
          sub_206A8();
          goto LABEL_23;
        case 8:
          sub_206E0(8);
          sub_11374();
          sub_205F4((uint64_t)&type metadata for WellnessSnippets.GenericDataQueryCodingKeys, (uint64_t)__src);
          type metadata accessor for GenericQueryModel();
          sub_130C4(&qword_202270, (void (*)(uint64_t))type metadata accessor for GenericQueryModel);
          sub_206B8();
          sub_20664();
          uint64_t v129 = sub_205D8();
          v130(v129);
          swift_unknownObjectRelease();
          uint64_t v131 = sub_205B8();
          v132(v131);
          sub_206A8();
          goto LABEL_23;
        case 9:
          sub_206E0(9);
          sub_11328();
          sub_205F4((uint64_t)&type metadata for WellnessSnippets.HeightDataQueryCodingKeys, (uint64_t)__src);
          type metadata accessor for HeightQueryModel();
          sub_130C4(&qword_202268, (void (*)(uint64_t))type metadata accessor for HeightQueryModel);
          sub_206B8();
          sub_20664();
          uint64_t v133 = sub_205D8();
          v134(v133);
          swift_unknownObjectRelease();
          uint64_t v135 = sub_205B8();
          v136(v135);
          sub_206A8();
          goto LABEL_23;
        case 0xALL:
          sub_206E0(10);
          sub_111E4();
          sub_205F4((uint64_t)&type metadata for WellnessSnippets.PhoneRingsCodingKeys, (uint64_t)__src);
          sub_12F9C();
          sub_206EC();
          uint64_t v157 = sub_20748();
          v158(v157);
          swift_unknownObjectRelease();
          uint64_t v159 = sub_20728();
          v160(v159);
          v120 = v185;
          memcpy(v185, __src, 0xF1uLL);
          sub_206C8();
          goto LABEL_24;
        case 0xBLL:
          sub_206E0(11);
          sub_11198();
          sub_205F4((uint64_t)&type metadata for WellnessSnippets.SingleActivitySummaryQueryCodingKeys, (uint64_t)__src);
          type metadata accessor for SingleActivitySummaryModel();
          sub_130C4(&qword_202258, (void (*)(uint64_t))type metadata accessor for SingleActivitySummaryModel);
          sub_206B8();
          sub_20664();
          uint64_t v137 = sub_205D8();
          v138(v137);
          swift_unknownObjectRelease();
          uint64_t v139 = sub_205B8();
          v140(v139);
          sub_206A8();
          goto LABEL_23;
        case 0xCLL:
          uint64_t v91 = v85;
          sub_206E0(12);
          sub_1114C();
          sub_205F4((uint64_t)&type metadata for WellnessSnippets.SleepQueryCodingKeys, (uint64_t)__src);
          type metadata accessor for SleepQueryModel();
          sub_130C4(&qword_202250, (void (*)(uint64_t))type metadata accessor for SleepQueryModel);
          sub_20664();
          uint64_t v141 = sub_205D8();
          v142(v141);
          swift_unknownObjectRelease();
          uint64_t v143 = sub_205B8();
          v144(v143);
          sub_206A8();
          goto LABEL_23;
        case 0xDLL:
          sub_206E0(13);
          sub_11100();
          sub_205F4((uint64_t)&type metadata for WellnessSnippets.SpecificMedCompletedLogCodingKeys, (uint64_t)__src);
          type metadata accessor for SpecificMedCompletedLogModel();
          sub_130C4(&qword_202248, (void (*)(uint64_t))type metadata accessor for SpecificMedCompletedLogModel);
          sub_206B8();
          sub_20664();
          uint64_t v145 = sub_205D8();
          v146(v145);
          swift_unknownObjectRelease();
          uint64_t v147 = sub_205B8();
          v148(v147);
          sub_206A8();
          goto LABEL_23;
        case 0xELL:
          sub_206E0(14);
          sub_110B4();
          sub_205F4((uint64_t)&type metadata for WellnessSnippets.TemperatureDataQueryCodingKeys, (uint64_t)__src);
          type metadata accessor for TemperatureQueryModel();
          sub_130C4(&qword_202240, (void (*)(uint64_t))type metadata accessor for TemperatureQueryModel);
          sub_206B8();
          sub_20664();
          uint64_t v161 = sub_205D8();
          v162(v161);
          swift_unknownObjectRelease();
          uint64_t v163 = sub_205B8();
          v164(v163);
          sub_206A8();
          goto LABEL_23;
        case 0xFLL:
          sub_206E0(15);
          sub_1101C();
          sub_205F4((uint64_t)&type metadata for WellnessSnippets.WatchRingsCodingKeys, (uint64_t)__src);
          sub_12EF0();
          sub_206EC();
          uint64_t v165 = sub_205D8();
          v166(v165);
          swift_unknownObjectRelease();
          uint64_t v167 = sub_20728();
          v168(v167);
          char v169 = __src[8];
          uint64_t v170 = *(void *)&__src[16];
          char v171 = __src[24];
          uint64_t v172 = *(void *)&__src[32];
          char v173 = __src[40];
          uint64_t v174 = *(void *)&__src[48];
          char v175 = __src[56];
          uint64_t v176 = *(void *)&__src[64];
          char v177 = __src[72];
          uint64_t v178 = *(void *)&__src[80];
          char v179 = __src[88];
          v120 = v186;
          void *v186 = *(void *)__src;
          *((unsigned char *)v120 + 8) = v169;
          *((void *)v120 + 2) = v170;
          *((unsigned char *)v120 + 24) = v171;
          *((void *)v120 + 4) = v172;
          *((unsigned char *)v120 + 40) = v173;
          *((void *)v120 + 6) = v174;
          *((unsigned char *)v120 + 56) = v175;
          *((void *)v120 + 8) = v176;
          *((unsigned char *)v120 + 72) = v177;
          *((void *)v120 + 10) = v178;
          *((unsigned char *)v120 + 88) = v179;
          sub_206C8();
LABEL_24:
          swift_storeEnumTagMultiPayload();
          uint64_t v153 = (uint64_t)v120;
          break;
        default:
          __src[0] = 0;
          sub_11620();
          sub_205F4((uint64_t)&type metadata for WellnessSnippets.BloodOxygenDataQueryCodingKeys, (uint64_t)__src);
          type metadata accessor for OxygenSaturationQueryModel();
          sub_130C4(&qword_2022B0, (void (*)(uint64_t))type metadata accessor for OxygenSaturationQueryModel);
          sub_206B8();
          sub_20664();
          uint64_t v94 = sub_205D8();
          v95(v94);
          swift_unknownObjectRelease();
          uint64_t v96 = sub_205B8();
          v97(v96);
          sub_206A8();
LABEL_23:
          swift_storeEnumTagMultiPayload();
          uint64_t v153 = v91;
          break;
      }
      uint64_t v180 = (uint64_t)v225;
      sub_12F3C(v153, (uint64_t)v225, (void (*)(void))type metadata accessor for WellnessSnippets);
      sub_12F3C(v180, v218, (void (*)(void))type metadata accessor for WellnessSnippets);
    }
    else
    {
      uint64_t v98 = v220;
      uint64_t v99 = sub_1AD0D0();
      swift_allocError();
      char v101 = v100;
      sub_2694(&qword_202230);
      *char v101 = v98;
      sub_1AD1B0();
      sub_1AD0C0();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v99 - 8) + 104))(v101, enum case for DecodingError.typeMismatch(_:), v99);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v87, v86);
    }
  }
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v224);
}

uint64_t sub_12E44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return WellnessSnippets.init(from:)(a1, a2);
}

uint64_t sub_12E5C(void *a1)
{
  return WellnessSnippets.encode(to:)(a1);
}

uint64_t sub_12E74(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_12EF0()
{
  unint64_t result = qword_202238;
  if (!qword_202238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202238);
  }
  return result;
}

uint64_t sub_12F3C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_20688();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

unint64_t sub_12F9C()
{
  unint64_t result = qword_202260;
  if (!qword_202260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202260);
  }
  return result;
}

unint64_t sub_12FE8()
{
  unint64_t result = qword_202288;
  if (!qword_202288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202288);
  }
  return result;
}

uint64_t sub_13034()
{
  return sub_130C4(&qword_2022B8, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
}

uint64_t sub_1307C()
{
  return sub_130C4(&qword_2022C0, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
}

uint64_t sub_130C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WellnessSnippets(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
        {
          uint64_t v8 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
        }
        Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
        uint64_t v70 = Model[5];
        uint64_t v71 = (char *)a1 + v70;
        uint64_t v72 = (char *)a2 + v70;
        *(void *)uint64_t v71 = *(void *)v72;
        v71[8] = v72[8];
        uint64_t v73 = Model[6];
        uint64_t v74 = (char *)a1 + v73;
        uint64_t v75 = (char *)a2 + v73;
        *(void *)uint64_t v74 = *(void *)v75;
        v74[8] = v75[8];
        uint64_t v76 = Model[7];
        uint64_t v77 = (char *)a1 + v76;
        uint64_t v78 = (char *)a2 + v76;
        v77[8] = v78[8];
        *(void *)uint64_t v77 = *(void *)v78;
        uint64_t v79 = Model[8];
        uint64_t v80 = (char *)a1 + v79;
        uint64_t v81 = (char *)a2 + v79;
        v80[8] = v81[8];
        *(void *)uint64_t v80 = *(void *)v81;
        uint64_t v82 = Model[9];
        uint64_t v83 = (char *)a1 + v82;
        uint64_t v84 = (char *)a2 + v82;
        uint64_t v85 = sub_1AC1E0();
        __dst = (void *)v85;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v84, 1, v85))
        {
          uint64_t v86 = sub_2694(&qword_201E28);
          memcpy(v83, v84, *(void *)(*(void *)(v86 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 16))(v83, v84, v85);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v83, 0, 1, v85);
        }
        uint64_t v327 = Model[10];
        v328 = (uint64_t *)((char *)a1 + v327);
        v329 = (uint64_t *)((char *)a2 + v327);
        uint64_t v330 = v329[1];
        void *v328 = *v329;
        v328[1] = v330;
        uint64_t v331 = Model[11];
        v332 = (uint64_t *)((char *)a1 + v331);
        v333 = (uint64_t *)((char *)a2 + v331);
        uint64_t v334 = v333[1];
        void *v332 = *v333;
        v332[1] = v334;
        uint64_t v335 = Model[12];
        v336 = (uint64_t *)((char *)a1 + v335);
        v337 = (uint64_t *)((char *)a2 + v335);
        uint64_t v338 = v337[1];
        void *v336 = *v337;
        v336[1] = v338;
        uint64_t v339 = Model[13];
        v340 = (uint64_t *)((char *)a1 + v339);
        v341 = (uint64_t *)((char *)a2 + v339);
        uint64_t v342 = v341[1];
        void *v340 = *v341;
        v340[1] = v342;
        uint64_t v343 = Model[14];
        v344 = (uint64_t *)((char *)a1 + v343);
        v345 = (uint64_t *)((char *)a2 + v343);
        uint64_t v346 = v345[1];
        void *v344 = *v345;
        v344[1] = v346;
        uint64_t v347 = Model[15];
        v348 = (uint64_t *)((char *)a1 + v347);
        v349 = (uint64_t *)((char *)a2 + v347);
        uint64_t v350 = v349[1];
        void *v348 = *v349;
        v348[1] = v350;
        uint64_t v351 = Model[16];
        v352 = (char *)a1 + v351;
        v353 = (char *)a2 + v351;
        uint64_t v354 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v353, 1, v354))
        {
          uint64_t v355 = sub_2694(&qword_2022D0);
          memcpy(v352, v353, *(void *)(*(void *)(v355 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *))(*(__dst - 1) + 16))(v352, v353);
          uint64_t v508 = *(int *)(v354 + 20);
          v509 = &v352[v508];
          v510 = &v353[v508];
          uint64_t v511 = *((void *)v510 + 1);
          *(void *)v509 = *(void *)v510;
          *((void *)v509 + 1) = v511;
          uint64_t v512 = *(int *)(v354 + 24);
          v513 = &v352[v512];
          v514 = &v353[v512];
          uint64_t v515 = *((void *)v514 + 1);
          *(void *)v513 = *(void *)v514;
          *((void *)v513 + 1) = v515;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v352, 0, 1, v354);
        }
        goto LABEL_101;
      case 1u:
        uint64_t v10 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v10))
        {
          uint64_t v11 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v10);
        }
        uint64_t v87 = (int *)type metadata accessor for BloodPressureQueryModel();
        uint64_t v88 = v87[5];
        uint64_t v89 = (char *)a1 + v88;
        uint64_t v90 = (char *)a2 + v88;
        *(void *)uint64_t v89 = *(void *)v90;
        v89[8] = v90[8];
        uint64_t v91 = v87[6];
        unint64_t v92 = (char *)a1 + v91;
        unint64_t v93 = (char *)a2 + v91;
        *(void *)unint64_t v92 = *(void *)v93;
        v92[8] = v93[8];
        uint64_t v94 = v87[7];
        uint64_t v95 = (char *)a1 + v94;
        uint64_t v96 = (char *)a2 + v94;
        v95[8] = v96[8];
        *(void *)uint64_t v95 = *(void *)v96;
        uint64_t v97 = v87[8];
        uint64_t v98 = (char *)a1 + v97;
        uint64_t v99 = (char *)a2 + v97;
        v98[8] = v99[8];
        *(void *)uint64_t v98 = *(void *)v99;
        uint64_t v100 = v87[9];
        char v101 = (char *)a1 + v100;
        uint64_t v102 = (char *)a2 + v100;
        v101[8] = v102[8];
        *(void *)char v101 = *(void *)v102;
        uint64_t v103 = v87[10];
        uint64_t v104 = (char *)a1 + v103;
        uint64_t v105 = (char *)a2 + v103;
        *(void *)uint64_t v104 = *(void *)v105;
        v104[8] = v105[8];
        uint64_t v106 = v87[11];
        uint64_t v107 = (uint64_t *)((char *)a1 + v106);
        uint64_t v108 = (uint64_t *)((char *)a2 + v106);
        uint64_t v571 = v108[1];
        *uint64_t v107 = *v108;
        v107[1] = v571;
        uint64_t v109 = v87[12];
        uint64_t v110 = (uint64_t *)((char *)a1 + v109);
        uint64_t v111 = (uint64_t *)((char *)a2 + v109);
        uint64_t v570 = v111[1];
        *uint64_t v110 = *v111;
        v110[1] = v570;
        uint64_t v112 = v87[13];
        uint64_t v113 = (uint64_t *)((char *)a1 + v112);
        uint64_t v114 = (uint64_t *)((char *)a2 + v112);
        uint64_t v569 = v114[1];
        *uint64_t v113 = *v114;
        v113[1] = v569;
        uint64_t v115 = v87[14];
        long long v116 = (uint64_t *)((char *)a1 + v115);
        uint64_t v117 = (uint64_t *)((char *)a2 + v115);
        uint64_t v568 = v117[1];
        *long long v116 = *v117;
        v116[1] = v568;
        uint64_t v118 = v87[15];
        char v119 = (uint64_t *)((char *)a1 + v118);
        v120 = (uint64_t *)((char *)a2 + v118);
        uint64_t v121 = v120[1];
        *char v119 = *v120;
        v119[1] = v121;
        uint64_t v122 = v87[16];
        uint64_t v123 = (uint64_t *)((char *)a1 + v122);
        uint64_t v124 = (uint64_t *)((char *)a2 + v122);
        uint64_t v125 = v124[1];
        *uint64_t v123 = *v124;
        v123[1] = v125;
        uint64_t v126 = v87[17];
        uint64_t v127 = (uint64_t *)((char *)a1 + v126);
        uint64_t v128 = (uint64_t *)((char *)a2 + v126);
        uint64_t v129 = v128[1];
        *uint64_t v127 = *v128;
        v127[1] = v129;
        uint64_t v130 = v87[18];
        uint64_t v131 = (uint64_t *)((char *)a1 + v130);
        uint64_t v132 = (uint64_t *)((char *)a2 + v130);
        uint64_t v133 = v132[1];
        *uint64_t v131 = *v132;
        v131[1] = v133;
        uint64_t v134 = v87[19];
        uint64_t v135 = (uint64_t *)((char *)a1 + v134);
        uint64_t v136 = (uint64_t *)((char *)a2 + v134);
        uint64_t v137 = v136[1];
        *uint64_t v135 = *v136;
        v135[1] = v137;
        uint64_t v138 = v87[20];
        __dsta = (char *)a1 + v138;
        uint64_t v139 = (char *)a2 + v138;
        uint64_t v140 = sub_1AAB10();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v139, 1, v140))
        {
          uint64_t v141 = sub_2694(&qword_201E20);
          memcpy(__dsta, v139, *(void *)(*(void *)(v141 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v140 - 8) + 16))(__dsta, v139, v140);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dsta, 0, 1, v140);
        }
        uint64_t v356 = v87[21];
        v357 = (uint64_t *)((char *)a1 + v356);
        v358 = (uint64_t *)((char *)a2 + v356);
        uint64_t v359 = v358[1];
        void *v357 = *v358;
        v357[1] = v359;
        uint64_t v360 = v87[22];
        v361 = (uint64_t *)((char *)a1 + v360);
        v362 = (uint64_t *)((char *)a2 + v360);
        uint64_t v363 = v362[1];
        void *v361 = *v362;
        v361[1] = v363;
        uint64_t v364 = v87[23];
        uint64_t v53 = (char *)a1 + v364;
        uint64_t v54 = (char *)a2 + v364;
        uint64_t v55 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v54, 1, v55)) {
          goto LABEL_71;
        }
        goto LABEL_93;
      case 2u:
        uint64_t v12 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v12))
        {
          uint64_t v13 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v12);
        }
        v142 = (int *)type metadata accessor for BloodPressureLogModel();
        uint64_t v143 = v142[5];
        v144 = (uint64_t *)((char *)a1 + v143);
        uint64_t v145 = (uint64_t *)((char *)a2 + v143);
        uint64_t v146 = v145[1];
        void *v144 = *v145;
        v144[1] = v146;
        uint64_t v147 = v142[6];
        v148 = (uint64_t *)((char *)a1 + v147);
        v149 = (uint64_t *)((char *)a2 + v147);
        uint64_t v150 = v149[1];
        void *v148 = *v149;
        v148[1] = v150;
        uint64_t v151 = v142[7];
        v152 = (uint64_t *)((char *)a1 + v151);
        uint64_t v153 = (uint64_t *)((char *)a2 + v151);
        uint64_t v154 = v153[1];
        void *v152 = *v153;
        v152[1] = v154;
        uint64_t v155 = v142[8];
        v156 = (char *)a1 + v155;
        uint64_t v157 = (char *)a2 + v155;
        uint64_t v158 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v157, 1, v158))
        {
          uint64_t v159 = sub_2694(&qword_2022D0);
          memcpy(v156, v157, *(void *)(*(void *)(v159 - 8) + 64));
        }
        else
        {
          uint64_t v366 = sub_1AC1E0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v366 - 8) + 16))(v156, v157, v366);
          uint64_t v367 = *(int *)(v158 + 20);
          v368 = &v156[v367];
          v369 = &v157[v367];
          uint64_t v370 = *((void *)v369 + 1);
          *(void *)v368 = *(void *)v369;
          *((void *)v368 + 1) = v370;
          uint64_t v371 = *(int *)(v158 + 24);
          v372 = &v156[v371];
          v373 = &v157[v371];
          uint64_t v374 = *((void *)v373 + 1);
          *(void *)v372 = *(void *)v373;
          *((void *)v372 + 1) = v374;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v156, 0, 1, v158);
        }
        uint64_t v375 = v142[9];
        v376 = (uint64_t *)((char *)a1 + v375);
        v377 = (uint64_t *)((char *)a2 + v375);
        uint64_t v378 = v377[1];
        void *v376 = *v377;
        v376[1] = v378;
        uint64_t v379 = v142[10];
        v380 = (uint64_t *)((char *)a1 + v379);
        v381 = (uint64_t *)((char *)a2 + v379);
        uint64_t v382 = v381[1];
        void *v380 = *v381;
        v380[1] = v382;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 3u:
        uint64_t v14 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v14))
        {
          uint64_t v15 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v14);
        }
        v160 = (int *)type metadata accessor for CycleTrackingLogModel();
        uint64_t v161 = v160[5];
        v162 = (uint64_t *)((char *)a1 + v161);
        uint64_t v163 = (uint64_t *)((char *)a2 + v161);
        uint64_t v164 = v163[1];
        void *v162 = *v163;
        v162[1] = v164;
        uint64_t v165 = v160[6];
        v166 = (uint64_t *)((char *)a1 + v165);
        uint64_t v167 = (uint64_t *)((char *)a2 + v165);
        uint64_t v168 = v167[1];
        void *v166 = *v167;
        v166[1] = v168;
        uint64_t v169 = v160[7];
        uint64_t v170 = (uint64_t *)((char *)a1 + v169);
        char v171 = (uint64_t *)((char *)a2 + v169);
        uint64_t v172 = v171[1];
        *uint64_t v170 = *v171;
        v170[1] = v172;
        uint64_t v173 = v160[8];
        uint64_t v174 = (char *)a1 + v173;
        char v175 = (char *)a2 + v173;
        uint64_t v176 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v175, 1, v176))
        {
          uint64_t v177 = sub_2694(&qword_2022D0);
          memcpy(v174, v175, *(void *)(*(void *)(v177 - 8) + 64));
        }
        else
        {
          uint64_t v383 = sub_1AC1E0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v383 - 8) + 16))(v174, v175, v383);
          uint64_t v384 = *(int *)(v176 + 20);
          v385 = &v174[v384];
          v386 = &v175[v384];
          uint64_t v387 = *((void *)v386 + 1);
          *(void *)v385 = *(void *)v386;
          *((void *)v385 + 1) = v387;
          uint64_t v388 = *(int *)(v176 + 24);
          v389 = &v174[v388];
          v390 = &v175[v388];
          uint64_t v391 = *((void *)v390 + 1);
          *(void *)v389 = *(void *)v390;
          *((void *)v389 + 1) = v391;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v174, 0, 1, v176);
        }
        uint64_t v392 = v160[9];
        v393 = (char *)a1 + v392;
        v394 = (char *)a2 + v392;
        uint64_t v395 = sub_1AAB10();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v394, 1, v395))
        {
          uint64_t v396 = sub_2694(&qword_201E20);
          memcpy(v393, v394, *(void *)(*(void *)(v396 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v395 - 8) + 16))(v393, v394, v395);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v393, 0, 1, v395);
        }
        goto LABEL_101;
      case 4u:
        uint64_t v16 = a2[1];
        *a1 = *a2;
        a1[1] = v16;
        uint64_t v17 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
        uint64_t v18 = (char *)a1 + v17;
        uint64_t v19 = (char *)a2 + v17;
        uint64_t v20 = sub_1AAB10();
        uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
        swift_bridgeObjectRetain();
        v21(v18, v19, v20);
        goto LABEL_101;
      case 5u:
        uint64_t v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        uint64_t v23 = a2[3];
        a1[2] = a2[2];
        a1[3] = v23;
        uint64_t v24 = a2[5];
        a1[4] = a2[4];
        a1[5] = v24;
        *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 6u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v25 = a2[2];
        a1[1] = a2[1];
        a1[2] = v25;
        uint64_t v26 = (int *)type metadata accessor for GenericMedCompletedLogModel();
        uint64_t v27 = v26[6];
        uint64_t v28 = (char *)a1 + v27;
        uint64_t v29 = (char *)a2 + v27;
        uint64_t v30 = sub_1AAD90();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v29, 1, v30))
        {
          uint64_t v31 = sub_2694(&qword_2022C8);
          memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v28, 0, 1, v30);
        }
        *((unsigned char *)a1 + v26[7]) = *((unsigned char *)a2 + v26[7]);
        uint64_t v178 = v26[8];
        char v179 = (uint64_t *)((char *)a1 + v178);
        uint64_t v180 = (uint64_t *)((char *)a2 + v178);
        uint64_t v181 = v180[1];
        *char v179 = *v180;
        v179[1] = v181;
        *((unsigned char *)a1 + v26[9]) = *((unsigned char *)a2 + v26[9]);
        uint64_t v182 = v26[10];
        v183 = (uint64_t *)((char *)a1 + v182);
        v184 = (uint64_t *)((char *)a2 + v182);
        uint64_t v185 = v184[1];
        void *v183 = *v184;
        v183[1] = v185;
        uint64_t v186 = v26[11];
        uint64_t v187 = (uint64_t *)((char *)a1 + v186);
        uint64_t v188 = (uint64_t *)((char *)a2 + v186);
        uint64_t v189 = v188[1];
        *uint64_t v187 = *v188;
        v187[1] = v189;
        uint64_t v190 = v26[12];
        uint64_t v191 = (uint64_t *)((char *)a1 + v190);
        uint64_t v192 = (uint64_t *)((char *)a2 + v190);
        uint64_t v193 = v192[1];
        *uint64_t v191 = *v192;
        v191[1] = v193;
        uint64_t v194 = v26[13];
        uint64_t v195 = (uint64_t *)((char *)a1 + v194);
        uint64_t v196 = (uint64_t *)((char *)a2 + v194);
        uint64_t v197 = v196[1];
        *uint64_t v195 = *v196;
        v195[1] = v197;
        uint64_t v198 = v26[14];
        uint64_t v53 = (char *)a1 + v198;
        uint64_t v54 = (char *)a2 + v198;
        uint64_t v55 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v54, 1, v55)) {
          goto LABEL_71;
        }
        goto LABEL_93;
      case 7u:
        uint64_t v32 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v32))
        {
          uint64_t v33 = sub_2694(&qword_2022D0);
          memcpy(a1, a2, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          uint64_t v199 = sub_1AC1E0();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v199 - 8) + 16))(a1, a2, v199);
          uint64_t v200 = *(int *)(v32 + 20);
          uint64_t v201 = (uint64_t *)((char *)a1 + v200);
          uint64_t v202 = (uint64_t *)((char *)a2 + v200);
          uint64_t v203 = v202[1];
          *uint64_t v201 = *v202;
          v201[1] = v203;
          uint64_t v204 = *(int *)(v32 + 24);
          uint64_t v205 = (uint64_t *)((char *)a1 + v204);
          uint64_t v206 = (uint64_t *)((char *)a2 + v204);
          uint64_t v207 = v206[1];
          *uint64_t v205 = *v206;
          v205[1] = v207;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v32);
        }
        uint64_t v208 = (int *)type metadata accessor for HealthDataLogModel();
        *(uint64_t *)((char *)a1 + v208[5]) = *(uint64_t *)((char *)a2 + v208[5]);
        uint64_t v209 = v208[6];
        uint64_t v210 = (uint64_t *)((char *)a1 + v209);
        uint64_t v211 = (uint64_t *)((char *)a2 + v209);
        uint64_t v212 = v211[1];
        *uint64_t v210 = *v211;
        v210[1] = v212;
        uint64_t v213 = v208[7];
        uint64_t v214 = (uint64_t *)((char *)a1 + v213);
        uint64_t v215 = (uint64_t *)((char *)a2 + v213);
        uint64_t v216 = v215[1];
        *uint64_t v214 = *v215;
        v214[1] = v216;
        uint64_t v217 = v208[8];
        uint64_t v218 = (uint64_t *)((char *)a1 + v217);
        uint64_t v219 = (uint64_t *)((char *)a2 + v217);
        uint64_t v220 = v219[1];
        *uint64_t v218 = *v219;
        v218[1] = v220;
        uint64_t v221 = v208[9];
        uint64_t v222 = (uint64_t *)((char *)a1 + v221);
        uint64_t v223 = (uint64_t *)((char *)a2 + v221);
        uint64_t v224 = v223[1];
        *uint64_t v222 = *v223;
        v222[1] = v224;
        uint64_t v225 = v208[10];
        __dstb = (char *)a1 + v225;
        v226 = (char *)a2 + v225;
        uint64_t v227 = sub_1AAD90();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v226, 1, v227))
        {
          uint64_t v228 = sub_2694(&qword_2022C8);
          memcpy(__dstb, v226, *(void *)(*(void *)(v228 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v227 - 8) + 16))(__dstb, v226, v227);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dstb, 0, 1, v227);
        }
        uint64_t v397 = v208[11];
        v398 = (uint64_t *)((char *)a1 + v397);
        v399 = (uint64_t *)((char *)a2 + v397);
        uint64_t v400 = v399[1];
        void *v398 = *v399;
        v398[1] = v400;
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 8u:
        uint64_t v34 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v34))
        {
          uint64_t v35 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v35 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v34 - 8) + 16))(a1, a2, v34);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v34);
        }
        v229 = (int *)type metadata accessor for GenericQueryModel();
        uint64_t v230 = v229[5];
        v231 = (char *)a1 + v230;
        v232 = (char *)a2 + v230;
        *(void *)v231 = *(void *)v232;
        v231[8] = v232[8];
        uint64_t v233 = v229[6];
        v234 = (char *)a1 + v233;
        v235 = (char *)a2 + v233;
        *(void *)v234 = *(void *)v235;
        v234[8] = v235[8];
        uint64_t v236 = v229[7];
        v237 = (char *)a1 + v236;
        v238 = (char *)a2 + v236;
        v237[8] = v238[8];
        *(void *)v237 = *(void *)v238;
        uint64_t v239 = v229[8];
        v240 = (char *)a1 + v239;
        v241 = (char *)a2 + v239;
        v240[8] = v241[8];
        *(void *)v240 = *(void *)v241;
        uint64_t v242 = v229[9];
        v243 = (char *)a1 + v242;
        v244 = (char *)a2 + v242;
        v243[8] = v244[8];
        *(void *)v243 = *(void *)v244;
        uint64_t v245 = v229[10];
        v246 = (char *)a1 + v245;
        v247 = (char *)a2 + v245;
        uint64_t v248 = sub_1AC1E0();
        uint64_t v572 = v248;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v247, 1, v248))
        {
          uint64_t v249 = sub_2694(&qword_201E28);
          memcpy(v246, v247, *(void *)(*(void *)(v249 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v248 - 8) + 16))(v246, v247, v248);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v246, 0, 1, v248);
        }
        uint64_t v401 = v229[11];
        v402 = (uint64_t *)((char *)a1 + v401);
        v403 = (uint64_t *)((char *)a2 + v401);
        uint64_t v404 = v403[1];
        void *v402 = *v403;
        v402[1] = v404;
        uint64_t v405 = v229[12];
        v406 = (uint64_t *)((char *)a1 + v405);
        v407 = (uint64_t *)((char *)a2 + v405);
        uint64_t v408 = v407[1];
        void *v406 = *v407;
        v406[1] = v408;
        uint64_t v409 = v229[13];
        v410 = (uint64_t *)((char *)a1 + v409);
        v411 = (uint64_t *)((char *)a2 + v409);
        uint64_t v412 = v411[1];
        void *v410 = *v411;
        v410[1] = v412;
        uint64_t v413 = v229[14];
        v414 = (uint64_t *)((char *)a1 + v413);
        v415 = (uint64_t *)((char *)a2 + v413);
        uint64_t v416 = v415[1];
        void *v414 = *v415;
        v414[1] = v416;
        uint64_t v417 = v229[15];
        v418 = (uint64_t *)((char *)a1 + v417);
        v419 = (uint64_t *)((char *)a2 + v417);
        uint64_t v420 = v419[1];
        void *v418 = *v419;
        v418[1] = v420;
        uint64_t v421 = v229[16];
        v422 = (uint64_t *)((char *)a1 + v421);
        v423 = (uint64_t *)((char *)a2 + v421);
        uint64_t v424 = v423[1];
        void *v422 = *v423;
        v422[1] = v424;
        uint64_t v425 = v229[17];
        v426 = (uint64_t *)((char *)a1 + v425);
        v427 = (uint64_t *)((char *)a2 + v425);
        uint64_t v428 = v427[1];
        void *v426 = *v427;
        v426[1] = v428;
        uint64_t v429 = v229[18];
        __dstc = (char *)a1 + v429;
        v303 = (char *)a2 + v429;
        uint64_t v430 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v303, 1, v430)) {
          goto LABEL_62;
        }
        (*(void (**)(char *, char *))(*(void *)(v572 - 8) + 16))(__dstc, v303);
        uint64_t v525 = *(int *)(v430 + 20);
        v526 = &__dstc[v525];
        v527 = &v303[v525];
        uint64_t v528 = *((void *)v527 + 1);
        *(void *)v526 = *(void *)v527;
        *((void *)v526 + 1) = v528;
        uint64_t v529 = *(int *)(v430 + 24);
        v530 = &__dstc[v529];
        v531 = &v303[v529];
        uint64_t v532 = *((void *)v531 + 1);
        *(void *)v530 = *(void *)v531;
        *((void *)v530 + 1) = v532;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dstc, 0, 1, v430);
        goto LABEL_101;
      case 9u:
        uint64_t v36 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v36))
        {
          uint64_t v37 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v36 - 8) + 16))(a1, a2, v36);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v36);
        }
        v250 = (int *)type metadata accessor for HeightQueryModel();
        uint64_t v251 = v250[5];
        v252 = (char *)a1 + v251;
        v253 = (char *)a2 + v251;
        *(void *)v252 = *(void *)v253;
        v252[8] = v253[8];
        uint64_t v254 = v250[6];
        v255 = (char *)a1 + v254;
        v256 = (char *)a2 + v254;
        *(void *)v255 = *(void *)v256;
        v255[8] = v256[8];
        uint64_t v257 = v250[7];
        v258 = (char *)a1 + v257;
        v259 = (char *)a2 + v257;
        v258[8] = v259[8];
        *(void *)v258 = *(void *)v259;
        uint64_t v260 = v250[8];
        v261 = (char *)a1 + v260;
        v262 = (char *)a2 + v260;
        uint64_t v263 = sub_1AC1E0();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v262, 1, v263))
        {
          uint64_t v264 = sub_2694(&qword_201E28);
          memcpy(v261, v262, *(void *)(*(void *)(v264 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v263 - 8) + 16))(v261, v262, v263);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v261, 0, 1, v263);
        }
        *((unsigned char *)a1 + v250[9]) = *((unsigned char *)a2 + v250[9]);
        uint64_t v431 = v250[10];
        v432 = (char *)a1 + v431;
        v433 = (char *)a2 + v431;
        uint64_t v434 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v433, 1, v434))
        {
          uint64_t v435 = sub_2694(&qword_2022D0);
          memcpy(v432, v433, *(void *)(*(void *)(v435 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v263 - 8) + 16))(v432, v433, v263);
          uint64_t v533 = *(int *)(v434 + 20);
          v534 = &v432[v533];
          v535 = &v433[v533];
          uint64_t v536 = *((void *)v535 + 1);
          *(void *)v534 = *(void *)v535;
          *((void *)v534 + 1) = v536;
          uint64_t v537 = *(int *)(v434 + 24);
          v538 = &v432[v537];
          v539 = &v433[v537];
          uint64_t v540 = *((void *)v539 + 1);
          *(void *)v538 = *(void *)v539;
          *((void *)v538 + 1) = v540;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v432, 0, 1, v434);
        }
        uint64_t v541 = v250[11];
        v542 = (uint64_t *)((char *)a1 + v541);
        v543 = (uint64_t *)((char *)a2 + v541);
        uint64_t v544 = v543[1];
        void *v542 = *v543;
        v542[1] = v544;
        uint64_t v545 = v250[12];
        v546 = (uint64_t *)((char *)a1 + v545);
        v547 = (uint64_t *)((char *)a2 + v545);
        uint64_t v548 = v547[1];
        void *v546 = *v547;
        v546[1] = v548;
        uint64_t v549 = v250[13];
        v550 = (uint64_t *)((char *)a1 + v549);
        v551 = (uint64_t *)((char *)a2 + v549);
        uint64_t v552 = v551[1];
        void *v550 = *v551;
        v550[1] = v552;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 0xAu:
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
        a1[2] = a2[2];
        *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
        a1[4] = a2[4];
        *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
        *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
        a1[6] = a2[6];
        uint64_t v38 = a2[8];
        *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
        a1[8] = v38;
        a1[10] = a2[10];
        *((unsigned char *)a1 + 88) = *((unsigned char *)a2 + 88);
        uint64_t v39 = a2[13];
        a1[12] = a2[12];
        a1[13] = v39;
        uint64_t v40 = a2[15];
        a1[14] = a2[14];
        a1[15] = v40;
        uint64_t v41 = a2[17];
        a1[16] = a2[16];
        a1[17] = v41;
        uint64_t v42 = a2[19];
        a1[18] = a2[18];
        a1[19] = v42;
        uint64_t v43 = a2[21];
        a1[20] = a2[20];
        a1[21] = v43;
        uint64_t v44 = a2[23];
        a1[22] = a2[22];
        a1[23] = v44;
        uint64_t v45 = a2[25];
        a1[24] = a2[24];
        a1[25] = v45;
        uint64_t v46 = a2[27];
        a1[26] = a2[26];
        a1[27] = v46;
        uint64_t v47 = a2[29];
        a1[28] = a2[28];
        a1[29] = v47;
        *((unsigned char *)a1 + 240) = *((unsigned char *)a2 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 0xBu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v48 = a2[3];
        a1[2] = a2[2];
        a1[3] = v48;
        uint64_t v49 = a2[5];
        a1[4] = a2[4];
        a1[5] = v49;
        uint64_t v50 = a2[7];
        a1[6] = a2[6];
        a1[7] = v50;
        uint64_t v51 = a2[9];
        a1[8] = a2[8];
        a1[9] = v51;
        a1[10] = a2[10];
        uint64_t v52 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
        uint64_t v53 = (char *)a1 + v52;
        uint64_t v54 = (char *)a2 + v52;
        uint64_t v55 = type metadata accessor for SnippetHeaderModel();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v54, 1, v55)) {
          goto LABEL_71;
        }
LABEL_93:
        uint64_t v516 = sub_1AC1E0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v516 - 8) + 16))(v53, v54, v516);
        uint64_t v517 = *(int *)(v55 + 20);
        v518 = &v53[v517];
        v519 = &v54[v517];
        uint64_t v520 = *((void *)v519 + 1);
        *(void *)v518 = *(void *)v519;
        *((void *)v518 + 1) = v520;
        uint64_t v521 = *(int *)(v55 + 24);
        v522 = &v53[v521];
        v523 = &v54[v521];
        uint64_t v524 = *((void *)v523 + 1);
        *(void *)v522 = *(void *)v523;
        *((void *)v522 + 1) = v524;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v53, 0, 1, v55);
        goto LABEL_101;
      case 0xCu:
        uint64_t v56 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v56))
        {
          uint64_t v57 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v57 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v56 - 8) + 16))(a1, a2, v56);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v56);
        }
        v265 = (int *)type metadata accessor for SleepQueryModel();
        uint64_t v266 = v265[5];
        v267 = (char *)a1 + v266;
        v268 = (char *)a2 + v266;
        uint64_t v269 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v268, 1, v269))
        {
          uint64_t v270 = sub_2694(&qword_2022D0);
          memcpy(v267, v268, *(void *)(*(void *)(v270 - 8) + 64));
        }
        else
        {
          uint64_t v436 = sub_1AC1E0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v436 - 8) + 16))(v267, v268, v436);
          uint64_t v437 = *(int *)(v269 + 20);
          v438 = &v267[v437];
          v439 = &v268[v437];
          uint64_t v440 = *((void *)v439 + 1);
          *(void *)v438 = *(void *)v439;
          *((void *)v438 + 1) = v440;
          uint64_t v441 = *(int *)(v269 + 24);
          v442 = &v267[v441];
          v443 = &v268[v441];
          uint64_t v444 = *((void *)v443 + 1);
          *(void *)v442 = *(void *)v443;
          *((void *)v442 + 1) = v444;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v267, 0, 1, v269);
        }
        uint64_t v445 = v265[6];
        v446 = (uint64_t *)((char *)a1 + v445);
        v447 = (uint64_t *)((char *)a2 + v445);
        uint64_t v448 = v447[1];
        void *v446 = *v447;
        v446[1] = v448;
        uint64_t v449 = v265[7];
        v450 = (uint64_t *)((char *)a1 + v449);
        v451 = (uint64_t *)((char *)a2 + v449);
        __dstd = (void *)v451[1];
        void *v450 = *v451;
        v450[1] = __dstd;
        uint64_t v452 = v265[8];
        v453 = (uint64_t *)((char *)a1 + v452);
        v454 = (uint64_t *)((char *)a2 + v452);
        uint64_t v573 = v454[1];
        void *v453 = *v454;
        v453[1] = v573;
        uint64_t v455 = v265[9];
        v456 = (uint64_t *)((char *)a1 + v455);
        v457 = (uint64_t *)((char *)a2 + v455);
        uint64_t v458 = v457[1];
        void *v456 = *v457;
        v456[1] = v458;
        uint64_t v459 = v265[10];
        v460 = (uint64_t *)((char *)a1 + v459);
        v461 = (uint64_t *)((char *)a2 + v459);
        uint64_t v462 = v461[1];
        void *v460 = *v461;
        v460[1] = v462;
        *(uint64_t *)((char *)a1 + v265[11]) = *(uint64_t *)((char *)a2 + v265[11]);
        *(uint64_t *)((char *)a1 + v265[12]) = *(uint64_t *)((char *)a2 + v265[12]);
        *(uint64_t *)((char *)a1 + v265[13]) = *(uint64_t *)((char *)a2 + v265[13]);
        *(uint64_t *)((char *)a1 + v265[14]) = *(uint64_t *)((char *)a2 + v265[14]);
        uint64_t v463 = v265[15];
        v464 = (uint64_t *)((char *)a1 + v463);
        v465 = (uint64_t *)((char *)a2 + v463);
        uint64_t v466 = v465[1];
        void *v464 = *v465;
        v464[1] = v466;
        uint64_t v467 = v265[16];
        v468 = (uint64_t *)((char *)a1 + v467);
        v469 = (uint64_t *)((char *)a2 + v467);
        uint64_t v470 = v469[1];
        void *v468 = *v469;
        v468[1] = v470;
        uint64_t v471 = v265[17];
        v472 = (uint64_t *)((char *)a1 + v471);
        v473 = (uint64_t *)((char *)a2 + v471);
        uint64_t v474 = v473[1];
        void *v472 = *v473;
        v472[1] = v474;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 0xDu:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v58 = a2[2];
        a1[1] = a2[1];
        a1[2] = v58;
        uint64_t v59 = a2[4];
        a1[3] = a2[3];
        a1[4] = v59;
        uint64_t v60 = a2[6];
        a1[5] = a2[5];
        a1[6] = v60;
        uint64_t v61 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
        uint64_t v62 = v61[8];
        uint64_t v63 = (char *)a1 + v62;
        uint64_t v64 = (char *)a2 + v62;
        uint64_t v65 = sub_1AAD90();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v64, 1, v65))
        {
          uint64_t v66 = sub_2694(&qword_2022C8);
          memcpy(v63, v64, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v63, v64, v65);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v63, 0, 1, v65);
        }
        uint64_t v271 = v61[9];
        v272 = (char *)a1 + v271;
        v273 = (char *)a2 + v271;
        *(void *)v272 = *(void *)v273;
        v272[8] = v273[8];
        uint64_t v274 = v61[10];
        v275 = (uint64_t *)((char *)a1 + v274);
        v276 = (uint64_t *)((char *)a2 + v274);
        uint64_t v277 = v276[1];
        void *v275 = *v276;
        v275[1] = v277;
        uint64_t v278 = v61[11];
        v279 = (uint64_t *)((char *)a1 + v278);
        v280 = (uint64_t *)((char *)a2 + v278);
        uint64_t v281 = v280[1];
        void *v279 = *v280;
        v279[1] = v281;
        uint64_t v282 = v61[12];
        v283 = (uint64_t *)((char *)a1 + v282);
        v284 = (uint64_t *)((char *)a2 + v282);
        uint64_t v285 = v284[1];
        void *v283 = *v284;
        v283[1] = v285;
        uint64_t v286 = v61[13];
        v287 = (uint64_t *)((char *)a1 + v286);
        v288 = (uint64_t *)((char *)a2 + v286);
        uint64_t v289 = v288[1];
        void *v287 = *v288;
        v287[1] = v289;
        *((unsigned char *)a1 + v61[14]) = *((unsigned char *)a2 + v61[14]);
        *((unsigned char *)a1 + v61[15]) = *((unsigned char *)a2 + v61[15]);
        uint64_t v290 = v61[16];
        v291 = (uint64_t *)((char *)a1 + v290);
        v292 = (uint64_t *)((char *)a2 + v290);
        uint64_t v293 = v292[1];
        void *v291 = *v292;
        v291[1] = v293;
        uint64_t v294 = v61[17];
        v295 = (uint64_t *)((char *)a1 + v294);
        v296 = (uint64_t *)((char *)a2 + v294);
        uint64_t v297 = v296[1];
        void *v295 = *v296;
        v295[1] = v297;
        uint64_t v298 = v61[18];
        v299 = (uint64_t *)((char *)a1 + v298);
        v300 = (uint64_t *)((char *)a2 + v298);
        uint64_t v301 = v300[1];
        void *v299 = *v300;
        v299[1] = v301;
        uint64_t v302 = v61[19];
        __dstc = (char *)a1 + v302;
        v303 = (char *)a2 + v302;
        uint64_t v304 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v303, 1, v304))
        {
LABEL_62:
          uint64_t v305 = sub_2694(&qword_2022D0);
          memcpy(__dstc, v303, *(void *)(*(void *)(v305 - 8) + 64));
        }
        else
        {
          uint64_t v475 = sub_1AC1E0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v475 - 8) + 16))(__dstc, v303, v475);
          uint64_t v476 = *(int *)(v304 + 20);
          v477 = &__dstc[v476];
          v478 = &v303[v476];
          uint64_t v479 = *((void *)v478 + 1);
          *(void *)v477 = *(void *)v478;
          *((void *)v477 + 1) = v479;
          uint64_t v480 = *(int *)(v304 + 24);
          v481 = &__dstc[v480];
          v482 = &v303[v480];
          uint64_t v483 = *((void *)v482 + 1);
          *(void *)v481 = *(void *)v482;
          *((void *)v481 + 1) = v483;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dstc, 0, 1, v304);
        }
        goto LABEL_101;
      case 0xEu:
        uint64_t v67 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v67))
        {
          uint64_t v68 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v68 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v67 - 8) + 16))(a1, a2, v67);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v67);
        }
        v306 = (int *)type metadata accessor for TemperatureQueryModel();
        uint64_t v307 = v306[5];
        v308 = (char *)a1 + v307;
        v309 = (char *)a2 + v307;
        *(void *)v308 = *(void *)v309;
        v308[8] = v309[8];
        uint64_t v310 = v306[6];
        v311 = (char *)a1 + v310;
        v312 = (char *)a2 + v310;
        *(void *)v311 = *(void *)v312;
        v311[8] = v312[8];
        uint64_t v313 = v306[7];
        v314 = (char *)a1 + v313;
        v315 = (char *)a2 + v313;
        v314[8] = v315[8];
        *(void *)v314 = *(void *)v315;
        uint64_t v316 = v306[8];
        v317 = (char *)a1 + v316;
        v318 = (char *)a2 + v316;
        v317[8] = v318[8];
        *(void *)v317 = *(void *)v318;
        uint64_t v319 = v306[9];
        v320 = (char *)a1 + v319;
        v321 = (char *)a2 + v319;
        v320[8] = v321[8];
        *(void *)v320 = *(void *)v321;
        uint64_t v322 = v306[10];
        v323 = (char *)a1 + v322;
        v324 = (char *)a2 + v322;
        uint64_t v325 = sub_1AC1E0();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v324, 1, v325))
        {
          uint64_t v326 = sub_2694(&qword_201E28);
          memcpy(v323, v324, *(void *)(*(void *)(v326 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v325 - 8) + 16))(v323, v324, v325);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v323, 0, 1, v325);
        }
        uint64_t v484 = v306[11];
        v485 = (uint64_t *)((char *)a1 + v484);
        v486 = (uint64_t *)((char *)a2 + v484);
        uint64_t v487 = v486[1];
        void *v485 = *v486;
        v485[1] = v487;
        uint64_t v488 = v306[12];
        v489 = (uint64_t *)((char *)a1 + v488);
        v490 = (uint64_t *)((char *)a2 + v488);
        uint64_t v491 = v490[1];
        void *v489 = *v490;
        v489[1] = v491;
        uint64_t v492 = v306[13];
        v493 = (uint64_t *)((char *)a1 + v492);
        v494 = (uint64_t *)((char *)a2 + v492);
        uint64_t v495 = v494[1];
        void *v493 = *v494;
        v493[1] = v495;
        uint64_t v496 = v306[14];
        v497 = (uint64_t *)((char *)a1 + v496);
        v498 = (uint64_t *)((char *)a2 + v496);
        uint64_t v499 = v498[1];
        void *v497 = *v498;
        v497[1] = v499;
        uint64_t v500 = v306[15];
        v501 = (uint64_t *)((char *)a1 + v500);
        v502 = (uint64_t *)((char *)a2 + v500);
        uint64_t v503 = v502[1];
        void *v501 = *v502;
        v501[1] = v503;
        uint64_t v504 = v306[16];
        v505 = (char *)a1 + v504;
        v506 = (char *)a2 + v504;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v506, 1, v325))
        {
          uint64_t v507 = sub_2694(&qword_201E28);
          memcpy(v505, v506, *(void *)(*(void *)(v507 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v325 - 8) + 16))(v505, v506, v325);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v505, 0, 1, v325);
        }
        uint64_t v553 = v306[17];
        v554 = (uint64_t *)((char *)a1 + v553);
        v555 = (uint64_t *)((char *)a2 + v553);
        uint64_t v556 = v555[1];
        void *v554 = *v555;
        v554[1] = v556;
        uint64_t v557 = v306[18];
        uint64_t v53 = (char *)a1 + v557;
        uint64_t v54 = (char *)a2 + v557;
        uint64_t v558 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v54, 1, v558))
        {
LABEL_71:
          uint64_t v365 = sub_2694(&qword_2022D0);
          memcpy(v53, v54, *(void *)(*(void *)(v365 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v325 - 8) + 16))(v53, v54, v325);
          uint64_t v559 = *(int *)(v558 + 20);
          v560 = &v53[v559];
          v561 = &v54[v559];
          uint64_t v562 = *((void *)v561 + 1);
          *(void *)v560 = *(void *)v561;
          *((void *)v560 + 1) = v562;
          uint64_t v563 = *(int *)(v558 + 24);
          v564 = &v53[v563];
          v565 = &v54[v563];
          uint64_t v566 = *((void *)v565 + 1);
          *(void *)v564 = *(void *)v565;
          *((void *)v564 + 1) = v566;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v53, 0, 1, v558);
        }
LABEL_101:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for WellnessSnippets(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v3 = sub_1AAD90();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v3)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      }
      uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
      uint64_t v5 = a1 + *(int *)(Model + 36);
      uint64_t v6 = sub_1AC1E0();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v6)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = *(int *)(Model + 64);
      goto LABEL_66;
    case 1:
      uint64_t v8 = sub_1AAD90();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v8)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
      }
      uint64_t v9 = type metadata accessor for BloodPressureQueryModel();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = a1 + *(int *)(v9 + 80);
      uint64_t v11 = sub_1AAB10();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v10, 1, v11)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(int *)(v9 + 92);
      goto LABEL_57;
    case 2:
      uint64_t v13 = sub_1AAD90();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v13)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
      }
      uint64_t v14 = type metadata accessor for BloodPressureLogModel();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = a1 + *(int *)(v14 + 32);
      uint64_t v16 = type metadata accessor for SnippetHeaderModel();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v15, 1, v16))
      {
        uint64_t v17 = sub_1AC1E0();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v15, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      break;
    case 3:
      uint64_t v18 = sub_1AAD90();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v18)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
      }
      uint64_t v19 = type metadata accessor for CycleTrackingLogModel();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v20 = a1 + *(int *)(v19 + 32);
      uint64_t v21 = type metadata accessor for SnippetHeaderModel();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v20, 1, v21))
      {
        uint64_t v22 = sub_1AC1E0();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v20, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v23 = a1 + *(int *)(v19 + 36);
      uint64_t v24 = sub_1AAB10();
      uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v23, 1, v24);
      if (result) {
        return result;
      }
      uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8);
      uint64_t v26 = v23;
      uint64_t v27 = v24;
LABEL_24:
      return v25(v26, v27);
    case 4:
      swift_bridgeObjectRelease();
      uint64_t v28 = a1 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
      uint64_t v29 = sub_1AAB10();
      uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8);
      uint64_t v27 = v29;
      uint64_t v26 = v28;
      goto LABEL_24;
    case 5:
      goto LABEL_46;
    case 6:
      swift_bridgeObjectRelease();
      uint64_t v30 = type metadata accessor for GenericMedCompletedLogModel();
      uint64_t v31 = a1 + *(int *)(v30 + 24);
      uint64_t v32 = sub_1AAD90();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v31, 1, v32)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v31, v32);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(int *)(v30 + 56);
      goto LABEL_57;
    case 7:
      uint64_t v33 = type metadata accessor for SnippetHeaderModel();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v33))
      {
        uint64_t v34 = sub_1AC1E0();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(a1, v34);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v35 = type metadata accessor for HealthDataLogModel();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v36 = a1 + *(int *)(v35 + 40);
      uint64_t v37 = sub_1AAD90();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v36, 1, v37)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(v36, v37);
      }
      break;
    case 8:
      uint64_t v38 = sub_1AAD90();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v38)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(a1, v38);
      }
      uint64_t v39 = (int *)type metadata accessor for GenericQueryModel();
      uint64_t v40 = a1 + v39[10];
      uint64_t v6 = sub_1AC1E0();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v40, 1, v6)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v40, v6);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_65;
    case 9:
      uint64_t v41 = sub_1AAD90();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v41)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(a1, v41);
      }
      uint64_t v42 = type metadata accessor for HeightQueryModel();
      uint64_t v43 = a1 + *(int *)(v42 + 32);
      uint64_t v44 = sub_1AC1E0();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v43, 1, v44)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v43, v44);
      }
      uint64_t v45 = a1 + *(int *)(v42 + 40);
      uint64_t v46 = type metadata accessor for SnippetHeaderModel();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v45, 1, v46))
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v45, v44);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_46:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 10:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 11:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
      goto LABEL_57;
    case 12:
      uint64_t v47 = sub_1AAD90();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v47)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v47 - 8) + 8))(a1, v47);
      }
      uint64_t v48 = a1 + *(int *)(type metadata accessor for SleepQueryModel() + 20);
      uint64_t v49 = type metadata accessor for SnippetHeaderModel();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v48, 1, v49))
      {
        uint64_t v50 = sub_1AC1E0();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v48, v50);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 13:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v51 = type metadata accessor for SpecificMedCompletedLogModel();
      uint64_t v52 = a1 + *(int *)(v51 + 32);
      uint64_t v53 = sub_1AAD90();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v52, 1, v53)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v52, v53);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(int *)(v51 + 76);
LABEL_57:
      uint64_t v54 = a1 + v12;
      uint64_t v55 = type metadata accessor for SnippetHeaderModel();
      uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v54, 1, v55);
      if (result) {
        return result;
      }
      uint64_t v56 = sub_1AC1E0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v54, v56);
      swift_bridgeObjectRelease();
      break;
    case 14:
      uint64_t v57 = sub_1AAD90();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v57)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(a1, v57);
      }
      uint64_t v39 = (int *)type metadata accessor for TemperatureQueryModel();
      uint64_t v58 = a1 + v39[10];
      uint64_t v6 = sub_1AC1E0();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v58, 1, v6)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v58, v6);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v59 = a1 + v39[16];
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v59, 1, v6)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v59, v6);
      }
LABEL_65:
      swift_bridgeObjectRelease();
      uint64_t v7 = v39[18];
LABEL_66:
      uint64_t v60 = a1 + v7;
      uint64_t v61 = type metadata accessor for SnippetHeaderModel();
      uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v60, 1, v61);
      if (result) {
        return result;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v60, v6);
      swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for WellnessSnippets(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
      {
        uint64_t v7 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      }
      uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
      uint64_t v68 = Model[5];
      uint64_t v69 = (char *)a1 + v68;
      uint64_t v70 = (char *)a2 + v68;
      *(void *)uint64_t v69 = *(void *)v70;
      v69[8] = v70[8];
      uint64_t v71 = Model[6];
      uint64_t v72 = (char *)a1 + v71;
      uint64_t v73 = (char *)a2 + v71;
      *(void *)uint64_t v72 = *(void *)v73;
      v72[8] = v73[8];
      uint64_t v74 = Model[7];
      uint64_t v75 = (char *)a1 + v74;
      uint64_t v76 = (char *)a2 + v74;
      v75[8] = v76[8];
      *(void *)uint64_t v75 = *(void *)v76;
      uint64_t v77 = Model[8];
      uint64_t v78 = (char *)a1 + v77;
      uint64_t v79 = (char *)a2 + v77;
      v78[8] = v79[8];
      *(void *)uint64_t v78 = *(void *)v79;
      uint64_t v80 = Model[9];
      uint64_t v81 = (char *)a1 + v80;
      uint64_t v82 = (char *)a2 + v80;
      uint64_t v83 = sub_1AC1E0();
      __dst = (void *)v83;
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v82, 1, v83))
      {
        uint64_t v84 = sub_2694(&qword_201E28);
        memcpy(v81, v82, *(void *)(*(void *)(v84 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 16))(v81, v82, v83);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v81, 0, 1, v83);
      }
      uint64_t v325 = Model[10];
      uint64_t v326 = (void *)((char *)a1 + v325);
      uint64_t v327 = (void *)((char *)a2 + v325);
      uint64_t v328 = v327[1];
      *uint64_t v326 = *v327;
      v326[1] = v328;
      uint64_t v329 = Model[11];
      uint64_t v330 = (void *)((char *)a1 + v329);
      uint64_t v331 = (void *)((char *)a2 + v329);
      uint64_t v332 = v331[1];
      *uint64_t v330 = *v331;
      v330[1] = v332;
      uint64_t v333 = Model[12];
      uint64_t v334 = (void *)((char *)a1 + v333);
      uint64_t v335 = (void *)((char *)a2 + v333);
      uint64_t v336 = v335[1];
      *uint64_t v334 = *v335;
      v334[1] = v336;
      uint64_t v337 = Model[13];
      uint64_t v338 = (void *)((char *)a1 + v337);
      uint64_t v339 = (void *)((char *)a2 + v337);
      uint64_t v340 = v339[1];
      *uint64_t v338 = *v339;
      v338[1] = v340;
      uint64_t v341 = Model[14];
      uint64_t v342 = (void *)((char *)a1 + v341);
      uint64_t v343 = (void *)((char *)a2 + v341);
      uint64_t v344 = v343[1];
      *uint64_t v342 = *v343;
      v342[1] = v344;
      uint64_t v345 = Model[15];
      uint64_t v346 = (void *)((char *)a1 + v345);
      uint64_t v347 = (void *)((char *)a2 + v345);
      uint64_t v348 = v347[1];
      *uint64_t v346 = *v347;
      v346[1] = v348;
      uint64_t v349 = Model[16];
      uint64_t v350 = (char *)a1 + v349;
      uint64_t v351 = (char *)a2 + v349;
      uint64_t v352 = type metadata accessor for SnippetHeaderModel();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v351, 1, v352))
      {
        uint64_t v353 = sub_2694(&qword_2022D0);
        memcpy(v350, v351, *(void *)(*(void *)(v353 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *))(*(__dst - 1) + 16))(v350, v351);
        uint64_t v506 = *(int *)(v352 + 20);
        uint64_t v507 = &v350[v506];
        uint64_t v508 = &v351[v506];
        uint64_t v509 = *((void *)v508 + 1);
        *(void *)uint64_t v507 = *(void *)v508;
        *((void *)v507 + 1) = v509;
        uint64_t v510 = *(int *)(v352 + 24);
        uint64_t v511 = &v350[v510];
        uint64_t v512 = &v351[v510];
        uint64_t v513 = *((void *)v512 + 1);
        *(void *)uint64_t v511 = *(void *)v512;
        *((void *)v511 + 1) = v513;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v350, 0, 1, v352);
      }
      goto LABEL_100;
    case 1u:
      uint64_t v8 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v8))
      {
        uint64_t v9 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v8);
      }
      uint64_t v85 = (int *)type metadata accessor for BloodPressureQueryModel();
      uint64_t v86 = v85[5];
      uint64_t v87 = (char *)a1 + v86;
      uint64_t v88 = (char *)a2 + v86;
      *(void *)uint64_t v87 = *(void *)v88;
      v87[8] = v88[8];
      uint64_t v89 = v85[6];
      uint64_t v90 = (char *)a1 + v89;
      uint64_t v91 = (char *)a2 + v89;
      *(void *)uint64_t v90 = *(void *)v91;
      v90[8] = v91[8];
      uint64_t v92 = v85[7];
      unint64_t v93 = (char *)a1 + v92;
      uint64_t v94 = (char *)a2 + v92;
      v93[8] = v94[8];
      *(void *)unint64_t v93 = *(void *)v94;
      uint64_t v95 = v85[8];
      uint64_t v96 = (char *)a1 + v95;
      uint64_t v97 = (char *)a2 + v95;
      v96[8] = v97[8];
      *(void *)uint64_t v96 = *(void *)v97;
      uint64_t v98 = v85[9];
      uint64_t v99 = (char *)a1 + v98;
      uint64_t v100 = (char *)a2 + v98;
      v99[8] = v100[8];
      *(void *)uint64_t v99 = *(void *)v100;
      uint64_t v101 = v85[10];
      uint64_t v102 = (char *)a1 + v101;
      uint64_t v103 = (char *)a2 + v101;
      *(void *)uint64_t v102 = *(void *)v103;
      v102[8] = v103[8];
      uint64_t v104 = v85[11];
      uint64_t v105 = (void *)((char *)a1 + v104);
      uint64_t v106 = (void *)((char *)a2 + v104);
      uint64_t v572 = v106[1];
      *uint64_t v105 = *v106;
      v105[1] = v572;
      uint64_t v107 = v85[12];
      uint64_t v108 = (void *)((char *)a1 + v107);
      uint64_t v109 = (void *)((char *)a2 + v107);
      uint64_t v571 = v109[1];
      *uint64_t v108 = *v109;
      v108[1] = v571;
      uint64_t v110 = v85[13];
      uint64_t v111 = (void *)((char *)a1 + v110);
      uint64_t v112 = (void *)((char *)a2 + v110);
      uint64_t v570 = v112[1];
      *uint64_t v111 = *v112;
      v111[1] = v570;
      uint64_t v113 = v85[14];
      uint64_t v114 = (void *)((char *)a1 + v113);
      uint64_t v115 = (void *)((char *)a2 + v113);
      uint64_t v569 = v115[1];
      *uint64_t v114 = *v115;
      v114[1] = v569;
      uint64_t v116 = v85[15];
      uint64_t v117 = (void *)((char *)a1 + v116);
      uint64_t v118 = (void *)((char *)a2 + v116);
      uint64_t v119 = v118[1];
      *uint64_t v117 = *v118;
      v117[1] = v119;
      uint64_t v120 = v85[16];
      uint64_t v121 = (void *)((char *)a1 + v120);
      uint64_t v122 = (void *)((char *)a2 + v120);
      uint64_t v123 = v122[1];
      *uint64_t v121 = *v122;
      v121[1] = v123;
      uint64_t v124 = v85[17];
      uint64_t v125 = (void *)((char *)a1 + v124);
      uint64_t v126 = (void *)((char *)a2 + v124);
      uint64_t v127 = v126[1];
      *uint64_t v125 = *v126;
      v125[1] = v127;
      uint64_t v128 = v85[18];
      uint64_t v129 = (void *)((char *)a1 + v128);
      uint64_t v130 = (void *)((char *)a2 + v128);
      uint64_t v131 = v130[1];
      *uint64_t v129 = *v130;
      v129[1] = v131;
      uint64_t v132 = v85[19];
      uint64_t v133 = (void *)((char *)a1 + v132);
      uint64_t v134 = (void *)((char *)a2 + v132);
      uint64_t v135 = v134[1];
      *uint64_t v133 = *v134;
      v133[1] = v135;
      uint64_t v136 = v85[20];
      __dsta = (char *)a1 + v136;
      uint64_t v137 = (char *)a2 + v136;
      uint64_t v138 = sub_1AAB10();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v137, 1, v138))
      {
        uint64_t v139 = sub_2694(&qword_201E20);
        memcpy(__dsta, v137, *(void *)(*(void *)(v139 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 16))(__dsta, v137, v138);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dsta, 0, 1, v138);
      }
      uint64_t v354 = v85[21];
      uint64_t v355 = (void *)((char *)a1 + v354);
      uint64_t v356 = (void *)((char *)a2 + v354);
      uint64_t v357 = v356[1];
      *uint64_t v355 = *v356;
      v355[1] = v357;
      uint64_t v358 = v85[22];
      uint64_t v359 = (void *)((char *)a1 + v358);
      uint64_t v360 = (void *)((char *)a2 + v358);
      uint64_t v361 = v360[1];
      *uint64_t v359 = *v360;
      v359[1] = v361;
      uint64_t v362 = v85[23];
      uint64_t v51 = (char *)a1 + v362;
      uint64_t v52 = (char *)a2 + v362;
      uint64_t v53 = type metadata accessor for SnippetHeaderModel();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v52, 1, v53)) {
        goto LABEL_69;
      }
      goto LABEL_91;
    case 2u:
      uint64_t v10 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v10))
      {
        uint64_t v11 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v10);
      }
      uint64_t v140 = (int *)type metadata accessor for BloodPressureLogModel();
      uint64_t v141 = v140[5];
      v142 = (void *)((char *)a1 + v141);
      uint64_t v143 = (void *)((char *)a2 + v141);
      uint64_t v144 = v143[1];
      void *v142 = *v143;
      v142[1] = v144;
      uint64_t v145 = v140[6];
      uint64_t v146 = (void *)((char *)a1 + v145);
      uint64_t v147 = (void *)((char *)a2 + v145);
      uint64_t v148 = v147[1];
      *uint64_t v146 = *v147;
      v146[1] = v148;
      uint64_t v149 = v140[7];
      uint64_t v150 = (void *)((char *)a1 + v149);
      uint64_t v151 = (void *)((char *)a2 + v149);
      uint64_t v152 = v151[1];
      *uint64_t v150 = *v151;
      v150[1] = v152;
      uint64_t v153 = v140[8];
      uint64_t v154 = (char *)a1 + v153;
      uint64_t v155 = (char *)a2 + v153;
      uint64_t v156 = type metadata accessor for SnippetHeaderModel();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v155, 1, v156))
      {
        uint64_t v157 = sub_2694(&qword_2022D0);
        memcpy(v154, v155, *(void *)(*(void *)(v157 - 8) + 64));
      }
      else
      {
        uint64_t v364 = sub_1AC1E0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v364 - 8) + 16))(v154, v155, v364);
        uint64_t v365 = *(int *)(v156 + 20);
        uint64_t v366 = &v154[v365];
        uint64_t v367 = &v155[v365];
        uint64_t v368 = *((void *)v367 + 1);
        *(void *)uint64_t v366 = *(void *)v367;
        *((void *)v366 + 1) = v368;
        uint64_t v369 = *(int *)(v156 + 24);
        uint64_t v370 = &v154[v369];
        uint64_t v371 = &v155[v369];
        uint64_t v372 = *((void *)v371 + 1);
        *(void *)uint64_t v370 = *(void *)v371;
        *((void *)v370 + 1) = v372;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v154, 0, 1, v156);
      }
      uint64_t v373 = v140[9];
      uint64_t v374 = (void *)((char *)a1 + v373);
      uint64_t v375 = (void *)((char *)a2 + v373);
      uint64_t v376 = v375[1];
      *uint64_t v374 = *v375;
      v374[1] = v376;
      uint64_t v377 = v140[10];
      uint64_t v378 = (void *)((char *)a1 + v377);
      uint64_t v379 = (void *)((char *)a2 + v377);
      uint64_t v380 = v379[1];
      *uint64_t v378 = *v379;
      v378[1] = v380;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 3u:
      uint64_t v12 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v12))
      {
        uint64_t v13 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v12);
      }
      uint64_t v158 = (int *)type metadata accessor for CycleTrackingLogModel();
      uint64_t v159 = v158[5];
      v160 = (void *)((char *)a1 + v159);
      uint64_t v161 = (void *)((char *)a2 + v159);
      uint64_t v162 = v161[1];
      void *v160 = *v161;
      v160[1] = v162;
      uint64_t v163 = v158[6];
      uint64_t v164 = (void *)((char *)a1 + v163);
      uint64_t v165 = (void *)((char *)a2 + v163);
      uint64_t v166 = v165[1];
      *uint64_t v164 = *v165;
      v164[1] = v166;
      uint64_t v167 = v158[7];
      uint64_t v168 = (void *)((char *)a1 + v167);
      uint64_t v169 = (void *)((char *)a2 + v167);
      uint64_t v170 = v169[1];
      *uint64_t v168 = *v169;
      v168[1] = v170;
      uint64_t v171 = v158[8];
      uint64_t v172 = (char *)a1 + v171;
      uint64_t v173 = (char *)a2 + v171;
      uint64_t v174 = type metadata accessor for SnippetHeaderModel();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v173, 1, v174))
      {
        uint64_t v175 = sub_2694(&qword_2022D0);
        memcpy(v172, v173, *(void *)(*(void *)(v175 - 8) + 64));
      }
      else
      {
        uint64_t v381 = sub_1AC1E0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v381 - 8) + 16))(v172, v173, v381);
        uint64_t v382 = *(int *)(v174 + 20);
        uint64_t v383 = &v172[v382];
        uint64_t v384 = &v173[v382];
        uint64_t v385 = *((void *)v384 + 1);
        *(void *)uint64_t v383 = *(void *)v384;
        *((void *)v383 + 1) = v385;
        uint64_t v386 = *(int *)(v174 + 24);
        uint64_t v387 = &v172[v386];
        uint64_t v388 = &v173[v386];
        uint64_t v389 = *((void *)v388 + 1);
        *(void *)uint64_t v387 = *(void *)v388;
        *((void *)v387 + 1) = v389;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v172, 0, 1, v174);
      }
      uint64_t v390 = v158[9];
      uint64_t v391 = (char *)a1 + v390;
      uint64_t v392 = (char *)a2 + v390;
      uint64_t v393 = sub_1AAB10();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v392, 1, v393))
      {
        uint64_t v394 = sub_2694(&qword_201E20);
        memcpy(v391, v392, *(void *)(*(void *)(v394 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v393 - 8) + 16))(v391, v392, v393);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v391, 0, 1, v393);
      }
      goto LABEL_100;
    case 4u:
      uint64_t v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      uint64_t v15 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = sub_1AAB10();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      v19(v16, v17, v18);
      goto LABEL_100;
    case 5u:
      uint64_t v20 = a2[1];
      *a1 = *a2;
      a1[1] = v20;
      uint64_t v21 = a2[3];
      a1[2] = a2[2];
      a1[3] = v21;
      uint64_t v22 = a2[5];
      a1[4] = a2[4];
      a1[5] = v22;
      *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 6u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v23 = a2[2];
      a1[1] = a2[1];
      a1[2] = v23;
      uint64_t v24 = (int *)type metadata accessor for GenericMedCompletedLogModel();
      uint64_t v25 = v24[6];
      uint64_t v26 = (char *)a1 + v25;
      uint64_t v27 = (char *)a2 + v25;
      uint64_t v28 = sub_1AAD90();
      swift_bridgeObjectRetain();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v28))
      {
        uint64_t v29 = sub_2694(&qword_2022C8);
        memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0, 1, v28);
      }
      *((unsigned char *)a1 + v24[7]) = *((unsigned char *)a2 + v24[7]);
      uint64_t v176 = v24[8];
      uint64_t v177 = (void *)((char *)a1 + v176);
      uint64_t v178 = (void *)((char *)a2 + v176);
      uint64_t v179 = v178[1];
      *uint64_t v177 = *v178;
      v177[1] = v179;
      *((unsigned char *)a1 + v24[9]) = *((unsigned char *)a2 + v24[9]);
      uint64_t v180 = v24[10];
      uint64_t v181 = (void *)((char *)a1 + v180);
      uint64_t v182 = (void *)((char *)a2 + v180);
      uint64_t v183 = v182[1];
      *uint64_t v181 = *v182;
      v181[1] = v183;
      uint64_t v184 = v24[11];
      uint64_t v185 = (void *)((char *)a1 + v184);
      uint64_t v186 = (void *)((char *)a2 + v184);
      uint64_t v187 = v186[1];
      void *v185 = *v186;
      v185[1] = v187;
      uint64_t v188 = v24[12];
      uint64_t v189 = (void *)((char *)a1 + v188);
      uint64_t v190 = (void *)((char *)a2 + v188);
      uint64_t v191 = v190[1];
      *uint64_t v189 = *v190;
      v189[1] = v191;
      uint64_t v192 = v24[13];
      uint64_t v193 = (void *)((char *)a1 + v192);
      uint64_t v194 = (void *)((char *)a2 + v192);
      uint64_t v195 = v194[1];
      *uint64_t v193 = *v194;
      v193[1] = v195;
      uint64_t v196 = v24[14];
      uint64_t v51 = (char *)a1 + v196;
      uint64_t v52 = (char *)a2 + v196;
      uint64_t v53 = type metadata accessor for SnippetHeaderModel();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v52, 1, v53)) {
        goto LABEL_69;
      }
      goto LABEL_91;
    case 7u:
      uint64_t v30 = type metadata accessor for SnippetHeaderModel();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v30))
      {
        uint64_t v31 = sub_2694(&qword_2022D0);
        memcpy(a1, a2, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        uint64_t v197 = sub_1AC1E0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v197 - 8) + 16))(a1, a2, v197);
        uint64_t v198 = *(int *)(v30 + 20);
        uint64_t v199 = (void *)((char *)a1 + v198);
        uint64_t v200 = (void *)((char *)a2 + v198);
        uint64_t v201 = v200[1];
        *uint64_t v199 = *v200;
        v199[1] = v201;
        uint64_t v202 = *(int *)(v30 + 24);
        uint64_t v203 = (void *)((char *)a1 + v202);
        uint64_t v204 = (void *)((char *)a2 + v202);
        uint64_t v205 = v204[1];
        *uint64_t v203 = *v204;
        v203[1] = v205;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v30);
      }
      uint64_t v206 = (int *)type metadata accessor for HealthDataLogModel();
      *(void *)((char *)a1 + v206[5]) = *(void *)((char *)a2 + v206[5]);
      uint64_t v207 = v206[6];
      uint64_t v208 = (void *)((char *)a1 + v207);
      uint64_t v209 = (void *)((char *)a2 + v207);
      uint64_t v210 = v209[1];
      *uint64_t v208 = *v209;
      v208[1] = v210;
      uint64_t v211 = v206[7];
      uint64_t v212 = (void *)((char *)a1 + v211);
      uint64_t v213 = (void *)((char *)a2 + v211);
      uint64_t v214 = v213[1];
      *uint64_t v212 = *v213;
      v212[1] = v214;
      uint64_t v215 = v206[8];
      uint64_t v216 = (void *)((char *)a1 + v215);
      uint64_t v217 = (void *)((char *)a2 + v215);
      uint64_t v218 = v217[1];
      *uint64_t v216 = *v217;
      v216[1] = v218;
      uint64_t v219 = v206[9];
      uint64_t v220 = (void *)((char *)a1 + v219);
      uint64_t v221 = (void *)((char *)a2 + v219);
      uint64_t v222 = v221[1];
      *uint64_t v220 = *v221;
      v220[1] = v222;
      uint64_t v223 = v206[10];
      __dstb = (char *)a1 + v223;
      uint64_t v224 = (char *)a2 + v223;
      uint64_t v225 = sub_1AAD90();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v224, 1, v225))
      {
        uint64_t v226 = sub_2694(&qword_2022C8);
        memcpy(__dstb, v224, *(void *)(*(void *)(v226 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v225 - 8) + 16))(__dstb, v224, v225);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dstb, 0, 1, v225);
      }
      uint64_t v395 = v206[11];
      uint64_t v396 = (void *)((char *)a1 + v395);
      uint64_t v397 = (void *)((char *)a2 + v395);
      uint64_t v398 = v397[1];
      *uint64_t v396 = *v397;
      v396[1] = v398;
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 8u:
      uint64_t v32 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v32))
      {
        uint64_t v33 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 16))(a1, a2, v32);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v32);
      }
      uint64_t v227 = (int *)type metadata accessor for GenericQueryModel();
      uint64_t v228 = v227[5];
      v229 = (char *)a1 + v228;
      uint64_t v230 = (char *)a2 + v228;
      *(void *)v229 = *(void *)v230;
      v229[8] = v230[8];
      uint64_t v231 = v227[6];
      v232 = (char *)a1 + v231;
      uint64_t v233 = (char *)a2 + v231;
      *(void *)v232 = *(void *)v233;
      v232[8] = v233[8];
      uint64_t v234 = v227[7];
      v235 = (char *)a1 + v234;
      uint64_t v236 = (char *)a2 + v234;
      v235[8] = v236[8];
      *(void *)v235 = *(void *)v236;
      uint64_t v237 = v227[8];
      v238 = (char *)a1 + v237;
      uint64_t v239 = (char *)a2 + v237;
      v238[8] = v239[8];
      *(void *)v238 = *(void *)v239;
      uint64_t v240 = v227[9];
      v241 = (char *)a1 + v240;
      uint64_t v242 = (char *)a2 + v240;
      v241[8] = v242[8];
      *(void *)v241 = *(void *)v242;
      uint64_t v243 = v227[10];
      v244 = (char *)a1 + v243;
      uint64_t v245 = (char *)a2 + v243;
      uint64_t v246 = sub_1AC1E0();
      uint64_t v573 = v246;
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v245, 1, v246))
      {
        uint64_t v247 = sub_2694(&qword_201E28);
        memcpy(v244, v245, *(void *)(*(void *)(v247 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v246 - 8) + 16))(v244, v245, v246);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v244, 0, 1, v246);
      }
      uint64_t v399 = v227[11];
      uint64_t v400 = (void *)((char *)a1 + v399);
      uint64_t v401 = (void *)((char *)a2 + v399);
      uint64_t v402 = v401[1];
      *uint64_t v400 = *v401;
      v400[1] = v402;
      uint64_t v403 = v227[12];
      uint64_t v404 = (void *)((char *)a1 + v403);
      uint64_t v405 = (void *)((char *)a2 + v403);
      uint64_t v406 = v405[1];
      *uint64_t v404 = *v405;
      v404[1] = v406;
      uint64_t v407 = v227[13];
      uint64_t v408 = (void *)((char *)a1 + v407);
      uint64_t v409 = (void *)((char *)a2 + v407);
      uint64_t v410 = v409[1];
      *uint64_t v408 = *v409;
      v408[1] = v410;
      uint64_t v411 = v227[14];
      uint64_t v412 = (void *)((char *)a1 + v411);
      uint64_t v413 = (void *)((char *)a2 + v411);
      uint64_t v414 = v413[1];
      *uint64_t v412 = *v413;
      v412[1] = v414;
      uint64_t v415 = v227[15];
      uint64_t v416 = (void *)((char *)a1 + v415);
      uint64_t v417 = (void *)((char *)a2 + v415);
      uint64_t v418 = v417[1];
      *uint64_t v416 = *v417;
      v416[1] = v418;
      uint64_t v419 = v227[16];
      uint64_t v420 = (void *)((char *)a1 + v419);
      uint64_t v421 = (void *)((char *)a2 + v419);
      uint64_t v422 = v421[1];
      *uint64_t v420 = *v421;
      v420[1] = v422;
      uint64_t v423 = v227[17];
      uint64_t v424 = (void *)((char *)a1 + v423);
      uint64_t v425 = (void *)((char *)a2 + v423);
      uint64_t v426 = v425[1];
      *uint64_t v424 = *v425;
      v424[1] = v426;
      uint64_t v427 = v227[18];
      __dstc = (char *)a1 + v427;
      uint64_t v301 = (char *)a2 + v427;
      uint64_t v428 = type metadata accessor for SnippetHeaderModel();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v301, 1, v428)) {
        goto LABEL_60;
      }
      (*(void (**)(char *, char *))(*(void *)(v573 - 8) + 16))(__dstc, v301);
      uint64_t v523 = *(int *)(v428 + 20);
      uint64_t v524 = &__dstc[v523];
      uint64_t v525 = &v301[v523];
      uint64_t v526 = *((void *)v525 + 1);
      *(void *)uint64_t v524 = *(void *)v525;
      *((void *)v524 + 1) = v526;
      uint64_t v527 = *(int *)(v428 + 24);
      uint64_t v528 = &__dstc[v527];
      uint64_t v529 = &v301[v527];
      uint64_t v530 = *((void *)v529 + 1);
      *(void *)uint64_t v528 = *(void *)v529;
      *((void *)v528 + 1) = v530;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dstc, 0, 1, v428);
      goto LABEL_100;
    case 9u:
      uint64_t v34 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v34))
      {
        uint64_t v35 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(a1, a2, v34);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v34);
      }
      uint64_t v248 = (int *)type metadata accessor for HeightQueryModel();
      uint64_t v249 = v248[5];
      v250 = (char *)a1 + v249;
      uint64_t v251 = (char *)a2 + v249;
      *(void *)v250 = *(void *)v251;
      v250[8] = v251[8];
      uint64_t v252 = v248[6];
      v253 = (char *)a1 + v252;
      uint64_t v254 = (char *)a2 + v252;
      *(void *)v253 = *(void *)v254;
      v253[8] = v254[8];
      uint64_t v255 = v248[7];
      v256 = (char *)a1 + v255;
      uint64_t v257 = (char *)a2 + v255;
      v256[8] = v257[8];
      *(void *)v256 = *(void *)v257;
      uint64_t v258 = v248[8];
      v259 = (char *)a1 + v258;
      uint64_t v260 = (char *)a2 + v258;
      uint64_t v261 = sub_1AC1E0();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v260, 1, v261))
      {
        uint64_t v262 = sub_2694(&qword_201E28);
        memcpy(v259, v260, *(void *)(*(void *)(v262 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v261 - 8) + 16))(v259, v260, v261);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v259, 0, 1, v261);
      }
      *((unsigned char *)a1 + v248[9]) = *((unsigned char *)a2 + v248[9]);
      uint64_t v429 = v248[10];
      uint64_t v430 = (char *)a1 + v429;
      uint64_t v431 = (char *)a2 + v429;
      uint64_t v432 = type metadata accessor for SnippetHeaderModel();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v431, 1, v432))
      {
        uint64_t v433 = sub_2694(&qword_2022D0);
        memcpy(v430, v431, *(void *)(*(void *)(v433 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v261 - 8) + 16))(v430, v431, v261);
        uint64_t v531 = *(int *)(v432 + 20);
        uint64_t v532 = &v430[v531];
        uint64_t v533 = &v431[v531];
        uint64_t v534 = *((void *)v533 + 1);
        *(void *)uint64_t v532 = *(void *)v533;
        *((void *)v532 + 1) = v534;
        uint64_t v535 = *(int *)(v432 + 24);
        uint64_t v536 = &v430[v535];
        uint64_t v537 = &v431[v535];
        uint64_t v538 = *((void *)v537 + 1);
        *(void *)uint64_t v536 = *(void *)v537;
        *((void *)v536 + 1) = v538;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v430, 0, 1, v432);
      }
      uint64_t v539 = v248[11];
      uint64_t v540 = (void *)((char *)a1 + v539);
      uint64_t v541 = (void *)((char *)a2 + v539);
      uint64_t v542 = v541[1];
      *uint64_t v540 = *v541;
      v540[1] = v542;
      uint64_t v543 = v248[12];
      uint64_t v544 = (void *)((char *)a1 + v543);
      uint64_t v545 = (void *)((char *)a2 + v543);
      uint64_t v546 = v545[1];
      *uint64_t v544 = *v545;
      v544[1] = v546;
      uint64_t v547 = v248[13];
      uint64_t v548 = (void *)((char *)a1 + v547);
      uint64_t v549 = (void *)((char *)a2 + v547);
      uint64_t v550 = v549[1];
      *uint64_t v548 = *v549;
      v548[1] = v550;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 0xAu:
      *a1 = *a2;
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      a1[2] = a2[2];
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      a1[4] = a2[4];
      *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
      *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
      a1[6] = a2[6];
      uint64_t v36 = a2[8];
      *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
      a1[8] = v36;
      a1[10] = a2[10];
      *((unsigned char *)a1 + 88) = *((unsigned char *)a2 + 88);
      uint64_t v37 = a2[13];
      a1[12] = a2[12];
      a1[13] = v37;
      uint64_t v38 = a2[15];
      a1[14] = a2[14];
      a1[15] = v38;
      uint64_t v39 = a2[17];
      a1[16] = a2[16];
      a1[17] = v39;
      uint64_t v40 = a2[19];
      a1[18] = a2[18];
      a1[19] = v40;
      uint64_t v41 = a2[21];
      a1[20] = a2[20];
      a1[21] = v41;
      uint64_t v42 = a2[23];
      a1[22] = a2[22];
      a1[23] = v42;
      uint64_t v43 = a2[25];
      a1[24] = a2[24];
      a1[25] = v43;
      uint64_t v44 = a2[27];
      a1[26] = a2[26];
      a1[27] = v44;
      uint64_t v45 = a2[29];
      a1[28] = a2[28];
      a1[29] = v45;
      *((unsigned char *)a1 + 240) = *((unsigned char *)a2 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 0xBu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v46 = a2[3];
      a1[2] = a2[2];
      a1[3] = v46;
      uint64_t v47 = a2[5];
      a1[4] = a2[4];
      a1[5] = v47;
      uint64_t v48 = a2[7];
      a1[6] = a2[6];
      a1[7] = v48;
      uint64_t v49 = a2[9];
      a1[8] = a2[8];
      a1[9] = v49;
      a1[10] = a2[10];
      uint64_t v50 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
      uint64_t v51 = (char *)a1 + v50;
      uint64_t v52 = (char *)a2 + v50;
      uint64_t v53 = type metadata accessor for SnippetHeaderModel();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v52, 1, v53))
      {
LABEL_69:
        uint64_t v363 = sub_2694(&qword_2022D0);
        memcpy(v51, v52, *(void *)(*(void *)(v363 - 8) + 64));
      }
      else
      {
LABEL_91:
        uint64_t v514 = sub_1AC1E0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v514 - 8) + 16))(v51, v52, v514);
        uint64_t v515 = *(int *)(v53 + 20);
        uint64_t v516 = &v51[v515];
        uint64_t v517 = &v52[v515];
        uint64_t v518 = *((void *)v517 + 1);
        *(void *)uint64_t v516 = *(void *)v517;
        *((void *)v516 + 1) = v518;
        uint64_t v519 = *(int *)(v53 + 24);
        uint64_t v520 = &v51[v519];
        uint64_t v521 = &v52[v519];
        uint64_t v522 = *((void *)v521 + 1);
        *(void *)uint64_t v520 = *(void *)v521;
        *((void *)v520 + 1) = v522;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v51, 0, 1, v53);
      }
      goto LABEL_100;
    case 0xCu:
      uint64_t v54 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v54))
      {
        uint64_t v55 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v54 - 8) + 16))(a1, a2, v54);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v54);
      }
      uint64_t v263 = (int *)type metadata accessor for SleepQueryModel();
      uint64_t v264 = v263[5];
      v265 = (char *)a1 + v264;
      uint64_t v266 = (char *)a2 + v264;
      uint64_t v267 = type metadata accessor for SnippetHeaderModel();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v266, 1, v267))
      {
        uint64_t v268 = sub_2694(&qword_2022D0);
        memcpy(v265, v266, *(void *)(*(void *)(v268 - 8) + 64));
      }
      else
      {
        uint64_t v434 = sub_1AC1E0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v434 - 8) + 16))(v265, v266, v434);
        uint64_t v435 = *(int *)(v267 + 20);
        uint64_t v436 = &v265[v435];
        uint64_t v437 = &v266[v435];
        uint64_t v438 = *((void *)v437 + 1);
        *(void *)uint64_t v436 = *(void *)v437;
        *((void *)v436 + 1) = v438;
        uint64_t v439 = *(int *)(v267 + 24);
        uint64_t v440 = &v265[v439];
        uint64_t v441 = &v266[v439];
        uint64_t v442 = *((void *)v441 + 1);
        *(void *)uint64_t v440 = *(void *)v441;
        *((void *)v440 + 1) = v442;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v265, 0, 1, v267);
      }
      uint64_t v443 = v263[6];
      uint64_t v444 = (void *)((char *)a1 + v443);
      uint64_t v445 = (void *)((char *)a2 + v443);
      uint64_t v446 = v445[1];
      *uint64_t v444 = *v445;
      v444[1] = v446;
      uint64_t v447 = v263[7];
      uint64_t v448 = (void *)((char *)a1 + v447);
      uint64_t v449 = (void *)((char *)a2 + v447);
      __dstd = (void *)v449[1];
      *uint64_t v448 = *v449;
      v448[1] = __dstd;
      uint64_t v450 = v263[8];
      v451 = (void *)((char *)a1 + v450);
      uint64_t v452 = (void *)((char *)a2 + v450);
      uint64_t v574 = v452[1];
      void *v451 = *v452;
      v451[1] = v574;
      uint64_t v453 = v263[9];
      v454 = (void *)((char *)a1 + v453);
      uint64_t v455 = (void *)((char *)a2 + v453);
      uint64_t v456 = v455[1];
      void *v454 = *v455;
      v454[1] = v456;
      uint64_t v457 = v263[10];
      uint64_t v458 = (void *)((char *)a1 + v457);
      uint64_t v459 = (void *)((char *)a2 + v457);
      uint64_t v460 = v459[1];
      *uint64_t v458 = *v459;
      v458[1] = v460;
      *(void *)((char *)a1 + v263[11]) = *(void *)((char *)a2 + v263[11]);
      *(void *)((char *)a1 + v263[12]) = *(void *)((char *)a2 + v263[12]);
      *(void *)((char *)a1 + v263[13]) = *(void *)((char *)a2 + v263[13]);
      *(void *)((char *)a1 + v263[14]) = *(void *)((char *)a2 + v263[14]);
      uint64_t v461 = v263[15];
      uint64_t v462 = (void *)((char *)a1 + v461);
      uint64_t v463 = (void *)((char *)a2 + v461);
      uint64_t v464 = v463[1];
      *uint64_t v462 = *v463;
      v462[1] = v464;
      uint64_t v465 = v263[16];
      uint64_t v466 = (void *)((char *)a1 + v465);
      uint64_t v467 = (void *)((char *)a2 + v465);
      uint64_t v468 = v467[1];
      *uint64_t v466 = *v467;
      v466[1] = v468;
      uint64_t v469 = v263[17];
      uint64_t v470 = (void *)((char *)a1 + v469);
      uint64_t v471 = (void *)((char *)a2 + v469);
      uint64_t v472 = v471[1];
      *uint64_t v470 = *v471;
      v470[1] = v472;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_100;
    case 0xDu:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v56 = a2[2];
      a1[1] = a2[1];
      a1[2] = v56;
      uint64_t v57 = a2[4];
      a1[3] = a2[3];
      a1[4] = v57;
      uint64_t v58 = a2[6];
      a1[5] = a2[5];
      a1[6] = v58;
      uint64_t v59 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
      uint64_t v60 = v59[8];
      uint64_t v61 = (char *)a1 + v60;
      uint64_t v62 = (char *)a2 + v60;
      uint64_t v63 = sub_1AAD90();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v62, 1, v63))
      {
        uint64_t v64 = sub_2694(&qword_2022C8);
        memcpy(v61, v62, *(void *)(*(void *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16))(v61, v62, v63);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v61, 0, 1, v63);
      }
      uint64_t v269 = v59[9];
      uint64_t v270 = (char *)a1 + v269;
      uint64_t v271 = (char *)a2 + v269;
      *(void *)uint64_t v270 = *(void *)v271;
      v270[8] = v271[8];
      uint64_t v272 = v59[10];
      v273 = (void *)((char *)a1 + v272);
      uint64_t v274 = (void *)((char *)a2 + v272);
      uint64_t v275 = v274[1];
      void *v273 = *v274;
      v273[1] = v275;
      uint64_t v276 = v59[11];
      uint64_t v277 = (void *)((char *)a1 + v276);
      uint64_t v278 = (void *)((char *)a2 + v276);
      uint64_t v279 = v278[1];
      *uint64_t v277 = *v278;
      v277[1] = v279;
      uint64_t v280 = v59[12];
      uint64_t v281 = (void *)((char *)a1 + v280);
      uint64_t v282 = (void *)((char *)a2 + v280);
      uint64_t v283 = v282[1];
      *uint64_t v281 = *v282;
      v281[1] = v283;
      uint64_t v284 = v59[13];
      uint64_t v285 = (void *)((char *)a1 + v284);
      uint64_t v286 = (void *)((char *)a2 + v284);
      uint64_t v287 = v286[1];
      *uint64_t v285 = *v286;
      v285[1] = v287;
      *((unsigned char *)a1 + v59[14]) = *((unsigned char *)a2 + v59[14]);
      *((unsigned char *)a1 + v59[15]) = *((unsigned char *)a2 + v59[15]);
      uint64_t v288 = v59[16];
      uint64_t v289 = (void *)((char *)a1 + v288);
      uint64_t v290 = (void *)((char *)a2 + v288);
      uint64_t v291 = v290[1];
      *uint64_t v289 = *v290;
      v289[1] = v291;
      uint64_t v292 = v59[17];
      uint64_t v293 = (void *)((char *)a1 + v292);
      uint64_t v294 = (void *)((char *)a2 + v292);
      uint64_t v295 = v294[1];
      *uint64_t v293 = *v294;
      v293[1] = v295;
      uint64_t v296 = v59[18];
      uint64_t v297 = (void *)((char *)a1 + v296);
      uint64_t v298 = (void *)((char *)a2 + v296);
      uint64_t v299 = v298[1];
      *uint64_t v297 = *v298;
      v297[1] = v299;
      uint64_t v300 = v59[19];
      __dstc = (char *)a1 + v300;
      uint64_t v301 = (char *)a2 + v300;
      uint64_t v302 = type metadata accessor for SnippetHeaderModel();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v301, 1, v302))
      {
LABEL_60:
        uint64_t v303 = sub_2694(&qword_2022D0);
        memcpy(__dstc, v301, *(void *)(*(void *)(v303 - 8) + 64));
      }
      else
      {
        uint64_t v473 = sub_1AC1E0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v473 - 8) + 16))(__dstc, v301, v473);
        uint64_t v474 = *(int *)(v302 + 20);
        uint64_t v475 = &__dstc[v474];
        uint64_t v476 = &v301[v474];
        uint64_t v477 = *((void *)v476 + 1);
        *(void *)uint64_t v475 = *(void *)v476;
        *((void *)v475 + 1) = v477;
        uint64_t v478 = *(int *)(v302 + 24);
        uint64_t v479 = &__dstc[v478];
        uint64_t v480 = &v301[v478];
        uint64_t v481 = *((void *)v480 + 1);
        *(void *)uint64_t v479 = *(void *)v480;
        *((void *)v479 + 1) = v481;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dstc, 0, 1, v302);
      }
      goto LABEL_100;
    case 0xEu:
      uint64_t v65 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v65))
      {
        uint64_t v66 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v65 - 8) + 16))(a1, a2, v65);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v65);
      }
      uint64_t v304 = (int *)type metadata accessor for TemperatureQueryModel();
      uint64_t v305 = v304[5];
      v306 = (char *)a1 + v305;
      uint64_t v307 = (char *)a2 + v305;
      *(void *)v306 = *(void *)v307;
      v306[8] = v307[8];
      uint64_t v308 = v304[6];
      v309 = (char *)a1 + v308;
      uint64_t v310 = (char *)a2 + v308;
      *(void *)v309 = *(void *)v310;
      v309[8] = v310[8];
      uint64_t v311 = v304[7];
      v312 = (char *)a1 + v311;
      uint64_t v313 = (char *)a2 + v311;
      v312[8] = v313[8];
      *(void *)v312 = *(void *)v313;
      uint64_t v314 = v304[8];
      v315 = (char *)a1 + v314;
      uint64_t v316 = (char *)a2 + v314;
      v315[8] = v316[8];
      *(void *)v315 = *(void *)v316;
      uint64_t v317 = v304[9];
      v318 = (char *)a1 + v317;
      uint64_t v319 = (char *)a2 + v317;
      v318[8] = v319[8];
      *(void *)v318 = *(void *)v319;
      uint64_t v320 = v304[10];
      v321 = (char *)a1 + v320;
      uint64_t v322 = (char *)a2 + v320;
      uint64_t v323 = sub_1AC1E0();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v322, 1, v323))
      {
        uint64_t v324 = sub_2694(&qword_201E28);
        memcpy(v321, v322, *(void *)(*(void *)(v324 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v323 - 8) + 16))(v321, v322, v323);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v321, 0, 1, v323);
      }
      uint64_t v482 = v304[11];
      uint64_t v483 = (void *)((char *)a1 + v482);
      uint64_t v484 = (void *)((char *)a2 + v482);
      uint64_t v485 = v484[1];
      *uint64_t v483 = *v484;
      v483[1] = v485;
      uint64_t v486 = v304[12];
      uint64_t v487 = (void *)((char *)a1 + v486);
      uint64_t v488 = (void *)((char *)a2 + v486);
      uint64_t v489 = v488[1];
      *uint64_t v487 = *v488;
      v487[1] = v489;
      uint64_t v490 = v304[13];
      uint64_t v491 = (void *)((char *)a1 + v490);
      uint64_t v492 = (void *)((char *)a2 + v490);
      uint64_t v493 = v492[1];
      *uint64_t v491 = *v492;
      v491[1] = v493;
      uint64_t v494 = v304[14];
      uint64_t v495 = (void *)((char *)a1 + v494);
      uint64_t v496 = (void *)((char *)a2 + v494);
      uint64_t v497 = v496[1];
      *uint64_t v495 = *v496;
      v495[1] = v497;
      uint64_t v498 = v304[15];
      uint64_t v499 = (void *)((char *)a1 + v498);
      uint64_t v500 = (void *)((char *)a2 + v498);
      uint64_t v501 = v500[1];
      *uint64_t v499 = *v500;
      v499[1] = v501;
      uint64_t v502 = v304[16];
      uint64_t v503 = (char *)a1 + v502;
      uint64_t v504 = (char *)a2 + v502;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v504, 1, v323))
      {
        uint64_t v505 = sub_2694(&qword_201E28);
        memcpy(v503, v504, *(void *)(*(void *)(v505 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v323 - 8) + 16))(v503, v504, v323);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v503, 0, 1, v323);
      }
      uint64_t v551 = v304[17];
      uint64_t v552 = (void *)((char *)a1 + v551);
      uint64_t v553 = (void *)((char *)a2 + v551);
      uint64_t v554 = v553[1];
      *uint64_t v552 = *v553;
      v552[1] = v554;
      uint64_t v555 = v304[18];
      uint64_t v556 = (char *)a1 + v555;
      uint64_t v557 = (char *)a2 + v555;
      uint64_t v558 = type metadata accessor for SnippetHeaderModel();
      swift_bridgeObjectRetain();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v557, 1, v558))
      {
        uint64_t v559 = sub_2694(&qword_2022D0);
        memcpy(v556, v557, *(void *)(*(void *)(v559 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v323 - 8) + 16))(v556, v557, v323);
        uint64_t v560 = *(int *)(v558 + 20);
        v561 = &v556[v560];
        uint64_t v562 = &v557[v560];
        uint64_t v563 = *((void *)v562 + 1);
        *(void *)v561 = *(void *)v562;
        *((void *)v561 + 1) = v563;
        uint64_t v564 = *(int *)(v558 + 24);
        v565 = &v556[v564];
        uint64_t v566 = &v557[v564];
        uint64_t v567 = *((void *)v566 + 1);
        *(void *)v565 = *(void *)v566;
        *((void *)v565 + 1) = v567;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v556, 0, 1, v558);
      }
LABEL_100:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for WellnessSnippets(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1B368((uint64_t)a1, (void (*)(void))type metadata accessor for WellnessSnippets);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
        {
          uint64_t v7 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
        }
        uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
        uint64_t v52 = Model[5];
        uint64_t v53 = (char *)a1 + v52;
        uint64_t v54 = (char *)a2 + v52;
        char v55 = v54[8];
        *(void *)uint64_t v53 = *(void *)v54;
        v53[8] = v55;
        uint64_t v56 = Model[6];
        uint64_t v57 = (char *)a1 + v56;
        uint64_t v58 = (char *)a2 + v56;
        char v59 = v58[8];
        *(void *)uint64_t v57 = *(void *)v58;
        v57[8] = v59;
        uint64_t v60 = Model[7];
        uint64_t v61 = (char *)a1 + v60;
        uint64_t v62 = (char *)a2 + v60;
        char v63 = v62[8];
        *(void *)uint64_t v61 = *(void *)v62;
        v61[8] = v63;
        uint64_t v64 = Model[8];
        uint64_t v65 = (char *)a1 + v64;
        uint64_t v66 = (char *)a2 + v64;
        char v67 = v66[8];
        *(void *)uint64_t v65 = *(void *)v66;
        v65[8] = v67;
        uint64_t v68 = Model[9];
        uint64_t v69 = (char *)a1 + v68;
        uint64_t v70 = (char *)a2 + v68;
        uint64_t v71 = sub_1AC1E0();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v70, 1, v71))
        {
          uint64_t v72 = sub_2694(&qword_201E28);
          memcpy(v69, v70, *(void *)(*(void *)(v72 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16))(v69, v70, v71);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v69, 0, 1, v71);
        }
        uint64_t v304 = Model[10];
        uint64_t v305 = (void *)((char *)a1 + v304);
        v306 = (void *)((char *)a2 + v304);
        *uint64_t v305 = *v306;
        v305[1] = v306[1];
        uint64_t v307 = Model[11];
        uint64_t v308 = (void *)((char *)a1 + v307);
        v309 = (void *)((char *)a2 + v307);
        void *v308 = *v309;
        v308[1] = v309[1];
        uint64_t v310 = Model[12];
        uint64_t v311 = (void *)((char *)a1 + v310);
        v312 = (void *)((char *)a2 + v310);
        void *v311 = *v312;
        v311[1] = v312[1];
        uint64_t v313 = Model[13];
        uint64_t v314 = (void *)((char *)a1 + v313);
        v315 = (void *)((char *)a2 + v313);
        void *v314 = *v315;
        v314[1] = v315[1];
        uint64_t v316 = Model[14];
        uint64_t v317 = (void *)((char *)a1 + v316);
        v318 = (void *)((char *)a2 + v316);
        void *v317 = *v318;
        v317[1] = v318[1];
        uint64_t v319 = Model[15];
        uint64_t v320 = (void *)((char *)a1 + v319);
        v321 = (void *)((char *)a2 + v319);
        void *v320 = *v321;
        v320[1] = v321[1];
        uint64_t v322 = Model[16];
        uint64_t v323 = (char *)a1 + v322;
        uint64_t v324 = (char *)a2 + v322;
        uint64_t v325 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v324, 1, v325))
        {
          uint64_t v326 = sub_2694(&qword_2022D0);
          memcpy(v323, v324, *(void *)(*(void *)(v326 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *))(*(void *)(v71 - 8) + 16))(v323, v324);
          uint64_t v448 = *(int *)(v325 + 20);
          uint64_t v449 = &v323[v448];
          uint64_t v450 = &v324[v448];
          *(void *)uint64_t v449 = *(void *)v450;
          *((void *)v449 + 1) = *((void *)v450 + 1);
          uint64_t v451 = *(int *)(v325 + 24);
          uint64_t v452 = &v323[v451];
          uint64_t v453 = &v324[v451];
          *(void *)uint64_t v452 = *(void *)v453;
          *((void *)v452 + 1) = *((void *)v453 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v323, 0, 1, v325);
        }
        goto LABEL_101;
      case 1u:
        uint64_t v8 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v8))
        {
          uint64_t v9 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v8);
        }
        uint64_t v73 = (int *)type metadata accessor for BloodPressureQueryModel();
        uint64_t v74 = v73[5];
        uint64_t v75 = (char *)a1 + v74;
        uint64_t v76 = (char *)a2 + v74;
        char v77 = v76[8];
        *(void *)uint64_t v75 = *(void *)v76;
        v75[8] = v77;
        uint64_t v78 = v73[6];
        uint64_t v79 = (char *)a1 + v78;
        uint64_t v80 = (char *)a2 + v78;
        char v81 = v80[8];
        *(void *)uint64_t v79 = *(void *)v80;
        v79[8] = v81;
        uint64_t v82 = v73[7];
        uint64_t v83 = (char *)a1 + v82;
        uint64_t v84 = (char *)a2 + v82;
        char v85 = v84[8];
        *(void *)uint64_t v83 = *(void *)v84;
        v83[8] = v85;
        uint64_t v86 = v73[8];
        uint64_t v87 = (char *)a1 + v86;
        uint64_t v88 = (char *)a2 + v86;
        char v89 = v88[8];
        *(void *)uint64_t v87 = *(void *)v88;
        v87[8] = v89;
        uint64_t v90 = v73[9];
        uint64_t v91 = (char *)a1 + v90;
        uint64_t v92 = (char *)a2 + v90;
        char v93 = v92[8];
        *(void *)uint64_t v91 = *(void *)v92;
        v91[8] = v93;
        uint64_t v94 = v73[10];
        uint64_t v95 = (char *)a1 + v94;
        uint64_t v96 = (char *)a2 + v94;
        uint64_t v97 = *(void *)v96;
        v95[8] = v96[8];
        *(void *)uint64_t v95 = v97;
        uint64_t v98 = v73[11];
        uint64_t v99 = (void *)((char *)a1 + v98);
        uint64_t v100 = (void *)((char *)a2 + v98);
        *uint64_t v99 = *v100;
        v99[1] = v100[1];
        uint64_t v101 = v73[12];
        uint64_t v102 = (void *)((char *)a1 + v101);
        uint64_t v103 = (void *)((char *)a2 + v101);
        *uint64_t v102 = *v103;
        v102[1] = v103[1];
        uint64_t v104 = v73[13];
        uint64_t v105 = (void *)((char *)a1 + v104);
        uint64_t v106 = (void *)((char *)a2 + v104);
        *uint64_t v105 = *v106;
        v105[1] = v106[1];
        uint64_t v107 = v73[14];
        uint64_t v108 = (void *)((char *)a1 + v107);
        uint64_t v109 = (void *)((char *)a2 + v107);
        *uint64_t v108 = *v109;
        v108[1] = v109[1];
        uint64_t v110 = v73[15];
        uint64_t v111 = (void *)((char *)a1 + v110);
        uint64_t v112 = (void *)((char *)a2 + v110);
        *uint64_t v111 = *v112;
        v111[1] = v112[1];
        uint64_t v113 = v73[16];
        uint64_t v114 = (void *)((char *)a1 + v113);
        uint64_t v115 = (void *)((char *)a2 + v113);
        *uint64_t v114 = *v115;
        v114[1] = v115[1];
        uint64_t v116 = v73[17];
        uint64_t v117 = (void *)((char *)a1 + v116);
        uint64_t v118 = (void *)((char *)a2 + v116);
        *uint64_t v117 = *v118;
        v117[1] = v118[1];
        uint64_t v119 = v73[18];
        uint64_t v120 = (void *)((char *)a1 + v119);
        uint64_t v121 = (void *)((char *)a2 + v119);
        void *v120 = *v121;
        v120[1] = v121[1];
        uint64_t v122 = v73[19];
        uint64_t v123 = (void *)((char *)a1 + v122);
        uint64_t v124 = (void *)((char *)a2 + v122);
        *uint64_t v123 = *v124;
        v123[1] = v124[1];
        uint64_t v125 = v73[20];
        __dst = (char *)a1 + v125;
        uint64_t v126 = (char *)a2 + v125;
        uint64_t v127 = sub_1AAB10();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v126, 1, v127))
        {
          uint64_t v128 = sub_2694(&qword_201E20);
          memcpy(__dst, v126, *(void *)(*(void *)(v128 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v127 - 8) + 16))(__dst, v126, v127);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dst, 0, 1, v127);
        }
        uint64_t v327 = v73[21];
        uint64_t v328 = (void *)((char *)a1 + v327);
        uint64_t v329 = (void *)((char *)a2 + v327);
        void *v328 = *v329;
        v328[1] = v329[1];
        uint64_t v330 = v73[22];
        uint64_t v331 = (void *)((char *)a1 + v330);
        uint64_t v332 = (void *)((char *)a2 + v330);
        *uint64_t v331 = *v332;
        v331[1] = v332[1];
        uint64_t v333 = v73[23];
        uint64_t v38 = (char *)a1 + v333;
        uint64_t v39 = (char *)a2 + v333;
        uint64_t v40 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v39, 1, v40)) {
          goto LABEL_70;
        }
        goto LABEL_92;
      case 2u:
        uint64_t v10 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v10))
        {
          uint64_t v11 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v10);
        }
        uint64_t v129 = (int *)type metadata accessor for BloodPressureLogModel();
        uint64_t v130 = v129[5];
        uint64_t v131 = (void *)((char *)a1 + v130);
        uint64_t v132 = (void *)((char *)a2 + v130);
        *uint64_t v131 = *v132;
        v131[1] = v132[1];
        uint64_t v133 = v129[6];
        uint64_t v134 = (void *)((char *)a1 + v133);
        uint64_t v135 = (void *)((char *)a2 + v133);
        *uint64_t v134 = *v135;
        v134[1] = v135[1];
        uint64_t v136 = v129[7];
        uint64_t v137 = (void *)((char *)a1 + v136);
        uint64_t v138 = (void *)((char *)a2 + v136);
        *uint64_t v137 = *v138;
        v137[1] = v138[1];
        uint64_t v139 = v129[8];
        uint64_t v140 = (char *)a1 + v139;
        uint64_t v141 = (char *)a2 + v139;
        uint64_t v142 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v141, 1, v142))
        {
          uint64_t v143 = sub_2694(&qword_2022D0);
          memcpy(v140, v141, *(void *)(*(void *)(v143 - 8) + 64));
        }
        else
        {
          uint64_t v335 = sub_1AC1E0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v335 - 8) + 16))(v140, v141, v335);
          uint64_t v336 = *(int *)(v142 + 20);
          uint64_t v337 = &v140[v336];
          uint64_t v338 = &v141[v336];
          *(void *)uint64_t v337 = *(void *)v338;
          *((void *)v337 + 1) = *((void *)v338 + 1);
          uint64_t v339 = *(int *)(v142 + 24);
          uint64_t v340 = &v140[v339];
          uint64_t v341 = &v141[v339];
          *(void *)uint64_t v340 = *(void *)v341;
          *((void *)v340 + 1) = *((void *)v341 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v140, 0, 1, v142);
        }
        uint64_t v342 = v129[9];
        uint64_t v343 = (void *)((char *)a1 + v342);
        uint64_t v344 = (void *)((char *)a2 + v342);
        *uint64_t v343 = *v344;
        v343[1] = v344[1];
        uint64_t v345 = v129[10];
        uint64_t v346 = (void *)((char *)a1 + v345);
        uint64_t v347 = (void *)((char *)a2 + v345);
        *uint64_t v346 = *v347;
        v346[1] = v347[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 3u:
        uint64_t v12 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v12))
        {
          uint64_t v13 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v12);
        }
        uint64_t v144 = (int *)type metadata accessor for CycleTrackingLogModel();
        uint64_t v145 = v144[5];
        uint64_t v146 = (void *)((char *)a1 + v145);
        uint64_t v147 = (void *)((char *)a2 + v145);
        *uint64_t v146 = *v147;
        v146[1] = v147[1];
        uint64_t v148 = v144[6];
        uint64_t v149 = (void *)((char *)a1 + v148);
        uint64_t v150 = (void *)((char *)a2 + v148);
        void *v149 = *v150;
        v149[1] = v150[1];
        uint64_t v151 = v144[7];
        uint64_t v152 = (void *)((char *)a1 + v151);
        uint64_t v153 = (void *)((char *)a2 + v151);
        void *v152 = *v153;
        v152[1] = v153[1];
        uint64_t v154 = v144[8];
        uint64_t v155 = (char *)a1 + v154;
        uint64_t v156 = (char *)a2 + v154;
        uint64_t v157 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v156, 1, v157))
        {
          uint64_t v158 = sub_2694(&qword_2022D0);
          memcpy(v155, v156, *(void *)(*(void *)(v158 - 8) + 64));
        }
        else
        {
          uint64_t v348 = sub_1AC1E0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v348 - 8) + 16))(v155, v156, v348);
          uint64_t v349 = *(int *)(v157 + 20);
          uint64_t v350 = &v155[v349];
          uint64_t v351 = &v156[v349];
          *(void *)uint64_t v350 = *(void *)v351;
          *((void *)v350 + 1) = *((void *)v351 + 1);
          uint64_t v352 = *(int *)(v157 + 24);
          uint64_t v353 = &v155[v352];
          uint64_t v354 = &v156[v352];
          *(void *)uint64_t v353 = *(void *)v354;
          *((void *)v353 + 1) = *((void *)v354 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v155, 0, 1, v157);
        }
        uint64_t v355 = v144[9];
        uint64_t v356 = (char *)a1 + v355;
        uint64_t v357 = (char *)a2 + v355;
        uint64_t v358 = sub_1AAB10();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v357, 1, v358))
        {
          uint64_t v359 = sub_2694(&qword_201E20);
          memcpy(v356, v357, *(void *)(*(void *)(v359 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v358 - 8) + 16))(v356, v357, v358);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v356, 0, 1, v358);
        }
        goto LABEL_101;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v14 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = sub_1AAB10();
        uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
        swift_bridgeObjectRetain();
        v18(v15, v16, v17);
        goto LABEL_101;
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 6u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        uint64_t v19 = (int *)type metadata accessor for GenericMedCompletedLogModel();
        uint64_t v20 = v19[6];
        uint64_t v21 = (char *)a1 + v20;
        uint64_t v22 = (char *)a2 + v20;
        uint64_t v23 = sub_1AAD90();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v23))
        {
          uint64_t v24 = sub_2694(&qword_2022C8);
          memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v23);
        }
        *((unsigned char *)a1 + v19[7]) = *((unsigned char *)a2 + v19[7]);
        uint64_t v159 = v19[8];
        v160 = (void *)((char *)a1 + v159);
        uint64_t v161 = (void *)((char *)a2 + v159);
        void *v160 = *v161;
        v160[1] = v161[1];
        *((unsigned char *)a1 + v19[9]) = *((unsigned char *)a2 + v19[9]);
        uint64_t v162 = v19[10];
        uint64_t v163 = (void *)((char *)a1 + v162);
        uint64_t v164 = (void *)((char *)a2 + v162);
        *uint64_t v163 = *v164;
        v163[1] = v164[1];
        uint64_t v165 = v19[11];
        uint64_t v166 = (void *)((char *)a1 + v165);
        uint64_t v167 = (void *)((char *)a2 + v165);
        void *v166 = *v167;
        v166[1] = v167[1];
        uint64_t v168 = v19[12];
        uint64_t v169 = (void *)((char *)a1 + v168);
        uint64_t v170 = (void *)((char *)a2 + v168);
        *uint64_t v169 = *v170;
        v169[1] = v170[1];
        uint64_t v171 = v19[13];
        uint64_t v172 = (void *)((char *)a1 + v171);
        uint64_t v173 = (void *)((char *)a2 + v171);
        *uint64_t v172 = *v173;
        v172[1] = v173[1];
        uint64_t v174 = v19[14];
        uint64_t v38 = (char *)a1 + v174;
        uint64_t v39 = (char *)a2 + v174;
        uint64_t v40 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v39, 1, v40)) {
          goto LABEL_70;
        }
        goto LABEL_92;
      case 7u:
        uint64_t v25 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v25))
        {
          uint64_t v26 = sub_2694(&qword_2022D0);
          memcpy(a1, a2, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          uint64_t v175 = sub_1AC1E0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v175 - 8) + 16))(a1, a2, v175);
          uint64_t v176 = *(int *)(v25 + 20);
          uint64_t v177 = (void *)((char *)a1 + v176);
          uint64_t v178 = (void *)((char *)a2 + v176);
          *uint64_t v177 = *v178;
          v177[1] = v178[1];
          uint64_t v179 = *(int *)(v25 + 24);
          uint64_t v180 = (void *)((char *)a1 + v179);
          uint64_t v181 = (void *)((char *)a2 + v179);
          *uint64_t v180 = *v181;
          v180[1] = v181[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v25);
        }
        uint64_t v182 = (int *)type metadata accessor for HealthDataLogModel();
        *(void *)((char *)a1 + v182[5]) = *(void *)((char *)a2 + v182[5]);
        uint64_t v183 = v182[6];
        uint64_t v184 = (void *)((char *)a1 + v183);
        uint64_t v185 = (void *)((char *)a2 + v183);
        void *v184 = *v185;
        v184[1] = v185[1];
        uint64_t v186 = v182[7];
        uint64_t v187 = (void *)((char *)a1 + v186);
        uint64_t v188 = (void *)((char *)a2 + v186);
        *uint64_t v187 = *v188;
        v187[1] = v188[1];
        uint64_t v189 = v182[8];
        uint64_t v190 = (void *)((char *)a1 + v189);
        uint64_t v191 = (void *)((char *)a2 + v189);
        *uint64_t v190 = *v191;
        v190[1] = v191[1];
        uint64_t v192 = v182[9];
        uint64_t v193 = (void *)((char *)a1 + v192);
        uint64_t v194 = (void *)((char *)a2 + v192);
        *uint64_t v193 = *v194;
        v193[1] = v194[1];
        uint64_t v195 = v182[10];
        __dsta = (char *)a1 + v195;
        uint64_t v196 = (char *)a2 + v195;
        uint64_t v197 = sub_1AAD90();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v196, 1, v197))
        {
          uint64_t v198 = sub_2694(&qword_2022C8);
          memcpy(__dsta, v196, *(void *)(*(void *)(v198 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v197 - 8) + 16))(__dsta, v196, v197);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dsta, 0, 1, v197);
        }
        uint64_t v360 = v182[11];
        uint64_t v361 = (void *)((char *)a1 + v360);
        uint64_t v362 = (void *)((char *)a2 + v360);
        void *v361 = *v362;
        v361[1] = v362[1];
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 8u:
        uint64_t v27 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v27))
        {
          uint64_t v28 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 16))(a1, a2, v27);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v27);
        }
        uint64_t v199 = (int *)type metadata accessor for GenericQueryModel();
        uint64_t v200 = v199[5];
        uint64_t v201 = (char *)a1 + v200;
        uint64_t v202 = (char *)a2 + v200;
        char v203 = v202[8];
        *(void *)uint64_t v201 = *(void *)v202;
        v201[8] = v203;
        uint64_t v204 = v199[6];
        uint64_t v205 = (char *)a1 + v204;
        uint64_t v206 = (char *)a2 + v204;
        char v207 = v206[8];
        *(void *)uint64_t v205 = *(void *)v206;
        v205[8] = v207;
        uint64_t v208 = v199[7];
        uint64_t v209 = (char *)a1 + v208;
        uint64_t v210 = (char *)a2 + v208;
        char v211 = v210[8];
        *(void *)uint64_t v209 = *(void *)v210;
        v209[8] = v211;
        uint64_t v212 = v199[8];
        uint64_t v213 = (char *)a1 + v212;
        uint64_t v214 = (char *)a2 + v212;
        char v215 = v214[8];
        *(void *)uint64_t v213 = *(void *)v214;
        v213[8] = v215;
        uint64_t v216 = v199[9];
        uint64_t v217 = (char *)a1 + v216;
        uint64_t v218 = (char *)a2 + v216;
        char v219 = v218[8];
        *(void *)uint64_t v217 = *(void *)v218;
        v217[8] = v219;
        uint64_t v220 = v199[10];
        uint64_t v221 = (char *)a1 + v220;
        uint64_t v222 = (char *)a2 + v220;
        uint64_t v223 = sub_1AC1E0();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v222, 1, v223))
        {
          uint64_t v224 = sub_2694(&qword_201E28);
          memcpy(v221, v222, *(void *)(*(void *)(v224 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v223 - 8) + 16))(v221, v222, v223);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v221, 0, 1, v223);
        }
        uint64_t v363 = v199[11];
        uint64_t v364 = (void *)((char *)a1 + v363);
        uint64_t v365 = (void *)((char *)a2 + v363);
        *uint64_t v364 = *v365;
        v364[1] = v365[1];
        uint64_t v366 = v199[12];
        uint64_t v367 = (void *)((char *)a1 + v366);
        uint64_t v368 = (void *)((char *)a2 + v366);
        *uint64_t v367 = *v368;
        v367[1] = v368[1];
        uint64_t v369 = v199[13];
        uint64_t v370 = (void *)((char *)a1 + v369);
        uint64_t v371 = (void *)((char *)a2 + v369);
        *uint64_t v370 = *v371;
        v370[1] = v371[1];
        uint64_t v372 = v199[14];
        uint64_t v373 = (void *)((char *)a1 + v372);
        uint64_t v374 = (void *)((char *)a2 + v372);
        void *v373 = *v374;
        v373[1] = v374[1];
        uint64_t v375 = v199[15];
        uint64_t v376 = (void *)((char *)a1 + v375);
        uint64_t v377 = (void *)((char *)a2 + v375);
        void *v376 = *v377;
        v376[1] = v377[1];
        uint64_t v378 = v199[16];
        uint64_t v379 = (void *)((char *)a1 + v378);
        uint64_t v380 = (void *)((char *)a2 + v378);
        *uint64_t v379 = *v380;
        v379[1] = v380[1];
        uint64_t v381 = v199[17];
        uint64_t v382 = (void *)((char *)a1 + v381);
        uint64_t v383 = (void *)((char *)a2 + v381);
        *uint64_t v382 = *v383;
        v382[1] = v383[1];
        uint64_t v384 = v199[18];
        __dstb = (char *)a1 + v384;
        uint64_t v275 = (char *)a2 + v384;
        uint64_t v385 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v275, 1, v385)) {
          goto LABEL_61;
        }
        (*(void (**)(char *, char *))(*(void *)(v223 - 8) + 16))(__dstb, v275);
        uint64_t v461 = *(int *)(v385 + 20);
        uint64_t v462 = &__dstb[v461];
        uint64_t v463 = &v275[v461];
        *(void *)uint64_t v462 = *(void *)v463;
        *((void *)v462 + 1) = *((void *)v463 + 1);
        uint64_t v464 = *(int *)(v385 + 24);
        uint64_t v465 = &__dstb[v464];
        uint64_t v466 = &v275[v464];
        *(void *)uint64_t v465 = *(void *)v466;
        *((void *)v465 + 1) = *((void *)v466 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dstb, 0, 1, v385);
        goto LABEL_101;
      case 9u:
        uint64_t v29 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v29))
        {
          uint64_t v30 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v29 - 8) + 16))(a1, a2, v29);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v29);
        }
        uint64_t v225 = (int *)type metadata accessor for HeightQueryModel();
        uint64_t v226 = v225[5];
        uint64_t v227 = (char *)a1 + v226;
        uint64_t v228 = (char *)a2 + v226;
        char v229 = v228[8];
        *(void *)uint64_t v227 = *(void *)v228;
        v227[8] = v229;
        uint64_t v230 = v225[6];
        uint64_t v231 = (char *)a1 + v230;
        v232 = (char *)a2 + v230;
        char v233 = v232[8];
        *(void *)uint64_t v231 = *(void *)v232;
        v231[8] = v233;
        uint64_t v234 = v225[7];
        v235 = (char *)a1 + v234;
        uint64_t v236 = (char *)a2 + v234;
        char v237 = v236[8];
        *(void *)v235 = *(void *)v236;
        v235[8] = v237;
        uint64_t v238 = v225[8];
        uint64_t v239 = (char *)a1 + v238;
        uint64_t v240 = (char *)a2 + v238;
        uint64_t v241 = sub_1AC1E0();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v240, 1, v241))
        {
          uint64_t v242 = sub_2694(&qword_201E28);
          memcpy(v239, v240, *(void *)(*(void *)(v242 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v241 - 8) + 16))(v239, v240, v241);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v239, 0, 1, v241);
        }
        *((unsigned char *)a1 + v225[9]) = *((unsigned char *)a2 + v225[9]);
        uint64_t v386 = v225[10];
        uint64_t v387 = (char *)a1 + v386;
        uint64_t v388 = (char *)a2 + v386;
        uint64_t v389 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v388, 1, v389))
        {
          uint64_t v390 = sub_2694(&qword_2022D0);
          memcpy(v387, v388, *(void *)(*(void *)(v390 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v241 - 8) + 16))(v387, v388, v241);
          uint64_t v467 = *(int *)(v389 + 20);
          uint64_t v468 = &v387[v467];
          uint64_t v469 = &v388[v467];
          *(void *)uint64_t v468 = *(void *)v469;
          *((void *)v468 + 1) = *((void *)v469 + 1);
          uint64_t v470 = *(int *)(v389 + 24);
          uint64_t v471 = &v387[v470];
          uint64_t v472 = &v388[v470];
          *(void *)uint64_t v471 = *(void *)v472;
          *((void *)v471 + 1) = *((void *)v472 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v387, 0, 1, v389);
        }
        uint64_t v473 = v225[11];
        uint64_t v474 = (void *)((char *)a1 + v473);
        uint64_t v475 = (void *)((char *)a2 + v473);
        *uint64_t v474 = *v475;
        v474[1] = v475[1];
        uint64_t v476 = v225[12];
        uint64_t v477 = (void *)((char *)a1 + v476);
        uint64_t v478 = (void *)((char *)a2 + v476);
        void *v477 = *v478;
        v477[1] = v478[1];
        uint64_t v479 = v225[13];
        uint64_t v480 = (void *)((char *)a1 + v479);
        uint64_t v481 = (void *)((char *)a2 + v479);
        *uint64_t v480 = *v481;
        v480[1] = v481[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 0xAu:
        uint64_t v31 = *a2;
        *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
        *a1 = v31;
        uint64_t v32 = a2[2];
        *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
        a1[2] = v32;
        uint64_t v33 = a2[4];
        *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
        a1[4] = v33;
        uint64_t v34 = a2[6];
        *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
        a1[6] = v34;
        uint64_t v35 = a2[8];
        *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
        a1[8] = v35;
        uint64_t v36 = a2[10];
        *((unsigned char *)a1 + 88) = *((unsigned char *)a2 + 88);
        a1[10] = v36;
        a1[12] = a2[12];
        a1[13] = a2[13];
        a1[14] = a2[14];
        a1[15] = a2[15];
        a1[16] = a2[16];
        a1[17] = a2[17];
        a1[18] = a2[18];
        a1[19] = a2[19];
        a1[20] = a2[20];
        a1[21] = a2[21];
        a1[22] = a2[22];
        a1[23] = a2[23];
        a1[24] = a2[24];
        a1[25] = a2[25];
        a1[26] = a2[26];
        a1[27] = a2[27];
        a1[28] = a2[28];
        a1[29] = a2[29];
        *((unsigned char *)a1 + 240) = *((unsigned char *)a2 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 0xBu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        uint64_t v37 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
        uint64_t v38 = (char *)a1 + v37;
        uint64_t v39 = (char *)a2 + v37;
        uint64_t v40 = type metadata accessor for SnippetHeaderModel();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v39, 1, v40))
        {
LABEL_70:
          uint64_t v334 = sub_2694(&qword_2022D0);
          memcpy(v38, v39, *(void *)(*(void *)(v334 - 8) + 64));
        }
        else
        {
LABEL_92:
          uint64_t v454 = sub_1AC1E0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v454 - 8) + 16))(v38, v39, v454);
          uint64_t v455 = *(int *)(v40 + 20);
          uint64_t v456 = &v38[v455];
          uint64_t v457 = &v39[v455];
          *(void *)uint64_t v456 = *(void *)v457;
          *((void *)v456 + 1) = *((void *)v457 + 1);
          uint64_t v458 = *(int *)(v40 + 24);
          uint64_t v459 = &v38[v458];
          uint64_t v460 = &v39[v458];
          *(void *)uint64_t v459 = *(void *)v460;
          *((void *)v459 + 1) = *((void *)v460 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v38, 0, 1, v40);
        }
        goto LABEL_101;
      case 0xCu:
        uint64_t v41 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v41))
        {
          uint64_t v42 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v41 - 8) + 16))(a1, a2, v41);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v41);
        }
        uint64_t v243 = (int *)type metadata accessor for SleepQueryModel();
        uint64_t v244 = v243[5];
        uint64_t v245 = (char *)a1 + v244;
        uint64_t v246 = (char *)a2 + v244;
        uint64_t v247 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v246, 1, v247))
        {
          uint64_t v248 = sub_2694(&qword_2022D0);
          memcpy(v245, v246, *(void *)(*(void *)(v248 - 8) + 64));
        }
        else
        {
          uint64_t v391 = sub_1AC1E0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v391 - 8) + 16))(v245, v246, v391);
          uint64_t v392 = *(int *)(v247 + 20);
          uint64_t v393 = &v245[v392];
          uint64_t v394 = &v246[v392];
          *(void *)uint64_t v393 = *(void *)v394;
          *((void *)v393 + 1) = *((void *)v394 + 1);
          uint64_t v395 = *(int *)(v247 + 24);
          uint64_t v396 = &v245[v395];
          uint64_t v397 = &v246[v395];
          *(void *)uint64_t v396 = *(void *)v397;
          *((void *)v396 + 1) = *((void *)v397 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v245, 0, 1, v247);
        }
        uint64_t v398 = v243[6];
        uint64_t v399 = (void *)((char *)a1 + v398);
        uint64_t v400 = (void *)((char *)a2 + v398);
        void *v399 = *v400;
        v399[1] = v400[1];
        uint64_t v401 = v243[7];
        uint64_t v402 = (void *)((char *)a1 + v401);
        uint64_t v403 = (void *)((char *)a2 + v401);
        void *v402 = *v403;
        v402[1] = v403[1];
        uint64_t v404 = v243[8];
        uint64_t v405 = (void *)((char *)a1 + v404);
        uint64_t v406 = (void *)((char *)a2 + v404);
        *uint64_t v405 = *v406;
        v405[1] = v406[1];
        uint64_t v407 = v243[9];
        uint64_t v408 = (void *)((char *)a1 + v407);
        uint64_t v409 = (void *)((char *)a2 + v407);
        *uint64_t v408 = *v409;
        v408[1] = v409[1];
        uint64_t v410 = v243[10];
        uint64_t v411 = (void *)((char *)a1 + v410);
        uint64_t v412 = (void *)((char *)a2 + v410);
        void *v411 = *v412;
        v411[1] = v412[1];
        *(void *)((char *)a1 + v243[11]) = *(void *)((char *)a2 + v243[11]);
        *(void *)((char *)a1 + v243[12]) = *(void *)((char *)a2 + v243[12]);
        *(void *)((char *)a1 + v243[13]) = *(void *)((char *)a2 + v243[13]);
        *(void *)((char *)a1 + v243[14]) = *(void *)((char *)a2 + v243[14]);
        uint64_t v413 = v243[15];
        uint64_t v414 = (void *)((char *)a1 + v413);
        uint64_t v415 = (void *)((char *)a2 + v413);
        void *v414 = *v415;
        v414[1] = v415[1];
        uint64_t v416 = v243[16];
        uint64_t v417 = (void *)((char *)a1 + v416);
        uint64_t v418 = (void *)((char *)a2 + v416);
        *uint64_t v417 = *v418;
        v417[1] = v418[1];
        uint64_t v419 = v243[17];
        uint64_t v420 = (void *)((char *)a1 + v419);
        uint64_t v421 = (void *)((char *)a2 + v419);
        *uint64_t v420 = *v421;
        v420[1] = v421[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_101;
      case 0xDu:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        uint64_t v43 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
        uint64_t v44 = v43[8];
        uint64_t v45 = (char *)a1 + v44;
        uint64_t v46 = (char *)a2 + v44;
        uint64_t v47 = sub_1AAD90();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v46, 1, v47))
        {
          uint64_t v48 = sub_2694(&qword_2022C8);
          memcpy(v45, v46, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v45, v46, v47);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v45, 0, 1, v47);
        }
        uint64_t v249 = v43[9];
        v250 = (char *)a1 + v249;
        uint64_t v251 = (char *)a2 + v249;
        uint64_t v252 = *(void *)v251;
        v250[8] = v251[8];
        *(void *)v250 = v252;
        uint64_t v253 = v43[10];
        uint64_t v254 = (void *)((char *)a1 + v253);
        uint64_t v255 = (void *)((char *)a2 + v253);
        *uint64_t v254 = *v255;
        v254[1] = v255[1];
        uint64_t v256 = v43[11];
        uint64_t v257 = (void *)((char *)a1 + v256);
        uint64_t v258 = (void *)((char *)a2 + v256);
        *uint64_t v257 = *v258;
        v257[1] = v258[1];
        uint64_t v259 = v43[12];
        uint64_t v260 = (void *)((char *)a1 + v259);
        uint64_t v261 = (void *)((char *)a2 + v259);
        *uint64_t v260 = *v261;
        v260[1] = v261[1];
        uint64_t v262 = v43[13];
        uint64_t v263 = (void *)((char *)a1 + v262);
        uint64_t v264 = (void *)((char *)a2 + v262);
        *uint64_t v263 = *v264;
        v263[1] = v264[1];
        *((unsigned char *)a1 + v43[14]) = *((unsigned char *)a2 + v43[14]);
        *((unsigned char *)a1 + v43[15]) = *((unsigned char *)a2 + v43[15]);
        uint64_t v265 = v43[16];
        uint64_t v266 = (void *)((char *)a1 + v265);
        uint64_t v267 = (void *)((char *)a2 + v265);
        *uint64_t v266 = *v267;
        v266[1] = v267[1];
        uint64_t v268 = v43[17];
        uint64_t v269 = (void *)((char *)a1 + v268);
        uint64_t v270 = (void *)((char *)a2 + v268);
        *uint64_t v269 = *v270;
        v269[1] = v270[1];
        uint64_t v271 = v43[18];
        uint64_t v272 = (void *)((char *)a1 + v271);
        v273 = (void *)((char *)a2 + v271);
        void *v272 = *v273;
        v272[1] = v273[1];
        uint64_t v274 = v43[19];
        __dstb = (char *)a1 + v274;
        uint64_t v275 = (char *)a2 + v274;
        uint64_t v276 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v275, 1, v276))
        {
LABEL_61:
          uint64_t v277 = sub_2694(&qword_2022D0);
          memcpy(__dstb, v275, *(void *)(*(void *)(v277 - 8) + 64));
        }
        else
        {
          uint64_t v422 = sub_1AC1E0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v422 - 8) + 16))(__dstb, v275, v422);
          uint64_t v423 = *(int *)(v276 + 20);
          uint64_t v424 = &__dstb[v423];
          uint64_t v425 = &v275[v423];
          *(void *)uint64_t v424 = *(void *)v425;
          *((void *)v424 + 1) = *((void *)v425 + 1);
          uint64_t v426 = *(int *)(v276 + 24);
          uint64_t v427 = &__dstb[v426];
          uint64_t v428 = &v275[v426];
          *(void *)uint64_t v427 = *(void *)v428;
          *((void *)v427 + 1) = *((void *)v428 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dstb, 0, 1, v276);
        }
        goto LABEL_101;
      case 0xEu:
        uint64_t v49 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v49))
        {
          uint64_t v50 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v50 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v49 - 8) + 16))(a1, a2, v49);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v49);
        }
        uint64_t v278 = (int *)type metadata accessor for TemperatureQueryModel();
        uint64_t v279 = v278[5];
        uint64_t v280 = (char *)a1 + v279;
        uint64_t v281 = (char *)a2 + v279;
        char v282 = v281[8];
        *(void *)uint64_t v280 = *(void *)v281;
        v280[8] = v282;
        uint64_t v283 = v278[6];
        uint64_t v284 = (char *)a1 + v283;
        uint64_t v285 = (char *)a2 + v283;
        char v286 = v285[8];
        *(void *)uint64_t v284 = *(void *)v285;
        v284[8] = v286;
        uint64_t v287 = v278[7];
        uint64_t v288 = (char *)a1 + v287;
        uint64_t v289 = (char *)a2 + v287;
        char v290 = v289[8];
        *(void *)uint64_t v288 = *(void *)v289;
        v288[8] = v290;
        uint64_t v291 = v278[8];
        uint64_t v292 = (char *)a1 + v291;
        uint64_t v293 = (char *)a2 + v291;
        char v294 = v293[8];
        *(void *)uint64_t v292 = *(void *)v293;
        v292[8] = v294;
        uint64_t v295 = v278[9];
        uint64_t v296 = (char *)a1 + v295;
        uint64_t v297 = (char *)a2 + v295;
        char v298 = v297[8];
        *(void *)uint64_t v296 = *(void *)v297;
        v296[8] = v298;
        uint64_t v299 = v278[10];
        uint64_t v300 = (char *)a1 + v299;
        uint64_t v301 = (char *)a2 + v299;
        uint64_t v302 = sub_1AC1E0();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v301, 1, v302))
        {
          uint64_t v303 = sub_2694(&qword_201E28);
          memcpy(v300, v301, *(void *)(*(void *)(v303 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v302 - 8) + 16))(v300, v301, v302);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v300, 0, 1, v302);
        }
        uint64_t v429 = v278[11];
        uint64_t v430 = (void *)((char *)a1 + v429);
        uint64_t v431 = (void *)((char *)a2 + v429);
        *uint64_t v430 = *v431;
        v430[1] = v431[1];
        uint64_t v432 = v278[12];
        uint64_t v433 = (void *)((char *)a1 + v432);
        uint64_t v434 = (void *)((char *)a2 + v432);
        void *v433 = *v434;
        v433[1] = v434[1];
        uint64_t v435 = v278[13];
        uint64_t v436 = (void *)((char *)a1 + v435);
        uint64_t v437 = (void *)((char *)a2 + v435);
        *uint64_t v436 = *v437;
        v436[1] = v437[1];
        uint64_t v438 = v278[14];
        uint64_t v439 = (void *)((char *)a1 + v438);
        uint64_t v440 = (void *)((char *)a2 + v438);
        void *v439 = *v440;
        v439[1] = v440[1];
        uint64_t v441 = v278[15];
        uint64_t v442 = (void *)((char *)a1 + v441);
        uint64_t v443 = (void *)((char *)a2 + v441);
        void *v442 = *v443;
        v442[1] = v443[1];
        uint64_t v444 = v278[16];
        uint64_t v445 = (char *)a1 + v444;
        uint64_t v446 = (char *)a2 + v444;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v446, 1, v302))
        {
          uint64_t v447 = sub_2694(&qword_201E28);
          memcpy(v445, v446, *(void *)(*(void *)(v447 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v302 - 8) + 16))(v445, v446, v302);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v445, 0, 1, v302);
        }
        uint64_t v482 = v278[17];
        uint64_t v483 = (void *)((char *)a1 + v482);
        uint64_t v484 = (void *)((char *)a2 + v482);
        *uint64_t v483 = *v484;
        v483[1] = v484[1];
        uint64_t v485 = v278[18];
        uint64_t v486 = (char *)a1 + v485;
        uint64_t v487 = (char *)a2 + v485;
        uint64_t v488 = type metadata accessor for SnippetHeaderModel();
        swift_bridgeObjectRetain();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v487, 1, v488))
        {
          uint64_t v489 = sub_2694(&qword_2022D0);
          memcpy(v486, v487, *(void *)(*(void *)(v489 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v302 - 8) + 16))(v486, v487, v302);
          uint64_t v490 = *(int *)(v488 + 20);
          uint64_t v491 = &v486[v490];
          uint64_t v492 = &v487[v490];
          *(void *)uint64_t v491 = *(void *)v492;
          *((void *)v491 + 1) = *((void *)v492 + 1);
          uint64_t v493 = *(int *)(v488 + 24);
          uint64_t v494 = &v486[v493];
          uint64_t v495 = &v487[v493];
          *(void *)uint64_t v494 = *(void *)v495;
          *((void *)v494 + 1) = *((void *)v495 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v486, 0, 1, v488);
        }
LABEL_101:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1B368(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  sub_E558();
  v3();
  return a1;
}

_OWORD *initializeWithTake for WellnessSnippets(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
      {
        uint64_t v7 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      }
      uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
      uint64_t v45 = Model[5];
      uint64_t v46 = (char *)a1 + v45;
      uint64_t v47 = (char *)a2 + v45;
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      uint64_t v48 = Model[6];
      uint64_t v49 = (char *)a1 + v48;
      uint64_t v50 = (char *)a2 + v48;
      *(void *)uint64_t v49 = *(void *)v50;
      v49[8] = v50[8];
      uint64_t v51 = Model[7];
      uint64_t v52 = (char *)a1 + v51;
      uint64_t v53 = (char *)a2 + v51;
      v52[8] = v53[8];
      *(void *)uint64_t v52 = *(void *)v53;
      uint64_t v54 = Model[8];
      char v55 = (char *)a1 + v54;
      uint64_t v56 = (char *)a2 + v54;
      v55[8] = v56[8];
      *(void *)char v55 = *(void *)v56;
      uint64_t v57 = Model[9];
      uint64_t v58 = (char *)a1 + v57;
      char v59 = (char *)a2 + v57;
      uint64_t v60 = sub_1AC1E0();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v59, 1, v60))
      {
        uint64_t v61 = sub_2694(&qword_201E28);
        memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v58, v59, v60);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v58, 0, 1, v60);
      }
      *(_OWORD *)((char *)a1 + Model[10]) = *(_OWORD *)((char *)a2 + Model[10]);
      *(_OWORD *)((char *)a1 + Model[11]) = *(_OWORD *)((char *)a2 + Model[11]);
      *(_OWORD *)((char *)a1 + Model[12]) = *(_OWORD *)((char *)a2 + Model[12]);
      *(_OWORD *)((char *)a1 + Model[13]) = *(_OWORD *)((char *)a2 + Model[13]);
      *(_OWORD *)((char *)a1 + Model[14]) = *(_OWORD *)((char *)a2 + Model[14]);
      *(_OWORD *)((char *)a1 + Model[15]) = *(_OWORD *)((char *)a2 + Model[15]);
      uint64_t v171 = Model[16];
      uint64_t v31 = (char *)a1 + v171;
      uint64_t v32 = (char *)a2 + v171;
      uint64_t v172 = type metadata accessor for SnippetHeaderModel();
      if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v172)) {
        goto LABEL_96;
      }
      goto LABEL_78;
    case 1u:
      uint64_t v8 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v8))
      {
        uint64_t v9 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v8);
      }
      uint64_t v62 = (int *)type metadata accessor for BloodPressureQueryModel();
      uint64_t v63 = v62[5];
      uint64_t v64 = (char *)a1 + v63;
      uint64_t v65 = (char *)a2 + v63;
      *(void *)uint64_t v64 = *(void *)v65;
      v64[8] = v65[8];
      uint64_t v66 = v62[6];
      char v67 = (char *)a1 + v66;
      uint64_t v68 = (char *)a2 + v66;
      *(void *)char v67 = *(void *)v68;
      v67[8] = v68[8];
      uint64_t v69 = v62[7];
      uint64_t v70 = (char *)a1 + v69;
      uint64_t v71 = (char *)a2 + v69;
      v70[8] = v71[8];
      *(void *)uint64_t v70 = *(void *)v71;
      uint64_t v72 = v62[8];
      uint64_t v73 = (char *)a1 + v72;
      uint64_t v74 = (char *)a2 + v72;
      v73[8] = v74[8];
      *(void *)uint64_t v73 = *(void *)v74;
      uint64_t v75 = v62[9];
      uint64_t v76 = (char *)a1 + v75;
      char v77 = (char *)a2 + v75;
      v76[8] = v77[8];
      *(void *)uint64_t v76 = *(void *)v77;
      uint64_t v78 = v62[10];
      uint64_t v79 = (char *)a1 + v78;
      uint64_t v80 = (char *)a2 + v78;
      *(void *)uint64_t v79 = *(void *)v80;
      v79[8] = v80[8];
      *(_OWORD *)((char *)a1 + v62[11]) = *(_OWORD *)((char *)a2 + v62[11]);
      *(_OWORD *)((char *)a1 + v62[12]) = *(_OWORD *)((char *)a2 + v62[12]);
      *(_OWORD *)((char *)a1 + v62[13]) = *(_OWORD *)((char *)a2 + v62[13]);
      *(_OWORD *)((char *)a1 + v62[14]) = *(_OWORD *)((char *)a2 + v62[14]);
      *(_OWORD *)((char *)a1 + v62[15]) = *(_OWORD *)((char *)a2 + v62[15]);
      *(_OWORD *)((char *)a1 + v62[16]) = *(_OWORD *)((char *)a2 + v62[16]);
      *(_OWORD *)((char *)a1 + v62[17]) = *(_OWORD *)((char *)a2 + v62[17]);
      *(_OWORD *)((char *)a1 + v62[18]) = *(_OWORD *)((char *)a2 + v62[18]);
      *(_OWORD *)((char *)a1 + v62[19]) = *(_OWORD *)((char *)a2 + v62[19]);
      uint64_t v81 = v62[20];
      uint64_t v82 = (char *)a1 + v81;
      uint64_t v83 = (char *)a2 + v81;
      uint64_t v84 = sub_1AAB10();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v83, 1, v84))
      {
        uint64_t v85 = sub_2694(&qword_201E20);
        memcpy(v82, v83, *(void *)(*(void *)(v85 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 32))(v82, v83, v84);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v82, 0, 1, v84);
      }
      *(_OWORD *)((char *)a1 + v62[21]) = *(_OWORD *)((char *)a2 + v62[21]);
      *(_OWORD *)((char *)a1 + v62[22]) = *(_OWORD *)((char *)a2 + v62[22]);
      uint64_t v173 = v62[23];
      uint64_t v31 = (char *)a1 + v173;
      uint64_t v32 = (char *)a2 + v173;
      uint64_t v33 = type metadata accessor for SnippetHeaderModel();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v33)) {
        goto LABEL_78;
      }
      goto LABEL_89;
    case 2u:
      uint64_t v10 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v10))
      {
        uint64_t v11 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v10);
      }
      uint64_t v86 = (int *)type metadata accessor for BloodPressureLogModel();
      *(_OWORD *)((char *)a1 + v86[5]) = *(_OWORD *)((char *)a2 + v86[5]);
      *(_OWORD *)((char *)a1 + v86[6]) = *(_OWORD *)((char *)a2 + v86[6]);
      *(_OWORD *)((char *)a1 + v86[7]) = *(_OWORD *)((char *)a2 + v86[7]);
      uint64_t v87 = v86[8];
      uint64_t v88 = (char *)a1 + v87;
      char v89 = (char *)a2 + v87;
      uint64_t v90 = type metadata accessor for SnippetHeaderModel();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v89, 1, v90))
      {
        uint64_t v91 = sub_2694(&qword_2022D0);
        memcpy(v88, v89, *(void *)(*(void *)(v91 - 8) + 64));
      }
      else
      {
        uint64_t v174 = sub_1AC1E0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v174 - 8) + 32))(v88, v89, v174);
        *(_OWORD *)&v88[*(int *)(v90 + 20)] = *(_OWORD *)&v89[*(int *)(v90 + 20)];
        *(_OWORD *)&v88[*(int *)(v90 + 24)] = *(_OWORD *)&v89[*(int *)(v90 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v88, 0, 1, v90);
      }
      *(_OWORD *)((char *)a1 + v86[9]) = *(_OWORD *)((char *)a2 + v86[9]);
      *(_OWORD *)((char *)a1 + v86[10]) = *(_OWORD *)((char *)a2 + v86[10]);
      goto LABEL_97;
    case 3u:
      uint64_t v12 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v12))
      {
        uint64_t v13 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v12);
      }
      uint64_t v92 = (int *)type metadata accessor for CycleTrackingLogModel();
      *(_OWORD *)((char *)a1 + v92[5]) = *(_OWORD *)((char *)a2 + v92[5]);
      *(_OWORD *)((char *)a1 + v92[6]) = *(_OWORD *)((char *)a2 + v92[6]);
      *(_OWORD *)((char *)a1 + v92[7]) = *(_OWORD *)((char *)a2 + v92[7]);
      uint64_t v93 = v92[8];
      uint64_t v94 = (char *)a1 + v93;
      uint64_t v95 = (char *)a2 + v93;
      uint64_t v96 = type metadata accessor for SnippetHeaderModel();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v95, 1, v96))
      {
        uint64_t v97 = sub_2694(&qword_2022D0);
        memcpy(v94, v95, *(void *)(*(void *)(v97 - 8) + 64));
      }
      else
      {
        uint64_t v175 = sub_1AC1E0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v175 - 8) + 32))(v94, v95, v175);
        *(_OWORD *)&v94[*(int *)(v96 + 20)] = *(_OWORD *)&v95[*(int *)(v96 + 20)];
        *(_OWORD *)&v94[*(int *)(v96 + 24)] = *(_OWORD *)&v95[*(int *)(v96 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v94, 0, 1, v96);
      }
      uint64_t v176 = v92[9];
      uint64_t v177 = (char *)a1 + v176;
      uint64_t v178 = (char *)a2 + v176;
      uint64_t v179 = sub_1AAB10();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v178, 1, v179))
      {
        uint64_t v180 = sub_2694(&qword_201E20);
        memcpy(v177, v178, *(void *)(*(void *)(v180 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v179 - 8) + 32))(v177, v178, v179);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v177, 0, 1, v179);
      }
      goto LABEL_97;
    case 4u:
      *a1 = *a2;
      uint64_t v14 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = sub_1AAB10();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
      goto LABEL_97;
    case 6u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
      uint64_t v18 = (int *)type metadata accessor for GenericMedCompletedLogModel();
      uint64_t v19 = v18[6];
      uint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1, v22))
      {
        uint64_t v23 = sub_2694(&qword_2022C8);
        memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0, 1, v22);
      }
      *((unsigned char *)a1 + v18[7]) = *((unsigned char *)a2 + v18[7]);
      *(_OWORD *)((char *)a1 + v18[8]) = *(_OWORD *)((char *)a2 + v18[8]);
      *((unsigned char *)a1 + v18[9]) = *((unsigned char *)a2 + v18[9]);
      *(_OWORD *)((char *)a1 + v18[10]) = *(_OWORD *)((char *)a2 + v18[10]);
      *(_OWORD *)((char *)a1 + v18[11]) = *(_OWORD *)((char *)a2 + v18[11]);
      *(_OWORD *)((char *)a1 + v18[12]) = *(_OWORD *)((char *)a2 + v18[12]);
      *(_OWORD *)((char *)a1 + v18[13]) = *(_OWORD *)((char *)a2 + v18[13]);
      uint64_t v98 = v18[14];
      uint64_t v31 = (char *)a1 + v98;
      uint64_t v32 = (char *)a2 + v98;
      uint64_t v33 = type metadata accessor for SnippetHeaderModel();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v33)) {
        goto LABEL_78;
      }
      goto LABEL_89;
    case 7u:
      uint64_t v24 = type metadata accessor for SnippetHeaderModel();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v24))
      {
        uint64_t v25 = sub_2694(&qword_2022D0);
        memcpy(a1, a2, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        uint64_t v99 = sub_1AC1E0();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v99 - 8) + 32))(a1, a2, v99);
        *(_OWORD *)((char *)a1 + *(int *)(v24 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v24 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v24 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v24 + 24));
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v24);
      }
      uint64_t v100 = (int *)type metadata accessor for HealthDataLogModel();
      *(void *)((char *)a1 + v100[5]) = *(void *)((char *)a2 + v100[5]);
      *(_OWORD *)((char *)a1 + v100[6]) = *(_OWORD *)((char *)a2 + v100[6]);
      *(_OWORD *)((char *)a1 + v100[7]) = *(_OWORD *)((char *)a2 + v100[7]);
      *(_OWORD *)((char *)a1 + v100[8]) = *(_OWORD *)((char *)a2 + v100[8]);
      *(_OWORD *)((char *)a1 + v100[9]) = *(_OWORD *)((char *)a2 + v100[9]);
      uint64_t v101 = v100[10];
      uint64_t v102 = (char *)a1 + v101;
      uint64_t v103 = (char *)a2 + v101;
      uint64_t v104 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v103, 1, v104))
      {
        uint64_t v105 = sub_2694(&qword_2022C8);
        memcpy(v102, v103, *(void *)(*(void *)(v105 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 32))(v102, v103, v104);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v102, 0, 1, v104);
      }
      *(_OWORD *)((char *)a1 + v100[11]) = *(_OWORD *)((char *)a2 + v100[11]);
      goto LABEL_97;
    case 8u:
      uint64_t v26 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v26))
      {
        uint64_t v27 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v26 - 8) + 32))(a1, a2, v26);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v26);
      }
      uint64_t v106 = (int *)type metadata accessor for GenericQueryModel();
      uint64_t v107 = v106[5];
      uint64_t v108 = (char *)a1 + v107;
      uint64_t v109 = (char *)a2 + v107;
      *(void *)uint64_t v108 = *(void *)v109;
      v108[8] = v109[8];
      uint64_t v110 = v106[6];
      uint64_t v111 = (char *)a1 + v110;
      uint64_t v112 = (char *)a2 + v110;
      *(void *)uint64_t v111 = *(void *)v112;
      v111[8] = v112[8];
      uint64_t v113 = v106[7];
      uint64_t v114 = (char *)a1 + v113;
      uint64_t v115 = (char *)a2 + v113;
      v114[8] = v115[8];
      *(void *)uint64_t v114 = *(void *)v115;
      uint64_t v116 = v106[8];
      uint64_t v117 = (char *)a1 + v116;
      uint64_t v118 = (char *)a2 + v116;
      v117[8] = v118[8];
      *(void *)uint64_t v117 = *(void *)v118;
      uint64_t v119 = v106[9];
      uint64_t v120 = (char *)a1 + v119;
      uint64_t v121 = (char *)a2 + v119;
      v120[8] = v121[8];
      *(void *)uint64_t v120 = *(void *)v121;
      uint64_t v122 = v106[10];
      uint64_t v123 = (char *)a1 + v122;
      uint64_t v124 = (char *)a2 + v122;
      uint64_t v60 = sub_1AC1E0();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v124, 1, v60))
      {
        uint64_t v125 = sub_2694(&qword_201E28);
        memcpy(v123, v124, *(void *)(*(void *)(v125 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v123, v124, v60);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v123, 0, 1, v60);
      }
      *(_OWORD *)((char *)a1 + v106[11]) = *(_OWORD *)((char *)a2 + v106[11]);
      *(_OWORD *)((char *)a1 + v106[12]) = *(_OWORD *)((char *)a2 + v106[12]);
      *(_OWORD *)((char *)a1 + v106[13]) = *(_OWORD *)((char *)a2 + v106[13]);
      *(_OWORD *)((char *)a1 + v106[14]) = *(_OWORD *)((char *)a2 + v106[14]);
      *(_OWORD *)((char *)a1 + v106[15]) = *(_OWORD *)((char *)a2 + v106[15]);
      *(_OWORD *)((char *)a1 + v106[16]) = *(_OWORD *)((char *)a2 + v106[16]);
      *(_OWORD *)((char *)a1 + v106[17]) = *(_OWORD *)((char *)a2 + v106[17]);
      uint64_t v181 = v106[18];
      uint64_t v31 = (char *)a1 + v181;
      uint64_t v32 = (char *)a2 + v181;
      uint64_t v172 = type metadata accessor for SnippetHeaderModel();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v172)) {
        goto LABEL_78;
      }
      goto LABEL_96;
    case 9u:
      uint64_t v28 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v28))
      {
        uint64_t v29 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v28 - 8) + 32))(a1, a2, v28);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v28);
      }
      uint64_t v126 = (int *)type metadata accessor for HeightQueryModel();
      uint64_t v127 = v126[5];
      uint64_t v128 = (char *)a1 + v127;
      uint64_t v129 = (char *)a2 + v127;
      *(void *)uint64_t v128 = *(void *)v129;
      v128[8] = v129[8];
      uint64_t v130 = v126[6];
      uint64_t v131 = (char *)a1 + v130;
      uint64_t v132 = (char *)a2 + v130;
      *(void *)uint64_t v131 = *(void *)v132;
      v131[8] = v132[8];
      uint64_t v133 = v126[7];
      uint64_t v134 = (char *)a1 + v133;
      uint64_t v135 = (char *)a2 + v133;
      v134[8] = v135[8];
      *(void *)uint64_t v134 = *(void *)v135;
      uint64_t v136 = v126[8];
      uint64_t v137 = (char *)a1 + v136;
      uint64_t v138 = (char *)a2 + v136;
      uint64_t v139 = sub_1AC1E0();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v138, 1, v139))
      {
        uint64_t v140 = sub_2694(&qword_201E28);
        memcpy(v137, v138, *(void *)(*(void *)(v140 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v139 - 8) + 32))(v137, v138, v139);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v137, 0, 1, v139);
      }
      *((unsigned char *)a1 + v126[9]) = *((unsigned char *)a2 + v126[9]);
      uint64_t v183 = v126[10];
      uint64_t v184 = (char *)a1 + v183;
      uint64_t v185 = (char *)a2 + v183;
      uint64_t v186 = type metadata accessor for SnippetHeaderModel();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v185, 1, v186))
      {
        uint64_t v187 = sub_2694(&qword_2022D0);
        memcpy(v184, v185, *(void *)(*(void *)(v187 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v139 - 8) + 32))(v184, v185, v139);
        *(_OWORD *)&v184[*(int *)(v186 + 20)] = *(_OWORD *)&v185[*(int *)(v186 + 20)];
        *(_OWORD *)&v184[*(int *)(v186 + 24)] = *(_OWORD *)&v185[*(int *)(v186 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v184, 0, 1, v186);
      }
      *(_OWORD *)((char *)a1 + v126[11]) = *(_OWORD *)((char *)a2 + v126[11]);
      *(_OWORD *)((char *)a1 + v126[12]) = *(_OWORD *)((char *)a2 + v126[12]);
      *(_OWORD *)((char *)a1 + v126[13]) = *(_OWORD *)((char *)a2 + v126[13]);
      goto LABEL_97;
    case 0xBu:
      *a1 = *a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
      uint64_t v30 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
      uint64_t v31 = (char *)a1 + v30;
      uint64_t v32 = (char *)a2 + v30;
      uint64_t v33 = type metadata accessor for SnippetHeaderModel();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v33)) {
        goto LABEL_78;
      }
      goto LABEL_89;
    case 0xCu:
      uint64_t v34 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v34))
      {
        uint64_t v35 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v34 - 8) + 32))(a1, a2, v34);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v34);
      }
      uint64_t v141 = (int *)type metadata accessor for SleepQueryModel();
      uint64_t v142 = v141[5];
      uint64_t v143 = (char *)a1 + v142;
      uint64_t v144 = (char *)a2 + v142;
      uint64_t v145 = type metadata accessor for SnippetHeaderModel();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v144, 1, v145))
      {
        uint64_t v146 = sub_2694(&qword_2022D0);
        memcpy(v143, v144, *(void *)(*(void *)(v146 - 8) + 64));
      }
      else
      {
        uint64_t v188 = sub_1AC1E0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v188 - 8) + 32))(v143, v144, v188);
        *(_OWORD *)&v143[*(int *)(v145 + 20)] = *(_OWORD *)&v144[*(int *)(v145 + 20)];
        *(_OWORD *)&v143[*(int *)(v145 + 24)] = *(_OWORD *)&v144[*(int *)(v145 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v143, 0, 1, v145);
      }
      *(_OWORD *)((char *)a1 + v141[6]) = *(_OWORD *)((char *)a2 + v141[6]);
      *(_OWORD *)((char *)a1 + v141[7]) = *(_OWORD *)((char *)a2 + v141[7]);
      *(_OWORD *)((char *)a1 + v141[8]) = *(_OWORD *)((char *)a2 + v141[8]);
      *(_OWORD *)((char *)a1 + v141[9]) = *(_OWORD *)((char *)a2 + v141[9]);
      *(_OWORD *)((char *)a1 + v141[10]) = *(_OWORD *)((char *)a2 + v141[10]);
      *(void *)((char *)a1 + v141[11]) = *(void *)((char *)a2 + v141[11]);
      *(void *)((char *)a1 + v141[12]) = *(void *)((char *)a2 + v141[12]);
      *(void *)((char *)a1 + v141[13]) = *(void *)((char *)a2 + v141[13]);
      *(void *)((char *)a1 + v141[14]) = *(void *)((char *)a2 + v141[14]);
      *(_OWORD *)((char *)a1 + v141[15]) = *(_OWORD *)((char *)a2 + v141[15]);
      *(_OWORD *)((char *)a1 + v141[16]) = *(_OWORD *)((char *)a2 + v141[16]);
      *(_OWORD *)((char *)a1 + v141[17]) = *(_OWORD *)((char *)a2 + v141[17]);
      goto LABEL_97;
    case 0xDu:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      uint64_t v36 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
      uint64_t v37 = v36[8];
      uint64_t v38 = (char *)a1 + v37;
      uint64_t v39 = (char *)a2 + v37;
      uint64_t v40 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v39, 1, v40))
      {
        uint64_t v41 = sub_2694(&qword_2022C8);
        memcpy(v38, v39, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v38, v39, v40);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v38, 0, 1, v40);
      }
      uint64_t v147 = v36[9];
      uint64_t v148 = (char *)a1 + v147;
      uint64_t v149 = (char *)a2 + v147;
      *(void *)uint64_t v148 = *(void *)v149;
      v148[8] = v149[8];
      *(_OWORD *)((char *)a1 + v36[10]) = *(_OWORD *)((char *)a2 + v36[10]);
      *(_OWORD *)((char *)a1 + v36[11]) = *(_OWORD *)((char *)a2 + v36[11]);
      *(_OWORD *)((char *)a1 + v36[12]) = *(_OWORD *)((char *)a2 + v36[12]);
      *(_OWORD *)((char *)a1 + v36[13]) = *(_OWORD *)((char *)a2 + v36[13]);
      *((unsigned char *)a1 + v36[14]) = *((unsigned char *)a2 + v36[14]);
      *((unsigned char *)a1 + v36[15]) = *((unsigned char *)a2 + v36[15]);
      *(_OWORD *)((char *)a1 + v36[16]) = *(_OWORD *)((char *)a2 + v36[16]);
      *(_OWORD *)((char *)a1 + v36[17]) = *(_OWORD *)((char *)a2 + v36[17]);
      *(_OWORD *)((char *)a1 + v36[18]) = *(_OWORD *)((char *)a2 + v36[18]);
      uint64_t v150 = v36[19];
      uint64_t v31 = (char *)a1 + v150;
      uint64_t v32 = (char *)a2 + v150;
      uint64_t v33 = type metadata accessor for SnippetHeaderModel();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v33)) {
        goto LABEL_78;
      }
LABEL_89:
      uint64_t v193 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v193 - 8) + 32))(v31, v32, v193);
      *(_OWORD *)&v31[*(int *)(v33 + 20)] = *(_OWORD *)&v32[*(int *)(v33 + 20)];
      *(_OWORD *)&v31[*(int *)(v33 + 24)] = *(_OWORD *)&v32[*(int *)(v33 + 24)];
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v31, 0, 1, v33);
      goto LABEL_97;
    case 0xEu:
      uint64_t v42 = sub_1AAD90();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v42))
      {
        uint64_t v43 = sub_2694(&qword_2022C8);
        memcpy(a1, a2, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v42 - 8) + 32))(a1, a2, v42);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v42);
      }
      uint64_t v151 = (int *)type metadata accessor for TemperatureQueryModel();
      uint64_t v152 = v151[5];
      uint64_t v153 = (char *)a1 + v152;
      uint64_t v154 = (char *)a2 + v152;
      *(void *)uint64_t v153 = *(void *)v154;
      v153[8] = v154[8];
      uint64_t v155 = v151[6];
      uint64_t v156 = (char *)a1 + v155;
      uint64_t v157 = (char *)a2 + v155;
      *(void *)uint64_t v156 = *(void *)v157;
      v156[8] = v157[8];
      uint64_t v158 = v151[7];
      uint64_t v159 = (char *)a1 + v158;
      v160 = (char *)a2 + v158;
      v159[8] = v160[8];
      *(void *)uint64_t v159 = *(void *)v160;
      uint64_t v161 = v151[8];
      uint64_t v162 = (char *)a1 + v161;
      uint64_t v163 = (char *)a2 + v161;
      v162[8] = v163[8];
      *(void *)uint64_t v162 = *(void *)v163;
      uint64_t v164 = v151[9];
      uint64_t v165 = (char *)a1 + v164;
      uint64_t v166 = (char *)a2 + v164;
      v165[8] = v166[8];
      *(void *)uint64_t v165 = *(void *)v166;
      uint64_t v167 = v151[10];
      uint64_t v168 = (char *)a1 + v167;
      uint64_t v169 = (char *)a2 + v167;
      uint64_t v60 = sub_1AC1E0();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v169, 1, v60))
      {
        uint64_t v170 = sub_2694(&qword_201E28);
        memcpy(v168, v169, *(void *)(*(void *)(v170 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v168, v169, v60);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v168, 0, 1, v60);
      }
      *(_OWORD *)((char *)a1 + v151[11]) = *(_OWORD *)((char *)a2 + v151[11]);
      *(_OWORD *)((char *)a1 + v151[12]) = *(_OWORD *)((char *)a2 + v151[12]);
      *(_OWORD *)((char *)a1 + v151[13]) = *(_OWORD *)((char *)a2 + v151[13]);
      *(_OWORD *)((char *)a1 + v151[14]) = *(_OWORD *)((char *)a2 + v151[14]);
      *(_OWORD *)((char *)a1 + v151[15]) = *(_OWORD *)((char *)a2 + v151[15]);
      uint64_t v189 = v151[16];
      uint64_t v190 = (char *)a1 + v189;
      uint64_t v191 = (char *)a2 + v189;
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v189, 1, v60))
      {
        uint64_t v192 = sub_2694(&qword_201E28);
        memcpy(v190, v191, *(void *)(*(void *)(v192 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v190, v191, v60);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v190, 0, 1, v60);
      }
      *(_OWORD *)((char *)a1 + v151[17]) = *(_OWORD *)((char *)a2 + v151[17]);
      uint64_t v194 = v151[18];
      uint64_t v31 = (char *)a1 + v194;
      uint64_t v32 = (char *)a2 + v194;
      uint64_t v172 = type metadata accessor for SnippetHeaderModel();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v172))
      {
LABEL_78:
        uint64_t v182 = sub_2694(&qword_2022D0);
        memcpy(v31, v32, *(void *)(*(void *)(v182 - 8) + 64));
      }
      else
      {
LABEL_96:
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v31, v32, v60);
        *(_OWORD *)&v31[*(int *)(v172 + 20)] = *(_OWORD *)&v32[*(int *)(v172 + 20)];
        *(_OWORD *)&v31[*(int *)(v172 + 24)] = *(_OWORD *)&v32[*(int *)(v172 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v31, 0, 1, v172);
      }
LABEL_97:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_OWORD *assignWithTake for WellnessSnippets(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1B368((uint64_t)a1, (void (*)(void))type metadata accessor for WellnessSnippets);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
        {
          uint64_t v7 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
        }
        uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
        uint64_t v45 = Model[5];
        uint64_t v46 = (char *)a1 + v45;
        uint64_t v47 = (char *)a2 + v45;
        *(void *)uint64_t v46 = *(void *)v47;
        v46[8] = v47[8];
        uint64_t v48 = Model[6];
        uint64_t v49 = (char *)a1 + v48;
        uint64_t v50 = (char *)a2 + v48;
        *(void *)uint64_t v49 = *(void *)v50;
        v49[8] = v50[8];
        uint64_t v51 = Model[7];
        uint64_t v52 = (char *)a1 + v51;
        uint64_t v53 = (char *)a2 + v51;
        v52[8] = v53[8];
        *(void *)uint64_t v52 = *(void *)v53;
        uint64_t v54 = Model[8];
        char v55 = (char *)a1 + v54;
        uint64_t v56 = (char *)a2 + v54;
        v55[8] = v56[8];
        *(void *)char v55 = *(void *)v56;
        uint64_t v57 = Model[9];
        uint64_t v58 = (char *)a1 + v57;
        char v59 = (char *)a2 + v57;
        uint64_t v60 = sub_1AC1E0();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v59, 1, v60))
        {
          uint64_t v61 = sub_2694(&qword_201E28);
          memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v58, v59, v60);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v58, 0, 1, v60);
        }
        *(_OWORD *)((char *)a1 + Model[10]) = *(_OWORD *)((char *)a2 + Model[10]);
        *(_OWORD *)((char *)a1 + Model[11]) = *(_OWORD *)((char *)a2 + Model[11]);
        *(_OWORD *)((char *)a1 + Model[12]) = *(_OWORD *)((char *)a2 + Model[12]);
        *(_OWORD *)((char *)a1 + Model[13]) = *(_OWORD *)((char *)a2 + Model[13]);
        *(_OWORD *)((char *)a1 + Model[14]) = *(_OWORD *)((char *)a2 + Model[14]);
        *(_OWORD *)((char *)a1 + Model[15]) = *(_OWORD *)((char *)a2 + Model[15]);
        uint64_t v171 = Model[16];
        uint64_t v31 = (char *)a1 + v171;
        uint64_t v32 = (char *)a2 + v171;
        uint64_t v172 = type metadata accessor for SnippetHeaderModel();
        if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v172)) {
          goto LABEL_97;
        }
        goto LABEL_79;
      case 1u:
        uint64_t v8 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v8))
        {
          uint64_t v9 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v8);
        }
        uint64_t v62 = (int *)type metadata accessor for BloodPressureQueryModel();
        uint64_t v63 = v62[5];
        uint64_t v64 = (char *)a1 + v63;
        uint64_t v65 = (char *)a2 + v63;
        *(void *)uint64_t v64 = *(void *)v65;
        v64[8] = v65[8];
        uint64_t v66 = v62[6];
        char v67 = (char *)a1 + v66;
        uint64_t v68 = (char *)a2 + v66;
        *(void *)char v67 = *(void *)v68;
        v67[8] = v68[8];
        uint64_t v69 = v62[7];
        uint64_t v70 = (char *)a1 + v69;
        uint64_t v71 = (char *)a2 + v69;
        v70[8] = v71[8];
        *(void *)uint64_t v70 = *(void *)v71;
        uint64_t v72 = v62[8];
        uint64_t v73 = (char *)a1 + v72;
        uint64_t v74 = (char *)a2 + v72;
        v73[8] = v74[8];
        *(void *)uint64_t v73 = *(void *)v74;
        uint64_t v75 = v62[9];
        uint64_t v76 = (char *)a1 + v75;
        char v77 = (char *)a2 + v75;
        v76[8] = v77[8];
        *(void *)uint64_t v76 = *(void *)v77;
        uint64_t v78 = v62[10];
        uint64_t v79 = (char *)a1 + v78;
        uint64_t v80 = (char *)a2 + v78;
        *(void *)uint64_t v79 = *(void *)v80;
        v79[8] = v80[8];
        *(_OWORD *)((char *)a1 + v62[11]) = *(_OWORD *)((char *)a2 + v62[11]);
        *(_OWORD *)((char *)a1 + v62[12]) = *(_OWORD *)((char *)a2 + v62[12]);
        *(_OWORD *)((char *)a1 + v62[13]) = *(_OWORD *)((char *)a2 + v62[13]);
        *(_OWORD *)((char *)a1 + v62[14]) = *(_OWORD *)((char *)a2 + v62[14]);
        *(_OWORD *)((char *)a1 + v62[15]) = *(_OWORD *)((char *)a2 + v62[15]);
        *(_OWORD *)((char *)a1 + v62[16]) = *(_OWORD *)((char *)a2 + v62[16]);
        *(_OWORD *)((char *)a1 + v62[17]) = *(_OWORD *)((char *)a2 + v62[17]);
        *(_OWORD *)((char *)a1 + v62[18]) = *(_OWORD *)((char *)a2 + v62[18]);
        *(_OWORD *)((char *)a1 + v62[19]) = *(_OWORD *)((char *)a2 + v62[19]);
        uint64_t v81 = v62[20];
        uint64_t v82 = (char *)a1 + v81;
        uint64_t v83 = (char *)a2 + v81;
        uint64_t v84 = sub_1AAB10();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v83, 1, v84))
        {
          uint64_t v85 = sub_2694(&qword_201E20);
          memcpy(v82, v83, *(void *)(*(void *)(v85 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 32))(v82, v83, v84);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v82, 0, 1, v84);
        }
        *(_OWORD *)((char *)a1 + v62[21]) = *(_OWORD *)((char *)a2 + v62[21]);
        *(_OWORD *)((char *)a1 + v62[22]) = *(_OWORD *)((char *)a2 + v62[22]);
        uint64_t v173 = v62[23];
        uint64_t v31 = (char *)a1 + v173;
        uint64_t v32 = (char *)a2 + v173;
        uint64_t v33 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v33)) {
          goto LABEL_79;
        }
        goto LABEL_90;
      case 2u:
        uint64_t v10 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v10))
        {
          uint64_t v11 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v10);
        }
        uint64_t v86 = (int *)type metadata accessor for BloodPressureLogModel();
        *(_OWORD *)((char *)a1 + v86[5]) = *(_OWORD *)((char *)a2 + v86[5]);
        *(_OWORD *)((char *)a1 + v86[6]) = *(_OWORD *)((char *)a2 + v86[6]);
        *(_OWORD *)((char *)a1 + v86[7]) = *(_OWORD *)((char *)a2 + v86[7]);
        uint64_t v87 = v86[8];
        uint64_t v88 = (char *)a1 + v87;
        char v89 = (char *)a2 + v87;
        uint64_t v90 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v89, 1, v90))
        {
          uint64_t v91 = sub_2694(&qword_2022D0);
          memcpy(v88, v89, *(void *)(*(void *)(v91 - 8) + 64));
        }
        else
        {
          uint64_t v174 = sub_1AC1E0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v174 - 8) + 32))(v88, v89, v174);
          *(_OWORD *)&v88[*(int *)(v90 + 20)] = *(_OWORD *)&v89[*(int *)(v90 + 20)];
          *(_OWORD *)&v88[*(int *)(v90 + 24)] = *(_OWORD *)&v89[*(int *)(v90 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v88, 0, 1, v90);
        }
        *(_OWORD *)((char *)a1 + v86[9]) = *(_OWORD *)((char *)a2 + v86[9]);
        *(_OWORD *)((char *)a1 + v86[10]) = *(_OWORD *)((char *)a2 + v86[10]);
        goto LABEL_98;
      case 3u:
        uint64_t v12 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v12))
        {
          uint64_t v13 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v12);
        }
        uint64_t v92 = (int *)type metadata accessor for CycleTrackingLogModel();
        *(_OWORD *)((char *)a1 + v92[5]) = *(_OWORD *)((char *)a2 + v92[5]);
        *(_OWORD *)((char *)a1 + v92[6]) = *(_OWORD *)((char *)a2 + v92[6]);
        *(_OWORD *)((char *)a1 + v92[7]) = *(_OWORD *)((char *)a2 + v92[7]);
        uint64_t v93 = v92[8];
        uint64_t v94 = (char *)a1 + v93;
        uint64_t v95 = (char *)a2 + v93;
        uint64_t v96 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v95, 1, v96))
        {
          uint64_t v97 = sub_2694(&qword_2022D0);
          memcpy(v94, v95, *(void *)(*(void *)(v97 - 8) + 64));
        }
        else
        {
          uint64_t v175 = sub_1AC1E0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v175 - 8) + 32))(v94, v95, v175);
          *(_OWORD *)&v94[*(int *)(v96 + 20)] = *(_OWORD *)&v95[*(int *)(v96 + 20)];
          *(_OWORD *)&v94[*(int *)(v96 + 24)] = *(_OWORD *)&v95[*(int *)(v96 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v94, 0, 1, v96);
        }
        uint64_t v176 = v92[9];
        uint64_t v177 = (char *)a1 + v176;
        uint64_t v178 = (char *)a2 + v176;
        uint64_t v179 = sub_1AAB10();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v178, 1, v179))
        {
          uint64_t v180 = sub_2694(&qword_201E20);
          memcpy(v177, v178, *(void *)(*(void *)(v180 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v179 - 8) + 32))(v177, v178, v179);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v177, 0, 1, v179);
        }
        goto LABEL_98;
      case 4u:
        *a1 = *a2;
        uint64_t v14 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = sub_1AAB10();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
        goto LABEL_98;
      case 6u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
        uint64_t v18 = (int *)type metadata accessor for GenericMedCompletedLogModel();
        uint64_t v19 = v18[6];
        uint64_t v20 = (char *)a1 + v19;
        uint64_t v21 = (char *)a2 + v19;
        uint64_t v22 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1, v22))
        {
          uint64_t v23 = sub_2694(&qword_2022C8);
          memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0, 1, v22);
        }
        *((unsigned char *)a1 + v18[7]) = *((unsigned char *)a2 + v18[7]);
        *(_OWORD *)((char *)a1 + v18[8]) = *(_OWORD *)((char *)a2 + v18[8]);
        *((unsigned char *)a1 + v18[9]) = *((unsigned char *)a2 + v18[9]);
        *(_OWORD *)((char *)a1 + v18[10]) = *(_OWORD *)((char *)a2 + v18[10]);
        *(_OWORD *)((char *)a1 + v18[11]) = *(_OWORD *)((char *)a2 + v18[11]);
        *(_OWORD *)((char *)a1 + v18[12]) = *(_OWORD *)((char *)a2 + v18[12]);
        *(_OWORD *)((char *)a1 + v18[13]) = *(_OWORD *)((char *)a2 + v18[13]);
        uint64_t v98 = v18[14];
        uint64_t v31 = (char *)a1 + v98;
        uint64_t v32 = (char *)a2 + v98;
        uint64_t v33 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v33)) {
          goto LABEL_79;
        }
        goto LABEL_90;
      case 7u:
        uint64_t v24 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v24))
        {
          uint64_t v25 = sub_2694(&qword_2022D0);
          memcpy(a1, a2, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          uint64_t v99 = sub_1AC1E0();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v99 - 8) + 32))(a1, a2, v99);
          *(_OWORD *)((char *)a1 + *(int *)(v24 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v24 + 20));
          *(_OWORD *)((char *)a1 + *(int *)(v24 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v24 + 24));
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v24);
        }
        uint64_t v100 = (int *)type metadata accessor for HealthDataLogModel();
        *(void *)((char *)a1 + v100[5]) = *(void *)((char *)a2 + v100[5]);
        *(_OWORD *)((char *)a1 + v100[6]) = *(_OWORD *)((char *)a2 + v100[6]);
        *(_OWORD *)((char *)a1 + v100[7]) = *(_OWORD *)((char *)a2 + v100[7]);
        *(_OWORD *)((char *)a1 + v100[8]) = *(_OWORD *)((char *)a2 + v100[8]);
        *(_OWORD *)((char *)a1 + v100[9]) = *(_OWORD *)((char *)a2 + v100[9]);
        uint64_t v101 = v100[10];
        uint64_t v102 = (char *)a1 + v101;
        uint64_t v103 = (char *)a2 + v101;
        uint64_t v104 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v103, 1, v104))
        {
          uint64_t v105 = sub_2694(&qword_2022C8);
          memcpy(v102, v103, *(void *)(*(void *)(v105 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 32))(v102, v103, v104);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v102, 0, 1, v104);
        }
        *(_OWORD *)((char *)a1 + v100[11]) = *(_OWORD *)((char *)a2 + v100[11]);
        goto LABEL_98;
      case 8u:
        uint64_t v26 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v26))
        {
          uint64_t v27 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v27 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v26 - 8) + 32))(a1, a2, v26);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v26);
        }
        uint64_t v106 = (int *)type metadata accessor for GenericQueryModel();
        uint64_t v107 = v106[5];
        uint64_t v108 = (char *)a1 + v107;
        uint64_t v109 = (char *)a2 + v107;
        *(void *)uint64_t v108 = *(void *)v109;
        v108[8] = v109[8];
        uint64_t v110 = v106[6];
        uint64_t v111 = (char *)a1 + v110;
        uint64_t v112 = (char *)a2 + v110;
        *(void *)uint64_t v111 = *(void *)v112;
        v111[8] = v112[8];
        uint64_t v113 = v106[7];
        uint64_t v114 = (char *)a1 + v113;
        uint64_t v115 = (char *)a2 + v113;
        v114[8] = v115[8];
        *(void *)uint64_t v114 = *(void *)v115;
        uint64_t v116 = v106[8];
        uint64_t v117 = (char *)a1 + v116;
        uint64_t v118 = (char *)a2 + v116;
        v117[8] = v118[8];
        *(void *)uint64_t v117 = *(void *)v118;
        uint64_t v119 = v106[9];
        uint64_t v120 = (char *)a1 + v119;
        uint64_t v121 = (char *)a2 + v119;
        v120[8] = v121[8];
        *(void *)uint64_t v120 = *(void *)v121;
        uint64_t v122 = v106[10];
        uint64_t v123 = (char *)a1 + v122;
        uint64_t v124 = (char *)a2 + v122;
        uint64_t v60 = sub_1AC1E0();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v124, 1, v60))
        {
          uint64_t v125 = sub_2694(&qword_201E28);
          memcpy(v123, v124, *(void *)(*(void *)(v125 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v123, v124, v60);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v123, 0, 1, v60);
        }
        *(_OWORD *)((char *)a1 + v106[11]) = *(_OWORD *)((char *)a2 + v106[11]);
        *(_OWORD *)((char *)a1 + v106[12]) = *(_OWORD *)((char *)a2 + v106[12]);
        *(_OWORD *)((char *)a1 + v106[13]) = *(_OWORD *)((char *)a2 + v106[13]);
        *(_OWORD *)((char *)a1 + v106[14]) = *(_OWORD *)((char *)a2 + v106[14]);
        *(_OWORD *)((char *)a1 + v106[15]) = *(_OWORD *)((char *)a2 + v106[15]);
        *(_OWORD *)((char *)a1 + v106[16]) = *(_OWORD *)((char *)a2 + v106[16]);
        *(_OWORD *)((char *)a1 + v106[17]) = *(_OWORD *)((char *)a2 + v106[17]);
        uint64_t v181 = v106[18];
        uint64_t v31 = (char *)a1 + v181;
        uint64_t v32 = (char *)a2 + v181;
        uint64_t v172 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v172)) {
          goto LABEL_79;
        }
        goto LABEL_97;
      case 9u:
        uint64_t v28 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v28))
        {
          uint64_t v29 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v28 - 8) + 32))(a1, a2, v28);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v28);
        }
        uint64_t v126 = (int *)type metadata accessor for HeightQueryModel();
        uint64_t v127 = v126[5];
        uint64_t v128 = (char *)a1 + v127;
        uint64_t v129 = (char *)a2 + v127;
        *(void *)uint64_t v128 = *(void *)v129;
        v128[8] = v129[8];
        uint64_t v130 = v126[6];
        uint64_t v131 = (char *)a1 + v130;
        uint64_t v132 = (char *)a2 + v130;
        *(void *)uint64_t v131 = *(void *)v132;
        v131[8] = v132[8];
        uint64_t v133 = v126[7];
        uint64_t v134 = (char *)a1 + v133;
        uint64_t v135 = (char *)a2 + v133;
        v134[8] = v135[8];
        *(void *)uint64_t v134 = *(void *)v135;
        uint64_t v136 = v126[8];
        uint64_t v137 = (char *)a1 + v136;
        uint64_t v138 = (char *)a2 + v136;
        uint64_t v139 = sub_1AC1E0();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v138, 1, v139))
        {
          uint64_t v140 = sub_2694(&qword_201E28);
          memcpy(v137, v138, *(void *)(*(void *)(v140 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v139 - 8) + 32))(v137, v138, v139);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v137, 0, 1, v139);
        }
        *((unsigned char *)a1 + v126[9]) = *((unsigned char *)a2 + v126[9]);
        uint64_t v183 = v126[10];
        uint64_t v184 = (char *)a1 + v183;
        uint64_t v185 = (char *)a2 + v183;
        uint64_t v186 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v185, 1, v186))
        {
          uint64_t v187 = sub_2694(&qword_2022D0);
          memcpy(v184, v185, *(void *)(*(void *)(v187 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v139 - 8) + 32))(v184, v185, v139);
          *(_OWORD *)&v184[*(int *)(v186 + 20)] = *(_OWORD *)&v185[*(int *)(v186 + 20)];
          *(_OWORD *)&v184[*(int *)(v186 + 24)] = *(_OWORD *)&v185[*(int *)(v186 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v184, 0, 1, v186);
        }
        *(_OWORD *)((char *)a1 + v126[11]) = *(_OWORD *)((char *)a2 + v126[11]);
        *(_OWORD *)((char *)a1 + v126[12]) = *(_OWORD *)((char *)a2 + v126[12]);
        *(_OWORD *)((char *)a1 + v126[13]) = *(_OWORD *)((char *)a2 + v126[13]);
        goto LABEL_98;
      case 0xBu:
        *a1 = *a2;
        *((void *)a1 + 2) = *((void *)a2 + 2);
        *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
        uint64_t v30 = *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);
        uint64_t v31 = (char *)a1 + v30;
        uint64_t v32 = (char *)a2 + v30;
        uint64_t v33 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v33)) {
          goto LABEL_79;
        }
        goto LABEL_90;
      case 0xCu:
        uint64_t v34 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v34))
        {
          uint64_t v35 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v35 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v34 - 8) + 32))(a1, a2, v34);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v34);
        }
        uint64_t v141 = (int *)type metadata accessor for SleepQueryModel();
        uint64_t v142 = v141[5];
        uint64_t v143 = (char *)a1 + v142;
        uint64_t v144 = (char *)a2 + v142;
        uint64_t v145 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v144, 1, v145))
        {
          uint64_t v146 = sub_2694(&qword_2022D0);
          memcpy(v143, v144, *(void *)(*(void *)(v146 - 8) + 64));
        }
        else
        {
          uint64_t v188 = sub_1AC1E0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v188 - 8) + 32))(v143, v144, v188);
          *(_OWORD *)&v143[*(int *)(v145 + 20)] = *(_OWORD *)&v144[*(int *)(v145 + 20)];
          *(_OWORD *)&v143[*(int *)(v145 + 24)] = *(_OWORD *)&v144[*(int *)(v145 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v143, 0, 1, v145);
        }
        *(_OWORD *)((char *)a1 + v141[6]) = *(_OWORD *)((char *)a2 + v141[6]);
        *(_OWORD *)((char *)a1 + v141[7]) = *(_OWORD *)((char *)a2 + v141[7]);
        *(_OWORD *)((char *)a1 + v141[8]) = *(_OWORD *)((char *)a2 + v141[8]);
        *(_OWORD *)((char *)a1 + v141[9]) = *(_OWORD *)((char *)a2 + v141[9]);
        *(_OWORD *)((char *)a1 + v141[10]) = *(_OWORD *)((char *)a2 + v141[10]);
        *(void *)((char *)a1 + v141[11]) = *(void *)((char *)a2 + v141[11]);
        *(void *)((char *)a1 + v141[12]) = *(void *)((char *)a2 + v141[12]);
        *(void *)((char *)a1 + v141[13]) = *(void *)((char *)a2 + v141[13]);
        *(void *)((char *)a1 + v141[14]) = *(void *)((char *)a2 + v141[14]);
        *(_OWORD *)((char *)a1 + v141[15]) = *(_OWORD *)((char *)a2 + v141[15]);
        *(_OWORD *)((char *)a1 + v141[16]) = *(_OWORD *)((char *)a2 + v141[16]);
        *(_OWORD *)((char *)a1 + v141[17]) = *(_OWORD *)((char *)a2 + v141[17]);
        goto LABEL_98;
      case 0xDu:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
        *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        uint64_t v36 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
        uint64_t v37 = v36[8];
        uint64_t v38 = (char *)a1 + v37;
        uint64_t v39 = (char *)a2 + v37;
        uint64_t v40 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v39, 1, v40))
        {
          uint64_t v41 = sub_2694(&qword_2022C8);
          memcpy(v38, v39, *(void *)(*(void *)(v41 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v38, v39, v40);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v38, 0, 1, v40);
        }
        uint64_t v147 = v36[9];
        uint64_t v148 = (char *)a1 + v147;
        uint64_t v149 = (char *)a2 + v147;
        *(void *)uint64_t v148 = *(void *)v149;
        v148[8] = v149[8];
        *(_OWORD *)((char *)a1 + v36[10]) = *(_OWORD *)((char *)a2 + v36[10]);
        *(_OWORD *)((char *)a1 + v36[11]) = *(_OWORD *)((char *)a2 + v36[11]);
        *(_OWORD *)((char *)a1 + v36[12]) = *(_OWORD *)((char *)a2 + v36[12]);
        *(_OWORD *)((char *)a1 + v36[13]) = *(_OWORD *)((char *)a2 + v36[13]);
        *((unsigned char *)a1 + v36[14]) = *((unsigned char *)a2 + v36[14]);
        *((unsigned char *)a1 + v36[15]) = *((unsigned char *)a2 + v36[15]);
        *(_OWORD *)((char *)a1 + v36[16]) = *(_OWORD *)((char *)a2 + v36[16]);
        *(_OWORD *)((char *)a1 + v36[17]) = *(_OWORD *)((char *)a2 + v36[17]);
        *(_OWORD *)((char *)a1 + v36[18]) = *(_OWORD *)((char *)a2 + v36[18]);
        uint64_t v150 = v36[19];
        uint64_t v31 = (char *)a1 + v150;
        uint64_t v32 = (char *)a2 + v150;
        uint64_t v33 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v33)) {
          goto LABEL_79;
        }
LABEL_90:
        uint64_t v193 = sub_1AC1E0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v193 - 8) + 32))(v31, v32, v193);
        *(_OWORD *)&v31[*(int *)(v33 + 20)] = *(_OWORD *)&v32[*(int *)(v33 + 20)];
        *(_OWORD *)&v31[*(int *)(v33 + 24)] = *(_OWORD *)&v32[*(int *)(v33 + 24)];
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v31, 0, 1, v33);
        goto LABEL_98;
      case 0xEu:
        uint64_t v42 = sub_1AAD90();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v42))
        {
          uint64_t v43 = sub_2694(&qword_2022C8);
          memcpy(a1, a2, *(void *)(*(void *)(v43 - 8) + 64));
        }
        else
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v42 - 8) + 32))(a1, a2, v42);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v42);
        }
        uint64_t v151 = (int *)type metadata accessor for TemperatureQueryModel();
        uint64_t v152 = v151[5];
        uint64_t v153 = (char *)a1 + v152;
        uint64_t v154 = (char *)a2 + v152;
        *(void *)uint64_t v153 = *(void *)v154;
        v153[8] = v154[8];
        uint64_t v155 = v151[6];
        uint64_t v156 = (char *)a1 + v155;
        uint64_t v157 = (char *)a2 + v155;
        *(void *)uint64_t v156 = *(void *)v157;
        v156[8] = v157[8];
        uint64_t v158 = v151[7];
        uint64_t v159 = (char *)a1 + v158;
        v160 = (char *)a2 + v158;
        v159[8] = v160[8];
        *(void *)uint64_t v159 = *(void *)v160;
        uint64_t v161 = v151[8];
        uint64_t v162 = (char *)a1 + v161;
        uint64_t v163 = (char *)a2 + v161;
        v162[8] = v163[8];
        *(void *)uint64_t v162 = *(void *)v163;
        uint64_t v164 = v151[9];
        uint64_t v165 = (char *)a1 + v164;
        uint64_t v166 = (char *)a2 + v164;
        v165[8] = v166[8];
        *(void *)uint64_t v165 = *(void *)v166;
        uint64_t v167 = v151[10];
        uint64_t v168 = (char *)a1 + v167;
        uint64_t v169 = (char *)a2 + v167;
        uint64_t v60 = sub_1AC1E0();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v169, 1, v60))
        {
          uint64_t v170 = sub_2694(&qword_201E28);
          memcpy(v168, v169, *(void *)(*(void *)(v170 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v168, v169, v60);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v168, 0, 1, v60);
        }
        *(_OWORD *)((char *)a1 + v151[11]) = *(_OWORD *)((char *)a2 + v151[11]);
        *(_OWORD *)((char *)a1 + v151[12]) = *(_OWORD *)((char *)a2 + v151[12]);
        *(_OWORD *)((char *)a1 + v151[13]) = *(_OWORD *)((char *)a2 + v151[13]);
        *(_OWORD *)((char *)a1 + v151[14]) = *(_OWORD *)((char *)a2 + v151[14]);
        *(_OWORD *)((char *)a1 + v151[15]) = *(_OWORD *)((char *)a2 + v151[15]);
        uint64_t v189 = v151[16];
        uint64_t v190 = (char *)a1 + v189;
        uint64_t v191 = (char *)a2 + v189;
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v189, 1, v60))
        {
          uint64_t v192 = sub_2694(&qword_201E28);
          memcpy(v190, v191, *(void *)(*(void *)(v192 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v190, v191, v60);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v190, 0, 1, v60);
        }
        *(_OWORD *)((char *)a1 + v151[17]) = *(_OWORD *)((char *)a2 + v151[17]);
        uint64_t v194 = v151[18];
        uint64_t v31 = (char *)a1 + v194;
        uint64_t v32 = (char *)a2 + v194;
        uint64_t v172 = type metadata accessor for SnippetHeaderModel();
        if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v172))
        {
LABEL_79:
          uint64_t v182 = sub_2694(&qword_2022D0);
          memcpy(v31, v32, *(void *)(*(void *)(v182 - 8) + 64));
        }
        else
        {
LABEL_97:
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v31, v32, v60);
          *(_OWORD *)&v31[*(int *)(v172 + 20)] = *(_OWORD *)&v32[*(int *)(v172 + 20)];
          *(_OWORD *)&v31[*(int *)(v172 + 24)] = *(_OWORD *)&v32[*(int *)(v172 + 24)];
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v31, 0, 1, v172);
        }
LABEL_98:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1EE70()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1EE80()
{
  uint64_t result = type metadata accessor for OxygenSaturationQueryModel();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for BloodPressureQueryModel();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for BloodPressureLogModel();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for CycleTrackingLogModel();
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for GenericButtonModel();
          if (v5 <= 0x3F)
          {
            uint64_t result = type metadata accessor for GenericMedCompletedLogModel();
            if (v6 <= 0x3F)
            {
              uint64_t result = type metadata accessor for HealthDataLogModel();
              if (v7 <= 0x3F)
              {
                uint64_t result = type metadata accessor for GenericQueryModel();
                if (v8 <= 0x3F)
                {
                  uint64_t result = type metadata accessor for HeightQueryModel();
                  if (v9 <= 0x3F)
                  {
                    uint64_t result = type metadata accessor for SingleActivitySummaryModel();
                    if (v10 <= 0x3F)
                    {
                      uint64_t result = type metadata accessor for SleepQueryModel();
                      if (v11 <= 0x3F)
                      {
                        uint64_t result = type metadata accessor for SpecificMedCompletedLogModel();
                        if (v12 <= 0x3F)
                        {
                          uint64_t result = type metadata accessor for TemperatureQueryModel();
                          if (v13 <= 0x3F)
                          {
                            swift_initEnumMetadataMultiPayload();
                            return 0;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for Verb(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WellnessSnippets.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF1)
  {
    if (a2 + 15 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 15) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 16;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v5 = v6 - 16;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for WellnessSnippets.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *uint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1F354);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

uint64_t sub_1F37C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1F384(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for WellnessSnippets.CodingKeys()
{
  return &type metadata for WellnessSnippets.CodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.BloodOxygenDataQueryCodingKeys()
{
  return &type metadata for WellnessSnippets.BloodOxygenDataQueryCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.BloodPressureDataQueryCodingKeys()
{
  return &type metadata for WellnessSnippets.BloodPressureDataQueryCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.BloodPressureDataLogCodingKeys()
{
  return &type metadata for WellnessSnippets.BloodPressureDataLogCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.CycleTrackingDataLogCodingKeys()
{
  return &type metadata for WellnessSnippets.CycleTrackingDataLogCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.GenericButtonCodingKeys()
{
  return &type metadata for WellnessSnippets.GenericButtonCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.GenericBinaryButtonCodingKeys()
{
  return &type metadata for WellnessSnippets.GenericBinaryButtonCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.GenericMedCompletedLogCodingKeys()
{
  return &type metadata for WellnessSnippets.GenericMedCompletedLogCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.GenericDataTypeLogCodingKeys()
{
  return &type metadata for WellnessSnippets.GenericDataTypeLogCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.GenericDataQueryCodingKeys()
{
  return &type metadata for WellnessSnippets.GenericDataQueryCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.HeightDataQueryCodingKeys()
{
  return &type metadata for WellnessSnippets.HeightDataQueryCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.PhoneRingsCodingKeys()
{
  return &type metadata for WellnessSnippets.PhoneRingsCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.SingleActivitySummaryQueryCodingKeys()
{
  return &type metadata for WellnessSnippets.SingleActivitySummaryQueryCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.SleepQueryCodingKeys()
{
  return &type metadata for WellnessSnippets.SleepQueryCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.SpecificMedCompletedLogCodingKeys()
{
  return &type metadata for WellnessSnippets.SpecificMedCompletedLogCodingKeys;
}

ValueMetadata *type metadata accessor for WellnessSnippets.TemperatureDataQueryCodingKeys()
{
  return &type metadata for WellnessSnippets.TemperatureDataQueryCodingKeys;
}

uint64_t getEnumTagSinglePayload for MedsLoggingCorrectionsFlow.CorrectionsTask(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s18WellnessFlowPlugin16WellnessSnippetsO30BloodOxygenDataQueryCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1F584);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for WellnessSnippets.WatchRingsCodingKeys()
{
  return &type metadata for WellnessSnippets.WatchRingsCodingKeys;
}

unint64_t sub_1F5C0()
{
  unint64_t result = qword_202380;
  if (!qword_202380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202380);
  }
  return result;
}

unint64_t sub_1F610()
{
  unint64_t result = qword_202388;
  if (!qword_202388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202388);
  }
  return result;
}

unint64_t sub_1F660()
{
  unint64_t result = qword_202390;
  if (!qword_202390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202390);
  }
  return result;
}

unint64_t sub_1F6B0()
{
  unint64_t result = qword_202398;
  if (!qword_202398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202398);
  }
  return result;
}

unint64_t sub_1F700()
{
  unint64_t result = qword_2023A0;
  if (!qword_2023A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2023A0);
  }
  return result;
}

unint64_t sub_1F750()
{
  unint64_t result = qword_2023A8;
  if (!qword_2023A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2023A8);
  }
  return result;
}

unint64_t sub_1F7A0()
{
  unint64_t result = qword_2023B0;
  if (!qword_2023B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2023B0);
  }
  return result;
}

unint64_t sub_1F7F0()
{
  unint64_t result = qword_2023B8;
  if (!qword_2023B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2023B8);
  }
  return result;
}

unint64_t sub_1F840()
{
  unint64_t result = qword_2023C0;
  if (!qword_2023C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2023C0);
  }
  return result;
}

unint64_t sub_1F890()
{
  unint64_t result = qword_2023C8;
  if (!qword_2023C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2023C8);
  }
  return result;
}

unint64_t sub_1F8E0()
{
  unint64_t result = qword_2023D0;
  if (!qword_2023D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2023D0);
  }
  return result;
}

unint64_t sub_1F930()
{
  unint64_t result = qword_2023D8;
  if (!qword_2023D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2023D8);
  }
  return result;
}

unint64_t sub_1F980()
{
  unint64_t result = qword_2023E0;
  if (!qword_2023E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2023E0);
  }
  return result;
}

unint64_t sub_1F9D0()
{
  unint64_t result = qword_2023E8;
  if (!qword_2023E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2023E8);
  }
  return result;
}

unint64_t sub_1FA20()
{
  unint64_t result = qword_2023F0;
  if (!qword_2023F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2023F0);
  }
  return result;
}

unint64_t sub_1FA70()
{
  unint64_t result = qword_2023F8;
  if (!qword_2023F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2023F8);
  }
  return result;
}

unint64_t sub_1FAC0()
{
  unint64_t result = qword_202400;
  if (!qword_202400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202400);
  }
  return result;
}

unint64_t sub_1FB10()
{
  unint64_t result = qword_202408;
  if (!qword_202408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202408);
  }
  return result;
}

unint64_t sub_1FB60()
{
  unint64_t result = qword_202410;
  if (!qword_202410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202410);
  }
  return result;
}

unint64_t sub_1FBB0()
{
  unint64_t result = qword_202418;
  if (!qword_202418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202418);
  }
  return result;
}

unint64_t sub_1FC00()
{
  unint64_t result = qword_202420;
  if (!qword_202420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202420);
  }
  return result;
}

unint64_t sub_1FC50()
{
  unint64_t result = qword_202428;
  if (!qword_202428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202428);
  }
  return result;
}

unint64_t sub_1FCA0()
{
  unint64_t result = qword_202430;
  if (!qword_202430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202430);
  }
  return result;
}

unint64_t sub_1FCF0()
{
  unint64_t result = qword_202438;
  if (!qword_202438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202438);
  }
  return result;
}

unint64_t sub_1FD40()
{
  unint64_t result = qword_202440;
  if (!qword_202440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202440);
  }
  return result;
}

unint64_t sub_1FD90()
{
  unint64_t result = qword_202448;
  if (!qword_202448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202448);
  }
  return result;
}

unint64_t sub_1FDE0()
{
  unint64_t result = qword_202450;
  if (!qword_202450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202450);
  }
  return result;
}

unint64_t sub_1FE30()
{
  unint64_t result = qword_202458;
  if (!qword_202458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202458);
  }
  return result;
}

unint64_t sub_1FE80()
{
  unint64_t result = qword_202460;
  if (!qword_202460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202460);
  }
  return result;
}

unint64_t sub_1FED0()
{
  unint64_t result = qword_202468;
  if (!qword_202468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202468);
  }
  return result;
}

unint64_t sub_1FF20()
{
  unint64_t result = qword_202470;
  if (!qword_202470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202470);
  }
  return result;
}

unint64_t sub_1FF70()
{
  unint64_t result = qword_202478;
  if (!qword_202478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202478);
  }
  return result;
}

unint64_t sub_1FFC0()
{
  unint64_t result = qword_202480;
  if (!qword_202480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202480);
  }
  return result;
}

unint64_t sub_20010()
{
  unint64_t result = qword_202488;
  if (!qword_202488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202488);
  }
  return result;
}

unint64_t sub_20060()
{
  unint64_t result = qword_202490;
  if (!qword_202490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202490);
  }
  return result;
}

unint64_t sub_200B0()
{
  unint64_t result = qword_202498;
  if (!qword_202498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202498);
  }
  return result;
}

unint64_t sub_20100()
{
  unint64_t result = qword_2024A0;
  if (!qword_2024A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2024A0);
  }
  return result;
}

unint64_t sub_20150()
{
  unint64_t result = qword_2024A8;
  if (!qword_2024A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2024A8);
  }
  return result;
}

unint64_t sub_201A0()
{
  unint64_t result = qword_2024B0;
  if (!qword_2024B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2024B0);
  }
  return result;
}

unint64_t sub_201F0()
{
  unint64_t result = qword_2024B8;
  if (!qword_2024B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2024B8);
  }
  return result;
}

unint64_t sub_20240()
{
  unint64_t result = qword_2024C0;
  if (!qword_2024C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2024C0);
  }
  return result;
}

unint64_t sub_20290()
{
  unint64_t result = qword_2024C8;
  if (!qword_2024C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2024C8);
  }
  return result;
}

unint64_t sub_202E0()
{
  unint64_t result = qword_2024D0;
  if (!qword_2024D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2024D0);
  }
  return result;
}

unint64_t sub_20330()
{
  unint64_t result = qword_2024D8;
  if (!qword_2024D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2024D8);
  }
  return result;
}

unint64_t sub_20380()
{
  unint64_t result = qword_2024E0;
  if (!qword_2024E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2024E0);
  }
  return result;
}

unint64_t sub_203D0()
{
  unint64_t result = qword_2024E8;
  if (!qword_2024E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2024E8);
  }
  return result;
}

unint64_t sub_20420()
{
  unint64_t result = qword_2024F0;
  if (!qword_2024F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2024F0);
  }
  return result;
}

unint64_t sub_20470()
{
  unint64_t result = qword_2024F8;
  if (!qword_2024F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2024F8);
  }
  return result;
}

unint64_t sub_204C0()
{
  unint64_t result = qword_202500;
  if (!qword_202500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202500);
  }
  return result;
}

unint64_t sub_20510()
{
  unint64_t result = qword_202508;
  if (!qword_202508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202508);
  }
  return result;
}

unint64_t sub_20560()
{
  unint64_t result = qword_202510;
  if (!qword_202510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202510);
  }
  return result;
}

uint64_t sub_205B8()
{
  return v0;
}

uint64_t sub_205D8()
{
  return v0;
}

uint64_t sub_205F4(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_2061C()
{
  return sub_1AD240();
}

uint64_t sub_20644(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_20664()
{
  return sub_1AD220();
}

void sub_20698()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_206A8()
{
  return v0;
}

uint64_t sub_206B8()
{
  return v0;
}

void sub_206D4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

void sub_206E0(char a1@<W8>)
{
  *(unsigned char *)(v1 - 336) = a1;
}

uint64_t sub_206EC()
{
  return sub_1AD220();
}

uint64_t sub_20704()
{
  return sub_1AD2B0();
}

uint64_t sub_2071C()
{
  return v0;
}

uint64_t sub_20728()
{
  return v0;
}

uint64_t sub_20748()
{
  return v0;
}

uint64_t sub_20760()
{
  return v0;
}

uint64_t sub_20774()
{
  return v0;
}

uint64_t WatchRingsModel.exerciseGoalValue.getter()
{
  return *(void *)v0;
}

uint64_t WatchRingsModel.exerciseGoalValue.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*SingleActivitySummaryModel.totalValue.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t WatchRingsModel.exerciseTotalValue.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t WatchRingsModel.exerciseTotalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*SingleActivitySummaryModel.date.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t WatchRingsModel.moveGoalValue.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t WatchRingsModel.moveGoalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*GenericBinaryButtonModel.secondaryButtonLabel.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t WatchRingsModel.moveTotalValue.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t WatchRingsModel.moveTotalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 48) = result;
  *(unsigned char *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*GenericBinaryButtonModel.isSmartEnabled.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t WatchRingsModel.standGoalValue.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t WatchRingsModel.standGoalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 64) = result;
  *(unsigned char *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.standGoalValue.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t WatchRingsModel.standTotalValue.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t WatchRingsModel.standTotalValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 80) = result;
  *(unsigned char *)(v2 + 88) = a2 & 1;
  return result;
}

uint64_t (*WatchRingsModel.standTotalValue.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t PhoneRingsModel.exerciseLabel.getter()
{
  return sub_22F80();
}

uint64_t PhoneRingsModel.exerciseLabel.setter()
{
  sub_22F74();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 96) = v2;
  *(void *)(v1 + 104) = v0;
  return result;
}

uint64_t (*PhoneRingsModel.exerciseLabel.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t PhoneRingsModel.exerciseValueLabel.getter()
{
  return sub_22F80();
}

uint64_t PhoneRingsModel.exerciseValueLabel.setter()
{
  sub_22F74();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 112) = v2;
  *(void *)(v1 + 120) = v0;
  return result;
}

uint64_t (*PhoneRingsModel.exerciseValueLabel.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t PhoneRingsModel.exerciseUnitLabel.getter()
{
  return sub_22F80();
}

uint64_t PhoneRingsModel.exerciseUnitLabel.setter()
{
  sub_22F74();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 128) = v2;
  *(void *)(v1 + 136) = v0;
  return result;
}

uint64_t (*PhoneRingsModel.exerciseUnitLabel.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t PhoneRingsModel.moveLabel.getter()
{
  return sub_22F80();
}

uint64_t PhoneRingsModel.moveLabel.setter()
{
  sub_22F74();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 144) = v2;
  *(void *)(v1 + 152) = v0;
  return result;
}

uint64_t (*PhoneRingsModel.moveLabel.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t PhoneRingsModel.moveValueLabel.getter()
{
  return sub_22F80();
}

uint64_t PhoneRingsModel.moveValueLabel.setter()
{
  sub_22F74();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 160) = v2;
  *(void *)(v1 + 168) = v0;
  return result;
}

uint64_t (*PhoneRingsModel.moveValueLabel.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t PhoneRingsModel.moveUnitLabel.getter()
{
  return sub_22F80();
}

uint64_t PhoneRingsModel.moveUnitLabel.setter()
{
  sub_22F74();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 176) = v2;
  *(void *)(v1 + 184) = v0;
  return result;
}

uint64_t (*PhoneRingsModel.moveUnitLabel.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t PhoneRingsModel.standLabel.getter()
{
  return sub_22F80();
}

uint64_t PhoneRingsModel.standLabel.setter()
{
  sub_22F74();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 192) = v2;
  *(void *)(v1 + 200) = v0;
  return result;
}

uint64_t (*PhoneRingsModel.standLabel.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t PhoneRingsModel.standValueLabel.getter()
{
  return sub_22F80();
}

uint64_t PhoneRingsModel.standValueLabel.setter()
{
  sub_22F74();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 208) = v2;
  *(void *)(v1 + 216) = v0;
  return result;
}

uint64_t (*PhoneRingsModel.standValueLabel.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t PhoneRingsModel.standUnitLabel.getter()
{
  return sub_22F80();
}

uint64_t PhoneRingsModel.standUnitLabel.setter()
{
  sub_22F74();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 224) = v2;
  *(void *)(v1 + 232) = v0;
  return result;
}

uint64_t (*PhoneRingsModel.standUnitLabel.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t PhoneRingsModel.isSmartEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 240);
}

uint64_t PhoneRingsModel.isSmartEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 240) = result;
  return result;
}

uint64_t (*PhoneRingsModel.isSmartEnabled.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

void __swiftcall PhoneRingsModel.init(exerciseGoalValue:exerciseTotalValue:moveGoalValue:moveTotalValue:standGoalValue:standTotalValue:exerciseLabel:exerciseUnitLabel:moveLabel:moveUnitLabel:standLabel:standUnitLabel:isSmartEnabled:)(WellnessFlowPlugin::PhoneRingsModel *__return_ptr retstr, Swift::Double exerciseGoalValue, Swift::Double exerciseTotalValue, Swift::Double moveGoalValue, Swift::Double moveTotalValue, Swift::Double standGoalValue, Swift::Double standTotalValue, Swift::String exerciseLabel, Swift::String exerciseUnitLabel, Swift::String moveLabel, Swift::String moveUnitLabel, Swift::String standLabel, Swift::String standUnitLabel, Swift::Bool isSmartEnabled)
{
  sub_23048();
  if (v17)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (exerciseTotalValue <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  double v18 = v16;
  if (exerciseTotalValue >= sub_2300C())
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v31 = v26;
  uint64_t v32 = v25;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v22;
  uint64_t v36 = v21;
  uint64_t v37 = v20;
  uint64_t v38 = v19;
  double v39 = v30;
  double v40 = v29;
  double v41 = v28;
  double v42 = v27;
  uint64_t v51 = (uint64_t)exerciseTotalValue;
  swift_bridgeObjectRetain();
  sub_1AD2C0();
  sub_2306C();
  sub_23048();
  if (v17)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v18 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v18 >= sub_2300C())
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v49 = v38;
  uint64_t v51 = (uint64_t)v18;
  v53._countAndFlagsBits = sub_1AD2C0();
  sub_1ACE70(v53);
  swift_bridgeObjectRelease();
  sub_23048();
  if (v17)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v41 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v41 >= sub_2300C())
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v43 = *(void *)&__src[8];
  uint64_t v48 = *(void *)__src;
  uint64_t v51 = (uint64_t)v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AD2C0();
  sub_2306C();
  sub_23048();
  if (v17)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v42 <= -9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v42 >= sub_2300C())
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v51 = (uint64_t)v42;
  v54._countAndFlagsBits = sub_1AD2C0();
  sub_1ACE70(v54);
  swift_bridgeObjectRelease();
  sub_23048();
  if (v17)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v39 <= -9.22337204e18)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v39 >= sub_2300C())
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v47 = v34;
  uint64_t v44 = *(void *)&__src[8];
  uint64_t v46 = *(void *)__src;
  *(void *)__src = (uint64_t)v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v51 = sub_1AD2C0();
  uint64_t v52 = v45;
  v55._countAndFlagsBits = 47;
  v55._object = (void *)0xE100000000000000;
  sub_1ACE70(v55);
  if ((~*(void *)&v40 & 0x7FF0000000000000) == 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v40 <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v40 < sub_2300C())
  {
    v56._countAndFlagsBits = sub_1AD2C0();
    sub_1ACE70(v56);
    swift_bridgeObjectRelease();
    *(double *)__src = v18;
    __src[8] = 0;
    *(Swift::Double *)&__src[16] = exerciseTotalValue;
    __src[24] = 0;
    *(double *)&__src[32] = v42;
    __src[40] = 0;
    *(double *)&__src[48] = v41;
    __src[56] = 0;
    *(double *)&__src[64] = v40;
    __src[72] = 0;
    *(double *)&__src[80] = v39;
    __src[88] = 0;
    *(void *)&__src[96] = v49;
    *(void *)&__src[104] = v37;
    *(void *)&__src[112] = v48;
    *(void *)&__src[120] = v43;
    *(void *)&__src[128] = v36;
    *(void *)&__src[136] = v35;
    *(void *)&__src[144] = v47;
    *(void *)&__src[152] = v33;
    *(void *)&__src[160] = v46;
    *(void *)&__src[168] = v44;
    *(void *)&__src[176] = v32;
    *(void *)&__src[184] = v31;
    *(Swift::String *)&__src[192] = standLabel;
    *(void *)&__src[208] = v51;
    *(void *)&__src[216] = v52;
    *(Swift::String *)&__src[224] = standUnitLabel;
    __src[240] = isSmartEnabled;
    sub_211C8((uint64_t)__src);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1127C((uint64_t)__src);
    memcpy(retstr, __src, sizeof(WellnessFlowPlugin::PhoneRingsModel));
    return;
  }
LABEL_37:
  __break(1u);
}

uint64_t sub_211C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_21274(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000000001B75D0 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B75F0 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    BOOL v5 = a1 == 0x6C616F4765766F6DLL && a2 == 0xED000065756C6156;
    if (v5 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v6 = a1 == 0x61746F5465766F6DLL && a2 == 0xEE0065756C61566CLL;
      if (v6 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v7 = a1 == 0x616F47646E617473 && a2 == 0xEE0065756C61566CLL;
        if (v7 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v8 = a1 == 0x746F54646E617473 && a2 == 0xEF65756C61566C61;
          if (v8 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            BOOL v9 = a1 == 0x6573696372657865 && a2 == 0xED00006C6562614CLL;
            if (v9 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B7610 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 7;
            }
            else if (a1 == 0xD000000000000011 && a2 == 0x80000000001B7630 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 8;
            }
            else
            {
              BOOL v10 = a1 == 0x6562614C65766F6DLL && a2 == 0xE90000000000006CLL;
              if (v10 || (sub_1AD2F0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 9;
              }
              else
              {
                BOOL v11 = a1 == 0x756C615665766F6DLL && a2 == 0xEE006C6562614C65;
                if (v11 || (sub_1AD2F0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 10;
                }
                else
                {
                  BOOL v12 = a1 == 0x74696E5565766F6DLL && a2 == 0xED00006C6562614CLL;
                  if (v12 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 11;
                  }
                  else
                  {
                    BOOL v13 = a1 == 0x62614C646E617473 && a2 == 0xEA00000000006C65;
                    if (v13 || (sub_1AD2F0() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 12;
                    }
                    else
                    {
                      BOOL v14 = a1 == 0x6C6156646E617473 && a2 == 0xEF6C6562614C6575;
                      if (v14 || (sub_1AD2F0() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 13;
                      }
                      else
                      {
                        BOOL v15 = a1 == 0x696E55646E617473 && a2 == 0xEE006C6562614C74;
                        if (v15 || (sub_1AD2F0() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 14;
                        }
                        else if (a1 == 0x457472616D537369 && a2 == 0xEE0064656C62616ELL)
                        {
                          swift_bridgeObjectRelease();
                          return 15;
                        }
                        else
                        {
                          char v17 = sub_1AD2F0();
                          swift_bridgeObjectRelease();
                          if (v17) {
                            return 15;
                          }
                          else {
                            return 16;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_21904(char a1)
{
  uint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000012;
      break;
    case 2:
      uint64_t v3 = 0x6F4765766F6DLL;
      goto LABEL_17;
    case 3:
      uint64_t result = 0x61746F5465766F6DLL;
      break;
    case 4:
      uint64_t result = 0x616F47646E617473;
      break;
    case 5:
      uint64_t result = 0x746F54646E617473;
      break;
    case 6:
      uint64_t result = 0x6573696372657865;
      break;
    case 7:
      uint64_t result = 0xD000000000000012;
      break;
    case 9:
      uint64_t result = 0x6562614C65766F6DLL;
      break;
    case 10:
      uint64_t result = 0x756C615665766F6DLL;
      break;
    case 11:
      uint64_t result = 0x74696E5565766F6DLL;
      break;
    case 12:
      uint64_t result = 0x62614C646E617473;
      break;
    case 13:
      uint64_t v3 = 0x56646E617473;
LABEL_17:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6C61000000000000;
      break;
    case 14:
      uint64_t result = 0x696E55646E617473;
      break;
    case 15:
      uint64_t result = 0x457472616D537369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_21B34()
{
  return sub_21904(*v0);
}

uint64_t sub_21B3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_21274(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_21B64(uint64_t a1)
{
  unint64_t v2 = sub_21E44();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_21BA0(uint64_t a1)
{
  unint64_t v2 = sub_21E44();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PhoneRingsModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2694(&qword_202518);
  sub_52C4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  BOOL v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2E38(a1, a1[3]);
  sub_21E44();
  sub_1AD3B0();
  char v13 = 0;
  sub_1AD260();
  if (!v2)
  {
    sub_22F30(1);
    sub_22F30(2);
    sub_22F30(3);
    sub_22F30(4);
    sub_22F30(5);
    sub_22EE8(v3[12], v3[13], 6);
    sub_22EE8(v3[14], v3[15], 7);
    sub_22EE8(v3[16], v3[17], 8);
    sub_22EE8(v3[18], v3[19], 9);
    sub_22EE8(v3[20], v3[21], 10);
    sub_22EE8(v3[22], v3[23], 11);
    sub_22EE8(v3[24], v3[25], 12);
    sub_22EE8(v3[26], v3[27], 13);
    sub_22EE8(v3[28], v3[29], 14);
    char v13 = 15;
    sub_1AD290();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v5);
}

unint64_t sub_21E44()
{
  unint64_t result = qword_202520;
  if (!qword_202520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202520);
  }
  return result;
}

void *PhoneRingsModel.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_2694(&qword_202528);
  sub_52C4();
  __chkstk_darwin(v5);
  char v108 = 1;
  char v106 = 1;
  char v104 = 1;
  char v102 = 1;
  uint64_t v6 = a1[3];
  uint64_t v60 = (uint64_t)a1;
  sub_2E38(a1, v6);
  sub_21E44();
  sub_1AD3A0();
  if (v2)
  {
    uint64_t v113 = v2;
    sub_22FD4();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
    char v59 = a2;
    uint64_t v7 = sub_1AD1D0();
    char v112 = v8 & 1;
    uint64_t v9 = sub_22F0C(1);
    char v58 = v6;
    char v110 = v10 & 1;
    char v56 = v6;
    uint64_t v57 = sub_22F0C(2);
    char v108 = v11 & 1;
    char v54 = v6;
    uint64_t v55 = sub_22F0C(3);
    char v106 = v12 & 1;
    char v52 = v6;
    uint64_t v53 = sub_22F0C(4);
    char v104 = v13 & 1;
    char v50 = v6;
    uint64_t v51 = sub_22F0C(5);
    char v102 = v14 & 1;
    char v15 = v14;
    uint64_t v16 = sub_1AD1C0();
    uint64_t v19 = v18;
    char v48 = v15;
    uint64_t v49 = v16;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_1AD1C0();
    uint64_t v47 = v19;
    uint64_t v21 = v20;
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_1AD1C0();
    uint64_t v22 = v7;
    uint64_t v45 = v23;
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_22F54();
    uint64_t v44 = v25;
    uint64_t v26 = v24;
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_22F54();
    uint64_t v42 = v27;
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_22F54();
    uint64_t v40 = v28;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_22F54();
    uint64_t v38 = v29;
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_22F54();
    uint64_t v36 = v30;
    LOBYTE(v63) = 14;
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_22F54();
    uint64_t v61 = v31;
    char v100 = 15;
    swift_bridgeObjectRetain();
    uint64_t v113 = 0;
    LOBYTE(v19) = sub_1AD200();
    uint64_t v32 = sub_22ED0();
    v33(v32);
    v62[0] = v22;
    LOBYTE(v62[1]) = v58 & 1;
    v62[2] = v9;
    LOBYTE(v62[3]) = v56 & 1;
    v62[4] = v57;
    LOBYTE(v62[5]) = v54 & 1;
    v62[6] = v55;
    LOBYTE(v62[7]) = v52 & 1;
    v62[8] = v53;
    LOBYTE(v62[9]) = v50 & 1;
    v62[10] = v51;
    LOBYTE(v62[11]) = v48 & 1;
    v62[12] = v49;
    v62[13] = v47;
    v62[14] = v46;
    v62[15] = v21;
    v62[16] = v43;
    v62[17] = v45;
    v62[18] = v26;
    v62[19] = v44;
    v62[20] = v41;
    v62[21] = v42;
    v62[22] = v39;
    v62[23] = v40;
    v62[24] = v37;
    v62[25] = v38;
    v62[26] = v35;
    v62[27] = v36;
    v62[28] = v34;
    v62[29] = v61;
    LOBYTE(v62[30]) = v19 & 1;
    sub_211C8((uint64_t)v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v60);
    uint64_t v63 = v22;
    char v64 = v112;
    *(_DWORD *)uint64_t v65 = *(_DWORD *)v111;
    *(_DWORD *)&v65[3] = *(_DWORD *)&v111[3];
    uint64_t v66 = v9;
    char v67 = v110;
    *(_DWORD *)uint64_t v68 = *(_DWORD *)v109;
    *(_DWORD *)&v68[3] = *(_DWORD *)&v109[3];
    uint64_t v69 = v57;
    char v70 = v108;
    *(_DWORD *)&v71[3] = *(_DWORD *)&v107[3];
    *(_DWORD *)uint64_t v71 = *(_DWORD *)v107;
    uint64_t v72 = v55;
    char v73 = v106;
    *(_DWORD *)uint64_t v74 = *(_DWORD *)v105;
    *(_DWORD *)&v74[3] = *(_DWORD *)&v105[3];
    uint64_t v75 = v53;
    char v76 = v104;
    *(_DWORD *)char v77 = *(_DWORD *)v103;
    *(_DWORD *)&v77[3] = *(_DWORD *)&v103[3];
    uint64_t v78 = v51;
    char v79 = v102;
    *(_DWORD *)&v80[3] = *(_DWORD *)&v101[3];
    *(_DWORD *)uint64_t v80 = *(_DWORD *)v101;
    uint64_t v81 = v49;
    uint64_t v82 = v47;
    uint64_t v83 = v46;
    uint64_t v84 = v21;
    uint64_t v85 = v43;
    uint64_t v86 = v45;
    uint64_t v87 = v26;
    uint64_t v88 = v44;
    uint64_t v89 = v41;
    uint64_t v90 = v42;
    uint64_t v91 = v39;
    uint64_t v92 = v40;
    uint64_t v93 = v37;
    uint64_t v94 = v38;
    uint64_t v95 = v35;
    uint64_t v96 = v36;
    uint64_t v97 = v34;
    uint64_t v98 = v61;
    char v99 = v19 & 1;
    sub_1127C((uint64_t)&v63);
    return memcpy(v59, v62, 0xF1uLL);
  }
}

void *sub_226EC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = PhoneRingsModel.init(from:)(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0xF1uLL);
  }
  return result;
}

uint64_t sub_22740(void *a1)
{
  return PhoneRingsModel.encode(to:)(a1);
}

uint64_t destroy for PhoneRingsModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PhoneRingsModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v4;
  uint64_t v5 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v5;
  uint64_t v6 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v6;
  uint64_t v7 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v7;
  uint64_t v8 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v8;
  uint64_t v9 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v9;
  uint64_t v10 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v10;
  uint64_t v11 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v11;
  uint64_t v12 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v12;
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PhoneRingsModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = a2[8];
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = a2[10];
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = a2[14];
  *(void *)(a1 + 120) = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = a2[16];
  *(void *)(a1 + 136) = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = a2[18];
  *(void *)(a1 + 152) = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = a2[20];
  *(void *)(a1 + 168) = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = a2[22];
  *(void *)(a1 + 184) = a2[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = a2[24];
  *(void *)(a1 + 200) = a2[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = a2[26];
  *(void *)(a1 + 216) = a2[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = a2[28];
  *(void *)(a1 + 232) = a2[29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 240) = *((unsigned char *)a2 + 240);
  return a1;
}

void *initializeWithTake for PhoneRingsModel(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF1uLL);
}

uint64_t assignWithTake for PhoneRingsModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneRingsModel(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 241))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 104);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneRingsModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 240) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 241) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 241) = 0;
    }
    if (a2) {
      *(void *)(result + 104) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneRingsModel()
{
  return &type metadata for PhoneRingsModel;
}

unsigned char *storeEnumTagSinglePayload for PhoneRingsModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22DA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneRingsModel.CodingKeys()
{
  return &type metadata for PhoneRingsModel.CodingKeys;
}

unint64_t sub_22DE4()
{
  unint64_t result = qword_202530;
  if (!qword_202530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202530);
  }
  return result;
}

unint64_t sub_22E34()
{
  unint64_t result = qword_202538;
  if (!qword_202538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202538);
  }
  return result;
}

unint64_t sub_22E84()
{
  unint64_t result = qword_202540[0];
  if (!qword_202540[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_202540);
  }
  return result;
}

uint64_t sub_22ED0()
{
  return v0;
}

uint64_t sub_22EE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(unsigned char *)(v4 - 65) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 65, v3);
}

uint64_t sub_22F0C@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 + 520) = a1;
  return sub_1AD1D0();
}

uint64_t sub_22F30@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return sub_1AD260();
}

uint64_t sub_22F54()
{
  return sub_1AD1C0();
}

uint64_t sub_22F80()
{
  return v0;
}

uint64_t sub_22F8C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_22FA4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_22FBC()
{
  return swift_bridgeObjectRelease();
}

void sub_22FD4()
{
  *(void *)(v0 + 264) = 0;
}

uint64_t sub_22FF4()
{
  return swift_bridgeObjectRelease();
}

double sub_2300C()
{
  return 9.22337204e18;
}

uint64_t sub_23018()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23030()
{
  *(void *)(v2 - 72) = v0;
  return v1;
}

uint64_t sub_23054()
{
  return swift_bridgeObjectRelease();
}

void sub_2306C()
{
  v1._countAndFlagsBits = 47;
  v1._object = (void *)0xE100000000000000;
  sub_1ACE70(v1);
}

uint64_t destroy for UnsupportedLoggingFlow(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 240);
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for UnsupportedLoggingFlow(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  long long v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  long long v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  uint64_t v10 = *(void *)(a2 + 264);
  uint64_t v11 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = v10;
  *(void *)(a1 + 272) = v11;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 240, a2 + 240);
  uint64_t v12 = *(void *)(a2 + 280);
  uint64_t v13 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = v12;
  *(void *)(a1 + 288) = v13;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for UnsupportedLoggingFlow(uint64_t *a1, uint64_t *a2)
{
  a1[35] = a2[35];
  swift_retain();
  swift_release();
  a1[36] = a2[36];
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for UnsupportedLoggingFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x128uLL);
}

uint64_t assignWithTake for UnsupportedLoggingFlow(uint64_t a1, uint64_t a2)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 240);
  long long v7 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v7;
  uint64_t v8 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v8;
  swift_release();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnsupportedLoggingFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 296))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsupportedLoggingFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 296) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 296) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsupportedLoggingFlow()
{
  return &type metadata for UnsupportedLoggingFlow;
}

uint64_t sub_235D4()
{
  sub_2503C();

  return sub_1AAF80();
}

uint64_t sub_23628()
{
  sub_A364();
  *(void *)(v1 + 520) = v0;
  *(_WORD *)(v1 + 688) = v2;
  *(void *)(v1 + 512) = v3;
  *(void *)(v1 + 528) = type metadata accessor for GenericButtonModel();
  *(void *)(v1 + 536) = sub_A42C();
  sub_2694(&qword_201E20);
  *(void *)(v1 + 544) = sub_A42C();
  uint64_t v4 = sub_1AAB10();
  *(void *)(v1 + 552) = v4;
  sub_A19C(v4);
  *(void *)(v1 + 560) = v5;
  *(void *)(v1 + 568) = sub_A42C();
  uint64_t v6 = sub_1AB0A0();
  *(void *)(v1 + 576) = v6;
  sub_A19C(v6);
  *(void *)(v1 + 584) = v7;
  *(void *)(v1 + 592) = swift_task_alloc();
  *(void *)(v1 + 600) = swift_task_alloc();
  uint64_t v8 = sub_1AB3D0();
  *(void *)(v1 + 608) = v8;
  sub_A19C(v8);
  *(void *)(v1 + 616) = v9;
  *(void *)(v1 + 624) = sub_A42C();
  sub_2694(&qword_201E28);
  *(void *)(v1 + 632) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_237AC()
{
  unsigned __int8 v1 = sub_19D5A4(*(_WORD *)(v0 + 688));
  unsigned __int8 v2 = v1;
  uint64_t v3 = 1;
  if (v1 != 205)
  {
    sub_2F2B8(v1);
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v0 + 632);
  uint64_t v5 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v4, v3, 1, v5);
  sub_250EC(v2);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 640) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_238CC;
  return sub_1A3BE4();
}

uint64_t sub_238CC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(*v2 + 648) = a1;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v3 + 632);
  if (v1) {
    swift_errorRelease();
  }
  sub_24ED0(v4, &qword_201E28);
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_23A28()
{
  uint64_t v1 = (void *)v0[81];
  uint64_t v2 = v0[75];
  uint64_t v3 = v0[74];
  uint64_t v4 = v0[73];
  uint64_t v5 = v0[72];
  uint64_t v6 = v0[65];
  sub_1AB070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  sub_1AB3C0();
  id v7 = [v1 catId];
  sub_1ACDD0();

  sub_1AB380();
  sub_2E38((void *)(v6 + 40), *(void *)(v6 + 64));
  uint64_t v8 = sub_250B4();
  v9(v8);
  sub_2E38(v0 + 39, v0[42]);
  char v10 = sub_1AB040();
  sub_24E68(v6, (uint64_t)(v0 + 2));
  if (v10)
  {
    sub_24EA0((uint64_t)(v0 + 2));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 39));
  }
  else
  {
    sub_2E38(v0 + 7, v0[10]);
    uint64_t v11 = sub_250B4();
    v12(v11);
    sub_2E38(v0 + 44, v0[47]);
    char v13 = sub_1AB030();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 44));
    sub_24EA0((uint64_t)(v0 + 2));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 39));
    if ((v13 & 1) == 0)
    {
LABEL_6:
      uint64_t v16 = (void *)v0[81];
      char v17 = (void *)v0[65];
      uint64_t v18 = v17[33];
      uint64_t v19 = v17[34];
      sub_2E38(v17 + 30, v18);
      sub_2694(&qword_202588);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_1AF530;
      *(void *)(v20 + 32) = v16;
      uint64_t v44 = v20;
      sub_1ACEF0();
      v0[84] = v44;
      id v21 = v16;
      swift_task_alloc();
      sub_250E0();
      v0[85] = v22;
      *uint64_t v22 = v23;
      v22[1] = sub_2411C;
      uint64_t v24 = v0[78];
      return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v0 + 49, v44, v24, v18, v19);
    }
  }
  uint64_t v14 = v0[69];
  uint64_t v15 = v0[68];
  sub_19D608((void *)v0[65]);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v15, 1, v14) == 1)
  {
    sub_24ED0(v0[68], &qword_201E20);
    goto LABEL_6;
  }
  uint64_t v43 = (void *)v0[81];
  uint64_t v25 = v0[71];
  uint64_t v26 = v0[70];
  uint64_t v27 = v0[69];
  uint64_t v28 = (uint64_t *)v0[67];
  uint64_t v29 = v0[66];
  uint64_t v30 = (void *)v0[65];
  (*(void (**)(uint64_t, void, uint64_t))(v26 + 32))(v25, v0[68], v27);
  uint64_t v31 = sub_C0D54(0x616548206E65704FLL, 0xEB0000000068746CLL, 0x6C6165486E65706FLL, (void *)0xED00007070416874);
  uint64_t v33 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))((char *)v28 + *(int *)(v29 + 20), v25, v27);
  *uint64_t v28 = v31;
  v28[1] = v33;
  uint64_t v34 = v30[33];
  uint64_t v35 = v30[34];
  sub_2E38(v30 + 30, v34);
  v0[62] = type metadata accessor for WellnessSnippets();
  v0[63] = sub_24F2C();
  uint64_t v36 = sub_B5B0(v0 + 59);
  sub_24F7C((uint64_t)v28, (uint64_t)v36);
  swift_storeEnumTagMultiPayload();
  sub_2694(&qword_202588);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_1AF530;
  *(void *)(v37 + 32) = v43;
  uint64_t v45 = v37;
  sub_1ACEF0();
  v0[82] = v45;
  id v38 = v43;
  swift_task_alloc();
  sub_250E0();
  v0[83] = v39;
  *uint64_t v39 = v40;
  v39[1] = sub_23F14;
  uint64_t v41 = v0[78];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v0 + 54, v0 + 59, v45, v41, v34, v35);
}

uint64_t sub_23F14()
{
  sub_A364();
  sub_A1B4();
  uint64_t v2 = v1 + 472;
  uint64_t v3 = *v0;
  sub_A304();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_24004()
{
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 608);
  uint64_t v4 = *(void *)(v0 + 568);
  uint64_t v5 = *(void *)(v0 + 560);
  uint64_t v6 = *(void *)(v0 + 552);
  uint64_t v7 = *(void *)(v0 + 536);
  uint64_t v8 = *(void *)(v0 + 512);

  sub_24FE0(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_24D80((long long *)(v0 + 432), v8);
  sub_25088();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v9();
}

uint64_t sub_2411C()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_24200()
{
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 608);
  uint64_t v4 = *(void *)(v0 + 512);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_24D80((long long *)(v0 + 392), v4);
  sub_25088();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v5();
}

uint64_t sub_242D8()
{
  uint64_t v1 = *(void *)(v0 + 512);
  *(void *)(v1 + 32) = 0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  sub_25088();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v2();
}

uint64_t sub_24380()
{
  sub_A364();
  v1[87] = v0;
  v1[86] = v2;
  uint64_t v3 = sub_1AC800();
  v1[88] = v3;
  sub_A19C(v3);
  v1[89] = v4;
  v1[90] = swift_task_alloc();
  v1[91] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_24428()
{
  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 712);
  sub_1AC7D0();
  swift_beginAccess();
  uint64_t v2 = *(void (**)(void))(v1 + 16);
  sub_250CC();
  v2();
  uint64_t v3 = sub_1AC7F0();
  os_log_type_t v4 = sub_1ACF50();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 712);
    uint64_t v28 = *(void *)(v0 + 704);
    uint64_t v29 = *(void *)(v0 + 728);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v0 + 680) = sub_4A278(0xD000000000000016, 0x80000000001AF540, &v30);
    sub_1ACFE0();
    _os_log_impl(&def_342E4, v3, v4, "Executing %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v7(v29, v28);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 728);
    uint64_t v9 = *(void *)(v0 + 712);
    uint64_t v10 = *(void *)(v0 + 704);

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v7(v8, v10);
  }
  uint64_t v11 = *(void **)(v0 + 696);
  uint64_t v12 = v11[3];
  uint64_t v13 = v11[4];
  sub_2E38(v11, v12);
  __int16 v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  if (v14 == 270)
  {
    sub_9B48(*(void *)(v0 + 696) + 80, v0 + 184);
    sub_9BA4();
    sub_1AB120();
    sub_9BF0(v0 + 184);
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    return v27();
  }
  __int16 v15 = v14;
  if (sub_19D5A4(v14) == 205) {
    goto LABEL_13;
  }
  if (qword_201C30 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_214760;
  swift_bridgeObjectRetain();
  char v17 = sub_7235C(v15, v16);
  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
LABEL_13:
    swift_beginAccess();
    sub_250CC();
    v2();
    id v21 = sub_1AC7F0();
    os_log_type_t v22 = sub_1ACF60();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&def_342E4, v21, v22, "Nil HealthKitIdentifier, returning genericNotSupported instead of dataTypeNotSupported.", v23, 2u);
      swift_slowDealloc();
    }
    uint64_t v24 = *(void *)(v0 + 720);
    uint64_t v25 = *(void *)(v0 + 704);
    uint64_t v26 = *(void *)(v0 + 696);

    v7(v24, v25);
    sub_9B48(v26 + 80, v0 + 16);
    *(unsigned char *)(v0 + 176) = 0;
    sub_24CE0();
    sub_1AB120();
    sub_24D2C(v0 + 16);
    goto LABEL_16;
  }
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 736) = v18;
  *uint64_t v18 = v19;
  v18[1] = sub_248AC;
  return sub_23628();
}

uint64_t sub_248AC()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_24974()
{
  uint64_t v1 = (long long *)(v0 + 504);
  if (*(void *)(v0 + 528))
  {
    sub_24D80(v1, v0 + 584);
    sub_E3FC(v0 + 584, v0 + 544);
    uint64_t v2 = swift_allocObject();
    sub_24D80((long long *)(v0 + 544), v2 + 16);
    sub_1AB350();
    sub_1AAE40();
    swift_allocObject();
    *(void *)(v0 + 672) = sub_1AAE30();
    sub_1AB120();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 584);
    swift_release();
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 696);
    sub_24ED0((uint64_t)v1, &qword_202570);
    sub_9B48(v3 + 80, v0 + 344);
    sub_9BA4();
    sub_1AB120();
    sub_9BF0(v0 + 344);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v4();
}

uint64_t sub_24B08(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_24B28, 0, 0);
}

uint64_t sub_24B28()
{
  sub_A364();
  sub_E3FC(*(void *)(v0 + 24), *(void *)(v0 + 16));
  sub_E564();
  return v1();
}

uint64_t sub_24B88()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24C20;
  return sub_24380();
}

uint64_t sub_24C20()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_E564();
  return v3();
}

unint64_t sub_24CE0()
{
  unint64_t result = qword_202560;
  if (!qword_202560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_202560);
  }
  return result;
}

uint64_t sub_24D2C(uint64_t a1)
{
  return a1;
}

uint64_t sub_24D80(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_24D98()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_24DD0()
{
  sub_A364();
  uint64_t v3 = v2;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v5;
  v4[1] = sub_24C20;
  return sub_24B08(v3, v0 + 16);
}

uint64_t sub_24E68(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24EA0(uint64_t a1)
{
  return a1;
}

uint64_t sub_24ED0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_2694(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_24F2C()
{
  unint64_t result = qword_202590;
  if (!qword_202590)
  {
    type metadata accessor for WellnessSnippets();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202590);
  }
  return result;
}

uint64_t sub_24F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GenericButtonModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24FE0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GenericButtonModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2503C()
{
  unint64_t result = qword_202598;
  if (!qword_202598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202598);
  }
  return result;
}

uint64_t sub_25088()
{
  return swift_task_dealloc();
}

uint64_t sub_250B4()
{
  return v0;
}

uint64_t sub_250EC(unsigned __int8 a1)
{
  int v2 = a1;
  uint64_t v3 = sub_1AC800();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2 == 205)
  {
    uint64_t v7 = sub_1AC7D0();
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
    uint64_t v8 = sub_1AC7F0();
    os_log_type_t v9 = sub_1ACF60();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&def_342E4, v8, v9, "Cannot determine if isLoggingSupported for nil identifier. Assuming it is supported.", v10, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    char v11 = 1;
  }
  else
  {
    char v12 = sub_72484(a1, (uint64_t)&off_1F4438);
    swift_bridgeObjectRelease();
    char v11 = v12 ^ 1;
  }
  return v11 & 1;
}

_UNKNOWN **sub_25294()
{
  return &off_1F4438;
}

uint64_t destroy for WellnessPatternsProvider(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);

  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
}

_OWORD *initializeWithCopy for WellnessPatternsProvider(_OWORD *a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  long long v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  long long v7 = a2[9];
  a1[9] = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)a1 + 120, (uint64_t)a2 + 120);
  return a1;
}

uint64_t *assignWithCopy for WellnessPatternsProvider(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

void *initializeWithTake for WellnessPatternsProvider(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA0uLL);
}

uint64_t assignWithTake for WellnessPatternsProvider(uint64_t a1, uint64_t a2)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for WellnessPatternsProvider(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 160))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WellnessPatternsProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WellnessPatternsProvider()
{
  return &type metadata for WellnessPatternsProvider;
}

uint64_t sub_255D8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_255F8, 0, 0);
}

uint64_t sub_255F8()
{
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  v1[3] = sub_1AB470();
  v1[4] = (uint64_t)&protocol witness table for AceOutput;
  sub_B5B0(v1);
  sub_1AB460();
  sub_E564();
  return v2();
}

uint64_t sub_25694()
{
  sub_A364();
  v1[7] = v2;
  v1[8] = v0;
  v1[5] = v3;
  v1[6] = v4;
  sub_2694(&qword_202770);
  v1[9] = sub_A220();
  v1[10] = swift_task_alloc();
  return _swift_task_switch(sub_26A8C, 0, 0);
}

uint64_t sub_2572C()
{
  sub_A364();
  v1[7] = v2;
  v1[8] = v0;
  v1[5] = v3;
  v1[6] = v4;
  sub_2694(&qword_202770);
  v1[9] = sub_A220();
  v1[10] = swift_task_alloc();
  return _swift_task_switch(sub_257C4, 0, 0);
}

void sub_257C4()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = *(void *)(v1 + 16);
  BOOL v3 = __OFADD__(v2, 1);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v0[9];
    uint64_t v5 = v0[10];
    uint64_t v7 = v0[6];
    uint64_t v8 = v0[7];
    os_log_type_t v9 = (uint64_t *)v0[5];
    *(void *)(v1 + 16) = v4;
    *(void *)(v1 + 24) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_1AB3D0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v5, v8, v10);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, 0, 1, v10);
    sub_2695C(v5, v6);
    uint64_t v11 = v1 + OBJC_IVAR____TtC18WellnessFlowPlugin19MockResponseFactory_outputGenerationManifest;
    swift_beginAccess();
    sub_269C4(v6, v11);
    swift_endAccess();
    v9[3] = sub_1AB470();
    v9[4] = (uint64_t)&protocol witness table for AceOutput;
    sub_B5B0(v9);
    sub_1AB460();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    v12();
  }
}

uint64_t sub_2594C()
{
  sub_A364();
  v1[7] = v2;
  v1[8] = v0;
  v1[5] = v3;
  v1[6] = v4;
  sub_2694(&qword_202770);
  v1[9] = sub_A220();
  v1[10] = swift_task_alloc();
  return _swift_task_switch(sub_26A8C, 0, 0);
}

uint64_t sub_259E4()
{
  swift_bridgeObjectRelease();
  sub_26A2C(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin19MockResponseFactory_outputGenerationManifest);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_25A50()
{
  return type metadata accessor for MockResponseFactory();
}

uint64_t type metadata accessor for MockResponseFactory()
{
  uint64_t result = qword_2025C8;
  if (!qword_2025C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_25AA0()
{
  sub_25B48();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_25B48()
{
  if (!qword_2025F8)
  {
    sub_1AB3D0();
    unint64_t v0 = sub_1ACFD0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2025F8);
    }
  }
}

uint64_t sub_25BA0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_25C38;
  return sub_255D8(a1);
}

uint64_t sub_25C38()
{
  sub_A364();
  sub_A1B4();
  swift_task_dealloc();
  sub_E564();
  return v0();
}

uint64_t sub_25D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int16 v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  void *v15 = v7;
  v15[1] = sub_26A90;
  return ResponseGenerating.makeResponseOutput(resultModel:conversationModel:dialog:outputGenerationManifest:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_25DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_26A90;
  return ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_25EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_26A90;
  return ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_25F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_26A90;
  return ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(a1, a2, a3, a4, a5);
}

uint64_t sub_26068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  void *v15 = v7;
  v15[1] = sub_26A90;
  return ResponseGenerating.makeResponseOutput(resultModel:conversationModel:dialog:outputGenerationManifest:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2614C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_26A90;
  return sub_2572C();
}

uint64_t sub_26200()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_26A90;
  return sub_25694();
}

uint64_t sub_262B4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_26A90;
  return sub_2594C();
}

uint64_t sub_26368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_25C38;
  return ResponseGenerating.makeResponseOutput(resultModel:conversationModel:outputGenerationManifest:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_26444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_26A90;
  return ResponseGenerating.makeResponseOutput(resultModel:outputGenerationManifest:)(a1, a2, a3, a4, a5);
}

uint64_t sub_26510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_26A90;
  return ResponseGenerating.makeResponseOutput(conversationModel:outputGenerationManifest:)(a1, a2, a3, a4, a5);
}

uint64_t sub_265DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  void *v15 = v7;
  v15[1] = sub_26A90;
  return ResponseGenerating.makeSuccessOutput(resultModel:conversationModel:dialog:outputGenerationManifest:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_266C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_26A90;
  return ResponseGenerating.makeSuccessOutput(resultModel:dialog:outputGenerationManifest:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_2679C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_26A90;
  return ResponseGenerating.makeSuccessOutput(conversationModel:dialog:outputGenerationManifest:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_26878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_26A90;
  return ResponseGenerating.makeSuccessOutput(dialog:outputGenerationManifest:)(a1, a2, a3, a4, a5);
}

uint64_t sub_26944()
{
  return sub_1AB260();
}

uint64_t sub_2695C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_202770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_269C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_202770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_26A2C(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_202770);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for WellnessCATs()
{
  uint64_t result = qword_202778;
  if (!qword_202778) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_26ADC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_26B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_201E28);
  __chkstk_darwin(v4 - 8);
  sub_E548();
  uint64_t v7 = v6 - v5;
  sub_2694(&qword_2027C8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1AF720;
  os_log_type_t v9 = (uint64_t *)(v8 + 48);
  *(void *)(v8 + 32) = 0x6570795461746164;
  *(void *)(v8 + 40) = 0xE800000000000000;
  sub_26EFC(a1, v7, &qword_201E28);
  uint64_t v10 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v10) == 1)
  {
    sub_24ED0(v7, &qword_201E28);
    *(_OWORD *)os_log_type_t v9 = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
  }
  else
  {
    *(void *)(v8 + 72) = v10;
    uint64_t v11 = sub_B5B0(v9);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v11, v7, v10);
  }
  *(void *)(v8 + 80) = 7368801;
  *(void *)(v8 + 88) = 0xE300000000000000;
  if (a2)
  {
    uint64_t v12 = sub_1AC1C0();
    uint64_t v13 = a2;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    *(void *)(v8 + 104) = 0;
    *(void *)(v8 + 112) = 0;
  }
  *(void *)(v8 + 96) = v13;
  *(void *)(v8 + 120) = v12;
  swift_retain();
  sub_1AC190();
  return swift_bridgeObjectRelease();
}

uint64_t sub_26CE0()
{
  return sub_1AC190();
}

uint64_t sub_26D04(uint64_t a1, uint64_t a2)
{
  return sub_26D58(a1, a2);
}

uint64_t sub_26D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC250();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_E548();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_2694(&qword_201E20);
  __chkstk_darwin(v9 - 8);
  sub_E548();
  sub_26EFC(a1, v11 - v10, &qword_201E20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  uint64_t v12 = sub_1AC180();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  sub_24ED0(a1, &qword_201E20);
  return v12;
}

uint64_t sub_26EC4()
{
  uint64_t v0 = sub_1AC1B0();

  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_26EF4()
{
  return type metadata accessor for WellnessCATs();
}

uint64_t sub_26EFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_2694(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

BOOL sub_26F64(uint64_t a1)
{
  sub_1AB420();
  sub_52C4();
  uint64_t v59 = v3;
  uint64_t v60 = v2;
  __chkstk_darwin(v2);
  sub_E548();
  uint64_t v61 = v5 - v4;
  sub_1AB3F0();
  sub_52C4();
  __chkstk_darwin(v6);
  sub_E548();
  uint64_t v7 = sub_1AC800();
  sub_52C4();
  uint64_t v9 = v8;
  uint64_t v11 = __chkstk_darwin(v10);
  char v58 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  char v54 = (char *)&v50 - v14;
  __chkstk_darwin(v13);
  uint64_t v15 = sub_1AC7D0();
  sub_A340();
  uint64_t v16 = *(void *)(v9 + 16);
  uint64_t v56 = v9 + 16;
  uint64_t v57 = v15;
  uint64_t v55 = v16;
  sub_E524();
  v17();
  sub_E524();
  v18();
  uint64_t v19 = sub_1AC7F0();
  os_log_type_t v20 = sub_1ACF50();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v53 = v7;
    os_log_type_t v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v51 = v9;
    v63[0] = v23;
    uint64_t v52 = a1;
    *(_DWORD *)os_log_type_t v22 = 136315138;
    char v50 = v22 + 4;
    sub_291C8((unint64_t *)&qword_202010, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v24 = sub_1AD2C0();
    uint64_t v62 = sub_4A278(v24, v25, v63);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v26 = sub_2931C();
    v27(v26);
    _os_log_impl(&def_342E4, v19, v20, "LoggingCorrectionsFlow on(correction:) for input: %s", v22, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v28 = v51;
  }
  else
  {
    uint64_t v29 = sub_2931C();
    v30(v29);

    uint64_t v28 = v9;
  }
  uint64_t v31 = *(void (**)(void))(v28 + 8);
  sub_292F0();
  v31();
  uint64_t v32 = v61;
  sub_1AB3E0();
  int v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 88))(v32, v60);
  int v34 = enum case for Parse.uso(_:);
  if (v33 == enum case for Parse.uso(_:))
  {
    uint64_t v35 = sub_29334();
    v36(v35);
    sub_A340();
    sub_E524();
    v37();
    id v38 = sub_1AC7F0();
    os_log_type_t v39 = sub_1ACF50();
    if (os_log_type_enabled(v38, v39))
    {
      *(_WORD *)sub_292A0() = 0;
      sub_29348(&def_342E4, v40, v41, "LoggingCorrectionsFlow got USO parse...");
      sub_A1F0();
    }

    sub_292F0();
    v31();
  }
  else
  {
    sub_A340();
    sub_E524();
    v42();
    uint64_t v43 = sub_1AC7F0();
    os_log_type_t v44 = sub_1ACF50();
    if (os_log_type_enabled(v43, v44))
    {
      *(_WORD *)sub_292A0() = 0;
      sub_29348(&def_342E4, v45, v46, "LoggingCorrectionsFlow encountered non-uso parse. Not handling.");
      sub_A1F0();
    }

    sub_292F0();
    v31();
    uint64_t v47 = sub_29334();
    v48(v47);
  }
  return v33 == v34;
}

uint64_t sub_2742C()
{
  uint64_t v0 = sub_1AC800();
  sub_52C4();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_E548();
  uint64_t v6 = v5 - v4;
  sub_1AC7D0();
  sub_A340();
  sub_E524();
  v7();
  uint64_t v8 = sub_1AC7F0();
  os_log_type_t v9 = sub_1ACF50();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)sub_292A0();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&def_342E4, v8, v9, "LoggingCorrectionsFlow on(input:) - This is unexpected", v10, 2u);
    sub_A1F0();
  }

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
  return 0;
}

uint64_t sub_2754C()
{
  sub_A364();
  v1[12] = v2;
  v1[13] = v0;
  uint64_t v3 = sub_1AC800();
  v1[14] = v3;
  sub_A19C(v3);
  v1[15] = v4;
  v1[16] = sub_A220();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_275F0()
{
  uint64_t v1 = v0[13];
  if (*(unsigned char *)(v1 + 16))
  {
    if (*(unsigned char *)(v1 + 16) == 1)
    {
      sub_1AC7D0();
      sub_A340();
      uint64_t v2 = sub_292B8();
      v3(v2);
      uint64_t v4 = (void *)sub_1AC7F0();
      os_log_type_t v5 = sub_1ACF50();
      if (sub_29300(v5))
      {
        uint64_t v6 = (_WORD *)sub_292A0();
        sub_29368(v6);
        sub_A7FC(&def_342E4, v7, v8, "LoggingCorrectionsFlow Execute - Correcting");
        sub_A1F0();
      }
      uint64_t v9 = v0[17];
      uint64_t v10 = v0[14];
      uint64_t v11 = v0[15];

      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      uint64_t v12 = (void *)swift_task_alloc();
      v0[19] = v12;
      *uint64_t v12 = v0;
      v12[1] = sub_2793C;
      return sub_27B0C();
    }
    sub_1AC7D0();
    sub_A340();
    uint64_t v25 = sub_292B8();
    v26(v25);
    uint64_t v27 = (void *)sub_1AC7F0();
    os_log_type_t v28 = sub_1ACF50();
    if (sub_29300(v28))
    {
      uint64_t v29 = (_WORD *)sub_292A0();
      sub_29368(v29);
      sub_A7FC(&def_342E4, v30, v31, "LoggingCorrectionsFlow Execute - Done");
      sub_A1F0();
    }
    uint64_t v33 = v0[15];
    uint64_t v32 = v0[16];
    uint64_t v34 = v0[14];

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    sub_1AB140();
  }
  else
  {
    uint64_t v14 = v0[18];
    uint64_t v15 = v0[14];
    uint64_t v16 = v0[15];
    uint64_t v17 = sub_1AC7D0();
    sub_A340();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, v17, v15);
    uint64_t v18 = sub_1AC7F0();
    os_log_type_t v19 = sub_1ACF50();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = (uint8_t *)sub_292A0();
      *(_WORD *)os_log_type_t v20 = 0;
      _os_log_impl(&def_342E4, v18, v19, "LoggingCorrectionsFlow Execute - Ready", v20, 2u);
      sub_A1F0();
    }
    uint64_t v21 = v0[18];
    uint64_t v22 = v0[14];
    uint64_t v23 = v0[15];
    uint64_t v24 = v0[13];

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    *(unsigned char *)(v1 + 16) = 1;
    v0[11] = v24;
    type metadata accessor for MedsLoggingCorrectionsFlow();
    sub_291C8(&qword_2029B0, (void (*)(uint64_t))type metadata accessor for MedsLoggingCorrectionsFlow);
    sub_1AB110();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v35();
}

uint64_t sub_2793C()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_27A04()
{
  sub_A364();
  *(unsigned char *)(*(void *)(v0 + 104) + 16) = 2;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v1();
}

uint64_t sub_27A7C()
{
  return sub_1AAF80();
}

uint64_t sub_27B0C()
{
  sub_A364();
  v1[76] = v0;
  v1[75] = v2;
  uint64_t v3 = sub_1AB0A0();
  v1[77] = v3;
  sub_A19C(v3);
  v1[78] = v4;
  v1[79] = sub_A220();
  v1[80] = swift_task_alloc();
  uint64_t v5 = sub_1AB3D0();
  v1[81] = v5;
  sub_A19C(v5);
  v1[82] = v6;
  v1[83] = swift_task_alloc();
  uint64_t v7 = sub_1AB330();
  v1[84] = v7;
  sub_A19C(v7);
  v1[85] = v8;
  v1[86] = swift_task_alloc();
  uint64_t v9 = sub_1AC800();
  v1[87] = v9;
  sub_A19C(v9);
  v1[88] = v10;
  v1[89] = sub_A220();
  v1[90] = swift_task_alloc();
  v1[91] = swift_task_alloc();
  v1[92] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_27C6C()
{
  uint64_t v1 = v0[92];
  uint64_t v2 = v0[88];
  uint64_t v3 = (uint8_t *)v0[87];
  id v4 = [objc_allocWithZone((Class)sub_1AC4A0()) init];
  v0[93] = v4;
  uint64_t v5 = swift_bridgeObjectRetain();
  sub_2915C(v5, v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_1AC7D0();
  v0[94] = v6;
  sub_A340();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint8_t *))(v2 + 16);
  v0[95] = v7;
  v0[96] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v1, v6, v3);
  uint64_t v8 = sub_1AC7F0();
  os_log_type_t v9 = sub_1ACF50();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (_WORD *)sub_292A0();
    sub_29368(v10);
    _os_log_impl(&def_342E4, v8, v9, "LoggingCorrectionsFlow doCorrection - Undoing", v3, 2u);
    sub_A1F0();
  }
  uint64_t v11 = v0[92];
  uint64_t v12 = v0[88];
  uint64_t v13 = v0[87];
  uint64_t v14 = v0[76];

  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v0[97] = v15;
  v0[98] = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v15(v11, v13);
  uint64_t v16 = *(void **)(v14 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_intentHandler);
  v0[2] = v0;
  v0[7] = v0 + 72;
  v0[3] = sub_27EB4;
  uint64_t v17 = swift_continuation_init();
  v0[50] = _NSConcreteStackBlock;
  v0[51] = 0x40000000;
  v0[52] = sub_6AA8;
  v0[53] = &unk_1F5BE8;
  v0[54] = v17;
  [v16 handleUndoMeds:v4 completion:v0 + 50];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_27EB4()
{
  sub_A364();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_27F84()
{
  uint64_t v38 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 760);
  uint64_t v2 = *(void *)(v0 + 752);
  uint64_t v3 = *(void *)(v0 + 728);
  uint64_t v4 = *(void *)(v0 + 696);
  uint64_t v5 = *(void **)(v0 + 576);
  *(void *)(v0 + 792) = v5;
  sub_A340();
  v1(v3, v2, v4);
  uint64_t v6 = v5;
  uint64_t v7 = sub_1AC7F0();
  os_log_type_t v8 = sub_1ACF50();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v9 = 138412290;
    *(void *)(v0 + 592) = v6;
    uint64_t v11 = v6;
    sub_1ACFE0();
    *uint64_t v10 = v6;

    _os_log_impl(&def_342E4, v7, v8, "LoggingCorrectionsFlow Received intent response: %@", v9, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
  }
  uint64_t v12 = (*(uint64_t (**)(void, void))(v0 + 776))(*(void *)(v0 + 728), *(void *)(v0 + 696));
  uint64_t v13 = *(uint64_t (**)(void))((char *)&stru_20.maxprot + (swift_isaMask & *v6));
  if (((uint64_t (*)(uint64_t))v13)(v12) != 4)
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 760);
    uint64_t v20 = *(void *)(v0 + 752);
    uint64_t v21 = *(void *)(v0 + 712);
    uint64_t v22 = *(void *)(v0 + 696);
    sub_A340();
    v19(v21, v20, v22);
    uint64_t v23 = v6;
    uint64_t v24 = sub_1AC7F0();
    os_log_type_t v25 = sub_1ACF60();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 776);
    uint64_t v28 = *(void *)(v0 + 712);
    uint64_t v29 = *(void *)(v0 + 696);
    if (v26)
    {
      uint64_t v36 = *(void *)(v0 + 712);
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      *(void *)(v0 + 568) = v13();
      uint64_t v31 = sub_1ACE00();
      *(void *)(v0 + 560) = sub_4A278(v31, v32, &v37);
      sub_1ACFE0();
      swift_bridgeObjectRelease();

      _os_log_impl(&def_342E4, v24, v25, "Intent handler failed with code: %s", v30, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      v27(v36, v29);
    }
    else
    {

      v27(v28, v29);
    }
    uint64_t v33 = *(void **)(v0 + 744);
    sub_9B48(*(void *)(v0 + 608) + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_provider, v0 + 240);
    sub_9BA4();
    sub_1AB120();

    sub_9BF0(v0 + 240);
    sub_29270();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_292D4();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v14 = *(void *)(v0 + 608);
  uint64_t v15 = OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_provider;
  *(void *)(v0 + 800) = OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_provider;
  sub_2E38((void *)(v14 + v15 + 80), *(void *)(v14 + v15 + 104));
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 808) = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_2842C;
  sub_292D4();
  return sub_13844C();
}

uint64_t sub_2842C(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v5 + 816) = a1;
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

void sub_28528()
{
  uint64_t v19 = (void *)v0[99];
  uint64_t v16 = (void *)v0[93];
  uint64_t v1 = v0[86];
  uint64_t v2 = v0[85];
  uint64_t v3 = v0[84];
  uint64_t v13 = v0[83];
  id v14 = (id)v0[102];
  uint64_t v17 = v0[82];
  uint64_t v18 = v0[81];
  uint64_t v4 = v0[80];
  uint64_t v5 = v0[78];
  uint64_t v6 = v0[77];
  uint64_t v7 = v0[76];
  uint64_t v15 = (void *)(v7 + v0[100]);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for CorrectionsExitValue.success(_:), v3);
  uint64_t v8 = v7 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_correctionsExitValue;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 40))(v8, v1, v3);
  swift_endAccess();
  sub_1AB070();
  sub_E524();
  v9();
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  id v10 = [v14 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_2E38(v15, v15[3]);
  v0[73] = sub_1AAF40();
  sub_1AAEF0();
  sub_1AAF70();
  sub_1AB130();
  swift_release();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v13, v18);
  sub_29270();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_292D4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_287CC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[95];
  uint64_t v2 = v0[94];
  uint64_t v3 = v0[90];
  uint64_t v4 = v0[87];
  sub_A340();
  v1(v3, v2, v4);
  uint64_t v5 = (void *)sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF60();
  if (sub_29300(v6))
  {
    uint64_t v7 = (_WORD *)sub_292A0();
    sub_29368(v7);
    sub_A7FC(&def_342E4, v8, v9, "LoggingCorrectionsFlow Error executing pattern");
    sub_A1F0();
  }
  uint64_t v10 = v0[100];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[97];
  uint64_t v17 = (void *)v0[99];
  uint64_t v18 = (void *)v0[93];
  uint64_t v12 = v0[90];
  uint64_t v13 = v0[87];
  uint64_t v14 = v0[76];

  v11(v12, v13);
  sub_9B48(v14 + v10, (uint64_t)(v0 + 10));
  sub_9BA4();
  sub_1AAF70();
  sub_9BF0((uint64_t)(v0 + 10));
  sub_1AB130();
  swift_release();

  sub_29270();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v15();
}

uint64_t sub_2897C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_correctionsExitValue;
  uint64_t v2 = sub_1AB330();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_flowConfig);
  sub_E4B8(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_provider);
  swift_unknownObjectRelease();
  sub_29210(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_correctionInput);
  return v0;
}

uint64_t sub_28A44()
{
  sub_2897C();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_28A9C()
{
  return type metadata accessor for MedsLoggingCorrectionsFlow();
}

uint64_t type metadata accessor for MedsLoggingCorrectionsFlow()
{
  uint64_t result = qword_202828;
  if (!qword_202828) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_28AEC()
{
  sub_1AB330();
  if (v0 <= 0x3F)
  {
    sub_28C00();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_28C00()
{
  if (!qword_202848)
  {
    sub_1AB3F0();
    unint64_t v0 = sub_1ACFD0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_202848);
    }
  }
}

uint64_t getEnumTagSinglePayload for MedsLoggingCorrectionsFlow.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for MedsLoggingCorrectionsFlow.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x28DACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedsLoggingCorrectionsFlow.State()
{
  return &type metadata for MedsLoggingCorrectionsFlow.State;
}

unsigned char *storeEnumTagSinglePayload for MedsLoggingCorrectionsFlow.CorrectionsTask(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x28E80);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedsLoggingCorrectionsFlow.CorrectionsTask()
{
  return &type metadata for MedsLoggingCorrectionsFlow.CorrectionsTask;
}

unint64_t sub_28EBC()
{
  unint64_t result = qword_202990;
  if (!qword_202990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202990);
  }
  return result;
}

unint64_t sub_28F0C()
{
  unint64_t result = qword_202998[0];
  if (!qword_202998[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_202998);
  }
  return result;
}

uint64_t sub_28F58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_correctionsExitValue;
  swift_beginAccess();
  uint64_t v4 = sub_1AB330();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

BOOL sub_28FE0(uint64_t a1)
{
  return sub_26F64(a1);
}

uint64_t sub_28FFC()
{
  return 0;
}

uint64_t sub_29018()
{
  return sub_27A7C();
}

uint64_t sub_2903C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24C20;
  return sub_2754C();
}

uint64_t sub_290D8()
{
  type metadata accessor for MedsLoggingCorrectionsFlow();

  return sub_1AAFB0();
}

uint64_t sub_29114()
{
  return sub_291C8(&qword_2029B0, (void (*)(uint64_t))type metadata accessor for MedsLoggingCorrectionsFlow);
}

void sub_2915C(uint64_t a1, void *a2)
{
  sub_1AC490();
  Class isa = sub_1ACEC0().super.isa;
  [a2 setMatchingMeds:isa];
}

uint64_t sub_291C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_29210(uint64_t a1)
{
  uint64_t v2 = sub_2694(qword_2029B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_29270()
{
  return swift_task_dealloc();
}

uint64_t sub_292A0()
{
  return swift_slowAlloc();
}

uint64_t sub_292B8()
{
  return v0;
}

BOOL sub_29300(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_2931C()
{
  return v0;
}

uint64_t sub_29334()
{
  return v0;
}

void sub_29348(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 2u);
}

_WORD *sub_29368(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HealthAppRestrictedFlow()
{
  return &type metadata for HealthAppRestrictedFlow;
}

uint64_t sub_29384()
{
  sub_29A4C();

  return sub_1AAF80();
}

uint64_t sub_293D8()
{
  sub_A364();
  v1[5] = v2;
  v1[6] = v0;
  uint64_t v3 = sub_1AC800();
  v1[7] = v3;
  sub_A19C(v3);
  v1[8] = v4;
  v1[9] = swift_task_alloc();
  uint64_t v5 = sub_1AB0A0();
  v1[10] = v5;
  sub_A19C(v5);
  v1[11] = v6;
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v1[14] = v7;
  sub_A19C(v7);
  v1[15] = v8;
  v1[16] = swift_task_alloc();
  return _swift_task_switch(sub_294F0, 0, 0);
}

uint64_t sub_294F0()
{
  sub_A364();
  sub_2E38((void *)(*(void *)(v0 + 48) + 40), *(void *)(*(void *)(v0 + 48) + 64));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_29590;
  return sub_9C9D0(0);
}

uint64_t sub_29590(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v8 = sub_29844;
  }
  else
  {
    *(void *)(v5 + 144) = a1;
    uint64_t v8 = sub_29690;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_29690()
{
  uint64_t v1 = (void *)v0[18];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[13];
  uint64_t v12 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];
  uint64_t v7 = v0[10];
  uint64_t v8 = (void *)v0[6];
  sub_1AB090();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v4, v7);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
  id v9 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_2E38(v8, v8[3]);
  sub_1AAF40();
  sub_1AB130();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_29844()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v4 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF60();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&def_342E4, v5, v6, "Failed to execute appRestricted pattern", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[8];
  uint64_t v8 = v0[9];
  uint64_t v10 = v0[7];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  sub_1AB140();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_299B4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_9A7C;
  return sub_293D8();
}

unint64_t sub_29A4C()
{
  unint64_t result = qword_2029D8;
  if (!qword_2029D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2029D8);
  }
  return result;
}

uint64_t sub_29A98()
{
  sub_2B35C();
  uint64_t v0 = swift_allocObject();
  sub_29B0C();
  return v0;
}

uint64_t sub_29B0C()
{
  sub_2B35C();
  memcpy((void *)(v1 + 16), v7, 0xA0uLL);
  sub_24D80(v6, v1 + 176);
  sub_24D80(v5, v1 + 216);
  *(void *)(v1 + 256) = v4;
  *(void *)(v1 + 264) = v3;
  *(void *)(v1 + 272) = v2;
  *(unsigned char *)(v1 + 280) = v0;
  return v1;
}

uint64_t sub_29B80()
{
  uint64_t v0 = sub_1AC800();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)sub_292A0();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&def_342E4, v5, v6, "In MedNameDisambiguationStrategy's actionForInput().", v7, 2u);
    sub_A1F0();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return sub_1AB0B0();
}

uint64_t sub_29CEC()
{
  sub_A364();
  v1[16] = v2;
  v1[17] = v0;
  v1[15] = v3;
  uint64_t v4 = sub_1AB0A0();
  v1[18] = v4;
  sub_A19C(v4);
  v1[19] = v5;
  v1[20] = sub_A220();
  v1[21] = swift_task_alloc();
  uint64_t v6 = sub_1AB3D0();
  v1[22] = v6;
  sub_A19C(v6);
  v1[23] = v7;
  v1[24] = swift_task_alloc();
  uint64_t v8 = sub_1AC800();
  v1[25] = v8;
  sub_A19C(v8);
  v1[26] = v9;
  v1[27] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_29DF8()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  if (sub_29300(v6))
  {
    uint64_t v7 = (uint8_t *)sub_292A0();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&def_342E4, v5, (os_log_type_t)v1, "MedNameDisambiguationStrategy: makePromptForDisambiguation", v7, 2u);
    sub_A1F0();
  }
  uint64_t v8 = v0[26];
  uint64_t v9 = v0[27];
  uint64_t v10 = v0[25];
  uint64_t v12 = v0[20];
  uint64_t v11 = v0[21];
  uint64_t v14 = v0[18];
  uint64_t v13 = v0[19];
  uint64_t v17 = v0[17];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  sub_1AB080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v11, v14);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v14);
  sub_1AB3B0();
  sub_E3FC(v17 + 56, (uint64_t)(v0 + 2));
  sub_2E38(v0 + 2, v0[5]);
  sub_2694(&qword_202BA8);
  v0[28] = sub_1AB360();
  uint64_t v18 = (uint64_t (__cdecl *)())((char *)&dword_204E70 + dword_204E70);
  swift_retain();
  uint64_t v15 = (void *)swift_task_alloc();
  v0[29] = v15;
  void *v15 = v0;
  v15[1] = sub_2A068;
  return v18();
}

uint64_t sub_2A068()
{
  sub_A364();
  sub_A1B4();
  uint64_t v2 = *v1;
  sub_A304();
  *uint64_t v3 = v2;
  *(void *)(v5 + 240) = v4;
  *(void *)(v5 + 248) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_2A168()
{
  uint64_t v1 = (void *)v0[30];
  uint64_t v2 = v0[17];
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2));
  id v3 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_E3FC(v2 + 176, (uint64_t)(v0 + 7));
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  sub_2E38(v0 + 7, v4);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[32] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_2A290;
  uint64_t v7 = v0[30];
  uint64_t v8 = v0[24];
  uint64_t v9 = v0[15];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v9, v7, v8, v4, v5);
}

uint64_t sub_2A290()
{
  sub_A364();
  sub_A1B4();
  uint64_t v2 = *v1;
  sub_A304();
  *id v3 = v2;
  *(void *)(v4 + 264) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_2A370()
{
  (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_2A420()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_2A4F0()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_2A5B0()
{
  sub_A364();
  v0[58] = v1;
  v0[59] = v2;
  uint64_t v3 = sub_1AB410();
  v0[60] = v3;
  sub_A19C(v3);
  v0[61] = v4;
  v0[62] = swift_task_alloc();
  uint64_t v5 = sub_1AB420();
  v0[63] = v5;
  sub_A19C(v5);
  v0[64] = v6;
  v0[65] = sub_A220();
  v0[66] = swift_task_alloc();
  uint64_t v7 = sub_1AC800();
  v0[67] = v7;
  sub_A19C(v7);
  v0[68] = v8;
  v0[69] = sub_A220();
  v0[70] = swift_task_alloc();
  v0[71] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_2A6C8()
{
  uint64_t v4 = *(void *)(v0 + 568);
  uint64_t v5 = *(void *)(v0 + 544);
  uint64_t v6 = *(uint8_t **)(v0 + 536);
  uint64_t v7 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v5 + 16))(v4, v7, v6);
  uint64_t v8 = sub_1AC7F0();
  os_log_type_t v9 = sub_1ACF50();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v6 = (uint8_t *)sub_292A0();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&def_342E4, v8, v9, "MedNameDisambiguationStrategy: parseDisambiguationResponse", v6, 2u);
    sub_A1F0();
  }
  uint64_t v10 = *(void *)(v0 + 568);
  uint64_t v11 = *(void *)(v0 + 544);
  sub_2B39C();

  (*(void (**)(uint64_t, uint8_t *))(v11 + 8))(v10, v6);
  sub_1AB3E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v7, v2);
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t))(v3 + 88);
  uint64_t v12 = v3 + 88;
  if (v13(v1, v2) == enum case for Parse.directInvocation(_:))
  {
    uint64_t v14 = *(void *)(v0 + 520);
    uint64_t v16 = *(void *)(v0 + 488);
    uint64_t v15 = *(void *)(v0 + 496);
    uint64_t v17 = *(void *)(v0 + 480);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 512) + 96))(v14, *(void *)(v0 + 504));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v15, v14, v17);
    uint64_t v18 = sub_1AB400();
    if (v18)
    {
      sub_19DA50(0x656C756465686373, 0xEA00000000004449, v18, (_OWORD *)(v0 + 304));
      swift_bridgeObjectRelease();
      if (*(void *)(v0 + 328))
      {
        int v19 = swift_dynamicCast();
        if (v19) {
          uint64_t v20 = *(void *)(v0 + 440);
        }
        else {
          uint64_t v20 = 0;
        }
        if (v19) {
          uint64_t v21 = *(void *)(v0 + 448);
        }
        else {
          uint64_t v21 = 0;
        }
LABEL_17:
        uint64_t v31 = sub_1AB400();
        if (v31)
        {
          sub_19DA50(0x697461636964656DLL, 0xEC00000044496E6FLL, v31, (_OWORD *)(v0 + 240));
          swift_bridgeObjectRelease();
          if (*(void *)(v0 + 264))
          {
            if (swift_dynamicCast())
            {
              uint64_t v32 = *(void *)(v0 + 496);
              uint64_t v33 = *(void *)(v0 + 416);
              uint64_t v67 = *(void *)(v0 + 408);
              if (sub_1AB400())
              {
                uint64_t v34 = sub_2B340();
                sub_19DA50(v34, 0xE800000000000000, v32, v35);
                swift_bridgeObjectRelease();
                if (*(void *)(v0 + 296))
                {
                  int v36 = swift_dynamicCast();
                  if (v36) {
                    uint64_t v37 = *(void *)(v0 + 456);
                  }
                  else {
                    uint64_t v37 = 0;
                  }
                  char v38 = v36 ^ 1;
LABEL_37:
                  uint64_t v53 = *(void *)(v0 + 496);
                  uint64_t v71 = v33;
                  if (sub_1AB400())
                  {
                    uint64_t v54 = sub_2B340();
                    sub_19DA50(v54, 0xEC00000074696E55, v53, v55);
                    swift_bridgeObjectRelease();
                    if (*(void *)(v0 + 232))
                    {
                      uint64_t v56 = v20;
                      int v57 = swift_dynamicCast();
                      uint64_t v58 = *(void *)(v0 + 424);
                      if (v57)
                      {
                        uint64_t v59 = *(void *)(v0 + 432);
                      }
                      else
                      {
                        uint64_t v58 = 0;
                        uint64_t v59 = 0;
                      }
                      goto LABEL_44;
                    }
                  }
                  else
                  {
                    *(_OWORD *)(v0 + 208) = 0u;
                    *(_OWORD *)(v0 + 224) = 0u;
                  }
                  uint64_t v56 = v20;
                  sub_2B2A0(v0 + 208);
                  uint64_t v58 = 0;
                  uint64_t v59 = 0;
LABEL_44:
                  uint64_t v60 = v67;
                  char v61 = v38;
                  uint64_t v69 = *(void *)(v0 + 528);
                  uint64_t v63 = *(void *)(v0 + 504);
                  uint64_t v62 = *(void *)(v0 + 512);
                  uint64_t v64 = *(void *)(v0 + 488);
                  uint64_t v65 = *(void *)(v0 + 496);
                  uint64_t v66 = *(void *)(v0 + 480);
                  *(void *)(v0 + 80) = v56;
                  *(void *)(v0 + 88) = v21;
                  *(void *)(v0 + 96) = v60;
                  *(void *)(v0 + 104) = v71;
                  *(void *)(v0 + 112) = v37;
                  *(unsigned char *)(v0 + 120) = v61;
                  *(void *)(v0 + 128) = v58;
                  *(void *)(v0 + 136) = v59;
                  sub_2694(&qword_202B98);
                  sub_1AB340();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v66);
                  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v69, v63);
                  goto LABEL_32;
                }
              }
              else
              {
                *(_OWORD *)(v0 + 272) = 0u;
                *(_OWORD *)(v0 + 288) = 0u;
              }
              sub_2B2A0(v0 + 272);
              uint64_t v37 = 0;
              char v38 = 1;
              goto LABEL_37;
            }
            swift_bridgeObjectRelease();
            goto LABEL_29;
          }
        }
        else
        {
          *(_OWORD *)(v0 + 240) = 0u;
          *(_OWORD *)(v0 + 256) = 0u;
        }
        swift_bridgeObjectRelease();
        sub_2B2A0(v0 + 240);
LABEL_29:
        sub_2B378();
        uint64_t v39 = sub_2B304();
        v40(v39);
        uint64_t v41 = (void *)sub_1AC7F0();
        os_log_type_t v42 = sub_1ACF50();
        if (sub_29300(v42))
        {
          *(_WORD *)sub_292A0() = 0;
          sub_2B3B0(&def_342E4, v43, v44, "error in parseDisambiguationResponse for medication name; could not unpack directInvocation.");
          sub_A1F0();
        }
        uint64_t v45 = *(void *)(v0 + 512);
        uint64_t v68 = *(void *)(v0 + 504);
        uint64_t v70 = *(void *)(v0 + 528);
        uint64_t v46 = *(void *)(v0 + 488);
        uint64_t v47 = *(void *)(v0 + 496);
        uint64_t v48 = *(void *)(v0 + 480);

        uint64_t v49 = sub_2B324();
        v50(v49);
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = 0;
        *(void *)(v0 + 40) = 0xE000000000000000;
        *(void *)(v0 + 48) = 0;
        *(unsigned char *)(v0 + 56) = 1;
        *(void *)(v0 + 64) = 0;
        *(void *)(v0 + 72) = 0;
        sub_2694(&qword_202B98);
        sub_1AB340();
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v70, v68);
        goto LABEL_32;
      }
    }
    else
    {
      *(_OWORD *)(v0 + 304) = 0u;
      *(_OWORD *)(v0 + 320) = 0u;
    }
    sub_2B2A0(v0 + 304);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    goto LABEL_17;
  }
  sub_2B378();
  uint64_t v22 = sub_2B304();
  v23(v22);
  uint64_t v24 = (void *)sub_1AC7F0();
  os_log_type_t v25 = sub_1ACF50();
  if (sub_29300(v25))
  {
    *(_WORD *)sub_292A0() = 0;
    sub_2B3B0(&def_342E4, v26, v27, "error in parsing disambiguation response for medication name.");
    sub_A1F0();
  }
  sub_2B39C();

  uint64_t v28 = sub_2B324();
  v29(v28);
  *(void *)(v0 + 144) = 0;
  *(void *)(v0 + 152) = 0;
  *(void *)(v0 + 160) = 0;
  *(void *)(v0 + 168) = 0xE000000000000000;
  *(void *)(v0 + 176) = 0;
  *(unsigned char *)(v0 + 184) = 1;
  *(void *)(v0 + 192) = 0;
  *(void *)(v0 + 200) = 0;
  sub_2694(&qword_202B98);
  sub_1AB340();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v30(v7, v2);
  v30(v1, v2);
LABEL_32:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v51 = *(uint64_t (**)(void))(v0 + 8);
  return v51();
}

uint64_t sub_2AD94()
{
  sub_E4B8(v0 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 176);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 216);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2ADCC()
{
  sub_2AD94();

  return _swift_deallocClassInstance(v0, 281, 7);
}

uint64_t type metadata accessor for MedNameDisambiguationStrategy()
{
  return self;
}

uint64_t sub_2AE24()
{
  return sub_29B7C();
}

uint64_t sub_2AE3C()
{
  return sub_29B80();
}

uint64_t sub_2AE54()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2B300;
  return sub_2A5B0();
}

uint64_t sub_2AEF4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2B300;
  return sub_29CEC();
}

uint64_t sub_2AF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for MedNameDisambiguationStrategy();
  *uint64_t v8 = v4;
  v8[1] = sub_2B300;
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t sub_2B060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for MedNameDisambiguationStrategy();
  *uint64_t v8 = v4;
  v8[1] = sub_2B300;
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t sub_2B124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_9A7C;
  return PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse()(a1, a2, a3);
}

uint64_t sub_2B1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_2B300;
  return PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, a3, a4);
}

uint64_t sub_2B2A0(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_202BA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2B304()
{
  return v0;
}

uint64_t sub_2B324()
{
  return v0;
}

uint64_t sub_2B340()
{
  return 0x6874676E65727473;
}

uint64_t sub_2B378()
{
  return swift_beginAccess();
}

void sub_2B3B0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t OxygenSaturationQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2EF60(v1, a1, &qword_2022C8);
}

uint64_t OxygenSaturationQueryModel.appPunchout.setter(uint64_t a1)
{
  return sub_2B7FC(a1, v1, &qword_2022C8);
}

uint64_t HeightQueryModel.height.getter()
{
  uint64_t Model = type metadata accessor for HeightQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 20));
}

uint64_t type metadata accessor for HeightQueryModel()
{
  uint64_t result = qword_202C50;
  if (!qword_202C50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void HeightQueryModel.height.setter()
{
  uint64_t v0 = sub_2EFD4();
  sub_2EFC0(*(int *)(v0 + 20));
}

uint64_t (*HeightQueryModel.height.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t HeightQueryModel.maxHeight.getter()
{
  uint64_t Model = type metadata accessor for HeightQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 24));
}

void HeightQueryModel.maxHeight.setter()
{
  uint64_t v0 = sub_2EFD4();
  sub_2EFC0(*(int *)(v0 + 24));
}

uint64_t (*HeightQueryModel.maxHeight.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t HeightQueryModel.minHeight.getter()
{
  uint64_t Model = type metadata accessor for HeightQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 28));
}

void HeightQueryModel.minHeight.setter()
{
  uint64_t v0 = sub_2EFD4();
  sub_2EFC0(*(int *)(v0 + 28));
}

uint64_t (*HeightQueryModel.minHeight.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t HeightQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for HeightQueryModel();
  return sub_2EF60(v1 + *(int *)(Model + 32), a1, &qword_201E28);
}

uint64_t HeightQueryModel.dateLabel.setter()
{
  uint64_t v2 = sub_2EFA8();
  return sub_2B7FC(v0, v1 + *(int *)(v2 + 32), &qword_201E28);
}

uint64_t (*HeightQueryModel.dateLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t HeightQueryModel.isDifferenceNegligible.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for HeightQueryModel() + 36));
}

uint64_t HeightQueryModel.isDifferenceNegligible.setter(char a1)
{
  uint64_t result = type metadata accessor for HeightQueryModel();
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*HeightQueryModel.isDifferenceNegligible.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t HeightQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for HeightQueryModel();
  return sub_2EF60(v1 + *(int *)(Model + 40), a1, &qword_2022D0);
}

uint64_t HeightQueryModel.snippetHeaderModel.setter()
{
  uint64_t v2 = sub_2EFA8();
  return sub_2B7FC(v0, v1 + *(int *)(v2 + 40), &qword_2022D0);
}

uint64_t sub_2B7FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2EFF8(a1, a2, a3);
  sub_20688();
  uint64_t v4 = sub_2F03C();
  v5(v4);
  return v3;
}

uint64_t (*HeightQueryModel.snippetHeaderModel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t HeightQueryModel.minHeightSymbolic.getter()
{
  type metadata accessor for HeightQueryModel();
  sub_2F094();
  return v0;
}

uint64_t HeightQueryModel.minHeightSymbolic.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(sub_2EFD4() + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = v3;
  v5[1] = a2;
  return result;
}

uint64_t (*HeightQueryModel.minHeightSymbolic.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t HeightQueryModel.maxHeightSymbolic.getter()
{
  type metadata accessor for HeightQueryModel();
  sub_2F094();
  return v0;
}

uint64_t HeightQueryModel.maxHeightSymbolic.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(sub_2EFD4() + 48));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = v3;
  v5[1] = a2;
  return result;
}

uint64_t (*HeightQueryModel.maxHeightSymbolic.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t HeightQueryModel.heightSymbolic.getter()
{
  type metadata accessor for HeightQueryModel();
  sub_2F094();
  return v0;
}

uint64_t HeightQueryModel.heightSymbolic.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(sub_2EFD4() + 52));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = v3;
  v5[1] = a2;
  return result;
}

uint64_t (*HeightQueryModel.heightSymbolic.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t sub_2BAA0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v62 = a8;
  uint64_t v61 = a5;
  uint64_t v59 = a3;
  uint64_t v63 = a12;
  uint64_t v64 = a10;
  uint64_t v65 = a11;
  uint64_t v66 = a7;
  BOOL v55 = (a2 & 1) == 0;
  BOOL v56 = (a4 & 1) == 0;
  int v57 = a4;
  BOOL v60 = (a6 & 1) == 0;
  uint64_t v16 = sub_2694(&qword_2022C8);
  uint64_t v17 = sub_53D4(v16);
  __chkstk_darwin(v17);
  int v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_1AAD90();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a9, 1, 1, v58);
  uint64_t Model = (int *)type metadata accessor for HeightQueryModel();
  uint64_t v21 = a9 + Model[8];
  uint64_t v22 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v21, 1, 1, v22);
  uint64_t v54 = a9 + Model[10];
  type metadata accessor for SnippetHeaderModel();
  uint64_t v23 = sub_2F02C();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v23, v24, v25, v26);
  uint64_t v27 = (uint64_t *)(a9 + Model[11]);
  *uint64_t v27 = 0;
  v27[1] = 0;
  uint64_t v28 = (uint64_t *)(a9 + Model[12]);
  *uint64_t v28 = 0;
  v28[1] = 0;
  uint64_t v29 = (uint64_t *)(a9 + Model[13]);
  BOOL v30 = (a1 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v55 && v30) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = a1;
  }
  char v32 = a2 | v30;
  *uint64_t v29 = 0;
  v29[1] = 0;
  uint64_t v33 = a9 + Model[5];
  *(void *)uint64_t v33 = v31;
  *(unsigned char *)(v33 + 8) = v32 & 1;
  uint64_t v34 = v59;
  BOOL v35 = (v59 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v56 && v35) {
    uint64_t v34 = 0;
  }
  char v36 = v57 | v35;
  uint64_t v37 = a9 + Model[6];
  *(void *)uint64_t v37 = v34;
  *(unsigned char *)(v37 + 8) = v36 & 1;
  uint64_t v38 = v61;
  BOOL v39 = (v61 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v60 && v39) {
    uint64_t v38 = 0;
  }
  char v40 = a6 | v39;
  uint64_t v41 = a9 + Model[7];
  *(void *)uint64_t v41 = v38;
  *(unsigned char *)(v41 + 8) = v40 & 1;
  *(unsigned char *)(a9 + Model[9]) = v62;
  sub_2EEC4(v66, v21, &qword_201E28);
  sub_2BDBC(v65);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0, 1, v58);
  sub_2B7FC((uint64_t)v19, a9, &qword_2022C8);
  uint64_t v42 = v63;
  sub_2EEC4(v63, v54, &qword_2022D0);
  uint64_t v43 = v64;
  uint64_t v44 = sub_2BF84(*(void *)v41, *(unsigned char *)(v41 + 8), v64);
  uint64_t v46 = v45;
  swift_bridgeObjectRelease();
  *uint64_t v27 = v44;
  v27[1] = v46;
  uint64_t v47 = sub_2BF84(*(void *)v37, *(unsigned char *)(v37 + 8), v43);
  uint64_t v49 = v48;
  swift_bridgeObjectRelease();
  *uint64_t v28 = v47;
  v28[1] = v49;
  uint64_t v50 = sub_2BF84(*(void *)v33, *(unsigned char *)(v33 + 8), v43);
  uint64_t v52 = v51;
  sub_2EF0C(v42, &qword_2022D0);
  sub_2EF0C(v65, &qword_201E20);
  sub_2EF0C(v43, &qword_201E28);
  sub_2EF0C(v66, &qword_201E28);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v29 = v50;
  v29[1] = v52;
  return result;
}

uint64_t sub_2BDBC(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201E20);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AAB10();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2EF60(a1, (uint64_t)v4, &qword_201E20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_2EF0C((uint64_t)v4, &qword_201E20);
    return sub_1AAD80();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_1AAAD0();
    sub_1AAD80();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_2BF84(uint64_t a1, char a2, uint64_t a3)
{
  v22[1] = a1;
  uint64_t v5 = sub_2694(&qword_201E28);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v22 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v22 - v12;
  uint64_t v14 = sub_1AC1E0();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = 0;
  if ((a2 & 1) == 0)
  {
    sub_2EF60(a3, (uint64_t)v13, &qword_201E28);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v14) == 1)
    {
      uint64_t v19 = (uint64_t)v13;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
      sub_1ABEF0();
      swift_allocObject();
      sub_1ABEE0();
      sub_1AC020();
      swift_release();
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v11, v17, v14);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v14);
      sub_1AC010();
      swift_release();
      sub_2EF0C((uint64_t)v11, &qword_201E28);
      sub_1AC000();
      swift_release();
      sub_1ABF00();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v14) != 1)
      {
        uint64_t v18 = sub_1AC1D0();
        swift_release();
        uint64_t v20 = *(void (**)(char *, uint64_t))(v15 + 8);
        v20(v17, v14);
        v20(v8, v14);
        return v18;
      }
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      swift_release();
      uint64_t v19 = (uint64_t)v8;
    }
    sub_2EF0C(v19, &qword_201E28);
    return 0;
  }
  return v18;
}

uint64_t sub_2C290(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x746867696568 && a2 == 0xE600000000000000;
    if (v6 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x686769654878616DLL && a2 == 0xE900000000000074;
      if (v7 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x68676965486E696DLL && a2 == 0xE900000000000074;
        if (v8 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL;
          if (v9 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else if (a1 == 0xD000000000000016 && a2 == 0x80000000001B7890 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B78B0 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else if (a1 == 0xD000000000000011 && a2 == 0x80000000001B78D0 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 7;
          }
          else if (a1 == 0xD000000000000011 && a2 == 0x80000000001B78F0 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 8;
          }
          else if (a1 == 0x7953746867696568 && a2 == 0xEE0063696C6F626DLL)
          {
            swift_bridgeObjectRelease();
            return 9;
          }
          else
          {
            char v11 = sub_1AD2F0();
            swift_bridgeObjectRelease();
            if (v11) {
              return 9;
            }
            else {
              return 10;
            }
          }
        }
      }
    }
  }
}

uint64_t sub_2C664()
{
  return 10;
}

uint64_t sub_2C66C(char a1)
{
  uint64_t result = 0xD000000000000016;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x746867696568;
      break;
    case 2:
      unsigned int v3 = 1215848813;
      goto LABEL_6;
    case 3:
      unsigned int v3 = 1215195501;
LABEL_6:
      uint64_t result = v3 | 0x6867696500000000;
      break;
    case 4:
      uint64_t result = 0x6562614C65746164;
      break;
    case 5:
      return result;
    case 6:
      uint64_t result = 0xD000000000000012;
      break;
    case 7:
    case 8:
      uint64_t result = 0xD000000000000011;
      break;
    case 9:
      uint64_t result = 0x7953746867696568;
      break;
    default:
      uint64_t result = 0x68636E7550707061;
      break;
  }
  return result;
}

uint64_t sub_2C7B8()
{
  return sub_2C66C(*v0);
}

uint64_t sub_2C7C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2C290(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2C7E8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2C664();
  *a1 = result;
  return result;
}

uint64_t sub_2C810(uint64_t a1)
{
  unint64_t v2 = sub_2CBA8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2C84C(uint64_t a1)
{
  unint64_t v2 = sub_2CBA8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t HeightQueryModel.encode(to:)(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_2694(&qword_202BB0);
  sub_52C4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_2F014();
  sub_2E38(a1, a1[3]);
  sub_2CBA8();
  sub_1AD3B0();
  v23[7] = 0;
  sub_1AAD90();
  sub_2D38C(&qword_202BC0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  sub_1AD270();
  if (!v2)
  {
    uint64_t Model = (int *)type metadata accessor for HeightQueryModel();
    sub_2EFEC(v4 + Model[5]);
    v23[6] = 1;
    sub_2F078();
    sub_2EFEC(v4 + Model[6]);
    v23[5] = 2;
    sub_2F078();
    sub_2EFEC(v4 + Model[7]);
    v23[4] = 3;
    sub_2F078();
    v23[3] = 4;
    sub_1AC1E0();
    sub_2D38C(&qword_202BC8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    sub_2F0B0();
    v23[2] = 5;
    sub_1AD290();
    v23[1] = 6;
    type metadata accessor for SnippetHeaderModel();
    sub_2D38C(&qword_202BD0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_2F0B0();
    char v11 = (uint64_t *)(v4 + Model[11]);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    v23[0] = 7;
    sub_2F05C(v12, v13, (uint64_t)v23);
    uint64_t v14 = (uint64_t *)(v4 + Model[12]);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    char v22 = 8;
    sub_2F05C(v15, v16, (uint64_t)&v22);
    uint64_t v17 = (uint64_t *)(v4 + Model[13]);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    char v21 = 9;
    sub_2F05C(v18, v19, (uint64_t)&v21);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
}

unint64_t sub_2CBA8()
{
  unint64_t result = qword_202BB8;
  if (!qword_202BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202BB8);
  }
  return result;
}

uint64_t HeightQueryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v4 = sub_2694(&qword_2022D0);
  uint64_t v5 = sub_53D4(v4);
  __chkstk_darwin(v5);
  sub_53E0();
  uint64_t v65 = v6;
  uint64_t v7 = sub_2694(&qword_201E28);
  uint64_t v8 = sub_53D4(v7);
  __chkstk_darwin(v8);
  sub_53E0();
  uint64_t v68 = v9;
  uint64_t v10 = sub_2694(&qword_2022C8);
  uint64_t v11 = sub_53D4(v10);
  __chkstk_darwin(v11);
  sub_53E0();
  uint64_t v69 = v12;
  uint64_t v72 = sub_2694(&qword_202BD8);
  sub_52C4();
  uint64_t v70 = v13;
  __chkstk_darwin(v14);
  sub_2F014();
  uint64_t Model = (int *)type metadata accessor for HeightQueryModel();
  sub_20688();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_1AAD90();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v18, 1, 1, v67);
  uint64_t v19 = &v18[Model[5]];
  *(void *)uint64_t v19 = 0;
  v19[8] = 1;
  uint64_t v20 = &v18[Model[6]];
  *(void *)uint64_t v20 = 0;
  v20[8] = 1;
  char v21 = &v18[Model[7]];
  *(void *)char v21 = 0;
  v21[8] = 1;
  uint64_t v22 = (uint64_t)&v18[Model[8]];
  sub_1AC1E0();
  uint64_t v78 = v22;
  uint64_t v23 = sub_2F02C();
  uint64_t v66 = v24;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v23, v25, v26, v24);
  uint64_t v27 = &v18[Model[10]];
  uint64_t v28 = type metadata accessor for SnippetHeaderModel();
  uint64_t v77 = (uint64_t)v27;
  uint64_t v29 = sub_2F02C();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v29, v30, v31, v28);
  char v32 = &v18[Model[11]];
  *(void *)char v32 = 0;
  *((void *)v32 + 1) = 0;
  char v76 = v32;
  uint64_t v33 = &v18[Model[12]];
  *(void *)uint64_t v33 = 0;
  *((void *)v33 + 1) = 0;
  char v79 = v33;
  uint64_t v80 = v18;
  uint64_t v34 = &v18[Model[13]];
  *(void *)uint64_t v34 = 0;
  *((void *)v34 + 1) = 0;
  char v73 = v34;
  uint64_t v74 = a1;
  sub_2E38(a1, a1[3]);
  sub_2CBA8();
  uint64_t v71 = v2;
  uint64_t v35 = v75;
  sub_1AD3A0();
  if (v35)
  {
    uint64_t v40 = v77;
    uint64_t v39 = v78;
    uint64_t v41 = (uint64_t)v80;
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v74);
    sub_2EF0C(v41, &qword_2022C8);
    sub_2EF0C(v39, &qword_201E28);
    sub_2EF0C(v40, &qword_2022D0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v36 = v21;
    uint64_t v75 = v28;
    uint64_t v37 = v68;
    char v90 = 0;
    sub_2D38C(&qword_202BE0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    uint64_t v38 = v69;
    sub_1AD1E0();
    uint64_t v42 = (uint64_t)v80;
    sub_2B7FC(v38, (uint64_t)v80, &qword_2022C8);
    char v89 = 1;
    *(void *)uint64_t v19 = sub_1AD1D0();
    v19[8] = v43 & 1;
    char v88 = 2;
    *(void *)uint64_t v20 = sub_1AD1D0();
    v20[8] = v44 & 1;
    char v87 = 3;
    *(void *)char v36 = sub_1AD1D0();
    v36[8] = v45 & 1;
    char v86 = 4;
    sub_2D38C(&qword_202BE8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    uint64_t v46 = v37;
    sub_1AD1E0();
    uint64_t v47 = v77;
    uint64_t v48 = (uint64_t *)v76;
    sub_2B7FC(v46, v78, &qword_201E28);
    char v85 = 5;
    *(unsigned char *)(v42 + Model[9]) = sub_1AD200() & 1;
    char v84 = 6;
    sub_2D38C(&qword_202BF0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v49 = v65;
    sub_1AD1E0();
    sub_2B7FC(v49, v47, &qword_2022D0);
    char v83 = 7;
    uint64_t v50 = sub_1AD1C0();
    uint64_t v52 = v51;
    swift_bridgeObjectRelease();
    *uint64_t v48 = v50;
    v48[1] = v52;
    char v82 = 8;
    uint64_t v53 = sub_1AD1C0();
    uint64_t v55 = v54;
    BOOL v56 = (uint64_t *)v79;
    swift_bridgeObjectRelease();
    *BOOL v56 = v53;
    v56[1] = v55;
    char v81 = 9;
    uint64_t v57 = sub_1AD1C0();
    uint64_t v59 = v58;
    sub_2F04C();
    v60();
    uint64_t v61 = (uint64_t *)v73;
    swift_bridgeObjectRelease();
    *uint64_t v61 = v57;
    v61[1] = v59;
    uint64_t v62 = (uint64_t)v80;
    sub_2D298((uint64_t)v80, v64);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v74);
    return sub_2E0E8(v62, (void (*)(void))type metadata accessor for HeightQueryModel);
  }
}

uint64_t sub_2D298(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for HeightQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t sub_2D2FC()
{
  return sub_2D38C(&qword_202268, (void (*)(uint64_t))type metadata accessor for HeightQueryModel);
}

uint64_t sub_2D344()
{
  return sub_2D38C(&qword_202110, (void (*)(uint64_t))type metadata accessor for HeightQueryModel);
}

uint64_t sub_2D38C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2D3D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return HeightQueryModel.init(from:)(a1, a2);
}

uint64_t sub_2D3EC(void *a1)
{
  return HeightQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for HeightQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AAD90();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_2022C8);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = (char *)a1 + v11;
    uint64_t v15 = (char *)a2 + v11;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)a1 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (char *)a1 + v17;
    char v21 = (char *)a2 + v17;
    uint64_t v22 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1, v22))
    {
      uint64_t v23 = sub_2694(&qword_201E28);
      memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0, 1, v22);
    }
    uint64_t v24 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    uint64_t v25 = (char *)a1 + v24;
    uint64_t v26 = (char *)a2 + v24;
    uint64_t v27 = type metadata accessor for SnippetHeaderModel();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v26, 1, v27))
    {
      uint64_t v28 = sub_2694(&qword_2022D0);
      memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v25, v26, v22);
      uint64_t v29 = *(int *)(v27 + 20);
      uint64_t v30 = &v25[v29];
      uint64_t v31 = &v26[v29];
      uint64_t v32 = *((void *)v31 + 1);
      *(void *)uint64_t v30 = *(void *)v31;
      *((void *)v30 + 1) = v32;
      uint64_t v33 = *(int *)(v27 + 24);
      uint64_t v34 = &v25[v33];
      uint64_t v35 = &v26[v33];
      uint64_t v36 = *((void *)v35 + 1);
      *(void *)uint64_t v34 = *(void *)v35;
      *((void *)v34 + 1) = v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v25, 0, 1, v27);
    }
    uint64_t v37 = a3[11];
    uint64_t v38 = a3[12];
    uint64_t v39 = (uint64_t *)((char *)a1 + v37);
    uint64_t v40 = (uint64_t *)((char *)a2 + v37);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = (uint64_t *)((char *)a1 + v38);
    char v43 = (uint64_t *)((char *)a2 + v38);
    uint64_t v44 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v44;
    uint64_t v45 = a3[13];
    uint64_t v46 = (uint64_t *)((char *)a1 + v45);
    uint64_t v47 = (uint64_t *)((char *)a2 + v45);
    uint64_t v48 = v47[1];
    *uint64_t v46 = *v47;
    v46[1] = v48;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for HeightQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AAD90();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 32);
  uint64_t v6 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 40);
  uint64_t v8 = type metadata accessor for SnippetHeaderModel();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v8))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  uint64_t v20 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1, v20))
  {
    uint64_t v21 = sub_2694(&qword_201E28);
    memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v18, 0, 1, v20);
  }
  uint64_t v22 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v25))
  {
    uint64_t v26 = sub_2694(&qword_2022D0);
    memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v23, v24, v20);
    uint64_t v27 = *(int *)(v25 + 20);
    uint64_t v28 = &v23[v27];
    uint64_t v29 = &v24[v27];
    uint64_t v30 = *((void *)v29 + 1);
    *(void *)uint64_t v28 = *(void *)v29;
    *((void *)v28 + 1) = v30;
    uint64_t v31 = *(int *)(v25 + 24);
    uint64_t v32 = &v23[v31];
    uint64_t v33 = &v24[v31];
    uint64_t v34 = *((void *)v33 + 1);
    *(void *)uint64_t v32 = *(void *)v33;
    *((void *)v32 + 1) = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0, 1, v25);
  }
  uint64_t v35 = a3[11];
  uint64_t v36 = a3[12];
  uint64_t v37 = &a1[v35];
  uint64_t v38 = &a2[v35];
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v39;
  uint64_t v40 = &a1[v36];
  uint64_t v41 = &a2[v36];
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = v42;
  uint64_t v43 = a3[13];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = v46;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = sub_1AC1E0();
  int v27 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v26);
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1, v26);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v29 = *(void *)(v26 - 8);
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v24, v26);
LABEL_12:
    uint64_t v30 = sub_2694(&qword_201E28);
    memcpy(v24, v25, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v24, v25, v26);
LABEL_13:
  a1[a3[9]] = a2[a3[9]];
  uint64_t v31 = a3[10];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = type metadata accessor for SnippetHeaderModel();
  int v35 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v34);
  int v36 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1, v34);
  if (!v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 24))(v32, v33, v26);
      uint64_t v54 = *(int *)(v34 + 20);
      uint64_t v55 = &v32[v54];
      BOOL v56 = &v33[v54];
      *(void *)uint64_t v55 = *(void *)v56;
      *((void *)v55 + 1) = *((void *)v56 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v57 = *(int *)(v34 + 24);
      uint64_t v58 = &v32[v57];
      uint64_t v59 = &v33[v57];
      *(void *)uint64_t v58 = *(void *)v59;
      *((void *)v58 + 1) = *((void *)v59 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    sub_2E0E8((uint64_t)v32, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v36)
  {
LABEL_18:
    uint64_t v43 = sub_2694(&qword_2022D0);
    memcpy(v32, v33, *(void *)(*(void *)(v43 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v32, v33, v26);
  uint64_t v37 = *(int *)(v34 + 20);
  uint64_t v38 = &v32[v37];
  uint64_t v39 = &v33[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = *((void *)v39 + 1);
  uint64_t v40 = *(int *)(v34 + 24);
  uint64_t v41 = &v32[v40];
  uint64_t v42 = &v33[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v32, 0, 1, v34);
LABEL_19:
  uint64_t v44 = a3[11];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = *((void *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[12];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = *((void *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = a3[13];
  uint64_t v51 = &a1[v50];
  uint64_t v52 = &a2[v50];
  *(void *)uint64_t v51 = *(void *)v52;
  *((void *)v51 + 1) = *((void *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2E0E8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

char *initializeWithTake for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  uint64_t v20 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1, v20))
  {
    uint64_t v21 = sub_2694(&qword_201E28);
    memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v18, 0, 1, v20);
  }
  uint64_t v22 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v25))
  {
    uint64_t v26 = sub_2694(&qword_2022D0);
    memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v23, v24, v20);
    *(_OWORD *)&v23[*(int *)(v25 + 20)] = *(_OWORD *)&v24[*(int *)(v25 + 20)];
    *(_OWORD *)&v23[*(int *)(v25 + 24)] = *(_OWORD *)&v24[*(int *)(v25 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0, 1, v25);
  }
  uint64_t v27 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  return a1;
}

char *assignWithTake for HeightQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = &a1[v18];
  uint64_t v22 = &a2[v18];
  uint64_t v23 = sub_1AC1E0();
  int v24 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1, v23);
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v23);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v26 = *(void *)(v23 - 8);
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v23);
LABEL_12:
    uint64_t v27 = sub_2694(&qword_201E28);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v21, v22, v23);
LABEL_13:
  uint64_t v28 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = type metadata accessor for SnippetHeaderModel();
  int v32 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v29, 1, v31);
  int v33 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v30, 1, v31);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 40))(v29, v30, v23);
      uint64_t v51 = *(int *)(v31 + 20);
      uint64_t v52 = &v29[v51];
      uint64_t v53 = &v30[v51];
      uint64_t v55 = *(void *)v53;
      uint64_t v54 = *((void *)v53 + 1);
      *(void *)uint64_t v52 = v55;
      *((void *)v52 + 1) = v54;
      swift_bridgeObjectRelease();
      uint64_t v56 = *(int *)(v31 + 24);
      uint64_t v57 = &v29[v56];
      uint64_t v58 = &v30[v56];
      uint64_t v60 = *(void *)v58;
      uint64_t v59 = *((void *)v58 + 1);
      *(void *)uint64_t v57 = v60;
      *((void *)v57 + 1) = v59;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    sub_2E0E8((uint64_t)v29, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v33)
  {
LABEL_18:
    uint64_t v34 = sub_2694(&qword_2022D0);
    memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v29, v30, v23);
  *(_OWORD *)&v29[*(int *)(v31 + 20)] = *(_OWORD *)&v30[*(int *)(v31 + 20)];
  *(_OWORD *)&v29[*(int *)(v31 + 24)] = *(_OWORD *)&v30[*(int *)(v31 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v29, 0, 1, v31);
LABEL_19:
  uint64_t v35 = a3[11];
  int v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  uint64_t v39 = *(void *)v37;
  uint64_t v38 = *((void *)v37 + 1);
  *(void *)int v36 = v39;
  *((void *)v36 + 1) = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[12];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  uint64_t v44 = *(void *)v42;
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = v44;
  *((void *)v41 + 1) = v43;
  swift_bridgeObjectRelease();
  uint64_t v45 = a3[13];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  uint64_t v49 = *(void *)v47;
  uint64_t v48 = *((void *)v47 + 1);
  *(void *)uint64_t v46 = v49;
  *((void *)v46 + 1) = v48;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HeightQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2E890);
}

uint64_t sub_2E890(uint64_t a1, uint64_t a2, int *a3)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_8:
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
  sub_2694(&qword_201E28);
  sub_52E0();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v12 = a3[8];
LABEL_7:
    uint64_t v9 = a1 + v12;
    goto LABEL_8;
  }
  sub_2694(&qword_2022D0);
  sub_52E0();
  if (*(_DWORD *)(v14 + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v12 = a3[10];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[11] + 8);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  int v17 = v16 - 1;
  if (v17 < 0) {
    int v17 = -1;
  }
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for HeightQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2E998);
}

void sub_2E998(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    sub_2694(&qword_201E28);
    sub_52E0();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[8];
    }
    else
    {
      sub_2694(&qword_2022D0);
      sub_52E0();
      if (*(_DWORD *)(v16 + 84) != a3)
      {
        *(void *)(a1 + a4[11] + 8) = a2;
        return;
      }
      uint64_t v10 = v15;
      uint64_t v14 = a4[10];
    }
    uint64_t v11 = a1 + v14;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, a2, a2, v10);
}

void sub_2EA7C()
{
  sub_2EBF4(319, &qword_202C60, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  if (v0 <= 0x3F)
  {
    sub_2EBF4(319, (unint64_t *)&qword_202C68, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    if (v1 <= 0x3F)
    {
      sub_2EBF4(319, (unint64_t *)&qword_202C70, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_2EBF4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1ACFD0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for HeightQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for HeightQueryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2ED9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HeightQueryModel.CodingKeys()
{
  return &type metadata for HeightQueryModel.CodingKeys;
}

unint64_t sub_2EDD8()
{
  unint64_t result = qword_202CC0;
  if (!qword_202CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202CC0);
  }
  return result;
}

unint64_t sub_2EE28()
{
  unint64_t result = qword_202CC8;
  if (!qword_202CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202CC8);
  }
  return result;
}

unint64_t sub_2EE78()
{
  unint64_t result = qword_202CD0;
  if (!qword_202CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202CD0);
  }
  return result;
}

uint64_t sub_2EEC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2EFF8(a1, a2, a3);
  sub_20688();
  uint64_t v4 = sub_2F03C();
  v5(v4);
  return v3;
}

uint64_t sub_2EF0C(uint64_t a1, uint64_t *a2)
{
  sub_2694(a2);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_2EF60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2EFF8(a1, a2, a3);
  sub_20688();
  uint64_t v4 = sub_2F03C();
  v5(v4);
  return v3;
}

uint64_t sub_2EFA8()
{
  return type metadata accessor for HeightQueryModel();
}

void sub_2EFC0(uint64_t a1@<X8>)
{
  uint64_t v4 = v2 + a1;
  *(void *)uint64_t v4 = v3;
  *(unsigned char *)(v4 + 8) = v1 & 1;
}

uint64_t sub_2EFD4()
{
  return type metadata accessor for HeightQueryModel();
}

uint64_t sub_2EFEC@<X0>(uint64_t a1@<X8>)
{
  return *(void *)a1;
}

uint64_t sub_2EFF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_2694(a3);
}

uint64_t sub_2F02C()
{
  return v0;
}

uint64_t sub_2F03C()
{
  return v0;
}

uint64_t sub_2F05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_2F078()
{
  return sub_1AD260();
}

uint64_t sub_2F094()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_2F0B0()
{
  return sub_1AD270();
}

uint64_t getEnumTagSinglePayload for HealthKitIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0x34)
  {
    if (a2 + 204 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 204) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 205;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xCD;
  int v5 = v6 - 205;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for HealthKitIdentifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 204 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 204) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x34) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x33)
  {
    unsigned int v6 = ((a2 - 52) >> 8) + 1;
    *unint64_t result = a2 - 52;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2F228);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 - 52;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HealthKitIdentifier()
{
  return &type metadata for HealthKitIdentifier;
}

unint64_t sub_2F264()
{
  unint64_t result = qword_202CD8;
  if (!qword_202CD8)
  {
    sub_B464(&qword_202CE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202CD8);
  }
  return result;
}

unint64_t sub_2F2B8(char a1)
{
  unint64_t result = 0xD00000000000001FLL;
  switch(a1)
  {
    case 1:
    case 3:
    case 58:
    case 68:
    case 75:
    case 78:
    case 80:
    case 81:
    case 107:
    case 109:
    case 112:
    case 114:
    case 120:
    case -122:
    case -118:
    case -115:
    case -114:
    case -113:
    case -112:
    case -109:
    case -92:
    case -82:
    case -68:
      unint64_t result = 0xD000000000000027;
      break;
    case 2:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000026;
      break;
    case 5:
      unint64_t result = 0xD000000000000033;
      break;
    case 6:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 7:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000020;
      break;
    case 9:
      unint64_t result = 0xD000000000000022;
      break;
    case 10:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 11:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 12:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 13:
      unint64_t result = 0xD000000000000024;
      break;
    case 14:
      unint64_t result = 0xD000000000000025;
      break;
    case 15:
      unint64_t result = 0xD000000000000020;
      break;
    case 16:
      unint64_t result = 0xD000000000000020;
      break;
    case 17:
      unint64_t result = 0xD000000000000021;
      break;
    case 19:
      unint64_t result = 0xD000000000000037;
      break;
    case 20:
      unint64_t result = 0xD000000000000020;
      break;
    case 22:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 23:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 24:
      unint64_t result = 0xD000000000000020;
      break;
    case 25:
      unint64_t result = 0xD000000000000028;
      break;
    case 26:
      unint64_t result = 0xD000000000000020;
      break;
    case 27:
      unint64_t result = 0xD000000000000033;
      break;
    case 28:
      unint64_t result = 0xD000000000000021;
      break;
    case 29:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 30:
      unint64_t result = 0xD000000000000022;
      break;
    case 31:
      unint64_t result = 0xD000000000000031;
      break;
    case 32:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 33:
      unint64_t result = 0xD000000000000031;
      break;
    case 34:
      unint64_t result = 0xD000000000000030;
      break;
    case 35:
      unint64_t result = 0xD000000000000021;
      break;
    case 36:
      unint64_t result = 0xD000000000000023;
      break;
    case 37:
      unint64_t result = 0xD000000000000023;
      break;
    case 38:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 39:
      unint64_t result = 0xD000000000000029;
      break;
    case 40:
      unint64_t result = 0xD000000000000025;
      break;
    case 41:
      unint64_t result = 0xD000000000000023;
      break;
    case 42:
      unint64_t result = 0xD000000000000025;
      break;
    case 43:
      unint64_t result = 0xD000000000000026;
      break;
    case 44:
      unint64_t result = 0xD000000000000023;
      break;
    case 45:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 46:
      unint64_t result = 0xD000000000000023;
      break;
    case 47:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 48:
      unint64_t result = 0xD000000000000022;
      break;
    case 49:
      unint64_t result = 0xD000000000000038;
      break;
    case 50:
      unint64_t result = 0xD000000000000021;
      break;
    case 51:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 52:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 53:
      unint64_t result = 0xD000000000000031;
      break;
    case 54:
      unint64_t result = 0xD00000000000003ALL;
      break;
    case 55:
      unint64_t result = 0xD000000000000021;
      break;
    case 56:
      unint64_t result = 0xD000000000000026;
      break;
    case 57:
      unint64_t result = 0xD000000000000029;
      break;
    case 59:
      unint64_t result = 0xD000000000000028;
      break;
    case 60:
      unint64_t result = 0xD000000000000025;
      break;
    case 61:
      unint64_t result = 0xD000000000000024;
      break;
    case 62:
      unint64_t result = 0xD000000000000022;
      break;
    case 63:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 64:
      unint64_t result = 0xD000000000000026;
      break;
    case 65:
      unint64_t result = 0xD000000000000020;
      break;
    case 66:
      unint64_t result = 0xD000000000000020;
      break;
    case 67:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 69:
      unint64_t result = 0xD000000000000039;
      break;
    case 70:
      unint64_t result = 0xD000000000000029;
      break;
    case 71:
      unint64_t result = 0xD000000000000031;
      break;
    case 72:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 73:
      unint64_t result = 0xD000000000000025;
      break;
    case 74:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 76:
      unint64_t result = 0xD000000000000026;
      break;
    case 77:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 79:
      unint64_t result = 0xD000000000000028;
      break;
    case 82:
      unint64_t result = 0xD000000000000028;
      break;
    case 83:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 84:
      unint64_t result = 0xD000000000000025;
      break;
    case 85:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 86:
      unint64_t result = 0xD000000000000017;
      break;
    case 87:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 88:
      unint64_t result = 0xD000000000000036;
      break;
    case 89:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 90:
      unint64_t result = 0xD000000000000029;
      break;
    case 91:
      unint64_t result = 0xD000000000000025;
      break;
    case 92:
      unint64_t result = 0xD000000000000035;
      break;
    case 93:
      unint64_t result = 0xD000000000000026;
      break;
    case 94:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 95:
      unint64_t result = 0xD000000000000030;
      break;
    case 96:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 97:
      unint64_t result = 0xD000000000000029;
      break;
    case 98:
      unint64_t result = 0xD000000000000026;
      break;
    case 99:
      unint64_t result = 0xD000000000000037;
      break;
    case 100:
      unint64_t result = 0xD000000000000024;
      break;
    case 101:
      unint64_t result = 0xD000000000000024;
      break;
    case 102:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 103:
      unint64_t result = 0xD000000000000024;
      break;
    case 104:
      unint64_t result = 0xD000000000000029;
      break;
    case 105:
      unint64_t result = 0xD000000000000020;
      break;
    case 106:
      unint64_t result = 0xD000000000000025;
      break;
    case 108:
      unint64_t result = 0xD000000000000025;
      break;
    case 110:
      unint64_t result = 0xD000000000000026;
      break;
    case 111:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 113:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 115:
      unint64_t result = 0xD000000000000025;
      break;
    case 116:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 117:
      unint64_t result = 0xD000000000000031;
      break;
    case 118:
      unint64_t result = 0xD000000000000031;
      break;
    case 119:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 121:
      unint64_t result = 0xD000000000000024;
      break;
    case 122:
      unint64_t result = 0xD000000000000025;
      break;
    case 123:
      unint64_t result = 0xD000000000000025;
      break;
    case 124:
      unint64_t result = 0xD000000000000023;
      break;
    case 125:
      unint64_t result = 0xD000000000000028;
      break;
    case 126:
      unint64_t result = 0xD000000000000028;
      break;
    case 127:
      unint64_t result = 0xD000000000000029;
      break;
    case -128:
      unint64_t result = 0xD000000000000025;
      break;
    case -127:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case -126:
      unint64_t result = 0xD000000000000029;
      break;
    case -125:
      unint64_t result = 0xD000000000000028;
      break;
    case -124:
      unint64_t result = 0xD000000000000026;
      break;
    case -123:
      unint64_t result = 0xD000000000000029;
      break;
    case -121:
      unint64_t result = 0xD000000000000025;
      break;
    case -120:
      unint64_t result = 0xD000000000000024;
      break;
    case -119:
      unint64_t result = 0xD000000000000026;
      break;
    case -117:
      unint64_t result = 0xD000000000000029;
      break;
    case -116:
      unint64_t result = 0xD000000000000028;
      break;
    case -111:
      unint64_t result = 0xD000000000000024;
      break;
    case -110:
      unint64_t result = 0xD000000000000023;
      break;
    case -108:
      unint64_t result = 0xD000000000000032;
      break;
    case -107:
      unint64_t result = 0xD000000000000028;
      break;
    case -106:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case -105:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case -104:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case -103:
      unint64_t result = 0xD000000000000032;
      break;
    case -102:
      unint64_t result = 0xD000000000000033;
      break;
    case -101:
      unint64_t result = 0xD000000000000026;
      break;
    case -100:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case -99:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case -98:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case -97:
      unint64_t result = 0xD000000000000021;
      break;
    case -96:
      unint64_t result = 0xD000000000000032;
      break;
    case -95:
      unint64_t result = 0xD000000000000030;
      break;
    case -94:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case -93:
      unint64_t result = 0xD000000000000024;
      break;
    case -91:
      unint64_t result = 0xD000000000000024;
      break;
    case -90:
      unint64_t result = 0xD000000000000020;
      break;
    case -89:
      unint64_t result = 0xD000000000000026;
      break;
    case -88:
      unint64_t result = 0xD000000000000032;
      break;
    case -87:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case -86:
      unint64_t result = 0xD000000000000028;
      break;
    case -85:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case -84:
      unint64_t result = 0xD000000000000030;
      break;
    case -83:
      unint64_t result = 0xD000000000000021;
      break;
    case -81:
      unint64_t result = 0xD000000000000028;
      break;
    case -80:
      unint64_t result = 0xD000000000000030;
      break;
    case -79:
      unint64_t result = 0xD000000000000024;
      break;
    case -78:
      unint64_t result = 0xD000000000000024;
      break;
    case -77:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case -76:
      unint64_t result = 0xD000000000000032;
      break;
    case -75:
      unint64_t result = 0xD000000000000031;
      break;
    case -74:
      unint64_t result = 0xD000000000000028;
      break;
    case -73:
      unint64_t result = 0xD000000000000029;
      break;
    case -72:
      unint64_t result = 0xD000000000000021;
      break;
    case -71:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case -70:
      unint64_t result = 0xD000000000000026;
      break;
    case -69:
      unint64_t result = 0xD000000000000022;
      break;
    case -67:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case -66:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case -65:
      unint64_t result = 0xD000000000000032;
      break;
    case -64:
      unint64_t result = 0xD000000000000036;
      break;
    case -63:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case -62:
      unint64_t result = 0xD000000000000024;
      break;
    case -61:
      unint64_t result = 0xD000000000000029;
      break;
    case -60:
      unint64_t result = 0xD000000000000017;
      break;
    case -59:
      unint64_t result = 0xD000000000000022;
      break;
    case -58:
      unint64_t result = 0xD000000000000017;
      break;
    case -57:
      unint64_t result = 0x73676E69524B48;
      break;
    case -56:
      unint64_t result = 0xD000000000000024;
      break;
    case -55:
      unint64_t result = 0xD000000000000024;
      break;
    case -54:
      unint64_t result = 0xD000000000000021;
      break;
    case -53:
      unint64_t result = 0xD00000000000003ELL;
      break;
    case -52:
      unint64_t result = 0xD00000000000003FLL;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_302AC(uint64_t a1)
{
  return sub_303A4(a1, (void (*)(uint64_t))sub_481F0);
}

Swift::Int sub_302C4(uint64_t a1)
{
  return sub_303A4(a1, (void (*)(uint64_t))sub_A05A0);
}

Swift::Int sub_302DC()
{
  return sub_1AD390();
}

Swift::Int sub_30324(uint64_t a1)
{
  return sub_303A4(a1, (void (*)(uint64_t))sub_15A300);
}

Swift::Int sub_3033C(__int16 a1)
{
  return sub_1AD390();
}

Swift::Int sub_3038C(uint64_t a1)
{
  return sub_303A4(a1, (void (*)(uint64_t))sub_1950F4);
}

Swift::Int sub_303A4(uint64_t a1, void (*a2)(uint64_t))
{
  return sub_1AD390();
}

uint64_t sub_303FC(uint64_t a1, void *a2)
{
  sub_2694(&qword_202D00);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = sub_731BC(v4, 205);
  *(void *)uint64_t v6 = "HKActivitySummaryTypeIdentifier";
  *(void *)(v6 + 8) = 31;
  *(unsigned char *)(v6 + 16) = 2;
  *(void *)(v6 + 24) = "HKCategoryTypeIdentifierAbdominalCramps";
  *(void *)(v6 + 32) = 39;
  *(unsigned char *)(v6 + 40) = 2;
  *(void *)(v6 + 48) = "HKCategoryTypeIdentifierAcne";
  *(void *)(v6 + 56) = 28;
  *(unsigned char *)(v6 + 64) = 2;
  *(void *)(v6 + 72) = "HKCategoryTypeIdentifierAppetiteChanges";
  *(void *)(v6 + 80) = 39;
  *(unsigned char *)(v6 + 88) = 2;
  *(void *)(v6 + 96) = "HKCategoryTypeIdentifierAppleStandHour";
  *(void *)(v6 + 104) = 38;
  *(unsigned char *)(v6 + 112) = 2;
  *(void *)(v6 + 120) = "HKCategoryTypeIdentifierAppleWalkingSteadinessEvent";
  *(void *)(v6 + 128) = 51;
  *(unsigned char *)(v6 + 136) = 2;
  *(void *)(v6 + 144) = "HKCategoryTypeIdentifierAudioExposureEvent";
  *(void *)(v6 + 152) = 42;
  *(unsigned char *)(v6 + 160) = 2;
  *(void *)(v6 + 168) = "HKCategoryTypeIdentifierBladderIncontinence";
  *(void *)(v6 + 176) = 43;
  *(unsigned char *)(v6 + 184) = 2;
  *(void *)(v6 + 192) = "HKCategoryTypeIdentifierBloating";
  *(void *)(v6 + 200) = 32;
  *(unsigned char *)(v6 + 208) = 2;
  *(void *)(v6 + 216) = "HKCategoryTypeIdentifierBreastPain";
  *(void *)(v6 + 224) = 34;
  *(unsigned char *)(v6 + 232) = 2;
  *(void *)(v6 + 240) = "HKCategoryTypeIdentifierCervicalMucusQuality";
  *(void *)(v6 + 248) = 44;
  *(unsigned char *)(v6 + 256) = 2;
  *(void *)(v6 + 264) = "HKCategoryTypeIdentifierChestTightnessOrPain";
  *(void *)(v6 + 272) = 44;
  *(unsigned char *)(v6 + 280) = 2;
  *(void *)(v6 + 288) = "HKCategoryTypeIdentifierChills";
  *(void *)(v6 + 296) = 30;
  *(unsigned char *)(v6 + 304) = 2;
  *(void *)(v6 + 312) = "HKCategoryTypeIdentifierConstipation";
  *(void *)(v6 + 320) = 36;
  *(unsigned char *)(v6 + 328) = 2;
  *(void *)(v6 + 336) = "HKCategoryTypeIdentifierContraceptive";
  *(void *)(v6 + 344) = 37;
  *(unsigned char *)(v6 + 352) = 2;
  *(void *)(v6 + 360) = "HKCategoryTypeIdentifierCoughing";
  *(void *)(v6 + 368) = 32;
  *(unsigned char *)(v6 + 376) = 2;
  *(void *)(v6 + 384) = "HKCategoryTypeIdentifierDiarrhea";
  *(void *)(v6 + 392) = 32;
  *(unsigned char *)(v6 + 400) = 2;
  *(void *)(v6 + 408) = "HKCategoryTypeIdentifierDizziness";
  *(void *)(v6 + 416) = 33;
  *(unsigned char *)(v6 + 424) = 2;
  *(void *)(v6 + 432) = "HKCategoryTypeIdentifierDrySkin";
  *(void *)(v6 + 440) = 31;
  *(unsigned char *)(v6 + 448) = 2;
  *(void *)(v6 + 456) = "HKCategoryTypeIdentifierEnvironmentalAudioExposureEvent";
  *(void *)(v6 + 464) = 55;
  *(unsigned char *)(v6 + 472) = 2;
  *(void *)(v6 + 480) = "HKCategoryTypeIdentifierFainting";
  *(void *)(v6 + 488) = 32;
  *(unsigned char *)(v6 + 496) = 2;
  *(void *)(v6 + 504) = "HKCategoryTypeIdentifierFatigue";
  *(void *)(v6 + 512) = 31;
  *(unsigned char *)(v6 + 520) = 2;
  *(void *)(v6 + 528) = "HKCategoryTypeIdentifierFever";
  *(void *)(v6 + 536) = 29;
  *(unsigned char *)(v6 + 544) = 2;
  *(void *)(v6 + 552) = "HKCategoryTypeIdentifierGeneralizedBodyAche";
  *(void *)(v6 + 560) = 43;
  *(unsigned char *)(v6 + 568) = 2;
  *(void *)(v6 + 576) = "HKCategoryTypeIdentifierHairLoss";
  *(void *)(v6 + 584) = 32;
  *(unsigned char *)(v6 + 592) = 2;
  *(void *)(v6 + 600) = "HKCategoryTypeIdentifierHandwashingEvent";
  *(void *)(v6 + 608) = 40;
  *(unsigned char *)(v6 + 616) = 2;
  *(void *)(v6 + 624) = "HKCategoryTypeIdentifierHeadache";
  *(void *)(v6 + 632) = 32;
  *(unsigned char *)(v6 + 640) = 2;
  *(void *)(v6 + 648) = "HKCategoryTypeIdentifierHeadphoneAudioExposureEvent";
  *(void *)(v6 + 656) = 51;
  *(unsigned char *)(v6 + 664) = 2;
  *(void *)(v6 + 672) = "HKCategoryTypeIdentifierHeartburn";
  *(void *)(v6 + 680) = 33;
  *(unsigned char *)(v6 + 688) = 2;
  *(void *)(v6 + 696) = "HKCategoryTypeIdentifierHighHeartRateEvent";
  *(void *)(v6 + 704) = 42;
  *(unsigned char *)(v6 + 712) = 2;
  *(void *)(v6 + 720) = "HKCategoryTypeIdentifierHotFlashes";
  *(void *)(v6 + 728) = 34;
  *(unsigned char *)(v6 + 736) = 2;
  *(void *)(v6 + 744) = "HKCategoryTypeIdentifierInfrequentMenstrualCycles";
  *(void *)(v6 + 752) = 49;
  *(unsigned char *)(v6 + 760) = 2;
  *(void *)(v6 + 768) = "HKCategoryTypeIdentifierIntermenstrualBleeding";
  *(void *)(v6 + 776) = 46;
  *(unsigned char *)(v6 + 784) = 2;
  *(void *)(v6 + 792) = "HKCategoryTypeIdentifierIrregularHeartRhythmEvent";
  *(void *)(v6 + 800) = 49;
  *(unsigned char *)(v6 + 808) = 2;
  *(void *)(v6 + 816) = "HKCategoryTypeIdentifierIrregularMenstrualCycles";
  *(void *)(v6 + 824) = 48;
  *(unsigned char *)(v6 + 832) = 2;
  *(void *)(v6 + 840) = "HKCategoryTypeIdentifierLactation";
  *(void *)(v6 + 848) = 33;
  *(unsigned char *)(v6 + 856) = 2;
  *(void *)(v6 + 864) = "HKCategoryTypeIdentifierLossOfSmell";
  *(void *)(v6 + 872) = 35;
  *(unsigned char *)(v6 + 880) = 2;
  *(void *)(v6 + 888) = "HKCategoryTypeIdentifierLossOfTaste";
  *(void *)(v6 + 896) = 35;
  *(unsigned char *)(v6 + 904) = 2;
  *(void *)(v6 + 912) = "HKCategoryTypeIdentifierLowCardioFitnessEvent";
  *(void *)(v6 + 920) = 45;
  *(unsigned char *)(v6 + 928) = 2;
  *(void *)(v6 + 936) = "HKCategoryTypeIdentifierLowHeartRateEvent";
  *(void *)(v6 + 944) = 41;
  *(unsigned char *)(v6 + 952) = 2;
  *(void *)(v6 + 960) = "HKCategoryTypeIdentifierLowerBackPain";
  *(void *)(v6 + 968) = 37;
  *(unsigned char *)(v6 + 976) = 2;
  *(void *)(v6 + 984) = "HKCategoryTypeIdentifierMemoryLapse";
  *(void *)(v6 + 992) = 35;
  *(unsigned char *)(v6 + 1000) = 2;
  *(void *)(v6 + 1008) = "HKCategoryTypeIdentifierMenstrualFlow";
  *(void *)(v6 + 1016) = 37;
  *(unsigned char *)(v6 + 1024) = 2;
  *(void *)(v6 + 1032) = "HKCategoryTypeIdentifierMindfulSession";
  *(void *)(v6 + 1040) = 38;
  *(unsigned char *)(v6 + 1048) = 2;
  *(void *)(v6 + 1056) = "HKCategoryTypeIdentifierMoodChanges";
  *(void *)(v6 + 1064) = 35;
  *(unsigned char *)(v6 + 1072) = 2;
  *(void *)(v6 + 1080) = "HKCategoryTypeIdentifierNausea";
  *(void *)(v6 + 1088) = 30;
  *(unsigned char *)(v6 + 1096) = 2;
  *(void *)(v6 + 1104) = "HKCategoryTypeIdentifierNightSweats";
  *(void *)(v6 + 1112) = 35;
  *(unsigned char *)(v6 + 1120) = 2;
  *(void *)(v6 + 1128) = "HKCategoryTypeIdentifierOvulationTestResult";
  *(void *)(v6 + 1136) = 43;
  *(unsigned char *)(v6 + 1144) = 2;
  *(void *)(v6 + 1152) = "HKCategoryTypeIdentifierPelvicPain";
  *(void *)(v6 + 1160) = 34;
  *(unsigned char *)(v6 + 1168) = 2;
  *(void *)(v6 + 1176) = "HKCategoryTypeIdentifierPersistentIntermenstrualBleeding";
  *(void *)(v6 + 1184) = 56;
  *(unsigned char *)(v6 + 1192) = 2;
  *(void *)(v6 + 1200) = "HKCategoryTypeIdentifierPregnancy";
  *(void *)(v6 + 1208) = 33;
  *(unsigned char *)(v6 + 1216) = 2;
  *(void *)(v6 + 1224) = "HKCategoryTypeIdentifierPregnancyTestResult";
  *(void *)(v6 + 1232) = 43;
  *(unsigned char *)(v6 + 1240) = 2;
  *(void *)(v6 + 1248) = "HKCategoryTypeIdentifierProgesteroneTestResult";
  *(void *)(v6 + 1256) = 46;
  *(unsigned char *)(v6 + 1264) = 2;
  *(void *)(v6 + 1272) = "HKCategoryTypeIdentifierProlongedMenstrualPeriods";
  *(void *)(v6 + 1280) = 49;
  *(unsigned char *)(v6 + 1288) = 2;
  *(void *)(v6 + 1296) = "HKCategoryTypeIdentifierRapidPoundingOrFlutteringHeartbeat";
  *(void *)(v6 + 1304) = 58;
  *(unsigned char *)(v6 + 1312) = 2;
  *(void *)(v6 + 1320) = "HKCategoryTypeIdentifierRunnyNose";
  *(void *)(v6 + 1328) = 33;
  *(unsigned char *)(v6 + 1336) = 2;
  *(void *)(v6 + 1344) = "HKCategoryTypeIdentifierSexualActivity";
  *(void *)(v6 + 1352) = 38;
  *(unsigned char *)(v6 + 1360) = 2;
  *(void *)(v6 + 1368) = "HKCategoryTypeIdentifierShortnessOfBreath";
  *(void *)(v6 + 1376) = 41;
  *(unsigned char *)(v6 + 1384) = 2;
  *(void *)(v6 + 1392) = "HKCategoryTypeIdentifierSinusCongestion";
  *(void *)(v6 + 1400) = 39;
  *(unsigned char *)(v6 + 1408) = 2;
  *(void *)(v6 + 1416) = "HKCategoryTypeIdentifierSkippedHeartbeat";
  *(void *)(v6 + 1424) = 40;
  *(unsigned char *)(v6 + 1432) = 2;
  *(void *)(v6 + 1440) = "HKCategoryTypeIdentifierSleepAnalysis";
  *(void *)(v6 + 1448) = 37;
  *(unsigned char *)(v6 + 1456) = 2;
  *(void *)(v6 + 1464) = "HKCategoryTypeIdentifierSleepChanges";
  *(void *)(v6 + 1472) = 36;
  *(unsigned char *)(v6 + 1480) = 2;
  *(void *)(v6 + 1488) = "HKCategoryTypeIdentifierSoreThroat";
  *(void *)(v6 + 1496) = 34;
  *(unsigned char *)(v6 + 1504) = 2;
  *(void *)(v6 + 1512) = "HKCategoryTypeIdentifierToothbrushingEvent";
  *(void *)(v6 + 1520) = 42;
  *(unsigned char *)(v6 + 1528) = 2;
  *(void *)(v6 + 1536) = "HKCategoryTypeIdentifierVaginalDryness";
  *(void *)(v6 + 1544) = 38;
  *(unsigned char *)(v6 + 1552) = 2;
  *(void *)(v6 + 1560) = "HKCategoryTypeIdentifierVomiting";
  *(void *)(v6 + 1568) = 32;
  *(unsigned char *)(v6 + 1576) = 2;
  *(void *)(v6 + 1584) = "HKCategoryTypeIdentifierWheezing";
  *(void *)(v6 + 1592) = 32;
  *(unsigned char *)(v6 + 1600) = 2;
  *(void *)(v6 + 1608) = "HKCharacteristicTypeIdentifierBiologicalSex";
  *(void *)(v6 + 1616) = 43;
  *(unsigned char *)(v6 + 1624) = 2;
  *(void *)(v6 + 1632) = "HKCharacteristicTypeIdentifierBloodType";
  *(void *)(v6 + 1640) = 39;
  *(unsigned char *)(v6 + 1648) = 2;
  *(void *)(v6 + 1656) = "HKCharacteristicTypeIdentifierCardioFitnessMedicationsUse";
  *(void *)(v6 + 1664) = 57;
  *(unsigned char *)(v6 + 1672) = 2;
  *(void *)(v6 + 1680) = "HKCharacteristicTypeIdentifierDateOfBirth";
  *(void *)(v6 + 1688) = 41;
  *(unsigned char *)(v6 + 1696) = 2;
  *(void *)(v6 + 1704) = "HKCharacteristicTypeIdentifierFitzpatrickSkinType";
  *(void *)(v6 + 1712) = 49;
  *(unsigned char *)(v6 + 1720) = 2;
  *(void *)(v6 + 1728) = "HKCharacteristicTypeIdentifierWheelchairUse";
  *(void *)(v6 + 1736) = 43;
  *(unsigned char *)(v6 + 1744) = 2;
  *(void *)(v6 + 1752) = "HKClinicalTypeIdentifierAllergyRecord";
  *(void *)(v6 + 1760) = 37;
  *(unsigned char *)(v6 + 1768) = 2;
  *(void *)(v6 + 1776) = "HKClinicalTypeIdentifierClinicalNoteRecord";
  *(void *)(v6 + 1784) = 42;
  *(unsigned char *)(v6 + 1792) = 2;
  *(void *)(v6 + 1800) = "HKClinicalTypeIdentifierConditionRecord";
  *(void *)(v6 + 1808) = 39;
  *(unsigned char *)(v6 + 1816) = 2;
  *(void *)(v6 + 1824) = "HKClinicalTypeIdentifierCoverageRecord";
  *(void *)(v6 + 1832) = 38;
  *(unsigned char *)(v6 + 1840) = 2;
  *(void *)(v6 + 1848) = "HKClinicalTypeIdentifierImmunizationRecord";
  *(void *)(v6 + 1856) = 42;
  *(unsigned char *)(v6 + 1864) = 2;
  *(void *)(v6 + 1872) = "HKClinicalTypeIdentifierLabResultRecord";
  *(void *)(v6 + 1880) = 39;
  *(unsigned char *)(v6 + 1888) = 2;
  *(void *)(v6 + 1896) = "HKClinicalTypeIdentifierMedicationRecord";
  *(void *)(v6 + 1920) = "HKClinicalTypeIdentifierProcedureRecord";
  *(void *)(v6 + 1944) = "HKClinicalTypeIdentifierVitalSignRecord";
  *(void *)(v6 + 1968) = "HKCorrelationTypeIdentifierBloodPressure";
  *(void *)(v6 + 2304) = "HKQuantityTypeIdentifierBasalBodyTemperature";
  *(void *)(v6 + 2328) = "HKQuantityTypeIdentifierBasalEnergyBurned";
  *(void *)(v6 + 2376) = "HKQuantityTypeIdentifierCyclingFunctionalThresholdPower";
  *(void *)(v6 + 2400) = "HKQuantityTypeIdentifierCyclingPower";
  *(void *)(v6 + 2496) = "HKQuantityTypeIdentifierBodyFatPercentage";
  *(void *)(v6 + 2592) = "HKQuantityTypeIdentifierDietaryBiotin";
  *(void *)(v6 + 2688) = "HKQuantityTypeIdentifierDietaryChloride";
  *(void *)(v6 + 2784) = "HKQuantityTypeIdentifierDietaryEnergyConsumed";
  *(void *)(v6 + 2856) = "HKQuantityTypeIdentifierDietaryFatSaturated";
  *(unsigned char *)(v6 + 2848) = 2;
  *(void *)(v6 + 2832) = "HKQuantityTypeIdentifierDietaryFatPolyunsaturated";
  *(void *)(v6 + 2816) = 49;
  *(unsigned char *)(v6 + 2824) = 2;
  *(void *)(v6 + 2840) = 49;
  *(void *)(v6 + 1904) = 40;
  *(void *)(v6 + 2808) = "HKQuantityTypeIdentifierDietaryFatMonounsaturated";
  *(void *)(v6 + 2792) = 45;
  *(unsigned char *)(v6 + 2800) = 2;
  *(void *)(v6 + 2760) = "HKQuantityTypeIdentifierDietaryCopper";
  *(unsigned char *)(v6 + 2752) = 2;
  *(void *)(v6 + 2768) = 37;
  *(unsigned char *)(v6 + 2776) = 2;
  *(void *)(v6 + 2736) = "HKQuantityTypeIdentifierDietaryChromium";
  *(void *)(v6 + 2720) = 42;
  *(unsigned char *)(v6 + 2728) = 2;
  *(void *)(v6 + 2744) = 39;
  *(unsigned char *)(v6 + 1912) = 2;
  *(void *)(v6 + 2712) = "HKQuantityTypeIdentifierDietaryCholesterol";
  *(void *)(v6 + 2696) = 39;
  *(unsigned char *)(v6 + 2704) = 2;
  *(void *)(v6 + 2664) = "HKQuantityTypeIdentifierDietaryCarbohydrates";
  *(unsigned char *)(v6 + 2656) = 2;
  *(void *)(v6 + 2672) = 44;
  *(unsigned char *)(v6 + 2680) = 2;
  *(void *)(v6 + 2640) = "HKQuantityTypeIdentifierDietaryCalcium";
  *(void *)(v6 + 2624) = 39;
  *(unsigned char *)(v6 + 2632) = 2;
  *(void *)(v6 + 2648) = 38;
  *(void *)(v6 + 1928) = 39;
  *(void *)(v6 + 2616) = "HKQuantityTypeIdentifierDietaryCaffeine";
  *(void *)(v6 + 2600) = 37;
  *(unsigned char *)(v6 + 2608) = 2;
  *(void *)(v6 + 2568) = "HKQuantityTypeIdentifierBodyTemperature";
  *(unsigned char *)(v6 + 2560) = 2;
  *(void *)(v6 + 2576) = 39;
  *(unsigned char *)(v6 + 2584) = 2;
  *(void *)(v6 + 2544) = "HKQuantityTypeIdentifierBodyMassIndex";
  *(void *)(v6 + 2528) = 32;
  *(unsigned char *)(v6 + 2536) = 2;
  *(void *)(v6 + 2552) = 37;
  *(unsigned char *)(v6 + 1936) = 2;
  *(void *)(v6 + 2520) = "HKQuantityTypeIdentifierBodyMass";
  *(void *)(v6 + 2504) = 41;
  *(unsigned char *)(v6 + 2512) = 2;
  *(void *)(v6 + 2472) = "HKQuantityTypeIdentifierBloodGlucose";
  *(unsigned char *)(v6 + 2464) = 2;
  *(void *)(v6 + 2480) = 36;
  *(unsigned char *)(v6 + 2488) = 2;
  *(void *)(v6 + 2448) = "HKQuantityTypeIdentifierBloodAlcoholContent";
  *(void *)(v6 + 2432) = 36;
  *(unsigned char *)(v6 + 2440) = 2;
  *(void *)(v6 + 2456) = 43;
  *(void *)(v6 + 2424) = "HKQuantityTypeIdentifierCyclingSpeed";
  *(unsigned char *)(v6 + 2392) = 2;
  *(void *)(v6 + 2408) = 36;
  *(unsigned char *)(v6 + 2416) = 2;
  *(void *)(v6 + 1952) = 39;
  *(void *)(v6 + 2384) = 55;
  *(void *)(v6 + 2360) = 38;
  *(unsigned char *)(v6 + 2368) = 2;
  *(void *)(v6 + 2352) = "HKQuantityTypeIdentifierCyclingCadence";
  *(unsigned char *)(v6 + 2320) = 2;
  *(void *)(v6 + 2336) = 41;
  *(unsigned char *)(v6 + 2344) = 2;
  *(unsigned char *)(v6 + 1960) = 2;
  *(void *)(v6 + 2312) = 44;
  *(void *)(v6 + 2288) = 48;
  *(unsigned char *)(v6 + 2296) = 2;
  *(void *)(v6 + 1976) = 40;
  *(void *)(v6 + 2280) = "HKQuantityTypeIdentifierAtrialFibrillationBurden";
  *(void *)(v6 + 2264) = 46;
  *(unsigned char *)(v6 + 2272) = 2;
  *(void *)(v6 + 2208) = "HKQuantityTypeIdentifierAppleSleepingWristTemperature";
  *(void *)(v6 + 2240) = 38;
  *(unsigned char *)(v6 + 2248) = 2;
  *(void *)(v6 + 2256) = "HKQuantityTypeIdentifierAppleWalkingSteadiness";
  *(void *)(v6 + 2216) = 53;
  *(unsigned char *)(v6 + 2224) = 2;
  *(void *)(v6 + 2232) = "HKQuantityTypeIdentifierAppleStandTime";
  *(unsigned char *)(v6 + 2176) = 2;
  *(void *)(v6 + 2184) = "HKQuantityTypeIdentifierAppleMoveTime";
  *(void *)(v6 + 2192) = 37;
  *(unsigned char *)(v6 + 2200) = 2;
  *(unsigned char *)(v6 + 1984) = 2;
  *(unsigned char *)(v6 + 2152) = 2;
  *(void *)(v6 + 2160) = "HKQuantityTypeIdentifierAppleExerciseTime";
  *(void *)(v6 + 2168) = 41;
  *(void *)(v6 + 1992) = "HKDataTypeIdentifierAudiogram";
  *(unsigned char *)(v6 + 2128) = 2;
  *(void *)(v6 + 2136) = "HKQuantityTypeIdentifierActiveEnergyBurned";
  *(void *)(v6 + 2144) = 42;
  *(unsigned char *)(v6 + 2104) = 2;
  *(void *)(v6 + 2112) = "HKMedicationDoseEventTypeIdentifierMedicationDoseEvent";
  *(void *)(v6 + 2120) = 54;
  *(void *)(v6 + 2088) = "HKDocumentTypeIdentifierCDA";
  *(void *)(v6 + 2072) = 23;
  *(unsigned char *)(v6 + 2080) = 2;
  *(void *)(v6 + 2096) = 27;
  *(void *)(v6 + 2000) = 29;
  *(void *)(v6 + 2048) = 27;
  *(unsigned char *)(v6 + 2056) = 2;
  *(void *)(v6 + 2064) = "HKDataTypeSleepSchedule";
  *(void *)(v6 + 2016) = "HKDataTypeIdentifierElectrocardiogram";
  *(void *)(v6 + 2024) = 37;
  *(unsigned char *)(v6 + 2032) = 2;
  *(void *)(v6 + 2040) = "HKDataTypeSleepDurationGoal";
  *(unsigned char *)(v6 + 2008) = 2;
  *(void *)(v6 + 2864) = 43;
  *(unsigned char *)(v6 + 2872) = 2;
  *(void *)(v6 + 2880) = "HKQuantityTypeIdentifierDietaryFatTotal";
  *(void *)(v6 + 2888) = 39;
  *(unsigned char *)(v6 + 2896) = 2;
  *(void *)(v6 + 2904) = "HKQuantityTypeIdentifierDietaryFiber";
  *(void *)(v6 + 2912) = 36;
  *(unsigned char *)(v6 + 2920) = 2;
  *(void *)(v6 + 2928) = "HKQuantityTypeIdentifierDietaryFolate";
  *(void *)(v6 + 2936) = 37;
  *(unsigned char *)(v6 + 2944) = 2;
  *(void *)(v6 + 2952) = "HKQuantityTypeIdentifierDietaryIodine";
  *(void *)(v6 + 2960) = 37;
  *(unsigned char *)(v6 + 2968) = 2;
  *(void *)(v6 + 2976) = "HKQuantityTypeIdentifierDietaryIron";
  *(void *)(v6 + 2984) = 35;
  *(unsigned char *)(v6 + 2992) = 2;
  *(void *)(v6 + 3000) = "HKQuantityTypeIdentifierDietaryMagnesium";
  *(void *)(v6 + 3008) = 40;
  *(unsigned char *)(v6 + 3016) = 2;
  *(void *)(v6 + 3024) = "HKQuantityTypeIdentifierDietaryManganese";
  *(void *)(v6 + 3032) = 40;
  *(unsigned char *)(v6 + 3040) = 2;
  *(void *)(v6 + 3048) = "HKQuantityTypeIdentifierDietaryMolybdenum";
  *(void *)(v6 + 3056) = 41;
  *(unsigned char *)(v6 + 3064) = 2;
  *(void *)(v6 + 3072) = "HKQuantityTypeIdentifierDietaryNiacin";
  *(void *)(v6 + 3080) = 37;
  *(unsigned char *)(v6 + 3088) = 2;
  *(void *)(v6 + 3096) = "HKQuantityTypeIdentifierDietaryPantothenicAcid";
  *(void *)(v6 + 3104) = 46;
  *(unsigned char *)(v6 + 3112) = 2;
  *(void *)(v6 + 3120) = "HKQuantityTypeIdentifierDietaryPhosphorus";
  *(void *)(v6 + 3128) = 41;
  *(unsigned char *)(v6 + 3136) = 2;
  *(void *)(v6 + 3144) = "HKQuantityTypeIdentifierDietaryPotassium";
  *(void *)(v6 + 3152) = 40;
  *(unsigned char *)(v6 + 3160) = 2;
  *(void *)(v6 + 3168) = "HKQuantityTypeIdentifierDietaryProtein";
  *(void *)(v6 + 3176) = 38;
  *(unsigned char *)(v6 + 3184) = 2;
  *(void *)(v6 + 3192) = "HKQuantityTypeIdentifierDietaryRiboflavin";
  *(void *)(v6 + 3200) = 41;
  *(unsigned char *)(v6 + 3208) = 2;
  *(void *)(v6 + 3216) = "HKQuantityTypeIdentifierDietarySelenium";
  *(void *)(v6 + 3224) = 39;
  *(unsigned char *)(v6 + 3232) = 2;
  *(void *)(v6 + 3240) = "HKQuantityTypeIdentifierDietarySodium";
  *(void *)(v6 + 3248) = 37;
  *(unsigned char *)(v6 + 3256) = 2;
  *(void *)(v6 + 3264) = "HKQuantityTypeIdentifierDietarySugar";
  *(void *)(v6 + 3272) = 36;
  *(unsigned char *)(v6 + 3280) = 2;
  *(void *)(v6 + 3288) = "HKQuantityTypeIdentifierDietaryThiamin";
  *(void *)(v6 + 3296) = 38;
  *(unsigned char *)(v6 + 3304) = 2;
  *(void *)(v6 + 3312) = "HKQuantityTypeIdentifierDietaryVitaminA";
  *(void *)(v6 + 3320) = 39;
  *(unsigned char *)(v6 + 3328) = 2;
  *(void *)(v6 + 3336) = "HKQuantityTypeIdentifierDietaryVitaminB12";
  *(void *)(v6 + 3344) = 41;
  *(unsigned char *)(v6 + 3352) = 2;
  *(void *)(v6 + 3360) = "HKQuantityTypeIdentifierDietaryVitaminB6";
  *(void *)(v6 + 3368) = 40;
  *(unsigned char *)(v6 + 3376) = 2;
  *(void *)(v6 + 3384) = "HKQuantityTypeIdentifierDietaryVitaminC";
  *(void *)(v6 + 3392) = 39;
  *(unsigned char *)(v6 + 3400) = 2;
  *(void *)(v6 + 3408) = "HKQuantityTypeIdentifierDietaryVitaminD";
  *(void *)(v6 + 3416) = 39;
  *(unsigned char *)(v6 + 3424) = 2;
  *(void *)(v6 + 3432) = "HKQuantityTypeIdentifierDietaryVitaminE";
  *(void *)(v6 + 3440) = 39;
  *(unsigned char *)(v6 + 3448) = 2;
  *(void *)(v6 + 3456) = "HKQuantityTypeIdentifierDietaryVitaminK";
  *(void *)(v6 + 3464) = 39;
  *(unsigned char *)(v6 + 3472) = 2;
  *(void *)(v6 + 3480) = "HKQuantityTypeIdentifierDietaryWater";
  *(void *)(v6 + 3488) = 36;
  *(unsigned char *)(v6 + 3496) = 2;
  *(void *)(v6 + 3504) = "HKQuantityTypeIdentifierDietaryZinc";
  *(void *)(v6 + 3512) = 35;
  *(unsigned char *)(v6 + 3520) = 2;
  *(void *)(v6 + 3528) = "HKQuantityTypeIdentifierDistanceCycling";
  *(void *)(v6 + 3536) = 39;
  *(unsigned char *)(v6 + 3544) = 2;
  *(void *)(v6 + 3552) = "HKQuantityTypeIdentifierDistanceDownhillSnowSports";
  *(void *)(v6 + 3560) = 50;
  *(unsigned char *)(v6 + 3568) = 2;
  *(void *)(v6 + 3576) = "HKQuantityTypeIdentifierDistanceSwimming";
  *(void *)(v6 + 3584) = 40;
  *(unsigned char *)(v6 + 3592) = 2;
  *(void *)(v6 + 3600) = "HKQuantityTypeIdentifierDistanceWalkingRunning";
  *(void *)(v6 + 3608) = 46;
  *(unsigned char *)(v6 + 3616) = 2;
  *(void *)(v6 + 3624) = "HKQuantityTypeIdentifierDistanceWheelchair";
  *(void *)(v6 + 3632) = 42;
  *(unsigned char *)(v6 + 3640) = 2;
  *(void *)(v6 + 3648) = "HKQuantityTypeIdentifierElectrodermalActivity";
  *(void *)(v6 + 3656) = 45;
  *(unsigned char *)(v6 + 3664) = 2;
  *(void *)(v6 + 3672) = "HKQuantityTypeIdentifierEnvironmentalAudioExposure";
  *(void *)(v6 + 3680) = 50;
  *(unsigned char *)(v6 + 3688) = 2;
  *(void *)(v6 + 3696) = "HKQuantityTypeIdentifierEnvironmentalSoundReduction";
  *(void *)(v6 + 3704) = 51;
  *(unsigned char *)(v6 + 3712) = 2;
  *(void *)(v6 + 3720) = "HKQuantityTypeIdentifierFlightsClimbed";
  *(void *)(v6 + 3728) = 38;
  *(unsigned char *)(v6 + 3736) = 2;
  *(void *)(v6 + 3744) = "HKQuantityTypeIdentifierForcedExpiratoryVolume1";
  *(void *)(v6 + 3752) = 47;
  *(unsigned char *)(v6 + 3760) = 2;
  *(void *)(v6 + 3768) = "HKQuantityTypeIdentifierForcedVitalCapacity";
  *(void *)(v6 + 3776) = 43;
  *(unsigned char *)(v6 + 3784) = 2;
  *(void *)(v6 + 3792) = "HKQuantityTypeIdentifierHeadphoneAudioExposure";
  *(void *)(v6 + 3800) = 46;
  *(unsigned char *)(v6 + 3808) = 2;
  *(void *)(v6 + 3816) = "HKQuantityTypeIdentifierHeartRate";
  *(void *)(v6 + 3824) = 33;
  *(unsigned char *)(v6 + 3832) = 2;
  *(void *)(v6 + 3840) = "HKQuantityTypeIdentifierHeartRateRecoveryOneMinute";
  *(void *)(v6 + 3848) = 50;
  *(unsigned char *)(v6 + 3856) = 2;
  *(void *)(v6 + 3864) = "HKQuantityTypeIdentifierHeartRateVariabilitySDNN";
  *(void *)(v6 + 3872) = 48;
  *(unsigned char *)(v6 + 3880) = 2;
  *(void *)(v6 + 3888) = "HKQuantityTypeIdentifierHeight";
  *(void *)(v6 + 3896) = 30;
  *(unsigned char *)(v6 + 3904) = 2;
  *(void *)(v6 + 3912) = "HKQuantityTypeIdentifierInhalerUsage";
  *(void *)(v6 + 3920) = 36;
  *(unsigned char *)(v6 + 3928) = 2;
  *(void *)(v6 + 3936) = "HKQuantityTypeIdentifierInsulinDelivery";
  *(void *)(v6 + 3944) = 39;
  *(unsigned char *)(v6 + 3952) = 2;
  *(void *)(v6 + 3960) = "HKQuantityTypeIdentifierLeanBodyMass";
  *(void *)(v6 + 3968) = 36;
  *(unsigned char *)(v6 + 3976) = 2;
  *(void *)(v6 + 3984) = "HKQuantityTypeIdentifierNikeFuel";
  *(void *)(v6 + 3992) = 32;
  *(unsigned char *)(v6 + 4000) = 2;
  *(void *)(v6 + 4008) = "HKQuantityTypeIdentifierPhysicalEffort";
  *(void *)(v6 + 4016) = 38;
  *(unsigned char *)(v6 + 4024) = 2;
  *(void *)(v6 + 4032) = "HKQuantityTypeIdentifierNumberOfAlcoholicBeverages";
  *(void *)(v6 + 4040) = 50;
  *(unsigned char *)(v6 + 4048) = 2;
  *(void *)(v6 + 4056) = "HKQuantityTypeIdentifierNumberOfTimesFallen";
  *(void *)(v6 + 4064) = 43;
  *(unsigned char *)(v6 + 4072) = 2;
  *(void *)(v6 + 4080) = "HKQuantityTypeIdentifierOxygenSaturation";
  *(void *)(v6 + 4088) = 40;
  *(unsigned char *)(v6 + 4096) = 2;
  *(void *)(v6 + 4104) = "HKQuantityTypeIdentifierPeakExpiratoryFlowRate";
  *(void *)(v6 + 4112) = 46;
  *(unsigned char *)(v6 + 4120) = 2;
  *(void *)(v6 + 4128) = "HKQuantityTypeIdentifierPeripheralPerfusionIndex";
  *(void *)(v6 + 4136) = 48;
  *(unsigned char *)(v6 + 4144) = 2;
  *(void *)(v6 + 4152) = "HKQuantityTypeIdentifierPushCount";
  *(void *)(v6 + 4160) = 33;
  *(unsigned char *)(v6 + 4168) = 2;
  *(void *)(v6 + 4176) = "HKQuantityTypeIdentifierRespiratoryRate";
  *(void *)(v6 + 4184) = 39;
  *(unsigned char *)(v6 + 4192) = 2;
  *(void *)(v6 + 4200) = "HKQuantityTypeIdentifierRestingHeartRate";
  *(void *)(v6 + 4208) = 40;
  *(unsigned char *)(v6 + 4216) = 2;
  *(void *)(v6 + 4224) = "HKQuantityTypeIdentifierRunningGroundContactTime";
  *(void *)(v6 + 4232) = 48;
  *(unsigned char *)(v6 + 4240) = 2;
  *(void *)(v6 + 4248) = "HKQuantityTypeIdentifierRunningPower";
  *(void *)(v6 + 4256) = 36;
  *(unsigned char *)(v6 + 4264) = 2;
  *(void *)(v6 + 4272) = "HKQuantityTypeIdentifierRunningSpeed";
  *(void *)(v6 + 4280) = 36;
  *(unsigned char *)(v6 + 4288) = 2;
  *(void *)(v6 + 4296) = "HKQuantityTypeIdentifierRunningStrideLength";
  *(void *)(v6 + 4304) = 43;
  *(unsigned char *)(v6 + 4312) = 2;
  *(void *)(v6 + 4320) = "HKQuantityTypeIdentifierRunningVerticalOscillation";
  *(void *)(v6 + 4328) = 50;
  *(unsigned char *)(v6 + 4336) = 2;
  *(void *)(v6 + 4344) = "HKQuantityTypeIdentifierSixMinuteWalkTestDistance";
  *(void *)(v6 + 4352) = 49;
  *(unsigned char *)(v6 + 4360) = 2;
  *(void *)(v6 + 4368) = "HKQuantityTypeIdentifierStairAscentSpeed";
  *(void *)(v6 + 4376) = 40;
  *(unsigned char *)(v6 + 4384) = 2;
  *(void *)(v6 + 4392) = "HKQuantityTypeIdentifierStairDescentSpeed";
  *(void *)(v6 + 4400) = 41;
  *(unsigned char *)(v6 + 4408) = 2;
  *(void *)(v6 + 4416) = "HKQuantityTypeIdentifierStepCount";
  *(void *)(v6 + 4424) = 33;
  *(unsigned char *)(v6 + 4432) = 2;
  *(void *)(v6 + 4440) = "HKQuantityTypeIdentifierSwimmingStrokeCount";
  *(void *)(v6 + 4448) = 43;
  *(unsigned char *)(v6 + 4456) = 2;
  *(void *)(v6 + 4464) = "HKQuantityTypeIdentifierTimeInDaylight";
  *(void *)(v6 + 4472) = 38;
  *(unsigned char *)(v6 + 4480) = 2;
  *(void *)(v6 + 4488) = "HKQuantityTypeIdentifierUVExposure";
  *(void *)(v6 + 4496) = 34;
  *(unsigned char *)(v6 + 4504) = 2;
  *(void *)(v6 + 4512) = "HKQuantityTypeIdentifierUnderwaterDepth";
  *(void *)(v6 + 4520) = 39;
  *(unsigned char *)(v6 + 4528) = 2;
  *(void *)(v6 + 4536) = "HKQuantityTypeIdentifierVO2Max";
  *(void *)(v6 + 4544) = 30;
  *(unsigned char *)(v6 + 4552) = 2;
  *(void *)(v6 + 4560) = "HKQuantityTypeIdentifierWaistCircumference";
  *(void *)(v6 + 4568) = 42;
  *(unsigned char *)(v6 + 4576) = 2;
  *(void *)(v6 + 4584) = "HKQuantityTypeIdentifierWalkingAsymmetryPercentage";
  *(void *)(v6 + 4592) = 50;
  *(unsigned char *)(v6 + 4600) = 2;
  *(void *)(v6 + 4608) = "HKQuantityTypeIdentifierWalkingDoubleSupportPercentage";
  *(void *)(v6 + 4616) = 54;
  *(unsigned char *)(v6 + 4624) = 2;
  *(void *)(v6 + 4632) = "HKQuantityTypeIdentifierWalkingHeartRateAverage";
  *(void *)(v6 + 4640) = 47;
  *(unsigned char *)(v6 + 4648) = 2;
  *(void *)(v6 + 4656) = "HKQuantityTypeIdentifierWalkingSpeed";
  *(void *)(v6 + 4664) = 36;
  *(unsigned char *)(v6 + 4672) = 2;
  *(void *)(v6 + 4680) = "HKQuantityTypeIdentifierWalkingStepLength";
  *(void *)(v6 + 4688) = 41;
  *(unsigned char *)(v6 + 4696) = 2;
  *(void *)(v6 + 4704) = "HKSampleTypeStateOfMind";
  *(void *)(v6 + 4712) = 23;
  *(unsigned char *)(v6 + 4720) = 2;
  *(void *)(v6 + 4728) = "HKVisionPrescriptionTypeIdentifier";
  *(void *)(v6 + 4736) = 34;
  *(unsigned char *)(v6 + 4744) = 2;
  *(void *)(v6 + 4752) = "HKWorkoutTypeIdentifier";
  *(void *)(v6 + 4760) = 23;
  *(unsigned char *)(v6 + 4768) = 2;
  *(void *)(v6 + 4776) = "HKRings";
  *(void *)(v6 + 4784) = 7;
  *(unsigned char *)(v6 + 4792) = 2;
  *(void *)(v6 + 4800) = "HKScoredAssessmentTypeIdentifierGAD7";
  *(void *)(v6 + 4808) = 36;
  *(unsigned char *)(v6 + 4816) = 2;
  *(void *)(v6 + 4824) = "HKScoredAssessmentTypeIdentifierPHQ9";
  *(void *)(v6 + 4832) = 36;
  *(unsigned char *)(v6 + 4840) = 2;
  *(void *)(v6 + 4848) = "HKCategoryValueSleepAnalysisInBed";
  *(void *)(v6 + 4856) = 33;
  *(unsigned char *)(v6 + 4864) = 2;
  *(void *)(v6 + 4872) = "_HKCharacteristicTypeIdentifierUserEnteredMenstrualCycleLength";
  *(void *)(v6 + 4880) = 62;
  *(unsigned char *)(v6 + 4888) = 2;
  *(void *)(v6 + 4896) = "_HKCharacteristicTypeIdentifierUserEnteredMenstrualPeriodLength";
  *(void *)(v6 + 4904) = 63;
  *(unsigned char *)(v6 + 4912) = 2;
  v7._rawValue = (void *)HKActivityRingUIViewRepresentable.updateUIView(_:context:)(v5);
  v11._countAndFlagsBits = a1;
  v11._object = a2;
  Swift::Int v8 = sub_1AD190(v7, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = 0;
  uint64_t result = 118;
  switch(v8)
  {
    case 0:
      goto LABEL_128;
    case 1:
      uint64_t v9 = 1;
      goto LABEL_128;
    case 2:
      uint64_t v9 = 2;
      goto LABEL_128;
    case 3:
      uint64_t v9 = 3;
      goto LABEL_128;
    case 4:
      uint64_t v9 = 4;
      goto LABEL_128;
    case 5:
      uint64_t v9 = 5;
      goto LABEL_128;
    case 6:
      uint64_t v9 = 6;
      goto LABEL_128;
    case 7:
      uint64_t v9 = 7;
      goto LABEL_128;
    case 8:
      uint64_t v9 = 8;
      goto LABEL_128;
    case 9:
      uint64_t v9 = 9;
      goto LABEL_128;
    case 10:
      uint64_t v9 = 10;
      goto LABEL_128;
    case 11:
      uint64_t v9 = 11;
      goto LABEL_128;
    case 12:
      uint64_t v9 = 12;
      goto LABEL_128;
    case 13:
      uint64_t v9 = 13;
      goto LABEL_128;
    case 14:
      uint64_t v9 = 14;
      goto LABEL_128;
    case 15:
      uint64_t v9 = 15;
      goto LABEL_128;
    case 16:
      uint64_t v9 = 16;
      goto LABEL_128;
    case 17:
      uint64_t v9 = 17;
      goto LABEL_128;
    case 18:
      uint64_t v9 = 18;
      goto LABEL_128;
    case 19:
      uint64_t v9 = 19;
      goto LABEL_128;
    case 20:
      uint64_t v9 = 20;
      goto LABEL_128;
    case 21:
      uint64_t v9 = 21;
      goto LABEL_128;
    case 22:
      uint64_t v9 = 22;
      goto LABEL_128;
    case 23:
      uint64_t v9 = 23;
      goto LABEL_128;
    case 24:
      uint64_t v9 = 24;
      goto LABEL_128;
    case 25:
      uint64_t v9 = 25;
      goto LABEL_128;
    case 26:
      uint64_t v9 = 26;
      goto LABEL_128;
    case 27:
      uint64_t v9 = 27;
      goto LABEL_128;
    case 28:
      uint64_t v9 = 28;
      goto LABEL_128;
    case 29:
      uint64_t v9 = 29;
      goto LABEL_128;
    case 30:
      uint64_t v9 = 30;
      goto LABEL_128;
    case 31:
      uint64_t v9 = 31;
      goto LABEL_128;
    case 32:
      uint64_t v9 = 32;
      goto LABEL_128;
    case 33:
      uint64_t v9 = 33;
      goto LABEL_128;
    case 34:
      uint64_t v9 = 34;
      goto LABEL_128;
    case 35:
      uint64_t v9 = 35;
      goto LABEL_128;
    case 36:
      uint64_t v9 = 36;
      goto LABEL_128;
    case 37:
      uint64_t v9 = 37;
      goto LABEL_128;
    case 38:
      uint64_t v9 = 38;
      goto LABEL_128;
    case 39:
      uint64_t v9 = 39;
      goto LABEL_128;
    case 40:
      uint64_t v9 = 40;
      goto LABEL_128;
    case 41:
      uint64_t v9 = 41;
      goto LABEL_128;
    case 42:
      uint64_t v9 = 42;
      goto LABEL_128;
    case 43:
      uint64_t v9 = 43;
      goto LABEL_128;
    case 44:
      uint64_t v9 = 44;
      goto LABEL_128;
    case 45:
      uint64_t v9 = 45;
      goto LABEL_128;
    case 46:
      uint64_t v9 = 46;
      goto LABEL_128;
    case 47:
      uint64_t v9 = 47;
      goto LABEL_128;
    case 48:
      uint64_t v9 = 48;
      goto LABEL_128;
    case 49:
      uint64_t v9 = 49;
      goto LABEL_128;
    case 50:
      uint64_t v9 = 50;
      goto LABEL_128;
    case 51:
      uint64_t v9 = 51;
      goto LABEL_128;
    case 52:
      uint64_t v9 = 52;
      goto LABEL_128;
    case 53:
      uint64_t v9 = 53;
      goto LABEL_128;
    case 54:
      uint64_t v9 = 54;
      goto LABEL_128;
    case 55:
      uint64_t v9 = 55;
      goto LABEL_128;
    case 56:
      uint64_t v9 = 56;
      goto LABEL_128;
    case 57:
      uint64_t v9 = 57;
      goto LABEL_128;
    case 58:
      uint64_t v9 = 58;
      goto LABEL_128;
    case 59:
      uint64_t v9 = 59;
      goto LABEL_128;
    case 60:
      uint64_t v9 = 60;
      goto LABEL_128;
    case 61:
      uint64_t v9 = 61;
      goto LABEL_128;
    case 62:
      uint64_t v9 = 62;
      goto LABEL_128;
    case 63:
      uint64_t v9 = 63;
      goto LABEL_128;
    case 64:
      uint64_t v9 = 64;
      goto LABEL_128;
    case 65:
      uint64_t v9 = 65;
      goto LABEL_128;
    case 66:
      uint64_t v9 = 66;
      goto LABEL_128;
    case 67:
      uint64_t v9 = 67;
      goto LABEL_128;
    case 68:
      uint64_t v9 = 68;
      goto LABEL_128;
    case 69:
      uint64_t v9 = 69;
      goto LABEL_128;
    case 70:
      uint64_t v9 = 70;
      goto LABEL_128;
    case 71:
      uint64_t v9 = 71;
      goto LABEL_128;
    case 72:
      uint64_t v9 = 72;
      goto LABEL_128;
    case 73:
      uint64_t v9 = 73;
      goto LABEL_128;
    case 74:
      uint64_t v9 = 74;
      goto LABEL_128;
    case 75:
      uint64_t v9 = 75;
      goto LABEL_128;
    case 76:
      uint64_t v9 = 76;
      goto LABEL_128;
    case 77:
      uint64_t v9 = 77;
      goto LABEL_128;
    case 78:
      uint64_t v9 = 78;
      goto LABEL_128;
    case 79:
      uint64_t v9 = 79;
      goto LABEL_128;
    case 80:
      uint64_t v9 = 80;
      goto LABEL_128;
    case 81:
      uint64_t v9 = 81;
      goto LABEL_128;
    case 82:
      uint64_t v9 = 82;
      goto LABEL_128;
    case 83:
      uint64_t v9 = 83;
      goto LABEL_128;
    case 84:
      uint64_t v9 = 84;
      goto LABEL_128;
    case 85:
      uint64_t v9 = 85;
      goto LABEL_128;
    case 86:
      uint64_t v9 = 86;
      goto LABEL_128;
    case 87:
      uint64_t v9 = 87;
      goto LABEL_128;
    case 88:
      uint64_t v9 = 88;
      goto LABEL_128;
    case 89:
      uint64_t v9 = 89;
      goto LABEL_128;
    case 90:
      uint64_t v9 = 90;
      goto LABEL_128;
    case 91:
      uint64_t v9 = 91;
      goto LABEL_128;
    case 92:
      uint64_t v9 = 92;
      goto LABEL_128;
    case 93:
      uint64_t v9 = 93;
      goto LABEL_128;
    case 94:
      uint64_t v9 = 94;
      goto LABEL_128;
    case 95:
      uint64_t v9 = 95;
      goto LABEL_128;
    case 96:
      uint64_t v9 = 96;
      goto LABEL_128;
    case 97:
      uint64_t v9 = 97;
      goto LABEL_128;
    case 98:
      uint64_t v9 = 98;
      goto LABEL_128;
    case 99:
      uint64_t v9 = 99;
      goto LABEL_128;
    case 100:
      uint64_t v9 = 100;
      goto LABEL_128;
    case 101:
      uint64_t v9 = 101;
      goto LABEL_128;
    case 102:
      uint64_t v9 = 102;
      goto LABEL_128;
    case 103:
      uint64_t v9 = 103;
      goto LABEL_128;
    case 104:
      uint64_t v9 = 104;
      goto LABEL_128;
    case 105:
      uint64_t v9 = 105;
      goto LABEL_128;
    case 106:
      uint64_t v9 = 106;
      goto LABEL_128;
    case 107:
      uint64_t v9 = 107;
      goto LABEL_128;
    case 108:
      uint64_t v9 = 108;
      goto LABEL_128;
    case 109:
      uint64_t v9 = 109;
      goto LABEL_128;
    case 110:
      uint64_t v9 = 110;
      goto LABEL_128;
    case 111:
      uint64_t v9 = 111;
      goto LABEL_128;
    case 112:
      uint64_t v9 = 112;
      goto LABEL_128;
    case 113:
      uint64_t v9 = 113;
      goto LABEL_128;
    case 114:
      uint64_t v9 = 114;
      goto LABEL_128;
    case 115:
      uint64_t v9 = 115;
      goto LABEL_128;
    case 116:
      uint64_t v9 = 116;
      goto LABEL_128;
    case 117:
      uint64_t v9 = 117;
LABEL_128:
      uint64_t result = v9;
      break;
    case 118:
      return result;
    case 119:
      uint64_t result = 119;
      break;
    case 120:
      uint64_t result = 120;
      break;
    case 121:
      uint64_t result = 121;
      break;
    case 122:
      uint64_t result = 122;
      break;
    case 123:
      uint64_t result = 123;
      break;
    case 124:
      uint64_t result = 124;
      break;
    case 125:
      uint64_t result = 125;
      break;
    case 126:
      uint64_t result = 126;
      break;
    case 127:
      uint64_t result = 127;
      break;
    default:
      if ((v8 & 0xFFFFFFFFFFFFFFC0) == 0x80)
      {
        uint64_t result = v8 | 0xFFFFFF80;
      }
      else if ((unint64_t)(v8 - 192) >= 0xD)
      {
        uint64_t result = 205;
      }
      else
      {
        uint64_t result = (v8 - 256);
      }
      break;
  }
  return result;
}

_UNKNOWN **sub_31B1C()
{
  return &off_1F45A8;
}

uint64_t sub_31B28(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_154334(*a1, *a2);
}

Swift::Int sub_31B34()
{
  return sub_303A4(*v0, (void (*)(uint64_t))sub_2F2B8);
}

uint64_t sub_31B64(uint64_t a1)
{
  return sub_19D77C(a1, *v1);
}

Swift::Int sub_31B6C(uint64_t a1)
{
  return sub_19D98C(a1, *v1);
}

uint64_t sub_31B74@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_303FC(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t sub_31BA4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_2F2B8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_31BD0(void *a1@<X8>)
{
  *a1 = &off_1F45A8;
}

unint64_t sub_31BE4()
{
  unint64_t result = qword_202CE8;
  if (!qword_202CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_202CE8);
  }
  return result;
}

Class sub_31C30(unsigned __int8 a1)
{
  uint64_t v1 = a1;
  Class result = 0;
  switch(v1)
  {
    case 1:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierAbdominalCramps];
      return (Class)v3;
    case 2:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierAcne];
      return (Class)v3;
    case 3:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierAppetiteChanges];
      return (Class)v3;
    case 4:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierAppleStandHour];
      return (Class)v3;
    case 5:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierAppleWalkingSteadinessEvent];
      return (Class)v3;
    case 6:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierAudioExposureEvent];
      return (Class)v3;
    case 7:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierBladderIncontinence];
      return (Class)v3;
    case 8:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierBloating];
      return (Class)v3;
    case 9:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierBreastPain];
      return (Class)v3;
    case 10:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierCervicalMucusQuality];
      return (Class)v3;
    case 11:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierChestTightnessOrPain];
      return (Class)v3;
    case 12:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierChills];
      return (Class)v3;
    case 13:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierConstipation];
      return (Class)v3;
    case 14:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierContraceptive];
      return (Class)v3;
    case 15:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierCoughing];
      return (Class)v3;
    case 16:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierDiarrhea];
      return (Class)v3;
    case 17:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierDizziness];
      return (Class)v3;
    case 18:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierDrySkin];
      return (Class)v3;
    case 19:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierEnvironmentalAudioExposureEvent];
      return (Class)v3;
    case 20:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierFainting];
      return (Class)v3;
    case 21:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierFatigue];
      return (Class)v3;
    case 22:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierFever];
      return (Class)v3;
    case 23:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierGeneralizedBodyAche];
      return (Class)v3;
    case 24:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierHairLoss];
      return (Class)v3;
    case 25:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierHandwashingEvent];
      return (Class)v3;
    case 26:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierHeadache];
      return (Class)v3;
    case 27:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierHeadphoneAudioExposureEvent];
      return (Class)v3;
    case 28:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierHeartburn];
      return (Class)v3;
    case 29:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierHighHeartRateEvent];
      return (Class)v3;
    case 30:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierHotFlashes];
      return (Class)v3;
    case 31:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierInfrequentMenstrualCycles];
      return (Class)v3;
    case 32:
    case 49:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierIntermenstrualBleeding];
      return (Class)v3;
    case 33:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierIrregularHeartRhythmEvent];
      return (Class)v3;
    case 34:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierIrregularMenstrualCycles];
      return (Class)v3;
    case 35:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierLactation];
      return (Class)v3;
    case 36:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierLossOfSmell];
      return (Class)v3;
    case 37:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierLossOfTaste];
      return (Class)v3;
    case 38:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierLowCardioFitnessEvent];
      return (Class)v3;
    case 39:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierLowHeartRateEvent];
      return (Class)v3;
    case 40:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierLowerBackPain];
      return (Class)v3;
    case 41:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierMemoryLapse];
      return (Class)v3;
    case 42:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierMenstrualFlow];
      return (Class)v3;
    case 43:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierMindfulSession];
      return (Class)v3;
    case 44:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierMoodChanges];
      return (Class)v3;
    case 45:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierNausea];
      return (Class)v3;
    case 46:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierNightSweats];
      return (Class)v3;
    case 47:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierOvulationTestResult];
      return (Class)v3;
    case 48:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierPelvicPain];
      return (Class)v3;
    case 50:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierPregnancy];
      return (Class)v3;
    case 51:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierPregnancyTestResult];
      return (Class)v3;
    case 52:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierProgesteroneTestResult];
      return (Class)v3;
    case 53:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierProlongedMenstrualPeriods];
      return (Class)v3;
    case 54:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierRapidPoundingOrFlutteringHeartbeat];
      return (Class)v3;
    case 55:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierRunnyNose];
      return (Class)v3;
    case 56:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierSexualActivity];
      return (Class)v3;
    case 57:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierShortnessOfBreath];
      return (Class)v3;
    case 58:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierSinusCongestion];
      return (Class)v3;
    case 59:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierSkippedHeartbeat];
      return (Class)v3;
    case 60:
    case 202:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierSleepAnalysis];
      return (Class)v3;
    case 61:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierSleepChanges];
      return (Class)v3;
    case 62:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierSoreThroat];
      return (Class)v3;
    case 63:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierToothbrushingEvent];
      return (Class)v3;
    case 64:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierVaginalDryness];
      return (Class)v3;
    case 65:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierVomiting];
      return (Class)v3;
    case 66:
      id v3 = [self categoryTypeForIdentifier:HKCategoryTypeIdentifierWheezing];
      return (Class)v3;
    case 67:
      id v3 = [self characteristicTypeForIdentifier:HKCharacteristicTypeIdentifierBiologicalSex];
      return (Class)v3;
    case 68:
      id v3 = [self characteristicTypeForIdentifier:HKCharacteristicTypeIdentifierBloodType];
      return (Class)v3;
    case 69:
    case 198:
      return result;
    case 70:
      id v3 = [self characteristicTypeForIdentifier:HKCharacteristicTypeIdentifierDateOfBirth];
      return (Class)v3;
    case 71:
      id v3 = [self characteristicTypeForIdentifier:HKCharacteristicTypeIdentifierFitzpatrickSkinType];
      return (Class)v3;
    case 72:
      id v3 = [self characteristicTypeForIdentifier:HKCharacteristicTypeIdentifierWheelchairUse];
      return (Class)v3;
    case 73:
      id v3 = [self allergyRecordTypeForIdentifier:HKAllergyRecordTypeIdentifierAllergyRecord];
      return (Class)v3;
    case 74:
      id v3 = [self clinicalNoteRecordTypeForIdentifier:HKClinicalNoteRecordTypeIdentifierClinicalNoteRecord];
      return (Class)v3;
    case 75:
      id v3 = [self conditionRecordTypeForIdentifier:HKConditionRecordTypeIdentifierConditionRecord];
      return (Class)v3;
    case 76:
      id v3 = [self coverageRecordTypeForIdentifier:HKCoverageRecordTypeIdentifierCoverageRecord];
      return (Class)v3;
    case 77:
      sub_34214(0, &qword_202CF8);
      unint64_t v4 = (id *)&HKClinicalTypeIdentifierImmunizationRecord;
      return sub_1ACF90((HKClinicalTypeIdentifier)*v4).super.super.super.isa;
    case 78:
      sub_34214(0, &qword_202CF8);
      unint64_t v4 = (id *)&HKClinicalTypeIdentifierLabResultRecord;
      return sub_1ACF90((HKClinicalTypeIdentifier)*v4).super.super.super.isa;
    case 79:
      sub_34214(0, &qword_202CF8);
      unint64_t v4 = (id *)&HKClinicalTypeIdentifierMedicationRecord;
      return sub_1ACF90((HKClinicalTypeIdentifier)*v4).super.super.super.isa;
    case 80:
      sub_34214(0, &qword_202CF8);
      unint64_t v4 = (id *)&HKClinicalTypeIdentifierProcedureRecord;
      return sub_1ACF90((HKClinicalTypeIdentifier)*v4).super.super.super.isa;
    case 81:
      sub_34214(0, &qword_202CF8);
      unint64_t v4 = (id *)&HKClinicalTypeIdentifierVitalSignRecord;
      return sub_1ACF90((HKClinicalTypeIdentifier)*v4).super.super.super.isa;
    case 82:
      id v3 = [self correlationTypeForIdentifier:HKCorrelationTypeIdentifierBloodPressure];
      return (Class)v3;
    case 83:
      id v3 = [self dataTypeWithCode:145];
      return (Class)v3;
    case 84:
      id v3 = [self dataTypeWithCode:144];
      return (Class)v3;
    case 85:
      id v3 = [self dataTypeWithCode:197];
      return (Class)v3;
    case 86:
      id v3 = [self dataTypeWithCode:198];
      return (Class)v3;
    case 87:
      id v3 = [self dataTypeWithCode:107];
      return (Class)v3;
    case 88:
      id v3 = [self dataTypeWithCode:273];
      return (Class)v3;
    case 89:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierActiveEnergyBurned];
      return (Class)v3;
    case 90:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierAppleExerciseTime];
      return (Class)v3;
    case 91:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierAppleMoveTime];
      return (Class)v3;
    case 92:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierAppleSleepingWristTemperature];
      return (Class)v3;
    case 93:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierAppleStandTime];
      return (Class)v3;
    case 94:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierAppleWalkingSteadiness];
      return (Class)v3;
    case 95:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierAtrialFibrillationBurden];
      return (Class)v3;
    case 96:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierBasalBodyTemperature];
      return (Class)v3;
    case 97:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierBasalEnergyBurned];
      return (Class)v3;
    case 98:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierCyclingCadence];
      return (Class)v3;
    case 99:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierCyclingFunctionalThresholdPower];
      return (Class)v3;
    case 100:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierCyclingPower];
      return (Class)v3;
    case 101:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierCyclingSpeed];
      return (Class)v3;
    case 102:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierBloodAlcoholContent];
      return (Class)v3;
    case 103:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierBloodGlucose];
      return (Class)v3;
    case 104:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierBodyFatPercentage];
      return (Class)v3;
    case 105:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierBodyMass];
      return (Class)v3;
    case 106:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierBodyMassIndex];
      return (Class)v3;
    case 107:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierBodyTemperature];
      return (Class)v3;
    case 108:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryBiotin];
      return (Class)v3;
    case 109:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryCaffeine];
      return (Class)v3;
    case 110:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryCalcium];
      return (Class)v3;
    case 111:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryCarbohydrates];
      return (Class)v3;
    case 112:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryChloride];
      return (Class)v3;
    case 113:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryCholesterol];
      return (Class)v3;
    case 114:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryChromium];
      return (Class)v3;
    case 115:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryCopper];
      return (Class)v3;
    case 116:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryEnergyConsumed];
      return (Class)v3;
    case 117:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryFatMonounsaturated];
      return (Class)v3;
    case 118:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryFatPolyunsaturated];
      return (Class)v3;
    case 119:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryFatSaturated];
      return (Class)v3;
    case 120:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryFatTotal];
      return (Class)v3;
    case 121:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryFiber];
      return (Class)v3;
    case 122:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryFolate];
      return (Class)v3;
    case 123:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryIodine];
      return (Class)v3;
    case 124:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryIron];
      return (Class)v3;
    case 125:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryMagnesium];
      return (Class)v3;
    case 126:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryManganese];
      return (Class)v3;
    case 127:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryMolybdenum];
      return (Class)v3;
    case 128:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryNiacin];
      return (Class)v3;
    case 129:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryPantothenicAcid];
      return (Class)v3;
    case 130:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryPhosphorus];
      return (Class)v3;
    case 131:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryPotassium];
      return (Class)v3;
    case 132:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryProtein];
      return (Class)v3;
    case 133:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryRiboflavin];
      return (Class)v3;
    case 134:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietarySelenium];
      return (Class)v3;
    case 135:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietarySodium];
      return (Class)v3;
    case 136:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietarySugar];
      return (Class)v3;
    case 137:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryThiamin];
      return (Class)v3;
    case 138:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryVitaminA];
      return (Class)v3;
    case 139:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryVitaminB12];
      return (Class)v3;
    case 140:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryVitaminB6];
      return (Class)v3;
    case 141:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryVitaminC];
      return (Class)v3;
    case 142:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryVitaminD];
      return (Class)v3;
    case 143:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryVitaminE];
      return (Class)v3;
    case 144:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryVitaminK];
      return (Class)v3;
    case 145:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryWater];
      return (Class)v3;
    case 146:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDietaryZinc];
      return (Class)v3;
    case 147:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDistanceCycling];
      return (Class)v3;
    case 148:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDistanceDownhillSnowSports];
      return (Class)v3;
    case 149:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDistanceSwimming];
      return (Class)v3;
    case 150:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDistanceWalkingRunning];
      return (Class)v3;
    case 151:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierDistanceWheelchair];
      return (Class)v3;
    case 152:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierElectrodermalActivity];
      return (Class)v3;
    case 153:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierEnvironmentalAudioExposure];
      return (Class)v3;
    case 154:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierEnvironmentalSoundReduction];
      return (Class)v3;
    case 155:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierFlightsClimbed];
      return (Class)v3;
    case 156:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierForcedExpiratoryVolume1];
      return (Class)v3;
    case 157:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierForcedVitalCapacity];
      return (Class)v3;
    case 158:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierHeadphoneAudioExposure];
      return (Class)v3;
    case 159:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierHeartRate];
      return (Class)v3;
    case 160:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierHeartRateRecoveryOneMinute];
      return (Class)v3;
    case 161:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierHeartRateVariabilitySDNN];
      return (Class)v3;
    case 162:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierHeight];
      return (Class)v3;
    case 163:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierInhalerUsage];
      return (Class)v3;
    case 164:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierInsulinDelivery];
      return (Class)v3;
    case 165:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierLeanBodyMass];
      return (Class)v3;
    case 166:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierNikeFuel];
      return (Class)v3;
    case 167:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierPhysicalEffort];
      return (Class)v3;
    case 168:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierNumberOfAlcoholicBeverages];
      return (Class)v3;
    case 169:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierNumberOfTimesFallen];
      return (Class)v3;
    case 170:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierOxygenSaturation];
      return (Class)v3;
    case 171:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierPeakExpiratoryFlowRate];
      return (Class)v3;
    case 172:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierPeripheralPerfusionIndex];
      return (Class)v3;
    case 173:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierPushCount];
      return (Class)v3;
    case 174:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierRespiratoryRate];
      return (Class)v3;
    case 175:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierRestingHeartRate];
      return (Class)v3;
    case 176:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierRunningGroundContactTime];
      return (Class)v3;
    case 177:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierRunningPower];
      return (Class)v3;
    case 178:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierRunningSpeed];
      return (Class)v3;
    case 179:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierRunningStrideLength];
      return (Class)v3;
    case 180:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierRunningVerticalOscillation];
      return (Class)v3;
    case 181:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierSixMinuteWalkTestDistance];
      return (Class)v3;
    case 182:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierStairAscentSpeed];
      return (Class)v3;
    case 183:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierStairDescentSpeed];
      return (Class)v3;
    case 184:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierStepCount];
      return (Class)v3;
    case 185:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierSwimmingStrokeCount];
      return (Class)v3;
    case 186:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierTimeInDaylight];
      return (Class)v3;
    case 187:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierUVExposure];
      return (Class)v3;
    case 188:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierUnderwaterDepth];
      return (Class)v3;
    case 189:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierVO2Max];
      return (Class)v3;
    case 190:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierWaistCircumference];
      return (Class)v3;
    case 191:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierWalkingAsymmetryPercentage];
      return (Class)v3;
    case 192:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierWalkingDoubleSupportPercentage];
      return (Class)v3;
    case 193:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierWalkingHeartRateAverage];
      return (Class)v3;
    case 194:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierWalkingSpeed];
      return (Class)v3;
    case 195:
      id v3 = [self quantityTypeForIdentifier:HKQuantityTypeIdentifierWalkingStepLength];
      return (Class)v3;
    case 196:
      sub_34214(0, &qword_202CF0);
      id v3 = [(id)swift_getObjCClassFromMetadata() stateOfMindType];
      return (Class)v3;
    case 197:
      id v3 = [self dataTypeWithCode:257];
      return (Class)v3;
    case 200:
      id v3 = [self gad7Type];
      return (Class)v3;
    case 201:
      id v3 = [self phq9Type];
      return (Class)v3;
    case 203:
      id v3 = [self dataTypeWithCode:175];
      return (Class)v3;
    case 204:
      id v3 = [self dataTypeWithCode:176];
      return (Class)v3;
    default:
      id v3 = [self activitySummaryType];
      return (Class)v3;
  }
}

uint64_t sub_34214(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_34250(unsigned __int8 a1)
{
  unint64_t result = 0xD000000000000016;
  if (!(!v2 & v1))
  {
    switch(a1)
    {
      case 'X':
        return 0xD000000000000023;
      case 'Y':
      case 'Z':
      case '[':
      case ']':
      case 'a':
        return 0xD000000000000018;
      case '\\':
      case '^':
      case '_':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'h':
      case 'j':
        return result;
        return 0xD00000000000001DLL;
      case 'g':
      case 'k':
        return 0xD000000000000017;
      case 'i':
        return 0xD000000000000021;
      default:
        JUMPOUT(0);
    }
  }
  uint64_t v5 = a1 - 147;
  if (v5 <= 0x25)
  {
    if (((1 << (a1 + 109)) & 0x2004000119) != 0) {
      return 0xD000000000000018;
    }
    if (((1 << (a1 + 109)) & 0x8800000) != 0) {
      return 0xD00000000000001CLL;
    }
    if (v5 == 15) {
      return 0xD000000000000021;
    }
  }
  if (a1 != 60)
  {
    if (a1 == 32 || a1 == 42) {
      return 0xD00000000000001DLL;
    }
    if (a1 == 4) {
      return 0xD000000000000018;
    }
  }
  return result;
}

uint64_t sub_343C8()
{
  return sub_1ACE60();
}

uint64_t sub_343EC(uint64_t a1, long long *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_1AC250();
  uint64_t v12 = sub_53D4(v11);
  __chkstk_darwin(v12);
  sub_E548();
  uint64_t v13 = sub_1AB1C0();
  sub_47658();
  uint64_t v14 = sub_1AB1B0();
  *(void *)(v5 + 320) = v13;
  *(void *)(v5 + 328) = &protocol witness table for ResponseFactory;
  *(void *)(v5 + 296) = v14;
  type metadata accessor for WellnessLoggingCATsSimple();
  sub_1AC240();
  *(void *)(v5 + 336) = sub_1AC210();
  type metadata accessor for WellnessCATs();
  sub_1AC240();
  *(void *)(v5 + 344) = sub_1AC1A0();
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  id v15 = objc_allocWithZone((Class)sub_1AC770());
  *(void *)(v5 + 352) = sub_1AC760();
  *(void *)(v5 + 16) = a1;
  sub_24D80(a2, v5 + 24);
  memcpy((void *)(v5 + 64), a3, 0xA0uLL);
  sub_467AC(a4, v5 + 224);
  *(unsigned char *)(v5 + 400) = 0;
  if (*(void *)(a5 + 24))
  {
    sub_24D80((long long *)a5, (uint64_t)&v17);
  }
  else
  {
    *((void *)&v18 + 1) = &type metadata for MedsCorrectionsFlowProvider;
    uint64_t v19 = &off_1F75E0;
    *(void *)&long long v17 = swift_allocObject();
    sub_9DE0(v5 + 24, v17 + 16);
    sub_9B48(v5 + 64, v17 + 56);
    sub_A068(a5, &qword_203048);
  }
  sub_24D80(&v17, v5 + 360);
  return v5;
}

uint64_t sub_345D0()
{
  type metadata accessor for GenericMedLoggingFlow();
  sub_46764(&qword_203040, v0, (void (*)(uint64_t))type metadata accessor for GenericMedLoggingFlow);
  return sub_1AAF80();
}

uint64_t sub_3465C()
{
  sub_A364();
  v1[1381] = v0;
  v1[1380] = v2;
  uint64_t v3 = sub_2694(&qword_201E28);
  sub_53D4(v3);
  v1[1382] = sub_A220();
  v1[1383] = swift_task_alloc();
  uint64_t v4 = sub_2694(&qword_2022D0);
  sub_53D4(v4);
  v1[1384] = sub_A42C();
  uint64_t v5 = type metadata accessor for GenericMedCompletedLogModel();
  sub_53D4(v5);
  v1[1385] = sub_A42C();
  uint64_t v6 = sub_1AC1E0();
  v1[1386] = v6;
  sub_53D4(v6);
  v1[1387] = sub_A42C();
  uint64_t v7 = type metadata accessor for SnippetHeaderModel();
  v1[1388] = v7;
  sub_53D4(v7);
  v1[1389] = sub_A42C();
  uint64_t v8 = sub_2694(&qword_201E20);
  sub_53D4(v8);
  v1[1390] = sub_A220();
  v1[1391] = swift_task_alloc();
  v1[1392] = swift_task_alloc();
  v1[1393] = swift_task_alloc();
  uint64_t v9 = sub_1AB0A0();
  v1[1394] = v9;
  sub_A19C(v9);
  v1[1395] = v10;
  v1[1396] = sub_A220();
  v1[1397] = swift_task_alloc();
  uint64_t v11 = sub_1AB3D0();
  v1[1398] = v11;
  sub_A19C(v11);
  v1[1399] = v12;
  v1[1400] = sub_A220();
  v1[1401] = swift_task_alloc();
  v1[1402] = swift_task_alloc();
  v1[1403] = swift_task_alloc();
  v1[1404] = swift_task_alloc();
  v1[1405] = swift_task_alloc();
  v1[1406] = swift_task_alloc();
  v1[1407] = swift_task_alloc();
  uint64_t v13 = sub_1AC250();
  sub_53D4(v13);
  v1[1408] = sub_A42C();
  uint64_t v14 = sub_1AABD0();
  v1[1409] = v14;
  sub_A19C(v14);
  v1[1410] = v15;
  v1[1411] = sub_A220();
  v1[1412] = swift_task_alloc();
  uint64_t v16 = sub_1AC800();
  v1[1413] = v16;
  sub_A19C(v16);
  v1[1414] = v17;
  v1[1415] = sub_A220();
  v1[1416] = swift_task_alloc();
  v1[1417] = swift_task_alloc();
  v1[1418] = swift_task_alloc();
  v1[1419] = swift_task_alloc();
  v1[1420] = swift_task_alloc();
  v1[1421] = swift_task_alloc();
  v1[1422] = swift_task_alloc();
  v1[1423] = swift_task_alloc();
  v1[1424] = swift_task_alloc();
  v1[1425] = swift_task_alloc();
  v1[1426] = swift_task_alloc();
  v1[1427] = swift_task_alloc();
  v1[1428] = swift_task_alloc();
  v1[1429] = swift_task_alloc();
  v1[1430] = swift_task_alloc();
  v1[1431] = swift_task_alloc();
  v1[1432] = swift_task_alloc();
  v1[1433] = swift_task_alloc();
  v1[1434] = swift_task_alloc();
  v1[1435] = swift_task_alloc();
  v1[1436] = swift_task_alloc();
  v1[1437] = swift_task_alloc();
  v1[1438] = swift_task_alloc();
  v1[1439] = swift_task_alloc();
  v1[1440] = swift_task_alloc();
  v1[1441] = swift_task_alloc();
  v1[1442] = swift_task_alloc();
  v1[1443] = swift_task_alloc();
  v1[1444] = swift_task_alloc();
  v1[1445] = swift_task_alloc();
  v1[1446] = swift_task_alloc();
  v1[1447] = swift_task_alloc();
  v1[1448] = swift_task_alloc();
  v1[1449] = swift_task_alloc();
  v1[1450] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v18, v19, v20);
}

uint64_t sub_34AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void (*a58)(uint64_t, uint64_t, uint64_t),uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  sub_475AC();
  sub_47D14();
  uint64_t v63 = v62[1381];
  uint64_t v64 = *(void *)(v63 + 224);
  v62[1451] = v64;
  uint64_t v65 = *(void *)(v63 + 232);
  v62[1452] = v65;
  uint64_t v66 = *(void *)(v63 + 240);
  v62[1453] = v66;
  uint64_t v67 = *(void *)(v63 + 248);
  v62[1454] = v67;
  uint64_t v68 = *(void *)(v63 + 256);
  v62[1455] = v68;
  uint64_t v69 = *(void *)(v63 + 264);
  v62[1456] = v69;
  uint64_t v70 = *(void *)(v63 + 272);
  v62[1457] = v70;
  uint64_t v71 = *(void *)(v63 + 280);
  v62[1458] = v71;
  unsigned int v72 = *(unsigned __int8 *)(v63 + 288);
  if (v72 >> 6 == 2)
  {
    uint64_t v92 = v62[1421];
    uint64_t v93 = v62[1414];
    uint64_t v94 = v62[1413];
    uint64_t v95 = sub_1AC7D0();
    v62[1459] = v95;
    sub_A340();
    uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16);
    v62[1460] = v96;
    v62[1461] = (v93 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    a58 = v96;
    v96(v92, v95, v94);
    sub_1AC7F0();
    os_log_type_t v97 = sub_1ACF50();
    if (sub_29300(v97))
    {
      uint64_t v98 = (_WORD *)sub_49780();
      sub_29368(v98);
      sub_A7FC(&def_342E4, v99, v100, "Received .receivedConfirmationMixedLogging code, sending back to handler.");
      sub_A1F0();
    }
    uint64_t v101 = v62[1414];
    sub_47C80();
    char v102 = *(void (**)(uint64_t))(v101 + 8);
    v62[1576] = v102;
    v62[1577] = (v101 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v103 = sub_479C8();
    v102(v103);
    id v104 = [objc_allocWithZone((Class)sub_1AC640()) init];
    v62[1578] = v104;
    id v105 = v104;
    swift_retain();
    char v106 = getMedStatus(from:)();
    swift_release();
    id v107 = [objc_allocWithZone((Class)NSNumber) initWithBool:v106 & 1];
    [v105 setMedStatus:v107];

    if ((v64 - 3) < 3u)
    {
      uint64_t v108 = v62[1381];
      sub_46188();
      Class isa = sub_1ACFA0((3u >> ((v64 - 3) & 7)) & 1).super.super.isa;
      [v105 setShouldOverwriteExistingStatuses:isa];

      v62[1579] = *(void *)(v108 + 352);
      v62[2] = v62;
      v62[7] = v62 + 1372;
      v62[3] = sub_3E330;
      v62[1122] = swift_continuation_init();
      v62[1118] = _NSConcreteStackBlock;
      v62[1119] = 0x40000000;
      v62[1120] = sub_6AA8;
      v62[1121] = &unk_1F5E18;
      [(id)swift_unknownObjectRetain() handleLogGenericMedications:v105 completion:v62 + 1118];
LABEL_38:
      sub_471D0();
      return _swift_continuation_await(v165);
    }
    uint64_t v127 = (uint64_t)(v62 + 139);
    uint64_t v128 = v62[1420];
    uint64_t v129 = v62[1413];

    sub_A340();
    a58(v128, v95, v129);
    uint64_t v130 = (void *)sub_1AC7F0();
    os_log_type_t v131 = sub_1ACF60();
    if (sub_A3D0(v131))
    {
      uint64_t v132 = (_WORD *)sub_49780();
      sub_47F08(v132);
      sub_4777C(&def_342E4, v133, v134, ".receivedConfirmationMixedLogging got an unrecognized confirmation status, returning GenericError");
      sub_A1F0();
    }
    uint64_t v135 = v62[1381];

    uint64_t v136 = sub_47968();
    v102(v136);
    sub_9B48(v135 + 64, (uint64_t)(v62 + 139));
    sub_9BA4();
    sub_1AB120();

    goto LABEL_45;
  }
  if (v72 >> 6 != 3) {
    goto LABEL_41;
  }
  uint64_t v73 = v66 | v65;
  uint64_t v74 = v68 | v69 | v70;
  if (!(v73 | v64 | v67 | v74 | v71) && v72 == 192)
  {
    uint64_t v75 = v62[1450];
    uint64_t v76 = v62[1414];
    uint64_t v77 = (uint8_t *)v62[1413];
    v62[1462] = sub_1AC7D0();
    sub_A340();
    v62[1463] = *(void *)(v76 + 16);
    v62[1464] = (v76 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    sub_479C8();
    a57 = v78;
    sub_47B44();
    v79();
    uint64_t v80 = sub_1AC7F0();
    os_log_type_t v81 = sub_1ACF50();
    if (sub_29300(v81))
    {
      char v82 = (_WORD *)sub_49780();
      sub_475A0(v82);
      _os_log_impl(&def_342E4, v80, (os_log_type_t)v75, "Executing GenericMedLoggingFlow", v77, 2u);
      sub_A1F0();
    }
    uint64_t v83 = v62[1414];
    uint64_t v84 = v62[1412];
    char v85 = (void (*)(uint64_t, uint64_t, uint64_t))v62[1381];

    char v86 = *(void (**)(uint64_t))(v83 + 8);
    v62[1465] = v86;
    v62[1466] = (v83 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v87 = sub_4788C();
    v86(v87);
    a58 = v85;
    uint64_t v88 = *((void *)v85 + 2);
    swift_retain();
    sub_1AABC0();
    char v89 = isLoggingTimeframeToday(from:todayDate:)(v88, v84);
    uint64_t v90 = v62[1410];
    if (v89)
    {
      swift_release();
      uint64_t v91 = *(void (**)(void))(v90 + 8);
      sub_47310();
      v91();
LABEL_28:
      uint64_t v138 = v62[1411];
      uint64_t v192 = v62[1381];
      id v139 = [objc_allocWithZone((Class)sub_1AC640()) init];
      v62[1467] = v139;
      uint64_t v140 = *((void *)a58 + 2);
      swift_retain();
      sub_1AABC0();
      char v141 = isLoggingTimeframeToday(from:todayDate:)(v140, v138);
      swift_release();
      uint64_t v142 = sub_47968();
      ((void (*)(uint64_t))v91)(v142);
      id v143 = [objc_allocWithZone((Class)NSNumber) initWithBool:v141 & 1];
      [v139 setIsTimeframeToday:v143];

      swift_retain();
      char v144 = getMedStatus(from:)();
      swift_release();
      id v145 = [objc_allocWithZone((Class)NSNumber) initWithBool:v144 & 1];
      [v139 setMedStatus:v145];

      v62[1468] = *(void *)(v192 + 352);
      v62[10] = v62;
      v62[15] = v62 + 1375;
      v62[11] = sub_359D4;
      v62[1152] = swift_continuation_init();
      v62[1148] = _NSConcreteStackBlock;
      v62[1149] = 0x40000000;
      v62[1150] = sub_6AA8;
      v62[1151] = &unk_1F5F10;
      [(id)swift_unknownObjectRetain() handleLogGenericMedications:v139 completion:v62 + 1148];
      goto LABEL_38;
    }
    char v137 = isLoggingTimeframeNone(from:)();
    swift_release();
    uint64_t v91 = *(void (**)(void))(v90 + 8);
    sub_47310();
    v91();
    if (v137) {
      goto LABEL_28;
    }
    uint64_t v127 = (uint64_t)(v62 + 619);
    sub_A340();
    sub_47B44();
    v184();
    uint64_t v185 = (void *)sub_1AC7F0();
    os_log_type_t v186 = sub_1ACF50();
    if (sub_470C8(v186))
    {
      uint64_t v187 = (_WORD *)sub_49780();
      sub_475A0(v187);
      sub_471F8(&def_342E4, v188, v189, "Received unsupported timeframe while logging generic medication");
      sub_A1F0();
    }
    uint64_t v190 = v62[1381];

    uint64_t v191 = sub_A7C4();
    v86(v191);
    uint64_t v175 = v190 + 64;
    goto LABEL_44;
  }
  uint64_t v110 = v67 | v73 | v74 | v71;
  BOOL v111 = v72 == 192 && v64 == 7;
  if (!v111 || v110)
  {
    BOOL v146 = v72 == 192 && v64 == 9;
    if (v146 && !v110)
    {
      uint64_t v147 = v62[1414];
      v62[1506] = sub_1AC7D0();
      sub_A340();
      v62[1507] = *(void *)(v147 + 16);
      v62[1508] = (v147 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      sub_47AD0();
      v148();
      uint64_t v149 = sub_1AC7F0();
      os_log_type_t v150 = sub_1ACF50();
      if (os_log_type_enabled(v149, v150))
      {
        uint64_t v151 = (uint8_t *)sub_49780();
        *(_WORD *)uint64_t v151 = 0;
        _os_log_impl(&def_342E4, v149, v150, "Received .receivedConfirmationLogAsScheduled code, sending back to intent handler.", v151, 2u);
        sub_A1F0();
      }
      uint64_t v152 = v62[1414];
      uint64_t v153 = v62[1411];
      uint64_t v154 = v62[1410];
      uint64_t v155 = v62[1409];
      uint64_t v156 = v62[1381];

      v62[1509] = *(void *)(v152 + 8);
      v62[1510] = (v152 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v157 = sub_47BF8();
      v158(v157);
      id v159 = [objc_allocWithZone((Class)sub_1AC640()) init];
      v62[1511] = v159;
      uint64_t v160 = *(void *)(v156 + 16);
      swift_retain();
      sub_1AABC0();
      char v161 = isLoggingTimeframeToday(from:todayDate:)(v160, v153);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v153, v155);
      id v162 = [objc_allocWithZone((Class)NSNumber) initWithBool:v161 & 1];
      [v159 setIsTimeframeToday:v162];

      swift_retain();
      LOBYTE(v155) = getMedStatus(from:)();
      swift_release();
      id v163 = [objc_allocWithZone((Class)NSNumber) initWithBool:v155 & 1];
      [v159 setMedStatus:v163];

      sub_46188();
      Class v164 = sub_1ACFA0(1).super.super.isa;
      [v159 setConfirmedLogAsScheduled:v164];

      v62[1512] = *(void *)(v156 + 352);
      v62[18] = v62;
      v62[23] = v62 + 1369;
      v62[19] = sub_3958C;
      v62[1147] = swift_continuation_init();
      v62[1143] = _NSConcreteStackBlock;
      v62[1144] = 0x40000000;
      v62[1145] = sub_6AA8;
      v62[1146] = &unk_1F5E80;
      [(id)swift_unknownObjectRetain() handleLogGenericMedications:v159 completion:v62 + 1143];
      goto LABEL_38;
    }
LABEL_41:
    uint64_t v127 = (uint64_t)(v62 + 79);
    sub_1AC7D0();
    sub_A340();
    sub_47B44();
    v167();
    uint64_t v168 = (void *)sub_1AC7F0();
    os_log_type_t v169 = sub_1ACF60();
    if (sub_470C8(v169))
    {
      uint64_t v170 = (_WORD *)sub_49780();
      sub_475A0(v170);
      sub_471F8(&def_342E4, v171, v172, "GenericMedLoggingFlow ended up in an unrecognized state, returning GenericErrorFlow.");
      sub_A1F0();
    }
    uint64_t v173 = v62[1381];

    sub_A7C4();
    sub_4783C();
    v174();
    uint64_t v175 = v173 + 64;
LABEL_44:
    sub_9B48(v175, v127);
    sub_9BA4();
    sub_47B2C();
LABEL_45:
    sub_9BF0(v127);
    sub_469EC();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_471D0();
    return v177(v176, v177, v178, v179, v180, v181, v182, v183, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62);
  }
  uint64_t v112 = v62[1414];
  v62[1565] = sub_1AC7D0();
  sub_A340();
  v62[1566] = *(void *)(v112 + 16);
  v62[1567] = (v112 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  sub_47AD0();
  v113();
  uint64_t v114 = (void *)sub_1AC7F0();
  os_log_type_t v115 = sub_1ACF50();
  if (sub_29300(v115))
  {
    uint64_t v116 = (_WORD *)sub_49780();
    sub_29368(v116);
    sub_A7FC(&def_342E4, v117, v118, "Received .rejectedConfirmation code, indicating rejectedConfirmation to log as scheduled. creating output.");
    sub_A1F0();
  }
  uint64_t v119 = v62[1414];
  uint64_t v120 = v62[1386];
  uint64_t v121 = v62[1382];
  uint64_t v122 = v62[1381];

  v62[1568] = *(void *)(v119 + 8);
  v62[1569] = (v119 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_479C8();
  sub_4783C();
  v123();
  v62[1570] = *(void *)(v122 + 336);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v121, 1, 1, v120);
  swift_retain();
  uint64_t v124 = (void *)swift_task_alloc();
  v62[1571] = v124;
  *uint64_t v124 = v62;
  v124[1] = sub_3D6D8;
  sub_471D0();
  return sub_1A5530();
}

uint64_t sub_359D4()
{
  sub_A364();
  sub_472B4();
  uint64_t v1 = *v0;
  sub_E53C();
  *uint64_t v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_35A88()
{
  sub_471BC();
  uint64_t v166 = v4 | 0x1000000000000000;
  uint64_t v167 = v5;
  sub_4712C();
  uint64_t v165 = v0;
  uint64_t v6 = *(void **)(v0 + 11000);
  *(void *)(v0 + 11752) = v6;
  swift_unknownObjectRelease();
  sub_47CF4();
  uint64_t v8 = v7();
  switch(v8)
  {
    case 'e':
      sub_48008();
      sub_46EE0();
      uint64_t v9 = sub_47CE4();
      v2(v9);
      uint64_t v10 = (void *)sub_1AC7F0();
      os_log_type_t v11 = sub_1ACF50();
      if (sub_A3D0(v11))
      {
        uint64_t v12 = (_WORD *)sub_49780();
        sub_47F08(v12);
        sub_4777C(&def_342E4, v13, v14, "Received .requiresAuthorization, returning Output with FlowActivity for Requires Auth");
        sub_A1F0();
      }
      uint64_t v157 = *(void **)(v0 + 11736);
      uint64_t v15 = *(void (**)(uint64_t))(v0 + 11720);
      uint64_t v16 = *(void *)(v0 + 11048);

      uint64_t v17 = sub_47BF8();
      v15(v17);
      sub_9DE0(v16 + 24, v0 + 216);
      sub_9B48(v16 + 64, v0 + 256);
      uint64_t v18 = sub_1AB1C0();
      sub_47658();
      uint64_t v19 = sub_1AB1B0();
      *(void *)(v0 + 440) = v18;
      *(void *)(v0 + 448) = &protocol witness table for ResponseFactory;
      *(void *)(v0 + 416) = v19;
      type metadata accessor for WellnessCATsSimple();
      sub_1AC240();
      uint64_t v20 = sub_1AC210();
      type metadata accessor for WellnessCATs();
      sub_1AC240();
      uint64_t v21 = sub_1AC1A0();
      *(unsigned char *)(v0 + 208) = 88;
      *(void *)(v0 + 456) = v20;
      *(void *)(v0 + 464) = v21;
      sub_9D40();
      sub_1AB120();

      sub_9D8C(v0 + 208);
      goto LABEL_56;
    case 'f':
      goto LABEL_12;
    case 'g':
      sub_474AC();
      sub_46EE0();
      uint64_t v43 = sub_470B8();
      v1(v43);
      sub_1AC7F0();
      os_log_type_t v44 = sub_1ACF50();
      if (sub_29300(v44))
      {
        uint64_t v45 = (_WORD *)sub_49780();
        sub_29368(v45);
        sub_A7FC(&def_342E4, v46, v47, "Got multiple meds (failure for generic med logging), creating output.");
        sub_A1F0();
      }
      uint64_t v48 = *(void (**)(uint64_t))(v0 + 11720);
      sub_47C80();
      uint64_t v49 = sub_479C8();
      v48(v49);
      *(void *)(v0 + 11936) = *(void *)(v0 + 7432);
      swift_retain();
      uint64_t v50 = (void *)swift_task_alloc();
      *(void *)(v0 + 11944) = v50;
      void *v50 = v0;
      v50[1] = sub_380C4;
      sub_47820();
      return sub_1A4D20();
    case 'h':
      goto LABEL_7;
    case 'i':
      uint64_t v52 = *(void (**)(uint64_t))(v0 + 11704);
      uint64_t v53 = *(void *)(v0 + 11048);
      uint64_t v54 = *(void *)(v53 + 224);
      uint64_t v55 = *(void *)(v53 + 232);
      v53 += 224;
      uint64_t v56 = *(void *)(v53 + 16);
      uint64_t v57 = *(void *)(v53 + 24);
      uint64_t v58 = *(void *)(v53 + 32);
      uint64_t v59 = *(void *)(v53 + 40);
      uint64_t v60 = *(void *)(v53 + 48);
      uint64_t v61 = *(void *)(v53 + 56);
      unsigned __int8 v62 = *(unsigned char *)(v53 + 64);
      *(void *)uint64_t v53 = 4;
      *(_OWORD *)(v53 + 8) = 0u;
      *(_OWORD *)(v53 + 24) = 0u;
      *(_OWORD *)(v53 + 40) = 0u;
      *(void *)(v53 + 56) = 0;
      *(unsigned char *)(v53 + 64) = -64;
      sub_4610C(v54, v55, v56, v57, v58, v59, v60, v61, v62);
      sub_A340();
      uint64_t v63 = sub_47CBC();
      v52(v63);
      uint64_t v64 = (void *)sub_1AC7F0();
      os_log_type_t v65 = sub_1ACF50();
      if (sub_470C8(v65))
      {
        uint64_t v66 = (_WORD *)sub_49780();
        sub_475A0(v66);
        sub_471F8(&def_342E4, v67, v68, "got state .awaitingConfirmationLogAsScheduled inside GenericMedLoggingFlow");
        sub_A1F0();
      }
      uint64_t v69 = *(void (**)(uint64_t))(v0 + 11720);

      uint64_t v70 = sub_A7C4();
      v69(v70);
      uint64_t v71 = sub_45D6C(v6, (SEL *)&selRef_matchingMeds);
      if (v71)
      {
        uint64_t v72 = v71;
        uint64_t v160 = *(void **)(v0 + 11736);
        uint64_t v73 = *(void *)(v0 + 11048);
        swift_retain();
        char v74 = getMedStatus(from:)();
        swift_release();
        sub_9B48(v73 + 64, v0 + 4152);
        uint64_t v75 = sub_106C94();
        uint64_t v76 = sub_106CC0();
        sub_1AB1C0();
        sub_47658();
        uint64_t v77 = sub_1AB1B0();
        type metadata accessor for LogMedAsScheduledConfirmationStrategy();
        uint64_t v78 = swift_allocObject();
        sub_46510(0, 0, v74 & 1, v72, (const void *)(v0 + 4152), v75, v76, v77, v78);
        swift_retain();
        sub_1AB350();
        sub_2694(&qword_202FD8);
        sub_47658();
        sub_46764(&qword_203000, 255, (void (*)(uint64_t))type metadata accessor for LogMedAsScheduledConfirmationStrategy);
        *(void *)(v0 + 11032) = sub_1AAE80();
        sub_B56C(&qword_202FE8, &qword_202FD8);
        swift_retain();
        sub_1AB100();

        swift_release();
        swift_release();
LABEL_47:
        swift_release();
        goto LABEL_56;
      }
      uint64_t v118 = (uint8_t *)(v0 + 4312);
      uint64_t v119 = (void *)(v0 + 4472);
      sub_47910();
      uint64_t v120 = *(void *)(v0 + 11488);
      uint64_t v121 = *(void *)(v0 + 11304);
      sub_46EE0();
      ((void (*)(uint64_t, void *, uint64_t))v52)(v120, v64, v121);
      uint64_t v122 = sub_1AC7F0();
      os_log_type_t v123 = sub_1ACF50();
      BOOL v124 = os_log_type_enabled(v122, v123);
      uint64_t v125 = *(void (**)(uint64_t))(v0 + 11720);
      if (!v124) {
        goto LABEL_53;
      }
      uint64_t v126 = (_WORD *)sub_49780();
      sub_478F0(v126);
      sub_47C04((uint64_t)&_swiftEmptyArrayStorage);
      uint64_t v127 = "Needed confirmation log as scheduled but intentResponse.matchingMeds was nil.";
      goto LABEL_52;
    case 'j':
      sub_47910();
      sub_46EE0();
      uint64_t v79 = sub_477D8();
      v2(v79);
      uint64_t v80 = sub_1AC7F0();
      os_log_type_t v81 = sub_1ACF50();
      if (sub_470C8(v81))
      {
        char v82 = (_WORD *)sub_49780();
        sub_475A0(v82);
        sub_471F8(&def_342E4, v83, v84, "Received .needsSingleMedLogging, returning SpecificMedLoggingFlow");
        sub_A1F0();
      }
      char v85 = *(void (**)(uint64_t))(v0 + 11720);

      uint64_t v86 = sub_A7C4();
      v85(v86);
      if (!sub_45D6C(v6, (SEL *)&selRef_matchingMeds)) {
        goto LABEL_50;
      }
      sub_477E8();
      if (v88)
      {
        if (sub_1AD170()) {
          goto LABEL_29;
        }
      }
      else if (*(void *)(v87 + 16))
      {
LABEL_29:
        sub_4AA30(0, (v80 & 0xC000000000000001) == 0, v80);
        if ((v80 & 0xC000000000000001) != 0) {
          id v89 = (id)sub_1AD0A0();
        }
        else {
          id v89 = *(id *)(v80 + 32);
        }
        uint64_t v90 = v89;
        swift_bridgeObjectRelease();
        uint64_t v91 = sub_12DE1C(v90);
        if (v92)
        {
          uint64_t v93 = v91;
          uint64_t v94 = v92;
          uint64_t v95 = *(void *)(v0 + 11048);
          uint64_t v96 = *(void *)(v95 + 16);
          sub_9DE0(v95 + 24, v0 + 7264);
          sub_9B48(v95 + 64, v0 + 472);
          uint64_t v156 = v96;
          swift_retain();
          uint64_t v97 = sub_12DE10(v90);
          uint64_t v99 = v98;
          id v100 = [v90 strength];
          uint64_t v101 = v100;
          if (v100)
          {
            [v100 doubleValue];
            uint64_t v103 = v102;
          }
          else
          {
            uint64_t v103 = 0;
          }
          uint64_t v155 = *(void **)(v0 + 11736);
          type metadata accessor for SpecificMedLoggingFlow();
          uint64_t v128 = sub_12DE28(v90);
          *(void *)(v0 + 7032) = v97;
          *(void *)(v0 + 7040) = v99;
          *(void *)(v0 + 7048) = v93;
          *(void *)(v0 + 7056) = v94;
          *(void *)(v0 + 7064) = v103;
          *(void *)(v0 + 7072) = v101 == 0;
          *(void *)(v0 + 7080) = v128;
          *(void *)(v0 + 7088) = v129;
          *(unsigned char *)(v0 + 7096) = 0;
          uint64_t v162 = 0;
          memset(v161, 0, sizeof(v161));
          sub_3F6A0(v163);
          uint64_t v130 = sub_3F748((void (*)(void))type metadata accessor for WellnessLoggingCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
          uint64_t v131 = sub_3F748((void (*)(void))type metadata accessor for WellnessCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
          uint64_t v132 = sub_3F7C8();
          sub_3F810(v164);
          sub_106AF8(v156, v0 + 7264, v0 + 472, v0 + 7032, (uint64_t)v163, v130, v131, v132, (uint64_t)v164, (uint64_t)v161, v143, v144, v145, v146, v147, v148, v149, v150, v151,
            v152,
            v153,
            v154);
          *(void *)(v0 + 11016) = v133;
          sub_46764(&qword_203038, 255, (void (*)(uint64_t))type metadata accessor for SpecificMedLoggingFlow);
          sub_1AB120();

          goto LABEL_47;
        }

        goto LABEL_50;
      }
      swift_bridgeObjectRelease();
LABEL_50:
      uint64_t v118 = (uint8_t *)(v0 + 792);
      uint64_t v119 = (void *)(v0 + 952);
      sub_47910();
      uint64_t v134 = *(void *)(v0 + 11568);
      uint64_t v135 = *(void *)(v0 + 11304);
      sub_46EE0();
      ((void (*)(uint64_t, uint64_t, uint64_t))v85)(v134, v80, v135);
      uint64_t v122 = sub_1AC7F0();
      os_log_type_t v123 = sub_1ACF60();
      BOOL v136 = os_log_type_enabled(v122, v123);
      uint64_t v125 = *(void (**)(uint64_t))(v0 + 11720);
      if (v136)
      {
        char v137 = (_WORD *)sub_49780();
        sub_478F0(v137);
        sub_47C04((uint64_t)&_swiftEmptyArrayStorage);
        uint64_t v127 = ".needsSingleMedLogging case: failed to unpack matchingMed, returning GenericErrorFlow.";
LABEL_52:
        _os_log_impl(&def_342E4, v122, v123, v127, v118, 2u);
        uint64_t v118 = v158;
        sub_497D4();

        uint64_t v138 = sub_47BF8();
        v125(v138);
      }
      else
      {
LABEL_53:

        uint64_t v139 = sub_47BF8();
        v125(v139);
      }
      uint64_t v140 = *(void **)(v0 + 11736);
      sub_9B48(*(void *)(v0 + 11048) + 64, (uint64_t)v118);
      sub_75790(v118, v119);
      sub_9BA4();
      sub_1AB120();

      uint64_t v42 = (uint64_t)v119;
LABEL_55:
      sub_9BF0(v42);
LABEL_56:
      sub_47554();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_47820();
      __asm { BRAA            X1, X16 }
      return result;
    default:
      if (v8 == 4)
      {
        sub_47910();
        sub_46EE0();
        uint64_t v104 = sub_477D8();
        v2(v104);
        id v105 = sub_1AC7F0();
        os_log_type_t v106 = sub_1ACF50();
        if (os_log_type_enabled(v105, v106))
        {
          id v107 = (_WORD *)sub_49780();
          sub_475A0(v107);
          sub_47F38(&def_342E4, v108, v109, "Received successful intent response, creating output.");
          sub_A1F0();
        }
        sub_47C44();
        uint64_t v110 = *(void *)(v0 + 11048);

        uint64_t v111 = sub_A7C4();
        v3(v111);
        uint64_t v112 = sub_45D6C(v6, (SEL *)&selRef_matchingMedsBeforeUpdate);
        if (v112) {
          uint64_t v113 = (void *)v112;
        }
        else {
          uint64_t v113 = &_swiftEmptyArrayStorage;
        }
        sub_3F974((uint64_t)v113);
        swift_bridgeObjectRelease();
        swift_retain();
        *(unsigned char *)(v0 + 7097) = getMedStatus(from:)() & 1;
        swift_release();
        *(void *)(v0 + 11760) = *(void *)(v110 + 336);
        swift_retain();
        uint64_t v114 = (void *)swift_task_alloc();
        *(void *)(v0 + 11768) = v114;
        *uint64_t v114 = v0;
        v114[1] = sub_36B5C;
        sub_480C0();
        sub_47820();
        return sub_1A4B50(v115, v116);
      }
      else
      {
        if (v8 != 5)
        {
LABEL_12:
          id v159 = v6;
          sub_48008();
          sub_46EE0();
          uint64_t v32 = sub_47CE4();
          v2(v32);
          int v33 = (void *)sub_1AC7F0();
          os_log_type_t v34 = sub_1ACF50();
          if (sub_A3D0(v34))
          {
            uint64_t v35 = (_WORD *)sub_49780();
            sub_47F08(v35);
            sub_4777C(&def_342E4, v36, v37, "Intent response code was not an expected one, returning nil output.");
            sub_A1F0();
          }
          uint64_t v38 = *(void **)(v0 + 11736);
          uint64_t v39 = *(void (**)(uint64_t))(v0 + 11720);
          uint64_t v40 = *(void *)(v0 + 11048);

          uint64_t v41 = sub_47968();
          v39(v41);
          sub_9B48(v40 + 64, v0 + 4792);
          sub_9BA4();
          sub_1AB120();

          uint64_t v42 = v0 + 4792;
          goto LABEL_55;
        }
LABEL_7:
        sub_474AC();
        sub_46EE0();
        uint64_t v22 = sub_470B8();
        v1(v22);
        sub_1AC7F0();
        os_log_type_t v23 = sub_1ACF50();
        if (sub_29300(v23))
        {
          int v24 = (_WORD *)sub_49780();
          sub_29368(v24);
          sub_A7FC(&def_342E4, v25, v26, "Got .noMedsFound or .failure, creating output.");
          sub_A1F0();
        }
        uint64_t v27 = *(void (**)(uint64_t))(v0 + 11720);
        sub_47C80();
        uint64_t v28 = sub_479C8();
        v27(v28);
        *(void *)(v0 + 11992) = *(void *)(v0 + 7432);
        swift_retain();
        uint64_t v29 = (void *)swift_task_alloc();
        *(void *)(v0 + 12000) = v29;
        *uint64_t v29 = v0;
        v29[1] = sub_38B28;
        sub_47820();
        return sub_1A4C74();
      }
  }
}

uint64_t sub_36B5C()
{
  sub_47634();
  sub_46F18();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v7 + 11776) = v6;
  swift_task_dealloc();
  sub_47BA8();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_36C68()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v1 = v0 + 1013;
  uint64_t v2 = v0 + 1018;
  uint64_t v3 = (void *)v0[1472];
  uint64_t v4 = v0[1381];
  sub_1AB070();
  sub_106A94();
  sub_47AA8(v5, v6);
  swift_release();
  sub_1AB3C0();
  id v7 = [v3 catId];
  sub_1ACDD0();
  sub_47C50();
  sub_47640();
  uint64_t v8 = v4 + 24;
  sub_9DE0(v4 + 24, (uint64_t)(v0 + 1038));
  sub_2E38(v0 + 1038, v0[1041]);
  sub_471EC();
  v9();
  if (sub_47408(v0 + 1033))
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 1033));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 1038));
    char v10 = 4;
  }
  else
  {
    sub_47FAC();
    uint64_t v1 = v0 + 1018;
    unsigned __int8 v11 = sub_2E38(v0 + 1028, v0[1031]);
    sub_471EC();
    v12();
    uint64_t v2 = (void *)v0[1027];
    sub_475F8(v0 + 1023);
    sub_48088();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 1038));
    if (v11) {
      char v10 = 4;
    }
    else {
      char v10 = 0;
    }
  }
  sub_19DAB4(0, 0, v10);
  sub_9DE0(v8, (uint64_t)v2);
  uint64_t v13 = sub_4716C(v2);
  v14(v13);
  if (sub_473A0(v1))
  {
    sub_47B84();
  }
  else
  {
    sub_9DE0(v8, (uint64_t)(v0 + 943));
    sub_2E38(v0 + 943, v0[946]);
    sub_471EC();
    v15();
    sub_473D4(v0 + 938);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 938));
    sub_47864((uint64_t)(v0 + 943));
  }
  uint64_t v16 = sub_1AC2B0();
  v0[1473] = v17;
  v0[1474] = v16;
  uint64_t v18 = (void *)swift_task_alloc();
  v0[1475] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_36F30;
  sub_472E0();
  sub_46EC4();
  return sub_7A658(v19, v20);
}

uint64_t sub_36F30()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[1321] = v0;
  v1[1322] = v3;
  v1[1323] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 11808) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_37004()
{
  sub_A364();
  v0[1477] = v0[1322];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[1478] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_37094;
  uint64_t v2 = sub_47238();
  return sub_7A658(v2, v3);
}

uint64_t sub_37094()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[1324] = v0;
  v1[1325] = v3;
  v1[1326] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 11832) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_37168()
{
  sub_A364();
  v0[1480] = v0[1325];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[1481] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_371F8;
  uint64_t v2 = sub_472C8();
  return sub_7A658(v2, v3);
}

uint64_t sub_371F8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[1327] = v0;
  v1[1328] = v3;
  v1[1329] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 11856) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_372CC()
{
  sub_A364();
  v0[1483] = v0[1328];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[1484] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_37364;
  unint64_t v2 = sub_47514();
  return sub_7A658(v2, v3);
}

uint64_t sub_37364()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *unint64_t v2 = v1;
  v1[1330] = v0;
  v1[1331] = v3;
  v1[1332] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 11880) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_37438()
{
  sub_A364();
  v0[1486] = v0[1331];
  sub_2F2B8(88);
  v0[1487] = v1;
  unint64_t v2 = (void *)swift_task_alloc();
  v0[1488] = v2;
  *unint64_t v2 = v0;
  v2[1] = sub_374DC;
  sub_47E34();
  return sub_7A988();
}

uint64_t sub_374DC()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *unint64_t v2 = v1;
  v1[1333] = v0;
  v1[1334] = v3;
  v1[1335] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 11912) = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

#error "377C4: call analysis failed (funcsize=189)"

uint64_t sub_378F4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *unint64_t v2 = v1;
  uint64_t v3 = v1 + 7344;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

void sub_379E4()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v16 = *(void **)(v0 + 11776);
  uint64_t v1 = *(void **)(v0 + 11752);
  uint64_t v13 = *(void *)(v0 + 11656);
  uint64_t v14 = *(void *)(v0 + 11664);
  uint64_t v11 = *(void *)(v0 + 11640);
  uint64_t v12 = *(void *)(v0 + 11648);
  uint64_t v10 = *(void *)(v0 + 11632);
  uint64_t v8 = *(void **)(v0 + 11736);
  uint64_t v9 = *(void *)(v0 + 11624);
  uint64_t v7 = *(void *)(v0 + 11616);
  uint64_t v2 = *(void *)(v0 + 11608);
  uint64_t v3 = *(void *)(v0 + 11192);
  uint64_t v19 = *(void *)(v0 + 11184);
  uint64_t v20 = *(void *)(v0 + 11256);
  uint64_t v17 = *(void *)(v0 + 11112);
  uint64_t v18 = *(void *)(v0 + 11144);
  uint64_t v15 = *(void *)(v0 + 11080);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7424);
  sub_1AAE40();
  sub_9DE0(v0 + 7464, v0 + 7304);
  uint64_t v4 = sub_47588();
  sub_24D80((long long *)(v0 + 7304), v4 + 16);
  sub_9AF04();
  *(void *)(v0 + 10960) = sub_1AAE20();
  sub_1AB120();

  sub_4610C(v2, v7, v9, v10, v11, v12, v13, v14, 0xC0u);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7464);
  sub_46028(v15, (void (*)(void))type metadata accessor for GenericMedCompletedLogModel);
  sub_46028(v17, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_A068(v18, &qword_201E20);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v20, v19);
  swift_release();
  sub_46D64();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_47E44();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_37DC0()
{
  sub_46EFC();
  sub_4712C();
  sub_474AC();
  sub_46EE0();
  uint64_t v2 = sub_470B8();
  v1(v2);
  uint64_t v3 = (void *)sub_1AC7F0();
  sub_1ACF60();
  sub_12D264(0);
  BOOL v4 = sub_48138();
  uint64_t v5 = (void (*)(uint64_t))v0[1465];
  if (v4)
  {
    uint64_t v6 = (_WORD *)sub_49780();
    sub_476F0(v6);
    swift_bridgeObjectRelease();
    sub_480E0(&def_342E4, v7, v8, "Failed executing catWrapperSimple.genericMedicationCompletedLog_Dialog, returning nil");
    sub_497D4();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v9 = sub_4788C();
  v5(v9);
  uint64_t v10 = (void *)v0[1469];
  uint64_t v11 = (void *)v0[1467];
  sub_474D4();
  sub_47E88();
  sub_9BA4();
  sub_47D5C();

  sub_9BF0((uint64_t)(v0 + 179));
  sub_4688C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_4752C();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_380C4()
{
  sub_47634();
  sub_46F18();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v7 + 11952) = v6;
  *(void *)(v7 + 11960) = v0;
  swift_task_dealloc();
  sub_47BA8();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_381D4()
{
  sub_471BC();
  sub_4712C();
  uint64_t v2 = (void *)v0[1494];
  uint64_t v3 = sub_47E18();
  sub_47E6C(v3, (uint64_t)HKActivityRingUIViewRepresentable.updateUIView(_:context:));
  sub_1AB3C0();
  id v4 = [v2 catId];
  sub_1ACDD0();
  sub_47ADC();
  sub_47640();
  sub_9DE0(v1 + 24, (uint64_t)(v0 + 1128));
  sub_47EF0();
  sub_9DE0(v1 + 296, (uint64_t)(v0 + 1123));
  v0[1496] = *(void *)(v1 + 336);
  v0[1497] = *(void *)(v1 + 344);
  swift_retain();
  swift_retain();
  swift_task_alloc();
  sub_250E0();
  v0[1498] = v5;
  *uint64_t v5 = v6;
  v5[1] = sub_38330;
  sub_4731C();
  sub_47294();
  return sub_C1180();
}

uint64_t sub_38330()
{
  sub_47D74();
  sub_E588();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 9024;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_release();
  sub_47DEC();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v6, v7, v8);
}

void sub_38454()
{
  sub_46EFC();
  sub_4712C();
  if (*(void *)(v0 + 9128))
  {
    uint64_t v2 = *(void **)(v0 + 11752);
    uint64_t v3 = *(void **)(v0 + 11736);
    sub_47254((long long *)(v0 + 9104), *(void *)(v0 + 11248));
    sub_4794C();
    uint64_t v4 = sub_47588();
    sub_47670(v4);
    *(void *)(v0 + 10984) = sub_47A44();
    sub_47974();

    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 9224);
    sub_47310();
    v5();
    swift_release();
  }
  else
  {
    sub_47FE8();
    sub_A068(v6, &qword_202570);
    sub_A340();
    uint64_t v7 = sub_47A34();
    v1(v7);
    uint64_t v8 = (void *)sub_1AC7F0();
    sub_1ACF60();
    sub_47FC4();
    if (sub_476B0())
    {
      uint64_t v9 = (_WORD *)sub_48158();
      sub_47138(v9);
      swift_bridgeObjectRelease();
      sub_4773C(&def_342E4, v10, v11, "getPunchoutOutput() returned nil, returning GenericErrorFlow");
      sub_497D4();

      uint64_t v12 = sub_47A60();
      v13(v12);
    }
    else
    {
      sub_47C44();
      sub_47F20();

      uint64_t v14 = sub_480D4();
      v1(v14);
    }
    uint64_t v15 = *(void **)(v0 + 11952);
    uint64_t v16 = *(void **)(v0 + 11752);
    uint64_t v17 = *(void **)(v0 + 11736);
    sub_47378();
    sub_48070();
    sub_9BA4();
    sub_47B2C();

    sub_9BF0(v0 + 1752);
    uint64_t v18 = sub_4779C();
    v19(v18);
  }
  sub_46B4C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_47A24();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_3883C()
{
  sub_46EFC();
  sub_4712C();
  sub_474AC();
  sub_46EE0();
  uint64_t v3 = sub_470B8();
  v1(v3);
  uint64_t v4 = (void *)sub_1AC7F0();
  os_log_type_t v5 = sub_1ACF60();
  sub_47A70(v5);
  sub_47C44();
  if (v6)
  {
    uint64_t v7 = (_WORD *)sub_49780();
    sub_4753C(v7);
    sub_476D0((uint64_t)&_swiftEmptyArrayStorage);
    sub_4775C(&def_342E4, v8, v9, "Failed executing catWrapperSimple.genericMedicationMultipleMedsFound_Dialog, returning nil");
    sub_497D4();
  }

  uint64_t v10 = sub_4788C();
  v2(v10);
  uint64_t v11 = *(void **)(v0 + 11752);
  uint64_t v12 = *(void **)(v0 + 11736);
  sub_474D4();
  sub_47E88();
  sub_9BA4();
  sub_47D5C();

  sub_9BF0(v0 + 2712);
  sub_4688C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_4752C();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_38B28()
{
  sub_47634();
  sub_46F18();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *os_log_type_t v5 = v4;
  *(void *)(v7 + 12008) = v6;
  *(void *)(v7 + 12016) = v0;
  swift_task_dealloc();
  sub_47BA8();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_38C38()
{
  sub_471BC();
  sub_4712C();
  uint64_t v2 = (void *)v0[1501];
  uint64_t v3 = sub_47E18();
  sub_47E6C(v3, (uint64_t)HKActivityRingUIViewRepresentable.updateUIView(_:context:));
  sub_1AB3C0();
  id v4 = [v2 catId];
  sub_1ACDD0();
  sub_47ADC();
  sub_47640();
  sub_9DE0(v1 + 24, (uint64_t)(v0 + 1193));
  sub_47EF0();
  sub_9DE0(v1 + 296, (uint64_t)(v0 + 1183));
  v0[1503] = *(void *)(v1 + 336);
  v0[1504] = *(void *)(v1 + 344);
  swift_retain();
  swift_retain();
  swift_task_alloc();
  sub_250E0();
  v0[1505] = v5;
  *os_log_type_t v5 = v6;
  v5[1] = sub_38D94;
  sub_4731C();
  sub_47294();
  return sub_C1180();
}

uint64_t sub_38D94()
{
  sub_47D74();
  sub_E588();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 9544;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *os_log_type_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_release();
  sub_47DEC();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v6, v7, v8);
}

void sub_38EB8()
{
  sub_46EFC();
  sub_4712C();
  if (*(void *)(v0 + 9608))
  {
    uint64_t v2 = *(void **)(v0 + 11752);
    uint64_t v3 = *(void **)(v0 + 11736);
    sub_47254((long long *)(v0 + 9584), *(void *)(v0 + 11240));
    sub_4794C();
    uint64_t v4 = sub_47588();
    sub_47670(v4);
    *(void *)(v0 + 11008) = sub_47A44();
    sub_47974();

    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 9664);
    sub_47310();
    v5();
    swift_release();
  }
  else
  {
    sub_47FE8();
    sub_A068(v6, &qword_202570);
    sub_A340();
    uint64_t v7 = sub_47A34();
    v1(v7);
    uint64_t v8 = (void *)sub_1AC7F0();
    sub_1ACF60();
    sub_47FC4();
    if (sub_476B0())
    {
      uint64_t v9 = (_WORD *)sub_48158();
      sub_47138(v9);
      swift_bridgeObjectRelease();
      sub_4773C(&def_342E4, v10, v11, "getPunchoutOutput() returned nil, returning GenericErrorFlow");
      sub_497D4();

      uint64_t v12 = sub_47A60();
      v13(v12);
    }
    else
    {
      sub_47C44();
      sub_47F20();

      uint64_t v14 = sub_480D4();
      v1(v14);
    }
    uint64_t v15 = *(void **)(v0 + 12008);
    uint64_t v16 = *(void **)(v0 + 11752);
    uint64_t v17 = *(void **)(v0 + 11736);
    sub_47378();
    sub_48070();
    sub_9BA4();
    sub_47B2C();

    sub_9BF0(v0 + 3032);
    uint64_t v18 = sub_4779C();
    v19(v18);
  }
  sub_46B4C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_47A24();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_392A0()
{
  sub_46EFC();
  sub_4712C();
  sub_474AC();
  sub_46EE0();
  uint64_t v3 = sub_470B8();
  v1(v3);
  uint64_t v4 = (void *)sub_1AC7F0();
  os_log_type_t v5 = sub_1ACF60();
  sub_47A70(v5);
  sub_47C44();
  if (v6)
  {
    uint64_t v7 = (_WORD *)sub_49780();
    sub_4753C(v7);
    sub_476D0((uint64_t)&_swiftEmptyArrayStorage);
    sub_4775C(&def_342E4, v8, v9, "Failed executing catWrapperSimple.genericMedicationLogFailed_Dialog, returning nil");
    sub_497D4();
  }

  uint64_t v10 = sub_4788C();
  v2(v10);
  uint64_t v11 = *(void **)(v0 + 11752);
  uint64_t v12 = *(void **)(v0 + 11736);
  sub_474D4();
  sub_47E88();
  sub_9BA4();
  sub_47D5C();

  sub_9BF0(v0 + 3992);
  sub_4688C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_4752C();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_3958C()
{
  sub_A364();
  sub_472B4();
  uint64_t v1 = *v0;
  sub_E53C();
  *uint64_t v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_39640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  uint64_t v15 = *(void **)(v12 + 10952);
  *(void *)(v12 + 12104) = v15;
  swift_unknownObjectRelease();
  sub_47CF4();
  uint64_t v17 = v16();
  switch(v17)
  {
    case 108:
      sub_474C0();
      sub_46EE0();
      uint64_t v34 = sub_470B8();
      v13(v34);
      uint64_t v35 = (void *)sub_1AC7F0();
      os_log_type_t v36 = sub_1ACF50();
      if (sub_29300(v36))
      {
        uint64_t v37 = (_WORD *)sub_49780();
        sub_29368(v37);
        sub_A7FC(&def_342E4, v38, v39, "Received .allMedsLoggedAlready inside first .receivedConfirmationLogAsScheduled case, handling.");
        sub_A1F0();
      }
      uint64_t v40 = *(void (**)(uint64_t))(v12 + 12072);
      uint64_t v100 = *(void *)(v12 + 11064);
      uint64_t v101 = *(void *)(v12 + 11088);
      uint64_t v99 = *(void *)(v12 + 11048);

      uint64_t v41 = sub_47968();
      v40(v41);
      sub_1AB090();
      sub_E524();
      v42();
      sub_47A8C();
      sub_4783C();
      v43();
      sub_1AB3C0();
      *(void *)(v12 + 12288) = *(void *)(v99 + 336);
      swift_retain();
      swift_retain();
      getMedStatus(from:)();
      swift_release();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v100, 1, 1, v101);
      os_log_type_t v44 = (void *)swift_task_alloc();
      *(void *)(v12 + 12296) = v44;
      *os_log_type_t v44 = v12;
      v44[1] = sub_3B670;
      sub_46EC4();
      return sub_1A6154();
    case 107:
      sub_4801C();
      sub_46EE0();
      uint64_t v46 = sub_477D8();
      ((void (*)(uint64_t))v14)(v46);
      uint64_t v47 = (void *)sub_1AC7F0();
      os_log_type_t v48 = sub_1ACF50();
      if (sub_470C8(v48))
      {
        uint64_t v49 = (_WORD *)sub_49780();
        sub_475A0(v49);
        sub_471F8(&def_342E4, v50, v51, "Received .needsConfirmMixedLogging inside first .receivedConfirmationLogAsScheduled case, handling.");
        sub_A1F0();
      }
      uint64_t v52 = *(void (**)(uint64_t))(v12 + 12072);
      uint64_t v53 = *(void *)(v12 + 11048);

      uint64_t v54 = sub_A7C4();
      v52(v54);
      uint64_t v55 = *(void *)(v53 + 224);
      uint64_t v56 = *(void *)(v53 + 232);
      v53 += 224;
      uint64_t v57 = *(void *)(v53 + 16);
      uint64_t v58 = *(void *)(v53 + 24);
      uint64_t v59 = *(void *)(v53 + 32);
      uint64_t v60 = *(void *)(v53 + 40);
      uint64_t v61 = *(void *)(v53 + 48);
      uint64_t v62 = *(void *)(v53 + 56);
      unsigned __int8 v63 = *(unsigned char *)(v53 + 64);
      *(void *)uint64_t v53 = 6;
      *(_OWORD *)(v53 + 8) = 0u;
      *(_OWORD *)(v53 + 24) = 0u;
      *(_OWORD *)(v53 + 40) = 0u;
      *(void *)(v53 + 56) = 0;
      *(unsigned char *)(v53 + 64) = -64;
      sub_4610C(v55, v56, v57, v58, v59, v60, v61, v62, v63);
      uint64_t v64 = sub_45D6C(v15, (SEL *)&selRef_matchingMeds);
      if (v64)
      {
        uint64_t v65 = v64;
        uint64_t v102 = *(void **)(v12 + 12088);
        swift_retain();
        char v66 = getMedStatus(from:)();
        swift_release();
        sub_3F898(v104);
        type metadata accessor for WellnessLoggingCATsSimple();
        sub_1AC240();
        uint64_t v67 = sub_1AC210();
        type metadata accessor for WellnessLoggingCATs();
        sub_1AC240();
        uint64_t v68 = sub_1AC1A0();
        sub_1AB1C0();
        sub_47658();
        uint64_t v69 = sub_1AB1B0();
        type metadata accessor for LogMedGenericMixedStatusConfirmationStrategy();
        uint64_t v70 = swift_allocObject();
        sub_463E8(v66 & 1, v65, v104, v67, v68, v69, v70);
        swift_retain();
        sub_1AB350();
        sub_2694(&qword_202FD8);
        sub_47658();
        sub_46764(&qword_202FE0, 255, (void (*)(uint64_t))type metadata accessor for LogMedGenericMixedStatusConfirmationStrategy);
        *(void *)(v12 + 10968) = sub_1AAE80();
        sub_B56C(&qword_202FE8, &qword_202FD8);
        swift_retain();
        sub_1AB100();

        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        uint64_t v103 = v12 + 5592;
        uint64_t v80 = *(void (**)(uint64_t))(v12 + 12056);
        sub_46EE0();
        uint64_t v81 = sub_47CE4();
        v80(v81);
        char v82 = (void *)sub_1AC7F0();
        os_log_type_t v83 = sub_1ACF50();
        if (sub_A3D0(v83))
        {
          uint64_t v84 = (_WORD *)sub_49780();
          sub_47F08(v84);
          sub_4777C(&def_342E4, v85, v86, "Needed confirmation for mixed logging, but intentResponse.matchingMeds was nil.");
          sub_A1F0();
        }
        uint64_t v87 = *(void **)(v12 + 12088);
        uint64_t v88 = *(void (**)(uint64_t))(v12 + 12072);
        uint64_t v89 = *(void *)(v12 + 11048);

        uint64_t v90 = sub_47968();
        v88(v90);
        sub_9B48(v89 + 64, v103);
        sub_9BA4();
        sub_1AB120();

        sub_9BF0(v103);
      }
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_46EC4();
      return v92(v91, v92, v93, v94, v95, v96, v97, v98, a9, a10, a11, a12);
    case 4:
      sub_4801C();
      sub_46EE0();
      uint64_t v18 = sub_477D8();
      ((void (*)(uint64_t))v14)(v18);
      uint64_t v19 = sub_1AC7F0();
      os_log_type_t v20 = sub_1ACF50();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (_WORD *)sub_49780();
        sub_475A0(v21);
        sub_47F38(&def_342E4, v22, v23, "Received successful intent response, creating output.");
        sub_A1F0();
      }
      int v24 = *(void (**)(uint64_t))(v12 + 12072);
      uint64_t v25 = *(void *)(v12 + 11048);

      uint64_t v26 = sub_A7C4();
      v24(v26);
      uint64_t v27 = sub_45D6C(v15, (SEL *)&selRef_matchingMedsBeforeUpdate);
      if (v27) {
        uint64_t v28 = (void *)v27;
      }
      else {
        uint64_t v28 = &_swiftEmptyArrayStorage;
      }
      sub_3F974((uint64_t)v28);
      swift_bridgeObjectRelease();
      swift_retain();
      *(unsigned char *)(v12 + 7098) = getMedStatus(from:)() & 1;
      swift_release();
      *(void *)(v12 + 12112) = *(void *)(v25 + 336);
      swift_retain();
      uint64_t v29 = (void *)swift_task_alloc();
      *(void *)(v12 + 12120) = v29;
      *uint64_t v29 = v12;
      v29[1] = sub_3A1B4;
      sub_480C0();
      sub_46EC4();
      return sub_1A4B50(v30, v31);
    default:
      sub_474C0();
      sub_46EE0();
      uint64_t v71 = sub_470B8();
      v13(v71);
      sub_1AC7F0();
      os_log_type_t v72 = sub_1ACF50();
      if (sub_29300(v72))
      {
        uint64_t v73 = (_WORD *)sub_49780();
        sub_29368(v73);
        sub_A7FC(&def_342E4, v74, v75, "Got unacceptable response code after confirmedLogAsScheduled, creating failure output.");
        sub_A1F0();
      }
      uint64_t v76 = *(void (**)(uint64_t))(v12 + 12072);
      sub_47C80();
      uint64_t v77 = sub_479C8();
      v76(v77);
      *(void *)(v12 + 12464) = *(void *)(v14 + 336);
      swift_retain();
      uint64_t v78 = (void *)swift_task_alloc();
      *(void *)(v12 + 12472) = v78;
      *uint64_t v78 = v12;
      v78[1] = sub_3CBEC;
      sub_46EC4();
      return sub_1A4C74();
  }
}

uint64_t sub_3A1B4()
{
  sub_47634();
  sub_46F18();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v7 + 12128) = v6;
  swift_task_dealloc();
  sub_47BA8();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_3A2C0()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v1 = v0 + 1078;
  uint64_t v2 = (void *)v0[1516];
  uint64_t v3 = v0 + 1083;
  uint64_t v4 = sub_1AB070();
  sub_47E6C(v4, (uint64_t)HKActivityRingUIViewRepresentable.updateUIView(_:context:));
  id v5 = [v2 catId];
  sub_1ACDD0();
  sub_47C50();
  sub_47640();
  sub_1AB3C0();
  sub_47DC0();
  sub_2E38(v0 + 1043, v0[1046]);
  sub_471EC();
  v6();
  if (sub_47408(v0 + 1063))
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 1063));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 1043));
    char v7 = 4;
  }
  else
  {
    sub_9DE0((uint64_t)v5, (uint64_t)(v0 + 1068));
    uint64_t v3 = v0 + 1078;
    sub_2E38(v0 + 1068, v0[1071]);
    sub_471EC();
    v8();
    uint64_t v1 = (void *)v0[1077];
    sub_475F8(v0 + 1073);
    sub_47990();
    if (v9) {
      char v7 = 0;
    }
    else {
      char v7 = 4;
    }
  }
  sub_19DAB4(0, 0, v7);
  sub_9DE0((uint64_t)v5, (uint64_t)v1);
  uint64_t v10 = sub_4716C(v1);
  v11(v10);
  if (sub_473A0(v3))
  {
    sub_47B84();
  }
  else
  {
    sub_47CCC();
    uint64_t v12 = sub_470F0();
    v13(v12);
    sub_473D4(v0 + 1093);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 1093));
    sub_47864((uint64_t)(v0 + 1088));
  }
  uint64_t v14 = sub_1AC2B0();
  v0[1517] = v15;
  v0[1518] = v14;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[1519] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_3A554;
  sub_472E0();
  sub_46EC4();
  return sub_7A658(v17, v18);
}

uint64_t sub_3A554()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[1336] = v0;
  v1[1337] = v3;
  v1[1338] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 12160) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_3A628()
{
  sub_A364();
  v0[1521] = v0[1337];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[1522] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_3A6B8;
  uint64_t v2 = sub_47238();
  return sub_7A658(v2, v3);
}

uint64_t sub_3A6B8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[1339] = v0;
  v1[1340] = v3;
  v1[1341] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 12184) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_3A78C()
{
  sub_A364();
  v0[1524] = v0[1340];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[1525] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_3A81C;
  uint64_t v2 = sub_472C8();
  return sub_7A658(v2, v3);
}

uint64_t sub_3A81C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[1342] = v0;
  v1[1343] = v3;
  v1[1344] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 12208) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_3A8F0()
{
  sub_A364();
  v0[1527] = v0[1343];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[1528] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_3A988;
  unint64_t v2 = sub_47514();
  return sub_7A658(v2, v3);
}

uint64_t sub_3A988()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *unint64_t v2 = v1;
  v1[1345] = v0;
  v1[1346] = v3;
  v1[1347] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 12232) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_3AA5C()
{
  sub_A364();
  v0[1530] = v0[1346];
  sub_2F2B8(88);
  v0[1531] = v1;
  unint64_t v2 = (void *)swift_task_alloc();
  v0[1532] = v2;
  *unint64_t v2 = v0;
  v2[1] = sub_3AB00;
  sub_47E34();
  return sub_7A988();
}

uint64_t sub_3AB00()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *unint64_t v2 = v1;
  v1[1348] = v0;
  v1[1349] = v3;
  v1[1350] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 12264) = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

#error "3ADE8: call analysis failed (funcsize=189)"

uint64_t sub_3AF18()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *unint64_t v2 = v1;
  uint64_t v3 = v1 + 8864;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

void sub_3B008()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v9 = *(void **)(v0 + 12128);
  uint64_t v1 = *(void **)(v0 + 12104);
  unint64_t v2 = *(void **)(v0 + 12088);
  sub_475C8();
  sub_47D20(v3);
  sub_9DE0(v0 + 8784, v0 + 8904);
  uint64_t v4 = sub_47588();
  sub_24D80((long long *)(v0 + 8904), v4 + 16);
  sub_9AF04();
  *(void *)(v0 + 10992) = sub_1AAE20();
  sub_1AB120();

  sub_47920();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 8784);
  sub_46028(v8, (void (*)(void))type metadata accessor for GenericMedCompletedLogModel);
  sub_46028(v10, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_A068(v11, &qword_201E20);
  sub_47814();
  v5();
  swift_release();
  sub_46D64();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_47E44();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_3B378()
{
  sub_46EFC();
  sub_4712C();
  sub_474C0();
  sub_46EE0();
  uint64_t v2 = sub_470B8();
  v1(v2);
  uint64_t v3 = (void *)sub_1AC7F0();
  os_log_type_t v4 = sub_1ACF60();
  BOOL v5 = sub_47A70(v4);
  uint64_t v6 = (void (*)(uint64_t))v0[1509];
  if (v5)
  {
    uint64_t v7 = (_WORD *)sub_49780();
    sub_4753C(v7);
    sub_476D0((uint64_t)&_swiftEmptyArrayStorage);
    sub_4775C(&def_342E4, v8, v9, "Failed executing catWrapperSimple.genericMedicationCompletedLog_Dialog, returning nil");
    sub_497D4();
  }

  uint64_t v10 = sub_4788C();
  v6(v10);
  uint64_t v11 = (void *)v0[1513];
  uint64_t v12 = (void *)v0[1511];
  sub_474D4();
  sub_47E88();
  sub_9BA4();
  sub_47D5C();

  sub_9BF0((uint64_t)(v0 + 679));
  sub_4688C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_4752C();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_3B670()
{
  sub_47634();
  sub_470A0();
  sub_E53C();
  *os_log_type_t v4 = v3;
  uint64_t v5 = *v2;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 12304) = v7;
  swift_task_dealloc();
  sub_47C98();
  uint64_t v9 = *(void *)(v0 + 11064);
  if (v1)
  {
    swift_release();
    swift_errorRelease();
    sub_A068(v9, &qword_201E28);
  }
  else
  {
    sub_A068(v9, &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_3B7BC()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v1 = (void *)(v0 + 7784);
  uint64_t v2 = (void *)(v0 + 7824);
  id v3 = [*(id *)(v0 + 12304) catId];
  sub_1ACDD0();
  sub_47C50();
  sub_47640();
  sub_47DC0();
  sub_2E38((void *)(v0 + 7624), *(void *)(v0 + 7648));
  sub_471EC();
  v4();
  if (sub_47408((void *)(v0 + 7664)))
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7664);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7624);
    char v5 = 4;
  }
  else
  {
    sub_9DE0((uint64_t)v3, v0 + 7704);
    uint64_t v2 = (void *)(v0 + 7784);
    sub_2E38((void *)(v0 + 7704), *(void *)(v0 + 7728));
    sub_471EC();
    v6();
    uint64_t v1 = *(void **)(v0 + 7776);
    sub_475F8((void *)(v0 + 7744));
    sub_47990();
    if (v7) {
      char v5 = 0;
    }
    else {
      char v5 = 4;
    }
  }
  sub_19DAB4(0, 0, v5);
  sub_9DE0((uint64_t)v3, (uint64_t)v1);
  uint64_t v8 = sub_4716C(v1);
  v9(v8);
  if (sub_473A0(v2))
  {
    sub_47B84();
  }
  else
  {
    sub_47CCC();
    uint64_t v10 = sub_470F0();
    v11(v10);
    sub_473D4((void *)(v0 + 7904));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7904);
    sub_47864(v0 + 7864);
  }
  uint64_t v12 = sub_1AC2B0();
  *(void *)(v0 + 12312) = v13;
  *(void *)(v0 + 12320) = v12;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 12328) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_3BA20;
  sub_472E0();
  sub_46EC4();
  return sub_7A658(v15, v16);
}

uint64_t sub_3BA20()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[1351] = v0;
  v1[1352] = v3;
  v1[1353] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 12336) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_3BAF4()
{
  sub_A364();
  v0[1543] = v0[1352];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[1544] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_3BB84;
  uint64_t v2 = sub_47238();
  return sub_7A658(v2, v3);
}

uint64_t sub_3BB84()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[1354] = v0;
  v1[1355] = v3;
  v1[1356] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 12360) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_3BC58()
{
  sub_A364();
  v0[1546] = v0[1355];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[1547] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_3BCE8;
  uint64_t v2 = sub_472C8();
  return sub_7A658(v2, v3);
}

uint64_t sub_3BCE8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[1357] = v0;
  v1[1358] = v3;
  v1[1359] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 12384) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_3BDBC()
{
  sub_A364();
  v0[1549] = v0[1358];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[1550] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_3BE54;
  unint64_t v2 = sub_47514();
  return sub_7A658(v2, v3);
}

uint64_t sub_3BE54()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *unint64_t v2 = v1;
  v1[1360] = v0;
  v1[1361] = v3;
  v1[1362] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 12408) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_3BF28()
{
  sub_A364();
  v0[1552] = v0[1361];
  sub_2F2B8(88);
  v0[1553] = v1;
  unint64_t v2 = (void *)swift_task_alloc();
  v0[1554] = v2;
  *unint64_t v2 = v0;
  v2[1] = sub_3BFCC;
  sub_47E34();
  return sub_7A988();
}

uint64_t sub_3BFCC()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *unint64_t v2 = v1;
  v1[1363] = v0;
  v1[1364] = v3;
  v1[1365] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 12440) = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

#error "3C318: call analysis failed (funcsize=217)"

uint64_t sub_3C454()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *unint64_t v2 = v1;
  uint64_t v3 = v1 + 8024;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

void sub_3C544()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v9 = *(void **)(v0 + 12304);
  uint64_t v1 = *(void **)(v0 + 12104);
  unint64_t v2 = *(void **)(v0 + 12088);
  sub_475C8();
  sub_47D20(v3);
  sub_9DE0(v0 + 7944, v0 + 8064);
  uint64_t v4 = sub_47588();
  sub_24D80((long long *)(v0 + 8064), v4 + 16);
  sub_9AF04();
  *(void *)(v0 + 10944) = sub_1AAE20();
  sub_1AB120();

  sub_47920();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 7944);
  sub_46028(v8, (void (*)(void))type metadata accessor for GenericMedCompletedLogModel);
  sub_46028(v10, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_A068(v11, &qword_201E20);
  sub_47814();
  v5();
  swift_release();
  sub_46D64();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_47E44();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_3C8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  sub_475AC();
  sub_47D14();
  sub_474C0();
  sub_46EE0();
  uint64_t v64 = sub_470B8();
  v63(v64);
  uint64_t v65 = (void *)sub_1AC7F0();
  os_log_type_t v66 = sub_1ACF50();
  if (sub_29300(v66))
  {
    uint64_t v67 = (_WORD *)sub_49780();
    sub_29368(v67);
    sub_A7FC(&def_342E4, v68, v69, "Couldn't create specificMedicationAllMedsLoggedAlready_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  uint64_t v84 = (void *)v62[1513];
  uint64_t v85 = (void *)v62[1511];
  uint64_t v70 = (void (*)(uint64_t))v62[1509];
  uint64_t v86 = v62[1398];
  uint64_t v87 = v62[1403];
  uint64_t v71 = v62[1381];
  uint64_t v83 = v62[1380];

  uint64_t v72 = sub_47968();
  v70(v72);
  sub_9B48(v71 + 64, (uint64_t)(v62 + 739));
  sub_75790(v62 + 739, v62 + 759);
  sub_9BA4();
  sub_1AB120();

  sub_9BF0((uint64_t)(v62 + 759));
  sub_47310();
  v73();
  sub_469EC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_471D0();
  return v75(v74, v75, v76, v77, v78, v79, v80, v81, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           v83,
           v84,
           v85,
           v86,
           v87,
           a59,
           a60,
           a61,
           a62);
}

uint64_t sub_3CBEC()
{
  sub_47634();
  sub_46F18();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v7 + 12480) = v6;
  *(void *)(v7 + 12488) = v0;
  swift_task_dealloc();
  sub_47BA8();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_3CCFC()
{
  sub_471BC();
  sub_4712C();
  uint64_t v1 = (void *)v0[1560];
  uint64_t v2 = v0[1381];
  sub_1AB090();
  sub_E524();
  v3();
  sub_47A8C();
  uint64_t v4 = sub_47BCC();
  v5(v4);
  sub_1AB3C0();
  id v6 = [v1 catId];
  sub_1ACDD0();
  sub_47ADC();
  sub_47640();
  sub_9DE0(v2 + 24, (uint64_t)(v0 + 893));
  sub_9B48(v2 + 64, (uint64_t)(v0 + 819));
  sub_9DE0(v2 + 296, (uint64_t)(v0 + 903));
  v0[1562] = *(void *)(v2 + 336);
  v0[1563] = *(void *)(v2 + 344);
  swift_retain();
  swift_retain();
  swift_task_alloc();
  sub_250E0();
  v0[1564] = v7;
  *uint64_t v7 = v8;
  v7[1] = sub_3CEAC;
  sub_47B10();
  sub_47294();
  return sub_C1180();
}

uint64_t sub_3CEAC()
{
  sub_47D74();
  sub_E588();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 6552;
  uint64_t v4 = v1 + 7144;
  uint64_t v5 = v1 + 7224;
  sub_470E4();
  uint64_t v6 = *v0;
  sub_E53C();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  swift_release();
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v5);
  sub_E4B8(v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v4);
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

void sub_3CFE0()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v1 = (long long *)(v0 + 888);
  if (v0[891])
  {
    uint64_t v2 = (void *)v0[1513];
    uint64_t v3 = (void *)v0[1511];
    sub_47254(v1, v0[1402]);
    sub_4794C();
    uint64_t v4 = sub_47588();
    sub_47670(v4);
    v0[1367] = sub_47A44();
    sub_47974();

    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 898));
    sub_47310();
    v5();
    swift_release();
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t))v0[1507];
    sub_A068((uint64_t)v1, &qword_202570);
    sub_A340();
    uint64_t v7 = sub_47A34();
    v6(v7);
    uint64_t v8 = (void *)sub_1AC7F0();
    sub_1ACF60();
    sub_47FC4();
    if (sub_476B0())
    {
      uint64_t v9 = (_WORD *)sub_48158();
      sub_47138(v9);
      swift_bridgeObjectRelease();
      sub_4773C(&def_342E4, v10, v11, "getPunchoutOutput() returned nil, returning GenericErrorFlow");
      sub_497D4();

      uint64_t v12 = sub_47A60();
      v13(v12);
    }
    else
    {
      uint64_t v14 = (void (*)(uint64_t))v0[1509];
      sub_47F20();

      uint64_t v15 = sub_480D4();
      v14(v15);
    }
    uint64_t v16 = (void *)v0[1560];
    uint64_t v17 = (void *)v0[1513];
    uint64_t v18 = (void *)v0[1511];
    sub_47378();
    sub_48070();
    sub_9BA4();
    sub_47B2C();

    sub_9BF0((uint64_t)(v0 + 799));
    uint64_t v19 = sub_4779C();
    v20(v19);
  }
  sub_46B4C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_47A24();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_3D3E0()
{
  sub_46EFC();
  sub_4712C();
  sub_474C0();
  sub_46EE0();
  uint64_t v2 = sub_470B8();
  v1(v2);
  uint64_t v3 = (void *)sub_1AC7F0();
  os_log_type_t v4 = sub_1ACF60();
  BOOL v5 = sub_47A70(v4);
  uint64_t v6 = (void (*)(uint64_t))v0[1509];
  if (v5)
  {
    uint64_t v7 = (_WORD *)sub_49780();
    sub_4753C(v7);
    sub_476D0((uint64_t)&_swiftEmptyArrayStorage);
    sub_4775C(&def_342E4, v8, v9, "Failed executing catWrapperSimple.genericMedicationLogFailed_Dialog, returning nil");
    sub_497D4();
  }

  uint64_t v10 = sub_4788C();
  v6(v10);
  uint64_t v11 = (void *)v0[1513];
  uint64_t v12 = (void *)v0[1511];
  sub_474D4();
  sub_47E88();
  sub_9BA4();
  sub_47D5C();

  sub_9BF0((uint64_t)(v0 + 859));
  sub_4688C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_4752C();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_3D6D8()
{
  sub_47634();
  sub_470A0();
  sub_E53C();
  *os_log_type_t v4 = v3;
  uint64_t v5 = *v2;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 12576) = v7;
  swift_task_dealloc();
  sub_47C98();
  uint64_t v9 = *(void *)(v0 + 11056);
  if (v1)
  {
    swift_release();
    swift_errorRelease();
    sub_A068(v9, &qword_201E28);
  }
  else
  {
    sub_A068(v9, &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_3D824()
{
  sub_471BC();
  sub_4712C();
  uint64_t v1 = (void *)v0[1572];
  uint64_t v2 = v0[1381];
  sub_1AB090();
  sub_E524();
  v3();
  sub_47A8C();
  uint64_t v4 = sub_47BCC();
  v5(v4);
  sub_1AB3C0();
  id v6 = [v1 catId];
  sub_1ACDD0();
  sub_47ADC();
  sub_47640();
  sub_9DE0(v2 + 24, (uint64_t)(v0 + 1053));
  sub_9B48(v2 + 64, (uint64_t)(v0 + 659));
  sub_9DE0(v2 + 296, (uint64_t)(v0 + 1048));
  v0[1573] = *(void *)(v2 + 336);
  v0[1574] = *(void *)(v2 + 344);
  swift_retain();
  swift_retain();
  swift_task_alloc();
  sub_250E0();
  v0[1575] = v7;
  *uint64_t v7 = v8;
  v7[1] = sub_3D9D4;
  sub_4731C();
  sub_47294();
  return sub_C1180();
}

uint64_t sub_3D9D4()
{
  sub_47D74();
  sub_E588();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 8424;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_release();
  sub_47DEC();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v6, v7, v8);
}

void sub_3DAFC()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v1 = (long long *)(v0 + 1133);
  if (v0[1136])
  {
    uint64_t v2 = (void *)v0[1572];
    sub_24D80(v1, (uint64_t)(v0 + 1158));
    sub_9DE0((uint64_t)(v0 + 1158), (uint64_t)(v0 + 948));
    uint64_t v3 = sub_47588();
    sub_478B4(v3);
    sub_1AAE40();
    sub_47658();
    v0[1366] = sub_1AAE30();
    sub_1AB120();

    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 1158));
    sub_47310();
    v4();
    swift_release();
  }
  else
  {
    uint64_t v21 = (uint64_t)(v0 + 719);
    uint64_t v5 = (void (*)(uint64_t))v0[1566];
    sub_A068((uint64_t)v1, &qword_202570);
    sub_A340();
    uint64_t v6 = sub_47CBC();
    v5(v6);
    uint64_t v7 = (void *)sub_1AC7F0();
    os_log_type_t v8 = sub_1ACF50();
    if (sub_470C8(v8))
    {
      uint64_t v9 = (_WORD *)sub_49780();
      sub_475A0(v9);
      sub_471F8(&def_342E4, v10, v11, "Couldn't create output, returning GenericErrorFlow");
      sub_A1F0();
    }
    uint64_t v12 = (void *)v0[1572];
    uint64_t v13 = (void (*)(uint64_t))v0[1568];
    uint64_t v14 = v0[1399];
    uint64_t v19 = v0[1398];
    uint64_t v20 = v0[1401];
    uint64_t v15 = v0[1381];

    uint64_t v16 = sub_A7C4();
    v13(v16);
    sub_9B48(v15 + 64, v21);
    sub_9BA4();
    sub_1AB120();

    sub_9BF0(v21);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v20, v19);
  }
  sub_47554();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_4752C();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_3E048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  sub_475AC();
  sub_47D14();
  unsigned __int8 v63 = (void (*)(uint64_t))v62[1566];
  sub_46EE0();
  uint64_t v64 = sub_470B8();
  v63(v64);
  uint64_t v65 = (void *)sub_1AC7F0();
  os_log_type_t v66 = sub_1ACF50();
  if (sub_29300(v66))
  {
    uint64_t v67 = (_WORD *)sub_49780();
    sub_29368(v67);
    sub_A7FC(&def_342E4, v68, v69, "Couldn't create logMedConfirmationRejected_Dialog, returning GenericErrorFlow");
    sub_A1F0();
  }
  uint64_t v70 = (void (*)(uint64_t))v62[1568];
  uint64_t v71 = v62[1381];

  uint64_t v72 = sub_A7C4();
  v70(v72);
  sub_9B48(v71 + 64, (uint64_t)(v62 + 579));
  sub_9BA4();
  sub_47B2C();
  sub_9BF0((uint64_t)(v62 + 579));
  sub_469EC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_471D0();
  return v74(v73, v74, v75, v76, v77, v78, v79, v80, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62);
}

uint64_t sub_3E330()
{
  sub_A364();
  sub_472B4();
  uint64_t v1 = *v0;
  sub_E53C();
  *uint64_t v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_3E3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  sub_475AC();
  sub_47D14();
  uint64_t v65 = (void *)v62[1578];
  os_log_type_t v66 = (void *)v62[1372];
  v62[1580] = v66;
  swift_unknownObjectRelease();

  sub_47CF4();
  uint64_t v68 = v67();
  if (v68 == 5)
  {
    sub_48030();
    sub_46EE0();
    uint64_t v75 = sub_470B8();
    v63(v75);
    sub_1AC7F0();
    os_log_type_t v76 = sub_1ACF50();
    if (sub_29300(v76))
    {
      uint64_t v77 = (_WORD *)sub_49780();
      sub_29368(v77);
      sub_A7FC(&def_342E4, v78, v79, "Got .noMedsFound or .failure, creating output.");
      sub_A1F0();
    }
    uint64_t v80 = (void (*)(uint64_t))v62[1576];
    sub_47C80();
    uint64_t v81 = sub_479C8();
    v80(v81);
    v62[1582] = *(void *)(v64 + 336);
    swift_retain();
    char v82 = (void *)swift_task_alloc();
    v62[1583] = v82;
    *char v82 = v62;
    v82[1] = sub_3EBE8;
    sub_471D0();
    return sub_1A4C74();
  }
  else if (v68 == 4)
  {
    uint64_t v69 = sub_45D6C(v66, (SEL *)&selRef_matchingMedsBeforeUpdate);
    if (v69) {
      uint64_t v70 = (void *)v69;
    }
    else {
      uint64_t v70 = &_swiftEmptyArrayStorage;
    }
    sub_3F974((uint64_t)v70);
    swift_bridgeObjectRelease();
    swift_task_alloc();
    sub_250E0();
    v62[1581] = v71;
    *uint64_t v71 = v72;
    v71[1] = sub_3E8E0;
    sub_471D0();
    return sub_4090C();
  }
  else
  {
    uint64_t v84 = (void (*)(uint64_t))v62[1460];
    sub_46EE0();
    uint64_t v85 = sub_477D8();
    v84(v85);
    uint64_t v86 = (void *)sub_1AC7F0();
    os_log_type_t v87 = sub_1ACF60();
    if (sub_470C8(v87))
    {
      uint64_t v88 = (_WORD *)sub_49780();
      sub_475A0(v88);
      sub_471F8(&def_342E4, v89, v90, ".receivedConfirmationMixedLogging got a non-{success/failure} response code, returning GenericErrorFlow");
      sub_A1F0();
    }
    uint64_t v102 = (void *)v62[1578];
    uint64_t v91 = (void (*)(uint64_t))v62[1576];
    uint64_t v92 = v62[1381];

    uint64_t v93 = sub_47968();
    v91(v93);
    sub_9B48(v92 + 64, (uint64_t)(v62 + 239));
    sub_9BA4();
    sub_1AB120();

    sub_9BF0((uint64_t)(v62 + 239));
    sub_469EC();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_471D0();
    return v95(v94, v95, v96, v97, v98, v99, v100, v101, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             v102,
             a59,
             a60,
             a61,
             a62);
  }
}

uint64_t sub_3E8E0()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_E53C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_3E9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  sub_475AC();
  sub_47D14();
  unsigned __int8 v63 = *(void **)(v62 + 12640);

  sub_469EC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_471D0();
  return v65(v64, v65, v66, v67, v68, v69, v70, v71, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62);
}

uint64_t sub_3EBE8()
{
  sub_47634();
  sub_46F18();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v7 + 12672) = v6;
  *(void *)(v7 + 12680) = v0;
  swift_task_dealloc();
  sub_47BA8();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_3ECF8()
{
  sub_471BC();
  sub_4712C();
  uint64_t v2 = (void *)v0[1584];
  sub_47E18();
  sub_106A94();
  sub_47AA8(v3, v4);
  swift_release();
  sub_1AB3C0();
  id v5 = [v2 catId];
  sub_1ACDD0();
  sub_47ADC();
  sub_47640();
  sub_9DE0(v1 + 24, (uint64_t)(v0 + 1178));
  sub_47EF0();
  sub_9DE0(v1 + 296, (uint64_t)(v0 + 1188));
  v0[1586] = *(void *)(v1 + 336);
  v0[1587] = *(void *)(v1 + 344);
  LogPeriodFlow.on(input:)();
  swift_retain();
  swift_retain();
  swift_task_alloc();
  sub_250E0();
  v0[1588] = v6;
  *uint64_t v6 = v7;
  v6[1] = sub_3EE54;
  sub_47B10();
  sub_47294();
  return sub_C1180();
}

uint64_t sub_3EE54()
{
  sub_47D74();
  sub_E588();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 3192;
  uint64_t v4 = v1 + 9424;
  uint64_t v5 = v1 + 9504;
  sub_470E4();
  uint64_t v6 = *v0;
  sub_E53C();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  swift_release();
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v5);
  sub_E4B8(v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v4);
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

void sub_3EF84()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v1 = (long long *)(v0 + 1173);
  if (v0[1176])
  {
    uint64_t v2 = (void *)v0[1580];
    uint64_t v3 = (void *)v0[1578];
    sub_47254(v1, v0[1400]);
    sub_4794C();
    uint64_t v4 = sub_47588();
    sub_47670(v4);
    v0[1378] = sub_47A44();
    sub_47974();

    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 1163));
    sub_47310();
    v5();
    swift_release();
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t))v0[1460];
    sub_A068((uint64_t)v1, &qword_202570);
    sub_A340();
    uint64_t v7 = sub_47A34();
    v6(v7);
    uint64_t v8 = (void *)sub_1AC7F0();
    sub_1ACF60();
    sub_47FC4();
    if (sub_476B0())
    {
      uint64_t v9 = (_WORD *)sub_48158();
      sub_47138(v9);
      swift_bridgeObjectRelease();
      sub_4773C(&def_342E4, v10, v11, "getPunchoutOutput() returned nil, returning GenericErrorFlow");
      sub_497D4();

      uint64_t v12 = sub_47A60();
      v13(v12);
    }
    else
    {
      uint64_t v14 = (void (*)(uint64_t))v0[1576];
      sub_47F20();

      uint64_t v15 = sub_480D4();
      v14(v15);
    }
    uint64_t v16 = (void *)v0[1584];
    uint64_t v17 = (void *)v0[1580];
    uint64_t v18 = (void *)v0[1578];
    sub_47378();
    sub_48070();
    sub_9BA4();
    sub_47B2C();

    sub_9BF0((uint64_t)(v0 + 459));
    uint64_t v19 = sub_4779C();
    v20(v19);
  }
  sub_46B4C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_47A24();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_3F37C()
{
  sub_46EFC();
  sub_4712C();
  sub_48030();
  sub_46EE0();
  uint64_t v2 = sub_470B8();
  v1(v2);
  uint64_t v3 = (void *)sub_1AC7F0();
  sub_1ACF60();
  sub_12D264(0);
  BOOL v4 = sub_48138();
  uint64_t v5 = (void (*)(uint64_t))v0[1576];
  if (v4)
  {
    uint64_t v6 = (_WORD *)sub_49780();
    sub_476F0(v6);
    swift_bridgeObjectRelease();
    sub_480E0(&def_342E4, v7, v8, "Failed executing catWrapperSimple.genericMedicationLogFailed_Dialog, returning nil");
    sub_497D4();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v9 = sub_4788C();
  v5(v9);
  uint64_t v10 = (void *)v0[1580];
  uint64_t v11 = (void *)v0[1578];
  sub_9B48(v0[1381] + 64, (uint64_t)(v0 + 319));
  sub_75790(v0 + 319, v0 + 299);
  sub_9BA4();
  sub_1AB120();

  sub_9BF0((uint64_t)(v0 + 299));
  sub_4688C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_4752C();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_3F6A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1AB1C0();
  sub_47658();
  uint64_t result = sub_1AB1B0();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *a1 = result;
  return result;
}

uint64_t sub_3F6F0()
{
  return sub_3F748((void (*)(void))type metadata accessor for WellnessLoggingCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t sub_3F71C()
{
  return sub_3F748((void (*)(void))type metadata accessor for WellnessCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t sub_3F748(void (*a1)(void), uint64_t (*a2)(uint64_t, void))
{
  uint64_t v5 = sub_1AC250();
  uint64_t v6 = sub_53D4(v5);
  __chkstk_darwin(v6);
  sub_47EB8();
  a1(0);
  sub_48120();
  return a2(v2, 0);
}

uint64_t sub_3F7C8()
{
  id v0 = objc_allocWithZone((Class)sub_1AC790());
  return sub_1AC780();
}

uint64_t sub_3F810@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = (objc_class *)sub_1AC4D0();
  id v3 = objc_allocWithZone(v2);
  uint64_t result = sub_1AC4C0();
  a1[3] = (uint64_t)v2;
  a1[4] = (uint64_t)&protocol witness table for MedStorageHelper;
  *a1 = result;
  return result;
}

uint64_t sub_3F878(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_46860, 0, 0);
}

uint64_t sub_3F898@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_1AC250();
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_47EB8();
  sub_E988C(a1);
  type metadata accessor for WellnessCATPatternsExecutor(0);
  sub_48120();
  uint64_t v5 = sub_1AC1A0();
  a1[8] = v1;
  a1[9] = (uint64_t)&off_1F6840;
  a1[5] = v5;
  type metadata accessor for WellnessLoggingCATPatternsExecutor(0);
  sub_48120();
  uint64_t v6 = sub_1AC1A0();
  a1[13] = v1;
  a1[14] = (uint64_t)&off_1F8838;
  a1[10] = v6;
  type metadata accessor for WellnessQueryingCATPatternsExecutor(0);
  sub_48120();
  uint64_t result = sub_1AC1A0();
  a1[18] = v1;
  a1[19] = (uint64_t)&off_1F65F0;
  a1[15] = result;
  return result;
}

uint64_t sub_3F974(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1AC800();
  sub_52C4();
  uint64_t v6 = v5;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v24 - v11;
  sub_1ABE30();
  if (sub_1ABE20())
  {
    sub_1ABE00();
    swift_release();
    sub_1AAF60();
    swift_release();
    if (*((void *)&v26 + 1))
    {
      sub_24D80(&v25, (uint64_t)v28);
      sub_1AC7D0();
      sub_A340();
      sub_E524();
      v13();
      uint64_t v14 = sub_1AC7F0();
      os_log_type_t v15 = sub_1ACF50();
      if (sub_A3D0(v15))
      {
        uint64_t v16 = (uint8_t *)sub_292A0();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl(&def_342E4, v14, (os_log_type_t)v10, "SpecificMedLoggingFlow: Registering corrections flow", v16, 2u);
        sub_A1F0();
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v4);
      sub_9DE0(v2 + 360, (uint64_t)v24);
      sub_2E38(v24, v24[3]);
      sub_E49D4(a1, (uint64_t *)&v25);
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v24);
      sub_2E38(v28, v28[3]);
      sub_1AAF50();
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v25);
      return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v28);
    }
  }
  else
  {
    uint64_t v27 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
  }
  sub_A068((uint64_t)&v25, &qword_202F88);
  sub_1AC7D0();
  sub_A340();
  sub_E524();
  v18();
  uint64_t v19 = (void *)sub_1AC7F0();
  os_log_type_t v20 = sub_1ACF60();
  if (sub_470C8(v20))
  {
    uint64_t v21 = (_WORD *)sub_292A0();
    sub_478E4(v21);
    sub_47358(&def_342E4, v22, v23, "SpecificMedLoggingFlow: No corrections client available. Continuing without registering corrections flow.");
    sub_A1F0();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v4);
}

uint64_t sub_3FC18(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_202F78);
  sub_52C4();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_E594();
  uint64_t v79 = v6;
  sub_A358();
  __chkstk_darwin(v7);
  uint64_t v9 = &v68[-v8];
  uint64_t v10 = sub_1AC800();
  sub_52C4();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_E594();
  uint64_t v74 = v14;
  sub_A358();
  __chkstk_darwin(v15);
  uint64_t v73 = &v68[-v16];
  sub_A358();
  __chkstk_darwin(v17);
  uint64_t v72 = &v68[-v18];
  sub_A358();
  __chkstk_darwin(v19);
  char v82 = &v68[-v20];
  sub_A358();
  __chkstk_darwin(v21);
  uint64_t v22 = sub_1AC7D0();
  sub_A340();
  uint64_t v76 = v12;
  uint64_t v77 = v10;
  uint64_t v80 = *(void *)(v12 + 16);
  uint64_t v81 = v12 + 16;
  sub_47B44();
  v23();
  uint64_t v83 = v4;
  uint64_t v24 = *(void *)(v4 + 16);
  uint64_t v78 = a1;
  uint64_t v75 = v24;
  sub_47AD0();
  v25();
  long long v26 = sub_1AC7F0();
  os_log_type_t v27 = sub_1ACF50();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v70 = sub_E620();
    v85[0] = v70;
    uint64_t v71 = v22;
    *(_DWORD *)uint64_t v28 = 136315138;
    uint64_t v69 = v28 + 4;
    sub_B56C(&qword_202F80, &qword_202F78);
    uint64_t v29 = sub_1AD2C0();
    uint64_t v31 = sub_4A278(v29, v30, v85);
    sub_47F78(v31);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v32 = *(void (**)(void))(v83 + 8);
    sub_E530();
    v32();
    _os_log_impl(&def_342E4, v26, v27, "Received response from PromptForValueFlowAsync for LogConfirmationAsScheduledStrategy: %s", v28, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    uint64_t v32 = *(void (**)(void))(v83 + 8);
    ((void (*)(unsigned __int8 *, uint64_t))v32)(v9, v2);
  }

  int v33 = *(void (**)(void))(v76 + 8);
  sub_E530();
  v33();
  uint64_t v34 = v79;
  sub_47AD0();
  v35();
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t))(v83 + 88))(v34, v2) != enum case for PromptResult.answered<A>(_:))
  {
    sub_E530();
    v32();
    sub_A340();
    sub_E524();
    v44();
    uint64_t v38 = (void *)sub_1AC7F0();
    os_log_type_t v45 = sub_1ACF60();
    if (sub_470C8(v45))
    {
      uint64_t v46 = (_WORD *)sub_292A0();
      sub_478E4(v46);
      uint64_t v43 = "PromptForValueFlowAsync was unanswered, erroring out";
      goto LABEL_11;
    }
LABEL_12:

    sub_E530();
    v33();
    sub_47AF4();
    goto LABEL_13;
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(v83 + 96))(v34, v2);
  if (!*((void *)v34 + 1) || (uint64_t v36 = *v34, swift_bridgeObjectRelease(), v36 == 2))
  {
    sub_A340();
    sub_E524();
    v37();
    uint64_t v38 = (void *)sub_1AC7F0();
    os_log_type_t v39 = sub_1ACF60();
    if (sub_470C8(v39))
    {
      uint64_t v40 = (_WORD *)sub_292A0();
      sub_478E4(v40);
      uint64_t v43 = "PromptForValueFlowAsync returned incorrect values, erroring out";
LABEL_11:
      sub_47358(&def_342E4, v41, v42, v43);
      sub_A1F0();
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  uint64_t v56 = v36 & 1;
  sub_A340();
  sub_E524();
  v57();
  uint64_t v58 = (void *)sub_1AC7F0();
  os_log_type_t v59 = sub_1ACF50();
  if (sub_470C8(v59))
  {
    *(_DWORD *)swift_slowAlloc() = 67109120;
    int v84 = v56;
    sub_1ACFE0();
    sub_48100(&def_342E4, v60, v61, "PromptForValueFlowAsync returned: %{BOOL}d");
    sub_A1F0();
  }

  sub_4783C();
  v33();
  if (v56)
  {
    sub_47C68();
  }
  else
  {
    sub_A340();
    sub_E524();
    v62();
    unsigned __int8 v63 = (void *)sub_1AC7F0();
    os_log_type_t v64 = sub_1ACF60();
    if (sub_470C8(v64))
    {
      uint64_t v65 = (_WORD *)sub_292A0();
      sub_478E4(v65);
      sub_47358(&def_342E4, v66, v67, "User rejected confirmation to log as scheduled, switching state");
      sub_A1F0();
    }

    sub_4783C();
    v33();
    sub_47C68();
  }
LABEL_13:
  sub_477B0();
  return sub_4610C(v47, v48, v49, v50, v51, v52, v53, v54, v68[0]);
}

uint64_t sub_40234(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2694(&qword_202F78);
  sub_52C4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_E594();
  uint64_t v93 = v8;
  sub_A358();
  __chkstk_darwin(v9);
  uint64_t v10 = sub_1AC800();
  sub_52C4();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_E594();
  uint64_t v90 = v14;
  sub_A358();
  __chkstk_darwin(v15);
  uint64_t v89 = (char *)&v83 - v16;
  sub_A358();
  __chkstk_darwin(v17);
  uint64_t v88 = (char *)&v83 - v18;
  sub_A358();
  __chkstk_darwin(v19);
  os_log_type_t v87 = (char *)&v83 - v20;
  sub_A358();
  __chkstk_darwin(v21);
  uint64_t v95 = (char *)&v83 - v22;
  sub_A358();
  __chkstk_darwin(v23);
  uint64_t v24 = sub_1AC7D0();
  sub_A340();
  uint64_t v25 = *(void *)(v12 + 16);
  uint64_t v94 = v24;
  uint64_t v96 = v25;
  uint64_t v97 = v12 + 16;
  sub_E524();
  v26();
  uint64_t v98 = v6;
  uint64_t v91 = *(void *)(v6 + 16);
  uint64_t v92 = a1;
  sub_47B44();
  v27();
  uint64_t v28 = sub_1AC7F0();
  os_log_type_t v29 = sub_1ACF50();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v85 = v12;
    uint64_t v31 = (uint8_t *)v30;
    uint64_t v84 = sub_E620();
    v100[0] = v84;
    uint64_t v86 = v10;
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v83 = v31 + 4;
    sub_B56C(&qword_202F80, &qword_202F78);
    uint64_t v32 = sub_1AD2C0();
    uint64_t v34 = sub_4A278(v32, v33, v100);
    sub_47F78(v34);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v35 = *(void (**)(void))(v98 + 8);
    sub_E530();
    v35();
    _os_log_impl(&def_342E4, v28, v29, "Received response from PromptForValueFlowAsync for LogMedGenericMixedStatusConfirmationStrategy: %s", v31, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v36 = v85;
  }
  else
  {
    uint64_t v35 = *(void (**)(void))(v98 + 8);
    sub_E530();
    v35();

    uint64_t v36 = v12;
  }
  uint64_t v37 = *(void (**)(void))(v36 + 8);
  sub_E530();
  v37();
  uint64_t v38 = v93;
  sub_47B44();
  v39();
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t))(v98 + 88))(v38, v4) != enum case for PromptResult.answered<A>(_:))
  {
    sub_E530();
    v35();
    sub_A340();
    sub_472F8();
    v50();
    os_log_type_t v44 = (void *)sub_1AC7F0();
    os_log_type_t v51 = sub_1ACF60();
    if (sub_470C8(v51))
    {
      uint64_t v52 = (_WORD *)sub_292A0();
      sub_478E4(v52);
      uint64_t v49 = "PromptForValueFlowAsync was unanswered, erroring out";
      goto LABEL_11;
    }
LABEL_12:

    sub_E530();
    v37();
    sub_47AF4();
    sub_477B0();
    return sub_4610C(v53, v54, v55, v56, v57, v58, v59, v60, v83);
  }
  uint64_t v40 = sub_A7C4();
  v41(v40);
  if (!*((void *)v38 + 1) || (uint64_t v42 = *v38, swift_bridgeObjectRelease(), v42 == 2))
  {
    sub_A340();
    sub_472F8();
    v43();
    os_log_type_t v44 = (void *)sub_1AC7F0();
    os_log_type_t v45 = sub_1ACF60();
    if (sub_470C8(v45))
    {
      uint64_t v46 = (_WORD *)sub_292A0();
      sub_478E4(v46);
      uint64_t v49 = "PromptForValueFlowAsync returned incorrect values, erroring out";
LABEL_11:
      sub_47358(&def_342E4, v47, v48, v49);
      sub_A1F0();
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  uint64_t v62 = v42 & 1;
  sub_A340();
  sub_472F8();
  v63();
  os_log_type_t v64 = (void *)sub_1AC7F0();
  os_log_type_t v65 = sub_1ACF50();
  if (sub_470C8(v65))
  {
    *(_DWORD *)swift_slowAlloc() = 67109120;
    int v99 = v62;
    sub_1ACFE0();
    sub_48100(&def_342E4, v66, v67, "PromptForValueFlowAsync returned: %{BOOL}d");
    sub_A1F0();
  }

  sub_47814();
  v37();
  if (v62)
  {
    swift_beginAccess();
    sub_472F8();
    v75();
    uint64_t v76 = (void *)sub_1AC7F0();
    os_log_type_t v77 = sub_1ACF50();
    if (sub_470C8(v77))
    {
      uint64_t v78 = (_WORD *)sub_292A0();
      sub_478E4(v78);
      sub_47358(&def_342E4, v79, v80, "User wanted to overwrite existing statuses, switching state");
      sub_A1F0();
    }

    sub_47814();
    v37();
    swift_retain();
    char v81 = getMedStatus(from:)();
    swift_release();
    uint64_t v74 = 3;
    if (v81) {
      uint64_t v74 = 4;
    }
  }
  else
  {
    swift_beginAccess();
    sub_472F8();
    v68();
    uint64_t v69 = (void *)sub_1AC7F0();
    os_log_type_t v70 = sub_1ACF50();
    if (sub_470C8(v70))
    {
      uint64_t v71 = (_WORD *)sub_292A0();
      sub_478E4(v71);
      sub_47358(&def_342E4, v72, v73, "User didn't want to overwrite existing statuses, switching state");
      sub_A1F0();
    }

    sub_47814();
    v37();
    uint64_t v74 = 5;
  }
  uint64_t v53 = *(void *)(v2 + 224);
  uint64_t v54 = *(void *)(v2 + 232);
  uint64_t v82 = v2 + 224;
  uint64_t v55 = *(void *)(v82 + 16);
  uint64_t v56 = *(void *)(v82 + 24);
  uint64_t v57 = *(void *)(v82 + 32);
  uint64_t v58 = *(void *)(v82 + 40);
  uint64_t v59 = *(void *)(v82 + 48);
  uint64_t v60 = *(void *)(v82 + 56);
  *(void *)uint64_t v82 = v74;
  *(_OWORD *)(v82 + 8) = 0u;
  *(_OWORD *)(v82 + 24) = 0u;
  *(_OWORD *)(v82 + 40) = 0u;
  *(void *)(v82 + 56) = 0;
  *(unsigned char *)(v82 + 64) = 0x80;
  return sub_4610C(v53, v54, v55, v56, v57, v58, v59, v60, v83);
}

uint64_t sub_4090C()
{
  sub_A364();
  *(void *)(v1 + 3216) = v0;
  *(void *)(v1 + 3208) = v2;
  *(unsigned char *)(v1 + 3129) = v3;
  *(void *)(v1 + 3200) = v4;
  uint64_t v5 = type metadata accessor for GenericMedCompletedLogModel();
  sub_53D4(v5);
  *(void *)(v1 + 3224) = sub_A42C();
  uint64_t v6 = sub_1AC1E0();
  *(void *)(v1 + 3232) = v6;
  sub_A19C(v6);
  *(void *)(v1 + 3240) = v7;
  *(void *)(v1 + 3248) = sub_A220();
  *(void *)(v1 + 3256) = swift_task_alloc();
  uint64_t v8 = sub_2694(&qword_2022D0);
  sub_53D4(v8);
  *(void *)(v1 + 3264) = sub_A42C();
  uint64_t v9 = sub_1AABD0();
  sub_53D4(v9);
  *(void *)(v1 + 3272) = sub_A220();
  *(void *)(v1 + 3280) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SpecificMedCompletedLogModel();
  sub_53D4(v10);
  *(void *)(v1 + 3288) = sub_A42C();
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  *(void *)(v1 + 3296) = v11;
  sub_53D4(v11);
  *(void *)(v1 + 3304) = sub_A220();
  *(void *)(v1 + 3312) = swift_task_alloc();
  uint64_t v12 = sub_2694(&qword_201E20);
  sub_53D4(v12);
  *(void *)(v1 + 3320) = sub_A220();
  *(void *)(v1 + 3328) = swift_task_alloc();
  *(void *)(v1 + 3336) = swift_task_alloc();
  *(void *)(v1 + 3344) = swift_task_alloc();
  *(void *)(v1 + 3352) = swift_task_alloc();
  uint64_t v13 = sub_2694(&qword_201E28);
  sub_53D4(v13);
  *(void *)(v1 + 3360) = sub_A220();
  *(void *)(v1 + 3368) = swift_task_alloc();
  *(void *)(v1 + 3376) = swift_task_alloc();
  *(void *)(v1 + 3384) = swift_task_alloc();
  uint64_t v14 = sub_1AC800();
  *(void *)(v1 + 3392) = v14;
  sub_A19C(v14);
  *(void *)(v1 + 3400) = v15;
  *(void *)(v1 + 3408) = sub_A220();
  *(void *)(v1 + 3416) = swift_task_alloc();
  *(void *)(v1 + 3424) = swift_task_alloc();
  *(void *)(v1 + 3432) = swift_task_alloc();
  *(void *)(v1 + 3440) = swift_task_alloc();
  *(void *)(v1 + 3448) = swift_task_alloc();
  *(void *)(v1 + 3456) = swift_task_alloc();
  *(void *)(v1 + 3464) = swift_task_alloc();
  *(void *)(v1 + 3472) = swift_task_alloc();
  uint64_t v16 = sub_1AB0A0();
  *(void *)(v1 + 3480) = v16;
  sub_A19C(v16);
  *(void *)(v1 + 3488) = v17;
  *(void *)(v1 + 3496) = sub_A220();
  *(void *)(v1 + 3504) = swift_task_alloc();
  uint64_t v18 = sub_1AB3D0();
  *(void *)(v1 + 3512) = v18;
  sub_A19C(v18);
  *(void *)(v1 + 3520) = v19;
  *(void *)(v1 + 3528) = sub_A220();
  *(void *)(v1 + 3536) = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v20, v21, v22);
}

uint64_t sub_40C14()
{
  uint64_t v79 = v0;
  uint64_t v1 = v0 + 3128;
  uint64_t v2 = *(void *)(v0 + 3488);
  uint64_t v3 = *(void *)(v0 + 3400);
  int v4 = *(unsigned __int8 *)(v0 + 3129);
  sub_1AB070();
  *(void *)(v0 + 3544) = *(void *)(v2 + 16);
  *(void *)(v0 + 3552) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  sub_E524();
  v5();
  sub_1AB370();
  *(void *)(v0 + 3560) = *(void *)(v2 + 8);
  *(void *)(v0 + 3568) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v6 = sub_4788C();
  v7(v6);
  *(void *)(v0 + 3576) = sub_1AC7D0();
  uint64_t v8 = (void *)(v3 + 16);
  uint64_t v9 = *(void **)(v0 + 3208);
  uint64_t v10 = (void *)((v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000);
  if (v4 == 5)
  {
    sub_46EE0();
    *(void *)(v0 + 3584) = *v8;
    *(void *)(v0 + 3592) = v10;
    sub_47AD0();
    v11();
    id v12 = v9;
    uint64_t v13 = sub_1AC7F0();
    os_log_type_t v14 = sub_1ACF50();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)sub_47ED0(v0 + 3192);
      uint64_t v16 = (void *)sub_E620();
      uint64_t v78 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      unint64_t v17 = sub_45D6C(v10, (SEL *)&selRef_matchingMeds);
      unint64_t v18 = v17;
      if (v17)
      {
        if (v17 >> 62) {
          uint64_t v19 = sub_1AD170();
        }
        else {
          uint64_t v19 = *(void *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFFF8));
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v19 = 0;
      }
      sub_47EA0();
      *(void *)(v0 + 3120) = v19;
      *(unsigned char *)(v0 + 3128) = v35;
      sub_2694(&qword_202F50);
      uint64_t v36 = sub_1ACFC0();
      *(void *)(v0 + 3192) = sub_4A278(v36, v37, (uint64_t *)&v78);
      sub_1ACFE0();
      swift_bridgeObjectRelease();

      _os_log_impl(&def_342E4, v13, v14, "got .rejectedOverwriteInGroup, starting with %s matchingMeds", v15, 0xCu);
      sub_47F58();
      sub_A1F0();
      sub_A1F0();

      uint64_t v31 = *(void (**)())(v18 + 8);
      v31();
    }
    else
    {
      uint64_t v29 = *(void *)(v0 + 3400);
      uint64_t v30 = *(void **)(v0 + 3208);

      uint64_t v31 = *(void (**)())(v29 + 8);
      sub_47814();
      v31();
    }
    *(void *)(v0 + 3600) = v31;
    if (!sub_45D6C(*(void **)(v0 + 3208), (SEL *)&selRef_matchingMeds))
    {
LABEL_21:
      uint64_t v41 = *(void *)(v0 + 3384);
      uint64_t v42 = *(void *)(v0 + 3232);
      *(void *)(v0 + 3608) = *(void *)(*(void *)(v0 + 3216) + 336);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v41, 1, 1, v42);
      swift_retain();
      uint64_t v43 = (void *)swift_task_alloc();
      *(void *)(v0 + 3616) = v43;
      *uint64_t v43 = v0;
      v43[1] = sub_415EC;
LABEL_51:
      sub_47898();
      return sub_1A5530();
    }
    sub_477E8();
    if (v39) {
      uint64_t v40 = sub_1AD170();
    }
    else {
      uint64_t v40 = *(void *)(v38 + 16);
    }
    swift_bridgeObjectRelease();
    if (v40 != 1)
    {
      if (v40)
      {
        if (!sub_45D6C(*(void **)(v0 + 3208), (SEL *)&selRef_matchingMeds))
        {
          os_log_type_t v65 = *(void (**)(uint64_t))(v0 + 3584);
          sub_46EE0();
          uint64_t v66 = sub_470B8();
          v65(v66);
          sub_1AC7F0();
          os_log_type_t v67 = sub_1ACF60();
          if (sub_29300(v67))
          {
            uint64_t v68 = (_WORD *)sub_292A0();
            sub_29368(v68);
            sub_A7FC(&def_342E4, v69, v70, "Couldn't create logMedConfirmationRejected_Dialog, returning GenericErrorFlow");
            sub_A1F0();
          }
          uint64_t v71 = *(void (**)(uint64_t))(v0 + 3600);
          sub_47338();
          uint64_t v72 = sub_471A4();
          v71(v72);
          sub_47BB4();
          sub_9BA4();
          sub_47E54();
          sub_9BF0(v0 + 816);
          sub_47310();
          v73();
          sub_46F30();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          sub_E564();
          sub_47898();
          __asm { BRAA            X1, X16 }
        }
        sub_477E8();
        if (v51) {
          sub_1AD170();
        }
        uint64_t v52 = *(void *)(v0 + 3368);
        uint64_t v53 = *(void *)(v0 + 3232);
        uint64_t v54 = *(void *)(v0 + 3216);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 3776) = *(void *)(v54 + 336);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v52, 1, 1, v53);
        swift_retain();
        uint64_t v55 = (void *)swift_task_alloc();
        *(void *)(v0 + 3784) = v55;
        *uint64_t v55 = v0;
        v55[1] = sub_43164;
        goto LABEL_51;
      }
      goto LABEL_21;
    }
    os_log_type_t v44 = *(void **)(v0 + 3208);
    *(void *)(v0 + 3656) = *(void *)(*(void *)(v0 + 3216) + 336);
    swift_retain();
    unint64_t v45 = sub_45D6C(v44, (SEL *)&selRef_matchingMeds);
    if (!v45) {
      goto LABEL_38;
    }
    unint64_t v46 = v45;
    if (v45 >> 62)
    {
      if (sub_1AD170())
      {
LABEL_25:
        sub_4AA30(0, (v46 & 0xC000000000000001) == 0, v46);
        if ((v46 & 0xC000000000000001) != 0) {
          id v47 = (id)sub_1AD0A0();
        }
        else {
          id v47 = *(id *)(v46 + 32);
        }
        uint64_t v48 = v47;
        swift_bridgeObjectRelease();
        sub_1AA5DC(v48);
        if (v49)
        {
          sub_1ACE40();
          uint64_t v50 = 0;
LABEL_49:
          swift_bridgeObjectRelease();
          goto LABEL_50;
        }
LABEL_38:
        uint64_t v50 = 1;
LABEL_50:
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 3376), v50, 1, *(void *)(v0 + 3232));
        uint64_t v76 = (void *)swift_task_alloc();
        *(void *)(v0 + 3664) = v76;
        *uint64_t v76 = v0;
        v76[1] = sub_41F40;
        goto LABEL_51;
      }
    }
    else if (*(void *)((char *)&dword_10 + (v45 & 0xFFFFFFFFFFFFFF8)))
    {
      goto LABEL_25;
    }
    uint64_t v50 = 1;
    goto LABEL_49;
  }
  sub_46EE0();
  *(void *)(v0 + 3824) = *v8;
  *(void *)(v0 + 3832) = v10;
  sub_47AD0();
  v20();
  id v21 = v9;
  uint64_t v22 = sub_1AC7F0();
  os_log_type_t v23 = sub_1ACF50();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)sub_47ED0(v0 + 3152);
    uint64_t v25 = (void *)sub_E620();
    uint64_t v78 = v25;
    *(_DWORD *)uint64_t v24 = 136315138;
    unint64_t v26 = sub_45D6C(v10, (SEL *)&selRef_matchingMeds);
    unint64_t v27 = v26;
    if (v26)
    {
      if (v26 >> 62) {
        uint64_t v28 = sub_1AD170();
      }
      else {
        uint64_t v28 = *(void *)((char *)&dword_10 + (v26 & 0xFFFFFFFFFFFFFF8));
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = 0;
    }
    sub_47EA0();
    *(void *)(v0 + 3136) = v28;
    uint64_t v1 = v0 + 3128;
    *(unsigned char *)(v0 + 3144) = v56;
    sub_2694(&qword_202F50);
    uint64_t v57 = sub_1ACFC0();
    *(void *)(v0 + 3152) = sub_4A278(v57, v58, (uint64_t *)&v78);
    sub_1ACFE0();
    swift_bridgeObjectRelease();

    _os_log_impl(&def_342E4, v22, v23, "didn't get .rejectedOverwriteInGroup, starting with %s matchingMeds", v24, 0xCu);
    sub_47F58();
    sub_A1F0();
    sub_A1F0();

    uint64_t v34 = *(void (**)())(v27 + 8);
    v34();
  }
  else
  {
    uint64_t v32 = *(void *)(v0 + 3400);
    unint64_t v33 = *(void **)(v0 + 3208);

    uint64_t v34 = *(void (**)())(v32 + 8);
    sub_47814();
    v34();
  }
  *(void *)(v0 + 3840) = v34;
  uint64_t v59 = *(void *)(v0 + 3216);
  swift_retain();
  *(unsigned char *)(v1 + 2) = getMedStatus(from:)() & 1;
  swift_release();
  *(void *)(v0 + 3848) = *(void *)(v59 + 336);
  swift_retain();
  uint64_t v60 = (void *)swift_task_alloc();
  *(void *)(v0 + 3856) = v60;
  *uint64_t v60 = v0;
  v60[1] = sub_4401C;
  sub_47898();
  return sub_1A4B50(v61, v62);
}

uint64_t sub_415EC()
{
  sub_47634();
  sub_470A0();
  sub_E53C();
  *int v4 = v3;
  uint64_t v5 = *v2;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 3624) = v7;
  swift_task_dealloc();
  sub_47C98();
  uint64_t v9 = *(void *)(v0 + 3384);
  if (v1)
  {
    swift_release();
    swift_errorRelease();
    sub_A068(v9, &qword_201E28);
  }
  else
  {
    sub_A068(v9, &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_41738()
{
  sub_471BC();
  sub_4712C();
  uint64_t v1 = *(void *)(v0 + 3216);
  id v2 = [*(id *)(v0 + 3624) catId];
  sub_1ACDD0();
  sub_47ADC();
  sub_47640();
  sub_1AB3C0();
  sub_9DE0(v1 + 24, v0 + 1736);
  sub_47EF0();
  sub_9DE0(v1 + 296, v0 + 1656);
  *(void *)(v0 + 3632) = *(void *)(v1 + 336);
  *(void *)(v0 + 3640) = *(void *)(v1 + 344);
  swift_retain();
  swift_retain();
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 3648) = v3;
  *uint64_t v3 = v4;
  v3[1] = sub_4186C;
  sub_4731C();
  sub_47294();
  return sub_C1180();
}

uint64_t sub_4186C()
{
  sub_47D74();
  sub_E588();
  sub_A1B4();
  sub_E53C();
  *id v2 = v1;
  uint64_t v3 = v1 + 1736;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_release();
  swift_release();
  sub_47DEC();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_41988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  sub_47848();
  sub_48064();
  uint64_t v39 = (long long *)(v38 + 222);
  if (v38[225])
  {
    uint64_t v40 = (void *)v38[453];
    sub_24D80(v39, (uint64_t)(v38 + 252));
    sub_9DE0((uint64_t)(v38 + 252), (uint64_t)(v38 + 287));
    uint64_t v41 = sub_47588();
    sub_478B4(v41);
    sub_1AAE40();
    sub_47658();
    v38[397] = sub_1AAE30();
    sub_1AB120();

    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v38 + 252));
    sub_47310();
    v42();
    swift_release();
  }
  else
  {
    uint64_t v85 = (uint64_t)(v38 + 142);
    uint64_t v43 = (void (*)(uint64_t))v38[448];
    uint64_t v44 = v38[433];
    sub_A068((uint64_t)v39, &qword_202570);
    sub_A340();
    uint64_t v45 = sub_47CBC();
    v43(v45);
    sub_1AC7F0();
    os_log_type_t v46 = sub_1ACF50();
    if (sub_470C8(v46))
    {
      id v47 = (_WORD *)sub_292A0();
      sub_475A0(v47);
      sub_471F8(&def_342E4, v48, v49, "Couldn't create output, returning GenericErrorFlow");
      sub_A1F0();
    }
    uint64_t v50 = (void *)v38[453];
    uint64_t v51 = (void (*)(uint64_t))v38[450];
    uint64_t v83 = v38[442];
    uint64_t v52 = v38[440];
    uint64_t v81 = v38[439];
    sub_47338();
    uint64_t v53 = sub_471A4();
    v51(v53);
    sub_9B48(v44 + 64, v85);
    sub_9BA4();
    sub_1AB120();

    sub_9BF0(v85);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v83, v81);
  }
  uint64_t v63 = v38[428];
  uint64_t v64 = v38[427];
  uint64_t v65 = v38[426];
  uint64_t v66 = v38[423];
  uint64_t v67 = v38[422];
  uint64_t v68 = v38[421];
  uint64_t v69 = v38[420];
  uint64_t v70 = v38[419];
  uint64_t v71 = v38[418];
  uint64_t v72 = v38[417];
  uint64_t v73 = v38[416];
  uint64_t v74 = v38[415];
  uint64_t v75 = v38[414];
  uint64_t v76 = v38[413];
  uint64_t v77 = v38[411];
  uint64_t v78 = v38[410];
  uint64_t v79 = v38[409];
  uint64_t v80 = v38[408];
  uint64_t v82 = v38[407];
  uint64_t v84 = v38[406];
  uint64_t v86 = v38[403];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_477F8();
  return v55(v54, v55, v56, v57, v58, v59, v60, v61, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73,
           v74,
           v75,
           v76,
           v77,
           v78,
           v79,
           v80,
           v82,
           v84,
           v86,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38);
}

uint64_t sub_41D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_47458();
  sub_47B50();
  sub_47DDC();
  sub_46EE0();
  uint64_t v34 = sub_470B8();
  v33(v34);
  sub_1AC7F0();
  os_log_type_t v35 = sub_1ACF50();
  if (sub_29300(v35))
  {
    uint64_t v36 = (_WORD *)sub_292A0();
    sub_29368(v36);
    sub_A7FC(&def_342E4, v37, v38, "Couldn't create logMedConfirmationRejected_Dialog, returning GenericErrorFlow");
    sub_A1F0();
  }
  uint64_t v39 = *(void (**)(uint64_t))(v32 + 3600);
  sub_47728();
  sub_47338();
  uint64_t v40 = sub_471A4();
  v39(v40);
  sub_47BB4();
  sub_9BA4();
  sub_47E54();
  sub_9BF0(v32 + 496);
  sub_47310();
  v41();
  sub_46CAC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_4743C();
  return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32);
}

uint64_t sub_41F40()
{
  sub_47634();
  sub_470A0();
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v2;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 3672) = v7;
  swift_task_dealloc();
  sub_47C98();
  uint64_t v9 = *(void *)(v0 + 3376);
  if (v1)
  {
    swift_release();
    swift_errorRelease();
    sub_A068(v9, &qword_201E28);
  }
  else
  {
    sub_A068(v9, &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_4208C()
{
  sub_46EFC();
  sub_4712C();
  unint64_t v1 = 0xD000000000000010;
  id v2 = [*(id *)(v0 + 3672) catId];
  sub_1ACDD0();
  sub_47C50();
  sub_47640();
  sub_1AB3C0();
  sub_47DC0();
  sub_2E38((void *)(v0 + 2336), *(void *)(v0 + 2360));
  sub_471EC();
  v3();
  if ((sub_47408((void *)(v0 + 2376)) & 1) == 0)
  {
    sub_9DE0((uint64_t)v2, v0 + 2416);
    sub_2E38((void *)(v0 + 2416), *(void *)(v0 + 2440));
    sub_471EC();
    v4();
    sub_2E38((void *)(v0 + 2456), *(void *)(v0 + 2480));
    unint64_t v1 = 0xD000000000000010;
    sub_1AB030();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2456);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2416);
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2376);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2336);
  sub_1AAB00();
  sub_47FAC();
  uint64_t v16 = v0 + 2496;
  uint64_t v5 = sub_4716C((void *)(v0 + 2496));
  v6(v5);
  if (sub_473A0((void *)(v0 + 2536)))
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2536);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v16);
    unint64_t v7 = 0x80000000001B6D10;
  }
  else
  {
    sub_47CCC();
    uint64_t v8 = sub_470F0();
    v9(v8);
    char v10 = sub_473D4((void *)(v0 + 2616));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2616);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2576);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2536);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v16);
    if ((v10 & 1) == 0) {
      unint64_t v1 = 0xD000000000000019;
    }
    unint64_t v7 = 0x80000000001BA290;
    if (v10) {
      unint64_t v7 = 0x80000000001B6D10;
    }
  }
  *(void *)(v0 + 3688) = v7;
  *(void *)(v0 + 3680) = v1;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 3696) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_42378;
  sub_472E0();
  sub_46EC4();
  return sub_7A658(v12, v13);
}

uint64_t sub_42378()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *id v2 = v1;
  v1[369] = v0;
  v1[370] = v3;
  v1[371] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 3704) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_4244C()
{
  sub_A364();
  v0[464] = v0[370];
  unint64_t v1 = (void *)swift_task_alloc();
  v0[465] = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_424DC;
  uint64_t v2 = sub_47238();
  return sub_7A658(v2, v3);
}

uint64_t sub_424DC()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[372] = v0;
  v1[373] = v3;
  v1[374] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 3728) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_425B0()
{
  sub_A364();
  v0[467] = v0[373];
  unint64_t v1 = (void *)swift_task_alloc();
  v0[468] = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_42640;
  uint64_t v2 = sub_472C8();
  return sub_7A658(v2, v3);
}

uint64_t sub_42640()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[375] = v0;
  v1[376] = v3;
  v1[377] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 3752) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_42714()
{
  unint64_t v1 = *(void *)(v0 + 3752);
  uint64_t v2 = *(void *)(v0 + 3008);
  uint64_t v3 = *(void *)(v0 + 3312);
  uint64_t v4 = *(void *)(v0 + 3296);
  uint64_t v5 = *(void *)(v0 + 3216);
  uint64_t v6 = *(void **)(v0 + 3208);
  sub_1ACE40();
  sub_47D04((void *)(v3 + *(int *)(v4 + 20)));
  uint64_t v7 = (void *)(v3 + *(int *)(v4 + 24));
  *uint64_t v7 = 0xD000000000000036;
  v7[1] = 0x80000000001B89B0;
  uint64_t v8 = *(void *)(v5 + 16);
  swift_retain();
  char v9 = getMedStatus(from:)();
  swift_release();
  sub_1AABC0();
  if (!sub_45D6C(v6, (SEL *)&selRef_matchingMeds)) {
    goto LABEL_9;
  }
  sub_477E8();
  if (v11)
  {
    if (sub_1AD170()) {
      goto LABEL_4;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  if (!*(void *)(v10 + 16)) {
    goto LABEL_8;
  }
LABEL_4:
  sub_4AA30(0, (v8 & 0xC000000000000001) == 0, v8);
  if ((v8 & 0xC000000000000001) != 0) {
    id v12 = (id)sub_1AD0A0();
  }
  else {
    id v12 = *(id *)(v8 + 32);
  }
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  sub_1AA5E8(v13);
LABEL_9:
  char v54 = v9;
  if (!sub_45D6C(*(void **)(v0 + 3208), (SEL *)&selRef_matchingMeds))
  {
LABEL_17:
    unint64_t v42 = 0;
    uint64_t v43 = 0;
    goto LABEL_18;
  }
  sub_477E8();
  if (v15)
  {
    if (sub_1AD170()) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  if (!*(void *)(v14 + 16))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
LABEL_12:
  sub_4AA30(0, (v8 & 0xC000000000000001) == 0, v8);
  if ((v8 & 0xC000000000000001) != 0) {
    id v16 = (id)sub_1AD0A0();
  }
  else {
    id v16 = *(id *)(v8 + 32);
  }
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_1AA5DC(v17);
  unint64_t v42 = v19;
  uint64_t v43 = v18;
LABEL_18:
  if (v1) {
    unint64_t v20 = v1;
  }
  else {
    unint64_t v20 = 0xE500000000000000;
  }
  uint64_t v21 = 0x6E656B6154;
  if (v1) {
    uint64_t v21 = v2;
  }
  uint64_t v47 = v21;
  uint64_t v48 = v20;
  uint64_t v22 = *(void *)(v0 + 3728);
  uint64_t v23 = *(void *)(v0 + 3712);
  uint64_t v24 = *(void *)(v0 + 3704);
  uint64_t v51 = (void *)(v0 + 2256);
  uint64_t v52 = (uint64_t *)(v0 + 2176);
  uint64_t v49 = *(void *)(v0 + 3680);
  uint64_t v50 = *(void *)(v0 + 3688);
  uint64_t v53 = *(void **)(v0 + 3672);
  uint64_t v25 = *(void *)(v0 + 3344);
  uint64_t v26 = *(void *)(v0 + 3312);
  uint64_t v27 = *(void *)(v0 + 3296);
  if (!v24) {
    uint64_t v23 = 0x646567676F4CLL;
  }
  uint64_t v44 = v23;
  if (v24) {
    uint64_t v28 = *(void *)(v0 + 3704);
  }
  else {
    uint64_t v28 = 0xE600000000000000;
  }
  uint64_t v45 = *(void *)(v0 + 3288);
  uint64_t v29 = *(void *)(v0 + 3264);
  if (v22) {
    uint64_t v30 = *(void *)(v0 + 3736);
  }
  else {
    uint64_t v30 = 0x64657070696B53;
  }
  if (v22) {
    uint64_t v31 = *(void *)(v0 + 3728);
  }
  else {
    uint64_t v31 = 0xE700000000000000;
  }
  uint64_t v46 = *(void *)(v0 + 3216);
  sub_45DC8(*(void *)(v0 + 3352), v25);
  *(void *)(v0 + 2680) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 2688) = sub_45E30();
  *(unsigned char *)(v0 + 2656) = 4;
  char v32 = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2656);
  sub_45F3C(v26, v29, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v29, 0, 1, v27);
  SpecificMedCompletedLogModel.init(medStatus:givenTime:requestedMedName:requestedMedSchedule:dosage:dosageUnit:url:sashBundleID:dontDisplayGranularTime:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:snippetHeaderModel:)(v54 & 1, v43, v42, 0, 1, v45, 0, 0, v25, v49, v50, 0, v32 & 1, v44, v28, v30, v31, v47, v48,
    v29);
  sub_9DE0(v46 + 296, (uint64_t)v51);
  uint64_t v33 = *(void *)(v0 + 2280);
  uint64_t v34 = *(void *)(v0 + 2288);
  sub_2E38(v51, v33);
  *(void *)(v0 + 2200) = type metadata accessor for WellnessSnippets();
  *(void *)(v0 + 2208) = sub_46764((unint64_t *)&qword_202590, 255, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  os_log_type_t v35 = sub_B5B0(v52);
  sub_45F3C(v45, (uint64_t)v35, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  swift_storeEnumTagMultiPayload();
  sub_2694(&qword_202588);
  uint64_t v36 = sub_47CA4();
  *(_OWORD *)(v36 + 16) = xmmword_1AF530;
  *(void *)(v36 + 32) = v53;
  uint64_t v55 = v36;
  sub_1ACEF0();
  *(void *)(v0 + 3760) = v55;
  id v37 = v53;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 3768) = v38;
  *uint64_t v38 = v39;
  v38[1] = sub_42C18;
  uint64_t v40 = *(void *)(v0 + 3536);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v0 + 2696, v52, v55, v40, v33, v34);
}

uint64_t sub_42C18()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 2176;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_42D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  sub_47D88();
  uint64_t v41 = (void *)v40[459];
  uint64_t v56 = v40[439];
  uint64_t v57 = v40[442];
  uint64_t v55 = v40[419];
  uint64_t v54 = v40[414];
  uint64_t v42 = v40[411];
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v40 + 282));
  sub_9DE0((uint64_t)(v40 + 337), (uint64_t)(v40 + 267));
  uint64_t v43 = sub_47588();
  sub_478B4(v43);
  sub_1AAE40();
  sub_47658();
  v40[398] = sub_1AAE30();
  sub_1AB120();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v40 + 337));
  sub_46028(v42, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  sub_46028(v54, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_A068(v55, &qword_201E20);
  sub_47814();
  v44();
  swift_release();
  sub_46FE8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_47C28();
  return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           v54,
           v55,
           v56,
           v57,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40);
}

uint64_t sub_42F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_47458();
  sub_47B50();
  sub_47DDC();
  sub_46EE0();
  uint64_t v34 = sub_470B8();
  v33(v34);
  sub_1AC7F0();
  os_log_type_t v35 = sub_1ACF50();
  if (sub_29300(v35))
  {
    uint64_t v36 = (_WORD *)sub_292A0();
    sub_29368(v36);
    sub_A7FC(&def_342E4, v37, v38, "Couldn't create logMedConfirmationRejected_Dialog, returning GenericErrorFlow");
    sub_A1F0();
  }
  uint64_t v39 = *(void (**)(uint64_t))(v32 + 3600);
  sub_47728();
  sub_47338();
  uint64_t v40 = sub_471A4();
  v39(v40);
  sub_47BB4();
  sub_9BA4();
  sub_47E54();
  sub_9BF0(v32 + 176);
  sub_47310();
  v41();
  sub_46CAC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_4743C();
  return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32);
}

uint64_t sub_43164()
{
  sub_47634();
  sub_470A0();
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v2;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 3792) = v7;
  swift_task_dealloc();
  sub_47C98();
  uint64_t v9 = *(void *)(v0 + 3368);
  if (v1)
  {
    swift_release();
    swift_errorRelease();
    sub_A068(v9, &qword_201E28);
  }
  else
  {
    sub_A068(v9, &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_432B0()
{
  uint64_t v1 = *(void *)(v0 + 3216);
  id v2 = [*(id *)(v0 + 3792) catId];
  sub_1ACDD0();

  sub_1AB380();
  sub_1AB3C0();
  sub_47CCC();
  sub_2E38((void *)(v0 + 1856), *(void *)(v0 + 1880));
  sub_471EC();
  v3();
  sub_2E38((void *)(v0 + 1896), *(void *)(v0 + 1920));
  if ((sub_1AB040() & 1) == 0)
  {
    sub_9DE0(v1 + 24, v0 + 1936);
    sub_2E38((void *)(v0 + 1936), *(void *)(v0 + 1960));
    sub_471EC();
    v4();
    sub_2E38((void *)(v0 + 1976), *(void *)(v0 + 2000));
    sub_1AB030();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 1976);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 1936);
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 1896);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 1856);
  sub_1AAB00();
  uint64_t v5 = *(void *)(v0 + 3328);
  sub_45DC8(*(void *)(v0 + 3336), v5);
  uint64_t v6 = sub_1AAB10();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v6);
  uint64_t v8 = *(void *)(v0 + 3360);
  uint64_t v9 = *(void *)(v0 + 3328);
  uint64_t v10 = *(void *)(v0 + 3232);
  if (v7 == 1)
  {
    sub_A068(*(void *)(v0 + 3328), &qword_201E20);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, 1, 1, v10);
  }
  else
  {
    sub_73240(*(void *)(v0 + 3360));
    sub_A5C0();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v6);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, 1, v10) != 1)
    {
      uint64_t v27 = *(void **)(v0 + 3208);
      (*(void (**)(void, void, void))(*(void *)(v0 + 3240) + 32))(*(void *)(v0 + 3256), *(void *)(v0 + 3360), *(void *)(v0 + 3232));
      *(void *)(v0 + 3168) = &_swiftEmptyArrayStorage;
      uint64_t v28 = sub_45D6C(v27, (SEL *)&selRef_matchingMeds);
      if (v28) {
        unint64_t v29 = v28;
      }
      else {
        unint64_t v29 = (unint64_t)&_swiftEmptyArrayStorage;
      }
      if (v29 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = sub_1AD170();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v30 = *(void *)((char *)&dword_10 + (v29 & 0xFFFFFFFFFFFFFF8));
      }
      if (v30)
      {
        uint64_t result = type metadata accessor for WellnessMedicationDialogObject(0);
        if (v30 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v31 = 0;
        unint64_t v46 = v29 & 0xC000000000000001;
        uint64_t v32 = (void (**)(uint64_t, void, void))(*(void *)(v0 + 3240) + 16);
        unint64_t v33 = v29;
        do
        {
          if (v46)
          {
            sub_47BF8();
            id v34 = (id)sub_1AD0A0();
          }
          else
          {
            id v34 = *(id *)(v29 + 8 * v31 + 32);
          }
          os_log_type_t v35 = v34;
          uint64_t v36 = *(void *)(v0 + 3248);
          (*v32)(v36, *(void *)(v0 + 3256), *(void *)(v0 + 3232));
          id v37 = v35;
          sub_15C928(v37, v36);
          sub_1ACEB0();
          if (*(void *)((char *)&dword_10 + (*(void *)(v0 + 3168) & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + (*(void *)(v0 + 3168) & 0xFFFFFFFFFFFFFF8)) >> 1) {
            sub_1ACF00();
          }
          ++v31;
          sub_1ACF20();
          sub_1ACEF0();

          unint64_t v29 = v33;
        }
        while (v30 != v31);
        swift_bridgeObjectRelease();
        uint64_t v38 = *(void **)(v0 + 3168);
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v38 = &_swiftEmptyArrayStorage;
      }
      *(void *)(v0 + 3800) = v38;
      uint64_t v39 = *(void **)(v0 + 3208);
      sub_2E38((void *)(*(void *)(v0 + 3216) + 144), *(void *)(*(void *)(v0 + 3216) + 168));
      id v40 = v39;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v41 = (void *)swift_task_alloc();
      *(void *)(v0 + 3808) = v41;
      *uint64_t v41 = v0;
      v41[1] = sub_43A04;
      sub_47F14();
      sub_47898();
      __asm { BR              X8 }
    }
  }
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 3584);
  uint64_t v13 = *(void *)(v0 + 3576);
  uint64_t v14 = *(void *)(v0 + 3432);
  uint64_t v15 = *(void *)(v0 + 3392);
  sub_A068(*(void *)(v0 + 3360), &qword_201E28);
  sub_A340();
  v12(v14, v13, v15);
  id v16 = (void *)sub_1AC7F0();
  os_log_type_t v17 = sub_1ACF60();
  if (sub_29300(v17))
  {
    uint64_t v18 = (_WORD *)sub_292A0();
    sub_29368(v18);
    sub_A7FC(&def_342E4, v19, v20, "Couldn't create actionAceCommandString while trying to create logMedConfirmationRejected_Dialog, returning GenericErrorFlow");
    sub_A1F0();
  }
  uint64_t v21 = *(void (**)(uint64_t))(v0 + 3600);
  uint64_t v45 = *(void **)(v0 + 3792);
  uint64_t v44 = *(void *)(v0 + 3336);
  uint64_t v22 = *(void *)(v0 + 3216);

  uint64_t v23 = sub_471A4();
  v21(v23);
  sub_9B48(v22 + 64, v0 + 656);
  sub_9BA4();
  sub_1AB120();

  sub_9BF0(v0 + 656);
  sub_A068(v44, &qword_201E20);
  sub_47310();
  v24();
  sub_46F30();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v25();
}

uint64_t sub_43A04()
{
  sub_47D74();
  sub_E588();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 3816) = v3;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_43B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_47458();
  sub_47B50();
  unint64_t v33 = (void *)v32[477];
  uint64_t v34 = v32[442];
  uint64_t v35 = v32[440];
  uint64_t v51 = v32[439];
  uint64_t v49 = (void *)v32[474];
  uint64_t v50 = v32[417];
  uint64_t v47 = v32[404];
  uint64_t v48 = v32[407];
  sub_9DE0(v32[402] + 64, (uint64_t)(v32 + 277));
  sub_2E38(v32 + 277, v32[280]);
  id v36 = v33;
  sub_1AAF40();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v32 + 277));
  sub_1AB130();
  swift_release();

  sub_4783C();
  v37();
  sub_A068(v50, &qword_201E20);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v51);
  swift_bridgeObjectRelease();
  sub_46CAC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_4743C();
  return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           v47,
           v48,
           v49,
           v50,
           v51,
           a30,
           a31,
           a32);
}

uint64_t sub_43D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_47458();
  sub_47B50();
  sub_47DDC();
  sub_46EE0();
  uint64_t v34 = sub_470B8();
  v33(v34);
  uint64_t v35 = sub_1AC7F0();
  os_log_type_t v36 = sub_1ACF60();
  if (os_log_type_enabled(v35, v36))
  {
    id v37 = (uint8_t *)sub_292A0();
    *(_WORD *)id v37 = 0;
    _os_log_impl(&def_342E4, v35, v36, "Couldn't create loggenericmedrejectedconfirmationresultset pattern, returning GenericErrorFlow", v37, 2u);
    sub_A1F0();
  }
  uint64_t v38 = (void (*)(void))v32[450];
  uint64_t v39 = v32[440];
  uint64_t v56 = v32[439];
  uint64_t v57 = v32[442];
  uint64_t v54 = (void *)v32[474];
  uint64_t v55 = v32[417];
  uint64_t v53 = v32[407];
  uint64_t v52 = v32[404];

  sub_E530();
  v38();
  uint64_t v40 = sub_A7C4();
  sub_9B48(v40, v41);
  sub_9BA4();
  sub_1AB120();

  sub_9BF0((uint64_t)(v32 + 2));
  sub_47310();
  v42();
  sub_A068(v55, &qword_201E20);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v57, v56);
  swift_bridgeObjectRelease();
  sub_46CAC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_4743C();
  return v44(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           v52,
           v53,
           v54,
           v55,
           v56,
           v57,
           a30,
           a31,
           a32);
}

uint64_t sub_4401C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v7 + 3864) = v6;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_44124()
{
  id v20 = (id)v0[483];
  uint64_t v22 = v0 + 162;
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[445];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[443];
  uint64_t v3 = v0[438];
  uint64_t v4 = v0[437];
  uint64_t v5 = v0[435];
  uint64_t v21 = v0[402];
  sub_1AB070();
  v2(v4, v3, v5);
  sub_47A8C();
  v1(v3, v5);
  sub_1AB3C0();
  id v6 = [v20 catId];
  sub_1ACDD0();
  sub_47C50();
  sub_47640();
  sub_9DE0(v21 + 24, (uint64_t)(v0 + 262));
  sub_2E38(v0 + 262, v0[265]);
  sub_471EC();
  v7();
  if (sub_47408(v0 + 257))
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 257));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 262));
LABEL_4:
    unint64_t v10 = 0xD000000000000010;
    goto LABEL_6;
  }
  sub_47FAC();
  sub_2E38(v0 + 227, v0[230]);
  sub_471EC();
  v8();
  unsigned __int8 v9 = sub_2E38(v0 + 212, v0[215]);
  sub_1AB030();
  sub_48088();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 262));
  if (v9) {
    goto LABEL_4;
  }
  unint64_t v10 = 0xD000000000000010;
LABEL_6:
  sub_1AAB00();
  sub_47FAC();
  uint64_t v23 = (uint64_t)(v0 + 202);
  sub_2E38(v0 + 202, v0[205]);
  sub_471EC();
  v11();
  if (sub_473A0(v22))
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v22);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v23);
    unint64_t v12 = 0x80000000001B6D10;
  }
  else
  {
    sub_47CCC();
    uint64_t v13 = sub_470F0();
    v14(v13);
    char v15 = sub_473D4(v0 + 172);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 172));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 167));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v22);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v23);
    if ((v15 & 1) == 0) {
      unint64_t v10 = 0xD000000000000019;
    }
    unint64_t v12 = 0x80000000001BA290;
    if (v15) {
      unint64_t v12 = 0x80000000001B6D10;
    }
  }
  v0[485] = v12;
  v0[484] = v10;
  id v16 = (void *)swift_task_alloc();
  v0[486] = v16;
  *id v16 = v0;
  v16[1] = sub_444A8;
  uint64_t v17 = sub_472E0();
  return sub_7A658(v17, v18);
}

uint64_t sub_444A8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[378] = v0;
  v1[379] = v3;
  v1[380] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *id v6 = v5;
  *(void *)(v8 + 3896) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_4457C()
{
  sub_A364();
  v0[488] = v0[379];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[489] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_4460C;
  uint64_t v2 = sub_47238();
  return sub_7A658(v2, v3);
}

uint64_t sub_4460C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[381] = v0;
  v1[382] = v3;
  v1[383] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *id v6 = v5;
  *(void *)(v8 + 3920) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_446E0()
{
  sub_A364();
  v0[491] = v0[382];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[492] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_44770;
  uint64_t v2 = sub_472C8();
  return sub_7A658(v2, v3);
}

uint64_t sub_44770()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[384] = v0;
  v1[385] = v3;
  v1[386] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *id v6 = v5;
  *(void *)(v8 + 3944) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_44844()
{
  sub_A364();
  v0[494] = v0[385];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[495] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_448DC;
  unint64_t v2 = sub_47514();
  return sub_7A658(v2, v3);
}

uint64_t sub_448DC()
{
  sub_A364();
  uint64_t v2 = v1;
  sub_A1B4();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v0;
  sub_E53C();
  *uint64_t v7 = v6;
  v4[496] = v8;
  swift_task_dealloc();
  v4[497] = v2;
  uint64_t v9 = (void *)swift_task_alloc();
  v4[498] = v9;
  *uint64_t v9 = v6;
  v9[1] = sub_449F8;
  return sub_7A988();
}

uint64_t sub_449F8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[387] = v0;
  v1[388] = v3;
  v1[389] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 3992) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

#error "44D3C: call analysis failed (funcsize=234)"

uint64_t sub_44EB4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 1536;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_44FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  sub_47D88();
  uint64_t v41 = (void *)v40[483];
  uint64_t v57 = v40[441];
  uint64_t v58 = v40[442];
  uint64_t v42 = v40[440];
  uint64_t v56 = v40[415];
  uint64_t v54 = v40[403];
  uint64_t v55 = v40[413];
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v40 + 187));
  sub_9DE0((uint64_t)(v40 + 182), (uint64_t)(v40 + 197));
  uint64_t v43 = sub_47588();
  sub_478B4(v43);
  sub_1AAE40();
  sub_47658();
  v40[395] = sub_1AAE30();
  sub_1AB120();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v40 + 182));
  sub_46028(v54, (void (*)(void))type metadata accessor for GenericMedCompletedLogModel);
  sub_46028(v55, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_A068(v56, &qword_201E20);
  uint64_t v44 = *(void (**)(void))(v42 + 8);
  sub_4783C();
  v44();
  sub_4783C();
  v44();
  swift_release();
  sub_46FE8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_47C28();
  return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           v54,
           v55,
           v56,
           v57,
           v58,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40);
}

uint64_t sub_45228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_47458();
  sub_47B50();
  unint64_t v33 = *(void (**)(uint64_t))(v32 + 3824);
  sub_46EE0();
  uint64_t v34 = sub_470B8();
  v33(v34);
  sub_1AC7F0();
  os_log_type_t v35 = sub_1ACF60();
  if (sub_29300(v35))
  {
    os_log_type_t v36 = (_WORD *)sub_292A0();
    sub_29368(v36);
    sub_A7FC(&def_342E4, v37, v38, "Failed executing catWrapperSimple.genericMedicationCompletedLog_Dialog, returning nil");
    sub_A1F0();
  }
  uint64_t v39 = *(void (**)(uint64_t))(v32 + 3840);
  sub_47728();
  sub_47338();
  uint64_t v40 = sub_471A4();
  v39(v40);
  sub_47BB4();
  sub_9BA4();
  sub_47E54();
  sub_9BF0(v32 + 336);
  sub_47310();
  v41();
  sub_46CAC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_4743C();
  return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32);
}

uint64_t sub_45420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_47458();
  sub_47B50();
  unint64_t v33 = *(void (**)(uint64_t))(v32 + 3584);
  sub_46EE0();
  uint64_t v34 = sub_470B8();
  v33(v34);
  sub_1AC7F0();
  os_log_type_t v35 = sub_1ACF60();
  if (sub_29300(v35))
  {
    os_log_type_t v36 = (_WORD *)sub_292A0();
    sub_29368(v36);
    sub_A7FC(&def_342E4, v37, v38, "Couldn't create logMedConfirmationRejected_Dialog, returning GenericErrorFlow");
    sub_A1F0();
  }
  uint64_t v39 = *(void (**)(uint64_t))(v32 + 3600);
  sub_47728();
  sub_47338();
  uint64_t v40 = sub_471A4();
  v39(v40);
  sub_47BB4();
  sub_9BA4();
  sub_47E54();
  sub_9BF0(v32 + 816);
  sub_47310();
  v41();
  sub_46CAC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_4743C();
  return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32);
}

uint64_t sub_45618(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_45638, 0, 0);
}

uint64_t sub_45638()
{
  sub_A364();
  sub_9DE0(*(void *)(v0 + 24), *(void *)(v0 + 16));
  sub_E564();
  return v1();
}

uint64_t sub_45694(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = sub_2694(&qword_201E10);
  uint64_t v8 = sub_53D4(v7);
  __chkstk_darwin(v8);
  sub_E548();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = sub_1AC1E0();
  sub_52C4();
  uint64_t v47 = v13;
  __chkstk_darwin(v14);
  sub_E548();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = sub_2694(&qword_201E28);
  uint64_t v19 = sub_53D4(v18);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v46 - v23;
  unint64_t v25 = *a2;
  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_1AD170();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = *(void *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFFF8));
  }
  uint64_t v27 = (int *)type metadata accessor for WellnessLoggingLogGenericMedRejectedConfirmationResultSetParameters(0);
  uint64_t v28 = a1 + v27[14];
  *(double *)uint64_t v28 = (double)v26;
  *(unsigned char *)(v28 + 8) = 0;
  uint64_t v29 = a1 + v27[12];
  sub_A068(v29, &qword_201E28);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v29, 1, 1, v12);
  swift_retain();
  getMedStatus(from:)();
  swift_release();
  sub_1ACE40();
  sub_47F14();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v30, v31, v32, v12);
  sub_9EA0((uint64_t)v24, a1 + v27[15]);
  unint64_t v33 = sub_45D6C(a4, (SEL *)&selRef_matchingMeds);
  if (!v33) {
    goto LABEL_13;
  }
  unint64_t v34 = v33;
  if (!(v33 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v33 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (!sub_1AD170()) {
    goto LABEL_12;
  }
LABEL_6:
  sub_4AA30(0, (v34 & 0xC000000000000001) == 0, v34);
  if ((v34 & 0xC000000000000001) != 0) {
    id v35 = (id)sub_1AD0A0();
  }
  else {
    id v35 = *(id *)(v34 + 32);
  }
  os_log_type_t v36 = v35;
  swift_bridgeObjectRelease();
  sub_17D4E4(v36);
  if (v37)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v22, v17, v12);
LABEL_15:
    uint64_t v38 = 0;
    goto LABEL_16;
  }
LABEL_13:
  sub_1AABC0();
  sub_1AABD0();
  uint64_t v38 = 1;
  sub_47F14();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v39, v40, v41, v42);
  sub_C2180(v11);
  uint64_t v44 = v43;
  sub_A068(v11, &qword_201E10);
  if (v44)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_16:
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v22, v38, 1, v12);
  return sub_9EA0((uint64_t)v22, a1 + v27[11]);
}

uint64_t sub_45A20()
{
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 24);
  sub_E4B8(v0 + 64);
  sub_4610C(*(void *)(v0 + 224), *(void *)(v0 + 232), *(void *)(v0 + 240), *(void *)(v0 + 248), *(void *)(v0 + 256), *(void *)(v0 + 264), *(void *)(v0 + 272), *(void *)(v0 + 280), *(unsigned char *)(v0 + 288));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 296);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 360);
  return v0;
}

uint64_t sub_45A9C()
{
  sub_45A20();

  return _swift_deallocClassInstance(v0, 401, 7);
}

uint64_t type metadata accessor for GenericMedLoggingFlow()
{
  return self;
}

uint64_t sub_45AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_45BA4;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t sub_45BA4()
{
  sub_A364();
  uint64_t v2 = v1;
  sub_A1B4();
  uint64_t v3 = *v0;
  sub_E53C();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t sub_45C74()
{
  return sub_345D0();
}

uint64_t sub_45C98()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_E230;
  return sub_3465C();
}

uint64_t sub_45D34()
{
  type metadata accessor for GenericMedLoggingFlow();

  return sub_1AAFB0();
}

uint64_t sub_45D6C(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  sub_1AC490();
  uint64_t v4 = sub_1ACED0();

  return v4;
}

uint64_t sub_45DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_201E20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_45E30()
{
  unint64_t result = qword_202F38;
  if (!qword_202F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_202F38);
  }
  return result;
}

uint64_t sub_45E7C()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_45EB4()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_3F878(v3, v4);
}

uint64_t sub_45F3C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_A5C0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_45FA0()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E230;
  uint64_t v3 = sub_47228();
  return sub_45618(v3, v4);
}

uint64_t sub_46028(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_A5C0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_46084()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_3F878(v3, v4);
}

uint64_t sub_4610C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  int v9 = a9 >> 6;
  if (v9 != 1)
  {
    if (v9) {
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

unint64_t sub_46188()
{
  unint64_t result = qword_202F90;
  if (!qword_202F90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_202F90);
  }
  return result;
}

uint64_t sub_461C8()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_3F878(v3, v4);
}

uint64_t sub_46250()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_3F878(v3, v4);
}

uint64_t sub_462D8()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_3F878(v3, v4);
}

uint64_t sub_46360()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_3F878(v3, v4);
}

uint64_t sub_463E8(char a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = sub_1AB1C0();
  uint64_t v17 = &protocol witness table for ResponseFactory;
  *(void *)&long long v15 = a6;
  *(unsigned char *)(a7 + 16) = a1;
  *(void *)(a7 + 24) = a2;
  memcpy((void *)(a7 + 32), a3, 0xA0uLL);
  *(void *)(a7 + 192) = a4;
  *(void *)(a7 + 200) = a5;
  sub_24D80(&v15, a7 + 208);
  return a7;
}

uint64_t sub_46488()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_3F878(v3, v4);
}

uint64_t sub_46510(uint64_t a1, uint64_t a2, char a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v19 = sub_1AB1C0();
  uint64_t v20 = &protocol witness table for ResponseFactory;
  *(void *)&long long v18 = a8;
  *(void *)(a9 + 16) = a1;
  *(void *)(a9 + 24) = a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a9 + 32) = a3;
  *(void *)(a9 + 40) = a4;
  memcpy((void *)(a9 + 48), a5, 0xA0uLL);
  *(void *)(a9 + 208) = a6;
  *(void *)(a9 + 216) = a7;
  sub_24D80(&v18, a9 + 224);
  return a9;
}

uint64_t sub_465CC()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_3F878(v3, v4);
}

uint64_t sub_46654()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_3F878(v3, v4);
}

uint64_t sub_466DC()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_3F878(v3, v4);
}

uint64_t sub_46764(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_467AC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_46808()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 96);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 136);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 176);

  return _swift_deallocObject(v0, 216, 7);
}

uint64_t sub_4688C()
{
  uint64_t v3 = v0[1403];
  *(void *)(v1 - 248) = v0[1404];
  *(void *)(v1 - 240) = v3;
  uint64_t v4 = v0[1401];
  *(void *)(v1 - 232) = v0[1402];
  *(void *)(v1 - 224) = v4;
  uint64_t v5 = v0[1397];
  *(void *)(v1 - 216) = v0[1400];
  *(void *)(v1 - 208) = v5;
  uint64_t v6 = v0[1393];
  *(void *)(v1 - 200) = v0[1396];
  *(void *)(v1 - 192) = v6;
  uint64_t v7 = v0[1391];
  *(void *)(v1 - 184) = v0[1392];
  *(void *)(v1 - 176) = v7;
  uint64_t v8 = v0[1389];
  *(void *)(v1 - 168) = v0[1390];
  *(void *)(v1 - 160) = v8;
  uint64_t v9 = v0[1385];
  *(void *)(v1 - 152) = v0[1387];
  *(void *)(v1 - 144) = v9;
  uint64_t v10 = v0[1383];
  *(void *)(v1 - 136) = v0[1384];
  *(void *)(v1 - 128) = v10;
  *(void *)(v1 - 120) = v0[1382];
  return swift_task_dealloc();
}

uint64_t sub_469EC()
{
  uint64_t v3 = v0[1405];
  *(void *)(v1 - 232) = v0[1406];
  *(void *)(v1 - 224) = v3;
  uint64_t v4 = v0[1403];
  *(void *)(v1 - 216) = v0[1404];
  *(void *)(v1 - 208) = v4;
  uint64_t v5 = v0[1401];
  *(void *)(v1 - 200) = v0[1402];
  *(void *)(v1 - 192) = v5;
  uint64_t v6 = v0[1397];
  *(void *)(v1 - 184) = v0[1400];
  *(void *)(v1 - 176) = v6;
  uint64_t v7 = v0[1393];
  *(void *)(v1 - 168) = v0[1396];
  *(void *)(v1 - 160) = v7;
  uint64_t v8 = v0[1391];
  *(void *)(v1 - 152) = v0[1392];
  *(void *)(v1 - 144) = v8;
  uint64_t v9 = v0[1389];
  *(void *)(v1 - 136) = v0[1390];
  *(void *)(v1 - 128) = v9;
  uint64_t v10 = v0[1385];
  *(void *)(v1 - 120) = v0[1387];
  *(void *)(v1 - 112) = v10;
  uint64_t v11 = v0[1383];
  *(void *)(v1 - 104) = v0[1384];
  *(void *)(v1 - 96) = v11;
  *(void *)(v1 - 88) = v0[1382];
  return swift_task_dealloc();
}

uint64_t sub_46B4C()
{
  uint64_t v3 = v0[1400];
  *(void *)(v1 - 256) = v0[1401];
  *(void *)(v1 - 248) = v3;
  uint64_t v4 = v0[1396];
  *(void *)(v1 - 240) = v0[1397];
  *(void *)(v1 - 232) = v4;
  uint64_t v5 = v0[1392];
  *(void *)(v1 - 224) = v0[1393];
  *(void *)(v1 - 216) = v5;
  uint64_t v6 = v0[1390];
  *(void *)(v1 - 208) = v0[1391];
  *(void *)(v1 - 200) = v6;
  uint64_t v7 = v0[1387];
  *(void *)(v1 - 192) = v0[1389];
  *(void *)(v1 - 184) = v7;
  uint64_t v8 = v0[1384];
  *(void *)(v1 - 176) = v0[1385];
  *(void *)(v1 - 168) = v8;
  uint64_t v9 = v0[1382];
  *(void *)(v1 - 160) = v0[1383];
  *(void *)(v1 - 152) = v9;
  return swift_task_dealloc();
}

uint64_t sub_46CAC()
{
  uint64_t v3 = v0[408];
  *(void *)(v1 - 112) = v0[409];
  *(void *)(v1 - 104) = v3;
  uint64_t v4 = v0[406];
  *(void *)(v1 - 96) = v0[407];
  *(void *)(v1 - 88) = v4;
  *(void *)(v1 - 80) = v0[403];
  return swift_task_dealloc();
}

uint64_t sub_46D64()
{
  uint64_t v3 = v0[1403];
  *(void *)(v1 - 256) = v0[1404];
  *(void *)(v1 - 248) = v3;
  uint64_t v4 = v0[1401];
  *(void *)(v1 - 240) = v0[1402];
  *(void *)(v1 - 232) = v4;
  uint64_t v5 = v0[1397];
  *(void *)(v1 - 224) = v0[1400];
  *(void *)(v1 - 216) = v5;
  uint64_t v6 = v0[1393];
  *(void *)(v1 - 208) = v0[1396];
  *(void *)(v1 - 200) = v6;
  uint64_t v7 = v0[1391];
  *(void *)(v1 - 192) = v0[1392];
  *(void *)(v1 - 184) = v7;
  uint64_t v8 = v0[1389];
  *(void *)(v1 - 176) = v0[1390];
  *(void *)(v1 - 168) = v8;
  uint64_t v9 = v0[1385];
  *(void *)(v1 - 160) = v0[1387];
  *(void *)(v1 - 152) = v9;
  uint64_t v10 = v0[1383];
  *(void *)(v1 - 144) = v0[1384];
  *(void *)(v1 - 136) = v10;
  *(void *)(v1 - 128) = v0[1382];
  return swift_task_dealloc();
}

uint64_t sub_46EE0()
{
  return swift_beginAccess();
}

uint64_t sub_46F30()
{
  uint64_t v3 = v0[408];
  *(void *)(v1 - 120) = v0[409];
  *(void *)(v1 - 112) = v3;
  uint64_t v4 = v0[406];
  *(void *)(v1 - 104) = v0[407];
  *(void *)(v1 - 96) = v4;
  *(void *)(v1 - 88) = v0[403];
  return swift_task_dealloc();
}

uint64_t sub_46FE8()
{
  uint64_t v3 = v0[406];
  *(void *)(v1 - 144) = v0[407];
  *(void *)(v1 - 136) = v3;
  *(void *)(v1 - 128) = v0[403];
  return swift_task_dealloc();
}

uint64_t sub_470B8()
{
  return v0;
}

BOOL sub_470C8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_470F0()
{
  sub_2E38(v0, v1);
  return v1;
}

uint64_t sub_47138(_WORD *a1)
{
  *(void *)(v2 - 136) = 0;
  *(void *)(v2 - 128) = 0;
  *a1 = 0;
  *(void *)(v2 - 144) = a1 + 1;
  return sub_12D1CC(v1, v2 - 144, v2 - 136, v2 - 128);
}

uint64_t sub_4716C(void *a1)
{
  sub_2E38(a1, v1);
  return v1;
}

uint64_t sub_471A4()
{
  return v0;
}

void sub_471F8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_47218(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_47228()
{
  return v0;
}

uint64_t sub_47238()
{
  return 0x64657070696B73;
}

uint64_t sub_47254@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v5 - 152) = a2;
  uint64_t v6 = *(void *)(v4 + 11184);
  *(void *)(v5 - 168) = v2;
  *(void *)(v5 - 160) = v6;
  sub_24D80(a1, v3);
  return sub_1AAE40();
}

uint64_t sub_472C8()
{
  return 0x6E656B6174;
}

uint64_t sub_472E0()
{
  return 0x646567676F6CLL;
}

void sub_47338()
{
}

void sub_47358(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_47378()
{
  uint64_t v3 = *(void *)(v0 + 11048) + 64;
  return sub_9B48(v3, v1);
}

uint64_t sub_473A0(void *a1)
{
  sub_2E38(a1, v1);
  return sub_1AB040();
}

uint64_t sub_473D4(void *a1)
{
  sub_2E38(a1, v1);
  return sub_1AB030();
}

uint64_t sub_47408(void *a1)
{
  sub_2E38(a1, v1);
  return sub_1AB040();
}

uint64_t sub_47474()
{
  return *(unsigned int *)(v0 - 116);
}

uint64_t sub_474D4()
{
  uint64_t v3 = *(void *)(v1 + 11048) + 64;
  return sub_9B48(v3, v0);
}

uint64_t sub_474F4()
{
  return *(void *)(v0 - 88);
}

unint64_t sub_47514()
{
  return 0xD000000000000017;
}

uint64_t sub_4752C()
{
  return v0 + 8;
}

_WORD *sub_4753C(_WORD *result)
{
  *(void *)(v1 - 104) = 0;
  *(void *)(v1 - 96) = 0;
  *uint64_t result = 0;
  *(void *)(v1 - 112) = result + 1;
  return result;
}

uint64_t sub_47554()
{
  return *(void *)(v0 + 11600);
}

uint64_t sub_47588()
{
  return swift_allocObject();
}

_WORD *sub_475A0(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

void sub_475C8()
{
  *(void *)(v2 - 184) = v1[1457];
  *(void *)(v2 - 176) = v0;
  uint64_t v3 = v1[1456];
  *(void *)(v2 - 200) = v1[1455];
  *(void *)(v2 - 192) = v3;
  uint64_t v4 = v1[1454];
  *(void *)(v2 - 216) = v1[1453];
  *(void *)(v2 - 208) = v4;
  *(void *)(v2 - 224) = v1[1452];
}

uint64_t sub_475F8(void *a1)
{
  sub_2E38(a1, v1);
  return sub_1AB030();
}

uint64_t sub_47640()
{
  return sub_1AB380();
}

uint64_t sub_47658()
{
  return swift_allocObject();
}

uint64_t sub_47670(uint64_t a1)
{
  sub_24D80(v1, a1 + 16);
  return sub_9AF04();
}

BOOL sub_476B0()
{
  return os_log_type_enabled(v0, v1);
}

uint64_t sub_476D0(uint64_t a1)
{
  return sub_12D1CC(a1, v1 - 112, v1 - 104, v1 - 96);
}

uint64_t sub_476F0(_WORD *a1)
{
  *(void *)(v2 - 104) = 0;
  *(void *)(v2 - 96) = 0;
  *a1 = 0;
  *(void *)(v2 - 112) = a1 + 1;
  return sub_12D1CC(v1, v2 - 112, v2 - 104, v2 - 96);
}

void sub_47728()
{
  uint64_t v2 = *(void *)(v0 + 3536);
  *(void *)(v1 - 88) = *(void *)(v0 + 3512);
  *(void *)(v1 - 80) = v2;
}

void sub_4773C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void sub_4775C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void sub_4777C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_4779C()
{
  return v0;
}

double sub_477B0()
{
  *(void *)uint64_t v1 = v0;
  double result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(void *)(v1 + 56) = 0;
  *(unsigned char *)(v1 + 64) = -64;
  return result;
}

uint64_t sub_477D8()
{
  return v0;
}

uint64_t sub_47864(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
}

uint64_t sub_4788C()
{
  return v0;
}

uint64_t sub_478B4(uint64_t a1)
{
  sub_24D80(v1, a1 + 16);
  return sub_1AB350();
}

_WORD *sub_478E4(_WORD *result)
{
  *double result = 0;
  return result;
}

_WORD *sub_478F0(_WORD *result)
{
  *(void *)(v2 - 232) = v1;
  *(void *)(v2 - 176) = 0;
  *(void *)(v2 - 136) = 0;
  *double result = 0;
  *(void *)(v2 - 224) = result + 1;
  return result;
}

uint64_t sub_47920()
{
  uint64_t v2 = *(void *)(v0 - 224);
  uint64_t v3 = *(void *)(v0 - 216);
  uint64_t v4 = *(void *)(v0 - 208);
  uint64_t v5 = *(void *)(v0 - 200);
  uint64_t v6 = *(void *)(v0 - 192);
  uint64_t v7 = *(void *)(v0 - 184);
  uint64_t v8 = *(void *)(v0 - 176);
  return sub_4610C(9, v2, v3, v4, v5, v6, v7, v8, 0xC0u);
}

uint64_t sub_4794C()
{
  return sub_9DE0(v0, v1);
}

uint64_t sub_47968()
{
  return v0;
}

uint64_t sub_47974()
{
  return sub_1AB120();
}

uint64_t sub_47990()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

uint64_t sub_479C8()
{
  return v0;
}

uint64_t sub_479D4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_479F0()
{
  sub_2E38(v0, v1);
  return type metadata accessor for WellnessSnippets();
}

uint64_t sub_47A24()
{
  return v0 + 8;
}

uint64_t sub_47A34()
{
  return v0;
}

uint64_t sub_47A44()
{
  return sub_1AAE20();
}

uint64_t sub_47A60()
{
  return v0;
}

BOOL sub_47A70(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_47A8C()
{
  return sub_1AB370();
}

uint64_t sub_47AA8(uint64_t a1, uint64_t a2)
{
  return sub_DF6D8(v2, a1, a2);
}

void sub_47ADC()
{
}

uint64_t sub_47AF4()
{
  return *(void *)(v0 + 224);
}

uint64_t sub_47B2C()
{
  return sub_1AB120();
}

uint64_t sub_47B5C(uint64_t a1, uint64_t a2)
{
  return SnippetHeaderModel.init(categoryLabel:categoryListIconName:categoryIdentifier:)(v5, v2, v3, a1, a2, v4);
}

uint64_t sub_47B84()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  return 11;
}

uint64_t sub_47BB4()
{
  return sub_9B48(v1 + 64, v0);
}

uint64_t sub_47BCC()
{
  return v0;
}

uint64_t sub_47BF8()
{
  return v0;
}

uint64_t sub_47C04(uint64_t a1)
{
  *(void *)(v2 - 240) = v1;
  return sub_12D1CC(a1, v2 - 224, v2 - 176, v2 - 136);
}

void sub_47C50()
{
}

uint64_t sub_47C68()
{
  return *(void *)(v0 + 224);
}

void sub_47C80()
{
}

uint64_t sub_47CA4()
{
  return swift_allocObject();
}

uint64_t sub_47CBC()
{
  return v0;
}

uint64_t sub_47CCC()
{
  return sub_9DE0(v1, v0);
}

uint64_t sub_47CE4()
{
  return v0;
}

void sub_47D04(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = (v2 - 32) | 0x8000000000000000;
}

uint64_t sub_47D20(uint64_t a1)
{
  *(void *)(v3 - 152) = *(void *)(v2 + 11112);
  *(void *)(v3 - 144) = v1;
  *(void *)(v3 - 168) = *(void *)(v2 + 11080);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  return sub_1AAE40();
}

uint64_t sub_47D5C()
{
  return sub_1AB120();
}

unint64_t sub_47DA4()
{
  return sub_2F2B8(88);
}

uint64_t sub_47DC0()
{
  return sub_9DE0(v0 + 24, v1);
}

uint64_t sub_47DEC()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
  return sub_E4B8(v1);
}

uint64_t sub_47E18()
{
  return sub_1AB090();
}

uint64_t sub_47E34()
{
  return v0;
}

uint64_t sub_47E44()
{
  return v0 + 8;
}

uint64_t sub_47E54()
{
  return sub_1AB120();
}

uint64_t sub_47E6C(uint64_t a1, uint64_t a2)
{
  return sub_DF6D8(v2, a2, 0);
}

void *sub_47E88()
{
  return sub_75790(v0, v1);
}

void sub_47EA0()
{
  *(void *)(v2 - 112) = *(void *)(v1 + 3392);
  *(void *)(v2 - 104) = v0;
}

uint64_t sub_47ED0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 96) = a1;
  return swift_slowAlloc();
}

uint64_t sub_47EF0()
{
  return sub_9B48(v1 + 64, v0);
}

_WORD *sub_47F08(_WORD *result)
{
  *double result = 0;
  return result;
}

uint64_t sub_47F20()
{
  return swift_bridgeObjectRelease();
}

void sub_47F38(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v6, v4, a4, v5, 2u);
}

uint64_t sub_47F58()
{
  return swift_arrayDestroy();
}

uint64_t sub_47F78(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return v1 - 160;
}

uint64_t sub_47F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v23 = *(void *)(v21 - 112);
  return sub_9DE0(a21 + 296, v23);
}

uint64_t sub_47FAC()
{
  return sub_9DE0(v0, v1);
}

void *sub_47FC4()
{
  return sub_12D264(0);
}

uint64_t sub_48044()
{
  return sub_1ACE40();
}

void *sub_48070()
{
  return sub_75790(v1, v0);
}

uint64_t sub_48088()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

uint64_t sub_480C0()
{
  return v0;
}

uint64_t sub_480D4()
{
  return v0;
}

void sub_480E0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void sub_48100(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 8u);
}

uint64_t sub_48120()
{
  return sub_1AC240();
}

BOOL sub_48138()
{
  return os_log_type_enabled(v1, v0);
}

uint64_t sub_48158()
{
  return sub_49780();
}

uint64_t sub_48170(char a1)
{
  return qword_1B0080[a1];
}

uint64_t sub_48190()
{
  unint64_t v0 = sub_1AD300();
  swift_bridgeObjectRelease();
  if (v0 >= 0x3D) {
    return 61;
  }
  else {
    return v0;
  }
}

_UNKNOWN **sub_481E4()
{
  return &off_1F4698;
}

uint64_t sub_481F0(char a1)
{
  uint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0x702074656566;
      return v3 & 0xFFFFFFFFFFFFLL | 0x7265000000000000;
    case 2:
      return 0xD000000000000013;
    case 3:
      return 0x65702073656C696DLL;
    case 4:
      return 0x6C696B5F666C6168;
    case 5:
      return 0xD000000000000012;
    case 6:
    case 7:
      uint64_t v4 = 1920298856;
      goto LABEL_16;
    case 8:
    case 11:
    case 13:
      return 0xD000000000000010;
    case 9:
      return 0xD000000000000014;
    case 10:
      return 0x70206574756E696DLL;
    case 12:
      return 0x705F6574756E696DLL;
    case 14:
      return 0x705F646E6F636573;
    case 15:
      return 0x705F646E6F636573;
    case 16:
      uint64_t v5 = 1767994483;
      goto LABEL_53;
    case 17:
      uint64_t v4 = 1885697139;
LABEL_16:
      unint64_t v3 = v4 & 0xFFFF0000FFFFFFFFLL | 0x705F00000000;
      return v3 & 0xFFFFFFFFFFFFLL | 0x7265000000000000;
    case 18:
      return 0xD000000000000019;
    case 19:
      return 0xD000000000000018;
    case 20:
      return 0x6D6172676F6C696BLL;
    case 21:
      return 1835102823;
    case 22:
      return 0x646E756F70;
    case 23:
      uint64_t v6 = 1852798067;
      return v6 & 0xFFFF0000FFFFFFFFLL | 0x6500000000;
    case 24:
      return 1751346793;
    case 25:
      uint64_t v7 = 1701603693;
      return v7 & 0xFFFF0000FFFFFFFFLL | 0x7300000000;
    case 26:
      return 0x74656D69746E6563;
    case 27:
      return 0x6574656D6F6C696BLL;
    case 28:
      return 0x73726574656DLL;
    case 29:
      return 1952802150;
    case 30:
      uint64_t v7 = 1685217657;
      return v7 & 0xFFFF0000FFFFFFFFLL | 0x7300000000;
    case 31:
      return 0x6E6F68746172616DLL;
    case 32:
      return 0x6569726F6C6163;
    case 33:
      return 0x6F6C61636F6C696BLL;
    case 34:
      uint64_t v6 = 1819635562;
      return v6 & 0xFFFF0000FFFFFFFFLL | 0x6500000000;
    case 35:
      return 0x6C756F6A6F6C696BLL;
    case 36:
      return 0x655F657669746361;
    case 37:
      return 0x5F676E6974736572;
    case 38:
      return 7172194;
    case 39:
      uint64_t v5 = 1702127980;
      goto LABEL_53;
    case 40:
      return 0xD000000000000013;
    case 41:
    case 43:
      return 0x5F7265705F707563;
    case 42:
      return 0xD000000000000012;
    case 44:
      return 0xD000000000000017;
    case 45:
      return 0xD000000000000013;
    case 46:
      return 0xD000000000000015;
    case 47:
      return 0x5F666F5F74696E75;
    case 48:
      return 1734897005;
    case 49:
      return 0x6D5F687461657262;
    case 50:
      uint64_t v5 = 1701344367;
LABEL_53:
      uint64_t result = v5 & 0xFFFF0000FFFFFFFFLL | 0x7200000000;
      break;
    case 51:
      uint64_t result = 0x737569736C6563;
      break;
    case 52:
      uint64_t result = 0x65686E6572686166;
      break;
    case 53:
      uint64_t result = 1885697139;
      break;
    case 54:
      uint64_t result = 0x746867696C66;
      break;
    case 55:
      uint64_t result = 0x6168636C65656877;
      break;
    case 56:
      uint64_t result = 0x656B6F727473;
      break;
    case 57:
      uint64_t result = 0x676E696D6D697773;
      break;
    case 58:
      uint64_t result = 7364972;
      break;
    case 59:
      uint64_t result = 0x6574756E696DLL;
      break;
    case 60:
      uint64_t result = 1920298856;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_488B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_154364(*a1, *a2);
}

Swift::Int sub_488BC()
{
  return sub_302AC(*v0);
}

uint64_t sub_488C4(uint64_t a1)
{
  return sub_19D794(a1, *v1);
}

Swift::Int sub_488CC(uint64_t a1)
{
  return sub_19D974(a1, *v1);
}

uint64_t sub_488D4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_48190();
  *a1 = result;
  return result;
}

uint64_t sub_48904@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_481F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_48930(void *a1@<X8>)
{
  *a1 = &off_1F4698;
}

uint64_t getEnumTagSinglePayload for MeasurementUnit(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xC4)
  {
    if (a2 + 60 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 60) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 61;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x3D;
  int v5 = v6 - 61;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for MeasurementUnit(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 60 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 60) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xC4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xC3)
  {
    unsigned int v6 = ((a2 - 196) >> 8) + 1;
    *uint64_t result = a2 + 60;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x48A94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 60;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeasurementUnit()
{
  return &type metadata for MeasurementUnit;
}

unint64_t sub_48AD0()
{
  unint64_t result = qword_203050;
  if (!qword_203050)
  {
    sub_B464(&qword_203058);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_203050);
  }
  return result;
}

unint64_t sub_48B28()
{
  unint64_t result = qword_203060;
  if (!qword_203060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_203060);
  }
  return result;
}

uint64_t getLocalizedMedName(from:)(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  swift_retain();
  uint64_t v1 = sub_1AB830();
  swift_release();
  return v1;
}

void *getUsoMedNames(from:)(uint64_t a1)
{
  uint64_t v2 = sub_1AB5E0();
  sub_52C4();
  uint64_t v4 = v3;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v49 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v42 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v42 - v11;
  if (!a1) {
    return 0;
  }
  swift_retain();
  unint64_t result = (void *)sub_1AB620();
  uint64_t v44 = result;
  if (!result)
  {
    swift_release();
    return 0;
  }
  uint64_t v14 = result;
  v42[1] = a1;
  long long v15 = (void (**)(char *, char *, uint64_t))&_swiftEmptyArrayStorage;
  uint64_t v50 = &_swiftEmptyArrayStorage;
  uint64_t v48 = (void (*)(char *, char *, uint64_t))result[2];
  if (!v48)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    uint64_t v28 = v15[2];
    if (v28)
    {
      uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
      uint64_t v29 = v4 + 16;
      uint64_t v31 = (char *)v15 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
      uint64_t v47 = *(void *)(v29 + 56);
      uint64_t v48 = v30;
      uint64_t v46 = v15;
      swift_retain();
      uint64_t v32 = &_swiftEmptyArrayStorage;
      do
      {
        unint64_t v33 = v49;
        v48(v49, v31, v2);
        uint64_t v34 = sub_1AB5C0();
        uint64_t v36 = v35;
        (*(void (**)(char *, uint64_t))(v29 - 8))(v33, v2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_497E0(0, v32[2] + 1, 1, (uint64_t)v32);
          uint64_t v32 = v40;
        }
        unint64_t v38 = v32[2];
        unint64_t v37 = v32[3];
        if (v38 >= v37 >> 1)
        {
          sub_497E0(v37 > 1, v38 + 1, 1, (uint64_t)v32);
          uint64_t v32 = v41;
        }
        v32[2] = v38 + 1;
        uint64_t v39 = (char *)&v32[2 * v38];
        *((void *)v39 + 4) = v34;
        *((void *)v39 + 5) = v36;
        v31 += v47;
        uint64_t v28 = (void (*)(char *, char *, uint64_t))((char *)v28 - 1);
      }
      while (v28);
      swift_release();
      swift_release_n();
    }
    else
    {
      swift_release();
      swift_release();
      return &_swiftEmptyArrayStorage;
    }
    return v32;
  }
  unint64_t v16 = 0;
  uint64_t v46 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  uint64_t v47 = v4 + 16;
  uint64_t v45 = (uint64_t (**)(char *, uint64_t))(v4 + 8);
  uint64_t v43 = v10;
  while (v16 < v14[2])
  {
    unint64_t v17 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v18 = *(void *)(v4 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v12, (unint64_t)v14 + v17 + v18 * v16, v2);
    uint64_t v19 = sub_1AB5D0();
    if (v20)
    {
      if (v19 == 0x64695F6D657469 && v20 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
LABEL_14:
        uint64_t v23 = *v46;
        (*v46)(v10, v12, v2);
        uint64_t v24 = v50;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_4AA58(0, v24[2] + 1, 1);
          uint64_t v24 = v50;
        }
        unint64_t v26 = v24[2];
        unint64_t v25 = v24[3];
        if (v26 >= v25 >> 1)
        {
          sub_4AA58(v25 > 1, v26 + 1, 1);
          uint64_t v24 = v50;
        }
        v24[2] = v26 + 1;
        unint64_t v27 = (unint64_t)v24 + v17 + v26 * v18;
        uint64_t v10 = v43;
        unint64_t result = (void *)((uint64_t (*)(unint64_t, char *, uint64_t))v23)(v27, v43, v2);
        uint64_t v50 = v24;
        uint64_t v14 = v44;
        goto LABEL_19;
      }
      char v22 = sub_1AD2F0();
      swift_bridgeObjectRelease();
      if (v22) {
        goto LABEL_14;
      }
    }
    unint64_t result = (void *)(*v45)(v12, v2);
LABEL_19:
    if (v48 == (void (*)(char *, char *, uint64_t))++v16)
    {
      long long v15 = (void (**)(char *, char *, uint64_t))v50;
      goto LABEL_21;
    }
  }
  __break(1u);
  return result;
}

uint64_t hasMedDosage(from:)(uint64_t result)
{
  if (result)
  {
    swift_retain();
    uint64_t v1 = sub_1AB840();
    swift_release();
    if (v1)
    {
      swift_release();
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t getUsoMedDosageUnit(from:)(uint64_t a1)
{
  uint64_t v3 = sub_1AC800();
  sub_52C4();
  uint64_t v5 = v4;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v42 - v10;
  if (!a1) {
    return 0;
  }
  swift_retain();
  uint64_t v12 = sub_1AB840();
  uint64_t v48 = v9;
  if (!v12) {
    goto LABEL_13;
  }
  unint64_t v13 = sub_1AB850();
  swift_release();
  if (!v13) {
    goto LABEL_13;
  }
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_1AD170();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (!*(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFFF8))) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v13 & 0xC000000000000001) != 0)
  {
    sub_1AD0A0();
  }
  else
  {
    if (!*(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
      goto LABEL_40;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  sub_1AB600();
  swift_release();
  if (v50[3])
  {
    sub_1ABA00();
    swift_release();
  }
LABEL_13:
  uint64_t v15 = sub_1AC420();
  swift_release();
  uint64_t v16 = sub_1AC7D0();
  swift_beginAccess();
  unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v17(v11, v16, v3);
  swift_bridgeObjectRetain_n();
  uint64_t v18 = sub_1AC7F0();
  uint64_t v19 = v11;
  os_log_type_t v20 = sub_1ACF50();
  BOOL v21 = os_log_type_enabled(v18, v20);
  uint64_t v46 = v5 + 16;
  uint64_t v47 = v16;
  uint64_t v45 = v17;
  if (v21)
  {
    char v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v42 = v19;
    v50[0] = v23;
    uint64_t v43 = v5;
    uint64_t v44 = v3;
    *(_DWORD *)char v22 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_1ACEE0();
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    uint64_t v49 = sub_4A278(v24, v26, v50);
    uint64_t v27 = v43;
    uint64_t v3 = v44;
    sub_1ACFE0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v18, v20, "got identifiers: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v9 = *(char **)(v27 + 8);
    ((void (*)(char *, uint64_t))v9)(v42, v3);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v9 = *(char **)(v5 + 8);
    ((void (*)(char *, uint64_t))v9)(v19, v3);
  }
  if (*(void *)(v15 + 16))
  {
    uint64_t v28 = *(void *)(v15 + 32);
    swift_bridgeObjectRetain();
    swift_release();
    swift_bridgeObjectRelease();
    return v28;
  }
  swift_bridgeObjectRelease();
  if (!sub_1AB840()) {
    goto LABEL_42;
  }
  unint64_t v13 = sub_1AB850();
  uint64_t result = swift_release();
  if (!v13) {
    goto LABEL_42;
  }
  uint64_t v1 = v13 & 0xFFFFFFFFFFFFFF8;
  if (!(v13 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_22;
    }
LABEL_41:
    swift_bridgeObjectRelease();
LABEL_42:
    swift_release();
    return 0;
  }
LABEL_40:
  swift_bridgeObjectRetain();
  uint64_t v41 = sub_1AD170();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v41) {
    goto LABEL_41;
  }
LABEL_22:
  if ((v13 & 0xC000000000000001) != 0)
  {
    sub_1AD0A0();
    goto LABEL_25;
  }
  if (*(void *)(v1 + 16))
  {
    swift_retain();
LABEL_25:
    swift_bridgeObjectRelease();
    sub_1AB600();
    swift_release();
    if (!v50[0]) {
      goto LABEL_42;
    }
    uint64_t v30 = sub_1ABA00();
    swift_release();
    if (!v30) {
      goto LABEL_42;
    }
    uint64_t v31 = sub_1AB8D0();
    uint64_t v33 = v32;
    swift_release();
    if (!v33) {
      goto LABEL_42;
    }
    uint64_t v28 = 1702063972;
    if (v31 == 1702063972 && v33 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = v48;
    }
    else
    {
      char v35 = sub_1AD2F0();
      swift_bridgeObjectRelease();
      uint64_t v36 = v48;
      if ((v35 & 1) == 0) {
        goto LABEL_42;
      }
    }
    uint64_t v37 = v47;
    swift_beginAccess();
    v45(v36, v37, v3);
    unint64_t v38 = sub_1AC7F0();
    os_log_type_t v39 = sub_1ACF50();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&def_342E4, v38, v39, "got a raw name for dosageUnit but no identifiers", v40, 2u);
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v9)(v36, v3);
    swift_release();
    return v28;
  }
  __break(1u);
  return result;
}

uint64_t getMedDosageValue(from:)(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  swift_retain();
  if (!sub_1AB840()) {
    goto LABEL_12;
  }
  unint64_t v1 = sub_1AB850();
  uint64_t result = swift_release();
  if (!v1)
  {
LABEL_13:
    swift_release();
    return v1;
  }
  if (!(v1 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_6;
    }
LABEL_15:
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1AD170();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_15;
  }
LABEL_6:
  if ((v1 & 0xC000000000000001) != 0)
  {
    sub_1AD0A0();
LABEL_9:
    swift_bridgeObjectRelease();
    sub_1AB600();
    swift_release();
    unint64_t v1 = v5;
    if (v5)
    {
      uint64_t v3 = sub_1ABA10();
      swift_release();
      if (v3)
      {
        unint64_t v1 = sub_1AB6B0();
        swift_release();
        swift_release();
        return v1;
      }
LABEL_12:
      swift_release();
      return 0;
    }
    goto LABEL_13;
  }
  if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
  {
    swift_retain();
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_49780()
{
  return swift_slowAlloc();
}

uint64_t sub_49788(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_49798(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_497D4()
{
  return swift_slowDealloc();
}

void sub_497E0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_4ACF4();
    if (v8 != v9)
    {
      sub_4AD68();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_4ACE4();
    }
  }
  sub_4AD30();
  if (v5)
  {
    sub_2694(&qword_203090);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    sub_4AD20(v11 - 32);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  if (a1)
  {
    sub_49D30((char *)(a4 + 32), v4, v10 + 32);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = sub_4AD04();
    sub_49A2C(v12, v13, v14, v15);
  }
}

void sub_498A4(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_4ACF4();
    if (v8 != v9)
    {
      sub_4AD68();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_4ACE4();
    }
  }
  sub_4AD30();
  if (v5)
  {
    sub_2694(&qword_203078);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    sub_4AD20(v11 - 32);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  if (a1)
  {
    sub_49ED4((char *)(a4 + 32), v4, v10 + 32);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = sub_4AD04();
    sub_49B24(v12, v13, v14, v15);
  }
}

void sub_49968(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_4ACF4();
    if (v8 != v9)
    {
      sub_4AD68();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_4ACE4();
    }
  }
  sub_4AD30();
  if (v5)
  {
    sub_2694(&qword_203070);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    sub_4AD20(v11 - 32);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  if (a1)
  {
    sub_49F68((char *)(a4 + 32), v4, v10 + 32);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = sub_4AD04();
    sub_49C3C(v12, v13, v14, v15);
  }
}

uint64_t sub_49A2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_1AD180();
  __break(1u);
  return result;
}

uint64_t sub_49B24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      sub_2694(&qword_203080);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_1AD180();
  __break(1u);
  return result;
}

char *sub_49C3C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    unint64_t v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)sub_1AD180();
  __break(1u);
  return result;
}

char *sub_49D30(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1AD180();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t sub_49DC4(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t))
{
  if (a2 < 0)
  {
    sub_4ACD0();
    uint64_t v10 = sub_1AD180();
    __break(1u);
    return _swift_arrayInitWithTakeBackToFront(v10);
  }
  if (a3 < a1
    || (uint64_t v8 = sub_4AD14(),
        uint64_t result = ((uint64_t (*)(uint64_t))a4)(v8),
        a1 + *(void *)(*(void *)(result - 8) + 72) * a2 <= a3))
  {
    uint64_t v11 = sub_4AD14();
    a4(v11);
    uint64_t v12 = sub_4AD54();
    return _swift_arrayInitWithTakeFrontToBack(v12);
  }
  else if (a3 != a1)
  {
    uint64_t v10 = sub_4AD54();
    return _swift_arrayInitWithTakeBackToFront(v10);
  }
  return result;
}

char *sub_49ED4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1AD180();
    __break(1u);
  }
  else if (__dst != __src || &__src[64 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, a2 << 6);
  }
  return __src;
}

char *sub_49F68(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1AD180();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

uint64_t sub_49FFC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0
    || ((uint64_t v6 = sub_4AD14(), v8 = *(void *)(*(void *)(v7(v6) - 8) + 72) * a2, v9 = a3 + v8, v10 = a1 + v8, v9 > a1)
      ? (BOOL v11 = v10 > a3)
      : (BOOL v11 = 0),
        v11))
  {
    sub_4ACD0();
    uint64_t result = sub_1AD180();
    __break(1u);
  }
  else
  {
    sub_4AD40();
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_4A0F0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 8 * a2 > a1 ? (BOOL v3 = a1 + 8 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    sub_4ACD0();
    uint64_t result = sub_1AD180();
    __break(1u);
  }
  else
  {
    sub_1AC490();
    sub_4AD40();
    return swift_arrayInitWithCopy();
  }
  return result;
}

unsigned char **sub_4A1C8(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_4A1D8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_4A200(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_4A278(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  sub_1ACFE0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_4A278(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_4A34C(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_4AC74((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_4AC74((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v12);
  return v7;
}

uint64_t sub_4A34C(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_4A4A4((char *)__src, HIBYTE(a6) & 0xF, __dst);
      sub_1ACFF0();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)sub_4A57C(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = sub_1AD0E0();
    if (!v8)
    {
      uint64_t result = sub_1AD150();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_4A4A4(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)sub_1AD180();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *sub_4A57C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_4A614(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_4A7F0(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_4A7F0((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_4A614(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = sub_1ACE80();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = sub_4A788(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = sub_1AD090();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  sub_1AD180();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)sub_1AD150();
  __break(1u);
  return result;
}

void *sub_4A788(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_2694(&qword_203088);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_4A7F0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_2694(&qword_203088);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_4A9A0(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_4A8C8(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_4A8C8(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)sub_1AD180();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_4A9A0(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)sub_1AD180();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

unint64_t sub_4AA34(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

void sub_4AA58(char a1, uint64_t a2, char a3)
{
  sub_4AAD8(a1, a2, a3, *v3, qword_203098, (uint64_t (*)(uint64_t))&type metadata accessor for UsoIdentifier, (void (*)(uint64_t))&type metadata accessor for UsoIdentifier);
  *uint64_t v3 = v4;
}

void sub_4AA98(char a1, uint64_t a2, char a3)
{
  sub_4AAD8(a1, a2, a3, *v3, &qword_203068, (uint64_t (*)(uint64_t))&type metadata accessor for TemplatingSection, (void (*)(uint64_t))&type metadata accessor for TemplatingSection);
  *uint64_t v3 = v4;
}

void sub_4AAD8(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t), void (*a7)(uint64_t))
{
  if (a3)
  {
    sub_4ACF4();
    if (v12 != v13)
    {
      sub_4AD68();
      if (v12)
      {
LABEL_24:
        __break(1u);
        return;
      }
      sub_4ACE4();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15)
  {
    os_log_type_t v20 = &_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_2694(a5);
  uint64_t v16 = sub_4AD14();
  uint64_t v17 = *(void *)(a6(v16) - 8);
  uint64_t v18 = *(void *)(v17 + 72);
  unint64_t v19 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  os_log_type_t v20 = (void *)swift_allocObject();
  size_t v21 = j__malloc_size(v20);
  if (!v18)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v21 - v19 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_23;
  }
  v20[2] = v14;
  v20[3] = 2 * ((uint64_t)(v21 - v19) / v18);
LABEL_18:
  uint64_t v23 = sub_4AD14();
  uint64_t v24 = *(void *)(a6(v23) - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  unint64_t v26 = (unint64_t)v20 + v25;
  unint64_t v27 = a4 + v25;
  if (a1)
  {
    sub_49DC4(v27, v14, v26, a7);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_49FFC(v27, v14, v26);
  }
  swift_release();
}

uint64_t sub_4AC74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_4AD04()
{
  return 0;
}

uint64_t sub_4AD14()
{
  return 0;
}

void sub_4AD20(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_4AD40()
{
  return v0;
}

uint64_t sub_4AD54()
{
  return v0;
}

uint64_t sub_4AD74()
{
  sub_4BB00();

  return sub_1AAF80();
}

uint64_t sub_4ADC8(uint64_t a1)
{
  v2[88] = v1;
  v2[87] = a1;
  uint64_t v3 = sub_1AC800();
  v2[89] = v3;
  v2[90] = *(void *)(v3 - 8);
  v2[91] = swift_task_alloc();
  v2[92] = swift_task_alloc();
  return _swift_task_switch(sub_4AE9C, 0, 0);
}

uint64_t sub_4AE9C()
{
  uint64_t v2 = *(void *)(v0 + 704);
  uint64_t v3 = v2 + 40;
  sub_2E38((void *)(v2 + 40), *(void *)(v2 + 64));
  uint64_t v4 = sub_4BB68();
  v5(v4);
  sub_2E38((void *)(v0 + 608), *(void *)(v0 + 632));
  sub_4BB68();
  char v6 = sub_1AB050();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 608);
  if (v6)
  {
    int64_t v7 = *(void **)(v0 + 704);
    sub_2E38(v7, v7[3]);
    uint64_t v8 = sub_4BB68();
    char v10 = v9(v8);
    if (sub_725AC(v10, (uint64_t)&off_1F46F8))
    {
      uint64_t v12 = v7[3];
      uint64_t v11 = v7[4];
      sub_2E38(*(void **)(v0 + 704), v12);
      __int16 v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v12, v11);
      if (v13 != 270)
      {
        __int16 v14 = v13;
        uint64_t v15 = *(void *)(*(void *)(v0 + 704) + 280);
        swift_bridgeObjectRetain();
        char v16 = sub_7235C(v14, v15);
        swift_bridgeObjectRelease();
        if (v16)
        {
          uint64_t v17 = *(void *)(v0 + 704);
          sub_E3FC(v3, v0 + 24);
          sub_E3FC(v17 + 80, v0 + 64);
          sub_9B48(v17 + 120, v0 + 104);
          *(_WORD *)(v0 + 16) = v14;
          *(unsigned char *)(v0 + 264) = 0;
          sub_4BA60();
          sub_1AB120();
          sub_4BAAC(v0 + 16);
          goto LABEL_13;
        }
      }
    }
    uint64_t v18 = v0 + 440;
    sub_1AC7D0();
    sub_4BB90();
    uint64_t v27 = sub_4BB4C();
    v28(v27);
    uint64_t v29 = sub_1AC7F0();
    os_log_type_t v30 = sub_1ACF60();
    if (os_log_type_enabled(v29, v30))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_471F8(&def_342E4, v31, v32, "Cannot punchout for the requested parse, executing GenericNotSupportedFlow");
      swift_slowDealloc();
    }
    sub_4BBB0();
    uint64_t v33 = sub_4BB78();
    v34(v33);
    sub_9B48(v1 + 120, v0 + 440);
    *(unsigned char *)(v0 + 600) = 0;
  }
  else
  {
    uint64_t v18 = v0 + 272;
    sub_1AC7D0();
    sub_4BB90();
    uint64_t v19 = sub_4BB4C();
    v20(v19);
    size_t v21 = sub_1AC7F0();
    os_log_type_t v22 = sub_1ACF60();
    if (os_log_type_enabled(v21, v22))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_471F8(&def_342E4, v23, v24, "Legacy behavior not supported on this device. Returning GenericNotSupportedFlow.");
      swift_slowDealloc();
    }
    sub_4BBB0();
    uint64_t v25 = sub_4BB78();
    v26(v25);
    sub_9B48(v1 + 120, v0 + 272);
    *(unsigned char *)(v0 + 432) = 0;
  }
  sub_24CE0();
  sub_1AB120();
  sub_24D2C(v18);
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  char v35 = *(uint64_t (**)(void))(v0 + 8);
  return v35();
}

void *sub_4B1F4@<X0>(long long *a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, const void *a4@<X3>, uint64_t a5@<X8>)
{
  sub_24D80(a1, a5);
  sub_24D80(a2, a5 + 40);
  sub_24D80(a3, a5 + 80);
  uint64_t result = memcpy((void *)(a5 + 120), a4, 0xA0uLL);
  *(void *)(a5 + 280) = &off_1F4720;
  return result;
}

uint64_t destroy for LegacyFlow(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 240);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LegacyFlow(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  long long v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  long long v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  uint64_t v10 = *(void *)(a2 + 264);
  uint64_t v11 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = v10;
  *(void *)(a1 + 272) = v11;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 240, a2 + 240);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for LegacyFlow(uint64_t *a1, uint64_t *a2)
{
  a1[35] = a2[35];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for LegacyFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t assignWithTake for LegacyFlow(uint64_t a1, uint64_t a2)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 240);
  long long v7 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v7;
  uint64_t v8 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 288))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacyFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 288) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 288) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyFlow()
{
  return &type metadata for LegacyFlow;
}

uint64_t sub_4B76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *long long v7 = v3;
  v7[1] = sub_4B81C;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t sub_4B81C(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_4B8F8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_4B990;
  return sub_4ADC8(a1);
}

uint64_t sub_4B990()
{
  sub_A1B4();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_4BA60()
{
  unint64_t result = qword_2030B8;
  if (!qword_2030B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2030B8);
  }
  return result;
}

uint64_t sub_4BAAC(uint64_t a1)
{
  return a1;
}

unint64_t sub_4BB00()
{
  unint64_t result = qword_2030C0[0];
  if (!qword_2030C0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_2030C0);
  }
  return result;
}

uint64_t sub_4BB4C()
{
  return v0;
}

uint64_t sub_4BB68()
{
  return v0;
}

uint64_t sub_4BB78()
{
  return v0;
}

uint64_t sub_4BB90()
{
  return swift_beginAccess();
}

void sub_4BBB0()
{
}

uint64_t destroy for DataTypePunchoutFlow(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 48);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 88);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 128);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 168);

  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 208);
}

uint64_t initializeWithCopy for DataTypePunchoutFlow(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 48, a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 88, a2 + 88);
  long long v7 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 152) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 128, a2 + 128);
  long long v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 192) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 168, a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 232) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 208, a2 + 208);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  return a1;
}

uint64_t assignWithCopy for DataTypePunchoutFlow(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  sub_577C((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  sub_577C((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  sub_577C((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  sub_577C((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
  sub_577C((uint64_t *)(a1 + 168), (uint64_t *)(a2 + 168));
  sub_577C((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  return a1;
}

void *initializeWithTake for DataTypePunchoutFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF9uLL);
}

uint64_t assignWithTake for DataTypePunchoutFlow(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 48);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 128);
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 168);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 208);
  long long v6 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v6;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataTypePunchoutFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 249))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DataTypePunchoutFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 248) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 249) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 249) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataTypePunchoutFlow()
{
  return &type metadata for DataTypePunchoutFlow;
}

uint64_t sub_4C054()
{
  sub_4E104();

  return sub_1AAF80();
}

uint64_t sub_4C0A8()
{
  sub_A364();
  v1[7] = v2;
  v1[8] = v0;
  uint64_t v3 = sub_1AC800();
  v1[9] = v3;
  sub_A19C(v3);
  v1[10] = v4;
  v1[11] = sub_A42C();
  uint64_t v5 = sub_1AB0A0();
  v1[12] = v5;
  sub_A19C(v5);
  v1[13] = v6;
  v1[14] = sub_A220();
  v1[15] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v1[16] = v7;
  sub_A19C(v7);
  v1[17] = v8;
  v1[18] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_4C1A0()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[8];
  sub_1AB090();
  sub_4EB38();
  v5();
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_2E38((void *)(v4 + 128), *(void *)(v4 + 152));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[19] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_4C2B4;
  return sub_9D85C();
}

uint64_t sub_4C2B4(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v5 + 160) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(void *)(v5 + 168) = a1;
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_4C3AC()
{
  uint64_t v1 = (void *)v0[21];
  uint64_t v2 = (uint64_t *)v0[7];
  uint64_t v3 = v0[8];
  sub_1AC370();
  id v4 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_2E38((void *)(v3 + 88), *(void *)(v3 + 112));
  uint64_t v5 = sub_1AAF40();
  v2[3] = sub_1AAEF0();
  v2[4] = (uint64_t)&protocol witness table for AnyFlow;

  *uint64_t v2 = v5;
  uint64_t v6 = sub_4EA58();
  v7(v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v8();
}

void sub_4C4DC()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF60();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v19 = v0[10];
    uint64_t v20 = v0[9];
    uint64_t v21 = v0[11];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    v0[5] = sub_4A278(0xD00000000000001CLL, 0x80000000001BA690, &v22);
    sub_1ACFE0();
    *(_WORD *)(v7 + 12) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v9;
    sub_1ACFE0();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_342E4, v5, v6, "Could not execute %s. Error: %@", (uint8_t *)v7, 0x16u);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
  }
  else
  {
    uint64_t v11 = v0[10];
    uint64_t v10 = v0[11];
    uint64_t v12 = v0[9];
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  uint64_t v13 = (uint64_t *)v0[7];
  sub_1AC320();
  v13[3] = (uint64_t)&type metadata for GenericErrorFlow;
  v13[4] = sub_9BA4();
  uint64_t v14 = swift_allocObject();
  *uint64_t v13 = v14;
  sub_757A0((uint64_t *)(v14 + 16));
  swift_errorRelease();
  uint64_t v15 = sub_4EA58();
  v16(v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_4EA7C();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_4C7E0()
{
  sub_A364();
  *(void *)(v1 + 64) = v2;
  *(void *)(v1 + 72) = v0;
  *(unsigned char *)(v1 + 160) = v3;
  *(void *)(v1 + 56) = v4;
  uint64_t v5 = sub_1AC2D0();
  *(void *)(v1 + 80) = v5;
  sub_53D4(v5);
  *(void *)(v1 + 88) = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E28);
  sub_53D4(v6);
  *(void *)(v1 + 96) = sub_A42C();
  uint64_t v7 = sub_2694(&qword_2030F8);
  sub_53D4(v7);
  *(void *)(v1 + 104) = sub_A220();
  *(void *)(v1 + 112) = swift_task_alloc();
  uint64_t v8 = sub_1AAB10();
  *(void *)(v1 + 120) = v8;
  sub_A19C(v8);
  *(void *)(v1 + 128) = v9;
  *(void *)(v1 + 136) = sub_A42C();
  uint64_t v10 = sub_1AC3D0();
  *(void *)(v1 + 144) = v10;
  sub_53D4(v10);
  *(void *)(v1 + 152) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_4C910()
{
  uint64_t v27 = v0;
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v20 = *(void *)(v0 + 96);
  uint64_t v21 = *(void *)(v0 + 112);
  uint64_t v5 = *(void **)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v24 = *(uint64_t **)(v0 + 56);
  uint64_t v25 = *(void *)(v0 + 104);
  uint64_t v22 = *(void *)(v0 + 88);
  uint64_t v7 = v5[4];
  uint64_t v8 = v5[5];
  char v19 = *(unsigned char *)(v0 + 160);
  sub_2E38(v5 + 1, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 16))(v26, v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v6, v4);
  sub_1AC3C0();
  sub_4E0BC(&qword_203100, (void (*)(uint64_t))&type metadata accessor for AppPunchOutFlow);
  uint64_t v23 = sub_1AAF70();
  sub_4E068(v1, (void (*)(void))&type metadata accessor for AppPunchOutFlow);
  uint64_t v9 = sub_2E38(v5 + 6, v5[9]);
  sub_18ADDC(*v9);
  sub_2F2B8(v19);
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v20, 0, 1, v10);
  sub_26B1C(v20, 0);
  swift_release();
  sub_4E550(v20, &qword_201E28);
  sub_4E000(v21, v25);
  sub_E3FC((uint64_t)(v5 + 1), v0 + 16);
  sub_1AC2C0();
  sub_4E0BC(&qword_203108, (void (*)(uint64_t))&type metadata accessor for OutputFlow);
  uint64_t v11 = sub_1AAF70();
  sub_4E068(v22, (void (*)(void))&type metadata accessor for OutputFlow);
  uint64_t v12 = v5[4];
  uint64_t v13 = v5[5];
  sub_2E38(v5 + 1, v12);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v13 + 16))(v26, v12, v13);
  sub_2694(&qword_202588);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1B04D0;
  *(void *)(v14 + 32) = v11;
  *(void *)(v14 + 40) = v23;
  v26[5] = v14;
  sub_1ACEF0();
  uint64_t v15 = sub_1AC300();
  swift_allocObject();
  uint64_t v16 = sub_1AC2F0();
  v24[3] = v15;
  v24[4] = sub_4E0BC(&qword_203110, (void (*)(uint64_t))&type metadata accessor for SequenceFlow);
  uint64_t *v24 = v16;
  sub_4E550(v21, &qword_2030F8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v17();
}

uint64_t sub_4CCEC()
{
  sub_A364();
  v1[62] = v2;
  v1[63] = v0;
  uint64_t v3 = sub_1AAB10();
  v1[64] = v3;
  sub_A19C(v3);
  v1[65] = v4;
  v1[66] = sub_A42C();
  uint64_t v5 = sub_1AC250();
  sub_53D4(v5);
  v1[67] = sub_A42C();
  uint64_t v6 = type metadata accessor for DataTypePunchoutFlow.PunchOutAction();
  sub_53D4(v6);
  v1[68] = sub_A220();
  v1[69] = swift_task_alloc();
  uint64_t v7 = sub_1AC800();
  v1[70] = v7;
  sub_A19C(v7);
  v1[71] = v8;
  v1[72] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_4CDF4()
{
  uint64_t v40 = v0;
  uint64_t v1 = (uint64_t *)(v0 + 16);
  unint64_t v38 = (uint64_t *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 568);
  uint64_t v4 = *(void *)(v0 + 560);
  uint64_t v5 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v6 = sub_1AC7F0();
  os_log_type_t v7 = sub_1ACF50();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 568);
    uint64_t v36 = *(void *)(v0 + 560);
    uint64_t v37 = *(void *)(v0 + 576);
    uint64_t v9 = (uint8_t *)sub_4EA98();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v0 + 488) = sub_4A278(0xD000000000000014, 0x80000000001B04E0, &v39);
    uint64_t v1 = (uint64_t *)(v0 + 16);
    sub_1ACFE0();
    _os_log_impl(&def_342E4, v6, v7, "Executing %s", v9, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v37, v36);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 576);
    uint64_t v11 = *(void *)(v0 + 568);
    uint64_t v12 = *(void *)(v0 + 560);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  uint64_t v13 = *(char **)(v0 + 552);
  uint64_t v14 = *(void *)(v0 + 544);
  uint64_t v15 = *(void *)(v0 + 504);
  uint64_t v16 = *(void *)(v15 + 32);
  uint64_t v17 = *(void *)(v15 + 40);
  __int16 v18 = *(_WORD *)v15;
  sub_2E38((void *)(v15 + 8), v16);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
  sub_4D6A4(v18, (void *)(v0 + 384), v13);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 384);
  sub_4DF4C((uint64_t)v13, v14);
  uint64_t v19 = sub_2694(&qword_2030E0);
  switch(_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v14, 3, v19))
  {
    case 1u:
      uint64_t v34 = (void *)swift_task_alloc();
      *(void *)(v0 + 584) = v34;
      *uint64_t v34 = v0;
      v34[1] = sub_4D338;
      sub_4EA7C();
      return sub_4C0A8();
    case 2u:
      uint64_t v23 = *(void *)(v0 + 552);
      sub_E988C(v1);
      uint64_t v24 = type metadata accessor for WellnessCATPatternsExecutor(0);
      sub_1AC240();
      uint64_t v25 = sub_1AC1A0();
      *(void *)(v0 + 80) = v24;
      *(void *)(v0 + 88) = &off_1F6840;
      *(void *)(v0 + 56) = v25;
      uint64_t v26 = type metadata accessor for WellnessLoggingCATPatternsExecutor(0);
      sub_1AC240();
      uint64_t v27 = sub_1AC1A0();
      *(void *)(v0 + 120) = v26;
      *(void *)(v0 + 128) = &off_1F8838;
      *(void *)(v0 + 96) = v27;
      uint64_t v28 = type metadata accessor for WellnessQueryingCATPatternsExecutor(0);
      sub_1AC240();
      uint64_t v29 = sub_1AC1A0();
      *(void *)(v0 + 160) = v28;
      *(void *)(v0 + 168) = &off_1F65F0;
      *(void *)(v0 + 136) = v29;
      *(unsigned char *)(v0 + 176) = 0;
      sub_24CE0();
      sub_1AB120();
      sub_24D2C((uint64_t)v1);
      uint64_t v30 = v23;
      goto LABEL_10;
    case 3u:
      uint64_t v31 = *(void *)(v0 + 552);
      sub_1AC320();
      sub_757A0(v38);
      sub_9BA4();
      sub_1AB120();
      sub_9BF0((uint64_t)v38);
      uint64_t v30 = v31;
LABEL_10:
      sub_4E068(v30, (void (*)(void))type metadata accessor for DataTypePunchoutFlow.PunchOutAction);
      sub_4EA34();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_E564();
      sub_4EA7C();
      __asm { BRAA            X1, X16 }
      return result;
    default:
      (*(void (**)(void, void, void))(*(void *)(v0 + 520) + 32))(*(void *)(v0 + 528), *(void *)(v0 + 544) + *(int *)(v19 + 48), *(void *)(v0 + 512));
      sub_1AC350();
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 592) = v20;
      void *v20 = v0;
      v20[1] = sub_4D4D8;
      sub_4EA7C();
      return sub_4C7E0();
  }
}

uint64_t sub_4D338()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_4D400()
{
  uint64_t v1 = v0[69];
  sub_2E38(v0 + 53, v0[56]);
  sub_1AB120();
  sub_4E068(v1, (void (*)(void))type metadata accessor for DataTypePunchoutFlow.PunchOutAction);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 53));
  sub_4EA34();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v2();
}

uint64_t sub_4D4D8()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_4D5A0()
{
  uint64_t v1 = v0[69];
  uint64_t v2 = v0[66];
  uint64_t v3 = v0[65];
  uint64_t v4 = v0[64];
  sub_2E38(v0 + 43, v0[46]);
  sub_1AB120();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_4E068(v1, (void (*)(void))type metadata accessor for DataTypePunchoutFlow.PunchOutAction);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 43));
  sub_4EA34();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v5();
}

uint64_t sub_4D6A4@<X0>(__int16 a1@<W0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t v86 = a3;
  sub_1AC800();
  sub_52C4();
  uint64_t v84 = v6;
  uint64_t v85 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v83 = (char *)&v79 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v82 = (char *)&v79 - v14;
  __chkstk_darwin(v13);
  uint64_t v81 = (char *)&v79 - v15;
  uint64_t v16 = sub_2694(&qword_201CC8);
  uint64_t v17 = sub_53D4(v16);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_2694(&qword_201E20);
  uint64_t v21 = sub_53D4(v20);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_1AAB10();
  sub_52C4();
  uint64_t v80 = v25;
  __chkstk_darwin(v26);
  sub_47EB8();
  sub_2E38(a2, a2[3]);
  char v27 = sub_1AB040();
  sub_E3FC((uint64_t)a2, (uint64_t)v88);
  if (v27)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v88);
  }
  else
  {
    sub_2E38(v88, v88[3]);
    char v28 = sub_1AB030();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v88);
    if ((v28 & 1) == 0)
    {
      uint64_t v35 = sub_2694(&qword_2030E0);
      uint64_t v36 = (uint64_t)v86;
      uint64_t v53 = 1;
      return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v36, v53, 3, v35);
    }
  }
  if (a1 == 270)
  {
    sub_1AC7D0();
    sub_4EA14();
    uint64_t v30 = v84;
    uint64_t v29 = v85;
    sub_4EB38();
    v31();
    uint64_t v32 = sub_1AC7F0();
    os_log_type_t v33 = sub_1ACF60();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&def_342E4, v32, v33, "Cannot punchout for nil datatype", v34, 2u);
      sub_A1F0();
    }

    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v30);
    uint64_t v35 = sub_2694(&qword_2030E0);
    uint64_t v36 = (uint64_t)v86;
    goto LABEL_23;
  }
  if (qword_201C30 != -1) {
    swift_once();
  }
  uint64_t v37 = qword_214760;
  swift_bridgeObjectRetain();
  char v38 = sub_7235C(a1, v37);
  swift_bridgeObjectRelease();
  if (v38)
  {
    unsigned __int8 v39 = sub_19D5A4(a1);
    if (v39 == 205)
    {
      sub_1AC7D0();
      sub_4EA14();
      uint64_t v41 = v84;
      uint64_t v40 = v85;
      uint64_t v42 = v82;
      uint64_t v43 = sub_4EAB4();
      v44(v43);
      uint64_t v45 = (void *)sub_1AC7F0();
      os_log_type_t v46 = sub_1ACF60();
      if (!sub_4EAE8(v46))
      {
LABEL_22:

        (*(void (**)(_DWORD *, uint64_t))(v40 + 8))(v42, v41);
        uint64_t v73 = v86;
        uint64_t v35 = sub_2694(&qword_2030E0);
        uint64_t v36 = (uint64_t)v73;
LABEL_23:
        uint64_t v53 = 3;
        return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v36, v53, 3, v35);
      }
      sub_4EA98();
      v87[0] = sub_4EACC();
      uint64_t v47 = sub_4EB4C(4.8149e-34);
      uint64_t v49 = sub_4A278(v47, v48, v87);
      sub_4E9EC(v49);
      swift_bridgeObjectRelease();
      uint64_t v52 = "Expected to create a HealthKit Identifier to punchout for %s";
    }
    else
    {
      char v65 = v39;
      uint64_t v66 = sub_1AAA10();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 1, 1, v66);
      sub_153CEC(v65, v19);
      sub_4E550((uint64_t)v19, &qword_201CC8);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v23, 1, v24) != 1)
      {
        uint64_t v75 = *(void (**)(uint64_t, char *, uint64_t))(v80 + 32);
        v75((uint64_t)v3, v23, v24);
        uint64_t v76 = sub_2694(&qword_2030E0);
        uint64_t v77 = v86;
        uint64_t v78 = &v86[*(int *)(v76 + 48)];
        *uint64_t v86 = v65;
        v75((uint64_t)v78, v3, v24);
        uint64_t v36 = (uint64_t)v77;
        uint64_t v53 = 0;
        uint64_t v35 = v76;
        return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v36, v53, 3, v35);
      }
      sub_4E550((uint64_t)v23, &qword_201E20);
      sub_1AC7D0();
      sub_4EA14();
      uint64_t v41 = v84;
      uint64_t v40 = v85;
      uint64_t v42 = v81;
      uint64_t v67 = sub_4EAB4();
      v68(v67);
      uint64_t v45 = (void *)sub_1AC7F0();
      os_log_type_t v69 = sub_1ACF60();
      if (!sub_4EAE8(v69)) {
        goto LABEL_22;
      }
      sub_4EA98();
      v87[0] = sub_4EACC();
      *uint64_t v42 = 136315138;
      unint64_t v70 = sub_2F2B8(v65);
      uint64_t v72 = sub_4A278(v70, v71, v87);
      sub_4E9EC(v72);
      swift_bridgeObjectRelease();
      uint64_t v52 = "Cannot create a punchout url for %s";
    }
    sub_4EB18(&def_342E4, v50, v51, v52);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
    goto LABEL_22;
  }
  sub_1AC7D0();
  sub_4EA14();
  uint64_t v55 = v84;
  uint64_t v54 = v85;
  uint64_t v56 = v83;
  (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v83, v19, v84);
  uint64_t v57 = (void *)sub_1AC7F0();
  os_log_type_t v58 = sub_1ACF50();
  if (sub_4EAE8(v58))
  {
    sub_4EA98();
    v87[0] = sub_4EACC();
    uint64_t v59 = sub_4EB4C(4.8149e-34);
    uint64_t v61 = sub_4A278(v59, v60, v87);
    sub_4E9EC(v61);
    swift_bridgeObjectRelease();
    sub_4EB18(&def_342E4, v62, v63, "Punchout not supported for %s");
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }

  (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v55);
  uint64_t v64 = v86;
  uint64_t v35 = sub_2694(&qword_2030E0);
  uint64_t v36 = (uint64_t)v64;
  uint64_t v53 = 2;
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v36, v53, 3, v35);
}

uint64_t sub_4DD74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1AC250();
  uint64_t v3 = sub_53D4(v2);
  __chkstk_darwin(v3);
  sub_47EB8();
  sub_E988C(a1);
  uint64_t v4 = type metadata accessor for WellnessCATPatternsExecutor(0);
  sub_1AC240();
  uint64_t v5 = sub_1AC1A0();
  a1[8] = v4;
  a1[9] = (uint64_t)&off_1F6840;
  a1[5] = v5;
  uint64_t v6 = type metadata accessor for WellnessLoggingCATPatternsExecutor(0);
  sub_1AC240();
  uint64_t v7 = sub_1AC1A0();
  a1[13] = v6;
  a1[14] = (uint64_t)&off_1F8838;
  a1[10] = v7;
  uint64_t v8 = type metadata accessor for WellnessQueryingCATPatternsExecutor(0);
  sub_1AC240();
  uint64_t result = sub_1AC1A0();
  a1[18] = v8;
  a1[19] = (uint64_t)&off_1F65F0;
  a1[15] = result;
  return result;
}

uint64_t sub_4DE6C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24C20;
  return sub_4CCEC();
}

uint64_t type metadata accessor for DataTypePunchoutFlow.PunchOutAction()
{
  uint64_t result = qword_203190;
  if (!qword_203190) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_4DF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataTypePunchoutFlow.PunchOutAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_4DFB0()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 96);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 136);

  return _swift_deallocObject(v0, 176, 7);
}

uint64_t sub_4E000(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_2030F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_4E068(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_4EB04();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_4E0BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_4E104()
{
  unint64_t result = qword_203118;
  if (!qword_203118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_203118);
  }
  return result;
}

uint64_t *sub_4E150(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_2694(&qword_2030E0);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 3, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v9 = *(int *)(v7 + 48);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = sub_1AAB10();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 3, v7);
    }
  }
  return a1;
}

uint64_t sub_4E26C(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_2030E0);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 3, v2);
  if (!result)
  {
    uint64_t v4 = a1 + *(int *)(v2 + 48);
    uint64_t v5 = sub_1AAB10();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  return result;
}

unsigned char *sub_4E308(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = sub_2694(&qword_2030E0);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 3, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(v6 + 48);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    uint64_t v10 = sub_1AAB10();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 3, v6);
  }
  return a1;
}

unsigned char *sub_4E3E8(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = sub_2694(&qword_2030E0);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 3, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 3, v6);
  if (!v7)
  {
    if (!v8)
    {
      *a1 = *a2;
      uint64_t v14 = *(int *)(v6 + 48);
      uint64_t v15 = &a1[v14];
      uint64_t v16 = &a2[v14];
      uint64_t v17 = sub_1AAB10();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
      return a1;
    }
    sub_4E550((uint64_t)a1, &qword_2030E0);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  *a1 = *a2;
  uint64_t v9 = *(int *)(v6 + 48);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = sub_1AAB10();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 3, v6);
  return a1;
}

uint64_t sub_4E550(uint64_t a1, uint64_t *a2)
{
  sub_2694(a2);
  sub_4EB04();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unsigned char *sub_4E5A0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = sub_2694(&qword_2030E0);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 3, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(v6 + 48);
    int v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    uint64_t v10 = sub_1AAB10();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 3, v6);
  }
  return a1;
}

unsigned char *sub_4E680(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = sub_2694(&qword_2030E0);
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 3, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 3, v6);
  if (!v7)
  {
    if (!v8)
    {
      *a1 = *a2;
      uint64_t v14 = *(int *)(v6 + 48);
      uint64_t v15 = &a1[v14];
      uint64_t v16 = &a2[v14];
      uint64_t v17 = sub_1AAB10();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
      return a1;
    }
    sub_4E550((uint64_t)a1, &qword_2030E0);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  *a1 = *a2;
  uint64_t v9 = *(int *)(v6 + 48);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = sub_1AAB10();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 3, v6);
  return a1;
}

uint64_t sub_4E7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4E7FC);
}

uint64_t sub_4E7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_2030E0);
  unsigned int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, a2, v4);
  if (v5 >= 4) {
    return v5 - 3;
  }
  else {
    return 0;
  }
}

uint64_t sub_4E848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4E85C);
}

uint64_t sub_4E85C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 3);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_2694(&qword_2030E0);

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, v5, a3, v6);
}

uint64_t sub_4E8C0(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_2030E0);

  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 3, v2);
}

uint64_t sub_4E908(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_2030E0);

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 3, v4);
}

uint64_t sub_4E958()
{
  uint64_t result = sub_1AAB10();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_4E9EC(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return sub_1ACFE0();
}

uint64_t sub_4EA14()
{
  return swift_beginAccess();
}

uint64_t sub_4EA34()
{
  return swift_task_dealloc();
}

uint64_t sub_4EA58()
{
  return *(void *)(v0 + 144);
}

uint64_t sub_4EA98()
{
  return swift_slowAlloc();
}

uint64_t sub_4EAB4()
{
  return v0;
}

uint64_t sub_4EACC()
{
  return swift_slowAlloc();
}

BOOL sub_4EAE8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_4EB18(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_4EB4C(float a1)
{
  *uint64_t v1 = a1;
  return sub_1771BC(v2);
}

uint64_t type metadata accessor for WellnessCATsSimple()
{
  uint64_t result = qword_2031A0;
  if (!qword_2031A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_4EBB4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_4EBF4()
{
  sub_A364();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = sub_2694(&qword_201E28);
  sub_53D4(v3);
  v1[4] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_4EC74()
{
  sub_47D74();
  sub_E588();
  sub_508FC();
  sub_2694(&qword_2027C8);
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = (__n128 *)sub_508F0(v1);
  uint64_t v3 = sub_507D4(v2, (__n128)xmmword_1ADCF0);
  sub_50890((uint64_t)v3, v4, &qword_201E28);
  uint64_t v5 = sub_1AC1E0();
  sub_507A8(v5);
  if (v6)
  {
    sub_A068(v0, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_508CC();
    sub_A5C0();
    sub_50818();
    v7();
  }
  uint64_t v8 = sub_50774();
  uint64_t v9 = (void *)sub_50920(v8);
  *uint64_t v9 = v10;
  v9[1] = sub_4ED9C;
  sub_50838();
  sub_50828(28);
  sub_47BE4();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_4ED9C()
{
  sub_47634();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *char v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_4EEB4()
{
  sub_A364();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = sub_2694(&qword_201E28);
  sub_53D4(v3);
  v1[4] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_4EF34()
{
  sub_47D74();
  sub_E588();
  sub_508FC();
  sub_2694(&qword_2027C8);
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = sub_508F0(v1);
  *(_OWORD *)(v2 + 16) = xmmword_1ADCF0;
  strcpy((char *)(v2 + 32), "activityType");
  *(unsigned char *)(v2 + 45) = 0;
  *(_WORD *)(v2 + 46) = -5120;
  sub_50890(v2, v3, &qword_201E28);
  uint64_t v4 = sub_1AC1E0();
  sub_507A8(v4);
  if (v5)
  {
    sub_A068(v0, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_508CC();
    sub_A5C0();
    sub_50818();
    v6();
  }
  uint64_t v7 = sub_50774();
  uint64_t v8 = (void *)sub_50920(v7);
  *uint64_t v8 = v9;
  v8[1] = sub_4F080;
  sub_50838();
  sub_50828(23);
  sub_47BE4();
  return v13(v10, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_4F080()
{
  sub_47634();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_4F198()
{
  sub_A364();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_4F200()
{
  sub_A364();
  uint64_t v0 = sub_50774();
  uint64_t v1 = (void *)sub_508C0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_50768;
  sub_508B4();
  unint64_t v3 = sub_508A8(24);
  return v4(v3);
}

uint64_t sub_4F2A0()
{
  sub_A364();
  uint64_t v0 = sub_50774();
  uint64_t v1 = (void *)sub_508C0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_50768;
  sub_508B4();
  unint64_t v3 = sub_508A8(49);
  return v4(v3);
}

uint64_t sub_4F340()
{
  sub_A364();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = sub_2694(&qword_201E28);
  sub_53D4(v3);
  v1[4] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_4F3C0()
{
  sub_47D74();
  sub_E588();
  sub_508FC();
  sub_2694(&qword_2027C8);
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = (__n128 *)sub_508F0(v1);
  uint64_t v3 = sub_507D4(v2, (__n128)xmmword_1ADCF0);
  sub_50890((uint64_t)v3, v4, &qword_201E28);
  uint64_t v5 = sub_1AC1E0();
  sub_507A8(v5);
  if (v6)
  {
    sub_A068(v0, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_508CC();
    sub_A5C0();
    sub_50818();
    v7();
  }
  uint64_t v8 = sub_50774();
  uint64_t v9 = (void *)sub_50920(v8);
  *uint64_t v9 = v10;
  v9[1] = sub_4ED9C;
  sub_50838();
  sub_50828(17);
  sub_47BE4();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_4F4E8()
{
  sub_A364();
  uint64_t v0 = sub_50774();
  uint64_t v1 = (void *)sub_508C0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_4F588;
  sub_508B4();
  unint64_t v3 = sub_508A8(22);
  return v4(v3);
}

uint64_t sub_4F588()
{
  sub_A364();
  uint64_t v3 = v2;
  sub_A1B4();
  uint64_t v4 = *v1;
  sub_A304();
  *uint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t sub_4F658()
{
  sub_A364();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = sub_2694(&qword_201E28);
  sub_53D4(v4);
  v1[5] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_4F6DC()
{
  sub_47D74();
  sub_E588();
  uint64_t v1 = v0[5];
  sub_2694(&qword_2027C8);
  uint64_t v2 = (__n128 *)sub_50908();
  v0[6] = v2;
  uint64_t v3 = sub_507D4(v2, (__n128)xmmword_1AF720);
  sub_50890((uint64_t)v3, v4, &qword_201E28);
  uint64_t v5 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v5) == 1)
  {
    sub_A068(v0[5], &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_508CC();
    sub_A5C0();
    sub_50818();
    v6();
  }
  unint64_t v7 = v0[3];
  v2[5].n128_u64[0] = 0xD000000000000014;
  v2[5].n128_u64[1] = 0x80000000001BA7D0;
  uint64_t v8 = 0;
  if (v7)
  {
    uint64_t v8 = sub_1ABFB0();
  }
  else
  {
    v2[6].n128_u64[1] = 0;
    v2[7].n128_u64[0] = 0;
  }
  v2[6].n128_u64[0] = v7;
  v2[7].n128_u64[1] = v8;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[7] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_4F874;
  sub_50874(0xD00000000000001BLL);
  sub_47BE4();
  return v13(v10, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_4F874()
{
  sub_47634();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_4F98C()
{
  sub_A364();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_4F9F4()
{
  sub_A364();
  uint64_t v0 = sub_50774();
  uint64_t v1 = (void *)sub_508C0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_50768;
  sub_508B4();
  unint64_t v3 = sub_508A8(27);
  return v4(v3);
}

uint64_t sub_4FA94()
{
  sub_A364();
  uint64_t v0 = sub_50774();
  uint64_t v1 = (void *)sub_508C0(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_50768;
  sub_508B4();
  unint64_t v3 = sub_508A8(34);
  return v4(v3);
}

uint64_t sub_4FB34()
{
  sub_A364();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = sub_2694(&qword_201E28);
  sub_53D4(v4);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_4FBD0()
{
  sub_47D74();
  sub_E588();
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[2];
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_50908();
  v0[7] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_1AF720;
  sub_50858(v3);
  sub_9FA8(v2, v1, &qword_201E28);
  uint64_t v4 = sub_1AC1E0();
  sub_5092C(v4);
  if (v5)
  {
    sub_A068(v1, &qword_201E28);
    sub_50958();
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    sub_B5B0((uint64_t *)(v3 + 48));
    sub_A5C0();
    sub_50848();
    v6();
  }
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[3];
  *(void *)(v3 + 80) = 1953066613;
  *(void *)(v3 + 88) = 0xE400000000000000;
  sub_9FA8(v8, v7, &qword_201E28);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v2) == 1)
  {
    sub_A068(v0[5], &qword_201E28);
    sub_50958();
  }
  else
  {
    *(void *)(v3 + 120) = v2;
    sub_B5B0((uint64_t *)(v3 + 96));
    sub_A5C0();
    sub_50848();
    v9();
  }
  uint64_t v10 = (void *)sub_50774();
  v0[8] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_4FDA4;
  sub_50838();
  sub_50828(24);
  sub_47BE4();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_4FDA4()
{
  sub_47634();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_4FEC8()
{
  sub_A364();
  *(unsigned char *)(v1 + 64) = v2;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v0;
  uint64_t v4 = sub_2694(&qword_201E28);
  sub_53D4(v4);
  *(void *)(v1 + 32) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_4FF4C()
{
  sub_47D74();
  sub_E588();
  sub_508FC();
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_50908();
  uint64_t v4 = sub_508F0(v3);
  *(_OWORD *)(v4 + 16) = xmmword_1AF720;
  uint64_t v5 = sub_50858(v4);
  sub_50890(v5, v6, &qword_201E28);
  uint64_t v7 = sub_1AC1E0();
  sub_507A8(v7);
  if (v8)
  {
    sub_A068(v1, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_508CC();
    sub_A5C0();
    sub_50818();
    v9();
  }
  char v10 = *(unsigned char *)(v0 + 64);
  *(void *)(v2 + 80) = 0xD000000000000010;
  *(void *)(v2 + 88) = 0x80000000001BA740;
  *(void *)(v2 + 120) = &type metadata for Bool;
  *(unsigned char *)(v2 + 96) = v10;
  uint64_t v11 = sub_50774();
  uint64_t v12 = (void *)sub_50920(v11);
  *uint64_t v12 = v13;
  v12[1] = sub_4F080;
  sub_50874(0xD000000000000014);
  sub_47BE4();
  return v17(v14, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t sub_500A0()
{
  sub_A364();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = sub_2694(&qword_201E28);
  sub_53D4(v4);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_5013C()
{
  sub_47D74();
  sub_E588();
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[2];
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_50908();
  v0[7] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_1AF720;
  *(void *)(v3 + 32) = 1953066613;
  *(void *)(v3 + 40) = 0xE400000000000000;
  sub_9FA8(v2, v1, &qword_201E28);
  uint64_t v4 = sub_1AC1E0();
  sub_5092C(v4);
  if (v5)
  {
    sub_A068(v1, &qword_201E28);
    sub_50958();
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    sub_B5B0((uint64_t *)(v3 + 48));
    sub_A5C0();
    sub_50848();
    v6();
  }
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[3];
  *(void *)(v3 + 80) = 0xD000000000000016;
  *(void *)(v3 + 88) = 0x80000000001BA6E0;
  sub_9FA8(v8, v7, &qword_201E28);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v2) == 1)
  {
    sub_A068(v0[5], &qword_201E28);
    sub_50958();
  }
  else
  {
    *(void *)(v3 + 120) = v2;
    sub_B5B0((uint64_t *)(v3 + 96));
    sub_A5C0();
    sub_50848();
    v9();
  }
  char v10 = (void *)sub_50774();
  v0[8] = v10;
  *char v10 = v0;
  v10[1] = sub_5032C;
  sub_50838();
  sub_50828(19);
  sub_47BE4();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_5032C()
{
  sub_47634();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_50450()
{
  sub_A364();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_504C4(uint64_t a1, uint64_t a2)
{
  return sub_50518(a1, a2);
}

uint64_t sub_50518(uint64_t a1, uint64_t a2)
{
  sub_1AC250();
  sub_507F8();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_E548();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_2694(&qword_201E20);
  uint64_t v12 = sub_53D4(v11);
  __chkstk_darwin(v12);
  sub_E548();
  sub_9FA8(a1, v14 - v13, &qword_201E20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, a2, v2);
  uint64_t v15 = sub_1AC1F0();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  sub_A068(a1, &qword_201E20);
  return v15;
}

uint64_t sub_50654(uint64_t a1, uint64_t a2)
{
  sub_1AC250();
  sub_507F8();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_E548();
  uint64_t v9 = v8 - v7;
  swift_allocObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, a2, v2);
  uint64_t v10 = sub_1AC200();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v2);
  return v10;
}

uint64_t sub_50730()
{
  uint64_t v0 = sub_1AC220();

  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_50760()
{
  return type metadata accessor for WellnessCATsSimple();
}

uint64_t sub_50774()
{
  return swift_task_alloc();
}

uint64_t sub_50794()
{
  return v0;
}

uint64_t sub_507A8(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, a1);
}

__n128 *sub_507D4(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6570795461746164;
  result[2].n128_u64[1] = 0xE800000000000000;
  return result;
}

unint64_t sub_50828(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t sub_50858(uint64_t result)
{
  *(void *)(result + 32) = 0x6570797461746164;
  *(void *)(result + 40) = 0xE800000000000000;
  return result;
}

uint64_t sub_50874@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_50890(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_9FA8(v3, v4, a3);
}

unint64_t sub_508A8(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t sub_508C0(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t *sub_508CC()
{
  *(void *)(v2 + 72) = v1;
  return sub_B5B0(v0);
}

double sub_508E4()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t sub_508F0(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t sub_50908()
{
  return swift_allocObject();
}

uint64_t sub_50920(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t sub_5092C(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, a1);
}

double sub_50958()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t isLoggingTask(from:)()
{
  sub_1AB750();
  sub_509E0((uint64_t)v3, (uint64_t)v1);
  if (v2)
  {
    sub_1ABA30();
    if (sub_5547C())
    {
      swift_release();
      return 1;
    }
  }
  else
  {
    sub_2EF0C((uint64_t)v1, &qword_202BA0);
  }
  return 0;
}

uint64_t sub_509E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_202BA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t isQueryingTask(from:)()
{
  uint64_t v0 = sub_1AB750();
  sub_554F0(v0, v1, &qword_202BA0, v2, v3);
  if (v6)
  {
    sub_1ABB40();
    if (sub_55458())
    {
      swift_release();
      sub_2EF0C((uint64_t)v7, &qword_202BA0);
      return 1;
    }
  }
  else
  {
    sub_2EF0C((uint64_t)v5, &qword_202BA0);
  }
  sub_509E0((uint64_t)v7, (uint64_t)v5);
  if (v6)
  {
    sub_1ABA70();
    if (sub_55458())
    {
      swift_release();
      return 1;
    }
  }
  else
  {
    sub_2EF0C((uint64_t)v5, &qword_202BA0);
  }
  return 0;
}

uint64_t isLoggingTimeframeTodayOrNone(from:todayDate:)(uint64_t a1, uint64_t a2)
{
  if (isLoggingTimeframeToday(from:todayDate:)(a1, a2)) {
    return 1;
  }

  return isLoggingTimeframeNone(from:)();
}

uint64_t isLoggingTimeframeToday(from:todayDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1AB750();
  sub_554F0(v3, v4, &qword_202BA0, v5, v6);
  if (!v18)
  {
    uint64_t v7 = sub_2EF0C((uint64_t)v17, &qword_202BA0);
LABEL_5:
    sub_554F0(v7, v8, &qword_202BA0, v9, v10);
    if (v18)
    {
      sub_1ABB40();
      uint64_t v11 = sub_5547C();
      if (v11)
      {
        sub_55848();
        sub_1AB820();
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v11 = sub_2EF0C((uint64_t)v17, &qword_202BA0);
    }
    sub_554F0(v11, v12, &qword_202BA0, v13, v14);
    if (v18)
    {
      sub_1ABA70();
      if (sub_5547C())
      {
        sub_55848();
        sub_1AB930();
        goto LABEL_12;
      }
    }
    else
    {
      sub_2EF0C((uint64_t)v17, &qword_202BA0);
    }
    sub_2EF0C((uint64_t)v19, &qword_202BA0);
    char v15 = 0;
    return v15 & 1;
  }
  sub_1ABA30();
  uint64_t v7 = sub_5547C();
  if ((v7 & 1) == 0) {
    goto LABEL_5;
  }
  sub_55848();
  sub_1AB6E0();
LABEL_12:
  swift_release();
  char v15 = isTimeframeToday(from:todayDate:)(v17[0], a2);
  swift_release();
  swift_release();
  sub_2EF0C((uint64_t)v19, &qword_202BA0);
  return v15 & 1;
}

uint64_t getMedStatus(from:)()
{
  uint64_t v0 = sub_1AB750();
  sub_554F0(v0, v1, &qword_202BA0, v2, v3);
  if (!v6[3])
  {
    sub_2EF0C((uint64_t)v6, &qword_202BA0);
    goto LABEL_5;
  }
  sub_1ABA30();
  if ((sub_5547C() & 1) == 0)
  {
LABEL_5:
    sub_2EF0C((uint64_t)v7, &qword_202BA0);
    char v4 = 0;
    return v4 & 1;
  }
  sub_55848();
  sub_1AB6E0();
  swift_release();
  char v4 = getMedStatus(from:)(v6[0]);
  swift_release();
  swift_release();
  sub_2EF0C((uint64_t)v7, &qword_202BA0);
  return v4 & 1;
}

uint64_t isMedicationRequest(from:)()
{
  uint64_t v0 = sub_1AB750();
  sub_554F0(v0, v1, &qword_202BA0, v2, v3);
  if (v46)
  {
    sub_1ABB40();
    uint64_t v4 = sub_55458();
    if (v4) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v4 = sub_2EF0C((uint64_t)v45, &qword_202BA0);
  }
  sub_554F0(v4, v5, &qword_202BA0, v6, v7);
  if (v46)
  {
    sub_1ABA30();
    uint64_t v8 = sub_55458();
    if (v8) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v8 = sub_2EF0C((uint64_t)v45, &qword_202BA0);
  }
  sub_554F0(v8, v9, &qword_202BA0, v10, v11);
  if (v46)
  {
    sub_1ABA40();
    uint64_t v12 = sub_55458();
    if (v12) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v12 = sub_2EF0C((uint64_t)v45, &qword_202BA0);
  }
  sub_554F0(v12, v13, &qword_202BA0, v14, v15);
  if (v46)
  {
    sub_1ABA70();
    uint64_t v16 = sub_55458();
    if (v16) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v16 = sub_2EF0C((uint64_t)v45, &qword_202BA0);
  }
  sub_554F0(v16, v17, &qword_202BA0, v18, v19);
  if (v46)
  {
    sub_1ABA50();
    uint64_t v20 = sub_55458();
    if (v20) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v20 = sub_2EF0C((uint64_t)v45, &qword_202BA0);
  }
  sub_554F0(v20, v21, &qword_202BA0, v22, v23);
  if (v46)
  {
    sub_1ABB50();
    uint64_t v24 = sub_55458();
    if (v24) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v24 = sub_2EF0C((uint64_t)v45, &qword_202BA0);
  }
  sub_554F0(v24, v25, &qword_202BA0, v26, v27);
  if (v46)
  {
    sub_1ABAF0();
    uint64_t v28 = sub_55458();
    if (v28) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v28 = sub_2EF0C((uint64_t)v45, &qword_202BA0);
  }
  sub_554F0(v28, v29, &qword_202BA0, v30, v31);
  if (v46)
  {
    sub_1ABAE0();
    uint64_t v32 = sub_55458();
    if (v32) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v32 = sub_2EF0C((uint64_t)v45, &qword_202BA0);
  }
  sub_554F0(v32, v33, &qword_202BA0, v34, v35);
  if (v46)
  {
    sub_1ABB00();
    uint64_t v36 = sub_55458();
    if (v36) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v36 = sub_2EF0C((uint64_t)v45, &qword_202BA0);
  }
  sub_554F0(v36, v37, &qword_202BA0, v38, v39);
  if (v46)
  {
    sub_1ABAD0();
    uint64_t v40 = sub_55458();
    if (v40) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v40 = sub_2EF0C((uint64_t)v45, &qword_202BA0);
  }
  sub_554F0(v40, v41, &qword_202BA0, v42, v43);
  if (!v46)
  {
    sub_2EF0C((uint64_t)v45, &qword_202BA0);
LABEL_47:
    sub_509E0((uint64_t)v47, (uint64_t)v45);
    if (v46)
    {
      sub_1ABB10();
      if (sub_55458())
      {
        swift_release();
        return 1;
      }
    }
    else
    {
      sub_2EF0C((uint64_t)v45, &qword_202BA0);
    }
    return 0;
  }
  sub_1ABB30();
  if ((sub_55458() & 1) == 0) {
    goto LABEL_47;
  }
LABEL_43:
  swift_release();
  sub_2EF0C((uint64_t)v47, &qword_202BA0);
  return 1;
}

uint64_t isQueryAboutStatusOrSchedule(from:)()
{
  uint64_t v0 = sub_1AB750();
  sub_554F0(v0, v1, &qword_202BA0, v2, v3);
  if (!v11)
  {
    uint64_t v4 = sub_2EF0C((uint64_t)v10, &qword_202BA0);
LABEL_5:
    sub_554F0(v4, v5, &qword_202BA0, v6, v7);
    if (v11)
    {
      sub_1ABA70();
      if (sub_55458())
      {
        sub_55848();
        sub_1AB930();
        goto LABEL_8;
      }
    }
    else
    {
      sub_2EF0C((uint64_t)v10, &qword_202BA0);
    }
    sub_2EF0C((uint64_t)v12, &qword_202BA0);
    char v8 = 0;
    return v8 & 1;
  }
  sub_1ABB40();
  uint64_t v4 = sub_55458();
  if ((v4 & 1) == 0) {
    goto LABEL_5;
  }
  sub_55848();
  sub_1AB820();
LABEL_8:
  swift_release();
  char v8 = hasStatusOrSchedule(from:)(v10[0]);
  swift_release();
  swift_release();
  sub_2EF0C((uint64_t)v12, &qword_202BA0);
  return v8 & 1;
}

uint64_t isLoggingTimeframeNone(from:)()
{
  uint64_t v0 = sub_1AB750();
  sub_554F0(v0, v1, &qword_202BA0, v2, v3);
  if (v16)
  {
    sub_1ABA30();
    uint64_t v4 = sub_55458();
    if (v4)
    {
      sub_555DC();
      sub_55750();
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v4 = sub_2EF0C((uint64_t)v15, &qword_202BA0);
  }
  sub_554F0(v4, v5, &qword_202BA0, v6, v7);
  if (v16)
  {
    sub_1ABB40();
    uint64_t v8 = sub_55458();
    if (v8)
    {
      sub_555DC();
      sub_55908();
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v8 = sub_2EF0C((uint64_t)v15, &qword_202BA0);
  }
  sub_554F0(v8, v9, &qword_202BA0, v10, v11);
  if (!v16)
  {
    sub_2EF0C((uint64_t)v15, &qword_202BA0);
    goto LABEL_19;
  }
  sub_1ABA70();
  if ((sub_55458() & 1) == 0)
  {
LABEL_19:
    sub_2EF0C((uint64_t)v17, &qword_202BA0);
    return 0;
  }
  sub_555DC();
  sub_55920();
LABEL_12:
  swift_release();
  if (!v15[0])
  {
    swift_release();
    goto LABEL_16;
  }
  uint64_t v12 = sub_1AB910();
  swift_release();
  swift_release();
  if (!v12)
  {
LABEL_16:
    uint64_t v13 = 1;
    goto LABEL_17;
  }
  swift_release();
  uint64_t v13 = 0;
LABEL_17:
  sub_2EF0C((uint64_t)v17, &qword_202BA0);
  return v13;
}

uint64_t getLocalizedMedName(from:)()
{
  uint64_t v1 = sub_1AB750();
  sub_554F0(v1, v2, &qword_202BA0, v3, v4);
  if (v19)
  {
    sub_1ABA30();
    uint64_t v5 = sub_55458();
    if (v5)
    {
      sub_555DC();
      sub_55750();
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v5 = sub_2EF0C((uint64_t)v18, &qword_202BA0);
  }
  sub_554F0(v5, v6, &qword_202BA0, v7, v8);
  if (v19)
  {
    sub_1ABB40();
    uint64_t v9 = sub_55458();
    if (v9)
    {
      sub_555DC();
      sub_55908();
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v9 = sub_2EF0C((uint64_t)v18, &qword_202BA0);
  }
  sub_554F0(v9, v10, &qword_202BA0, v11, v12);
  if (!v19)
  {
    sub_2EF0C((uint64_t)v18, &qword_202BA0);
    goto LABEL_22;
  }
  sub_1ABA70();
  if ((sub_55458() & 1) == 0)
  {
LABEL_22:
    uint64_t v15 = 0;
    goto LABEL_23;
  }
  sub_555DC();
  sub_55920();
LABEL_12:
  swift_release();
  if (!v18[0]) {
    goto LABEL_18;
  }
  sub_1AB900();
  sub_55634();
  if (!v0) {
    goto LABEL_18;
  }
  sub_1AB9A0();
  sub_5552C();
  sub_557B8();
  if (v14)
  {
    sub_556A4();
    sub_1AD170();
    sub_55818();
  }
  else if (!*(void *)(v13 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  sub_555BC();
  sub_557DC();
  swift_bridgeObjectRelease();
  sub_55830();
  swift_release();
  if (!v17)
  {
LABEL_18:
    swift_release();
    goto LABEL_22;
  }
  swift_retain();
  uint64_t v15 = sub_1AB830();
  swift_release();
  swift_release_n();
LABEL_23:
  sub_2EF0C((uint64_t)v20, &qword_202BA0);
  return v15;
}

uint64_t getUSOMedNames(from:)()
{
  uint64_t v1 = sub_1AB750();
  sub_554F0(v1, v2, &qword_202BA0, v3, v4);
  if (v19)
  {
    sub_1ABA30();
    uint64_t v5 = sub_55458();
    if (v5)
    {
      sub_555DC();
      sub_55750();
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v5 = sub_2EF0C((uint64_t)v18, &qword_202BA0);
  }
  sub_554F0(v5, v6, &qword_202BA0, v7, v8);
  if (v19)
  {
    sub_1ABB40();
    uint64_t v9 = sub_55458();
    if (v9)
    {
      sub_555DC();
      sub_55908();
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v9 = sub_2EF0C((uint64_t)v18, &qword_202BA0);
  }
  sub_554F0(v9, v10, &qword_202BA0, v11, v12);
  if (!v19)
  {
    sub_2EF0C((uint64_t)v18, &qword_202BA0);
    goto LABEL_20;
  }
  sub_1ABA70();
  if ((sub_55458() & 1) == 0)
  {
LABEL_20:
    uint64_t v13 = 0;
    goto LABEL_21;
  }
  sub_555DC();
  sub_55920();
LABEL_12:
  swift_release();
  uint64_t v13 = v18[0];
  if (v18[0])
  {
    sub_1AB900();
    sub_55634();
    if (v0)
    {
      uint64_t v13 = v0;
      sub_1AB9A0();
      sub_5552C();
      sub_557B8();
      if (v15)
      {
        sub_556A4();
        sub_1AD170();
        sub_55818();
      }
      else
      {
        uint64_t v0 = *(void *)(v14 + 16);
        if (!v0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_18;
        }
      }
      sub_555BC();
      sub_557DC();
      swift_bridgeObjectRelease();
      sub_55830();
      swift_release();
      uint64_t v0 = v17;
    }
  }
  else
  {
    uint64_t v0 = 0;
  }
LABEL_18:
  getUsoMedNames(from:)(v0);
  sub_55890();
  swift_release();
LABEL_21:
  sub_2EF0C((uint64_t)v20, &qword_202BA0);
  return v13;
}

uint64_t getMedSchedule(from:)()
{
  uint64_t v0 = sub_1AB750();
  sub_554F0(v0, v1, &qword_202BA0, v2, v3);
  if (!v16)
  {
    uint64_t v4 = sub_2EF0C((uint64_t)v15, &qword_202BA0);
LABEL_5:
    sub_554F0(v4, v5, &qword_202BA0, v6, v7);
    if (v16)
    {
      sub_1ABB40();
      uint64_t v8 = sub_55458();
      if (v8)
      {
        swift_retain();
        sub_1AB820();
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v8 = sub_2EF0C((uint64_t)v15, &qword_202BA0);
    }
    sub_554F0(v8, v9, &qword_202BA0, v10, v11);
    if (v16)
    {
      sub_1ABA70();
      if (sub_55458())
      {
        swift_retain();
        sub_1AB930();
        goto LABEL_12;
      }
    }
    else
    {
      sub_2EF0C((uint64_t)v15, &qword_202BA0);
    }
    uint64_t v13 = 0;
    goto LABEL_18;
  }
  sub_1ABA30();
  uint64_t v4 = sub_55458();
  if ((v4 & 1) == 0) {
    goto LABEL_5;
  }
  swift_retain();
  sub_1AB6E0();
LABEL_12:
  swift_release();
  if (v15[0])
  {
    uint64_t v12 = v15[0];
    sub_1AB900();
    sub_55890();
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = getMedScheduleDateTime(from:)(v12);
  swift_release();
  swift_release();
LABEL_18:
  sub_2EF0C((uint64_t)v17, &qword_202BA0);
  return v13;
}

void getMedScheduleWithDefinedValues(from:deviceState:)()
{
  sub_A638();
  uint64_t v327 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = sub_2694(&qword_203250);
  uint64_t v6 = sub_53D4(v5);
  __chkstk_darwin(v6);
  sub_53E0();
  sub_55680(v7);
  uint64_t v323 = (void (*)(uint64_t, uint64_t, char *))sub_1AB8A0();
  sub_52C4();
  uint64_t v309 = v8;
  __chkstk_darwin(v9);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v10);
  sub_559A0();
  sub_55680(v11);
  sub_1AC800();
  sub_52C4();
  uint64_t v330 = v13;
  uint64_t v331 = v12;
  __chkstk_darwin(v12);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v14);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v15);
  sub_2073C();
  uint64_t v329 = v16;
  __chkstk_darwin(v17);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v18);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v19);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v20);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v21);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v22);
  sub_559A0();
  sub_55680(v23);
  uint64_t v328 = sub_1AAA10();
  sub_52C4();
  uint64_t v315 = v24;
  __chkstk_darwin(v25);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v26);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v27);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v28);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v29);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v30);
  sub_559A0();
  sub_55680(v31);
  sub_1AABD0();
  sub_52C4();
  uint64_t v325 = v32;
  uint64_t v326 = v33;
  __chkstk_darwin(v32);
  sub_53E0();
  uint64_t v324 = v34;
  uint64_t v35 = sub_2694(&qword_201CC8);
  uint64_t v36 = sub_53D4(v35);
  __chkstk_darwin(v36);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v37);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v38);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v39);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v40);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v41);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v42);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v43);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v44);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v45);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v46);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v47);
  sub_559A0();
  sub_55680(v48);
  uint64_t v318 = sub_1ABD20();
  sub_52C4();
  uint64_t v319 = v49;
  __chkstk_darwin(v50);
  sub_53E0();
  sub_55680(v51);
  uint64_t v316 = sub_1ABC80();
  sub_52C4();
  uint64_t v317 = v52;
  __chkstk_darwin(v53);
  sub_53E0();
  sub_55680(v54);
  uint64_t v55 = sub_1AB660();
  sub_52C4();
  uint64_t v57 = v56;
  __chkstk_darwin(v58);
  sub_55784();
  uint64_t v59 = sub_2694(&qword_203258);
  sub_20688();
  __chkstk_darwin(v60);
  sub_47EB8();
  uint64_t v61 = sub_2694(&qword_203260);
  uint64_t v62 = sub_53D4(v61);
  __chkstk_darwin(v62);
  sub_A314();
  uint64_t v65 = v63 - v64;
  uint64_t v67 = __chkstk_darwin(v66);
  os_log_type_t v69 = (char *)&v294 - v68;
  __chkstk_darwin(v67);
  unint64_t v71 = (char *)&v294 - v70;
  sub_1AB750();
  sub_553FC((uint64_t)&v338, (uint64_t)&v333, &qword_202BA0);
  if (!v335[1])
  {
    sub_2EF0C((uint64_t)&v333, &qword_202BA0);
    goto LABEL_106;
  }
  sub_1ABA30();
  if ((sub_55A04() & 1) == 0)
  {
LABEL_106:
    sub_2EF0C((uint64_t)&v338, &qword_202BA0);
    sub_2694(&qword_203268);
    sub_55948();
    goto LABEL_107;
  }
  uint64_t v294 = v4;
  uint64_t v72 = v337;
  swift_retain();
  sub_1AB6E0();
  uint64_t v295 = v72;
  swift_release();
  uint64_t v73 = v333;
  if (!v333) {
    goto LABEL_18;
  }
  uint64_t v74 = sub_1AB900();
  swift_release();
  if (!v74) {
    goto LABEL_18;
  }
  uint64_t v73 = sub_1AB9C0();
  swift_release();
  if (!v73) {
    goto LABEL_18;
  }
  uint64_t v75 = sub_1AB990();
  swift_release();
  if (!v75) {
    goto LABEL_18;
  }
  sub_557B8();
  if (!v77)
  {
    uint64_t v73 = *(void *)(v76 + 16);
    if (v73) {
      goto LABEL_9;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v73 = sub_1AD170();
  swift_bridgeObjectRelease();
  if (!v73) {
    goto LABEL_17;
  }
LABEL_9:
  sub_4AA30(0, (v75 & 0xC000000000000001) == 0, v75);
  if ((v75 & 0xC000000000000001) != 0) {
    sub_557DC();
  }
  else {
    swift_retain();
  }
  swift_bridgeObjectRelease();
  sub_1AB600();
  swift_release();
  uint64_t v73 = v337;
  if (v337)
  {
    uint64_t v78 = sub_1AB7B0();
    swift_release();
    if (v78)
    {
      sub_1AB650();
      swift_release();
      goto LABEL_19;
    }
  }
LABEL_18:
  sub_55948();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v79, v80, v81, v55);
LABEL_19:
  (*(void (**)(char *, void, uint64_t))(v57 + 104))(v69, enum case for UsoEntity_common_Date.DefinedValues.common_Date_Today(_:), v55);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v69, 0, 1, v55);
  uint64_t v82 = v0 + *(int *)(v59 + 48);
  uint64_t v83 = &qword_203260;
  sub_553FC((uint64_t)v71, v0, &qword_203260);
  sub_553FC((uint64_t)v69, v82, &qword_203260);
  sub_A208(v0, 1, v55);
  if (v84)
  {
    sub_559AC();
    sub_2EF0C((uint64_t)v71, &qword_203260);
    sub_A208(v82, 1, v55);
    if (v84)
    {
      sub_2EF0C(v0, &qword_203260);
      sub_55938();
LABEL_29:
      uint64_t v87 = sub_554C4();
      v88(v87);
      sub_1ABCA0();
      sub_47658();
      uint64_t v89 = sub_558A8();
      uint64_t v90 = sub_55498();
      v91(v90);
      sub_1ABD60();
      sub_47658();
      sub_558D8();
      sub_558C0();
      sub_47658();
      sub_5564C();
      sub_55768();
      sub_558F0();
      uint64_t v92 = v313;
      sub_1713D0(v313, v89, 1, v0, v93, v94, v95, v96, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304,
        v305);
      uint64_t v97 = sub_5556C();
      v98(v97);
      sub_55360((uint64_t)&v333);
      sub_55878(v92, &qword_201CC8, (uint64_t)&v339);
      sub_55544();
      if (!v84)
      {
        sub_5566C();
        uint64_t v140 = v311;
        sub_55690();
        v141();
        uint64_t v142 = sub_2694(&qword_203270);
        uint64_t v143 = v294;
        uint64_t v144 = v294 + *(int *)(v142 + 48);
        uint64_t v145 = v140;
        sub_1AA9F0();
        sub_1AA9C0();
        sub_556C0(v143);
        sub_2694(&qword_203268);
        sub_5570C();
        swift_release();
        ((void (*)(uint64_t *, uint64_t *))v83[1])(v140, &v333);
        sub_2EF0C(v92, &qword_201CC8);
        sub_2EF0C((uint64_t)&v338, &qword_202BA0);
        *(_OWORD *)(v143 + v142) = xmmword_1B0630;
        *(unsigned char *)(v143 + v144) = 1;
        uint64_t v146 = v143;
LABEL_47:
        uint64_t v147 = 0;
        uint64_t v148 = 1;
        uint64_t v149 = (uint64_t)v145;
LABEL_107:
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v146, v147, v148, v149);
        goto LABEL_108;
      }
      sub_2EF0C(v0, &qword_201CC8);
      sub_1AC7D0();
      sub_55584();
      sub_557F4();
      uint64_t v99 = sub_555A0();
      v100(v99);
      uint64_t v101 = (void *)sub_1AC7F0();
      os_log_type_t v102 = sub_1ACF50();
      if (sub_470C8(v102))
      {
        uint64_t v103 = (_WORD *)sub_292A0();
        sub_478E4(v103);
        sub_47358(&def_342E4, v104, v105, "failed to resolve dateTime in getMedScheduleWithDefinedValues, return nil");
        sub_A1F0();
      }

      swift_release();
      swift_release();
      sub_556DC();
      v106();
      uint64_t v107 = v92;
LABEL_105:
      sub_2EF0C(v107, &qword_201CC8);
      goto LABEL_106;
    }
    goto LABEL_27;
  }
  sub_553FC(v0, v65, &qword_203260);
  sub_A208(v82, 1, v55);
  if (v84)
  {
    sub_2EF0C((uint64_t)v69, &qword_203260);
    sub_2EF0C((uint64_t)v71, &qword_203260);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v65, v55);
LABEL_27:
    sub_2EF0C(v0, &qword_203258);
    sub_55938();
    goto LABEL_34;
  }
  sub_5572C();
  v85();
  sub_553B4(&qword_203280, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_Date.DefinedValues);
  char v86 = sub_1ACDB0();
  uint64_t v83 = *(uint64_t **)(v57 + 8);
  ((void (*)(uint64_t, uint64_t))v83)(v1, v55);
  sub_559AC();
  sub_2EF0C((uint64_t)v71, &qword_203260);
  ((void (*)(uint64_t, uint64_t))v83)(v65, v55);
  sub_2EF0C(v0, &qword_203260);
  sub_55938();
  if (v86) {
    goto LABEL_29;
  }
LABEL_34:
  swift_retain();
  sub_1AB6E0();
  swift_release();
  uint64_t v108 = (uint64_t)v323;
  uint64_t v109 = v322;
  if (!v333) {
    goto LABEL_49;
  }
  sub_1AB900();
  sub_55890();
  sub_1AB9C0();
  sub_55634();
  if (!v0) {
    goto LABEL_49;
  }
  unint64_t v110 = sub_1AB990();
  swift_release();
  if (!v110) {
    goto LABEL_49;
  }
  if (v110 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v111 = sub_1AD170();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v111 = *(void *)((char *)&dword_10 + (v110 & 0xFFFFFFFFFFFFFF8));
  }
  uint64_t v112 = v310;
  if (!v111)
  {
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  sub_559C4();
  sub_1AD0A0();
  swift_bridgeObjectRelease();
  sub_1AB600();
  swift_release();
  if (!v337)
  {
LABEL_49:
    sub_55948();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v150, v151, v152, v108);
    goto LABEL_50;
  }
  sub_1AB780();
  sub_55890();
  sub_1AB890();
  swift_release();
  sub_A208(v109, 1, v108);
  if (v84)
  {
LABEL_50:
    sub_2EF0C(v109, &qword_203250);
    swift_retain();
    sub_1AB6E0();
    swift_release();
    if (!v333) {
      goto LABEL_84;
    }
    sub_1AB900();
    sub_55890();
    sub_1AB9C0();
    sub_55634();
    if (!v0) {
      goto LABEL_84;
    }
    unint64_t v153 = sub_1AB990();
    swift_release();
    if (!v153) {
      goto LABEL_84;
    }
    if (v153 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v254 = sub_1AD170();
      swift_bridgeObjectRelease();
      if (v254)
      {
LABEL_55:
        sub_559C4();
        sub_1AD0A0();
        swift_bridgeObjectRelease();
        sub_1AB600();
        swift_release();
        if (v337)
        {
          uint64_t v154 = sub_1AB770();
          swift_release();
          goto LABEL_85;
        }
LABEL_84:
        uint64_t v154 = 0;
LABEL_85:
        uint64_t v255 = v329;
        swift_retain();
        sub_1AB6E0();
        swift_release();
        uint64_t v256 = v333;
        if (v333)
        {
          sub_1AB900();
          sub_5552C();
          sub_1AB9C0();
          sub_55634();
          sub_1AB990();
          sub_5552C();
          sub_557B8();
          if (v258)
          {
            sub_556A4();
            sub_1AD170();
            sub_55818();
            goto LABEL_88;
          }
          if (*(void *)(v257 + 16))
          {
LABEL_88:
            sub_4AA30(0, (v256 & 0xC000000000000001) == 0, v256);
            if ((v256 & 0xC000000000000001) != 0) {
              sub_557DC();
            }
            else {
              sub_55800();
            }
            swift_bridgeObjectRelease();
            sub_1AB600();
            swift_release();
            swift_release();
            goto LABEL_93;
          }
          swift_bridgeObjectRelease();
        }
LABEL_93:
        if (!v154)
        {
          sub_1AC7D0();
          sub_55584();
          sub_557F4();
          sub_55624();
          v269();
          uint64_t v270 = sub_1AC7F0();
          os_log_type_t v271 = sub_1ACF50();
          if (os_log_type_enabled(v270, v271))
          {
            *(_WORD *)sub_292A0() = 0;
            sub_55980(&def_342E4, v272, v273, "failed to resolve dateTime with meridien in getMedScheduleWithDefinedValues, return nil");
            sub_A1F0();
          }
          swift_release();

          sub_556DC();
          v274();
          goto LABEL_106;
        }
        swift_retain();
        uint64_t v259 = sub_1AC7D0();
        sub_A340();
        uint64_t v323 = *(void (**)(uint64_t, uint64_t, char *))(v55 + 16);
        v323(v255, v259, v69);
        swift_retain_n();
        uint64_t v260 = sub_1AC7F0();
        os_log_type_t v261 = sub_1ACF50();
        if (os_log_type_enabled(v260, v261))
        {
          uint64_t v262 = (uint8_t *)swift_slowAlloc();
          uint64_t v263 = swift_slowAlloc();
          uint64_t v332 = v154;
          uint64_t v333 = v263;
          *(_DWORD *)uint64_t v262 = 136315138;
          uint64_t v322 = v259;
          sub_1ABDF0();
          sub_553B4(&qword_203278, (void (*)(uint64_t))&type metadata accessor for DateTime);
          uint64_t v264 = sub_1AD2C0();
          uint64_t v266 = sub_4A278(v264, v265, &v333);
          sub_559F0(v266);
          uint64_t v259 = v322;
          uint64_t v267 = v330;
          sub_1ACFE0();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&def_342E4, v260, v261, "here's the datetime: %s", v262, 0xCu);
          swift_arrayDestroy();
          os_log_type_t v69 = v331;
          sub_A1F0();
          sub_A1F0();

          uint64_t v268 = *(void (**)(uint64_t, char *))(v267 + 8);
          v268(v329, v69);
        }
        else
        {

          swift_release_n();
          uint64_t v268 = *(void (**)(uint64_t, char *))(v55 + 8);
          v268(v255, v69);
        }
        sub_E3FC(v327, (uint64_t)&v333);
        uint64_t v275 = v324;
        sub_1AABC0();
        uint64_t v276 = v321;
        sub_1713D0(v321, v154, 1, v275, v277, v278, v279, v280, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304,
          v305);
        (*(void (**)(uint64_t, uint64_t))(v326 + 8))(v275, v325);
        sub_55360((uint64_t)&v333);
        uint64_t v281 = v314;
        sub_553FC(v276, v314, &qword_201CC8);
        sub_A208(v281, 1, v328);
        if (!v84)
        {
          sub_5572C();
          v288();
          uint64_t v289 = sub_2694(&qword_203268);
          uint64_t v290 = v294;
          uint64_t v291 = (void *)(v294 + *(int *)(v289 + 48));
          uint64_t v331 = (char *)*(int *)(v289 + 64);
          uint64_t v292 = sub_2694(&qword_203270);
          sub_1AA9F0();
          sub_1AA9C0();
          swift_release();
          swift_release_n();
          sub_556DC();
          v293();
          sub_2EF0C(v321, &qword_201CC8);
          sub_2EF0C((uint64_t)&v338, &qword_202BA0);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v290, 0, 1, v292);
          void *v291 = 0;
          v291[1] = 0;
          v331[v290] = 0;
          uint64_t v146 = v290;
          uint64_t v147 = 0;
          uint64_t v148 = 1;
          uint64_t v149 = v289;
          goto LABEL_107;
        }
        sub_2EF0C(v281, &qword_201CC8);
        sub_A340();
        uint64_t v282 = v312;
        v323(v312, v259, v69);
        uint64_t v283 = (void *)sub_1AC7F0();
        os_log_type_t v284 = sub_1ACF50();
        if (sub_470C8(v284))
        {
          uint64_t v285 = (_WORD *)sub_292A0();
          sub_478E4(v285);
          sub_47358(&def_342E4, v286, v287, "failed to resolve dateInterval with meridien in getMedScheduleWithDefinedValues, return nil");
          uint64_t v282 = v312;
          sub_A1F0();
        }
        swift_release();
        swift_release_n();

        v268(v282, v69);
        uint64_t v107 = v276;
        goto LABEL_105;
      }
    }
    else if (*(void *)((char *)&dword_10 + (v153 & 0xFFFFFFFFFFFFFF8)))
    {
      goto LABEL_55;
    }
    swift_bridgeObjectRelease();
    goto LABEL_84;
  }
  uint64_t v113 = v309;
  sub_5572C();
  v114();
  sub_559E4();
  uint64_t v115 = v308;
  sub_E524();
  v116();
  int v117 = (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 88))(v115, v108);
  if (v117 == enum case for UsoEntity_common_DateTimeRange.DefinedValues.common_DateTimeRange_Afternoon(_:))
  {
    uint64_t v118 = sub_554C4();
    v119(v118);
    sub_1ABCA0();
    sub_47658();
    sub_558A8();
    uint64_t v120 = sub_55498();
    v121(v120);
    sub_1ABD60();
    sub_47658();
    sub_558D8();
    sub_558C0();
    sub_47658();
    sub_5564C();
    sub_55768();
    uint64_t v122 = sub_558F0();
    uint64_t v145 = &v333;
    uint64_t v112 = v307;
    sub_556EC(v122, v123, v124, v125, v126, v127, v128, v129, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304,
      v305);
    uint64_t v130 = sub_5556C();
    v131(v130);
    sub_55360((uint64_t)&v333);
    sub_55878(v112, &qword_201CC8, (uint64_t)&v332);
    sub_55544();
    if (!v84)
    {
      sub_5566C();
      sub_55690();
      v175();
      sub_2694(&qword_203270);
      sub_555F4();
      sub_1AA9C0();
      sub_556C0(v73);
      sub_2694(&qword_203268);
      sub_5570C();
      swift_release();
      uint64_t v176 = sub_55738();
      v177(v176);
      sub_2EF0C(v307, &qword_201CC8);
      uint64_t v178 = sub_55508();
      v179(v178);
      sub_2EF0C((uint64_t)&v338, &qword_202BA0);
      long long v180 = xmmword_1B0620;
LABEL_79:
      *(_OWORD *)(v73 + v115) = v180;
      *(unsigned char *)(v73 + v112) = 1;
      uint64_t v146 = v73;
      goto LABEL_47;
    }
    sub_2EF0C(v115, &qword_201CC8);
    sub_1AC7D0();
    sub_55584();
    sub_557F4();
    uint64_t v132 = sub_555A0();
    v133(v132);
    uint64_t v134 = (void *)sub_1AC7F0();
    os_log_type_t v135 = sub_1ACF50();
    if (!sub_470C8(v135)) {
      goto LABEL_68;
    }
    BOOL v136 = (_WORD *)sub_292A0();
    sub_478E4(v136);
    sub_47358(&def_342E4, v137, v138, "failed to resolve dateTime in getMedScheduleWithDefinedValues, return nil");
    uint64_t v139 = &v333;
    goto LABEL_67;
  }
  if (v117 == enum case for UsoEntity_common_DateTimeRange.DefinedValues.common_DateTimeRange_Night(_:))
  {
    uint64_t v155 = sub_554C4();
    v156(v155);
    sub_1ABCA0();
    sub_47658();
    sub_558A8();
    uint64_t v157 = sub_55498();
    v158(v157);
    sub_1ABD60();
    sub_47658();
    sub_558D8();
    sub_558C0();
    sub_47658();
    sub_5564C();
    sub_55768();
    uint64_t v159 = sub_558F0();
    uint64_t v145 = &v333;
    sub_556EC(v159, v160, v161, v162, v163, v164, v165, v166, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304,
      v305);
    uint64_t v167 = sub_5556C();
    v168(v167);
    sub_55360((uint64_t)&v333);
    sub_55878(v112, &qword_201CC8, (uint64_t)&v329);
    sub_55544();
    if (!v84)
    {
      sub_5566C();
      sub_55690();
      v205();
      sub_2694(&qword_203270);
      sub_555F4();
      sub_1AA9C0();
      sub_556C0(v73);
      sub_2694(&qword_203268);
      sub_5570C();
      swift_release();
      uint64_t v206 = sub_55738();
      v207(v206);
      sub_2EF0C(v310, &qword_201CC8);
      uint64_t v208 = sub_55508();
      v209(v208);
      sub_2EF0C((uint64_t)&v338, &qword_202BA0);
      long long v180 = xmmword_1B0610;
      goto LABEL_79;
    }
    sub_2EF0C(v115, &qword_201CC8);
    sub_1AC7D0();
    sub_55584();
    sub_557F4();
    uint64_t v169 = sub_555A0();
    v170(v169);
    uint64_t v134 = (void *)sub_1AC7F0();
    os_log_type_t v171 = sub_1ACF50();
    if (!sub_470C8(v171)) {
      goto LABEL_68;
    }
    uint64_t v172 = (_WORD *)sub_292A0();
    sub_478E4(v172);
    sub_47358(&def_342E4, v173, v174, "failed to resolve dateTime in getMedScheduleWithDefinedValues, return nil");
    uint64_t v139 = &v336;
    goto LABEL_67;
  }
  if (v117 == enum case for UsoEntity_common_DateTimeRange.DefinedValues.common_DateTimeRange_Evening(_:))
  {
    uint64_t v181 = sub_554C4();
    v182(v181);
    sub_1ABCA0();
    sub_47658();
    sub_558A8();
    uint64_t v183 = sub_55498();
    v184(v183);
    sub_1ABD60();
    sub_47658();
    sub_558D8();
    sub_558C0();
    sub_47658();
    sub_5564C();
    sub_55768();
    uint64_t v185 = sub_558F0();
    uint64_t v145 = &v333;
    uint64_t v112 = v306;
    sub_556EC(v185, v186, v187, v188, v189, v190, v191, v192, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304,
      v305);
    uint64_t v193 = sub_5556C();
    v194(v193);
    sub_55360((uint64_t)&v333);
    sub_55878(v112, &qword_201CC8, (uint64_t)&v325);
    sub_55544();
    if (!v84)
    {
      sub_5566C();
      sub_55690();
      v232();
      sub_2694(&qword_203270);
      sub_555F4();
      sub_1AA9C0();
      sub_556C0(v73);
      sub_2694(&qword_203268);
      sub_5570C();
      swift_release();
      uint64_t v233 = sub_55738();
      v234(v233);
      sub_2EF0C(v306, &qword_201CC8);
      uint64_t v235 = sub_55508();
      v236(v235);
      sub_2EF0C((uint64_t)&v338, &qword_202BA0);
      long long v180 = xmmword_1B0600;
      goto LABEL_79;
    }
    sub_2EF0C(v115, &qword_201CC8);
    sub_1AC7D0();
    sub_55584();
    sub_557F4();
    uint64_t v195 = sub_555A0();
    v196(v195);
    uint64_t v134 = (void *)sub_1AC7F0();
    os_log_type_t v197 = sub_1ACF50();
    if (!sub_470C8(v197)) {
      goto LABEL_68;
    }
    uint64_t v198 = (_WORD *)sub_292A0();
    sub_478E4(v198);
    sub_47358(&def_342E4, v199, v200, "failed to resolve dateTime in getMedScheduleWithDefinedValues, return nil");
    uint64_t v139 = &v328;
LABEL_67:
    uint64_t v112 = *(v139 - 32);
    sub_A1F0();
LABEL_68:

    swift_release();
    swift_release();
    sub_556DC();
    v201();
    uint64_t v202 = v112;
LABEL_69:
    sub_2EF0C(v202, &qword_201CC8);
    uint64_t v203 = sub_55508();
    v204(v203);
    goto LABEL_106;
  }
  if (v117 == enum case for UsoEntity_common_DateTimeRange.DefinedValues.common_DateTimeRange_Morning(_:))
  {
    uint64_t v210 = sub_554C4();
    v211(v210);
    sub_1ABCA0();
    sub_47658();
    sub_558A8();
    uint64_t v212 = sub_55498();
    v213(v212);
    sub_1ABD60();
    sub_47658();
    sub_558D8();
    sub_558C0();
    sub_47658();
    sub_5564C();
    sub_55768();
    uint64_t v214 = sub_558F0();
    uint64_t v215 = v302;
    sub_556EC(v214, v216, v217, v218, v219, v220, v221, v222, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304,
      v305);
    uint64_t v223 = sub_5556C();
    v224(v223);
    sub_55360((uint64_t)&v333);
    sub_55878(v215, &qword_201CC8, (uint64_t)&v320);
    sub_55544();
    if (!v84)
    {
      sub_5566C();
      uint64_t v250 = v296;
      sub_55690();
      v251();
      sub_2694(&qword_203270);
      uint64_t v73 = v294;
      sub_1AA9F0();
      sub_1AA9C0();
      sub_556C0(v73);
      uint64_t v145 = (uint64_t *)sub_2694(&qword_203268);
      uint64_t v115 = *((int *)v145 + 12);
      uint64_t v112 = *((int *)v145 + 16);
      swift_release();
      swift_release();
      ((void (*)(uint64_t, uint64_t *))v83[1])(v250, &v333);
      sub_2EF0C(v302, &qword_201CC8);
      uint64_t v252 = sub_55508();
      v253(v252);
      sub_2EF0C((uint64_t)&v338, &qword_202BA0);
      long long v180 = xmmword_1B05F0;
      goto LABEL_79;
    }
    sub_2EF0C(v115, &qword_201CC8);
    sub_1AC7D0();
    sub_55584();
    sub_557F4();
    sub_55624();
    v225();
    uint64_t v226 = (void *)sub_1AC7F0();
    os_log_type_t v227 = sub_1ACF50();
    if (sub_470C8(v227))
    {
      uint64_t v228 = (_WORD *)sub_292A0();
      sub_478E4(v228);
      sub_47358(&def_342E4, v229, v230, "failed to resolve dateTime in getMedScheduleWithDefinedValues, return nil");
      sub_A1F0();
    }

    swift_release();
    swift_release();
    sub_556DC();
    v231();
    uint64_t v202 = v302;
    goto LABEL_69;
  }
  sub_1AC7D0();
  sub_55584();
  sub_557F4();
  sub_55624();
  v237();
  uint64_t v238 = sub_1AC7F0();
  os_log_type_t v239 = sub_1ACF50();
  if (os_log_type_enabled(v238, v239))
  {
    *(_WORD *)sub_292A0() = 0;
    sub_55980(&def_342E4, v240, v241, "getMedScheduleWithDefinedValues got a definedValue that is not handled, return nil");
    sub_A1F0();
  }
  swift_release();

  sub_556DC();
  v242();
  uint64_t v243 = *(void (**)(uint64_t))(v309 + 8);
  uint64_t v244 = sub_5596C((uint64_t)v335);
  v243(v244);
  sub_2EF0C((uint64_t)&v338, &qword_202BA0);
  sub_2694(&qword_203268);
  sub_55948();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v245, v246, v247, v248);
  uint64_t v249 = sub_5596C((uint64_t)&v334);
  v243(v249);
LABEL_108:
  sub_A56C();
}

void getMedEventDate(from:deviceState:)()
{
  sub_A638();
  uint64_t v49 = v1;
  uint64_t v3 = v2;
  uint64_t v4 = sub_1AABD0();
  sub_52C4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_55784();
  uint64_t v8 = sub_1AC800();
  sub_52C4();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_A314();
  uint64_t v14 = v12 - v13;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v42 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v42 - v19;
  sub_1AB750();
  sub_553FC((uint64_t)v52, (uint64_t)v51, &qword_202BA0);
  if (!v51[3])
  {
    sub_2EF0C((uint64_t)v51, &qword_202BA0);
    goto LABEL_8;
  }
  sub_1ABA30();
  if ((sub_55A04() & 1) == 0)
  {
LABEL_8:
    sub_1AC7D0();
    sub_55584();
    sub_559E4();
    sub_E524();
    v32();
    uint64_t v33 = sub_1AC7F0();
    os_log_type_t v34 = sub_1ACF50();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)sub_292A0();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&def_342E4, v33, v34, "couldn't convert to task to common_MedicationEvent in getMedEventDate, returning nil", v35, 2u);
      sub_A1F0();
    }

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
    goto LABEL_14;
  }
  uint64_t v48 = v3;
  swift_retain();
  sub_1AB6E0();
  swift_release();
  if (!v51[0] || (uint64_t v21 = sub_1AB910(), swift_release(), !v21))
  {
    sub_1AC7D0();
    sub_55584();
    sub_559E4();
    sub_E524();
    v36();
    uint64_t v37 = sub_1AC7F0();
    os_log_type_t v38 = sub_1ACF50();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v3 = v48;
    if (v39)
    {
      uint64_t v40 = (uint8_t *)sub_292A0();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&def_342E4, v37, v38, "couldn't convert to dateTime in getMedEventDate, returning nil", v40, 2u);
      sub_A1F0();
    }
    swift_release();

    (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v8);
LABEL_14:
    sub_2EF0C((uint64_t)v52, &qword_202BA0);
    uint64_t v41 = 1;
    goto LABEL_15;
  }
  uint64_t v22 = sub_1AB770();
  swift_release();
  sub_1AC7D0();
  sub_A340();
  sub_559E4();
  sub_E524();
  v23();
  swift_retain_n();
  uint64_t v24 = sub_1AC7F0();
  os_log_type_t v25 = sub_1ACF50();
  int v26 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v47 = v24;
    uint64_t v27 = swift_slowAlloc();
    int v45 = v26;
    uint64_t v28 = (uint8_t *)v27;
    uint64_t v44 = swift_slowAlloc();
    uint64_t v50 = v22;
    v51[0] = v44;
    uint64_t v43 = v28;
    *(_DWORD *)uint64_t v28 = 136315138;
    uint64_t v42 = v28 + 4;
    sub_1ABDF0();
    uint64_t v46 = v22;
    sub_553B4(&qword_203278, (void (*)(uint64_t))&type metadata accessor for DateTime);
    uint64_t v29 = sub_1AD2C0();
    uint64_t v31 = sub_4A278(v29, v30, v51);
    sub_559F0(v31);
    sub_1ACFE0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v47, (os_log_type_t)v45, "here's the datetime: %s", v43, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v20, v8);
  uint64_t v3 = v48;
  sub_E3FC(v49, (uint64_t)v51);
  sub_1AABC0();
  sub_171E3C();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v4);
  sub_55360((uint64_t)v51);
  sub_2EF0C((uint64_t)v52, &qword_202BA0);
  uint64_t v41 = 0;
LABEL_15:
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, v41, 1, v4);
  sub_A56C();
}

uint64_t hasDosageEdit(from:)()
{
  uint64_t v1 = sub_1AB750();
  sub_554F0(v1, v2, &qword_202BA0, v3, v4);
  if (!v11[3])
  {
    sub_2EF0C((uint64_t)v11, &qword_202BA0);
    goto LABEL_12;
  }
  sub_1ABA30();
  if ((sub_5547C() & 1) == 0) {
    goto LABEL_12;
  }
  sub_555DC();
  sub_55750();
  swift_release();
  if (!v11[0]) {
    goto LABEL_11;
  }
  sub_1AB900();
  sub_55634();
  if (!v0) {
    goto LABEL_11;
  }
  sub_1AB9A0();
  sub_5552C();
  sub_557B8();
  if (v6)
  {
    sub_556A4();
    sub_1AD170();
    sub_55818();
  }
  else if (!*(void *)(v5 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  sub_555BC();
  sub_557DC();
  swift_bridgeObjectRelease();
  sub_55830();
  swift_release();
  if (!v10)
  {
LABEL_11:
    swift_release();
    goto LABEL_12;
  }
  swift_retain();
  uint64_t v7 = sub_1AB840();
  swift_release();
  swift_release_n();
  if (!v7)
  {
LABEL_12:
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  swift_release();
  uint64_t v8 = 1;
LABEL_13:
  sub_2EF0C((uint64_t)v12, &qword_202BA0);
  return v8;
}

void hasDateEdit(from:)()
{
  sub_A638();
  uint64_t v1 = sub_1AB7A0();
  sub_52C4();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_55784();
  uint64_t v5 = sub_2694(&qword_203288);
  sub_20688();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2694(&qword_203290);
  uint64_t v10 = sub_53D4(v9);
  __chkstk_darwin(v10);
  sub_A314();
  uint64_t v13 = v11 - v12;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v52 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v52 - v18;
  sub_1AB750();
  sub_553FC((uint64_t)v55, (uint64_t)v54, &qword_202BA0);
  if (!v54[3])
  {
    sub_2EF0C((uint64_t)v54, &qword_202BA0);
    goto LABEL_7;
  }
  sub_1ABA30();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    sub_2EF0C((uint64_t)v55, &qword_202BA0);
    goto LABEL_8;
  }
  uint64_t v53 = v3;
  swift_retain();
  sub_1AB6E0();
  swift_release();
  if (v54[0] && (uint64_t v20 = sub_1AB910(), swift_release(), v20))
  {
    sub_1AB790();
    swift_release();
  }
  else
  {
    sub_55948();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v21, v22, v23, v1);
  }
  uint64_t v24 = v53;
  (*(void (**)(char *, void, uint64_t))(v53 + 104))(v17, enum case for UsoEntity_common_DateTime.DefinedValues.common_DateTime_Now(_:), v1);
  sub_556C0((uint64_t)v17);
  uint64_t v25 = (uint64_t)&v8[*(int *)(v5 + 48)];
  sub_553FC((uint64_t)v19, (uint64_t)v8, &qword_203290);
  sub_553FC((uint64_t)v17, v25, &qword_203290);
  sub_A208((uint64_t)v8, 1, v1);
  if (v26)
  {
    uint64_t v0 = &qword_203290;
    sub_2EF0C((uint64_t)v17, &qword_203290);
    sub_559AC();
    sub_A208(v25, 1, v1);
    if (v26)
    {
      sub_2EF0C((uint64_t)v8, &qword_203290);
LABEL_20:
      sub_2EF0C((uint64_t)v55, &qword_202BA0);
      swift_release();
      goto LABEL_8;
    }
    goto LABEL_18;
  }
  sub_553FC((uint64_t)v8, v13, &qword_203290);
  sub_A208(v25, 1, v1);
  if (v26)
  {
    sub_2EF0C((uint64_t)v17, &qword_203290);
    sub_2EF0C((uint64_t)v19, &qword_203290);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v13, v1);
LABEL_18:
    sub_2EF0C((uint64_t)v8, &qword_203288);
    goto LABEL_21;
  }
  sub_5572C();
  v27();
  sub_553B4(&qword_203298, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_DateTime.DefinedValues);
  char v28 = sub_1ACDB0();
  uint64_t v29 = *(void (**)(uint64_t *, uint64_t))(v24 + 8);
  v29(v0, v1);
  uint64_t v0 = &qword_203290;
  sub_2EF0C((uint64_t)v17, &qword_203290);
  sub_559AC();
  v29((uint64_t *)v13, v1);
  sub_2EF0C((uint64_t)v8, &qword_203290);
  if (v28) {
    goto LABEL_20;
  }
LABEL_21:
  swift_retain();
  sub_1AB6E0();
  swift_release();
  uint64_t v30 = v54[0];
  if (v54[0])
  {
    sub_1AB910();
    sub_5552C();
    sub_1AB7B0();
    sub_55634();
  }
  swift_retain();
  sub_1AB6E0();
  swift_release();
  if (v54[0])
  {
    uint64_t v31 = v54[0];
    sub_1AB900();
    sub_557C4();
  }
  else
  {
    uint64_t v31 = 0;
  }
  getMedScheduleDateTime(from:)(v31);
  sub_55A24();
  if (v0)
  {
    uint64_t v32 = sub_1AB7B0();
    swift_release();
    if (!v30)
    {
LABEL_33:
      int v33 = 1;
      if (!v32) {
        goto LABEL_37;
      }
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v32 = 0;
    if (!v30) {
      goto LABEL_33;
    }
  }
  swift_retain();
  sub_1AB670();
  sub_5552C();
  sub_1AB730();
  sub_55860();
  if (v0) {
    goto LABEL_33;
  }
  int v33 = 0;
  if (!v32)
  {
LABEL_37:
    int v34 = 1;
    if (!v30) {
      goto LABEL_40;
    }
LABEL_38:
    swift_retain();
    sub_1AB670();
    sub_5552C();
    sub_1AB730();
    sub_5579C();
    char v35 = v13 & 1;
    if (!v32) {
      goto LABEL_45;
    }
    goto LABEL_41;
  }
LABEL_34:
  swift_retain();
  sub_1AB670();
  sub_557C4();
  sub_1AB730();
  sub_55860();
  if (v0) {
    goto LABEL_37;
  }
  int v34 = 0;
  if (v30) {
    goto LABEL_38;
  }
LABEL_40:
  uint64_t v0 = 0;
  char v35 = 1;
  if (!v32) {
    goto LABEL_45;
  }
LABEL_41:
  swift_retain();
  sub_1AB670();
  sub_55954();
  if (v13)
  {
    sub_1AB730();
    char v37 = v36;
    swift_release();
    char v38 = v37 & 1;
    if ((v35 & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_46;
  }
LABEL_45:
  char v38 = 1;
  if ((v35 & 1) == 0)
  {
LABEL_43:
    if ((v38 & 1) == 0) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
LABEL_46:
  if (v38) {
    goto LABEL_48;
  }
LABEL_47:
  if (((v33 | v34) & 1) == 0)
  {
    if (v30) {
      goto LABEL_49;
    }
LABEL_53:
    int v41 = 1;
    goto LABEL_54;
  }
LABEL_48:
  if (!v30) {
    goto LABEL_53;
  }
LABEL_49:
  swift_retain();
  sub_1AB640();
  sub_5552C();
  sub_1AB860();
  sub_55A24();
  if (!v0) {
    goto LABEL_53;
  }
  sub_1AB730();
  char v40 = v39;
  swift_release();
  if (v40) {
    goto LABEL_53;
  }
  int v41 = 0;
  if (!v32) {
    goto LABEL_58;
  }
  swift_retain();
  sub_1AB640();
  sub_557C4();
  sub_1AB860();
  sub_55A24();
  if (!v0) {
    goto LABEL_58;
  }
LABEL_54:
  sub_1AB730();
  char v43 = v42;
  swift_release();
  if ((v43 & 1) == 0) {
    int v44 = 0;
  }
  else {
LABEL_58:
  }
    int v44 = 1;
  if (v30)
  {
    swift_retain();
    uint64_t v45 = sub_1AB640();
    swift_release();
    if (!v45) {
      goto LABEL_65;
    }
    uint64_t v46 = sub_1AB860();
    swift_release();
    if (v46)
    {
      sub_1AB730();
      sub_5579C();
      char v47 = v13 & 1;
      if (!v32) {
        goto LABEL_70;
      }
      goto LABEL_66;
    }
  }
  LOBYTE(v45) = 0;
LABEL_65:
  char v47 = 1;
  if (!v32) {
    goto LABEL_70;
  }
LABEL_66:
  swift_retain();
  sub_1AB640();
  sub_557C4();
  uint64_t v13 = sub_1AB860();
  swift_release();
  if (v13)
  {
    sub_1AB730();
    LODWORD(v53) = v44;
    char v49 = v48;
    swift_release();
    char v50 = v49 & 1;
    int v44 = v53;
    if (v47) {
      goto LABEL_71;
    }
LABEL_68:
    if ((v50 & 1) == 0) {
      goto LABEL_73;
    }
    goto LABEL_72;
  }
LABEL_70:
  char v50 = 1;
  if ((v47 & 1) == 0) {
    goto LABEL_68;
  }
LABEL_71:
  if (v50) {
    goto LABEL_73;
  }
LABEL_72:
  if (((v41 | v44) & 1) == 0)
  {
    if (!v30) {
      goto LABEL_78;
    }
    goto LABEL_74;
  }
LABEL_73:
  if (!v30) {
    goto LABEL_78;
  }
LABEL_74:
  swift_retain();
  sub_1AB630();
  sub_5552C();
  sub_1AB730();
  sub_55860();
  if ((v45 & 1) == 0)
  {
    if (!v32) {
      goto LABEL_82;
    }
    goto LABEL_79;
  }
LABEL_78:
  if (!v32) {
    goto LABEL_82;
  }
LABEL_79:
  swift_retain();
  sub_1AB630();
  sub_557C4();
  sub_1AB730();
  sub_55860();
  if ((v45 & 1) == 0)
  {
    if (v30) {
      goto LABEL_83;
    }
    goto LABEL_85;
  }
LABEL_82:
  if (v30)
  {
LABEL_83:
    swift_retain();
    sub_1AB630();
    sub_5552C();
    sub_1AB730();
    sub_5579C();
    int v51 = v13 & 1;
    if (!v32)
    {
LABEL_84:
      sub_2EF0C((uint64_t)v55, &qword_202BA0);
      swift_release();
      swift_release();
      goto LABEL_8;
    }
    goto LABEL_86;
  }
LABEL_85:
  int v51 = 1;
  if (!v32) {
    goto LABEL_84;
  }
LABEL_86:
  LODWORD(v53) = v51;
  swift_retain();
  sub_1AB630();
  sub_55954();
  if (v13)
  {
    v52[1] = sub_1AB730();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_2EF0C((uint64_t)v55, &qword_202BA0);
  }
  else
  {
    sub_2EF0C((uint64_t)v55, &qword_202BA0);
    swift_release();
    swift_release();
    swift_release();
  }
LABEL_8:
  sub_A56C();
}

BOOL hasTimeEdit(from:)()
{
  uint64_t v2 = sub_1AB750();
  sub_554F0(v2, v3, &qword_202BA0, v4, v5);
  if (!v23[3])
  {
    sub_2EF0C((uint64_t)v23, &qword_202BA0);
    goto LABEL_6;
  }
  sub_1ABA30();
  if ((sub_5547C() & 1) == 0)
  {
LABEL_6:
    sub_2EF0C((uint64_t)v24, &qword_202BA0);
    return 0;
  }
  sub_555DC();
  sub_55750();
  swift_release();
  if (v23[0])
  {
    sub_1AB910();
    sub_5552C();
    sub_1AB7C0();
    sub_55634();
  }
  swift_retain();
  sub_55750();
  swift_release();
  if (v23[0])
  {
    uint64_t v7 = v23[0];
    sub_1AB900();
    sub_557C4();
  }
  else
  {
    uint64_t v7 = 0;
  }
  getMedScheduleDateTime(from:)(v7);
  sub_55A24();
  if (v0)
  {
    uint64_t v8 = sub_1AB7C0();
    swift_release();
    if (!v23[0]) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (!v23[0]) {
      goto LABEL_16;
    }
  }
  swift_retain();
  sub_1AB690();
  sub_5552C();
  sub_1AB730();
  sub_55860();
  if ((v0 & 1) == 0)
  {
    char v9 = 0;
    goto LABEL_17;
  }
LABEL_16:
  char v9 = 1;
LABEL_17:
  if (v8)
  {
    swift_retain();
    sub_1AB690();
    sub_557C4();
    sub_1AB730();
    swift_release();
  }
  if (v23[0])
  {
    swift_retain();
    sub_1AB690();
    sub_5552C();
    sub_1AB730();
    sub_5579C();
    char v10 = v1 & 1;
    if (!v8) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v0 = 0;
    char v10 = 1;
    if (!v8) {
      goto LABEL_28;
    }
  }
  swift_retain();
  sub_1AB690();
  sub_55954();
  if (v1)
  {
    uint64_t v11 = sub_1AB730();
    char v13 = v12;
    swift_release();
    char v14 = v13 & 1;
    if (v10) {
      goto LABEL_29;
    }
LABEL_25:
    if (v14) {
      goto LABEL_30;
    }
    BOOL v15 = v0 == v11;
    if ((v9 & 1) == 0)
    {
LABEL_32:
      if (!v23[0]) {
        goto LABEL_36;
      }
      goto LABEL_33;
    }
LABEL_31:
    BOOL v15 = 1;
    goto LABEL_32;
  }
LABEL_28:
  uint64_t v11 = 0;
  char v14 = 1;
  if ((v10 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_29:
  if (v14) {
    goto LABEL_31;
  }
LABEL_30:
  if (v9) {
    goto LABEL_31;
  }
  BOOL v15 = 0;
  if (!v23[0]) {
    goto LABEL_36;
  }
LABEL_33:
  swift_retain();
  sub_1AB6A0();
  sub_5552C();
  sub_1AB730();
  sub_55860();
  if ((v0 & 1) == 0)
  {
    char v16 = 0;
    goto LABEL_37;
  }
LABEL_36:
  char v16 = 1;
LABEL_37:
  if (v8)
  {
    swift_retain();
    sub_1AB6A0();
    sub_557C4();
    sub_1AB730();
    swift_release();
  }
  if (v23[0])
  {
    swift_retain();
    sub_1AB6A0();
    sub_5552C();
    sub_1AB730();
    sub_5579C();
    char v17 = v1 & 1;
    if (!v8)
    {
LABEL_41:
      sub_2EF0C((uint64_t)v24, &qword_202BA0);
      goto LABEL_50;
    }
  }
  else
  {
    uint64_t v0 = 0;
    char v17 = 1;
    if (!v8) {
      goto LABEL_41;
    }
  }
  swift_retain();
  sub_1AB6A0();
  sub_55954();
  if (v1)
  {
    uint64_t v18 = sub_1AB730();
    char v20 = v19;
    swift_release();
    swift_release();
    swift_release();
    char v21 = v20 & 1;
    swift_release();
    sub_2EF0C((uint64_t)v24, &qword_202BA0);
    if (v17) {
      goto LABEL_51;
    }
    goto LABEL_45;
  }
  sub_2EF0C((uint64_t)v24, &qword_202BA0);
  swift_release();
LABEL_50:
  swift_release();
  swift_release();
  uint64_t v18 = 0;
  char v21 = 1;
  if (v17)
  {
LABEL_51:
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
LABEL_45:
  if ((v21 & 1) == 0)
  {
    if ((v16 & 1) == 0)
    {
      BOOL v22 = v0 == v18;
      if (v15) {
        return !v22;
      }
      goto LABEL_55;
    }
    goto LABEL_53;
  }
LABEL_52:
  if ((v16 & 1) == 0)
  {
LABEL_55:
    BOOL v22 = 0;
    return !v22;
  }
LABEL_53:
  if (!v15) {
    goto LABEL_55;
  }
  BOOL v22 = 1;
  return !v22;
}

void isSpecificMedRequest(from:deviceState:)()
{
  sub_A638();
  uint64_t v1 = sub_1AC800();
  sub_52C4();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_47EB8();
  uint64_t v34 = sub_2694(&qword_2032A0);
  sub_20688();
  __chkstk_darwin(v5);
  sub_A314();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v31 - v10;
  getMedScheduleWithDefinedValues(from:deviceState:)();
  uint64_t v35 = getLocalizedMedName(from:)();
  uint64_t v13 = v12;
  uint64_t v14 = getUSOMedNames(from:)();
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 16);
    swift_bridgeObjectRelease();
    BOOL v16 = v15 != 0;
  }
  else
  {
    BOOL v16 = 0;
  }
  uint64_t v17 = sub_2694(&qword_203268);
  int v18 = 1;
  sub_A208((uint64_t)v11, 1, v17);
  if (v19)
  {
    if (v13) {
      int v18 = 1;
    }
    else {
      int v18 = v16;
    }
  }
  BOOL v36 = v16;
  int v37 = v18;
  sub_1AC7D0();
  sub_A340();
  sub_E524();
  v20();
  sub_553FC((uint64_t)v11, v8, &qword_2032A0);
  swift_bridgeObjectRetain();
  char v21 = sub_1AC7F0();
  os_log_type_t v22 = sub_1ACF50();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v33 = v1;
    uint64_t v24 = v23;
    uint64_t v32 = swift_slowAlloc();
    v40[0] = v32;
    *(_DWORD *)uint64_t v24 = 136315906;
    uint64_t v25 = sub_1ACFC0();
    uint64_t v38 = sub_4A278(v25, v26, v40);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_2EF0C(v8, &qword_2032A0);
    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v38 = v35;
    uint64_t v39 = v13;
    sub_2694(&qword_2032A8);
    uint64_t v27 = sub_1ACFC0();
    uint64_t v38 = sub_4A278(v27, v28, v40);
    sub_1ACFE0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 22) = 2080;
    if (v36) {
      uint64_t v29 = 1702195828;
    }
    else {
      uint64_t v29 = 0x65736C6166;
    }
    if (v36) {
      unint64_t v30 = 0xE400000000000000;
    }
    else {
      unint64_t v30 = 0xE500000000000000;
    }
    uint64_t v38 = sub_4A278(v29, v30, v40);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 32) = 1024;
    LODWORD(v38) = v37;
    sub_1ACFE0();
    _os_log_impl(&def_342E4, v21, v22, "Checking specific med request:\nschedule: %s,\nlocalizedMedName: %s,\nfirstUSOMedName: %s,\ncombined: %{BOOL}d", (uint8_t *)v24, 0x26u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v33);
  }
  else
  {
    sub_2EF0C(v8, &qword_2032A0);

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  }
  sub_2EF0C((uint64_t)v11, &qword_2032A0);
  sub_A56C();
}

uint64_t isQueryAboutDetails(from:)()
{
  uint64_t v1 = sub_1AB750();
  sub_554F0(v1, v2, &qword_202BA0, v3, v4);
  if (!v16)
  {
    uint64_t v5 = sub_2EF0C((uint64_t)v15, &qword_202BA0);
LABEL_7:
    sub_554F0(v5, v6, &qword_202BA0, v7, v8);
    if (v16)
    {
      sub_1ABA70();
      if (sub_55458())
      {
        sub_555DC();
        sub_55920();
        swift_release();
        if (v15[0] && (sub_1AB910(), sub_55634(), v0))
        {
          swift_release();
          int v9 = 1;
        }
        else
        {
          int v9 = 0;
        }
        swift_retain();
        sub_55920();
        goto LABEL_18;
      }
    }
    else
    {
      sub_2EF0C((uint64_t)v15, &qword_202BA0);
    }
    sub_2EF0C((uint64_t)v17, &qword_202BA0);
    return 0;
  }
  sub_1ABB40();
  uint64_t v5 = sub_55458();
  if ((v5 & 1) == 0) {
    goto LABEL_7;
  }
  sub_555DC();
  sub_55908();
  swift_release();
  if (v15[0] && (sub_1AB910(), sub_55634(), v0))
  {
    swift_release();
    int v9 = 1;
  }
  else
  {
    int v9 = 0;
  }
  swift_retain();
  sub_55908();
LABEL_18:
  swift_release();
  if (!v15[0]) {
    goto LABEL_25;
  }
  sub_1AB900();
  sub_55634();
  if (!v0) {
    goto LABEL_25;
  }
  sub_1AB9A0();
  sub_5552C();
  sub_557B8();
  if (v11)
  {
    sub_556A4();
    sub_1AD170();
    sub_55818();
  }
  else if (!*(void *)(v10 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_26:
    sub_2EF0C((uint64_t)v17, &qword_202BA0);
    return (v9 & 1) != 0;
  }
  sub_555BC();
  sub_557DC();
  swift_bridgeObjectRelease();
  sub_55830();
  swift_release();
  if (!v14)
  {
LABEL_25:
    swift_release();
    goto LABEL_26;
  }
  swift_retain();
  uint64_t v12 = sub_1AB840();
  swift_release();
  swift_release_n();
  if (v12)
  {
    swift_release();
    sub_2EF0C((uint64_t)v17, &qword_202BA0);
    return 1;
  }
  sub_2EF0C((uint64_t)v17, &qword_202BA0);
  return v9 != 0;
}

BOOL medScheduleHasOneMed(from:)()
{
  uint64_t v0 = sub_1AB750();
  sub_554F0(v0, v1, &qword_202BA0, v2, v3);
  if (!v8[3])
  {
    sub_2EF0C((uint64_t)v8, &qword_202BA0);
    goto LABEL_10;
  }
  sub_1ABA30();
  if ((sub_5547C() & 1) == 0)
  {
LABEL_10:
    BOOL v6 = 0;
    goto LABEL_11;
  }
  sub_555DC();
  sub_55750();
  swift_release();
  if (!v8[0])
  {
LABEL_9:
    swift_release();
    goto LABEL_10;
  }
  sub_1AB900();
  sub_5552C();
  unint64_t v4 = sub_1AB9A0();
  if (!v4)
  {
    swift_release();
    goto LABEL_9;
  }
  if (v4 >> 62) {
    uint64_t v5 = sub_1AD170();
  }
  else {
    uint64_t v5 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8));
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  BOOL v6 = v5 == 1;
LABEL_11:
  sub_2EF0C((uint64_t)v9, &qword_202BA0);
  return v6;
}

uint64_t getMedDosageUnit(from:)()
{
  uint64_t v1 = sub_1AB750();
  sub_554F0(v1, v2, &qword_202BA0, v3, v4);
  if (v11[3])
  {
    sub_1ABA30();
    if (sub_5547C())
    {
      sub_555DC();
      sub_55750();
      swift_release();
      if (v11[0])
      {
        sub_1AB900();
        sub_55634();
        if (v0)
        {
          sub_1AB9A0();
          sub_5552C();
          sub_557B8();
          if (v6)
          {
            sub_556A4();
            sub_1AD170();
            sub_55818();
            goto LABEL_7;
          }
          if (*(void *)(v5 + 16))
          {
LABEL_7:
            sub_555BC();
            sub_557DC();
            swift_bridgeObjectRelease();
            sub_55830();
            swift_release();
            uint64_t v7 = v10;
LABEL_13:
            uint64_t v8 = getUsoMedDosageUnit(from:)(v7);
            swift_release();
            swift_release();
            goto LABEL_14;
          }
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v7 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    sub_2EF0C((uint64_t)v11, &qword_202BA0);
  }
  uint64_t v8 = 0;
LABEL_14:
  sub_2EF0C((uint64_t)v12, &qword_202BA0);
  return v8;
}

uint64_t getMedDosageValue(from:)()
{
  uint64_t v1 = sub_1AB750();
  sub_554F0(v1, v2, &qword_202BA0, v3, v4);
  if (v10[3])
  {
    sub_1ABA30();
    if (sub_5547C())
    {
      sub_555DC();
      sub_55750();
      swift_release();
      if (v10[0])
      {
        sub_1AB900();
        sub_55634();
        if (v0)
        {
          sub_1AB9A0();
          sub_5552C();
          sub_557B8();
          if (v6)
          {
            sub_556A4();
            sub_1AD170();
            sub_55818();
          }
          else
          {
            uint64_t v0 = *(void *)(v5 + 16);
            if (!v0)
            {
              swift_bridgeObjectRelease();
              goto LABEL_11;
            }
          }
          sub_555BC();
          sub_557DC();
          swift_bridgeObjectRelease();
          sub_55830();
          swift_release();
          uint64_t v0 = v9;
        }
      }
      else
      {
        uint64_t v0 = 0;
      }
LABEL_11:
      uint64_t v7 = getMedDosageValue(from:)(v0);
      swift_release();
      swift_release();
      goto LABEL_12;
    }
  }
  else
  {
    sub_2EF0C((uint64_t)v10, &qword_202BA0);
  }
  uint64_t v7 = 0;
LABEL_12:
  sub_2EF0C((uint64_t)v11, &qword_202BA0);
  return v7;
}

uint64_t sub_55360(uint64_t a1)
{
  return a1;
}

uint64_t sub_553B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_553FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2694(a3);
  sub_20688();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_55458()
{
  return swift_dynamicCast();
}

uint64_t sub_5547C()
{
  return swift_dynamicCast();
}

uint64_t sub_55498()
{
  return *(void *)(v0 - 296);
}

uint64_t sub_554C4()
{
  return *(void *)(v0 - 320);
}

uint64_t sub_554F0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  return sub_553FC((uint64_t)va1, (uint64_t)va, a3);
}

uint64_t sub_55508()
{
  return *(void *)(v0 - 424);
}

uint64_t sub_5552C()
{
  return swift_release();
}

uint64_t sub_55544()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, *(void *)(v1 - 224));
}

uint64_t sub_5556C()
{
  return v0;
}

uint64_t sub_55584()
{
  return swift_beginAccess();
}

uint64_t sub_555A0()
{
  return *(void *)(v0 - 256);
}

uint64_t sub_555BC()
{
  return sub_4AA30(0, (v0 & 0xC000000000000001) == 0, v0);
}

uint64_t sub_555DC()
{
  return swift_retain();
}

uint64_t sub_555F4()
{
  return sub_1AA9F0();
}

uint64_t sub_55634()
{
  return swift_release();
}

uint64_t sub_5564C()
{
  return DateTime.init(withDate:occurringIn:)(v0, v1);
}

uint64_t sub_55680@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0;
}

uint64_t sub_556A4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_556C0(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0, 1, v1);
}

void sub_556EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1713D0(v22, v20, 1, v21, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t sub_5570C()
{
  return swift_release();
}

uint64_t sub_55738()
{
  return v0;
}

uint64_t sub_55750()
{
  return sub_1AB6E0();
}

uint64_t sub_55768()
{
  uint64_t v2 = *(void *)(v0 - 232);
  return sub_E3FC(v2, v0 - 184);
}

uint64_t sub_5579C()
{
  return swift_release();
}

uint64_t sub_557C4()
{
  return swift_release();
}

uint64_t sub_557DC()
{
  return sub_1AD0A0();
}

uint64_t sub_55800()
{
  return swift_retain();
}

uint64_t sub_55818()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_55830()
{
  return sub_1AB600();
}

uint64_t sub_55848()
{
  return swift_retain();
}

uint64_t sub_55860()
{
  return swift_release();
}

uint64_t sub_55878@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a3 - 256);
  return sub_553FC(a1, v4, a2);
}

uint64_t sub_55890()
{
  return swift_release();
}

uint64_t sub_558A8()
{
  return DateTime.Date.init(withDefinedValue:)(v0);
}

uint64_t sub_558C0()
{
  return sub_1ABDF0();
}

uint64_t sub_558D8()
{
  return DateTime.DateTimeRange.init(withDefinedValue:)(v0);
}

uint64_t sub_558F0()
{
  return sub_1AABC0();
}

uint64_t sub_55908()
{
  return sub_1AB820();
}

uint64_t sub_55920()
{
  return sub_1AB930();
}

uint64_t sub_55954()
{
  return swift_release();
}

uint64_t sub_5596C@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

void sub_55980(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_559AC()
{
  return sub_2EF0C(v1, v0);
}

uint64_t sub_559C4()
{
  return sub_4AA30(0, (v0 & 0xC000000000000001) == 0, v0);
}

uint64_t sub_559F0(uint64_t a1)
{
  *(void *)(v1 - 192) = a1;
  return v1 - 192;
}

uint64_t sub_55A04()
{
  return swift_dynamicCast();
}

uint64_t sub_55A24()
{
  return swift_release();
}

uint64_t type metadata accessor for WellnessUnsupportedCATsSimple()
{
  uint64_t result = qword_2032B0;
  if (!qword_2032B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_55A84()
{
  return swift_initClassMetadata2();
}

uint64_t sub_55AC4(uint64_t a1, uint64_t a2)
{
  return sub_55B18(a1, a2);
}

uint64_t sub_55B18(uint64_t a1, uint64_t a2)
{
  sub_1AC250();
  sub_507F8();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_E548();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_2694(&qword_201E20);
  __chkstk_darwin(v11 - 8);
  sub_E548();
  sub_45DC8(a1, v13 - v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, a2, v2);
  uint64_t v14 = sub_1AC1F0();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  sub_55D28(a1);
  return v14;
}

uint64_t sub_55C44(uint64_t a1, uint64_t a2)
{
  sub_1AC250();
  sub_507F8();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_E548();
  uint64_t v9 = v8 - v7;
  swift_allocObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, a2, v2);
  uint64_t v10 = sub_1AC200();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v2);
  return v10;
}

uint64_t sub_55D20()
{
  return type metadata accessor for WellnessUnsupportedCATsSimple();
}

uint64_t sub_55D28(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201E20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_55D88(uint64_t a1)
{
  uint64_t v2 = sub_1AB4B0();
  sub_52C4();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_53E0();
  sub_206D4(v6);
  uint64_t v7 = sub_2694(qword_2029B8);
  __chkstk_darwin(v7 - 8);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v8);
  sub_55680((uint64_t)&v70 - v9);
  sub_1AB450();
  sub_52C4();
  uint64_t v87 = v11;
  uint64_t v88 = v10;
  __chkstk_darwin(v10);
  sub_53E0();
  sub_55680(v12);
  uint64_t v84 = sub_1AB420();
  sub_52C4();
  uint64_t v90 = v13;
  __chkstk_darwin(v14);
  sub_53E0();
  uint64_t v89 = v15;
  uint64_t v16 = sub_1AB3F0();
  sub_52C4();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  sub_E548();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = sub_1AC800();
  sub_52C4();
  uint64_t v25 = v24;
  __chkstk_darwin(v26);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v27);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v28);
  unint64_t v30 = (char *)&v70 - v29;
  uint64_t v31 = sub_1AC7D0();
  sub_A340();
  uint64_t v80 = v25;
  uint64_t v32 = *(void (**)(void, void, void))(v25 + 16);
  uint64_t v83 = v31;
  uint64_t v82 = v25 + 16;
  uint64_t v81 = v32;
  v32(v30, v31, v23);
  uint64_t v33 = *(void *)(v18 + 16);
  uint64_t v85 = a1;
  uint64_t v75 = v18 + 16;
  uint64_t v74 = v33;
  sub_E524();
  v34();
  uint64_t v35 = sub_1AC7F0();
  os_log_type_t v36 = sub_1ACF50();
  BOOL v37 = os_log_type_enabled(v35, v36);
  uint64_t v73 = v4;
  uint64_t v76 = v16;
  if (v37)
  {
    uint64_t v38 = sub_5B2D4();
    uint64_t v72 = v2;
    uint64_t v39 = (uint8_t *)v38;
    uint64_t v71 = sub_E620();
    v92[0] = v71;
    *(_DWORD *)uint64_t v39 = 136315138;
    uint64_t v70 = v39 + 4;
    sub_5B1C0((unint64_t *)&qword_202010, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v40 = sub_1AD2C0();
    uint64_t v42 = sub_4A278(v40, v41, v92);
    sub_5B648(v42);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_5B574();
    v43();
    _os_log_impl(&def_342E4, v35, v36, "LoggingCorrectionsFlow on(correction:) for input: %s", v39, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v22, v16);
  }

  int v44 = *(void (**)(void))(v80 + 8);
  sub_E530();
  v44();
  uint64_t v45 = v86;
  uint64_t v46 = v89;
  sub_1AB3E0();
  uint64_t v47 = sub_5B568();
  if (v48(v47) == enum case for Parse.uso(_:))
  {
    uint64_t v49 = sub_5B568();
    v50(v49);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 32))(v45, v46, v88);
    sub_A340();
    sub_E524();
    v51();
    uint64_t v52 = sub_1AC7F0();
    os_log_type_t v53 = sub_1ACF50();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (_WORD *)sub_292A0();
      sub_29368(v54);
      sub_5B474(&def_342E4, v52, v53, "LoggingCorrectionsFlow examining USO parse...");
      sub_A1F0();
    }

    sub_E530();
    v44();
    uint64_t v55 = v77;
    uint64_t v56 = v76;
    sub_5B524();
    sub_E524();
    v57();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v55, 0, 1, v56);
    uint64_t v58 = v78;
    sub_5B078(v55, v78);
    uint64_t v59 = v79 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionInput;
    sub_5B69C();
    sub_5B0E0(v58, v59, qword_2029B8);
    swift_endAccess();
    if (sub_56C1C(v45))
    {
      sub_1AB440();
      uint64_t v60 = sub_141EE8();
      sub_E558();
      v61();
      if (v60)
      {
        v91[3] = &type metadata for WellnessTask;
        v91[4] = sub_5B13C();
        v91[0] = v60;
        swift_retain();
        uint64_t v62 = v79;
        sub_570A8(v91, v92);
        swift_release();
        sub_E558();
        v63();
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v91);
        sub_5B69C();
        sub_5B188((uint64_t)v92, v62 + 16);
        swift_endAccess();
        return 1;
      }
    }
  }
  else
  {
    sub_A340();
    sub_E524();
    v65();
    uint64_t v66 = sub_1AC7F0();
    os_log_type_t v67 = sub_1ACF50();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (_WORD *)sub_292A0();
      sub_29368(v68);
      sub_5B474(&def_342E4, v66, v67, "LoggingCorrectionsFlow encountered non-uso parse. Not handling.");
      sub_A1F0();
    }

    sub_E530();
    v44();
  }
  sub_E558();
  v69();
  return 0;
}

uint64_t sub_56548()
{
  uint64_t v0 = sub_1AC800();
  sub_52C4();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_E548();
  uint64_t v6 = v5 - v4;
  sub_1AC7D0();
  sub_A340();
  sub_E524();
  v7();
  uint64_t v8 = sub_1AC7F0();
  os_log_type_t v9 = sub_1ACF50();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)sub_292A0();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&def_342E4, v8, v9, "LoggingCorrectionsFlow on(input:) - This is unexpected", v10, 2u);
    sub_A1F0();
  }

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
  return 0;
}

uint64_t sub_56668()
{
  sub_A364();
  v1[12] = v2;
  v1[13] = v0;
  uint64_t v3 = sub_1AC800();
  v1[14] = v3;
  sub_A19C(v3);
  v1[15] = v4;
  v1[16] = sub_A220();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_5670C()
{
  uint64_t v1 = v0[13];
  if (*(unsigned char *)(v1 + 64))
  {
    if (*(unsigned char *)(v1 + 64) == 1)
    {
      sub_1AC7D0();
      sub_A340();
      uint64_t v2 = sub_292B8();
      v3(v2);
      uint64_t v4 = (void *)sub_1AC7F0();
      os_log_type_t v5 = sub_1ACF50();
      if (sub_29300(v5))
      {
        uint64_t v6 = (_WORD *)sub_292A0();
        sub_29368(v6);
        sub_A7FC(&def_342E4, v7, v8, "LoggingCorrectionsFlow Execute - Correcting");
        sub_A1F0();
      }
      uint64_t v9 = v0[17];
      uint64_t v10 = v0[14];
      uint64_t v11 = v0[15];

      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      uint64_t v12 = (void *)swift_task_alloc();
      v0[19] = v12;
      *uint64_t v12 = v0;
      v12[1] = sub_56A4C;
      return sub_588D8();
    }
    sub_1AC7D0();
    sub_A340();
    uint64_t v25 = sub_292B8();
    v26(v25);
    uint64_t v27 = (void *)sub_1AC7F0();
    os_log_type_t v28 = sub_1ACF50();
    if (sub_29300(v28))
    {
      uint64_t v29 = (_WORD *)sub_292A0();
      sub_29368(v29);
      sub_A7FC(&def_342E4, v30, v31, "LoggingCorrectionsFlow Execute - Done");
      sub_A1F0();
    }
    uint64_t v33 = v0[15];
    uint64_t v32 = v0[16];
    uint64_t v34 = v0[14];

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    sub_1AB140();
  }
  else
  {
    uint64_t v14 = v0[18];
    uint64_t v15 = v0[14];
    uint64_t v16 = v0[15];
    uint64_t v17 = sub_1AC7D0();
    sub_A340();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, v17, v15);
    uint64_t v18 = sub_1AC7F0();
    os_log_type_t v19 = sub_1ACF50();
    if (sub_470C8(v19))
    {
      uint64_t v20 = (uint8_t *)sub_292A0();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&def_342E4, v18, (os_log_type_t)v14, "LoggingCorrectionsFlow Execute - Ready", v20, 2u);
      sub_A1F0();
    }
    uint64_t v21 = v0[18];
    uint64_t v22 = v0[14];
    uint64_t v23 = v0[15];
    uint64_t v24 = v0[13];

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    *(unsigned char *)(v1 + 64) = 1;
    v0[11] = v24;
    type metadata accessor for LoggingCorrectionsFlow();
    sub_5B1C0(&qword_203508, (void (*)(uint64_t))type metadata accessor for LoggingCorrectionsFlow);
    sub_1AB110();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v35();
}

uint64_t sub_56A4C()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_56B14()
{
  sub_A364();
  *(unsigned char *)(*(void *)(v0 + 104) + 64) = 2;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v1();
}

uint64_t sub_56B8C()
{
  return sub_1AAF80();
}

uint64_t sub_56C1C(uint64_t a1)
{
  uint64_t v50 = a1;
  uint64_t v51 = sub_1AB4B0();
  sub_52C4();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_E548();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = sub_1AC800();
  sub_52C4();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_E594();
  uint64_t v47 = v11;
  __chkstk_darwin(v12);
  sub_2073C();
  uint64_t v48 = v13;
  __chkstk_darwin(v14);
  sub_2073C();
  uint64_t v49 = v15;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v46 - v17;
  uint64_t v19 = sub_1AC7D0();
  sub_A340();
  uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v52(v18, v19, v7);
  uint64_t v20 = sub_1AC7F0();
  os_log_type_t v21 = sub_1ACF50();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)sub_292A0();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&def_342E4, v20, v21, "isCorrectionsSteeringSupportedBySelf", v22, 2u);
    sub_A1F0();
  }

  uint64_t v23 = *(void (**)(void))(v9 + 8);
  uint64_t v53 = v9 + 8;
  ((void (*)(char *, uint64_t))v23)(v18, v7);
  sub_1AB440();
  uint64_t v24 = sub_141EE8();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v51);
  uint64_t v25 = v7;
  if (v24)
  {
    uint64_t v51 = (uint64_t)v23;
    sub_A340();
    sub_5B374();
    v26();
    swift_retain_n();
    uint64_t v27 = sub_1AC7F0();
    os_log_type_t v28 = sub_1ACF50();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)sub_A4B0();
      uint64_t v50 = sub_E620();
      v55[0] = v50;
      *(_DWORD *)uint64_t v29 = 136315138;
      uint64_t v47 = v29 + 4;
      swift_retain();
      sub_D9A2C();
      uint64_t v31 = v30;
      unint64_t v33 = v32;
      swift_release();
      uint64_t v54 = sub_4A278(v31, v33, v55);
      sub_1ACFE0();
      sub_E608();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v27, v28, "Received corrections intent: %s", v29, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();
    }
    else
    {

      sub_E608();
    }
    uint64_t v39 = (void (*)(void))v51;
    sub_E530();
    v39();
    if (sub_5A448())
    {
      sub_E608();
      return 1;
    }
    sub_A340();
    sub_5B374();
    v41();
    uint64_t v42 = (void *)sub_1AC7F0();
    os_log_type_t v43 = sub_1ACF60();
    if (sub_470C8(v43))
    {
      *(_WORD *)sub_292A0() = 0;
      sub_47358(&def_342E4, v44, v45, "Task doesn't have any non-nil information. Not handling.");
      sub_A1F0();
      sub_E608();
    }
    else
    {

      sub_E608();
    }
    ((void (*)(uint64_t, uint64_t))v39)(v48, v25);
  }
  else
  {
    sub_A340();
    sub_5B374();
    v34();
    uint64_t v35 = (void *)sub_1AC7F0();
    os_log_type_t v36 = sub_1ACF60();
    if (sub_470C8(v36))
    {
      *(_WORD *)sub_292A0() = 0;
      sub_47358(&def_342E4, v37, v38, "No task found in corrections parse. Not handling.");
      sub_A1F0();
    }

    sub_E530();
    v23();
  }
  return 0;
}

uint64_t sub_570A8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v252 = a2;
  uint64_t v251 = sub_1AB880();
  sub_52C4();
  uint64_t v241 = v4;
  __chkstk_darwin(v5);
  sub_53E0();
  sub_206D4(v6);
  uint64_t v249 = sub_2694(&qword_203520);
  sub_20688();
  __chkstk_darwin(v7);
  sub_53E0();
  sub_206D4(v8);
  uint64_t v239 = sub_2694(&qword_201CB8);
  sub_20688();
  __chkstk_darwin(v9);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v10);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v11);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v12);
  sub_55680((uint64_t)&v234 - v13);
  uint64_t v253 = sub_1AAA10();
  sub_52C4();
  uint64_t v240 = v14;
  __chkstk_darwin(v15);
  sub_53E0();
  sub_206D4(v16);
  uint64_t v248 = sub_2694(&qword_203528);
  sub_20688();
  __chkstk_darwin(v17);
  sub_53E0();
  sub_206D4(v18);
  uint64_t v238 = sub_2694(&qword_201CC8);
  sub_20688();
  __chkstk_darwin(v19);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v20);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v21);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v22);
  sub_55680((uint64_t)&v234 - v23);
  uint64_t v24 = sub_1AC800();
  sub_52C4();
  uint64_t v262 = v25;
  __chkstk_darwin(v26);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v27);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v28);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v29);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v30);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v31);
  sub_2073C();
  sub_20698();
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v35 = (uint8_t *)&v234 - v34;
  __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v234 - v36;
  uint64_t v260 = type metadata accessor for SynthesizedWellnessIntent();
  sub_20688();
  __chkstk_darwin(v38);
  sub_E548();
  uint64_t v41 = v40 - v39;
  int v256 = *(unsigned __int8 *)(v2
                            + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_lastSavedSampleHKIdentifier);
  uint64_t v42 = (void *)(v2 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_lastSavedSampleIntent);
  sub_E3FC(v2 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_lastSavedSampleIntent, (uint64_t)&v273);
  sub_30B4(&v273, v41);
  uint64_t v43 = sub_5B298();
  __int16 v45 = v44(v43);
  uint64_t v263 = v24;
  os_log_type_t v261 = (char *)v41;
  if (v45 == 270) {
    goto LABEL_24;
  }
  __int16 v46 = v45;
  uint64_t v235 = v35;
  uint64_t v47 = sub_5B298();
  __int16 v49 = v48(v47);
  uint64_t v50 = v42[3];
  uint64_t v41 = v42[4];
  sub_2E38(v42, v50);
  __int16 v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 24))(v50, v41);
  __int16 v52 = v51;
  if (v49 == 270)
  {
    if (v51 == 270) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  if (v51 == 270) {
    goto LABEL_6;
  }
  uint64_t v41 = sub_1771BC(v49);
  uint64_t v77 = v76;
  if (v41 == sub_1771BC(v52) && v77 == v78)
  {
    sub_5B630();
    goto LABEL_9;
  }
  sub_5B458();
  sub_5B618();
  swift_bridgeObjectRelease();
  if ((v52 & 1) == 0)
  {
LABEL_6:
    sub_1AC7D0();
    sub_A340();
    sub_5B334();
    sub_5B26C();
    v53();
    uint64_t v54 = sub_1AC7F0();
    os_log_type_t v55 = sub_1ACF50();
    uint64_t v41 = v55;
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)sub_A4B0();
      uint64_t v273 = sub_E620();
      *(_DWORD *)uint64_t v56 = 136315138;
      uint64_t v234 = v56 + 4;
      __int16 v272 = v46;
      uint64_t v57 = sub_1ACE00();
      uint64_t v59 = sub_4A278(v57, v58, &v273);
      sub_5B5E4(v59);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v54, (os_log_type_t)v41, "Corrections parse had an updated dataType: %s", v56, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();
    }

    sub_5B324();
    sub_5B284();
    v60();
    uint64_t v37 = v261;
    uint64_t v61 = sub_5B298();
    *((_WORD *)v37 + 1) = v62(v61);
  }
LABEL_9:
  int v63 = sub_19D5A4(v46);
  if (v63 == 205)
  {
LABEL_24:
    sub_5B67C();
    goto LABEL_25;
  }
  int v64 = v63;
  unint64_t v65 = sub_2F2B8(v63);
  uint64_t v67 = v66;
  BOOL v69 = v65 == sub_2F2B8(v256) && v67 == v68;
  if (v69)
  {
    sub_5B630();
    goto LABEL_24;
  }
  sub_5B458();
  sub_5B618();
  swift_bridgeObjectRelease();
  sub_5B67C();
  if ((v65 & 1) == 0)
  {
    sub_1AC7D0();
    sub_A340();
    sub_5B334();
    sub_5B26C();
    v70();
    uint64_t v71 = sub_1AC7F0();
    os_log_type_t v72 = sub_1ACF50();
    uint64_t v37 = (char *)v72;
    if (os_log_type_enabled(v71, v72))
    {
      sub_A4B0();
      uint64_t v273 = sub_5B344();
      *(_DWORD *)unint64_t v65 = 136315138;
      LOBYTE(v272) = v64;
      uint64_t v73 = sub_1ACE00();
      uint64_t v41 = v74;
      uint64_t v75 = sub_4A278(v73, v74, &v273);
      sub_5B5E4(v75);
      sub_1ACFE0();
      sub_5B67C();
      swift_bridgeObjectRelease();
      sub_5B4F0(&def_342E4, v71, (os_log_type_t)v37, "Corrections parse had an updated HKIdentifier: %s");
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      sub_5B324();
    }
    else
    {

      sub_5B5D0();
    }
    sub_5B284();
    v233();
    int v256 = v64;
  }
LABEL_25:
  uint64_t v80 = sub_5B3E0();
  char v82 = v81(v80);
  sub_2E38(v42, v42[3]);
  uint64_t v83 = sub_5B6B4();
  uint64_t v85 = v84(v83);
  uint64_t v86 = sub_1950F4(v82);
  uint64_t v88 = v87;
  if (v86 == sub_1950F4(v85) && v88 == v89)
  {
    sub_5B630();
    sub_5B688();
  }
  else
  {
    sub_5B458();
    sub_5B618();
    swift_bridgeObjectRelease();
    sub_5B688();
    if ((v86 & 1) == 0)
    {
      sub_1AC7D0();
      sub_A340();
      sub_5B334();
      sub_5B26C();
      v91();
      sub_5B540();
      uint64_t v92 = sub_1AC7F0();
      os_log_type_t v93 = sub_1ACF50();
      uint64_t v41 = v93;
      if (os_log_type_enabled(v92, v93))
      {
        uint64_t v94 = (uint8_t *)sub_5B2D4();
        uint64_t v271 = sub_E620();
        *(_DWORD *)uint64_t v94 = 136315138;
        uint64_t v235 = v94 + 4;
        uint64_t v96 = v274;
        uint64_t v95 = v275;
        sub_2E38(&v273, v274);
        LOBYTE(v270) = (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 16))(v96, v95);
        uint64_t v97 = sub_1ACE00();
        uint64_t v270 = sub_4A278(v97, v98, &v271);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v273);
        _os_log_impl(&def_342E4, v92, (os_log_type_t)v41, "Corrections parse had an updated verb: %s", v94, 0xCu);
        swift_arrayDestroy();
        sub_A1F0();
        uint64_t v37 = (char *)v253;
        sub_A1F0();

        sub_5B324();
      }
      else
      {
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v273);

        sub_5B5D0();
      }
      sub_5B284();
      v99();
      uint64_t v85 = v254;
      sub_5B67C();
      uint64_t v100 = sub_5B3E0();
      char v102 = v101(v100);
      char *v261 = v102;
    }
  }
  sub_5B5F8(a1);
  uint64_t v103 = (uint64_t)v259;
  uint64_t v104 = sub_5B38C();
  v105(v104);
  sub_5B5F8(v42);
  uint64_t v106 = sub_5B38C();
  v107(v106);
  uint64_t v108 = v85 + *(int *)(v248 + 48);
  sub_553FC(v103, v85, &qword_201CC8);
  sub_553FC(v41, v108, &qword_201CC8);
  sub_5B65C(v85);
  if (v69)
  {
    sub_5B028(v41, &qword_201CC8);
    sub_5B028((uint64_t)v259, &qword_201CC8);
    sub_5B65C(v108);
    if (v69)
    {
      sub_5B028(v85, &qword_201CC8);
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v109 = v242;
    sub_553FC(v85, v242, &qword_201CC8);
    sub_5B65C(v108);
    if (!v110)
    {
      uint64_t v142 = v240;
      (*(void (**)(uint64_t, uint64_t, char *))(v240 + 32))(v236, v108, v37);
      sub_5B1C0(&qword_203540, (void (*)(uint64_t))&type metadata accessor for DateInterval);
      char v143 = sub_1ACDB0();
      uint64_t v144 = *(void (**)(void))(v142 + 8);
      sub_5B530();
      v144();
      sub_5B028(v41, &qword_201CC8);
      sub_5B028((uint64_t)v259, &qword_201CC8);
      sub_5B530();
      v144();
      sub_5B028(v85, &qword_201CC8);
      if (v143) {
        goto LABEL_48;
      }
      goto LABEL_44;
    }
    sub_5B028(v41, &qword_201CC8);
    sub_5B028((uint64_t)v259, &qword_201CC8);
    (*(void (**)(uint64_t, char *))(v240 + 8))(v109, v37);
  }
  sub_5B028(v85, &qword_203528);
LABEL_44:
  uint64_t v259 = v42;
  sub_1AC7D0();
  sub_A340();
  sub_5B334();
  uint64_t v111 = v247;
  sub_5B26C();
  v112();
  sub_5B540();
  uint64_t v113 = sub_1AC7F0();
  os_log_type_t v114 = sub_1ACF50();
  if (os_log_type_enabled(v113, v114))
  {
    sub_5B2D4();
    uint64_t v270 = sub_5B344();
    *uint64_t v111 = 136315138;
    uint64_t v255 = v111 + 1;
    uint64_t v116 = v274;
    uint64_t v115 = v275;
    sub_2E38(&v273, v274);
    uint64_t v117 = v244;
    (*(void (**)(uint64_t, uint64_t))(v115 + 32))(v116, v115);
    uint64_t v118 = sub_1ACFC0();
    unint64_t v120 = v119;
    sub_5B028(v117, &qword_201CC8);
    uint64_t v121 = sub_4A278(v118, v120, &v270);
    sub_5B648(v121);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v273);
    sub_5B4F0(&def_342E4, v113, v114, "Corrections parse had an updated dateInterval: %s");
    sub_5B508();
    sub_A1F0();
    sub_A1F0();

    sub_5B324();
    sub_5B284();
    v122();
  }
  else
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v273);

    sub_5B360();
    sub_5B284();
    v123();
    uint64_t v117 = v244;
  }
  uint64_t v42 = v259;
  sub_5B5F8(a1);
  uint64_t v124 = sub_5B38C();
  v125(v124);
  sub_5B524();
  sub_5B0E0(v117, (uint64_t)&v261[*(int *)(v126 + 24)], &qword_201CC8);
LABEL_48:
  uint64_t v127 = sub_5B2F0(a1);
  int v129 = v128(v127) & 1;
  uint64_t v130 = sub_5B2F0(v42);
  if (v129 != (v131(v130) & 1))
  {
    sub_1AC7D0();
    sub_A340();
    sub_5B334();
    uint64_t v132 = v246;
    sub_5B26C();
    v133();
    sub_5B540();
    uint64_t v134 = sub_1AC7F0();
    os_log_type_t v135 = sub_1ACF50();
    if (sub_5B5B4(v135))
    {
      sub_5B2D4();
      uint64_t v269 = sub_5B344();
      *uint64_t v132 = 136315138;
      uint64_t v136 = v274;
      uint64_t v137 = v275;
      sub_2E38(&v273, v274);
      char v138 = (*(uint64_t (**)(uint64_t, uint64_t))(v137 + 40))(v136, v137);
      BOOL v139 = (v138 & 1) == 0;
      if (v138) {
        uint64_t v140 = 1702195828;
      }
      else {
        uint64_t v140 = 0x65736C6166;
      }
      if (v139) {
        unint64_t v141 = 0xE500000000000000;
      }
      else {
        unint64_t v141 = 0xE400000000000000;
      }
      uint64_t v268 = sub_4A278(v140, v141, &v269);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v273);
      sub_5B4F0(&def_342E4, v134, (os_log_type_t)v129, "Corrections parse had an updated isRequestForUser: %s");
      sub_5B508();
      sub_A1F0();
      sub_A1F0();

      sub_5B324();
    }
    else
    {
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v273);

      sub_5B360();
    }
    sub_5B284();
    v145();
    uint64_t v146 = sub_5B2F0(a1);
    v147(v146);
    sub_5B524();
    v261[*(int *)(v148 + 28)] = v149 & 1;
  }
  uint64_t v150 = sub_5B41C();
  char v152 = v151(v150);
  uint64_t v153 = v42[4];
  sub_2E38(v42, v42[3]);
  uint64_t v154 = sub_5B6B4();
  char v156 = v155(v154);
  char v157 = v156;
  if (v152 == 61)
  {
    if (v156 == 61) {
      goto LABEL_69;
    }
    goto LABEL_65;
  }
  if (v156 == 61) {
    goto LABEL_65;
  }
  uint64_t v153 = sub_481F0(v152);
  uint64_t v227 = v226;
  if (v153 == sub_481F0(v157) && v227 == v228)
  {
    sub_5B630();
    goto LABEL_69;
  }
  sub_5B458();
  sub_5B618();
  swift_bridgeObjectRelease();
  if ((v157 & 1) == 0)
  {
LABEL_65:
    sub_1AC7D0();
    sub_A340();
    sub_5B334();
    sub_5B26C();
    v158();
    sub_5B540();
    uint64_t v159 = sub_1AC7F0();
    os_log_type_t v160 = sub_1ACF50();
    if (sub_5B5B4(v160))
    {
      sub_5B2D4();
      uint64_t v268 = sub_5B344();
      sub_5B48C(4.8149e-34);
      uint64_t v161 = sub_5B6C8();
      LOBYTE(v266) = v162(v161);
      sub_2694(&qword_201DB0);
      uint64_t v163 = sub_1ACFC0();
      uint64_t v165 = sub_4A278(v163, v164, &v268);
      sub_5B4C4(v165);
      swift_bridgeObjectRelease();
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v273);
      sub_5B4F0(&def_342E4, v159, (os_log_type_t)v153, "Corrections parse had an updated measurementUnit: %s");
      sub_5B508();
      sub_A1F0();
      sub_A1F0();

      sub_5B324();
    }
    else
    {
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v273);

      sub_5B360();
    }
    sub_5B284();
    v166();
    uint64_t v167 = sub_5B41C();
    v168(v167);
    sub_5B524();
    v261[*(int *)(v169 + 32)] = v170;
  }
LABEL_69:
  uint64_t v171 = sub_5B3A4();
  double v173 = COERCE_DOUBLE(v172(v171));
  char v175 = v174;
  uint64_t v176 = v42[3];
  uint64_t v177 = v42[4];
  sub_2E38(v42, v176);
  double v178 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t))(v177 + 64))(v176, v177));
  if (v175)
  {
    uint64_t v180 = v257;
    uint64_t v181 = (uint64_t)v258;
    if (v179) {
      goto LABEL_78;
    }
  }
  else
  {
    uint64_t v180 = v257;
    uint64_t v181 = (uint64_t)v258;
    if ((v179 & 1) == 0 && v173 == v178) {
      goto LABEL_78;
    }
  }
  sub_1AC7D0();
  sub_A340();
  sub_5B334();
  sub_5B26C();
  v182();
  sub_5B540();
  uint64_t v183 = sub_1AC7F0();
  os_log_type_t v184 = sub_1ACF50();
  if (sub_5B5B4(v184))
  {
    sub_5B2D4();
    unint64_t v265 = (void *)sub_5B344();
    sub_5B48C(4.8149e-34);
    uint64_t v185 = sub_5B6C8();
    uint64_t v266 = v186(v185);
    char v267 = v187 & 1;
    sub_2694(qword_201DB8);
    uint64_t v188 = sub_1ACFC0();
    uint64_t v190 = sub_4A278(v188, v189, (uint64_t *)&v265);
    sub_5B4C4(v190);
    swift_bridgeObjectRelease();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v273);
    sub_5B4F0(&def_342E4, v183, (os_log_type_t)v181, "Corrections parse had an updated measurementValue: %s");
    sub_5B508();
    uint64_t v180 = v257;
    sub_A1F0();
    sub_A1F0();

    sub_5B324();
  }
  else
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v273);

    sub_5B360();
  }
  sub_5B284();
  v191();
  uint64_t v181 = (uint64_t)v258;
  uint64_t v192 = sub_5B3A4();
  v193(v192);
  sub_5B524();
  uint64_t v195 = &v261[*(int *)(v194 + 40)];
  *(void *)uint64_t v195 = v196;
  v195[8] = v197 & 1;
LABEL_78:
  sub_2E38(a1, a1[3]);
  uint64_t v198 = sub_5B584();
  v199(v198);
  sub_2E38(v42, v42[3]);
  uint64_t v200 = sub_5B584();
  v201(v200);
  uint64_t v202 = v250;
  uint64_t v203 = v250 + *(int *)(v249 + 48);
  sub_553FC(v180, v250, &qword_201CB8);
  sub_553FC(v181, v203, &qword_201CB8);
  uint64_t v204 = v251;
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v202, 1, v251) == 1)
  {
    sub_5B028(v181, &qword_201CB8);
    sub_5B028(v180, &qword_201CB8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v203, 1, v204) == 1)
    {
      sub_5B028(v202, &qword_201CB8);
      goto LABEL_88;
    }
  }
  else
  {
    uint64_t v205 = v243;
    sub_553FC(v202, v243, &qword_201CB8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v203, 1, v204) != 1)
    {
      uint64_t v230 = v241;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v241 + 32))(v237, v203, v204);
      sub_5B1C0(&qword_203538, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues);
      sub_5B568();
      char v231 = sub_1ACDB0();
      v232 = *(void (**)(void))(v230 + 8);
      sub_5B574();
      v232();
      sub_5B028(v181, &qword_201CB8);
      sub_5B028(v257, &qword_201CB8);
      sub_5B574();
      v232();
      sub_5B028(v202, &qword_201CB8);
      if (v231) {
        goto LABEL_88;
      }
      goto LABEL_84;
    }
    sub_5B028(v181, &qword_201CB8);
    sub_5B028(v180, &qword_201CB8);
    (*(void (**)(uint64_t, uint64_t))(v241 + 8))(v205, v204);
  }
  sub_5B028(v202, &qword_203520);
LABEL_84:
  sub_1AC7D0();
  sub_A340();
  sub_E524();
  v206();
  sub_5B540();
  char v207 = sub_1AC7F0();
  os_log_type_t v208 = sub_1ACF50();
  if (os_log_type_enabled(v207, v208))
  {
    uint64_t v209 = (uint8_t *)sub_5B2D4();
    uint64_t v259 = (void *)sub_E620();
    unint64_t v265 = v259;
    *(_DWORD *)uint64_t v209 = 136315138;
    uint64_t v258 = v209 + 4;
    uint64_t v210 = v274;
    uint64_t v211 = v275;
    sub_2E38(&v273, v274);
    uint64_t v212 = v245;
    (*(void (**)(uint64_t, uint64_t))(v211 + 80))(v210, v211);
    uint64_t v213 = sub_1ACFC0();
    unint64_t v215 = v214;
    sub_5B028(v212, &qword_201CB8);
    uint64_t v264 = sub_4A278(v213, v215, (uint64_t *)&v265);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v273);
    _os_log_impl(&def_342E4, v207, v208, "Corrections parse had an updated listPosition: %s", v209, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    sub_5B6DC();
    v216();
  }
  else
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v273);

    sub_5B6DC();
    v217();
    uint64_t v212 = v245;
  }
  uint64_t v218 = a1[3];
  uint64_t v219 = a1[4];
  sub_2E38(a1, v218);
  (*(void (**)(uint64_t, uint64_t))(v219 + 80))(v218, v219);
  sub_5B524();
  sub_5B0E0(v212, (uint64_t)&v261[*(int *)(v220 + 48)], &qword_201CB8);
LABEL_88:
  uint64_t v221 = v252;
  *(unsigned char *)uint64_t v252 = v256;
  sub_5B524();
  v221[4] = v222;
  v221[5] = sub_5B1C0(&qword_203530, (void (*)(uint64_t))type metadata accessor for SynthesizedWellnessIntent);
  uint64_t v223 = sub_B5B0(v221 + 1);
  uint64_t v224 = v261;
  sub_3540((uint64_t)v261, (uint64_t)v223);
  return sub_35A4((uint64_t)v224);
}

uint64_t sub_588D8()
{
  sub_A364();
  v1[206] = v0;
  v1[205] = v2;
  sub_2694(qword_2029B8);
  v1[207] = sub_A42C();
  uint64_t v3 = sub_1AB0A0();
  v1[208] = v3;
  sub_A19C(v3);
  v1[209] = v4;
  v1[210] = sub_A220();
  v1[211] = swift_task_alloc();
  uint64_t v5 = sub_1AB3D0();
  v1[212] = v5;
  sub_A19C(v5);
  v1[213] = v6;
  v1[214] = sub_A42C();
  uint64_t v7 = sub_1AB330();
  v1[215] = v7;
  sub_A19C(v7);
  v1[216] = v8;
  v1[217] = sub_A42C();
  uint64_t v9 = sub_1AC800();
  v1[218] = v9;
  sub_A19C(v9);
  v1[219] = v10;
  v1[220] = sub_A220();
  v1[221] = swift_task_alloc();
  v1[222] = swift_task_alloc();
  v1[223] = swift_task_alloc();
  v1[224] = swift_task_alloc();
  v1[225] = swift_task_alloc();
  v1[226] = swift_task_alloc();
  v1[227] = swift_task_alloc();
  v1[228] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_58A8C()
{
  uint64_t v1 = *(void *)(v0 + 1648);
  id v2 = [objc_allocWithZone((Class)sub_1AC600()) init];
  *(void *)(v0 + 1832) = v2;
  Class isa = sub_1AABF0().super.isa;
  [v2 setSampleIdentifier:isa];

  sub_A340();
  sub_5AE5C(v1 + 16, v0 + 944);
  if (*(void *)(v0 + 976))
  {
    uint64_t v4 = *(void *)(v0 + 1752);
    *(unsigned char *)(v0 + 1953) = *(unsigned char *)(v0 + 944);
    sub_24D80((long long *)(v0 + 952), v0 + 1112);
    *(void *)(v0 + 1912) = sub_1AC7D0();
    sub_A340();
    *(void *)(v0 + 1920) = *(void *)(v4 + 16);
    *(void *)(v0 + 1928) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v5 = sub_5B59C();
    v6(v5);
    uint64_t v7 = sub_1AC7F0();
    os_log_type_t v8 = sub_1ACF50();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (_WORD *)sub_292A0();
      sub_29368(v9);
      sub_5B474(&def_342E4, v7, v8, "LoggingCorrectionsFlow doCorrection - Updating");
      sub_A1F0();
    }
    uint64_t v10 = v0 + 16;
    uint64_t v11 = v0 + 1032;
    uint64_t v12 = *(void *)(v0 + 1752);
    uint64_t v13 = *(void *)(v0 + 1648);

    *(void *)(v0 + 1936) = *(void *)(v12 + 8);
    *(void *)(v0 + 1944) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_5B530();
    v14();
    uint64_t v15 = *(void **)(v13 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_intentHandler);
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 1608;
    *(void *)(v0 + 24) = sub_5999C;
    *(void *)(v0 + 1064) = swift_continuation_init();
    *(void *)(v0 + 1032) = _NSConcreteStackBlock;
    *(void *)(v0 + 1040) = 0x40000000;
    *(void *)(v0 + 1048) = sub_6AA8;
    *(void *)(v0 + 1056) = &unk_1F62E0;
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 1752);
    *(void *)(v0 + 1840) = sub_1AC7D0();
    sub_A340();
    *(void *)(v0 + 1848) = *(void *)(v16 + 16);
    *(void *)(v0 + 1856) = (v16 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v17 = sub_5B59C();
    v18(v17);
    uint64_t v19 = sub_1AC7F0();
    os_log_type_t v20 = sub_1ACF50();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (_WORD *)sub_292A0();
      sub_29368(v21);
      sub_5B474(&def_342E4, v19, v20, "LoggingCorrectionsFlow doCorrection - Undoing");
      sub_A1F0();
    }
    uint64_t v11 = v0 + 1072;
    uint64_t v10 = v0 + 80;
    uint64_t v22 = *(void *)(v0 + 1752);
    uint64_t v23 = *(void *)(v0 + 1648);

    *(void *)(v0 + 1864) = *(void *)(v22 + 8);
    *(void *)(v0 + 1872) = (v22 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_5B530();
    v24();
    uint64_t v15 = *(void **)(v23 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_intentHandler);
    *(void *)(v0 + 80) = v0;
    *(void *)(v0 + 120) = v0 + 1544;
    *(void *)(v0 + 88) = sub_58E6C;
    *(void *)(v0 + 1104) = swift_continuation_init();
    *(void *)(v0 + 1072) = _NSConcreteStackBlock;
    *(void *)(v0 + 1080) = 0x40000000;
    *(void *)(v0 + 1088) = sub_6AA8;
    *(void *)(v0 + 1096) = &unk_1F62F8;
  }
  [v15 handleDeleteHealthSample:v2 completion:v11];
  return _swift_continuation_await(v10);
}

uint64_t sub_58E6C()
{
  sub_A364();
  sub_472B4();
  uint64_t v1 = *v0;
  sub_A304();
  *id v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_58F1C()
{
  uint64_t v37 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1848);
  uint64_t v2 = *(void *)(v0 + 1840);
  uint64_t v3 = *(void *)(v0 + 1816);
  uint64_t v4 = *(void *)(v0 + 1744);
  uint64_t v5 = *(void **)(v0 + 1544);
  *(void *)(v0 + 1880) = v5;
  sub_A340();
  v1(v3, v2, v4);
  uint64_t v6 = v5;
  uint64_t v7 = sub_1AC7F0();
  os_log_type_t v8 = sub_1ACF50();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)sub_A4B0();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    *(void *)(v0 + 1576) = v6;
    uint64_t v11 = v6;
    sub_1ACFE0();
    *uint64_t v10 = v6;

    _os_log_impl(&def_342E4, v7, v8, "LoggingCorrectionsFlow Received intent response: %@", v9, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
  }
  uint64_t v12 = (*(uint64_t (**)(void, void))(v0 + 1864))(*(void *)(v0 + 1816), *(void *)(v0 + 1744));
  uint64_t v13 = *(uint64_t (**)(void))((char *)&stru_20.maxprot + (swift_isaMask & *v6));
  if (((uint64_t (*)(uint64_t))v13)(v12) != 4)
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1848);
    uint64_t v20 = *(void *)(v0 + 1840);
    uint64_t v21 = *(void *)(v0 + 1800);
    uint64_t v22 = *(void *)(v0 + 1744);
    sub_A340();
    v19(v21, v20, v22);
    uint64_t v23 = v6;
    uint64_t v24 = sub_1AC7F0();
    os_log_type_t v25 = sub_1ACF60();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 1864);
    uint64_t v28 = *(void *)(v0 + 1800);
    uint64_t v29 = *(void *)(v0 + 1744);
    if (v26)
    {
      sub_5B2D4();
      uint64_t v36 = sub_5B344();
      *(_DWORD *)uint64_t v27 = 136315138;
      *(void *)(v0 + 1592) = v13();
      uint64_t v30 = sub_1ACE00();
      *(void *)(v0 + 1600) = sub_4A278(v30, v31, &v36);
      sub_1ACFE0();
      swift_bridgeObjectRelease();

      sub_5B4F0(&def_342E4, v24, v25, "Intent handler failed with code: %s");
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      v27(v28, v29);
    }
    else
    {

      uint64_t v32 = sub_5B568();
      ((void (*)(uint64_t))v27)(v32);
    }
    uint64_t v33 = *(void **)(v0 + 1832);
    sub_9B48(*(void *)(v0 + 1648) + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider, v0 + 464);
    sub_9BA4();
    sub_1AB120();

    sub_9BF0(v0 + 464);
    sub_5B238();
    sub_5B6F0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_292D4();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v14 = *(void *)(v0 + 1648);
  uint64_t v15 = OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider;
  *(void *)(v0 + 1888) = OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider;
  sub_2E38((void *)(v14 + v15 + 80), *(void *)(v14 + v15 + 104));
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 1896) = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_593D8;
  sub_292D4();
  return sub_13844C();
}

uint64_t sub_593D8(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v5 + 1904) = a1;
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

void sub_594D4()
{
  uint64_t v17 = (void *)v0[235];
  uint64_t v16 = (void *)v0[229];
  uint64_t v1 = v0[217];
  uint64_t v2 = v0[216];
  uint64_t v3 = v0[215];
  id v14 = (id)v0[238];
  uint64_t v4 = v0[211];
  uint64_t v5 = v0[209];
  uint64_t v6 = v0[208];
  uint64_t v7 = v0[206];
  uint64_t v15 = (void *)(v7 + v0[236]);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for CorrectionsExitValue.success(_:), v3);
  uint64_t v8 = v7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionsExitValue;
  sub_5B69C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 40))(v8, v1, v3);
  swift_endAccess();
  sub_1AB070();
  sub_E524();
  v9();
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  id v10 = [v14 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_2E38(v15, v15[3]);
  v0[204] = sub_1AAF40();
  sub_1AAEF0();
  sub_1AAF70();
  sub_1AB130();
  swift_release();
  swift_release();

  sub_E558();
  v11();
  sub_5B238();
  sub_5B6F0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_292D4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_597AC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[231];
  uint64_t v2 = v0[230];
  uint64_t v3 = v0[226];
  uint64_t v4 = v0[218];
  sub_A340();
  v1(v3, v2, v4);
  uint64_t v5 = (void *)sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF60();
  if (sub_29300(v6))
  {
    uint64_t v7 = (_WORD *)sub_292A0();
    sub_29368(v7);
    sub_A7FC(&def_342E4, v8, v9, "LoggingCorrectionsFlow Error executing pattern");
    sub_A1F0();
  }
  uint64_t v10 = v0[236];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[233];
  uint64_t v17 = (void *)v0[229];
  uint64_t v18 = (void *)v0[235];
  uint64_t v12 = v0[226];
  uint64_t v13 = v0[218];
  uint64_t v14 = v0[206];

  v11(v12, v13);
  sub_9B48(v14 + v10, (uint64_t)(v0 + 38));
  sub_9BA4();
  sub_1AAF70();
  sub_9BF0((uint64_t)(v0 + 38));
  sub_1AB130();

  swift_release();
  sub_5B238();
  sub_5B6F0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v15();
}

uint64_t sub_5999C()
{
  sub_A364();
  sub_472B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_59A4C()
{
  uint64_t v88 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1920);
  uint64_t v2 = *(void *)(v0 + 1912);
  uint64_t v3 = *(void *)(v0 + 1784);
  uint64_t v4 = *(void *)(v0 + 1744);
  uint64_t v5 = *(void **)(v0 + 1608);
  sub_A340();
  v1(v3, v2, v4);
  os_log_type_t v6 = v5;
  uint64_t v7 = sub_1AC7F0();
  os_log_type_t v8 = sub_1ACF50();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)sub_A4B0();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    *(void *)(v0 + 1552) = v6;
    uint64_t v11 = v6;
    sub_1ACFE0();
    *uint64_t v10 = v6;

    _os_log_impl(&def_342E4, v7, v8, "LoggingCorrectionsFlow Received intent response: %@", v9, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
  }
  uint64_t v12 = (*(uint64_t (**)(void, void))(v0 + 1936))(*(void *)(v0 + 1784), *(void *)(v0 + 1744));
  uint64_t v13 = *(uint64_t (**)(void))((char *)&stru_20.maxprot + (swift_isaMask & *v6));
  if (((uint64_t (*)(uint64_t))v13)(v12) == 4)
  {
    uint64_t v14 = *(void *)(v0 + 1656);
    uint64_t v15 = *(void *)(v0 + 1648) + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionInput;
    sub_A340();
    sub_553FC(v15, v14, qword_2029B8);
    uint64_t v16 = sub_1AB3F0();
    LODWORD(v15) = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v14, 1, v16);
    sub_5B028(v14, qword_2029B8);
    uint64_t v17 = *(void (**)(uint64_t))(v0 + 1920);
    uint64_t v84 = v6;
    if (v15 == 1)
    {
      uint64_t v18 = *(void *)(v0 + 1768);
      sub_A340();
      uint64_t v19 = sub_5B558();
      v17(v19);
      uint64_t v20 = sub_1AC7F0();
      os_log_type_t v21 = sub_1ACF60();
      if (sub_29300(v21))
      {
        uint64_t v22 = (uint8_t *)sub_292A0();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl(&def_342E4, v20, (os_log_type_t)v18, "Expected correctionInput, but none was found", v22, 2u);
        sub_A1F0();
      }
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 1936);
      uint64_t v24 = *(void **)(v0 + 1832);
      uint64_t v25 = *(void *)(v0 + 1768);
      uint64_t v26 = *(void *)(v0 + 1744);
      uint64_t v27 = *(void *)(v0 + 1648);

      v23(v25, v26);
      sub_9B48(v27 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider, v0 + 784);
      sub_9BA4();
      sub_1AB120();

      sub_9BF0(v0 + 784);
      uint64_t v28 = v0 + 1112;
    }
    else
    {
      uint64_t v81 = (long long *)(v0 + 1152);
      uint64_t v83 = (const void *)(v0 + 144);
      uint64_t v80 = (long long *)(v0 + 1192);
      uint64_t v40 = *(void *)(v0 + 1736);
      uint64_t v41 = *(void *)(v0 + 1728);
      uint64_t v42 = *(void *)(v0 + 1720);
      uint64_t v43 = *(void *)(v0 + 1648);
      (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v40, enum case for CorrectionsExitValue.success(_:), v42);
      uint64_t v44 = v43 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionsExitValue;
      sub_5B69C();
      uint64_t v45 = v42;
      __int16 v46 = (void *)(v0 + 992);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 40))(v44, v40, v45);
      swift_endAccess();
      sub_A340();
      uint64_t v47 = sub_5B558();
      v17(v47);
      uint64_t v48 = v0 + 1112;
      uint64_t v49 = sub_5B568();
      sub_E3FC(v49, v50);
      __int16 v51 = sub_1AC7F0();
      os_log_type_t v52 = sub_1ACF50();
      BOOL v53 = os_log_type_enabled(v51, v52);
      uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v0 + 1936);
      if (v53)
      {
        char v55 = *(unsigned char *)(v0 + 1953);
        uint64_t v79 = *(void *)(v0 + 1776);
        uint64_t v78 = *(void *)(v0 + 1744);
        uint64_t v77 = *(void (**)(uint64_t, uint64_t))(v0 + 1936);
        uint64_t v56 = swift_slowAlloc();
        v87[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 136315394;
        *(unsigned char *)(v0 + 1952) = v55;
        uint64_t v57 = sub_1ACE00();
        *(void *)(v0 + 1568) = sub_4A278(v57, v58, v87);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        *(_WORD *)(v56 + 12) = 2080;
        uint64_t v59 = *(void *)(v0 + 1016);
        sub_2E38(v46, v59);
        uint64_t v60 = *(void *)(v59 - 8);
        sub_A42C();
        (*(void (**)(void))(v60 + 16))();
        uint64_t v61 = sub_1ACE10();
        unint64_t v63 = v62;
        swift_task_dealloc();
        *(void *)(v0 + 1560) = sub_4A278(v61, v63, v87);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v46);
        _os_log_impl(&def_342E4, v51, v52, "LoggingCorrectionsFlow Pushing on LogHealthKitQuantity flow with updated identifier [%s] and intent [%s]", (uint8_t *)v56, 0x16u);
        swift_arrayDestroy();
        uint64_t v48 = v0 + 1112;
        sub_A1F0();
        sub_A1F0();

        v77(v79, v78);
      }
      else
      {
        uint64_t v66 = *(void *)(v0 + 1776);
        uint64_t v67 = *(void *)(v0 + 1744);
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v46);

        v54(v66, v67);
      }
      uint64_t v68 = *(void **)(v0 + 1832);
      uint64_t v69 = *(void *)(v0 + 1648);
      char v70 = *(unsigned char *)(v0 + 1953);
      sub_E3FC(v48, (uint64_t)v80);
      sub_E3FC(v69 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_flowConfig, (uint64_t)v81);
      sub_9B48(v69 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider, (uint64_t)v83);
      uint64_t v86 = 0;
      memset(v85, 0, sizeof(v85));
      uint64_t v71 = (objc_class *)sub_1AC620();
      memset(v87, 0, 40);
      id v72 = objc_allocWithZone(v71);
      uint64_t v73 = sub_1AC610();
      type metadata accessor for LogHealthKitQuantityFlow();
      uint64_t v74 = swift_allocObject();
      *(void *)(v0 + 1584) = sub_5AE94(v70, v80, v81, v83, v73, (uint64_t)v85, v74);
      sub_5B1C0(&qword_203510, (void (*)(uint64_t))type metadata accessor for LogHealthKitQuantityFlow);
      sub_1AAF70();
      sub_1AB130();

      swift_release();
      swift_release();

      uint64_t v28 = v48;
    }
  }
  else
  {
    uint64_t v29 = v0 + 624;
    uint64_t v30 = *(void (**)(uint64_t))(v0 + 1920);
    sub_A340();
    uint64_t v31 = sub_5B558();
    v30(v31);
    uint64_t v32 = v6;
    uint64_t v33 = sub_1AC7F0();
    os_log_type_t v34 = sub_1ACF60();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = *(void (**)(_DWORD *, uint64_t))(v0 + 1936);
    uint64_t v37 = *(_DWORD **)(v0 + 1760);
    if (v35)
    {
      uint64_t v82 = *(void *)(v0 + 1744);
      sub_5B2D4();
      v87[0] = sub_5B344();
      *uint64_t v37 = 136315138;
      *(void *)(v0 + 1624) = v13();
      uint64_t v38 = sub_1ACE00();
      *(void *)(v0 + 1616) = sub_4A278(v38, v39, v87);
      uint64_t v29 = v0 + 624;
      sub_1ACFE0();
      swift_bridgeObjectRelease();

      sub_5B4F0(&def_342E4, v33, v34, "Intent handler failed with code: %s");
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      v36(v37, v82);
    }
    else
    {
      uint64_t v64 = *(void *)(v0 + 1744);

      v36(v37, v64);
    }
    unint64_t v65 = *(void **)(v0 + 1832);
    sub_9B48(*(void *)(v0 + 1648) + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider, v29);
    sub_9BA4();
    sub_1AB120();

    sub_9BF0(v29);
    uint64_t v28 = v0 + 1112;
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v28);
  sub_5B238();
  sub_5B6F0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v75();
}

uint64_t sub_5A448()
{
  sub_D895C();
  __int16 v1 = v0;
  unint64_t v2 = (unint64_t)sub_D8D30();
  if (v2 >> 62) {
    uint64_t v3 = sub_1AD170();
  }
  else {
    uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  int v4 = sub_D8704();
  sub_D8424();
  BOOL v8 = v1 != 270 || v3 != 0 || v4 != 61;
  return (v5 & 1) == 0 || v8;
}

uint64_t sub_5A4E8()
{
  sub_5B208(v0 + 16);
  sub_1AB330();
  sub_20688();
  sub_E558();
  v1();
  swift_bridgeObjectRelease();
  sub_1AAC20();
  sub_20688();
  sub_E558();
  v2();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_lastSavedSampleIntent);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_flowConfig);
  sub_E4B8(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider);
  swift_unknownObjectRelease();
  sub_5B028(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionInput, qword_2029B8);
  return v0;
}

uint64_t sub_5A5EC()
{
  sub_5A4E8();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_5A644()
{
  return type metadata accessor for LoggingCorrectionsFlow();
}

uint64_t type metadata accessor for LoggingCorrectionsFlow()
{
  uint64_t result = qword_203368;
  if (!qword_203368) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_5A694()
{
  sub_1AB330();
  if (v0 <= 0x3F)
  {
    sub_1AAC20();
    if (v1 <= 0x3F)
    {
      sub_28C00();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

unsigned char *storeEnumTagSinglePayload for LoggingCorrectionsFlow.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x5A8A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LoggingCorrectionsFlow.State()
{
  return &type metadata for LoggingCorrectionsFlow.State;
}

uint64_t destroy for LoggingCorrectionsFlow.CorrectionsTask(uint64_t result)
{
  if (*(void *)(result + 32) >= 0xFFFFFFFFuLL) {
    return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(result + 8);
  }
  return result;
}

uint64_t initializeWithCopy for LoggingCorrectionsFlow.CorrectionsTask(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 32);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v4 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v3;
    *(void *)(a1 + 40) = v4;
    (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  }
  return a1;
}

uint64_t assignWithCopy for LoggingCorrectionsFlow.CorrectionsTask(uint64_t a1, long long *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  unint64_t v5 = *((void *)a2 + 4);
  if (*(void *)(a1 + 32) < 0xFFFFFFFFuLL)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v6 = *((void *)a2 + 4);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      (**(void (***)(uint64_t *, uint64_t))(v6 - 8))(v4, (uint64_t)a2 + 8);
      return a1;
    }
LABEL_7:
    long long v7 = *a2;
    long long v8 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)a1 = v7;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v4);
    goto LABEL_7;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  sub_577C(v4, (uint64_t *)a2 + 1);
  return a1;
}

__n128 initializeWithTake for LoggingCorrectionsFlow.CorrectionsTask(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LoggingCorrectionsFlow.CorrectionsTask(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  uint64_t v4 = (_OWORD *)(a1 + 8);
  if (*(void *)(a2 + 32) < 0xFFFFFFFFuLL)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoggingCorrectionsFlow.CorrectionsTask(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LoggingCorrectionsFlow.CorrectionsTask(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

uint64_t sub_5ABA4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double sub_5ABBC(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 32) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for LoggingCorrectionsFlow.CorrectionsTask()
{
  return &type metadata for LoggingCorrectionsFlow.CorrectionsTask;
}

unint64_t sub_5AC00()
{
  unint64_t result = qword_2034F0[0];
  if (!qword_2034F0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_2034F0);
  }
  return result;
}

uint64_t sub_5AC4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionsExitValue;
  swift_beginAccess();
  uint64_t v4 = sub_1AB330();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_5ACD4(uint64_t a1)
{
  return sub_55D88(a1) & 1;
}

uint64_t sub_5ACFC()
{
  return 0;
}

uint64_t sub_5AD18()
{
  return sub_56B8C();
}

uint64_t sub_5AD3C()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_24C20;
  return sub_56668();
}

uint64_t sub_5ADD8()
{
  type metadata accessor for LoggingCorrectionsFlow();

  return sub_1AAFB0();
}

uint64_t sub_5AE14()
{
  return sub_5B1C0(&qword_203508, (void (*)(uint64_t))type metadata accessor for LoggingCorrectionsFlow);
}

uint64_t sub_5AE5C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_5AE94(char a1, long long *a2, long long *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(unsigned char *)(a7 + 336) = 3;
  *(unsigned char *)(a7 + 16) = a1;
  sub_24D80(a2, a7 + 24);
  sub_E3FC((uint64_t)a3, a7 + 64);
  sub_9B48((uint64_t)a4, a7 + 104);
  *(void *)(a7 + 264) = a5;
  sub_24D80(a3, (uint64_t)v15);
  memcpy(v14, a4, sizeof(v14));
  if (*(void *)(a6 + 24))
  {
    sub_E4B8((uint64_t)v14);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v15);
    sub_24D80((long long *)a6, (uint64_t)&v16);
  }
  else
  {
    uint64_t v17 = &type metadata for CorrectionsFlowProvider;
    uint64_t v18 = &off_1F75D0;
    uint64_t v12 = swift_allocObject();
    *(void *)&long long v16 = v12;
    sub_24D80(v15, v12 + 16);
    memcpy((void *)(v12 + 56), v14, 0xA0uLL);
    sub_5B028(a6, &qword_203518);
  }
  sub_24D80(&v16, a7 + 272);
  *(void *)(a7 + 312) = 0;
  *(void *)(a7 + 320) = 0;
  *(void *)(a7 + 328) = 1;
  return a7;
}

uint64_t sub_5AFD0()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 96);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 136);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 176);

  return _swift_deallocObject(v0, 216, 7);
}

uint64_t sub_5B028(uint64_t a1, uint64_t *a2)
{
  sub_2694(a2);
  sub_20688();
  sub_E558();
  v3();
  return a1;
}

uint64_t sub_5B078(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(qword_2029B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_5B0E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2694(a3);
  sub_20688();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
  return a2;
}

unint64_t sub_5B13C()
{
  unint64_t result = qword_203548;
  if (!qword_203548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_203548);
  }
  return result;
}

uint64_t sub_5B188(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_5B1C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_5B208(uint64_t a1)
{
  return a1;
}

uint64_t sub_5B238()
{
  return *(void *)(v0 + 1824);
}

uint64_t sub_5B298()
{
  uint64_t v1 = v0[3];
  sub_2E38(v0, v1);
  return v1;
}

uint64_t sub_5B2D4()
{
  return swift_slowAlloc();
}

uint64_t sub_5B2F0(void *a1)
{
  sub_2E38(a1, v1);
  return v1;
}

uint64_t sub_5B344()
{
  return swift_slowAlloc();
}

uint64_t sub_5B360()
{
  return v0;
}

uint64_t sub_5B38C()
{
  return v0;
}

uint64_t sub_5B3A4()
{
  uint64_t v1 = v0[3];
  sub_2E38(v0, v1);
  return v1;
}

uint64_t sub_5B3E0()
{
  uint64_t v1 = v0[3];
  sub_2E38(v0, v1);
  return v1;
}

uint64_t sub_5B41C()
{
  uint64_t v1 = v0[3];
  sub_2E38(v0, v1);
  return v1;
}

uint64_t sub_5B458()
{
  return sub_1AD2F0();
}

void sub_5B474(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

void *sub_5B48C(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v2 - 376) = v1 + 1;
  return sub_2E38((void *)(v2 - 128), *(void *)(v2 - 104));
}

uint64_t sub_5B4C4(uint64_t a1)
{
  *(void *)(v1 - 272) = a1;
  return sub_1ACFE0();
}

void sub_5B4F0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_5B508()
{
  return swift_arrayDestroy();
}

uint64_t sub_5B540()
{
  return sub_E3FC(v0, v1 - 128);
}

uint64_t sub_5B558()
{
  return v0;
}

uint64_t sub_5B568()
{
  return v0;
}

uint64_t sub_5B584()
{
  return v0;
}

uint64_t sub_5B59C()
{
  return v0;
}

BOOL sub_5B5B4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_5B5D0()
{
  return v0;
}

uint64_t sub_5B5E4(uint64_t a1)
{
  *(void *)(v1 - 152) = a1;
  return v1 - 152;
}

void *sub_5B5F8(void *a1)
{
  return sub_2E38(a1, v1);
}

uint64_t sub_5B618()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_5B630()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_5B648(uint64_t a1)
{
  *(void *)(v1 - 224) = a1;
  return v1 - 224;
}

uint64_t sub_5B65C(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v1);
}

uint64_t sub_5B69C()
{
  return swift_beginAccess();
}

uint64_t sub_5B6B4()
{
  return v0;
}

uint64_t sub_5B6C8()
{
  return v0;
}

uint64_t sub_5B6FC()
{
  sub_A364();
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = v2;
  *(void *)(v0 + 48) = v3;
  *(unsigned char *)(v0 + 248) = v4;
  uint64_t v5 = sub_1AC800();
  *(void *)(v0 + 72) = v5;
  sub_A19C(v5);
  *(void *)(v0 + 80) = v6;
  *(void *)(v0 + 88) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

void sub_5B790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_6F9A0();
  a25 = v27;
  a26 = v28;
  sub_6FE58();
  a24 = v26;
  int v29 = *(unsigned __int8 *)(v26 + 248);
  if (!(!v31 & v30))
  {
    switch(*(unsigned char *)(v26 + 248))
    {
      case 'Y':
        os_log_type_t v34 = (void *)swift_task_alloc();
        *(void *)(v26 + 96) = v34;
        *os_log_type_t v34 = v26;
        v34[1] = sub_5C254;
        sub_6F74C();
        sub_6F544();
        sub_5D2A8();
        return;
      case 'Z':
        uint64_t v47 = (void *)swift_task_alloc();
        *(void *)(v26 + 104) = v47;
        *uint64_t v47 = v26;
        v47[1] = sub_5C330;
        sub_6F74C();
        sub_6F544();
        sub_5D870();
        return;
      case '[':
      case '\\':
      case '^':
      case '_':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'h':
      case 'j':
        goto LABEL_23;
      case ']':
        uint64_t v49 = (void *)swift_task_alloc();
        *(void *)(v26 + 112) = v49;
        *uint64_t v49 = v26;
        v49[1] = sub_5C40C;
        sub_6F74C();
        sub_6F544();
        sub_5DD30();
        return;
        __int16 v51 = (void *)swift_task_alloc();
        *(void *)(v26 + 120) = v51;
        void *v51 = v26;
        v51[1] = sub_5C4E8;
        sub_6F74C();
        sub_6F544();
        sub_5E584();
        return;
      case 'a':
        BOOL v53 = (void *)swift_task_alloc();
        *(void *)(v26 + 128) = v53;
        *BOOL v53 = v26;
        v53[1] = sub_5C5C4;
        sub_6F74C();
        sub_6F544();
        sub_5EFD4();
        return;
      case 'g':
        char v55 = (void *)swift_task_alloc();
        *(void *)(v26 + 136) = v55;
        *char v55 = v26;
        v55[1] = sub_5C6A0;
        sub_6F74C();
        sub_6F544();
        sub_5F494();
        return;
      case 'i':
        uint64_t v57 = (void *)swift_task_alloc();
        *(void *)(v26 + 144) = v57;
        void *v57 = v26;
        v57[1] = sub_5C77C;
        sub_6F74C();
        sub_6F544();
        sub_5FAF4();
        return;
      case 'k':
        uint64_t v59 = (void *)swift_task_alloc();
        *(void *)(v26 + 152) = v59;
        *uint64_t v59 = v26;
        v59[1] = sub_5C858;
        sub_6F74C();
        sub_6F544();
        sub_60C7C();
        return;
      default:
        JUMPOUT(0);
    }
  }
  switch(v29)
  {
    case 159:
      uint64_t v61 = (void *)swift_task_alloc();
      *(void *)(v26 + 192) = v61;
      *uint64_t v61 = v26;
      v61[1] = sub_5CCA4;
      sub_6F74C();
      sub_6F544();
      sub_62B78();
      break;
    case 162:
      unint64_t v63 = (void *)swift_task_alloc();
      *(void *)(v26 + 200) = v63;
      *unint64_t v63 = v26;
      v63[1] = sub_5CD80;
      sub_6F74C();
      sub_6F544();
      sub_630D0();
      break;
    case 170:
      unint64_t v65 = (void *)swift_task_alloc();
      *(void *)(v26 + 208) = v65;
      *unint64_t v65 = v26;
      v65[1] = sub_5CE5C;
      sub_6F74C();
      sub_6F544();
      sub_64264();
      break;
    case 173:
      uint64_t v67 = (void *)swift_task_alloc();
      *(void *)(v26 + 216) = v67;
      *uint64_t v67 = v26;
      v67[1] = sub_5CF38;
      sub_6F74C();
      sub_6F544();
      sub_647BC();
      break;
    case 174:
      uint64_t v69 = (void *)swift_task_alloc();
      *(void *)(v26 + 224) = v69;
      *uint64_t v69 = v26;
      v69[1] = sub_5D014;
      sub_6F74C();
      sub_6F544();
      sub_64C7C();
      break;
    case 184:
      uint64_t v71 = (void *)swift_task_alloc();
      *(void *)(v26 + 232) = v71;
      *uint64_t v71 = v26;
      v71[1] = sub_5D0F0;
      sub_6F74C();
      sub_6F544();
      sub_6558C();
      break;
    case 193:
      uint64_t v32 = (void *)swift_task_alloc();
      *(void *)(v26 + 240) = v32;
      *uint64_t v32 = v26;
      v32[1] = sub_5D1CC;
      sub_6F74C();
      sub_6F544();
      sub_65A4C();
      break;
    default:
LABEL_23:
      sub_1AC7D0();
      sub_A340();
      sub_4788C();
      sub_703C4();
      v36();
      uint64_t v37 = sub_1AC7F0();
      os_log_type_t v38 = sub_1ACF60();
      BOOL v39 = os_log_type_enabled(v37, v38);
      uint64_t v40 = *(void *)(v26 + 80);
      uint64_t v41 = *(void *)(v26 + 88);
      uint64_t v42 = *(void *)(v26 + 72);
      if (v39)
      {
        char v43 = *(unsigned char *)(v26 + 248);
        uint64_t v74 = *(void *)(v26 + 88);
        uint64_t v44 = (uint8_t *)sub_A4B0();
        a14 = sub_E620();
        *(_DWORD *)uint64_t v44 = 136315138;
        unint64_t v45 = sub_2F2B8(v43);
        *(void *)(v26 + 40) = sub_4A278(v45, v46, &a14);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        _os_log_impl(&def_342E4, v37, v38, "No pattern execution defined for %s", v44, 0xCu);
        swift_arrayDestroy();
        sub_A1F0();
        sub_A1F0();

        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v74, v42);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
      }
      char v73 = *(unsigned char *)(v26 + 248);
      a14 = 0;
      a15 = 0xE000000000000000;
      sub_1AD080(35);
      swift_bridgeObjectRelease();
      a14 = 0xD000000000000021;
      a15 = 0x80000000001BAA40;
      v75._countAndFlagsBits = sub_2F2B8(v73);
      sub_1ACE70(v75);
      swift_bridgeObjectRelease();
      sub_1AD160();
      sub_6F544();
      break;
  }
}

uint64_t sub_5C254()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5C330()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5C40C()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5C4E8()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5C5C4()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5C6A0()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5C77C()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5C858()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5C934()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5CA10()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5CAEC()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5CBC8()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5CCA4()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5CD80()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5CE5C()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5CF38()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5D014()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5D0F0()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5D1CC()
{
  sub_A364();
  sub_6F4B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = sub_6F70C();
  return v4(v3);
}

uint64_t sub_5D2A8()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  v0[16] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E20);
  v0[17] = v6;
  sub_53D4(v6);
  uint64_t v7 = sub_A220();
  uint64_t v8 = sub_6FF98(v7);
  uint64_t v9 = sub_6FF80(v8);
  v0[20] = v9;
  sub_A19C(v9);
  v0[21] = v10;
  uint64_t v11 = sub_A220();
  uint64_t v12 = sub_6FEBC(v11);
  uint64_t v13 = sub_6FEA4(v12);
  v0[25] = sub_6FD3C(v13);
  uint64_t v14 = sub_2694(&qword_201CC8);
  sub_53D4(v14);
  uint64_t v15 = sub_A220();
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201E10);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  uint64_t v18 = sub_6FDB0(v17);
  uint64_t v19 = sub_6FDF8(v18);
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  v0[33] = sub_6FD00(v21);
  sub_A4F0();
  return _swift_task_switch(v22, v23, v24);
}

#error "5D5B0: call analysis failed (funcsize=214)"

uint64_t sub_5D768()
{
  sub_47D74();
  sub_E588();
  sub_6F4D0();
  uint64_t v3 = v2;
  sub_A304();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  swift_task_dealloc();
  sub_6FD18();
  if (v0)
  {
    swift_errorRelease();
    swift_task_dealloc();
  }
  else
  {
    sub_6FF68();
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_5D870()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  v0[16] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E20);
  v0[17] = v6;
  sub_53D4(v6);
  uint64_t v7 = sub_A220();
  uint64_t v8 = sub_6FF98(v7);
  uint64_t v9 = sub_6FF80(v8);
  v0[20] = v9;
  sub_A19C(v9);
  v0[21] = v10;
  uint64_t v11 = sub_A220();
  uint64_t v12 = sub_6FEBC(v11);
  uint64_t v13 = sub_6FEA4(v12);
  v0[25] = sub_6FD3C(v13);
  uint64_t v14 = sub_2694(&qword_201CC8);
  sub_53D4(v14);
  uint64_t v15 = sub_A220();
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201E10);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  uint64_t v18 = sub_6FDB0(v17);
  uint64_t v19 = sub_6FDF8(v18);
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  v0[33] = sub_6FD00(v21);
  sub_A4F0();
  return _swift_task_switch(v22, v23, v24);
}

#error "5DB78: call analysis failed (funcsize=214)"

uint64_t sub_5DD30()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  v0[16] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E20);
  v0[17] = v6;
  sub_53D4(v6);
  uint64_t v7 = sub_A220();
  uint64_t v8 = sub_6FF98(v7);
  uint64_t v9 = sub_6FF80(v8);
  v0[20] = v9;
  sub_A19C(v9);
  v0[21] = v10;
  uint64_t v11 = sub_A220();
  uint64_t v12 = sub_6FEBC(v11);
  uint64_t v13 = sub_6FEA4(v12);
  v0[25] = sub_6FD3C(v13);
  uint64_t v14 = sub_2694(&qword_201CC8);
  sub_53D4(v14);
  uint64_t v15 = sub_A220();
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201E10);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  uint64_t v18 = sub_6FDB0(v17);
  uint64_t v19 = sub_6FDF8(v18);
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  v0[33] = sub_6FD00(v21);
  sub_A4F0();
  return _swift_task_switch(v22, v23, v24);
}

#error "5E038: call analysis failed (funcsize=214)"

uint64_t sub_5E1F0()
{
  sub_47D74();
  sub_E588();
  sub_6F4D0();
  uint64_t v3 = v2;
  sub_A304();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  swift_task_dealloc();
  sub_6FD18();
  if (v0)
  {
    swift_errorRelease();
    swift_task_dealloc();
  }
  else
  {
    sub_6FF68();
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_5E2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_70474();
  uint64_t v38 = v20[37];
  swift_release();
  uint64_t v31 = v20[26];
  uint64_t v32 = v20[25];
  uint64_t v33 = v20[24];
  uint64_t v34 = v20[23];
  uint64_t v21 = v20[19];
  uint64_t v35 = v20[22];
  uint64_t v36 = v20[18];
  uint64_t v37 = v20[16];
  sub_6F194(v20[27], &qword_201CC8);
  sub_6F194(v21, &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v20 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_292D4();
  return v24(v22, v23, v24, v25, v26, v27, v28, v29, a9, v31, v32, v33, v34, v35, v36, v37, v38, a18, a19, a20);
}

uint64_t sub_5E448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  swift_release();
  uint64_t v29 = v18[26];
  uint64_t v30 = v18[25];
  uint64_t v31 = v18[24];
  uint64_t v32 = v18[23];
  uint64_t v19 = v18[19];
  uint64_t v33 = v18[22];
  uint64_t v34 = v18[18];
  uint64_t v35 = v18[16];
  sub_6F194(v18[27], &qword_201CC8);
  sub_6F194(v19, &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v18 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_6FDE8();
  sub_6F544();
  return v22(v20, v21, v22, v23, v24, v25, v26, v27, v29, v30, v31, v32, v33, v34, v35, a16, a17, a18);
}

uint64_t sub_5E584()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  v0[16] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E28);
  sub_53D4(v6);
  v0[17] = sub_A42C();
  uint64_t v7 = sub_2694(&qword_201E20);
  v0[18] = v7;
  sub_53D4(v7);
  uint64_t v8 = sub_A220();
  v0[20] = sub_70200(v8);
  uint64_t v9 = sub_1AABD0();
  v0[21] = v9;
  sub_A19C(v9);
  v0[22] = v10;
  uint64_t v11 = sub_A220();
  uint64_t v12 = sub_6FEA4(v11);
  uint64_t v13 = sub_6FD3C(v12);
  v0[26] = sub_700FC(v13);
  uint64_t v14 = sub_2694(&qword_201CC8);
  sub_53D4(v14);
  v0[27] = sub_A220();
  v0[28] = swift_task_alloc();
  uint64_t v15 = sub_2694(&qword_201E10);
  sub_53D4(v15);
  uint64_t v16 = sub_A220();
  uint64_t v17 = sub_6FDF8(v16);
  uint64_t v18 = sub_6FD78(v17);
  uint64_t v19 = sub_6FC5C(v18);
  uint64_t v20 = sub_6FD00(v19);
  v0[34] = sub_70040(v20);
  sub_A4F0();
  return _swift_task_switch(v21, v22, v23);
}

#error "5E954: call analysis failed (funcsize=321)"

uint64_t sub_5EC24()
{
  sub_47D74();
  sub_E588();
  sub_6F4D0();
  uint64_t v4 = v3;
  sub_A304();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  swift_task_dealloc();
  sub_6FD18();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v4 + 304) = v0;
  }
  swift_task_dealloc();
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_5ED34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_70474();
  uint64_t v38 = v20[38];
  swift_release();
  uint64_t v21 = v20[28];
  sub_70334();
  uint64_t v34 = v22;
  uint64_t v35 = v20[23];
  uint64_t v23 = v20[20];
  uint64_t v24 = v20[17];
  uint64_t v36 = v20[19];
  uint64_t v37 = v20[16];
  sub_6F194(v21, &qword_201CC8);
  sub_6F194(v24, &qword_201E28);
  sub_6F194(v23, &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v20 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_292D4();
  return v27(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12, v34, v35, v36, v37, v38, a18, a19, a20);
}

uint64_t sub_5EE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_70474();
  swift_release();
  uint64_t v21 = v20[28];
  sub_702C8();
  uint64_t v34 = v22;
  uint64_t v35 = v20[23];
  uint64_t v23 = v20[20];
  uint64_t v24 = v20[17];
  uint64_t v36 = v20[19];
  uint64_t v37 = v20[16];
  sub_6F194(v21, &qword_201CC8);
  sub_6F194(v24, &qword_201E28);
  sub_6F194(v23, &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v20 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_6FDE8();
  sub_292D4();
  return v27(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12, a13, v34, v35, v36, v37, a18, a19, a20);
}

uint64_t sub_5EFD4()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  v0[16] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E20);
  v0[17] = v6;
  sub_53D4(v6);
  uint64_t v7 = sub_A220();
  uint64_t v8 = sub_6FF98(v7);
  uint64_t v9 = sub_6FF80(v8);
  v0[20] = v9;
  sub_A19C(v9);
  v0[21] = v10;
  uint64_t v11 = sub_A220();
  uint64_t v12 = sub_6FEBC(v11);
  uint64_t v13 = sub_6FEA4(v12);
  v0[25] = sub_6FD3C(v13);
  uint64_t v14 = sub_2694(&qword_201CC8);
  sub_53D4(v14);
  uint64_t v15 = sub_A220();
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201E10);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  uint64_t v18 = sub_6FDB0(v17);
  uint64_t v19 = sub_6FDF8(v18);
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  v0[33] = sub_6FD00(v21);
  sub_A4F0();
  return _swift_task_switch(v22, v23, v24);
}

#error "5F2DC: call analysis failed (funcsize=214)"

uint64_t sub_5F494()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  uint64_t v6 = sub_A42C();
  uint64_t v7 = sub_702F8(v6);
  v0[17] = v7;
  sub_A19C(v7);
  v0[18] = v8;
  uint64_t v9 = sub_A220();
  uint64_t v10 = sub_70200(v9);
  uint64_t v11 = sub_7013C(v10);
  v0[22] = sub_70174(v11);
  uint64_t v12 = sub_2694(&qword_201E20);
  v0[23] = v12;
  sub_53D4(v12);
  uint64_t v13 = sub_A220();
  uint64_t v14 = sub_6FD3C(v13);
  uint64_t v15 = sub_700FC(v14);
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201CC8);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  v0[29] = sub_6FDB0(v17);
  uint64_t v18 = sub_2694(&qword_201E10);
  sub_53D4(v18);
  uint64_t v19 = sub_A220();
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  uint64_t v22 = sub_6FD00(v21);
  uint64_t v23 = sub_70040(v22);
  uint64_t v24 = sub_70274(v23);
  v0[36] = sub_7018C(v24);
  sub_A4F0();
  return _swift_task_switch(v25, v26, v27);
}

#error "5F7A4: call analysis failed (funcsize=248)"

uint64_t sub_5F9EC()
{
  sub_47D74();
  sub_E588();
  sub_6F4D0();
  uint64_t v3 = v2;
  sub_A304();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  swift_task_dealloc();
  sub_6FD18();
  if (v0)
  {
    swift_errorRelease();
    swift_task_dealloc();
  }
  else
  {
    sub_702E0();
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_5FAF4()
{
  sub_A364();
  v0[16] = v1;
  v0[17] = v2;
  v0[15] = v3;
  uint64_t v4 = sub_2694(&qword_203600);
  v0[18] = v4;
  sub_A19C(v4);
  v0[19] = v5;
  uint64_t v6 = sub_A220();
  uint64_t v7 = sub_7013C(v6);
  uint64_t v8 = sub_70174(v7);
  uint64_t v9 = sub_6FEBC(v8);
  v0[24] = sub_6FEA4(v9);
  uint64_t v10 = sub_1AC800();
  v0[25] = v10;
  sub_A19C(v10);
  v0[26] = v11;
  v0[27] = sub_A220();
  v0[28] = swift_task_alloc();
  uint64_t v12 = sub_1AABD0();
  v0[29] = v12;
  sub_A19C(v12);
  v0[30] = v13;
  uint64_t v14 = sub_A220();
  uint64_t v15 = sub_6FC5C(v14);
  uint64_t v16 = sub_6FD00(v15);
  v0[34] = sub_70040(v16);
  uint64_t v17 = sub_2694(&qword_201E20);
  v0[35] = v17;
  sub_53D4(v17);
  v0[36] = sub_A220();
  v0[37] = swift_task_alloc();
  v0[38] = swift_task_alloc();
  v0[39] = swift_task_alloc();
  uint64_t v18 = sub_2694(&qword_201CC8);
  sub_53D4(v18);
  v0[40] = sub_A220();
  v0[41] = swift_task_alloc();
  uint64_t v19 = sub_2694(&qword_201E10);
  sub_53D4(v19);
  v0[42] = sub_A220();
  v0[43] = swift_task_alloc();
  v0[44] = swift_task_alloc();
  v0[45] = swift_task_alloc();
  v0[46] = swift_task_alloc();
  v0[47] = swift_task_alloc();
  v0[48] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v20, v21, v22);
}

uint64_t sub_5FCF8()
{
  uint64_t v105 = v0;
  uint64_t v2 = *(void **)(v0 + 120);
  uint64_t v1 = *(void **)(v0 + 128);
  [v1 minimum];
  double v4 = v3;
  [v1 maximum];
  double v6 = v5;
  id v7 = [v2 start];
  if (v7)
  {
    uint64_t v8 = v7;
    sub_1AABB0();

    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 1;
  }
  uint64_t v10 = *(void **)(v0 + 120);
  uint64_t v11 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 384), v9, 1, *(void *)(v0 + 232));
  id v12 = [v10 end];
  if (v12)
  {
    uint64_t v13 = v12;
    sub_1AABB0();

    uint64_t v11 = 0;
  }
  uint64_t v14 = *(void **)(v0 + 128);
  uint64_t v15 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 376), v11, 1, *(void *)(v0 + 232));
  id v16 = [v14 sampleStartDate];
  if (v16)
  {
    uint64_t v17 = v16;
    sub_1AABB0();

    uint64_t v15 = 0;
  }
  uint64_t v18 = *(void **)(v0 + 128);
  uint64_t v19 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 368), v15, 1, *(void *)(v0 + 232));
  id v20 = [v18 sampleEndDate];
  if (v20)
  {
    uint64_t v21 = v20;
    sub_1AABB0();

    uint64_t v19 = 0;
  }
  uint64_t v22 = *(void *)(v0 + 328);
  uint64_t v23 = *(void **)(v0 + 120);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 360), v19, 1, *(void *)(v0 + 232));
  type metadata accessor for WellnessTime(0);
  sub_1993BC();
  uint64_t v103 = v24;
  *(void *)(v0 + 392) = v24;
  sub_1AAA10();
  sub_70490(v22, 1);
  id v25 = [v23 start];
  uint64_t v28 = (uint64_t *)(v0 + 352);
  uint64_t v29 = *(void *)(v0 + 352);
  if (v25)
  {
    uint64_t v30 = v25;
    uint64_t v32 = *(void *)(v0 + 232);
    uint64_t v31 = *(void *)(v0 + 240);
    sub_1AABB0();

    uint64_t v33 = *(void (**)(uint64_t))(v31 + 32);
    uint64_t v34 = sub_703D4();
    v33(v34);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v29, 0, 1, v32);
    sub_A208(v29, 1, v32);
    if (!v35)
    {
      uint64_t v36 = *(void **)(v0 + 120);
      ((void (*)(void, void, void))v33)(*(void *)(v0 + 272), *(void *)(v0 + 352), *(void *)(v0 + 232));
      id v37 = [v36 end];
      uint64_t v40 = *(void *)(v0 + 344);
      if (v37)
      {
        uint64_t v41 = v37;
        uint64_t v42 = *(void *)(v0 + 232);
        sub_1AABB0();

        uint64_t v43 = sub_703D4();
        v33(v43);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v40, 0, 1, v42);
        sub_A208(v40, 1, v42);
        if (!v35)
        {
          uint64_t v98 = *(void *)(v0 + 320);
          uint64_t v100 = *(void **)(v0 + 328);
          uint64_t v44 = (uint64_t *)(v0 + 304);
          uint64_t v45 = *(void *)(v0 + 240);
          ((void (*)(void))v33)();
          unint64_t v46 = *(void (**)(void))(v45 + 16);
          sub_703C4();
          v46();
          sub_703C4();
          v46();
          sub_1AA9D0();
          sub_6F194((uint64_t)v100, &qword_201CC8);
          sub_70490(v98, 0);
          sub_A008(v98, (uint64_t)v100, &qword_201CC8);
          sub_153CEC(105, v100);
          uint64_t v47 = *(void (**)(void))(v45 + 8);
          sub_4783C();
          v47();
          sub_4783C();
          v47();
          goto LABEL_22;
        }
      }
      else
      {
        sub_A708(*(void *)(v0 + 344), v38, v39, *(void *)(v0 + 232));
      }
      uint64_t v28 = (uint64_t *)(v0 + 344);
      (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 272), *(void *)(v0 + 232));
    }
  }
  else
  {
    sub_A708(*(void *)(v0 + 352), v26, v27, *(void *)(v0 + 232));
  }
  uint64_t v48 = *(void **)(v0 + 128);
  sub_6F194(*v28, &qword_201E10);
  id v49 = [v48 sampleEndDate];
  if (v49)
  {
    uint64_t v50 = v49;
    sub_1AABB0();

    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v51 = 1;
  }
  uint64_t v52 = *(void **)(v0 + 336);
  uint64_t v44 = (uint64_t *)(v0 + 296);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v52, v51, 1, *(void *)(v0 + 232));
  sub_1546D4(105, v52);
  sub_6F194((uint64_t)v52, &qword_201E10);
LABEL_22:
  uint64_t v53 = *v44;
  uint64_t v54 = *(void *)(v0 + 312);
  uint64_t v55 = *(void *)(v0 + 288);
  uint64_t v56 = *(void *)(v0 + 224);
  uint64_t v57 = *(void *)(v0 + 200);
  uint64_t v58 = *(void *)(v0 + 208);
  sub_A008(v53, v54, &qword_201E20);
  uint64_t v59 = sub_1AC7D0();
  sub_A340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v56, v59, v57);
  sub_45DC8(v54, v55);
  uint64_t v60 = sub_1AC7F0();
  os_log_type_t v61 = sub_1ACF50();
  BOOL v62 = os_log_type_enabled(v60, v61);
  uint64_t v63 = *(void *)(v0 + 288);
  if (v62)
  {
    uint64_t v64 = *(void *)(v0 + 208);
    uint64_t v99 = *(void *)(v0 + 200);
    uint64_t v101 = *(void *)(v0 + 224);
    unint64_t v65 = (uint8_t *)sub_A4B0();
    uint64_t v104 = sub_E620();
    *(_DWORD *)unint64_t v65 = 136315138;
    uint64_t v66 = sub_1ACFC0();
    *(void *)(v0 + 112) = sub_4A278(v66, v67, &v104);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_6F194(v63, &qword_201E20);
    _os_log_impl(&def_342E4, v60, v61, "Deep Link punch out: %s", v65, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v101, v99);
  }
  else
  {
    uint64_t v68 = *(void *)(v0 + 208);
    sub_6F194(v63, &qword_201E20);

    uint64_t v69 = *(void (**)(uint64_t))(v68 + 8);
    uint64_t v70 = sub_4788C();
    v69(v70);
  }
  sub_A7254(*(void **)(v0 + 128));
  if (!v71)
  {
    uint64_t v95 = *(void *)(v0 + 312);
    sub_6F194(*(void *)(v0 + 328), &qword_201CC8);
    swift_release();
    sub_6F194(v95, &qword_201E20);
    sub_6FBBC();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_6FDE8();
    sub_704D8();
    __asm { BRAA            X2, X16 }
  }
  uint64_t v72 = *(void *)(v0 + 152);
  char v73 = *(void **)(v0 + 128);
  sub_34214(0, &qword_203608);
  id v74 = sub_6F09C();
  *(void *)(v0 + 400) = v74;
  [v73 minimum];
  id v75 = v74;
  sub_1AA960();
  [v73 maximum];
  id v76 = v75;
  sub_1AA960();
  uint64_t v77 = self;
  id v78 = [v77 poundsMass];
  sub_1AA990();

  id v79 = [v77 poundsMass];
  sub_1AA990();

  sub_1AA980();
  uint64_t v80 = *(void (**)(void))(v72 + 8);
  *(void *)(v0 + 408) = v80;
  *(void *)(v0 + 416) = (v72 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_47310();
  v80();
  sub_47310();
  v80();
  sub_1AA970();
  double v82 = v81;
  sub_47310();
  v80();
  sub_A340();
  sub_E524();
  v83();
  uint64_t v84 = sub_1AC7F0();
  os_log_type_t v85 = sub_1ACF50();
  if (os_log_type_enabled(v84, v85))
  {
    uint64_t v86 = swift_slowAlloc();
    *(_DWORD *)uint64_t v86 = 134218240;
    *(double *)(v0 + 104) = v82;
    sub_1ACFE0();
    *(_WORD *)(v86 + 12) = 1024;
    *(_DWORD *)(v0 + 448) = v82 < 0.5;
    sub_1ACFE0();
    _os_log_impl(&def_342E4, v84, v85, "Weight difference is %f lbs, isDifferenceNegligible: %{BOOL}d", (uint8_t *)v86, 0x12u);
    sub_A1F0();
  }
  uint64_t v102 = *(void *)(v0 + 312);
  uint64_t v87 = *(void *)(v0 + 128);
  uint64_t v88 = *(void *)(v0 + 136);
  uint64_t v89 = *(void *)(v0 + 120);

  sub_47968();
  sub_E530();
  v90();
  sub_E3FC(v88 + 120, v0 + 16);
  sub_2E38((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v91 = swift_task_alloc();
  *(void *)(v0 + 424) = v91;
  *(void *)(v91 + 16) = v103;
  *(unsigned char *)(v91 + 24) = v4 == v6;
  *(void *)(v91 + 32) = v87;
  *(unsigned char *)(v91 + 40) = 105;
  *(void *)(v91 + 48) = v89;
  *(void *)(v91 + 56) = v102;
  uint64_t v92 = (void *)swift_task_alloc();
  *(void *)(v0 + 432) = v92;
  *uint64_t v92 = v0;
  v92[1] = sub_607F8;
  sub_704D8();
  return sub_88518();
}

uint64_t sub_607F8()
{
  sub_47D74();
  sub_E588();
  sub_6F4D0();
  uint64_t v4 = v3;
  sub_A304();
  *double v5 = v4;
  *double v5 = *v2;
  swift_task_dealloc();
  sub_6FD18();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v4 + 440) = v0;
  }
  swift_task_dealloc();
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_60908()
{
  uint64_t v8 = v1[55];
  uint64_t v3 = (void *)v1[50];
  swift_release();

  uint64_t v4 = sub_701D8();
  v2(v4);
  uint64_t v5 = sub_47968();
  v2(v5);
  sub_6F194((uint64_t)v3, &qword_201CC8);
  sub_6F194(v0, &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v1 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(uint64_t))v1[1];
  return v6(v8);
}

uint64_t sub_60AFC()
{
  uint64_t v3 = *(void **)(v1 + 400);
  swift_release();

  uint64_t v4 = sub_701D8();
  v2(v4);
  uint64_t v5 = sub_47968();
  v2(v5);
  sub_6F194((uint64_t)v3, &qword_201CC8);
  sub_6F194(v0, &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1 + 16);
  sub_6FBBC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = sub_6FDE8();
  return v7(v6);
}

uint64_t sub_60C7C()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  v0[16] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E28);
  sub_53D4(v6);
  v0[17] = sub_A42C();
  uint64_t v7 = sub_1AABD0();
  v0[18] = v7;
  sub_A19C(v7);
  v0[19] = v8;
  uint64_t v9 = sub_A220();
  uint64_t v10 = sub_7013C(v9);
  uint64_t v11 = sub_70174(v10);
  v0[23] = sub_6FEBC(v11);
  uint64_t v12 = sub_2694(&qword_201E20);
  v0[24] = v12;
  sub_53D4(v12);
  uint64_t v13 = sub_A220();
  uint64_t v14 = sub_700FC(v13);
  v0[27] = sub_6FD24(v14);
  v0[28] = swift_task_alloc();
  uint64_t v15 = sub_2694(&qword_201CC8);
  sub_53D4(v15);
  uint64_t v16 = sub_A220();
  v0[30] = sub_6FDF8(v16);
  uint64_t v17 = sub_2694(&qword_201E10);
  sub_53D4(v17);
  uint64_t v18 = sub_A220();
  uint64_t v19 = sub_6FC5C(v18);
  uint64_t v20 = sub_6FD00(v19);
  uint64_t v21 = sub_70040(v20);
  uint64_t v22 = sub_70274(v21);
  v0[36] = sub_7018C(v22);
  v0[37] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v23, v24, v25);
}

uint64_t sub_60E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t *a28,uint64_t a29,uint64_t a30)
{
  sub_6FCE0();
  a29 = v32;
  a30 = v34;
  sub_6FF30();
  a28 = v30;
  char v35 = (void *)v30[11];
  uint64_t v36 = (void *)v30[12];
  [v36 minimum];
  double v38 = v37;
  [v36 maximum];
  id v39 = sub_6FD90();
  if (v39)
  {
    char v35 = v39;
    sub_1AABB0();

    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v41 = 1;
  }
  sub_6F9BC(v30[37], v41, v40, v30[18]);
  id v42 = [v36 end];
  if (v42)
  {
    uint64_t v45 = v42;
    sub_1AABB0();

    char v35 = 0;
  }
  sub_6F7DC(v30[36], v43, v44, v30[18]);
  id v46 = [v31 sampleStartDate];
  if (v46)
  {
    char v35 = v46;
    sub_1AABB0();
  }
  sub_705B4(v30[35], v47, v48, v30[18]);
  id v49 = [v31 sampleEndDate];
  if (v49)
  {
    uint64_t v52 = v49;
    sub_1AABB0();

    char v35 = 0;
  }
  sub_6F610((uint64_t)v49, v50, v51, v30[18]);
  sub_6F6A4();
  uint64_t v111 = v53;
  v30[38] = v53;
  uint64_t v54 = sub_1AAA10();
  id v55 = sub_6F4EC(v54);
  uint64_t v58 = v30 + 33;
  if (v55)
  {
    uint64_t v59 = v55;
    uint64_t v60 = v30[19];
    sub_1AABB0();

    os_log_type_t v61 = *(void (**)(void))(v60 + 32);
    uint64_t v62 = sub_6F52C();
    ((void (*)(uint64_t))v61)(v62);
    sub_6F47C();
    if (!v63)
    {
      uint64_t v64 = (void *)v30[11];
      sub_6F7FC();
      v61();
      id v65 = [v64 end];
      if (v65)
      {
        uint64_t v68 = v65;
        sub_1AABB0();

        uint64_t v69 = sub_6F52C();
        ((void (*)(uint64_t))v61)(v69);
        sub_6F47C();
        if (!v63)
        {
          uint64_t v70 = v30 + 27;
          uint64_t v109 = v30[29];
          char v110 = (void *)v30[30];
          uint64_t v71 = v30[19];
          sub_6F7FC();
          v61();
          uint64_t v72 = *(void (**)(void))(v71 + 16);
          sub_6F904();
          v72();
          sub_6F904();
          v72();
          sub_1AA9D0();
          uint64_t v73 = sub_4788C();
          sub_6F194(v73, v74);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v109, 0, 1, (uint64_t)v35);
          sub_A008(v109, (uint64_t)v110, &qword_201CC8);
          sub_153CEC(107, v110);
          id v75 = *(void (**)(void))(v71 + 8);
          sub_47310();
          v75();
          sub_47310();
          v75();
          goto LABEL_22;
        }
      }
      else
      {
        sub_6F688(0, v66, v67, v30[18]);
      }
      uint64_t v58 = v30 + 32;
      (*(void (**)(uint64_t, uint64_t))(v30[19] + 8))(v30[23], v30[18]);
    }
  }
  else
  {
    sub_6F688(0, v56, v57, v30[18]);
  }
  id v76 = (void *)v30[12];
  sub_6F194(*v58, &qword_201E10);
  if ([v76 sampleEndDate])
  {
    sub_6FF18();

    uint64_t v77 = 0;
  }
  else
  {
    uint64_t v77 = 1;
  }
  uint64_t v70 = v30 + 26;
  id v78 = (void *)v30[31];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v78, v77, 1, v30[18]);
  sub_1546D4(107, v78);
  sub_6F194((uint64_t)v78, &qword_201E10);
LABEL_22:
  id v79 = (void *)v30[12];
  sub_A008(*v70, v30[28], &qword_201E20);
  uint64_t v80 = sub_A7254(v79);
  sub_170F24(v80, v81);
  uint64_t v83 = v82;
  swift_bridgeObjectRelease();
  if (v83)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v84 = 0;
  }
  else
  {
    uint64_t v84 = 1;
  }
  uint64_t v85 = v30[17];
  uint64_t v86 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v85, v84, 1, v86);
  sub_1AC7D0();
  sub_A340();
  sub_6F904();
  v87();
  uint64_t v88 = sub_47968();
  sub_45DC8(v88, v89);
  uint64_t v90 = (void *)sub_1AC7F0();
  os_log_type_t v91 = sub_1ACF50();
  BOOL v92 = sub_6FA44(v91);
  uint64_t v93 = v30[25];
  if (v92)
  {
    sub_A4B0();
    sub_E620();
    sub_70218();
    uint64_t v94 = sub_70594(4.8149e-34);
    v30[10] = sub_4A278(v94, v95, &a17);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_6F194(v93, &qword_201E20);
    sub_70560(&def_342E4, v96, v97, "Deep Link punch out: %s");
    sub_6FA28();
    sub_A1F0();
    sub_A1F0();

    sub_E558();
    v98();
  }
  else
  {
    sub_6FD6C();
    sub_6F194(v93, &qword_201E20);

    uint64_t v99 = sub_6F7C8();
    v100(v99);
  }
  uint64_t v101 = v30[28];
  uint64_t v102 = v30[17];
  uint64_t v103 = v30[12];
  uint64_t v104 = v30[11];
  sub_E3FC(v30[13] + 120, (uint64_t)(v30 + 2));
  sub_2E38(v30 + 2, v30[5]);
  uint64_t v105 = swift_task_alloc();
  v30[39] = v105;
  *(void *)(v105 + 16) = v111;
  *(void *)(v105 + 24) = v103;
  *(unsigned char *)(v105 + 32) = 107;
  *(void *)(v105 + 40) = v102;
  *(unsigned char *)(v105 + 48) = v38 == v33;
  *(void *)(v105 + 56) = v104;
  *(void *)(v105 + 64) = v101;
  uint64_t v106 = (void *)swift_task_alloc();
  v30[40] = (uint64_t)v106;
  *uint64_t v106 = v30;
  v106[1] = sub_61464;
  sub_6FC74();
  return sub_83E48();
}

uint64_t sub_61464()
{
  sub_47D74();
  sub_E588();
  sub_6F4D0();
  uint64_t v4 = v3;
  sub_A304();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  swift_task_dealloc();
  sub_6FD18();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v4 + 328) = v0;
  }
  swift_task_dealloc();
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_61574()
{
  uint64_t v6 = v0[41];
  swift_release();
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[28];
  sub_70410();
  sub_701F4();
  uint64_t v3 = v0[17];
  sub_6F194(v1, &qword_201CC8);
  sub_6F194(v3, &qword_201E28);
  sub_6F194(v2, &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(v6);
}

uint64_t sub_6170C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_6FF4C();
  sub_6FF30();
  swift_release();
  uint64_t v23 = v22[30];
  uint64_t v37 = v22[32];
  uint64_t v38 = v22[31];
  uint64_t v24 = v22[28];
  sub_70428();
  uint64_t v39 = v22[23];
  uint64_t v40 = v22[22];
  sub_701F4();
  uint64_t v41 = v26;
  uint64_t v42 = v25;
  uint64_t v27 = v22[17];
  uint64_t v43 = v22[16];
  sub_6F194(v23, &qword_201CC8);
  sub_6F194(v27, &qword_201E28);
  sub_6F194(v24, &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v22 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_6FDE8();
  sub_6FED4();
  return v30(v28, v29, v30, v31, v32, v33, v34, v35, v37, v38, a11, a12, a13, a14, v39, v40, v41, v42, v43,
           a20,
           a21,
           a22);
}

uint64_t sub_61878()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  v0[16] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E20);
  v0[17] = v6;
  sub_53D4(v6);
  uint64_t v7 = sub_A220();
  uint64_t v8 = sub_6FF98(v7);
  uint64_t v9 = sub_6FF80(v8);
  v0[20] = v9;
  sub_A19C(v9);
  v0[21] = v10;
  uint64_t v11 = sub_A220();
  uint64_t v12 = sub_6FEBC(v11);
  uint64_t v13 = sub_6FEA4(v12);
  v0[25] = sub_6FD3C(v13);
  uint64_t v14 = sub_2694(&qword_201CC8);
  sub_53D4(v14);
  uint64_t v15 = sub_A220();
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201E10);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  uint64_t v18 = sub_6FDB0(v17);
  uint64_t v19 = sub_6FDF8(v18);
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  v0[33] = sub_6FD00(v21);
  sub_A4F0();
  return _swift_task_switch(v22, v23, v24);
}

#error "61B80: call analysis failed (funcsize=214)"

uint64_t sub_61D38()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  v0[16] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E20);
  v0[17] = v6;
  sub_53D4(v6);
  uint64_t v7 = sub_A220();
  uint64_t v8 = sub_6FF98(v7);
  uint64_t v9 = sub_6FF80(v8);
  v0[20] = v9;
  sub_A19C(v9);
  v0[21] = v10;
  uint64_t v11 = sub_A220();
  uint64_t v12 = sub_6FEBC(v11);
  uint64_t v13 = sub_6FEA4(v12);
  v0[25] = sub_6FD3C(v13);
  uint64_t v14 = sub_2694(&qword_201CC8);
  sub_53D4(v14);
  uint64_t v15 = sub_A220();
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201E10);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  uint64_t v18 = sub_6FDB0(v17);
  uint64_t v19 = sub_6FDF8(v18);
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  v0[33] = sub_6FD00(v21);
  sub_A4F0();
  return _swift_task_switch(v22, v23, v24);
}

#error "62040: call analysis failed (funcsize=214)"

uint64_t sub_621F8()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  v0[16] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E20);
  v0[17] = v6;
  sub_53D4(v6);
  uint64_t v7 = sub_A220();
  uint64_t v8 = sub_6FF98(v7);
  uint64_t v9 = sub_6FF80(v8);
  v0[20] = v9;
  sub_A19C(v9);
  v0[21] = v10;
  uint64_t v11 = sub_A220();
  uint64_t v12 = sub_6FEBC(v11);
  uint64_t v13 = sub_6FEA4(v12);
  v0[25] = sub_6FD3C(v13);
  uint64_t v14 = sub_2694(&qword_201CC8);
  sub_53D4(v14);
  uint64_t v15 = sub_A220();
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201E10);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  uint64_t v18 = sub_6FDB0(v17);
  uint64_t v19 = sub_6FDF8(v18);
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  v0[33] = sub_6FD00(v21);
  sub_A4F0();
  return _swift_task_switch(v22, v23, v24);
}

#error "62500: call analysis failed (funcsize=214)"

uint64_t sub_626B8()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  v0[16] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E20);
  v0[17] = v6;
  sub_53D4(v6);
  uint64_t v7 = sub_A220();
  uint64_t v8 = sub_6FF98(v7);
  uint64_t v9 = sub_6FF80(v8);
  v0[20] = v9;
  sub_A19C(v9);
  v0[21] = v10;
  uint64_t v11 = sub_A220();
  uint64_t v12 = sub_6FEBC(v11);
  uint64_t v13 = sub_6FEA4(v12);
  v0[25] = sub_6FD3C(v13);
  uint64_t v14 = sub_2694(&qword_201CC8);
  sub_53D4(v14);
  uint64_t v15 = sub_A220();
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201E10);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  uint64_t v18 = sub_6FDB0(v17);
  uint64_t v19 = sub_6FDF8(v18);
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  v0[33] = sub_6FD00(v21);
  sub_A4F0();
  return _swift_task_switch(v22, v23, v24);
}

#error "629C0: call analysis failed (funcsize=214)"

uint64_t sub_62B78()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  uint64_t v6 = sub_A42C();
  uint64_t v7 = sub_702F8(v6);
  v0[17] = v7;
  sub_A19C(v7);
  v0[18] = v8;
  uint64_t v9 = sub_A220();
  uint64_t v10 = sub_70200(v9);
  uint64_t v11 = sub_7013C(v10);
  v0[22] = sub_70174(v11);
  uint64_t v12 = sub_2694(&qword_201E20);
  v0[23] = v12;
  sub_53D4(v12);
  uint64_t v13 = sub_A220();
  uint64_t v14 = sub_6FD3C(v13);
  uint64_t v15 = sub_700FC(v14);
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201CC8);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  v0[29] = sub_6FDB0(v17);
  uint64_t v18 = sub_2694(&qword_201E10);
  sub_53D4(v18);
  uint64_t v19 = sub_A220();
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  uint64_t v22 = sub_6FD00(v21);
  uint64_t v23 = sub_70040(v22);
  uint64_t v24 = sub_70274(v23);
  v0[36] = sub_7018C(v24);
  sub_A4F0();
  return _swift_task_switch(v25, v26, v27);
}

#error "62E88: call analysis failed (funcsize=248)"

uint64_t sub_630D0()
{
  sub_A364();
  v0[15] = v1;
  v0[16] = v2;
  v0[14] = v3;
  uint64_t v4 = sub_2694(&qword_201E28);
  sub_53D4(v4);
  v0[17] = sub_A42C();
  uint64_t v5 = sub_1AC800();
  v0[18] = v5;
  sub_A19C(v5);
  v0[19] = v6;
  uint64_t v7 = sub_A220();
  v0[21] = sub_7013C(v7);
  uint64_t v8 = sub_1AABD0();
  v0[22] = v8;
  sub_A19C(v8);
  v0[23] = v9;
  uint64_t v10 = sub_A220();
  uint64_t v11 = sub_6FD3C(v10);
  uint64_t v12 = sub_700FC(v11);
  v0[27] = sub_6FD24(v12);
  uint64_t v13 = sub_2694(&qword_201E20);
  v0[28] = v13;
  sub_53D4(v13);
  uint64_t v14 = sub_A220();
  uint64_t v15 = sub_6FDF8(v14);
  uint64_t v16 = sub_6FD78(v15);
  v0[32] = sub_6FC5C(v16);
  uint64_t v17 = sub_2694(&qword_201CC8);
  sub_53D4(v17);
  uint64_t v18 = sub_A220();
  v0[34] = sub_70040(v18);
  uint64_t v19 = sub_2694(&qword_201E10);
  sub_53D4(v19);
  uint64_t v20 = sub_A220();
  v0[36] = sub_7018C(v20);
  v0[37] = swift_task_alloc();
  v0[38] = swift_task_alloc();
  v0[39] = swift_task_alloc();
  v0[40] = swift_task_alloc();
  v0[41] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v21, v22, v23);
}

uint64_t sub_63284()
{
  uint64_t v106 = v0;
  uint64_t v1 = v0;
  id v2 = [*(id *)(v0 + 112) start];
  if (v2)
  {
    uint64_t v3 = v2;
    sub_1AABB0();

    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 1;
  }
  uint64_t v5 = *(void **)(v0 + 112);
  uint64_t v6 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 328), v4, 1, *(void *)(v0 + 176));
  id v7 = [v5 end];
  if (v7)
  {
    uint64_t v8 = v7;
    sub_1AABB0();

    uint64_t v6 = 0;
  }
  uint64_t v9 = *(void **)(v0 + 120);
  uint64_t v10 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 320), v6, 1, *(void *)(v0 + 176));
  id v11 = [v9 sampleStartDate];
  if (v11)
  {
    uint64_t v12 = v11;
    sub_1AABB0();

    uint64_t v10 = 0;
  }
  uint64_t v13 = *(void **)(v0 + 120);
  uint64_t v14 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 312), v10, 1, *(void *)(v0 + 176));
  id v15 = [v13 sampleEndDate];
  if (v15)
  {
    uint64_t v16 = v15;
    sub_1AABB0();

    uint64_t v14 = 0;
  }
  uint64_t v17 = *(void *)(v0 + 272);
  uint64_t v18 = *(void **)(v0 + 112);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 304), v14, 1, *(void *)(v0 + 176));
  type metadata accessor for WellnessTime(0);
  sub_1993BC();
  uint64_t v104 = v19;
  *(void *)(v0 + 336) = v19;
  sub_1AAA10();
  sub_70490(v17, 1);
  id v20 = [v18 start];
  uint64_t v23 = (uint64_t *)(v0 + 296);
  uint64_t v24 = *(void *)(v1 + 296);
  if (v20)
  {
    uint64_t v25 = v20;
    uint64_t v27 = *(void *)(v1 + 176);
    uint64_t v26 = *(void *)(v1 + 184);
    sub_1AABB0();

    uint64_t v28 = *(void (**)(uint64_t))(v26 + 32);
    uint64_t v29 = sub_703EC();
    v28(v29);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v24, 0, 1, v27);
    sub_A208(v24, 1, v27);
    if (!v30)
    {
      uint64_t v31 = *(void **)(v1 + 112);
      ((void (*)(void, void, void))v28)(*(void *)(v1 + 216), *(void *)(v1 + 296), *(void *)(v1 + 176));
      id v32 = [v31 end];
      uint64_t v35 = *(void *)(v1 + 288);
      if (v32)
      {
        uint64_t v36 = v32;
        uint64_t v37 = *(void *)(v1 + 176);
        sub_1AABB0();

        uint64_t v38 = sub_703EC();
        v28(v38);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v35, 0, 1, v37);
        sub_A208(v35, 1, v37);
        if (!v30)
        {
          uint64_t v39 = (uint64_t *)(v1 + 248);
          uint64_t v98 = *(void *)(v1 + 264);
          uint64_t v99 = *(void **)(v1 + 272);
          uint64_t v40 = *(void *)(v1 + 184);
          ((void (*)(void))v28)();
          uint64_t v41 = *(void (**)(void))(v40 + 16);
          sub_70580();
          v41();
          sub_70580();
          v41();
          sub_1AA9D0();
          sub_6F194((uint64_t)v99, &qword_201CC8);
          sub_70490(v98, 0);
          sub_A008(v98, (uint64_t)v99, &qword_201CC8);
          sub_153CEC(162, v99);
          uint64_t v42 = *(void (**)(void))(v40 + 8);
          sub_4783C();
          v42();
          sub_4783C();
          v42();
          goto LABEL_22;
        }
      }
      else
      {
        sub_A708(*(void *)(v1 + 288), v33, v34, *(void *)(v1 + 176));
      }
      uint64_t v23 = (uint64_t *)(v1 + 288);
      (*(void (**)(void, void))(*(void *)(v1 + 184) + 8))(*(void *)(v1 + 216), *(void *)(v1 + 176));
    }
  }
  else
  {
    sub_A708(*(void *)(v1 + 296), v21, v22, *(void *)(v1 + 176));
  }
  uint64_t v43 = *(void **)(v1 + 120);
  sub_6F194(*v23, &qword_201E10);
  id v44 = [v43 sampleEndDate];
  if (v44)
  {
    uint64_t v45 = v44;
    sub_1AABB0();

    uint64_t v46 = 0;
  }
  else
  {
    uint64_t v46 = 1;
  }
  uint64_t v39 = (uint64_t *)(v1 + 240);
  uint64_t v47 = *(void **)(v1 + 280);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v47, v46, 1, *(void *)(v1 + 176));
  sub_1546D4(162, v47);
  sub_6F194((uint64_t)v47, &qword_201E10);
LABEL_22:
  uint64_t v48 = *(void *)(v1 + 256);
  uint64_t v49 = *(void *)(v1 + 232);
  uint64_t v50 = *(void *)(v1 + 168);
  uint64_t v52 = *(void *)(v1 + 144);
  uint64_t v51 = *(void *)(v1 + 152);
  sub_A008(*v39, v48, &qword_201E20);
  uint64_t v53 = sub_1AC7D0();
  sub_A340();
  uint64_t v102 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
  v102(v50, v53, v52);
  sub_45DC8(v48, v49);
  uint64_t v54 = sub_1AC7F0();
  os_log_type_t v55 = sub_1ACF50();
  BOOL v56 = os_log_type_enabled(v54, v55);
  uint64_t v57 = *(void *)(v1 + 232);
  if (v56)
  {
    uint64_t v97 = *(void *)(v1 + 152);
    uint64_t v58 = (uint8_t *)sub_A4B0();
    uint64_t v105 = sub_E620();
    *(_DWORD *)uint64_t v58 = 136315138;
    uint64_t v59 = sub_1ACFC0();
    *(void *)(v1 + 104) = sub_4A278(v59, v60, &v105);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_6F194(v57, &qword_201E20);
    _os_log_impl(&def_342E4, v54, v55, "Deep Link punch out: %s", v58, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    os_log_type_t v61 = *(void (**)(void))(v97 + 8);
    sub_E530();
    v61();
  }
  else
  {
    uint64_t v62 = *(void *)(v1 + 168);
    uint64_t v63 = *(void *)(v1 + 144);
    uint64_t v64 = *(void *)(v1 + 152);
    sub_6F194(*(void *)(v1 + 232), &qword_201E20);

    os_log_type_t v61 = *(void (**)(void))(v64 + 8);
    ((void (*)(uint64_t, uint64_t))v61)(v62, v63);
  }
  uint64_t v65 = sub_A7254(*(void **)(v1 + 120));
  uint64_t v67 = sub_1710A4(v65, v66);
  uint64_t v69 = v68;
  *(void *)(v1 + 344) = v68;
  swift_bridgeObjectRelease();
  if (!v69)
  {
    uint64_t v88 = *(void *)(v1 + 160);
    uint64_t v89 = *(void *)(v1 + 144);
    sub_A340();
    v102(v88, v53, v89);
    uint64_t v90 = sub_1AC7F0();
    os_log_type_t v91 = sub_1ACF60();
    if (os_log_type_enabled(v90, v91))
    {
      BOOL v92 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v92 = 0;
      _os_log_impl(&def_342E4, v90, v91, "Failed to execute height pattern: no unit found in intent response.", v92, 2u);
      sub_A1F0();
    }
    uint64_t v93 = *(void *)(v1 + 272);
    uint64_t v94 = *(void *)(v1 + 256);
    swift_release();

    sub_47968();
    sub_E530();
    v61();
    sub_6F194(v93, &qword_201CC8);
    sub_6F194(v94, &qword_201E20);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_704A8();
    __asm { BRAA            X2, X16 }
  }
  uint64_t v70 = *(void *)(v1 + 136);
  uint64_t v100 = *(void *)(v1 + 128);
  uint64_t v71 = *(void **)(v1 + 120);
  uint64_t v101 = *(void *)(v1 + 112);
  uint64_t v103 = *(void *)(v1 + 256);
  [v71 minimum];
  uint64_t v72 = sub_A7254(v71);
  sub_70440(v72, v73);
  swift_bridgeObjectRelease();
  [v71 maximum];
  uint64_t v74 = sub_A7254(v71);
  sub_70440(v74, v75);
  swift_bridgeObjectRelease();
  sub_697A0(v71);
  uint64_t v76 = sub_A7254(v71);
  double v78 = sub_70440(v76, v77);
  swift_bridgeObjectRelease();
  sub_1ABEF0();
  sub_47658();
  sub_1ABEE0();
  sub_1AC020();
  swift_release();
  sub_1ACE40();
  uint64_t v79 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v70, 0, 1, v79);
  sub_1AC010();
  swift_release();
  sub_6F194(v70, &qword_201E28);
  uint64_t v80 = sub_1AC000();
  *(void *)(v1 + 352) = v80;
  swift_release();
  swift_allocObject();
  sub_1ABEE0();
  sub_1AC020();
  swift_release();
  sub_1ACE40();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v70, 0, 1, v79);
  sub_1AC010();
  swift_release();
  sub_6F194(v70, &qword_201E28);
  uint64_t v81 = sub_1AC000();
  *(void *)(v1 + 360) = v81;
  swift_release();
  [v71 minimum];
  [v71 maximum];
  sub_A7254(v71);
  sub_697F4();
  char v83 = v82;
  swift_bridgeObjectRelease();
  sub_E3FC(v100 + 120, v1 + 16);
  sub_2E38((void *)(v1 + 16), *(void *)(v1 + 40));
  uint64_t v84 = swift_task_alloc();
  *(void *)(v1 + 368) = v84;
  *(void *)(v84 + 16) = v104;
  *(unsigned char *)(v84 + 24) = v83 & 1;
  *(void *)(v84 + 32) = v80;
  *(void *)(v84 + 40) = v81;
  *(double *)(v84 + 48) = v78;
  *(void *)(v84 + 56) = v67;
  *(void *)(v84 + 64) = v69;
  *(void *)(v84 + 72) = v101;
  *(void *)(v84 + 80) = v71;
  *(void *)(v84 + 88) = v103;
  uint64_t v85 = (void *)swift_task_alloc();
  *(void *)(v1 + 376) = v85;
  *uint64_t v85 = v1;
  v85[1] = sub_63DE4;
  sub_704A8();
  return sub_858A0();
}

uint64_t sub_63DE4()
{
  sub_E588();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_A304();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 384) = v3;
  }
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_63F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_6FF4C();
  sub_6FF30();
  uint64_t v40 = v22[48];
  swift_release();
  swift_release();
  uint64_t v23 = v22[34];
  uint64_t v24 = v22[32];
  swift_release();
  sub_6F194(v23, &qword_201CC8);
  sub_6F194(v24, &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v22 + 2));
  uint64_t v34 = v22[31];
  uint64_t v35 = v22[30];
  sub_70428();
  uint64_t v36 = v22[24];
  uint64_t v37 = v22[21];
  uint64_t v38 = v22[20];
  uint64_t v39 = v22[17];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_6FED4();
  return v27(v25, v26, v27, v28, v29, v30, v31, v32, v34, v35, a11, a12, a13, a14, v36, v37, v38, v39, v40,
           a20,
           a21,
           a22);
}

uint64_t sub_640E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_6FF4C();
  sub_6FF30();
  swift_release();
  swift_release();
  uint64_t v23 = v22[34];
  uint64_t v24 = v22[32];
  swift_release();
  sub_6F194(v23, &qword_201CC8);
  sub_6F194(v24, &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v22 + 2));
  uint64_t v34 = v22[31];
  uint64_t v35 = v22[30];
  sub_70410();
  uint64_t v36 = v22[24];
  uint64_t v37 = v22[21];
  uint64_t v38 = v22[20];
  uint64_t v39 = v22[17];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_6FDE8();
  sub_6FED4();
  return v27(v25, v26, v27, v28, v29, v30, v31, v32, a9, v34, v35, a12, a13, a14, a15, v36, v37, v38, v39,
           a20,
           a21,
           a22);
}

uint64_t sub_64264()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  uint64_t v6 = sub_A42C();
  uint64_t v7 = sub_702F8(v6);
  v0[17] = v7;
  sub_A19C(v7);
  v0[18] = v8;
  uint64_t v9 = sub_A220();
  uint64_t v10 = sub_70200(v9);
  uint64_t v11 = sub_7013C(v10);
  v0[22] = sub_70174(v11);
  uint64_t v12 = sub_2694(&qword_201E20);
  v0[23] = v12;
  sub_53D4(v12);
  uint64_t v13 = sub_A220();
  uint64_t v14 = sub_6FD3C(v13);
  uint64_t v15 = sub_700FC(v14);
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201CC8);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  v0[29] = sub_6FDB0(v17);
  uint64_t v18 = sub_2694(&qword_201E10);
  sub_53D4(v18);
  uint64_t v19 = sub_A220();
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  uint64_t v22 = sub_6FD00(v21);
  uint64_t v23 = sub_70040(v22);
  uint64_t v24 = sub_70274(v23);
  v0[36] = sub_7018C(v24);
  sub_A4F0();
  return _swift_task_switch(v25, v26, v27);
}

#error "64574: call analysis failed (funcsize=248)"

uint64_t sub_647BC()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  v0[16] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E20);
  v0[17] = v6;
  sub_53D4(v6);
  uint64_t v7 = sub_A220();
  uint64_t v8 = sub_6FF98(v7);
  uint64_t v9 = sub_6FF80(v8);
  v0[20] = v9;
  sub_A19C(v9);
  v0[21] = v10;
  uint64_t v11 = sub_A220();
  uint64_t v12 = sub_6FEBC(v11);
  uint64_t v13 = sub_6FEA4(v12);
  v0[25] = sub_6FD3C(v13);
  uint64_t v14 = sub_2694(&qword_201CC8);
  sub_53D4(v14);
  uint64_t v15 = sub_A220();
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201E10);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  uint64_t v18 = sub_6FDB0(v17);
  uint64_t v19 = sub_6FDF8(v18);
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  v0[33] = sub_6FD00(v21);
  sub_A4F0();
  return _swift_task_switch(v22, v23, v24);
}

#error "64AC4: call analysis failed (funcsize=214)"

uint64_t sub_64C7C()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  uint64_t v6 = sub_A42C();
  uint64_t v7 = sub_702F8(v6);
  v0[17] = v7;
  sub_A19C(v7);
  v0[18] = v8;
  uint64_t v9 = sub_A220();
  uint64_t v10 = sub_70200(v9);
  uint64_t v11 = sub_7013C(v10);
  v0[22] = sub_70174(v11);
  uint64_t v12 = sub_2694(&qword_201E20);
  v0[23] = v12;
  sub_53D4(v12);
  uint64_t v13 = sub_A220();
  uint64_t v14 = sub_6FD3C(v13);
  uint64_t v15 = sub_700FC(v14);
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201CC8);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  v0[29] = sub_6FDB0(v17);
  uint64_t v18 = sub_2694(&qword_201E10);
  sub_53D4(v18);
  uint64_t v19 = sub_A220();
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  uint64_t v22 = sub_6FD00(v21);
  uint64_t v23 = sub_70040(v22);
  uint64_t v24 = sub_70274(v23);
  v0[36] = sub_7018C(v24);
  sub_A4F0();
  return _swift_task_switch(v25, v26, v27);
}

#error "64F8C: call analysis failed (funcsize=248)"

uint64_t sub_651D4()
{
  sub_47D74();
  sub_E588();
  sub_6F4D0();
  uint64_t v3 = v2;
  sub_A304();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  swift_task_dealloc();
  sub_6FD18();
  if (v0)
  {
    swift_errorRelease();
    swift_task_dealloc();
  }
  else
  {
    sub_702E0();
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_652DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_6FF4C();
  sub_6FF30();
  uint64_t v43 = v22[40];
  swift_release();
  uint64_t v23 = v22[29];
  uint64_t v24 = v22[27];
  sub_70334();
  uint64_t v37 = v25;
  uint64_t v38 = v22[22];
  sub_701F4();
  uint64_t v39 = v27;
  uint64_t v40 = v26;
  uint64_t v41 = v22[19];
  uint64_t v42 = v22[16];
  sub_6F194(v23, &qword_201CC8);
  sub_6F194(v24, &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v22 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_6FED4();
  return v30(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, v37, v38, v39, v40, v41, v42, v43,
           a20,
           a21,
           a22);
}

uint64_t sub_6543C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_6FF4C();
  sub_6FF30();
  swift_release();
  uint64_t v23 = v22[29];
  uint64_t v24 = v22[27];
  sub_702C8();
  uint64_t v37 = v25;
  uint64_t v38 = v22[22];
  sub_701F4();
  uint64_t v39 = v27;
  uint64_t v40 = v26;
  uint64_t v41 = v22[19];
  uint64_t v42 = v22[16];
  sub_6F194(v23, &qword_201CC8);
  sub_6F194(v24, &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v22 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_6FDE8();
  sub_6FED4();
  return v30(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, v37, v38, v39, v40, v41, v42,
           a20,
           a21,
           a22);
}

uint64_t sub_6558C()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  v0[16] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E20);
  v0[17] = v6;
  sub_53D4(v6);
  uint64_t v7 = sub_A220();
  uint64_t v8 = sub_6FF98(v7);
  uint64_t v9 = sub_6FF80(v8);
  v0[20] = v9;
  sub_A19C(v9);
  v0[21] = v10;
  uint64_t v11 = sub_A220();
  uint64_t v12 = sub_6FEBC(v11);
  uint64_t v13 = sub_6FEA4(v12);
  v0[25] = sub_6FD3C(v13);
  uint64_t v14 = sub_2694(&qword_201CC8);
  sub_53D4(v14);
  uint64_t v15 = sub_A220();
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201E10);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  uint64_t v18 = sub_6FDB0(v17);
  uint64_t v19 = sub_6FDF8(v18);
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  v0[33] = sub_6FD00(v21);
  sub_A4F0();
  return _swift_task_switch(v22, v23, v24);
}

#error "65894: call analysis failed (funcsize=214)"

uint64_t sub_65A4C()
{
  sub_A364();
  uint64_t v4 = sub_6F9D8(v1, v2, v3);
  v0[14] = v4;
  sub_A19C(v4);
  v0[15] = v5;
  uint64_t v6 = sub_A42C();
  uint64_t v7 = sub_702F8(v6);
  v0[17] = v7;
  sub_A19C(v7);
  v0[18] = v8;
  uint64_t v9 = sub_A220();
  uint64_t v10 = sub_70200(v9);
  uint64_t v11 = sub_7013C(v10);
  v0[22] = sub_70174(v11);
  uint64_t v12 = sub_2694(&qword_201E20);
  v0[23] = v12;
  sub_53D4(v12);
  uint64_t v13 = sub_A220();
  uint64_t v14 = sub_6FD3C(v13);
  uint64_t v15 = sub_700FC(v14);
  v0[27] = sub_6FD24(v15);
  uint64_t v16 = sub_2694(&qword_201CC8);
  sub_53D4(v16);
  uint64_t v17 = sub_A220();
  v0[29] = sub_6FDB0(v17);
  uint64_t v18 = sub_2694(&qword_201E10);
  sub_53D4(v18);
  uint64_t v19 = sub_A220();
  uint64_t v20 = sub_6FD78(v19);
  uint64_t v21 = sub_6FC5C(v20);
  uint64_t v22 = sub_6FD00(v21);
  uint64_t v23 = sub_70040(v22);
  uint64_t v24 = sub_70274(v23);
  v0[36] = sub_7018C(v24);
  sub_A4F0();
  return _swift_task_switch(v25, v26, v27);
}

#error "65D5C: call analysis failed (funcsize=248)"

uint64_t sub_65FA4(uint64_t a1, uint64_t a2, void *a3, int a4, void *a5, uint64_t a6)
{
  uint64_t v101 = a6;
  id v104 = a5;
  int v98 = a4;
  uint64_t v9 = sub_1AAC20();
  uint64_t v94 = *(void *)(v9 - 8);
  uint64_t v95 = v9;
  __chkstk_darwin(v9);
  uint64_t v93 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2694(&qword_201E20);
  __chkstk_darwin(v11 - 8);
  uint64_t v103 = (uint64_t)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1AABD0();
  uint64_t v97 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v96 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_2694(&qword_201E10);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v99 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v100 = (char *)&v92 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v92 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v92 - v23;
  uint64_t v25 = sub_2694(&qword_201E28);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v102 = (char *)&v92 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v92 - v28;
  active = (int *)type metadata accessor for WellnessQueryingActiveEnergyParameters(0);
  uint64_t v31 = active[8];
  swift_retain();
  swift_release();
  *(void *)(a1 + v31) = a2;
  uint64_t v32 = a1;
  [a3 average];
  double v34 = v33;
  uint64_t v35 = sub_A7254(a3);
  LOBYTE(a1) = v98;
  double v37 = sub_C0448(v35, v36, v98, v34);
  swift_bridgeObjectRelease();
  uint64_t v38 = v32 + active[5];
  *(double *)uint64_t v38 = v37;
  *(unsigned char *)(v38 + 8) = 0;
  [a3 total];
  double v40 = v39;
  uint64_t v41 = sub_A7254(a3);
  double v43 = sub_C0448(v41, v42, a1, v40);
  swift_bridgeObjectRelease();
  uint64_t v44 = v32 + active[9];
  *(double *)uint64_t v44 = v43;
  *(unsigned char *)(v44 + 8) = 0;
  sub_A7254(a3);
  if (v45)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v46 = sub_1AC1E0();
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v46 = sub_1AC1E0();
    uint64_t v47 = 1;
  }
  uint64_t v48 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v29, v47, 1, v46);
  sub_9EA0((uint64_t)v29, v32 + active[10]);
  sub_1ABFA0();
  swift_allocObject();
  sub_1ABF90();
  id v49 = v104;
  id v50 = [v104 start];
  if (v50)
  {
    uint64_t v51 = v50;
    sub_1AABB0();

    uint64_t v48 = 0;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v22, v48, 1, v13);
  sub_A008((uint64_t)v22, (uint64_t)v24, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v13))
  {
    sub_6F194((uint64_t)v24, &qword_201E10);
  }
  else
  {
    uint64_t v52 = v96;
    uint64_t v53 = v97;
    (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v96, v24, v13);
    sub_6F194((uint64_t)v24, &qword_201E10);
    sub_1AABA0();
    uint64_t v54 = v53;
    id v49 = v104;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v52, v13);
  }
  uint64_t v55 = (uint64_t)v102;
  sub_1ABF70();
  swift_release();
  id v56 = [v49 end];
  uint64_t v57 = (uint64_t)v100;
  if (v56)
  {
    uint64_t v58 = v56;
    uint64_t v59 = (uint64_t)v99;
    sub_1AABB0();

    uint64_t v60 = 0;
  }
  else
  {
    uint64_t v60 = 1;
    uint64_t v59 = (uint64_t)v99;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v59, v60, 1, v13);
  sub_A008(v59, v57, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v57, 1, v13))
  {
    sub_6F194(v57, &qword_201E10);
  }
  else
  {
    os_log_type_t v61 = v96;
    uint64_t v62 = v97;
    (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v96, v57, v13);
    sub_6F194(v57, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v13);
  }
  sub_1ABF60();
  swift_release();
  uint64_t v63 = sub_1ABF80();
  swift_release();
  uint64_t v64 = active[7];
  swift_release();
  *(void *)(v32 + v64) = v63;
  uint64_t v65 = v103;
  sub_45DC8(v101, v103);
  uint64_t v66 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v65, 1, v66) == 1)
  {
    sub_6F194(v65, &qword_201E20);
    uint64_t v67 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v55, 1, 1, v67);
  }
  else
  {
    id v68 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v69);
    uint64_t v71 = v70;
    [v68 setPunchOutUri:v70];

    id v72 = v68;
    uint64_t v73 = v93;
    sub_1AAC10();
    uint64_t v74 = sub_1AABE0();
    uint64_t v76 = v75;
    (*(void (**)(char *, uint64_t))(v94 + 8))(v73, v95);
    sub_1949C4(v74, v76, v72);

    id v77 = [v72 dictionary];
    if (v77)
    {
      double v78 = v77;
      uint64_t v79 = v32;
      uint64_t v80 = self;
      id v105 = 0;
      id v81 = [v80 dataWithPropertyList:v78 format:200 options:0 error:&v105];
      id v82 = v105;
      if (v81)
      {
        uint64_t v83 = sub_1AAB30();
        unint64_t v85 = v84;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v83, v85);
        swift_bridgeObjectRelease();
        uint64_t v86 = sub_1AC1E0();
        uint64_t v87 = v55;
        uint64_t v88 = 0;
      }
      else
      {
        uint64_t v90 = v82;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v86 = sub_1AC1E0();
        uint64_t v87 = v55;
        uint64_t v88 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v87, v88, 1, v86);
      uint64_t v32 = v79;
    }
    else
    {
      uint64_t v89 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v55, 1, 1, v89);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v66 - 8) + 8))(v65, v66);
  }
  return sub_9EA0(v55, v32);
}

uint64_t sub_66870(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  id v128 = a7;
  uint64_t v135 = a6;
  id v131 = a5;
  uint64_t v123 = a4;
  uint64_t v137 = sub_1AABD0();
  uint64_t v133 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v132 = (char *)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2694(&qword_201E10);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  unint64_t v120 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v121 = (uint64_t)&v118 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v127 = (char *)&v118 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v129 = (uint64_t)&v118 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v126 = (char *)&v118 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v119 = (uint64_t)&v118 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v124 = (char *)&v118 - v25;
  __chkstk_darwin(v24);
  uint64_t v125 = (uint64_t)&v118 - v26;
  uint64_t v27 = sub_1AAC20();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v118 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_2694(&qword_201E20);
  __chkstk_darwin(v31 - 8);
  double v33 = (char *)&v118 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_2694(&qword_201E28);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  double v37 = (char *)&v118 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  double v39 = (char *)&v118 - v38;
  int v134 = a2;
  sub_2F2B8(a2);
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v40 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v39, 0, 1, v40);
  uint64_t v41 = type metadata accessor for WellnessQueryingBasalBodyTemperatureParameters(0);
  sub_9EA0((uint64_t)v39, a1 + *(int *)(v41 + 20));
  uint64_t v136 = v41;
  uint64_t v42 = *(int *)(v41 + 32);
  swift_retain();
  swift_release();
  uint64_t v130 = a3;
  *(void *)(a1 + v42) = a3;
  sub_45DC8(v123, (uint64_t)v33);
  uint64_t v43 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1, v43) == 1)
  {
    sub_6F194((uint64_t)v33, &qword_201E20);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v37, 1, 1, v40);
  }
  else
  {
    uint64_t v123 = a1;
    id v44 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v45);
    uint64_t v47 = v46;
    [v44 setPunchOutUri:v46];

    id v48 = v44;
    sub_1AAC10();
    uint64_t v49 = sub_1AABE0();
    uint64_t v51 = v50;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    sub_1949C4(v49, v51, v48);

    id v52 = [v48 dictionary];
    if (v52)
    {
      uint64_t v53 = v52;
      uint64_t v54 = self;
      id v138 = 0;
      id v55 = [v54 dataWithPropertyList:v53 format:200 options:0 error:&v138];
      id v56 = v138;
      if (v55)
      {
        uint64_t v57 = sub_1AAB30();
        unint64_t v59 = v58;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v57, v59);
        swift_bridgeObjectRelease();
        uint64_t v60 = (uint64_t)v37;
        uint64_t v61 = 0;
      }
      else
      {
        uint64_t v62 = v56;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v60 = (uint64_t)v37;
        uint64_t v61 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v60, v61, 1, v40);
    }
    else
    {
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v37, 1, 1, v40);
    }
    (*(void (**)(char *, uint64_t))(*(void *)(v43 - 8) + 8))(v33, v43);
    a1 = v123;
  }
  uint64_t v63 = v137;
  sub_9EA0((uint64_t)v37, a1);
  uint64_t v123 = sub_1ABEC0();
  swift_allocObject();
  sub_1ABEB0();
  id v64 = v131;
  [v131 average];
  uint64_t v65 = &selRef_mostRecent;
  if (v66 > 0.0) {
    uint64_t v65 = &selRef_average;
  }
  [v64 *v65];
  double v68 = v67;
  uint64_t v69 = sub_A7254(v64);
  sub_C0448(v69, v70, v134, v68);
  swift_bridgeObjectRelease();
  sub_1AC050();
  swift_release();
  sub_1AC040();
  swift_release();
  uint64_t v71 = sub_1AC030();
  swift_release();
  uint64_t v72 = *(int *)(v136 + 28);
  swift_release();
  uint64_t v122 = v72;
  *(void *)(a1 + v72) = v71;
  sub_1ABFA0();
  swift_allocObject();
  sub_1ABF90();
  id v73 = v128;
  id v74 = [v128 start];
  if (v74)
  {
    uint64_t v75 = v74;
    uint64_t v76 = v124;
    sub_1AABB0();

    uint64_t v77 = (uint64_t)v76;
    uint64_t v78 = 0;
    uint64_t v79 = (uint64_t)v126;
  }
  else
  {
    uint64_t v78 = 1;
    uint64_t v79 = (uint64_t)v126;
    uint64_t v77 = (uint64_t)v124;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v77, v78, 1, v63);
  uint64_t v80 = v77;
  uint64_t v81 = v125;
  sub_A008(v80, v125, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v81, 1, v63))
  {
    sub_6F194(v81, &qword_201E10);
    id v82 = [v64 sampleEndDate];
    if (v82)
    {
      uint64_t v83 = v82;
      sub_1AABB0();

      uint64_t v84 = 0;
    }
    else
    {
      uint64_t v84 = 1;
    }
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v79, v84, 1, v63);
    uint64_t v88 = v119;
    sub_A008(v79, v119, &qword_201E10);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v88, 1, v63))
    {
      sub_6F194(v88, &qword_201E10);
    }
    else
    {
      uint64_t v89 = v132;
      uint64_t v90 = v133;
      (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v88, v63);
      sub_6F194(v88, &qword_201E10);
      sub_1AABA0();
      (*(void (**)(char *, uint64_t))(v90 + 8))(v89, v63);
    }
  }
  else
  {
    uint64_t v85 = v133;
    uint64_t v86 = v81;
    uint64_t v87 = v132;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v86, v63);
    sub_6F194(v86, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v63);
  }
  sub_1ABF70();
  swift_release();
  id v91 = [v73 end];
  if (v91)
  {
    uint64_t v92 = v91;
    uint64_t v93 = (uint64_t)v127;
    sub_1AABB0();

    uint64_t v94 = 0;
  }
  else
  {
    uint64_t v94 = 1;
    uint64_t v93 = (uint64_t)v127;
  }
  uint64_t v95 = v137;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v93, v94, 1, v137);
  uint64_t v96 = v129;
  sub_A008(v93, v129, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v96, 1, v95))
  {
    sub_6F194(v96, &qword_201E10);
    id v97 = [v64 sampleEndDate];
    if (v97)
    {
      int v98 = v97;
      uint64_t v99 = (uint64_t)v120;
      sub_1AABB0();

      uint64_t v100 = 0;
    }
    else
    {
      uint64_t v100 = 1;
      uint64_t v99 = (uint64_t)v120;
    }
    uint64_t v103 = v136;
    uint64_t v104 = v137;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v99, v100, 1, v137);
    uint64_t v105 = v121;
    sub_A008(v99, v121, &qword_201E10);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v105, 1, v104))
    {
      sub_6F194(v105, &qword_201E10);
    }
    else
    {
      uint64_t v107 = v132;
      uint64_t v106 = v133;
      (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v105, v104);
      sub_6F194(v105, &qword_201E10);
      sub_1AABA0();
      uint64_t v108 = v107;
      uint64_t v103 = v136;
      (*(void (**)(char *, uint64_t))(v106 + 8))(v108, v104);
    }
  }
  else
  {
    uint64_t v102 = v132;
    uint64_t v101 = v133;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v96, v95);
    sub_6F194(v96, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v95);
    uint64_t v103 = v136;
  }
  sub_1ABF60();
  swift_release();
  uint64_t v109 = sub_1ABF80();
  swift_release();
  uint64_t v110 = *(int *)(v103 + 24);
  swift_release();
  *(void *)(a1 + v110) = v109;
  if sub_19C12C() < 3u || (uint64_t result = sub_1997D0(), (result))
  {
    swift_allocObject();
    sub_1ABEB0();
    [v64 average];
    double v113 = v112;
    uint64_t v114 = sub_A7254(v64);
    sub_C0448(v114, v115, v134, v113);
    swift_bridgeObjectRelease();
    sub_1AC050();
    swift_release();
    sub_1AC040();
    swift_release();
    uint64_t v116 = sub_1AC030();
    swift_release();
    uint64_t v117 = v122;
    uint64_t result = swift_release();
    *(void *)(a1 + v117) = v116;
  }
  return result;
}

uint64_t sub_674C8(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4, int a5, void *a6, uint64_t a7)
{
  uint64_t v148 = a7;
  id v152 = a6;
  int v142 = a5;
  uint64_t v137 = sub_1AAC20();
  uint64_t v136 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v135 = (char *)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_2694(&qword_201E20);
  __chkstk_darwin(v12 - 8);
  uint64_t v150 = (char *)&v135 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1AABD0();
  uint64_t v146 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v151 = (char *)&v135 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_2694(&qword_201E10);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v147 = (uint64_t)&v135 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v140 = (char *)&v135 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v141 = (char *)&v135 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v144 = (char *)&v135 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v145 = (char *)&v135 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  id v138 = (char *)&v135 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v139 = (uint64_t)&v135 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  char v143 = (char *)&v135 - v32;
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v135 - v33;
  uint64_t v35 = sub_2694(&qword_201E28);
  uint64_t v36 = __chkstk_darwin(v35 - 8);
  char v149 = (char *)&v135 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  double v39 = (char *)&v135 - v38;
  uint64_t v40 = (int *)type metadata accessor for WellnessQueryingBloodGlucoseParameters(0);
  uint64_t v41 = v40[10];
  swift_retain();
  swift_release();
  *(void *)(a1 + v41) = a2;
  uint64_t v42 = v40;
  [a3 mostRecent];
  double v44 = v43;
  uint64_t v45 = sub_A7254(a3);
  double v47 = sub_C0448(v45, v46, a4, v44);
  swift_bridgeObjectRelease();
  uint64_t v48 = a1 + v40[12];
  *(double *)uint64_t v48 = v47;
  *(unsigned char *)(v48 + 8) = 0;
  [a3 maximum];
  double v50 = v49;
  uint64_t v51 = sub_A7254(a3);
  double v53 = sub_C0448(v51, v52, a4, v50);
  swift_bridgeObjectRelease();
  uint64_t v54 = a1 + v40[8];
  *(double *)uint64_t v54 = v53;
  *(unsigned char *)(v54 + 8) = 0;
  [a3 minimum];
  double v56 = v55;
  uint64_t v57 = sub_A7254(a3);
  double v59 = sub_C0448(v57, v58, a4, v56);
  swift_bridgeObjectRelease();
  uint64_t v60 = a1 + v40[9];
  *(double *)uint64_t v60 = v59;
  *(unsigned char *)(v60 + 8) = 0;
  if ((v142 & 1) == 0)
  {
    [a3 average];
    double v62 = v61;
    uint64_t v63 = sub_A7254(a3);
    double v65 = sub_C0448(v63, v64, a4, v62);
    swift_bridgeObjectRelease();
    uint64_t v66 = a1 + v40[5];
    *(double *)uint64_t v66 = v65;
    *(unsigned char *)(v66 + 8) = 0;
  }
  sub_A7254(a3);
  if (v67)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v68 = sub_1AC1E0();
    uint64_t v69 = 0;
  }
  else
  {
    uint64_t v68 = sub_1AC1E0();
    uint64_t v69 = 1;
  }
  uint64_t v70 = (uint64_t)v143;
  uint64_t v71 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v39, v69, 1, v68);
  sub_9EA0((uint64_t)v39, a1 + v40[11]);
  sub_1ABFA0();
  swift_allocObject();
  sub_1ABF90();
  id v72 = [v152 start];
  if (v72)
  {
    id v73 = v72;
    sub_1AABB0();

    uint64_t v71 = 0;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v70, v71, 1, v14);
  sub_A008(v70, (uint64_t)v34, &qword_201E10);
  uint64_t v74 = a1;
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v34, 1, v14))
  {
    sub_6F194((uint64_t)v34, &qword_201E10);
    id v75 = [a3 sampleEndDate];
    uint64_t v76 = v146;
    if (v75)
    {
      uint64_t v77 = v75;
      uint64_t v78 = (uint64_t)v138;
      sub_1AABB0();

      uint64_t v79 = 0;
      uint64_t v80 = (uint64_t)v150;
    }
    else
    {
      uint64_t v79 = 1;
      uint64_t v80 = (uint64_t)v150;
      uint64_t v78 = (uint64_t)v138;
    }
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v78, v79, 1, v14);
    uint64_t v83 = v139;
    sub_A008(v78, v139, &qword_201E10);
    uint64_t v81 = v42;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v83, 1, v14))
    {
      sub_6F194(v83, &qword_201E10);
    }
    else
    {
      uint64_t v84 = v83;
      uint64_t v85 = v151;
      (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v151, v84, v14);
      sub_6F194(v84, &qword_201E10);
      sub_1AABA0();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v85, v14);
    }
  }
  else
  {
    uint64_t v81 = v42;
    uint64_t v76 = v146;
    id v82 = v151;
    (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v151, v34, v14);
    sub_6F194((uint64_t)v34, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v82, v14);
    uint64_t v80 = (uint64_t)v150;
  }
  sub_1ABF70();
  swift_release();
  id v86 = [v152 end];
  if (v86)
  {
    uint64_t v87 = v86;
    uint64_t v88 = v144;
    sub_1AABB0();

    uint64_t v89 = (uint64_t)v88;
    uint64_t v90 = 0;
  }
  else
  {
    uint64_t v90 = 1;
    uint64_t v89 = (uint64_t)v144;
  }
  uint64_t v91 = (uint64_t)v145;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v89, v90, 1, v14);
  sub_A008(v89, v91, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v91, 1, v14))
  {
    sub_6F194(v91, &qword_201E10);
    id v92 = [a3 sampleEndDate];
    if (v92)
    {
      uint64_t v93 = v92;
      uint64_t v94 = (uint64_t)v140;
      sub_1AABB0();

      uint64_t v95 = 0;
    }
    else
    {
      uint64_t v95 = 1;
      uint64_t v94 = (uint64_t)v140;
    }
    uint64_t v96 = (uint64_t)v141;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v94, v95, 1, v14);
    sub_A008(v94, v96, &qword_201E10);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v96, 1, v14))
    {
      sub_6F194(v96, &qword_201E10);
      goto LABEL_28;
    }
    id v97 = v151;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v151, v96, v14);
    uint64_t v98 = v96;
  }
  else
  {
    id v97 = v151;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v151, v91, v14);
    uint64_t v98 = v91;
  }
  sub_6F194(v98, &qword_201E10);
  sub_1AABA0();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v97, v14);
LABEL_28:
  sub_1ABF60();
  swift_release();
  uint64_t v99 = sub_1ABF80();
  swift_release();
  uint64_t v100 = v81;
  uint64_t v101 = v81[7];
  uint64_t v102 = v74;
  swift_release();
  *(void *)(v74 + v101) = v99;
  id v103 = [v152 start];
  if (v103)
  {
    uint64_t v104 = v103;
    uint64_t v105 = v151;
    sub_1AABB0();

    uint64_t v106 = v147;
    (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))(v147, v105, v14);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v106, 0, 1, v14);
    BOOL v107 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v106, 1, v14) == 1;
  }
  else
  {
    BOOL v107 = 1;
    uint64_t v106 = v147;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v147, 1, 1, v14);
  }
  sub_6F194(v106, &qword_201E10);
  *(unsigned char *)(v74 + v100[13]) = v107;
  sub_45DC8(v148, v80);
  uint64_t v108 = sub_1AAB10();
  int v109 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v80, 1, v108);
  uint64_t v110 = (uint64_t)v149;
  if (v109 == 1)
  {
    sub_6F194(v80, &qword_201E20);
    uint64_t v111 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v110, 1, 1, v111);
  }
  else
  {
    id v112 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v113);
    uint64_t v115 = v114;
    [v112 setPunchOutUri:v114];

    id v116 = v112;
    uint64_t v117 = v135;
    sub_1AAC10();
    uint64_t v118 = sub_1AABE0();
    uint64_t v120 = v119;
    (*(void (**)(char *, uint64_t))(v136 + 8))(v117, v137);
    sub_1949C4(v118, v120, v116);

    id v121 = [v116 dictionary];
    if (v121)
    {
      uint64_t v122 = v121;
      uint64_t v123 = self;
      id v153 = 0;
      id v124 = [v123 dataWithPropertyList:v122 format:200 options:0 error:&v153];
      id v125 = v153;
      if (v124)
      {
        uint64_t v126 = sub_1AAB30();
        unint64_t v128 = v127;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v126, v128);
        swift_bridgeObjectRelease();
        uint64_t v129 = sub_1AC1E0();
        uint64_t v130 = v110;
        uint64_t v131 = 0;
      }
      else
      {
        uint64_t v133 = v125;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v129 = sub_1AC1E0();
        uint64_t v130 = v110;
        uint64_t v131 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v130, v131, 1, v129);
    }
    else
    {
      uint64_t v132 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v110, 1, 1, v132);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v108 - 8) + 8))(v80, v108);
    uint64_t v102 = v74;
  }
  return sub_9EA0(v110, v102);
}

uint64_t sub_6817C(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4, uint64_t a5, int a6, void *a7, uint64_t a8)
{
  uint64_t v132 = a8;
  id v138 = a7;
  int v125 = a6;
  uint64_t v121 = sub_1AAC20();
  uint64_t v120 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v119 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_2694(&qword_201E20);
  __chkstk_darwin(v13 - 8);
  uint64_t v133 = (char *)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_2694(&qword_201E28);
  __chkstk_darwin(v15 - 8);
  int v134 = (char *)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1AABD0();
  uint64_t v131 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v135 = (char *)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_2694(&qword_201E10);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v123 = (char *)&v119 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  id v124 = (char *)&v119 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v129 = (char *)&v119 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v130 = (char *)&v119 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v122 = (char *)&v119 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  unint64_t v128 = (char *)&v119 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v126 = (char *)&v119 - v33;
  __chkstk_darwin(v32);
  unint64_t v127 = (char *)&v119 - v34;
  uint64_t v35 = (int *)type metadata accessor for WellnessQueryingBodyTemperatureParameters(0);
  uint64_t v36 = v35[10];
  swift_retain();
  swift_release();
  *(void *)(a1 + v36) = a2;
  sub_1ABEC0();
  swift_allocObject();
  sub_1ABEB0();
  [a3 mostRecent];
  double v38 = v37;
  uint64_t v39 = sub_A7254(a3);
  sub_C0448(v39, v40, a4, v38);
  swift_bridgeObjectRelease();
  sub_1AC050();
  swift_release();
  sub_1AC040();
  swift_release();
  uint64_t v41 = sub_1AC030();
  swift_release();
  uint64_t v42 = v35[11];
  swift_release();
  *(void *)(a1 + v42) = v41;
  swift_allocObject();
  sub_1ABEB0();
  [a3 maximum];
  double v44 = v43;
  uint64_t v45 = sub_A7254(a3);
  sub_C0448(v45, v46, a4, v44);
  swift_bridgeObjectRelease();
  sub_1AC050();
  swift_release();
  sub_1AC040();
  swift_release();
  uint64_t v47 = sub_1AC030();
  swift_release();
  uint64_t v48 = v35[8];
  swift_release();
  *(void *)(a1 + v48) = v47;
  swift_allocObject();
  sub_1ABEB0();
  [a3 minimum];
  double v50 = v49;
  id v137 = a3;
  uint64_t v51 = sub_A7254(a3);
  sub_C0448(v51, v52, a4, v50);
  swift_bridgeObjectRelease();
  sub_1AC050();
  swift_release();
  sub_1AC040();
  swift_release();
  uint64_t v53 = sub_1AC030();
  swift_release();
  uint64_t v136 = v35;
  uint64_t v54 = v35[9];
  swift_release();
  uint64_t v55 = a1;
  *(void *)(a1 + v54) = v53;
  if ((v125 & 1) == 0)
  {
    swift_allocObject();
    sub_1ABEB0();
    id v56 = v137;
    [v137 average];
    double v58 = v57;
    uint64_t v59 = sub_A7254(v56);
    sub_C0448(v59, v60, a4, v58);
    swift_bridgeObjectRelease();
    sub_1AC050();
    swift_release();
    sub_1AC040();
    swift_release();
    uint64_t v61 = sub_1AC030();
    swift_release();
    uint64_t v62 = v136[5];
    swift_release();
    *(void *)(a1 + v62) = v61;
  }
  sub_1ABFA0();
  swift_allocObject();
  sub_1ABF90();
  id v63 = [v138 start];
  if (v63)
  {
    uint64_t v64 = v63;
    uint64_t v65 = (uint64_t)v126;
    sub_1AABB0();

    uint64_t v66 = 0;
    uint64_t v67 = (uint64_t)v133;
    uint64_t v68 = v131;
    uint64_t v70 = (uint64_t)v127;
    uint64_t v69 = (uint64_t)v128;
  }
  else
  {
    uint64_t v66 = 1;
    uint64_t v67 = (uint64_t)v133;
    uint64_t v68 = v131;
    uint64_t v70 = (uint64_t)v127;
    uint64_t v69 = (uint64_t)v128;
    uint64_t v65 = (uint64_t)v126;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v65, v66, 1, v17);
  sub_A008(v65, v70, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v70, 1, v17))
  {
    sub_6F194(v70, &qword_201E10);
    id v71 = [v137 sampleEndDate];
    if (v71)
    {
      id v72 = v71;
      id v73 = v122;
      sub_1AABB0();

      uint64_t v74 = (uint64_t)v73;
      uint64_t v75 = 0;
      uint64_t v76 = (uint64_t)v130;
    }
    else
    {
      uint64_t v75 = 1;
      uint64_t v76 = (uint64_t)v130;
      uint64_t v74 = (uint64_t)v122;
    }
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v74, v75, 1, v17);
    sub_A008(v74, v69, &qword_201E10);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v69, 1, v17))
    {
      sub_6F194(v69, &qword_201E10);
    }
    else
    {
      uint64_t v78 = v135;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v135, v69, v17);
      sub_6F194(v69, &qword_201E10);
      sub_1AABA0();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v78, v17);
    }
  }
  else
  {
    uint64_t v77 = v135;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v135, v70, v17);
    sub_6F194(v70, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v77, v17);
    uint64_t v76 = (uint64_t)v130;
  }
  sub_1ABF70();
  swift_release();
  id v79 = [v138 end];
  if (v79)
  {
    uint64_t v80 = v79;
    uint64_t v81 = (uint64_t)v129;
    sub_1AABB0();

    uint64_t v82 = 0;
  }
  else
  {
    uint64_t v82 = 1;
    uint64_t v81 = (uint64_t)v129;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v81, v82, 1, v17);
  sub_A008(v81, v76, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v76, 1, v17))
  {
    sub_6F194(v76, &qword_201E10);
    id v83 = [v137 sampleEndDate];
    if (v83)
    {
      uint64_t v84 = v83;
      uint64_t v85 = (uint64_t)v123;
      sub_1AABB0();

      uint64_t v86 = 0;
    }
    else
    {
      uint64_t v86 = 1;
      uint64_t v85 = (uint64_t)v123;
    }
    uint64_t v87 = (uint64_t)v124;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v85, v86, 1, v17);
    sub_A008(v85, v87, &qword_201E10);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v87, 1, v17))
    {
      sub_6F194(v87, &qword_201E10);
      goto LABEL_26;
    }
    uint64_t v88 = v135;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v135, v87, v17);
    uint64_t v89 = v87;
  }
  else
  {
    uint64_t v88 = v135;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v135, v76, v17);
    uint64_t v89 = v76;
  }
  sub_6F194(v89, &qword_201E10);
  sub_1AABA0();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v88, v17);
LABEL_26:
  sub_1ABF60();
  swift_release();
  uint64_t v90 = sub_1ABF80();
  swift_release();
  uint64_t v91 = v136[7];
  swift_release();
  *(void *)(v55 + v91) = v90;
  sub_45DC8(v132, v67);
  uint64_t v92 = sub_1AAB10();
  int v93 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v67, 1, v92);
  uint64_t v94 = (uint64_t)v134;
  if (v93 == 1)
  {
    sub_6F194(v67, &qword_201E20);
    uint64_t v95 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v94, 1, 1, v95);
  }
  else
  {
    id v96 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v97);
    uint64_t v99 = v98;
    [v96 setPunchOutUri:v98];

    id v100 = v96;
    uint64_t v101 = v119;
    sub_1AAC10();
    uint64_t v102 = sub_1AABE0();
    uint64_t v104 = v103;
    (*(void (**)(char *, uint64_t))(v120 + 8))(v101, v121);
    sub_1949C4(v102, v104, v100);

    id v105 = [v100 dictionary];
    if (v105)
    {
      uint64_t v106 = v105;
      BOOL v107 = self;
      id v139 = 0;
      id v108 = [v107 dataWithPropertyList:v106 format:200 options:0 error:&v139];
      id v109 = v139;
      if (v108)
      {
        uint64_t v110 = sub_1AAB30();
        unint64_t v112 = v111;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v110, v112);
        swift_bridgeObjectRelease();
        uint64_t v113 = sub_1AC1E0();
        uint64_t v114 = v94;
        uint64_t v115 = 0;
      }
      else
      {
        uint64_t v117 = v109;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v113 = sub_1AC1E0();
        uint64_t v114 = v94;
        uint64_t v115 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v114, v115, 1, v113);
    }
    else
    {
      uint64_t v116 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v94, 1, 1, v116);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v92 - 8) + 8))(v67, v92);
  }
  return sub_9EA0(v94, v55);
}

void sub_68E78()
{
  sub_70120();
  uint64_t v1 = v0;
  uint64_t v131 = v2;
  id v134 = v3;
  LODWORD(v135) = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  sub_1AAC20();
  sub_52C4();
  v122[1] = v12;
  v122[2] = v11;
  __chkstk_darwin(v11);
  sub_70224(v13, v122[0]);
  uint64_t v14 = sub_2694(&qword_201E20);
  uint64_t v15 = sub_53D4(v14);
  __chkstk_darwin(v15);
  sub_6FEFC(v16, v122[0]);
  sub_1AABD0();
  sub_52C4();
  uint64_t v130 = v17;
  __chkstk_darwin(v18);
  sub_53E0();
  uint64_t v129 = v19;
  uint64_t v20 = sub_2694(&qword_201E10);
  uint64_t v21 = sub_53D4(v20);
  __chkstk_darwin(v21);
  sub_E594();
  uint64_t v125 = v22;
  sub_A358();
  __chkstk_darwin(v23);
  uint64_t v126 = (uint64_t)v122 - v24;
  sub_A358();
  __chkstk_darwin(v25);
  unint64_t v127 = (char *)v122 - v26;
  sub_A358();
  __chkstk_darwin(v27);
  uint64_t v128 = (uint64_t)v122 - v28;
  sub_A358();
  __chkstk_darwin(v29);
  uint64_t v123 = (char *)v122 - v30;
  sub_A358();
  __chkstk_darwin(v31);
  uint64_t v124 = (uint64_t)v122 - v32;
  sub_A358();
  uint64_t v34 = __chkstk_darwin(v33);
  uint64_t v36 = (char *)v122 - v35;
  __chkstk_darwin(v34);
  double v38 = (char *)v122 - v37;
  uint64_t v39 = sub_2694(&qword_201E28);
  uint64_t v40 = sub_53D4(v39);
  __chkstk_darwin(v40);
  sub_E594();
  uint64_t v132 = v41;
  sub_A358();
  __chkstk_darwin(v42);
  double v44 = (char *)v122 - v43;
  uint64_t v45 = (int *)v1(0);
  uint64_t v46 = v45[8];
  swift_retain();
  swift_release();
  *(void *)(v10 + v46) = v8;
  uint64_t v47 = v10;
  [v6 total];
  double v49 = v48;
  uint64_t v50 = sub_A7254(v6);
  LOBYTE(v10) = (_BYTE)v135;
  sub_C0448(v50, v51, v135, v49);
  swift_bridgeObjectRelease();
  sub_70114(v47 + v45[9]);
  [v6 average];
  double v53 = v52;
  uint64_t v54 = sub_A7254(v6);
  sub_C0448(v54, v55, v10, v53);
  swift_bridgeObjectRelease();
  uint64_t v135 = v45;
  uint64_t v56 = v45[5];
  double v57 = v6;
  sub_70114(v47 + v56);
  sub_A7254(v6);
  if (v58)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v59 = sub_1AC1E0();
    uint64_t v60 = 0;
  }
  else
  {
    uint64_t v59 = sub_1AC1E0();
    uint64_t v60 = 1;
  }
  uint64_t v61 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v44, v60, 1, v59);
  sub_9EA0((uint64_t)v44, v47 + v135[10]);
  sub_1ABFA0();
  sub_47658();
  sub_1ABF90();
  id v62 = [v134 start];
  if (v62)
  {
    id v63 = v62;
    sub_1AABB0();

    uint64_t v61 = 0;
  }
  sub_700B0((uint64_t)v36, v61);
  sub_A008((uint64_t)v36, (uint64_t)v38, &qword_201E10);
  if (sub_700C8((uint64_t)v38))
  {
    sub_6F194((uint64_t)v38, &qword_201E10);
    id v64 = [v57 sampleStartDate];
    uint64_t v65 = v132;
    if (v64)
    {
      uint64_t v66 = v64;
      uint64_t v67 = (uint64_t)v123;
      sub_1AABB0();

      uint64_t v68 = 0;
    }
    else
    {
      uint64_t v68 = 1;
      uint64_t v67 = (uint64_t)v123;
    }
    sub_700B0(v67, v68);
    uint64_t v72 = v124;
    sub_A008(v67, v124, &qword_201E10);
    if (sub_700C8(v72))
    {
      sub_6F194(v72, &qword_201E10);
      _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
    }
    else
    {
      uint64_t v73 = sub_6FDC8();
      v74(v73);
      sub_6F194(v72, &qword_201E10);
      sub_1AABA0();
      sub_E530();
      v75();
      sub_70034();
    }
  }
  else
  {
    uint64_t v69 = sub_6FDC8();
    v70(v69);
    sub_6F194((uint64_t)v38, &qword_201E10);
    sub_1AABA0();
    sub_E530();
    v71();
    sub_70034();
    uint64_t v65 = v132;
  }
  sub_1ABF70();
  swift_release();
  id v76 = [v134 end];
  if (v76)
  {
    uint64_t v77 = v76;
    uint64_t v78 = (uint64_t)v127;
    sub_1AABB0();

    uint64_t v79 = 0;
  }
  else
  {
    uint64_t v79 = 1;
    uint64_t v78 = (uint64_t)v127;
  }
  sub_700B0(v78, v79);
  uint64_t v80 = v128;
  sub_A008(v78, v128, &qword_201E10);
  if (!sub_700C8(v80)) {
    goto LABEL_23;
  }
  sub_6F194(v80, &qword_201E10);
  id v81 = [v57 sampleEndDate];
  if (v81)
  {
    uint64_t v82 = v81;
    uint64_t v83 = v125;
    sub_1AABB0();

    uint64_t v84 = 0;
  }
  else
  {
    uint64_t v84 = 1;
    uint64_t v83 = v125;
  }
  sub_700B0(v83, v84);
  uint64_t v80 = v126;
  sub_A008(v83, v126, &qword_201E10);
  if (sub_700C8(v80))
  {
    sub_6F194(v80, &qword_201E10);
    _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
  }
  else
  {
LABEL_23:
    sub_6FF3C();
    v85();
    sub_6F194(v80, &qword_201E10);
    sub_1AABA0();
    uint64_t v86 = sub_70258();
    v87(v86);
    sub_70034();
  }
  sub_1ABF60();
  swift_release();
  uint64_t v88 = sub_1ABF80();
  swift_release();
  uint64_t v89 = v135[7];
  swift_release();
  *(void *)(v47 + v89) = v88;
  uint64_t v90 = v133;
  sub_45DC8(v131, v133);
  uint64_t v91 = sub_1AAB10();
  sub_A208(v90, 1, v91);
  if (v92)
  {
    sub_6F194(v90, &qword_201E20);
    uint64_t v93 = sub_1AC1E0();
    sub_A708(v65, v94, v95, v93);
  }
  else
  {
    uint64_t v96 = v47;
    id v97 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v98);
    id v100 = v99;
    [v97 setPunchOutUri:v99];

    id v101 = v97;
    sub_1AAC10();
    uint64_t v102 = sub_1AABE0();
    uint64_t v104 = v103;
    sub_E558();
    v105();
    sub_1949C4(v102, v104, v101);

    id v106 = [v101 dictionary];
    if (v106)
    {
      BOOL v107 = v106;
      id v108 = self;
      id v136 = 0;
      id v109 = sub_70154(v108, "dataWithPropertyList:format:options:error:");
      id v110 = v136;
      if (v109)
      {
        uint64_t v111 = sub_1AAB30();
        unint64_t v113 = v112;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v111, v113);
        swift_bridgeObjectRelease();
        uint64_t v114 = sub_1AC1E0();
        uint64_t v115 = v65;
        uint64_t v116 = 0;
      }
      else
      {
        uint64_t v120 = v110;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v114 = sub_1AC1E0();
        uint64_t v115 = v65;
        uint64_t v116 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v115, v116, 1, v114);
    }
    else
    {
      uint64_t v117 = sub_1AC1E0();
      sub_A708(v65, v118, v119, v117);
    }
    sub_A5C0();
    sub_E558();
    v121();
    uint64_t v47 = v96;
  }
  sub_9EA0(v65, v47);
  sub_700E0();
}

id sub_697A0(void *a1)
{
  return [a1 mostRecent];
}

void sub_697F4()
{
  sub_70120();
  sub_2694(&qword_203550);
  sub_52C4();
  uint64_t v1 = v0;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  sub_2073C();
  sub_A358();
  __chkstk_darwin(v5);
  sub_7051C();
  __chkstk_darwin(v6);
  sub_34214(0, &qword_203558);
  swift_bridgeObjectRetain();
  id v7 = sub_6F09C();
  sub_1AA960();
  id v12 = v7;
  sub_1AA960();
  uint64_t v8 = self;
  id v9 = [v8 inches];
  sub_1AA990();

  id v10 = [v8 inches];
  sub_1AA990();

  sub_1AA980();
  uint64_t v11 = *(void (**)(void))(v1 + 8);
  sub_70058();
  v11();
  sub_70058();
  v11();
  sub_1AA970();

  sub_70058();
  v11();
  sub_70058();
  v11();
  sub_70058();
  v11();
  sub_700E0();
}

uint64_t sub_69A40(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10)
{
  id v116 = a8;
  uint64_t v114 = a7;
  uint64_t v111 = a6;
  id v108 = a5;
  uint64_t v99 = a4;
  LODWORD(v115) = a3;
  uint64_t v12 = sub_1AAC20();
  uint64_t v101 = *(void *)(v12 - 8);
  uint64_t v102 = v12;
  __chkstk_darwin(v12);
  id v100 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_2694(&qword_201E20);
  __chkstk_darwin(v14 - 8);
  uint64_t v113 = (uint64_t)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1AABD0();
  uint64_t v110 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v109 = (char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_2694(&qword_201E10);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v104 = (char *)&v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v105 = (uint64_t)&v99 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  id v106 = (char *)&v99 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v107 = (uint64_t)&v99 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v103 = (char *)&v99 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v99 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v34 = (char *)&v99 - v33;
  __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v99 - v35;
  uint64_t v37 = sub_2694(&qword_201E28);
  uint64_t v38 = __chkstk_darwin(v37 - 8);
  unint64_t v112 = (char *)&v99 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v99 - v40;
  uint64_t v42 = (int *)type metadata accessor for WellnessQueryingHeightParameters(0);
  uint64_t v43 = v42[12];
  swift_retain();
  swift_release();
  *(void *)(a1 + v43) = a2;
  if ((v115 & 1) == 0)
  {
    uint64_t v44 = v42[10];
    uint64_t v45 = v99;
    swift_retain();
    swift_release();
    *(void *)(a1 + v44) = v45;
    uint64_t v46 = v42[9];
    uint64_t v47 = v108;
    swift_retain();
    swift_release();
    *(void *)(a1 + v46) = v47;
  }
  id v115 = a9;
  sub_1ABEF0();
  swift_allocObject();
  sub_1ABEE0();
  sub_1AC020();
  swift_release();
  sub_1ACE40();
  uint64_t v48 = 1;
  uint64_t v111 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v41, 0, 1, v111);
  sub_1AC010();
  swift_release();
  sub_6F194((uint64_t)v41, &qword_201E28);
  uint64_t v49 = sub_1AC000();
  swift_release();
  id v108 = v42;
  uint64_t v50 = v42[8];
  swift_release();
  uint64_t v114 = a1;
  *(void *)(a1 + v50) = v49;
  sub_1ABFA0();
  swift_allocObject();
  sub_1ABF90();
  id v51 = [v116 start];
  if (v51)
  {
    double v52 = v51;
    sub_1AABB0();

    uint64_t v48 = 0;
  }
  uint64_t v53 = v110;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v34, v48, 1, v16);
  sub_A008((uint64_t)v34, (uint64_t)v36, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v36, 1, v16))
  {
    sub_6F194((uint64_t)v36, &qword_201E10);
    id v54 = [v115 sampleEndDate];
    uint64_t v55 = v109;
    if (v54)
    {
      uint64_t v56 = v54;
      uint64_t v57 = (uint64_t)v103;
      sub_1AABB0();

      uint64_t v58 = 0;
    }
    else
    {
      uint64_t v58 = 1;
      uint64_t v57 = (uint64_t)v103;
    }
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v57, v58, 1, v16);
    sub_A008(v57, (uint64_t)v31, &qword_201E10);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v31, 1, v16))
    {
      sub_6F194((uint64_t)v31, &qword_201E10);
      goto LABEL_14;
    }
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v55, v31, v16);
    uint64_t v59 = (uint64_t)v31;
  }
  else
  {
    uint64_t v55 = v109;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v109, v36, v16);
    uint64_t v59 = (uint64_t)v36;
  }
  sub_6F194(v59, &qword_201E10);
  sub_1AABA0();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v16);
LABEL_14:
  uint64_t v60 = v114;
  sub_1ABF70();
  swift_release();
  id v61 = [v116 end];
  if (v61)
  {
    id v62 = v61;
    uint64_t v63 = (uint64_t)v106;
    sub_1AABB0();

    uint64_t v64 = 0;
    uint64_t v65 = (uint64_t)v112;
  }
  else
  {
    uint64_t v64 = 1;
    uint64_t v65 = (uint64_t)v112;
    uint64_t v63 = (uint64_t)v106;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v63, v64, 1, v16);
  uint64_t v66 = v107;
  sub_A008(v63, v107, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v66, 1, v16))
  {
    sub_6F194(v66, &qword_201E10);
    id v67 = [v115 sampleEndDate];
    if (v67)
    {
      uint64_t v68 = v67;
      uint64_t v69 = (uint64_t)v104;
      sub_1AABB0();

      uint64_t v70 = 0;
    }
    else
    {
      uint64_t v70 = 1;
      uint64_t v69 = (uint64_t)v104;
    }
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v69, v70, 1, v16);
    uint64_t v72 = v105;
    sub_A008(v69, v105, &qword_201E10);
    int v73 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v72, 1, v16);
    id v71 = v108;
    if (v73)
    {
      sub_6F194(v72, &qword_201E10);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v55, v72, v16);
      sub_6F194(v72, &qword_201E10);
      sub_1AABA0();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v16);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v55, v66, v16);
    sub_6F194(v66, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v16);
    id v71 = v108;
  }
  sub_1ABF60();
  swift_release();
  uint64_t v74 = sub_1ABF80();
  swift_release();
  uint64_t v75 = v71[11];
  swift_release();
  *(void *)(v60 + v75) = v74;
  uint64_t v76 = v113;
  sub_45DC8(a10, v113);
  uint64_t v77 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v76, 1, v77) == 1)
  {
    sub_6F194(v76, &qword_201E20);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v65, 1, 1, v111);
  }
  else
  {
    id v78 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v79);
    id v81 = v80;
    [v78 setPunchOutUri:v80];

    id v82 = v78;
    uint64_t v83 = v100;
    sub_1AAC10();
    uint64_t v84 = sub_1AABE0();
    uint64_t v86 = v85;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v83, v102);
    sub_1949C4(v84, v86, v82);

    id v87 = [v82 dictionary];
    if (v87)
    {
      uint64_t v88 = v87;
      uint64_t v89 = self;
      id v117 = 0;
      id v90 = [v89 dataWithPropertyList:v88 format:200 options:0 error:&v117];
      id v91 = v117;
      if (v90)
      {
        uint64_t v92 = sub_1AAB30();
        unint64_t v94 = v93;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v92, v94);
        swift_bridgeObjectRelease();
        uint64_t v95 = v65;
        uint64_t v96 = 0;
      }
      else
      {
        id v97 = v91;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v95 = v65;
        uint64_t v96 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v95, v96, 1, v111);
    }
    else
    {
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v65, 1, 1, v111);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v77 - 8) + 8))(v76, v77);
  }
  return sub_9EA0(v65, v60);
}

uint64_t sub_6A54C(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4, int a5, void *a6, uint64_t a7)
{
  uint64_t v131 = a7;
  id v135 = a6;
  int v126 = a5;
  uint64_t v11 = sub_1AAC20();
  uint64_t v121 = *(void *)(v11 - 8);
  uint64_t v122 = v11;
  __chkstk_darwin(v11);
  uint64_t v120 = (char *)&v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_2694(&qword_201E20);
  __chkstk_darwin(v13 - 8);
  uint64_t v132 = (char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_2694(&qword_201E28);
  __chkstk_darwin(v15 - 8);
  uint64_t v133 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1AABD0();
  uint64_t v130 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  id v134 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_2694(&qword_201E10);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v124 = (char *)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v125 = (char *)&v120 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v128 = (char *)&v120 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v129 = (char *)&v120 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  unint64_t v127 = (char *)&v120 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v123 = (uint64_t)&v120 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v120 - v33;
  __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v120 - v35;
  uint64_t v37 = (int *)type metadata accessor for WellnessQueryingBloodOxygenParameters(0);
  uint64_t v38 = v37[10];
  swift_retain();
  swift_release();
  *(void *)(a1 + v38) = a2;
  uint64_t v39 = a1;
  [a3 mostRecent];
  double v41 = v40 * 100.0;
  uint64_t v42 = sub_A7254(a3);
  double v44 = sub_C0448(v42, v43, a4, v41);
  swift_bridgeObjectRelease();
  uint64_t v45 = a1 + v37[12];
  *(double *)uint64_t v45 = v44;
  *(unsigned char *)(v45 + 8) = 0;
  [a3 maximum];
  double v47 = v46 * 100.0;
  uint64_t v48 = sub_A7254(a3);
  double v50 = sub_C0448(v48, v49, a4, v47);
  swift_bridgeObjectRelease();
  uint64_t v51 = a1 + v37[8];
  *(double *)uint64_t v51 = v50;
  *(unsigned char *)(v51 + 8) = 0;
  [a3 minimum];
  double v53 = v52 * 100.0;
  uint64_t v54 = sub_A7254(a3);
  double v56 = sub_C0448(v54, v55, a4, v53);
  swift_bridgeObjectRelease();
  uint64_t v57 = v37;
  uint64_t v58 = a1 + v37[9];
  *(double *)uint64_t v58 = v56;
  *(unsigned char *)(v58 + 8) = 0;
  if ((v126 & 1) == 0)
  {
    [a3 average];
    double v60 = v59 * 100.0;
    uint64_t v61 = sub_A7254(a3);
    double v63 = sub_C0448(v61, v62, a4, v60);
    swift_bridgeObjectRelease();
    uint64_t v64 = a1 + v37[5];
    *(double *)uint64_t v64 = v63;
    *(unsigned char *)(v64 + 8) = 0;
  }
  sub_1ABFA0();
  swift_allocObject();
  sub_1ABF90();
  id v65 = [v135 start];
  if (v65)
  {
    uint64_t v66 = v65;
    sub_1AABB0();

    uint64_t v67 = 0;
  }
  else
  {
    uint64_t v67 = 1;
  }
  uint64_t v68 = v130;
  uint64_t v69 = (uint64_t)v127;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v34, v67, 1, v17);
  sub_A008((uint64_t)v34, (uint64_t)v36, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v36, 1, v17))
  {
    sub_6F194((uint64_t)v36, &qword_201E10);
    id v70 = [a3 sampleEndDate];
    if (v70)
    {
      id v71 = v70;
      sub_1AABB0();

      uint64_t v72 = 0;
    }
    else
    {
      uint64_t v72 = 1;
    }
    uint64_t v74 = (uint64_t)v132;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v69, v72, 1, v17);
    uint64_t v75 = v123;
    sub_A008(v69, v123, &qword_201E10);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v75, 1, v17))
    {
      sub_6F194(v75, &qword_201E10);
    }
    else
    {
      uint64_t v76 = v134;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v134, v75, v17);
      sub_6F194(v75, &qword_201E10);
      sub_1AABA0();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v76, v17);
    }
  }
  else
  {
    int v73 = v134;
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v134, v36, v17);
    sub_6F194((uint64_t)v36, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v73, v17);
    uint64_t v74 = (uint64_t)v132;
  }
  sub_1ABF70();
  swift_release();
  id v77 = [v135 end];
  if (v77)
  {
    id v78 = v77;
    uint64_t v79 = v128;
    sub_1AABB0();

    uint64_t v80 = (uint64_t)v79;
    uint64_t v81 = 0;
  }
  else
  {
    uint64_t v81 = 1;
    uint64_t v80 = (uint64_t)v128;
  }
  uint64_t v82 = (uint64_t)v129;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v80, v81, 1, v17);
  sub_A008(v80, v82, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v82, 1, v17))
  {
    sub_6F194(v82, &qword_201E10);
    id v83 = [a3 sampleEndDate];
    if (v83)
    {
      uint64_t v84 = v83;
      uint64_t v85 = (uint64_t)v124;
      sub_1AABB0();

      uint64_t v86 = 0;
    }
    else
    {
      uint64_t v86 = 1;
      uint64_t v85 = (uint64_t)v124;
    }
    uint64_t v87 = (uint64_t)v125;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v85, v86, 1, v17);
    sub_A008(v85, v87, &qword_201E10);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v87, 1, v17))
    {
      sub_6F194(v87, &qword_201E10);
      goto LABEL_26;
    }
    uint64_t v88 = v134;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v134, v87, v17);
    uint64_t v89 = v87;
  }
  else
  {
    uint64_t v88 = v134;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v134, v82, v17);
    uint64_t v89 = v82;
  }
  sub_6F194(v89, &qword_201E10);
  sub_1AABA0();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v88, v17);
LABEL_26:
  sub_1ABF60();
  swift_release();
  uint64_t v90 = sub_1ABF80();
  swift_release();
  uint64_t v91 = v57[7];
  swift_release();
  *(void *)(v39 + v91) = v90;
  sub_45DC8(v131, v74);
  uint64_t v92 = sub_1AAB10();
  int v93 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v74, 1, v92);
  uint64_t v94 = (uint64_t)v133;
  if (v93 == 1)
  {
    sub_6F194(v74, &qword_201E20);
    uint64_t v95 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v94, 1, 1, v95);
  }
  else
  {
    id v96 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v97);
    uint64_t v99 = v98;
    [v96 setPunchOutUri:v98];

    id v100 = v96;
    uint64_t v101 = v120;
    sub_1AAC10();
    uint64_t v102 = sub_1AABE0();
    uint64_t v104 = v103;
    (*(void (**)(char *, uint64_t))(v121 + 8))(v101, v122);
    sub_1949C4(v102, v104, v100);

    id v105 = [v100 dictionary];
    if (v105)
    {
      id v106 = v105;
      uint64_t v107 = v39;
      id v108 = self;
      id v136 = 0;
      id v109 = [v108 dataWithPropertyList:v106 format:200 options:0 error:&v136];
      id v110 = v136;
      if (v109)
      {
        uint64_t v111 = sub_1AAB30();
        unint64_t v113 = v112;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v111, v113);
        swift_bridgeObjectRelease();
        uint64_t v114 = sub_1AC1E0();
        uint64_t v115 = v94;
        uint64_t v116 = 0;
      }
      else
      {
        uint64_t v118 = v110;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v114 = sub_1AC1E0();
        uint64_t v115 = v94;
        uint64_t v116 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v115, v116, 1, v114);
      uint64_t v39 = v107;
    }
    else
    {
      uint64_t v117 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v94, 1, 1, v117);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v92 - 8) + 8))(v74, v92);
  }
  return sub_9EA0(v94, v39);
}

void sub_6B078()
{
  sub_70120();
  uint64_t v2 = v1;
  uint64_t v128 = v3;
  id v122 = v4;
  LODWORD(v131) = v5;
  id v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  sub_1AAC20();
  sub_52C4();
  v118[1] = v13;
  v118[2] = v12;
  __chkstk_darwin(v12);
  sub_70224(v14, v118[0]);
  uint64_t v15 = sub_2694(&qword_201E20);
  uint64_t v16 = sub_53D4(v15);
  __chkstk_darwin(v16);
  sub_6FEFC(v17, v118[0]);
  uint64_t v18 = sub_2694(&qword_201E28);
  uint64_t v19 = sub_53D4(v18);
  __chkstk_darwin(v19);
  sub_53E0();
  uint64_t v130 = v20;
  sub_1AABD0();
  sub_52C4();
  uint64_t v127 = v21;
  __chkstk_darwin(v22);
  sub_53E0();
  uint64_t v126 = v23;
  uint64_t v24 = sub_2694(&qword_201E10);
  uint64_t v25 = sub_53D4(v24);
  __chkstk_darwin(v25);
  sub_E594();
  uint64_t v120 = v26;
  sub_A358();
  __chkstk_darwin(v27);
  uint64_t v121 = (uint64_t)v118 - v28;
  sub_A358();
  __chkstk_darwin(v29);
  uint64_t v123 = (char *)v118 - v30;
  sub_A358();
  __chkstk_darwin(v31);
  uint64_t v124 = (uint64_t)v118 - v32;
  sub_A358();
  __chkstk_darwin(v33);
  uint64_t v119 = (char *)v118 - v34;
  sub_A358();
  __chkstk_darwin(v35);
  sub_7051C();
  uint64_t v37 = __chkstk_darwin(v36);
  uint64_t v39 = (char *)v118 - v38;
  __chkstk_darwin(v37);
  double v41 = (char *)v118 - v40;
  uint64_t v42 = (int *)v2(0);
  uint64_t v43 = v42[8];
  swift_retain();
  swift_release();
  *(void *)(v11 + v43) = v9;
  [v7 total];
  double v45 = v44;
  uint64_t v46 = sub_A7254(v7);
  LOBYTE(v43) = v131;
  sub_C0448(v46, v47, v131, v45);
  swift_bridgeObjectRelease();
  sub_70114(v11 + v42[9]);
  [v7 average];
  double v49 = v48;
  double v50 = v7;
  uint64_t v51 = sub_A7254(v7);
  sub_C0448(v51, v52, v43, v49);
  swift_bridgeObjectRelease();
  uint64_t v125 = v42;
  uint64_t v53 = v42[5];
  uint64_t v131 = v11;
  sub_70114(v11 + v53);
  sub_1ABFA0();
  sub_47658();
  sub_1ABF90();
  id v54 = v122;
  id v55 = [v122 start];
  if (v55)
  {
    double v56 = v55;
    sub_1AABB0();

    uint64_t v57 = 0;
  }
  else
  {
    uint64_t v57 = 1;
  }
  sub_700B0((uint64_t)v39, v57);
  sub_A008((uint64_t)v39, (uint64_t)v41, &qword_201E10);
  int v58 = sub_700C8((uint64_t)v41);
  uint64_t v59 = v129;
  if (v58)
  {
    sub_6F194((uint64_t)v41, &qword_201E10);
    double v60 = v50;
    id v61 = [v50 sampleStartDate];
    if (v61)
    {
      uint64_t v62 = v61;
      double v63 = v119;
      sub_1AABB0();

      uint64_t v64 = (uint64_t)v63;
      uint64_t v65 = 0;
      uint64_t v66 = v59;
    }
    else
    {
      uint64_t v65 = 1;
      uint64_t v66 = v59;
      uint64_t v64 = (uint64_t)v119;
    }
    sub_700B0(v64, v65);
    sub_A008(v64, v0, &qword_201E10);
    if (sub_700C8(v0))
    {
      sub_6F194(v0, &qword_201E10);
      _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
    }
    else
    {
      sub_6FF3C();
      v69();
      sub_6F194(v0, &qword_201E10);
      sub_1AABA0();
      sub_E530();
      v70();
      sub_70034();
    }
  }
  else
  {
    sub_6FF3C();
    v67();
    sub_6F194((uint64_t)v41, &qword_201E10);
    sub_1AABA0();
    sub_E530();
    v68();
    sub_70034();
    double v60 = v50;
    uint64_t v66 = v59;
  }
  sub_1ABF70();
  swift_release();
  id v71 = [v54 end];
  if (v71)
  {
    uint64_t v72 = v71;
    uint64_t v73 = (uint64_t)v123;
    sub_1AABB0();

    uint64_t v74 = 0;
  }
  else
  {
    uint64_t v74 = 1;
    uint64_t v73 = (uint64_t)v123;
  }
  sub_700B0(v73, v74);
  uint64_t v75 = v124;
  sub_A008(v73, v124, &qword_201E10);
  if (!sub_700C8(v75)) {
    goto LABEL_21;
  }
  sub_6F194(v75, &qword_201E10);
  id v76 = [v60 sampleEndDate];
  if (v76)
  {
    id v77 = v76;
    uint64_t v78 = v120;
    sub_1AABB0();

    uint64_t v79 = 0;
  }
  else
  {
    uint64_t v79 = 1;
    uint64_t v78 = v120;
  }
  sub_700B0(v78, v79);
  uint64_t v75 = v121;
  sub_A008(v78, v121, &qword_201E10);
  if (sub_700C8(v75))
  {
    sub_6F194(v75, &qword_201E10);
    _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
  }
  else
  {
LABEL_21:
    uint64_t v80 = sub_6FDC8();
    v81(v80);
    sub_6F194(v75, &qword_201E10);
    sub_1AABA0();
    uint64_t v82 = sub_70258();
    v83(v82);
    sub_70034();
  }
  sub_1ABF60();
  swift_release();
  uint64_t v84 = sub_1ABF80();
  swift_release();
  uint64_t v85 = v125[7];
  uint64_t v86 = v131;
  swift_release();
  *(void *)(v86 + v85) = v84;
  sub_45DC8(v128, v66);
  uint64_t v87 = sub_1AAB10();
  sub_A208(v66, 1, v87);
  uint64_t v88 = v130;
  if (v89)
  {
    sub_6F194(v66, &qword_201E20);
    uint64_t v90 = sub_1AC1E0();
    sub_A708(v88, v91, v92, v90);
  }
  else
  {
    id v93 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v94);
    id v96 = v95;
    [v93 setPunchOutUri:v95];

    id v97 = v93;
    sub_1AAC10();
    uint64_t v98 = sub_1AABE0();
    uint64_t v100 = v99;
    sub_E558();
    v101();
    sub_1949C4(v98, v100, v97);

    id v102 = [v97 dictionary];
    if (v102)
    {
      uint64_t v103 = v102;
      uint64_t v104 = self;
      id v132 = 0;
      id v105 = sub_70154(v104, "dataWithPropertyList:format:options:error:");
      id v106 = v132;
      if (v105)
      {
        uint64_t v107 = sub_1AAB30();
        unint64_t v109 = v108;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v107, v109);
        swift_bridgeObjectRelease();
        uint64_t v110 = sub_1AC1E0();
        uint64_t v111 = v88;
        uint64_t v112 = 0;
      }
      else
      {
        uint64_t v116 = v106;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v110 = sub_1AC1E0();
        uint64_t v111 = v88;
        uint64_t v112 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v111, v112, 1, v110);
    }
    else
    {
      uint64_t v113 = sub_1AC1E0();
      sub_A708(v88, v114, v115, v113);
    }
    sub_A5C0();
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v66, v87);
  }
  sub_9EA0(v88, v131);
  sub_700E0();
}

uint64_t sub_6B93C(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4, int a5, void *a6, uint64_t a7)
{
  id v143 = a6;
  uint64_t v144 = a7;
  int v136 = a5;
  uint64_t v133 = sub_1AAC20();
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v131 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_2694(&qword_201E20);
  __chkstk_darwin(v12 - 8);
  uint64_t v145 = (uint64_t)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_2694(&qword_201E28);
  __chkstk_darwin(v14 - 8);
  uint64_t v146 = (char *)&v131 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1AABD0();
  uint64_t v141 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v148 = (char *)&v131 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_2694(&qword_201E10);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v142 = (uint64_t)&v131 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  id v134 = (char *)&v131 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  id v135 = (char *)&v131 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  id v139 = (char *)&v131 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v140 = (uint64_t)&v131 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  id v137 = (char *)&v131 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  id v138 = (char *)&v131 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v131 - v34;
  __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v131 - v36;
  uint64_t v38 = (int *)type metadata accessor for WellnessQueryingRespiratoryRateParameters(0);
  uint64_t v39 = v38[10];
  swift_retain();
  swift_release();
  *(void *)(a1 + v39) = a2;
  uint64_t v40 = a1;
  [a3 mostRecent];
  double v42 = v41;
  uint64_t v43 = sub_A7254(a3);
  double v45 = sub_C0448(v43, v44, a4, v42);
  swift_bridgeObjectRelease();
  uint64_t v46 = a1 + v38[12];
  *(double *)uint64_t v46 = v45;
  *(unsigned char *)(v46 + 8) = 0;
  [a3 maximum];
  double v48 = v47;
  uint64_t v49 = sub_A7254(a3);
  double v51 = sub_C0448(v49, v50, a4, v48);
  swift_bridgeObjectRelease();
  uint64_t v52 = a1 + v38[8];
  *(double *)uint64_t v52 = v51;
  *(unsigned char *)(v52 + 8) = 0;
  [a3 minimum];
  double v54 = v53;
  uint64_t v55 = sub_A7254(a3);
  double v57 = sub_C0448(v55, v56, a4, v54);
  swift_bridgeObjectRelease();
  uint64_t v147 = v38;
  uint64_t v58 = a1 + v38[9];
  *(double *)uint64_t v58 = v57;
  *(unsigned char *)(v58 + 8) = 0;
  if ((v136 & 1) == 0)
  {
    [a3 average];
    double v60 = v59;
    uint64_t v61 = sub_A7254(a3);
    double v63 = sub_C0448(v61, v62, a4, v60);
    swift_bridgeObjectRelease();
    uint64_t v64 = a1 + v147[5];
    *(double *)uint64_t v64 = v63;
    *(unsigned char *)(v64 + 8) = 0;
  }
  sub_1ABFA0();
  swift_allocObject();
  sub_1ABF90();
  id v65 = v143;
  id v66 = [v143 start];
  if (v66)
  {
    uint64_t v67 = v66;
    sub_1AABB0();

    uint64_t v68 = 0;
  }
  else
  {
    uint64_t v68 = 1;
  }
  uint64_t v69 = (uint64_t)v137;
  uint64_t v70 = (uint64_t)v138;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v35, v68, 1, v16);
  sub_A008((uint64_t)v35, (uint64_t)v37, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v37, 1, v16))
  {
    sub_6F194((uint64_t)v37, &qword_201E10);
    id v71 = [a3 sampleEndDate];
    if (v71)
    {
      uint64_t v72 = v71;
      sub_1AABB0();

      uint64_t v73 = 0;
    }
    else
    {
      uint64_t v73 = 1;
    }
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v69, v73, 1, v16);
    sub_A008(v69, v70, &qword_201E10);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v70, 1, v16))
    {
      sub_6F194(v70, &qword_201E10);
      uint64_t v74 = v141;
      goto LABEL_15;
    }
    uint64_t v77 = v141;
    uint64_t v75 = v148;
    (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v148, v70, v16);
    uint64_t v78 = v70;
    uint64_t v74 = v77;
    sub_6F194(v78, &qword_201E10);
    sub_1AABA0();
    uint64_t v76 = v77;
  }
  else
  {
    uint64_t v74 = v141;
    uint64_t v75 = v148;
    (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v148, v37, v16);
    sub_6F194((uint64_t)v37, &qword_201E10);
    sub_1AABA0();
    uint64_t v76 = v74;
  }
  (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v16);
LABEL_15:
  sub_1ABF70();
  swift_release();
  id v79 = [v65 end];
  if (v79)
  {
    uint64_t v80 = v79;
    uint64_t v81 = v139;
    sub_1AABB0();

    uint64_t v82 = (uint64_t)v81;
    uint64_t v83 = 0;
    uint64_t v84 = (uint64_t)v146;
  }
  else
  {
    uint64_t v83 = 1;
    uint64_t v84 = (uint64_t)v146;
    uint64_t v82 = (uint64_t)v139;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v82, v83, 1, v16);
  uint64_t v85 = v82;
  uint64_t v86 = v140;
  sub_A008(v85, v140, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v86, 1, v16))
  {
    sub_6F194(v86, &qword_201E10);
    id v87 = [a3 sampleEndDate];
    if (v87)
    {
      uint64_t v88 = v87;
      uint64_t v89 = (uint64_t)v134;
      sub_1AABB0();

      uint64_t v90 = 0;
    }
    else
    {
      uint64_t v90 = 1;
      uint64_t v89 = (uint64_t)v134;
    }
    uint64_t v91 = (uint64_t)v135;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v89, v90, 1, v16);
    sub_A008(v89, v91, &qword_201E10);
    int v95 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v91, 1, v16);
    uint64_t v94 = v147;
    if (v95)
    {
      sub_6F194(v91, &qword_201E10);
    }
    else
    {
      id v96 = v148;
      (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v148, v91, v16);
      sub_6F194(v91, &qword_201E10);
      sub_1AABA0();
      (*(void (**)(char *, uint64_t))(v74 + 8))(v96, v16);
    }
  }
  else
  {
    uint64_t v92 = v86;
    id v93 = v148;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v148, v92, v16);
    sub_6F194(v92, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v93, v16);
    uint64_t v94 = v147;
  }
  sub_1ABF60();
  swift_release();
  uint64_t v97 = sub_1ABF80();
  swift_release();
  uint64_t v98 = v94[7];
  swift_release();
  *(void *)(v40 + v98) = v97;
  id v99 = [v65 start];
  if (v99)
  {
    uint64_t v100 = v99;
    uint64_t v101 = v148;
    sub_1AABB0();

    uint64_t v102 = v142;
    (*(void (**)(uint64_t, char *, uint64_t))(v74 + 32))(v142, v101, v16);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v102, 0, 1, v16);
    BOOL v103 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v102, 1, v16) == 1;
  }
  else
  {
    BOOL v103 = 1;
    uint64_t v102 = v142;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v142, 1, 1, v16);
  }
  sub_6F194(v102, &qword_201E10);
  *(unsigned char *)(v40 + v94[13]) = v103;
  uint64_t v104 = v145;
  sub_45DC8(v144, v145);
  uint64_t v105 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v104, 1, v105) == 1)
  {
    sub_6F194(v104, &qword_201E20);
    uint64_t v106 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v84, 1, 1, v106);
  }
  else
  {
    uint64_t v107 = v40;
    id v108 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v109);
    uint64_t v111 = v110;
    [v108 setPunchOutUri:v110];

    id v112 = v108;
    uint64_t v113 = v131;
    sub_1AAC10();
    uint64_t v114 = sub_1AABE0();
    uint64_t v116 = v115;
    (*(void (**)(char *, uint64_t))(v132 + 8))(v113, v133);
    sub_1949C4(v114, v116, v112);

    id v117 = [v112 dictionary];
    if (v117)
    {
      uint64_t v118 = v117;
      uint64_t v119 = self;
      id v149 = 0;
      id v120 = [v119 dataWithPropertyList:v118 format:200 options:0 error:&v149];
      id v121 = v149;
      if (v120)
      {
        uint64_t v122 = sub_1AAB30();
        unint64_t v124 = v123;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v122, v124);
        swift_bridgeObjectRelease();
        uint64_t v125 = sub_1AC1E0();
        uint64_t v126 = v84;
        uint64_t v127 = 0;
      }
      else
      {
        uint64_t v129 = v121;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v125 = sub_1AC1E0();
        uint64_t v126 = v84;
        uint64_t v127 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v126, v127, 1, v125);
    }
    else
    {
      uint64_t v128 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v84, 1, 1, v128);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(v104, v105);
    uint64_t v40 = v107;
  }
  return sub_9EA0(v84, v40);
}

uint64_t sub_6C56C(uint64_t a1, uint64_t a2, void *a3, int a4, void *a5, uint64_t a6)
{
  uint64_t v121 = a6;
  id v118 = a5;
  LODWORD(v124) = a4;
  uint64_t v9 = sub_1AAC20();
  uint64_t v110 = *(void *)(v9 - 8);
  uint64_t v111 = v9;
  __chkstk_darwin(v9);
  unint64_t v109 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2694(&qword_201E20);
  __chkstk_darwin(v11 - 8);
  uint64_t v123 = (uint64_t)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1AABD0();
  uint64_t v120 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v119 = (char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_2694(&qword_201E10);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v113 = (char *)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v114 = (uint64_t)&v109 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v116 = (char *)&v109 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v117 = (uint64_t)&v109 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v115 = (char *)&v109 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v112 = (uint64_t)&v109 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v109 - v29;
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v109 - v31;
  uint64_t v33 = sub_2694(&qword_201E28);
  uint64_t v34 = __chkstk_darwin(v33 - 8);
  uint64_t v122 = (char *)&v109 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v109 - v36;
  uint64_t v38 = (int *)type metadata accessor for WellnessQueryingRestingEnergyParameters(0);
  uint64_t v39 = v38[8];
  swift_retain();
  swift_release();
  *(void *)(a1 + v39) = a2;
  uint64_t v40 = a1;
  [a3 average];
  double v42 = v41;
  uint64_t v43 = sub_A7254(a3);
  unsigned __int8 v44 = v124;
  double v46 = sub_C0448(v43, v45, v124, v42);
  swift_bridgeObjectRelease();
  uint64_t v47 = a1 + v38[5];
  *(double *)uint64_t v47 = v46;
  *(unsigned char *)(v47 + 8) = 0;
  [a3 total];
  double v49 = v48;
  uint64_t v50 = sub_A7254(a3);
  double v52 = sub_C0448(v50, v51, v44, v49);
  swift_bridgeObjectRelease();
  unint64_t v124 = v38;
  uint64_t v53 = v38[9];
  double v54 = a3;
  uint64_t v55 = a1 + v53;
  *(double *)uint64_t v55 = v52;
  *(unsigned char *)(v55 + 8) = 0;
  sub_A7254(a3);
  if (v56)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v57 = sub_1AC1E0();
    uint64_t v58 = 0;
  }
  else
  {
    uint64_t v57 = sub_1AC1E0();
    uint64_t v58 = 1;
  }
  uint64_t v59 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v37, v58, 1, v57);
  sub_9EA0((uint64_t)v37, a1 + v124[10]);
  sub_1ABFA0();
  swift_allocObject();
  sub_1ABF90();
  id v60 = v118;
  id v61 = [v118 start];
  uint64_t v62 = v119;
  if (v61)
  {
    double v63 = v61;
    sub_1AABB0();

    uint64_t v59 = 0;
  }
  uint64_t v64 = (uint64_t)v115;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v30, v59, 1, v13);
  sub_A008((uint64_t)v30, (uint64_t)v32, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v13))
  {
    sub_6F194((uint64_t)v32, &qword_201E10);
    id v65 = [v54 sampleStartDate];
    uint64_t v66 = (uint64_t)v122;
    uint64_t v67 = v120;
    if (v65)
    {
      uint64_t v68 = v65;
      sub_1AABB0();

      uint64_t v69 = 0;
    }
    else
    {
      uint64_t v69 = 1;
    }
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v64, v69, 1, v13);
    uint64_t v70 = v112;
    sub_A008(v64, v112, &qword_201E10);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v70, 1, v13))
    {
      sub_6F194(v70, &qword_201E10);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v62, v70, v13);
      sub_6F194(v70, &qword_201E10);
      sub_1AABA0();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v62, v13);
    }
  }
  else
  {
    uint64_t v67 = v120;
    (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v62, v32, v13);
    sub_6F194((uint64_t)v32, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v62, v13);
    uint64_t v66 = (uint64_t)v122;
  }
  sub_1ABF70();
  swift_release();
  id v71 = [v60 end];
  if (v71)
  {
    uint64_t v72 = v71;
    uint64_t v73 = (uint64_t)v116;
    sub_1AABB0();

    uint64_t v74 = 0;
  }
  else
  {
    uint64_t v74 = 1;
    uint64_t v73 = (uint64_t)v116;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v73, v74, 1, v13);
  uint64_t v75 = v117;
  sub_A008(v73, v117, &qword_201E10);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v75, 1, v13)) {
    goto LABEL_23;
  }
  sub_6F194(v75, &qword_201E10);
  id v76 = [v54 sampleEndDate];
  if (v76)
  {
    uint64_t v77 = v76;
    uint64_t v78 = (uint64_t)v113;
    sub_1AABB0();

    uint64_t v79 = 0;
  }
  else
  {
    uint64_t v79 = 1;
    uint64_t v78 = (uint64_t)v113;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v78, v79, 1, v13);
  uint64_t v75 = v114;
  sub_A008(v78, v114, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v75, 1, v13))
  {
    sub_6F194(v75, &qword_201E10);
  }
  else
  {
LABEL_23:
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v62, v75, v13);
    sub_6F194(v75, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v62, v13);
  }
  sub_1ABF60();
  swift_release();
  uint64_t v80 = sub_1ABF80();
  swift_release();
  uint64_t v81 = v124[7];
  swift_release();
  *(void *)(v40 + v81) = v80;
  uint64_t v82 = v123;
  sub_45DC8(v121, v123);
  uint64_t v83 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v82, 1, v83) == 1)
  {
    sub_6F194(v82, &qword_201E20);
    uint64_t v84 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v66, 1, 1, v84);
  }
  else
  {
    uint64_t v85 = v40;
    id v86 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v87);
    uint64_t v89 = v88;
    [v86 setPunchOutUri:v88];

    id v90 = v86;
    uint64_t v91 = v109;
    sub_1AAC10();
    uint64_t v92 = sub_1AABE0();
    uint64_t v94 = v93;
    (*(void (**)(char *, uint64_t))(v110 + 8))(v91, v111);
    sub_1949C4(v92, v94, v90);

    id v95 = [v90 dictionary];
    if (v95)
    {
      id v96 = v95;
      uint64_t v97 = self;
      id v125 = 0;
      id v98 = [v97 dataWithPropertyList:v96 format:200 options:0 error:&v125];
      id v99 = v125;
      if (v98)
      {
        uint64_t v100 = sub_1AAB30();
        unint64_t v102 = v101;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v100, v102);
        swift_bridgeObjectRelease();
        uint64_t v103 = sub_1AC1E0();
        uint64_t v104 = v66;
        uint64_t v105 = 0;
      }
      else
      {
        uint64_t v107 = v99;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v103 = sub_1AC1E0();
        uint64_t v104 = v66;
        uint64_t v105 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v104, v105, 1, v103);
    }
    else
    {
      uint64_t v106 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v66, 1, 1, v106);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v83 - 8) + 8))(v82, v83);
    uint64_t v40 = v85;
  }
  return sub_9EA0(v66, v40);
}

uint64_t sub_6D054(uint64_t a1, uint64_t a2, void *a3, int a4, void *a5, uint64_t a6)
{
  uint64_t v114 = a6;
  id v117 = a5;
  LODWORD(v118) = a4;
  uint64_t v9 = sub_1AAC20();
  uint64_t v104 = *(void *)(v9 - 8);
  uint64_t v105 = v9;
  __chkstk_darwin(v9);
  uint64_t v103 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2694(&qword_201E20);
  __chkstk_darwin(v11 - 8);
  uint64_t v115 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_2694(&qword_201E28);
  __chkstk_darwin(v13 - 8);
  uint64_t v116 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1AABD0();
  uint64_t v113 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v112 = (char *)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_2694(&qword_201E10);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v107 = (char *)&v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v108 = (uint64_t)&v103 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v109 = (char *)&v103 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v110 = (uint64_t)&v103 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v106 = (char *)&v103 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v103 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v33 = (char *)&v103 - v32;
  __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v103 - v34;
  uint64_t v36 = (int *)type metadata accessor for WellnessQueryingStepsParameters(0);
  uint64_t v37 = v36[9];
  swift_retain();
  swift_release();
  *(void *)(a1 + v37) = a2;
  [a3 total];
  double v39 = v38;
  uint64_t v40 = sub_A7254(a3);
  unsigned __int8 v41 = v118;
  double v43 = sub_C0448(v40, v42, v118, v39);
  swift_bridgeObjectRelease();
  uint64_t v44 = a1 + v36[10];
  *(double *)uint64_t v44 = v43;
  *(unsigned char *)(v44 + 8) = 0;
  [a3 average];
  double v46 = v45;
  uint64_t v47 = a3;
  uint64_t v48 = sub_A7254(a3);
  double v50 = sub_C0448(v48, v49, v41, v46);
  swift_bridgeObjectRelease();
  uint64_t v111 = v36;
  uint64_t v51 = v36[5];
  uint64_t v118 = a1;
  uint64_t v52 = a1 + v51;
  *(double *)uint64_t v52 = v50;
  *(unsigned char *)(v52 + 8) = 0;
  sub_1ABFA0();
  swift_allocObject();
  sub_1ABF90();
  id v53 = [v117 start];
  if (v53)
  {
    double v54 = v53;
    sub_1AABB0();

    uint64_t v55 = 0;
  }
  else
  {
    uint64_t v55 = 1;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v33, v55, 1, v15);
  sub_A008((uint64_t)v33, (uint64_t)v35, &qword_201E10);
  int v56 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v35, 1, v15);
  uint64_t v58 = v112;
  uint64_t v57 = v113;
  if (v56)
  {
    sub_6F194((uint64_t)v35, &qword_201E10);
    id v59 = [a3 sampleStartDate];
    uint64_t v60 = (uint64_t)v115;
    if (v59)
    {
      id v61 = v59;
      uint64_t v62 = (uint64_t)v106;
      sub_1AABB0();

      uint64_t v63 = 0;
    }
    else
    {
      uint64_t v63 = 1;
      uint64_t v62 = (uint64_t)v106;
    }
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v62, v63, 1, v15);
    sub_A008(v62, (uint64_t)v30, &qword_201E10);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v30, 1, v15))
    {
      sub_6F194((uint64_t)v30, &qword_201E10);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v58, v30, v15);
      sub_6F194((uint64_t)v30, &qword_201E10);
      sub_1AABA0();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v15);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v112, v35, v15);
    sub_6F194((uint64_t)v35, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v15);
    uint64_t v60 = (uint64_t)v115;
  }
  sub_1ABF70();
  swift_release();
  id v64 = [v117 end];
  if (v64)
  {
    id v65 = v64;
    uint64_t v66 = (uint64_t)v109;
    sub_1AABB0();

    uint64_t v67 = 0;
  }
  else
  {
    uint64_t v67 = 1;
    uint64_t v66 = (uint64_t)v109;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v66, v67, 1, v15);
  uint64_t v68 = v110;
  sub_A008(v66, v110, &qword_201E10);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v68, 1, v15)) {
    goto LABEL_21;
  }
  sub_6F194(v68, &qword_201E10);
  id v69 = [v47 sampleEndDate];
  if (v69)
  {
    uint64_t v70 = v69;
    uint64_t v71 = (uint64_t)v107;
    sub_1AABB0();

    uint64_t v72 = 0;
  }
  else
  {
    uint64_t v72 = 1;
    uint64_t v71 = (uint64_t)v107;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v71, v72, 1, v15);
  uint64_t v68 = v108;
  sub_A008(v71, v108, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v68, 1, v15))
  {
    sub_6F194(v68, &qword_201E10);
  }
  else
  {
LABEL_21:
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v58, v68, v15);
    sub_6F194(v68, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v15);
  }
  sub_1ABF60();
  swift_release();
  uint64_t v73 = sub_1ABF80();
  swift_release();
  uint64_t v74 = v111[7];
  uint64_t v75 = v118;
  swift_release();
  *(void *)(v75 + v74) = v73;
  sub_45DC8(v114, v60);
  uint64_t v76 = sub_1AAB10();
  int v77 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v60, 1, v76);
  uint64_t v78 = (uint64_t)v116;
  if (v77 == 1)
  {
    sub_6F194(v60, &qword_201E20);
    uint64_t v79 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v78, 1, 1, v79);
  }
  else
  {
    id v80 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v81);
    uint64_t v83 = v82;
    [v80 setPunchOutUri:v82];

    id v84 = v80;
    uint64_t v85 = v103;
    sub_1AAC10();
    uint64_t v86 = sub_1AABE0();
    uint64_t v88 = v87;
    (*(void (**)(char *, uint64_t))(v104 + 8))(v85, v105);
    sub_1949C4(v86, v88, v84);

    id v89 = [v84 dictionary];
    if (v89)
    {
      id v90 = v89;
      uint64_t v91 = self;
      id v119 = 0;
      id v92 = [v91 dataWithPropertyList:v90 format:200 options:0 error:&v119];
      id v93 = v119;
      if (v92)
      {
        uint64_t v94 = sub_1AAB30();
        unint64_t v96 = v95;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v94, v96);
        swift_bridgeObjectRelease();
        uint64_t v97 = sub_1AC1E0();
        uint64_t v98 = v78;
        uint64_t v99 = 0;
      }
      else
      {
        unint64_t v101 = v93;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v97 = sub_1AC1E0();
        uint64_t v98 = v78;
        uint64_t v99 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v98, v99, 1, v97);
    }
    else
    {
      uint64_t v100 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v78, 1, 1, v100);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v76 - 8) + 8))(v60, v76);
  }
  return sub_9EA0(v78, v118);
}

void sub_6DAA4()
{
  sub_70120();
  uint64_t v1 = v0;
  uint64_t v140 = v2;
  id v145 = v3;
  int v132 = v4;
  int v133 = v5;
  id v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  v127[2] = sub_1AAC20();
  sub_52C4();
  v127[1] = v12;
  __chkstk_darwin(v13);
  sub_53E0();
  v127[0] = v14;
  uint64_t v15 = sub_2694(&qword_201E20);
  uint64_t v16 = sub_53D4(v15);
  __chkstk_darwin(v16);
  sub_53E0();
  uint64_t v142 = v17;
  uint64_t v18 = sub_1AABD0();
  sub_52C4();
  uint64_t v138 = v19;
  __chkstk_darwin(v20);
  sub_6FEFC(v21, v127[0]);
  uint64_t v22 = sub_2694(&qword_201E10);
  uint64_t v23 = sub_53D4(v22);
  __chkstk_darwin(v23);
  sub_E594();
  uint64_t v139 = v24;
  sub_A358();
  __chkstk_darwin(v25);
  sub_2073C();
  uint64_t v130 = v26;
  sub_A358();
  __chkstk_darwin(v27);
  sub_2073C();
  uint64_t v131 = v28;
  sub_A358();
  __chkstk_darwin(v29);
  int v136 = (char *)v127 - v30;
  sub_A358();
  __chkstk_darwin(v31);
  uint64_t v137 = (uint64_t)v127 - v32;
  sub_A358();
  __chkstk_darwin(v33);
  id v135 = (char *)v127 - v34;
  sub_A358();
  __chkstk_darwin(v35);
  sub_2073C();
  uint64_t v129 = v36;
  sub_A358();
  __chkstk_darwin(v37);
  id v134 = (char *)v127 - v38;
  sub_A358();
  __chkstk_darwin(v39);
  unsigned __int8 v41 = (char *)v127 - v40;
  uint64_t v144 = sub_1AC1E0();
  sub_52C4();
  uint64_t v128 = v42;
  __chkstk_darwin(v43);
  double v45 = (char *)v127 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_2694(&qword_201E28);
  uint64_t v47 = sub_53D4(v46);
  __chkstk_darwin(v47);
  sub_E594();
  uint64_t v141 = v48;
  sub_A358();
  __chkstk_darwin(v49);
  uint64_t v51 = (char *)v127 - v50;
  uint64_t v52 = (int *)v1(0);
  uint64_t v53 = v52[10];
  swift_retain();
  swift_release();
  *(void *)(v11 + v53) = v9;
  uint64_t v54 = v11;
  uint64_t v55 = v52;
  [v7 mostRecent];
  uint64_t v56 = sub_70530();
  sub_701A4(v56, v57);
  sub_70548();
  sub_70114(v54 + v52[12]);
  [v7 maximum];
  uint64_t v58 = sub_70530();
  sub_701A4(v58, v59);
  sub_70548();
  sub_70114(v54 + v52[8]);
  [v7 minimum];
  uint64_t v60 = sub_70530();
  sub_701A4(v60, v61);
  sub_70548();
  sub_70114(v54 + v52[9]);
  if ((v133 & 1) == 0)
  {
    [v7 average];
    uint64_t v62 = sub_70530();
    sub_701A4(v62, v63);
    sub_70548();
    sub_70114(v54 + v52[5]);
  }
  sub_A7254(v7);
  if (v64)
  {
    sub_1ACE30();
    swift_bridgeObjectRelease();
    sub_4788C();
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v65 = v144;
    (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v51, v45, v144);
  }
  else
  {
    sub_1ACE40();
    uint64_t v65 = v144;
  }
  uint64_t v66 = (uint64_t)v135;
  uint64_t v67 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v51, 0, 1, v65);
  sub_9EA0((uint64_t)v51, v54 + v52[11]);
  sub_1ABFA0();
  sub_47658();
  sub_1ABF90();
  id v68 = [v145 start];
  if (v68)
  {
    id v69 = v68;
    uint64_t v70 = (uint64_t)v134;
    sub_1AABB0();

    uint64_t v67 = 0;
  }
  else
  {
    uint64_t v70 = (uint64_t)v134;
  }
  sub_701C0(v70, v67);
  sub_A008(v70, (uint64_t)v41, &qword_201E10);
  if (sub_702A4((uint64_t)v41))
  {
    sub_6F194((uint64_t)v41, &qword_201E10);
    id v71 = [v7 sampleEndDate];
    uint64_t v72 = v138;
    if (v71)
    {
      uint64_t v73 = v71;
      sub_1AABB0();

      uint64_t v74 = 0;
    }
    else
    {
      uint64_t v74 = 1;
    }
    uint64_t v78 = v141;
    sub_701C0(v66, v74);
    uint64_t v79 = v129;
    sub_A008(v66, v129, &qword_201E10);
    uint64_t v75 = v55;
    if (sub_702A4(v79))
    {
      sub_6F194(v79, &qword_201E10);
      _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
    }
    else
    {
      sub_704CC();
      sub_E524();
      v80();
      sub_6F194(v79, &qword_201E10);
      sub_1AABA0();
      sub_E530();
      v81();
      sub_70034();
    }
  }
  else
  {
    uint64_t v75 = v55;
    uint64_t v72 = v138;
    sub_704CC();
    sub_E524();
    v76();
    sub_6F194((uint64_t)v41, &qword_201E10);
    sub_1AABA0();
    sub_E530();
    v77();
    sub_70034();
    uint64_t v78 = v141;
  }
  sub_1ABF70();
  swift_release();
  id v82 = [v145 end];
  if (v82)
  {
    uint64_t v83 = v82;
    id v84 = v136;
    sub_1AABB0();

    uint64_t v85 = (uint64_t)v84;
    uint64_t v86 = 0;
    uint64_t v87 = v142;
  }
  else
  {
    uint64_t v86 = 1;
    uint64_t v87 = v142;
    uint64_t v85 = (uint64_t)v136;
  }
  sub_701C0(v85, v86);
  uint64_t v88 = v85;
  uint64_t v89 = v137;
  sub_A008(v88, v137, &qword_201E10);
  if (sub_702A4(v89))
  {
    sub_6F194(v89, &qword_201E10);
    id v90 = [v7 sampleEndDate];
    if (v90)
    {
      uint64_t v91 = v90;
      uint64_t v92 = v130;
      sub_1AABB0();

      uint64_t v93 = 0;
    }
    else
    {
      uint64_t v93 = 1;
      uint64_t v92 = v130;
    }
    uint64_t v94 = v131;
    sub_701C0(v92, v93);
    sub_A008(v92, v94, &qword_201E10);
    if (sub_702A4(v94))
    {
      sub_6F194(v94, &qword_201E10);
      _s18WellnessFlowPlugin28SpecificMedCompletedLogModelV6dosageSdSgvpfi_0();
      goto LABEL_29;
    }
    sub_704CC();
  }
  else
  {
    sub_704CC();
    uint64_t v94 = v89;
  }
  sub_E524();
  v95();
  sub_6F194(v94, &qword_201E10);
  sub_1AABA0();
  sub_E530();
  v96();
  sub_70034();
LABEL_29:
  sub_1ABF60();
  swift_release();
  uint64_t v97 = sub_1ABF80();
  swift_release();
  uint64_t v98 = v75[7];
  swift_release();
  *(void *)(v54 + v98) = v97;
  id v99 = [v145 start];
  if (v99)
  {
    uint64_t v100 = v99;
    uint64_t v101 = v143;
    sub_1AABB0();

    uint64_t v102 = v139;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 32))(v139, v101, v18);
    sub_701C0(v102, 0);
    sub_A208(v102, 1, v18);
    if (v103) {
      char v104 = 1;
    }
    else {
      char v104 = 0;
    }
  }
  else
  {
    char v104 = 1;
    uint64_t v102 = v139;
    sub_701C0(v139, 1);
  }
  sub_6F194(v102, &qword_201E10);
  *(unsigned char *)(v54 + v75[13]) = v104;
  sub_45DC8(v140, v87);
  uint64_t v105 = sub_1AAB10();
  sub_A208(v87, 1, v105);
  if (v103)
  {
    sub_6F194(v87, &qword_201E20);
    sub_704FC();
  }
  else
  {
    id v106 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v107);
    unint64_t v109 = v108;
    [v106 setPunchOutUri:v108];

    id v110 = v106;
    sub_1AAC10();
    uint64_t v111 = sub_1AABE0();
    uint64_t v113 = v112;
    sub_E558();
    v114();
    sub_1949C4(v111, v113, v110);

    id v115 = [v110 dictionary];
    if (v115)
    {
      uint64_t v116 = v115;
      id v117 = self;
      id v146 = 0;
      id v118 = sub_70154(v117, "dataWithPropertyList:format:options:error:");
      id v119 = v146;
      if (v118)
      {
        uint64_t v120 = sub_1AAB30();
        unint64_t v122 = v121;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v120, v122);
        swift_bridgeObjectRelease();
        uint64_t v123 = v78;
        uint64_t v124 = 0;
      }
      else
      {
        id v125 = v119;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v123 = v78;
        uint64_t v124 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v123, v124, 1, v144);
    }
    else
    {
      sub_704FC();
    }
    sub_A5C0();
    (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v87, v105);
  }
  sub_9EA0(v78, v54);
  sub_700E0();
}

uint64_t sub_6E574(uint64_t a1, uint64_t a2, int a3, void *a4, int a5, void *a6, uint64_t a7)
{
  uint64_t v128 = a7;
  id v132 = a6;
  LODWORD(v131) = a5;
  LODWORD(v125) = a3;
  uint64_t v10 = sub_1AAC20();
  uint64_t v117 = *(void *)(v10 - 8);
  uint64_t v118 = v10;
  __chkstk_darwin(v10);
  uint64_t v116 = (char *)&v115 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_2694(&qword_201E20);
  __chkstk_darwin(v12 - 8);
  uint64_t v130 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1AABD0();
  uint64_t v127 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v126 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_2694(&qword_201E10);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v120 = (char *)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v121 = (uint64_t)&v115 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v123 = (char *)&v115 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v124 = (uint64_t)&v115 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  unint64_t v122 = (char *)&v115 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v119 = (uint64_t)&v115 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v115 - v30;
  __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v115 - v32;
  uint64_t v34 = sub_2694(&qword_201E28);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  uint64_t v129 = (char *)&v115 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v115 - v37;
  uint64_t v39 = type metadata accessor for WellnessQueryingWeightParameters(0);
  uint64_t v40 = *(int *)(v39 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + v40) = a2;
  unsigned __int8 v41 = (int *)v39;
  unsigned __int8 v42 = v131;
  if ((v125 & 1) == 0)
  {
    [a4 minimum];
    double v44 = v43;
    uint64_t v45 = sub_A7254(a4);
    double v47 = sub_C0448(v45, v46, v42, v44);
    swift_bridgeObjectRelease();
    uint64_t v48 = a1 + v41[9];
    *(double *)uint64_t v48 = v47;
    *(unsigned char *)(v48 + 8) = 0;
    [a4 maximum];
    double v50 = v49;
    uint64_t v51 = sub_A7254(a4);
    double v53 = sub_C0448(v51, v52, v42, v50);
    swift_bridgeObjectRelease();
    uint64_t v54 = a1 + v41[8];
    *(double *)uint64_t v54 = v53;
    *(unsigned char *)(v54 + 8) = 0;
  }
  sub_697A0(a4);
  double v56 = v55;
  uint64_t v57 = sub_A7254(a4);
  double v59 = sub_C0448(v57, v58, v42, v56);
  swift_bridgeObjectRelease();
  uint64_t v60 = a1 + v41[12];
  *(double *)uint64_t v60 = v59;
  *(unsigned char *)(v60 + 8) = 0;
  sub_A7254(a4);
  if (v61)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v62 = sub_1AC1E0();
    uint64_t v63 = 0;
  }
  else
  {
    uint64_t v62 = sub_1AC1E0();
    uint64_t v63 = 1;
  }
  uint64_t v64 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v38, v63, 1, v62);
  id v125 = v41;
  uint64_t v65 = v41[11];
  uint64_t v131 = a1;
  sub_9EA0((uint64_t)v38, a1 + v65);
  sub_1ABFA0();
  swift_allocObject();
  sub_1ABF90();
  id v66 = [v132 start];
  if (v66)
  {
    uint64_t v67 = v66;
    sub_1AABB0();

    uint64_t v64 = 0;
  }
  id v69 = v126;
  uint64_t v68 = v127;
  uint64_t v70 = (uint64_t)v122;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v31, v64, 1, v14);
  sub_A008((uint64_t)v31, (uint64_t)v33, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1, v14))
  {
    sub_6F194((uint64_t)v33, &qword_201E10);
    id v71 = [a4 sampleEndDate];
    uint64_t v72 = (uint64_t)v130;
    uint64_t v73 = (uint64_t)v123;
    if (v71)
    {
      uint64_t v74 = v71;
      sub_1AABB0();

      uint64_t v75 = 0;
    }
    else
    {
      uint64_t v75 = 1;
    }
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v70, v75, 1, v14);
    uint64_t v76 = v119;
    sub_A008(v70, v119, &qword_201E10);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v76, 1, v14))
    {
      sub_6F194(v76, &qword_201E10);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v69, v76, v14);
      sub_6F194(v76, &qword_201E10);
      sub_1AABA0();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v14);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v69, v33, v14);
    sub_6F194((uint64_t)v33, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v14);
    uint64_t v72 = (uint64_t)v130;
    uint64_t v73 = (uint64_t)v123;
  }
  sub_1ABF70();
  swift_release();
  id v77 = [v132 end];
  if (v77)
  {
    uint64_t v78 = v77;
    sub_1AABB0();

    uint64_t v79 = 0;
  }
  else
  {
    uint64_t v79 = 1;
  }
  uint64_t v80 = v131;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v73, v79, 1, v14);
  uint64_t v81 = v124;
  sub_A008(v73, v124, &qword_201E10);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v81, 1, v14)) {
    goto LABEL_25;
  }
  sub_6F194(v81, &qword_201E10);
  id v82 = [a4 sampleEndDate];
  if (v82)
  {
    uint64_t v83 = v82;
    uint64_t v84 = (uint64_t)v120;
    sub_1AABB0();

    uint64_t v85 = 0;
  }
  else
  {
    uint64_t v85 = 1;
    uint64_t v84 = (uint64_t)v120;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v84, v85, 1, v14);
  uint64_t v81 = v121;
  sub_A008(v84, v121, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v81, 1, v14))
  {
    sub_6F194(v81, &qword_201E10);
  }
  else
  {
LABEL_25:
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v69, v81, v14);
    sub_6F194(v81, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v14);
  }
  sub_1ABF60();
  swift_release();
  uint64_t v86 = sub_1ABF80();
  swift_release();
  uint64_t v87 = v125[6];
  swift_release();
  *(void *)(v80 + v87) = v86;
  sub_45DC8(v128, v72);
  uint64_t v88 = sub_1AAB10();
  int v89 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v72, 1, v88);
  uint64_t v90 = (uint64_t)v129;
  if (v89 == 1)
  {
    sub_6F194(v72, &qword_201E20);
    uint64_t v91 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v90, 1, 1, v91);
  }
  else
  {
    id v92 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v93);
    unint64_t v95 = v94;
    [v92 setPunchOutUri:v94];

    id v96 = v92;
    uint64_t v97 = v116;
    sub_1AAC10();
    uint64_t v98 = sub_1AABE0();
    uint64_t v100 = v99;
    (*(void (**)(char *, uint64_t))(v117 + 8))(v97, v118);
    sub_1949C4(v98, v100, v96);

    id v101 = [v96 dictionary];
    if (v101)
    {
      uint64_t v102 = v101;
      char v103 = self;
      id v133 = 0;
      id v104 = [v103 dataWithPropertyList:v102 format:200 options:0 error:&v133];
      id v105 = v133;
      if (v104)
      {
        uint64_t v106 = sub_1AAB30();
        unint64_t v108 = v107;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v106, v108);
        swift_bridgeObjectRelease();
        uint64_t v109 = sub_1AC1E0();
        uint64_t v110 = v90;
        uint64_t v111 = 0;
      }
      else
      {
        uint64_t v113 = v105;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v109 = sub_1AC1E0();
        uint64_t v110 = v90;
        uint64_t v111 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v110, v111, 1, v109);
    }
    else
    {
      uint64_t v112 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v90, 1, 1, v112);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v88 - 8) + 8))(v72, v88);
    uint64_t v80 = v131;
  }
  return sub_9EA0(v90, v80);
}

id sub_6F09C()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = sub_1ACDC0();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithSymbol:v1];

  return v2;
}

uint64_t sub_6F110(uint64_t a1)
{
  return sub_6F410(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_65FA4);
}

uint64_t sub_6F128(uint64_t a1)
{
  return sub_6F394(a1, (uint64_t)type metadata accessor for WellnessQueryingExerciseMinutesParameters, (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_68E78);
}

uint64_t sub_6F154(uint64_t a1)
{
  return sub_6F394(a1, (uint64_t)type metadata accessor for WellnessQueryingStandMinutesParameters, (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_68E78);
}

uint64_t sub_6F180(uint64_t a1)
{
  return sub_66870(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t sub_6F194(uint64_t a1, uint64_t *a2)
{
  sub_2694(a2);
  sub_A5C0();
  sub_E558();
  v3();
  return a1;
}

uint64_t sub_6F1E8(uint64_t a1)
{
  return sub_6F410(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_6C56C);
}

uint64_t sub_6F200(uint64_t a1)
{
  return sub_6F3DC(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_674C8);
}

uint64_t sub_6F218(uint64_t a1)
{
  return sub_6E574(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void **)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_6F230(uint64_t a1)
{
  return sub_6817C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(unsigned char *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(void **)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_6F248(uint64_t a1)
{
  return sub_6F394(a1, (uint64_t)type metadata accessor for WellnessQueryingCyclingDistanceParameters, (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_68E78);
}

uint64_t sub_6F274(uint64_t a1)
{
  return sub_6F394(a1, (uint64_t)type metadata accessor for WellnessQueryingDistanceWalkingAndRunningParameters, (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_68E78);
}

uint64_t sub_6F2A0(uint64_t a1)
{
  return sub_6F394(a1, (uint64_t)type metadata accessor for WellnessQueryingDistanceWheelchairParameters, (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_68E78);
}

uint64_t sub_6F2CC(uint64_t a1)
{
  return sub_6F394(a1, (uint64_t)type metadata accessor for WellnessQueryingFlightsClimbedParameters, (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_6B078);
}

void sub_6F2F8()
{
}

uint64_t sub_6F310(uint64_t a1)
{
  return sub_69A40(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32), *(int **)(v1 + 40), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void **)(v1 + 72), *(void **)(v1 + 80), *(void *)(v1 + 88));
}

uint64_t sub_6F350(uint64_t a1)
{
  return sub_6F3DC(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_6A54C);
}

uint64_t sub_6F368(uint64_t a1)
{
  return sub_6F394(a1, (uint64_t)type metadata accessor for WellnessQueryingPushesParameters, (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_6B078);
}

uint64_t sub_6F394(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, void, void, void, void, uint64_t))
{
  return a3(a1, *(void *)(v3 + 16), *(void *)(v3 + 24), *(unsigned __int8 *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), a2);
}

uint64_t sub_6F3C4(uint64_t a1)
{
  return sub_6F3DC(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_6B93C);
}

uint64_t sub_6F3DC(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(unsigned __int8 *)(v2 + 33), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_6F3F8(uint64_t a1)
{
  return sub_6F410(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_6D054);
}

uint64_t sub_6F410(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

void sub_6F428()
{
}

void sub_6F440()
{
}

uint64_t sub_6F47C()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 0, 1, v1);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, v1);
}

id sub_6F4EC(uint64_t a1)
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v2, 1, 1, a1);
  int v4 = *(const char **)(v1 + 3224);
  return [v3 v4];
}

uint64_t sub_6F52C()
{
  return v0;
}

uint64_t sub_6F560()
{
  return *(void *)(v0 + 184);
}

uint64_t sub_6F590()
{
  return swift_slowAlloc();
}

uint64_t sub_6F5C8()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v1 + 240), v0, 1, *(void *)(v1 + 160));
  return type metadata accessor for WellnessTime(0);
}

uint64_t sub_6F610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, v4, 1, a4);
  return type metadata accessor for WellnessTime(0);
}

uint64_t sub_6F648()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v2, 0, 1, v1);
  return sub_A008(v2, v0, v3);
}

uint64_t sub_6F688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v4, 1, 1, a4);
}

void sub_6F6A4()
{
  sub_1993BC();
}

uint64_t sub_6F6D8()
{
  sub_2E38(v0, *(void *)(v1 + 40));
  return swift_task_alloc();
}

uint64_t sub_6F70C()
{
  return v0;
}

uint64_t sub_6F720()
{
  uint64_t v2 = *(void *)(v0 + 104) + 120;
  return sub_E3FC(v2, v0 + 16);
}

uint64_t sub_6F74C()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_6F760()
{
  uint64_t v3 = *(void *)(v1 + 248);
  uint64_t v4 = *(void *)(v1 + 160);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, v0, 1, v4);
}

uint64_t sub_6F78C()
{
  return *(void *)(v0 + 160);
}

uint64_t sub_6F7C8()
{
  return v0;
}

uint64_t sub_6F7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, v4, 1, a4);
}

uint64_t sub_6F808()
{
  return *(void *)(v0 + 200);
}

uint64_t sub_6F824()
{
  return swift_slowAlloc();
}

uint64_t sub_6F864(float a1)
{
  *uint64_t v1 = a1;
  return sub_1ACFC0();
}

id sub_6F884()
{
  uint64_t v2 = (void *)v1[12];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1[34], v0, 1, v1[17]);
  return [v2 sampleEndDate];
}

void sub_6F8D4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_6F910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return a12;
}

uint64_t sub_6F928(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 264);
  uint64_t v5 = *(void *)(v2 + 160);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v4, a2, 1, v5);
}

uint64_t sub_6F94C()
{
  return v0;
}

uint64_t sub_6F964(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  return sub_1ACFE0();
}

uint64_t sub_6F9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1, a4);
}

uint64_t sub_6F9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[12] = a2;
  v3[13] = a3;
  v3[11] = a1;
  return sub_1AC800();
}

uint64_t sub_6F9F4()
{
  uint64_t v2 = *(void *)(v0 + 104) + 120;
  return sub_E3FC(v2, v0 + 16);
}

uint64_t sub_6FA28()
{
  return swift_arrayDestroy();
}

BOOL sub_6FA44(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_6FA60()
{
  return sub_1AA9D0();
}

uint64_t sub_6FA80()
{
  return sub_1ACFE0();
}

uint64_t sub_6FA9C()
{
  return swift_slowAlloc();
}

id sub_6FAB8()
{
  uint64_t v2 = *(void **)(v0 + 88);
  return [v2 start];
}

uint64_t sub_6FAD8()
{
  return swift_beginAccess();
}

uint64_t sub_6FB0C()
{
  return sub_1AABB0();
}

uint64_t sub_6FB2C()
{
  return sub_1AABB0();
}

uint64_t sub_6FB4C()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, 0, 1, v0);
  return sub_A008(v3, v1, v2);
}

uint64_t sub_6FB8C(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v2 + 240), a2, 1, *(void *)(v2 + 136));
}

uint64_t sub_6FBBC()
{
  return *(void *)(v0 + 384);
}

uint64_t sub_6FC24()
{
  return *(void *)(v0 + 176);
}

uint64_t sub_6FC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_6F194(a12, v12);
}

uint64_t sub_6FC5C(uint64_t a1)
{
  *(void *)(v1 + 248) = a1;
  return swift_task_alloc();
}

uint64_t sub_6FC94@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(unsigned char *)(result + 32) = a2;
  *(void *)(result + 40) = v3;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t sub_6FCA4(uint64_t result)
{
  *(void *)(v1 + 280) = result;
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v2;
  return result;
}

uint64_t sub_6FCB4(uint64_t a1)
{
  *(void *)(v1 + 272) = a1;
  return sub_1AAA10();
}

uint64_t sub_6FD00(uint64_t a1)
{
  *(void *)(v1 + 256) = a1;
  return swift_task_alloc();
}

uint64_t sub_6FD24(uint64_t a1)
{
  *(void *)(v1 + 208) = a1;
  return swift_task_alloc();
}

uint64_t sub_6FD3C(uint64_t a1)
{
  *(void *)(v1 + 192) = a1;
  return swift_task_alloc();
}

uint64_t sub_6FD54()
{
  return *(void *)v0;
}

uint64_t sub_6FD78(uint64_t a1)
{
  *(void *)(v1 + 240) = a1;
  return swift_task_alloc();
}

id sub_6FD90()
{
  return [v0 start];
}

uint64_t sub_6FDB0(uint64_t a1)
{
  *(void *)(v1 + 224) = a1;
  return swift_task_alloc();
}

uint64_t sub_6FDC8()
{
  return v0;
}

uint64_t sub_6FDE8()
{
  return 0;
}

uint64_t sub_6FDF8(uint64_t a1)
{
  *(void *)(v1 + 232) = a1;
  return swift_task_alloc();
}

uint64_t sub_6FE10@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(unsigned char *)(result + 32) = a2;
  *(unsigned char *)(result + 33) = v2;
  *(void *)(result + 40) = v4;
  *(void *)(result + 48) = v3;
  return result;
}

uint64_t sub_6FE24()
{
  return sub_1AA9D0();
}

uint64_t sub_6FE44()
{
  return *(void *)(v0 + 176);
}

uint64_t sub_6FE64()
{
  return sub_1AABB0();
}

uint64_t sub_6FE84()
{
  return sub_1AABB0();
}

uint64_t sub_6FEA4(uint64_t a1)
{
  *(void *)(v1 + 184) = a1;
  return swift_task_alloc();
}

uint64_t sub_6FEBC(uint64_t a1)
{
  *(void *)(v1 + 176) = a1;
  return swift_task_alloc();
}

void sub_6FEFC(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_6FF18()
{
  return sub_1AABB0();
}

uint64_t sub_6FF68()
{
  *(void *)(v1 + 296) = v0;
  return swift_task_dealloc();
}

uint64_t sub_6FF80(uint64_t a1)
{
  *(void *)(v1 + 152) = a1;
  return sub_1AABD0();
}

uint64_t sub_6FF98(uint64_t a1)
{
  *(void *)(v1 + 144) = a1;
  return swift_task_alloc();
}

uint64_t sub_6FFB0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  return sub_4A278(a1, a2, (uint64_t *)va);
}

uint64_t sub_6FFC8()
{
  return sub_45DC8(v0, v1);
}

uint64_t sub_6FFE0()
{
  return sub_1AABB0();
}

uint64_t sub_6FFF8(uint64_t result)
{
  *(void *)(v1 + 288) = result;
  return result;
}

uint64_t sub_70004()
{
  return sub_1AABB0();
}

uint64_t sub_7001C()
{
  return sub_1AABB0();
}

uint64_t sub_70034()
{
  return v0;
}

uint64_t sub_70040(uint64_t a1)
{
  *(void *)(v1 + 264) = a1;
  return swift_task_alloc();
}

uint64_t sub_70068(uint64_t result)
{
  *(void *)(v1 + 304) = result;
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v2;
  return result;
}

uint64_t sub_70078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_6F194(a11, v11);
}

uint64_t sub_70094(uint64_t a1)
{
  *(void *)(v1 + 296) = a1;
  return sub_1AAA10();
}

uint64_t sub_700B0(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1, v2);
}

uint64_t sub_700C8(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v1);
}

uint64_t sub_700FC(uint64_t a1)
{
  *(void *)(v1 + 200) = a1;
  return swift_task_alloc();
}

void sub_70114(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t sub_7013C(uint64_t a1)
{
  *(void *)(v1 + 160) = a1;
  return swift_task_alloc();
}

id sub_70154(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2, 200, 0, v3 - 120);
}

uint64_t sub_70174(uint64_t a1)
{
  *(void *)(v1 + 168) = a1;
  return swift_task_alloc();
}

uint64_t sub_7018C(uint64_t a1)
{
  *(void *)(v1 + 280) = a1;
  return swift_task_alloc();
}

double sub_701A4(uint64_t a1, uint64_t a2)
{
  return sub_C0448(a1, a2, v2, v4);
}

uint64_t sub_701C0(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1, v2);
}

uint64_t sub_701D8()
{
  return *(void *)(v0 + 184);
}

uint64_t sub_70200(uint64_t a1)
{
  *(void *)(v1 + 152) = a1;
  return swift_task_alloc();
}

void sub_70224(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 256) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_70240()
{
  return sub_1AABB0();
}

uint64_t sub_70258()
{
  return v0;
}

uint64_t sub_70274(uint64_t a1)
{
  *(void *)(v1 + 272) = a1;
  return swift_task_alloc();
}

uint64_t sub_7028C()
{
  return sub_1AABB0();
}

uint64_t sub_702A4(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v1);
}

uint64_t sub_702E0()
{
  *(void *)(v1 + 320) = v0;
  return swift_task_dealloc();
}

uint64_t sub_702F8(uint64_t a1)
{
  *(void *)(v1 + 128) = a1;
  return sub_1AABD0();
}

uint64_t sub_70310()
{
  return *(void *)v0;
}

uint64_t sub_7031C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  return sub_4A278(a1, a2, (uint64_t *)va);
}

id sub_70364()
{
  uint64_t v3 = *(const char **)(v1 + 3248);
  return [v0 v3];
}

uint64_t sub_7037C()
{
  return sub_45DC8(v0, v1);
}

uint64_t sub_70394()
{
  return sub_1AABB0();
}

uint64_t sub_703AC()
{
  return sub_1AABB0();
}

uint64_t sub_703D4()
{
  return v0;
}

uint64_t sub_703EC()
{
  return v0;
}

uint64_t sub_70404(uint64_t result)
{
  *(void *)(v1 + 312) = result;
  return result;
}

double sub_70440(uint64_t a1, uint64_t a2)
{
  return sub_C0448(a1, a2, 0xA2u, v3);
}

uint64_t sub_7045C()
{
  return sub_1AABB0();
}

uint64_t sub_70490(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1, v2);
}

uint64_t sub_704FC()
{
  uint64_t v3 = *(void *)(v1 - 144);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 1, 1, v3);
}

uint64_t sub_70530()
{
  return sub_A7254(v0);
}

uint64_t sub_70548()
{
  return swift_bridgeObjectRelease();
}

void sub_70560(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_70594(float a1)
{
  *uint64_t v1 = a1;
  return sub_1ACFC0();
}

uint64_t sub_705B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, v4, 1, a4);
}

uint64_t sub_705D4()
{
  sub_A364();
  *(unsigned char *)(v0 + 168) = v1;
  *(void *)(v0 + 120) = v2;
  *(void *)(v0 + 128) = v3;
  uint64_t v4 = sub_1AC800();
  *(void *)(v0 + 136) = v4;
  sub_A19C(v4);
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_70664()
{
  int v1 = *(unsigned __int8 *)(v0 + 168);
  BOOL v2 = (v1 - 89) > 0x3E || ((1 << (v1 - 89)) & 0x6400000000054181) == 0;
  if (v2 && ((unsigned int v3 = v1 - 155, v4 = v3 > 0x22, v5 = (1 << v3) & 0x4200C8091, !v4) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    *(void *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    sub_70AA4(v0 + 16, v0 + 56);
    uint64_t v9 = *(void *)(v0 + 80);
    sub_2EF0C(v0 + 56, &qword_202570);
    if (v9)
    {
      sub_72124(v0 + 16, *(void *)(v0 + 120));
    }
    else
    {
      sub_1AC7D0();
      sub_A340();
      uint64_t v10 = sub_4BB4C();
      v11(v10);
      uint64_t v12 = sub_1AC7F0();
      os_log_type_t v13 = sub_1ACF60();
      if (os_log_type_enabled(v12, v13))
      {
        *(_WORD *)sub_292A0() = 0;
        sub_471F8(&def_342E4, v14, v15, "#GenerateLoggingResponseOutput: Snippet model cannot be created. Possibly unsupported usecase.");
        sub_A1F0();
      }
      uint64_t v16 = *(void *)(v0 + 120);

      uint64_t v17 = sub_72310();
      v18(v17);
      sub_2EF0C(v0 + 16, &qword_202570);
      *(_OWORD *)uint64_t v16 = 0u;
      *(_OWORD *)(v16 + 16) = 0u;
      *(void *)(v16 + 32) = 0;
    }
    swift_task_dealloc();
    sub_E564();
    return v19();
  }
  else
  {
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_7088C;
    return sub_70B0C();
  }
}

uint64_t sub_7088C()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_E53C();
  *BOOL v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_70958()
{
  sub_70AA4(v0 + 16, v0 + 56);
  uint64_t v1 = *(void *)(v0 + 80);
  sub_2EF0C(v0 + 56, &qword_202570);
  if (v1)
  {
    sub_72124(v0 + 16, *(void *)(v0 + 120));
  }
  else
  {
    sub_1AC7D0();
    sub_A340();
    uint64_t v2 = sub_4BB4C();
    v3(v2);
    uint64_t v4 = sub_1AC7F0();
    os_log_type_t v5 = sub_1ACF60();
    if (os_log_type_enabled(v4, v5))
    {
      *(_WORD *)sub_292A0() = 0;
      sub_471F8(&def_342E4, v6, v7, "#GenerateLoggingResponseOutput: Snippet model cannot be created. Possibly unsupported usecase.");
      sub_A1F0();
    }
    uint64_t v8 = *(void *)(v0 + 120);

    uint64_t v9 = sub_72310();
    v10(v9);
    sub_2EF0C(v0 + 16, &qword_202570);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(void *)(v8 + 32) = 0;
  }
  swift_task_dealloc();
  sub_E564();
  return v11();
}

uint64_t sub_70AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_202570);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_70B0C()
{
  sub_A364();
  *(unsigned char *)(v0 + 528) = v1;
  *(void *)(v0 + 192) = v2;
  *(void *)(v0 + 200) = v3;
  uint64_t v4 = sub_2694(&qword_201E28);
  sub_53D4(v4);
  *(void *)(v0 + 208) = sub_A42C();
  uint64_t v5 = sub_2694(&qword_201CC8);
  sub_53D4(v5);
  *(void *)(v0 + 216) = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E20);
  sub_53D4(v6);
  *(void *)(v0 + 224) = sub_A42C();
  uint64_t v7 = sub_2694(&qword_2022D0);
  sub_53D4(v7);
  *(void *)(v0 + 232) = sub_A42C();
  uint64_t v8 = type metadata accessor for HealthDataLogModel();
  *(void *)(v0 + 240) = v8;
  sub_53D4(v8);
  *(void *)(v0 + 248) = sub_A220();
  *(void *)(v0 + 256) = swift_task_alloc();
  *(void *)(v0 + 264) = swift_task_alloc();
  uint64_t v9 = sub_1AC800();
  *(void *)(v0 + 272) = v9;
  sub_A19C(v9);
  *(void *)(v0 + 280) = v10;
  *(void *)(v0 + 288) = sub_A220();
  *(void *)(v0 + 296) = swift_task_alloc();
  *(void *)(v0 + 304) = swift_task_alloc();
  *(void *)(v0 + 312) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  *(void *)(v0 + 320) = v11;
  sub_53D4(v11);
  *(void *)(v0 + 328) = sub_A220();
  *(void *)(v0 + 336) = swift_task_alloc();
  *(void *)(v0 + 344) = swift_task_alloc();
  uint64_t v12 = sub_2694(&qword_201E10);
  sub_53D4(v12);
  *(void *)(v0 + 352) = sub_A42C();
  uint64_t v13 = sub_1AABD0();
  *(void *)(v0 + 360) = v13;
  sub_A19C(v13);
  *(void *)(v0 + 368) = v14;
  *(void *)(v0 + 376) = sub_A220();
  *(void *)(v0 + 384) = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v15, v16, v17);
}

uint64_t sub_70D28()
{
  sub_A364();
  sub_2F2B8(*(unsigned char *)(v0 + 528));
  *(void *)(v0 + 392) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 400) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_70DCC;
  return sub_7A988();
}

uint64_t sub_70DCC()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_E53C();
  *uint64_t v4 = v3;
  *(void *)(v7 + 408) = v5;
  *(void *)(v7 + 416) = v6;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_70EB8()
{
  uint64_t v72 = v0;
  if (sub_2F2B8(*(unsigned char *)(v0 + 528)) == 0xD000000000000028 && v1 == 0x80000000001B99C0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v3 = *(void **)(v0 + 200);
    unsigned __int8 v4 = *(unsigned char *)(v0 + 528);
    [v3 doubleValue];
    double v6 = v5 * 100.0;
    goto LABEL_7;
  }
  char v2 = sub_1AD2F0();
  swift_bridgeObjectRelease();
  if (v2) {
    goto LABEL_5;
  }
  uint64_t v3 = *(void **)(v0 + 200);
  unsigned __int8 v4 = *(unsigned char *)(v0 + 528);
  [v3 doubleValue];
  double v6 = v7;
LABEL_7:
  uint64_t v8 = sub_7218C(v3);
  *(double *)(v0 + 424) = sub_C0448(v8, v9, v4, v6);
  uint64_t v10 = *(void **)(v0 + 200);
  unsigned __int8 v11 = *(unsigned char *)(v0 + 528);
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_72080(v11, v10);
  uint64_t v14 = v13;
  *(void *)(v0 + 432) = v12;
  *(void *)(v0 + 440) = v13;
  id v15 = [v10 start];
  if (!v15)
  {
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 352), 1, 1, *(void *)(v0 + 360));
    goto LABEL_14;
  }
  uint64_t v16 = v15;
  uint64_t v18 = *(void *)(v0 + 368);
  uint64_t v17 = *(void *)(v0 + 376);
  uint64_t v20 = *(void *)(v0 + 352);
  uint64_t v19 = *(void *)(v0 + 360);
  sub_1AABB0();

  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  v21(v20, v17, v19);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v20, 0, 1, v19);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v20, 1, v19) == 1)
  {
LABEL_14:
    uint64_t v46 = *(void *)(v0 + 352);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2EF0C(v46, &qword_201E10);
    goto LABEL_16;
  }
  v21(*(void *)(v0 + 384), *(void *)(v0 + 352), *(void *)(v0 + 360));
  if (v14 && *(void *)(v0 + 416))
  {
    uint64_t v22 = *(void *)(v0 + 344);
    uint64_t v69 = *(void *)(v0 + 336);
    uint64_t v23 = *(void *)(v0 + 312);
    uint64_t v24 = *(void *)(v0 + 320);
    uint64_t v25 = *(void *)(v0 + 272);
    uint64_t v26 = *(void *)(v0 + 280);
    char v27 = *(unsigned char *)(v0 + 528);
    sub_1ACE40();
    swift_bridgeObjectRelease();
    unint64_t v28 = sub_34250(v27);
    unint64_t v30 = v29;
    unint64_t v31 = sub_2F2B8(v27);
    uint64_t v32 = (unint64_t *)(v22 + *(int *)(v24 + 20));
    *uint64_t v32 = v28;
    v32[1] = v30;
    uint64_t v33 = (unint64_t *)(v22 + *(int *)(v24 + 24));
    *uint64_t v33 = v31;
    v33[1] = v34;
    uint64_t v35 = sub_1AC7D0();
    *(void *)(v0 + 448) = v35;
    sub_A340();
    uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    *(void *)(v0 + 456) = v36;
    *(void *)(v0 + 464) = (v26 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v36(v23, v35, v25);
    sub_721F0(v22, v69, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    uint64_t v37 = sub_1AC7F0();
    os_log_type_t v38 = sub_1ACF50();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v40 = *(void *)(v0 + 336);
    if (v39)
    {
      uint64_t v41 = *(void *)(v0 + 328);
      uint64_t v67 = *(void *)(v0 + 280);
      uint64_t v68 = *(void *)(v0 + 272);
      uint64_t v70 = *(void *)(v0 + 312);
      unsigned __int8 v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v71 = swift_slowAlloc();
      *(_DWORD *)unsigned __int8 v42 = 136315138;
      sub_721F0(v40, v41, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      uint64_t v43 = sub_1ACE00();
      *(void *)(v0 + 184) = sub_4A278(v43, v44, &v71);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      sub_72250(v40, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      _os_log_impl(&def_342E4, v37, v38, "#GenerateLoggingResponseOutput: Snippet header model %s", v42, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
      v45(v70, v68);
    }
    else
    {
      uint64_t v63 = *(void *)(v0 + 312);
      uint64_t v64 = *(void *)(v0 + 272);
      uint64_t v65 = *(void *)(v0 + 280);
      sub_72250(*(void *)(v0 + 336), (void (*)(void))type metadata accessor for SnippetHeaderModel);

      uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      v45(v63, v64);
    }
    *(void *)(v0 + 472) = v45;
    sub_1AC0E0();
    swift_allocObject();
    sub_1AC0D0();
    sub_1AABA0();
    sub_1AC0C0();
    swift_release();
    *(void *)(v0 + 480) = sub_1AC0B0();
    swift_release();
    id v66 = (void *)swift_task_alloc();
    *(void *)(v0 + 488) = v66;
    *id v66 = v0;
    v66[1] = sub_71588;
    return sub_7A658(0x646567676F6CLL, 0xE600000000000000);
  }
  uint64_t v47 = sub_722F8();
  v48(v47);
  swift_bridgeObjectRelease();
LABEL_16:
  uint64_t v50 = *(void *)(v0 + 280);
  uint64_t v49 = *(void *)(v0 + 288);
  uint64_t v51 = *(void *)(v0 + 272);
  uint64_t v52 = sub_1AC7D0();
  sub_A340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v49, v52, v51);
  double v53 = sub_1AC7F0();
  os_log_type_t v54 = sub_1ACF60();
  if (os_log_type_enabled(v53, v54))
  {
    *(_WORD *)sub_292A0() = 0;
    sub_A7FC(&def_342E4, v55, v56, "#GenerateLoggingResponseOutput: Response start is nil. or unit/category labels are nil");
    sub_A1F0();
  }
  uint64_t v58 = *(void *)(v0 + 280);
  uint64_t v57 = *(void *)(v0 + 288);
  uint64_t v59 = *(void *)(v0 + 272);
  uint64_t v60 = *(void *)(v0 + 192);

  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
  *(void *)(v60 + 32) = 0;
  *(_OWORD *)uint64_t v60 = 0u;
  *(_OWORD *)(v60 + 16) = 0u;
  sub_722A8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v61();
}

uint64_t sub_71588()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *char v2 = v1;
  v1[19] = v0;
  v1[20] = v3;
  v1[21] = v4;
  uint64_t v5 = *v0;
  sub_E53C();
  *double v6 = v5;
  *(void *)(v8 + 496) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_7165C()
{
  uint64_t v43 = v0;
  uint64_t v1 = *(void *)(v0 + 496);
  uint64_t v2 = *(void *)(v0 + 480);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 424);
  uint64_t v40 = *(void *)(v0 + 432);
  uint64_t v5 = *(void *)(v0 + 320);
  uint64_t v32 = *(void *)(v0 + 448);
  uint64_t v33 = *(void *)(v0 + 304);
  uint64_t v34 = *(void *)(v0 + 272);
  uint64_t v30 = *(void *)(v0 + 160);
  uint64_t v31 = *(void *)(v0 + 264);
  uint64_t v35 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v7 = *(void *)(v0 + 232);
  uint64_t v8 = *(void **)(v0 + 216);
  char v9 = *(unsigned char *)(v0 + 528);
  sub_721F0(*(void *)(v0 + 344), v7, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v7, 0, 1, v5);
  uint64_t v10 = sub_1AAA10();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 1, 1, v10);
  sub_153CEC(v9, v8);
  sub_2EF0C((uint64_t)v8, &qword_201CC8);
  if (v1) {
    uint64_t v11 = v30;
  }
  else {
    uint64_t v11 = 0x646567676F4CLL;
  }
  if (v1) {
    uint64_t v12 = v1;
  }
  else {
    uint64_t v12 = 0xE600000000000000;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v13 = v40;
  uint64_t v41 = v4;
  HealthDataLogModel.init(snippetHeaderModel:date:unitLabel:dataValue:url:loggedButtonLabel:)(v7, v2, v13, v3, v4, 0, v6, v11, v31, v12);
  sub_A340();
  v37(v33, v32, v34);
  sub_721F0(v31, v35, (void (*)(void))type metadata accessor for HealthDataLogModel);
  uint64_t v14 = sub_1AC7F0();
  os_log_type_t v15 = sub_1ACF50();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v38 = *(void *)(v0 + 304);
    BOOL v39 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
    uint64_t v36 = *(void *)(v0 + 272);
    uint64_t v16 = *(void *)(v0 + 248);
    uint64_t v17 = *(void *)(v0 + 256);
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    sub_721F0(v17, v16, (void (*)(void))type metadata accessor for HealthDataLogModel);
    uint64_t v19 = sub_1ACE00();
    *(void *)(v0 + 176) = sub_4A278(v19, v20, &v42);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_72250(v17, (void (*)(void))type metadata accessor for HealthDataLogModel);
    _os_log_impl(&def_342E4, v14, v15, "#GenerateLoggingResponseOutput: Snippet model %s", v18, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    v39(v38, v36);
  }
  else
  {
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 472);
    uint64_t v22 = *(void *)(v0 + 304);
    uint64_t v23 = *(void *)(v0 + 272);
    sub_72250(*(void *)(v0 + 256), (void (*)(void))type metadata accessor for HealthDataLogModel);

    v21(v22, v23);
  }
  uint64_t v24 = *(void *)(v0 + 208);
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v25 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v24, 0, 1, v25);
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_71A68;
  uint64_t v27 = *(void *)(v0 + 208);
  char v28 = *(unsigned char *)(v0 + 528);
  return sub_734D8(v28, v41, 0, v27, 2, 0);
}

uint64_t sub_71A68()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v3 + 208);
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 512) = v7;
  swift_task_dealloc();
  sub_2EF0C(v4, &qword_201E28);
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_71B5C()
{
  uint64_t v1 = (void *)v0[64];
  if (!v1)
  {
    uint64_t v8 = (void (*)(uint64_t, uint64_t, uint64_t))v0[57];
    uint64_t v9 = v0[56];
    uint64_t v10 = v0[37];
    uint64_t v11 = v0[34];
    sub_A340();
    v8(v10, v9, v11);
    uint64_t v12 = sub_1AC7F0();
    os_log_type_t v13 = sub_1ACF60();
    if (os_log_type_enabled(v12, v13))
    {
      *(_WORD *)sub_292A0() = 0;
      sub_A7FC(&def_342E4, v14, v15, "#GenerateLoggingResponseOutput: Invalid unit or dialog or response start value");
      sub_A1F0();
    }
    uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[59];
    uint64_t v17 = v0[46];
    uint64_t v25 = v0[45];
    uint64_t v26 = v0[48];
    uint64_t v24 = v0[43];
    uint64_t v18 = v0[37];
    uint64_t v19 = v0[34];
    uint64_t v20 = v0[33];
    uint64_t v21 = v0[24];

    swift_release();
    v16(v18, v19);
    sub_72250(v20, (void (*)(void))type metadata accessor for HealthDataLogModel);
    sub_72250(v24, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v26, v25);
    *(void *)(v21 + 32) = 0;
    *(_OWORD *)uint64_t v21 = 0u;
    *(_OWORD *)(v21 + 16) = 0u;
    sub_722A8();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_6F544();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v2 = v0[33];
  v0[5] = type metadata accessor for WellnessSnippets();
  v0[6] = sub_24F2C();
  uint64_t v3 = sub_B5B0(v0 + 2);
  sub_721F0(v2, (uint64_t)v3, (void (*)(void))type metadata accessor for HealthDataLogModel);
  swift_storeEnumTagMultiPayload();
  id v4 = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[65] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = sub_71E4C;
  sub_6F544();
  return sub_7ADEC();
}

uint64_t sub_71E4C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 16;
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

void sub_71F20()
{
  uint64_t v1 = (void *)v0[64];
  uint64_t v2 = v0[48];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[46];
  uint64_t v5 = v0[43];
  uint64_t v6 = v0[33];
  swift_release();

  sub_72250(v6, (void (*)(void))type metadata accessor for HealthDataLogModel);
  sub_72250(v5, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_722A8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_6F544();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_72080(unsigned __int8 a1, void *a2)
{
  switch(a1)
  {
    case 0x9Bu:
      return 0x73726F6F6C66;
    case 0xA2u:
      uint64_t v3 = sub_7218C(a2);
      uint64_t v2 = sub_1710A4(v3, v4);
      swift_bridgeObjectRelease();
      break;
    case 0xADu:
      return 0x736568737570;
    default:
      return sub_7218C(a2);
  }
  return v2;
}

uint64_t sub_72124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_202570);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_7218C(void *a1)
{
  id v1 = [a1 units];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_1ACDD0();

  return v3;
}

uint64_t sub_721F0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_20688();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_72250(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_722A8()
{
  return swift_task_dealloc();
}

uint64_t sub_722F8()
{
  return *(void *)(v0 + 384);
}

uint64_t sub_72310()
{
  return v0;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_72328()
{
}

uint64_t sub_7235C(__int16 a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = sub_1771BC(*(_WORD *)(a2 + 32));
  uint64_t v7 = v6;
  if (v5 == sub_1771BC(a1) && v7 == v8)
  {
LABEL_20:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  char v10 = sub_731DC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v10)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v12 = 17;
  while (1)
  {
    uint64_t v13 = v12 - 15;
    if (__OFADD__(v12 - 16, 1)) {
      break;
    }
    uint64_t v14 = sub_1771BC(*(_WORD *)(a2 + 2 * v12));
    uint64_t v16 = v15;
    if (v14 == sub_1771BC(a1) && v16 == v17)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    char v19 = sub_731DC();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_7;
    }
    ++v12;
    if (v13 == v2) {
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_72484(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  unint64_t v5 = sub_2F2B8(*(unsigned char *)(a2 + 32));
  uint64_t v7 = v6;
  if (v5 == sub_2F2B8(a1) && v7 == v8)
  {
LABEL_20:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  char v10 = sub_731DC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v10)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v12 = 33;
  while (1)
  {
    uint64_t v13 = v12 - 31;
    if (__OFADD__(v12 - 32, 1)) {
      break;
    }
    unint64_t v14 = sub_2F2B8(*(unsigned char *)(a2 + v12));
    uint64_t v16 = v15;
    if (v14 == sub_2F2B8(a1) && v16 == v17)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    char v19 = sub_731DC();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_7;
    }
    ++v12;
    if (v13 == v2) {
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_725AC(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)&aCheckexicreate[8 * a1];
  uint64_t v7 = *(void *)&aStence[8 * a1];
  while (1)
  {
    uint64_t v8 = *(char *)(a2 + v5 + 32);
    if (*(void *)&aCheckexicreate[8 * v8] == v6 && *(void *)&aStence[8 * v8] == v7) {
      break;
    }
    char v10 = sub_1AD2F0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_12;
    }
    if (v2 == ++v5)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_12:
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_726A8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = sub_1AD2F0();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_1AD2F0() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_72770(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  int v3 = result;
  if (*(unsigned char *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    uint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall isMedDosageUnitSynonym(userSuppliedUnit:systemSuppliedUnit:)(Swift::String userSuppliedUnit, Swift::String systemSuppliedUnit)
{
  object = systemSuppliedUnit._object;
  uint64_t countAndFlagsBits = systemSuppliedUnit._countAndFlagsBits;
  uint64_t v4 = userSuppliedUnit._object;
  uint64_t v5 = userSuppliedUnit._countAndFlagsBits;
  BOOL v6 = systemSuppliedUnit._countAndFlagsBits == 0x746163696C707061
    && systemSuppliedUnit._object == (void *)0xEB000000006E6F69;
  if (!v6 && (sub_731C0() & 1) == 0)
  {
    BOOL v7 = countAndFlagsBits == 7496034 && object == (void *)0xE300000000000000;
    if (!v7 && (sub_731C0() & 1) == 0)
    {
      BOOL v8 = countAndFlagsBits == 0x6764697274726163 && object == (void *)0xE900000000000065;
      if (!v8 && (sub_731C0() & 1) == 0)
      {
        BOOL v9 = countAndFlagsBits == 0x656369766564 && object == (void *)0xE600000000000000;
        if (!v9
          && (sub_731C0() & 1) == 0
          && (countAndFlagsBits != 1668508004 || object != (void *)0xE400000000000000))
        {
          char v11 = sub_731C0();
          BOOL v12 = countAndFlagsBits == 1886351972 && object == (void *)0xE400000000000000;
          BOOL v13 = v12;
          if ((v11 & 1) == 0 && !v13 && (sub_731C0() & 1) == 0)
          {
            BOOL v14 = countAndFlagsBits == 0x616D656E65 && object == (void *)0xE500000000000000;
            if (!v14
              && (sub_731C0() & 1) == 0
              && (countAndFlagsBits != 0x656C75626F6C67 || object != (void *)0xE700000000000000))
            {
              char v16 = sub_731C0();
              BOOL v17 = countAndFlagsBits == 0x746E616C706D69 && object == (void *)0xE700000000000000;
              BOOL v18 = v17;
              if ((v16 & 1) == 0 && !v18)
              {
                sub_731C0();
                sub_73228();
                BOOL v21 = v6 && object == v20;
                BOOL v22 = v21;
                if ((v19 & 1) == 0 && !v22)
                {
                  char v23 = sub_731C0();
                  BOOL v24 = countAndFlagsBits == 7629163 && object == (void *)0xE300000000000000;
                  BOOL v25 = v24;
                  if ((v23 & 1) == 0 && !v25)
                  {
                    sub_731C0();
                    sub_73228();
                    BOOL v28 = v6 && object == v27;
                    BOOL v29 = v28;
                    if ((v26 & 1) == 0 && !v29)
                    {
                      char v30 = sub_731C0();
                      BOOL v31 = countAndFlagsBits == 0x6863746170 && object == (void *)0xE500000000000000;
                      BOOL v32 = v31;
                      if ((v30 & 1) == 0 && !v32)
                      {
                        sub_731C0();
                        sub_7321C();
                        BOOL v34 = v6;
                        if ((v33 & 1) == 0
                          && !v34
                          && (sub_731C0() & 1) == 0
                          && (countAndFlagsBits != 0x656C636973706F70 || object != (void *)0xE800000000000000))
                        {
                          char v36 = sub_731C0();
                          BOOL v37 = countAndFlagsBits == 0x706F6F6373 && object == (void *)0xE500000000000000;
                          BOOL v38 = v37;
                          if ((v36 & 1) == 0 && !v38)
                          {
                            sub_731C0();
                            sub_73228();
                            BOOL v41 = v6 && object == v40;
                            BOOL v42 = v41;
                            if ((v39 & 1) == 0 && !v42)
                            {
                              char v43 = sub_731C0();
                              BOOL v44 = countAndFlagsBits == 0x7961727073 && object == (void *)0xE500000000000000;
                              BOOL v45 = v44;
                              if ((v43 & 1) == 0 && !v45)
                              {
                                sub_731C0();
                                sub_7321C();
                                BOOL v47 = v6;
                                if ((v46 & 1) == 0 && !v47)
                                {
                                  sub_731C0();
                                  sub_7321C();
                                  BOOL v49 = v6;
                                  if ((v48 & 1) == 0
                                    && !v49
                                    && (sub_731C0() & 1) == 0
                                    && (countAndFlagsBits != 0x7469736F70707573
                                     || object != (void *)0xEB0000000079726FLL))
                                  {
                                    sub_731C0();
                                    sub_73228();
                                    BOOL v53 = v6 && object == v52;
                                    BOOL v54 = v53;
                                    if ((v51 & 1) == 0
                                      && !v54
                                      && (sub_731C0() & 1) == 0
                                      && (countAndFlagsBits != 0x6E656D7461657274
                                       || object != (void *)0xE900000000000074))
                                    {
                                      char v56 = sub_731C0();
                                      BOOL v57 = countAndFlagsBits == 1953066613 && object == (void *)0xE400000000000000;
                                      BOOL v58 = v57;
                                      if ((v56 & 1) == 0 && !v58)
                                      {
                                        sub_731C0();
                                        sub_7321C();
                                        BOOL v60 = v6;
                                        if ((v59 & 1) == 0 && !v60 && (sub_731C0() & 1) == 0)
                                        {
                                          BOOL v64 = countAndFlagsBits == 0x6974616C61686E69
                                             && object == (void *)0xEA00000000006E6FLL;
                                          if (v64 || (sub_731C0() & 1) != 0)
                                          {
                                            sub_2694(&qword_203090);
                                            uint64_t inited = swift_initStackObject();
                                            *(_OWORD *)(inited + 16) = xmmword_1B08D0;
                                            *(void *)(inited + 32) = 0x6974616C61686E69;
                                            *(void *)(inited + 40) = 0xEA00000000006E6FLL;
                                            *(void *)(inited + 48) = 0x72656C61686E69;
                                            *(void *)(inited + 56) = 0xE700000000000000;
                                            *(void *)(inited + 64) = 1717990768;
                                            *(void *)(inited + 72) = 0xE400000000000000;
                                            sub_73204();
                                            *(void *)(v66 + 80) = v67;
                                            *(void *)(v66 + 88) = v68;
                                            uint64_t v69 = 6448494;
                                            unint64_t v70 = 0xE300000000000000;
LABEL_174:
                                            *(void *)(v66 + 96) = v69;
                                            *(void *)(v66 + 104) = v70;
LABEL_182:
                                            char v63 = sub_726A8(v5, (uint64_t)v4, (void *)inited);
                                            swift_bridgeObjectRelease();
                                            return v63 & 1;
                                          }
                                          BOOL v71 = countAndFlagsBits == 0x6F697463656A6E69
                                             && object == (void *)0xE90000000000006ELL;
                                          if (v71 || (sub_731C0() & 1) != 0)
                                          {
                                            sub_2694(&qword_203090);
                                            uint64_t v72 = swift_initStackObject();
                                            uint64_t inited = v72;
                                            *(_OWORD *)(v72 + 16) = xmmword_1AF720;
                                            *(void *)(v72 + 32) = 0x6F697463656A6E69;
                                            *(void *)(v72 + 40) = 0xE90000000000006ELL;
                                            uint64_t v73 = 1953458291;
                                            unint64_t v74 = 0xE400000000000000;
                                          }
                                          else
                                          {
                                            BOOL v75 = countAndFlagsBits == 0x65676E657A6F6CLL
                                               && object == (void *)0xE700000000000000;
                                            if (v75 || (sub_731C0() & 1) != 0)
                                            {
                                              sub_2694(&qword_203090);
                                              uint64_t inited = swift_initStackObject();
                                              *(_OWORD *)(inited + 16) = xmmword_1B08E0;
                                              *(void *)(inited + 32) = 0x65676E657A6F6CLL;
                                              *(void *)(inited + 40) = 0xE700000000000000;
                                              *(void *)(inited + 48) = 1886351972;
                                              *(void *)(inited + 56) = 0xE400000000000000;
                                              *(void *)(inited + 64) = 0x6568636F7274;
                                              *(void *)(inited + 72) = 0xE600000000000000;
                                              *(void *)(inited + 80) = 0x656C6C6974736170;
                                              *(void *)(inited + 88) = 0xE800000000000000;
                                              goto LABEL_182;
                                            }
                                            BOOL v76 = countAndFlagsBits == 19565 && object == (void *)0xE200000000000000;
                                            if (v76 || (sub_731C0() & 1) != 0)
                                            {
                                              sub_2694(&qword_203090);
                                              uint64_t inited = swift_initStackObject();
                                              *(_OWORD *)(inited + 16) = xmmword_1B08C0;
                                              *(void *)(inited + 32) = 19565;
                                              *(void *)(inited + 40) = 0xE200000000000000;
                                              *(void *)(inited + 48) = 0x74696C696C6C696DLL;
                                              *(void *)(inited + 56) = 0xEA00000000007265;
                                              *(void *)(inited + 64) = 0x74694C696C6C696DLL;
                                              *(void *)(inited + 72) = 0xEA00000000007265;
                                              goto LABEL_182;
                                            }
                                            BOOL v77 = countAndFlagsBits == 26477 && object == (void *)0xE200000000000000;
                                            if (!v77 && (sub_731C0() & 1) == 0)
                                            {
                                              BOOL v78 = countAndFlagsBits == 0x74656C626174
                                                 && object == (void *)0xE600000000000000;
                                              if (!v78 && (sub_731C0() & 1) == 0)
                                              {
                                                if (countAndFlagsBits != 1818323318
                                                  || object != (void *)0xE400000000000000)
                                                {
                                                  char v63 = 0;
                                                  if ((sub_731C0() & 1) == 0) {
                                                    return v63 & 1;
                                                  }
                                                }
                                                sub_2694(&qword_203090);
                                                uint64_t inited = swift_initStackObject();
                                                *(_OWORD *)(inited + 16) = xmmword_1B08C0;
                                                sub_73204();
                                                v80[4] = v81;
                                                v80[5] = v82;
                                                v80[6] = 6448494;
                                                unsigned char v80[7] = 0xE300000000000000;
                                                v80[8] = 0x6974616C61686E69;
                                                v80[9] = 0xEA00000000006E6FLL;
                                                goto LABEL_182;
                                              }
                                              sub_2694(&qword_203090);
                                              uint64_t v66 = swift_initStackObject();
                                              uint64_t inited = v66;
                                              *(_OWORD *)(v66 + 16) = xmmword_1B08D0;
                                              *(void *)(v66 + 32) = 0x74656C626174;
                                              *(void *)(v66 + 40) = 0xE600000000000000;
                                              *(void *)(v66 + 48) = 6447476;
                                              *(void *)(v66 + 56) = 0xE300000000000000;
                                              *(void *)(v66 + 64) = 1819044208;
                                              *(void *)(v66 + 72) = 0xE400000000000000;
                                              *(void *)(v66 + 80) = 7364963;
                                              *(void *)(v66 + 88) = 0xE300000000000000;
                                              uint64_t v69 = 0x656C7573706163;
                                              unint64_t v70 = 0xE700000000000000;
                                              goto LABEL_174;
                                            }
                                            sub_2694(&qword_203090);
                                            uint64_t v72 = swift_initStackObject();
                                            uint64_t inited = v72;
                                            *(_OWORD *)(v72 + 16) = xmmword_1AF720;
                                            *(void *)(v72 + 32) = 26477;
                                            *(void *)(v72 + 40) = 0xE200000000000000;
                                            uint64_t v73 = 0x617267696C6C696DLL;
                                            unint64_t v74 = 0xE90000000000006DLL;
                                          }
                                          *(void *)(v72 + 48) = v73;
                                          *(void *)(v72 + 56) = v74;
                                          goto LABEL_182;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (countAndFlagsBits == v5 && object == v4)
  {
    char v63 = 1;
    return v63 & 1;
  }

  return sub_1AD2F0();
}

uint64_t sub_731A8(uint64_t a1, uint64_t a2)
{
  return sub_73234(a1, a2, (2 * a2) | 1);
}

uint64_t sub_731B4(uint64_t a1, uint64_t a2)
{
  return sub_73234(a1, a2, 2 * a2);
}

uint64_t sub_731C0()
{
  return sub_1AD2F0();
}

uint64_t sub_731DC()
{
  return sub_1AD2F0();
}

uint64_t sub_73234@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  return result;
}

void sub_73240(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1AAC20();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
  sub_1AAAE0(v7);
  BOOL v9 = v8;
  [v6 setPunchOutUri:v8];

  id v10 = v6;
  sub_1AAC10();
  uint64_t v11 = sub_1AABE0();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1949C4(v11, v13, v10);

  id v14 = [v10 dictionary];
  if (v14)
  {
    uint64_t v15 = v14;
    char v16 = self;
    id v28 = 0;
    id v17 = [v16 dataWithPropertyList:v15 format:200 options:0 error:&v28];
    id v18 = v28;
    if (v17)
    {
      uint64_t v19 = sub_1AAB30();
      unint64_t v21 = v20;

      sub_1AAB20(0);
      sub_1ACE40();

      sub_9F08(v19, v21);
      swift_bridgeObjectRelease();
      uint64_t v22 = sub_1AC1E0();
      uint64_t v23 = a1;
      uint64_t v24 = 0;
    }
    else
    {
      char v26 = v18;
      sub_1AAAB0();

      swift_willThrow();
      swift_errorRelease();
      uint64_t v22 = sub_1AC1E0();
      uint64_t v23 = a1;
      uint64_t v24 = 1;
    }
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v23, v24, 1, v22);
  }
  else
  {
    uint64_t v25 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 1, 1, v25);
  }
}

uint64_t sub_734D8(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a4;
  *(void *)(v6 + 32) = a6;
  *(unsigned char *)(v6 + 177) = a3;
  *(void *)(v6 + 16) = a2;
  *(unsigned char *)(v6 + 176) = a1;
  sub_2694(&qword_201E28);
  *(void *)(v6 + 40) = swift_task_alloc();
  return _swift_task_switch(sub_73578, 0, 0);
}

uint64_t sub_73578()
{
  sub_47D74();
  sub_E588();
  int v1 = *(unsigned __int8 *)(v0 + 176);
  if ((v1 - 159) > 0x1E) {
    goto LABEL_2;
  }
  if (((1 << (v1 + 97)) & 0x42008801) != 0)
  {
LABEL_11:
    if (qword_201BF0 != -1)
    {
      swift_once();
      LOBYTE(v1) = *(unsigned char *)(v0 + 176);
    }
    uint64_t v5 = *(void *)(v0 + 40);
    *(void *)(v0 + 48) = qword_2145D8;
    sub_2F2B8(v1);
    swift_retain();
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, 0, 1, v6);
    BOOL v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v7;
    *BOOL v7 = v0;
    v7[1] = sub_73C98;
    sub_47BE4();
    return sub_1A4720();
  }
  if (v1 == 162)
  {
    if (qword_201BF0 != -1) {
      swift_once();
    }
    *(void *)(v0 + 144) = qword_2145D8;
    swift_retain();
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_74328;
    sub_47BE4();
    return sub_1A4DCC();
  }
  else
  {
    if (v1 != 173)
    {
LABEL_2:
      if ((v1 - 89) > 0x12)
      {
LABEL_16:
        switch(*(unsigned char *)(v0 + 176))
        {
          case 0x93:
            if (qword_201BF0 != -1) {
              swift_once();
            }
            *(void *)(v0 + 80) = qword_2145D8;
            swift_retain();
            BOOL v9 = (void *)swift_task_alloc();
            *(void *)(v0 + 88) = v9;
            *BOOL v9 = v0;
            v9[1] = sub_73F38;
            sub_746A0();
            sub_47BE4();
            uint64_t result = sub_1A3EC4();
            break;
          case 0x96:
            if (qword_201BF0 != -1) {
              swift_once();
            }
            *(void *)(v0 + 96) = qword_2145D8;
            swift_retain();
            uint64_t v13 = (void *)swift_task_alloc();
            *(void *)(v0 + 104) = v13;
            *uint64_t v13 = v0;
            v13[1] = sub_74034;
            sub_746A0();
            sub_47BE4();
            uint64_t result = sub_1A41B0();
            break;
          case 0x97:
            if (qword_201BF0 != -1) {
              swift_once();
            }
            *(void *)(v0 + 112) = qword_2145D8;
            swift_retain();
            uint64_t v15 = (void *)swift_task_alloc();
            *(void *)(v0 + 120) = v15;
            void *v15 = v0;
            v15[1] = sub_74130;
            sub_746A0();
            sub_47BE4();
            uint64_t result = sub_1A4380();
            break;
          case 0x9B:
            if (qword_201BF0 != -1) {
              swift_once();
            }
            *(void *)(v0 + 128) = qword_2145D8;
            swift_retain();
            id v17 = (void *)swift_task_alloc();
            *(void *)(v0 + 136) = v17;
            *id v17 = v0;
            v17[1] = sub_7422C;
            sub_746A0();
            sub_47BE4();
            uint64_t result = sub_1A4550();
            break;
          default:
            swift_task_dealloc();
            sub_47BE4();
            uint64_t result = v23(v21, v22, v23, v24, v25, v26, v27, v28);
            break;
        }
        return result;
      }
      if (((1 << (v1 - 89)) & 0x44181) == 0)
      {
        if (v1 == 105)
        {
          if (qword_201BF0 != -1) {
            swift_once();
          }
          *(void *)(v0 + 64) = qword_2145D8;
          swift_retain();
          uint64_t v2 = (void *)swift_task_alloc();
          *(void *)(v0 + 72) = v2;
          *uint64_t v2 = v0;
          v2[1] = sub_73E3C;
          sub_47BE4();
          return sub_1A72D0();
        }
        goto LABEL_16;
      }
      goto LABEL_11;
    }
    if (qword_201BF0 != -1) {
      swift_once();
    }
    *(void *)(v0 + 160) = qword_2145D8;
    swift_retain();
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_74424;
    sub_746A0();
    sub_47BE4();
    return sub_1A5F84();
  }
}

uint64_t sub_73C98()
{
  sub_E588();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  *uint64_t v6 = *v1;
  swift_task_dealloc();
  uint64_t v8 = *(void *)(v4 + 40);
  if (v0)
  {
    swift_release();
    swift_errorRelease();
    sub_74610(v8);
    return _swift_task_switch(sub_74520, 0, 0);
  }
  else
  {
    sub_74610(v8);
    swift_release();
    swift_task_dealloc();
    BOOL v9 = *(uint64_t (**)(uint64_t))(v7 + 8);
    return v9(v3);
  }
}

uint64_t sub_73E3C()
{
  sub_47D74();
  sub_E588();
  sub_74670();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  sub_7468C();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_73F38()
{
  sub_47D74();
  sub_E588();
  sub_74670();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  sub_7468C();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_74034()
{
  sub_47D74();
  sub_E588();
  sub_74670();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  sub_7468C();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_74130()
{
  sub_47D74();
  sub_E588();
  sub_74670();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  sub_7468C();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_7422C()
{
  sub_47D74();
  sub_E588();
  sub_74670();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  sub_7468C();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_74328()
{
  sub_47D74();
  sub_E588();
  sub_74670();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  sub_7468C();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_74424()
{
  sub_47D74();
  sub_E588();
  sub_74670();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  sub_7468C();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_74520()
{
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_74584()
{
  uint64_t v0 = sub_1AC250();
  __chkstk_darwin(v0 - 8);
  type metadata accessor for WellnessLoggingCATsSimple();
  sub_1AC240();
  uint64_t result = sub_1AC210();
  qword_2145D8 = result;
  return result;
}

uint64_t sub_74610(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201E28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_7468C()
{
  return v0;
}

uint64_t sub_746A0()
{
  return *(void *)(v0 + 16);
}

uint64_t type metadata accessor for WellnessUnsupportedCATs()
{
  uint64_t result = qword_203628;
  if (!qword_203628) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_74700()
{
  return swift_initClassMetadata2();
}

uint64_t sub_74740()
{
  return sub_1AC190();
}

uint64_t sub_74764(uint64_t a1, uint64_t a2)
{
  return sub_747B8(a1, a2);
}

uint64_t sub_747B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC250();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2694(&qword_201E20);
  __chkstk_darwin(v8 - 8);
  sub_45DC8(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v10 = sub_1AC180();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  sub_55D28(a1);
  return v10;
}

uint64_t sub_74920()
{
  return type metadata accessor for WellnessUnsupportedCATs();
}

uint64_t GenericBinaryButtonModel.invocationIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericBinaryButtonModel.invocationIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t GenericBinaryButtonModel.primaryButtonLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericBinaryButtonModel.primaryButtonLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t GenericBinaryButtonModel.secondaryButtonLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericBinaryButtonModel.secondaryButtonLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t GenericBinaryButtonModel.isSmartEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t GenericBinaryButtonModel.isSmartEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

void __swiftcall GenericBinaryButtonModel.init(invocationIdentifier:primaryButtonLabel:secondaryButtonLabel:isSmartEnabled:)(WellnessFlowPlugin::GenericBinaryButtonModel *__return_ptr retstr, Swift::String invocationIdentifier, Swift::String primaryButtonLabel, Swift::String secondaryButtonLabel, Swift::Bool isSmartEnabled)
{
  retstr->invocationIdentifier = invocationIdentifier;
  retstr->primaryButtonLabel = primaryButtonLabel;
  retstr->secondaryButtonLabel = secondaryButtonLabel;
  retstr->isSmartEnabled = isSmartEnabled;
}

uint64_t sub_74A84(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x80000000001BAAE0 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000000001BAB00 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000000001BAB20 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x457472616D537369 && a2 == 0xEE0064656C62616ELL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_1AD2F0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_74C3C()
{
  return 4;
}

unint64_t sub_74C44(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x457472616D537369;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_74CDC()
{
  return sub_74C44(*v0);
}

uint64_t sub_74CE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_74A84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_74D0C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_74C3C();
  *a1 = result;
  return result;
}

uint64_t sub_74D34(uint64_t a1)
{
  unint64_t v2 = sub_74F10();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_74D70(uint64_t a1)
{
  unint64_t v2 = sub_74F10();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GenericBinaryButtonModel.encode(to:)(void *a1)
{
  uint64_t v3 = sub_2694(&qword_203678);
  sub_52C4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2E38(a1, a1[3]);
  sub_74F10();
  sub_1AD3B0();
  v10[15] = 0;
  sub_75764();
  if (!v1)
  {
    v10[14] = 1;
    sub_75764();
    v10[13] = 2;
    sub_75764();
    v10[12] = 3;
    sub_1AD290();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v3);
}

unint64_t sub_74F10()
{
  unint64_t result = qword_203680;
  if (!qword_203680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_203680);
  }
  return result;
}

uint64_t GenericBinaryButtonModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2694(&qword_203688);
  sub_52C4();
  __chkstk_darwin(v5);
  sub_2E38(a1, a1[3]);
  sub_74F10();
  sub_1AD3A0();
  if (v2) {
    return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
  }
  uint64_t v6 = sub_1AD1F0();
  uint64_t v8 = v7;
  uint64_t v19 = v6;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1AD1F0();
  uint64_t v20 = v10;
  uint64_t v18 = v9;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_1AD1F0();
  uint64_t v17 = v11;
  swift_bridgeObjectRetain();
  char v12 = sub_1AD200();
  uint64_t v13 = sub_7574C();
  v14(v13);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v18;
  *(void *)(a2 + 24) = v20;
  *(void *)(a2 + 32) = v16;
  *(void *)(a2 + 40) = v17;
  *(unsigned char *)(a2 + 48) = v12 & 1;
  return result;
}

double sub_75210@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  GenericBinaryButtonModel.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(unsigned char *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_75260(void *a1)
{
  return GenericBinaryButtonModel.encode(to:)(a1);
}

uint64_t destroy for GenericBinaryButtonModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GenericBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GenericBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for GenericBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GenericBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericBinaryButtonModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 49))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericBinaryButtonModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericBinaryButtonModel()
{
  return &type metadata for GenericBinaryButtonModel;
}

uint64_t getEnumTagSinglePayload for GenericBinaryButtonModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for GenericBinaryButtonModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x75624);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericBinaryButtonModel.CodingKeys()
{
  return &type metadata for GenericBinaryButtonModel.CodingKeys;
}

unint64_t sub_75660()
{
  unint64_t result = qword_203690;
  if (!qword_203690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_203690);
  }
  return result;
}

unint64_t sub_756B0()
{
  unint64_t result = qword_203698;
  if (!qword_203698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_203698);
  }
  return result;
}

unint64_t sub_75700()
{
  unint64_t result = qword_2036A0[0];
  if (!qword_2036A0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_2036A0);
  }
  return result;
}

uint64_t sub_7574C()
{
  return v0;
}

uint64_t sub_75764()
{
  return sub_1AD280();
}

ValueMetadata *type metadata accessor for GenericErrorFlow()
{
  return &type metadata for GenericErrorFlow;
}

void *sub_75790@<X0>(void *__src@<X0>, void *a2@<X8>)
{
  return memcpy(a2, __src, 0xA0uLL);
}

uint64_t sub_757A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1AC250();
  __chkstk_darwin(v2 - 8);
  sub_E988C(a1);
  uint64_t v3 = type metadata accessor for WellnessCATPatternsExecutor(0);
  sub_1AC240();
  uint64_t v4 = sub_1AC1A0();
  a1[8] = v3;
  a1[9] = (uint64_t)&off_1F6840;
  a1[5] = v4;
  uint64_t v5 = type metadata accessor for WellnessLoggingCATPatternsExecutor(0);
  sub_1AC240();
  uint64_t v6 = sub_1AC1A0();
  a1[13] = v5;
  a1[14] = (uint64_t)&off_1F8838;
  a1[10] = v6;
  uint64_t v7 = type metadata accessor for WellnessQueryingCATPatternsExecutor(0);
  sub_1AC240();
  uint64_t result = sub_1AC1A0();
  a1[18] = v7;
  a1[19] = (uint64_t)&off_1F65F0;
  a1[15] = result;
  return result;
}

uint64_t sub_758A8()
{
  sub_9BA4();

  return sub_1AAF80();
}

uint64_t sub_758FC(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = sub_1AAFC0();
  v2[15] = v3;
  sub_A19C(v3);
  v2[16] = v4;
  v2[17] = swift_task_alloc();
  uint64_t v5 = sub_1AB0A0();
  v2[18] = v5;
  sub_A19C(v5);
  v2[19] = v6;
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v2[22] = v7;
  sub_A19C(v7);
  v2[23] = v8;
  v2[24] = swift_task_alloc();
  uint64_t v9 = sub_1AC800();
  v2[25] = v9;
  sub_A19C(v9);
  v2[26] = v10;
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  return _swift_task_switch(sub_75A6C, 0, 0);
}

uint64_t sub_75A6C()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[26];
  uint64_t v4 = sub_1AC7D0();
  v0[30] = v4;
  swift_beginAccess();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[31] = v5;
  v0[32] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  uint64_t v6 = sub_1AC7F0();
  os_log_type_t v7 = sub_1ACF60();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[29];
    uint64_t v9 = v0[25];
    uint64_t v10 = v0[26];
    uint64_t v11 = (_DWORD *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *uint64_t v11 = 136315138;
    v0[12] = sub_4A278(0xD000000000000010, 0x80000000001B0BB0, &v20);
    sub_1ACFE0();
    sub_76694(&def_342E4, v12, v13, "Executing %s");
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v14(v8, v9);
  }
  else
  {
    uint64_t v15 = v0[29];
    uint64_t v16 = v0[25];
    uint64_t v17 = v0[26];

    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v14(v15, v16);
  }
  v0[33] = v14;
  sub_2E38((void *)(v0[14] + 40), *(void *)(v0[14] + 64));
  uint64_t v18 = (void *)swift_task_alloc();
  v0[34] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_75CA4;
  return sub_9D67C();
}

uint64_t sub_75CA4(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *os_log_type_t v7 = v6;
  *(void *)(v5 + 280) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v8 = sub_75F5C;
  }
  else
  {
    *(void *)(v5 + 288) = a1;
    uint64_t v8 = sub_75DA0;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_75DA0()
{
  uint64_t v1 = (void *)v0[36];
  uint64_t v3 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[19];
  uint64_t v6 = (void *)v0[14];
  sub_1AB090();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  id v7 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_2E38(v6, v6[3]);
  sub_1AAF40();
  sub_1AB130();
  swift_release();

  uint64_t v8 = sub_766B4();
  v9(v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_75F5C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);
  swift_beginAccess();
  v1(v3, v2, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF60();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (_DWORD *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *id v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 88) = v9;
    sub_1ACFE0();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    sub_76694(&def_342E4, v10, v11, "%@");
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v12 = *(void *)(v0 + 240);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
  uint64_t v14 = *(void *)(v0 + 216);
  uint64_t v15 = *(void *)(v0 + 200);
  (*(void (**)(void, uint64_t))(v0 + 264))(*(void *)(v0 + 224), v15);
  swift_beginAccess();
  v13(v14, v12, v15);
  uint64_t v16 = sub_1AC7F0();
  os_log_type_t v17 = sub_1ACF60();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&def_342E4, v16, v17, "Sending to info domains because dialog pattern failed", v18, 2u);
    sub_A1F0();
  }
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
  uint64_t v20 = *(void *)(v0 + 216);
  uint64_t v21 = *(void *)(v0 + 200);
  uint64_t v23 = *(void *)(v0 + 128);
  uint64_t v22 = *(void *)(v0 + 136);
  uint64_t v24 = *(void *)(v0 + 120);

  v19(v20, v21);
  (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v22, enum case for FlowUnhandledReason.needsInfoDomainFallback(_:), v24);
  sub_1AB150();
  uint64_t v25 = sub_766B4();
  v26(v25);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t sub_76298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[1] = sub_76348;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t sub_76348(uint64_t a1)
{
  sub_A1B4();
  uint64_t v3 = *v1;
  sub_A304();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(a1);
}

uint64_t sub_7641C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_764B4;
  return sub_758FC(a1);
}

uint64_t sub_764B4()
{
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_7657C(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_765B4(uint64_t (*a1)(void))
{
  return a1();
}

void sub_765DC(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  os_log_type_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  sub_1ACFE0();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

void sub_76694(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_766B4()
{
  return v0;
}

uint64_t type metadata accessor for WellnessQueryingCATs()
{
  uint64_t result = qword_2036C0;
  if (!qword_2036C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_76710()
{
  return swift_initClassMetadata2();
}

uint64_t sub_76750(uint64_t a1, uint64_t a2)
{
  return sub_767A4(a1, a2);
}

uint64_t sub_767A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC250();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2694(&qword_201E20);
  __chkstk_darwin(v8 - 8);
  sub_45DC8(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v10 = sub_1AC180();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  sub_55D28(a1);
  return v10;
}

uint64_t sub_7690C()
{
  return type metadata accessor for WellnessQueryingCATs();
}

uint64_t BloodPressureQueryModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_553FC(v1, a1, &qword_2022C8);
}

uint64_t BloodPressureQueryModel.appPunchout.setter(uint64_t a1)
{
  return sub_5B0E0(a1, v1, &qword_2022C8);
}

uint64_t BodyMassQueryModel.averageValue.getter()
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 20));
}

uint64_t type metadata accessor for BodyMassQueryModel()
{
  uint64_t result = qword_203790;
  if (!qword_203790) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void BodyMassQueryModel.averageValue.setter()
{
  uint64_t v0 = sub_7A410();
  sub_2EFC0(*(int *)(v0 + 20));
}

uint64_t (*BodyMassQueryModel.averageValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BodyMassQueryModel.maxValue.getter()
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 24));
}

void BodyMassQueryModel.maxValue.setter()
{
  uint64_t v0 = sub_7A410();
  sub_2EFC0(*(int *)(v0 + 24));
}

uint64_t (*BodyMassQueryModel.maxValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BodyMassQueryModel.minValue.getter()
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 28));
}

void BodyMassQueryModel.minValue.setter()
{
  uint64_t v0 = sub_7A410();
  sub_2EFC0(*(int *)(v0 + 28));
}

uint64_t (*BodyMassQueryModel.minValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BodyMassQueryModel.value.getter()
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 32));
}

void BodyMassQueryModel.value.setter()
{
  uint64_t v0 = sub_7A410();
  sub_2EFC0(*(int *)(v0 + 32));
}

uint64_t (*BodyMassQueryModel.value.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BodyMassQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  return sub_553FC(v1 + *(int *)(Model + 36), a1, &qword_201E28);
}

uint64_t BodyMassQueryModel.dateLabel.setter()
{
  uint64_t v2 = sub_7A3F8();
  return sub_5B0E0(v0, v1 + *(int *)(v2 + 36), &qword_201E28);
}

uint64_t (*BodyMassQueryModel.dateLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BodyMassQueryModel.averageValueString.getter()
{
  return sub_22F80();
}

uint64_t BodyMassQueryModel.averageValueString.setter(uint64_t a1, uint64_t a2)
{
  sub_7A410();
  uint64_t result = sub_7A45C();
  *uint64_t v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t (*BodyMassQueryModel.averageValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BodyMassQueryModel.maxValueString.getter()
{
  return sub_22F80();
}

uint64_t BodyMassQueryModel.maxValueString.setter(uint64_t a1, uint64_t a2)
{
  sub_7A410();
  uint64_t result = sub_7A45C();
  *uint64_t v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t (*BodyMassQueryModel.maxValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BodyMassQueryModel.minValueString.getter()
{
  return sub_22F80();
}

uint64_t BodyMassQueryModel.minValueString.setter(uint64_t a1, uint64_t a2)
{
  sub_7A410();
  uint64_t result = sub_7A45C();
  *uint64_t v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t (*BodyMassQueryModel.minValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BodyMassQueryModel.valueString.getter()
{
  return sub_22F80();
}

uint64_t BodyMassQueryModel.valueString.setter(uint64_t a1, uint64_t a2)
{
  sub_7A410();
  uint64_t result = sub_7A45C();
  *uint64_t v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t (*BodyMassQueryModel.valueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BodyMassQueryModel.unitString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  return sub_553FC(v1 + *(int *)(Model + 56), a1, &qword_201E28);
}

uint64_t BodyMassQueryModel.unitString.setter()
{
  uint64_t v2 = sub_7A3F8();
  return sub_5B0E0(v0, v1 + *(int *)(v2 + 56), &qword_201E28);
}

uint64_t (*BodyMassQueryModel.unitString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BodyMassQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  return sub_553FC(v1 + *(int *)(Model + 60), a1, &qword_2022D0);
}

uint64_t BodyMassQueryModel.snippetHeaderModel.setter()
{
  uint64_t v2 = sub_7A3F8();
  return sub_5B0E0(v0, v1 + *(int *)(v2 + 60), &qword_2022D0);
}

uint64_t (*BodyMassQueryModel.snippetHeaderModel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t sub_770E0(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x5665676172657661 && a2 == 0xEC00000065756C61;
    if (v6 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000;
      if (v7 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000;
        if (v8 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
          if (v9 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL;
            if (v10 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else if (a1 == 0xD000000000000012 && a2 == 0x80000000001BAB70 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              BOOL v11 = a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453;
              if (v11 || (sub_1AD2F0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                BOOL v12 = a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453;
                if (v12 || (sub_1AD2F0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 8;
                }
                else
                {
                  BOOL v13 = a1 == 0x72745365756C6176 && a2 == 0xEB00000000676E69;
                  if (v13 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x6972745374696E75 && a2 == 0xEA0000000000676ELL;
                    if (v14 || (sub_1AD2F0() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 10;
                    }
                    else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B78B0)
                    {
                      swift_bridgeObjectRelease();
                      return 11;
                    }
                    else
                    {
                      char v15 = sub_1AD2F0();
                      swift_bridgeObjectRelease();
                      if (v15) {
                        return 11;
                      }
                      else {
                        return 12;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_7757C()
{
  return 12;
}

uint64_t sub_77584(char a1)
{
  uint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      return 0x5665676172657661;
    case 2:
      unsigned int v3 = 1450729837;
      return v3 | 0x65756C6100000000;
    case 3:
      unsigned int v3 = 1450076525;
      return v3 | 0x65756C6100000000;
    case 4:
      return 0x65756C6176;
    case 5:
      return 0x6562614C65746164;
    case 6:
    case 11:
      return result;
    case 7:
      unsigned int v4 = 1450729837;
      goto LABEL_11;
    case 8:
      unsigned int v4 = 1450076525;
LABEL_11:
      uint64_t result = v4 | 0x65756C6100000000;
      break;
    case 9:
      uint64_t result = 0x72745365756C6176;
      break;
    case 10:
      uint64_t result = 0x6972745374696E75;
      break;
    default:
      uint64_t result = 0x68636E7550707061;
      break;
  }
  return result;
}

uint64_t sub_7770C()
{
  return sub_77584(*v0);
}

uint64_t sub_77714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_770E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_7773C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_7757C();
  *a1 = result;
  return result;
}

uint64_t sub_77764(uint64_t a1)
{
  unint64_t v2 = sub_77B58();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_777A0(uint64_t a1)
{
  unint64_t v2 = sub_77B58();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BodyMassQueryModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2694(&qword_203710);
  sub_52C4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  BOOL v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2E38(a1, a1[3]);
  sub_77B58();
  sub_1AD3B0();
  v25[6] = 0;
  sub_1AAD90();
  sub_783D8(&qword_202BC0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  sub_1AD270();
  if (!v2)
  {
    uint64_t Model = (int *)type metadata accessor for BodyMassQueryModel();
    sub_2EFEC(v3 + Model[5]);
    v25[5] = 1;
    sub_2F078();
    sub_2EFEC(v3 + Model[6]);
    v25[4] = 2;
    sub_2F078();
    sub_2EFEC(v3 + Model[7]);
    v25[3] = 3;
    sub_2F078();
    sub_2EFEC(v3 + Model[8]);
    v25[2] = 4;
    sub_2F078();
    v25[1] = 5;
    sub_1AC1E0();
    sub_783D8(&qword_202BC8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    sub_7A438();
    uint64_t v12 = sub_7A494(Model[10]);
    v25[0] = 6;
    sub_2F05C(v12, v13, (uint64_t)v25);
    uint64_t v14 = sub_7A494(Model[11]);
    char v24 = 7;
    sub_2F05C(v14, v15, (uint64_t)&v24);
    uint64_t v16 = sub_7A494(Model[12]);
    char v23 = 8;
    sub_2F05C(v16, v17, (uint64_t)&v23);
    uint64_t v18 = sub_7A494(Model[13]);
    char v22 = 9;
    sub_2F05C(v18, v19, (uint64_t)&v22);
    v21[13] = 10;
    sub_7A438();
    v21[12] = 11;
    type metadata accessor for SnippetHeaderModel();
    sub_783D8(&qword_202BD0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1AD270();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v5);
}

unint64_t sub_77B58()
{
  unint64_t result = qword_203718;
  if (!qword_203718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_203718);
  }
  return result;
}

uint64_t BodyMassQueryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v83 = a2;
  uint64_t v3 = sub_2694(&qword_2022D0);
  __chkstk_darwin(v3 - 8);
  sub_53E0();
  uint64_t v85 = v4;
  uint64_t v5 = sub_2694(&qword_201E28);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v94 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v93 = (char *)&v78 - v8;
  uint64_t v9 = sub_2694(&qword_2022C8);
  __chkstk_darwin(v9 - 8);
  sub_53E0();
  uint64_t v95 = v10;
  sub_2694(&qword_203720);
  sub_52C4();
  uint64_t v96 = v12;
  uint64_t v97 = v11;
  __chkstk_darwin(v11);
  sub_53E0();
  uint64_t v101 = v13;
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  uint64_t v15 = (int *)(Model - 8);
  __chkstk_darwin(Model);
  uint64_t v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AAD90();
  sub_55948();
  uint64_t v92 = v18;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v19, v20, v21, v18);
  sub_7A488(v15[7]);
  uint64_t v91 = v22;
  *(unsigned char *)(v22 + 8) = 1;
  sub_7A488(v15[8]);
  uint64_t v89 = v23;
  *(unsigned char *)(v23 + 8) = 1;
  sub_7A488(v15[9]);
  uint64_t v88 = v24;
  *(unsigned char *)(v24 + 8) = 1;
  sub_7A488(v15[10]);
  uint64_t v87 = v25;
  *(unsigned char *)(v25 + 8) = 1;
  uint64_t v26 = (uint64_t)&v17[v15[11]];
  uint64_t v27 = sub_1AC1E0();
  uint64_t v86 = v26;
  sub_55948();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v28, v29, v30, v27);
  BOOL v31 = &v17[v15[12]];
  *(void *)BOOL v31 = 0;
  *((void *)v31 + 1) = 0;
  BOOL v32 = &v17[v15[13]];
  *(void *)BOOL v32 = 0;
  *((void *)v32 + 1) = 0;
  char v33 = &v17[v15[14]];
  *(void *)char v33 = 0;
  *((void *)v33 + 1) = 0;
  BOOL v34 = &v17[v15[15]];
  *(void *)BOOL v34 = 0;
  *((void *)v34 + 1) = 0;
  uint64_t v84 = &v17[v15[16]];
  sub_55948();
  uint64_t v90 = v27;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v35, v36, v37, v27);
  uint64_t v38 = v15[17];
  uint64_t v100 = v17;
  uint64_t v39 = (uint64_t)&v17[v38];
  uint64_t v40 = type metadata accessor for SnippetHeaderModel();
  sub_55948();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v41, v42, v43, v40);
  uint64_t v44 = a1[3];
  uint64_t v99 = a1;
  sub_2E38(a1, v44);
  sub_77B58();
  BOOL v45 = v98;
  sub_1AD3A0();
  if (v45)
  {
    uint64_t v77 = (uint64_t)v100;
  }
  else
  {
    uint64_t v98 = v31;
    uint64_t v82 = v32;
    uint64_t v81 = v33;
    uint64_t v80 = v34;
    uint64_t v46 = (uint64_t)v93;
    uint64_t v79 = v39;
    uint64_t v47 = (uint64_t)v94;
    uint64_t v48 = v96;
    char v113 = 0;
    sub_783D8(&qword_202BE0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    uint64_t v49 = v95;
    sub_1AD1E0();
    sub_5B0E0(v49, (uint64_t)v100, &qword_2022C8);
    char v112 = 1;
    uint64_t v51 = sub_7A4A0();
    sub_7A428(v51, v52);
    char v111 = 2;
    uint64_t v53 = sub_7A4A0();
    sub_7A428(v53, v54);
    char v110 = 3;
    uint64_t v55 = sub_7A4A0();
    sub_7A428(v55, v56);
    char v109 = 4;
    uint64_t v57 = sub_7A4A0();
    sub_7A428(v57, v58);
    char v108 = 5;
    sub_783D8(&qword_202BE8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    sub_7A474();
    sub_1AD1E0();
    sub_5B0E0(v46, v86, &qword_201E28);
    char v107 = 6;
    uint64_t v59 = sub_1AD1C0();
    BOOL v60 = (uint64_t *)v98;
    uint64_t v95 = v61;
    swift_bridgeObjectRelease();
    uint64_t v62 = v95;
    *BOOL v60 = v59;
    v60[1] = v62;
    char v106 = 7;
    uint64_t v63 = sub_1AD1C0();
    BOOL v64 = (uint64_t *)v82;
    uint64_t v98 = v65;
    swift_bridgeObjectRelease();
    uint64_t v66 = v98;
    *BOOL v64 = v63;
    v64[1] = (uint64_t)v66;
    char v105 = 8;
    uint64_t v67 = sub_1AD1C0();
    uint64_t v69 = v68;
    unint64_t v70 = (uint64_t *)v81;
    swift_bridgeObjectRelease();
    *unint64_t v70 = v67;
    v70[1] = v69;
    char v104 = 9;
    uint64_t v71 = sub_1AD1C0();
    uint64_t v73 = v72;
    unint64_t v74 = (uint64_t *)v80;
    swift_bridgeObjectRelease();
    *unint64_t v74 = v71;
    v74[1] = v73;
    char v103 = 10;
    sub_7A474();
    sub_1AD1E0();
    sub_5B0E0(v47, (uint64_t)v84, &qword_201E28);
    char v102 = 11;
    sub_783D8(&qword_202BF0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v75 = v97;
    uint64_t v76 = v101;
    sub_1AD1E0();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v76, v75);
    uint64_t v77 = (uint64_t)v100;
    sub_5B0E0(v85, v79, &qword_2022D0);
    sub_782E4(v77, v83);
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v99);
  return sub_79484(v77, (void (*)(void))type metadata accessor for BodyMassQueryModel);
}

uint64_t sub_782E4(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for BodyMassQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t sub_78348()
{
  return sub_783D8(&qword_203728, (void (*)(uint64_t))type metadata accessor for BodyMassQueryModel);
}

uint64_t sub_78390()
{
  return sub_783D8(&qword_203730, (void (*)(uint64_t))type metadata accessor for BodyMassQueryModel);
}

uint64_t sub_783D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_78420@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return BodyMassQueryModel.init(from:)(a1, a2);
}

uint64_t sub_78438(void *a1)
{
  return BodyMassQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for BodyMassQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AAD90();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_2022C8);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = (char *)a1 + v11;
    uint64_t v15 = (char *)a2 + v11;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)a1 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (char *)a1 + v17;
    uint64_t v21 = (char *)a2 + v17;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v25))
    {
      uint64_t v26 = sub_2694(&qword_201E28);
      memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0, 1, v25);
    }
    uint64_t v27 = a3[10];
    uint64_t v28 = a3[11];
    uint64_t v29 = (uint64_t *)((char *)a1 + v27);
    uint64_t v30 = (uint64_t *)((char *)a2 + v27);
    uint64_t v31 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v31;
    BOOL v32 = (uint64_t *)((char *)a1 + v28);
    char v33 = (uint64_t *)((char *)a2 + v28);
    uint64_t v34 = v33[1];
    *BOOL v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = a3[12];
    uint64_t v36 = a3[13];
    uint64_t v37 = (uint64_t *)((char *)a1 + v35);
    uint64_t v38 = (uint64_t *)((char *)a2 + v35);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    uint64_t v40 = (uint64_t *)((char *)a1 + v36);
    uint64_t v41 = (uint64_t *)((char *)a2 + v36);
    uint64_t v42 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v42;
    uint64_t v43 = a3[14];
    uint64_t v44 = (char *)a1 + v43;
    BOOL v45 = (char *)a2 + v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v45, 1, v25))
    {
      uint64_t v46 = sub_2694(&qword_201E28);
      memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v44, v45, v25);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v44, 0, 1, v25);
    }
    uint64_t v47 = a3[15];
    uint64_t v48 = (char *)a1 + v47;
    uint64_t v49 = (char *)a2 + v47;
    uint64_t v50 = type metadata accessor for SnippetHeaderModel();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v49, 1, v50))
    {
      uint64_t v51 = sub_2694(&qword_2022D0);
      memcpy(v48, v49, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v48, v49, v25);
      uint64_t v52 = *(int *)(v50 + 20);
      uint64_t v53 = &v48[v52];
      char v54 = &v49[v52];
      uint64_t v55 = *((void *)v54 + 1);
      *(void *)uint64_t v53 = *(void *)v54;
      *((void *)v53 + 1) = v55;
      uint64_t v56 = *(int *)(v50 + 24);
      uint64_t v57 = &v48[v56];
      char v58 = &v49[v56];
      uint64_t v59 = *((void *)v58 + 1);
      *(void *)uint64_t v57 = *(void *)v58;
      *((void *)v57 + 1) = v59;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v48, 0, 1, v50);
    }
  }
  return a1;
}

uint64_t destroy for BodyMassQueryModel(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1AAD90();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + a2[9];
  uint64_t v6 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[14];
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v7, v6);
  }
  uint64_t v8 = a1 + a2[15];
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, 1, v9);
  if (!result)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v8, v6);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v23))
  {
    uint64_t v24 = sub_2694(&qword_201E28);
    memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v23);
  }
  uint64_t v25 = a3[10];
  uint64_t v26 = a3[11];
  uint64_t v27 = &a1[v25];
  uint64_t v28 = &a2[v25];
  uint64_t v29 = *((void *)v28 + 1);
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = v29;
  uint64_t v30 = &a1[v26];
  uint64_t v31 = &a2[v26];
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = v32;
  uint64_t v33 = a3[12];
  uint64_t v34 = a3[13];
  uint64_t v35 = &a1[v33];
  uint64_t v36 = &a2[v33];
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = v37;
  uint64_t v38 = &a1[v34];
  uint64_t v39 = &a2[v34];
  uint64_t v40 = *((void *)v39 + 1);
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = v40;
  uint64_t v41 = a3[14];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v43, 1, v23))
  {
    uint64_t v44 = sub_2694(&qword_201E28);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v42, v43, v23);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v42, 0, 1, v23);
  }
  uint64_t v45 = a3[15];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  uint64_t v48 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v47, 1, v48))
  {
    uint64_t v49 = sub_2694(&qword_2022D0);
    memcpy(v46, v47, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v46, v47, v23);
    uint64_t v50 = *(int *)(v48 + 20);
    uint64_t v51 = &v46[v50];
    uint64_t v52 = &v47[v50];
    uint64_t v53 = *((void *)v52 + 1);
    *(void *)uint64_t v51 = *(void *)v52;
    *((void *)v51 + 1) = v53;
    uint64_t v54 = *(int *)(v48 + 24);
    uint64_t v55 = &v46[v54];
    uint64_t v56 = &v47[v54];
    uint64_t v57 = *((void *)v56 + 1);
    *(void *)uint64_t v55 = *(void *)v56;
    *((void *)v55 + 1) = v57;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v46, 0, 1, v48);
  }
  return a1;
}

char *assignWithCopy for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)uint64_t v24 = v26;
  uint64_t v27 = a3[9];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = sub_1AC1E0();
  int v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1, v30);
  int v32 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v29, 1, v30);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v33 = *(void *)(v30 - 8);
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v30);
LABEL_12:
    uint64_t v34 = sub_2694(&qword_201E28);
    memcpy(v28, v29, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 24))(v28, v29, v30);
LABEL_13:
  uint64_t v35 = a3[10];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = *((void *)v37 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[11];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  *(void *)uint64_t v39 = *(void *)v40;
  *((void *)v39 + 1) = *((void *)v40 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[12];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[13];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = *((void *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[14];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  int v50 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v47], 1, v30);
  int v51 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v49, 1, v30);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v48, v49, v30);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v48, 0, 1, v30);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v52 = *(void *)(v30 - 8);
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v48, v30);
LABEL_18:
    uint64_t v53 = sub_2694(&qword_201E28);
    memcpy(v48, v49, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 24))(v48, v49, v30);
LABEL_19:
  uint64_t v54 = a3[15];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  uint64_t v57 = type metadata accessor for SnippetHeaderModel();
  int v58 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v55, 1, v57);
  int v59 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v56, 1, v57);
  if (!v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 24))(v55, v56, v30);
      uint64_t v68 = *(int *)(v57 + 20);
      uint64_t v69 = &v55[v68];
      unint64_t v70 = &v56[v68];
      *(void *)uint64_t v69 = *(void *)v70;
      *((void *)v69 + 1) = *((void *)v70 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v71 = *(int *)(v57 + 24);
      uint64_t v72 = &v55[v71];
      uint64_t v73 = &v56[v71];
      *(void *)uint64_t v72 = *(void *)v73;
      *((void *)v72 + 1) = *((void *)v73 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_79484((uint64_t)v55, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v59)
  {
LABEL_24:
    uint64_t v66 = sub_2694(&qword_2022D0);
    memcpy(v55, v56, *(void *)(*(void *)(v66 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v55, v56, v30);
  uint64_t v60 = *(int *)(v57 + 20);
  uint64_t v61 = &v55[v60];
  uint64_t v62 = &v56[v60];
  *(void *)uint64_t v61 = *(void *)v62;
  *((void *)v61 + 1) = *((void *)v62 + 1);
  uint64_t v63 = *(int *)(v57 + 24);
  BOOL v64 = &v55[v63];
  uint64_t v65 = &v56[v63];
  *(void *)BOOL v64 = *(void *)v65;
  *((void *)v64 + 1) = *((void *)v65 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v55, 0, 1, v57);
  return a1;
}

uint64_t sub_79484(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

char *initializeWithTake for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v23))
  {
    uint64_t v24 = sub_2694(&qword_201E28);
    memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v23);
  }
  uint64_t v25 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v25] = *(_OWORD *)&a2[v25];
  uint64_t v26 = a3[13];
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  *(_OWORD *)&a1[v26] = *(_OWORD *)&a2[v26];
  uint64_t v27 = a3[14];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v27], 1, v23))
  {
    uint64_t v30 = sub_2694(&qword_201E28);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v28, v29, v23);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v28, 0, 1, v23);
  }
  uint64_t v31 = a3[15];
  int v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1, v34))
  {
    uint64_t v35 = sub_2694(&qword_2022D0);
    memcpy(v32, v33, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v32, v33, v23);
    *(_OWORD *)&v32[*(int *)(v34 + 20)] = *(_OWORD *)&v33[*(int *)(v34 + 20)];
    *(_OWORD *)&v32[*(int *)(v34 + 24)] = *(_OWORD *)&v33[*(int *)(v34 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v32, 0, 1, v34);
  }
  return a1;
}

char *assignWithTake for BodyMassQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = &a1[v18];
  uint64_t v22 = &a2[v18];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = a3[9];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = sub_1AC1E0();
  int v27 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v26);
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1, v26);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v29 = *(void *)(v26 - 8);
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v24, v26);
LABEL_12:
    uint64_t v30 = sub_2694(&qword_201E28);
    memcpy(v24, v25, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v24, v25, v26);
LABEL_13:
  uint64_t v31 = a3[10];
  int v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v35 = *(void *)v33;
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)int v32 = v35;
  *((void *)v32 + 1) = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[11];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  uint64_t v40 = *(void *)v38;
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = v40;
  *((void *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[12];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  uint64_t v45 = *(void *)v43;
  uint64_t v44 = *((void *)v43 + 1);
  *(void *)uint64_t v42 = v45;
  *((void *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[13];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  uint64_t v50 = *(void *)v48;
  uint64_t v49 = *((void *)v48 + 1);
  *(void *)uint64_t v47 = v50;
  *((void *)v47 + 1) = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[14];
  uint64_t v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  int v54 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v51], 1, v26);
  int v55 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v53, 1, v26);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v52, v53, v26);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v52, 0, 1, v26);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v56 = *(void *)(v26 - 8);
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v52, v26);
LABEL_18:
    uint64_t v57 = sub_2694(&qword_201E28);
    memcpy(v52, v53, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v56 + 40))(v52, v53, v26);
LABEL_19:
  uint64_t v58 = a3[15];
  int v59 = &a1[v58];
  uint64_t v60 = &a2[v58];
  uint64_t v61 = type metadata accessor for SnippetHeaderModel();
  int v62 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v59, 1, v61);
  int v63 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v60, 1, v61);
  if (!v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 40))(v59, v60, v26);
      uint64_t v66 = *(int *)(v61 + 20);
      uint64_t v67 = &v59[v66];
      uint64_t v68 = &v60[v66];
      uint64_t v70 = *(void *)v68;
      uint64_t v69 = *((void *)v68 + 1);
      *(void *)uint64_t v67 = v70;
      *((void *)v67 + 1) = v69;
      swift_bridgeObjectRelease();
      uint64_t v71 = *(int *)(v61 + 24);
      uint64_t v72 = &v59[v71];
      uint64_t v73 = &v60[v71];
      uint64_t v75 = *(void *)v73;
      uint64_t v74 = *((void *)v73 + 1);
      *(void *)uint64_t v72 = v75;
      *((void *)v72 + 1) = v74;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_79484((uint64_t)v59, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v63)
  {
LABEL_24:
    uint64_t v64 = sub_2694(&qword_2022D0);
    memcpy(v59, v60, *(void *)(*(void *)(v64 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v59, v60, v26);
  *(_OWORD *)&v59[*(int *)(v61 + 20)] = *(_OWORD *)&v60[*(int *)(v61 + 20)];
  *(_OWORD *)&v59[*(int *)(v61 + 24)] = *(_OWORD *)&v60[*(int *)(v61 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v59, 0, 1, v61);
  return a1;
}

uint64_t getEnumTagSinglePayload for BodyMassQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_79E20);
}

uint64_t sub_79E20(uint64_t a1, uint64_t a2, int *a3)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_13:
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
  sub_2694(&qword_201E28);
  sub_52E0();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v12 = a3[9];
LABEL_12:
    uint64_t v9 = a1 + v12;
    goto LABEL_13;
  }
  if (a2 != 2147483646)
  {
    uint64_t v8 = sub_2694(&qword_2022D0);
    uint64_t v12 = a3[15];
    goto LABEL_12;
  }
  unint64_t v13 = *(void *)(a1 + a3[10] + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  int v14 = v13 - 1;
  if (v14 < 0) {
    int v14 = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for BodyMassQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_79F24);
}

void sub_79F24(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    sub_2694(&qword_201E28);
    sub_52E0();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[9];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(void *)(a1 + a4[10] + 8) = a2;
        return;
      }
      uint64_t v10 = sub_2694(&qword_2022D0);
      uint64_t v14 = a4[15];
    }
    uint64_t v11 = a1 + v14;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, a2, a2, v10);
}

void sub_7A004()
{
  sub_2EBF4(319, &qword_202C60, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  if (v0 <= 0x3F)
  {
    sub_2EBF4(319, (unint64_t *)&qword_202C68, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    if (v1 <= 0x3F)
    {
      sub_2EBF4(319, (unint64_t *)&qword_202C70, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for BodyMassQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 11) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v5 = v6 - 12;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for BodyMassQueryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x7A2D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BodyMassQueryModel.CodingKeys()
{
  return &type metadata for BodyMassQueryModel.CodingKeys;
}

unint64_t sub_7A30C()
{
  unint64_t result = qword_2037F0;
  if (!qword_2037F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2037F0);
  }
  return result;
}

unint64_t sub_7A35C()
{
  unint64_t result = qword_2037F8;
  if (!qword_2037F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2037F8);
  }
  return result;
}

unint64_t sub_7A3AC()
{
  unint64_t result = qword_203800;
  if (!qword_203800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_203800);
  }
  return result;
}

uint64_t sub_7A3F8()
{
  return type metadata accessor for BodyMassQueryModel();
}

uint64_t sub_7A410()
{
  return type metadata accessor for BodyMassQueryModel();
}

uint64_t sub_7A428(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t sub_7A438()
{
  return sub_1AD270();
}

uint64_t sub_7A45C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_7A474()
{
  return v0;
}

void sub_7A488(uint64_t a1@<X8>)
{
  *(void *)(v1 + a1) = 0;
}

uint64_t sub_7A494@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

uint64_t sub_7A4A0()
{
  return sub_1AD1D0();
}

void *sub_7A4B8(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = sub_1AD170())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001) != 0 ? (id)sub_1AD0A0() : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      id v7 = [v4 id];
      sub_1ACDD0();

      sub_B4FC();
      LOBYTE(v7) = sub_1AD010();
      swift_bridgeObjectRelease();
      if (v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v5;
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_7A658(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_7BBF0((uint64_t)sub_7A670);
}

uint64_t sub_7A670()
{
  sub_A364();
  if (qword_201C00 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_7A730;
  return sub_4F4E8();
}

uint64_t sub_7A730()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 40) = v4;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_7A814()
{
  id v1 = [*(id *)(v0 + 40) dialog];
  sub_7B324();
  unint64_t v2 = sub_1ACED0();

  swift_bridgeObjectRetain();
  uint64_t v3 = sub_7A4B8(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(v0 + 40);
  if (v3)
  {
    id v5 = [v3 fullPrint];
    uint64_t v6 = sub_1ACDD0();
    uint64_t v8 = v7;
  }
  else
  {

    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v9(v6, v8);
}

uint64_t sub_7A930()
{
  sub_A364();
  swift_errorRelease();
  uint64_t v0 = sub_7BB88();
  return v1(v0);
}

uint64_t sub_7A988()
{
  sub_A364();
  v0[2] = v1;
  v0[3] = v2;
  sub_2694(&qword_201E28);
  v0[4] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_7AA14()
{
  sub_A364();
  if (qword_201C00 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1ACE40();
  uint64_t v2 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_7AB08;
  return sub_4F340();
}

uint64_t sub_7AB08()
{
  sub_47634();
  uint64_t v2 = *v1;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 48) = v7;
  swift_task_dealloc();
  uint64_t v9 = *(void *)(v2 + 32);
  if (v0) {
    swift_errorRelease();
  }
  sub_74610(v9);
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_7AC48()
{
  sub_47634();
  id v1 = [*(id *)(v0 + 48) dialog];
  sub_7B324();
  unint64_t v2 = sub_1ACED0();

  if (v2 >> 62)
  {
    sub_7BBD0();
    uint64_t v6 = sub_1AD170();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_3:
    sub_7BBB0();
    uint64_t v3 = (void *)sub_1AD0A0();
    uint64_t v4 = *(void **)(v0 + 48);
    swift_bridgeObjectRelease();
    id v5 = [v3 fullPrint];

    sub_1ACDD0();
    goto LABEL_6;
  }
  uint64_t v7 = *(void **)(v0 + 48);
  swift_bridgeObjectRelease();

LABEL_6:
  swift_task_dealloc();
  uint64_t v8 = sub_7BB9C();
  return v9(v8);
}

uint64_t sub_7AD94()
{
  sub_A364();
  swift_task_dealloc();
  uint64_t v0 = sub_7BB88();
  return v1(v0);
}

uint64_t sub_7ADEC()
{
  sub_A364();
  v0[3] = v1;
  v0[4] = v2;
  v0[2] = v3;
  uint64_t v4 = sub_1AB0A0();
  v0[5] = v4;
  sub_A19C(v4);
  v0[6] = v5;
  v0[7] = swift_task_alloc();
  v0[8] = swift_task_alloc();
  uint64_t v6 = sub_1AB3D0();
  v0[9] = v6;
  sub_A19C(v6);
  v0[10] = v7;
  v0[11] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_7AECC()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)v0[4];
  sub_1AB070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  id v6 = [v5 catId];
  sub_1ACDD0();

  sub_1AB380();
  if (qword_201C08 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)v0[4];
  uint64_t v8 = qword_214628;
  uint64_t v9 = unk_214630;
  sub_2E38(qword_214610, qword_214628);
  sub_2694(&qword_202588);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1AF530;
  *(void *)(v10 + 32) = v7;
  uint64_t v17 = v10;
  sub_1ACEF0();
  v0[12] = v17;
  id v11 = v7;
  uint64_t v12 = (void *)swift_task_alloc();
  v0[13] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_7B0CC;
  uint64_t v13 = v0[11];
  uint64_t v14 = v0[2];
  uint64_t v15 = v0[3];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v14, v15, v17, v13, v8, v9);
}

uint64_t sub_7B0CC()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_E53C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_7B1B4()
{
  sub_47634();
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_7B248(uint64_t a1)
{
  return sub_7B288(a1, (void (*)(void))type metadata accessor for WellnessQueryingCATsSimple, &qword_214600);
}

uint64_t sub_7B268(uint64_t a1)
{
  return sub_7B288(a1, (void (*)(void))type metadata accessor for WellnessCATsSimple, &qword_214608);
}

uint64_t sub_7B288(uint64_t a1, void (*a2)(void), uint64_t *a3)
{
  uint64_t v5 = sub_1AC250();
  __chkstk_darwin(v5 - 8);
  a2(0);
  sub_1AC240();
  uint64_t result = sub_1AC210();
  *a3 = result;
  return result;
}

unint64_t sub_7B324()
{
  unint64_t result = qword_203810;
  if (!qword_203810)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_203810);
  }
  return result;
}

uint64_t sub_7B364()
{
  uint64_t v0 = sub_1AB1C0();
  swift_allocObject();
  uint64_t result = sub_1AB1B0();
  qword_214628 = v0;
  unk_214630 = &protocol witness table for ResponseFactory;
  qword_214610 = result;
  return result;
}

uint64_t sub_7B3B8(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 48) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a3;
  return sub_7BBF0((uint64_t)sub_7B3D4);
}

uint64_t sub_7B3D4()
{
  sub_47634();
  if (qword_201BF8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_7B4AC;
  char v4 = *(unsigned char *)(v0 + 48);
  return sub_D45D0(v1, v4, v2);
}

uint64_t sub_7B4AC()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 40) = v4;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v5 = sub_7BB88();
    return v6(v5);
  }
  else
  {
    sub_A4F0();
    return _swift_task_switch(v8, v9, v10);
  }
}

uint64_t sub_7B5B4()
{
  sub_47634();
  id v1 = [*(id *)(v0 + 40) dialog];
  sub_7B324();
  unint64_t v2 = sub_1ACED0();

  if (v2 >> 62)
  {
    sub_7BBD0();
    uint64_t v6 = sub_1AD170();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_3:
    sub_7BBB0();
    uint64_t v3 = (void *)sub_1AD0A0();
    uint64_t v4 = *(void **)(v0 + 40);
    swift_bridgeObjectRelease();
    id v5 = [v3 fullPrint];

    sub_1ACDD0();
    goto LABEL_6;
  }
  uint64_t v7 = *(void **)(v0 + 40);
  swift_bridgeObjectRelease();

LABEL_6:
  uint64_t v8 = sub_7BB9C();
  return v9(v8);
}

uint64_t sub_7B6F8()
{
  sub_A364();
  v0[2] = v1;
  v0[3] = v2;
  sub_2694(&qword_201E28);
  v0[4] = swift_task_alloc();
  v0[5] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_7B794()
{
  sub_47634();
  if (qword_201C00 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  sub_1ACE40();
  uint64_t v3 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v2, 0, 1, v3);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_7B8A8;
  return sub_500A0();
}

uint64_t sub_7B8A8()
{
  sub_47634();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v7 = *v1;
  sub_E53C();
  *uint64_t v8 = v7;
  *(void *)(v10 + 56) = v9;
  *(void *)(v10 + 64) = v0;
  swift_task_dealloc();
  sub_74610(v6);
  sub_74610(v5);
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_7B9CC()
{
  sub_47634();
  id v1 = [*(id *)(v0 + 56) dialog];
  sub_7B324();
  unint64_t v2 = sub_1ACED0();

  if (v2 >> 62)
  {
    sub_7BBD0();
    uint64_t v6 = sub_1AD170();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_3:
    sub_7BBB0();
    uint64_t v3 = (void *)sub_1AD0A0();
    uint64_t v4 = *(void **)(v0 + 56);
    swift_bridgeObjectRelease();
    id v5 = [v3 fullPrint];

    sub_1ACDD0();
    goto LABEL_6;
  }
  uint64_t v7 = *(void **)(v0 + 56);
  swift_bridgeObjectRelease();

LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = sub_7BB9C();
  return v9(v8);
}

uint64_t sub_7BB20()
{
  sub_A364();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v0 = sub_7BB88();
  return v1(v0);
}

uint64_t sub_7BB88()
{
  return 0;
}

uint64_t sub_7BB9C()
{
  return v0;
}

uint64_t sub_7BBB0()
{
  return sub_4AA30(0, (v0 & 0xC000000000000001) == 0, v0);
}

uint64_t sub_7BBD0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_7BBF0(uint64_t a1)
{
  return _swift_task_switch(a1, 0, 0);
}

uint64_t sub_7BC0C(char a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, long long *a6)
{
  uint64_t v12 = swift_allocObject();
  sub_7BC8C(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t sub_7BC8C(char a1, uint64_t a2, void *__src, uint64_t a4, uint64_t a5, long long *a6)
{
  *(unsigned char *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  memcpy((void *)(v6 + 32), __src, 0xA0uLL);
  *(void *)(v6 + 192) = a4;
  *(void *)(v6 + 200) = a5;
  sub_24D80(a6, v6 + 208);
  return v6;
}

uint64_t sub_7BCE8()
{
  sub_A364();
  v1[17] = v2;
  v1[18] = v0;
  sub_E510();
  v1[19] = v3;
  uint64_t v4 = sub_1AB410();
  v1[20] = v4;
  sub_A19C(v4);
  v1[21] = v5;
  v1[22] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_203A20);
  sub_53D4(v6);
  v1[23] = sub_A42C();
  uint64_t v7 = sub_1AB4B0();
  unsigned char v1[24] = v7;
  sub_A19C(v7);
  v1[25] = v8;
  v1[26] = sub_A42C();
  uint64_t v9 = sub_1AB510();
  v1[27] = v9;
  sub_A19C(v9);
  v1[28] = v10;
  v1[29] = sub_A220();
  v1[30] = swift_task_alloc();
  uint64_t v11 = sub_1AB420();
  v1[31] = v11;
  sub_A19C(v11);
  v1[32] = v12;
  v1[33] = sub_A220();
  v1[34] = swift_task_alloc();
  uint64_t v13 = sub_1AB450();
  v1[35] = v13;
  sub_A19C(v13);
  v1[36] = v14;
  v1[37] = sub_A42C();
  uint64_t v15 = sub_1AB3F0();
  v1[38] = v15;
  sub_A19C(v15);
  v1[39] = v16;
  v1[40] = sub_A42C();
  uint64_t v17 = sub_1AC800();
  v1[41] = v17;
  sub_A19C(v17);
  v1[42] = v18;
  v1[43] = sub_A220();
  v1[44] = swift_task_alloc();
  v1[45] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v19, v20, v21);
}

uint64_t sub_7BEF0()
{
  uint64_t v118 = v0;
  uint64_t v2 = v0 + 17;
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[41];
  uint64_t v5 = v0[42];
  uint64_t v6 = v0[39];
  uint64_t v7 = v2[23];
  uint64_t v8 = v2[21];
  uint64_t v9 = sub_1AC7D0();
  sub_A340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v9, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v1, v8);
  uint64_t v10 = sub_1AC7F0();
  os_log_type_t v11 = sub_1ACF50();
  uint64_t v12 = v115;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v117 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = sub_1AD3E0();
    v115[15] = sub_4A278(v14, v15, &v117);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    sub_7F1C0((unint64_t *)&qword_202010, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v16 = sub_1AD2C0();
    v115[16] = sub_4A278(v16, v17, &v117);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_E558();
    v18();
    _os_log_impl(&def_342E4, v10, v11, "%s Parsing Input: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    sub_E558();
    v19();
  }
  else
  {
    uint64_t v20 = v115[45];
    uint64_t v22 = v115[41];
    uint64_t v21 = v115[42];
    sub_7F3F4();
    v23();

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  uint64_t v24 = v115[18];
  char v112 = sub_7E618();
  uint64_t v26 = v25;
  unint64_t v27 = *(void *)(v24 + 24);
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_1AD170();
  }
  else
  {
    uint64_t v28 = *(void *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
  }
  char v110 = v2;
  if (v28)
  {
    sub_4AA30(0, (v27 & 0xC000000000000001) == 0, v27);
    if ((v27 & 0xC000000000000001) != 0) {
      id v29 = (id)sub_1AD0A0();
    }
    else {
      id v29 = *(id *)(v27 + 32);
    }
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    uint64_t v31 = sub_12DE34(v30);
    uint64_t v33 = v32;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v31 = 0;
    uint64_t v33 = 0;
  }
  uint64_t v114 = v31;
  uint64_t v34 = v115[34];
  uint64_t v35 = v115[31];
  uint64_t v36 = v115[32];
  sub_1AB3E0();
  uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t))(v36 + 88);
  if (v37(v34, v35) != enum case for Parse.uso(_:))
  {
    (*(void (**)(void, void))(v115[32] + 8))(v115[34], v115[31]);
LABEL_15:
    uint64_t v47 = v12[33];
    uint64_t v48 = v12[31];
    sub_1AB3E0();
    if (v37(v47, v48) != enum case for Parse.directInvocation(_:))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v62 = sub_72310();
      v63(v62);
      sub_A340();
      sub_E524();
      v64();
      uint64_t v65 = (void *)sub_1AC7F0();
      os_log_type_t v66 = sub_1ACF60();
      if (sub_29300(v66))
      {
        *(_WORD *)swift_slowAlloc() = 0;
        sub_7F424(&def_342E4, v67, v68, "Received unsupported type of input");
        sub_A1F0();
      }

      uint64_t v69 = sub_7F3B4();
      v70(v69);
      goto LABEL_36;
    }
    uint64_t v49 = v110 - 15;
    uint64_t v50 = v12[33];
    uint64_t v51 = v12[21];
    uint64_t v52 = v12[22];
    uint64_t v53 = v12[20];
    (*(void (**)(uint64_t, void))(v12[32] + 96))(v50, v12[31]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v52, v50, v53);
    uint64_t v54 = sub_1AB400();
    if (v54)
    {
      sub_19DA50(0xD000000000000012, 0x80000000001B73B0, v54, v49);
      swift_bridgeObjectRelease();
      if (v12[5])
      {
        if (swift_dynamicCast())
        {
          uint64_t v113 = v33;
          if (*((unsigned char *)v110 + 232) == 1)
          {
            int v55 = *(unsigned __int8 *)(v12[18] + 16);
            uint64_t v56 = v12;
            uint64_t v57 = v12[22];
            uint64_t v59 = v56[20];
            uint64_t v58 = v56[21];
            uint64_t v60 = v56;
            uint64_t v117 = v26;
            if (v55 == 1)
            {
              swift_bridgeObjectRetain();
              unint64_t v61 = swift_bridgeObjectRetain();
              sub_DF120(v61);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRetain();
              sub_DF120((unint64_t)v112);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v116 = v117;
            (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
            uint64_t v111 = 1;
            uint64_t v12 = v60;
          }
          else
          {
            sub_7F3F4();
            v107();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v111 = 0;
            uint64_t v116 = v26;
          }
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
    }
    else
    {
      *uint64_t v49 = 0u;
      *(_OWORD *)(v110 - 13) = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_7F208((uint64_t)v49, &qword_202BA0);
LABEL_33:
    sub_A340();
    sub_E524();
    v90();
    uint64_t v91 = (void *)sub_1AC7F0();
    os_log_type_t v92 = sub_1ACF60();
    if (sub_29300(v92))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_7F424(&def_342E4, v93, v94, "LogMedAsNeededConfirmationStrategy failed to unpack directInvocation, returning nil");
      sub_A1F0();
    }
    uint64_t v96 = v12[21];
    uint64_t v95 = v12[22];
    uint64_t v97 = v12[20];

    uint64_t v98 = sub_7F3B4();
    v99(v98);
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v97);
LABEL_36:
    uint64_t v111 = 0;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    uint64_t v116 = 1;
    goto LABEL_43;
  }
  uint64_t v108 = v24;
  uint64_t v113 = v33;
  uint64_t v116 = v26;
  uint64_t v39 = v12[36];
  uint64_t v38 = v12[37];
  uint64_t v41 = v12[34];
  uint64_t v40 = v12[35];
  uint64_t type = v12[27];
  uint64_t v42 = v12[23];
  (*(void (**)(uint64_t, void))(v12[32] + 96))(v41, v12[31]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v38, v41, v40);
  sub_1AB440();
  uint64_t v43 = sub_1AB4A0();
  sub_7F388();
  v44();
  sub_C1028(v43, v42);
  swift_bridgeObjectRelease();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v42, 1, type) == 1)
  {
    uint64_t v45 = v12[23];
    sub_7F3F4();
    v46();
    sub_7F208(v45, &qword_203A20);
    goto LABEL_15;
  }
  (*(void (**)(void, void, void))(v12[28] + 32))(v12[30], v12[23], v12[27]);
  if (sub_1AB4E0())
  {
    int v71 = *(unsigned __int8 *)(v12[18] + 16);
    uint64_t v72 = v12[36];
    uint64_t v73 = v12[37];
    uint64_t v74 = v12[35];
    uint64_t v75 = v12[30];
    uint64_t v76 = v12;
    uint64_t v79 = v12 + 27;
    uint64_t v78 = v12[27];
    uint64_t v77 = v79[1];
    uint64_t v117 = v26;
    if (v71 == 1)
    {
      swift_bridgeObjectRetain();
      unint64_t v80 = swift_bridgeObjectRetain();
      sub_DF120(v80);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_DF120((unint64_t)v112);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v116 = v117;
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v75, v78);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v73, v74);
    uint64_t v100 = 1;
    goto LABEL_39;
  }
  uint64_t v82 = v12[29];
  uint64_t v81 = v12[30];
  uint64_t v83 = v12[27];
  uint64_t v84 = v12[28];
  char v85 = sub_1AB4F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v82, v81, v83);
  uint64_t v86 = v12[28];
  uint64_t v76 = v12;
  if (v85)
  {
    uint64_t v87 = *(void (**)(void))(v86 + 8);
    sub_7F388();
    v87();
    sub_7F388();
    v87();
    uint64_t v88 = sub_7F3DC();
    v89(v88);
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v111 = 0;
    goto LABEL_42;
  }
  char v101 = sub_1AB500();
  char v102 = *(void (**)(void))(v86 + 8);
  sub_7F388();
  v102();
  sub_7F388();
  v102();
  uint64_t v103 = sub_7F3DC();
  v104(v103);
  if (v101) {
    goto LABEL_41;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v116 = *(void *)(v108 + 24);
  swift_bridgeObjectRetain();
  uint64_t v100 = 2;
LABEL_39:
  uint64_t v111 = v100;
LABEL_42:
  uint64_t v12 = v76;
LABEL_43:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12[1];
  return v105(v111, v116, v114, v113);
}

uint64_t sub_7CA28()
{
  sub_E510();
  sub_1AB3F0();
  sub_52C4();
  __chkstk_darwin(v0);
  sub_E548();
  uint64_t v1 = sub_1AC800();
  sub_52C4();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_E548();
  uint64_t v7 = v6 - v5;
  sub_1AC7C0();
  sub_A340();
  uint64_t v22 = v1;
  sub_E524();
  v8();
  sub_E524();
  v9();
  uint64_t v10 = sub_1AC7F0();
  os_log_type_t v11 = sub_1ACF50();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = sub_1AD3E0();
    sub_4A278(v13, v14, &v23);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    sub_7F1C0((unint64_t *)&qword_202010, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v15 = sub_1AD2C0();
    sub_4A278(v15, v16, &v23);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v17 = sub_7F404();
    v18(v17);
    _os_log_impl(&def_342E4, v10, v11, "%s Handling Input: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    uint64_t v19 = sub_7F404();
    v20(v19);
  }

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v22);
  return sub_1AB0B0();
}

uint64_t sub_7CD08()
{
  sub_A364();
  v1[13] = v2;
  v1[14] = v0;
  v1[12] = v3;
  sub_E510();
  v1[15] = v4;
  uint64_t v5 = sub_1AB0A0();
  v1[16] = v5;
  sub_A19C(v5);
  v1[17] = v6;
  v1[18] = sub_A220();
  v1[19] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v1[20] = v7;
  sub_A19C(v7);
  v1[21] = v8;
  v1[22] = sub_A42C();
  uint64_t v9 = sub_1AC800();
  v1[23] = v9;
  sub_A19C(v9);
  unsigned char v1[24] = v10;
  v1[25] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_7CE0C()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0;
  uint64_t v4 = v0 + 24;
  uint64_t v3 = v0[24];
  uint64_t v2 = v4[1];
  uint64_t v5 = v1[23];
  uint64_t v6 = sub_1AC7D0();
  sub_A340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v5);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = sub_1AC7F0();
  os_log_type_t v8 = sub_1ACF50();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = sub_1AD3E0();
    v1[10] = sub_4A278(v11, v12, &v20);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v1[11] = v13;
    sub_1ACFE0();
    *uint64_t v10 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_342E4, v7, v8, "%s makeErrorResponse called with error: %@", (uint8_t *)v9, 0x16u);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    sub_E558();
    v14();
  }
  else
  {
    uint64_t v16 = v1[24];
    uint64_t v15 = v1[25];
    uint64_t v17 = v1[23];
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  sub_2E38((void *)(v1[14] + 72), *(void *)(v1[14] + 96));
  uint64_t v18 = (void *)swift_task_alloc();
  v1[26] = v18;
  *uint64_t v18 = v1;
  v18[1] = sub_7D0F0;
  return sub_9D67C();
}

uint64_t sub_7D0F0()
{
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 216) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    return v6();
  }
  else
  {
    sub_A4F0();
    return _swift_task_switch(v8, v9, v10);
  }
}

uint64_t sub_7D228()
{
  sub_7F418();
  uint64_t v1 = (void *)v0[27];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[14];
  sub_1AB090();
  sub_E524();
  v6();
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1AB390();
  id v7 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_E3FC(v5 + 208, (uint64_t)(v0 + 2));
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[6];
  sub_2E38(v0 + 2, v8);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[28] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_7D3BC;
  uint64_t v11 = v0[27];
  uint64_t v12 = v0[22];
  uint64_t v13 = v0[12];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v13, v11, v12, v8, v9);
}

uint64_t sub_7D3BC()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_A304();
  *uint64_t v5 = v4;
  *(void *)(v6 + 232) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_7D498()
{
  sub_7F418();

  sub_7F388();
  v1();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_7F3CC();
  return v2();
}

uint64_t sub_7D558()
{
  sub_A364();
  v1[26] = v2;
  v1[27] = v0;
  uint64_t v3 = sub_1AC800();
  v1[28] = v3;
  sub_A19C(v3);
  v1[29] = v4;
  v1[30] = sub_A42C();
  uint64_t v5 = sub_2694(&qword_202008);
  sub_53D4(v5);
  v1[31] = sub_A42C();
  uint64_t v6 = sub_1AB0A0();
  sub_53D4(v6);
  v1[32] = sub_A42C();
  uint64_t v7 = sub_1AB3D0();
  v1[33] = v7;
  sub_A19C(v7);
  v1[34] = v8;
  v1[35] = sub_A42C();
  uint64_t v9 = sub_2694(&qword_201E28);
  sub_53D4(v9);
  v1[36] = sub_A220();
  v1[37] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_7D688()
{
  uint64_t v1 = v0[27];
  unint64_t v2 = *(void *)(v1 + 24);
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  if (!sub_1AD170()) {
    goto LABEL_8;
  }
LABEL_3:
  sub_4AA30(0, (v2 & 0xC000000000000001) == 0, v2);
  if ((v2 & 0xC000000000000001) != 0) {
    id v4 = (id)sub_1AD0A0();
  }
  else {
    id v4 = *(id *)(v2 + 32);
  }
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  sub_1AA5DC(v5);
  if (v6)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v7 = 1;
LABEL_10:
  uint64_t v8 = v0[37];
  uint64_t v9 = v0[27];
  uint64_t v10 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, v7, 1, v10);
  sub_7E8BC();
  v0[38] = *(void *)(v9 + 192);
  unint64_t v11 = *(void *)(v1 + 24);
  if (!(v11 >> 62))
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8));
    swift_retain();
    swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_12;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  if (!sub_1AD170()) {
    goto LABEL_17;
  }
LABEL_12:
  sub_4AA30(0, (v11 & 0xC000000000000001) == 0, v11);
  if ((v11 & 0xC000000000000001) != 0) {
    id v13 = (id)sub_1AD0A0();
  }
  else {
    id v13 = *(id *)(v11 + 32);
  }
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  sub_1AA5DC(v14);
  if (v15)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v16 = 0;
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v16 = 1;
LABEL_19:
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0[36], v16, 1, v10);
  uint64_t v17 = (void *)swift_task_alloc();
  v0[39] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_7D94C;
  return sub_1A5A3C();
}

uint64_t sub_7D94C()
{
  sub_E588();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 288);
  if (v0)
  {
    swift_release();
    swift_errorRelease();
    sub_7F208(v7, &qword_201E28);
  }
  else
  {
    *(void *)(v5 + 320) = v3;
    sub_7F208(v7, &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_7DAC4()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_7DB5C;
  return sub_7A658(0x6C65636E6163, 0xE600000000000000);
}

uint64_t sub_7DB5C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[20] = v0;
  v1[21] = v3;
  v1[22] = v4;
  uint64_t v5 = *v0;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v8 + 336) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_7DC2C()
{
  sub_A364();
  v0[43] = v0[21];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[44] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_7DCD0;
  return sub_7A658(0x6D7269666E6F63, 0xE700000000000000);
}

uint64_t sub_7DCD0()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[23] = v0;
  unsigned char v1[24] = v3;
  v1[25] = v4;
  uint64_t v5 = *v0;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v8 + 360) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_7DDA0()
{
  unint64_t v1 = *(void *)(v0 + 360);
  unint64_t v3 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v4 = *(void **)(v0 + 320);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 216);
  BOOL v7 = v3 == 0;
  if (!v3) {
    unint64_t v3 = 0xE600000000000000;
  }
  unint64_t v24 = v3;
  if (v7) {
    uint64_t v2 = 0x6C65636E6143;
  }
  uint64_t v23 = v2;
  if (v1) {
    uint64_t v8 = *(void *)(v0 + 192);
  }
  else {
    uint64_t v8 = 0x6D7269666E6F43;
  }
  if (!v1) {
    unint64_t v1 = 0xE700000000000000;
  }
  unint64_t v21 = v1;
  uint64_t v22 = v8;
  *(void *)(v0 + 40) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 48) = sub_45E30();
  *(unsigned char *)(v0 + 16) = 4;
  char v9 = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  sub_1AB080();
  sub_1AB370();
  sub_1AB3B0();
  sub_7E9E8();
  uint64_t v10 = sub_1AB190();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, 0, 1, v10);
  sub_1AB3A0();
  sub_1AB390();
  id v11 = [v4 catId];
  sub_1ACDD0();

  sub_1AB380();
  sub_1AB3C0();
  sub_E3FC(v6 + 208, v0 + 56);
  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v13 = *(void *)(v0 + 88);
  sub_2E38((void *)(v0 + 56), v12);
  *(void *)(v0 + 120) = type metadata accessor for WellnessSnippets();
  *(void *)(v0 + 128) = sub_7F1C0((unint64_t *)&qword_202590, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  uint64_t v14 = sub_B5B0((uint64_t *)(v0 + 96));
  *uint64_t v14 = 0xD000000000000031;
  v14[1] = 0x80000000001BAC40;
  v14[2] = v23;
  v14[3] = v24;
  v14[4] = v22;
  v14[5] = v21;
  *((unsigned char *)v14 + 48) = v9 & 1;
  swift_storeEnumTagMultiPayload();
  sub_2694(&qword_202588);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1AF530;
  *(void *)(v15 + 32) = v4;
  uint64_t v25 = v15;
  sub_1ACEF0();
  *(void *)(v0 + 368) = v25;
  id v16 = v4;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 376) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_7E0B4;
  uint64_t v18 = *(void *)(v0 + 280);
  uint64_t v19 = *(void *)(v0 + 208);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v19, v0 + 96, v25, v18, v12, v13);
}

uint64_t sub_7E0B4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 96;
  uint64_t v4 = *v0;
  sub_A304();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_7E1A0()
{
  sub_E588();
  uint64_t v1 = *(void *)(v0 + 296);

  uint64_t v2 = sub_72310();
  v3(v2);
  sub_7F208(v1, &qword_201E28);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  sub_7F444();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_7F3CC();
  return v4();
}

uint64_t sub_7E264()
{
  sub_E588();
  uint64_t v2 = v0[29];
  uint64_t v1 = v0[30];
  uint64_t v3 = v0[28];
  uint64_t v4 = sub_1AC7D0();
  sub_A340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  if (sub_29300(v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&def_342E4, v5, (os_log_type_t)v1, "Couldn't create logMedScheduleMixedStatusConfirmation_Dialog, returning generic error output.", v7, 2u);
    sub_A1F0();
  }

  uint64_t v8 = sub_E570();
  v9(v8);
  sub_7F174();
  v0[48] = swift_allocError();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[49] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_7E3D0;
  return sub_7CD08();
}

uint64_t sub_7E3D0()
{
  sub_A364();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *os_log_type_t v6 = v5;
  *(void *)(v3 + 400) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_7E4B4()
{
  sub_E588();
  sub_7F208(*(void *)(v0 + 296), &qword_201E28);
  sub_7F444();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_7F3CC();
  return v1();
}

uint64_t sub_7E550()
{
  sub_7F418();
  sub_7F208(*(void *)(v0 + 296), &qword_201E28);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v1();
}

void *sub_7E618()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v2 = sub_1AD170();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  uint64_t result = (void *)swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_31;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v5 = (id)sub_1AD0A0();
      }
      else {
        id v5 = *(id *)(v1 + 8 * v4 + 32);
      }
      os_log_type_t v6 = v5;
      uint64_t v7 = sub_DF2D8(v5);
      if (v8)
      {
        if (v7 == 0x6E656B6174 && v8 == 0xE500000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_24:
          id v18 = v6;
          sub_1ACEB0();
          sub_7F3A4();
          if (v17)
          {
            sub_7F394(v19);
            sub_1ACF00();
          }
          goto LABEL_30;
        }
        char v10 = sub_1AD2F0();
        swift_bridgeObjectRelease();
        if (v10) {
          goto LABEL_24;
        }
      }
      uint64_t v11 = sub_DF2D8(v6);
      if (v12)
      {
        if (v11 == 0x64657070696B73 && v12 == 0xE700000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_28:
          id v20 = v6;
          sub_1ACEB0();
          sub_7F3A4();
          if (v17)
          {
            sub_7F394(v21);
            sub_1ACF00();
          }
          goto LABEL_30;
        }
        char v14 = sub_1AD2F0();
        swift_bridgeObjectRelease();
        if (v14) {
          goto LABEL_28;
        }
      }
      id v15 = v6;
      sub_1ACEB0();
      sub_7F3A4();
      if (v17)
      {
        sub_7F394(v16);
        sub_1ACF00();
      }
LABEL_30:
      sub_1ACF20();
      ++v4;
      sub_1ACEF0();

      if (v2 == v4) {
        goto LABEL_31;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_7E8BC()
{
  unint64_t v0 = (unint64_t)sub_7E618();
  unint64_t v2 = v1;
  unint64_t v4 = v3;
  if (v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1AD170();
  }
  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1AD170();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1AD170();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_7E9E8()
{
  uint64_t v0 = sub_1AB580();
  __chkstk_darwin(v0);
  sub_E548();
  uint64_t v1 = sub_1AB4D0();
  sub_52C4();
  uint64_t v3 = v2;
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v12 - v6;
  sub_1AB4C0();
  sub_1AB570();
  sub_E524();
  v8();
  sub_1AB550();
  sub_1AB180();
  sub_2694(&qword_202000);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1ADCF0;
  sub_E524();
  v9();
  sub_1AB170();
  sub_7F388();
  v10();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v1);
}

uint64_t sub_7EBE8()
{
  swift_bridgeObjectRelease();
  sub_E4B8(v0 + 32);
  swift_release();
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 208);
  return v0;
}

uint64_t sub_7EC28()
{
  sub_7EBE8();

  return _swift_deallocClassInstance(v0, 248, 7);
}

uint64_t type metadata accessor for LogMedScheduleMixedStatusConfirmationStrategy()
{
  return self;
}

uint64_t sub_7EC84(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_7ED1C;
  return sub_7BCE8();
}

uint64_t sub_7ED1C()
{
  sub_7F418();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_A1B4();
  uint64_t v11 = v10;
  sub_E53C();
  *uint64_t v12 = v11;
  uint64_t v13 = *v1;
  sub_A304();
  *char v14 = v13;
  swift_task_dealloc();
  if (!v0)
  {
    id v15 = *(void **)(v11 + 16);
    void *v15 = v9;
    v15[1] = v7;
    long long v15[2] = v5;
    void v15[3] = v3;
  }
  unint64_t v16 = *(uint64_t (**)(void))(v13 + 8);
  return v16();
}

uint64_t sub_7EE18()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_7F384;
  return sub_7D558();
}

uint64_t sub_7EEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_7F384;
  return PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()(a1, a2, a3);
}

uint64_t sub_7EF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_7F384;
  return PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()(a1, a2, a3);
}

uint64_t sub_7F018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_24C20;
  return PromptForValueFlowStrategyAsync.makeFlowCancelledResponse()(a1, a2, a3);
}

uint64_t sub_7F0CC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_7F384;
  return sub_7CD08();
}

unint64_t sub_7F174()
{
  unint64_t result = qword_203A18;
  if (!qword_203A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_203A18);
  }
  return result;
}

uint64_t sub_7F1C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_7F208(uint64_t a1, uint64_t *a2)
{
  sub_2694(a2);
  sub_E558();
  v3();
  return a1;
}

unsigned char *storeEnumTagSinglePayload for LogMedScheduleMixedStatusConfirmationStrategyError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x7F2FCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LogMedScheduleMixedStatusConfirmationStrategyError()
{
  return &type metadata for LogMedScheduleMixedStatusConfirmationStrategyError;
}

unint64_t sub_7F338()
{
  unint64_t result = qword_203A28;
  if (!qword_203A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_203A28);
  }
  return result;
}

BOOL sub_7F394@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_7F3B4()
{
  return v0;
}

uint64_t sub_7F3CC()
{
  return v0 + 8;
}

uint64_t sub_7F3DC()
{
  return v0;
}

uint64_t sub_7F404()
{
  return v0;
}

void sub_7F424(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t sub_7F444()
{
  return swift_task_dealloc();
}

uint64_t type metadata accessor for WellnessQueryingCATPatternsExecutor(uint64_t a1)
{
  return sub_95FB8(a1, (uint64_t *)&unk_203A30);
}

uint64_t sub_7F484()
{
  return swift_initClassMetadata2();
}

void sub_7F4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_8084C((uint64_t)type metadata accessor for WellnessQueryingActiveEnergyParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_7F4DC()
{
  sub_98838();
  uint64_t v3 = sub_2694(&qword_201E28);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_98338();
  __chkstk_darwin(v5);
  sub_98D20();
  sub_2694(&qword_2027C8);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B08D0;
  sub_989BC(v6, 0xD000000000000016);
  sub_1AC1E0();
  sub_982D8(v2);
  if (v7)
  {
    sub_A068(v2, &qword_201E28);
    sub_988B0();
  }
  else
  {
    sub_98C88();
    sub_A5C0();
    sub_98814();
    v8();
  }
  uint64_t v9 = sub_98318();
  uint64_t v10 = type metadata accessor for WellnessQueryingBasalBodyTemperatureParameters(v9);
  uint64_t v11 = sub_98CF8(v10);
  sub_88AB4(v11, v1, &qword_201E28);
  sub_982D8(v1);
  if (v7)
  {
    sub_A068(v1, &qword_201E28);
    sub_988B0();
  }
  else
  {
    sub_98FB8();
    sub_A5C0();
    sub_98748();
    v12();
  }
  sub_98F78((uint64_t)"queriedCalendarRange");
  if (v1)
  {
    uint64_t v13 = sub_1ABFB0();
    uint64_t v14 = v1;
  }
  else
  {
    uint64_t v13 = sub_98B9C();
  }
  *(void *)(v6 + 144) = v14;
  *(void *)(v6 + 168) = v13;
  *(void *)(v6 + 176) = 0x74617265706D6574;
  *(void *)(v6 + 184) = 0xEB00000000657275;
  uint64_t v15 = *(void *)(v0 + *(int *)(v10 + 28));
  if (v15)
  {
    sub_1ABED0();
    uint64_t v16 = v15;
  }
  else
  {
    sub_98CBC();
  }
  *(void *)(v6 + 192) = v16;
  sub_98C7C();
  *(void *)(v6 + 216) = v17;
  *(void *)(v6 + 224) = v18;
  sub_990BC();
  if (v0)
  {
    uint64_t v19 = type metadata accessor for WellnessTime(0);
  }
  else
  {
    uint64_t v19 = 0;
    *(void *)(v6 + 248) = 0;
    *(void *)(v6 + 256) = 0;
  }
  *(void *)(v6 + 240) = v0;
  *(void *)(v6 + 264) = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_98B70();
  sub_987C4();
}

void sub_7F71C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_80C1C((uint64_t)type metadata accessor for WellnessQueryingBloodGlucoseParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_7F734()
{
  sub_98838();
  sub_9909C();
  uint64_t v6 = sub_2694(&qword_201E28);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_98338();
  __chkstk_darwin(v8);
  sub_A754();
  __chkstk_darwin(v9);
  sub_A5CC();
  sub_2694(&qword_2027C8);
  uint64_t v10 = (__n128 *)sub_99084();
  uint64_t v11 = sub_99034(v10, (__n128)xmmword_1B1060);
  uint64_t v13 = sub_991A8((uint64_t)v11, v12);
  sub_88AB4(v13, v2, &qword_201E28);
  uint64_t v14 = sub_1AC1E0();
  sub_982B8(v2);
  if (v15)
  {
    sub_A068(v2, &qword_201E28);
    sub_9876C();
  }
  else
  {
    v10[4].n128_u64[1] = v14;
    sub_B5B0(v4);
    sub_A5C0();
    sub_9884C();
    v16();
  }
  uint64_t v17 = sub_98720();
  uint64_t v18 = type metadata accessor for WellnessQueryingBloodOxygenParameters(v17);
  sub_98588();
  if (v20)
  {
    unint64_t v21 = 0;
    v10[6].n128_u64[1] = 0;
    v10[7].n128_u64[0] = 0;
    double v22 = 0.0;
  }
  else
  {
    double v22 = *v19;
    unint64_t v21 = &type metadata for Double;
  }
  sub_98B20((uint64_t)v21, v22);
  sub_88AB4(v0 + *(int *)(v18 + 24), v3, &qword_201E28);
  sub_982B8(v3);
  if (v15)
  {
    sub_A068(v3, &qword_201E28);
    sub_9876C();
  }
  else
  {
    v10[10].n128_u64[1] = v14;
    sub_B5B0(v4);
    sub_A5C0();
    sub_9884C();
    v23();
  }
  v10[11].n128_u64[0] = (unint64_t)v5;
  v10[11].n128_u64[1] = 0x80000000001BA7D0;
  uint64_t v24 = *(void *)(v0 + *(int *)(v18 + 28));
  if (v24)
  {
    uint64_t v25 = sub_1ABFB0();
    uint64_t v26 = v24;
  }
  else
  {
    uint64_t v25 = sub_98CBC();
  }
  sub_987D8(v25, v26);
  sub_98588();
  if (v28)
  {
    double v30 = sub_98B7C();
  }
  else
  {
    double v30 = *v27;
    id v29 = &type metadata for Double;
  }
  v10[15].n128_f64[0] = v30;
  v10[16].n128_u64[1] = (unint64_t)v29;
  v10[17].n128_u64[0] = 0x65756C61566E696DLL;
  v10[17].n128_u64[1] = 0xE800000000000000;
  sub_98588();
  if (v32)
  {
    double v34 = sub_98B8C();
  }
  else
  {
    double v34 = *v31;
    uint64_t v33 = &type metadata for Double;
  }
  sub_98C10((uint64_t)v33, v34);
  if (v4)
  {
    uint64_t v35 = type metadata accessor for WellnessTime(0);
    uint64_t v36 = (uint64_t)v4;
  }
  else
  {
    uint64_t v35 = sub_98984();
  }
  uint64_t v37 = sub_98AF8(v35, v36);
  sub_88AB4(v37, v1, &qword_201E28);
  sub_982B8(v1);
  if (v15)
  {
    swift_retain();
    swift_retain();
    sub_A068(v1, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    v10[25].n128_u64[1] = v14;
    sub_B5B0(v5);
    sub_A5C0();
    sub_984D4();
    v38();
    swift_retain();
    swift_retain();
  }
  v10[26].n128_u64[0] = 0x65756C6176;
  v10[26].n128_u64[1] = 0xE500000000000000;
  sub_98588();
  if (v40)
  {
    double v42 = sub_98EF8();
  }
  else
  {
    double v42 = *v39;
    uint64_t v41 = &type metadata for Double;
  }
  v10[27].n128_f64[0] = v42;
  v10[28].n128_u64[1] = (unint64_t)v41;
  sub_98B70();
  sub_987C4();
}

void sub_7FA84()
{
  sub_98838();
  uint64_t v4 = sub_2694(&qword_201E28);
  uint64_t v5 = sub_53D4(v4);
  __chkstk_darwin(v5);
  sub_98338();
  __chkstk_darwin(v6);
  sub_A754();
  __chkstk_darwin(v7);
  sub_A5CC();
  sub_2694(&qword_2027C8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B1070;
  sub_98D78(v8, (uint64_t)"actionAceCommandString");
  uint64_t v9 = sub_1AC1E0();
  sub_982B8(v2);
  if (v10)
  {
    sub_A068(v2, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v8 + 72) = v9;
    sub_B5B0((uint64_t *)(v8 + 48));
    sub_A5C0();
    sub_9884C();
    v11();
  }
  uint64_t v12 = sub_98318();
  uint64_t v13 = (int *)type metadata accessor for WellnessQueryingBloodPressure_DetailedResultParameters(v12);
  uint64_t v14 = sub_98CF8((uint64_t)v13);
  sub_88AB4(v14, v3, &qword_201E28);
  sub_982B8(v3);
  if (v10)
  {
    sub_A068(v3, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v8 + 120) = v9;
    sub_B5B0((uint64_t *)(v8 + 96));
    sub_A5C0();
    sub_9884C();
    v15();
  }
  sub_99050();
  *(void *)(v8 + 128) = v16;
  *(void *)(v8 + 136) = 0xEC00000078614D63;
  uint64_t v17 = (uint64_t *)(v0 + v13[6]);
  if (v17[1])
  {
    uint64_t v18 = 0;
    *(void *)(v8 + 152) = 0;
    *(void *)(v8 + 160) = 0;
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = *v17;
    uint64_t v18 = &type metadata for Double;
  }
  *(void *)(v8 + 144) = v19;
  *(void *)(v8 + 168) = v18;
  *(void *)(v8 + 176) = v16;
  *(void *)(v8 + 184) = 0xEC0000006E694D63;
  sub_98588();
  if (v21)
  {
    double v22 = 0;
    *(void *)(v8 + 200) = 0;
    *(void *)(v8 + 208) = 0;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = *v20;
    double v22 = &type metadata for Double;
  }
  *(void *)(v8 + 192) = v23;
  *(void *)(v8 + 216) = v22;
  *(void *)(v8 + 224) = 0x6E69577473726966;
  *(void *)(v8 + 232) = 0xEF657A6953776F64;
  sub_98588();
  if (v25)
  {
    double v27 = sub_98B7C();
  }
  else
  {
    double v27 = *v24;
    uint64_t v26 = &type metadata for Double;
  }
  *(double *)(v8 + 240) = v27;
  *(void *)(v8 + 264) = v26;
  *(void *)(v8 + 272) = 0xD000000000000012;
  sub_98FA8((uint64_t)"followupWindowSize");
  sub_98588();
  if (v29)
  {
    double v31 = sub_98B8C();
  }
  else
  {
    double v31 = *v28;
    double v30 = &type metadata for Double;
  }
  sub_98914((uint64_t)v30, v31);
  sub_98AAC(*(unsigned char *)(v0 + v13[10]));
  *(unsigned char *)(v8 + 384) = *(unsigned char *)(v0 + v13[11]);
  *(void *)(v8 + 408) = v32;
  *(void *)(v8 + 416) = 0xD000000000000016;
  *(void *)(v8 + 424) = 0x80000000001BAE40;
  *(unsigned char *)(v8 + 432) = *(unsigned char *)(v0 + v13[12]);
  *(void *)(v8 + 456) = v32;
  *(void *)(v8 + 464) = 0xD000000000000014;
  sub_98F38((uint64_t)"queriedCalendarRange");
  uint64_t v33 = *(void *)(v0 + v13[13]);
  if (v33)
  {
    uint64_t v34 = sub_1ABFB0();
    uint64_t v35 = v33;
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v34 = 0;
    *(void *)(v8 + 488) = 0;
    *(void *)(v8 + 496) = 0;
  }
  *(void *)(v8 + 480) = v35;
  *(void *)(v8 + 504) = v34;
  *(void *)(v8 + 512) = 0x63696C6F74737973;
  *(void *)(v8 + 520) = 0xEB0000000078614DLL;
  uint64_t v36 = (uint64_t *)(v0 + v13[14]);
  if (v36[1])
  {
    uint64_t v37 = 0;
    *(_OWORD *)(v8 + 536) = 0u;
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v38 = *v36;
    uint64_t v37 = &type metadata for Double;
  }
  *(void *)(v8 + 528) = v38;
  *(void *)(v8 + 552) = v37;
  *(void *)(v8 + 560) = 0x63696C6F74737973;
  *(void *)(v8 + 568) = 0xEB000000006E694DLL;
  sub_98588();
  if (v40)
  {
    double v42 = sub_9900C();
  }
  else
  {
    double v42 = *v39;
    uint64_t v41 = &type metadata for Double;
  }
  *(double *)(v8 + 576) = v42;
  *(void *)(v8 + 600) = v41;
  sub_98C7C();
  *(void *)(v8 + 608) = v43;
  *(void *)(v8 + 616) = 0xE400000000000000;
  uint64_t v44 = *(void *)(v0 + v13[16]);
  if (v44)
  {
    uint64_t v45 = type metadata accessor for WellnessTime(0);
    uint64_t v46 = v44;
  }
  else
  {
    uint64_t v45 = sub_990E4();
    *(_OWORD *)(v8 + 632) = 0u;
  }
  *(void *)(v8 + 624) = v46;
  *(void *)(v8 + 648) = v45;
  *(void *)(v8 + 656) = 1953066613;
  *(void *)(v8 + 664) = 0xE400000000000000;
  sub_88AB4(v0 + v13[17], v1, &qword_201E28);
  sub_982B8(v1);
  if (v10)
  {
    swift_retain();
    swift_retain();
    sub_A068(v1, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v8 + 696) = v9;
    sub_B5B0((uint64_t *)(v8 + 672));
    sub_A5C0();
    sub_984D4();
    v47();
    swift_retain();
    swift_retain();
  }
  sub_99110();
  *(void *)(v8 + 704) = v48;
  *(void *)(v8 + 712) = 0xEA0000000000657ALL;
  sub_98588();
  if (v50)
  {
    double v52 = sub_9900C();
  }
  else
  {
    double v52 = *v49;
    uint64_t v51 = &type metadata for Double;
  }
  *(double *)(v8 + 720) = v52;
  *(void *)(v8 + 744) = v51;
  sub_98B70();
  sub_987C4();
}

void sub_7FF90()
{
  sub_98838();
  uint64_t v6 = v1;
  sub_9909C();
  uint64_t v7 = sub_2694(&qword_201E28);
  uint64_t v8 = sub_53D4(v7);
  __chkstk_darwin(v8);
  sub_98778();
  __chkstk_darwin(v9);
  sub_A754();
  __chkstk_darwin(v10);
  sub_A5CC();
  sub_2694(&qword_2027C8);
  uint64_t v11 = (__n128 *)swift_allocObject();
  uint64_t v12 = sub_99034(v11, (__n128)xmmword_1B1080);
  sub_98994((uint64_t)v12, v13);
  uint64_t v14 = sub_1AC1E0();
  sub_982B8(v2);
  if (v15)
  {
    sub_A068(v2, &qword_201E28);
    sub_9876C();
  }
  else
  {
    v11[4].n128_u64[1] = v14;
    sub_B5B0(v4);
    sub_A5C0();
    sub_9884C();
    v16();
  }
  uint64_t v17 = sub_9916C(0x795461746164);
  uint64_t v18 = (int *)type metadata accessor for WellnessQueryingBloodPressure_SimpleResultParameters(v17);
  sub_88AB4(v6 + v18[5], v3, &qword_201E28);
  sub_982B8(v3);
  if (v15)
  {
    sub_A068(v3, &qword_201E28);
    sub_9876C();
  }
  else
  {
    v11[7].n128_u64[1] = v14;
    sub_B5B0((uint64_t *)&v11[6]);
    sub_A5C0();
    sub_9884C();
    v19();
  }
  sub_98CCC();
  v11[8].n128_u64[0] = v5;
  v11[8].n128_u64[1] = v20;
  unint64_t v21 = *(void *)(v6 + v18[6]);
  if (v21)
  {
    sub_1ABFB0();
    unint64_t v22 = v21;
  }
  else
  {
    unint64_t v22 = 0;
    v11[9].n128_u64[1] = 0;
    v11[10].n128_u64[0] = 0;
  }
  v11[9].n128_u64[0] = v22;
  sub_99050();
  v11[10].n128_u64[1] = v23;
  v11[11].n128_u64[0] = v24;
  v11[11].n128_u64[1] = 0xE900000000000063;
  sub_98CB0();
  if (v26)
  {
    double v27 = 0;
    v11[12].n128_u64[1] = 0;
    v11[13].n128_u64[0] = 0;
    unint64_t v28 = 0;
  }
  else
  {
    unint64_t v28 = *v25;
    double v27 = &type metadata for Double;
  }
  v11[12].n128_u64[0] = v28;
  v11[13].n128_u64[1] = (unint64_t)v27;
  v11[14].n128_u64[0] = 0x63696C6F74737973;
  v11[14].n128_u64[1] = 0xE800000000000000;
  sub_98CB0();
  if (v30)
  {
    double v31 = 0;
    v11[15].n128_u64[1] = 0;
    v11[16].n128_u64[0] = 0;
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v32 = *v29;
    double v31 = &type metadata for Double;
  }
  v11[15].n128_u64[0] = v32;
  v11[16].n128_u64[1] = (unint64_t)v31;
  v11[17].n128_u64[0] = 1701669236;
  v11[17].n128_u64[1] = 0xE400000000000000;
  unint64_t v33 = *(void *)(v6 + v18[9]);
  if (v33)
  {
    uint64_t v34 = type metadata accessor for WellnessTime(0);
    unint64_t v35 = v33;
  }
  else
  {
    unint64_t v35 = 0;
    uint64_t v34 = 0;
    v11[18].n128_u64[1] = 0;
    v11[19].n128_u64[0] = 0;
  }
  v11[18].n128_u64[0] = v35;
  v11[19].n128_u64[1] = v34;
  v11[20].n128_u64[0] = 1953066613;
  uint64_t v36 = sub_990A8();
  sub_88AB4(v36, v0, &qword_201E28);
  sub_982B8(v0);
  if (v15)
  {
    swift_retain();
    swift_retain();
    sub_A068(v0, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    v11[22].n128_u64[1] = v14;
    sub_B5B0((uint64_t *)&v11[21]);
    sub_A5C0();
    sub_984D4();
    v37();
    swift_retain();
    swift_retain();
  }
  sub_987C4();
}

void sub_802EC()
{
  sub_98838();
  sub_9909C();
  uint64_t v5 = sub_2694(&qword_201E28);
  uint64_t v6 = sub_53D4(v5);
  __chkstk_darwin(v6);
  sub_98794();
  __chkstk_darwin(v7);
  sub_98D30();
  sub_2694(&qword_2027C8);
  uint64_t v8 = (__n128 *)swift_allocObject();
  uint64_t v9 = sub_991BC(v8, (__n128)xmmword_1B1090);
  sub_989E4((uint64_t)v9, v4 | 2);
  uint64_t v10 = sub_1AC1E0();
  sub_982D8((uint64_t)v1);
  if (v11)
  {
    sub_A068((uint64_t)v1, &qword_201E28);
    sub_988B0();
  }
  else
  {
    sub_98C88();
    sub_A5C0();
    sub_98748();
    v12();
  }
  uint64_t v13 = sub_98720();
  type metadata accessor for WellnessQueryingBodyTemperatureParameters(v13);
  sub_98E94();
  if (v3)
  {
    uint64_t v14 = sub_1ABED0();
    unint64_t v15 = v3;
  }
  else
  {
    uint64_t v14 = sub_98F08();
  }
  v8[6].n128_u64[0] = v15;
  v8[7].n128_u64[1] = v14;
  v8[8].n128_u64[0] = 0x6570795461746164;
  v8[8].n128_u64[1] = 0xE800000000000000;
  sub_88AB4(v0 + v1[6], v2, &qword_201E28);
  sub_982D8(v2);
  if (v11)
  {
    swift_retain();
    sub_A068(v2, &qword_201E28);
    sub_9876C();
  }
  else
  {
    v8[10].n128_u64[1] = v10;
    sub_B5B0((uint64_t *)&v8[9]);
    sub_A5C0();
    sub_9857C();
    v16();
    swift_retain();
  }
  v8[11].n128_u64[0] = v4;
  v8[11].n128_u64[1] = 0x80000000001BA7D0;
  uint64_t v17 = *(void *)(v0 + v1[7]);
  if (v17)
  {
    uint64_t v18 = sub_1ABFB0();
    uint64_t v19 = v17;
  }
  else
  {
    uint64_t v18 = sub_98CBC();
  }
  sub_987D8(v18, v19);
  unint64_t v20 = *(void *)(v0 + v1[8]);
  if (v20)
  {
    uint64_t v21 = sub_1ABED0();
    unint64_t v22 = v20;
  }
  else
  {
    uint64_t v21 = sub_98F18();
  }
  v8[15].n128_u64[0] = v22;
  v8[16].n128_u64[1] = v21;
  v8[17].n128_u64[0] = 0x65756C61566E696DLL;
  v8[17].n128_u64[1] = 0xE800000000000000;
  unint64_t v23 = *(void *)(v0 + v1[9]);
  if (v23)
  {
    sub_1ABED0();
    unint64_t v24 = v23;
  }
  else
  {
    sub_98F28();
  }
  v8[18].n128_u64[0] = v24;
  sub_98C7C();
  v8[19].n128_u64[1] = v25;
  v8[20].n128_u64[0] = v26;
  v8[20].n128_u64[1] = 0xE400000000000000;
  unint64_t v27 = *(void *)(v0 + v1[10]);
  if (v27)
  {
    uint64_t v28 = type metadata accessor for WellnessTime(0);
    unint64_t v29 = v27;
  }
  else
  {
    uint64_t v28 = sub_98984();
  }
  v8[21].n128_u64[0] = v29;
  v8[22].n128_u64[1] = v28;
  v8[23].n128_u64[0] = 0x65756C6176;
  v8[23].n128_u64[1] = 0xE500000000000000;
  unint64_t v30 = *(void *)(v0 + v1[11]);
  if (v30)
  {
    uint64_t v31 = sub_1ABED0();
  }
  else
  {
    uint64_t v31 = 0;
    v8[24].n128_u64[1] = 0;
    v8[25].n128_u64[0] = 0;
  }
  v8[24].n128_u64[0] = v30;
  v8[25].n128_u64[1] = v31;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_98B70();
  sub_987C4();
}

void sub_805FC()
{
  sub_98838();
  uint64_t v3 = sub_2694(&qword_201E28);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_98338();
  __chkstk_darwin(v5);
  sub_98D20();
  sub_2694(&qword_2027C8);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B08D0;
  sub_989BC(v6, 0xD000000000000016);
  sub_1AC1E0();
  sub_982D8(v2);
  if (v7)
  {
    sub_A068(v2, &qword_201E28);
    sub_988B0();
  }
  else
  {
    sub_98C88();
    sub_A5C0();
    sub_98814();
    v8();
  }
  uint64_t v9 = sub_98318();
  uint64_t v10 = type metadata accessor for WellnessQueryingCardioFitnessParameters(v9);
  uint64_t v11 = sub_98CF8(v10);
  sub_88AB4(v11, v1, &qword_201E28);
  sub_982D8(v1);
  if (v7)
  {
    sub_A068(v1, &qword_201E28);
    sub_988B0();
  }
  else
  {
    sub_98FB8();
    sub_A5C0();
    sub_98748();
    v12();
  }
  sub_98F78((uint64_t)"queriedCalendarRange");
  if (v1)
  {
    uint64_t v13 = sub_1ABFB0();
    uint64_t v14 = v1;
  }
  else
  {
    uint64_t v13 = sub_98B9C();
  }
  *(void *)(v6 + 144) = v14;
  *(void *)(v6 + 168) = v13;
  *(void *)(v6 + 176) = 0x6C6576656CLL;
  *(void *)(v6 + 184) = 0xE500000000000000;
  sub_98588();
  if (v16)
  {
    uint64_t v17 = 0;
    *(void *)(v6 + 200) = 0;
    *(void *)(v6 + 208) = 0;
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = *v15;
    uint64_t v17 = &type metadata for Double;
  }
  *(void *)(v6 + 192) = v18;
  *(void *)(v6 + 216) = v17;
  *(void *)(v6 + 224) = 1701669236;
  sub_990BC();
  if (v0)
  {
    uint64_t v19 = type metadata accessor for WellnessTime(0);
  }
  else
  {
    uint64_t v19 = 0;
    *(void *)(v6 + 248) = 0;
    *(void *)(v6 + 256) = 0;
  }
  *(void *)(v6 + 240) = v0;
  *(void *)(v6 + 264) = v19;
  swift_retain();
  swift_retain();
  sub_98B70();
  sub_987C4();
}

void sub_80834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_8084C((uint64_t)type metadata accessor for WellnessQueryingCyclingDistanceParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_8084C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_A638();
  a19 = v23;
  a20 = v24;
  unint64_t v26 = v25;
  uint64_t v27 = v21;
  uint64_t v28 = sub_2694(&qword_201E28);
  uint64_t v29 = sub_53D4(v28);
  __chkstk_darwin(v29);
  sub_98778();
  __chkstk_darwin(v30);
  sub_A754();
  __chkstk_darwin(v31);
  unint64_t v33 = (uint64_t *)((char *)&a9 - v32);
  sub_2694(&qword_2027C8);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1B1080;
  *(void *)(v34 + 32) = 0xD000000000000016;
  *(void *)(v34 + 40) = 0x80000000001BACE0;
  sub_88AB4(v27, (uint64_t)v33, &qword_201E28);
  uint64_t v35 = sub_1AC1E0();
  sub_982B8((uint64_t)v33);
  if (v36)
  {
    sub_A068((uint64_t)v33, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v34 + 72) = v35;
    sub_B5B0((uint64_t *)(v34 + 48));
    sub_A5C0();
    sub_9884C();
    v37();
  }
  uint64_t v38 = sub_98B48();
  uint64_t v39 = v26(v38);
  sub_98CB0();
  if (v41)
  {
    double v42 = 0;
    *(void *)(v34 + 104) = 0;
    *(void *)(v34 + 112) = 0;
    double v43 = 0.0;
  }
  else
  {
    double v43 = *v40;
    double v42 = &type metadata for Double;
  }
  uint64_t v44 = sub_988E4((uint64_t)v42, v43);
  sub_88AB4(v44, v22, &qword_201E28);
  sub_982B8(v22);
  if (v36)
  {
    sub_A068(v22, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v34 + 168) = v35;
    sub_B5B0(v33);
    sub_A5C0();
    sub_9884C();
    v45();
  }
  sub_98CCC();
  *(void *)(v34 + 176) = 0xD000000000000014;
  *(void *)(v34 + 184) = v46;
  uint64_t v47 = *(void *)(v27 + *(int *)(v39 + 28));
  if (v47)
  {
    sub_1ABFB0();
    uint64_t v48 = v47;
  }
  else
  {
    uint64_t v48 = 0;
    *(void *)(v34 + 200) = 0;
    *(void *)(v34 + 208) = 0;
  }
  *(void *)(v34 + 192) = v48;
  sub_98C7C();
  *(void *)(v34 + 216) = v49;
  *(void *)(v34 + 224) = v50;
  *(void *)(v34 + 232) = 0xE400000000000000;
  uint64_t v51 = *(void *)(v27 + *(int *)(v39 + 32));
  if (v51)
  {
    type metadata accessor for WellnessTime(0);
    uint64_t v52 = v51;
  }
  else
  {
    uint64_t v52 = 0;
    *(void *)(v34 + 248) = 0;
    *(void *)(v34 + 256) = 0;
  }
  *(void *)(v34 + 240) = v52;
  sub_99064();
  *(void *)(v34 + 264) = v53;
  *(void *)(v34 + 272) = v54;
  *(void *)(v34 + 280) = 0xEA00000000006575;
  sub_98CB0();
  if (v56)
  {
    uint64_t v57 = 0;
    *(void *)(v34 + 296) = 0;
    *(void *)(v34 + 304) = 0;
    uint64_t v58 = 0;
  }
  else
  {
    uint64_t v58 = *v55;
    uint64_t v57 = &type metadata for Double;
  }
  *(void *)(v34 + 288) = v58;
  *(void *)(v34 + 312) = v57;
  *(void *)(v34 + 320) = 1953066613;
  uint64_t v59 = sub_990A8();
  sub_88AB4(v59, v20, &qword_201E28);
  sub_982B8(v20);
  if (v36)
  {
    swift_retain();
    swift_retain();
    sub_A068(v20, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v34 + 360) = v35;
    sub_B5B0((uint64_t *)(v34 + 336));
    sub_A5C0();
    sub_984D4();
    v60();
    swift_retain();
    swift_retain();
  }
  sub_A56C();
}

void sub_80BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_8084C((uint64_t)type metadata accessor for WellnessQueryingDistanceWalkingAndRunningParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_80BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_8084C((uint64_t)type metadata accessor for WellnessQueryingDistanceWheelchairParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_80BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_8084C((uint64_t)type metadata accessor for WellnessQueryingExerciseMinutesParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_80BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_8084C((uint64_t)type metadata accessor for WellnessQueryingFlightsClimbedParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_80C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_80C1C((uint64_t)type metadata accessor for WellnessQueryingHeartRateParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_80C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_A638();
  a19 = v23;
  a20 = v24;
  unint64_t v26 = v25;
  uint64_t v27 = sub_2694(&qword_201E28);
  uint64_t v28 = sub_53D4(v27);
  __chkstk_darwin(v28);
  sub_98338();
  __chkstk_darwin(v29);
  sub_A754();
  __chkstk_darwin(v30);
  uint64_t v32 = (uint64_t *)((char *)&a9 - v31);
  sub_2694(&qword_2027C8);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_1B10A0;
  uint64_t v34 = sub_991A8(v33, 0xD000000000000016);
  sub_88AB4(v34, (uint64_t)v32, &qword_201E28);
  uint64_t v35 = sub_1AC1E0();
  sub_982D8((uint64_t)v32);
  if (v36)
  {
    sub_A068((uint64_t)v32, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v33 + 72) = v35;
    sub_B5B0((uint64_t *)(v33 + 48));
    sub_A5C0();
    sub_98814();
    v37();
  }
  uint64_t v38 = sub_98720();
  uint64_t v39 = (int *)v26(v38);
  sub_98588();
  if (v41)
  {
    double v42 = 0;
    *(void *)(v33 + 104) = 0;
    *(void *)(v33 + 112) = 0;
    double v43 = 0.0;
  }
  else
  {
    double v43 = *v40;
    double v42 = &type metadata for Double;
  }
  sub_98B20((uint64_t)v42, v43);
  sub_88AB4(v20 + v39[6], v22, &qword_201E28);
  sub_982D8(v22);
  if (v36)
  {
    sub_A068(v22, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v33 + 168) = v35;
    sub_B5B0(v32);
    sub_A5C0();
    sub_98814();
    v44();
  }
  *(void *)(v33 + 176) = 0xD000000000000014;
  *(void *)(v33 + 184) = 0x80000000001BA7D0;
  uint64_t v45 = *(void *)(v20 + v39[7]);
  if (v45)
  {
    uint64_t v46 = sub_1ABFB0();
    uint64_t v47 = v45;
  }
  else
  {
    uint64_t v46 = sub_98CBC();
  }
  sub_987D8(v46, v47);
  sub_98588();
  if (v49)
  {
    double v51 = sub_98B7C();
  }
  else
  {
    double v51 = *v48;
    uint64_t v50 = &type metadata for Double;
  }
  *(double *)(v33 + 240) = v51;
  *(void *)(v33 + 264) = v50;
  *(void *)(v33 + 272) = 0x65756C61566E696DLL;
  *(void *)(v33 + 280) = 0xE800000000000000;
  sub_98588();
  if (v53)
  {
    double v55 = sub_98B8C();
  }
  else
  {
    double v55 = *v52;
    uint64_t v54 = &type metadata for Double;
  }
  *(double *)(v33 + 288) = v55;
  *(void *)(v33 + 312) = v54;
  *(void *)(v33 + 320) = 1701669236;
  *(void *)(v33 + 328) = 0xE400000000000000;
  uint64_t v56 = *(void *)(v20 + v39[10]);
  if (v56)
  {
    uint64_t v57 = type metadata accessor for WellnessTime(0);
    uint64_t v58 = v56;
  }
  else
  {
    uint64_t v57 = sub_98984();
  }
  *(void *)(v33 + 336) = v58;
  *(void *)(v33 + 360) = v57;
  *(void *)(v33 + 368) = 1953066613;
  *(void *)(v33 + 376) = 0xE400000000000000;
  sub_88AB4(v20 + v39[11], v21, &qword_201E28);
  sub_982D8(v21);
  if (v36)
  {
    swift_retain();
    swift_retain();
    sub_A068(v21, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v33 + 408) = v35;
    sub_B5B0((uint64_t *)(v33 + 384));
    sub_A5C0();
    sub_9857C();
    v59();
    swift_retain();
    swift_retain();
  }
  *(void *)(v33 + 416) = 0x65756C6176;
  *(void *)(v33 + 424) = 0xE500000000000000;
  sub_98588();
  if (v61)
  {
    double v63 = sub_98EF8();
  }
  else
  {
    double v63 = *v60;
    uint64_t v62 = &type metadata for Double;
  }
  *(double *)(v33 + 432) = v63;
  *(void *)(v33 + 456) = v62;
  *(void *)(v33 + 464) = 0xD000000000000010;
  sub_98F38((uint64_t)"mostRecentSample");
  int v65 = *(unsigned __int8 *)(v20 + v39[13]);
  if (v65 == 2)
  {
    os_log_type_t v66 = 0;
    *uint64_t v64 = 0;
    v64[1] = 0;
    v64[2] = 0;
  }
  else
  {
    *(unsigned char *)uint64_t v64 = v65 & 1;
    os_log_type_t v66 = &type metadata for Bool;
  }
  *(void *)(v33 + 504) = v66;
  sub_A56C();
}

void sub_8101C()
{
  sub_98838();
  uint64_t v3 = sub_2694(&qword_201E28);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_98794();
  __chkstk_darwin(v5);
  sub_98D30();
  sub_2694(&qword_2027C8);
  uint64_t v6 = (__n128 *)sub_99084();
  char v7 = sub_991BC(v6, (__n128)xmmword_1B1060);
  uint64_t v8 = sub_99138((uint64_t)v7, (uint64_t)"actionAceCommandString");
  sub_88AB4(v8, v1, &qword_201E28);
  sub_1AC1E0();
  sub_982D8(v1);
  if (v9)
  {
    sub_A068(v1, &qword_201E28);
    sub_988B0();
  }
  else
  {
    sub_98C88();
    sub_A5C0();
    sub_98748();
    v10();
  }
  uint64_t v11 = sub_98318();
  uint64_t v12 = (int *)type metadata accessor for WellnessQueryingHeightParameters(v11);
  uint64_t v13 = sub_98CF8((uint64_t)v12);
  sub_88AB4(v13, v2, &qword_201E28);
  sub_982D8(v2);
  if (v9)
  {
    sub_A068(v2, &qword_201E28);
    sub_988B0();
  }
  else
  {
    sub_98FB8();
    sub_A5C0();
    sub_98814();
    v14();
  }
  v6[8].n128_u64[0] = 0xD000000000000016;
  v6[8].n128_u64[1] = 0x80000000001BAD00;
  v6[9].n128_u8[0] = *(unsigned char *)(v0 + v12[6]);
  v6[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v6[11].n128_u64[0] = 0xD000000000000017;
  v6[11].n128_u64[1] = 0x80000000001BAF20;
  v6[12].n128_u8[0] = *(unsigned char *)(v0 + v12[7]);
  v6[13].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v6[14].n128_u64[0] = 0x746867696568;
  v6[14].n128_u64[1] = 0xE600000000000000;
  unint64_t v15 = *(void *)(v0 + v12[8]);
  if (v15)
  {
    uint64_t v16 = sub_1ABF10();
    unint64_t v17 = v15;
  }
  else
  {
    uint64_t v16 = sub_98F18();
  }
  v6[15].n128_u64[0] = v17;
  v6[16].n128_u64[1] = v16;
  v6[17].n128_u64[0] = 0x686769654878616DLL;
  v6[17].n128_u64[1] = 0xE900000000000074;
  unint64_t v18 = *(void *)(v0 + v12[9]);
  if (v18)
  {
    uint64_t v19 = sub_1ABF10();
    unint64_t v20 = v18;
  }
  else
  {
    uint64_t v19 = sub_98F28();
  }
  v6[18].n128_u64[0] = v20;
  v6[19].n128_u64[1] = v19;
  v6[20].n128_u64[0] = 0x68676965486E696DLL;
  v6[20].n128_u64[1] = 0xE900000000000074;
  unint64_t v21 = *(void *)(v0 + v12[10]);
  if (v21)
  {
    uint64_t v22 = sub_1ABF10();
    unint64_t v23 = v21;
  }
  else
  {
    uint64_t v22 = sub_98984();
  }
  v6[21].n128_u64[0] = v23;
  v6[22].n128_u64[1] = v22;
  v6[23].n128_u64[0] = 0xD000000000000014;
  sub_99124((uint64_t)"queriedCalendarRange");
  unint64_t v25 = *(void *)(v0 + v24);
  if (v25)
  {
    sub_1ABFB0();
    unint64_t v26 = v25;
  }
  else
  {
    sub_990E4();
    v6[24].n128_u64[1] = 0;
    v6[25].n128_u64[0] = 0;
  }
  v6[24].n128_u64[0] = v26;
  sub_98C7C();
  v6[25].n128_u64[1] = v27;
  v6[26].n128_u64[0] = v28;
  v6[26].n128_u64[1] = 0xE400000000000000;
  unint64_t v29 = *(void *)(v0 + v12[12]);
  if (v29)
  {
    uint64_t v30 = type metadata accessor for WellnessTime(0);
  }
  else
  {
    uint64_t v30 = 0;
    v6[27].n128_u64[1] = 0;
    v6[28].n128_u64[0] = 0;
  }
  v6[27].n128_u64[0] = v29;
  v6[28].n128_u64[1] = v30;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_98B70();
  sub_987C4();
}

void sub_81348()
{
  sub_98838();
  uint64_t v2 = sub_2694(&qword_201E28);
  uint64_t v3 = sub_53D4(v2);
  __chkstk_darwin(v3);
  sub_98338();
  __chkstk_darwin(v4);
  sub_98D20();
  sub_2694(&qword_2027C8);
  uint64_t v5 = (__n128 *)swift_allocObject();
  uint64_t v6 = sub_991BC(v5, (__n128)xmmword_1B08D0);
  sub_989BC((uint64_t)v6, 0xD000000000000016);
  sub_1AC1E0();
  sub_982D8(v1);
  if (v7)
  {
    sub_A068(v1, &qword_201E28);
    sub_988B0();
  }
  else
  {
    sub_98C88();
    sub_A5C0();
    sub_98814();
    v8();
  }
  uint64_t v9 = sub_98318();
  uint64_t v10 = type metadata accessor for WellnessQueryingMenstruationEndParameters(v9);
  uint64_t v11 = sub_98CF8(v10);
  sub_88AB4(v11, v0, &qword_201E28);
  sub_982D8(v0);
  if (v7)
  {
    sub_A068(v0, &qword_201E28);
    sub_988B0();
  }
  else
  {
    sub_98FB8();
    sub_A5C0();
    sub_98748();
    v12();
  }
  sub_98DB8();
  if (v0)
  {
    uint64_t v13 = sub_1AC100();
  }
  else
  {
    uint64_t v13 = 0;
    v5[9].n128_u64[1] = 0;
    v5[10].n128_u64[0] = 0;
  }
  v5[9].n128_u64[0] = v0;
  v5[10].n128_u64[1] = v13;
  v5[11].n128_u64[0] = 0xD000000000000017;
  sub_98F48((uint64_t)"executeSashGroupOnWatch");
  v5[12].n128_u8[0] = v14;
  v5[13].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[14].n128_u64[0] = 0xD000000000000013;
  sub_98F60((uint64_t)"isInPredictedWindow");
  v5[16].n128_u64[1] = v15;
  v5[15].n128_u8[0] = v16;
  swift_retain();
  sub_98B70();
  sub_987C4();
}

void sub_81530()
{
  sub_98838();
  uint64_t v3 = sub_2694(&qword_201E28);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_98338();
  __chkstk_darwin(v5);
  sub_98D20();
  sub_2694(&qword_2027C8);
  uint64_t v6 = (__n128 *)swift_allocObject();
  char v7 = sub_991BC(v6, (__n128)xmmword_1B10B0);
  uint64_t v8 = sub_99138((uint64_t)v7, (uint64_t)"actionAceCommandString");
  sub_88AB4(v8, v2, &qword_201E28);
  sub_1AC1E0();
  sub_982D8(v2);
  if (v9)
  {
    sub_A068(v2, &qword_201E28);
    sub_988B0();
  }
  else
  {
    sub_98C88();
    sub_A5C0();
    sub_98814();
    v10();
  }
  uint64_t v11 = sub_98318();
  uint64_t started = type metadata accessor for WellnessQueryingMenstruationStartParameters(v11);
  uint64_t v13 = sub_98CF8(started);
  sub_88AB4(v13, v1, &qword_201E28);
  sub_982D8(v1);
  if (v9)
  {
    sub_A068(v1, &qword_201E28);
    sub_988B0();
  }
  else
  {
    sub_98FB8();
    sub_A5C0();
    sub_98748();
    v14();
  }
  sub_98DB8();
  if (v1)
  {
    uint64_t v15 = sub_1AC100();
  }
  else
  {
    uint64_t v15 = 0;
    v6[9].n128_u64[1] = 0;
    v6[10].n128_u64[0] = 0;
  }
  v6[9].n128_u64[0] = v1;
  v6[10].n128_u64[1] = v15;
  v6[11].n128_u64[0] = 0xD000000000000017;
  sub_98F48((uint64_t)"executeSashGroupOnWatch");
  v6[12].n128_u8[0] = v16;
  v6[13].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v6[14].n128_u64[0] = 0xD000000000000021;
  sub_98F60((uint64_t)"isInMostLikelyDaysPredictedWindow");
  v6[15].n128_u8[0] = v17;
  v6[16].n128_u64[1] = v18;
  v6[17].n128_u64[0] = 0xD000000000000022;
  sub_98FA8((uint64_t)"isInTrailingAllDaysPredictedWindow");
  unsigned __int8 v19 = *(unsigned char *)(v0 + *(int *)(started + 36));
  v6[19].n128_u64[1] = v20;
  v6[18].n128_u8[0] = v19;
  swift_retain();
  sub_98B70();
  sub_987C4();
}

void sub_81744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_8084C((uint64_t)type metadata accessor for WellnessQueryingPushesParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_8175C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_80C1C((uint64_t)type metadata accessor for WellnessQueryingRespiratoryRateParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_81774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_8084C((uint64_t)type metadata accessor for WellnessQueryingRestingEnergyParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_8178C()
{
  sub_98838();
  uint64_t v4 = v1;
  uint64_t v5 = sub_2694(&qword_201E28);
  uint64_t v6 = sub_53D4(v5);
  __chkstk_darwin(v6);
  sub_98778();
  __chkstk_darwin(v7);
  sub_A754();
  __chkstk_darwin(v8);
  sub_A5CC();
  sub_2694(&qword_2027C8);
  uint64_t v9 = sub_99084();
  *(_OWORD *)(v9 + 16) = xmmword_1B1060;
  sub_98994(v9, 0xD000000000000016);
  uint64_t v10 = sub_1AC1E0();
  sub_982B8(v2);
  if (v11)
  {
    sub_A068(v2, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v9 + 72) = v10;
    sub_B5B0((uint64_t *)(v9 + 48));
    sub_A5C0();
    sub_9884C();
    v12();
  }
  uint64_t v13 = sub_9916C(0x797461746164);
  unsigned __int8 v14 = (int *)type metadata accessor for WellnessQueryingRingsParameters(v13);
  sub_88AB4(v4 + v14[5], v3, &qword_201E28);
  sub_982B8(v3);
  if (v11)
  {
    sub_A068(v3, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v9 + 120) = v10;
    sub_B5B0((uint64_t *)(v9 + 96));
    sub_A5C0();
    sub_9884C();
    v15();
  }
  *(void *)(v9 + 128) = 1702125924;
  *(void *)(v9 + 136) = 0xE400000000000000;
  uint64_t v16 = *(void *)(v4 + v14[6]);
  if (v16)
  {
    uint64_t v17 = sub_1AC100();
    uint64_t v18 = v16;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v17 = 0;
    *(void *)(v9 + 152) = 0;
    *(void *)(v9 + 160) = 0;
  }
  *(void *)(v9 + 144) = v18;
  *(void *)(v9 + 168) = v17;
  *(void *)(v9 + 176) = 0xD000000000000017;
  sub_98CCC();
  *(void *)(v9 + 184) = v19;
  *(unsigned char *)(v9 + 192) = *(unsigned char *)(v4 + v14[7]);
  *(void *)(v9 + 216) = &type metadata for Bool;
  *(void *)(v9 + 224) = 0x756C61566C616F67;
  *(void *)(v9 + 232) = 0xE900000000000065;
  unint64_t v20 = (uint64_t *)(v4 + v14[8]);
  if (v20[1])
  {
    unint64_t v21 = 0;
    *(void *)(v9 + 248) = 0;
    *(void *)(v9 + 256) = 0;
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = *v20;
    unint64_t v21 = &type metadata for Double;
  }
  *(void *)(v9 + 240) = v22;
  *(void *)(v9 + 264) = v21;
  strcpy((char *)(v9 + 272), "isRingClosed");
  *(unsigned char *)(v9 + 285) = 0;
  *(_WORD *)(v9 + 286) = -5120;
  *(unsigned char *)(v9 + 288) = *(unsigned char *)(v4 + v14[9]);
  *(void *)(v9 + 312) = &type metadata for Bool;
  *(void *)(v9 + 320) = 0xD000000000000010;
  *(void *)(v9 + 328) = 0x80000000001BA740;
  *(unsigned char *)(v9 + 336) = *(unsigned char *)(v4 + v14[10]);
  *(void *)(v9 + 360) = &type metadata for Bool;
  *(void *)(v9 + 368) = 0x6C61566C61746F74;
  *(void *)(v9 + 376) = 0xEA00000000006575;
  sub_98CB0();
  if (v24)
  {
    unint64_t v25 = 0;
    *(void *)(v9 + 392) = 0;
    *(void *)(v9 + 400) = 0;
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = *v23;
    unint64_t v25 = &type metadata for Double;
  }
  *(void *)(v9 + 384) = v26;
  *(void *)(v9 + 408) = v25;
  *(void *)(v9 + 416) = 1953066613;
  *(void *)(v9 + 424) = 0xE400000000000000;
  sub_88AB4(v4 + v14[12], v0, &qword_201E28);
  sub_982B8(v0);
  if (v11)
  {
    swift_retain();
    sub_A068(v0, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v9 + 456) = v10;
    sub_B5B0((uint64_t *)(v9 + 432));
    sub_A5C0();
    sub_984D4();
    v27();
    swift_retain();
  }
  sub_987C4();
}

void sub_81B3C()
{
  sub_A638();
  uint64_t v5 = sub_2694(&qword_201E28);
  uint64_t v6 = sub_53D4(v5);
  __chkstk_darwin(v6);
  sub_98794();
  __chkstk_darwin(v7);
  sub_98D30();
  sub_2694(&qword_2027C8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B10C0;
  sub_989E4(v8, 0xD000000000000016);
  uint64_t v9 = sub_1AC1E0();
  sub_982D8((uint64_t)v1);
  if (v10)
  {
    sub_A068((uint64_t)v1, &qword_201E28);
    sub_988B0();
  }
  else
  {
    sub_98C88();
    sub_A5C0();
    sub_98748();
    v11();
  }
  uint64_t v12 = sub_99194(0xD000000000000015);
  type metadata accessor for WellnessQueryingSleep_DetailedResultParameters(v12);
  sub_98E94();
  if (v8 == -48)
  {
    uint64_t v13 = sub_98F08();
  }
  else
  {
    uint64_t v13 = sub_1AC160();
    uint64_t v14 = v8 + 48;
  }
  *(void *)(v8 + 96) = v14;
  *(void *)(v8 + 120) = v13;
  *(void *)(v8 + 128) = 0xD000000000000014;
  sub_98F90((uint64_t)"averageInBedDuration");
  if (v3)
  {
    uint64_t v15 = sub_1AC160();
    uint64_t v16 = v3;
  }
  else
  {
    uint64_t v15 = sub_98B9C();
  }
  uint64_t v17 = sub_98954(v15, v16);
  sub_88AB4(v17, v2, &qword_201E28);
  sub_982D8(v2);
  if (v10)
  {
    swift_retain();
    swift_retain();
    sub_A068(v2, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v8 + 216) = v9;
    sub_B5B0(v4);
    sub_A5C0();
    sub_9857C();
    v18();
    swift_retain();
    swift_retain();
  }
  *(void *)(v8 + 224) = 0x6E69577473726966;
  *(void *)(v8 + 232) = 0xEF657A6953776F64;
  sub_98588();
  if (v20)
  {
    double v22 = sub_98B7C();
  }
  else
  {
    double v22 = *v19;
    unint64_t v21 = &type metadata for Double;
  }
  *(double *)(v8 + 240) = v22;
  *(void *)(v8 + 264) = v21;
  *(void *)(v8 + 272) = 0xD000000000000012;
  sub_98FA8((uint64_t)"followupWindowSize");
  sub_98588();
  if (v24)
  {
    double v26 = sub_98B8C();
  }
  else
  {
    double v26 = *v23;
    unint64_t v25 = &type metadata for Double;
  }
  sub_98914((uint64_t)v25, v26);
  sub_98AAC(*(unsigned char *)(v0 + v1[10]));
  *(unsigned char *)(v8 + 384) = *(unsigned char *)(v0 + v1[11]);
  *(void *)(v8 + 408) = v27;
  *(void *)(v8 + 416) = 0xD000000000000016;
  *(void *)(v8 + 424) = 0x80000000001BAE40;
  *(unsigned char *)(v8 + 432) = *(unsigned char *)(v0 + v1[12]);
  *(void *)(v8 + 456) = v27;
  *(void *)(v8 + 464) = 0xD000000000000018;
  sub_98F38((uint64_t)"percentDaysWithSleepData");
  sub_98588();
  if (v29)
  {
    uint64_t v30 = 0;
    *(void *)(v8 + 488) = 0;
    *(void *)(v8 + 496) = 0;
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v31 = *v28;
    uint64_t v30 = &type metadata for Double;
  }
  *(void *)(v8 + 480) = v31;
  *(void *)(v8 + 504) = v30;
  *(void *)(v8 + 512) = 0xD000000000000014;
  sub_98CCC();
  *(void *)(v8 + 520) = v32;
  uint64_t v33 = *(void *)(v0 + v1[14]);
  if (v33)
  {
    uint64_t v34 = sub_1ABFB0();
    uint64_t v35 = v33;
  }
  else
  {
    uint64_t v34 = sub_990E4();
    *(_OWORD *)(v8 + 536) = 0u;
  }
  *(void *)(v8 + 528) = v35;
  *(void *)(v8 + 552) = v34;
  sub_98C7C();
  *(void *)(v8 + 560) = v36;
  *(void *)(v8 + 568) = 0xE400000000000000;
  uint64_t v37 = *(void *)(v0 + v1[15]);
  if (v37)
  {
    uint64_t v38 = type metadata accessor for WellnessTime(0);
    uint64_t v39 = v37;
  }
  else
  {
    uint64_t v38 = sub_990E4();
    *(_OWORD *)(v8 + 584) = 0u;
  }
  *(void *)(v8 + 576) = v39;
  *(void *)(v8 + 600) = v38;
  sub_99110();
  *(void *)(v8 + 608) = v40;
  *(void *)(v8 + 616) = 0xEA0000000000657ALL;
  sub_98588();
  if (v42)
  {
    double v44 = sub_9900C();
  }
  else
  {
    double v44 = *v41;
    double v43 = &type metadata for Double;
  }
  *(double *)(v8 + 624) = v44;
  *(void *)(v8 + 648) = v43;
  swift_retain();
  swift_retain();
  sub_A56C();
}

void sub_81F28()
{
  sub_A638();
  uint64_t v5 = sub_2694(&qword_201E28);
  uint64_t v6 = sub_53D4(v5);
  __chkstk_darwin(v6);
  sub_98794();
  __chkstk_darwin(v7);
  sub_98D30();
  sub_2694(&qword_2027C8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B1090;
  sub_989E4(v8, 0xD000000000000016);
  uint64_t v9 = sub_1AC1E0();
  sub_982D8((uint64_t)v1);
  if (v10)
  {
    sub_A068((uint64_t)v1, &qword_201E28);
    sub_988B0();
  }
  else
  {
    sub_98C88();
    sub_A5C0();
    sub_98748();
    v11();
  }
  uint64_t v12 = sub_99194(0xD000000000000015);
  type metadata accessor for WellnessQueryingSleep_SimpleResultParameters(v12);
  sub_98E94();
  if (v8 == -48)
  {
    uint64_t v13 = sub_98F08();
  }
  else
  {
    uint64_t v13 = sub_1AC160();
    uint64_t v14 = v8 + 48;
  }
  *(void *)(v8 + 96) = v14;
  *(void *)(v8 + 120) = v13;
  *(void *)(v8 + 128) = 0xD000000000000014;
  sub_98F90((uint64_t)"averageInBedDuration");
  if (v3)
  {
    uint64_t v15 = sub_1AC160();
    uint64_t v16 = v3;
  }
  else
  {
    uint64_t v15 = sub_98B9C();
  }
  uint64_t v17 = sub_98954(v15, v16);
  sub_88AB4(v17, v2, &qword_201E28);
  sub_982D8(v2);
  if (v10)
  {
    swift_retain();
    swift_retain();
    sub_A068(v2, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v8 + 216) = v9;
    sub_B5B0(v4);
    sub_A5C0();
    sub_9857C();
    v18();
    swift_retain();
    swift_retain();
  }
  sub_98CCC();
  *(void *)(v8 + 224) = 0xD000000000000014;
  *(void *)(v8 + 232) = v19;
  uint64_t v20 = *(void *)(v0 + v1[8]);
  if (v20)
  {
    sub_1ABFB0();
    uint64_t v21 = v20;
  }
  else
  {
    sub_98F18();
  }
  *(void *)(v8 + 240) = v21;
  sub_98C7C();
  *(void *)(v8 + 264) = v22;
  *(void *)(v8 + 272) = v23;
  *(void *)(v8 + 280) = 0xE400000000000000;
  uint64_t v24 = *(void *)(v0 + v1[9]);
  if (v24)
  {
    uint64_t v25 = type metadata accessor for WellnessTime(0);
    uint64_t v26 = v24;
  }
  else
  {
    uint64_t v25 = sub_98F28();
  }
  *(void *)(v8 + 288) = v26;
  *(void *)(v8 + 312) = v25;
  *(void *)(v8 + 320) = 0xD000000000000013;
  sub_98CCC();
  *(void *)(v8 + 328) = v27;
  uint64_t v28 = *(void *)(v0 + v1[10]);
  if (v28)
  {
    uint64_t v29 = sub_1AC160();
    uint64_t v30 = v28;
  }
  else
  {
    uint64_t v29 = sub_98984();
  }
  *(void *)(v8 + 336) = v30;
  *(void *)(v8 + 360) = v29;
  *(void *)(v8 + 368) = 0xD000000000000012;
  sub_99124((uint64_t)"totalInBedDuration");
  uint64_t v32 = *(void *)(v0 + v31);
  if (v32)
  {
    uint64_t v33 = sub_1AC160();
  }
  else
  {
    uint64_t v33 = 0;
    *(void *)(v8 + 392) = 0;
    *(void *)(v8 + 400) = 0;
  }
  *(void *)(v8 + 384) = v32;
  *(void *)(v8 + 408) = v33;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_A56C();
}

void sub_82228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_8084C((uint64_t)type metadata accessor for WellnessQueryingStandMinutesParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_82240()
{
  sub_A638();
  uint64_t v6 = v1;
  sub_9909C();
  uint64_t v7 = sub_2694(&qword_201E28);
  uint64_t v8 = sub_53D4(v7);
  __chkstk_darwin(v8);
  sub_98778();
  __chkstk_darwin(v9);
  sub_A754();
  __chkstk_darwin(v10);
  sub_A5CC();
  sub_2694(&qword_2027C8);
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = sub_99034((__n128 *)v11, (__n128)xmmword_1B1090);
  sub_98994((uint64_t)v12, v13);
  uint64_t v14 = sub_1AC1E0();
  sub_982B8(v2);
  if (v15)
  {
    sub_A068(v2, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v11 + 72) = v14;
    sub_B5B0(v4);
    sub_A5C0();
    sub_9884C();
    v16();
  }
  uint64_t v17 = sub_98B48();
  uint64_t v18 = (int *)type metadata accessor for WellnessQueryingStepsParameters(v17);
  sub_98CB0();
  if (v20)
  {
    uint64_t v21 = 0;
    *(void *)(v11 + 104) = 0;
    *(void *)(v11 + 112) = 0;
    double v22 = 0.0;
  }
  else
  {
    double v22 = *v19;
    uint64_t v21 = &type metadata for Double;
  }
  uint64_t v23 = sub_988E4((uint64_t)v21, v22);
  sub_88AB4(v23, v3, &qword_201E28);
  sub_982B8(v3);
  if (v15)
  {
    sub_A068(v3, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v11 + 168) = v14;
    sub_B5B0(v4);
    sub_A5C0();
    sub_9884C();
    v24();
  }
  sub_98CCC();
  *(void *)(v11 + 176) = v5;
  *(void *)(v11 + 184) = v25;
  uint64_t v26 = *(void *)(v6 + v18[7]);
  if (v26)
  {
    uint64_t v27 = sub_1ABFB0();
    uint64_t v28 = v26;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v27 = 0;
    *(void *)(v11 + 200) = 0;
    *(void *)(v11 + 208) = 0;
  }
  *(void *)(v11 + 192) = v28;
  *(void *)(v11 + 216) = v27;
  strcpy((char *)(v11 + 224), "lastQueryDate");
  *(_WORD *)(v11 + 238) = -4864;
  uint64_t v29 = *(void *)(v6 + v18[8]);
  if (v29)
  {
    type metadata accessor for WellnessTime(0);
    uint64_t v30 = v29;
  }
  else
  {
    uint64_t v30 = 0;
    *(void *)(v11 + 248) = 0;
    *(void *)(v11 + 256) = 0;
  }
  *(void *)(v11 + 240) = v30;
  sub_98C7C();
  *(void *)(v11 + 264) = v31;
  *(void *)(v11 + 272) = v32;
  *(void *)(v11 + 280) = 0xE400000000000000;
  uint64_t v33 = *(void *)(v6 + v18[9]);
  if (v33)
  {
    type metadata accessor for WellnessTime(0);
    uint64_t v34 = v33;
  }
  else
  {
    uint64_t v34 = 0;
    *(void *)(v11 + 296) = 0;
    *(void *)(v11 + 304) = 0;
  }
  *(void *)(v11 + 288) = v34;
  sub_99064();
  *(void *)(v11 + 312) = v35;
  *(void *)(v11 + 320) = v36;
  *(void *)(v11 + 328) = 0xEA00000000006575;
  sub_98CB0();
  if (v38)
  {
    uint64_t v39 = 0;
    *(void *)(v11 + 344) = 0;
    *(void *)(v11 + 352) = 0;
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = *v37;
    uint64_t v39 = &type metadata for Double;
  }
  *(void *)(v11 + 336) = v40;
  *(void *)(v11 + 360) = v39;
  *(void *)(v11 + 368) = 1953066613;
  *(void *)(v11 + 376) = 0xE400000000000000;
  sub_88AB4(v6 + v18[11], v0, &qword_201E28);
  sub_982B8(v0);
  if (v15)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_A068(v0, &qword_201E28);
    *(_OWORD *)(v11 + 384) = 0u;
    *(_OWORD *)(v11 + 400) = 0u;
  }
  else
  {
    *(void *)(v11 + 408) = v14;
    sub_B5B0((uint64_t *)(v11 + 384));
    sub_A5C0();
    sub_984D4();
    v41();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  sub_A56C();
}

void sub_825D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_80C1C((uint64_t)type metadata accessor for WellnessQueryingWalkingHeartRateAverageParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_825F0()
{
  sub_98838();
  uint64_t v4 = sub_2694(&qword_201E28);
  uint64_t v5 = sub_53D4(v4);
  __chkstk_darwin(v5);
  sub_98338();
  __chkstk_darwin(v6);
  sub_A754();
  __chkstk_darwin(v7);
  sub_A5CC();
  sub_2694(&qword_2027C8);
  uint64_t v8 = sub_99084();
  *(_OWORD *)(v8 + 16) = xmmword_1B1060;
  sub_98D78(v8, (uint64_t)"actionAceCommandString");
  uint64_t v9 = sub_1AC1E0();
  sub_982B8(v2);
  if (v10)
  {
    sub_A068(v2, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v8 + 72) = v9;
    sub_B5B0((uint64_t *)(v8 + 48));
    sub_A5C0();
    sub_9884C();
    v11();
  }
  uint64_t v12 = sub_98318();
  uint64_t v13 = type metadata accessor for WellnessQueryingWeightParameters(v12);
  uint64_t v14 = sub_98CF8(v13);
  sub_88AB4(v14, v3, &qword_201E28);
  sub_982B8(v3);
  if (v10)
  {
    sub_A068(v3, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v8 + 120) = v9;
    sub_B5B0((uint64_t *)(v8 + 96));
    sub_A5C0();
    sub_9884C();
    v15();
  }
  *(void *)(v8 + 128) = 0xD000000000000014;
  *(void *)(v8 + 136) = 0x80000000001BA7D0;
  uint64_t v16 = *(void *)(v0 + *(int *)(v13 + 24));
  if (v16)
  {
    uint64_t v17 = sub_1ABFB0();
    uint64_t v18 = v16;
  }
  else
  {
    uint64_t v17 = sub_98B9C();
  }
  *(void *)(v8 + 144) = v18;
  *(void *)(v8 + 168) = v17;
  *(void *)(v8 + 176) = 0xD000000000000016;
  *(void *)(v8 + 184) = 0x80000000001BAD00;
  *(unsigned char *)(v8 + 192) = *(unsigned char *)(v0 + *(int *)(v13 + 28));
  *(void *)(v8 + 216) = &type metadata for Bool;
  *(void *)(v8 + 224) = 0x65756C615678616DLL;
  *(void *)(v8 + 232) = 0xE800000000000000;
  sub_98588();
  if (v20)
  {
    double v22 = sub_98B7C();
  }
  else
  {
    double v22 = *v19;
    uint64_t v21 = &type metadata for Double;
  }
  *(double *)(v8 + 240) = v22;
  *(void *)(v8 + 264) = v21;
  *(void *)(v8 + 272) = 0x65756C61566E696DLL;
  *(void *)(v8 + 280) = 0xE800000000000000;
  sub_98588();
  if (v24)
  {
    double v26 = sub_98B8C();
  }
  else
  {
    double v26 = *v23;
    uint64_t v25 = &type metadata for Double;
  }
  sub_98C10((uint64_t)v25, v26);
  if (v8 == -96)
  {
    uint64_t v27 = sub_98984();
  }
  else
  {
    uint64_t v27 = type metadata accessor for WellnessTime(0);
    uint64_t v28 = v8 + 96;
  }
  uint64_t v29 = sub_98AF8(v27, v28);
  sub_88AB4(v29, v1, &qword_201E28);
  sub_982B8(v1);
  if (v10)
  {
    swift_retain();
    swift_retain();
    sub_A068(v1, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v8 + 408) = v9;
    sub_B5B0((uint64_t *)0xD000000000000016);
    sub_A5C0();
    sub_984D4();
    v30();
    swift_retain();
    swift_retain();
  }
  *(void *)(v8 + 416) = 0x65756C6176;
  *(void *)(v8 + 424) = 0xE500000000000000;
  sub_98588();
  if (v32)
  {
    double v34 = sub_98EF8();
  }
  else
  {
    double v34 = *v31;
    uint64_t v33 = &type metadata for Double;
  }
  *(double *)(v8 + 432) = v34;
  *(void *)(v8 + 456) = v33;
  sub_98B70();
  sub_987C4();
}

uint64_t sub_8295C()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t active = type metadata accessor for WellnessQueryingActiveEnergyParameters(v3);
  *(void *)(v0 + 40) = active;
  sub_53D4(active);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "82A24: call analysis failed (funcsize=50)"

uint64_t sub_82AAC()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_82BB8()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingActiveEnergyParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_82C30()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingActiveEnergyParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_82CA8()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingBasalBodyTemperatureParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_82D24()
{
  sub_47D74();
  sub_E588();
  uint64_t v3 = sub_983D8();
  sub_9847C(v3);
  *(void *)(v0 + v4) = 0;
  *(void *)(v0 + *(int *)(v1 + 32)) = 0;
  uint64_t v5 = sub_984E4();
  v2(v5);
  sub_7F4DC();
  sub_984F0(v6);
  uint64_t v7 = sub_50774();
  uint64_t v8 = (void *)sub_984C8(v7);
  *uint64_t v8 = v9;
  v8[1] = sub_82DF4;
  sub_988A0(37);
  sub_47BE4();
  return v13(v10, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_82DF4()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_82F00()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingBasalBodyTemperatureParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_82F78()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingBasalBodyTemperatureParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_82FF0()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingBloodGlucoseParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "830B8: call analysis failed (funcsize=50)"

uint64_t sub_83140()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_8324C()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingBloodGlucoseParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_832C4()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingBloodGlucoseParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_8333C()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingBloodOxygenParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_833B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v13 = sub_98BE4();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v10, 1, 1, v13);
  uint64_t v14 = v10 + v12[5];
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v10 + v12[6], 1, 1, v13);
  *(void *)(v10 + v12[7]) = 0;
  uint64_t v15 = v10 + v12[8];
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = v10 + v12[9];
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  *(void *)(v10 + v12[10]) = 0;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v10 + v12[11], 1, 1, v13);
  uint64_t v17 = v10 + v12[12];
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v18 = sub_984E4();
  v11(v18);
  sub_7F734();
  sub_984F0(v19);
  uint64_t v20 = sub_9826C();
  uint64_t v21 = (void *)sub_984C8(v20);
  *uint64_t v21 = v22;
  v21[1] = sub_8350C;
  sub_50838();
  sub_98354(28);
  sub_987B0();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

uint64_t sub_8350C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_83618()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingBloodOxygenParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_83690()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingBloodOxygenParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_83708()
{
  sub_A364();
  uint64_t v6 = sub_98A0C(v1, v2, v3, v4, v5);
  uint64_t v7 = type metadata accessor for WellnessQueryingBloodPressure_DetailedResultParameters(v6);
  *(void *)(v0 + 40) = v7;
  sub_53D4(v7);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_83784()
{
  sub_4712C();
  char v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  char v3 = *(void (**)(uint64_t))(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 90);
  char v5 = *(unsigned char *)(v0 + 89);
  char v6 = *(unsigned char *)(v0 + 88);
  uint64_t v7 = sub_1AC1E0();
  sub_98C34();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[17], 1, 1, v7);
  sub_98944(v2[6]);
  sub_98944(v2[7]);
  uint64_t v8 = v1 + v2[8];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = v1 + v2[9];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(v1 + v2[10]) = v6;
  *(unsigned char *)(v1 + v2[11]) = v5;
  *(unsigned char *)(v1 + v2[12]) = v4;
  *(void *)(v1 + v2[13]) = 0;
  sub_98944(v2[14]);
  sub_98944(v2[15]);
  *(void *)(v1 + v2[16]) = 0;
  uint64_t v10 = v1 + v2[18];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = sub_984E4();
  v3(v11);
  sub_7FA84();
  sub_984F0(v12);
  uint64_t v13 = sub_50774();
  uint64_t v14 = (void *)sub_984C8(v13);
  *uint64_t v14 = v15;
  v14[1] = sub_83908;
  sub_50838();
  unint64_t v16 = sub_988A0(45);
  return v17(v16);
}

uint64_t sub_83908()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *char v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_83A14()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingBloodPressure_DetailedResultParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_83A8C()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingBloodPressure_DetailedResultParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_83B04()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingBloodPressure_SimpleResultParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_83B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v13 = sub_983D8();
  sub_986C0(v13);
  sub_98944(v14);
  *(void *)(v10 + *(int *)(v11 + 36)) = 0;
  uint64_t v15 = sub_9828C(*(int *)(v11 + 40));
  v12(v15);
  sub_7FF90();
  sub_984F0(v16);
  uint64_t v17 = sub_9826C();
  uint64_t v18 = (void *)sub_984C8(v17);
  *uint64_t v18 = v19;
  v18[1] = sub_83C4C;
  sub_50838();
  sub_98354(43);
  sub_987B0();
  return v23(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10);
}

uint64_t sub_83C4C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_83D58()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingBloodPressure_SimpleResultParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_83DD0()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingBloodPressure_SimpleResultParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_83E48()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingBodyTemperatureParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_83EC4()
{
  sub_47D74();
  sub_E588();
  uint64_t v3 = sub_983D8();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 1, 1, v3);
  *(void *)(v0 + *(int *)(v1 + 20)) = 0;
  sub_98A28();
  *(void *)(v0 + v4) = 0;
  *(void *)(v0 + *(int *)(v1 + 44)) = 0;
  uint64_t v5 = sub_984E4();
  v2(v5);
  sub_802EC();
  sub_984F0(v6);
  uint64_t v7 = sub_50774();
  uint64_t v8 = (void *)sub_984C8(v7);
  *uint64_t v8 = v9;
  v8[1] = sub_83FB4;
  sub_988A0(32);
  sub_47BE4();
  return v13(v10, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_83FB4()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_840C0()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingBodyTemperatureParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_84138()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingBodyTemperatureParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_841B0()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingCardioFitnessParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_8422C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v12 = sub_983D8();
  sub_986C0(v12);
  *(void *)(v10 + v13) = 0;
  uint64_t v14 = sub_984E4();
  v11(v14);
  sub_805FC();
  sub_984F0(v15);
  uint64_t v16 = sub_9826C();
  uint64_t v17 = (void *)sub_984C8(v16);
  *uint64_t v17 = v18;
  v17[1] = sub_842F4;
  sub_98354(30);
  sub_987B0();
  return v22(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10);
}

uint64_t sub_842F4()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_84400()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingCardioFitnessParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_84478()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingCardioFitnessParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_844F0()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingCyclingDistanceParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "845B8: call analysis failed (funcsize=50)"

uint64_t sub_84640()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_8474C()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingCyclingDistanceParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_847C4()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingCyclingDistanceParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_8483C()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingDistanceWalkingAndRunningParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "84904: call analysis failed (funcsize=48)"

uint64_t sub_84984()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_84A90()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingDistanceWalkingAndRunningParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_84B08()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingDistanceWalkingAndRunningParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_84B80()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingDistanceWheelchairParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "84C48: call analysis failed (funcsize=50)"

uint64_t sub_84CD0()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_84DDC()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingDistanceWheelchairParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_84E54()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingDistanceWheelchairParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_84ECC()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingExerciseMinutesParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "84F94: call analysis failed (funcsize=50)"

uint64_t sub_8501C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_85128()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingExerciseMinutesParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_851A0()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingExerciseMinutesParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_85218()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingFlightsClimbedParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "852E0: call analysis failed (funcsize=48)"

uint64_t sub_85360()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_8546C()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingFlightsClimbedParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_854E4()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingFlightsClimbedParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_8555C()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingHeartRateParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "85624: call analysis failed (funcsize=48)"

uint64_t sub_856A4()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_857B0()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingHeartRateParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_85828()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingHeartRateParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_858A0()
{
  sub_A364();
  uint64_t v5 = sub_98FD0(v1, v2, v3, v4);
  uint64_t v6 = type metadata accessor for WellnessQueryingHeightParameters(v5);
  *(void *)(v0 + 40) = v6;
  sub_53D4(v6);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_8591C()
{
  sub_7F418();
  uint64_t v5 = sub_98E30();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 1, 1, v5);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0 + v1[5], 1, 1, v5);
  *(unsigned char *)(v0 + v1[6]) = v3;
  *(unsigned char *)(v0 + v1[7]) = v4;
  *(void *)(v0 + v1[8]) = 0;
  *(void *)(v0 + v1[9]) = 0;
  *(void *)(v0 + v1[10]) = 0;
  *(void *)(v0 + v1[11]) = 0;
  *(void *)(v0 + v1[12]) = 0;
  uint64_t v6 = sub_984E4();
  v2(v6);
  sub_8101C();
  sub_984F0(v7);
  uint64_t v8 = sub_50774();
  uint64_t v9 = (void *)sub_984C8(v8);
  *uint64_t v9 = v10;
  v9[1] = sub_85A54;
  unint64_t v11 = sub_988A0(23);
  return v12(v11);
}

uint64_t sub_85A54()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_85B60()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingHeightParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_85BD8()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingHeightParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_85C50()
{
  sub_A364();
  uint64_t v5 = sub_98FD0(v1, v2, v3, v4);
  uint64_t v6 = type metadata accessor for WellnessQueryingMenstruationEndParameters(v5);
  *(void *)(v0 + 40) = v6;
  sub_53D4(v6);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_85CCC()
{
  sub_7F418();
  uint64_t v5 = sub_98E30();
  sub_9847C(v5);
  *(unsigned char *)(v0 + v6) = v4;
  *(unsigned char *)(v0 + *(int *)(v1 + 32)) = v3;
  uint64_t v7 = sub_984E4();
  v2(v7);
  sub_81348();
  sub_984F0(v8);
  uint64_t v9 = sub_50774();
  uint64_t v10 = (void *)sub_984C8(v9);
  *uint64_t v10 = v11;
  v10[1] = sub_85DAC;
  unint64_t v12 = sub_988A0(32);
  return v13(v12);
}

uint64_t sub_85DAC()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_85EB8()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingMenstruationEndParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_85F30()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingMenstruationEndParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_85FA8()
{
  sub_A364();
  uint64_t v6 = sub_98A0C(v1, v2, v3, v4, v5);
  uint64_t started = type metadata accessor for WellnessQueryingMenstruationStartParameters(v6);
  *(void *)(v0 + 40) = started;
  sub_53D4(started);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_86024()
{
  sub_98E54();
  uint64_t v17 = v4;
  sub_4712C();
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v7 = (void (*)(uint64_t))v0[2];
  uint64_t v8 = sub_990F0();
  sub_9847C(v8);
  *(unsigned char *)(v5 + v9) = v3;
  *(unsigned char *)(v5 + *(int *)(v6 + 32)) = v2;
  *(unsigned char *)(v5 + *(int *)(v6 + 36)) = v1;
  uint64_t v10 = sub_984E4();
  v7(v10);
  sub_81530();
  sub_984F0(v11);
  uint64_t v12 = sub_9826C();
  uint64_t v13 = (void *)sub_984C8(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_8610C;
  sub_50838();
  return v16(0xD000000000000022);
}

uint64_t sub_8610C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_86218()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingMenstruationStartParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_86290()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingMenstruationStartParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_86308()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingPushesParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "863D0: call analysis failed (funcsize=50)"

uint64_t sub_86458()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_86564()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingPushesParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_865DC()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingPushesParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_86654()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingRespiratoryRateParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "8671C: call analysis failed (funcsize=50)"

uint64_t sub_867A4()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_868B0()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingRespiratoryRateParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_86928()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingRespiratoryRateParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_869A0()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingRestingEnergyParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "86A68: call analysis failed (funcsize=50)"

uint64_t sub_86AF0()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_86BFC()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingRestingEnergyParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_86C74()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingRestingEnergyParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_86CEC()
{
  sub_A364();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = v15;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v3;
  *(unsigned char *)(v0 + 107) = v4;
  *(void *)(v0 + 16) = v5;
  *(unsigned char *)(v0 + 106) = v6;
  *(unsigned char *)(v0 + 105) = v7;
  *(unsigned char *)(v0 + 104) = v8;
  uint64_t v9 = type metadata accessor for WellnessQueryingRingsParameters(0);
  *(void *)(v0 + 56) = v9;
  sub_53D4(v9);
  *(void *)(v0 + 64) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_86D8C()
{
  uint64_t v2 = *(int **)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v16 = *(void *)(v0 + 40);
  uint64_t v17 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 24);
  char v5 = *(unsigned char *)(v0 + 106);
  char v6 = *(unsigned char *)(v0 + 105);
  char v7 = *(unsigned char *)(v0 + 104);
  char v8 = *(unsigned char *)(v0 + 107);
  uint64_t v9 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, v9);
  sub_9914C(v2[5]);
  sub_9914C(v2[12]);
  *(void *)(v1 + v2[6]) = 0;
  *(unsigned char *)(v1 + v2[7]) = v7;
  uint64_t v10 = v1 + v2[8];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  *(unsigned char *)(v1 + v2[9]) = v6;
  *(unsigned char *)(v1 + v2[10]) = v5;
  uint64_t v11 = v1 + v2[11];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  sub_14BF5C(v1, v8, v4, v3, v16, v17);
  sub_8178C();
  uint64_t v13 = v12;
  *(void *)(v0 + 72) = v12;
  uint64_t v18 = (uint64_t (*)(unint64_t, unint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:)
                                                                            + async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_86F28;
  return v18(0xD000000000000016, 0x80000000001BB2C0, v13);
}

uint64_t sub_86F28()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *char v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *char v7 = v6;
  *(void *)(v4 + 88) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 96) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_87034()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 64), (void (*)(void))type metadata accessor for WellnessQueryingRingsParameters);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = sub_99180();
  return v2(v1);
}

uint64_t sub_870B8()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 64), (void (*)(void))type metadata accessor for WellnessQueryingRingsParameters);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_87144()
{
  sub_A364();
  uint64_t v6 = sub_98A0C(v1, v2, v3, v4, v5);
  uint64_t v7 = type metadata accessor for WellnessQueryingSleep_DetailedResultParameters(v6);
  *(void *)(v0 + 40) = v7;
  sub_53D4(v7);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_871C0()
{
  sub_4712C();
  uint64_t v5 = (int *)v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = (void (*)(uint64_t))v0[2];
  uint64_t v7 = sub_990F0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v4, 1, 1, v7);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v4 + v5[7], 1, 1, v7);
  *(void *)(v4 + v5[5]) = 0;
  *(void *)(v4 + v5[6]) = 0;
  sub_98CA0(v5[8]);
  sub_98CA0(v5[9]);
  *(unsigned char *)(v4 + v5[10]) = v3;
  *(unsigned char *)(v4 + v5[11]) = v2;
  *(unsigned char *)(v4 + v5[12]) = v1;
  sub_98CA0(v5[13]);
  *(void *)(v4 + v5[14]) = 0;
  *(void *)(v4 + v5[15]) = 0;
  sub_98CA0(v5[16]);
  uint64_t v8 = sub_984E4();
  v6(v8);
  sub_81B3C();
  sub_984F0(v9);
  uint64_t v10 = sub_50774();
  uint64_t v11 = (void *)sub_984C8(v10);
  *uint64_t v11 = v12;
  v11[1] = sub_8732C;
  unint64_t v13 = sub_988A0(37);
  return v14(v13);
}

uint64_t sub_8732C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_87438()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingSleep_DetailedResultParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_874B0()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingSleep_DetailedResultParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_87528()
{
  sub_A364();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = v2;
  *(unsigned char *)(v0 + 104) = v3;
  *(void *)(v0 + 24) = v4;
  *(void *)(v0 + 32) = v5;
  *(void *)(v0 + 16) = v6;
  uint64_t v7 = type metadata accessor for WellnessQueryingSleep_SimpleResultParameters(0);
  *(void *)(v0 + 56) = v7;
  sub_53D4(v7);
  *(void *)(v0 + 64) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_875B4()
{
  sub_98E54();
  uint64_t v14 = v1;
  sub_4712C();
  uint64_t v2 = sub_98ED4();
  uint64_t v3 = sub_983F4(v2);
  sub_FBD00(v3, v4, v5, v6, v7, v8);
  sub_81F28();
  *(void *)(v0 + 72) = v9;
  uint64_t v10 = (void *)sub_9826C();
  *(void *)(v0 + 80) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_87670;
  unint64_t v11 = sub_98CD8();
  return v12(v11);
}

uint64_t sub_87670()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *char v7 = v6;
  *(void *)(v4 + 88) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 96) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_8777C()
{
  uint64_t v1 = *(void **)(v0 + 48);
  sub_88B30(*(void *)(v0 + 64), (void (*)(void))type metadata accessor for WellnessQueryingSleep_SimpleResultParameters);
  swift_release();
  swift_release();

  swift_task_dealloc();
  uint64_t v2 = sub_99180();
  return v3(v2);
}

uint64_t sub_8781C()
{
  uint64_t v1 = (void *)v0[6];
  sub_88B30(v0[8], (void (*)(void))type metadata accessor for WellnessQueryingSleep_SimpleResultParameters);
  swift_release();
  swift_release();

  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_878C4()
{
  sub_A364();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = v2;
  *(unsigned char *)(v0 + 104) = v3;
  *(void *)(v0 + 24) = v4;
  *(void *)(v0 + 32) = v5;
  *(void *)(v0 + 16) = v6;
  uint64_t v7 = type metadata accessor for WellnessQueryingSleep_SimpleResultParameters(0);
  *(void *)(v0 + 56) = v7;
  sub_53D4(v7);
  *(void *)(v0 + 64) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_87950()
{
  sub_98E54();
  uint64_t v14 = v1;
  sub_4712C();
  uint64_t v2 = sub_98ED4();
  uint64_t v3 = sub_983F4(v2);
  sub_FC180(v3, v4, v5, v6, v7, v8);
  sub_81F28();
  *(void *)(v0 + 72) = v9;
  uint64_t v10 = (void *)sub_9826C();
  *(void *)(v0 + 80) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_87A0C;
  unint64_t v11 = sub_98CD8();
  return v12(v11);
}

uint64_t sub_87A0C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *char v7 = v6;
  *(void *)(v4 + 88) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 96) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_87B18()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingStandMinutesParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "87BE0: call analysis failed (funcsize=50)"

uint64_t sub_87C68()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_87D74()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingStandMinutesParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_87DEC()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingStandMinutesParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_87E64()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingStepsParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_87EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v13 = sub_983D8();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v10, 1, 1, v13);
  uint64_t v14 = v10 + *(int *)(v11 + 20);
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  sub_98A28();
  sub_98944(v15);
  uint64_t v16 = sub_9828C(*(int *)(v11 + 44));
  v12(v16);
  sub_82240();
  sub_984F0(v17);
  uint64_t v18 = sub_9826C();
  uint64_t v19 = (void *)sub_984C8(v18);
  *uint64_t v19 = v20;
  v19[1] = sub_87FD8;
  sub_98354(22);
  sub_987B0();
  return v24(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10);
}

uint64_t sub_87FD8()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_880E4()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingStepsParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_8815C()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingStepsParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_881D4()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessQueryingWalkingHeartRateAverageParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "8829C: call analysis failed (funcsize=48)"

uint64_t sub_8831C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_88428()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingWalkingHeartRateAverageParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_884A0()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingWalkingHeartRateAverageParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_88518()
{
  sub_A364();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(void *)(v1 + 16) = v3;
  *(unsigned char *)(v1 + 88) = v4;
  uint64_t v5 = type metadata accessor for WellnessQueryingWeightParameters(0);
  *(void *)(v1 + 40) = v5;
  sub_53D4(v5);
  *(void *)(v1 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_885A0()
{
  sub_7F418();
  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 88);
  uint64_t v5 = sub_1AC1E0();
  sub_98C34();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[11], 1, 1, v5);
  *(void *)(v1 + v2[6]) = 0;
  *(unsigned char *)(v1 + v2[7]) = v4;
  sub_98E20(v2[8]);
  sub_98E20(v2[9]);
  *(void *)(v1 + v2[10]) = 0;
  sub_98E20(v2[12]);
  uint64_t v6 = sub_984E4();
  v3(v6);
  sub_825F0();
  sub_984F0(v7);
  uint64_t v8 = sub_50774();
  uint64_t v9 = (void *)sub_984C8(v8);
  *uint64_t v9 = v10;
  v9[1] = sub_886D4;
  unint64_t v11 = sub_988A0(23);
  return v12(v11);
}

uint64_t sub_886D4()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_887E0()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingWeightParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_88858()
{
  sub_A364();
  sub_88B30(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessQueryingWeightParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

#error "88910: call analysis failed (funcsize=21)"

void sub_88924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_A638();
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v26 = sub_1AC250();
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_2694(&qword_201E20);
  uint64_t v31 = sub_53D4(v30);
  __chkstk_darwin(v31);
  sub_88AB4(v25, (uint64_t)&a9 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_201E20);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, v23, v26);
  sub_1AC180();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v23, v26);
  sub_A068(v25, &qword_201E20);
  sub_A56C();
}

uint64_t sub_88A8C()
{
  return type metadata accessor for WellnessQueryingCATPatternsExecutor(0);
}

uint64_t type metadata accessor for WellnessQueryingWeightParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_204BA8);
}

uint64_t sub_88AB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2694(a3);
  sub_A5C0();
  sub_98698();
  v4();
  return a2;
}

uint64_t type metadata accessor for WellnessQueryingWalkingHeartRateAverageParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_204AF8);
}

uint64_t sub_88B30(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_A5C0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t type metadata accessor for WellnessQueryingStepsParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_204A50);
}

uint64_t type metadata accessor for WellnessQueryingStandMinutesParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_2049A8);
}

uint64_t type metadata accessor for WellnessQueryingSleep_DetailedResultParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_2048E8);
}

uint64_t type metadata accessor for WellnessQueryingRestingEnergyParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_204840);
}

uint64_t type metadata accessor for WellnessQueryingRespiratoryRateParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_204790);
}

uint64_t type metadata accessor for WellnessQueryingPushesParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_2046E8);
}

uint64_t type metadata accessor for WellnessQueryingMenstruationStartParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_204648);
}

uint64_t type metadata accessor for WellnessQueryingMenstruationEndParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_2045A8);
}

uint64_t type metadata accessor for WellnessQueryingHeightParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_2044F8);
}

uint64_t type metadata accessor for WellnessQueryingHeartRateParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_204448);
}

uint64_t type metadata accessor for WellnessQueryingFlightsClimbedParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_2043A0);
}

uint64_t type metadata accessor for WellnessQueryingExerciseMinutesParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_2042F8);
}

uint64_t type metadata accessor for WellnessQueryingDistanceWheelchairParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_204250);
}

uint64_t type metadata accessor for WellnessQueryingDistanceWalkingAndRunningParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_2041A8);
}

uint64_t type metadata accessor for WellnessQueryingCyclingDistanceParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_204100);
}

uint64_t type metadata accessor for WellnessQueryingCardioFitnessParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_204060);
}

uint64_t type metadata accessor for WellnessQueryingBodyTemperatureParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_203FB8);
}

uint64_t type metadata accessor for WellnessQueryingBloodPressure_SimpleResultParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_203F10);
}

uint64_t type metadata accessor for WellnessQueryingBloodPressure_DetailedResultParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_203E48);
}

uint64_t type metadata accessor for WellnessQueryingBloodOxygenParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_203D98);
}

uint64_t type metadata accessor for WellnessQueryingBloodGlucoseParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_203CE8);
}

uint64_t type metadata accessor for WellnessQueryingBasalBodyTemperatureParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_203C48);
}

uint64_t type metadata accessor for WellnessQueryingActiveEnergyParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_203BA0);
}

uint64_t sub_88E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_88E98);
}

uint64_t sub_88E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_88EB0);
}

void sub_88EB8()
{
  if (!qword_202C68)
  {
    sub_1AC1E0();
    unint64_t v0 = sub_1ACFD0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_202C68);
    }
  }
}

char *sub_88F10(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v4, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = &v4[v10];
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[7];
    *(void *)&v4[a3[6]] = *(uint64_t *)((char *)a2 + a3[6]);
    *(void *)&v4[v14] = *(uint64_t *)((char *)a2 + v14);
    *(void *)&v4[a3[8]] = *(uint64_t *)((char *)a2 + a3[8]);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_890FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_release();
  swift_release();

  return swift_release();
}

char *sub_891F4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_89394(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_8965C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  return a1;
}

char *sub_897E8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  return a1;
}

uint64_t sub_89A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_89AAC);
}

uint64_t sub_89AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_89AC4);
}

void sub_89AC8()
{
}

uint64_t sub_89AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_89B04);
}

uint64_t sub_89B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_89B1C);
}

uint64_t *sub_89B24(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    int v14 = (char *)a1 + v11;
    int v15 = (char *)a2 + v11;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v11, 1, v7))
    {
      uint64_t v16 = sub_2694(&qword_201E28);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v14, v15, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v14, 0, 1, v7);
    }
    uint64_t v17 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = a3[10];
    uint64_t v22 = (char *)a1 + v20;
    uint64_t v23 = (char *)a2 + v20;
    *(void *)uint64_t v22 = *(void *)v23;
    uint64_t v24 = *(uint64_t *)((char *)a2 + v21);
    v22[8] = v23[8];
    *(uint64_t *)((char *)a1 + v21) = v24;
    uint64_t v25 = a3[11];
    uint64_t v26 = (char *)a1 + v25;
    uint64_t v27 = (char *)a2 + v25;
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v7))
    {
      uint64_t v28 = sub_2694(&qword_201E28);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v26, v27, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0, 1, v7);
    }
    uint64_t v29 = a3[12];
    uint64_t v30 = (char *)a1 + v29;
    uint64_t v31 = (char *)a2 + v29;
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
  }
  return a1;
}

char *sub_89E08(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v9], 1, v6))
  {
    uint64_t v14 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
  }
  uint64_t v15 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = *(void *)&a2[v19];
  v20[8] = v21[8];
  *(void *)&a1[v19] = v22;
  uint64_t v23 = a3[11];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1, v6))
  {
    uint64_t v26 = sub_2694(&qword_201E28);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v24, v25, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0, 1, v6);
  }
  uint64_t v27 = a3[12];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  return a1;
}

char *sub_8A09C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v15], 1, v6);
  int v19 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v17, 1, v6);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v16, v17, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v16, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v20 = *(void *)(v6 - 8);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v6);
LABEL_12:
    uint64_t v21 = sub_2694(&qword_201E28);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v16, v17, v6);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_retain();
  swift_release();
  uint64_t v22 = a3[8];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  unsigned char v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[9];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)uint64_t v27 = v29;
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_retain();
  swift_release();
  uint64_t v30 = a3[11];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  int v33 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v30], 1, v6);
  int v34 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v6);
  if (!v33)
  {
    uint64_t v35 = *(void *)(v6 - 8);
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 24))(v31, v32, v6);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v31, v6);
    goto LABEL_18;
  }
  if (v34)
  {
LABEL_18:
    uint64_t v36 = sub_2694(&qword_201E28);
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v31, v32, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v31, 0, 1, v6);
LABEL_19:
  uint64_t v37 = a3[12];
  char v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v40 = *(void *)v39;
  v38[8] = v39[8];
  *(void *)char v38 = v40;
  return a1;
}

char *sub_8A4D0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v9], 1, v6))
  {
    uint64_t v14 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
  }
  uint64_t v15 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = *(void *)&a2[v19];
  v20[8] = v21[8];
  *(void *)&a1[v19] = v22;
  uint64_t v23 = a3[11];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v23], 1, v6))
  {
    uint64_t v26 = sub_2694(&qword_201E28);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v24, v25, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0, 1, v6);
  }
  uint64_t v27 = a3[12];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  return a1;
}

char *sub_8A750(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  int v17 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v12], 1, v6);
  int v18 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v16, 1, v6);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v15, v16, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v15, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v19 = *(void *)(v6 - 8);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v6);
LABEL_12:
    uint64_t v20 = sub_2694(&qword_201E28);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v15, v16, v6);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  uint64_t v21 = a3[8];
  uint64_t v22 = a3[9];
  uint64_t v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  unsigned char v23[8] = v24[8];
  *(void *)uint64_t v23 = *(void *)v24;
  uint64_t v25 = &a1[v22];
  uint64_t v26 = &a2[v22];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_release();
  uint64_t v27 = a3[11];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v27], 1, v6);
  int v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v29, 1, v6);
  if (!v30)
  {
    uint64_t v32 = *(void *)(v6 - 8);
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 40))(v28, v29, v6);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v28, v6);
    goto LABEL_18;
  }
  if (v31)
  {
LABEL_18:
    uint64_t v33 = sub_2694(&qword_201E28);
    memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v28, v29, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v28, 0, 1, v6);
LABEL_19:
  uint64_t v34 = a3[12];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  return a1;
}

uint64_t sub_8AB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8AB80);
}

uint64_t sub_8AB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8AB98);
}

void sub_8AB9C()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_8AC48(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (char *)a1 + v14;
    int v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    int v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = a3[8];
    uint64_t v21 = a3[9];
    uint64_t v22 = (char *)a1 + v20;
    uint64_t v23 = (char *)a2 + v20;
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = (char *)a1 + v21;
    uint64_t v25 = (char *)a2 + v21;
    v24[8] = v25[8];
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v26 = a3[11];
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    *((unsigned char *)a1 + v26) = *((unsigned char *)a2 + v26);
    uint64_t v27 = a3[13];
    *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
    *(uint64_t *)((char *)a1 + v27) = *(uint64_t *)((char *)a2 + v27);
    uint64_t v28 = a3[14];
    uint64_t v29 = a3[15];
    int v30 = (char *)a1 + v28;
    int v31 = (char *)a2 + v28;
    *(void *)int v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = (char *)a1 + v29;
    uint64_t v33 = (char *)a2 + v29;
    *(void *)uint64_t v32 = *(void *)v33;
    v32[8] = v33[8];
    uint64_t v34 = a3[17];
    *(uint64_t *)((char *)a1 + a3[16]) = *(uint64_t *)((char *)a2 + a3[16]);
    uint64_t v35 = (char *)a1 + v34;
    uint64_t v36 = (char *)a2 + v34;
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v36, 1, v7))
    {
      uint64_t v37 = sub_2694(&qword_201E28);
      memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v35, v36, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v35, 0, 1, v7);
    }
    uint64_t v38 = a3[18];
    uint64_t v39 = (char *)a1 + v38;
    uint64_t v40 = (char *)a2 + v38;
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
  }
  return a1;
}

uint64_t sub_8AF98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_release();
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 68);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v8(v6, v4);
  }
  return result;
}

char *sub_8B0E0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = &a1[v13];
  int v17 = &a2[v13];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v24] = a2[v24];
  uint64_t v25 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(void *)&a1[v25] = *(void *)&a2[v25];
  uint64_t v26 = a3[14];
  uint64_t v27 = a3[15];
  uint64_t v28 = &a1[v26];
  uint64_t v29 = &a2[v26];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  int v30 = &a1[v27];
  int v31 = &a2[v27];
  *(void *)int v30 = *(void *)v31;
  v30[8] = v31[8];
  uint64_t v32 = a3[17];
  *(void *)&a1[a3[16]] = *(void *)&a2[a3[16]];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v34, 1, v6))
  {
    uint64_t v35 = sub_2694(&qword_201E28);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v33, v34, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v33, 0, 1, v6);
  }
  uint64_t v36 = a3[18];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  v37[8] = v38[8];
  return a1;
}

char *sub_8B3E0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  uint64_t v22 = a3[7];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  unsigned char v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[8];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)uint64_t v27 = v29;
  uint64_t v30 = a3[9];
  int v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = *(void *)v32;
  v31[8] = v32[8];
  *(void *)int v31 = v33;
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  swift_retain();
  swift_release();
  uint64_t v34 = a3[14];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = *(void *)v36;
  v35[8] = v36[8];
  *(void *)uint64_t v35 = v37;
  uint64_t v38 = a3[15];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  uint64_t v41 = *(void *)v40;
  v39[8] = v40[8];
  *(void *)uint64_t v39 = v41;
  *(void *)&a1[a3[16]] = *(void *)&a2[a3[16]];
  swift_retain();
  swift_release();
  uint64_t v42 = a3[17];
  double v43 = &a1[v42];
  double v44 = &a2[v42];
  int v45 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v42], 1, v6);
  int v46 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v44, 1, v6);
  if (!v45)
  {
    uint64_t v47 = *(void *)(v6 - 8);
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 24))(v43, v44, v6);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v43, v6);
    goto LABEL_18;
  }
  if (v46)
  {
LABEL_18:
    uint64_t v48 = sub_2694(&qword_201E28);
    memcpy(v43, v44, *(void *)(*(void *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v43, v44, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v43, 0, 1, v6);
LABEL_19:
  uint64_t v49 = a3[18];
  uint64_t v50 = &a1[v49];
  double v51 = &a2[v49];
  uint64_t v52 = *(void *)v51;
  v50[8] = v51[8];
  *(void *)uint64_t v50 = v52;
  return a1;
}

char *sub_8B88C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  int v14 = &a1[v12];
  int v15 = &a2[v12];
  *(void *)int v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = &a1[v13];
  uint64_t v17 = &a2[v13];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v24] = a2[v24];
  uint64_t v25 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(void *)&a1[v25] = *(void *)&a2[v25];
  uint64_t v26 = a3[14];
  uint64_t v27 = a3[15];
  uint64_t v28 = &a1[v26];
  uint64_t v29 = &a2[v26];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  uint64_t v30 = &a1[v27];
  int v31 = &a2[v27];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v31[8];
  uint64_t v32 = a3[17];
  *(void *)&a1[a3[16]] = *(void *)&a2[a3[16]];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v32], 1, v6))
  {
    uint64_t v35 = sub_2694(&qword_201E28);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v33, v34, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v33, 0, 1, v6);
  }
  uint64_t v36 = a3[18];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  v37[8] = v38[8];
  return a1;
}

char *sub_8BB78(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = a3[8];
  uint64_t v25 = a3[9];
  uint64_t v26 = &a1[v24];
  uint64_t v27 = &a2[v24];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  uint64_t v28 = &a1[v25];
  uint64_t v29 = &a2[v25];
  v28[8] = v29[8];
  *(void *)uint64_t v28 = *(void *)v29;
  uint64_t v30 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v30] = a2[v30];
  uint64_t v31 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(void *)&a1[v31] = *(void *)&a2[v31];
  swift_release();
  uint64_t v32 = a3[14];
  uint64_t v33 = a3[15];
  uint64_t v34 = &a1[v32];
  uint64_t v35 = &a2[v32];
  v34[8] = v35[8];
  *(void *)uint64_t v34 = *(void *)v35;
  uint64_t v36 = &a1[v33];
  uint64_t v37 = &a2[v33];
  v36[8] = v37[8];
  *(void *)uint64_t v36 = *(void *)v37;
  *(void *)&a1[a3[16]] = *(void *)&a2[a3[16]];
  swift_release();
  uint64_t v38 = a3[17];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  int v41 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v38], 1, v6);
  int v42 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v40, 1, v6);
  if (!v41)
  {
    uint64_t v43 = *(void *)(v6 - 8);
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 40))(v39, v40, v6);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v43 + 8))(v39, v6);
    goto LABEL_18;
  }
  if (v42)
  {
LABEL_18:
    uint64_t v44 = sub_2694(&qword_201E28);
    memcpy(v39, v40, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v39, v40, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v39, 0, 1, v6);
LABEL_19:
  uint64_t v45 = a3[18];
  int v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  *(void *)int v46 = *(void *)v47;
  v46[8] = v47[8];
  return a1;
}

uint64_t sub_8C000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8C014);
}

uint64_t sub_8C014()
{
  sub_98BD4();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v2 + 84) != v0) {
    return sub_983B4(*(int *)(v1 + 52));
  }
  uint64_t v3 = sub_98C00();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v3, v4, v5);
}

uint64_t sub_8C088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8C09C);
}

void sub_8C09C()
{
  sub_988D0();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v2 + 84) == v1)
  {
    uint64_t v3 = sub_988BC();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, v4, v5, v6);
  }
  else
  {
    sub_99044(*(int *)(v0 + 52));
  }
}

void sub_8C110()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_8C1D0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    int v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = a3[8];
    uint64_t v18 = a3[9];
    uint64_t v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(void *)uint64_t v19 = *(void *)v20;
    uint64_t v21 = *(uint64_t *)((char *)a2 + v18);
    v19[8] = v20[8];
    *(uint64_t *)((char *)a1 + v18) = v21;
    uint64_t v22 = a3[10];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v7))
    {
      uint64_t v25 = sub_2694(&qword_201E28);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v23, v24, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_8C478(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_release();
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v8(v6, v4);
  }
  return result;
}

char *sub_8C5C0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[8];
  uint64_t v16 = a3[9];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = *(void *)&a2[v16];
  v17[8] = v18[8];
  *(void *)&a1[v16] = v19;
  uint64_t v20 = a3[10];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v6))
  {
    uint64_t v23 = sub_2694(&qword_201E28);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v21, v22, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v6);
  }
  return a1;
}

char *sub_8C818(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  uint64_t v22 = a3[8];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  unsigned char v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_retain();
  swift_release();
  uint64_t v26 = a3[10];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v26], 1, v6);
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1, v6);
  if (!v29)
  {
    uint64_t v31 = *(void *)(v6 - 8);
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v27, v28, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v6);
    goto LABEL_18;
  }
  if (v30)
  {
LABEL_18:
    uint64_t v32 = sub_2694(&qword_201E28);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v27, v28, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0, 1, v6);
  return a1;
}

char *sub_8CC14(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  uint64_t v13 = &a1[v12];
  int v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = a3[8];
  uint64_t v16 = a3[9];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = *(void *)&a2[v16];
  v17[8] = v18[8];
  *(void *)&a1[v16] = v19;
  uint64_t v20 = a3[10];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v6))
  {
    uint64_t v23 = sub_2694(&qword_201E28);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v21, v22, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v6);
  }
  return a1;
}

char *sub_8CE60(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  v20[8] = v21[8];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_release();
  uint64_t v24 = a3[10];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  int v27 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v24], 1, v6);
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v26, 1, v6);
  if (!v27)
  {
    uint64_t v29 = *(void *)(v6 - 8);
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v25, v26, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v25, v6);
    goto LABEL_18;
  }
  if (v28)
  {
LABEL_18:
    uint64_t v30 = sub_2694(&qword_201E28);
    memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v25, v26, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v25, 0, 1, v6);
  return a1;
}

uint64_t sub_8D248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8D25C);
}

uint64_t sub_8D260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8D274);
}

void sub_8D278()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

char *sub_8D320(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v4, 0, 1, v7);
    }
    uint64_t v10 = a3[6];
    *(void *)&v4[a3[5]] = *(uint64_t *)((char *)a2 + a3[5]);
    uint64_t v11 = &v4[v10];
    uint64_t v12 = (char *)a2 + v10;
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v12, 1, v7))
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[8];
    *(void *)&v4[a3[7]] = *(uint64_t *)((char *)a2 + a3[7]);
    *(void *)&v4[v14] = *(uint64_t *)((char *)a2 + v14);
    uint64_t v15 = a3[10];
    *(void *)&v4[a3[9]] = *(uint64_t *)((char *)a2 + a3[9]);
    *(void *)&v4[v15] = *(uint64_t *)((char *)a2 + v15);
    *(void *)&v4[a3[11]] = *(uint64_t *)((char *)a2 + a3[11]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_8D53C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

char *sub_8D658(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_8D828(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_8DB44(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  return a1;
}

char *sub_8DCEC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_release();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_release();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_release();
  return a1;
}

uint64_t sub_8DFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8DFEC);
}

uint64_t sub_8DFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8E004);
}

void sub_8E008()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

char *sub_8E0A8(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v4, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = &v4[v10];
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[7];
    *(void *)&v4[a3[6]] = *(uint64_t *)((char *)a2 + a3[6]);
    int v15 = &v4[v14];
    uint64_t v16 = (char *)a2 + v14;
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    *(void *)&v4[a3[8]] = *(uint64_t *)((char *)a2 + a3[8]);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_8E29C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_release();

  return swift_release();
}

char *sub_8E388(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_8E530(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_8E7F8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  uint64_t v13 = &a1[v12];
  int v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  return a1;
}

char *sub_8E994(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  swift_release();
  return a1;
}

uint64_t sub_8EC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8EC5C);
}

uint64_t sub_8EC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8EC74);
}

void sub_8EC78()
{
}

uint64_t sub_8EC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8ECA0);
}

uint64_t sub_8ECA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8ECB8);
}

uint64_t sub_8ECBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8ECD0);
}

uint64_t sub_8ECD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8ECE8);
}

uint64_t sub_8ECEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8ED00);
}

uint64_t sub_8ED04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8ED18);
}

uint64_t sub_8ED1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8ED30);
}

uint64_t sub_8ED34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8ED48);
}

uint64_t sub_8ED4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8ED60);
}

uint64_t sub_8ED64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8ED78);
}

uint64_t sub_8ED7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8ED90);
}

uint64_t sub_8ED94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8EDA8);
}

char *sub_8EDAC(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v4, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = &v4[v10];
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[7];
    v4[a3[6]] = *((unsigned char *)a2 + a3[6]);
    v4[v14] = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[9];
    *(void *)&v4[a3[8]] = *(uint64_t *)((char *)a2 + a3[8]);
    *(void *)&v4[v15] = *(uint64_t *)((char *)a2 + v15);
    uint64_t v16 = a3[11];
    *(void *)&v4[a3[10]] = *(uint64_t *)((char *)a2 + a3[10]);
    *(void *)&v4[v16] = *(uint64_t *)((char *)a2 + v16);
    *(void *)&v4[a3[12]] = *(uint64_t *)((char *)a2 + a3[12]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_8EFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

char *sub_8F0E0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v14 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_8F2B8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  a1[a3[6]] = a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_8F5D0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v14 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  return a1;
}

char *sub_8F784(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  uint64_t v18 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v18] = a2[v18];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_release();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_release();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_release();
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_release();
  return a1;
}

uint64_t sub_8FA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8FA84);
}

uint64_t sub_8FA84()
{
  sub_98BD4();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v2 + 84) != v0) {
    return sub_983B4(*(int *)(v1 + 32));
  }
  uint64_t v3 = sub_98C00();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v3, v4, v5);
}

uint64_t sub_8FAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8FB0C);
}

void sub_8FB0C()
{
  sub_988D0();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v2 + 84) == v1)
  {
    uint64_t v3 = sub_988BC();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, v4, v5, v6);
  }
  else
  {
    sub_99044(*(int *)(v0 + 32));
  }
}

void sub_8FB80()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_8FC2C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  }
  swift_retain();
  return a1;
}

char *sub_8FE0C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  a1[a3[8]] = a2[a3[8]];
  swift_retain();
  return a1;
}

char *sub_8FF9C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

char *sub_90244(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

char *sub_903D0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v18] = a2[v18];
  return a1;
}

uint64_t sub_9066C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_90680);
}

uint64_t sub_90684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_90698);
}

void sub_9069C()
{
}

void sub_906AC()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_90758(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[9];
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  }
  swift_retain();
  return a1;
}

uint64_t sub_9093C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4))
  {
    sub_A5C0();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v4))
  {
    sub_A5C0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v4);
  }

  return swift_release();
}

char *sub_90A14(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v13] = a2[v13];
  swift_retain();
  return a1;
}

char *sub_90BAC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_90E60(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v13] = a2[v13];
  return a1;
}

char *sub_90FF4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v18] = a2[v18];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t sub_9129C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_912B0);
}

uint64_t sub_912B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_912C8);
}

void sub_912CC()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_91370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_91384);
}

uint64_t sub_91388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_9139C);
}

uint64_t sub_913A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_913B4);
}

uint64_t sub_913B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_913CC);
}

uint64_t sub_913D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_913E4);
}

uint64_t sub_913E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_913FC);
}

char *sub_91400(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v4, 0, 1, v7);
    }
    uint64_t v10 = a3[6];
    *(void *)&v4[a3[5]] = *(uint64_t *)((char *)a2 + a3[5]);
    *(void *)&v4[v10] = *(uint64_t *)((char *)a2 + v10);
    uint64_t v11 = a3[7];
    uint64_t v12 = &v4[v11];
    uint64_t v13 = (char *)a2 + v11;
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v7))
    {
      uint64_t v14 = sub_2694(&qword_201E28);
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v12, v13, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v7);
    }
    uint64_t v15 = a3[8];
    uint64_t v16 = a3[9];
    uint64_t v17 = &v4[v15];
    uint64_t v18 = (char *)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = &v4[v16];
    uint64_t v20 = (char *)a2 + v16;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = a3[11];
    v4[a3[10]] = *((unsigned char *)a2 + a3[10]);
    v4[v21] = *((unsigned char *)a2 + v21);
    uint64_t v22 = a3[13];
    v4[a3[12]] = *((unsigned char *)a2 + a3[12]);
    uint64_t v23 = &v4[v22];
    uint64_t v24 = (char *)a2 + v22;
    *(void *)uint64_t v23 = *(void *)v24;
    unsigned char v23[8] = v24[8];
    uint64_t v25 = a3[15];
    *(void *)&v4[a3[14]] = *(uint64_t *)((char *)a2 + a3[14]);
    *(void *)&v4[v25] = *(uint64_t *)((char *)a2 + v25);
    uint64_t v26 = a3[16];
    int v27 = &v4[v26];
    int v28 = (char *)a2 + v26;
    *(void *)int v27 = *(void *)v28;
    v27[8] = v28[8];
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_91688(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  swift_release();
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_release();

  return swift_release();
}

char *sub_9178C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1, v6))
  {
    uint64_t v12 = sub_2694(&qword_201E28);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v10, v11, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0, 1, v6);
  }
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  uint64_t v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v19] = a2[v19];
  uint64_t v20 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = a3[15];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  uint64_t v24 = a3[16];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v26[8];
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_919C8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  uint64_t v22 = a3[9];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  unsigned char v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v26 = a3[13];
  int v27 = &a1[v26];
  int v28 = &a2[v26];
  uint64_t v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)int v27 = v29;
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[15]] = *(void *)&a2[a3[15]];
  swift_retain();
  swift_release();
  uint64_t v30 = a3[16];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = *(void *)v32;
  v31[8] = v32[8];
  *(void *)uint64_t v31 = v33;
  return a1;
}

char *sub_91D40(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v9], 1, v6))
  {
    uint64_t v12 = sub_2694(&qword_201E28);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v10, v11, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0, 1, v6);
  }
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  int v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)int v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v19] = a2[v19];
  uint64_t v20 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = a3[15];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  uint64_t v24 = a3[16];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v26[8];
  return a1;
}

char *sub_91F5C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v24] = a2[v24];
  uint64_t v25 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v26 = &a1[v25];
  int v27 = &a2[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  swift_release();
  *(void *)&a1[a3[15]] = *(void *)&a2[a3[15]];
  swift_release();
  uint64_t v28 = a3[16];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v30[8];
  return a1;
}

uint64_t sub_922A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_922BC);
}

uint64_t sub_922C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_922D4);
}

void sub_922D8()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_92394(uint64_t a1, uint64_t *a2)
{
  sub_A1CC();
  if ((*(_DWORD *)(v6 + 80) & 0x20000) != 0)
  {
    sub_98FE8(*a2);
  }
  else
  {
    uint64_t v7 = v5;
    sub_1AC1E0();
    if (sub_9867C())
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      uint64_t v9 = sub_53D4(v8);
      sub_98EA4(v9, v11, *(void *)(v10 + 64));
    }
    else
    {
      sub_A5C0();
      sub_98698();
      v12();
      sub_98398(a1);
    }
    if (sub_9853C())
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      uint64_t v14 = sub_53D4(v13);
      sub_98820(v14, v16, *(void *)(v15 + 64));
    }
    else
    {
      sub_A5C0();
      sub_98698();
      v17();
      sub_98398(v2);
    }
    sub_98858();
    swift_retain();
    if (sub_9867C())
    {
      uint64_t v18 = sub_2694(&qword_201E28);
      uint64_t v19 = sub_53D4(v18);
      sub_9901C(v19, v21, *(void *)(v20 + 64));
    }
    else
    {
      sub_A5C0();
      sub_98698();
      v22();
      sub_98398(v7);
    }
  }
  return a1;
}

uint64_t sub_92524(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!sub_98D04())
  {
    sub_A5C0();
    sub_99078();
    v5();
  }
  if (!sub_98E70())
  {
    sub_A5C0();
    sub_99078();
    v6();
  }
  swift_release();
  swift_release();
  uint64_t v7 = a1 + *(int *)(a2 + 40);
  uint64_t result = sub_98D04();
  if (!result)
  {
    sub_A5C0();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v10(v7, v4);
  }
  return result;
}

uint64_t sub_9262C()
{
  sub_98A80();
  if (sub_9867C())
  {
    uint64_t v3 = sub_2694(&qword_201E28);
    uint64_t v4 = sub_53D4(v3);
    sub_98EA4(v4, v6, *(void *)(v5 + 64));
  }
  else
  {
    sub_A5C0();
    sub_98698();
    v7();
    sub_98398(v0);
  }
  if (sub_9853C())
  {
    uint64_t v8 = sub_2694(&qword_201E28);
    uint64_t v9 = sub_53D4(v8);
    sub_98820(v9, v11, *(void *)(v10 + 64));
  }
  else
  {
    sub_A5C0();
    sub_98698();
    v12();
    sub_98398(v2);
  }
  sub_98858();
  swift_retain();
  if (sub_9867C())
  {
    uint64_t v13 = sub_2694(&qword_201E28);
    uint64_t v14 = sub_53D4(v13);
    sub_9901C(v14, v16, *(void *)(v15 + 64));
  }
  else
  {
    sub_A5C0();
    sub_98698();
    v17();
    sub_98398(v1);
  }
  return v0;
}

void sub_92790()
{
  sub_98838();
  uint64_t v4 = sub_98A80();
  int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, v4);
  int v6 = sub_9867C();
  if (v5)
  {
    if (!v6)
    {
      sub_A5C0();
      sub_98698();
      v7();
      sub_98398(v0);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_A1CC();
  if (v8)
  {
    sub_98E14();
    v9();
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    uint64_t v11 = sub_53D4(v10);
    sub_98EA4(v11, v13, *(void *)(v12 + 64));
    goto LABEL_7;
  }
  sub_98DA0();
  v33();
LABEL_7:
  sub_98758((uint64_t *)(v1 + v2[5]));
  uint64_t v14 = v0 + v2[6];
  int v15 = sub_98DD4();
  if (v3)
  {
    if (!v15)
    {
      sub_A5C0();
      sub_98698();
      v16();
      sub_98398(v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  sub_A1CC();
  if (v17)
  {
    sub_98E14();
    v18();
LABEL_12:
    uint64_t v19 = sub_2694(&qword_201E28);
    uint64_t v20 = sub_53D4(v19);
    sub_98820(v20, v22, *(void *)(v21 + 64));
    goto LABEL_13;
  }
  sub_98DA0();
  v34();
LABEL_13:
  *(void *)(v0 + v2[7]) = *(void *)(v1 + v2[7]);
  swift_retain();
  swift_release();
  *(void *)(v0 + v2[8]) = *(void *)(v1 + v2[8]);
  swift_retain();
  swift_release();
  sub_98758((uint64_t *)(v1 + v2[9]));
  uint64_t v23 = v0 + v2[10];
  int v24 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v23, 1, v4);
  int v25 = sub_9867C();
  if (!v24)
  {
    sub_A1CC();
    if (!v27)
    {
      sub_98DA0();
      v35();
      goto LABEL_19;
    }
    sub_98E14();
    v28();
    goto LABEL_18;
  }
  if (v25)
  {
LABEL_18:
    uint64_t v29 = sub_2694(&qword_201E28);
    uint64_t v30 = sub_53D4(v29);
    sub_9901C(v30, v32, *(void *)(v31 + 64));
    goto LABEL_19;
  }
  sub_A5C0();
  sub_98698();
  v26();
  sub_98398(v23);
LABEL_19:
  sub_987C4();
}

uint64_t sub_92A4C()
{
  sub_98A80();
  if (sub_9867C())
  {
    uint64_t v4 = sub_2694(&qword_201E28);
    uint64_t v5 = sub_53D4(v4);
    sub_98EA4(v5, v7, *(void *)(v6 + 64));
  }
  else
  {
    sub_A5C0();
    sub_9857C();
    v8();
    sub_98398(v0);
  }
  if (sub_9853C())
  {
    uint64_t v9 = sub_2694(&qword_201E28);
    uint64_t v10 = sub_53D4(v9);
    sub_98820(v10, v12, *(void *)(v11 + 64));
  }
  else
  {
    sub_A5C0();
    sub_9857C();
    v13();
    sub_98398(v3);
  }
  uint64_t v14 = *(int *)(v2 + 32);
  *(void *)(v0 + *(int *)(v2 + 28)) = *(void *)(v1 + *(int *)(v2 + 28));
  *(void *)(v0 + v14) = *(void *)(v1 + v14);
  sub_98BAC();
  if (sub_9867C())
  {
    uint64_t v15 = sub_2694(&qword_201E28);
    uint64_t v16 = sub_53D4(v15);
    sub_9901C(v16, v18, *(void *)(v17 + 64));
  }
  else
  {
    sub_A5C0();
    sub_9857C();
    v19();
    sub_98398(v2);
  }
  return v0;
}

void sub_92BBC()
{
  sub_98838();
  uint64_t v4 = sub_98A80();
  int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, v4);
  int v6 = sub_9867C();
  if (v5)
  {
    if (!v6)
    {
      sub_A5C0();
      sub_9857C();
      v7();
      sub_98398(v0);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_A1CC();
  if (v8)
  {
    sub_98E14();
    v9();
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    uint64_t v11 = sub_53D4(v10);
    sub_98EA4(v11, v13, *(void *)(v12 + 64));
    goto LABEL_7;
  }
  sub_98DAC();
  v36();
LABEL_7:
  uint64_t v14 = v2[5];
  uint64_t v15 = v2[6];
  uint64_t v16 = v0 + v14;
  uint64_t v17 = v1 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  uint64_t v18 = v0 + v15;
  int v19 = sub_98DD4();
  if (v3)
  {
    if (!v19)
    {
      sub_A5C0();
      sub_9857C();
      v20();
      sub_98398(v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  sub_A1CC();
  if (v21)
  {
    sub_98E14();
    v22();
LABEL_12:
    uint64_t v23 = sub_2694(&qword_201E28);
    uint64_t v24 = sub_53D4(v23);
    sub_98820(v24, v26, *(void *)(v25 + 64));
    goto LABEL_13;
  }
  sub_98DAC();
  v37();
LABEL_13:
  *(void *)(v0 + v2[7]) = *(void *)(v1 + v2[7]);
  swift_release();
  *(void *)(v0 + v2[8]) = *(void *)(v1 + v2[8]);
  swift_release();
  sub_98BAC();
  int v27 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v2, 1, v4);
  int v28 = sub_9867C();
  if (!v27)
  {
    sub_A1CC();
    if (!v30)
    {
      sub_98DAC();
      v38();
      goto LABEL_19;
    }
    sub_98E14();
    v31();
    goto LABEL_18;
  }
  if (v28)
  {
LABEL_18:
    uint64_t v32 = sub_2694(&qword_201E28);
    uint64_t v33 = sub_53D4(v32);
    sub_9901C(v33, v35, *(void *)(v34 + 64));
    goto LABEL_19;
  }
  sub_A5C0();
  sub_9857C();
  v29();
  sub_98398((uint64_t)v2);
LABEL_19:
  sub_987C4();
}

uint64_t sub_92E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_92E6C);
}