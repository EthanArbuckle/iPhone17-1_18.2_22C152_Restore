uint64_t sub_92E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_92E84);
}

void sub_92E88()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_92F30(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    v12 = (char *)a1 + v10;
    v13 = (char *)a2 + v10;
    *(void *)v12 = *(void *)v13;
    v12[8] = v13[8];
    v14 = (char *)a1 + v11;
    v15 = (char *)a2 + v11;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v11, 1, v7))
    {
      uint64_t v16 = sub_2694(&qword_201E28);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v14, v15, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v14, 0, 1, v7);
    }
    uint64_t v17 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
    uint64_t v18 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    *(void *)v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = a3[11];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    swift_retain();
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v23, 1, v7))
    {
      uint64_t v24 = sub_2694(&qword_201E28);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v22, v23, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v22, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_931E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v8(v6, v4);
  }
  return result;
}

char *sub_9333C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  v12 = &a1[v9];
  v13 = &a2[v9];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v9], 1, v6))
  {
    uint64_t v14 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
  }
  uint64_t v15 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v15] = *(void *)&a2[v15];
  uint64_t v16 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[11];
  v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  swift_retain();
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1, v6))
  {
    uint64_t v22 = sub_2694(&qword_201E28);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v20, v21, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0, 1, v6);
  }
  return a1;
}

char *sub_935A4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v15], 1, v6);
  int v19 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v17, 1, v6);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v16, v17, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v16, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v20 = *(void *)(v6 - 8);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v6);
LABEL_12:
    uint64_t v21 = sub_2694(&qword_201E28);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v16, v17, v6);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_retain();
  swift_release();
  uint64_t v22 = a3[10];
  v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)v23 = v25;
  uint64_t v26 = a3[11];
  v27 = &a1[v26];
  v28 = &a2[v26];
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v26], 1, v6);
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1, v6);
  if (!v29)
  {
    uint64_t v31 = *(void *)(v6 - 8);
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v27, v28, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v6);
    goto LABEL_18;
  }
  if (v30)
  {
LABEL_18:
    uint64_t v32 = sub_2694(&qword_201E28);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v27, v28, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0, 1, v6);
  return a1;
}

char *sub_939BC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  v12 = &a1[v9];
  v13 = &a2[v9];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v9], 1, v6))
  {
    uint64_t v14 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
  }
  uint64_t v15 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v15] = *(void *)&a2[v15];
  uint64_t v16 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  uint64_t v17 = &a1[v16];
  int v18 = &a2[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[11];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1, v6))
  {
    uint64_t v22 = sub_2694(&qword_201E28);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v20, v21, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0, 1, v6);
  }
  return a1;
}

char *sub_93C10(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  int v17 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v12], 1, v6);
  int v18 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v16, 1, v6);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v15, v16, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v15, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v19 = *(void *)(v6 - 8);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v6);
LABEL_12:
    uint64_t v20 = sub_2694(&qword_201E28);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v15, v16, v6);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_release();
  uint64_t v21 = a3[10];
  uint64_t v22 = a3[11];
  v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  *(void *)v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = &a1[v22];
  uint64_t v26 = &a2[v22];
  int v27 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v22], 1, v6);
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v26, 1, v6);
  if (!v27)
  {
    uint64_t v29 = *(void *)(v6 - 8);
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v25, v26, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v25, v6);
    goto LABEL_18;
  }
  if (v28)
  {
LABEL_18:
    uint64_t v30 = sub_2694(&qword_201E28);
    memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v25, v26, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v25, 0, 1, v6);
  return a1;
}

uint64_t sub_94008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_9401C);
}

uint64_t sub_94020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_94034);
}

void sub_94038()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_940E0()
{
  sub_98838();
  v2 = v1;
  uint64_t v4 = v3;
  sub_A1CC();
  if ((*(_DWORD *)(v6 + 80) & 0x20000) != 0)
  {
    sub_98FE8(*v2);
  }
  else
  {
    uint64_t v7 = v5;
    sub_1AC1E0();
    if (sub_987FC((uint64_t)v2))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      uint64_t v9 = sub_53D4(v8);
      sub_98EBC(v9, v11, *(void *)(v10 + 64));
    }
    else
    {
      sub_A5C0();
      sub_98698();
      v12();
      sub_9837C(v4);
    }
    if (sub_984FC())
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      uint64_t v14 = sub_53D4(v13);
      sub_98820(v14, v16, *(void *)(v15 + 64));
    }
    else
    {
      sub_A5C0();
      uint64_t v17 = sub_985F8();
      v18(v17);
      sub_9837C(v0);
    }
    sub_98594();
    swift_retain();
    if (sub_986A4())
    {
      uint64_t v19 = sub_2694(&qword_201E28);
      uint64_t v20 = sub_53D4(v19);
      sub_98820(v20, v22, *(void *)(v21 + 64));
    }
    else
    {
      sub_A5C0();
      uint64_t v23 = sub_985F8();
      v24(v23);
      sub_9837C(v0);
    }
    uint64_t v25 = *(int *)(v7 + 48);
    uint64_t v26 = *(int *)(v7 + 52);
    uint64_t v27 = v4 + v25;
    int v28 = (char *)v2 + v25;
    *(void *)uint64_t v27 = *(void *)v28;
    *(unsigned char *)(v27 + 8) = v28[8];
    *(unsigned char *)(v4 + v26) = *((unsigned char *)v2 + v26);
  }
  sub_987C4();
}

uint64_t sub_94280(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!sub_98D04())
  {
    sub_A5C0();
    sub_99078();
    v5();
  }
  if (!sub_98E70())
  {
    sub_A5C0();
    sub_99078();
    v6();
  }
  swift_release();
  swift_release();
  uint64_t v7 = a1 + *(int *)(a2 + 44);
  uint64_t result = sub_98D04();
  if (!result)
  {
    sub_A5C0();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v10(v7, v4);
  }
  return result;
}

void sub_94388()
{
  sub_98838();
  sub_98AD8();
  if (sub_987FC(v1))
  {
    uint64_t v3 = sub_2694(&qword_201E28);
    uint64_t v4 = sub_53D4(v3);
    sub_98EBC(v4, v6, *(void *)(v5 + 64));
  }
  else
  {
    sub_A5C0();
    sub_98698();
    v7();
    sub_9837C(v0);
  }
  if (sub_984FC())
  {
    uint64_t v8 = sub_2694(&qword_201E28);
    uint64_t v9 = sub_53D4(v8);
    sub_98820(v9, v11, *(void *)(v10 + 64));
  }
  else
  {
    sub_A5C0();
    uint64_t v12 = sub_985F8();
    v13(v12);
    sub_9837C(v2);
  }
  sub_98594();
  swift_retain();
  if (sub_986A4())
  {
    uint64_t v14 = sub_2694(&qword_201E28);
    uint64_t v15 = sub_53D4(v14);
    sub_98820(v15, v17, *(void *)(v16 + 64));
  }
  else
  {
    sub_A5C0();
    uint64_t v18 = sub_985F8();
    v19(v18);
    sub_9837C(v2);
  }
  sub_98650();
  sub_987C4();
}

void sub_944D8()
{
  sub_98838();
  uint64_t v4 = sub_98AD8();
  int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, v4);
  int v6 = sub_987FC(v1);
  if (v5)
  {
    if (!v6)
    {
      sub_A5C0();
      sub_98698();
      v7();
      sub_9837C(v0);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_A1CC();
  if (v8)
  {
    uint64_t v9 = sub_990D0();
    v10(v9);
LABEL_6:
    uint64_t v11 = sub_2694(&qword_201E28);
    uint64_t v12 = sub_53D4(v11);
    sub_98EBC(v12, v14, *(void *)(v13 + 64));
    goto LABEL_7;
  }
  sub_98DA0();
  v37();
LABEL_7:
  sub_98758((uint64_t *)(v1 + v2[5]));
  uint64_t v15 = v0 + v2[6];
  int v16 = sub_98610();
  if (v3)
  {
    if (!v16)
    {
      sub_A5C0();
      uint64_t v17 = sub_985F8();
      v18(v17);
      sub_9837C(v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  sub_A1CC();
  if (v19)
  {
    uint64_t v20 = sub_98A6C();
    v21(v20);
LABEL_12:
    uint64_t v22 = sub_2694(&qword_201E28);
    uint64_t v23 = sub_53D4(v22);
    sub_98820(v23, v25, *(void *)(v24 + 64));
    goto LABEL_13;
  }
  uint64_t v38 = sub_98D5C();
  v39(v38);
LABEL_13:
  *(void *)(v0 + v2[7]) = *(void *)(v1 + v2[7]);
  swift_retain();
  swift_release();
  sub_98758((uint64_t *)(v1 + v2[8]));
  sub_98758((uint64_t *)(v1 + v2[9]));
  *(void *)(v0 + v2[10]) = *(void *)(v1 + v2[10]);
  swift_retain();
  swift_release();
  uint64_t v26 = v0 + v2[11];
  int v27 = sub_98610();
  if (!v3)
  {
    sub_A1CC();
    if (!v30)
    {
      uint64_t v40 = sub_98D5C();
      v41(v40);
      goto LABEL_19;
    }
    uint64_t v31 = sub_98A6C();
    v32(v31);
    goto LABEL_18;
  }
  if (v27)
  {
LABEL_18:
    uint64_t v33 = sub_2694(&qword_201E28);
    uint64_t v34 = sub_53D4(v33);
    sub_98820(v34, v36, *(void *)(v35 + 64));
    goto LABEL_19;
  }
  sub_A5C0();
  uint64_t v28 = sub_985F8();
  v29(v28);
  sub_9837C(v26);
LABEL_19:
  sub_98758((uint64_t *)(v1 + v2[12]));
  *(unsigned char *)(v0 + v2[13]) = *(unsigned char *)(v1 + v2[13]);
  sub_987C4();
}

uint64_t sub_94760()
{
  sub_98AD8();
  if (sub_987FC(v1))
  {
    uint64_t v4 = sub_2694(&qword_201E28);
    uint64_t v5 = sub_53D4(v4);
    sub_98EBC(v5, v7, *(void *)(v6 + 64));
  }
  else
  {
    sub_A5C0();
    sub_984D4();
    v8();
    sub_9837C(v0);
  }
  if (sub_984FC())
  {
    uint64_t v9 = sub_2694(&qword_201E28);
    uint64_t v10 = sub_53D4(v9);
    sub_98820(v10, v12, *(void *)(v11 + 64));
  }
  else
  {
    sub_A5C0();
    sub_984D4();
    v13();
    sub_9837C(v3);
  }
  uint64_t v14 = v2[8];
  *(void *)(v0 + v2[7]) = *(void *)(v1 + v2[7]);
  uint64_t v15 = v0 + v14;
  uint64_t v16 = v1 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = v2[9];
  uint64_t v18 = v2[10];
  uint64_t v19 = v0 + v17;
  uint64_t v20 = v1 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v21 = *(void *)(v1 + v18);
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(void *)(v0 + v18) = v21;
  uint64_t v22 = v0 + v2[11];
  if (sub_986A4())
  {
    uint64_t v23 = sub_2694(&qword_201E28);
    uint64_t v24 = sub_53D4(v23);
    sub_98820(v24, v26, *(void *)(v25 + 64));
  }
  else
  {
    sub_A5C0();
    sub_984D4();
    v27();
    sub_9837C(v22);
  }
  return sub_98650();
}

void sub_94904()
{
  sub_98838();
  uint64_t v4 = sub_98AD8();
  int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, v4);
  int v6 = sub_987FC(v1);
  if (v5)
  {
    if (!v6)
    {
      sub_A5C0();
      sub_984D4();
      v7();
      sub_9837C(v0);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_A1CC();
  if (v8)
  {
    uint64_t v9 = sub_990D0();
    v10(v9);
LABEL_6:
    uint64_t v11 = sub_2694(&qword_201E28);
    uint64_t v12 = sub_53D4(v11);
    sub_98EBC(v12, v14, *(void *)(v13 + 64));
    goto LABEL_7;
  }
  sub_98DAC();
  v45();
LABEL_7:
  uint64_t v15 = v2[5];
  uint64_t v16 = v2[6];
  uint64_t v17 = v0 + v15;
  uint64_t v18 = v1 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = v0 + v16;
  int v20 = sub_98610();
  if (v3)
  {
    if (!v20)
    {
      sub_A5C0();
      sub_984D4();
      v21();
      sub_9837C(v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  sub_A1CC();
  if (v22)
  {
    uint64_t v23 = sub_98A6C();
    v24(v23);
LABEL_12:
    uint64_t v25 = sub_2694(&qword_201E28);
    uint64_t v26 = sub_53D4(v25);
    sub_98820(v26, v28, *(void *)(v27 + 64));
    goto LABEL_13;
  }
  uint64_t v46 = sub_98D40();
  v47(v46);
LABEL_13:
  *(void *)(v0 + v2[7]) = *(void *)(v1 + v2[7]);
  swift_release();
  uint64_t v29 = v2[8];
  uint64_t v30 = v2[9];
  uint64_t v31 = v0 + v29;
  uint64_t v32 = v1 + v29;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  *(void *)uint64_t v31 = *(void *)v32;
  uint64_t v33 = v0 + v30;
  uint64_t v34 = v1 + v30;
  *(void *)uint64_t v33 = *(void *)v34;
  *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
  *(void *)(v0 + v2[10]) = *(void *)(v1 + v2[10]);
  swift_release();
  uint64_t v35 = v0 + v2[11];
  int v36 = sub_98610();
  if (!v3)
  {
    sub_A1CC();
    if (!v38)
    {
      uint64_t v48 = sub_98D40();
      v49(v48);
      goto LABEL_19;
    }
    uint64_t v39 = sub_98A6C();
    v40(v39);
    goto LABEL_18;
  }
  if (v36)
  {
LABEL_18:
    uint64_t v41 = sub_2694(&qword_201E28);
    uint64_t v42 = sub_53D4(v41);
    sub_98820(v42, v44, *(void *)(v43 + 64));
    goto LABEL_19;
  }
  sub_A5C0();
  sub_984D4();
  v37();
  sub_9837C(v35);
LABEL_19:
  sub_98650();
  sub_987C4();
}

uint64_t sub_94B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_94B9C);
}

uint64_t sub_94BA0()
{
  sub_98BD4();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v2 + 84) != v0) {
    return sub_983B4(*(int *)(v1 + 28));
  }
  uint64_t v3 = sub_98C00();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v3, v4, v5);
}

uint64_t sub_94C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_94C28);
}

void sub_94C2C()
{
  sub_988D0();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v2 + 84) == v1)
  {
    uint64_t v3 = sub_988BC();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, v4, v5, v6);
  }
  else
  {
    sub_99044(*(int *)(v0 + 28));
  }
}

void sub_94CA0()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_94D54(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[8];
    uint64_t v16 = a3[9];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = (char *)a1 + v16;
    int v20 = (char *)a2 + v16;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    int v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v23, 1, v7))
    {
      uint64_t v24 = sub_2694(&qword_201E28);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v22, v23, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v22, 0, 1, v7);
    }
    uint64_t v25 = a3[12];
    uint64_t v26 = (char *)a1 + v25;
    uint64_t v27 = (char *)a2 + v25;
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
  }
  return a1;
}

uint64_t sub_95028(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_release();
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v8(v6, v4);
  }
  return result;
}

char *sub_95170(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  uint64_t v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  int v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1, v6))
  {
    uint64_t v22 = sub_2694(&qword_201E28);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v20, v21, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0, 1, v6);
  }
  uint64_t v23 = a3[12];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  return a1;
}

char *sub_953F4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  a1[a3[7]] = a2[a3[7]];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  int v20 = &a2[v18];
  char v21 = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v21;
  uint64_t v22 = a3[9];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_retain();
  swift_release();
  uint64_t v26 = a3[11];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v26], 1, v6);
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1, v6);
  if (!v29)
  {
    uint64_t v31 = *(void *)(v6 - 8);
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v27, v28, v6);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v6);
    goto LABEL_18;
  }
  if (v30)
  {
LABEL_18:
    uint64_t v32 = sub_2694(&qword_201E28);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v27, v28, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0, 1, v6);
LABEL_19:
  uint64_t v33 = a3[12];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = *(void *)v35;
  v34[8] = v35[8];
  *(void *)uint64_t v34 = v36;
  return a1;
}

char *sub_95818(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  int v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)int v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  int v20 = &a1[v19];
  char v21 = &a2[v19];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v19], 1, v6))
  {
    uint64_t v22 = sub_2694(&qword_201E28);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v20, v21, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0, 1, v6);
  }
  uint64_t v23 = a3[12];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  return a1;
}

char *sub_95A88(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  uint64_t v19 = &a1[v18];
  int v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)&a1[v22] = *(void *)&a2[v22];
  swift_release();
  uint64_t v25 = a3[11];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v25], 1, v6);
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v6);
  if (!v28)
  {
    uint64_t v30 = *(void *)(v6 - 8);
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v26, v27, v6);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
    goto LABEL_18;
  }
  if (v29)
  {
LABEL_18:
    uint64_t v31 = sub_2694(&qword_201E28);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v26, v27, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0, 1, v6);
LABEL_19:
  uint64_t v32 = a3[12];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  *(void *)uint64_t v33 = *(void *)v34;
  v33[8] = v34[8];
  return a1;
}

uint64_t sub_95E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_95EA8);
}

uint64_t sub_95EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_95EC0);
}

void sub_95EC4()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for WellnessQueryingSleep_SimpleResultParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_204D20);
}

uint64_t type metadata accessor for WellnessQueryingRingsParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_204C70);
}

uint64_t sub_95FB8(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_95FEC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[8];
    uint64_t v16 = a3[9];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    *((unsigned char *)a1 + v16) = *((unsigned char *)a2 + v16);
    uint64_t v19 = a3[11];
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    int v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    *(void *)int v20 = *(void *)v21;
    uint64_t v22 = a3[12];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    v20[8] = v21[8];
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v7))
    {
      uint64_t v25 = sub_2694(&qword_201E28);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v23, v24, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_962A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 48);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v8(v6, v4);
  }
  return result;
}

char *sub_963DC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  uint64_t v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  a1[v14] = a2[v14];
  uint64_t v17 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  uint64_t v20 = a3[12];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  v18[8] = v19[8];
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v6))
  {
    uint64_t v23 = sub_2694(&qword_201E28);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v21, v22, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v6);
  }
  return a1;
}

char *sub_96640(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  a1[a3[7]] = a2[a3[7]];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  char v21 = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v21;
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v22 = a3[11];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[12];
  uint64_t v27 = &a1[v26];
  int v28 = &a2[v26];
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v26], 1, v6);
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1, v6);
  if (!v29)
  {
    uint64_t v31 = *(void *)(v6 - 8);
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v27, v28, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v6);
    goto LABEL_18;
  }
  if (v30)
  {
LABEL_18:
    uint64_t v32 = sub_2694(&qword_201E28);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v27, v28, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0, 1, v6);
  return a1;
}

char *sub_96A44(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  int v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)int v15 = *(void *)v16;
  v15[8] = v16[8];
  a1[v14] = a2[v14];
  uint64_t v17 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  uint64_t v20 = a3[12];
  char v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  v18[8] = v19[8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v6))
  {
    uint64_t v23 = sub_2694(&qword_201E28);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v21, v22, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v6);
  }
  return a1;
}

char *sub_96CA4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v21] = a2[v21];
  uint64_t v22 = a3[11];
  uint64_t v23 = a3[12];
  uint64_t v24 = &a1[v22];
  uint64_t v25 = &a2[v22];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = &a1[v23];
  uint64_t v27 = &a2[v23];
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v23], 1, v6);
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v6);
  if (!v28)
  {
    uint64_t v30 = *(void *)(v6 - 8);
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v26, v27, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
    goto LABEL_18;
  }
  if (v29)
  {
LABEL_18:
    uint64_t v31 = sub_2694(&qword_201E28);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v26, v27, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0, 1, v6);
  return a1;
}

uint64_t sub_97094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_970A8);
}

uint64_t sub_970AC()
{
  sub_98BD4();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v2 + 84) != v0) {
    return sub_983B4(*(int *)(v1 + 24));
  }
  uint64_t v3 = sub_98C00();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v3, v4, v5);
}

uint64_t sub_97120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_97134);
}

void sub_97138()
{
  sub_988D0();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v2 + 84) == v1)
  {
    uint64_t v3 = sub_988BC();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, v4, v5, v6);
  }
  else
  {
    sub_99044(*(int *)(v0 + 24));
  }
}

void sub_971AC()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

char *sub_97260(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v4, 0, 1, v7);
    }
    uint64_t v10 = a3[6];
    *(void *)&v4[a3[5]] = *(uint64_t *)((char *)a2 + a3[5]);
    *(void *)&v4[v10] = *(uint64_t *)((char *)a2 + v10);
    uint64_t v11 = a3[7];
    uint64_t v12 = &v4[v11];
    uint64_t v13 = (char *)a2 + v11;
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v7))
    {
      uint64_t v14 = sub_2694(&qword_201E28);
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v12, v13, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v7);
    }
    uint64_t v15 = a3[9];
    *(void *)&v4[a3[8]] = *(uint64_t *)((char *)a2 + a3[8]);
    *(void *)&v4[v15] = *(uint64_t *)((char *)a2 + v15);
    uint64_t v16 = a3[11];
    *(void *)&v4[a3[10]] = *(uint64_t *)((char *)a2 + a3[10]);
    *(void *)&v4[v16] = *(uint64_t *)((char *)a2 + v16);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_97484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  swift_release();
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

char *sub_975A0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1, v6))
  {
    uint64_t v12 = sub_2694(&qword_201E28);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v10, v11, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0, 1, v6);
  }
  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v14 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_97778(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_97A94(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v9], 1, v6))
  {
    uint64_t v12 = sub_2694(&qword_201E28);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v10, v11, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0, 1, v6);
  }
  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v14 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  return a1;
}

char *sub_97C3C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_release();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_release();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_release();
  return a1;
}

uint64_t sub_97F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_97F3C);
}

uint64_t sub_97F40()
{
  sub_98BD4();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v2 + 84) != v0) {
    return sub_983B4(*(int *)(v1 + 20));
  }
  uint64_t v3 = sub_98C00();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v3, v4, v5);
}

uint64_t sub_97FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_97FC8);
}

void sub_97FCC()
{
  sub_988D0();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v2 + 84) == v1)
  {
    uint64_t v3 = sub_988BC();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, v4, v5, v6);
  }
  else
  {
    sub_99044(*(int *)(v0 + 20));
  }
}

void sub_98040()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_98104(uint64_t a1)
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, a1);
  uint64_t v4 = v1 + v2[5];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[6], 1, 1, a1);
  *(void *)(v1 + v2[7]) = 0;
  *(void *)(v1 + v2[8]) = 0;
  uint64_t v5 = v1 + v2[9];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[10], 1, 1, a1);
  return v1;
}

uint64_t sub_98198(uint64_t a1)
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, a1);
  uint64_t v4 = v1 + v2[5];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[6], 1, 1, a1);
  *(void *)(v1 + v2[7]) = 0;
  uint64_t v5 = v1 + v2[8];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = v1 + v2[9];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(void *)(v1 + v2[10]) = 0;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[11], 1, 1, a1);
  uint64_t v7 = v1 + v2[12];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  *(unsigned char *)(v1 + v2[13]) = 2;
  return v1;
}

uint64_t sub_98258()
{
  return *(void *)(v0 + 80);
}

uint64_t sub_9826C()
{
  return swift_task_alloc();
}

uint64_t sub_9828C@<X0>(uint64_t a1@<X8>)
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + a1, 1, 1, v2);
  return v1;
}

uint64_t sub_982B8(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v1);
}

uint64_t sub_982D8(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v1);
}

uint64_t sub_982F8()
{
  return v0 + 8;
}

uint64_t sub_98308(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return 0;
}

uint64_t sub_98318()
{
  *(void *)(v0 + 80) = 0x6570795461746164;
  *(void *)(v0 + 88) = 0xE800000000000000;
  return 0;
}

unint64_t sub_98354(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t sub_9837C(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0, 1, v1);
}

uint64_t sub_98398(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0, 1, v1);
}

uint64_t sub_983B4@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = *(void *)(v1 + a1);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  int v3 = v2 - 1;
  if (v3 < 0) {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_983D8()
{
  return sub_1AC1E0();
}

uint64_t sub_983F4(uint64_t a1)
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, a1);
  *(void *)(v1 + v2[5]) = 0;
  *(void *)(v1 + v2[6]) = 0;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[7], 1, 1, a1);
  *(void *)(v1 + v2[8]) = 0;
  *(void *)(v1 + v2[9]) = 0;
  *(void *)(v1 + v2[10]) = 0;
  *(void *)(v1 + v2[11]) = 0;
  return v1;
}

uint64_t sub_9847C(uint64_t a1)
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, a1);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + *(int *)(v2 + 20), 1, 1, a1);
  *(void *)(v1 + *(int *)(v2 + 24)) = 0;
  return result;
}

uint64_t sub_984C8(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t sub_984E4()
{
  return v0;
}

uint64_t sub_984F0(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t sub_984FC()
{
  uint64_t v5 = *(int *)(v2 + 20);
  uint64_t v6 = *(int *)(v2 + 24);
  uint64_t v7 = v0 + v5;
  uint64_t v8 = v1 + v5;
  *(void *)uint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1 + v6, 1, v3);
}

uint64_t sub_9853C()
{
  uint64_t v5 = *(int *)(v3 + 20);
  uint64_t v6 = *(int *)(v3 + 24);
  uint64_t v7 = v0 + v5;
  uint64_t v8 = v2 + v5;
  *(void *)uint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2 + v6, 1, v1);
}

uint64_t sub_98594()
{
  uint64_t v4 = v2[8];
  *(void *)(v0 + v2[7]) = *(void *)(v1 + v2[7]);
  uint64_t v5 = v0 + v4;
  uint64_t v6 = v1 + v4;
  *(void *)uint64_t v5 = *(void *)v6;
  *(unsigned char *)(v5 + 8) = *(unsigned char *)(v6 + 8);
  uint64_t v7 = v2[9];
  uint64_t v8 = v2[10];
  uint64_t v9 = v0 + v7;
  uint64_t v10 = v1 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  uint64_t v11 = *(void *)(v1 + v8);
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)(v0 + v8) = v11;
  return swift_retain();
}

uint64_t sub_985F8()
{
  return v0;
}

uint64_t sub_98610()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v0);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1, v0);
}

uint64_t sub_98650()
{
  uint64_t v3 = *(int *)(v2 + 48);
  uint64_t v4 = *(int *)(v2 + 52);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = v1 + v3;
  *(void *)uint64_t v5 = *(void *)v6;
  *(unsigned char *)(v5 + 8) = *(unsigned char *)(v6 + 8);
  *(unsigned char *)(v0 + v4) = *(unsigned char *)(v1 + v4);
  return v0;
}

uint64_t sub_9867C()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v0);
}

uint64_t sub_986A4()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v0);
}

uint64_t sub_986C0(uint64_t a1)
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, a1);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[5], 1, 1, a1);
  *(void *)(v1 + v2[6]) = 0;
  uint64_t v5 = v1 + v2[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  return result;
}

uint64_t sub_98720()
{
  strcpy((char *)(v0 + 80), "averageValue");
  *(unsigned char *)(v0 + 93) = 0;
  *(_WORD *)(v0 + 94) = -5120;
  return 0;
}

void sub_98758(uint64_t *a1@<X8>)
{
  uint64_t v2 = *a1;
  *(unsigned char *)(v1 + 8) = *((unsigned char *)a1 + 8);
  *(void *)uint64_t v1 = v2;
}

double sub_9876C()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t sub_987D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[24] = a2;
  v2[27] = result;
  v2[28] = 0x65756C615678616DLL;
  v2[29] = 0xE800000000000000;
  return result;
}

uint64_t sub_987FC(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v1);
}

void *sub_98820(uint64_t a1, uint64_t a2, size_t a3)
{
  return memcpy(v3, v4, a3);
}

uint64_t sub_98858()
{
  uint64_t v4 = v2[8];
  *(void *)(v0 + v2[7]) = *(void *)(v1 + v2[7]);
  *(void *)(v0 + v4) = *(void *)(v1 + v4);
  uint64_t v5 = v2[9];
  uint64_t v6 = v0 + v5;
  uint64_t v7 = v1 + v5;
  *(void *)uint64_t v6 = *(void *)v7;
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(v7 + 8);
  return swift_retain();
}

unint64_t sub_988A0(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

double sub_988B0()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t sub_988BC()
{
  return v0;
}

uint64_t sub_988E4@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)(v2 + 96) = a2;
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = 0x6570795461746164;
  *(void *)(v2 + 136) = 0xE800000000000000;
  return v3 + *(int *)(v4 + 24);
}

void sub_98914(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)(v2 + 288) = a2;
  *(void *)(v2 + 312) = a1;
  strcpy((char *)(v2 + 320), "isFirstWindow");
  *(_WORD *)(v2 + 334) = -4864;
}

void sub_98944(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = v2;
}

uint64_t sub_98954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[18] = a2;
  v2[21] = a1;
  v2[22] = 0x6570795461746164;
  v2[23] = 0xE800000000000000;
  return v3 + *(int *)(v4 + 28);
}

uint64_t sub_98984()
{
  uint64_t result = 0;
  *(void *)(v0 + 344) = 0;
  *(void *)(v0 + 352) = 0;
  return result;
}

uint64_t sub_98994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = (v2 - 32) | 0x8000000000000000;
  return sub_88AB4(v3, v5, v4);
}

uint64_t sub_989BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = (v2 - 32) | 0x8000000000000000;
  return sub_88AB4(v3, v4, v5);
}

uint64_t sub_989E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = (v2 - 32) | 0x8000000000000000;
  return sub_88AB4(v3, v4, v5);
}

uint64_t sub_98A0C(char a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 24) = a5;
  *(void *)(v6 + 32) = v5;
  *(void *)(v6 + 16) = a4;
  *(unsigned char *)(v6 + 90) = a3;
  *(unsigned char *)(v6 + 89) = a2;
  *(unsigned char *)(v6 + 88) = a1;
  return 0;
}

uint64_t sub_98A28()
{
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0 + v2[6], 1, 1, v1);
  *(void *)(v0 + v2[7]) = 0;
  *(void *)(v0 + v2[8]) = 0;
  *(void *)(v0 + v2[9]) = 0;
  return result;
}

uint64_t sub_98A6C()
{
  return v0;
}

uint64_t sub_98A80()
{
  return sub_1AC1E0();
}

double sub_98AA0()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

void sub_98AAC(char a1@<W8>)
{
  *(unsigned char *)(v2 + 336) = a1;
  *(void *)(v2 + 360) = v1;
  strcpy((char *)(v2 + 368), "isLastWindow");
  *(unsigned char *)(v2 + 381) = 0;
  *(_WORD *)(v2 + 382) = -5120;
}

uint64_t sub_98AD8()
{
  return sub_1AC1E0();
}

uint64_t sub_98AF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[42] = a2;
  v2[45] = a1;
  v2[46] = 1953066613;
  v2[47] = 0xE400000000000000;
  return v3 + *(int *)(v4 + 44);
}

void sub_98B20(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)(v2 + 96) = a2;
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = 0x6570795461746164;
  *(void *)(v2 + 136) = 0xE800000000000000;
}

uint64_t sub_98B48()
{
  strcpy((char *)(v0 + 80), "averageValue");
  *(unsigned char *)(v0 + 93) = 0;
  *(_WORD *)(v0 + 94) = -5120;
  return 0;
}

uint64_t sub_98B70()
{
  return v0;
}

double sub_98B7C()
{
  *(void *)(v0 + 248) = 0;
  *(void *)(v0 + 256) = 0;
  return 0.0;
}

double sub_98B8C()
{
  *(void *)(v0 + 296) = 0;
  *(void *)(v0 + 304) = 0;
  return 0.0;
}

uint64_t sub_98B9C()
{
  uint64_t result = 0;
  *(void *)(v0 + 152) = 0;
  *(void *)(v0 + 160) = 0;
  return result;
}

void sub_98BAC()
{
  uint64_t v3 = *(int *)(v2 + 36);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = v1 + v3;
  *(void *)uint64_t v4 = *(void *)v5;
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(v5 + 8);
}

uint64_t sub_98BE4()
{
  return sub_1AC1E0();
}

uint64_t sub_98C00()
{
  return v0;
}

void sub_98C10(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)(v2 + 288) = a2;
  *(void *)(v2 + 312) = a1;
  *(void *)(v2 + 320) = 1701669236;
  *(void *)(v2 + 328) = 0xE400000000000000;
}

uint64_t sub_98C34()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 1, 1, v1);
  uint64_t v3 = v0 + *(int *)(v2 + 20);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, 1, 1, v1);
}

uint64_t *sub_98C88()
{
  *(void *)(v0 + 72) = v1;
  return sub_B5B0(v2);
}

void sub_98CA0(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = v2;
}

uint64_t sub_98CBC()
{
  uint64_t result = 0;
  *(void *)(v0 + 200) = 0;
  *(void *)(v0 + 208) = 0;
  return result;
}

unint64_t sub_98CD8()
{
  return 0xD000000000000023;
}

uint64_t sub_98CF8(uint64_t a1)
{
  return v1 + *(int *)(a1 + 20);
}

uint64_t sub_98D04()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v0);
}

uint64_t sub_98D40()
{
  return v0;
}

uint64_t sub_98D5C()
{
  return v0;
}

uint64_t sub_98D78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = (a2 - 32) | 0x8000000000000000;
  return sub_88AB4(v2, v4, v3);
}

void sub_98DB8()
{
  *(void *)(v0 + 128) = 1702125924;
  *(void *)(v0 + 136) = 0xE400000000000000;
}

uint64_t sub_98DD4()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v0);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1, v0);
}

void sub_98E20(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = v2;
}

uint64_t sub_98E30()
{
  return sub_1AC1E0();
}

uint64_t sub_98E70()
{
  uint64_t v4 = v1 + *(int *)(v2 + 24);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1, v0);
}

void *sub_98EA4(uint64_t a1, uint64_t a2, size_t a3)
{
  return memcpy(v3, v4, a3);
}

void *sub_98EBC(uint64_t a1, uint64_t a2, size_t a3)
{
  return memcpy(v3, v4, a3);
}

uint64_t sub_98ED4()
{
  return sub_1AC1E0();
}

double sub_98EF8()
{
  *(void *)(v0 + 440) = 0;
  *(void *)(v0 + 448) = 0;
  return 0.0;
}

uint64_t sub_98F08()
{
  uint64_t result = 0;
  *(void *)(v0 + 104) = 0;
  *(void *)(v0 + 112) = 0;
  return result;
}

uint64_t sub_98F18()
{
  uint64_t result = 0;
  *(void *)(v0 + 248) = 0;
  *(void *)(v0 + 256) = 0;
  return result;
}

uint64_t sub_98F28()
{
  uint64_t result = 0;
  *(void *)(v0 + 296) = 0;
  *(void *)(v0 + 304) = 0;
  return result;
}

void sub_98F38(uint64_t a1@<X8>)
{
  *(void *)(v1 + 472) = (a1 - 32) | 0x8000000000000000;
}

void sub_98F48(uint64_t a1@<X8>)
{
  *(void *)(v1 + 184) = (a1 - 32) | 0x8000000000000000;
}

void sub_98F60(uint64_t a1@<X8>)
{
  *(void *)(v1 + 232) = (a1 - 32) | 0x8000000000000000;
}

void sub_98F78(uint64_t a1@<X8>)
{
  *(void *)(v1 + 128) = v2;
  *(void *)(v1 + 136) = (a1 - 32) | 0x8000000000000000;
}

void sub_98F90(uint64_t a1@<X8>)
{
  *(void *)(v1 + 136) = (a1 - 32) | 0x8000000000000000;
}

void sub_98FA8(uint64_t a1@<X8>)
{
  *(void *)(v1 + 280) = (a1 - 32) | 0x8000000000000000;
}

uint64_t *sub_98FB8()
{
  *(void *)(v0 + 120) = v1;
  return sub_B5B0(v2);
}

uint64_t sub_98FD0(char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = v4;
  *(void *)(v5 + 16) = a3;
  *(unsigned char *)(v5 + 89) = a2;
  *(unsigned char *)(v5 + 88) = a1;
  return 0;
}

uint64_t sub_98FE8(uint64_t a1)
{
  void *v1 = a1;
  return swift_retain();
}

double sub_9900C()
{
  *uint64_t v0 = 0u;
  return 0.0;
}

void *sub_9901C(uint64_t a1, uint64_t a2, size_t a3)
{
  return memcpy(v4, v3, a3);
}

__n128 *sub_99034(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

void sub_99044(uint64_t a1@<X8>)
{
  *(void *)(v2 + a1) = v1;
}

uint64_t sub_99084()
{
  return swift_allocObject();
}

uint64_t sub_990A8()
{
  *(void *)(v0 + 328) = 0xE400000000000000;
  return v1 + *(int *)(v2 + 40);
}

void sub_990BC()
{
  *(void *)(v0 + 232) = 0xE400000000000000;
}

uint64_t sub_990D0()
{
  return v0;
}

uint64_t sub_990E4()
{
  return 0;
}

uint64_t sub_990F0()
{
  return sub_1AC1E0();
}

void sub_99124(uint64_t a1@<X8>)
{
  *(void *)(v1 + 376) = (a1 - 32) | 0x8000000000000000;
}

uint64_t sub_99138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = (a2 - 32) | 0x8000000000000000;
  return v2;
}

uint64_t sub_9914C@<X0>(uint64_t a1@<X8>)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + a1, 1, 1, v2);
}

uint64_t sub_9916C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 80) = a1 & 0xFFFFFFFFFFFFLL | 0x6570000000000000;
  *(void *)(v1 + 88) = 0xE800000000000000;
  return 0;
}

uint64_t sub_99180()
{
  return *(void *)(v0 + 96);
}

uint64_t sub_99194@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = (v1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t sub_991A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = (v2 - 32) | 0x8000000000000000;
  return v3;
}

__n128 *sub_991BC(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t destroy for MedNotSupportedFlow(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for MedNotSupportedFlow(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  long long v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  long long v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  uint64_t v10 = *(void *)(a2 + 240);
  uint64_t v11 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = v10;
  *(void *)(a1 + 248) = v11;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for MedNotSupportedFlow(uint64_t *a1, uint64_t *a2)
{
  a1[30] = a2[30];
  swift_retain();
  swift_release();
  a1[31] = a2[31];
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for MedNotSupportedFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x100uLL);
}

uint64_t assignWithTake for MedNotSupportedFlow(uint64_t a1, uint64_t a2)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  uint64_t v7 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v7;
  swift_release();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedNotSupportedFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 256))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedNotSupportedFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 256) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 256) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedNotSupportedFlow()
{
  return &type metadata for MedNotSupportedFlow;
}

uint64_t sub_9968C()
{
  sub_9A7F8();

  return sub_1AAF80();
}

uint64_t sub_996E0()
{
  sub_A364();
  v1[59] = v2;
  v1[60] = v0;
  v1[61] = type metadata accessor for GenericButtonModel();
  v1[62] = sub_A42C();
  sub_2694(&qword_201E20);
  v1[63] = sub_A42C();
  uint64_t v3 = sub_1AAB10();
  v1[64] = v3;
  sub_A19C(v3);
  v1[65] = v4;
  v1[66] = sub_A42C();
  uint64_t v5 = sub_1AB0A0();
  v1[67] = v5;
  sub_A19C(v5);
  v1[68] = v6;
  v1[69] = swift_task_alloc();
  v1[70] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v1[71] = v7;
  sub_A19C(v7);
  v1[72] = v8;
  v1[73] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_99834()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 592) = v1;
  void *v1 = v0;
  v1[1] = sub_998C4;
  return sub_1A5ED8();
}

uint64_t sub_998C4()
{
  sub_A364();
  sub_A1B4();
  *(void *)(v2 + 600) = v1;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_999B4()
{
  uint64_t v1 = (void *)v0[75];
  uint64_t v2 = v0[70];
  uint64_t v3 = v0[69];
  uint64_t v4 = v0[68];
  uint64_t v5 = v0[67];
  uint64_t v6 = (void *)v0[60];
  sub_1AB090();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  sub_1AB3C0();
  id v7 = [v1 catId];
  sub_1ACDD0();

  sub_1AB380();
  sub_2E38(v6, v6[3]);
  uint64_t v8 = sub_250B4();
  v9(v8);
  sub_2E38(v0 + 34, v0[37]);
  char v10 = sub_1AB040();
  sub_9A790((uint64_t)v6, (uint64_t)(v0 + 2));
  if (v10)
  {
    sub_9A7C8((uint64_t)(v0 + 2));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 34));
LABEL_4:
    uint64_t v15 = v0[63];
    uint64_t v14 = v0[64];
    uint64_t v16 = sub_C0D54(0x616548206E65704FLL, 0xEB0000000068746CLL, 0x6C6165486E65706FLL, (void *)0xED00007070416874);
    uint64_t v18 = v17;
    sub_1AAB00();
    uint64_t v19 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v15, 1, v14);
    if (v19 == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v48 = (void *)v0[75];
      uint64_t v25 = v0[66];
      uint64_t v26 = v0[65];
      uint64_t v27 = v0[64];
      uint64_t v28 = v0[61];
      int v29 = (uint64_t *)v0[62];
      uint64_t v30 = (void *)v0[60];
      (*(void (**)(uint64_t, void, uint64_t))(v26 + 32))(v25, v0[63], v27);
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))((char *)v29 + *(int *)(v28 + 20), v25, v27);
      *int v29 = v16;
      v29[1] = v18;
      uint64_t v31 = v30[28];
      uint64_t v32 = v30[29];
      sub_2E38(v30 + 25, v31);
      v0[57] = type metadata accessor for WellnessSnippets();
      v0[58] = sub_24F2C();
      uint64_t v33 = sub_B5B0(v0 + 54);
      sub_24F7C((uint64_t)v29, (uint64_t)v33);
      swift_storeEnumTagMultiPayload();
      sub_2694(&qword_202588);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_1AF530;
      *(void *)(v34 + 32) = v48;
      uint64_t v49 = v34;
      sub_1ACEF0();
      v0[76] = v49;
      id v35 = v48;
      swift_task_alloc();
      sub_250E0();
      v0[77] = v36;
      *uint64_t v36 = v37;
      v36[1] = sub_99EA0;
      uint64_t v22 = v0[73];
      uint64_t v19 = (uint64_t)(v0 + 49);
      uint64_t v20 = v0 + 54;
      uint64_t v21 = v49;
      uint64_t v23 = v31;
      uint64_t v24 = v32;
    }
    return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v19, v20, v21, v22, v23, v24);
  }
  sub_2E38(v0 + 2, v0[5]);
  uint64_t v11 = sub_250B4();
  v12(v11);
  sub_2E38(v0 + 39, v0[42]);
  char v13 = sub_1AB030();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 39));
  sub_9A7C8((uint64_t)(v0 + 2));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 34));
  if (v13) {
    goto LABEL_4;
  }
  int v38 = (void *)v0[75];
  uint64_t v39 = (void *)v0[60];
  uint64_t v40 = v39[28];
  uint64_t v41 = v39[29];
  sub_2E38(v39 + 25, v40);
  sub_2694(&qword_202588);
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_1AF530;
  *(void *)(v42 + 32) = v38;
  uint64_t v50 = v42;
  sub_1ACEF0();
  v0[78] = v50;
  id v43 = v38;
  swift_task_alloc();
  sub_250E0();
  v0[79] = v44;
  *uint64_t v44 = v45;
  v44[1] = sub_9A0A0;
  uint64_t v46 = v0[73];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v0 + 44, v50, v46, v40, v41);
}

uint64_t sub_99EA0()
{
  sub_A364();
  sub_A1B4();
  uint64_t v2 = v1 + 432;
  uint64_t v3 = *v0;
  sub_A304();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_99F90()
{
  uint64_t v1 = *(void *)(v0 + 584);
  uint64_t v2 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 568);
  uint64_t v4 = *(void *)(v0 + 528);
  uint64_t v5 = *(void *)(v0 + 520);
  uint64_t v6 = *(void *)(v0 + 512);
  uint64_t v7 = *(void *)(v0 + 496);
  uint64_t v8 = *(void *)(v0 + 472);

  sub_24FE0(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_24D80((long long *)(v0 + 392), v8);
  sub_9A844();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v9();
}

uint64_t sub_9A0A0()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  void *v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_9A184()
{
  uint64_t v1 = *(void *)(v0 + 584);
  uint64_t v2 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 568);
  uint64_t v4 = *(void *)(v0 + 472);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_24D80((long long *)(v0 + 352), v4);
  sub_9A844();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v5();
}

uint64_t sub_9A254()
{
  uint64_t v1 = *(void *)(v0 + 472);
  *(void *)(v1 + 32) = 0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  sub_9A844();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v2();
}

uint64_t sub_9A2F4()
{
  sub_A364();
  v1[38] = v2;
  v1[39] = v0;
  swift_task_alloc();
  sub_250E0();
  v1[40] = v3;
  *uint64_t v3 = v4;
  v3[1] = sub_9A388;
  return sub_996E0();
}

uint64_t sub_9A388()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  void *v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_9A450()
{
  uint64_t v1 = (long long *)(v0 + 216);
  if (*(void *)(v0 + 240))
  {
    sub_24D80(v1, v0 + 176);
    sub_E3FC(v0 + 176, v0 + 256);
    uint64_t v2 = swift_allocObject();
    sub_24D80((long long *)(v0 + 256), v2 + 16);
    sub_1AB350();
    sub_1AAE40();
    swift_allocObject();
    *(void *)(v0 + 296) = sub_1AAE30();
    sub_1AB120();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 176);
    swift_release();
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 312);
    sub_9A660((uint64_t)v1);
    sub_9B48(v3 + 40, v0 + 16);
    sub_9BA4();
    sub_1AB120();
    sub_9BF0(v0 + 16);
  }
  sub_E564();
  return v4();
}

uint64_t sub_9A5C8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_24C20;
  return sub_9A2F4();
}

uint64_t sub_9A660(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_202570);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_9A6C0()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_9A6F8()
{
  sub_A364();
  uint64_t v3 = v2;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v5;
  v4[1] = sub_24C20;
  return sub_24B08(v3, v0 + 16);
}

uint64_t sub_9A790(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_9A7C8(uint64_t a1)
{
  return a1;
}

unint64_t sub_9A7F8()
{
  unint64_t result = qword_204DA0[0];
  if (!qword_204DA0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_204DA0);
  }
  return result;
}

uint64_t sub_9A844()
{
  return swift_task_dealloc();
}

uint64_t destroy for AskAuthorizationFlow(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 48);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 88);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 128);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 168);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 208);
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for AskAuthorizationFlow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 48, a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 88, a2 + 88);
  long long v7 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 152) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 128, a2 + 128);
  long long v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 192) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 168, a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 232) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 208, a2 + 208);
  uint64_t v10 = *(void *)(a2 + 248);
  uint64_t v11 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = v10;
  *(void *)(a1 + 256) = v11;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AskAuthorizationFlow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  sub_577C((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  sub_577C((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  sub_577C((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  sub_577C((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
  sub_577C((uint64_t *)(a1 + 168), (uint64_t *)(a2 + 168));
  sub_577C((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_retain();
  swift_release();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for AskAuthorizationFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

uint64_t assignWithTake for AskAuthorizationFlow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 48);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 128);
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 168);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 208);
  long long v6 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v6;
  uint64_t v7 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v7;
  swift_release();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AskAuthorizationFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 264))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AskAuthorizationFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 264) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 264) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AskAuthorizationFlow()
{
  return &type metadata for AskAuthorizationFlow;
}

uint64_t sub_9AD48@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1AB1C0();
  swift_allocObject();
  uint64_t result = sub_1AB1B0();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *a1 = result;
  return result;
}

uint64_t sub_9ADA0()
{
  return sub_9ADF8((void (*)(void))type metadata accessor for WellnessCATsSimple, (uint64_t (*)(char *, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t sub_9ADCC()
{
  return sub_9ADF8((void (*)(void))type metadata accessor for WellnessCATs, (uint64_t (*)(char *, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t sub_9ADF8(void (*a1)(void), uint64_t (*a2)(char *, void))
{
  uint64_t v4 = sub_1AC250();
  uint64_t v5 = sub_53D4(v4);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(0);
  sub_1AC240();
  return a2(v7, 0);
}

uint64_t sub_9AE90@<X0>(char a1@<W0>, long long *a2@<X1>, const void *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(unsigned char *)a7 = a1;
  sub_24D80(a2, a7 + 8);
  memcpy((void *)(a7 + 48), a3, 0xA0uLL);
  uint64_t result = sub_24D80(a4, a7 + 208);
  *(void *)(a7 + 248) = a5;
  *(void *)(a7 + 256) = a6;
  return result;
}

uint64_t sub_9AF08()
{
  sub_9D40();

  return sub_1AAF80();
}

uint64_t sub_9AF5C()
{
  sub_A364();
  v1[7] = v2;
  v1[8] = v0;
  uint64_t v3 = type metadata accessor for GenericButtonModel();
  v1[9] = v3;
  sub_53D4(v3);
  v1[10] = sub_A42C();
  uint64_t v4 = sub_2694(&qword_201E20);
  sub_53D4(v4);
  v1[11] = sub_A42C();
  uint64_t v5 = sub_1AAB10();
  v1[12] = v5;
  sub_A19C(v5);
  v1[13] = v6;
  v1[14] = sub_A42C();
  uint64_t v7 = sub_1AB0A0();
  v1[15] = v7;
  sub_A19C(v7);
  v1[16] = v8;
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  uint64_t v9 = sub_1AB3D0();
  v1[19] = v9;
  sub_A19C(v9);
  v1[20] = v10;
  v1[21] = sub_A42C();
  uint64_t v11 = sub_2694(&qword_201E28);
  sub_53D4(v11);
  v1[22] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t sub_9B0CC()
{
  uint64_t v1 = *(void *)(v0 + 176);
  sub_2F2B8(**(unsigned char **)(v0 + 64));
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_9B1AC;
  return sub_4EBF4();
}

uint64_t sub_9B1AC()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 176);
  uint64_t v6 = *v1;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v9 + 192) = v8;
  *(void *)(v9 + 200) = v0;
  swift_task_dealloc();
  sub_24ED0(v5, &qword_201E28);
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_9B2AC()
{
  uint64_t v1 = (void *)v0[24];
  uint64_t v3 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v7 = v0[11];
  uint64_t v6 = v0[12];
  sub_1AB070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  sub_1AB3C0();
  id v8 = [v1 catId];
  sub_1ACDD0();

  sub_1AB380();
  sub_154D04(v7);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v6) == 1)
  {
    uint64_t v9 = (void *)v0[24];
    uint64_t v10 = (void *)v0[8];
    sub_24ED0(v0[11], &qword_201E20);
    uint64_t v11 = v10[29];
    uint64_t v12 = v10[30];
    sub_2E38(v10 + 26, v11);
    sub_2694(&qword_202588);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1AF530;
    *(void *)(v13 + 32) = v9;
    uint64_t v37 = v13;
    sub_1ACEF0();
    v0[28] = v37;
    id v14 = v9;
    uint64_t v15 = (void *)swift_task_alloc();
    v0[29] = (uint64_t)v15;
    void *v15 = v0;
    v15[1] = sub_9B870;
    uint64_t v16 = v0[21];
    uint64_t v17 = v0[7];
    return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v17, v37, v16, v11, v12);
  }
  else
  {
    uint64_t v36 = (void *)v0[24];
    uint64_t v19 = v0[13];
    uint64_t v18 = v0[14];
    uint64_t v20 = v0[12];
    uint64_t v22 = v0[9];
    uint64_t v21 = (uint64_t *)v0[10];
    uint64_t v23 = (void *)v0[8];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v18, v0[11], v20);
    uint64_t v24 = sub_C0D54(0xD000000000000014, 0x80000000001BB2E0, 0xD000000000000012, (void *)0x80000000001BB300);
    uint64_t v26 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)v21 + *(int *)(v22 + 20), v18, v20);
    *uint64_t v21 = v24;
    v21[1] = v26;
    uint64_t v27 = v23[29];
    uint64_t v28 = v23[30];
    sub_2E38(v23 + 26, v27);
    v0[5] = type metadata accessor for WellnessSnippets();
    v0[6] = sub_24F2C();
    int v29 = sub_B5B0(v0 + 2);
    sub_24F7C((uint64_t)v21, (uint64_t)v29);
    swift_storeEnumTagMultiPayload();
    sub_2694(&qword_202588);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_1AF530;
    *(void *)(v30 + 32) = v36;
    uint64_t v38 = v30;
    sub_1ACEF0();
    v0[26] = v38;
    id v31 = v36;
    uint64_t v32 = (void *)swift_task_alloc();
    v0[27] = (uint64_t)v32;
    *uint64_t v32 = v0;
    v32[1] = sub_9B694;
    uint64_t v33 = v0[21];
    uint64_t v34 = v0[7];
    return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v34, v0 + 2, v38, v33, v27, v28);
  }
}

uint64_t sub_9B694()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  void *v2 = v1;
  uint64_t v3 = v1 + 16;
  uint64_t v4 = *v0;
  sub_A304();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_9B77C()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 80);

  sub_24FE0(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_9C20C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_7F3CC();
  return v8();
}

uint64_t sub_9B870()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  void *v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_9B954()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_9C20C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_7F3CC();
  return v4();
}

uint64_t sub_9BA14()
{
  sub_9C20C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v0();
}

uint64_t sub_9BAB0()
{
  sub_A364();
  v0[17] = v1;
  uint64_t v2 = sub_1AAFC0();
  v0[18] = v2;
  sub_A19C(v2);
  v0[19] = v3;
  v0[20] = sub_A42C();
  uint64_t v4 = sub_1AC800();
  v0[21] = v4;
  sub_A19C(v4);
  v0[22] = v5;
  v0[23] = sub_A42C();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[24] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_9BBAC;
  return sub_9AF5C();
}

uint64_t sub_9BBAC()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_A304();
  *uint64_t v5 = v4;
  *(void *)(v6 + 200) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_9BC84()
{
  sub_E3FC(v0 + 16, v0 + 56);
  uint64_t v1 = swift_allocObject();
  sub_24D80((long long *)(v0 + 56), v1 + 16);
  sub_1AB350();
  sub_1AAE40();
  swift_allocObject();
  *(void *)(v0 + 128) = sub_1AAE30();
  sub_1AB120();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v2();
}

uint64_t sub_9BDAC()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v4 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF60();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[15] = v9;
    sub_1ACFE0();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_342E4, v5, v6, "Caught unexpected exception %@, attempting server fallback", v7, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = v0[22];
  uint64_t v10 = v0[23];
  uint64_t v13 = v0[20];
  uint64_t v12 = v0[21];
  uint64_t v14 = v0[18];
  uint64_t v15 = v0[19];

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v13, enum case for FlowUnhandledReason.needsServerExecution(_:), v14);
  sub_1AB160();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v16();
}

uint64_t sub_9C024(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_9C044, 0, 0);
}

uint64_t sub_9C044()
{
  sub_A364();
  sub_E3FC(*(void *)(v0 + 24), *(void *)(v0 + 16));
  sub_7F3CC();
  return v1();
}

uint64_t sub_9C0A0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_24C20;
  return sub_9BAB0();
}

uint64_t sub_9C138()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_9C170()
{
  sub_A364();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_24C20;
  return sub_9C024(v3, v0 + 16);
}

uint64_t sub_9C20C()
{
  return swift_task_dealloc();
}

uint64_t type metadata accessor for WellnessCATPatternsExecutor(uint64_t a1)
{
  return sub_95FB8(a1, (uint64_t *)&unk_204DD8);
}

uint64_t sub_9C24C()
{
  return swift_initClassMetadata2();
}

void sub_9C28C(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      sub_508B4();
      break;
    default:
      return;
  }
}

uint64_t sub_9C3D4()
{
  uint64_t v2 = sub_2694(&qword_201E28);
  uint64_t v3 = sub_53D4(v2);
  __chkstk_darwin(v3);
  sub_47EB8();
  sub_2694(&qword_2027C8);
  uint64_t v4 = swift_allocObject();
  sub_9F084((__n128 *)v4, (__n128)xmmword_1B1810);
  if (v5)
  {
    uint64_t v6 = 0;
    *(void *)(v4 + 56) = 0;
    *(void *)(v4 + 64) = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = *v0;
    uint64_t v6 = &type metadata for Double;
  }
  *(void *)(v4 + 48) = v7;
  sub_9F0E4((uint64_t)v6);
  sub_9F150(v8);
  *(void *)(v4 + 120) = &type metadata for Bool;
  *(void *)(v4 + 128) = v9;
  sub_9F0B4();
  *(void *)(v4 + 168) = &type metadata for Bool;
  *(void *)(v4 + 176) = v10;
  sub_9F134();
  *(void *)(v4 + 216) = &type metadata for Bool;
  *(void *)(v4 + 224) = 0xD000000000000016;
  sub_9F110((uint64_t)"isNextWindowLastWindow");
  *(void *)(v4 + 264) = &type metadata for Bool;
  *(void *)(v4 + 272) = v11;
  *(void *)(v4 + 280) = 0xE500000000000000;
  uint64_t v12 = v0[2];
  uint64_t v13 = sub_2694(&qword_204E78);
  *(void *)(v4 + 288) = v12;
  *(void *)(v4 + 312) = v13;
  *(void *)(v4 + 320) = 0xD000000000000013;
  sub_9F19C((uint64_t)"nextWindowItemCount");
  if (v14)
  {
    uint64_t v15 = 0;
    *(void *)(v4 + 344) = 0;
    *(void *)(v4 + 352) = 0;
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = v0[3];
    uint64_t v15 = &type metadata for Double;
  }
  *(void *)(v4 + 336) = v16;
  *(void *)(v4 + 360) = v15;
  *(void *)(v4 + 368) = 0x64654D664F6D756ELL;
  *(void *)(v4 + 376) = 0xE800000000000000;
  if (v0[6])
  {
    uint64_t v17 = 0;
    *(void *)(v4 + 392) = 0;
    *(void *)(v4 + 400) = 0;
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = v0[5];
    uint64_t v17 = &type metadata for Double;
  }
  *(void *)(v4 + 384) = v18;
  *(void *)(v4 + 408) = v17;
  *(void *)(v4 + 416) = 0xD000000000000010;
  uint64_t v19 = sub_9F1B0((uint64_t)"requestedMedName");
  uint64_t v20 = (int *)type metadata accessor for WellnessDisambiguateMedNameParameters(v19);
  sub_9FA8((uint64_t)v0 + v20[12], v1, &qword_201E28);
  uint64_t v21 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v21) == 1)
  {
    swift_bridgeObjectRetain();
    sub_A068(v1, &qword_201E28);
    *(_OWORD *)(v4 + 432) = 0u;
    *(_OWORD *)(v4 + 448) = 0u;
  }
  else
  {
    *(void *)(v4 + 456) = v21;
    sub_B5B0((uint64_t *)(v4 + 432));
    sub_A5C0();
    sub_9F188();
    v22();
    swift_bridgeObjectRetain();
  }
  *(void *)(v4 + 464) = 0xD000000000000016;
  *(void *)(v4 + 472) = 0x80000000001B7870;
  *(unsigned char *)(v4 + 480) = *((unsigned char *)v0 + v20[13]);
  sub_9F1C4();
  *(void *)(v4 + 504) = &type metadata for Bool;
  *(void *)(v4 + 512) = v24;
  *(void *)(v4 + 520) = v23 + 3571;
  uint64_t v25 = (uint64_t *)((char *)v0 + v20[14]);
  if (v25[1])
  {
    uint64_t v26 = 0;
    *(_OWORD *)(v4 + 536) = 0u;
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = *v25;
    uint64_t v26 = &type metadata for Double;
  }
  *(void *)(v4 + 528) = v27;
  *(void *)(v4 + 552) = v26;
  *(void *)(v4 + 560) = 0x6953776F646E6977;
  *(void *)(v4 + 568) = v23;
  uint64_t v28 = (uint64_t *)((char *)v0 + v20[15]);
  if (v28[1])
  {
    int v29 = 0;
    *(_OWORD *)(v4 + 584) = 0u;
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = *v28;
    int v29 = &type metadata for Double;
  }
  *(void *)(v4 + 576) = v30;
  *(void *)(v4 + 600) = v29;
  return v4;
}

uint64_t sub_9C6E8()
{
  uint64_t v2 = sub_2694(&qword_201E28);
  uint64_t v3 = sub_53D4(v2);
  __chkstk_darwin(v3);
  sub_47EB8();
  sub_2694(&qword_2027C8);
  uint64_t v4 = swift_allocObject();
  sub_9F084((__n128 *)v4, (__n128)xmmword_1B1820);
  if (v5)
  {
    uint64_t v6 = 0;
    *(void *)(v4 + 56) = 0;
    *(void *)(v4 + 64) = 0;
  }
  else
  {
    uint64_t v6 = &type metadata for Double;
  }
  sub_9F0E4((uint64_t)v6);
  sub_9F150(v7);
  *(void *)(v4 + 120) = v9;
  *(void *)(v4 + 128) = v8;
  sub_9F0B4();
  *(void *)(v4 + 168) = v11;
  *(void *)(v4 + 176) = v10;
  sub_9F134();
  *(void *)(v4 + 216) = v12;
  *(void *)(v4 + 224) = 0xD000000000000016;
  *(void *)(v4 + 48) = v13;
  sub_9F110((uint64_t)"isNextWindowLastWindow");
  *(void *)(v4 + 264) = v15;
  *(void *)(v4 + 272) = v14;
  *(void *)(v4 + 280) = 0xE500000000000000;
  uint64_t v16 = *(void *)(v0 + 16);
  uint64_t v17 = sub_2694(&qword_204E68);
  *(void *)(v4 + 288) = v16;
  *(void *)(v4 + 312) = v17;
  *(void *)(v4 + 320) = 0xD000000000000013;
  sub_9F19C((uint64_t)"nextWindowItemCount");
  if (v18)
  {
    uint64_t v19 = 0;
    *(void *)(v4 + 344) = 0;
    *(void *)(v4 + 352) = 0;
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 24);
    uint64_t v19 = &type metadata for Double;
  }
  *(void *)(v4 + 336) = v20;
  *(void *)(v4 + 360) = v19;
  strcpy((char *)(v4 + 368), "numOfSchedule");
  *(_WORD *)(v4 + 382) = -4864;
  if (*(unsigned char *)(v0 + 48))
  {
    uint64_t v21 = 0;
    *(void *)(v4 + 392) = 0;
    *(void *)(v4 + 400) = 0;
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = *(void *)(v0 + 40);
    uint64_t v21 = &type metadata for Double;
  }
  *(void *)(v4 + 384) = v22;
  *(void *)(v4 + 408) = v21;
  *(void *)(v4 + 416) = 0xD000000000000014;
  uint64_t v23 = sub_9F1B0((uint64_t)"requestedMedSchedule");
  uint64_t v24 = (int *)type metadata accessor for WellnessDisambiguateMedScheduleParameters(v23);
  sub_9FA8(v0 + v24[12], v1, &qword_201E28);
  uint64_t v25 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v25) == 1)
  {
    swift_bridgeObjectRetain();
    sub_A068(v1, &qword_201E28);
    *(_OWORD *)(v4 + 432) = 0u;
    *(_OWORD *)(v4 + 448) = 0u;
  }
  else
  {
    *(void *)(v4 + 456) = v25;
    sub_B5B0((uint64_t *)(v4 + 432));
    sub_A5C0();
    sub_9F188();
    v26();
    swift_bridgeObjectRetain();
  }
  sub_9F1C4();
  *(void *)(v4 + 464) = v28;
  *(void *)(v4 + 472) = v27 + 3571;
  int v29 = (uint64_t *)(v0 + v24[13]);
  if (v29[1])
  {
    uint64_t v30 = 0;
    *(void *)(v4 + 488) = 0;
    *(void *)(v4 + 496) = 0;
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v31 = *v29;
    uint64_t v30 = &type metadata for Double;
  }
  *(void *)(v4 + 480) = v31;
  *(void *)(v4 + 504) = v30;
  *(void *)(v4 + 512) = 0x6953776F646E6977;
  *(void *)(v4 + 520) = v27;
  uint64_t v32 = (uint64_t *)(v0 + v24[14]);
  if (v32[1])
  {
    uint64_t v33 = 0;
    *(_OWORD *)(v4 + 536) = 0u;
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v34 = *v32;
    uint64_t v33 = &type metadata for Double;
  }
  *(void *)(v4 + 528) = v34;
  *(void *)(v4 + 552) = v33;
  return v4;
}

uint64_t sub_9C9D0(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 48) = a1;
  return _swift_task_switch(sub_9C9F4, 0, 0);
}

uint64_t sub_9C9F4()
{
  sub_47634();
  char v1 = *(unsigned char *)(v0 + 48);
  sub_2694(&qword_2027C8);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 32) = 0xD000000000000017;
  *(void *)(v2 + 40) = 0x80000000001BAF20;
  *(void *)(v2 + 72) = &type metadata for Bool;
  *(unsigned char *)(v2 + 48) = v1;
  char v5 = (uint64_t (*)(unint64_t))((char *)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:)
                                                + async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  *(void *)(v0 + 24) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_1ADCF0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_9CB0C;
  sub_50838();
  return v5(0xD000000000000016);
}

uint64_t sub_9CB0C()
{
  sub_47634();
  uint64_t v3 = v2;
  sub_A1B4();
  uint64_t v5 = v4;
  sub_9F178();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_A304();
  *uint64_t v8 = v7;
  *(void *)(v5 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_9F168();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = *(uint64_t (**)(uint64_t))(v7 + 8);
    return v12(v3);
  }
}

uint64_t sub_9CC24()
{
  sub_A364();
  swift_bridgeObjectRelease();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_9CC84()
{
  sub_A364();
  uint64_t v0 = sub_50774();
  char v1 = (void *)sub_508C0(v0);
  void *v1 = v2;
  v1[1] = sub_50768;
  sub_508B4();
  unint64_t v3 = sub_508A8(25);
  return v4(v3);
}

uint64_t sub_9CD24()
{
  sub_A364();
  *(void *)(v0 + 24) = v1;
  *(void *)(v0 + 32) = v2;
  *(unsigned char *)(v0 + 100) = v3;
  *(void *)(v0 + 16) = v4;
  *(unsigned char *)(v0 + 99) = v5;
  *(unsigned char *)(v0 + 98) = v6;
  *(unsigned char *)(v0 + 97) = v7;
  *(unsigned char *)(v0 + 96) = v8;
  uint64_t v9 = sub_2694(&qword_201E28);
  sub_53D4(v9);
  *(void *)(v0 + 40) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for WellnessDisambiguateMedNameParameters(0);
  *(void *)(v0 + 48) = v10;
  sub_53D4(v10);
  *(void *)(v0 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_9CDF4, 0, 0);
}

uint64_t sub_9CDF4()
{
  uint64_t v2 = *(int **)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 16);
  char v16 = *(unsigned char *)(v0 + 99);
  char v17 = *(unsigned char *)(v0 + 100);
  char v5 = *(unsigned char *)(v0 + 98);
  char v6 = *(unsigned char *)(v0 + 97);
  char v7 = *(unsigned char *)(v0 + 96);
  uint64_t v8 = v1 + v2[12];
  uint64_t v18 = *(void *)(v0 + 32);
  uint64_t v19 = v8;
  uint64_t v9 = sub_1AC1E0();
  uint64_t v10 = v8;
  uint64_t v11 = v9;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v10, 1, 1, v9);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
  *(unsigned char *)(v1 + 9) = v7;
  *(unsigned char *)(v1 + 10) = v6;
  *(unsigned char *)(v1 + 11) = v5;
  *(unsigned char *)(v1 + 12) = v16;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = 0;
  *(unsigned char *)(v1 + 32) = 1;
  *(void *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 48) = 1;
  *(unsigned char *)(v1 + v2[13]) = v17;
  uint64_t v12 = v1 + v2[14];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = v1 + v2[15];
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1ACE40();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, 0, 1, v11);
  sub_9EA0(v3, v19);
  *(double *)(v1 + 40) = (double)*(uint64_t *)(v18 + 272);
  *(unsigned char *)(v1 + 48) = 0;
  *(void *)(v0 + 64) = sub_9C3D4();
  uint64_t v20 = (uint64_t (*)(unint64_t))((char *)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:)
                                                 + async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v14;
  void *v14 = v0;
  v14[1] = sub_9CFE4;
  sub_50838();
  return v20(0xD00000000000001CLL);
}

uint64_t sub_9CFE4(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  sub_9F178();
  *char v6 = v5;
  uint64_t v7 = *v2;
  sub_A304();
  *uint64_t v8 = v7;
  *(void *)(v5 + 80) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v1) {
    *(void *)(v5 + 88) = a1;
  }
  sub_9F168();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_9D0F4()
{
  sub_47634();
  sub_9DBB0(v0[7], (void (*)(void))type metadata accessor for WellnessDisambiguateMedNameParameters);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[11];
  return v1(v2);
}

uint64_t sub_9D194()
{
  sub_47634();
  sub_9DBB0(*(void *)(v0 + 56), (void (*)(void))type metadata accessor for WellnessDisambiguateMedNameParameters);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_9D230()
{
  sub_A364();
  *(void *)(v0 + 24) = v1;
  *(void *)(v0 + 32) = v2;
  *(void *)(v0 + 16) = v3;
  *(unsigned char *)(v0 + 91) = v4;
  *(unsigned char *)(v0 + 90) = v5;
  *(unsigned char *)(v0 + 89) = v6;
  *(unsigned char *)(v0 + 88) = v7;
  uint64_t v8 = type metadata accessor for WellnessDisambiguateMedScheduleParameters(0);
  *(void *)(v0 + 40) = v8;
  sub_53D4(v8);
  *(void *)(v0 + 48) = swift_task_alloc();
  return _swift_task_switch(sub_9D2D0, 0, 0);
}

uint64_t sub_9D2D0()
{
  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v14 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 91);
  char v5 = *(unsigned char *)(v0 + 90);
  char v6 = *(unsigned char *)(v0 + 89);
  char v7 = *(unsigned char *)(v0 + 88);
  uint64_t v8 = v1 + v2[12];
  uint64_t v9 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, 1, 1, v9);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
  *(unsigned char *)(v1 + 9) = v7;
  *(unsigned char *)(v1 + 10) = v6;
  *(unsigned char *)(v1 + 11) = v5;
  *(unsigned char *)(v1 + 12) = v4;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = 0;
  *(unsigned char *)(v1 + 32) = 1;
  *(void *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 48) = 1;
  uint64_t v10 = v1 + v2[13];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = v1 + v2[14];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  *(double *)(v1 + 40) = (double)*(uint64_t *)(v14 + 16);
  *(unsigned char *)(v1 + 48) = 0;
  swift_bridgeObjectRetain();
  *(void *)(v0 + 56) = sub_9C6E8();
  uint64_t v12 = (void *)sub_50774();
  *(void *)(v0 + 64) = v12;
  void *v12 = v0;
  v12[1] = sub_9D450;
  sub_50838();
  return ((uint64_t (*)(unint64_t))v14)(0xD000000000000020);
}

uint64_t sub_9D450(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  sub_9F178();
  *char v6 = v5;
  uint64_t v7 = *v2;
  sub_A304();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v1) {
    *(void *)(v5 + 80) = a1;
  }
  sub_9F168();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_9D560()
{
  sub_A364();
  sub_9DBB0(v0[6], (void (*)(void))type metadata accessor for WellnessDisambiguateMedScheduleParameters);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[10];
  return v1(v2);
}

uint64_t sub_9D5F0()
{
  sub_A364();
  sub_9DBB0(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessDisambiguateMedScheduleParameters);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_9D67C()
{
  sub_A364();
  uint64_t v0 = sub_50774();
  uint64_t v1 = (void *)sub_508C0(v0);
  void *v1 = v2;
  v1[1] = sub_4F588;
  sub_508B4();
  unint64_t v3 = sub_508A8(21);
  return v4(v3);
}

uint64_t sub_9D71C()
{
  sub_A364();
  uint64_t v0 = sub_50774();
  uint64_t v1 = (void *)sub_508C0(v0);
  void *v1 = v2;
  v1[1] = sub_50768;
  sub_508B4();
  unint64_t v3 = sub_508A8(28);
  return v4(v3);
}

uint64_t sub_9D7BC()
{
  sub_A364();
  uint64_t v0 = sub_50774();
  uint64_t v1 = (void *)sub_508C0(v0);
  void *v1 = v2;
  v1[1] = sub_50768;
  sub_508B4();
  unint64_t v3 = sub_508A8(31);
  return v4(v3);
}

uint64_t sub_9D85C()
{
  sub_A364();
  uint64_t v0 = sub_50774();
  uint64_t v1 = (void *)sub_508C0(v0);
  void *v1 = v2;
  v1[1] = sub_50768;
  sub_508B4();
  unint64_t v3 = sub_508A8(28);
  return v4(v3);
}

uint64_t sub_9D8FC()
{
  sub_A364();
  uint64_t v0 = sub_50774();
  uint64_t v1 = (void *)sub_508C0(v0);
  void *v1 = v2;
  v1[1] = sub_50768;
  sub_508B4();
  unint64_t v3 = sub_508A8(26);
  return v4(v3);
}

uint64_t sub_9D99C(uint64_t a1, uint64_t a2)
{
  return sub_9D9F0(a1, a2);
}

uint64_t sub_9D9F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC250();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2694(&qword_201E20);
  uint64_t v9 = sub_53D4(v8);
  __chkstk_darwin(v9);
  sub_9FA8(a1, (uint64_t)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_201E20);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v11 = sub_1AC180();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  sub_A068(a1, &qword_201E20);
  return v11;
}

uint64_t sub_9DB68()
{
  return type metadata accessor for WellnessCATPatternsExecutor(0);
}

uint64_t type metadata accessor for WellnessDisambiguateMedScheduleParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_204F90);
}

uint64_t type metadata accessor for WellnessDisambiguateMedNameParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_204ED8);
}

uint64_t sub_9DBB0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_A5C0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

void *sub_9DC0C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(_DWORD *)(a1 + 9) = *(_DWORD *)((char *)a2 + 9);
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(void *)(a1 + 40) = a2[5];
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v8 = a3[12];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1AC1E0();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_2694(&qword_201E28);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = a3[14];
    *((unsigned char *)v4 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = *(unsigned char *)(v16 + 8);
    uint64_t v17 = a3[15];
    uint64_t v18 = (char *)v4 + v17;
    uint64_t v19 = (uint64_t)a2 + v17;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = *(unsigned char *)(v19 + 8);
  }
  return v4;
}

uint64_t sub_9DDC8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = a3[12];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_1AC1E0();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a3[15];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  return a1;
}

uint64_t sub_9DF30(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
  *(unsigned char *)(a1 + 10) = *((unsigned char *)a2 + 10);
  *(unsigned char *)(a1 + 11) = *((unsigned char *)a2 + 11);
  *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2[5];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = a3[12];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_1AC1E0();
  int v13 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1, v12);
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1, v12);
  if (!v13)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_2694(&qword_201E28);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0, 1, v12);
LABEL_7:
  *(unsigned char *)(a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  uint64_t v17 = a3[14];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v20 = *v19;
  *(unsigned char *)(v18 + 8) = *((unsigned char *)v19 + 8);
  *(void *)uint64_t v18 = v20;
  uint64_t v21 = a3[15];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (uint64_t *)((char *)a2 + v21);
  uint64_t v24 = *v23;
  *(unsigned char *)(v22 + 8) = *((unsigned char *)v23 + 8);
  *(void *)uint64_t v22 = v24;
  return a1;
}

uint64_t sub_9E144(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = a3[12];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a3[15];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  return a1;
}

uint64_t sub_9E29C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = a3[12];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_1AC1E0();
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_2694(&qword_201E28);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  uint64_t v14 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a3[15];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  return a1;
}

uint64_t sub_9E4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_9E4B8);
}

uint64_t sub_9E4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_9E4D0);
}

void sub_9E4D4()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *sub_9E598(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(_DWORD *)(a1 + 9) = *(_DWORD *)((char *)a2 + 9);
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(void *)(a1 + 40) = a2[5];
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v8 = a3[12];
    uint64_t v9 = (void *)(a1 + v8);
    int v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1AC1E0();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_2694(&qword_201E28);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = a3[13];
    uint64_t v15 = a3[14];
    uint64_t v16 = (char *)v4 + v14;
    uint64_t v17 = (uint64_t)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = *(unsigned char *)(v17 + 8);
    uint64_t v18 = (char *)v4 + v15;
    uint64_t v19 = (uint64_t)a2 + v15;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = *(unsigned char *)(v19 + 8);
  }
  return v4;
}

uint64_t sub_9E744(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = sub_1AC1E0();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1, v5);
  if (!result)
  {
    sub_A5C0();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
    return v8(v4, v5);
  }
  return result;
}

uint64_t sub_9E7DC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = a3[12];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_1AC1E0();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[13];
  uint64_t v13 = a3[14];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  uint64_t v16 = a1 + v13;
  uint64_t v17 = a2 + v13;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  return a1;
}

uint64_t sub_9E938(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
  *(unsigned char *)(a1 + 10) = *((unsigned char *)a2 + 10);
  *(unsigned char *)(a1 + 11) = *((unsigned char *)a2 + 11);
  *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2[5];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = a3[12];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_1AC1E0();
  int v13 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1, v12);
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1, v12);
  if (!v13)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_2694(&qword_201E28);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0, 1, v12);
LABEL_7:
  uint64_t v17 = a3[13];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v20 = *v19;
  *(unsigned char *)(v18 + 8) = *((unsigned char *)v19 + 8);
  *(void *)uint64_t v18 = v20;
  uint64_t v21 = a3[14];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (uint64_t *)((char *)a2 + v21);
  uint64_t v24 = *v23;
  *(unsigned char *)(v22 + 8) = *((unsigned char *)v23 + 8);
  *(void *)uint64_t v22 = v24;
  return a1;
}

uint64_t sub_9EB40(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = a3[12];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[13];
  uint64_t v13 = a3[14];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  uint64_t v16 = a1 + v13;
  uint64_t v17 = a2 + v13;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  return a1;
}

uint64_t sub_9EC8C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = a3[12];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_1AC1E0();
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_2694(&qword_201E28);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  uint64_t v14 = a3[13];
  uint64_t v15 = a3[14];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  uint64_t v18 = a1 + v15;
  uint64_t v19 = a2 + v15;
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  return a1;
}

uint64_t sub_9EE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_9EE9C);
}

uint64_t sub_9EEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_2694(&qword_201E28);
    uint64_t v9 = a1 + *(int *)(a3 + 48);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
}

uint64_t sub_9EF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_9EF40);
}

uint64_t sub_9EF44(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    uint64_t v8 = v5 + *(int *)(a4 + 48);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, a2, a2, v7);
  }
  return result;
}

void sub_9EFC8()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

__n128 *sub_9F084(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6E69577473726966;
  result[2].n128_u64[1] = 0xEF657A6953776F64;
  return result;
}

void sub_9F0B4()
{
  *(void *)(v0 + 136) = 0xED0000776F646E69;
  *(unsigned char *)(v0 + 144) = *(unsigned char *)(v1 + 10);
}

void sub_9F0E4(uint64_t a1@<X8>)
{
  *(void *)(v1 + 72) = a1;
  strcpy((char *)(v1 + 80), "isConclusion");
  *(unsigned char *)(v1 + 93) = 0;
  *(_WORD *)(v1 + 94) = -5120;
}

void sub_9F110(uint64_t a1@<X8>)
{
  *(void *)(v1 + 232) = (a1 - 32) | 0x8000000000000000;
  *(unsigned char *)(v1 + 240) = *(unsigned char *)(v2 + 12);
}

void sub_9F134()
{
  *(void *)(v0 + 184) = 0xEC000000776F646ELL;
  *(unsigned char *)(v0 + 192) = *(unsigned char *)(v1 + 11);
}

void sub_9F150(char a1@<W8>)
{
  *(unsigned char *)(v1 + 96) = a1;
}

void sub_9F19C(uint64_t a1@<X8>)
{
  *(void *)(v1 + 328) = (a1 - 32) | 0x8000000000000000;
}

uint64_t sub_9F1B0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 424) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t sub_9F1D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v46 = sub_1AABD0();
  sub_9F5AC();
  uint64_t v44 = v1;
  __chkstk_darwin(v2);
  sub_E548();
  uint64_t v45 = v4 - v3;
  uint64_t v5 = sub_1AAD30();
  uint64_t v43 = v5;
  sub_9F5AC();
  uint64_t v7 = v6;
  uint64_t v9 = __chkstk_darwin(v8);
  int v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v14 = sub_2694(&qword_201E10);
  __chkstk_darwin(v14 - 8);
  sub_E548();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = sub_2694(&qword_204FF0);
  __chkstk_darwin(v18 - 8);
  sub_E548();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = sub_2694(&qword_204FF8);
  __chkstk_darwin(v22 - 8);
  sub_E548();
  uint64_t v25 = v24 - v23;
  uint64_t v41 = sub_1AAAA0();
  sub_9F5AC();
  uint64_t v27 = v26;
  __chkstk_darwin(v28);
  sub_E548();
  uint64_t v31 = v30 - v29;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v25, 1, 1, v5);
  uint64_t v32 = sub_1AAD60();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v21, 1, 1, v32);
  uint64_t v33 = v44;
  sub_1AAA90();
  sub_1AAA30();
  sub_1AAA80();
  sub_1AAD00();
  sub_1AAD00();
  uint64_t v34 = v45;
  sub_1AACA0();
  id v35 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v36 = v11;
  uint64_t v37 = v43;
  v35(v36, v43);
  sub_1AACD0();
  uint64_t v38 = v46;
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v46);
  v35(v13, v37);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v17, 1, v38);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v41);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v42, v17, v38);
  }
  return result;
}

unint64_t sub_9F5C4(char a1)
{
  unint64_t result = 0xD000000000000031;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C756465686373;
      break;
    case 2:
      unint64_t result = 0x697461636964656DLL;
      break;
    case 3:
    case 4:
      unint64_t result = 0x6874676E65727473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_9F67C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9 = 0x64656863536C696ELL;
  if (a2) {
    uint64_t v9 = result;
  }
  unint64_t v10 = 0xEB00000000656C75;
  if (a2) {
    unint64_t v10 = a2;
  }
  uint64_t v11 = 0x636964654D6C696ELL;
  if (a4) {
    uint64_t v11 = a3;
  }
  unint64_t v12 = 0xEF44496E6F697461;
  if (a4) {
    unint64_t v12 = a4;
  }
  uint64_t v13 = 0x6E657274536C696ELL;
  if (a8) {
    uint64_t v13 = a7;
  }
  *(void *)a9 = v9;
  *(void *)(a9 + 8) = v10;
  unint64_t v14 = 0xEF74696E55687467;
  if (a8) {
    unint64_t v14 = a8;
  }
  *(void *)(a9 + 16) = v11;
  *(void *)(a9 + 24) = v12;
  unint64_t v15 = 0xBFF0000000000000;
  if ((a6 & 1) == 0) {
    unint64_t v15 = a5;
  }
  *(void *)(a9 + 32) = v15;
  *(unsigned char *)(a9 + 40) = 0;
  *(void *)(a9 + 48) = v13;
  *(void *)(a9 + 56) = v14;
  return result;
}

uint64_t sub_9F720(void *a1)
{
  uint64_t v2 = v1;
  sub_9FA14();
  id v13 = sub_9FA54();
  sub_2694(&qword_201E88);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B08E0;
  strcpy((char *)v17, "medicationID");
  HIBYTE(v17[6]) = 0;
  v17[7] = -5120;
  sub_9FBAC();
  sub_9FAC8(v2 + 16, (uint64_t)v17, &qword_2032A8);
  uint64_t v5 = sub_2694(&qword_2032A8);
  *(void *)(inited + 96) = v5;
  sub_9FAC8((uint64_t)v17, inited + 72, &qword_2032A8);
  strcpy((char *)v15, "strength");
  sub_B4D0((uint64_t)v17);
  sub_9FBAC();
  sub_9FAC8(v2 + 32, (uint64_t)v16, qword_201DB8);
  *(void *)(inited + 168) = sub_2694(qword_201DB8);
  sub_9FAC8((uint64_t)v16, inited + 144, qword_201DB8);
  strcpy((char *)v15, "strengthUnit");
  HIBYTE(v15[6]) = 0;
  v15[7] = -5120;
  sub_9FBAC();
  sub_9FAC8(v2 + 48, (uint64_t)v15, &qword_2032A8);
  *(void *)(inited + 240) = v5;
  sub_9FAC8((uint64_t)v15, inited + 216, &qword_2032A8);
  v14[0] = 0x656C756465686373;
  v14[1] = 0xEA00000000004449;
  sub_B4D0((uint64_t)v15);
  sub_9FBAC();
  sub_9FAC8(v2, (uint64_t)v14, &qword_2032A8);
  *(void *)(inited + 312) = v5;
  sub_9FAC8((uint64_t)v14, inited + 288, &qword_2032A8);
  sub_B4D0((uint64_t)v14);
  uint64_t v6 = sub_1ACD60();
  sub_9FB2C(v6, v13);
  uint64_t v7 = self;
  sub_2E38(a1, a1[3]);
  uint64_t v8 = (void *)sub_1AB060();
  id v9 = [v7 runSiriKitExecutorCommandWithContext:v8 payload:v13];

  id v10 = [v7 wrapCommandInStartLocalRequest:v9];
  uint64_t v11 = sub_1ACFB0();

  return v11;
}

unint64_t sub_9FA14()
{
  unint64_t result = qword_205000;
  if (!qword_205000)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_205000);
  }
  return result;
}

id sub_9FA54()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = sub_1ACDC0();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithIdentifier:v1];

  return v2;
}

uint64_t sub_9FAC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_2694(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_9FB2C(uint64_t a1, void *a2)
{
  Class isa = sub_1ACD50().super.isa;
  swift_bridgeObjectRelease();
  [a2 setUserData:isa];
}

uint64_t sub_9FBAC()
{
  return sub_1AD030();
}

uint64_t sub_9FBC4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_name;
  uint64_t v2 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, v2);
  sub_A18A4(OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_scheduleString);
  sub_A18A4(OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_scheduleID);
  sub_A18A4(OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_medicationID);
  uint64_t v3 = v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_strength;
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  sub_A18A4(OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_strengthUnit);
  sub_A18A4(OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_onSelectCommand);
  return v0;
}

uint64_t sub_9FC6C()
{
  sub_74610(v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_name);
  sub_74610(v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_scheduleString);
  sub_74610(v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_scheduleID);
  sub_74610(v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_medicationID);
  sub_74610(v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_strengthUnit);
  sub_74610(v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_onSelectCommand);
  return v0;
}

uint64_t sub_9FCE4()
{
  return sub_A078C((void (*)(void))sub_9FC6C);
}

unint64_t sub_9FCFC()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_9FD18(uint64_t a1)
{
  uint64_t v3 = sub_2694(&qword_201E28);
  __chkstk_darwin(v3 - 8);
  sub_E548();
  *(void *)(v1 + 16) = 0;
  sub_A18F4();
  sub_A1964();
  sub_A1934(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_name);
  sub_A18F4();
  sub_A1964();
  sub_A1934(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleString);
  sub_A18F4();
  sub_A1964();
  sub_A1934(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleID);
  sub_A18F4();
  sub_A1964();
  sub_A1934(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_medicationID);
  char v4 = *(unsigned char *)(a1 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_strength + 8);
  uint64_t v5 = v1 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strength;
  *(void *)uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_strength);
  *(unsigned char *)(v5 + 8) = v4;
  sub_A18F4();
  sub_A1964();
  sub_A1934(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strengthUnit);
  sub_A18F4();
  sub_A1964();
  swift_release();
  sub_A1934(OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_onSelectCommand);
  return v1;
}

uint64_t sub_9FE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  type metadata accessor for WellnessMedicationDialogObject.Builder(0);
  uint64_t v17 = swift_allocObject();
  sub_9FBC4();
  sub_A1880();
  sub_A1440(a1, v8);
  swift_endAccess();
  sub_A1880();
  sub_A1440(a2, v8);
  swift_endAccess();
  sub_A1880();
  sub_A1440(a3, v8);
  swift_endAccess();
  sub_A1880();
  sub_A1440(a4, v8);
  swift_endAccess();
  uint64_t v18 = v17 + OBJC_IVAR____TtCC18WellnessFlowPlugin30WellnessMedicationDialogObject7Builder_strength;
  *(void *)uint64_t v18 = a5;
  *(unsigned char *)(v18 + 8) = a6 & 1;
  sub_A197C();
  sub_A1440(a7, a6);
  swift_endAccess();
  sub_A197C();
  sub_A1440(a8, a6);
  swift_endAccess();
  type metadata accessor for WellnessMedicationDialogObject(0);
  uint64_t v19 = swift_allocObject();
  sub_9FD18(v17);
  sub_74610(a8);
  sub_74610(a7);
  sub_74610(a4);
  sub_74610(a3);
  sub_74610(a2);
  sub_74610(a1);
  return v19;
}

double sub_A0048@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v8 = sub_2694(&qword_201E28);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v34 - v16;
  __chkstk_darwin(v15);
  sub_A768();
  __chkstk_darwin(v18);
  sub_A19B4();
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v34 - v20;
  BOOL v22 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v22 || (sub_A1864() & 1) != 0)
  {
    sub_A14A8(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_name, (uint64_t)v21);
    sub_1AC1E0();
    sub_A18C4((uint64_t)v21);
    if (!v22) {
      goto LABEL_56;
    }
    uint64_t v23 = (uint64_t)v21;
    goto LABEL_33;
  }
  BOOL v24 = a1 == 0x656C756465686373 && a2 == 0xEE00676E69727453;
  if (v24 || (sub_A19C8(), (sub_A1864() & 1) != 0))
  {
    sub_A14A8(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleString, v5);
    sub_1AC1E0();
    sub_A18C4(v5);
    if (!v22) {
      goto LABEL_56;
    }
    uint64_t v23 = v5;
    goto LABEL_33;
  }
  BOOL v25 = a1 == 0x656C756465686373 && a2 == 0xEA00000000004449;
  if (v25 || (sub_A19C8(), (sub_A1864() & 1) != 0))
  {
    sub_A14A8(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleID, v4);
    sub_1AC1E0();
    sub_A18C4(v4);
    if (!v22) {
      goto LABEL_56;
    }
    uint64_t v23 = v4;
    goto LABEL_33;
  }
  BOOL v26 = a1 == 0x697461636964656DLL && a2 == 0xEC00000044496E6FLL;
  if (v26 || (sub_A1864() & 1) != 0)
  {
    sub_A14A8(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_medicationID, (uint64_t)v17);
    sub_1AC1E0();
    sub_A18C4((uint64_t)v17);
    if (!v22) {
      goto LABEL_56;
    }
    uint64_t v23 = (uint64_t)v17;
    goto LABEL_33;
  }
  BOOL v29 = a1 == 0x6874676E65727473 && a2 == 0xE800000000000000;
  if (v29 || (sub_A19A0(), (sub_A1864() & 1) != 0))
  {
    if ((*(unsigned char *)(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strength + 8) & 1) == 0)
    {
      double result = *(double *)(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strength);
      uint64_t v30 = (double *)v35;
      *(void *)(v35 + 24) = &type metadata for Double;
      *uint64_t v30 = result;
      return result;
    }
LABEL_34:
    double result = 0.0;
    uint64_t v28 = v35;
    *(_OWORD *)uint64_t v35 = 0u;
    *(_OWORD *)(v28 + 16) = 0u;
    return result;
  }
  BOOL v31 = a1 == 0x6874676E65727473 && a2 == 0xEC00000074696E55;
  if (v31 || (sub_A19A0(), (sub_A1864() & 1) != 0))
  {
    sub_A14A8(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strengthUnit, (uint64_t)v14);
    sub_1AC1E0();
    sub_A18C4((uint64_t)v14);
    if (!v22) {
      goto LABEL_56;
    }
    uint64_t v23 = (uint64_t)v14;
    goto LABEL_33;
  }
  BOOL v32 = a1 == 0x7463656C65536E6FLL && a2 == 0xEF646E616D6D6F43;
  if (!v32 && (sub_A1864() & 1) == 0) {
    goto LABEL_34;
  }
  sub_A14A8(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_onSelectCommand, (uint64_t)v11);
  sub_1AC1E0();
  sub_A18C4((uint64_t)v11);
  if (v22)
  {
    uint64_t v23 = (uint64_t)v11;
LABEL_33:
    sub_74610(v23);
    goto LABEL_34;
  }
LABEL_56:
  sub_A194C();
  sub_A18E4();
  (*(void (**)(void))(v33 + 32))();
  return result;
}

uint64_t sub_A0548(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1F47B8;
  v6._object = a2;
  unint64_t v4 = sub_1AD190(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 7) {
    return 7;
  }
  else {
    return v4;
  }
}

uint64_t sub_A0598()
{
  return 7;
}

uint64_t sub_A05A0(char a1)
{
  return *(void *)&aName_1[8 * a1];
}

uint64_t sub_A05C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_154410(*a1, *a2);
}

Swift::Int sub_A05CC()
{
  return sub_302C4(*v0);
}

uint64_t sub_A05D4(uint64_t a1)
{
  return sub_19D804(a1, *v1);
}

Swift::Int sub_A05DC(uint64_t a1)
{
  return sub_19D8F8(a1, *v1);
}

uint64_t sub_A05E4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_A0548(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_A0614@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_A05A0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_A0640()
{
  return sub_A05A0(*v0);
}

uint64_t sub_A0648@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_A0594();
  *a1 = result;
  return result;
}

void sub_A0670(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_A067C(uint64_t a1)
{
  unint64_t v2 = sub_A1578();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_A06B8(uint64_t a1)
{
  unint64_t v2 = sub_A1578();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_A06F4()
{
  sub_74610(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_name);
  sub_74610(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleString);
  sub_74610(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleID);
  sub_74610(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_medicationID);
  sub_74610(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strengthUnit);
  sub_74610(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_onSelectCommand);
  return v0;
}

uint64_t sub_A0774()
{
  return sub_A078C((void (*)(void))sub_A06F4);
}

uint64_t sub_A078C(void (*a1)(void))
{
  a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return _swift_deallocClassInstance(v1, v2, v3);
}

uint64_t sub_A07E8()
{
  return type metadata accessor for WellnessMedicationDialogObject(0);
}

uint64_t type metadata accessor for WellnessMedicationDialogObject(uint64_t a1)
{
  return sub_95FB8(a1, qword_205030);
}

void sub_A0810()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_A08C0(void *a1)
{
  uint64_t v3 = sub_2694(&qword_205350);
  sub_52C4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_E548();
  uint64_t v9 = v8 - v7;
  sub_2E38(a1, a1[3]);
  sub_A1578();
  sub_1AD3B0();
  sub_1AC1E0();
  sub_A13F8(&qword_202BC8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
  sub_A1840();
  if (!v1)
  {
    sub_A1840();
    sub_A1840();
    sub_A1840();
    sub_1AD260();
    sub_A1840();
    sub_A1840();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

uint64_t sub_A0AF8(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_A0C14(a1);
  return v2;
}

uint64_t sub_A0B48()
{
  return type metadata accessor for WellnessMedicationDialogObject.Builder(0);
}

uint64_t type metadata accessor for WellnessMedicationDialogObject.Builder(uint64_t a1)
{
  return sub_95FB8(a1, qword_205160);
}

void sub_A0B70()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_A0C14(void *a1)
{
  uint64_t v5 = sub_2694(&qword_201E28);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v39 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v37 - v12;
  __chkstk_darwin(v11);
  sub_A768();
  __chkstk_darwin(v14);
  sub_A19B4();
  __chkstk_darwin(v15);
  uint64_t v40 = (char *)&v37 - v16;
  sub_2694(&qword_205340);
  sub_52C4();
  uint64_t v41 = v17;
  uint64_t v42 = v18;
  __chkstk_darwin(v17);
  sub_E548();
  uint64_t v21 = v20 - v19;
  uint64_t v44 = a1;
  uint64_t v45 = v1;
  *(void *)(v1 + 16) = 0;
  sub_2E38(a1, a1[3]);
  sub_A1578();
  uint64_t v43 = v21;
  BOOL v22 = v46;
  sub_1AD3A0();
  if (v22)
  {
    uint64_t v27 = v45;

    uint64_t v31 = (uint64_t)v44;
    type metadata accessor for WellnessMedicationDialogObject(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v23 = v3;
    uint64_t v46 = v13;
    uint64_t v38 = v10;
    sub_1AC1E0();
    char v53 = 0;
    uint64_t v24 = sub_A13F8(&qword_202BE8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    uint64_t v25 = (uint64_t)v40;
    sub_A1910();
    sub_1AD1E0();
    uint64_t v27 = v45;
    sub_A1510(v25, v45 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_name);
    char v52 = 1;
    sub_A1910();
    sub_1AD1E0();
    sub_A1510(v23, v27 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleString);
    char v51 = 2;
    uint64_t v28 = v24;
    sub_A1910();
    uint64_t v40 = 0;
    sub_1AD1E0();
    sub_A1510(v2, v27 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_scheduleID);
    char v50 = 3;
    uint64_t v29 = (uint64_t)v46;
    sub_1AD1E0();
    uint64_t v37 = v28;
    sub_A1510(v29, v27 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_medicationID);
    char v49 = 4;
    uint64_t v30 = sub_1AD1D0();
    uint64_t v31 = (uint64_t)v44;
    uint64_t v32 = v27 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strength;
    *(void *)uint64_t v32 = v30;
    *(unsigned char *)(v32 + 8) = v33 & 1;
    char v48 = 5;
    uint64_t v34 = (uint64_t)v38;
    sub_1AD1E0();
    sub_A1510(v34, v27 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_strengthUnit);
    char v47 = 6;
    uint64_t v35 = (uint64_t)v39;
    sub_1AD1E0();
    sub_A1924();
    v36();
    sub_A1510(v35, v27 + OBJC_IVAR____TtC18WellnessFlowPlugin30WellnessMedicationDialogObject_onSelectCommand);
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v31);
  return v27;
}

unint64_t sub_A11E4()
{
  return 0xD00000000000001FLL;
}

void *sub_A1204()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = *(void **)(v1 + 16);
  id v3 = v2;
  return v2;
}

void sub_A124C(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = a1;
}

uint64_t (*sub_A1298())()
{
  return j__swift_endAccess;
}

double sub_A12F4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_A0048(a1, a2, a3);
}

uint64_t sub_A1318@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_A0AF8(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_A1344(void *a1)
{
  return sub_A08C0(a1);
}

uint64_t sub_A1368()
{
  return sub_A13F8(&qword_205330, (void (*)(uint64_t))type metadata accessor for WellnessMedicationDialogObject);
}

uint64_t sub_A13B0()
{
  return sub_A13F8(&qword_205338, (void (*)(uint64_t))type metadata accessor for WellnessMedicationDialogObject);
}

uint64_t sub_A13F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_A1440(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_201E28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_A14A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_201E28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_A1510(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_201E28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_A1578()
{
  unint64_t result = qword_205348;
  if (!qword_205348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205348);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WellnessMedicationDialogObject.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for WellnessMedicationDialogObject.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xA1718);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WellnessMedicationDialogObject.CodingKeys()
{
  return &type metadata for WellnessMedicationDialogObject.CodingKeys;
}

unint64_t sub_A1754()
{
  unint64_t result = qword_205358;
  if (!qword_205358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205358);
  }
  return result;
}

unint64_t sub_A17A4()
{
  unint64_t result = qword_205360;
  if (!qword_205360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205360);
  }
  return result;
}

unint64_t sub_A17F4()
{
  unint64_t result = qword_205368;
  if (!qword_205368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205368);
  }
  return result;
}

uint64_t sub_A1840()
{
  return sub_1AD270();
}

uint64_t sub_A1864()
{
  return sub_1AD2F0();
}

uint64_t sub_A1880()
{
  return swift_beginAccess();
}

uint64_t sub_A18A4@<X0>(uint64_t a1@<X8>)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v2 + a1, 1, 1, v1);
}

uint64_t sub_A18C4(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v1);
}

uint64_t sub_A18F4()
{
  return swift_beginAccess();
}

uint64_t sub_A1910()
{
  return v0;
}

uint64_t sub_A1934@<X0>(uint64_t a1@<X8>)
{
  return sub_A1510(v2, v1 + a1);
}

uint64_t *sub_A194C()
{
  uint64_t v3 = *(uint64_t **)(v1 - 88);
  v3[3] = v0;
  return sub_B5B0(v3);
}

uint64_t sub_A1964()
{
  return sub_A14A8(v1, v0);
}

uint64_t sub_A197C()
{
  return swift_beginAccess();
}

uint64_t sub_A19A0()
{
  return 0x6874676E65727473;
}

uint64_t sub_A19C8()
{
  return 0x656C756465686373;
}

uint64_t LogBloodPressureFlow.execute(completion:)()
{
  type metadata accessor for LogBloodPressureFlow();
  sub_A75D0(&qword_205370, v0, (void (*)(uint64_t))type metadata accessor for LogBloodPressureFlow);
  return sub_1AAF80();
}

uint64_t type metadata accessor for LogBloodPressureFlow()
{
  return self;
}

uint64_t LogBloodPressureFlow.execute()()
{
  sub_A364();
  v1[151] = v0;
  v1[150] = v2;
  uint64_t v3 = sub_1AAD30();
  v1[152] = v3;
  sub_A19C(v3);
  v1[153] = v4;
  v1[154] = sub_A42C();
  uint64_t v5 = sub_2694(&qword_201CC8);
  sub_53D4(v5);
  v1[155] = sub_A220();
  v1[156] = swift_task_alloc();
  uint64_t v6 = sub_2694(&qword_201E10);
  sub_53D4(v6);
  v1[157] = sub_A220();
  v1[158] = swift_task_alloc();
  uint64_t v7 = sub_1AABD0();
  v1[159] = v7;
  sub_A19C(v7);
  v1[160] = v8;
  v1[161] = sub_A220();
  v1[162] = swift_task_alloc();
  uint64_t v9 = sub_1AC250();
  sub_53D4(v9);
  v1[163] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_A1BD8()
{
  uint64_t v1 = v0[151];
  switch(*(unsigned char *)(v1 + 272))
  {
    case 1:
      sub_9B48(v1 + 96, (uint64_t)(v0 + 129));
      sub_1AB1C0();
      sub_47658();
      uint64_t v4 = sub_1AB1B0();
      type metadata accessor for LogBloodPressurePromptStartegy();
      uint64_t v5 = swift_allocObject();
      sub_A72B8(v0 + 129, v4, v5);
      swift_retain();
      sub_1AB350();
      sub_2694(&qword_205388);
      sub_47658();
      sub_A75D0(&qword_205390, 255, (void (*)(uint64_t))type metadata accessor for LogBloodPressurePromptStartegy);
      uint64_t v6 = sub_1AAE80();
      *(unsigned char *)(v1 + 272) = 2;
      v0[149] = v6;
      sub_B56C(qword_205398, &qword_205388);
      swift_retain();
      sub_1AB100();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_11;
    case 2:
      sub_1AB0F0();
      goto LABEL_11;
    case 3:
      swift_task_alloc();
      sub_250E0();
      v0[168] = v7;
      *uint64_t v7 = v8;
      v7[1] = sub_A2A58;
      sub_A79B4();
      return sub_A3244();
    case 4:
      sub_9B48(v1 + 96, (uint64_t)(v0 + 109));
      sub_9BA4();
      sub_1AB120();
      sub_9BF0((uint64_t)(v0 + 109));
LABEL_11:
      sub_A7918();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_E564();
      sub_A79B4();
      __asm { BRAA            X1, X16 }
      return result;
    default:
      v0[164] = sub_1AC570();
      uint64_t v2 = (void *)swift_task_alloc();
      v0[165] = v2;
      void *v2 = v0;
      v2[1] = sub_A1F48;
      sub_A79B4();
      return BloodPressurePersistor.isLoggingAuthorized()();
  }
}

uint64_t sub_A1F48()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v4 = *(void **)(v3 + 1312);
  uint64_t v5 = *v0;
  sub_A304();
  *uint64_t v6 = v5;
  *(unsigned char *)(v8 + 1352) = v7;
  swift_task_dealloc();

  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_A202C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_A7A14();
  sub_7F418();
  if (*(unsigned char *)(v10 + 1352))
  {
    uint64_t v12 = *(void *)(v10 + 1248);
    uint64_t v13 = *(void **)(v10 + 1208);
    uint64_t v14 = v13 + 2;
    uint64_t v15 = v13[5];
    uint64_t v16 = v13[6];
    sub_2E38(v13 + 2, v15);
    sub_9F5AC();
    uint64_t v18 = v17;
    sub_A42C();
    sub_A7A58();
    sub_E524();
    v19();
    (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v11, v15);
    uint64_t v20 = sub_1AAA10();
    int v21 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v12, 1, v20);
    uint64_t v22 = *(void *)(v10 + 1248);
    if (v21 == 1)
    {
      swift_task_dealloc();
      sub_5B028(v22, &qword_201CC8);
      sub_A7A8C();
    }
    else
    {
      sub_1AA9F0();
      sub_E558();
      v38();
      sub_A7AAC();
      sub_A78F4();
      if (!v39)
      {
        uint64_t v11 = *(void *)(v10 + 1232);
        uint64_t v64 = sub_A7AE4();
        v65(v64);
        sub_1AAD00();
        uint64_t v66 = sub_1AACB0();
        sub_4783C();
        v67();
        if ((v66 & 1) == 0)
        {
          uint64_t v75 = v10 + 312;
          sub_A797C();
          sub_E3FC(v66 + 56, v10 + 352);
          sub_9B48(v66 + 96, v10 + 392);
          uint64_t v76 = sub_1AB1C0();
          sub_47658();
          uint64_t v77 = sub_1AB1B0();
          *(void *)(v10 + 576) = v76;
          *(void *)(v10 + 584) = &protocol witness table for ResponseFactory;
          *(void *)(v10 + 552) = v77;
          type metadata accessor for WellnessLoggingCATsSimple();
          sub_A7A2C();
          uint64_t v78 = sub_1AC210();
          type metadata accessor for WellnessCATs();
          sub_A7A2C();
          uint64_t v79 = sub_1AC1A0();
          *(void *)(v10 + 592) = v78;
          *(void *)(v10 + 600) = v79;
LABEL_29:
          sub_2503C();
          sub_1AB120();
          sub_24EA0(v75);
          uint64_t v84 = sub_A7C4();
          v85(v84);
          goto LABEL_5;
        }
        sub_E530();
        v68();
LABEL_11:
        uint64_t v40 = *(void *)(v10 + 1240);
        uint64_t v41 = v13[5];
        uint64_t v42 = v13[6];
        sub_2E38(v14, v41);
        sub_9F5AC();
        uint64_t v44 = v43;
        sub_A42C();
        sub_A7A58();
        sub_E524();
        v45();
        (*(void (**)(uint64_t, uint64_t))(v42 + 32))(v41, v42);
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v11, v41);
        int v46 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v40, 1, v20);
        uint64_t v47 = *(void *)(v10 + 1240);
        if (v46 == 1)
        {
          swift_task_dealloc();
          sub_5B028(v47, &qword_201CC8);
          sub_A7A8C();
LABEL_15:
          sub_5B028(*(void *)(v10 + 1256), &qword_201E10);
          goto LABEL_16;
        }
        sub_1AA9C0();
        sub_E558();
        v48();
        sub_A7AAC();
        sub_A78F4();
        if (v39) {
          goto LABEL_15;
        }
        uint64_t v69 = sub_A7AE4();
        v70(v69);
        sub_1AAD00();
        uint64_t v71 = sub_1AACB0();
        uint64_t v72 = sub_A7C4();
        v73(v72);
        if (v71)
        {
          sub_E530();
          v74();
LABEL_16:
          uint64_t v49 = *(void *)(v10 + 1208);
          sub_A3C10();
          [*(id *)(v49 + 264) systolic];
          if (v50 == 0.0 && ([*(id *)(v49 + 264) diastolic], v51 == 0.0))
          {
            *(unsigned char *)(*(void *)(v10 + 1208) + 272) = 1;
            swift_task_alloc();
            sub_250E0();
            *(void *)(v10 + 1336) = v52;
            *char v52 = v53;
            v54 = sub_A28B8;
          }
          else
          {
            *(unsigned char *)(*(void *)(v10 + 1208) + 272) = 3;
            swift_task_alloc();
            sub_250E0();
            *(void *)(v10 + 1328) = v52;
            *char v52 = v55;
            v54 = sub_A2718;
          }
          v52[1] = v54;
          sub_A7964();
          return LogBloodPressureFlow.execute()(v56, v57, v58, v59, v60, v61, v62, v63, a9, a10);
        }
        uint64_t v75 = v10 + 16;
        sub_A797C();
        sub_E3FC(v71 + 56, v10 + 56);
        sub_9B48(v71 + 96, v10 + 96);
        uint64_t v80 = sub_1AB1C0();
        sub_47658();
        uint64_t v81 = sub_1AB1B0();
        *(void *)(v10 + 280) = v80;
        *(void *)(v10 + 288) = &protocol witness table for ResponseFactory;
        *(void *)(v10 + 256) = v81;
        type metadata accessor for WellnessLoggingCATsSimple();
        sub_A7A2C();
        uint64_t v82 = sub_1AC210();
        type metadata accessor for WellnessCATs();
        sub_A7A2C();
        uint64_t v83 = sub_1AC1A0();
        *(void *)(v10 + 296) = v82;
        *(void *)(v10 + 304) = v83;
        goto LABEL_29;
      }
    }
    sub_5B028(*(void *)(v10 + 1264), &qword_201E10);
    goto LABEL_11;
  }
  uint64_t v23 = *(void *)(v10 + 1208);
  char v24 = *(unsigned char *)(v23 + 288);
  sub_E3FC(v23 + 56, v10 + 616);
  sub_9B48(v23 + 96, v10 + 656);
  uint64_t v25 = sub_1AB1C0();
  sub_47658();
  uint64_t v26 = sub_1AB1B0();
  *(void *)(v10 + 840) = v25;
  *(void *)(v10 + 848) = &protocol witness table for ResponseFactory;
  *(void *)(v10 + 816) = v26;
  type metadata accessor for WellnessCATsSimple();
  sub_1AC240();
  uint64_t v27 = sub_1AC210();
  type metadata accessor for WellnessCATs();
  sub_1AC240();
  uint64_t v28 = sub_1AC1A0();
  *(unsigned char *)(v10 + 608) = v24;
  *(void *)(v10 + 856) = v27;
  *(void *)(v10 + 864) = v28;
  sub_9D40();
  sub_1AB120();
  sub_9D8C(v10 + 608);
LABEL_5:
  sub_A7918();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_A7964();
  return v30(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10);
}

uint64_t sub_A2718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_A7A14();
  sub_7F418();
  sub_470A0();
  uint64_t v11 = *v10;
  sub_A304();
  void *v12 = v11;
  swift_task_dealloc();
  sub_47C98();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A79EC();
  sub_A7964();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_A28B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_A7A14();
  sub_7F418();
  sub_470A0();
  uint64_t v11 = *v10;
  sub_A304();
  void *v12 = v11;
  swift_task_dealloc();
  sub_47C98();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A79EC();
  sub_A7964();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_A2A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_A7A14();
  sub_7F418();
  sub_470A0();
  uint64_t v11 = *v10;
  sub_A304();
  void *v12 = v11;
  swift_task_dealloc();
  sub_47C98();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A79EC();
  sub_A7964();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

id sub_A2BF8(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_205570);
  sub_9F5AC();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_E594();
  uint64_t v66 = v6;
  sub_A358();
  __chkstk_darwin(v7);
  uint64_t v63 = (double *)((char *)v57 - v8);
  sub_A358();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v57 - v10;
  uint64_t v12 = sub_1AC800();
  sub_9F5AC();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_E594();
  v57[1] = v16;
  sub_A358();
  __chkstk_darwin(v17);
  v67 = (char *)v57 - v18;
  sub_A358();
  __chkstk_darwin(v19);
  uint64_t v20 = sub_1AC7D0();
  sub_A340();
  uint64_t v21 = *(void *)(v14 + 16);
  uint64_t v61 = v14 + 16;
  uint64_t v62 = v20;
  uint64_t v60 = v21;
  sub_E524();
  v22();
  uint64_t v69 = v4;
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v65 = a1;
  uint64_t v59 = v23;
  v23((uint64_t)v11, a1, v2);
  char v24 = sub_1AC7F0();
  os_log_type_t v25 = sub_1ACF50();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v68 = v14;
  if (v26)
  {
    uint64_t v27 = sub_A4B0();
    uint64_t v58 = v12;
    uint64_t v28 = (uint8_t *)v27;
    v73[0] = sub_E620();
    *(_DWORD *)uint64_t v28 = 136315138;
    uint64_t v64 = v28 + 4;
    sub_B56C(&qword_205578, &qword_205570);
    uint64_t v29 = sub_1AD2C0();
    uint64_t v72 = sub_4A278(v29, v30, v73);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v31 = v69;
    uint64_t v32 = *(void (**)(void))(v69 + 8);
    sub_E530();
    v32();
    _os_log_impl(&def_342E4, v24, v25, "Received response from PromptForValueFlowAsync: %s", v28, 0xCu);
    sub_A79D0();
    sub_A1F0();
    uint64_t v12 = v58;
    sub_A1F0();

    uint64_t v33 = v68;
  }
  else
  {
    uint64_t v31 = v69;
    uint64_t v32 = *(void (**)(void))(v69 + 8);
    sub_E530();
    v32();

    uint64_t v33 = v14;
  }
  uint64_t v64 = *(uint8_t **)(v33 + 8);
  sub_E530();
  v34();
  uint64_t v35 = v63;
  uint64_t v36 = v65;
  uint64_t v37 = v59;
  v59((uint64_t)v63, v65, v2);
  int v38 = (*(uint64_t (**)(double *, uint64_t))(v31 + 88))(v35, v2);
  uint64_t v39 = v66;
  if (v38 == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(double *, uint64_t))(v31 + 96))(v35, v2);
    double v41 = *v35;
    double v40 = v35[1];
    sub_A340();
    sub_E524();
    v42();
    v37(v39, v36, v2);
    uint64_t v43 = sub_1AC7F0();
    os_log_type_t v44 = sub_1ACF50();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)sub_A4B0();
      uint64_t v72 = sub_E620();
      *(_DWORD *)uint64_t v45 = 136315138;
      uint64_t v58 = v12;
      sub_B56C(&qword_205578, &qword_205570);
      uint64_t v46 = sub_1AD2C0();
      uint64_t v71 = sub_4A278(v46, v47, &v72);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      sub_E530();
      v32();
      _os_log_impl(&def_342E4, v43, v44, "PromptForValueFlowAsync returned: %s", v45, 0xCu);
      sub_A79D0();
      sub_A1F0();
      sub_A1F0();
    }
    else
    {
      sub_E530();
      v32();

      sub_A7A44();
    }
    sub_E530();
    v55();
    uint64_t v56 = v70;
    [*(id *)(v70 + 264) setSystolic:v41];
    id result = [*(id *)(v56 + 264) setDiastolic:v40];
    char v54 = 3;
  }
  else
  {
    sub_E530();
    v32();
    sub_A340();
    sub_E524();
    v48();
    uint64_t v49 = sub_1AC7F0();
    os_log_type_t v50 = sub_1ACF60();
    if (os_log_type_enabled(v49, v50))
    {
      double v51 = (uint8_t *)sub_292A0();
      *(_WORD *)double v51 = 0;
      _os_log_impl(&def_342E4, v49, v50, "PromptForValueFlowAsync did not return the needed values, erroring out", v51, 2u);
      sub_A1F0();
    }

    sub_A7A44();
    sub_E530();
    id result = (id)v52();
    char v54 = 4;
  }
  *(unsigned char *)(v70 + 272) = v54;
  return result;
}

uint64_t sub_A3244()
{
  sub_A364();
  v1[91] = v0;
  v1[90] = v2;
  uint64_t v3 = sub_1AC250();
  sub_53D4(v3);
  v1[92] = sub_A42C();
  uint64_t v4 = sub_1AC800();
  v1[93] = v4;
  sub_A19C(v4);
  v1[94] = v5;
  v1[95] = sub_A220();
  v1[96] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_A3300()
{
  uint64_t v1 = v0[96];
  uint64_t v2 = v0[94];
  uint64_t v3 = v0[93];
  uint64_t v4 = sub_1AC7D0();
  v0[97] = v4;
  sub_A340();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[98] = v5;
  v0[99] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v3);
  swift_retain_n();
  uint64_t v6 = sub_1AC7F0();
  os_log_type_t v7 = sub_1ACF50();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[91];
    uint64_t v9 = (uint8_t *)sub_A4B0();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    uint64_t v11 = *(void **)(v8 + 264);
    v0[89] = v11;
    id v12 = v11;
    sub_A7A6C();
    *uint64_t v10 = v11;
    swift_release_n();
    _os_log_impl(&def_342E4, v6, v7, "Executing intent: %@", v9, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v13 = v0[94];
  uint64_t v14 = v0[91];
  v0[100] = *(void *)(v13 + 8);
  v0[101] = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_E530();
  v16(v15);
  uint64_t v17 = *(void **)(v14 + 256);
  v0[102] = v17;
  uint64_t v18 = *(void **)(v14 + 264);
  v0[103] = v18;
  v0[2] = v0;
  v0[7] = v0 + 87;
  v0[3] = sub_A359C;
  v0[80] = swift_continuation_init();
  v0[76] = _NSConcreteStackBlock;
  v0[77] = 0x40000000;
  v0[78] = sub_6AA8;
  v0[79] = &unk_1F69F8;
  swift_unknownObjectRetain();
  [v17 handleLogBloodPressure:v18 completion:v0 + 76];
  sub_46EC4();
  return _swift_continuation_await(v19);
}

uint64_t sub_A359C()
{
  sub_A364();
  uint64_t v1 = *v0;
  sub_A304();
  void *v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_A366C()
{
  uint64_t v1 = *(void **)(v0 + 824);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 784);
  uint64_t v3 = *(void *)(v0 + 776);
  uint64_t v4 = *(void *)(v0 + 760);
  uint64_t v5 = *(void *)(v0 + 744);
  uint64_t v6 = *(void **)(v0 + 696);
  *(void *)(v0 + 832) = v6;
  swift_unknownObjectRelease();

  sub_A340();
  v2(v4, v3, v5);
  uint64_t v7 = v6;
  uint64_t v8 = sub_1AC7F0();
  os_log_type_t v9 = sub_1ACF50();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)sub_A4B0();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412290;
    *(void *)(v0 + 704) = v7;
    id v12 = v7;
    sub_A7A6C();
    *uint64_t v11 = v7;

    _os_log_impl(&def_342E4, v8, v9, "Received intent response: %@", v10, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
  }
  uint64_t v13 = (*(uint64_t (**)(void, void))(v0 + 800))(*(void *)(v0 + 760), *(void *)(v0 + 744));
  uint64_t v14 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v7)))(v13);
  if (v14 != 4)
  {
    if (v14 == 102)
    {
      uint64_t v24 = *(void *)(v0 + 728);
      char v25 = *(unsigned char *)(v24 + 288);
      sub_E3FC(v24 + 56, v0 + 512);
      uint64_t v26 = sub_1AB1C0();
      sub_47658();
      uint64_t v27 = sub_1AB1B0();
      *(void *)(v0 + 576) = v26;
      *(void *)(v0 + 584) = &protocol witness table for ResponseFactory;
      *(void *)(v0 + 552) = v27;
      type metadata accessor for WellnessLoggingCATsSimple();
      sub_A6A4();
      uint64_t v28 = sub_1AC210();
      type metadata accessor for WellnessCATs();
      sub_A6A4();
      uint64_t v29 = sub_1AC1A0();
      *(unsigned char *)(v0 + 504) = v25;
      *(void *)(v0 + 592) = v28;
      *(void *)(v0 + 600) = v29;
      sub_A7744();
      sub_1AB120();

      sub_A7790(v0 + 504);
    }
    else if (v14 == 101)
    {
      uint64_t v15 = *(void *)(v0 + 728);
      char v16 = *(unsigned char *)(v15 + 288);
      sub_E3FC(v15 + 56, v0 + 88);
      sub_9B48(v15 + 96, v0 + 128);
      uint64_t v17 = sub_1AB1C0();
      sub_47658();
      uint64_t v18 = sub_1AB1B0();
      *(void *)(v0 + 312) = v17;
      *(void *)(v0 + 320) = &protocol witness table for ResponseFactory;
      *(void *)(v0 + 288) = v18;
      type metadata accessor for WellnessCATsSimple();
      sub_A6A4();
      uint64_t v19 = sub_1AC210();
      type metadata accessor for WellnessCATs();
      sub_A6A4();
      uint64_t v20 = sub_1AC1A0();
      *(unsigned char *)(v0 + 80) = v16;
      *(void *)(v0 + 328) = v19;
      *(void *)(v0 + 336) = v20;
      sub_9D40();
      sub_1AB120();

      sub_9D8C(v0 + 80);
    }
    else
    {
      sub_9B48(*(void *)(v0 + 728) + 96, v0 + 344);
      sub_9BA4();
      sub_1AB120();

      sub_9BF0(v0 + 344);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_46EC4();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 840) = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_A3AB0;
  sub_46EC4();
  return sub_A4054();
}

uint64_t sub_A3AB0()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 848) = v3;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_A3B80()
{
  sub_A364();
  uint64_t v1 = *(void **)(v0 + 832);
  sub_1AB130();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v2();
}

void sub_A3C10()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1AC800();
  sub_9F5AC();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_E548();
  uint64_t v8 = v7 - v6;
  os_log_type_t v9 = v0 + 2;
  uint64_t v11 = v0[5];
  uint64_t v10 = v0[6];
  sub_2E38(v0 + 2, v11);
  sub_9F5AC();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_E548();
  uint64_t v17 = v16 - v15;
  sub_E524();
  v18();
  unint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 56))(v11, v10);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v11);
  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_1AD170();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = *(void *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFFF8));
  }
  if (v20 < 2) {
    goto LABEL_10;
  }
  unint64_t v21 = v19 & 0xC000000000000001;
  sub_4AA30(0, (v19 & 0xC000000000000001) == 0, v19);
  if ((v19 & 0xC000000000000001) != 0) {
    sub_1AD0A0();
  }
  else {
    swift_retain();
  }
  uint64_t v22 = sub_1ABA10();
  swift_release();
  if (!v22 || (v23 = sub_1AB6B0(), char v25 = v24, swift_release(), (v25 & 1) != 0))
  {
LABEL_10:
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_4AA30(1, v21 == 0, v19);
    if (v21) {
      sub_1AD0A0();
    }
    else {
      swift_retain();
    }
    swift_bridgeObjectRelease();
    uint64_t v30 = sub_1ABA10();
    swift_release();
    if (v30)
    {
      uint64_t v31 = sub_1AB6B0();
      char v33 = v32;
      swift_release();
      if ((v33 & 1) == 0)
      {
        [(id)v1[33] setSystolic:*(double *)&v23];
        [(id)v1[33] setDiastolic:*(double *)&v31];
        uint64_t v34 = (void *)v1[33];
        uint64_t v35 = v1[5];
        uint64_t v36 = v1[6];
        sub_2E38(v9, v35);
        sub_9F5AC();
        __chkstk_darwin(v37);
        sub_E548();
        sub_E524();
        v38();
        uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t))(v36 + 48);
        id v40 = v34;
        char v41 = v39(v35, v36);
        sub_4783C();
        v42();
        if (v41 == 61)
        {
          NSString v43 = 0;
        }
        else
        {
          sub_481F0(v41);
          NSString v43 = sub_1ACDC0();
          swift_bridgeObjectRelease();
        }
        [v40 setUnit:v43];

        return;
      }
    }
  }
  sub_1AC7D0();
  sub_A340();
  sub_E524();
  v26();
  uint64_t v27 = sub_1AC7F0();
  os_log_type_t v28 = sub_1ACF60();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)sub_292A0();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl(&def_342E4, v27, v28, "Failed to populate LogBloodPressureIntent: missing systolic/diastolic values", v29, 2u);
    sub_A1F0();
  }

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
}

uint64_t sub_A4054()
{
  sub_A364();
  v1[115] = v0;
  v1[114] = v2;
  uint64_t v3 = sub_1AB0A0();
  v1[116] = v3;
  sub_A19C(v3);
  v1[117] = v4;
  v1[118] = sub_A220();
  v1[119] = swift_task_alloc();
  uint64_t v5 = sub_1AB3D0();
  v1[120] = v5;
  sub_A19C(v5);
  v1[121] = v6;
  v1[122] = sub_A42C();
  uint64_t v7 = sub_2694(&qword_201E28);
  sub_53D4(v7);
  v1[123] = sub_A42C();
  uint64_t v8 = type metadata accessor for BloodPressureLogModel();
  v1[124] = v8;
  sub_53D4(v8);
  v1[125] = sub_A220();
  v1[126] = swift_task_alloc();
  v1[127] = swift_task_alloc();
  uint64_t v9 = sub_1AC1E0();
  v1[128] = v9;
  sub_A19C(v9);
  v1[129] = v10;
  v1[130] = sub_A42C();
  uint64_t v11 = sub_1AC800();
  v1[131] = v11;
  sub_A19C(v11);
  v1[132] = v12;
  v1[133] = sub_A220();
  v1[134] = swift_task_alloc();
  v1[135] = swift_task_alloc();
  v1[136] = swift_task_alloc();
  v1[137] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for SnippetHeaderModel();
  v1[138] = v13;
  sub_53D4(v13);
  v1[139] = sub_A220();
  v1[140] = swift_task_alloc();
  v1[141] = swift_task_alloc();
  uint64_t v14 = sub_1AAB10();
  v1[142] = v14;
  sub_A19C(v14);
  v1[143] = v15;
  v1[144] = sub_A220();
  v1[145] = swift_task_alloc();
  uint64_t v16 = sub_2694(&qword_201E20);
  sub_53D4(v16);
  v1[146] = sub_A220();
  v1[147] = swift_task_alloc();
  uint64_t v17 = sub_2694(&qword_201E10);
  sub_53D4(v17);
  v1[148] = sub_A220();
  v1[149] = swift_task_alloc();
  v1[150] = swift_task_alloc();
  v1[151] = swift_task_alloc();
  v1[152] = swift_task_alloc();
  uint64_t v18 = sub_1AABD0();
  v1[153] = v18;
  sub_A19C(v18);
  v1[154] = v19;
  v1[155] = sub_A220();
  v1[156] = swift_task_alloc();
  v1[157] = swift_task_alloc();
  v1[158] = swift_task_alloc();
  v1[159] = swift_task_alloc();
  uint64_t v20 = sub_2694(&qword_201CC8);
  sub_53D4(v20);
  v1[160] = sub_A220();
  v1[161] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v21, v22, v23);
}

uint64_t sub_A439C()
{
  uint64_t v1 = *(void *)(v0 + 1288);
  uint64_t v2 = *(void **)(v0 + 912);
  uint64_t v3 = sub_1AAA10();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, v3);
  id v4 = [v2 sampleStart];
  if (!v4)
  {
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 1216), 1, 1, *(void *)(v0 + 1224));
    goto LABEL_7;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v0 + 1232);
  uint64_t v7 = *(void *)(v0 + 1224);
  uint64_t v8 = *(void *)(v0 + 1216);
  sub_1AABB0();

  uint64_t v9 = *(void (**)(uint64_t))(v6 + 32);
  uint64_t v10 = sub_A79FC();
  v9(v10);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, 0, 1, v7);
  sub_A78F4();
  if (v11)
  {
LABEL_7:
    uint64_t v25 = *(void *)(v0 + 1216);
    goto LABEL_10;
  }
  uint64_t v12 = *(void **)(v0 + 912);
  ((void (*)(void, void, void))v9)(*(void *)(v0 + 1272), *(void *)(v0 + 1216), *(void *)(v0 + 1224));
  id v13 = [v12 sampleEnd];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v0 + 1224);
    uint64_t v16 = *(void *)(v0 + 1208);
    sub_1AABB0();

    uint64_t v17 = sub_A79FC();
    v9(v17);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v16, 0, 1, v15);
    sub_A78F4();
    if (!v11)
    {
      uint64_t v40 = *(void *)(v0 + 1280);
      uint64_t v41 = *(void *)(v0 + 1288);
      uint64_t v18 = *(void *)(v0 + 1272);
      uint64_t v19 = *(void *)(v0 + 1264);
      uint64_t v20 = *(void *)(v0 + 1256);
      uint64_t v39 = *(void *)(v0 + 1248);
      uint64_t v21 = *(void *)(v0 + 1232);
      uint64_t v22 = *(void *)(v0 + 1224);
      ((void (*)(uint64_t, void, uint64_t))v9)(v20, *(void *)(v0 + 1208), v22);
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
      v23(v19, v18, v22);
      v23(v39, v20, v22);
      sub_1AA9D0();
      char v24 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v24(v20, v22);
      v24(v18, v22);
      sub_5B028(v41, &qword_201CC8);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v40, 0, 1, v3);
      sub_A76E8(v40, v41, &qword_201CC8);
      goto LABEL_11;
    }
  }
  else
  {
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 1208), 1, 1, *(void *)(v0 + 1224));
  }
  uint64_t v26 = *(void *)(v0 + 1208);
  sub_E530();
  v27();
  uint64_t v25 = v26;
LABEL_10:
  sub_5B028(v25, &qword_201E10);
LABEL_11:
  os_log_type_t v28 = *(void **)(v0 + 1288);
  char v29 = *(unsigned char *)(*(void *)(v0 + 920) + 288);
  *(unsigned char *)(v0 + 1448) = v29;
  sub_153CEC(v29, v28);
  *(void *)(v0 + 680) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 688) = sub_45E30();
  *(unsigned char *)(v0 + 656) = 4;
  char v30 = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 656);
  if (v30)
  {
    sub_2F2B8(v29);
    *(void *)(v0 + 1296) = v31;
    char v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 1304) = v32;
    *char v32 = v0;
    v32[1] = sub_A47F0;
    return sub_7A988();
  }
  else
  {
    uint64_t v34 = *(void *)(v0 + 1176);
    uint64_t v35 = *(void *)(v0 + 920);
    uint64_t v36 = *(void *)(v0 + 912);
    sub_E3FC(v35 + 176, v0 + 616);
    sub_2E38((void *)(v0 + 616), *(void *)(v0 + 640));
    uint64_t v37 = (void *)swift_task_alloc();
    *(void *)(v0 + 1424) = v37;
    v37[2] = v36;
    v37[3] = v35;
    v37[4] = v34;
    int v38 = (void *)swift_task_alloc();
    *(void *)(v0 + 1432) = v38;
    *int v38 = v0;
    v38[1] = sub_A63C0;
    return sub_135470();
  }
}

uint64_t sub_A47F0()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = *v0;
  sub_A304();
  *id v4 = v3;
  *(void *)(v6 + 1312) = v5;
  *(void *)(v6 + 1320) = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_A48DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_A7948();
  a43 = v45;
  a44 = v46;
  sub_A7AF8();
  a42 = v44;
  uint64_t v47 = *(void *)(v44 + 1168);
  uint64_t v48 = *(void *)(v44 + 1136);
  sub_45DC8(*(void *)(v44 + 1176), v47);
  int v49 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v47, 1, v48);
  uint64_t v50 = *(void *)(v44 + 1320);
  uint64_t v51 = *(void *)(v44 + 1168);
  if (v49 == 1)
  {
    swift_bridgeObjectRelease();
    char v52 = &qword_201E20;
LABEL_13:
    sub_5B028(v51, v52);
    goto LABEL_14;
  }
  (*(void (**)(void, void, void))(*(void *)(v44 + 1144) + 32))(*(void *)(v44 + 1160), *(void *)(v44 + 1168), *(void *)(v44 + 1136));
  if (!v50)
  {
    sub_E530();
    v82();
LABEL_14:
    uint64_t v85 = *(void *)(v44 + 1064);
    uint64_t v86 = *(void *)(v44 + 1056);
    uint64_t v87 = *(void *)(v44 + 1048);
    uint64_t v88 = sub_1AC7D0();
    sub_A340();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v85, v88, v87);
    v89 = sub_1AC7F0();
    os_log_type_t v90 = sub_1ACF60();
    if (os_log_type_enabled(v89, v90))
    {
      *(_WORD *)sub_292A0() = 0;
      sub_A7FC(&def_342E4, v91, v92, "#LogBloodPressureFlow: Invalid link or labels or response unit/start time");
      sub_A1F0();
    }
    uint64_t v93 = *(void *)(v44 + 1288);
    uint64_t v94 = *(void *)(v44 + 1176);
    uint64_t v95 = *(void *)(v44 + 1064);
    uint64_t v96 = *(void *)(v44 + 1056);
    uint64_t v97 = *(void *)(v44 + 1048);
    uint64_t v98 = *(void *)(v44 + 920);

    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v97);
    sub_9B48(v98 + 96, v44 + 176);
    sub_9BA4();
    uint64_t v144 = sub_1AAF70();
    sub_9BF0(v44 + 176);
    sub_5B028(v93, &qword_201CC8);
    sub_5B028(v94, &qword_201E20);
    sub_A78A4();
    uint64_t v117 = v100;
    uint64_t v118 = v99;
    uint64_t v119 = *(void *)(v44 + 1176);
    uint64_t v120 = *(void *)(v44 + 1168);
    uint64_t v121 = *(void *)(v44 + 1160);
    uint64_t v122 = *(void *)(v44 + 1152);
    uint64_t v123 = *(void *)(v44 + 1128);
    uint64_t v124 = *(void *)(v44 + 1120);
    uint64_t v125 = *(void *)(v44 + 1112);
    uint64_t v126 = *(void *)(v44 + 1096);
    uint64_t v127 = *(void *)(v44 + 1088);
    uint64_t v128 = *(void *)(v44 + 1080);
    uint64_t v129 = *(void *)(v44 + 1072);
    uint64_t v130 = *(void *)(v44 + 1064);
    uint64_t v131 = *(void *)(v44 + 1040);
    uint64_t v132 = *(void *)(v44 + 1016);
    uint64_t v133 = *(void *)(v44 + 1008);
    uint64_t v135 = *(void *)(v44 + 1000);
    uint64_t v137 = *(void *)(v44 + 984);
    uint64_t v140 = *(void *)(v44 + 976);
    uint64_t v141 = *(void *)(v44 + 952);
    uint64_t v143 = *(void *)(v44 + 944);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_A78D8();
    return v103(v101, v102, v103, v104, v105, v106, v107, v108, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127,
             v128,
             v129,
             v130,
             v131,
             v132,
             v133,
             v135,
             v137,
             v140,
             v141,
             v143,
             v144,
             a32,
             a33,
             a34,
             a35,
             a36);
  }
  sub_A7254(*(void **)(v44 + 912));
  if (!v53)
  {
    sub_E530();
    v83();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  id v54 = [*(id *)(v44 + 912) sampleStart];
  if (!v54)
  {
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v44 + 1200), 1, 1, *(void *)(v44 + 1224));
    goto LABEL_12;
  }
  uint64_t v55 = v54;
  uint64_t v56 = *(void *)(v44 + 1264);
  uint64_t v57 = *(void *)(v44 + 1232);
  uint64_t v58 = *(void *)(v44 + 1224);
  uint64_t v59 = *(void *)(v44 + 1200);
  sub_1AABB0();

  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32);
  v60(v59, v56, v58);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v59, 0, 1, v58);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v59, 1, v58) == 1)
  {
LABEL_12:
    uint64_t v51 = *(void *)(v44 + 1200);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_A7C4();
    sub_4783C();
    v84();
    char v52 = &qword_201E10;
    goto LABEL_13;
  }
  uint64_t v61 = *(void *)(v44 + 1128);
  uint64_t v142 = *(void *)(v44 + 1120);
  uint64_t v134 = *(void *)(v44 + 1104);
  uint64_t v62 = *(void *)(v44 + 1056);
  uint64_t v136 = *(void *)(v44 + 1096);
  uint64_t v138 = *(void *)(v44 + 1048);
  char v63 = *(unsigned char *)(v44 + 1448);
  v60(*(void *)(v44 + 1240), *(void *)(v44 + 1200), *(void *)(v44 + 1224));
  *(void *)(v44 + 1328) = sub_1AC0E0();
  sub_47658();
  sub_1AC0D0();
  sub_1AABA0();
  sub_1AC0C0();
  swift_release();
  *(void *)(v44 + 1336) = sub_1AC0B0();
  swift_release();
  sub_1ACE40();
  swift_bridgeObjectRelease();
  unint64_t v64 = sub_34250(v63);
  unint64_t v66 = v65;
  unint64_t v67 = sub_2F2B8(v63);
  uint64_t v68 = (unint64_t *)(v61 + *(int *)(v134 + 20));
  *uint64_t v68 = v64;
  v68[1] = v66;
  uint64_t v69 = (unint64_t *)(v61 + *(int *)(v134 + 24));
  *uint64_t v69 = v67;
  v69[1] = v70;
  uint64_t v71 = sub_1AC7D0();
  *(void *)(v44 + 1344) = v71;
  sub_A340();
  uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16);
  *(void *)(v44 + 1352) = v72;
  *(void *)(v44 + 1360) = (v62 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v72(v136, v71, v138);
  sub_A751C(v61, v142, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  v73 = sub_1AC7F0();
  os_log_type_t v74 = sub_1ACF50();
  BOOL v75 = os_log_type_enabled(v73, v74);
  uint64_t v76 = *(void *)(v44 + 1120);
  if (v75)
  {
    uint64_t v77 = *(void *)(v44 + 1112);
    uint64_t v139 = *(void *)(v44 + 1056);
    uint64_t v78 = (uint8_t *)sub_A4B0();
    a32 = sub_E620();
    *(_DWORD *)uint64_t v78 = 136315138;
    sub_A751C(v76, v77, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    uint64_t v79 = sub_1ACE00();
    *(void *)(v44 + 904) = sub_4A278(v79, v80, &a32);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_A757C(v76, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    _os_log_impl(&def_342E4, v73, v74, "#LogBloodPressureFlow: Snippet header model %s", v78, 0xCu);
    sub_A79D0();
    sub_A1F0();
    sub_A1F0();

    uint64_t v81 = *(void (**)(void))(v139 + 8);
    sub_E530();
    v81();
  }
  else
  {
    uint64_t v110 = *(void *)(v44 + 1096);
    uint64_t v111 = *(void *)(v44 + 1056);
    uint64_t v112 = *(void *)(v44 + 1048);
    sub_A757C(*(void *)(v44 + 1120), (void (*)(void))type metadata accessor for SnippetHeaderModel);

    uint64_t v81 = *(void (**)(void))(v111 + 8);
    ((void (*)(uint64_t, uint64_t))v81)(v110, v112);
  }
  *(void *)(v44 + 1368) = v81;
  sub_1ACE40();
  swift_bridgeObjectRelease();
  v113 = (void *)swift_task_alloc();
  *(void *)(v44 + 1376) = v113;
  void *v113 = v44;
  v113[1] = sub_A50D8;
  sub_A78D8();
  return sub_7A658(v114, v115);
}

uint64_t sub_A50D8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 1384) = v3;
  *(void *)(v1 + 1392) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_A51AC()
{
  id v54 = v0;
  uint64_t v1 = (void *)v0[114];
  sub_E524();
  v2();
  swift_allocObject();
  sub_1AC0D0();
  id v3 = [v1 sampleEnd];
  if (v3)
  {
    uint64_t v4 = v3;
    sub_1AABB0();

    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = v0[153];
  uint64_t v7 = v0[149];
  uint64_t v8 = v0[148];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, v5, 1, v6);
  sub_A76E8(v8, v7, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v6))
  {
    sub_5B028(v0[149], &qword_201E10);
  }
  else
  {
    uint64_t v9 = v0[158];
    uint64_t v10 = v0[154];
    uint64_t v11 = v0[153];
    uint64_t v12 = v0[149];
    sub_E524();
    v13();
    sub_5B028(v12, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  uint64_t v14 = v0[174];
  uint64_t v15 = v0[173];
  char v52 = (void (*)(uint64_t, uint64_t, uint64_t))v0[169];
  uint64_t v16 = v0[168];
  uint64_t v17 = v0[141];
  uint64_t v18 = v0[139];
  uint64_t v48 = v0[144];
  uint64_t v49 = v0[136];
  uint64_t v19 = v0[127];
  uint64_t v50 = v0[131];
  uint64_t v51 = v0[126];
  uint64_t v20 = (void *)v0[114];
  sub_1AC0C0();
  swift_release();
  uint64_t v21 = sub_1AC0B0();
  swift_release();
  [v20 systolic];
  uint64_t v23 = v22;
  [v20 diastolic];
  uint64_t v25 = v24;
  if (v14) {
    uint64_t v26 = v15;
  }
  else {
    uint64_t v26 = 0x646567676F4CLL;
  }
  if (!v14) {
    uint64_t v14 = 0xE600000000000000;
  }
  sub_A751C(v17, v18, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v27 = sub_1AC1D0();
  BloodPressureLogModel.init(url:date:dateLabel:systolic:diastolic:loggedLabel:snippetHeaderModel:unitLabel:)(v48, v21, v26, v14, v18, v27, v19, v23, v25, v28);
  sub_A340();
  v52(v49, v16, v50);
  sub_A751C(v19, v51, (void (*)(void))type metadata accessor for BloodPressureLogModel);
  char v29 = sub_1AC7F0();
  os_log_type_t v30 = sub_1ACF50();
  BOOL v31 = os_log_type_enabled(v29, v30);
  char v32 = (void (*)(uint64_t, uint64_t))v0[171];
  uint64_t v33 = v0[136];
  uint64_t v34 = v0[131];
  uint64_t v35 = v0[126];
  if (v31)
  {
    uint64_t v36 = v0[125];
    uint64_t v37 = (uint8_t *)sub_A4B0();
    uint64_t v53 = sub_E620();
    *(_DWORD *)uint64_t v37 = 136315138;
    sub_A751C(v35, v36, (void (*)(void))type metadata accessor for BloodPressureLogModel);
    uint64_t v38 = sub_1ACE00();
    v0[112] = sub_4A278(v38, v39, &v53);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_A757C(v35, (void (*)(void))type metadata accessor for BloodPressureLogModel);
    _os_log_impl(&def_342E4, v29, v30, "#LogBloodPressureFlow: Snippet model %s", v37, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    sub_E530();
    v40();
  }
  else
  {
    sub_A757C(v0[126], (void (*)(void))type metadata accessor for BloodPressureLogModel);

    v32(v33, v34);
  }
  uint64_t v41 = v0[130];
  uint64_t v42 = v0[129];
  uint64_t v43 = v0[128];
  uint64_t v44 = v0[123];
  uint64_t v45 = (void *)v0[114];
  [v45 systolic];
  [v45 diastolic];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v44, v41, v43);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v44, 0, 1, v43);
  uint64_t v46 = (void *)swift_task_alloc();
  v0[175] = v46;
  *uint64_t v46 = v0;
  v46[1] = sub_A5708;
  return sub_1A3044();
}

uint64_t sub_A5708()
{
  sub_470A0();
  sub_E53C();
  *id v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v7 + 1408) = v6;
  swift_task_dealloc();
  sub_47C98();
  uint64_t v9 = *(void *)(v8 + 984);
  if (v0)
  {
    swift_errorRelease();
    sub_5B028(v9, &qword_201E28);
  }
  else
  {
    sub_5B028(*(void *)(v8 + 984), &qword_201E28);
  }
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_A5834()
{
  char v32 = v0;
  uint64_t v1 = (void *)v0[176];
  uint64_t v2 = (void (*)(uint64_t))v0[169];
  sub_A340();
  uint64_t v3 = sub_470B8();
  v2(v3);
  id v4 = v1;
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[176];
  if (!v7)
  {
    uint64_t v18 = (void (*)(void))v0[171];

    sub_E530();
    v18();
    goto LABEL_11;
  }
  uint64_t v9 = (uint8_t *)sub_A4B0();
  uint64_t v31 = sub_E620();
  *(_DWORD *)uint64_t v9 = 136315138;
  id v10 = [v8 dialog];
  sub_7B324();
  unint64_t v11 = sub_1ACED0();

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1AD170();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8));
    if (v12)
    {
LABEL_4:
      sub_4AA30(0, (v11 & 0xC000000000000001) == 0, v11);
      if ((v11 & 0xC000000000000001) != 0) {
        id v13 = (id)sub_1AD0A0();
      }
      else {
        id v13 = *(id *)(v11 + 32);
      }
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      id v15 = [v14 fullPrint];

      uint64_t v12 = sub_1ACDD0();
      uint64_t v17 = v16;

      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = 0;
LABEL_10:
  uint64_t v19 = (void *)v0[176];
  uint64_t v29 = v0[135];
  os_log_type_t v30 = (void (*)(uint64_t, uint64_t))v0[171];
  uint64_t v28 = v0[131];
  v0[107] = v12;
  v0[108] = v17;
  sub_2694(&qword_2032A8);
  uint64_t v20 = sub_1ACFC0();
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  v0[111] = sub_4A278(v20, v22, &v31);
  sub_1ACFE0();
  swift_bridgeObjectRelease();

  _os_log_impl(&def_342E4, v5, v6, "#GenerateLoggingResponseOutput: Snippet dialog is %s", v9, 0xCu);
  swift_arrayDestroy();
  sub_A1F0();
  sub_A1F0();

  v30(v29, v28);
LABEL_11:
  uint64_t v23 = v0[127];
  v0[75] = type metadata accessor for WellnessSnippets();
  v0[76] = sub_A75D0((unint64_t *)&qword_202590, 255, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  uint64_t v24 = sub_B5B0(v0 + 72);
  sub_A751C(v23, (uint64_t)v24, (void (*)(void))type metadata accessor for BloodPressureLogModel);
  swift_storeEnumTagMultiPayload();
  swift_task_alloc();
  sub_250E0();
  v0[177] = (uint64_t)v25;
  *uint64_t v25 = v26;
  v25[1] = sub_A5C20;
  return sub_7ADEC();
}

uint64_t sub_A5C20()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 576;
  uint64_t v4 = *v0;
  sub_A304();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_A5CF0()
{
  uint64_t v1 = *(void **)(v0 + 1408);
  uint64_t v16 = *(void *)(v0 + 1288);
  uint64_t v2 = *(void *)(v0 + 1232);
  uint64_t v12 = *(void *)(v0 + 1224);
  uint64_t v13 = *(void *)(v0 + 1240);
  uint64_t v17 = *(void *)(v0 + 1176);
  uint64_t v15 = *(void *)(v0 + 1160);
  uint64_t v3 = *(void *)(v0 + 1144);
  uint64_t v14 = *(void *)(v0 + 1136);
  uint64_t v10 = *(void *)(v0 + 1040);
  uint64_t v11 = *(void *)(v0 + 1128);
  uint64_t v4 = *(void *)(v0 + 1032);
  uint64_t v8 = *(void *)(v0 + 1016);
  uint64_t v9 = *(void *)(v0 + 1024);
  sub_E3FC(v0 + 536, v0 + 696);
  uint64_t v5 = swift_allocObject();
  sub_24D80((long long *)(v0 + 696), v5 + 16);
  sub_1AB350();
  sub_1AAE40();
  sub_47658();
  *(void *)(v0 + 872) = sub_1AAE30();
  uint64_t v18 = sub_1AAF70();
  swift_release();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 536);
  sub_A757C(v8, (void (*)(void))type metadata accessor for BloodPressureLogModel);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v10, v9);
  sub_A757C(v11, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v13, v12);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v15, v14);
  sub_5B028(v16, &qword_201CC8);
  sub_5B028(v17, &qword_201E20);
  swift_release();
  sub_A78A4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v6(v18);
}

uint64_t sub_A6098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_A7948();
  sub_A7AF8();
  uint64_t v37 = (void (*)(uint64_t))v36[169];
  sub_A340();
  uint64_t v38 = sub_470B8();
  v37(v38);
  unint64_t v39 = sub_1AC7F0();
  os_log_type_t v40 = sub_1ACF60();
  if (os_log_type_enabled(v39, v40))
  {
    *(_WORD *)sub_292A0() = 0;
    sub_A7FC(&def_342E4, v41, v42, "#LogBloodPressureFlow: Invalid dialog");
    sub_A1F0();
  }
  uint64_t v43 = (void (*)(void))v36[171];
  uint64_t v58 = v36[167];
  uint64_t v67 = v36[161];
  uint64_t v64 = v36[155];
  uint64_t v44 = v36[154];
  uint64_t v62 = v36[153];
  uint64_t v68 = v36[147];
  uint64_t v66 = v36[145];
  uint64_t v63 = v36[143];
  uint64_t v65 = v36[142];
  uint64_t v60 = v36[130];
  uint64_t v61 = v36[141];
  uint64_t v45 = v36[129];
  uint64_t v59 = v36[128];
  uint64_t v57 = v36[127];
  uint64_t v46 = v36[115];

  sub_A7C4();
  sub_E530();
  v43();
  sub_9B48(v46 + 96, (uint64_t)(v36 + 2));
  sub_9BA4();
  uint64_t v69 = sub_1AAF70();
  swift_release();
  sub_9BF0((uint64_t)(v36 + 2));
  sub_A757C(v57, (void (*)(void))type metadata accessor for BloodPressureLogModel);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v60, v59);
  sub_A757C(v61, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v64, v62);
  sub_E558();
  v47();
  sub_5B028(v67, &qword_201CC8);
  sub_5B028(v68, &qword_201E20);
  sub_A77E4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A79A4();
  sub_A78D8();
  return v50(v48, v49, v50, v51, v52, v53, v54, v55, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           v57,
           v58,
           v59,
           v60,
           v61,
           v62,
           v63,
           v64,
           v65,
           v66,
           v67,
           v68,
           v69,
           a33,
           a34,
           a35,
           a36);
}

uint64_t sub_A63C0(uint64_t a1)
{
  uint64_t v4 = *v2;
  sub_A304();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v4 + 1440) = a1;
  }
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_A6508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_A7948();
  sub_A7AF8();
  uint64_t v37 = (void *)v36[180];
  uint64_t v57 = v36[147];
  uint64_t v38 = v36[122];
  uint64_t v39 = v36[121];
  uint64_t v55 = v36[120];
  uint64_t v56 = v36[161];
  uint64_t v40 = v36[115] + 96;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v36 + 77));
  id v41 = v37;
  sub_1AB070();
  sub_470B8();
  sub_E524();
  v42();
  sub_1AB370();
  sub_4783C();
  v43();
  id v44 = [v41 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_E3FC(v40, (uint64_t)(v36 + 62));
  sub_2E38(v36 + 62, v36[65]);
  uint64_t v45 = sub_1AAF40();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v36 + 62));
  v36[110] = v45;
  sub_1AAEF0();
  uint64_t v58 = sub_1AAF70();

  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v55);
  sub_5B028(v56, &qword_201CC8);
  sub_5B028(v57, &qword_201E20);
  swift_release();
  sub_A77E4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A79A4();
  sub_A78D8();
  return v48(v46, v47, v48, v49, v50, v51, v52, v53, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           v55,
           v56,
           v57,
           v58,
           a33,
           a34,
           a35,
           a36);
}

uint64_t sub_A67E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_A7948();
  sub_A7AF8();
  uint64_t v37 = v36[161];
  uint64_t v38 = v36[147];
  uint64_t v39 = v36[115] + 96;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v36 + 77));
  sub_9B48(v39, (uint64_t)(v36 + 42));
  sub_9BA4();
  uint64_t v49 = sub_1AAF70();
  sub_9BF0((uint64_t)(v36 + 42));
  sub_5B028(v37, &qword_201CC8);
  sub_5B028(v38, &qword_201E20);
  sub_A77E4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A79A4();
  sub_A78D8();
  return v42(v40, v41, v42, v43, v44, v45, v46, v47, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           v49,
           a33,
           a34,
           a35,
           a36);
}

uint64_t sub_A69A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v79 = a4;
  uint64_t v7 = sub_1AAC20();
  uint64_t v77 = *(void *)(v7 - 8);
  uint64_t v78 = v7;
  __chkstk_darwin(v7);
  uint64_t v76 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2694(&qword_201E20);
  __chkstk_darwin(v9 - 8);
  uint64_t v81 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1AABD0();
  uint64_t v75 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_2694(&qword_201E10);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v75 - v18;
  uint64_t v20 = sub_2694(&qword_201E28);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  unint64_t v80 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v75 - v23;
  [a2 systolic];
  double v26 = v25;
  uint64_t v27 = sub_A7254(a2);
  unsigned __int8 v28 = *(unsigned char *)(a3 + 288);
  double v30 = sub_C0448(v27, v29, v28, v26);
  swift_bridgeObjectRelease();
  uint64_t v31 = (int *)type metadata accessor for WellnessLoggingBloodPressureParameters(0);
  uint64_t v32 = a1 + v31[9];
  *(double *)uint64_t v32 = v30;
  *(unsigned char *)(v32 + 8) = 0;
  [a2 diastolic];
  double v34 = v33;
  uint64_t v35 = sub_A7254(a2);
  double v37 = sub_C0448(v35, v36, v28, v34);
  swift_bridgeObjectRelease();
  uint64_t v38 = a1 + v31[7];
  *(double *)uint64_t v38 = v37;
  *(unsigned char *)(v38 + 8) = 0;
  sub_A7254(a2);
  if (v39)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v40 = sub_1AC1E0();
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v40 = sub_1AC1E0();
    uint64_t v41 = 1;
  }
  uint64_t v42 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, v41, 1, v40);
  sub_9EA0((uint64_t)v24, a1 + v31[10]);
  sub_1AC0E0();
  swift_allocObject();
  sub_1AC0D0();
  id v43 = [a2 sampleEnd];
  if (v43)
  {
    uint64_t v44 = v43;
    sub_1AABB0();

    uint64_t v42 = 0;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v17, v42, 1, v11);
  sub_A76E8((uint64_t)v17, (uint64_t)v19, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1, v11))
  {
    sub_5B028((uint64_t)v19, &qword_201E10);
  }
  else
  {
    uint64_t v45 = v75;
    (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v13, v19, v11);
    sub_5B028((uint64_t)v19, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v11);
  }
  uint64_t v46 = (uint64_t)v80;
  sub_1AC0C0();
  swift_release();
  uint64_t v47 = sub_1AC0B0();
  swift_release();
  uint64_t v48 = v31[8];
  swift_release();
  *(void *)(a1 + v48) = v47;
  uint64_t v49 = v81;
  sub_45DC8(v79, v81);
  uint64_t v50 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v49, 1, v50) == 1)
  {
    sub_5B028(v49, &qword_201E20);
    uint64_t v51 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v46, 1, 1, v51);
  }
  else
  {
    id v52 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v53);
    uint64_t v55 = v54;
    [v52 setPunchOutUri:v54];

    id v56 = v52;
    uint64_t v57 = v76;
    sub_1AAC10();
    uint64_t v58 = sub_1AABE0();
    uint64_t v60 = v59;
    (*(void (**)(char *, uint64_t))(v77 + 8))(v57, v78);
    sub_1949C4(v58, v60, v56);

    id v61 = [v56 dictionary];
    if (v61)
    {
      uint64_t v62 = v61;
      uint64_t v63 = self;
      id v82 = 0;
      id v64 = [v63 dataWithPropertyList:v62 format:200 options:0 error:&v82];
      id v65 = v82;
      if (v64)
      {
        uint64_t v66 = sub_1AAB30();
        unint64_t v68 = v67;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v66, v68);
        swift_bridgeObjectRelease();
        uint64_t v69 = sub_1AC1E0();
        uint64_t v70 = v46;
        uint64_t v71 = 0;
      }
      else
      {
        v73 = v65;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v69 = sub_1AC1E0();
        uint64_t v70 = v46;
        uint64_t v71 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v70, v71, 1, v69);
    }
    else
    {
      uint64_t v72 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v46, 1, 1, v72);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v49, v50);
  }
  return sub_9EA0(v46, a1);
}

uint64_t LogBloodPressureFlow.deinit()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  sub_E4B8(v0 + 96);
  swift_unknownObjectRelease();

  swift_release();
  return v0;
}

uint64_t LogBloodPressureFlow.__deallocating_deinit()
{
  LogBloodPressureFlow.deinit();

  return _swift_deallocClassInstance(v0, 289, 7);
}

uint64_t sub_A715C()
{
  return LogBloodPressureFlow.execute(completion:)();
}

uint64_t sub_A7180()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_24C20;
  return LogBloodPressureFlow.execute()();
}

uint64_t sub_A721C()
{
  type metadata accessor for LogBloodPressureFlow();

  return sub_1AAFB0();
}

uint64_t sub_A7254(void *a1)
{
  id v1 = [a1 unit];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_1ACDD0();

  return v3;
}

uint64_t sub_A72B8(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = sub_1AB1C0();
  uint64_t v9 = &protocol witness table for ResponseFactory;
  *(void *)&long long v7 = a2;
  *(unsigned char *)(a3 + 16) = 82;
  memcpy((void *)(a3 + 24), a1, 0xA0uLL);
  sub_24D80(&v7, a3 + 184);
  return a3;
}

uint64_t getEnumTagSinglePayload for LogBloodPressureFlow.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for LogBloodPressureFlow.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *id result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xA7488);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LogBloodPressureFlow.State()
{
  return &type metadata for LogBloodPressureFlow.State;
}

unint64_t sub_A74C4()
{
  unint64_t result = qword_205558;
  if (!qword_205558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_205558);
  }
  return result;
}

uint64_t sub_A7510(uint64_t a1)
{
  return sub_A69A4(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_A751C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_20688();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_A757C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  sub_E558();
  v3();
  return a1;
}

uint64_t sub_A75D0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_A7618()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_A7650()
{
  sub_A364();
  uint64_t v3 = v2;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v1 + 16) = v4;
  *unsigned int v4 = v5;
  v4[1] = sub_24C20;
  return sub_24B08(v3, v0 + 16);
}

uint64_t sub_A76E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2694(a3);
  sub_20688();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

unint64_t sub_A7744()
{
  unint64_t result = qword_205580[0];
  if (!qword_205580[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_205580);
  }
  return result;
}

uint64_t sub_A7790(uint64_t a1)
{
  return a1;
}

uint64_t sub_A77E4()
{
  uint64_t v3 = v0[123];
  *(void *)(v1 - 128) = v0[125];
  *(void *)(v1 - 120) = v3;
  uint64_t v4 = v0[119];
  *(void *)(v1 - 112) = v0[122];
  *(void *)(v1 - 104) = v4;
  *(void *)(v1 - 96) = v0[118];
  return swift_task_dealloc();
}

uint64_t sub_A78A4()
{
  return *(void *)(v0 + 1288);
}

uint64_t sub_A78F4()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v0);
}

uint64_t sub_A7918()
{
  return swift_task_dealloc();
}

uint64_t sub_A797C()
{
  return sub_E3FC(v0, v1);
}

uint64_t sub_A79A4()
{
  return *(void *)(v0 - 88);
}

uint64_t sub_A79D0()
{
  return swift_arrayDestroy();
}

uint64_t sub_A79EC()
{
  return v0 + 8;
}

uint64_t sub_A79FC()
{
  return v0;
}

uint64_t sub_A7A2C()
{
  return sub_1AC240();
}

uint64_t sub_A7A44()
{
  return v0;
}

uint64_t sub_A7A6C()
{
  return sub_1ACFE0();
}

uint64_t sub_A7A8C()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, v0);
}

uint64_t sub_A7AAC()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, v0);
  return swift_task_dealloc();
}

uint64_t sub_A7AE4()
{
  return v0;
}

uint64_t sub_A7B04()
{
  sub_ABC40();

  return sub_1AAF80();
}

uint64_t sub_A7B58()
{
  sub_A364();
  v1[43] = v2;
  v1[44] = v0;
  uint64_t v3 = sub_2694(&qword_2032A0);
  sub_53D4(v3);
  v1[45] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_A7BD8()
{
  getLocalizedMedName(from:)();
  if (v1) {
    swift_bridgeObjectRelease();
  }
  uint64_t v2 = (void *)v0[44];
  uint64_t v3 = v0[45];
  uint64_t v4 = v2[24];
  uint64_t v5 = v2[25];
  sub_2E38(v2 + 21, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  getMedScheduleWithDefinedValues(from:deviceState:)();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 22));
  uint64_t v6 = sub_2694(&qword_203268);
  _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v3, 1, v6);
  sub_24ED0(v3, &qword_2032A0);
  swift_task_alloc();
  sub_250E0();
  v0[46] = v7;
  *uint64_t v7 = v8;
  v7[1] = sub_A7D40;
  return sub_A7F8C();
}

uint64_t sub_A7D40()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  void *v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_A7E08()
{
  uint64_t v1 = (long long *)(v0 + 256);
  if (*(void *)(v0 + 280))
  {
    sub_24D80(v1, v0 + 216);
    sub_E3FC(v0 + 216, v0 + 296);
    uint64_t v2 = swift_allocObject();
    sub_24D80((long long *)(v0 + 296), v2 + 16);
    sub_1AB350();
    sub_1AAE40();
    swift_allocObject();
    *(void *)(v0 + 336) = sub_1AAE30();
    sub_1AB120();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 216);
    swift_release();
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 352);
    sub_24ED0((uint64_t)v1, &qword_202570);
    sub_9B48(v3 + 8, v0 + 16);
    sub_9BA4();
    sub_1AB120();
    sub_9BF0(v0 + 16);
  }
  swift_task_dealloc();
  sub_E564();
  return v4();
}

uint64_t sub_A7F8C()
{
  sub_A364();
  *(void *)(v1 + 640) = v0;
  *(unsigned char *)(v1 + 921) = v2;
  *(unsigned char *)(v1 + 920) = v3;
  *(void *)(v1 + 632) = v4;
  uint64_t v5 = sub_1AC800();
  *(void *)(v1 + 648) = v5;
  sub_A19C(v5);
  *(void *)(v1 + 656) = v6;
  *(void *)(v1 + 664) = sub_A42C();
  uint64_t v7 = type metadata accessor for GenericButtonModel();
  *(void *)(v1 + 672) = v7;
  sub_53D4(v7);
  *(void *)(v1 + 680) = sub_A42C();
  uint64_t v8 = sub_2694(&qword_201E20);
  sub_53D4(v8);
  *(void *)(v1 + 688) = sub_A220();
  *(void *)(v1 + 696) = swift_task_alloc();
  *(void *)(v1 + 704) = swift_task_alloc();
  *(void *)(v1 + 712) = swift_task_alloc();
  uint64_t v9 = sub_1AAB10();
  *(void *)(v1 + 720) = v9;
  sub_A19C(v9);
  *(void *)(v1 + 728) = v10;
  *(void *)(v1 + 736) = sub_A220();
  *(void *)(v1 + 744) = swift_task_alloc();
  uint64_t v11 = sub_1AB0A0();
  *(void *)(v1 + 752) = v11;
  sub_A19C(v11);
  *(void *)(v1 + 760) = v12;
  *(void *)(v1 + 768) = sub_A220();
  *(void *)(v1 + 776) = swift_task_alloc();
  uint64_t v13 = sub_1AB3D0();
  *(void *)(v1 + 784) = v13;
  sub_A19C(v13);
  *(void *)(v1 + 792) = v14;
  *(void *)(v1 + 800) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v15, v16, v17);
}

uint64_t sub_A8138()
{
  sub_A364();
  char v1 = *(unsigned char *)(*(void *)(v0 + 640) + 208);
  char v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 808) = v2;
  void *v2 = v0;
  v2[1] = sub_A81D0;
  return sub_1A33FC(v1);
}

uint64_t sub_A81D0()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *char v3 = v2;
  *char v3 = *v1;
  *(void *)(v2 + 816) = v4;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_A82BC()
{
  char v1 = *(void **)(v0 + 816);
  uint64_t v2 = *(void *)(v0 + 800);
  uint64_t v3 = *(void *)(v0 + 776);
  uint64_t v4 = *(void *)(v0 + 768);
  uint64_t v5 = *(void *)(v0 + 760);
  uint64_t v6 = *(void *)(v0 + 752);
  sub_1AB090();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
  sub_1AB3C0();
  id v7 = [v1 catId];
  sub_1ACDD0();

  sub_1AB380();
  uint64_t v8 = sub_ABCCC();
  v9(v8);
  sub_ABD9C();
  sub_ABEB0();
  if (v2)
  {
    sub_ABB40(v0 + 16);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 328);
    *(void *)(v0 + 824) = sub_C0D54(0x616548206E65704FLL, 0xEB0000000068746CLL, 0x6C6165486E65706FLL, (void *)0xED00007070416874);
    *(void *)(v0 + 832) = v12;
    BOOL v13 = hasTimeEdit(from:)();
    swift_task_alloc();
    sub_250E0();
    *(void *)(v0 + 840) = v14;
    void *v14 = v15;
    v14[1] = sub_A86B0;
    uint64_t v16 = *(void *)(v0 + 712);
LABEL_4:
    char v17 = *(unsigned char *)(v0 + 921);
    char v18 = *(unsigned char *)(v0 + 920);
    return sub_A9234(v16, v18, v17, v13);
  }
  sub_2E38((void *)(v0 + 184), *(void *)(v0 + 208));
  uint64_t v10 = sub_250B4();
  v11(v10);
  sub_ABD40();
  sub_ABF8C();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 328);
  uint64_t v20 = *(void *)(v0 + 640);
  if (*(unsigned char *)(v20 + 208) != 1)
  {
    *(void *)(v0 + 880) = sub_C0D54(0xD000000000000010, 0x80000000001BB6A0, 0xD000000000000012, (void *)0x80000000001BB6C0);
    *(void *)(v0 + 888) = v29;
    BOOL v13 = hasTimeEdit(from:)();
    swift_task_alloc();
    sub_250E0();
    *(void *)(v0 + 896) = v30;
    *double v30 = v31;
    v30[1] = sub_A8CBC;
    uint64_t v16 = *(void *)(v0 + 696);
    goto LABEL_4;
  }
  uint64_t v21 = *(void **)(v0 + 816);
  uint64_t v22 = *(void *)(v20 + 240);
  uint64_t v23 = *(void *)(v20 + 248);
  sub_2E38((void *)(v20 + 216), v22);
  sub_2694(&qword_202588);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1AF530;
  *(void *)(v24 + 32) = v21;
  uint64_t v32 = v24;
  sub_1ACEF0();
  *(void *)(v0 + 864) = v32;
  id v25 = v21;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 872) = v26;
  *double v26 = v27;
  v26[1] = sub_A8AFC;
  uint64_t v28 = *(void *)(v0 + 800);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v0 + 528, v32, v28, v22, v23);
}

uint64_t sub_A86B0()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  void *v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_A8778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_46EFC();
  sub_4712C();
  uint64_t v10 = v9[90];
  sub_ABD78();
  if (v11)
  {
    sub_1AAB00();
    uint64_t v12 = sub_ABD78();
    if (v11)
    {
      __break(1u);
      return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v12, v13, v14, v15, v16, v17);
    }
    uint64_t v10 = v9[89];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9[91] + 32))(v9[93], v9[88], v9[90]);
    sub_24ED0(v10, &qword_201E20);
  }
  else
  {
    sub_ABF34();
    v18();
  }
  uint64_t v19 = (void *)v9[102];
  uint64_t v20 = sub_ABE08();
  v21(v20);
  v9[59] = sub_ABFBC();
  v9[60] = sub_24F2C();
  uint64_t v22 = sub_B5B0(v9 + 56);
  sub_24F7C(v10, (uint64_t)v22);
  swift_storeEnumTagMultiPayload();
  sub_2694(&qword_202588);
  uint64_t v23 = (__n128 *)swift_allocObject();
  sub_AC024(v23, (__n128)xmmword_1AF530);
  v9[106] = a9;
  id v24 = v19;
  swift_task_alloc();
  sub_250E0();
  v9[107] = (uint64_t)v25;
  *id v25 = v26;
  v25[1] = sub_A8924;
  sub_ABE70();
  sub_46EC4();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v12, v13, v14, v15, v16, v17);
}

uint64_t sub_A8924()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 448;
  uint64_t v4 = *v0;
  sub_A304();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_A8A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  sub_AC044(*(void **)(v12 + 816));
  sub_24FE0(v13);
  uint64_t v15 = sub_ABF04();
  v16(v15);
  uint64_t v17 = sub_ABF64();
  v18(v17);
  sub_24D80((long long *)(v12 + 568), v14);
  sub_ABC8C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_46EC4();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

uint64_t sub_A8AFC()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  void *v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_A8BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  uint64_t v13 = *(void *)(v12 + 632);

  uint64_t v14 = sub_ABF4C();
  v15(v14);
  sub_24D80((long long *)(v12 + 528), v13);
  sub_ABC8C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_46EC4();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12);
}

uint64_t sub_A8CBC()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  void *v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_A8D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_46EFC();
  sub_4712C();
  uint64_t v10 = v9[90];
  sub_ABD78();
  if (v11)
  {
    sub_1AAB00();
    uint64_t v12 = sub_ABD78();
    if (v11)
    {
      __break(1u);
      return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v12, v13, v14, v15, v16, v17);
    }
    uint64_t v10 = v9[87];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9[91] + 32))(v9[92], v9[86], v9[90]);
    sub_24ED0(v10, &qword_201E20);
  }
  else
  {
    sub_ABF34();
    v18();
  }
  uint64_t v19 = (void *)v9[102];
  uint64_t v20 = sub_ABE08();
  v21(v20);
  v9[64] = sub_ABFBC();
  v9[65] = sub_24F2C();
  uint64_t v22 = sub_B5B0(v9 + 61);
  sub_24F7C(v10, (uint64_t)v22);
  swift_storeEnumTagMultiPayload();
  sub_2694(&qword_202588);
  uint64_t v23 = (__n128 *)swift_allocObject();
  sub_AC024(v23, (__n128)xmmword_1AF530);
  v9[113] = a9;
  id v24 = v19;
  swift_task_alloc();
  sub_250E0();
  v9[114] = (uint64_t)v25;
  *uint64_t v25 = v26;
  v25[1] = sub_A8F30;
  sub_ABE70();
  sub_46EC4();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v12, v13, v14, v15, v16, v17);
}

uint64_t sub_A8F30()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 488;
  uint64_t v4 = *v0;
  sub_A304();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_A901C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  sub_AC044(*(void **)(v12 + 816));
  sub_24FE0(v13);
  uint64_t v15 = sub_ABF04();
  v16(v15);
  uint64_t v17 = sub_ABF64();
  v18(v17);
  sub_24D80((long long *)(v12 + 368), v14);
  sub_ABC8C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_46EC4();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

uint64_t sub_A9108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  sub_1AC7D0();
  sub_ABE34();
  uint64_t v13 = sub_292B8();
  v14(v13);
  uint64_t v15 = (void *)sub_1AC7F0();
  os_log_type_t v16 = sub_1ACF50();
  if (sub_29300(v16))
  {
    uint64_t v17 = (_WORD *)sub_292A0();
    sub_29368(v17);
    sub_A7FC(&def_342E4, v18, v19, "Complex Medication Logging Request Error pattern failed, returning nil.");
    sub_ABE94();
  }
  uint64_t v20 = *(void *)(v12 + 632);

  uint64_t v21 = sub_E570();
  v22(v21);
  *(void *)(v20 + 32) = 0;
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  sub_ABC8C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_46EC4();
  return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
}

uint64_t sub_A9234(uint64_t a1, char a2, char a3, char a4)
{
  *(void *)(v5 + 920) = v4;
  *(unsigned char *)(v5 + 1226) = a4;
  *(unsigned char *)(v5 + 1225) = a3;
  *(unsigned char *)(v5 + 1224) = a2;
  *(void *)(v5 + 912) = a1;
  uint64_t v6 = sub_1AAA10();
  *(void *)(v5 + 928) = v6;
  *(void *)(v5 + 936) = *(void *)(v6 - 8);
  *(void *)(v5 + 944) = swift_task_alloc();
  uint64_t v7 = sub_1AAD30();
  *(void *)(v5 + 952) = v7;
  *(void *)(v5 + 960) = *(void *)(v7 - 8);
  *(void *)(v5 + 968) = swift_task_alloc();
  sub_2694(&qword_201E10);
  *(void *)(v5 + 976) = swift_task_alloc();
  uint64_t v8 = sub_1AABD0();
  *(void *)(v5 + 984) = v8;
  *(void *)(v5 + 992) = *(void *)(v8 - 8);
  *(void *)(v5 + 1000) = swift_task_alloc();
  *(void *)(v5 + 1008) = swift_task_alloc();
  sub_2694(&qword_204FF0);
  *(void *)(v5 + 1016) = swift_task_alloc();
  sub_2694(&qword_204FF8);
  *(void *)(v5 + 1024) = swift_task_alloc();
  uint64_t v9 = sub_1AAAA0();
  *(void *)(v5 + 1032) = v9;
  *(void *)(v5 + 1040) = *(void *)(v9 - 8);
  *(void *)(v5 + 1048) = swift_task_alloc();
  sub_2694(&qword_2055C0);
  *(void *)(v5 + 1056) = swift_task_alloc();
  *(void *)(v5 + 1064) = sub_2694(&qword_203270);
  *(void *)(v5 + 1072) = swift_task_alloc();
  *(void *)(v5 + 1080) = swift_task_alloc();
  sub_2694(&qword_2032A0);
  *(void *)(v5 + 1088) = swift_task_alloc();
  *(void *)(v5 + 1096) = swift_task_alloc();
  uint64_t v10 = sub_1AC800();
  *(void *)(v5 + 1104) = v10;
  *(void *)(v5 + 1112) = *(void *)(v10 - 8);
  *(void *)(v5 + 1120) = swift_task_alloc();
  *(void *)(v5 + 1128) = swift_task_alloc();
  *(void *)(v5 + 1136) = swift_task_alloc();
  return _swift_task_switch(sub_A95E4, 0, 0);
}

uint64_t sub_A95E4()
{
  if (*(unsigned char *)(v1 + 1226) == 1)
  {
    sub_1AC7D0();
    sub_ABE34();
    uint64_t v2 = sub_292B8();
    v3(v2);
    uint64_t v4 = (void *)sub_1AC7F0();
    os_log_type_t v5 = sub_1ACF50();
    if (sub_29300(v5))
    {
      uint64_t v6 = (_WORD *)sub_292A0();
      sub_29368(v6);
      sub_A7FC(&def_342E4, v7, v8, "getPunchoutURL had isPrefilled=true, returning getPrefilledPunchoutURL");
      sub_ABE94();
    }

    uint64_t v9 = sub_E570();
    v10(v9);
    swift_task_alloc();
    sub_250E0();
    *(void *)(v1 + 1144) = v11;
    *char v11 = v12;
    v11[1] = sub_A9F20;
    sub_ABE54();
    return sub_AA890(v13);
  }
  if (*(unsigned char *)(v1 + 1224) == 1)
  {
    uint64_t v16 = sub_ABCCC();
    v17(v16);
    sub_ABD9C();
    sub_ABEB0();
    if (v0)
    {
      char v18 = 1;
    }
    else
    {
      sub_2E38((void *)(v1 + 184), *(void *)(v1 + 208));
      uint64_t v29 = sub_250B4();
      v30(v29);
      char v18 = sub_ABD40();
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1 + 640);
    }
    *(unsigned char *)(v1 + 1227) = v18 & 1;
    sub_ABB40(v1 + 16);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1 + 800);
    uint64_t v31 = getUSOMedNames(from:)();
    if (v31)
    {
      if (*(void *)(v31 + 16))
      {
        *(void *)(v1 + 1152) = *(void *)(v31 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_ABFF8();
        uint64_t v32 = (void *)swift_task_alloc();
        *(void *)(v1 + 1160) = v32;
        *uint64_t v32 = v1;
        v32[1] = sub_AA1E8;
        sub_ABEE8();
        sub_ABE54();
        __asm { BRAA            X5, X16 }
      }
      swift_bridgeObjectRelease();
    }
    sub_1AAB00();
LABEL_30:
    sub_ABD0C();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_ABE54();
    __asm { BRAA            X1, X16 }
  }
  if (*(unsigned char *)(v1 + 1225) != 1)
  {
    sub_1AC7D0();
    sub_ABE34();
    uint64_t v35 = sub_292B8();
    v36(v35);
    double v37 = (void *)sub_1AC7F0();
    os_log_type_t v38 = sub_1ACF50();
    if (sub_29300(v38))
    {
      uint64_t v39 = (_WORD *)sub_292A0();
      sub_29368(v39);
      sub_A7FC(&def_342E4, v40, v41, "ComplexMedLoggingErrorFlow: both isLogByName and isLogBySchedule were false, but at least one needs to be true, so returning nil, and this will generally punchout to Meds Room.");
      sub_ABE94();
    }
    uint64_t v42 = *(void *)(v1 + 912);

    uint64_t v43 = sub_ABF4C();
    v44(v43);
    uint64_t v45 = sub_1AAB10();
    uint64_t v46 = v42;
    goto LABEL_27;
  }
  uint64_t v19 = *(void *)(v1 + 1096);
  uint64_t v20 = *(void *)(v1 + 1088);
  uint64_t v21 = *(void **)(v1 + 920);
  uint64_t v22 = v21[24];
  uint64_t v23 = v21[25];
  sub_2E38(v21 + 21, v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
  getMedScheduleWithDefinedValues(from:deviceState:)();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1 + 720);
  sub_ABB70(v19, v20);
  uint64_t v24 = sub_2694(&qword_203268);
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v20, 1, v24);
  uint64_t v26 = *(void *)(v1 + 1088);
  uint64_t v27 = *(void *)(v1 + 1064);
  uint64_t v28 = *(void *)(v1 + 1056);
  if (v25 == 1)
  {
    sub_24ED0(*(void *)(v1 + 1088), &qword_2032A0);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v28, 1, 1, v27);
LABEL_24:
    sub_24ED0(*(void *)(v1 + 1056), &qword_2055C0);
    sub_1AC7D0();
    sub_ABE34();
    uint64_t v48 = sub_292B8();
    v49(v48);
    uint64_t v50 = (void *)sub_1AC7F0();
    os_log_type_t v51 = sub_1ACF50();
    if (sub_29300(v51))
    {
      id v52 = (_WORD *)sub_292A0();
      sub_29368(v52);
      sub_A7FC(&def_342E4, v53, v54, "ComplexMedLoggingErrorFlow: isLogBySchedule is true, but schedule?.dateInterval is nil. Returning nil");
      sub_ABE94();
    }
    uint64_t v55 = *(void *)(v1 + 1128);
    uint64_t v56 = *(void *)(v1 + 1112);
    uint64_t v57 = *(void *)(v1 + 1104);
    uint64_t v58 = *(void *)(v1 + 1096);
    uint64_t v59 = *(void *)(v1 + 912);

    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    sub_24ED0(v58, &qword_2032A0);
    uint64_t v45 = sub_1AAB10();
    uint64_t v46 = v59;
LABEL_27:
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v46, 1, 1, v45);
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  sub_ABBD8(v26, v28);
  sub_ABD78();
  if (v47) {
    goto LABEL_24;
  }
  uint64_t v62 = *(void *)(v1 + 1024);
  uint64_t v63 = *(void *)(v1 + 984);
  uint64_t v88 = *(void *)(v1 + 1016);
  uint64_t v89 = *(void *)(v1 + 968);
  uint64_t v90 = *(void *)(v1 + 976);
  uint64_t v91 = *(void *)(v1 + 960);
  uint64_t v64 = *(void *)(v1 + 952);
  uint64_t v65 = *(int *)(*(void *)(v1 + 1064) + 48);
  uint64_t v66 = *(void *)(v1 + 1080) + v65;
  uint64_t v67 = *(void *)(v1 + 1056) + v65;
  unint64_t v68 = *(void (**)(void))(*(void *)(v1 + 992) + 32);
  v68();
  uint64_t v87 = v68;
  ((void (*)(uint64_t, uint64_t, uint64_t))v68)(v66, v67, v63);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v62, 1, 1, v64);
  uint64_t v69 = sub_1AAD60();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v88, 1, 1, v69);
  sub_1AAA90();
  sub_1AAA80();
  sub_1AAD00();
  sub_1AACD0();
  (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v89, v64);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v90, 1, v63);
  if (result != 1)
  {
    uint64_t v70 = *(void *)(v1 + 1072);
    uint64_t v71 = *(void *)(v1 + 992);
    uint64_t v72 = *(void *)(v1 + 984);
    uint64_t v73 = *(void *)(v1 + 920);
    ((void (*)(void, void, uint64_t))v87)(*(void *)(v1 + 1008), *(void *)(v1 + 976), v72);
    os_log_type_t v74 = *(void (**)(void))(v71 + 16);
    sub_ABF7C();
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, char, void, char, void, char, void, char, void, char, void, char, void, char))v74)(v75, v76, v77, v78, v79, v80, v81, v82, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
      1,
      0,
      1);
    sub_ABF7C();
    v74();
    sub_ABF7C();
    v74();
    sub_1AA9D0();
    uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
    *(void *)(v1 + 1184) = v83;
    *(void *)(v1 + 1192) = (v71 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v83(v70, v72);
    sub_2E38((void *)(v73 + 272), *(void *)(v73 + 296));
    uint64_t v84 = (void *)swift_task_alloc();
    *(void *)(v1 + 1200) = v84;
    *uint64_t v84 = v1;
    v84[1] = sub_AA4B8;
    sub_ABE54();
    __asm { BRAA            X4, X16 }
  }
  __break(1u);
  return result;
}

uint64_t sub_A9F20()
{
  uint64_t v1 = *v0;
  sub_A304();
  void *v2 = v1;
  swift_task_dealloc();
  sub_47C98();
  sub_47C98();
  sub_47C98();
  sub_47C98();
  sub_47C98();
  sub_47C98();
  sub_47C98();
  sub_47C98();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_AA1E8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = *v0;
  sub_A304();
  *uint64_t v4 = v3;
  *(void *)(v6 + 1168) = v5;
  *(void *)(v6 + 1176) = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_AA2D4()
{
  uint64_t v1 = *(void **)(v0 + 1176);
  uint64_t v2 = *(void *)(v0 + 1168);
  if (*(unsigned char *)(v0 + 1227) == 1)
  {
    sub_1AD080(105);
    v3._countAndFlagsBits = 0xD000000000000067;
    v3._object = (void *)0x80000000001BB7E0;
  }
  else
  {
    sub_1AD080(63);
    v3._object = (void *)0x80000000001BB7A0;
    v3._countAndFlagsBits = 0xD00000000000003DLL;
  }
  sub_1ACE70(v3);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v2;
  v7._object = v1;
  sub_1ACE70(v7);
  swift_bridgeObjectRelease();
  sub_1AAB00();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_ABD0C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v4();
}

uint64_t sub_AA4B8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 1208) = v3;
  *(void *)(v1 + 1216) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_AA58C()
{
  uint64_t v2 = sub_ABCCC();
  v3(v2);
  uint64_t v4 = v1[88];
  uint64_t v5 = (void *)v1[89];
  sub_ABD9C();
  sub_ABEB0();
  if (v0)
  {
    sub_ABB40((uint64_t)(v1 + 41));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v1 + 85));
    sub_ABDD4();
    uint64_t v18 = v1[123];
    uint64_t v19 = v1[126];
    sub_ABECC();
    sub_1AD080(113);
    v25._countAndFlagsBits = 0xD00000000000006FLL;
    v25._object = (void *)0x80000000001BB730;
    sub_1ACE70(v25);
    swift_bridgeObjectRetain();
    v26._countAndFlagsBits = (uint64_t)(v1 + 41);
    v26._object = v5;
    sub_1ACE70(v26);
    swift_bridgeObjectRelease();
    sub_1AAB00();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_ABF1C();
    v10(v9);
    uint64_t v12 = v18;
    uint64_t v11 = v19;
  }
  else
  {
    sub_2E38(v1 + 62, v1[65]);
    uint64_t v6 = sub_250B4();
    v7(v6);
    uint64_t v4 = v1[98];
    uint64_t v8 = (void *)v1[99];
    sub_ABD40();
    sub_ABF8C();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v1 + 85));
    sub_ABDD4();
    uint64_t v20 = v1[126];
    uint64_t v13 = v1[123];
    sub_ABECC();
    sub_1AD080(71);
    v27._object = (void *)0x80000000001BB6E0;
    v27._countAndFlagsBits = 0xD000000000000045;
    sub_1ACE70(v27);
    swift_bridgeObjectRetain();
    v28._countAndFlagsBits = (uint64_t)(v1 + 41);
    v28._object = v8;
    sub_1ACE70(v28);
    swift_bridgeObjectRelease();
    sub_1AAB00();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = sub_ABF1C();
    v15(v14);
    uint64_t v11 = v20;
    uint64_t v12 = v13;
  }
  v21(v11, v12);
  (*(void (**)())(v4 + 8))();
  sub_24ED0(v22, &qword_203270);
  sub_24ED0(v23, &qword_2032A0);
  sub_ABD0C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v16();
}

uint64_t sub_AA890(uint64_t a1)
{
  v2[67] = v1;
  v2[66] = a1;
  uint64_t v3 = sub_1AC800();
  v2[68] = v3;
  v2[69] = *(void *)(v3 - 8);
  v2[70] = swift_task_alloc();
  sub_2694(&qword_201E10);
  v2[71] = swift_task_alloc();
  uint64_t v4 = sub_1AABD0();
  v2[72] = v4;
  v2[73] = *(void *)(v4 - 8);
  v2[74] = swift_task_alloc();
  return _swift_task_switch(sub_AA9E0, 0, 0);
}

uint64_t sub_AA9E0()
{
  sub_4712C();
  uint64_t v2 = sub_ABCCC();
  v3(v2);
  sub_ABD9C();
  sub_ABEB0();
  if (v0)
  {
    sub_ABB40((uint64_t)(v1 + 2));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v1 + 41));
    unint64_t v4 = 0x80000000001BB7E0;
    unint64_t v5 = 0xD000000000000067;
  }
  else
  {
    sub_2E38(v1 + 23, v1[26]);
    uint64_t v6 = sub_250B4();
    v7(v6);
    sub_ABD40();
    sub_ABF8C();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v1 + 41));
    unint64_t v5 = 0xD000000000000044;
    unint64_t v4 = 0x80000000001BB850;
  }
  v1[62] = v5;
  v1[63] = v4;
  uint64_t v8 = getUSOMedNames(from:)();
  if (v8)
  {
    if (*(void *)(v8 + 16))
    {
      v1[75] = *(void *)(v8 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_ABFF8();
      uint64_t v14 = (uint64_t (*)(uint64_t))((char *)v9 + *v9);
      uint64_t v10 = (void *)swift_task_alloc();
      v1[76] = v10;
      *uint64_t v10 = v1;
      v10[1] = sub_AAC50;
      uint64_t v11 = sub_ABEE8();
      return v14(v11);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1AAB00();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v13();
}

uint64_t sub_AAC50()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = *v0;
  sub_A304();
  *unint64_t v4 = v3;
  *(void *)(v6 + 616) = v5;
  *(void *)(v6 + 624) = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_AAD3C()
{
  uint64_t v37 = v0;
  sub_1ACE70(*(Swift::String *)(v0 + 616));
  swift_bridgeObjectRelease();
  *(double *)&uint64_t result = COERCE_DOUBLE(getMedDosageValue(from:)());
  if ((v2 & 1) == 0)
  {
    if ((~result & 0x7FF0000000000000) != 0)
    {
      if (*(double *)&result > -9.22337204e18)
      {
        if (*(double *)&result < 9.22337204e18)
        {
          uint64_t v3 = (uint64_t)*(double *)&result;
          sub_1AD080(17);
          swift_bridgeObjectRelease();
          sub_AC064();
          v36._countAndFlagsBits = v4;
          v36._object = (void *)0xEF3D656761736F44;
          *(void *)(v0 + 520) = v3;
          v39._countAndFlagsBits = sub_1AD2C0();
          sub_1ACE70(v39);
          swift_bridgeObjectRelease();
          sub_1ACE70(v36);
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
LABEL_17:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v5 = *(void *)(v0 + 576);
  uint64_t v6 = *(void *)(v0 + 568);
  uint64_t v7 = *(void **)(v0 + 536);
  uint64_t v9 = v7[24];
  uint64_t v8 = v7[25];
  sub_2E38(v7 + 21, v9);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v8);
  getMedEventDate(from:deviceState:)();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 408);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v5) == 1)
  {
    sub_24ED0(*(void *)(v0 + 568), &qword_201E10);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 592);
    uint64_t v11 = *(void *)(v0 + 584);
    uint64_t v12 = *(void *)(v0 + 576);
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 32))(v10, *(void *)(v0 + 568), v12);
    id v13 = [objc_allocWithZone((Class)NSISO8601DateFormatter) init];
    Class isa = sub_1AAB60().super.isa;
    id v15 = [v13 stringFromDate:isa];

    uint64_t v16 = sub_1ACDD0();
    uint64_t v18 = v17;

    sub_AC064();
    v36._countAndFlagsBits = v19;
    v36._object = (void *)0xED00003D65746144;
    v40._countAndFlagsBits = v16;
    v40._object = v18;
    sub_1ACE70(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = v36._countAndFlagsBits;
    v41._object = (void *)0xED00003D65746144;
    sub_1ACE70(v41);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  uint64_t v20 = *(void *)(v0 + 560);
  uint64_t v21 = *(void *)(v0 + 552);
  uint64_t v22 = *(void *)(v0 + 544);
  uint64_t v23 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v23, v22);
  uint64_t v24 = *(void *)(v0 + 496);
  unint64_t v25 = *(void *)(v0 + 504);
  swift_bridgeObjectRetain_n();
  Swift::String v26 = sub_1AC7F0();
  os_log_type_t v27 = sub_1ACF50();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v29 = *(void *)(v0 + 560);
  uint64_t v30 = *(void *)(v0 + 552);
  uint64_t v31 = *(void *)(v0 + 544);
  if (v28)
  {
    uint64_t v35 = *(void *)(v0 + 544);
    uint64_t v34 = v24;
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    v36._countAndFlagsBits = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 512) = sub_4A278(v34, v25, &v36._countAndFlagsBits);
    sub_1ACFE0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&def_342E4, v26, v27, "Got prefilled url that looks like %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v35);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
  }
  swift_beginAccess();
  sub_1AAB00();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  *(double *)&uint64_t result = COERCE_DOUBLE(v33());
  return result;
}

uint64_t sub_AB20C()
{
  return sub_AB264((void (*)(void))type metadata accessor for WellnessLoggingCATsSimple, (uint64_t (*)(char *, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t sub_AB238()
{
  return sub_AB264((void (*)(void))type metadata accessor for WellnessCATs, (uint64_t (*)(char *, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t sub_AB264(void (*a1)(void), uint64_t (*a2)(char *, void))
{
  uint64_t v4 = sub_1AC250();
  uint64_t v5 = sub_53D4(v4);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(0);
  sub_1AC240();
  return a2(v7, 0);
}

uint64_t sub_AB2FC@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, long long *a3@<X2>, char a4@<W3>, char a5@<W4>, long long *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long *a10)
{
  *(void *)a9 = a1;
  memcpy((void *)(a9 + 8), a2, 0xA0uLL);
  sub_24D80(a3, a9 + 168);
  *(unsigned char *)(a9 + 208) = a4;
  *(unsigned char *)(a9 + 209) = a5;
  sub_24D80(a6, a9 + 216);
  *(void *)(a9 + 256) = a7;
  *(void *)(a9 + 264) = a8;

  return sub_24D80(a10, a9 + 272);
}

uint64_t destroy for ComplexMedLoggingErrorFlow(uint64_t a1)
{
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 48);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 88);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 128);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 168);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 216);
  swift_release();
  swift_release();

  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 272);
}

uint64_t initializeWithCopy for ComplexMedLoggingErrorFlow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a2 + 8;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 48, a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 88, a2 + 88);
  long long v10 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 152) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 128, a2 + 128);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 192) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 168, a2 + 168);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  long long v12 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 240) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 216, a2 + 216);
  uint64_t v13 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v13;
  uint64_t v15 = *(void *)(a2 + 296);
  uint64_t v14 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = v15;
  *(void *)(a1 + 304) = v14;
  uint64_t v16 = **(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
  swift_retain();
  swift_retain();
  v16(a1 + 272, a2 + 272, v15);
  return a1;
}

uint64_t assignWithCopy for ComplexMedLoggingErrorFlow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  sub_577C((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  sub_577C((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  sub_577C((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  sub_577C((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
  sub_577C((uint64_t *)(a1 + 168), (uint64_t *)(a2 + 168));
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
  sub_577C((uint64_t *)(a1 + 216), (uint64_t *)(a2 + 216));
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_retain();
  swift_release();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_retain();
  swift_release();
  sub_577C((uint64_t *)(a1 + 272), (uint64_t *)(a2 + 272));
  return a1;
}

void *initializeWithTake for ComplexMedLoggingErrorFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x138uLL);
}

uint64_t assignWithTake for ComplexMedLoggingErrorFlow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 48);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 128);
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 168);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 216);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  uint64_t v6 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v6;
  swift_release();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 272);
  long long v7 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v7;
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  return a1;
}

uint64_t getEnumTagSinglePayload for ComplexMedLoggingErrorFlow(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 312))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ComplexMedLoggingErrorFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 312) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 312) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ComplexMedLoggingErrorFlow()
{
  return &type metadata for ComplexMedLoggingErrorFlow;
}

uint64_t sub_AB9A0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_24C20;
  return sub_A7B58();
}

uint64_t sub_ABA38()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_ABA70()
{
  sub_A364();
  uint64_t v3 = v2;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v1 + 16) = v4;
  *long long v4 = v5;
  v4[1] = sub_24C20;
  return sub_24B08(v3, v0 + 16);
}

uint64_t sub_ABB08(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_ABB40(uint64_t a1)
{
  return a1;
}

uint64_t sub_ABB70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_2032A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_ABBD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_2055C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_ABC40()
{
  unint64_t result = qword_2055D0[0];
  if (!qword_2055D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_2055D0);
  }
  return result;
}

uint64_t sub_ABC8C()
{
  return swift_task_dealloc();
}

uint64_t sub_ABCCC()
{
  uint64_t v1 = *(void *)(v0 + 192);
  sub_2E38((void *)(v0 + 168), v1);
  return v1;
}

uint64_t sub_ABD0C()
{
  return *(void *)(v0 + 1136);
}

uint64_t sub_ABD40()
{
  sub_2E38(v0, v1);
  return sub_1AB030();
}

uint64_t sub_ABD78()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, v1);
}

uint64_t sub_ABD9C()
{
  sub_2E38(v0, v1);
  return sub_1AB040();
}

uint64_t sub_ABE08()
{
  return *(void *)(v0 + 680) + *(int *)(*(void *)(v0 + 672) + 20);
}

uint64_t sub_ABE34()
{
  return swift_beginAccess();
}

uint64_t sub_ABE70()
{
  return v0;
}

uint64_t sub_ABE94()
{
  return swift_slowDealloc();
}

uint64_t sub_ABEB0()
{
  return sub_ABB08(v1, v0);
}

uint64_t sub_ABEE8()
{
  return v0;
}

uint64_t sub_ABF04()
{
  return v0;
}

uint64_t sub_ABF1C()
{
  return v0;
}

uint64_t sub_ABF4C()
{
  return v0;
}

uint64_t sub_ABF64()
{
  return v0;
}

uint64_t sub_ABF8C()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  return sub_ABB40(v0);
}

uint64_t sub_ABFBC()
{
  *uint64_t v0 = v2;
  v0[1] = v1;
  sub_2E38((void *)(v3 + 216), *(void *)(v3 + 240));
  return type metadata accessor for WellnessSnippets();
}

uint64_t sub_ABFF8()
{
  uint64_t v1 = v0 + 34;
  uint64_t v2 = v0[37];
  uint64_t v3 = v0[38];
  sub_2E38(v1, v2);
  return v3 + 8;
}

uint64_t sub_AC024(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return sub_1ACEF0();
}

void sub_AC044(void *a1@<X8>)
{
}

uint64_t destroy for InstallAppFlow(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for InstallAppFlow(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  uint64_t v6 = *(void *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for InstallAppFlow(uint64_t *a1, uint64_t *a2)
{
  a1[10] = a2[10];
  swift_retain();
  swift_release();
  a1[11] = a2[11];
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for InstallAppFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for InstallAppFlow(uint64_t a1, uint64_t a2)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InstallAppFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InstallAppFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InstallAppFlow()
{
  return &type metadata for InstallAppFlow;
}

uint64_t sub_AC314()
{
  sub_AD6C4();

  return sub_1AAF80();
}

uint64_t sub_AC368()
{
  sub_A364();
  v1[40] = v2;
  v1[41] = v0;
  v1[42] = type metadata accessor for GenericButtonModel();
  v1[43] = sub_A42C();
  sub_2694(&qword_201E20);
  v1[44] = sub_A42C();
  uint64_t v3 = sub_1AAB10();
  v1[45] = v3;
  sub_A19C(v3);
  v1[46] = v4;
  v1[47] = sub_A42C();
  uint64_t v5 = sub_1AB0A0();
  v1[48] = v5;
  sub_A19C(v5);
  v1[49] = v6;
  v1[50] = swift_task_alloc();
  v1[51] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v1[52] = v7;
  sub_A19C(v7);
  v1[53] = v8;
  v1[54] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_AC4BC()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 440) = v1;
  void *v1 = v0;
  v1[1] = sub_AC54C;
  return sub_4F200();
}

uint64_t sub_AC54C(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v5 + 448) = a1;
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_AC648()
{
  uint64_t v1 = (void *)v0[56];
  v0[57] = v1;
  uint64_t v3 = v0[50];
  uint64_t v2 = v0[51];
  uint64_t v4 = v0[48];
  uint64_t v5 = v0[49];
  sub_1AB090();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  sub_1AB3C0();
  if (v1)
  {
    id v6 = [v1 catId];
    sub_1ACDD0();
  }
  uint64_t v7 = (void *)v0[41];
  sub_1AB380();
  uint64_t v8 = v7[3];
  uint64_t v9 = v7[4];
  sub_2E38(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  sub_2E38(v0 + 14, v0[17]);
  char v10 = sub_1AB040();
  sub_AD65C((uint64_t)v7, (uint64_t)(v0 + 2));
  if (v10)
  {
    sub_AD694((uint64_t)(v0 + 2));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 14));
LABEL_6:
    uint64_t v45 = v1;
    uint64_t v15 = v0[44];
    uint64_t v14 = v0[45];
    sub_1AD080(33);
    swift_bridgeObjectRelease();
    v0[39] = 1242545199;
    v49._countAndFlagsBits = sub_1AD2C0();
    sub_1ACE70(v49);
    swift_bridgeObjectRelease();
    sub_1AAB00();
    swift_bridgeObjectRelease();
    uint64_t v16 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v15, 1, v14);
    if (v16 == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v23 = v0[46];
      uint64_t v22 = v0[47];
      uint64_t v24 = v0[45];
      uint64_t v26 = v0[42];
      unint64_t v25 = (uint64_t *)v0[43];
      uint64_t v27 = v0[41];
      (*(void (**)(uint64_t, void, uint64_t))(v23 + 32))(v22, v0[44], v24);
      uint64_t v28 = sub_AD710();
      uint64_t v30 = v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))((char *)v25 + *(int *)(v26 + 20), v22, v24);
      *unint64_t v25 = v28;
      v25[1] = v30;
      sub_E3FC(v27 + 40, (uint64_t)(v0 + 29));
      uint64_t v31 = v0[32];
      uint64_t v32 = v0[33];
      sub_2E38(v0 + 29, v31);
      v0[37] = type metadata accessor for WellnessSnippets();
      v0[38] = sub_24F2C();
      uint64_t v33 = sub_B5B0(v0 + 34);
      sub_24F7C((uint64_t)v25, (uint64_t)v33);
      swift_storeEnumTagMultiPayload();
      sub_2694(&qword_202588);
      uint64_t v16 = sub_47CA4();
      *(_OWORD *)(v16 + 16) = xmmword_1AF530;
      if (v45)
      {
        *(void *)(v16 + 32) = v45;
        uint64_t v46 = v16;
        sub_1ACEF0();
        v0[58] = v46;
        id v34 = v45;
        swift_task_alloc();
        sub_250E0();
        v0[59] = v35;
        *uint64_t v35 = v36;
        v35[1] = sub_ACB94;
        uint64_t v19 = v0[54];
        uint64_t v16 = v0[40];
        uint64_t v17 = v0 + 34;
        uint64_t v18 = v46;
        uint64_t v20 = v31;
        uint64_t v21 = v32;
        return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v16, v17, v18, v19, v20, v21);
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v16, v17, v18, v19, v20, v21);
  }
  uint64_t v11 = v0[5];
  uint64_t v12 = v0[6];
  sub_2E38(v0 + 2, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  sub_2E38(v0 + 19, v0[22]);
  uint64_t v13 = sub_1AB030();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 19));
  sub_AD694((uint64_t)(v0 + 2));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 14));
  if (v13) {
    goto LABEL_6;
  }
  sub_AD794();
  uint64_t v37 = v0[27];
  uint64_t v38 = v0[28];
  sub_2E38((void *)v13, v37);
  sub_2694(&qword_202588);
  uint64_t v16 = sub_47CA4();
  *(_OWORD *)(v16 + 16) = xmmword_1AF530;
  if (!v1) {
    goto LABEL_17;
  }
  *(void *)(v16 + 32) = v1;
  uint64_t v47 = v16;
  sub_1ACEF0();
  v0[60] = v47;
  id v39 = v1;
  swift_task_alloc();
  sub_250E0();
  v0[61] = v40;
  *Swift::String v40 = v41;
  v40[1] = sub_ACD74;
  uint64_t v42 = v0[54];
  uint64_t v43 = v0[40];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v43, v47, v42, v37, v38);
}

uint64_t sub_ACB94()
{
  sub_A364();
  sub_A1B4();
  uint64_t v2 = v1 + 272;
  uint64_t v3 = *v0;
  sub_A304();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_ACC84()
{
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v5 = *(void *)(v0 + 368);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v6 = *(void *)(v0 + 360);
  uint64_t v7 = *(void *)(v0 + 344);

  sub_24FE0(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_AD75C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v8();
}

uint64_t sub_ACD74()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  void *v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_ACE58()
{
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 416);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_AD75C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v4();
}

uint64_t sub_ACF14()
{
  v0[57] = 0;
  uint64_t v2 = v0[50];
  uint64_t v1 = v0[51];
  uint64_t v3 = v0[48];
  uint64_t v4 = v0[49];
  sub_1AB090();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  sub_1AB3C0();
  uint64_t v5 = (void *)v0[41];
  sub_1AB380();
  uint64_t v6 = v5[3];
  uint64_t v7 = v5[4];
  sub_2E38(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  sub_2E38(v0 + 14, v0[17]);
  char v8 = sub_1AB040();
  sub_AD65C((uint64_t)v5, (uint64_t)(v0 + 2));
  if (v8)
  {
    sub_AD694((uint64_t)(v0 + 2));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 14));
  }
  else
  {
    uint64_t v9 = v0[5];
    uint64_t v10 = v0[6];
    sub_2E38(v0 + 2, v9);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    sub_2E38(v0 + 19, v0[22]);
    uint64_t v11 = sub_1AB030();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 19));
    sub_AD694((uint64_t)(v0 + 2));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 14));
    if ((v11 & 1) == 0) {
      goto LABEL_7;
    }
  }
  uint64_t v13 = v0[44];
  uint64_t v12 = v0[45];
  sub_1AD080(33);
  swift_bridgeObjectRelease();
  v0[39] = 1242545199;
  v24._countAndFlagsBits = sub_1AD2C0();
  sub_1ACE70(v24);
  swift_bridgeObjectRelease();
  sub_1AAB00();
  swift_bridgeObjectRelease();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v13, 1, v12) == 1) {
    __break(1u);
  }
  uint64_t v15 = v0[46];
  uint64_t v14 = v0[47];
  uint64_t v16 = v0[45];
  uint64_t v18 = v0[42];
  uint64_t v17 = (uint64_t *)v0[43];
  uint64_t v19 = v0[41];
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 32))(v14, v0[44], v16);
  uint64_t v20 = sub_AD710();
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v17 + *(int *)(v18 + 20), v14, v16);
  *uint64_t v17 = v20;
  v17[1] = v22;
  sub_E3FC(v19 + 40, (uint64_t)(v0 + 29));
  sub_2E38(v0 + 29, v0[32]);
  v0[37] = type metadata accessor for WellnessSnippets();
  v0[38] = sub_24F2C();
  uint64_t v11 = (uint64_t)sub_B5B0(v0 + 34);
  sub_24F7C((uint64_t)v17, v11);
  swift_storeEnumTagMultiPayload();
  sub_2694(&qword_202588);
  sub_47CA4();
  __break(1u);
LABEL_7:
  sub_AD794();
  sub_2E38((void *)v11, v0[27]);
  sub_2694(&qword_202588);
  uint64_t result = sub_47CA4();
  __break(1u);
  return result;
}

uint64_t sub_AD280()
{
  sub_A364();
  *(void *)(v0 + 104) = v1;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 112) = v2;
  void *v2 = v3;
  v2[1] = sub_AD314;
  return sub_AC368();
}

uint64_t sub_AD314()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  void *v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_AD3DC()
{
  sub_E3FC(v0 + 16, v0 + 56);
  uint64_t v1 = swift_allocObject();
  sub_24D80((long long *)(v0 + 56), v1 + 16);
  sub_1AB350();
  sub_1AAE40();
  swift_allocObject();
  *(void *)(v0 + 96) = sub_1AAE30();
  sub_1AB120();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_release();
  sub_E564();
  return v2();
}

uint64_t sub_AD4F4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_24C20;
  return sub_AD280();
}

uint64_t sub_AD58C()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_AD5C4()
{
  sub_A364();
  uint64_t v3 = v2;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v5;
  v4[1] = sub_24C20;
  return sub_24B08(v3, v0 + 16);
}

uint64_t sub_AD65C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_AD694(uint64_t a1)
{
  return a1;
}

unint64_t sub_AD6C4()
{
  unint64_t result = qword_205608;
  if (!qword_205608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205608);
  }
  return result;
}

uint64_t sub_AD710()
{
  return sub_C0D54(0x707041206E65704FLL, 0xEE0065726F745320, 0x537070416E65706FLL, (void *)0xEC00000065726F74);
}

uint64_t sub_AD75C()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
  return swift_task_dealloc();
}

uint64_t sub_AD794()
{
  uint64_t v2 = *(void *)(v0 + 328) + 40;
  return sub_E3FC(v2, v0 + 192);
}

uint64_t sub_AD7B4()
{
  sub_1AB510();
  sub_52C4();
  uint64_t v36 = v0;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v35 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v4 = sub_1AC800();
  sub_52C4();
  uint64_t v6 = v5;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v33 - v12;
  unint64_t v14 = sub_1AB590();
  unint64_t v15 = v14;
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_1AD170();
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_3:
    sub_4AA30(0, (v15 & 0xC000000000000001) == 0, v15);
    if ((v15 & 0xC000000000000001) != 0)
    {
      uint64_t v16 = sub_1AD0A0();
    }
    else
    {
      uint64_t v16 = *(void *)(v15 + 32);
      swift_retain();
    }
    swift_bridgeObjectRelease();
    sub_1AC7D0();
    sub_ADDC8();
    uint64_t v17 = v6;
    uint64_t v18 = v13;
    sub_6FF3C();
    v19();
    swift_retain_n();
    uint64_t v20 = sub_1AC7F0();
    os_log_type_t v21 = sub_1ACF50();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      v38[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315394;
      uint64_t v23 = sub_1ABB80();
      uint64_t v37 = sub_4A278(v23, v24, v38);
      uint64_t v34 = v4;
      sub_1ACFE0();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v25 = sub_1ABB60();
      uint64_t v37 = sub_4A278(v25, v26, v38);
      sub_1ACFE0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v20, v21, "NLv4 Wellness Parse: Input is entity=%s verb=%s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v34);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v4);
    }
    return v16;
  }
  swift_bridgeObjectRelease();
  sub_1AC7D0();
  sub_ADDC8();
  sub_6FF3C();
  v28();
  uint64_t v29 = sub_1AC7F0();
  os_log_type_t v30 = sub_1ACF60();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl(&def_342E4, v29, v30, "NLv4 Wellness Parse: No tasks in input", v31, 2u);
    sub_A1F0();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v4);
  return 0;
}

uint64_t sub_ADDB0()
{
  return v0;
}

uint64_t sub_ADDC8()
{
  return swift_beginAccess();
}

uint64_t sub_ADDE4()
{
  type metadata accessor for MainFlow();
  sub_B719C((unint64_t *)&qword_205768, (void (*)(uint64_t))type metadata accessor for MainFlow);

  return sub_1AAF80();
}

uint64_t sub_ADE70()
{
  sub_A364();
  v1[118] = v0;
  v1[117] = v2;
  uint64_t v3 = sub_2694(&qword_2056C0);
  sub_53D4(v3);
  v1[119] = sub_A42C();
  uint64_t v4 = sub_1AAC70();
  v1[120] = v4;
  sub_A19C(v4);
  v1[121] = v5;
  v1[122] = sub_A42C();
  uint64_t v6 = sub_1AB4B0();
  v1[123] = v6;
  sub_A19C(v6);
  v1[124] = v7;
  v1[125] = sub_A42C();
  uint64_t v8 = sub_1AB420();
  v1[126] = v8;
  sub_A19C(v8);
  v1[127] = v9;
  v1[128] = sub_A220();
  v1[129] = swift_task_alloc();
  uint64_t v10 = sub_1AB450();
  v1[130] = v10;
  sub_A19C(v10);
  v1[131] = v11;
  v1[132] = sub_A42C();
  uint64_t v12 = sub_1ABE80();
  v1[133] = v12;
  sub_A19C(v12);
  v1[134] = v13;
  v1[135] = sub_A220();
  v1[136] = swift_task_alloc();
  v1[137] = swift_task_alloc();
  v1[138] = swift_task_alloc();
  v1[139] = swift_task_alloc();
  v1[140] = swift_task_alloc();
  v1[141] = swift_task_alloc();
  uint64_t v14 = sub_1AC800();
  v1[142] = v14;
  sub_A19C(v14);
  v1[143] = v15;
  v1[144] = sub_A220();
  v1[145] = swift_task_alloc();
  v1[146] = swift_task_alloc();
  v1[147] = swift_task_alloc();
  v1[148] = swift_task_alloc();
  v1[149] = swift_task_alloc();
  v1[150] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v16, v17, v18);
}

uint64_t sub_AE0B0()
{
  uint64_t v22 = v0;
  uint64_t v1 = v0[150];
  uint64_t v2 = v0[143];
  uint64_t v3 = v0[142];
  uint64_t v4 = sub_1AC7D0();
  v0[151] = v4;
  sub_A340();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[152] = v5;
  v0[153] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v3);
  uint64_t v6 = sub_1AC7F0();
  os_log_type_t v7 = sub_1ACF50();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)sub_292A0();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&def_342E4, v6, v7, " ", v8, 2u);
    sub_A1F0();
  }
  uint64_t v9 = v0[150];
  uint64_t v10 = v0[149];
  uint64_t v11 = v0[143];
  uint64_t v12 = v0[142];

  uint64_t v13 = *(void (**)(uint64_t))(v11 + 8);
  v0[154] = v13;
  v0[155] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v20 = v13;
  ((void (*)(uint64_t, uint64_t))v13)(v9, v12);
  sub_A340();
  v5(v10, v4, v12);
  uint64_t v14 = sub_1AC7F0();
  os_log_type_t v15 = sub_1ACF50();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)sub_A4B0();
    uint64_t v21 = sub_E620();
    *(_DWORD *)uint64_t v16 = 136315138;
    v0[116] = sub_4A278(0x776F6C466E69614DLL, 0xE800000000000000, &v21);
    sub_1ACFE0();
    _os_log_impl(&def_342E4, v14, v15, "🏳️‍🌈=====Executing %s from WellnessFlowPlugin=====🏳️‍🌈", v16, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }

  uint64_t v17 = sub_B7B6C();
  v20(v17);
  uint64_t v18 = (void *)swift_task_alloc();
  v0[156] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_AE368;
  return sub_AF6CC();
}

uint64_t sub_AE368()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(unsigned char *)(v1 + 537) = v3;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_AE438()
{
  uint64_t v122 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1216);
  uint64_t v2 = *(void *)(v0 + 1208);
  uint64_t v3 = *(void *)(v0 + 1136);
  if (*(unsigned char *)(v0 + 537) != 1)
  {
    uint64_t v33 = v0 + 336;
    uint64_t v34 = *(void *)(v0 + 1152);
    sub_A340();
    v1(v34, v2, v3);
    uint64_t v35 = (void *)sub_1AC7F0();
    os_log_type_t v36 = sub_1ACF60();
    if (sub_470C8(v36))
    {
      uint64_t v37 = (_WORD *)sub_292A0();
      sub_475A0(v37);
      sub_471F8(&def_342E4, v38, v39, "🚨 Could not enable redaction of SELF messages for siri session, returning Generic Error 🚨");
      sub_A1F0();
    }
    Swift::String v40 = *(void (**)(uint64_t, uint64_t))(v0 + 1232);
    uint64_t v41 = *(void *)(v0 + 1152);
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)(v0 + 1184);
  sub_A340();
  v1(v4, v2, v3);
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)sub_292A0();
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl(&def_342E4, v5, v6, "✅ Successfully enabled redaction of SELF messages for the Siri session", v7, 2u);
    sub_A1F0();
  }
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 1232);
  uint64_t v9 = *(void *)(v0 + 1184);
  uint64_t v10 = *(void *)(v0 + 1136);

  v8(v9, v10);
  sub_1ABE30();
  uint64_t v11 = sub_1ABE20();
  uint64_t v12 = *(void (**)(uint64_t))(v0 + 1216);
  if (!v11)
  {
    uint64_t v33 = v0 + 16;
    sub_A340();
    uint64_t v42 = sub_B7B9C();
    v12(v42);
    uint64_t v35 = (void *)sub_1AC7F0();
    os_log_type_t v43 = sub_1ACF60();
    if (sub_470C8(v43))
    {
      uint64_t v44 = (_WORD *)sub_292A0();
      sub_475A0(v44);
      sub_471F8(&def_342E4, v45, v46, "Could not find information about current request in Siri Environment, returning Generic Error");
      sub_A1F0();
    }
    Swift::String v40 = *(void (**)(uint64_t, uint64_t))(v0 + 1232);
    uint64_t v41 = *(void *)(v0 + 1160);
LABEL_13:
    uint64_t v47 = *(void *)(v0 + 1136);
    uint64_t v48 = *(void *)(v0 + 944);

    v40(v41, v47);
    uint64_t v49 = type metadata accessor for MainFlow();
    sub_9B48(v48 + *(int *)(v49 + 28), v33);
    sub_9BA4();
    sub_1AB120();
    sub_9BF0(v33);
    goto LABEL_39;
  }
  uint64_t v13 = *(void *)(v0 + 1128);
  uint64_t v14 = *(void *)(v0 + 1120);
  uint64_t v116 = *(void *)(v0 + 1112);
  uint64_t v118 = *(void *)(v0 + 1104);
  uint64_t v15 = *(void *)(v0 + 1072);
  uint64_t v16 = *(void *)(v0 + 1064);
  *(void *)(v0 + 1256) = sub_1ABE10();
  swift_release();
  sub_D2B2C();
  sub_2694(&qword_2056D0);
  *(void *)(v0 + 1264) = *(void *)(v15 + 72);
  *(_DWORD *)(v0 + 1344) = *(_DWORD *)(v15 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v0 + 1272) = v17;
  *(_OWORD *)(v17 + 16) = xmmword_1AF720;
  sub_1ABE60();
  sub_1ABE50();
  sub_1AC450();
  sub_1AC440();
  sub_A340();
  uint64_t v18 = sub_B7B6C();
  v12(v18);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  *(void *)(v0 + 1280) = v19;
  *(void *)(v0 + 1288) = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v19(v116, v13, v16);
  v19(v118, v14, v16);
  uint64_t v20 = sub_1AC7F0();
  os_log_type_t v21 = sub_1ACF50();
  uint64_t v22 = (void (*)(uint64_t))v21;
  BOOL v23 = os_log_type_enabled(v20, v21);
  unint64_t v24 = *(void (**)(uint64_t, uint64_t))(v0 + 1232);
  uint64_t v25 = *(void *)(v0 + 1176);
  uint64_t v112 = *(void *)(v0 + 1104);
  uint64_t v114 = *(void *)(v0 + 1136);
  uint64_t v26 = *(void *)(v0 + 1064);
  if (v23)
  {
    uint64_t v13 = v0 + 920;
    uint64_t v110 = *(void *)(v0 + 1176);
    uint64_t v27 = swift_slowAlloc();
    uint64_t v121 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315394;
    sub_B719C(&qword_2056E0, (void (*)(uint64_t))&type metadata accessor for ExecutionLocation);
    uint64_t v28 = sub_1AD2C0();
    *(void *)(v0 + 912) = sub_4A278(v28, v29, &v121);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v30 = sub_B7AE8();
    v22(v30);
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v31 = sub_1AD2C0();
    *(void *)(v0 + 920) = sub_4A278(v31, v32, &v121);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v22)(v112, v26);
    _os_log_impl(&def_342E4, v20, (os_log_type_t)v22, "ASR Location: %s, NL Location: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    v24(v110, v114);
  }
  else
  {
    uint64_t v50 = sub_B7AE8();
    v22(v50);
    ((void (*)(uint64_t, uint64_t))v22)(v112, v26);

    v24(v25, v114);
  }
  *(void *)(v0 + 1296) = v22;
  uint64_t v51 = *(void *)(v0 + 1096);
  uint64_t v52 = *(void *)(v0 + 1064);
  sub_1ABE70();
  sub_B7B9C();
  char v53 = sub_1ABE40();
  *(void *)(v0 + 1304) = v13;
  ((void (*)(uint64_t, uint64_t))v22)(v51, v52);
  sub_E524();
  v54();
  if (v53)
  {
    uint64_t v55 = *(void *)(v0 + 1096);
    uint64_t v56 = *(void *)(v0 + 1064);
    sub_1ABE60();
    char v57 = sub_1ABE40();
    ((void (*)(uint64_t, uint64_t))v22)(v55, v56);
  }
  else
  {
    char v57 = 0;
  }
  int v58 = v57 & 1;
  *(unsigned char *)(v0 + 538) = v57 & 1;
  uint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1216);
  uint64_t v60 = *(void *)(v0 + 1208);
  uint64_t v61 = *(void *)(v0 + 1168);
  uint64_t v62 = *(void *)(v0 + 1136);
  ((void (*)(void, void))v22)(*(void *)(v0 + 1088), *(void *)(v0 + 1064));
  sub_A340();
  v59(v61, v60, v62);
  uint64_t v63 = sub_1AC7F0();
  os_log_type_t v64 = sub_1ACF50();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = (uint8_t *)sub_B7C18();
    *(_DWORD *)uint64_t v65 = 67109120;
    *(_DWORD *)(v0 + 540) = v58;
    sub_1ACFE0();
    _os_log_impl(&def_342E4, v63, v64, "Is text request: %{BOOL}d", v65, 8u);
    sub_A1F0();
  }
  uint64_t v120 = (void *)(v0 + 544);
  uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v0 + 1232);
  uint64_t v67 = *(void *)(v0 + 1168);
  uint64_t v68 = *(void *)(v0 + 1136);
  uint64_t v69 = *(void *)(v0 + 1032);
  uint64_t v70 = *(void *)(v0 + 1016);
  uint64_t v71 = *(void *)(v0 + 1008);

  v66(v67, v68);
  *(void *)(v0 + 1312) = *(void *)(v70 + 16);
  *(void *)(v0 + 1320) = (v70 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  sub_E524();
  v72();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v70 + 88))(v69, v71) != enum case for Parse.uso(_:)) {
    goto LABEL_25;
  }
  (*(void (**)(void, void))(*(void *)(v0 + 1016) + 96))(*(void *)(v0 + 1032), *(void *)(v0 + 1008));
  uint64_t v73 = sub_B7B9C();
  v74(v73);
  sub_1AB440();
  uint64_t v75 = sub_141EE8();
  *(void *)(v0 + 1328) = v75;
  sub_7F388();
  v76();
  if (!v75)
  {
LABEL_25:
    sub_E530();
    v81();
    v113 = (uint64_t *)(v0 + 176);
    uint64_t v115 = (void *)(v0 + 496);
    uint64_t v117 = (uint64_t *)(v0 + 584);
    v109 = (void *)(v0 + 624);
    uint64_t v111 = (uint64_t *)(v0 + 704);
    if (*(void *)(*(void *)(v0 + 1272) + 16))
    {
      sub_B719C(&qword_2056D8, (void (*)(uint64_t))&type metadata accessor for ExecutionLocation);
      while ((sub_B78EC() & 1) == 0)
      {
        sub_B7C30();
        if (v82) {
          goto LABEL_30;
        }
      }
      uint64_t v103 = sub_B793C();
      v104(v103);
      while ((sub_B78EC() & 1) == 0)
      {
        sub_B7C30();
        if (v82) {
          goto LABEL_31;
        }
      }
      int v85 = 1;
    }
    else
    {
LABEL_30:
      uint64_t v83 = sub_B793C();
      v84(v83);
LABEL_31:
      int v85 = *(unsigned __int8 *)(v0 + 538);
    }
    int v105 = v85;
    uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1312);
    uint64_t v106 = *(void (**)(void))(v0 + 1296);
    uint64_t v119 = *(void *)(v0 + 1128);
    uint64_t v108 = *(void *)(v0 + 1120);
    uint64_t v87 = *(void *)(v0 + 1024);
    uint64_t v88 = *(void *)(v0 + 1008);
    uint64_t v89 = *(void *)(v0 + 952);
    uint64_t v90 = *(void *)(v0 + 944);
    *(void *)type = *(void *)(v0 + 1064);
    v106(*(void *)(v0 + 1080));
    swift_bridgeObjectRelease();
    v86(v87, v90, v88);
    uint64_t v91 = (void *)(v90 + *(int *)(type metadata accessor for MainFlow() + 20));
    uint64_t v93 = v91[3];
    uint64_t v92 = v91[4];
    sub_2E38(v91, v93);
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v93, v92);
    sub_2E38(v120, *(void *)(v0 + 568));
    uint64_t v94 = sub_1AB020();
    if (v95) {
      uint64_t v96 = v94;
    }
    else {
      uint64_t v96 = 0;
    }
    if (v95) {
      unint64_t v97 = v95;
    }
    else {
      unint64_t v97 = 0xE000000000000000;
    }
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v120);
    sub_1AAC60();
    sub_1AAC50();
    sub_B7ACC();
    v98();
    *(void *)(v0 + 688) = &type metadata for WellnessFeatureFlags;
    *(void *)(v0 + 696) = &off_1F95D8;
    sub_AFBDC(v87, v105, v96, v97, v89, v115);
    swift_bridgeObjectRelease();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 664);
    sub_5B028(v89, &qword_2056C0);
    sub_E558();
    v99();
    sub_B1FA0(v111);
    sub_B2054(v113);
    *(void *)(v0 + 648) = &type metadata for WellnessCATProvider;
    *(void *)(v0 + 656) = &off_1F9800;
    uint64_t v100 = swift_allocObject();
    *(void *)(v0 + 624) = v100;
    *(_OWORD *)(v100 + 16) = 0u;
    *(_OWORD *)(v100 + 32) = 0u;
    sub_B13FC((uint64_t)v115, v111, (uint64_t)v113, v109, v117);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v109);
    sub_E4B8((uint64_t)v113);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v111);
    sub_B7BCC();
    sub_1AB120();
    swift_release();
    sub_B2EB8((uint64_t)v115);
    ((void (*)(uint64_t, void))v106)(v108, *(void *)type);
    ((void (*)(uint64_t, void))v106)(v119, *(void *)type);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v117);
LABEL_39:
    sub_B79EC();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_B7B34();
    __asm { BRAA            X1, X16 }
  }
  swift_retain();
  uint64_t v77 = (void *)swift_task_alloc();
  *(void *)(v0 + 1336) = v77;
  *uint64_t v77 = v0;
  v77[1] = sub_AF120;
  sub_B7B34();
  return sub_197ED8(v78);
}

uint64_t sub_AF120()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_E53C();
  void *v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

void sub_AF208()
{
  uint64_t v1 = *(void *)(v0 + 1056);
  uint64_t v2 = *(void *)(v0 + 1048);
  uint64_t v3 = *(void *)(v0 + 1040);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (*(void *)(*(void *)(v0 + 1272) + 16))
  {
    sub_B719C(&qword_2056D8, (void (*)(uint64_t))&type metadata accessor for ExecutionLocation);
    while ((sub_B78EC() & 1) == 0)
    {
      sub_B7C30();
      if (v4) {
        goto LABEL_6;
      }
    }
    uint64_t v25 = sub_B793C();
    v26(v25);
    while ((sub_B78EC() & 1) == 0)
    {
      sub_B7C30();
      if (v4) {
        goto LABEL_7;
      }
    }
    int v7 = 1;
  }
  else
  {
LABEL_6:
    uint64_t v5 = sub_B793C();
    v6(v5);
LABEL_7:
    int v7 = *(unsigned __int8 *)(v0 + 538);
  }
  int v29 = v7;
  uint64_t v33 = (void *)(v0 + 624);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1312);
  uint64_t v31 = (uint64_t *)(v0 + 704);
  unint64_t v32 = (uint64_t *)(v0 + 584);
  uint64_t v27 = (void *)(v0 + 496);
  uint64_t v30 = (uint64_t *)(v0 + 176);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 1296);
  uint64_t v36 = *(void *)(v0 + 1128);
  uint64_t v35 = *(void *)(v0 + 1120);
  uint64_t v34 = *(void *)(v0 + 1064);
  uint64_t v9 = *(void *)(v0 + 1024);
  uint64_t v10 = *(void *)(v0 + 1008);
  uint64_t v11 = *(void *)(v0 + 952);
  uint64_t v12 = *(void *)(v0 + 944);
  ((void (*)(void))v28)(*(void *)(v0 + 1080));
  swift_bridgeObjectRelease();
  v8(v9, v12, v10);
  uint64_t v13 = (void *)(v12 + *(int *)(type metadata accessor for MainFlow() + 20));
  uint64_t v14 = v13[3];
  uint64_t v15 = v13[4];
  sub_2E38(v13, v14);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  sub_2E38((void *)(v0 + 544), *(void *)(v0 + 568));
  uint64_t v16 = sub_1AB020();
  if (v17) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17) {
    unint64_t v19 = v17;
  }
  else {
    unint64_t v19 = 0xE000000000000000;
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 544);
  sub_1AAC60();
  sub_1AAC50();
  sub_7F388();
  v20();
  *(void *)(v0 + 688) = &type metadata for WellnessFeatureFlags;
  *(void *)(v0 + 696) = &off_1F95D8;
  sub_AFBDC(v9, v29, v18, v19, v11, v27);
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 664);
  sub_5B028(v11, &qword_2056C0);
  sub_E558();
  v21();
  sub_B1FA0(v31);
  sub_B2054(v30);
  *(void *)(v0 + 648) = &type metadata for WellnessCATProvider;
  *(void *)(v0 + 656) = &off_1F9800;
  uint64_t v22 = swift_allocObject();
  *(void *)(v0 + 624) = v22;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  sub_B13FC((uint64_t)v27, v31, (uint64_t)v30, v33, v32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v33);
  sub_E4B8((uint64_t)v30);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v31);
  sub_B7BCC();
  sub_1AB120();
  swift_release();
  sub_B2EB8((uint64_t)v27);
  v28(v35, v34);
  v28(v36, v34);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v32);
  sub_B79EC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_B7B34();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_AF6CC()
{
  sub_A364();
  uint64_t v1 = sub_1AC800();
  v0[19] = v1;
  sub_A19C(v1);
  v0[20] = v2;
  v0[21] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_AF754()
{
  uint64_t v1 = mach_absolute_time();
  id v2 = [self sharedAnalytics];
  v0[22] = v2;
  v0[2] = v0;
  v0[7] = v0 + 24;
  v0[3] = sub_AF890;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_B2E08;
  v0[13] = &unk_1F6E08;
  v0[14] = v3;
  [v2 sensitiveCondition:4 startedAt:v1 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_AF890()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 184) = *(void *)(v3 + 48);
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_AF970()
{
  sub_A364();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 192);

  swift_task_dealloc();
  id v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_AF9DC()
{
  uint64_t v1 = (void *)v0[22];
  swift_willThrow();

  sub_1AC7D0();
  sub_A340();
  uint64_t v2 = sub_B7B6C();
  v3(v2);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = sub_1AC7F0();
  os_log_type_t v5 = sub_1ACF60();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)sub_A4B0();
    uint64_t v7 = (void *)sub_B7C18();
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[18] = v8;
    sub_1ACFE0();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_342E4, v4, v5, "🚨 Got an error while trying to mark Siri session as Health sensitive! 🚨 \nError:%@", v6, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_E530();
  v9();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10(0);
}

uint64_t sub_AFBDC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v180 = a5;
  uint64_t v195 = a3;
  int v186 = a2;
  uint64_t v202 = a1;
  v199 = a6;
  uint64_t v182 = sub_1AAC40();
  sub_52C4();
  uint64_t v177 = v7;
  __chkstk_darwin(v8);
  sub_53E0();
  uint64_t v176 = v9;
  uint64_t v179 = sub_2694(&qword_205758);
  sub_20688();
  __chkstk_darwin(v10);
  sub_53E0();
  uint64_t v181 = v11;
  uint64_t v12 = sub_2694(&qword_2056C0);
  uint64_t v13 = sub_53D4(v12);
  __chkstk_darwin(v13);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v14);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v15);
  sub_55680((uint64_t)&v176 - v16);
  uint64_t v191 = sub_1AB4B0();
  sub_52C4();
  uint64_t v190 = v17;
  __chkstk_darwin(v18);
  sub_53E0();
  sub_55680(v19);
  uint64_t v198 = sub_1AB450();
  sub_52C4();
  uint64_t v192 = v20;
  __chkstk_darwin(v21);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v22);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v23);
  sub_55680((uint64_t)&v176 - v24);
  uint64_t v204 = sub_1AB420();
  sub_52C4();
  uint64_t v203 = v25;
  __chkstk_darwin(v26);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v27);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v28);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v29);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v30);
  sub_55680((uint64_t)&v176 - v31);
  uint64_t v32 = sub_1AC800();
  sub_52C4();
  uint64_t v34 = v33;
  __chkstk_darwin(v35);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v36);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v37);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v38);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v39);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v40);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v41);
  sub_2073C();
  sub_20698();
  uint64_t v43 = __chkstk_darwin(v42);
  uint64_t v45 = (char *)&v176 - v44;
  __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v176 - v46;
  uint64_t v48 = sub_1AC7D0();
  sub_A340();
  uint64_t v49 = *(uint64_t **)(v34 + 16);
  uint64_t v211 = v32;
  uint64_t v50 = v32;
  uint64_t v51 = v49;
  ((void (*)(char *, uint64_t, uint64_t))v49)(v47, v48, v50);
  uint64_t v52 = sub_1AC7F0();
  os_log_type_t v53 = sub_1ACF50();
  BOOL v54 = os_log_type_enabled(v52, v53);
  uint64_t v207 = v48;
  uint64_t v210 = v34 + 16;
  v209 = (uint8_t *)v51;
  if (v54)
  {
    uint64_t v55 = v34;
    unint64_t v56 = a4;
    char v57 = (uint8_t *)sub_B7C18();
    *(_DWORD *)char v57 = 67109120;
    v216 = &type metadata for WellnessFeatureFlagsKey;
    unint64_t v217 = sub_45E30();
    LOBYTE(v215) = 2;
    uint64_t v51 = &v215;
    char v58 = sub_1AB480();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v215);
    int v59 = v58 & 1;
    uint64_t v34 = v55;
    uint64_t v48 = v207;
    sub_B7A74(v59);
    _os_log_impl(&def_342E4, v52, v53, "Server Fallback is Enabled: %{BOOL}d", v57, 8u);
    a4 = v56;
    sub_A1F0();
  }

  uint64_t v60 = *(void (**)(void))(v34 + 8);
  uint64_t v61 = v211;
  sub_7F388();
  v60();
  sub_A340();
  ((void (*)(char *, uint64_t, uint64_t))v51)(v45, v48, v61);
  swift_bridgeObjectRetain_n();
  uint64_t v62 = sub_1AC7F0();
  os_log_type_t v63 = sub_1ACF50();
  BOOL v64 = os_log_type_enabled(v62, v63);
  uint64_t v205 = v34 + 8;
  v208 = v60;
  unint64_t v183 = a4;
  if (v64)
  {
    uint64_t v65 = (uint8_t *)swift_slowAlloc();
    uint64_t v215 = sub_E620();
    *(_DWORD *)uint64_t v65 = 136315138;
    uint64_t v51 = (uint64_t *)v209;
    swift_bridgeObjectRetain();
    uint64_t v218 = sub_4A278(v195, a4, &v215);
    sub_1ACFE0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&def_342E4, v62, v63, "localeIdentifier received in plugin is: %s", v65, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_7F388();
  v60();
  uint64_t v66 = v204;
  os_log_type_t v67 = v200;
  sub_A340();
  sub_B7AA8();
  ((void (*)(void))v51)();
  uint64_t v68 = sub_1AC7F0();
  os_log_type_t v69 = sub_1ACF50();
  if (sub_B7B50(v69))
  {
    uint64_t v70 = (uint8_t *)sub_B7C18();
    *(_DWORD *)uint64_t v70 = 67109120;
    v216 = &type metadata for WellnessFeatureFlagsKey;
    unint64_t v217 = sub_45E30();
    LOBYTE(v215) = 3;
    uint64_t v51 = &v215;
    char v71 = sub_1AB480();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v215);
    int v72 = v71 & 1;
    uint64_t v66 = v204;
    sub_B7A74(v72);
    _os_log_impl(&def_342E4, v68, v67, "overrideOnDeviceCheckFlagIsEnabled: %{BOOL}d", v70, 8u);
    sub_A1F0();
  }

  sub_7F388();
  v73();
  v216 = &type metadata for WellnessFeatureFlagsKey;
  unint64_t v74 = sub_45E30();
  unint64_t v217 = v74;
  LOBYTE(v215) = 3;
  int v187 = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v215);
  v216 = &type metadata for WellnessFeatureFlagsKey;
  unint64_t v217 = v74;
  unint64_t v200 = v74;
  LOBYTE(v215) = 2;
  LOBYTE(v74) = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v215);
  uint64_t v75 = v203;
  uint64_t v204 = *(void *)(v203 + 16);
  sub_B7AC0();
  v76();
  if (v74)
  {
    char v77 = sub_1AC400();
    sub_B7B9C();
    v201 = v78;
    sub_B7ACC();
    v79();
    if (v77)
    {
      sub_A340();
      sub_B7AA8();
      ((void (*)(void))v51)();
      uint64_t v80 = (void (*)(void))v204;
      sub_B7AC0();
      v80();
      uint64_t v81 = sub_1AC7F0();
      os_log_type_t v82 = sub_1ACF50();
      if (os_log_type_enabled(v81, v82))
      {
        uint64_t v83 = (uint8_t *)sub_A4B0();
        uint64_t v210 = sub_E620();
        uint64_t v214 = v210;
        *(_DWORD *)uint64_t v83 = 136315138;
        v209 = v83 + 4;
        sub_B7AC0();
        v80();
        sub_B7B6C();
        uint64_t v84 = sub_1ACE00();
        uint64_t v86 = sub_4A278(v84, v85, &v214);
        sub_B7B08(v86);
        swift_bridgeObjectRelease();
        sub_B7ACC();
        v87();
        _os_log_impl(&def_342E4, v81, v82, "Server Fallback for %s", v83, 0xCu);
        sub_B7B78();
        sub_A1F0();
        sub_A1F0();
      }
      else
      {
        sub_B7ACC();
        v117();
      }

      sub_E530();
      uint64_t result = v118();
      uint64_t v116 = v199;
      void *v199 = 2;
      *(_OWORD *)(v116 + 1) = 0u;
      *(_OWORD *)(v116 + 3) = 0u;
      goto LABEL_26;
    }
  }
  else
  {
    v201 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
    sub_E530();
    v88();
  }
  uint64_t v89 = v197;
  uint64_t v90 = (void (*)(void))v204;
  sub_B7AC0();
  v90();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v75 + 88))(v89, v66) != enum case for Parse.uso(_:))
  {
    sub_E530();
    v104();
LABEL_19:
    sub_A340();
    uint64_t v105 = v193;
    sub_B7AA8();
    ((void (*)(void))v51)();
    uint64_t v106 = v194;
    sub_B7AC0();
    v90();
    uint64_t v107 = v90;
    uint64_t v108 = sub_1AC7F0();
    os_log_type_t v109 = sub_1ACF60();
    if (os_log_type_enabled(v108, v109))
    {
      uint64_t v110 = (uint8_t *)sub_A4B0();
      uint64_t v210 = sub_E620();
      uint64_t v214 = v210;
      *(_DWORD *)uint64_t v110 = 136315138;
      v209 = v110 + 4;
      sub_B7AC0();
      v107();
      uint64_t v111 = sub_1ACE00();
      uint64_t v113 = sub_4A278(v111, v112, &v214);
      sub_B7B08(v113);
      swift_bridgeObjectRelease();
      sub_E530();
      v114();
      _os_log_impl(&def_342E4, v108, v109, "Scribe received unsupported parse: %s", v110, 0xCu);
      sub_B7B78();
      sub_A1F0();
      sub_A1F0();
    }
    else
    {
      v201(v106, v66);
    }

    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v208)(v105, v211);
    goto LABEL_23;
  }
  (*(void (**)(uint64_t, uint64_t))(v75 + 96))(v89, v66);
  uint64_t v91 = v192;
  uint64_t v92 = v196;
  uint64_t v93 = v198;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v192 + 32))(v196, v89, v198);
  sub_1AB440();
  uint64_t v94 = sub_141EE8();
  sub_E558();
  v95();
  if (!v94)
  {
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v92, v93);
    uint64_t v51 = (uint64_t *)v209;
    uint64_t v90 = (void (*)(void))v204;
    goto LABEL_19;
  }
  uint64_t v206 = v94;
  sub_A340();
  sub_B7918();
  v96();
  unint64_t v97 = *(void (**)(void))(v91 + 16);
  sub_B7AC0();
  v97();
  uint64_t v98 = sub_1AC7F0();
  os_log_type_t v99 = sub_1ACF50();
  if (os_log_type_enabled(v98, v99))
  {
    uint64_t v100 = (uint8_t *)sub_A4B0();
    uint64_t v215 = sub_E620();
    *(_DWORD *)uint64_t v100 = 136315138;
    uint64_t v204 = (uint64_t)(v100 + 4);
    sub_B7B6C();
    sub_B7AC0();
    v97();
    uint64_t v101 = sub_1ACE00();
    uint64_t v213 = sub_4A278(v101, v102, &v215);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v103 = *(void (**)(void))(v91 + 8);
    sub_B78D8();
    v103();
    _os_log_impl(&def_342E4, v98, v99, "Received uso parse: %s", v100, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    uint64_t v103 = *(void (**)(void))(v91 + 8);
    sub_E530();
    v103();
  }

  uint64_t v119 = v205;
  uint64_t v120 = v208;
  sub_7F388();
  v120();
  uint64_t v121 = (void (*)(void))v209;
  uint64_t v122 = v206;
  sub_A340();
  sub_E524();
  v121();
  swift_retain_n();
  uint64_t v123 = sub_1AC7F0();
  os_log_type_t v124 = sub_1ACF50();
  if (os_log_type_enabled(v123, v124))
  {
    uint64_t v125 = (uint8_t *)sub_A4B0();
    uint64_t v215 = sub_E620();
    *(_DWORD *)uint64_t v125 = 136315138;
    swift_retain();
    sub_D9A2C();
    uint64_t v127 = v126;
    unint64_t v129 = v128;
    swift_release();
    uint64_t v130 = v127;
    uint64_t v119 = v205;
    uint64_t v212 = sub_4A278(v130, v129, &v215);
    uint64_t v120 = v208;
    sub_1ACFE0();
    sub_B7C00();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v123, v124, "%s", v125, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {

    sub_B7C00();
  }
  sub_7F388();
  v120();
  uint64_t v131 = v188;
  uint64_t v132 = v189;
  unint64_t v133 = v200;
  int v134 = v187;
  if (((AFDeviceSupportsSiriUOD() | v134) & 1) == 0)
  {
    sub_A340();
    os_log_type_t v140 = v185;
    sub_B7918();
    v141();
    os_log_type_t v142 = v140;
    uint64_t v143 = sub_1AC7F0();
    os_log_type_t v144 = sub_1ACF60();
    if (!sub_B7B50(v144))
    {
LABEL_45:

      sub_7F388();
      v120();
      v148 = v199;
      v199[3] = &type metadata for WellnessTask;
      v148[4] = sub_5B13C();
      swift_release();
      uint64_t *v148 = v122;
      sub_B78D8();
      uint64_t result = ((uint64_t (*)(void))v103)();
      *((unsigned char *)v148 + 40) = 4;
      return result;
    }
    v145 = v103;
    v146 = (uint8_t *)sub_292A0();
    *(_WORD *)v146 = 0;
    v147 = "⚠️ This device does not support Siri X, we are going to provide the legacy experience ⚠️";
LABEL_44:
    _os_log_impl(&def_342E4, v143, v142, v147, v146, 2u);
    uint64_t v103 = v145;
    sub_A1F0();
    goto LABEL_45;
  }
  if (((v186 | v134) & 1) == 0)
  {
    sub_B78D8();
    v103();
    uint64_t result = sub_B7C00();
LABEL_23:
    uint64_t v116 = v199;
    v199[4] = 0;
    *(_OWORD *)uint64_t v116 = 0u;
    *((_OWORD *)v116 + 1) = 0u;
LABEL_26:
    *((unsigned char *)v116 + 40) = 5;
    return result;
  }
  v216 = &type metadata for WellnessFeatureFlagsKey;
  unint64_t v217 = v133;
  LOBYTE(v215) = 0;
  char v135 = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v215);
  if ((v135 & 1) == 0)
  {
    sub_A340();
    os_log_type_t v149 = v184;
    sub_B7918();
    v150();
    os_log_type_t v142 = v149;
    uint64_t v143 = sub_1AC7F0();
    os_log_type_t v151 = sub_1ACF60();
    if (!sub_B7B50(v151)) {
      goto LABEL_45;
    }
    v145 = v103;
    v146 = (uint8_t *)sub_292A0();
    *(_WORD *)v146 = 0;
    v147 = "⚠️ Scribe feature flag is disabled, going to legacy experience ⚠️";
    goto LABEL_44;
  }
  if (isMedicationRequest(from:)())
  {
    v216 = &type metadata for WellnessFeatureFlagsKey;
    unint64_t v217 = v133;
    LOBYTE(v215) = 1;
    char v136 = sub_1AB480();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v215);
    uint64_t v137 = v199;
    if ((v136 & 1) == 0)
    {
      sub_B78D8();
      v103();
      uint64_t result = sub_B7C00();
      uint64_t v162 = 3;
LABEL_84:
      *uint64_t v137 = v162;
      *(_OWORD *)(v137 + 1) = 0u;
      *(_OWORD *)(v137 + 3) = 0u;
      char v175 = 5;
      goto LABEL_85;
    }
    BOOL v138 = v195 == 0x53552D6E65 && v183 == 0xE500000000000000;
    if (v138)
    {
      sub_553FC(v180, v131, &qword_2056C0);
      sub_B7BEC();
    }
    else
    {
      char v139 = sub_B7BA8();
      sub_553FC(v180, v131, &qword_2056C0);
      sub_B7BEC();
      if ((v139 & 1) == 0)
      {
        swift_release();
        sub_5B028(v131, &qword_2056C0);
        sub_B78D8();
        v103();
LABEL_83:
        uint64_t result = swift_release();
        uint64_t v162 = 1;
        goto LABEL_84;
      }
    }
    uint64_t v211 = (uint64_t)v103;
    sub_1AAC30();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v132, 0, 1, v122);
    uint64_t v165 = v119 + *(int *)(v179 + 48);
    sub_553FC(v131, v119, &qword_2056C0);
    sub_553FC(v132, v165, &qword_2056C0);
    sub_5B65C(v119);
    if (v138)
    {
      swift_release();
      sub_5B028(v132, &qword_2056C0);
      sub_5B028(v131, &qword_2056C0);
      sub_E530();
      v166();
      sub_5B65C(v165);
      if (v138)
      {
        uint64_t result = sub_5B028(v119, &qword_2056C0);
        uint64_t v167 = v206;
        goto LABEL_82;
      }
    }
    else
    {
      uint64_t v168 = v178;
      sub_553FC(v119, v178, &qword_2056C0);
      sub_5B65C(v165);
      if (!v169)
      {
        uint64_t v171 = v177;
        uint64_t v172 = v176;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v177 + 32))(v176, v165, v122);
        sub_B719C(&qword_205760, (void (*)(uint64_t))&type metadata accessor for Locale.Region);
        LODWORD(v210) = sub_1ACDB0();
        uint64_t v167 = v206;
        swift_release();
        v173 = *(void (**)(uint64_t, uint64_t))(v171 + 8);
        v173(v172, v122);
        sub_5B028(v189, &qword_2056C0);
        sub_5B028(v188, &qword_2056C0);
        sub_E530();
        v174();
        v173(v178, v122);
        uint64_t result = sub_5B028(v119, &qword_2056C0);
        if ((v210 & 1) == 0) {
          goto LABEL_83;
        }
LABEL_82:
        *uint64_t v137 = v167;
        char v175 = 1;
LABEL_85:
        *((unsigned char *)v137 + 40) = v175;
        return result;
      }
      swift_release();
      sub_5B028(v189, &qword_2056C0);
      sub_5B028(v131, &qword_2056C0);
      sub_E530();
      v170();
      (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v168, v122);
    }
    sub_5B028(v119, &qword_205758);
    goto LABEL_83;
  }
  v152 = (uint64_t (*)(void))v103;
  uint64_t v153 = v122;
  uint64_t v154 = v195;
  unint64_t v155 = v183;
  BOOL v156 = v195 == 0x53552D6E65 && v183 == 0xE500000000000000;
  v157 = v199;
  if (v156
    || ((char v158 = sub_B7BA8(), v154 == 0x4E432D687ALL) ? (v159 = v155 == 0xE500000000000000) : (v159 = 0),
        !v159 ? (char v160 = 0) : (char v160 = 1),
        (v158 & 1) != 0 || (v160 & 1) != 0 || (sub_1AD2F0() & 1) != 0))
  {
    sub_D8ED0();
    sub_D895C();
    if (v161 != 270) {
      sub_1771BC(v161);
    }
    sub_1AC360();
    swift_bridgeObjectRelease();
    char v163 = sub_1AC430();
    v157[3] = (uint64_t)&type metadata for WellnessTask;
    v157[4] = sub_5B13C();
    swift_release();
    uint64_t *v157 = v153;
    sub_B78D8();
    uint64_t result = v152();
    if (v163) {
      char v164 = 2;
    }
    else {
      char v164 = 3;
    }
    *((unsigned char *)v157 + 40) = v164;
  }
  else
  {
    v157[3] = (uint64_t)&type metadata for WellnessTask;
    v157[4] = sub_5B13C();
    swift_release();
    uint64_t *v157 = v153;
    sub_B78D8();
    uint64_t result = v152();
    *((unsigned char *)v157 + 40) = 0;
  }
  return result;
}

unint64_t sub_B13FC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v121 = a4;
  uint64_t v122 = a2;
  uint64_t v123 = a3;
  os_log_type_t v124 = a5;
  uint64_t v6 = sub_1AC250();
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_53E0();
  v120[1] = v8;
  sub_1AC800();
  sub_52C4();
  uint64_t v125 = v9;
  uint64_t v126 = v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v120 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (uint8_t *)v120 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)v120 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)v120 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v25 = __chkstk_darwin(v24);
  __chkstk_darwin(v25);
  sub_B2EE8(a1, (uint64_t)&v134);
  uint64_t v26 = v134;
  switch(v138)
  {
    case 1:
      sub_1AC7D0();
      sub_A340();
      uint64_t v40 = v125;
      uint64_t v39 = v126;
      sub_E524();
      v41();
      uint64_t v42 = (void *)sub_1AC7F0();
      os_log_type_t v43 = sub_1ACF50();
      if (sub_470C8(v43))
      {
        uint64_t v44 = (_WORD *)sub_292A0();
        sub_478E4(v44);
        sub_47358(&def_342E4, v45, v46, "Meds checks passed, getting flow.");
        sub_A1F0();
      }

      (*(void (**)(char *, uint64_t))(v39 + 8))(v23, v40);
      uint64_t v47 = sub_2E38(v121, v121[3]);
      uint64_t v48 = sub_B55A4(v26, v122, *v47, v47[1], v47[2], v47[3], v123);
      uint64_t v49 = sub_1AAEF0();
      uint64_t v50 = v124;
      v124[3] = v49;
      v50[4] = (uint64_t)&protocol witness table for AnyFlow;
      unint64_t result = swift_release();
      *uint64_t v50 = v48;
      break;
    case 2:
      sub_24D80(&v134, (uint64_t)v127);
      sub_1AC7D0();
      sub_A340();
      uint64_t v52 = v125;
      uint64_t v51 = v126;
      sub_E524();
      v53();
      BOOL v54 = (void *)sub_1AC7F0();
      os_log_type_t v55 = sub_1ACF50();
      if (sub_470C8(v55))
      {
        unint64_t v56 = (_WORD *)sub_292A0();
        sub_478E4(v56);
        sub_47358(&def_342E4, v57, v58, "Parse has moodLogging identifier, returning MoodLoggingPunchoutFlow.");
        sub_A1F0();
      }

      (*(void (**)(char *, uint64_t))(v51 + 8))(v20, v52);
      int v59 = v124;
      v124[3] = (uint64_t)&type metadata for MoodPunchoutFlow;
      v59[4] = sub_B6910();
      uint64_t v60 = swift_allocObject();
      *int v59 = v60;
      sub_E3FC((uint64_t)v121, v60 + 56);
      sub_9B48(v123, v60 + 96);
      sub_E3FC((uint64_t)v122, v60 + 256);
      unint64_t result = sub_24D80(v127, v60 + 16);
      break;
    case 3:
      sub_24D80(&v134, (uint64_t)v127);
      sub_1AC7D0();
      sub_A340();
      sub_B7AD8();
      sub_E524();
      v61();
      uint64_t v62 = (void *)sub_1AC7F0();
      os_log_type_t v63 = sub_1ACF50();
      if (sub_470C8(v63))
      {
        BOOL v64 = (_WORD *)sub_292A0();
        sub_478E4(v64);
        sub_47358(&def_342E4, v65, v66, "Healthkit-related utterance, getting flow.");
        sub_A1F0();
      }

      sub_B7ACC();
      v67();
      uint64_t v68 = sub_2E38(v121, v121[3]);
      uint64_t v69 = sub_B5D10((uint8_t *)v127, v122, *v68, v68[1], v68[2], v68[3], v123);
      uint64_t v70 = sub_1AAEF0();
      char v71 = v124;
      v124[3] = v70;
      v71[4] = (uint64_t)&protocol witness table for AnyFlow;
      *char v71 = v69;
      int v72 = v127;
      goto LABEL_17;
    case 4:
      sub_24D80(&v134, (uint64_t)v133);
      sub_1AC7D0();
      sub_A340();
      uint64_t v74 = v125;
      uint64_t v73 = v126;
      sub_E524();
      v75();
      uint64_t v76 = (void *)sub_1AC7F0();
      os_log_type_t v77 = sub_1ACF50();
      if (sub_470C8(v77))
      {
        uint64_t v78 = (_WORD *)sub_292A0();
        sub_478E4(v78);
        sub_47358(&def_342E4, v79, v80, "Executing Legacy behavior");
        sub_A1F0();
      }

      (*(void (**)(char *, uint64_t))(v73 + 8))(v14, v74);
      sub_E3FC((uint64_t)v133, (uint64_t)v132);
      sub_E3FC((uint64_t)v122, (uint64_t)v131);
      sub_E3FC((uint64_t)v121, (uint64_t)&v128);
      sub_9B48(v123, (uint64_t)v127);
      uint64_t v81 = v124;
      v124[3] = (uint64_t)&type metadata for LegacyFlow;
      v81[4] = sub_4BB00();
      uint64_t v82 = swift_allocObject();
      *uint64_t v81 = v82;
      sub_4B1F4(v132, v131, &v128, v127, v82 + 16);
      int v72 = (long long *)v133;
LABEL_17:
      unint64_t result = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v72);
      break;
    case 5:
      if (v136 | v137 | (unint64_t)v134 | v135 | *((void *)&v134 + 1))
      {
        uint64_t v83 = v136 | v137 | v135 | *((void *)&v134 + 1);
        if ((void)v134 != 1 || v83)
        {
          if ((void)v134 != 2 || v83)
          {
            sub_1AC7D0();
            sub_A340();
            sub_B7AD8();
            sub_E524();
            v104();
            uint64_t v105 = (void *)sub_1AC7F0();
            os_log_type_t v106 = sub_1ACF50();
            if (sub_470C8(v106))
            {
              uint64_t v107 = (_WORD *)sub_292A0();
              sub_475A0(v107);
              sub_471F8(&def_342E4, v108, v109, "Meds checks didn't pass, returning UnavailableDataFlow.");
              sub_A1F0();
            }

            sub_B7ACC();
            v110();
            uint64_t v111 = (int *)type metadata accessor for UnavailableDataFlow();
            unint64_t v112 = v124;
            v124[3] = (uint64_t)v111;
            v112[4] = sub_B719C(&qword_201DF0, (void (*)(uint64_t))type metadata accessor for UnavailableDataFlow);
            uint64_t v113 = sub_B5B0(v112);
            uint64_t v114 = (uint64_t)v113 + v111[5];
            uint64_t v115 = sub_1AAA10();
            _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v114, 1, 1, v115);
            sub_E3FC((uint64_t)v122, (uint64_t)v113 + v111[6]);
            sub_9B48(v123, (uint64_t)v113 + v111[7]);
            uint64_t v116 = sub_1AB1C0();
            swift_allocObject();
            uint64_t v117 = sub_1AB1B0();
            uint64_t v118 = (uint64_t *)((char *)v113 + v111[8]);
            v118[3] = v116;
            v118[4] = (uint64_t)&protocol witness table for ResponseFactory;
            *uint64_t v118 = v117;
            type metadata accessor for WellnessCATsSimple();
            sub_1AC240();
            uint64_t v119 = sub_1AC210();
            type metadata accessor for WellnessCATs();
            sub_1AC240();
            unint64_t result = sub_1AC1A0();
            *(unsigned char *)uint64_t v113 = 88;
            *(uint64_t *)((char *)v113 + v111[9]) = v119;
            *(uint64_t *)((char *)v113 + v111[10]) = result;
          }
          else
          {
            uint64_t v103 = v124;
            v124[3] = (uint64_t)&type metadata for ServerFallbackFlow;
            unint64_t result = sub_B6AF0();
            v103[4] = result;
          }
        }
        else
        {
          sub_1AC7D0();
          sub_A340();
          sub_B7AD8();
          sub_E524();
          v84();
          unint64_t v85 = sub_1AC7F0();
          os_log_type_t v86 = sub_1ACF60();
          if (os_log_type_enabled(v85, v86))
          {
            uint64_t v87 = (_WORD *)sub_292A0();
            sub_475A0(v87);
            _os_log_impl(&def_342E4, v85, v86, "This is an unsupported Siri locale or Device Region for Meds", v17, 2u);
            sub_A1F0();
          }

          sub_B7ACC();
          v88();
          uint64_t v89 = v124;
          v124[3] = (uint64_t)&type metadata for RegionNotSupportedForMedsFlow;
          v89[4] = sub_B6A14();
          uint64_t v90 = (void *)swift_allocObject();
          uint64_t *v89 = (uint64_t)v90;
          sub_E3FC((uint64_t)v122, (uint64_t)(v90 + 2));
          sub_9B48(v123, (uint64_t)(v90 + 7));
          uint64_t v91 = sub_1AB1C0();
          swift_allocObject();
          uint64_t v92 = sub_1AB1B0();
          v90[30] = v91;
          v90[31] = &protocol witness table for ResponseFactory;
          v90[27] = v92;
          type metadata accessor for WellnessCATs();
          sub_1AC240();
          uint64_t v93 = sub_1AC1A0();
          type metadata accessor for WellnessCATsSimple();
          sub_1AC240();
          unint64_t result = sub_1AC210();
          v90[32] = v93;
          v90[33] = result;
        }
      }
      else
      {
        sub_1AC7D0();
        sub_A340();
        sub_E524();
        v94();
        unint64_t v95 = (void *)sub_1AC7F0();
        os_log_type_t v96 = sub_1ACF60();
        if (sub_470C8(v96))
        {
          unint64_t v97 = (_WORD *)sub_292A0();
          sub_478E4(v97);
          sub_47358(&def_342E4, v98, v99, "It seems like the request did not fully run on device. We are going to show an error message.");
          sub_A1F0();
        }

        sub_E558();
        v100();
        uint64_t v101 = v124;
        v124[3] = (uint64_t)&type metadata for GenericNotSupportedFlow;
        v101[4] = sub_24CE0();
        uint64_t v102 = swift_allocObject();
        *uint64_t v101 = v102;
        unint64_t result = sub_9B48(v123, v102 + 16);
        *(unsigned char *)(v102 + 176) = 0;
      }
      break;
    default:
      sub_24D80(&v134, (uint64_t)v133);
      sub_1AC7D0();
      sub_A340();
      sub_B7AD8();
      sub_B7B9C();
      sub_E524();
      v27();
      uint64_t v28 = sub_1AC7F0();
      os_log_type_t v29 = sub_1ACF60();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (_WORD *)sub_292A0();
        sub_475A0(v30);
        _os_log_impl(&def_342E4, v28, v29, "This is an unsupported Siri locale", v17, 2u);
        sub_A1F0();
      }

      sub_B7ACC();
      v31();
      sub_E3FC((uint64_t)v133, (uint64_t)v132);
      sub_E3FC((uint64_t)v122, (uint64_t)v131);
      sub_9B48(v123, (uint64_t)v127);
      uint64_t v32 = sub_1AB1C0();
      swift_allocObject();
      uint64_t v33 = sub_1AB1B0();
      uint64_t v129 = v32;
      uint64_t v130 = &protocol witness table for ResponseFactory;
      *(void *)&long long v128 = v33;
      type metadata accessor for WellnessCATs();
      sub_1AC240();
      uint64_t v34 = sub_1AC1A0();
      type metadata accessor for WellnessCATsSimple();
      sub_1AC240();
      uint64_t v35 = sub_1AC210();
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v133);
      uint64_t v36 = v124;
      v124[3] = (uint64_t)&type metadata for RegionNotSupportedFlow;
      v36[4] = sub_B6A64();
      uint64_t v37 = (void *)swift_allocObject();
      *uint64_t v36 = (uint64_t)v37;
      sub_24D80(v132, (uint64_t)(v37 + 2));
      sub_24D80(v131, (uint64_t)(v37 + 7));
      memcpy(v37 + 12, v127, 0xA0uLL);
      unint64_t result = sub_24D80(&v128, (uint64_t)(v37 + 32));
      v37[37] = v34;
      v37[38] = v35;
      break;
  }
  return result;
}

uint64_t sub_B1FA0@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = (uint64_t)&type metadata for FlowConfigModel;
  a1[4] = (uint64_t)&protocol witness table for FlowConfigModel;
  *a1 = swift_allocObject();
  return sub_1AC3E0();
}

uint64_t sub_B2054@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1AC250();
  uint64_t v3 = sub_53D4(v2);
  __chkstk_darwin(v3);
  sub_E988C(a1);
  uint64_t v4 = type metadata accessor for WellnessCATPatternsExecutor(0);
  sub_1AC240();
  uint64_t v5 = sub_1AC1A0();
  a1[8] = v4;
  a1[9] = (uint64_t)&off_1F6840;
  a1[5] = v5;
  uint64_t v6 = type metadata accessor for WellnessLoggingCATPatternsExecutor(0);
  sub_1AC240();
  uint64_t v7 = sub_1AC1A0();
  a1[13] = v6;
  a1[14] = (uint64_t)&off_1F8838;
  a1[10] = v7;
  uint64_t v8 = type metadata accessor for WellnessQueryingCATPatternsExecutor(0);
  sub_1AC240();
  uint64_t result = sub_1AC1A0();
  a1[18] = v8;
  a1[19] = (uint64_t)&off_1F65F0;
  a1[15] = result;
  return result;
}

uint64_t sub_B2158()
{
  if (v0[5]) {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2));
  }
  if (v0[10]) {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 7));
  }
  if (v0[15]) {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 12));
  }
  if (v0[20]) {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 17));
  }
  if (v0[25]) {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 22));
  }
  if (v0[30]) {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 27));
  }
  if (v0[35]) {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 32));
  }

  return _swift_deallocObject(v0, 296, 7);
}

char *sub_B21F8(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AB420();
    (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    long long v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)&a1[v8 + 24] = v9;
    (**(void (***)(void))(v9 - 8))();
    uint64_t v10 = a3[6];
    long long v11 = *(_OWORD *)((char *)a2 + v10 + 24);
    *(_OWORD *)&a1[v10 + 24] = v11;
    (**(void (***)(void))(v11 - 8))();
    uint64_t v12 = a3[7];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = (_OWORD *)((char *)a2 + v12);
    long long v15 = *(_OWORD *)((char *)v14 + 24);
    *(_OWORD *)&a1[v12 + 24] = v15;
    (**(void (***)(char *, _OWORD *))(v15 - 8))(&a1[v12], v14);
    long long v16 = v14[4];
    *((_OWORD *)v13 + 4) = v16;
    (**(void (***)(uint64_t, uint64_t))(v16 - 8))((uint64_t)(v13 + 40), (uint64_t)v14 + 40);
    long long v17 = *(_OWORD *)((char *)v14 + 104);
    *(_OWORD *)(v13 + 104) = v17;
    (**(void (***)(uint64_t, uint64_t))(v17 - 8))((uint64_t)(v13 + 80), (uint64_t)(v14 + 5));
    long long v18 = v14[9];
    *((_OWORD *)v13 + 9) = v18;
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))((uint64_t)(v13 + 120), (uint64_t)v14 + 120);
  }
  return a1;
}

uint64_t sub_B24AC(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1AB420();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + a2[5]);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + a2[6]);
  uint64_t v5 = a1 + a2[7];
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v5);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v5 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v5 + 80);

  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v5 + 120);
}

uint64_t sub_B2554(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1AB420();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  long long v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  uint64_t v9 = a3[6];
  long long v10 = *(_OWORD *)(a2 + v9 + 24);
  *(_OWORD *)(a1 + v9 + 24) = v10;
  (**(void (***)(void))(v10 - 8))();
  uint64_t v11 = a3[7];
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  long long v14 = *(_OWORD *)((char *)v13 + 24);
  *(_OWORD *)(a1 + v11 + 24) = v14;
  (**(void (***)(uint64_t, _OWORD *))(v14 - 8))(a1 + v11, v13);
  long long v15 = v13[4];
  v12[4] = v15;
  (**(void (***)(uint64_t, uint64_t))(v15 - 8))((uint64_t)v12 + 40, (uint64_t)v13 + 40);
  long long v16 = *(_OWORD *)((char *)v13 + 104);
  *(_OWORD *)((char *)v12 + 104) = v16;
  (**(void (***)(uint64_t, uint64_t))(v16 - 8))((uint64_t)(v12 + 5), (uint64_t)(v13 + 5));
  long long v17 = v13[9];
  v12[9] = v17;
  (**(void (***)(uint64_t, uint64_t))(v17 - 8))((uint64_t)v12 + 120, (uint64_t)v13 + 120);
  return a1;
}

uint64_t sub_B27B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1AB420();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  sub_577C((uint64_t *)(a1 + a3[5]), (uint64_t *)(a2 + a3[5]));
  sub_577C((uint64_t *)(a1 + a3[6]), (uint64_t *)(a2 + a3[6]));
  uint64_t v7 = a3[7];
  long long v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  sub_577C((uint64_t *)(a1 + v7), v9);
  sub_577C(v8 + 5, v9 + 5);
  sub_577C(v8 + 10, v9 + 10);
  sub_577C(v8 + 15, v9 + 15);
  return a1;
}

uint64_t sub_B2884(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1AB420();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  long long v10 = (long long *)(a2 + v7);
  long long v11 = *v10;
  long long v12 = v10[1];
  *(void *)(v9 + 32) = *((void *)v10 + 4);
  *(_OWORD *)uint64_t v9 = v11;
  *(_OWORD *)(v9 + 16) = v12;
  uint64_t v13 = a1 + v8;
  uint64_t v14 = a2 + v8;
  long long v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  memcpy((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), 0xA0uLL);
  return a1;
}

uint64_t sub_B293C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1AB420();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + v7);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + v11);
  long long v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + v15);
  long long v18 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 16) = v18;
  *(void *)(v16 + 32) = *(void *)(v17 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v16 + 40);
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(v17 + 40);
  *(_OWORD *)(v16 + 56) = *(_OWORD *)(v17 + 56);
  *(void *)(v16 + 72) = *(void *)(v17 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v16 + 80);
  long long v19 = *(_OWORD *)(v17 + 96);
  *(_OWORD *)(v16 + 80) = *(_OWORD *)(v17 + 80);
  *(_OWORD *)(v16 + 96) = v19;
  *(void *)(v16 + 112) = *(void *)(v17 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v16 + 120);
  *(_OWORD *)(v16 + 120) = *(_OWORD *)(v17 + 120);
  *(_OWORD *)(v16 + 136) = *(_OWORD *)(v17 + 136);
  *(void *)(v16 + 152) = *(void *)(v17 + 152);
  return a1;
}

uint64_t sub_B2A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_B2A8C);
}

uint64_t sub_B2A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1AB420();
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t sub_B2B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_B2B30);
}

void sub_B2B30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1AB420();
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
}

uint64_t type metadata accessor for MainFlow()
{
  uint64_t result = qword_205668;
  if (!qword_205668) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_B2C04()
{
  uint64_t result = sub_1AB420();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_B2CA8()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_B2D40;
  return sub_ADE70();
}

uint64_t sub_B2D40()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_E53C();
  void *v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_B2E08(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    return sub_E991C(v3, v4);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    return sub_E9920(v6, a2);
  }
}

uint64_t sub_B2E68()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_B2EB8(uint64_t a1)
{
  return a1;
}

uint64_t sub_B2EE8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_B2F20()
{
  sub_B79A0();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 304, 7);
}

uint64_t sub_B2F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a1;
  uint64_t v28 = sub_1AC2D0();
  __chkstk_darwin(v28);
  uint64_t v26 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_2694(&qword_2030F8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v25 - v14;
  v30[3] = &type metadata for WellnessCATProvider;
  v30[4] = &off_1F9800;
  uint64_t v16 = (void *)swift_allocObject();
  v30[0] = v16;
  v16[2] = a2;
  v16[3] = a3;
  v16[4] = a4;
  v16[5] = a5;
  uint64_t v17 = sub_2E38(v30, (uint64_t)&type metadata for WellnessCATProvider);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  uint64_t v20 = v17[2];
  uint64_t v21 = v17[3];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_18AE7C(v18, v19, v20, v21);
  sub_74740();
  swift_release();
  sub_553FC((uint64_t)v15, (uint64_t)v13, &qword_2030F8);
  sub_E3FC(v27, (uint64_t)v29);
  uint64_t v22 = (uint64_t)v26;
  sub_1AC2C0();
  sub_B719C(&qword_203108, (void (*)(uint64_t))&type metadata accessor for OutputFlow);
  uint64_t v23 = sub_1AAF70();
  sub_B7140(v22);
  sub_5B028((uint64_t)v15, &qword_2030F8);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v30);
  return v23;
}

uint64_t sub_B31A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_1AC250();
  __chkstk_darwin(v10 - 8);
  type metadata accessor for WellnessLoggingCATsSimple();
  sub_1AC240();
  *(void *)(a5 + 280) = sub_1AC210();
  *(unsigned char *)(a5 + 288) = 82;
  sub_E3FC(a1, a5 + 16);
  sub_E3FC(a2, a5 + 56);
  sub_9B48(a3, a5 + 96);
  *(void *)(a5 + 256) = a4;
  id v11 = [objc_allocWithZone((Class)sub_1AC5A0()) init];
  sub_E4B8(a3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  *(void *)(a5 + 264) = v11;
  *(unsigned char *)(a5 + 272) = 0;
  return a5;
}

uint64_t sub_B32CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v77 = a7;
  uint64_t v79 = (uint8_t *)a2;
  uint64_t v12 = sub_1AC250();
  __chkstk_darwin(v12 - 8);
  uint64_t v74 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1AC800();
  uint64_t v75 = *(void *)(v14 - 8);
  uint64_t v76 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  int v72 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v73 = (char *)&v72 - v17;
  os_log_type_t v96 = &type metadata for WellnessCATProvider;
  unint64_t v97 = &off_1F9800;
  uint64_t v18 = (void *)swift_allocObject();
  v95[0] = v18;
  v18[2] = a3;
  v18[3] = a4;
  v18[4] = a5;
  v18[5] = a6;
  uint64_t v78 = a1;
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  sub_2E38(a1, v19);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  __int16 v22 = v21(v19, v20);
  uint64_t v23 = v78;
  LOWORD(a3) = v22;
  uint64_t v24 = v78[3];
  uint64_t v25 = v78[4];
  sub_2E38(v78, v24);
  unsigned __int8 v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
  switch(sub_2D8C((unsigned __int16)a3 | ((unint64_t)v26 << 16) | 0x2000000))
  {
    case 1u:
      sub_E3FC((uint64_t)v23, (uint64_t)v86);
      sub_E3FC((uint64_t)v79, (uint64_t)&v83);
      sub_9B48(v77, (uint64_t)v90);
      uint64_t v58 = (objc_class *)sub_1AC5C0();
      long long v87 = 0u;
      long long v88 = 0u;
      unint64_t v89 = 0;
      id v59 = objc_allocWithZone(v58);
      uint64_t v60 = sub_1AC5B0();
      *((void *)&v88 + 1) = &type metadata for LogPeriodFlow;
      unint64_t v89 = sub_B6E14();
      *(void *)&long long v87 = swift_allocObject();
      sub_E97B4(v86, &v83, v90, v60, v87 + 16);
      goto LABEL_12;
    case 2u:
      sub_E3FC((uint64_t)v23, (uint64_t)&v87);
      sub_E3FC((uint64_t)v79, (uint64_t)v86);
      sub_9B48(v77, (uint64_t)v90);
      uint64_t v49 = (objc_class *)sub_1AC6D0();
      long long v83 = 0u;
      long long v84 = 0u;
      uint64_t v85 = 0;
      id v50 = objc_allocWithZone(v49);
      uint64_t v51 = sub_1AC6C0();
      uint64_t v52 = type metadata accessor for LogBloodPressureFlow();
      uint64_t v53 = swift_allocObject();
      uint64_t v37 = sub_B31A4((uint64_t)&v87, (uint64_t)v86, (uint64_t)v90, v51, v53);
      *((void *)&v88 + 1) = v52;
      uint64_t v38 = &qword_205370;
      uint64_t v39 = type metadata accessor for LogBloodPressureFlow;
      goto LABEL_9;
    case 3u:
      sub_E3FC((uint64_t)v23, (uint64_t)v90);
      sub_E3FC((uint64_t)v79, (uint64_t)&v93);
      sub_9B48(v77, (uint64_t)v94);
      uint64_t v54 = sub_1AB1C0();
      swift_allocObject();
      uint64_t v55 = sub_1AB1B0();
      v94[23] = v54;
      v94[24] = &protocol witness table for ResponseFactory;
      v94[20] = v55;
      type metadata accessor for WellnessLoggingCATsSimple();
      sub_1AC240();
      uint64_t v56 = sub_1AC210();
      type metadata accessor for WellnessCATs();
      sub_1AC240();
      uint64_t v57 = sub_1AC1A0();
      v94[25] = v56;
      v94[26] = v57;
      sub_2503C();
      uint64_t v48 = sub_1AAF70();
      sub_24EA0((uint64_t)v90);
      goto LABEL_13;
    case 4u:
      uint64_t v40 = sub_1AC7D0();
      swift_beginAccess();
      uint64_t v42 = v75;
      uint64_t v41 = v76;
      os_log_type_t v43 = v73;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v73, v40, v76);
      uint64_t v44 = sub_1AC7F0();
      os_log_type_t v45 = sub_1ACF60();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v46 = 0;
        _os_log_impl(&def_342E4, v44, v45, "Intent has nil dataType, aborting loggingFlowFor.", v46, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
      uint64_t v47 = sub_2E38(v95, (uint64_t)v96);
      uint64_t v48 = sub_B2F58((uint64_t)v79, *v47, v47[1], v47[2], v47[3]);
      goto LABEL_13;
    default:
      uint64_t v27 = v23[3];
      uint64_t v28 = v23[4];
      sub_2E38(v23, v27);
      __int16 v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 24))(v27, v28);
      if (v29 == 270 || (unsigned __int8 v30 = sub_19D5A4(v29), v30 == 205))
      {
        uint64_t v62 = sub_1AC7D0();
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v72, v62, v76);
        sub_E3FC((uint64_t)v23, (uint64_t)v90);
        os_log_type_t v63 = sub_1AC7F0();
        os_log_type_t v64 = sub_1ACF60();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v87 = swift_slowAlloc();
          *(_DWORD *)uint64_t v65 = 136315138;
          uint64_t v79 = v65 + 4;
          uint64_t v67 = v91;
          uint64_t v66 = v92;
          sub_2E38(v90, v91);
          LOWORD(v83) = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 24))(v67, v66);
          sub_2694(&qword_201DA8);
          uint64_t v68 = sub_1ACFC0();
          *(void *)&long long v83 = sub_4A278(v68, v69, (uint64_t *)&v87);
          sub_1ACFE0();
          swift_bridgeObjectRelease();
          _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v90);
          _os_log_impl(&def_342E4, v63, v64, "%s does not have a HealthKitIdentifier to create a GetHealthQuantityFlow", v65, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v90);
        }

        (*(void (**)(char *, uint64_t))(v75 + 8))(v72, v76);
        sub_E3FC((uint64_t)v78, (uint64_t)&v87);
        *(void *)&long long v83 = 0;
        *((void *)&v83 + 1) = 0xE000000000000000;
        sub_1AD080(72);
        uint64_t v70 = *((void *)&v88 + 1);
        unint64_t v71 = v89;
        sub_2E38(&v87, *((uint64_t *)&v88 + 1));
        LOWORD(v80) = (*(uint64_t (**)(uint64_t, unint64_t))(v71 + 24))(v70, v71);
        sub_2694(&qword_201DA8);
        v98._countAndFlagsBits = sub_1ACFC0();
        sub_1ACE70(v98);
        swift_bridgeObjectRelease();
        v99._object = (void *)0x80000000001BB8F0;
        v99._countAndFlagsBits = 0xD000000000000046;
        sub_1ACE70(v99);
        sub_1AD160();
        __break(1u);
        JUMPOUT(0xB3C90);
      }
      char v31 = v30;
      sub_E3FC((uint64_t)v23, (uint64_t)&v87);
      sub_E3FC((uint64_t)v79, (uint64_t)v86);
      sub_9B48(v77, (uint64_t)v90);
      uint64_t v85 = 0;
      long long v83 = 0u;
      long long v84 = 0u;
      uint64_t v32 = (objc_class *)sub_1AC620();
      long long v80 = 0u;
      long long v81 = 0u;
      uint64_t v82 = 0;
      id v33 = objc_allocWithZone(v32);
      uint64_t v34 = sub_1AC610();
      uint64_t v35 = type metadata accessor for LogHealthKitQuantityFlow();
      uint64_t v36 = swift_allocObject();
      uint64_t v37 = sub_5AE94(v31, &v87, v86, v90, v34, (uint64_t)&v83, v36);
      *((void *)&v88 + 1) = v35;
      uint64_t v38 = &qword_203510;
      uint64_t v39 = type metadata accessor for LogHealthKitQuantityFlow;
LABEL_9:
      unint64_t v89 = sub_B719C(v38, (void (*)(uint64_t))v39);
      *(void *)&long long v87 = v37;
LABEL_12:
      sub_2694(&qword_205708);
      sub_1AAF10();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1ADCF0;
      sub_1AAF00();
      sub_1AC2E0();
      sub_B6BB0();
      uint64_t v48 = sub_1AAF70();
      sub_B6BFC((uint64_t)v90);
LABEL_13:
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v95);
      return v48;
  }
}

uint64_t sub_B3CA4(uint8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v180 = a7;
  uint64_t v181 = a2;
  uint64_t v12 = sub_1AC250();
  __chkstk_darwin(v12 - 8);
  v172[1] = (char *)v172 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = sub_1AC800();
  uint64_t v182 = *(void *)(v184 - 8);
  uint64_t v14 = __chkstk_darwin(v184);
  uint64_t v179 = (char *)v172 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v178 = (char *)v172 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v172[0] = (char *)v172 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v177 = (char *)v172 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v176 = (char *)v172 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  char v175 = (char *)v172 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v173 = (char *)v172 - v27;
  __chkstk_darwin(v26);
  v174 = (char *)v172 - v28;
  uint64_t v194 = &type metadata for WellnessCATProvider;
  uint64_t v195 = &off_1F9800;
  __int16 v29 = (void *)swift_allocObject();
  v193[0] = v29;
  v29[2] = a3;
  v29[3] = a4;
  v29[4] = a5;
  v29[5] = a6;
  unint64_t v183 = a1;
  uint64_t v31 = *((void *)a1 + 3);
  uint64_t v30 = *((void *)a1 + 4);
  sub_2E38(a1, v31);
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v33 = v30;
  uint64_t v34 = v183;
  LOWORD(a4) = v32(v31, v33);
  uint64_t v35 = *((void *)v34 + 3);
  uint64_t v36 = *((void *)v34 + 4);
  sub_2E38(v34, v35);
  (*(void (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
  switch(sub_2970(a4))
  {
    case 1u:
      uint64_t v89 = sub_1AC7D0();
      swift_beginAccess();
      uint64_t v90 = v182;
      uint64_t v91 = v173;
      uint64_t v92 = v184;
      (*(void (**)(char *, uint64_t, uint64_t))(v182 + 16))(v173, v89, v184);
      sub_E3FC((uint64_t)v34, (uint64_t)&v185);
      uint64_t v93 = sub_1AC7F0();
      os_log_type_t v94 = sub_1ACF50();
      if (os_log_type_enabled(v93, v94))
      {
        unint64_t v95 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v190 = swift_slowAlloc();
        *(_DWORD *)unint64_t v95 = 136315138;
        uint64_t v179 = (char *)(v95 + 4);
        uint64_t v97 = *((void *)&v186 + 1);
        uint64_t v96 = v187;
        sub_2E38(&v185, *((uint64_t *)&v186 + 1));
        LOWORD(v189[0]) = (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 24))(v97, v96);
        sub_2694(&qword_201DA8);
        uint64_t v98 = sub_1ACFC0();
        *(void *)&v189[0] = sub_4A278(v98, v99, (uint64_t *)&v190);
        uint64_t v34 = v183;
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v185);
        _os_log_impl(&def_342E4, v93, v94, "%s gets GetBloodPressureFlow", v95, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v90 + 8))(v173, v184);
      }
      else
      {
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v185);

        (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v92);
      }
      uint64_t v149 = v180;
      uint64_t v148 = v181;
      sub_E3FC((uint64_t)v34, (uint64_t)v189);
      sub_E3FC(v148, (uint64_t)v188);
      sub_9B48(v149, (uint64_t)&v185);
      v150 = (void *)sub_1AC530();
      sub_1AC520();

      id v151 = objc_allocWithZone((Class)sub_1AC690());
      uint64_t v152 = sub_1AC680();
      *((void *)&v191 + 1) = &type metadata for GetBloodPressureFlow;
      unint64_t v192 = sub_B7028();
      *(void *)&long long v190 = swift_allocObject();
      sub_164A5C(v189, v188, &v185, v152, v190 + 16);
      goto LABEL_34;
    case 2u:
      uint64_t v63 = *((void *)v34 + 3);
      uint64_t v64 = *((void *)v34 + 4);
      sub_2E38(v34, v63);
      int v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 24))(v63, v64);
      uint64_t v66 = v182;
      uint64_t v67 = v184;
      if ((unsigned __int16)v65 == 270) {
        goto LABEL_38;
      }
      LODWORD(v68) = v65;
      uint64_t v69 = sub_1AC7D0();
      swift_beginAccess();
      uint64_t v70 = v178;
      (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v178, v69, v67);
      sub_E3FC((uint64_t)v34, (uint64_t)&v185);
      unint64_t v71 = sub_1AC7F0();
      os_log_type_t v72 = sub_1ACF50();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v73 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v190 = swift_slowAlloc();
        *(_DWORD *)uint64_t v73 = 136315138;
        LODWORD(v179) = v68;
        uint64_t v68 = v66;
        uint64_t v177 = (char *)(v73 + 4);
        uint64_t v75 = *((void *)&v186 + 1);
        uint64_t v74 = v187;
        sub_2E38(&v185, *((uint64_t *)&v186 + 1));
        LOWORD(v188[0]) = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 24))(v75, v74);
        sub_2694(&qword_201DA8);
        uint64_t v76 = sub_1ACFC0();
        *(void *)&v188[0] = sub_4A278(v76, v77, (uint64_t *)&v190);
        uint64_t v34 = v183;
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v185);
        _os_log_impl(&def_342E4, v71, v72, "%s gets GetActivitySummaryFlow", v73, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v68 + 8))(v178, v184);
        LOWORD(v68) = (_WORD)v179;
      }
      else
      {
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v185);

        (*(void (**)(char *, uint64_t))(v66 + 8))(v70, v67);
      }
      uint64_t v133 = v180;
      uint64_t v132 = v181;
      *((void *)&v191 + 1) = &type metadata for GetActivitySummaryFlow;
      unint64_t v192 = sub_B6F88();
      uint64_t v134 = swift_allocObject();
      *(void *)&long long v190 = v134;
      sub_E3FC((uint64_t)v34, v134 + 24);
      sub_E3FC(v132, v134 + 64);
      sub_9B48(v133, v134 + 104);
      uint64_t v135 = (objc_class *)sub_1AC740();
      long long v185 = 0u;
      long long v186 = 0u;
      uint64_t v187 = 0;
      id v136 = objc_allocWithZone(v135);
      uint64_t v137 = sub_1AC730();
      uint64_t v138 = sub_1AB1C0();
      swift_allocObject();
      uint64_t v139 = sub_1AB1B0();
      *(void *)(v134 + 296) = v138;
      *(void *)(v134 + 304) = &protocol witness table for ResponseFactory;
      *(void *)(v134 + 272) = v139;
      type metadata accessor for WellnessQueryingCATsSimple();
      sub_1AC240();
      uint64_t v140 = sub_1AC210();
      type metadata accessor for WellnessCATsSimple();
      sub_1AC240();
      uint64_t v141 = sub_1AC210();
      type metadata accessor for WellnessCATs();
      sub_1AC240();
      uint64_t v142 = sub_1AC1A0();
      *(_WORD *)(v134 + 16) = v68;
      *(void *)(v134 + 264) = v137;
      *(void *)(v134 + 312) = v140;
      *(void *)(v134 + 320) = v141;
      *(void *)(v134 + 328) = v142;
      goto LABEL_34;
    case 3u:
      uint64_t v78 = sub_1AC7D0();
      swift_beginAccess();
      uint64_t v79 = v182;
      long long v80 = v175;
      uint64_t v81 = v184;
      (*(void (**)(char *, uint64_t, uint64_t))(v182 + 16))(v175, v78, v184);
      sub_E3FC((uint64_t)v34, (uint64_t)&v185);
      uint64_t v82 = sub_1AC7F0();
      os_log_type_t v83 = sub_1ACF50();
      if (os_log_type_enabled(v82, v83))
      {
        long long v84 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v190 = swift_slowAlloc();
        *(_DWORD *)long long v84 = 136315138;
        uint64_t v179 = (char *)(v84 + 4);
        uint64_t v85 = *((void *)&v186 + 1);
        uint64_t v86 = v187;
        sub_2E38(&v185, *((uint64_t *)&v186 + 1));
        LOWORD(v189[0]) = (*(uint64_t (**)(uint64_t, uint64_t))(v86 + 24))(v85, v86);
        sub_2694(&qword_201DA8);
        uint64_t v87 = sub_1ACFC0();
        *(void *)&v189[0] = sub_4A278(v87, v88, (uint64_t *)&v190);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v185);
        _os_log_impl(&def_342E4, v82, v83, "%s gets GetSleepAnalysisFlow", v84, 0xCu);
        swift_arrayDestroy();
        uint64_t v34 = v183;
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v79 + 8))(v175, v184);
      }
      else
      {
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v185);

        (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v81);
      }
      uint64_t v144 = v180;
      uint64_t v143 = v181;
      sub_E3FC((uint64_t)v34, (uint64_t)v189);
      sub_E3FC(v143, (uint64_t)v188);
      sub_9B48(v144, (uint64_t)&v185);
      v145 = (objc_class *)sub_1AC6B0();
      long long v190 = 0u;
      long long v191 = 0u;
      unint64_t v192 = 0;
      id v146 = objc_allocWithZone(v145);
      uint64_t v147 = sub_1AC6A0();
      *((void *)&v191 + 1) = &type metadata for GetSleepAnalysisFlow;
      unint64_t v192 = sub_B6EF8();
      *(void *)&long long v190 = swift_allocObject();
      sub_F37CC(v189, v188, &v185, v147, v190 + 16);
      goto LABEL_34;
    case 4u:
      uint64_t v52 = sub_1AC7D0();
      swift_beginAccess();
      uint64_t v53 = v182;
      uint64_t v54 = v176;
      uint64_t v55 = v184;
      (*(void (**)(char *, uint64_t, uint64_t))(v182 + 16))(v176, v52, v184);
      sub_E3FC((uint64_t)v34, (uint64_t)&v185);
      uint64_t v56 = sub_1AC7F0();
      os_log_type_t v57 = sub_1ACF50();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v190 = swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = 136315138;
        uint64_t v179 = (char *)(v58 + 4);
        uint64_t v59 = *((void *)&v186 + 1);
        uint64_t v60 = v187;
        sub_2E38(&v185, *((uint64_t *)&v186 + 1));
        LOWORD(v188[0]) = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 24))(v59, v60);
        sub_2694(&qword_201DA8);
        uint64_t v61 = sub_1ACFC0();
        *(void *)&v188[0] = sub_4A278(v61, v62, (uint64_t *)&v190);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v185);
        _os_log_impl(&def_342E4, v56, v57, "%s gets GetCycleTrackingFlow", v58, 0xCu);
        swift_arrayDestroy();
        uint64_t v34 = v183;
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v53 + 8))(v176, v184);
      }
      else
      {
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v185);

        (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
      }
      uint64_t v128 = v180;
      uint64_t v127 = v181;
      *((void *)&v191 + 1) = &type metadata for GetCycleTrackingFlow;
      unint64_t v192 = sub_A0C0();
      uint64_t v129 = swift_allocObject();
      *(void *)&long long v190 = v129;
      sub_E3FC((uint64_t)v34, v129 + 16);
      sub_E3FC(v127, v129 + 56);
      sub_9B48(v128, v129 + 96);
      uint64_t v130 = (objc_class *)sub_1AC7B0();
      long long v185 = 0u;
      long long v186 = 0u;
      uint64_t v187 = 0;
      id v131 = objc_allocWithZone(v130);
      *(void *)(v129 + 256) = sub_1AC7A0();
      *(_WORD *)(v129 + 264) = 42;
      goto LABEL_34;
    case 5u:
      uint64_t v100 = *((void *)v34 + 3);
      uint64_t v101 = *((void *)v34 + 4);
      sub_2E38(v34, v100);
      int v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 24))(v100, v101);
      uint64_t v103 = v182;
      uint64_t v104 = v184;
      if ((unsigned __int16)v102 == 270)
      {
LABEL_38:
        sub_E3FC((uint64_t)v34, (uint64_t)&v185);
        *(void *)&long long v190 = 0;
        *((void *)&v190 + 1) = 0xE000000000000000;
        sub_1AD080(39);
        sub_2E38(&v185, *((uint64_t *)&v186 + 1));
        sub_1AD2E0();
        v196._object = (void *)0x80000000001BB940;
        v196._countAndFlagsBits = 0xD000000000000025;
        sub_1ACE70(v196);
LABEL_42:
        sub_1AD160();
        __break(1u);
        JUMPOUT(0xB5588);
      }
      int v105 = v102;
      uint64_t v106 = sub_1AC7D0();
      swift_beginAccess();
      uint64_t v107 = v179;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v179, v106, v104);
      sub_E3FC((uint64_t)v34, (uint64_t)&v185);
      uint64_t v108 = sub_1AC7F0();
      os_log_type_t v109 = sub_1ACF50();
      if (os_log_type_enabled(v108, v109))
      {
        uint64_t v110 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v190 = swift_slowAlloc();
        LODWORD(v183) = v105;
        *(_DWORD *)uint64_t v110 = 136315138;
        uint64_t v178 = (char *)(v110 + 4);
        uint64_t v112 = *((void *)&v186 + 1);
        uint64_t v111 = v187;
        sub_2E38(&v185, *((uint64_t *)&v186 + 1));
        LOWORD(v188[0]) = (*(uint64_t (**)(uint64_t, uint64_t))(v111 + 24))(v112, v111);
        sub_2694(&qword_201DA8);
        uint64_t v113 = sub_1ACFC0();
        *(void *)&v188[0] = sub_4A278(v113, v114, (uint64_t *)&v190);
        LOWORD(v105) = (_WORD)v183;
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v185);
        _os_log_impl(&def_342E4, v108, v109, "%s gets Punchout", v110, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v103 + 8))(v179, v184);
      }
      else
      {
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v185);

        (*(void (**)(char *, uint64_t))(v103 + 8))(v107, v104);
      }
      uint64_t v161 = v181;
      *((void *)&v191 + 1) = &type metadata for DataTypePunchoutFlow;
      unint64_t v192 = sub_4E104();
      uint64_t v162 = swift_allocObject();
      *(void *)&long long v190 = v162;
      sub_E3FC(v161, v162 + 24);
      sub_E3FC((uint64_t)v193, v162 + 64);
      sub_9B48(v180, v162 + 104);
      *(_WORD *)(v162 + 16) = v105;
      *(unsigned char *)(v162 + 264) = 0;
LABEL_34:
      sub_2694(&qword_205708);
      sub_1AAF10();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1ADCF0;
      sub_1AAF00();
      sub_1AC2E0();
      sub_B6BB0();
      uint64_t v155 = sub_1AAF70();
      sub_B6BFC((uint64_t)&v185);
LABEL_35:
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v193);
      return v155;
    case 6u:
      uint64_t v115 = sub_1AC7D0();
      swift_beginAccess();
      uint64_t v116 = v182;
      uint64_t v117 = v174;
      uint64_t v118 = v184;
      (*(void (**)(char *, uint64_t, uint64_t))(v182 + 16))(v174, v115, v184);
      sub_E3FC((uint64_t)v34, (uint64_t)&v185);
      uint64_t v119 = sub_1AC7F0();
      os_log_type_t v120 = sub_1ACF50();
      if (os_log_type_enabled(v119, v120))
      {
        uint64_t v121 = (uint8_t *)swift_slowAlloc();
        *(void *)&v189[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v121 = 136315138;
        unint64_t v183 = v121 + 4;
        uint64_t v122 = sub_2E38(&v185, *((uint64_t *)&v186 + 1));
        __chkstk_darwin(v122);
        (*(void (**)(char *))(v124 + 16))((char *)v172 - ((v123 + 15) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v125 = sub_1ACE10();
        *(void *)&v188[0] = sub_4A278(v125, v126, (uint64_t *)v189);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v185);
        _os_log_impl(&def_342E4, v119, v120, "Unsupported Intent: %s", v121, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v182 + 8))(v174, v184);
      }
      else
      {
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v185);

        (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v118);
      }
      uint64_t v153 = v181;
      uint64_t v154 = sub_2E38(v193, (uint64_t)v194);
      uint64_t v155 = sub_B2F58(v153, *v154, v154[1], v154[2], v154[3]);
      goto LABEL_35;
    default:
      uint64_t v37 = *((void *)v34 + 3);
      uint64_t v38 = *((void *)v34 + 4);
      sub_2E38(v34, v37);
      __int16 v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 24))(v37, v38);
      uint64_t v40 = v182;
      uint64_t v41 = v184;
      if (v39 != 270)
      {
        __int16 v42 = v39;
        unsigned __int8 v43 = sub_19D5A4(v39);
        if (v43 != 205)
        {
          unsigned __int8 v44 = v43;
          uint64_t v45 = sub_1AC7D0();
          swift_beginAccess();
          uint64_t v46 = v177;
          (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v177, v45, v41);
          uint64_t v47 = sub_1AC7F0();
          os_log_type_t v48 = sub_1ACF50();
          if (os_log_type_enabled(v47, v48))
          {
            uint64_t v49 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v185 = swift_slowAlloc();
            *(_DWORD *)uint64_t v49 = 136315138;
            uint64_t v50 = sub_1771BC(v42);
            *(void *)&long long v190 = sub_4A278(v50, v51, (uint64_t *)&v185);
            sub_1ACFE0();
            swift_bridgeObjectRelease();
            _os_log_impl(&def_342E4, v47, v48, "%s gets GetHealthQuantityFlow", v49, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v40 + 8))(v177, v184);
          }
          else
          {

            (*(void (**)(char *, uint64_t))(v40 + 8))(v46, v41);
          }
          uint64_t v156 = v181;
          *((void *)&v191 + 1) = &type metadata for GetHealthQuantityFlow;
          unint64_t v192 = sub_B70C0();
          uint64_t v157 = swift_allocObject();
          *(void *)&long long v190 = v157;
          sub_E3FC((uint64_t)v183, v157 + 24);
          sub_E3FC(v156, v157 + 64);
          sub_9B48(v180, v157 + 104);
          char v158 = (objc_class *)sub_1AC6F0();
          long long v185 = 0u;
          long long v186 = 0u;
          uint64_t v187 = 0;
          id v159 = objc_allocWithZone(v158);
          uint64_t v160 = sub_1AC6E0();
          *(unsigned char *)(v157 + 16) = v44;
          *(void *)(v157 + 264) = v160;
          *(unsigned char *)(v157 + 272) = 4;
          goto LABEL_34;
        }
      }
      uint64_t v164 = sub_1AC7D0();
      swift_beginAccess();
      (*(void (**)(void, uint64_t, uint64_t))(v40 + 16))(v172[0], v164, v41);
      sub_E3FC((uint64_t)v183, (uint64_t)&v185);
      uint64_t v165 = sub_1AC7F0();
      os_log_type_t v166 = sub_1ACF60();
      if (os_log_type_enabled(v165, v166))
      {
        uint64_t v167 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v190 = swift_slowAlloc();
        *(_DWORD *)uint64_t v167 = 136315138;
        uint64_t v168 = *((void *)&v186 + 1);
        uint64_t v169 = v187;
        sub_2E38(&v185, *((uint64_t *)&v186 + 1));
        LOWORD(v188[0]) = (*(uint64_t (**)(uint64_t, uint64_t))(v169 + 24))(v168, v169);
        sub_2694(&qword_201DA8);
        uint64_t v170 = sub_1ACFC0();
        *(void *)&v188[0] = sub_4A278(v170, v171, (uint64_t *)&v190);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v185);
        _os_log_impl(&def_342E4, v165, v166, "%s does not have a HealthKitIdentifier to create a GetHealthQuantityFlow", v167, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v185);
      }

      (*(void (**)(void, uint64_t))(v182 + 8))(v172[0], v184);
      sub_E3FC((uint64_t)v183, (uint64_t)&v190);
      *(void *)&v188[0] = 0;
      *((void *)&v188[0] + 1) = 0xE000000000000000;
      sub_1AD080(72);
      sub_2E38(&v190, *((uint64_t *)&v191 + 1));
      sub_1AD2E0();
      v197._countAndFlagsBits = 0xD000000000000046;
      v197._object = (void *)0x80000000001BB8F0;
      sub_1ACE70(v197);
      goto LABEL_42;
  }
}

uint64_t sub_B55A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = sub_1AC250();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  sub_2E38(a2, v11);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 8))(v58, v11, v12);
  sub_2E38(v58, v58[3]);
  char v13 = sub_1AB040();
  sub_E3FC((uint64_t)a2, (uint64_t)v55);
  if (v13)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v55);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v58);
  }
  else
  {
    uint64_t v14 = v56;
    uint64_t v15 = v57;
    sub_2E38(v55, v56);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v15 + 8))(&v44, v14, v15);
    sub_2E38(&v44, *((uint64_t *)&v45 + 1));
    char v16 = sub_1AB030();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v44);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v55);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v58);
    if ((v16 & 1) == 0) {
      goto LABEL_7;
    }
  }
  if ((sub_1AC290() & 1) == 0) {
    goto LABEL_14;
  }
  if (sub_1AC2A0())
  {
    sub_9B48(a7, (uint64_t)&v44);
    sub_29A4C();
    uint64_t v17 = sub_1AAF70();
    sub_B6D20((uint64_t)&v44);
    return v17;
  }
LABEL_7:
  uint64_t v18 = a2[3];
  uint64_t v19 = a2[4];
  sub_2E38(a2, v18);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v19 + 8))(&v44, v18, v19);
  sub_2E38(&v44, *((uint64_t *)&v45 + 1));
  char v20 = sub_1AB040();
  sub_E3FC((uint64_t)a2, (uint64_t)&v52);
  if (v20)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v52);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v44);
    goto LABEL_10;
  }
  uint64_t v21 = *((void *)&v53 + 1);
  unint64_t v22 = v54;
  sub_2E38(&v52, *((uint64_t *)&v53 + 1));
  (*(void (**)(void *__return_ptr, uint64_t, unint64_t))(v22 + 8))(v50, v21, v22);
  sub_2E38(v50, v51);
  char v23 = sub_1AB030();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v50);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v52);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v44);
  if (v23)
  {
LABEL_10:
    if (sub_1AC290()) {
      goto LABEL_11;
    }
LABEL_14:
    sub_E3FC((uint64_t)a2, (uint64_t)&v44);
    uint64_t v30 = sub_1AB1C0();
    swift_allocObject();
    uint64_t v31 = sub_1AB1B0();
    v48[2] = v30;
    v48[3] = &protocol witness table for ResponseFactory;
    uint64_t v47 = v31;
    type metadata accessor for WellnessCATsSimple();
    sub_1AC240();
    uint64_t v32 = sub_1AC210();
    type metadata accessor for WellnessCATs();
    sub_1AC240();
    uint64_t v33 = sub_1AC1A0();
    v48[4] = v32;
    v48[5] = v33;
    sub_AD6C4();
    uint64_t v17 = sub_1AAF70();
    sub_AD694((uint64_t)&v44);
    return v17;
  }
LABEL_11:
  uint64_t v24 = a2[3];
  uint64_t v25 = a2[4];
  sub_2E38(a2, v24);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v25 + 8))(v50, v24, v25);
  sub_2E38(v50, v51);
  if (sub_1AB050())
  {
    char v26 = sub_1AC290();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v50);
    if ((v26 & 1) == 0)
    {
      sub_E3FC((uint64_t)a2, (uint64_t)&v44 + 8);
      sub_9B48(a7, (uint64_t)v48);
      uint64_t v27 = (objc_class *)sub_1AC4D0();
      long long v52 = 0u;
      long long v53 = 0u;
      unint64_t v54 = 0;
      id v28 = objc_allocWithZone(v27);
      swift_retain();
      uint64_t v29 = sub_1AC4C0();
      v48[23] = v27;
      v48[24] = &protocol witness table for MedStorageHelper;
      v48[20] = v29;
      *(void *)&long long v44 = a1;
      char v49 = 0;
      sub_B6C50();
      uint64_t v17 = sub_1AAF70();
      sub_B6CCC((uint64_t)&v44);
      return v17;
    }
  }
  else
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v50);
  }
  if (isLoggingTask(from:)()) {
    return sub_CEB54(a1, a2, a7);
  }
  if (isQueryingTask(from:)())
  {
    *((void *)&v53 + 1) = &type metadata for MedLaunchHealthAppFlow;
    unint64_t v54 = sub_B6C50();
    uint64_t v35 = swift_allocObject();
    *(void *)&long long v52 = v35;
    sub_E3FC((uint64_t)a2, v35 + 24);
    sub_9B48(a7, v35 + 64);
    uint64_t v36 = (objc_class *)sub_1AC4D0();
    long long v44 = 0u;
    long long v45 = 0u;
    uint64_t v46 = 0;
    id v37 = objc_allocWithZone(v36);
    swift_retain();
    uint64_t v38 = sub_1AC4C0();
    *(void *)(v35 + 248) = v36;
    *(void *)(v35 + 256) = &protocol witness table for MedStorageHelper;
    *(void *)(v35 + 224) = v38;
    *(void *)(v35 + 16) = a1;
    *(unsigned char *)(v35 + 264) = 1;
  }
  else
  {
    *((void *)&v53 + 1) = &type metadata for MedNotSupportedFlow;
    unint64_t v54 = sub_9A7F8();
    __int16 v39 = (void *)swift_allocObject();
    *(void *)&long long v52 = v39;
    sub_E3FC((uint64_t)a2, (uint64_t)(v39 + 2));
    sub_9B48(a7, (uint64_t)(v39 + 7));
    uint64_t v40 = sub_1AB1C0();
    swift_allocObject();
    uint64_t v41 = sub_1AB1B0();
    v39[30] = v40;
    v39[31] = &protocol witness table for ResponseFactory;
    v39[27] = v41;
    type metadata accessor for WellnessLoggingCATsSimple();
    sub_1AC240();
    uint64_t v42 = sub_1AC210();
    type metadata accessor for WellnessCATs();
    sub_1AC240();
    uint64_t v43 = sub_1AC1A0();
    v39[32] = v42;
    v39[33] = v43;
  }
  sub_2694(&qword_205708);
  sub_1AAF10();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1ADCF0;
  sub_1AAF00();
  sub_1AC2E0();
  sub_B6BB0();
  uint64_t v17 = sub_1AAF70();
  sub_B6BFC((uint64_t)&v44);
  return v17;
}

uint64_t sub_B5D10(uint8_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v106 = (uint8_t *)a7;
  uint64_t v107 = a2;
  uint64_t v12 = sub_1AC250();
  __chkstk_darwin(v12 - 8);
  uint64_t v98 = (char *)v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1AC800();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v100 = (char *)v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v97 = (char *)v94 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v96 = (char *)v94 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v99 = (char *)v94 - v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)v94 - v24;
  os_log_type_t v120 = &type metadata for WellnessCATProvider;
  uint64_t v121 = &off_1F9800;
  char v26 = (void *)swift_allocObject();
  v119[0] = v26;
  v26[2] = a3;
  v26[3] = a4;
  v26[4] = a5;
  v26[5] = a6;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v27 = v15;
  swift_retain();
  uint64_t v28 = sub_1AC7D0();
  swift_beginAccess();
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v104 = v27 + 16;
  uint64_t v105 = v28;
  uint64_t v103 = v29;
  v29(v25, v28, v14);
  sub_E3FC((uint64_t)a1, (uint64_t)v109);
  uint64_t v30 = sub_1AC7F0();
  os_log_type_t v31 = sub_1ACF50();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v101 = v14;
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    v108[0] = v95;
    *(_DWORD *)uint64_t v32 = 136315138;
    v94[2] = v32 + 4;
    uint64_t v102 = v27;
    uint64_t v33 = sub_2E38(v109, v110);
    v94[1] = v94;
    __chkstk_darwin(v33);
    (*(void (**)(char *))(v35 + 16))((char *)v94 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v27 = v102;
    uint64_t v36 = sub_1ACE10();
    v117[0] = sub_4A278(v36, v37, v108);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v109);
    _os_log_impl(&def_342E4, v30, v31, "Getting flow for: %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v38 = *(void (**)(char *, uint64_t))(v27 + 8);
    uint64_t v39 = v101;
    v38(v25, v101);
  }
  else
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v109);

    uint64_t v38 = *(void (**)(char *, uint64_t))(v27 + 8);
    v38(v25, v14);
    uint64_t v39 = v14;
  }
  uint64_t v40 = v107[3];
  uint64_t v41 = v107[4];
  sub_2E38(v107, v40);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v41 + 8))(v109, v40, v41);
  char v42 = sub_1AC290();
  char v43 = sub_1AC2A0();
  unint64_t v44 = sub_27FC(v109, v42 & 1, v43 & 1);
  uint64_t v45 = *((void *)a1 + 3);
  uint64_t v46 = *((void *)a1 + 4);
  sub_2E38(a1, v45);
  LOWORD(v45) = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 24))(v45, v46);
  uint64_t v47 = *((void *)a1 + 3);
  uint64_t v48 = *((void *)a1 + 4);
  sub_2E38(a1, v47);
  unsigned __int8 v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 16))(v47, v48);
  switch(sub_28F4((v44 << 24) & 0x101010101010101 | ((unint64_t)v49 << 16) | (unsigned __int16)v45))
  {
    case 1u:
      long long v52 = sub_2E38(v119, (uint64_t)v120);
      uint64_t v51 = sub_B32CC(a1, (uint64_t)v107, *v52, v52[1], v52[2], v52[3], (uint64_t)v106);
      goto LABEL_21;
    case 2u:
      uint64_t v53 = v105;
      swift_beginAccess();
      unint64_t v54 = v100;
      v103(v100, v53, v39);
      sub_E3FC((uint64_t)v107, (uint64_t)v109);
      uint64_t v55 = sub_1AC7F0();
      os_log_type_t v56 = sub_1ACF50();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = swift_slowAlloc();
        uint64_t v58 = swift_slowAlloc();
        uint64_t v102 = v27;
        uint64_t v118 = v58;
        *(_DWORD *)uint64_t v57 = 136315138;
        uint64_t v107 = (void *)(v57 + 4);
        uint64_t v101 = v39;
        uint64_t v59 = v110;
        uint64_t v60 = v111;
        sub_2E38(v109, v110);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v60 + 8))(v108, v59, v60);
        sub_2694(&qword_205728);
        uint64_t v61 = sub_1ACE00();
        v108[0] = sub_4A278(v61, v62, &v118);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v109);
        _os_log_impl(&def_342E4, v55, v56, "Device state is %s - launching UnsupportedDeviceFlow", (uint8_t *)v57, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v63 = v101;
        uint64_t v64 = v100;
      }
      else
      {
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v109);

        uint64_t v64 = v54;
        uint64_t v63 = v39;
      }
      v38(v64, v63);
      sub_9B48((uint64_t)v106, (uint64_t)v109);
      sub_B6D74();
      uint64_t v74 = sub_1AAF70();
      sub_B6DC0((uint64_t)v109);
      goto LABEL_22;
    case 3u:
      uint64_t v65 = v105;
      swift_beginAccess();
      uint64_t v66 = v96;
      v103(v96, v65, v39);
      uint64_t v67 = sub_1AC7F0();
      os_log_type_t v68 = sub_1ACF50();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v69 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v69 = 0;
        _os_log_impl(&def_342E4, v67, v68, "Device is iPhone/iPad, but relevant app not installed; launching InstallAppFlow",
          v69,
          2u);
        swift_slowDealloc();
      }

      v38(v66, v39);
      sub_E3FC((uint64_t)v107, (uint64_t)v109);
      uint64_t v70 = sub_1AB1C0();
      swift_allocObject();
      uint64_t v71 = sub_1AB1B0();
      uint64_t v113 = v70;
      unint64_t v114 = &protocol witness table for ResponseFactory;
      uint64_t v112 = v71;
      type metadata accessor for WellnessCATsSimple();
      sub_1AC240();
      uint64_t v72 = sub_1AC210();
      type metadata accessor for WellnessCATs();
      sub_1AC240();
      uint64_t v73 = sub_1AC1A0();
      uint64_t v115 = v72;
      uint64_t v116 = v73;
      sub_AD6C4();
      uint64_t v74 = sub_1AAF70();
      sub_AD694((uint64_t)v109);
      goto LABEL_22;
    case 4u:
      uint64_t v75 = v105;
      swift_beginAccess();
      uint64_t v76 = v97;
      v103(v97, v75, v39);
      unint64_t v77 = sub_1AC7F0();
      os_log_type_t v78 = sub_1ACF50();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v79 = 0;
        _os_log_impl(&def_342E4, v77, v78, "Health app is restrcited in Screen Time, showing error dialog", v79, 2u);
        swift_slowDealloc();
      }

      v38(v76, v39);
      sub_9B48((uint64_t)v106, (uint64_t)v109);
      sub_29A4C();
      uint64_t v74 = sub_1AAF70();
      sub_B6D20((uint64_t)v109);
      goto LABEL_22;
    case 5u:
      uint64_t v102 = v27;
      uint64_t v80 = v105;
      swift_beginAccess();
      uint64_t v81 = v99;
      v103(v99, v80, v39);
      sub_E3FC((uint64_t)a1, (uint64_t)v109);
      uint64_t v82 = sub_1AC7F0();
      os_log_type_t v83 = sub_1ACF60();
      if (os_log_type_enabled(v82, v83))
      {
        long long v84 = (uint8_t *)swift_slowAlloc();
        v117[0] = swift_slowAlloc();
        *(_DWORD *)long long v84 = 136315138;
        uint64_t v106 = v84 + 4;
        uint64_t v101 = v39;
        uint64_t v85 = v110;
        uint64_t v86 = v111;
        sub_2E38(v109, v110);
        char v87 = (*(uint64_t (**)(uint64_t, uint64_t))(v86 + 16))(v85, v86);
        uint64_t v88 = sub_1950F4(v87);
        uint64_t v118 = sub_4A278(v88, v89, v117);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v109);
        _os_log_impl(&def_342E4, v82, v83, "Unsupported verb for getFlowFor (%s). Returning genericNotSupported.", v84, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v90 = v101;
        uint64_t v91 = v99;
      }
      else
      {
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v109);

        uint64_t v91 = v81;
        uint64_t v90 = v39;
      }
      v38(v91, v90);
      uint64_t v92 = sub_2E38(v119, (uint64_t)v120);
      uint64_t v51 = sub_B2F58((uint64_t)v107, *v92, v92[1], v92[2], v92[3]);
      goto LABEL_21;
    default:
      uint64_t v50 = sub_2E38(v119, (uint64_t)v120);
      uint64_t v51 = sub_B3CA4(a1, (uint64_t)v107, *v50, v50[1], v50[2], v50[3], (uint64_t)v106);
LABEL_21:
      uint64_t v74 = v51;
LABEL_22:
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v119);
      return v74;
  }
}

unint64_t sub_B6910()
{
  unint64_t result = qword_2056E8;
  if (!qword_2056E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2056E8);
  }
  return result;
}

uint64_t sub_B695C()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 96);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 136);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 176);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 216);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 256);

  return _swift_deallocObject(v0, 296, 7);
}

uint64_t sub_B69C4()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 96);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 136);

  return _swift_deallocObject(v0, 177, 7);
}

unint64_t sub_B6A14()
{
  unint64_t result = qword_2056F0;
  if (!qword_2056F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2056F0);
  }
  return result;
}

unint64_t sub_B6A64()
{
  unint64_t result = qword_2056F8;
  if (!qword_2056F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2056F8);
  }
  return result;
}

uint64_t sub_B6AB0()
{
  sub_B79A0();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 312, 7);
}

unint64_t sub_B6AF0()
{
  unint64_t result = qword_205700;
  if (!qword_205700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205700);
  }
  return result;
}

uint64_t sub_B6B40()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 96);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 136);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 176);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 216);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 272, 7);
}

unint64_t sub_B6BB0()
{
  unint64_t result = qword_205710;
  if (!qword_205710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205710);
  }
  return result;
}

uint64_t sub_B6BFC(uint64_t a1)
{
  return a1;
}

unint64_t sub_B6C50()
{
  unint64_t result = qword_205718;
  if (!qword_205718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205718);
  }
  return result;
}

uint64_t sub_B6C9C()
{
  swift_release();
  uint64_t v0 = sub_B7954();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_B6CCC(uint64_t a1)
{
  return a1;
}

uint64_t sub_B6D20(uint64_t a1)
{
  return a1;
}

unint64_t sub_B6D74()
{
  unint64_t result = qword_205720;
  if (!qword_205720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205720);
  }
  return result;
}

uint64_t sub_B6DC0(uint64_t a1)
{
  return a1;
}

unint64_t sub_B6E14()
{
  unint64_t result = qword_205730;
  if (!qword_205730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205730);
  }
  return result;
}

uint64_t sub_B6E60()
{
  sub_B7884();
  swift_release();

  return _swift_deallocObject(v0, 280, 7);
}

uint64_t sub_B6E9C()
{
  uint64_t v0 = sub_B7954();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_B6EC4()
{
  sub_B7884();

  return _swift_deallocObject(v0, 266, 7);
}

unint64_t sub_B6EF8()
{
  unint64_t result = qword_205738;
  if (!qword_205738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205738);
  }
  return result;
}

uint64_t sub_B6F44()
{
  sub_B7884();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 289, 7);
}

unint64_t sub_B6F88()
{
  unint64_t result = qword_205740;
  if (!qword_205740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205740);
  }
  return result;
}

uint64_t sub_B6FD4()
{
  sub_B7A20();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 272);
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 336, 7);
}

unint64_t sub_B7028()
{
  unint64_t result = qword_205748;
  if (!qword_205748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205748);
  }
  return result;
}

uint64_t sub_B7074()
{
  sub_B7884();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 272);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 329, 7);
}

unint64_t sub_B70C0()
{
  unint64_t result = qword_205750;
  if (!qword_205750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205750);
  }
  return result;
}

uint64_t sub_B710C()
{
  sub_B7A20();

  return _swift_deallocObject(v0, 273, 7);
}

uint64_t sub_B7140(uint64_t a1)
{
  uint64_t v2 = sub_1AC2D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_B719C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for WellnessAction(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 5) {
    unsigned int v1 = *(_DWORD *)result + 5;
  }
  switch(v1)
  {
    case 0u:
    case 2u:
    case 3u:
    case 4u:
      uint64_t result = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(result);
      break;
    case 1u:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for WellnessAction(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 5) {
    unsigned int v3 = *(_DWORD *)a2 + 5;
  }
  switch(v3)
  {
    case 0u:
      long long v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t))(v4 - 8))(a1);
      *(unsigned char *)(a1 + 40) = 0;
      return a1;
    case 1u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 1;
      swift_retain();
      return a1;
    case 2u:
      long long v6 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t))(v6 - 8))(a1);
      char v7 = 2;
      goto LABEL_10;
    case 3u:
      long long v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t))(v8 - 8))(a1);
      char v7 = 3;
      goto LABEL_10;
    case 4u:
      long long v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v9;
      (**(void (***)(uint64_t))(v9 - 8))(a1);
      char v7 = 4;
LABEL_10:
      *(unsigned char *)(a1 + 40) = v7;
      break;
    default:
      long long v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for WellnessAction(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 5) {
      unsigned int v4 = *(_DWORD *)a1 + 5;
    }
    switch(v4)
    {
      case 0u:
      case 2u:
      case 3u:
      case 4u:
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
        break;
      case 1u:
        swift_release();
        break;
      default:
        break;
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 5) {
      unsigned int v5 = *(_DWORD *)a2 + 5;
    }
    switch(v5)
    {
      case 0u:
        uint64_t v6 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v6;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = 0;
        return a1;
      case 1u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 40) = 1;
        swift_retain();
        return a1;
      case 2u:
        uint64_t v9 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v9 - 8))(a1, a2);
        char v10 = 2;
        goto LABEL_16;
      case 3u:
        uint64_t v11 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v11;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v11 - 8))(a1, a2);
        char v10 = 3;
        goto LABEL_16;
      case 4u:
        uint64_t v12 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v12;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v12 - 8))(a1, a2);
        char v10 = 4;
LABEL_16:
        *(unsigned char *)(a1 + 40) = v10;
        break;
      default:
        long long v7 = *a2;
        long long v8 = a2[1];
        *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
        *(_OWORD *)a1 = v7;
        *(_OWORD *)(a1 + 16) = v8;
        break;
    }
  }
  return a1;
}

__n128 initializeWithTake for WellnessAction(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for WellnessAction(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 5) {
      unsigned int v4 = *(_DWORD *)a1 + 5;
    }
    switch(v4)
    {
      case 0u:
      case 2u:
      case 3u:
      case 4u:
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
        break;
      case 1u:
        swift_release();
        break;
      default:
        break;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 5) {
      unsigned int v5 = *(_DWORD *)a2 + 5;
    }
    switch(v5)
    {
      case 0u:
        long long v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
        return a1;
      case 1u:
        *(void *)a1 = *(void *)a2;
        char v8 = 1;
        goto LABEL_16;
      case 2u:
        long long v9 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        char v8 = 2;
        goto LABEL_16;
      case 3u:
        long long v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        char v8 = 3;
        goto LABEL_16;
      case 4u:
        long long v11 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v11;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        char v8 = 4;
LABEL_16:
        *(unsigned char *)(a1 + 40) = v8;
        break;
      default:
        long long v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for WellnessAction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 6) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WellnessAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_B7830(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 5) {
    return (*(_DWORD *)a1 + 5);
  }
  return result;
}

uint64_t sub_B784C(uint64_t result, unsigned int a2)
{
  if (a2 > 4)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 5;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for WellnessAction()
{
  return &type metadata for WellnessAction;
}

uint64_t sub_B7884()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 96);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 136);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 176);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 216);
  return swift_unknownObjectRelease();
}

uint64_t sub_B78EC()
{
  return sub_1ACDB0();
}

uint64_t sub_B793C()
{
  return *(void *)(v0 + 1080);
}

uint64_t sub_B7954()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 24);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 64);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 104);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 144);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 184);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 224);
  return v0;
}

uint64_t sub_B79A0()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 96);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 136);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 176);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 216);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 256);
  return *(void *)(v0 + 296);
}

uint64_t sub_B79EC()
{
  return *(void *)(v0 + 1200);
}

uint64_t sub_B7A20()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 24);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 64);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 104);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 144);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 184);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 224);
  return swift_unknownObjectRelease();
}

uint64_t sub_B7A74@<X0>(int a1@<W8>)
{
  *(_DWORD *)(v1 - 200) = a1;
  return sub_1ACFE0();
}

uint64_t sub_B7AE8()
{
  return v0;
}

uint64_t sub_B7B08(uint64_t a1)
{
  *(void *)(v1 - 248) = a1;
  return sub_1ACFE0();
}

BOOL sub_B7B50(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_B7B6C()
{
  return v0;
}

uint64_t sub_B7B78()
{
  return swift_arrayDestroy();
}

uint64_t sub_B7B9C()
{
  return v0;
}

uint64_t sub_B7BA8()
{
  return sub_1AD2F0();
}

void *sub_B7BCC()
{
  uint64_t v3 = *(void *)(v1 + 608);
  return sub_2E38(v0, v3);
}

uint64_t sub_B7C00()
{
  return swift_release_n();
}

uint64_t sub_B7C18()
{
  return swift_slowAlloc();
}

uint64_t BloodPressureQueryModel.systolic.getter()
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 20));
}

uint64_t type metadata accessor for BloodPressureQueryModel()
{
  uint64_t result = qword_2057F0;
  if (!qword_2057F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void BloodPressureQueryModel.systolic.setter()
{
  uint64_t v0 = sub_BCB00();
  sub_2EFC0(*(int *)(v0 + 20));
}

uint64_t (*BloodPressureQueryModel.systolic.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.systolicMin.getter()
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 24));
}

void BloodPressureQueryModel.systolicMin.setter()
{
  uint64_t v0 = sub_BCB00();
  sub_2EFC0(*(int *)(v0 + 24));
}

uint64_t (*BloodPressureQueryModel.systolicMin.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.systolicMax.getter()
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 28));
}

void BloodPressureQueryModel.systolicMax.setter()
{
  uint64_t v0 = sub_BCB00();
  sub_2EFC0(*(int *)(v0 + 28));
}

uint64_t (*BloodPressureQueryModel.systolicMax.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.diastolic.getter()
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 32));
}

void BloodPressureQueryModel.diastolic.setter()
{
  uint64_t v0 = sub_BCB00();
  sub_2EFC0(*(int *)(v0 + 32));
}

uint64_t (*BloodPressureQueryModel.diastolic.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.diastolicMin.getter()
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 36));
}

void BloodPressureQueryModel.diastolicMin.setter()
{
  uint64_t v0 = sub_BCB00();
  sub_2EFC0(*(int *)(v0 + 36));
}

uint64_t (*BloodPressureQueryModel.diastolicMin.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.diastolicMax.getter()
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 40));
}

void BloodPressureQueryModel.diastolicMax.setter()
{
  uint64_t v0 = sub_BCB00();
  sub_2EFC0(*(int *)(v0 + 40));
}

uint64_t (*BloodPressureQueryModel.diastolicMax.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.systolicString.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureQueryModel.systolicString.setter()
{
  sub_BCACC();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.diastolicString.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureQueryModel.diastolicString.setter()
{
  sub_BCACC();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.systolicMinString.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureQueryModel.systolicMinString.setter()
{
  sub_BCACC();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicMinString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.systolicMaxString.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureQueryModel.systolicMaxString.setter()
{
  sub_BCACC();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicMaxString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.diastolicMinString.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureQueryModel.diastolicMinString.setter()
{
  sub_BCACC();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicMinString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.diastolicMaxString.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureQueryModel.diastolicMaxString.setter()
{
  sub_BCACC();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicMaxString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.unitLabelString.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureQueryModel.unitLabelString.setter()
{
  sub_BCACC();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureQueryModel.unitLabelString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.systolicLabel.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureQueryModel.systolicLabel.setter()
{
  sub_BCACC();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureQueryModel.systolicLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.diastolicLabel.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureQueryModel.diastolicLabel.setter()
{
  sub_BCACC();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureQueryModel.diastolicLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  return sub_553FC(v1 + *(int *)(Model + 80), a1, &qword_201E20);
}

uint64_t BloodPressureQueryModel.url.setter()
{
  uint64_t v2 = sub_BCAE8();
  return sub_5B0E0(v0, v1 + *(int *)(v2 + 80), &qword_201E20);
}

uint64_t (*BloodPressureQueryModel.url.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.dateLabel.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureQueryModel.dateLabel.setter()
{
  sub_BCACC();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureQueryModel.dateLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.unitLabel.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureQueryModel.unitLabel.setter()
{
  sub_BCACC();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureQueryModel.unitLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  return sub_553FC(v1 + *(int *)(Model + 92), a1, &qword_2022D0);
}

uint64_t BloodPressureQueryModel.snippetHeaderModel.setter()
{
  uint64_t v2 = sub_BCAE8();
  return sub_5B0E0(v0, v1 + *(int *)(v2 + 92), &qword_2022D0);
}

uint64_t (*BloodPressureQueryModel.snippetHeaderModel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureQueryModel.init(systolic:diastolic:systolicMin:systolicMax:diastolicMin:diastolicMax:unitLabel:systolicLabel:diastolicLabel:dateLabel:url:headerModel:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23 = sub_2694(&qword_2022C8);
  uint64_t v24 = sub_53D4(v23);
  __chkstk_darwin(v24);
  sub_53E0();
  uint64_t v100 = v25;
  uint64_t v26 = sub_2694(&qword_201E28);
  uint64_t v27 = sub_53D4(v26);
  __chkstk_darwin(v27);
  sub_E548();
  uint64_t v30 = v29 - v28;
  sub_1AAD90();
  sub_55948();
  uint64_t v99 = v31;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v32, v33, v34, v31);
  uint64_t Model = (int *)type metadata accessor for BloodPressureQueryModel();
  sub_BCB38(Model[5]);
  uint64_t v85 = v36;
  *(unsigned char *)(v36 + 8) = 1;
  sub_BCB38(*(int *)(v37 + 24));
  uint64_t v84 = v38;
  *(unsigned char *)(v38 + 8) = 1;
  sub_BCB38(*(int *)(v39 + 28));
  sub_BCBA8(v40);
  sub_BCB38(*(int *)(v41 + 32));
  sub_BCBA8(v42);
  sub_BCB38(*(int *)(v43 + 36));
  sub_BCBA8(v44);
  sub_BCB38(*(int *)(v45 + 40));
  sub_BCBA8(v46);
  uint64_t v48 = (uint64_t *)(a9 + v47[11]);
  *uint64_t v48 = 0;
  v48[1] = 0;
  os_log_type_t v83 = v48;
  unsigned __int8 v49 = (uint64_t *)(a9 + v47[12]);
  *unsigned __int8 v49 = 0;
  v49[1] = 0;
  uint64_t v86 = v49;
  uint64_t v50 = (uint64_t *)(a9 + v47[13]);
  *uint64_t v50 = 0;
  v50[1] = 0;
  char v87 = v50;
  sub_BCB60(v47[14]);
  uint64_t v88 = v51;
  sub_BCB60(*(int *)(v52 + 60));
  unint64_t v89 = v53;
  sub_BCB60(*(int *)(v54 + 64));
  uint64_t v90 = v55;
  sub_BCB60(*(int *)(v56 + 68));
  uint64_t v58 = (void *)(a9 + v57[18]);
  uint64_t v59 = (void *)(a9 + v57[19]);
  uint64_t v60 = a9 + v57[20];
  uint64_t v61 = sub_1AAB10();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v60, 1, 1, v61);
  unint64_t v62 = (uint64_t *)(a9 + Model[21]);
  *unint64_t v62 = 0;
  v62[1] = 0;
  uint64_t v63 = (void *)(a9 + Model[22]);
  uint64_t v64 = a9 + Model[23];
  uint64_t v65 = type metadata accessor for SnippetHeaderModel();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v64, 1, 1, v65);
  *uint64_t v63 = a14;
  v63[1] = a15;
  *uint64_t v58 = a16;
  v58[1] = a17;
  *uint64_t v59 = a18;
  v59[1] = a19;
  sub_553FC(a20, v30, &qword_201E28);
  uint64_t v66 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v30, 1, v66) == 1)
  {
    sub_2EF0C(v30, &qword_201E28);
    uint64_t v67 = 0;
    uint64_t v68 = 0;
  }
  else
  {
    uint64_t v67 = sub_1AC1D0();
    uint64_t v68 = v69;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v66 - 8) + 8))(v30, v66);
  }
  char v95 = a8 & 1;
  uint64_t v70 = a6 & 1;
  swift_bridgeObjectRelease();
  *unint64_t v62 = v67;
  v62[1] = v68;
  sub_B8E04(a22, v64);
  *(void *)uint64_t v85 = a1;
  *(unsigned char *)(v85 + 8) = a2 & 1;
  *(void *)uint64_t v84 = a5;
  *(unsigned char *)(v84 + 8) = v70;
  *(void *)uint64_t v82 = a7;
  *(unsigned char *)(v82 + 8) = v95;
  *(void *)uint64_t v81 = a3;
  *(unsigned char *)(v81 + 8) = a4 & 1;
  *(void *)uint64_t v80 = a10;
  *(unsigned char *)(v80 + 8) = a11 & 1;
  *(void *)uint64_t v79 = a12;
  *(unsigned char *)(v79 + 8) = a13 & 1;
  uint64_t v71 = sub_B8E6C(a1, a2 & 1);
  uint64_t v73 = v72;
  swift_bridgeObjectRelease();
  *os_log_type_t v83 = v71;
  v83[1] = v73;
  uint64_t v74 = sub_B8E6C(a3, a4 & 1);
  uint64_t v76 = v75;
  swift_bridgeObjectRelease();
  *uint64_t v86 = v74;
  v86[1] = v76;
  sub_B8E6C(a5, v70);
  sub_BCBD4();
  swift_bridgeObjectRelease();
  *char v87 = a9;
  v87[1] = v70;
  sub_B8E6C(a7, v95);
  sub_BCBD4();
  swift_bridgeObjectRelease();
  *uint64_t v88 = a9;
  v88[1] = v70;
  sub_B8E6C(a10, a11 & 1);
  sub_BCBD4();
  swift_bridgeObjectRelease();
  uint64_t *v89 = a9;
  v89[1] = v70;
  sub_B8E6C(a12, a13 & 1);
  sub_BCBD4();
  swift_bridgeObjectRelease();
  *uint64_t v90 = a9;
  v90[1] = v70;
  sub_B8F7C(a21);
  sub_2EF0C(a22, &qword_2022D0);
  sub_2EF0C(a21, &qword_201E20);
  sub_2EF0C(a20, &qword_201E28);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v100, 0, 1, v99);
  return sub_5B0E0(v100, a9, &qword_2022C8);
}

uint64_t sub_B8E04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_2022D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_B8E6C(uint64_t result, char a2)
{
  if (a2) {
    return 0;
  }
  uint64_t v2 = result;
  double v3 = trunc(*(double *)&result);
  if (*(double *)&result <= -9.22337204e18 || *(double *)&result >= 9.22337204e18 || v3 != *(double *)&result)
  {
    sub_2694(&qword_205890);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1ADCF0;
    *(void *)(v6 + 56) = &type metadata for Double;
    *(void *)(v6 + 64) = &protocol witness table for Double;
    *(void *)(v6 + 32) = v2;
    uint64_t v7 = sub_1ACDE0();
    swift_bridgeObjectRelease();
    return v7;
  }
  if ((~result & 0x7FF0000000000000) != 0) {
    return sub_1AD2C0();
  }
  __break(1u);
  return result;
}

uint64_t sub_B8F7C(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201E20);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AAB10();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_553FC(a1, (uint64_t)v4, &qword_201E20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_2EF0C((uint64_t)v4, &qword_201E20);
    return sub_1AAD80();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_1AAAD0();
    sub_1AAD80();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_B9144(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x63696C6F74737973 && a2 == 0xE800000000000000;
    if (v6 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x63696C6F74737973 && a2 == 0xEB000000006E694DLL;
      if (v7 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x63696C6F74737973 && a2 == 0xEB0000000078614DLL;
        if (v8 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x696C6F7473616964 && a2 == 0xE900000000000063;
          if (v9 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x696C6F7473616964 && a2 == 0xEC0000006E694D63;
            if (v10 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 0x696C6F7473616964 && a2 == 0xEC00000078614D63;
              if (v11 || (sub_1AD2F0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else
              {
                BOOL v12 = a1 == 0x63696C6F74737973 && a2 == 0xEE00676E69727453;
                if (v12 || (sub_1AD2F0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 7;
                }
                else
                {
                  BOOL v13 = a1 == 0x696C6F7473616964 && a2 == 0xEF676E6972745363;
                  if (v13 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 8;
                  }
                  else if (a1 == 0xD000000000000011 && a2 == 0x80000000001BB990 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else if (a1 == 0xD000000000000011 && a2 == 0x80000000001BB9B0 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 10;
                  }
                  else if (a1 == 0xD000000000000012 && a2 == 0x80000000001BB9D0 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 11;
                  }
                  else if (a1 == 0xD000000000000012 && a2 == 0x80000000001BB9F0 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 12;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x6562614C74696E75 && a2 == 0xEF676E697274536CLL;
                    if (v14 || (sub_1AD2F0() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 13;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x63696C6F74737973 && a2 == 0xED00006C6562614CLL;
                      if (v15 || (sub_1AD2F0() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 14;
                      }
                      else
                      {
                        BOOL v16 = a1 == 0x696C6F7473616964 && a2 == 0xEE006C6562614C63;
                        if (v16 || (sub_1AD2F0() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 15;
                        }
                        else
                        {
                          BOOL v17 = a1 == 7107189 && a2 == 0xE300000000000000;
                          if (v17 || (sub_1AD2F0() & 1) != 0)
                          {
                            swift_bridgeObjectRelease();
                            return 16;
                          }
                          else
                          {
                            BOOL v18 = a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL;
                            if (v18 || (sub_1AD2F0() & 1) != 0)
                            {
                              swift_bridgeObjectRelease();
                              return 17;
                            }
                            else
                            {
                              BOOL v19 = a1 == 0x6562614C74696E75 && a2 == 0xE90000000000006CLL;
                              if (v19 || (sub_1AD2F0() & 1) != 0)
                              {
                                swift_bridgeObjectRelease();
                                return 18;
                              }
                              else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B78B0)
                              {
                                swift_bridgeObjectRelease();
                                return 19;
                              }
                              else
                              {
                                char v20 = sub_1AD2F0();
                                swift_bridgeObjectRelease();
                                if (v20) {
                                  return 19;
                                }
                                else {
                                  return 20;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_B9890()
{
  return 20;
}

uint64_t sub_B9898(char a1)
{
  uint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 7:
    case 14:
      uint64_t result = 0x63696C6F74737973;
      break;
    case 4:
      uint64_t result = 0x696C6F7473616964;
      break;
    case 5:
    case 6:
    case 15:
      uint64_t result = 0x696C6F7473616964;
      break;
    case 8:
      uint64_t result = 0x696C6F7473616964;
      break;
    case 9:
    case 10:
      return result;
    case 11:
    case 12:
    case 19:
      uint64_t result = 0xD000000000000012;
      break;
    case 13:
      uint64_t result = 0x6562614C74696E75;
      break;
    case 16:
      uint64_t result = 7107189;
      break;
    case 17:
      unsigned int v3 = 1702125924;
      goto LABEL_11;
    case 18:
      unsigned int v3 = 1953066613;
LABEL_11:
      uint64_t result = v3 | 0x6562614C00000000;
      break;
    default:
      uint64_t result = 0x68636E7550707061;
      break;
  }
  return result;
}

uint64_t sub_B9AD4()
{
  return sub_B9898(*v0);
}

uint64_t sub_B9ADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_B9144(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_B9B04@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_B9890();
  *a1 = result;
  return result;
}

uint64_t sub_B9B2C(uint64_t a1)
{
  unint64_t v2 = sub_B9F84();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B9B68(uint64_t a1)
{
  unint64_t v2 = sub_B9F84();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BloodPressureQueryModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2694(&qword_205770);
  sub_52C4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_E548();
  uint64_t v11 = v10 - v9;
  sub_2E38(a1, a1[3]);
  sub_B9F84();
  sub_1AD3B0();
  sub_1AAD90();
  sub_BA8C4(&qword_202BC0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  sub_BCBB4();
  sub_1AD270();
  if (!v2)
  {
    uint64_t Model = (int *)type metadata accessor for BloodPressureQueryModel();
    sub_2EFEC(v3 + Model[5]);
    sub_22F30(1);
    sub_2EFEC(v3 + Model[6]);
    sub_22F30(2);
    sub_2EFEC(v3 + Model[7]);
    sub_22F30(3);
    sub_2EFEC(v3 + Model[8]);
    sub_22F30(4);
    sub_2EFEC(v3 + Model[9]);
    sub_22F30(5);
    sub_2EFEC(v3 + Model[10]);
    sub_22F30(6);
    uint64_t v13 = sub_7A494(Model[11]);
    sub_22EE8(v13, v14, 7);
    uint64_t v15 = sub_7A494(Model[12]);
    sub_22EE8(v15, v16, 8);
    uint64_t v17 = sub_7A494(Model[13]);
    sub_22EE8(v17, v18, 9);
    uint64_t v19 = sub_7A494(Model[14]);
    sub_22EE8(v19, v20, 10);
    uint64_t v21 = sub_7A494(Model[15]);
    sub_22EE8(v21, v22, 11);
    uint64_t v23 = sub_7A494(Model[16]);
    sub_22EE8(v23, v24, 12);
    uint64_t v25 = sub_7A494(Model[17]);
    sub_22EE8(v25, v26, 13);
    uint64_t v27 = sub_7A494(Model[18]);
    sub_22EE8(v27, v28, 14);
    uint64_t v29 = sub_7A494(Model[19]);
    sub_22EE8(v29, v30, 15);
    sub_1AAB10();
    sub_BA8C4(&qword_205780, (void (*)(uint64_t))&type metadata accessor for URL);
    sub_BCBC0();
    sub_1AD270();
    uint64_t v31 = sub_7A494(Model[21]);
    sub_22EE8(v31, v32, 17);
    uint64_t v33 = sub_7A494(Model[22]);
    sub_22EE8(v33, v34, 18);
    type metadata accessor for SnippetHeaderModel();
    sub_BA8C4(&qword_202BD0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_BCBC0();
    sub_1AD270();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
}

unint64_t sub_B9F84()
{
  unint64_t result = qword_205778;
  if (!qword_205778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205778);
  }
  return result;
}

uint64_t BloodPressureQueryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_2694(&qword_2022D0);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_53E0();
  uint64_t v66 = v5;
  uint64_t v6 = sub_2694(&qword_201E20);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_53E0();
  uint64_t v75 = v8;
  uint64_t v9 = sub_2694(&qword_2022C8);
  uint64_t v10 = sub_53D4(v9);
  __chkstk_darwin(v10);
  sub_53E0();
  uint64_t v76 = v11;
  uint64_t v78 = sub_2694(&qword_205788);
  sub_52C4();
  uint64_t v74 = v12;
  __chkstk_darwin(v13);
  sub_53E0();
  uint64_t v81 = v14;
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  uint64_t v16 = (int *)(Model - 8);
  __chkstk_darwin(Model);
  sub_E548();
  uint64_t v19 = v18 - v17;
  sub_1AAD90();
  sub_55948();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v20, v21, v22, v23);
  sub_BCB38(v16[7]);
  uint64_t v73 = v24;
  *(unsigned char *)(v24 + 8) = 1;
  sub_BCB38(v16[8]);
  *(unsigned char *)(v25 + 8) = 1;
  sub_BCB38(v16[9]);
  *(unsigned char *)(v26 + 8) = 1;
  sub_BCB38(v16[10]);
  *(unsigned char *)(v27 + 8) = 1;
  sub_BCB38(v16[11]);
  *(unsigned char *)(v28 + 8) = 1;
  sub_BCB38(v16[12]);
  *(unsigned char *)(v29 + 8) = 1;
  uint64_t v30 = (uint64_t *)(v19 + v16[13]);
  *uint64_t v30 = 0;
  v30[1] = 0;
  uint64_t v72 = v30;
  uint64_t v31 = (uint64_t **)(v19 + v16[14]);
  *uint64_t v31 = 0;
  v31[1] = 0;
  uint64_t v71 = v31;
  sub_BCB60(v16[15]);
  uint64_t v70 = v32;
  sub_BCB60(v16[16]);
  uint64_t v69 = v33;
  uint64_t v34 = (uint64_t **)(v19 + v16[17]);
  *uint64_t v34 = 0;
  v34[1] = 0;
  uint64_t v68 = v34;
  sub_BCB60(v16[18]);
  sub_BCB60(v16[19]);
  uint64_t v35 = (uint64_t **)(v19 + v16[20]);
  *uint64_t v35 = 0;
  v35[1] = 0;
  uint64_t v36 = (void *)(v19 + v16[21]);
  *uint64_t v36 = 0;
  v36[1] = 0;
  uint64_t v37 = v19 + v16[22];
  sub_1AAB10();
  uint64_t v65 = v37;
  sub_55948();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v38, v39, v40, v41);
  uint64_t v42 = (void *)(v19 + v16[23]);
  *uint64_t v42 = 0;
  v42[1] = 0;
  uint64_t v43 = (void *)(v19 + v16[24]);
  *uint64_t v43 = 0;
  v43[1] = 0;
  uint64_t v80 = v19;
  uint64_t v44 = v19 + v16[25];
  uint64_t v45 = type metadata accessor for SnippetHeaderModel();
  sub_55948();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v46, v47, v48, v45);
  sub_2E38(a1, a1[3]);
  sub_B9F84();
  sub_1AD3A0();
  if (v79)
  {
    uint64_t v64 = v80;
  }
  else
  {
    sub_BA8C4(&qword_202BE0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    sub_BCBB4();
    sub_1AD1E0();
    sub_5B0E0(v76, v80, &qword_2022C8);
    *(void *)uint64_t v73 = sub_BCB18(1);
    *(unsigned char *)(v73 + 8) = v50 & 1;
    uint64_t v51 = sub_BCB18(2);
    sub_BCB50(v51, v52);
    uint64_t v53 = sub_BCB18(3);
    sub_BCB50(v53, v54);
    uint64_t v55 = sub_BCB18(4);
    sub_BCB50(v55, v56);
    uint64_t v57 = sub_BCB18(5);
    sub_BCB50(v57, v58);
    uint64_t v59 = sub_BCB18(6);
    sub_BCB50(v59, v60);
    uint64_t v61 = sub_1AD1C0();
    uint64_t v63 = v62;
    uint64_t v77 = v61;
    swift_bridgeObjectRelease();
    *uint64_t v72 = v77;
    v72[1] = v63;
    sub_BCB84(8);
    sub_BCB44();
    swift_bridgeObjectRelease();
    *uint64_t v71 = v72;
    v71[1] = (uint64_t *)v63;
    sub_BCB84(9);
    sub_BCB44();
    swift_bridgeObjectRelease();
    *uint64_t v70 = v72;
    v70[1] = (uint64_t *)v63;
    sub_BCAA8(10);
    sub_BCB44();
    swift_bridgeObjectRelease();
    *uint64_t v69 = v72;
    v69[1] = (uint64_t *)v63;
    sub_BCAA8(11);
    sub_BCB44();
    swift_bridgeObjectRelease();
    *uint64_t v68 = v72;
    v68[1] = (uint64_t *)v63;
    sub_BCAA8(12);
    sub_BCB44();
    sub_BCB6C();
    *uint64_t v68 = v72;
    v68[1] = (uint64_t *)v63;
    sub_BCAA8(13);
    sub_BCB44();
    sub_BCB6C();
    *uint64_t v68 = v72;
    v68[1] = (uint64_t *)v63;
    sub_BCAA8(14);
    sub_BCB44();
    swift_bridgeObjectRelease();
    *uint64_t v35 = v72;
    v35[1] = (uint64_t *)v63;
    sub_BCAA8(15);
    sub_BCB44();
    sub_BCB6C();
    *uint64_t v35 = v72;
    v35[1] = (uint64_t *)v63;
    sub_BA8C4(&qword_205790, (void (*)(uint64_t))&type metadata accessor for URL);
    sub_BCBB4();
    sub_1AD1E0();
    sub_5B0E0(v75, v65, &qword_201E20);
    sub_BCAA8(17);
    sub_BCB44();
    sub_BCB6C();
    *uint64_t v35 = v81;
    v35[1] = (uint64_t *)v63;
    sub_BCAA8(18);
    sub_BCB44();
    sub_BCB6C();
    *uint64_t v35 = v81;
    v35[1] = (uint64_t *)v63;
    sub_BA8C4(&qword_202BF0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_BCBB4();
    sub_1AD1E0();
    (*(void (**)(uint64_t *, uint64_t))(v74 + 8))(v81, v78);
    uint64_t v64 = v80;
    sub_5B0E0(v66, v44, &qword_2022D0);
    sub_BA7D0(v80, a2);
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
  return sub_BBAF8(v64, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
}

uint64_t sub_BA7D0(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t sub_BA834()
{
  return sub_BA8C4(&qword_2022A8, (void (*)(uint64_t))type metadata accessor for BloodPressureQueryModel);
}

uint64_t sub_BA87C()
{
  return sub_BA8C4(&qword_202190, (void (*)(uint64_t))type metadata accessor for BloodPressureQueryModel);
}

uint64_t sub_BA8C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_BA90C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return BloodPressureQueryModel.init(from:)(a1, a2);
}

uint64_t sub_BA924(void *a1)
{
  return BloodPressureQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for BloodPressureQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AAD90();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_2022C8);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = (char *)a1 + v11;
    uint64_t v15 = (char *)a2 + v11;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)a1 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (char *)a1 + v17;
    uint64_t v21 = (char *)a2 + v17;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = a3[10];
    uint64_t v24 = (char *)a1 + v22;
    uint64_t v25 = (char *)a2 + v22;
    uint64_t v26 = *(void *)v25;
    v24[8] = v25[8];
    *(void *)uint64_t v24 = v26;
    uint64_t v27 = (char *)a1 + v23;
    uint64_t v28 = (char *)a2 + v23;
    v27[8] = v28[8];
    *(void *)uint64_t v27 = *(void *)v28;
    uint64_t v29 = a3[11];
    uint64_t v30 = a3[12];
    uint64_t v31 = (uint64_t *)((char *)a1 + v29);
    uint64_t v32 = (uint64_t *)((char *)a2 + v29);
    uint64_t v90 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v90;
    uint64_t v33 = (uint64_t *)((char *)a1 + v30);
    uint64_t v34 = (uint64_t *)((char *)a2 + v30);
    uint64_t v91 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v91;
    uint64_t v35 = a3[13];
    uint64_t v36 = a3[14];
    uint64_t v37 = (uint64_t *)((char *)a1 + v35);
    uint64_t v38 = (uint64_t *)((char *)a2 + v35);
    uint64_t v88 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v88;
    uint64_t v39 = (uint64_t *)((char *)a1 + v36);
    uint64_t v40 = (uint64_t *)((char *)a2 + v36);
    uint64_t v89 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v89;
    uint64_t v41 = a3[15];
    uint64_t v42 = a3[16];
    uint64_t v43 = (uint64_t *)((char *)a1 + v41);
    uint64_t v44 = (uint64_t *)((char *)a2 + v41);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = (uint64_t *)((char *)a1 + v42);
    uint64_t v47 = (uint64_t *)((char *)a2 + v42);
    uint64_t v48 = v47[1];
    *uint64_t v46 = *v47;
    v46[1] = v48;
    uint64_t v49 = a3[17];
    uint64_t v50 = a3[18];
    uint64_t v51 = (uint64_t *)((char *)a1 + v49);
    char v52 = (uint64_t *)((char *)a2 + v49);
    uint64_t v53 = v52[1];
    *uint64_t v51 = *v52;
    v51[1] = v53;
    char v54 = (uint64_t *)((char *)a1 + v50);
    uint64_t v55 = (uint64_t *)((char *)a2 + v50);
    uint64_t v56 = v55[1];
    *char v54 = *v55;
    v54[1] = v56;
    uint64_t v57 = a3[19];
    uint64_t v58 = a3[20];
    uint64_t v59 = (uint64_t *)((char *)a1 + v57);
    char v60 = (uint64_t *)((char *)a2 + v57);
    uint64_t v61 = v60[1];
    *uint64_t v59 = *v60;
    v59[1] = v61;
    __dst = (char *)a1 + v58;
    uint64_t v62 = (char *)a2 + v58;
    uint64_t v63 = sub_1AAB10();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v62, 1, v63))
    {
      uint64_t v64 = sub_2694(&qword_201E20);
      memcpy(__dst, v62, *(void *)(*(void *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16))(__dst, v62, v63);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dst, 0, 1, v63);
    }
    uint64_t v65 = a3[21];
    uint64_t v66 = a3[22];
    uint64_t v67 = (uint64_t *)((char *)a1 + v65);
    uint64_t v68 = (uint64_t *)((char *)a2 + v65);
    uint64_t v69 = v68[1];
    void *v67 = *v68;
    v67[1] = v69;
    uint64_t v70 = (uint64_t *)((char *)a1 + v66);
    uint64_t v71 = (uint64_t *)((char *)a2 + v66);
    uint64_t v72 = v71[1];
    *uint64_t v70 = *v71;
    v70[1] = v72;
    uint64_t v73 = a3[23];
    uint64_t v74 = (char *)a1 + v73;
    uint64_t v75 = (char *)a2 + v73;
    uint64_t v76 = type metadata accessor for SnippetHeaderModel();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v75, 1, v76))
    {
      uint64_t v77 = sub_2694(&qword_2022D0);
      memcpy(v74, v75, *(void *)(*(void *)(v77 - 8) + 64));
    }
    else
    {
      uint64_t v78 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16))(v74, v75, v78);
      uint64_t v79 = *(int *)(v76 + 20);
      uint64_t v80 = &v74[v79];
      uint64_t v81 = &v75[v79];
      uint64_t v82 = *((void *)v81 + 1);
      *(void *)uint64_t v80 = *(void *)v81;
      *((void *)v80 + 1) = v82;
      uint64_t v83 = *(int *)(v76 + 24);
      uint64_t v84 = &v74[v83];
      uint64_t v85 = &v75[v83];
      uint64_t v86 = *((void *)v85 + 1);
      *(void *)uint64_t v84 = *(void *)v85;
      *((void *)v84 + 1) = v86;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v74, 0, 1, v76);
    }
  }
  return a1;
}

uint64_t destroy for BloodPressureQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AAD90();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 80);
  uint64_t v6 = sub_1AAB10();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 92);
  uint64_t v8 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = sub_1AC1E0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v7, v10);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  uint64_t v24 = *(void *)v23;
  v22[8] = v23[8];
  *(void *)uint64_t v22 = v24;
  uint64_t v25 = &a1[v21];
  uint64_t v26 = &a2[v21];
  v25[8] = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  uint64_t v27 = a3[11];
  uint64_t v28 = a3[12];
  uint64_t v29 = &a1[v27];
  uint64_t v30 = &a2[v27];
  uint64_t v88 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = *(void *)v30;
  *((void *)v29 + 1) = v88;
  uint64_t v31 = &a1[v28];
  uint64_t v32 = &a2[v28];
  uint64_t v89 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = v89;
  uint64_t v33 = a3[13];
  uint64_t v34 = a3[14];
  uint64_t v35 = &a1[v33];
  uint64_t v36 = &a2[v33];
  uint64_t v86 = *((void *)v36 + 1);
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = v86;
  uint64_t v37 = &a1[v34];
  uint64_t v38 = &a2[v34];
  uint64_t v87 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v87;
  uint64_t v39 = a3[15];
  uint64_t v40 = a3[16];
  uint64_t v41 = &a1[v39];
  uint64_t v42 = &a2[v39];
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  uint64_t v44 = &a1[v40];
  uint64_t v45 = &a2[v40];
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = v46;
  uint64_t v47 = a3[17];
  uint64_t v48 = a3[18];
  uint64_t v49 = &a1[v47];
  uint64_t v50 = &a2[v47];
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + 1) = v51;
  char v52 = &a1[v48];
  uint64_t v53 = &a2[v48];
  uint64_t v54 = *((void *)v53 + 1);
  *(void *)char v52 = *(void *)v53;
  *((void *)v52 + 1) = v54;
  uint64_t v55 = a3[19];
  uint64_t v56 = a3[20];
  uint64_t v57 = &a1[v55];
  uint64_t v58 = &a2[v55];
  uint64_t v59 = *((void *)v58 + 1);
  *(void *)uint64_t v57 = *(void *)v58;
  *((void *)v57 + 1) = v59;
  __dst = &a1[v56];
  char v60 = &a2[v56];
  uint64_t v61 = sub_1AAB10();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v60, 1, v61))
  {
    uint64_t v62 = sub_2694(&qword_201E20);
    memcpy(__dst, v60, *(void *)(*(void *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(__dst, v60, v61);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dst, 0, 1, v61);
  }
  uint64_t v63 = a3[21];
  uint64_t v64 = a3[22];
  uint64_t v65 = &a1[v63];
  uint64_t v66 = &a2[v63];
  uint64_t v67 = *((void *)v66 + 1);
  *(void *)uint64_t v65 = *(void *)v66;
  *((void *)v65 + 1) = v67;
  uint64_t v68 = &a1[v64];
  uint64_t v69 = &a2[v64];
  uint64_t v70 = *((void *)v69 + 1);
  *(void *)uint64_t v68 = *(void *)v69;
  *((void *)v68 + 1) = v70;
  uint64_t v71 = a3[23];
  uint64_t v72 = &a1[v71];
  uint64_t v73 = &a2[v71];
  uint64_t v74 = type metadata accessor for SnippetHeaderModel();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v73, 1, v74))
  {
    uint64_t v75 = sub_2694(&qword_2022D0);
    memcpy(v72, v73, *(void *)(*(void *)(v75 - 8) + 64));
  }
  else
  {
    uint64_t v76 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 16))(v72, v73, v76);
    uint64_t v77 = *(int *)(v74 + 20);
    uint64_t v78 = &v72[v77];
    uint64_t v79 = &v73[v77];
    uint64_t v80 = *((void *)v79 + 1);
    *(void *)uint64_t v78 = *(void *)v79;
    *((void *)v78 + 1) = v80;
    uint64_t v81 = *(int *)(v74 + 24);
    uint64_t v82 = &v72[v81];
    uint64_t v83 = &v73[v81];
    uint64_t v84 = *((void *)v83 + 1);
    *(void *)uint64_t v82 = *(void *)v83;
    *((void *)v82 + 1) = v84;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v72, 0, 1, v74);
  }
  return a1;
}

char *assignWithCopy for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)uint64_t v24 = v26;
  uint64_t v27 = a3[9];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = *(void *)v29;
  v28[8] = v29[8];
  *(void *)uint64_t v28 = v30;
  uint64_t v31 = a3[10];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = *(void *)v33;
  v32[8] = v33[8];
  *(void *)uint64_t v32 = v34;
  uint64_t v35 = a3[11];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = *((void *)v37 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[12];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  *(void *)uint64_t v39 = *(void *)v40;
  *((void *)v39 + 1) = *((void *)v40 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[13];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[14];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = *((void *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[15];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = *((void *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = a3[16];
  uint64_t v51 = &a1[v50];
  char v52 = &a2[v50];
  *(void *)uint64_t v51 = *(void *)v52;
  *((void *)v51 + 1) = *((void *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[17];
  uint64_t v54 = &a1[v53];
  uint64_t v55 = &a2[v53];
  *(void *)uint64_t v54 = *(void *)v55;
  *((void *)v54 + 1) = *((void *)v55 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[18];
  uint64_t v57 = &a1[v56];
  uint64_t v58 = &a2[v56];
  *(void *)uint64_t v57 = *(void *)v58;
  *((void *)v57 + 1) = *((void *)v58 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[19];
  char v60 = &a1[v59];
  uint64_t v61 = &a2[v59];
  *(void *)char v60 = *(void *)v61;
  *((void *)v60 + 1) = *((void *)v61 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v62 = a3[20];
  uint64_t v63 = &a1[v62];
  uint64_t v64 = &a2[v62];
  uint64_t v65 = sub_1AAB10();
  int v66 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v63, 1, v65);
  int v67 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v64, 1, v65);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v63, v64, v65);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v63, 0, 1, v65);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v68 = *(void *)(v65 - 8);
  if (v67)
  {
    (*(void (**)(char *, uint64_t))(v68 + 8))(v63, v65);
LABEL_12:
    uint64_t v69 = sub_2694(&qword_201E20);
    memcpy(v63, v64, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v68 + 24))(v63, v64, v65);
LABEL_13:
  uint64_t v70 = a3[21];
  uint64_t v71 = &a1[v70];
  uint64_t v72 = &a2[v70];
  *(void *)uint64_t v71 = *(void *)v72;
  *((void *)v71 + 1) = *((void *)v72 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v73 = a3[22];
  uint64_t v74 = &a1[v73];
  uint64_t v75 = &a2[v73];
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = *((void *)v75 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v76 = a3[23];
  uint64_t v77 = &a1[v76];
  uint64_t v78 = &a2[v76];
  uint64_t v79 = type metadata accessor for SnippetHeaderModel();
  int v80 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v77, 1, v79);
  int v81 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v78, 1, v79);
  if (!v80)
  {
    if (!v81)
    {
      uint64_t v91 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 24))(v77, v78, v91);
      uint64_t v92 = *(int *)(v79 + 20);
      uint64_t v93 = &v77[v92];
      os_log_type_t v94 = &v78[v92];
      *(void *)uint64_t v93 = *(void *)v94;
      *((void *)v93 + 1) = *((void *)v94 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v95 = *(int *)(v79 + 24);
      uint64_t v96 = &v77[v95];
      uint64_t v97 = &v78[v95];
      *(void *)uint64_t v96 = *(void *)v97;
      *((void *)v96 + 1) = *((void *)v97 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_BBAF8((uint64_t)v77, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v81)
  {
LABEL_18:
    uint64_t v89 = sub_2694(&qword_2022D0);
    memcpy(v77, v78, *(void *)(*(void *)(v89 - 8) + 64));
    return a1;
  }
  uint64_t v82 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 16))(v77, v78, v82);
  uint64_t v83 = *(int *)(v79 + 20);
  uint64_t v84 = &v77[v83];
  uint64_t v85 = &v78[v83];
  *(void *)uint64_t v84 = *(void *)v85;
  *((void *)v84 + 1) = *((void *)v85 + 1);
  uint64_t v86 = *(int *)(v79 + 24);
  uint64_t v87 = &v77[v86];
  uint64_t v88 = &v78[v86];
  *(void *)uint64_t v87 = *(void *)v88;
  *((void *)v87 + 1) = *((void *)v88 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v77, 0, 1, v79);
  return a1;
}

uint64_t sub_BBAF8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

char *initializeWithTake for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  v24[8] = v25[8];
  *(void *)uint64_t v24 = *(void *)v25;
  uint64_t v26 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v26] = *(_OWORD *)&a2[v26];
  uint64_t v27 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  uint64_t v28 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  *(_OWORD *)&a1[v28] = *(_OWORD *)&a2[v28];
  uint64_t v29 = a3[18];
  *(_OWORD *)&a1[a3[17]] = *(_OWORD *)&a2[a3[17]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  uint64_t v30 = a3[20];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *(_OWORD *)&a1[a3[19]] = *(_OWORD *)&a2[a3[19]];
  uint64_t v33 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v33))
  {
    uint64_t v34 = sub_2694(&qword_201E20);
    memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v31, 0, 1, v33);
  }
  uint64_t v35 = a3[22];
  *(_OWORD *)&a1[a3[21]] = *(_OWORD *)&a2[a3[21]];
  *(_OWORD *)&a1[v35] = *(_OWORD *)&a2[v35];
  uint64_t v36 = a3[23];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  uint64_t v39 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v38, 1, v39))
  {
    uint64_t v40 = sub_2694(&qword_2022D0);
    memcpy(v37, v38, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    uint64_t v41 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v37, v38, v41);
    *(_OWORD *)&v37[*(int *)(v39 + 20)] = *(_OWORD *)&v38[*(int *)(v39 + 20)];
    *(_OWORD *)&v37[*(int *)(v39 + 24)] = *(_OWORD *)&v38[*(int *)(v39 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v37, 0, 1, v39);
  }
  return a1;
}

char *assignWithTake for BloodPressureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  *(void *)uint64_t v15 = *(void *)v16;
  _WORD v15[8] = v16[8];
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = &a1[v18];
  uint64_t v22 = &a2[v18];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v25 = &a1[v23];
  uint64_t v26 = &a2[v23];
  uint64_t v27 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)uint64_t v25 = v27;
  uint64_t v28 = &a1[v24];
  uint64_t v29 = &a2[v24];
  v28[8] = v29[8];
  *(void *)uint64_t v28 = *(void *)v29;
  uint64_t v30 = a3[11];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v34 = *(void *)v32;
  uint64_t v33 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = v34;
  *((void *)v31 + 1) = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[12];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  uint64_t v39 = *(void *)v37;
  uint64_t v38 = *((void *)v37 + 1);
  *(void *)uint64_t v36 = v39;
  *((void *)v36 + 1) = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[13];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  uint64_t v44 = *(void *)v42;
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = v44;
  *((void *)v41 + 1) = v43;
  swift_bridgeObjectRelease();
  uint64_t v45 = a3[14];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  uint64_t v49 = *(void *)v47;
  uint64_t v48 = *((void *)v47 + 1);
  *(void *)uint64_t v46 = v49;
  *((void *)v46 + 1) = v48;
  swift_bridgeObjectRelease();
  uint64_t v50 = a3[15];
  uint64_t v51 = &a1[v50];
  char v52 = &a2[v50];
  uint64_t v54 = *(void *)v52;
  uint64_t v53 = *((void *)v52 + 1);
  *(void *)uint64_t v51 = v54;
  *((void *)v51 + 1) = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = a3[16];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  uint64_t v59 = *(void *)v57;
  uint64_t v58 = *((void *)v57 + 1);
  *(void *)uint64_t v56 = v59;
  *((void *)v56 + 1) = v58;
  swift_bridgeObjectRelease();
  uint64_t v60 = a3[17];
  uint64_t v61 = &a1[v60];
  uint64_t v62 = &a2[v60];
  uint64_t v64 = *(void *)v62;
  uint64_t v63 = *((void *)v62 + 1);
  *(void *)uint64_t v61 = v64;
  *((void *)v61 + 1) = v63;
  swift_bridgeObjectRelease();
  uint64_t v65 = a3[18];
  int v66 = &a1[v65];
  int v67 = &a2[v65];
  uint64_t v69 = *(void *)v67;
  uint64_t v68 = *((void *)v67 + 1);
  *(void *)int v66 = v69;
  *((void *)v66 + 1) = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = a3[19];
  uint64_t v71 = &a1[v70];
  uint64_t v72 = &a2[v70];
  uint64_t v74 = *(void *)v72;
  uint64_t v73 = *((void *)v72 + 1);
  *(void *)uint64_t v71 = v74;
  *((void *)v71 + 1) = v73;
  swift_bridgeObjectRelease();
  uint64_t v75 = a3[20];
  uint64_t v76 = &a1[v75];
  uint64_t v77 = &a2[v75];
  uint64_t v78 = sub_1AAB10();
  int v79 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v76, 1, v78);
  int v80 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v77, 1, v78);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 32))(v76, v77, v78);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v76, 0, 1, v78);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v81 = *(void *)(v78 - 8);
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v81 + 8))(v76, v78);
LABEL_12:
    uint64_t v82 = sub_2694(&qword_201E20);
    memcpy(v76, v77, *(void *)(*(void *)(v82 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v81 + 40))(v76, v77, v78);
LABEL_13:
  uint64_t v83 = a3[21];
  uint64_t v84 = &a1[v83];
  uint64_t v85 = &a2[v83];
  uint64_t v87 = *(void *)v85;
  uint64_t v86 = *((void *)v85 + 1);
  *(void *)uint64_t v84 = v87;
  *((void *)v84 + 1) = v86;
  swift_bridgeObjectRelease();
  uint64_t v88 = a3[22];
  uint64_t v89 = &a1[v88];
  uint64_t v90 = &a2[v88];
  uint64_t v92 = *(void *)v90;
  uint64_t v91 = *((void *)v90 + 1);
  *(void *)uint64_t v89 = v92;
  *((void *)v89 + 1) = v91;
  swift_bridgeObjectRelease();
  uint64_t v93 = a3[23];
  os_log_type_t v94 = &a1[v93];
  uint64_t v95 = &a2[v93];
  uint64_t v96 = type metadata accessor for SnippetHeaderModel();
  int v97 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v94, 1, v96);
  int v98 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v95, 1, v96);
  if (!v97)
  {
    if (!v98)
    {
      uint64_t v102 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v102 - 8) + 40))(v94, v95, v102);
      uint64_t v103 = *(int *)(v96 + 20);
      uint64_t v104 = &v94[v103];
      uint64_t v105 = &v95[v103];
      uint64_t v107 = *(void *)v105;
      uint64_t v106 = *((void *)v105 + 1);
      *(void *)uint64_t v104 = v107;
      *((void *)v104 + 1) = v106;
      swift_bridgeObjectRelease();
      uint64_t v108 = *(int *)(v96 + 24);
      os_log_type_t v109 = &v94[v108];
      uint64_t v110 = &v95[v108];
      uint64_t v112 = *(void *)v110;
      uint64_t v111 = *((void *)v110 + 1);
      *(void *)os_log_type_t v109 = v112;
      *((void *)v109 + 1) = v111;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_BBAF8((uint64_t)v94, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v98)
  {
LABEL_18:
    uint64_t v100 = sub_2694(&qword_2022D0);
    memcpy(v94, v95, *(void *)(*(void *)(v100 - 8) + 64));
    return a1;
  }
  uint64_t v99 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v99 - 8) + 32))(v94, v95, v99);
  *(_OWORD *)&v94[*(int *)(v96 + 20)] = *(_OWORD *)&v95[*(int *)(v96 + 20)];
  *(_OWORD *)&v94[*(int *)(v96 + 24)] = *(_OWORD *)&v95[*(int *)(v96 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v94, 0, 1, v96);
  return a1;
}

uint64_t getEnumTagSinglePayload for BloodPressureQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_BC46C);
}

uint64_t sub_BC46C(uint64_t a1, uint64_t a2, int *a3)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_13:
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
  if (a2 != 2147483646)
  {
    sub_2694(&qword_201E20);
    sub_52E0();
    if (*(_DWORD *)(v14 + 84) == a2)
    {
      uint64_t v8 = v13;
      uint64_t v15 = a3[20];
    }
    else
    {
      uint64_t v8 = sub_2694(&qword_2022D0);
      uint64_t v15 = a3[23];
    }
    uint64_t v9 = a1 + v15;
    goto LABEL_13;
  }
  unint64_t v10 = *(void *)(a1 + a3[11] + 8);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  int v11 = v10 - 1;
  if (v11 < 0) {
    int v11 = -1;
  }
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for BloodPressureQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_BC570);
}

void sub_BC570(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(void *)(a1 + a4[11] + 8) = a2;
      return;
    }
    sub_2694(&qword_201E20);
    sub_52E0();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[20];
    }
    else
    {
      uint64_t v10 = sub_2694(&qword_2022D0);
      uint64_t v14 = a4[23];
    }
    uint64_t v11 = a1 + v14;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, a2, a2, v10);
}

void sub_BC650()
{
  sub_BC7D8(319, &qword_202C60, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  if (v0 <= 0x3F)
  {
    sub_BC7D8(319, (unint64_t *)&unk_205800, (void (*)(uint64_t))&type metadata accessor for URL);
    if (v1 <= 0x3F)
    {
      sub_BC7D8(319, (unint64_t *)&qword_202C70, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_BC7D8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1ACFD0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for BloodPressureQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xED)
  {
    if (a2 + 19 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 19) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 20;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v5 = v6 - 20;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for BloodPressureQueryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *uint64_t result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xBC980);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 19;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BloodPressureQueryModel.CodingKeys()
{
  return &type metadata for BloodPressureQueryModel.CodingKeys;
}

unint64_t sub_BC9BC()
{
  unint64_t result = qword_205878;
  if (!qword_205878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205878);
  }
  return result;
}

unint64_t sub_BCA0C()
{
  unint64_t result = qword_205880;
  if (!qword_205880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205880);
  }
  return result;
}

unint64_t sub_BCA5C()
{
  unint64_t result = qword_205888;
  if (!qword_205888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205888);
  }
  return result;
}

uint64_t sub_BCAA8@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return sub_1AD1C0();
}

uint64_t sub_BCACC()
{
  return type metadata accessor for BloodPressureQueryModel();
}

uint64_t sub_BCAE8()
{
  return type metadata accessor for BloodPressureQueryModel();
}

uint64_t sub_BCB00()
{
  return type metadata accessor for BloodPressureQueryModel();
}

uint64_t sub_BCB18@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return sub_1AD1D0();
}

void sub_BCB38(uint64_t a1@<X8>)
{
  *(void *)(v1 + a1) = 0;
}

uint64_t sub_BCB50(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

void sub_BCB60(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  void *v2 = 0;
  v2[1] = 0;
}

uint64_t sub_BCB6C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_BCB84@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return sub_1AD1C0();
}

void sub_BCBA8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t sub_BCBC0()
{
  return v0;
}

uint64_t getMedScheduleDateTime(from:)(uint64_t result)
{
  if (!result) {
    return result;
  }
  if (sub_1AB9C0())
  {
    unint64_t v1 = sub_1AB990();
    swift_release();
    if (v1)
    {
      if (v1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v2 = sub_1AD170();
        swift_bridgeObjectRelease();
        if (v2) {
          goto LABEL_6;
        }
      }
      else if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
      {
LABEL_6:
        sub_4AA30(0, (v1 & 0xC000000000000001) == 0, v1);
        if ((v1 & 0xC000000000000001) != 0) {
          sub_1AD0A0();
        }
        else {
          swift_retain();
        }
        swift_bridgeObjectRelease();
        sub_1AB600();
        swift_release();
        goto LABEL_12;
      }
      swift_bridgeObjectRelease();
    }
  }
LABEL_12:
  if (!sub_1AB9C0() || (unint64_t v3 = sub_1AB990(), swift_release(), !v3))
  {
    swift_release();
    return 0;
  }
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1AD170();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  if (!*(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_16:
  sub_4AA30(0, (v3 & 0xC000000000000001) == 0, v3);
  if ((v3 & 0xC000000000000001) != 0) {
    sub_1AD0A0();
  }
  else {
    swift_retain();
  }
  swift_bridgeObjectRelease();
  sub_1AB600();
  swift_release();
  swift_release();
  return v5;
}

unint64_t medScheduleHasOneMed(from:)(unint64_t result)
{
  if (result)
  {
    unint64_t result = sub_1AB9A0();
    if (result)
    {
      if (result >> 62) {
        uint64_t v1 = sub_1AD170();
      }
      else {
        uint64_t v1 = *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8));
      }
      swift_bridgeObjectRelease();
      return v1 == 1;
    }
  }
  return result;
}

unint64_t getMedEntity(from:)(unint64_t result)
{
  if (!result) {
    return result;
  }
  unint64_t result = sub_1AB9A0();
  if (!result) {
    return result;
  }
  unint64_t v1 = result;
  if (result >> 62)
  {
    if (sub_1AD170()) {
      goto LABEL_5;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!*(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8))) {
    goto LABEL_9;
  }
LABEL_5:
  sub_4AA30(0, (v1 & 0xC000000000000001) == 0, v1);
  if ((v1 & 0xC000000000000001) != 0) {
    sub_1AD0A0();
  }
  else {
    swift_retain();
  }
  swift_bridgeObjectRelease();
  sub_1AB600();
  swift_release();
  return v2;
}

uint64_t getLocalizedScheduleName(from:)(uint64_t result)
{
  if (result) {
    return sub_1AB9B0();
  }
  return result;
}

uint64_t sub_BCF28(uint64_t a1, uint64_t a2, char a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = swift_allocObject();
  uint64_t v16 = *(void *)(a8 + 24);
  uint64_t v15 = *(void *)(a8 + 32);
  sub_BF0C8(a8, v16);
  sub_9F5AC();
  __chkstk_darwin(v17);
  sub_E548();
  uint64_t v20 = v19 - v18;
  (*(void (**)(uint64_t))(v21 + 16))(v19 - v18);
  uint64_t v22 = sub_BEFE8(a1, a2, a3, a4, a5, a6, a7, v20, v14, v16, v15);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a8);
  return v22;
}

uint64_t sub_BD048()
{
  sub_A364();
  v1[10] = v2;
  v1[11] = v0;
  sub_E510();
  v1[12] = v3;
  sub_2694(&qword_203A20);
  v1[13] = sub_A42C();
  uint64_t v4 = sub_1AB4B0();
  v1[14] = v4;
  sub_A19C(v4);
  v1[15] = v5;
  v1[16] = sub_A42C();
  uint64_t v6 = sub_1AB510();
  v1[17] = v6;
  sub_A19C(v6);
  v1[18] = v7;
  v1[19] = sub_A220();
  v1[20] = swift_task_alloc();
  uint64_t v8 = sub_1AB420();
  v1[21] = v8;
  sub_A19C(v8);
  v1[22] = v9;
  v1[23] = sub_A42C();
  uint64_t v10 = sub_1AB450();
  v1[24] = v10;
  sub_A19C(v10);
  v1[25] = v11;
  v1[26] = sub_A42C();
  uint64_t v12 = sub_1AB3F0();
  v1[27] = v12;
  sub_A19C(v12);
  v1[28] = v13;
  v1[29] = sub_A42C();
  uint64_t v14 = sub_1AC800();
  v1[30] = v14;
  sub_A19C(v14);
  v1[31] = v15;
  v1[32] = sub_A220();
  v1[33] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v16, v17, v18);
}

uint64_t sub_BD20C()
{
  uint64_t v78 = v0;
  uint64_t v73 = v0[10];
  uint64_t v1 = v0[33];
  uint64_t v3 = v0[30];
  uint64_t v2 = v0[31];
  uint64_t v4 = v0[28];
  uint64_t v5 = v0[29];
  uint64_t v6 = v0[27];
  uint64_t v7 = sub_1AC7C0();
  sub_A340();
  uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  uint64_t v72 = v7;
  v71(v1, v7, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v73, v6);
  uint64_t v8 = sub_1AC7F0();
  os_log_type_t v9 = sub_1ACF50();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v74 = v0[33];
    uint64_t v10 = v0[29];
    uint64_t v69 = v0[31];
    uint64_t v70 = v0[30];
    uint64_t v11 = v0[27];
    uint64_t v68 = v0[28];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v77 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = sub_1AD3E0();
    v0[8] = sub_4A278(v13, v14, &v77);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    sub_E468();
    uint64_t v15 = sub_1AD2C0();
    v0[9] = sub_4A278(v15, v16, &v77);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v10, v11);
    _os_log_impl(&def_342E4, v8, v9, "%s Parsing Input: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
    v17(v74, v70);
  }
  else
  {
    uint64_t v18 = v0[33];
    uint64_t v19 = v0[30];
    uint64_t v20 = v0[31];
    sub_7F3F4();
    v21();

    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v17(v18, v19);
  }
  uint64_t v23 = v0[22];
  uint64_t v22 = v0[23];
  uint64_t v24 = v0[21];
  sub_1AB3E0();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v23 + 88))(v22, v24) == enum case for Parse.uso(_:))
  {
    uint64_t v75 = v17;
    uint64_t v26 = v0[25];
    uint64_t v25 = v0[26];
    uint64_t v28 = v0[23];
    uint64_t v27 = v0[24];
    uint64_t v30 = v0[16];
    uint64_t v29 = v0[17];
    uint64_t v32 = v0[14];
    uint64_t v31 = v0[15];
    uint64_t v33 = v0[13];
    (*(void (**)(uint64_t, void))(v0[22] + 96))(v28, v0[21]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v25, v28, v27);
    sub_1AB440();
    uint64_t v34 = sub_1AB4A0();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    sub_C1028(v34, v33);
    swift_bridgeObjectRelease();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v33, 1, v29) != 1)
    {
      (*(void (**)(void, void, void))(v0[18] + 32))(v0[20], v0[13], v0[17]);
      if (sub_1AB4E0())
      {
        uint64_t v51 = v0[25];
        uint64_t v50 = v0[26];
        uint64_t v52 = v0[24];
        uint64_t v53 = v0[11];
        sub_7F3F4();
        v54();
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
        uint64_t v76 = *(void *)(v53 + 40);
        swift_bridgeObjectRetain();
        uint64_t v47 = 1;
        goto LABEL_11;
      }
      uint64_t v55 = v0[19];
      uint64_t v56 = v0[20];
      uint64_t v57 = v0[17];
      uint64_t v58 = v0[18];
      char v59 = sub_1AB4F0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v55, v56, v57);
      uint64_t v60 = v0[18];
      if (v59)
      {
        uint64_t v61 = *(void (**)(void))(v60 + 8);
        sub_BF118();
        v61();
        sub_BF118();
        v61();
        uint64_t v62 = sub_BF128();
        v63(v62);
      }
      else
      {
        char v64 = sub_1AB500();
        uint64_t v65 = *(void (**)(void))(v60 + 8);
        sub_BF118();
        v65();
        sub_BF118();
        v65();
        uint64_t v66 = sub_BF128();
        v67(v66);
        if ((v64 & 1) == 0)
        {
          uint64_t v76 = *(void *)(v0[11] + 40);
          swift_bridgeObjectRetain();
          uint64_t v47 = 2;
          goto LABEL_11;
        }
      }
      uint64_t v76 = *(void *)(v0[11] + 40);
      swift_bridgeObjectRetain();
      uint64_t v47 = 0;
      goto LABEL_11;
    }
    uint64_t v35 = v0[13];
    sub_7F3F4();
    v36();
    sub_BEF88(v35);
    uint64_t v37 = v72;
    uint64_t v38 = v71;
    uint64_t v17 = v75;
  }
  else
  {
    sub_7F3F4();
    v39();
    uint64_t v38 = v71;
    uint64_t v37 = v72;
  }
  uint64_t v40 = v0[32];
  uint64_t v41 = v0[30];
  sub_A340();
  v38(v40, v37, v41);
  uint64_t v42 = sub_1AC7F0();
  os_log_type_t v43 = sub_1ACF60();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl(&def_342E4, v42, v43, "Received unsupported type of input", v44, 2u);
    sub_A1F0();
  }
  uint64_t v45 = v0[32];
  uint64_t v46 = v0[30];

  v17(v45, v46);
  uint64_t v47 = 0;
  uint64_t v76 = 1;
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v48(v47, v76);
}

uint64_t sub_BD848()
{
  sub_E510();
  sub_1AB3F0();
  sub_9F5AC();
  __chkstk_darwin(v0);
  sub_E548();
  uint64_t v1 = sub_1AC800();
  sub_9F5AC();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_E548();
  uint64_t v7 = v6 - v5;
  sub_1AC7C0();
  sub_A340();
  uint64_t v22 = v1;
  sub_E524();
  v8();
  sub_E524();
  v9();
  uint64_t v10 = sub_1AC7F0();
  os_log_type_t v11 = sub_1ACF50();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = sub_1AD3E0();
    sub_4A278(v13, v14, &v23);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    sub_E468();
    uint64_t v15 = sub_1AD2C0();
    sub_4A278(v15, v16, &v23);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v17 = sub_7F404();
    v18(v17);
    _os_log_impl(&def_342E4, v10, v11, "%s Handling Input: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    uint64_t v19 = sub_7F404();
    v20(v19);
  }

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v22);
  return sub_1AB0B0();
}

uint64_t sub_BDB00()
{
  sub_A364();
  v1[13] = v2;
  v1[14] = v0;
  v1[12] = v3;
  sub_E510();
  v1[15] = v4;
  uint64_t v5 = sub_1AB0A0();
  v1[16] = v5;
  sub_A19C(v5);
  v1[17] = v6;
  v1[18] = sub_A220();
  v1[19] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v1[20] = v7;
  sub_A19C(v7);
  v1[21] = v8;
  v1[22] = sub_A42C();
  uint64_t v9 = sub_1AC800();
  v1[23] = v9;
  sub_A19C(v9);
  v1[24] = v10;
  v1[25] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_BDC04()
{
  uint64_t v23 = v0;
  uint64_t v1 = v0;
  uint64_t v4 = v0 + 24;
  uint64_t v3 = v0[24];
  uint64_t v2 = v4[1];
  uint64_t v5 = v1[23];
  uint64_t v6 = sub_1AC7D0();
  sub_A340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v5);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = sub_1AC7F0();
  os_log_type_t v8 = sub_1ACF50();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v19 = v1[24];
    uint64_t v20 = v1[23];
    uint64_t v21 = v1[25];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = sub_1AD3E0();
    v1[10] = sub_4A278(v11, v12, &v22);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v1[11] = v13;
    sub_1ACFE0();
    *uint64_t v10 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_342E4, v7, v8, "%s makeErrorResponse called with error: %@", (uint8_t *)v9, 0x16u);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
  }
  else
  {
    uint64_t v15 = v1[24];
    uint64_t v14 = v1[25];
    uint64_t v16 = v1[23];
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  sub_2E38((void *)(v1[14] + 88), *(void *)(v1[14] + 112));
  uint64_t v17 = (void *)swift_task_alloc();
  v1[26] = v17;
  *uint64_t v17 = v1;
  v17[1] = sub_BDEEC;
  return sub_9D67C();
}

uint64_t sub_BDEEC()
{
  sub_47634();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 216) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    return v6();
  }
  else
  {
    sub_A4F0();
    return _swift_task_switch(v8, v9, v10);
  }
}

uint64_t sub_BE020()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[14];
  sub_1AB090();
  sub_E524();
  v6();
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1AB390();
  id v7 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_E3FC(v5 + 224, (uint64_t)(v0 + 2));
  sub_2E38(v0 + 2, v0[5]);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[28] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_BE1AC;
  uint64_t v9 = sub_BF140();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v9, v10, v11, v12, v13);
}

uint64_t sub_BE1AC()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 232) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_BE28C()
{
  sub_47634();

  uint64_t v1 = sub_E570();
  v2(v1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v3();
}

uint64_t sub_BE334()
{
  sub_A364();
  v1[12] = v2;
  v1[13] = v0;
  sub_2694(&qword_202008);
  v1[14] = sub_A42C();
  sub_1AB0A0();
  v1[15] = sub_A42C();
  uint64_t v3 = sub_1AB3D0();
  v1[16] = v3;
  sub_A19C(v3);
  v1[17] = v4;
  v1[18] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_BE40C()
{
  sub_E588();
  uint64_t v1 = v0[13];
  sub_E3FC(v1 + 128, (uint64_t)(v0 + 2));
  uint64_t v2 = sub_2E38(v0 + 2, v0[5]);
  uint64_t v3 = *(unsigned __int8 *)(v1 + 32);
  uint64_t v4 = *v2;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_206F28 + dword_206F28);
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[19] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_BE4F4;
  uint64_t v6 = v0[13];
  return v8(v3, v4, v6);
}

uint64_t sub_BE4F4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 160) = v4;
  *(void *)(v2 + 168) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_BE5D8()
{
  sub_E588();
  uint64_t v1 = (void *)v0[20];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[13];
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2));
  sub_1AB080();
  sub_1AB370();
  sub_1AB3B0();
  sub_BEA18();
  uint64_t v4 = sub_1AB190();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v2, 0, 1, v4);
  sub_1AB3A0();
  sub_1AB390();
  sub_1AB3C0();
  id v5 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_E3FC(v3 + 224, (uint64_t)(v0 + 7));
  sub_2E38(v0 + 7, v0[10]);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[22] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_BE764;
  uint64_t v7 = sub_BF140();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v7, v8, v9, v10, v11);
}

uint64_t sub_BE764()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *id v5 = v4;
  *(void *)(v6 + 184) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_BE844()
{
  sub_47634();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v1();
}

uint64_t sub_BE8C4()
{
  sub_E588();
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_BE97C()
{
  sub_47634();

  uint64_t v1 = sub_E570();
  v2(v1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v3();
}

uint64_t sub_BEA18()
{
  uint64_t v0 = sub_1AB580();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_E548();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_1AB4D0();
  sub_9F5AC();
  uint64_t v7 = v6;
  uint64_t v9 = __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - v10;
  sub_1AB4C0();
  sub_1AB570();
  sub_E524();
  v12();
  sub_1AB550();
  sub_1AB180();
  sub_2694(&qword_202000);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1ADCF0;
  sub_E524();
  v13();
  sub_1AB170();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v5);
}

uint64_t sub_BEC20()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_E4B8(v0 + 48);
  swift_release();
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 224);
  return v0;
}

uint64_t sub_BEC68()
{
  sub_BEC20();

  return _swift_deallocClassInstance(v0, 264, 7);
}

uint64_t type metadata accessor for LogMedAsScheduledConfirmationStrategy()
{
  return self;
}

uint64_t sub_BECC4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  void *v2 = v1;
  v2[1] = sub_BED5C;
  return sub_BD048();
}

uint64_t sub_BED5C()
{
  sub_E588();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_A1B4();
  uint64_t v7 = v6;
  sub_E53C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_E53C();
  *uint64_t v10 = v9;
  swift_task_dealloc();
  if (!v0)
  {
    uint64_t v11 = *(void **)(v7 + 16);
    *uint64_t v11 = v5;
    v11[1] = v3;
  }
  uint64_t v12 = *(uint64_t (**)(void))(v9 + 8);
  return v12();
}

uint64_t sub_BEE48()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_E50C;
  return sub_BE334();
}

uint64_t sub_BEEE0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_E50C;
  return sub_BDB00();
}

uint64_t sub_BEF88(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_203A20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_BEFE8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v22 = a10;
  uint64_t v23 = a11;
  uint64_t v19 = sub_B5B0((uint64_t *)&v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(v19, a8, a10);
  *(void *)(a9 + 16) = a1;
  *(void *)(a9 + 24) = a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a9 + 32) = a3;
  *(void *)(a9 + 40) = a4;
  memcpy((void *)(a9 + 48), a5, 0xA0uLL);
  *(void *)(a9 + 208) = a6;
  *(void *)(a9 + 216) = a7;
  sub_24D80(&v21, a9 + 224);
  return a9;
}

uint64_t sub_BF0C8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_BF128()
{
  return v0;
}

uint64_t sub_BF140()
{
  return *(void *)(v0 + 96);
}

ValueMetadata *type metadata accessor for RegionNotSupportedFlow()
{
  return &type metadata for RegionNotSupportedFlow;
}

uint64_t sub_BF164()
{
  sub_B6A64();

  return sub_1AAF80();
}

uint64_t sub_BF1B8()
{
  sub_A364();
  v1[53] = v2;
  v1[54] = v0;
  uint64_t v3 = sub_1AC800();
  v1[55] = v3;
  sub_A19C(v3);
  v1[56] = v4;
  v1[57] = sub_A42C();
  v1[58] = type metadata accessor for GenericButtonModel();
  v1[59] = sub_A42C();
  uint64_t v5 = sub_1AAB10();
  v1[60] = v5;
  sub_A19C(v5);
  v1[61] = v6;
  v1[62] = sub_A42C();
  sub_2694(&qword_201E20);
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  uint64_t v7 = sub_1AB0A0();
  v1[65] = v7;
  sub_A19C(v7);
  v1[66] = v8;
  v1[67] = swift_task_alloc();
  v1[68] = swift_task_alloc();
  uint64_t v9 = sub_1AB3D0();
  v1[69] = v9;
  sub_A19C(v9);
  v1[70] = v10;
  v1[71] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_BF354()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 576) = v1;
  void *v1 = v0;
  v1[1] = sub_BF3E4;
  return sub_4F9F4();
}

uint64_t sub_BF3E4()
{
  sub_A364();
  sub_A1B4();
  *(void *)(v2 + 584) = v1;
  *(void *)(v2 + 592) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_BF4D0()
{
  uint64_t v1 = (void *)v0[73];
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[67];
  uint64_t v4 = v0[66];
  uint64_t v5 = v0[65];
  uint64_t v6 = v0[63];
  uint64_t v7 = v0[64];
  uint64_t v8 = v0[60];
  sub_1AB090();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  sub_1AB3C0();
  id v9 = [v1 catId];
  sub_1ACDD0();

  sub_1AB380();
  sub_1AAB00();
  sub_45DC8(v7, v6);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v8) == 1)
  {
    uint64_t v10 = (void *)v0[73];
    uint64_t v11 = (void *)v0[54];
    sub_55D28(v0[63]);
    uint64_t v12 = v11[33];
    uint64_t v13 = v11[34];
    sub_2E38(v11 + 30, v12);
    sub_2694(&qword_202588);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1AF530;
    *(void *)(v14 + 32) = v10;
    uint64_t v38 = v14;
    sub_1ACEF0();
    v0[77] = v38;
    id v15 = v10;
    uint64_t v16 = (void *)swift_task_alloc();
    v0[78] = (uint64_t)v16;
    *uint64_t v16 = v0;
    v16[1] = sub_BFB9C;
    uint64_t v17 = sub_47228();
    return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v17, v18, v19, v12, v13);
  }
  else
  {
    uint64_t v37 = (void *)v0[73];
    uint64_t v20 = v0[62];
    uint64_t v21 = v0[60];
    uint64_t v22 = v0[61];
    uint64_t v24 = v0[58];
    uint64_t v23 = (uint64_t *)v0[59];
    uint64_t v25 = (void *)v0[54];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v20, v0[63], v21);
    uint64_t v26 = sub_C0D54(0xD000000000000012, 0x80000000001BBA80, 0xD000000000000010, (void *)0x80000000001BBAA0);
    uint64_t v28 = v27;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))((char *)v23 + *(int *)(v24 + 20), v20, v21);
    uint64_t *v23 = v26;
    v23[1] = v28;
    uint64_t v29 = v25[33];
    uint64_t v30 = v25[34];
    sub_2E38(v25 + 30, v29);
    v0[45] = type metadata accessor for WellnessSnippets();
    v0[46] = sub_24F2C();
    uint64_t v31 = sub_B5B0(v0 + 42);
    sub_24F7C((uint64_t)v23, (uint64_t)v31);
    swift_storeEnumTagMultiPayload();
    sub_2694(&qword_202588);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_1AF530;
    *(void *)(v32 + 32) = v37;
    uint64_t v39 = v32;
    sub_1ACEF0();
    v0[75] = v39;
    id v33 = v37;
    uint64_t v34 = (void *)swift_task_alloc();
    v0[76] = (uint64_t)v34;
    *uint64_t v34 = v0;
    v34[1] = sub_BF8E0;
    uint64_t v35 = v0[71];
    return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v0 + 32, v0 + 42, v39, v35, v29, v30);
  }
}

uint64_t sub_BF8E0()
{
  sub_A364();
  sub_A1B4();
  uint64_t v2 = v1 + 336;
  uint64_t v3 = *v0;
  sub_A304();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_BF9D0()
{
  uint64_t v1 = *(void **)(v0 + 584);
  uint64_t v2 = *(void *)(v0 + 560);
  uint64_t v11 = *(void *)(v0 + 552);
  uint64_t v12 = *(void *)(v0 + 568);
  uint64_t v3 = *(void *)(v0 + 488);
  uint64_t v9 = *(void *)(v0 + 496);
  uint64_t v10 = *(void *)(v0 + 512);
  uint64_t v7 = *(void *)(v0 + 472);
  uint64_t v8 = *(void *)(v0 + 480);
  sub_E3FC(v0 + 256, v0 + 216);
  uint64_t v4 = swift_allocObject();
  sub_24D80((long long *)(v0 + 216), v4 + 16);
  sub_1AB350();
  sub_1AAE40();
  swift_allocObject();
  *(void *)(v0 + 416) = sub_1AAE30();
  sub_1AB120();

  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 256);
  sub_24FE0(v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v9, v8);
  sub_55D28(v10);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v12, v11);
  sub_C02C8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v5();
}

uint64_t sub_BFB9C()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  void *v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_BFC80()
{
  uint64_t v1 = *(void **)(v0 + 584);
  uint64_t v2 = *(void *)(v0 + 560);
  uint64_t v7 = *(void *)(v0 + 552);
  uint64_t v8 = *(void *)(v0 + 568);
  uint64_t v3 = *(void *)(v0 + 512);
  sub_E3FC(v0 + 176, v0 + 296);
  uint64_t v4 = swift_allocObject();
  sub_24D80((long long *)(v0 + 296), v4 + 16);
  sub_1AB350();
  sub_1AAE40();
  swift_allocObject();
  *(void *)(v0 + 400) = sub_1AAE30();
  sub_1AB120();

  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 176);
  sub_55D28(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v8, v7);
  sub_C02C8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v5();
}

uint64_t sub_BFE1C()
{
  uint64_t v2 = v0[56];
  uint64_t v1 = v0[57];
  uint64_t v3 = v0[55];
  uint64_t v4 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF60();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[51] = v9;
    sub_1ACFE0();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_342E4, v5, v6, "Couldn't execute wellness#regionNotSupported pattern. Error: %@", v7, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = v0[54];
  (*(void (**)(void, void))(v0[56] + 8))(v0[57], v0[55]);
  sub_9B48(v10 + 80, (uint64_t)(v0 + 2));
  sub_9BA4();
  sub_1AB120();
  sub_9BF0((uint64_t)(v0 + 2));
  sub_C02C8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v11();
}

uint64_t sub_C00A4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_C02C0, 0, 0);
}

uint64_t sub_C00C8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_24C20;
  return sub_BF1B8();
}

uint64_t sub_C0160()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_C0198()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_24C20;
  uint64_t v2 = sub_47228();
  return sub_24B08(v2, v3);
}

uint64_t sub_C022C()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_7F384;
  uint64_t v2 = sub_47228();
  return sub_C00A4(v2, v3);
}

uint64_t sub_C02C8()
{
  return swift_task_dealloc();
}

unsigned char *storeEnumTagSinglePayload for WellnessIntentTemporalDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xC03C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WellnessIntentTemporalDirection()
{
  return &type metadata for WellnessIntentTemporalDirection;
}

unint64_t sub_C03FC()
{
  unint64_t result = qword_205AC0;
  if (!qword_205AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205AC0);
  }
  return result;
}

double sub_C0448(uint64_t a1, uint64_t a2, unsigned __int8 a3, double a4)
{
  uint64_t v8 = sub_1AC800();
  sub_52C4();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1AD2D0();
  sub_52C4();
  uint64_t v16 = v15;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v58 - v21;
  __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v58 - v24;
  if (a2)
  {
    uint64_t v26 = sub_C0A58(a1, a2, a3);
    double v27 = __exp10((double)v26);
    int v28 = a3;
    if ((a3 - 89 > 0x3E || (sub_C0D28(), v29))
      && ((v28 - 155) > 0x2B || (sub_C0D0C(), v29))
      && v28
      && v28 != 4)
    {
      int v31 = enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:);
      sub_C0CFC();
      v47();
    }
    else
    {
      sub_C0CFC();
      v30();
      int v31 = enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:);
    }
    double v32 = v27 * a4;
    double v61 = v32;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v25, v14);
    int v33 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v22, v14);
    if (v33 == v31)
    {
      double v34 = round(v32);
    }
    else if (v33 == enum case for FloatingPointRoundingRule.toNearestOrEven(_:))
    {
      double v34 = rint(v32);
    }
    else if (v33 == enum case for FloatingPointRoundingRule.up(_:))
    {
      double v34 = ceil(v32);
    }
    else if (v33 == enum case for FloatingPointRoundingRule.down(_:))
    {
      double v34 = floor(v32);
    }
    else
    {
      if (v33 != enum case for FloatingPointRoundingRule.towardZero(_:))
      {
        if (v33 == enum case for FloatingPointRoundingRule.awayFromZero(_:))
        {
          char v50 = sub_1ACF40();
          sub_C0CEC();
          v51();
          double v52 = ceil(v32);
          double v53 = floor(v32);
          if (v50) {
            double v34 = v53;
          }
          else {
            double v34 = v52;
          }
        }
        else
        {
          sub_1ACF30();
          uint64_t v56 = *(void (**)(void))(v16 + 8);
          sub_C0CEC();
          v56();
          sub_C0CEC();
          v56();
          double v34 = v61;
        }
        return v34 / v27;
      }
      double v34 = trunc(v32);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v25, v14);
    return v34 / v27;
  }
  uint64_t v59 = v23;
  uint64_t v35 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v35, v8);
  uint64_t v36 = sub_1AC7F0();
  os_log_type_t v37 = sub_1ACF60();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl(&def_342E4, v36, v37, "Missing unit for decimalPlaces lookup. Rounding to 0 places.", v38, 2u);
    swift_slowDealloc();
  }

  uint64_t v40 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v39 = v10 + 8;
  v40(v13, v8);
  int v41 = a3;
  if ((a3 - 89 > 0x3E || (sub_C0D28(), v29))
    && ((v41 - 155) > 0x2B || (sub_C0D0C(), v29))
    && v41
    && v41 != 4)
  {
    int v43 = enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:);
    sub_C0D40();
    sub_C0CFC();
    v48();
  }
  else
  {
    sub_C0D40();
    sub_C0CFC();
    v42();
    int v43 = enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:);
  }
  uint64_t v44 = v59;
  double v60 = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v59, v39, v14);
  int v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 88))(v44, v14);
  if (v45 == v43)
  {
    double v46 = round(a4);
LABEL_44:
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v39, v14);
    return v46;
  }
  if (v45 == enum case for FloatingPointRoundingRule.toNearestOrEven(_:))
  {
    double v46 = rint(a4);
    goto LABEL_44;
  }
  if (v45 == enum case for FloatingPointRoundingRule.up(_:))
  {
    double v46 = ceil(a4);
    goto LABEL_44;
  }
  if (v45 == enum case for FloatingPointRoundingRule.down(_:))
  {
    double v46 = floor(a4);
    goto LABEL_44;
  }
  if (v45 == enum case for FloatingPointRoundingRule.towardZero(_:))
  {
    double v46 = trunc(a4);
    goto LABEL_44;
  }
  if (v45 == enum case for FloatingPointRoundingRule.awayFromZero(_:))
  {
    char v54 = sub_1ACF40();
    sub_C0CEC();
    v55();
    if (v54) {
      return floor(a4);
    }
    else {
      return ceil(a4);
    }
  }
  else
  {
    sub_1ACF30();
    uint64_t v57 = *(void (**)(void))(v16 + 8);
    sub_C0CEC();
    v57();
    sub_C0CEC();
    v57();
    return v60;
  }
}

void sub_C0A2C()
{
  qword_2146C8 = 0x2FA081E26C6F6D6DLL;
  unk_2146D0 = 0xAC0000004CA081E2;
}

uint64_t sub_C0A58(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 - 147 <= 0x1B)
  {
    if (((1 << (a3 + 109)) & 0x8800019) != 0) {
      return 1;
    }
    if (a3 == 162)
    {
      BOOL v6 = a1 == 109 && a2 == 0xE100000000000000;
      if (!v6 && (sub_C0CD0() & 1) == 0)
      {
        BOOL v7 = a1 == 28003 && a2 == 0xE200000000000000;
        if (!v7 && (sub_C0CD0() & 1) == 0)
        {
          if (a1 == 29798 && a2 == 0xE200000000000000) {
            return 1;
          }
          return (sub_C0CD0() & 1) != 0;
        }
      }
      return 2;
    }
  }
  uint64_t result = 2;
  if (a3 != 107 && a3 != 96)
  {
    if (a3 == 103)
    {
      if (qword_201C10 != -1) {
        swift_once();
      }
      BOOL v12 = qword_2146C8 == a1 && unk_2146D0 == a2;
      if (v12 || (sub_C0CD0() & 1) != 0) {
        return 2;
      }
      if (a1 == 0x4C642F676DLL && a2 == 0xE500000000000000) {
        return 0;
      }
LABEL_51:
      sub_C0CD0();
      return 0;
    }
    if (a3 != 105)
    {
      if (a3 != 89) {
        return 0;
      }
      BOOL v9 = a1 == 7102787 && a2 == 0xE300000000000000;
      if (v9 || (sub_C0CD0() & 1) != 0) {
        return 1;
      }
      BOOL v10 = a1 == 1818321771 && a2 == 0xE400000000000000;
      if (v10 || (sub_C0CD0() & 1) != 0) {
        return 1;
      }
      if (a1 == 19051 && a2 == 0xE200000000000000) {
        return 0;
      }
      goto LABEL_51;
    }
    if (a1 == 26475 && a2 == 0xE200000000000000) {
      return 2;
    }
    char v15 = sub_C0CD0();
    BOOL v17 = a1 == 29811 && a2 == 0xE200000000000000;
    uint64_t result = 2;
    if ((v15 & 1) == 0 && !v17)
    {
      if ((sub_C0CD0() & 1) == 0)
      {
        if (a1 == 7561836 && a2 == 0xE300000000000000) {
          return 1;
        }
        return (sub_C0CD0() & 1) != 0;
      }
      return 2;
    }
  }
  return result;
}

uint64_t sub_C0CD0()
{
  return sub_1AD2F0();
}

uint64_t sub_C0D40()
{
  return v0;
}

uint64_t sub_C0D54(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_1AB0E0();
  sub_52C4();
  uint64_t v33 = v6;
  uint64_t v34 = v5;
  __chkstk_darwin(v5);
  sub_E548();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = sub_2694(&qword_205AC8);
  uint64_t v11 = sub_53D4(v10);
  __chkstk_darwin(v11);
  sub_E548();
  uint64_t v14 = v13 - v12;
  sub_2694(&qword_2030F8);
  sub_A5C0();
  __chkstk_darwin(v15);
  sub_E548();
  uint64_t v18 = v17 - v16;
  sub_1AB1E0();
  sub_52C4();
  __chkstk_darwin(v19);
  sub_E548();
  sub_26CE0();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = &qword_2030F8;
    uint64_t v21 = v18;
  }
  else
  {
    sub_5572C();
    v22();
    uint64_t v23 = sub_1AB1D0();
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_C232C(v23, a3, a4);
    sub_C1040(v24, (uint64_t (*)(void))&type metadata accessor for TemplatingSection, v14);
    swift_bridgeObjectRelease();
    uint64_t v25 = sub_1AB210();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v14, 1, v25) != 1)
    {
      sub_1AB200();
      sub_A5C0();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v14, v25);
      uint64_t v28 = sub_1AB0D0();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v9, v34);
      uint64_t v30 = sub_C2694();
      v31(v30);
      return v28;
    }
    uint64_t v26 = sub_C2694();
    v27(v26);
    uint64_t v20 = &qword_205AC8;
    uint64_t v21 = v14;
  }
  sub_A068(v21, v20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_C1010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_C1040(a1, (uint64_t (*)(void))&type metadata accessor for UsoIdentifier, a2);
}

uint64_t sub_C1028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_C1040(a1, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct, a2);
}

uint64_t sub_C1040@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = a2(0);
  if (v5)
  {
    sub_A5C0();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(a3, a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
  }

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a3, v8, 1, v6);
}

id sub_C10E8(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_3;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1AD170();
  swift_bridgeObjectRelease();
  if (!v3) {
    return 0;
  }
LABEL_3:
  sub_4AA30(0, (a1 & 0xC000000000000001) == 0, a1);
  if ((a1 & 0xC000000000000001) != 0) {
    return (id)sub_1AD0A0();
  }
  else {
    return *(id *)(a1 + 32);
  }
}

uint64_t sub_C1180()
{
  sub_A364();
  *(unsigned char *)(v0 + 528) = v20;
  *(void *)(v0 + 336) = v1;
  *(void *)(v0 + 344) = v2;
  *(void *)(v0 + 320) = v3;
  *(void *)(v0 + 328) = v4;
  *(void *)(v0 + 304) = v5;
  *(void *)(v0 + 312) = v6;
  uint64_t v7 = sub_1AC800();
  *(void *)(v0 + 352) = v7;
  sub_A19C(v7);
  *(void *)(v0 + 360) = v8;
  *(void *)(v0 + 368) = sub_A220();
  *(void *)(v0 + 376) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GenericButtonModel();
  *(void *)(v0 + 384) = v9;
  sub_53D4(v9);
  *(void *)(v0 + 392) = swift_task_alloc();
  uint64_t v10 = sub_1AB3D0();
  *(void *)(v0 + 400) = v10;
  sub_A19C(v10);
  *(void *)(v0 + 408) = v11;
  *(void *)(v0 + 416) = sub_A220();
  *(void *)(v0 + 424) = swift_task_alloc();
  uint64_t v12 = sub_2694(&qword_201E20);
  sub_53D4(v12);
  *(void *)(v0 + 432) = sub_A220();
  *(void *)(v0 + 440) = swift_task_alloc();
  uint64_t v13 = sub_1AAB10();
  *(void *)(v0 + 448) = v13;
  sub_A19C(v13);
  *(void *)(v0 + 456) = v14;
  *(void *)(v0 + 464) = sub_A220();
  *(void *)(v0 + 472) = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v15, v16, v17);
}

uint64_t sub_C1300()
{
  uint64_t v1 = *(void **)(v0 + 328);
  sub_2E38(v1, v1[3]);
  uint64_t v2 = sub_250B4();
  v3(v2);
  sub_2E38((void *)(v0 + 16), *(void *)(v0 + 40));
  char v4 = sub_1AB040();
  sub_E3FC((uint64_t)v1, v0 + 56);
  if (v4)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
LABEL_4:
    uint64_t v8 = *(void *)(v0 + 440);
    uint64_t v9 = *(void *)(v0 + 448);
    uint64_t v10 = sub_C0D54(0x616548206E65704FLL, 0xEB0000000068746CLL, 0x6C6165486E65706FLL, (void *)0xED00007070416874);
    uint64_t v12 = v11;
    sub_1AAB00();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, 1, v9) == 1)
    {
      uint64_t v13 = *(void *)(v0 + 440);
      swift_bridgeObjectRelease();
      sub_A068(v13, &qword_201E20);
      sub_1AC7D0();
      sub_C26A8();
      uint64_t v14 = sub_C2660();
      v15(v14);
      uint64_t v16 = sub_1AC7F0();
      os_log_type_t v17 = sub_1ACF50();
      if (os_log_type_enabled(v16, v17))
      {
        *(_WORD *)swift_slowAlloc() = 0;
        sub_A7FC(&def_342E4, v18, v19, "Couldn't create URL for phoneMedications, returning GenericErrorFlow");
        swift_slowDealloc();
      }
      uint64_t v20 = *(void *)(v0 + 376);
      uint64_t v21 = *(void *)(v0 + 352);
      uint64_t v22 = *(void *)(v0 + 360);
      uint64_t v23 = *(void *)(v0 + 304);

      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
      goto LABEL_8;
    }
    uint64_t v95 = v10;
    uint64_t v26 = *(void *)(v0 + 448);
    uint64_t v27 = *(void *)(v0 + 456);
    uint64_t v28 = *(void *)(v0 + 424);
    uint64_t v29 = *(void *)(v0 + 400);
    uint64_t v30 = *(void *)(v0 + 408);
    int v31 = *(uint64_t **)(v0 + 392);
    uint64_t v92 = *(void *)(v0 + 472);
    uint64_t v93 = *(void *)(v0 + 384);
    double v32 = *(void **)(v0 + 336);
    uint64_t v94 = v12;
    uint64_t v34 = *(void **)(v0 + 312);
    uint64_t v33 = *(void *)(v0 + 320);
    sub_5572C();
    v35();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v28, v33, v29);
    id v36 = [v34 catId];
    sub_1ACDD0();

    sub_1AB380();
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))((char *)v31 + *(int *)(v93 + 20), v92, v26);
    *int v31 = v95;
    v31[1] = v94;
    sub_2E38(v32, v32[3]);
    *(void *)(v0 + 160) = type metadata accessor for WellnessSnippets();
    *(void *)(v0 + 168) = sub_24F2C();
    os_log_type_t v37 = sub_B5B0((uint64_t *)(v0 + 136));
    sub_24F7C((uint64_t)v31, (uint64_t)v37);
    swift_storeEnumTagMultiPayload();
    sub_2694(&qword_202588);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_1AF530;
    *(void *)(v38 + 32) = v34;
    uint64_t v96 = v38;
    sub_1ACEF0();
    *(void *)(v0 + 480) = v96;
    id v39 = v34;
    uint64_t v40 = (void *)swift_task_alloc();
    *(void *)(v0 + 488) = v40;
    *uint64_t v40 = v0;
    v40[1] = sub_C1C14;
LABEL_12:
    sub_292D4();
    return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v41, v42, v43, v44, v45, v46);
  }
  sub_2E38((void *)(v0 + 56), *(void *)(v0 + 80));
  uint64_t v5 = sub_250B4();
  v6(v5);
  sub_2E38((void *)(v0 + 96), *(void *)(v0 + 120));
  char v7 = sub_1AB030();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 96);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  if (v7) {
    goto LABEL_4;
  }
  int v48 = *(unsigned __int8 *)(v0 + 528);
  (*(void (**)(void, void, void))(*(void *)(v0 + 408) + 16))(*(void *)(v0 + 416), *(void *)(v0 + 320), *(void *)(v0 + 400));
  if (v48 == 1)
  {
    uint64_t v49 = *(void *)(v0 + 448);
    uint64_t v50 = *(void *)(v0 + 432);
    uint64_t v51 = sub_C0D54(0xD000000000000010, 0x80000000001BB6A0, 0xD000000000000012, (void *)0x80000000001BB6C0);
    uint64_t v53 = v52;
    sub_1AAB00();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v50, 1, v49) == 1)
    {
      uint64_t v54 = *(void *)(v0 + 432);
      swift_bridgeObjectRelease();
      sub_A068(v54, &qword_201E20);
      sub_1AC7D0();
      sub_C26A8();
      uint64_t v55 = sub_C2660();
      v56(v55);
      uint64_t v57 = sub_1AC7F0();
      os_log_type_t v58 = sub_1ACF50();
      if (os_log_type_enabled(v57, v58))
      {
        *(_WORD *)swift_slowAlloc() = 0;
        sub_A7FC(&def_342E4, v59, v60, "Couldn't create URL for watchMedications, returning GenericErrorFlow");
        swift_slowDealloc();
      }
      uint64_t v23 = *(void *)(v0 + 304);

      uint64_t v61 = sub_C267C();
      v62(v61);
      uint64_t v63 = sub_BF128();
      v64(v63);
LABEL_8:
      *(void *)(v23 + 32) = 0;
      *(_OWORD *)uint64_t v23 = 0u;
      *(_OWORD *)(v23 + 16) = 0u;
      sub_C263C();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_E564();
      sub_292D4();
      __asm { BRAA            X1, X16 }
    }
    uint64_t v77 = *(void *)(v0 + 456);
    uint64_t v78 = *(void *)(v0 + 464);
    uint64_t v79 = *(void *)(v0 + 448);
    uint64_t v80 = v51;
    uint64_t v81 = *(void *)(v0 + 384);
    uint64_t v82 = *(uint64_t **)(v0 + 392);
    uint64_t v83 = *(void **)(v0 + 336);
    uint64_t v84 = *(void **)(v0 + 312);
    sub_5572C();
    v85();
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))((char *)v82 + *(int *)(v81 + 20), v78, v79);
    *uint64_t v82 = v80;
    v82[1] = v53;
    id v86 = [v84 catId];
    sub_1ACDD0();

    sub_1AB380();
    sub_2E38(v83, v83[3]);
    *(void *)(v0 + 200) = type metadata accessor for WellnessSnippets();
    *(void *)(v0 + 208) = sub_24F2C();
    uint64_t v87 = sub_B5B0((uint64_t *)(v0 + 176));
    sub_24F7C((uint64_t)v82, (uint64_t)v87);
    swift_storeEnumTagMultiPayload();
    sub_2694(&qword_202588);
    uint64_t v88 = swift_allocObject();
    *(_OWORD *)(v88 + 16) = xmmword_1AF530;
    *(void *)(v88 + 32) = v84;
    uint64_t v98 = v88;
    sub_1ACEF0();
    *(void *)(v0 + 496) = v98;
    id v89 = v84;
    uint64_t v90 = (void *)swift_task_alloc();
    *(void *)(v0 + 504) = v90;
    *uint64_t v90 = v0;
    v90[1] = sub_C1DF0;
    goto LABEL_12;
  }
  uint64_t v65 = *(void **)(v0 + 336);
  uint64_t v66 = *(void **)(v0 + 312);
  id v67 = [v66 catId];
  sub_1ACDD0();

  sub_1AB380();
  sub_2E38(v65, v65[3]);
  sub_2694(&qword_202588);
  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = xmmword_1AF530;
  *(void *)(v68 + 32) = v66;
  uint64_t v97 = v68;
  sub_1ACEF0();
  *(void *)(v0 + 512) = v97;
  id v69 = v66;
  uint64_t v70 = (void *)swift_task_alloc();
  *(void *)(v0 + 520) = v70;
  *uint64_t v70 = v0;
  v70[1] = sub_C1FD4;
  sub_292D4();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v71, v72, v73, v74, v75);
}

uint64_t sub_C1C14()
{
  sub_A364();
  sub_A1B4();
  uint64_t v2 = v1 + 136;
  uint64_t v3 = *v0;
  sub_A304();
  *char v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_C1D04()
{
  uint64_t v1 = *(void *)(v0 + 304);
  sub_24FE0(*(void *)(v0 + 392));
  uint64_t v2 = sub_C267C();
  v3(v2);
  uint64_t v4 = sub_BF128();
  v5(v4);
  sub_24D80((long long *)(v0 + 216), v1);
  sub_C263C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v6();
}

uint64_t sub_C1DF0()
{
  sub_A364();
  sub_A1B4();
  uint64_t v2 = v1 + 176;
  uint64_t v3 = *v0;
  sub_A304();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_C1EE0()
{
  uint64_t v2 = v0[57];
  uint64_t v1 = v0[58];
  uint64_t v3 = v0[56];
  uint64_t v5 = v0[51];
  uint64_t v4 = v0[52];
  uint64_t v6 = v0[50];
  sub_24FE0(v0[49]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_C263C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v7();
}

uint64_t sub_C1FD4()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  void *v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_C20B8()
{
  (*(void (**)(void, void))(v0[51] + 8))(v0[52], v0[50]);
  sub_C263C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v1();
}

uint64_t sub_C2180(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201E10);
  uint64_t v3 = sub_53D4(v2);
  __chkstk_darwin(v3);
  sub_E548();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = sub_1AABD0();
  sub_52C4();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_E548();
  uint64_t v13 = v12 - v11;
  sub_C25D4(a1, v6);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v7) == 1)
  {
    sub_A068(v6, &qword_201E10);
    return 0;
  }
  else
  {
    sub_5572C();
    v15();
    id v16 = [objc_allocWithZone((Class)NSDateFormatter) init];
    [v16 setTimeStyle:1];
    Class isa = sub_1AAB60().super.isa;
    id v18 = [v16 stringFromDate:isa];

    uint64_t v14 = sub_1ACDD0();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v7);
  }
  return v14;
}

uint64_t sub_C232C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v33 = a2;
  uint64_t v27 = sub_1AB210();
  uint64_t v6 = __chkstk_darwin(v27);
  double v32 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v23 - v10;
  uint64_t v12 = &_swiftEmptyArrayStorage;
  uint64_t v34 = &_swiftEmptyArrayStorage;
  uint64_t v31 = *(void *)(a1 + 16);
  if (v31)
  {
    unint64_t v13 = 0;
    v23[1] = v3;
    uint64_t v24 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
    uint64_t v29 = v9 + 16;
    uint64_t v30 = (uint64_t (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v25 = a3;
    uint64_t v26 = a1;
    uint64_t v14 = v27;
    uint64_t v28 = v9;
    while (v13 < *(void *)(a1 + 16))
    {
      unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      uint64_t v16 = *(void *)(v9 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, a1 + v15 + v16 * v13, v14);
      sub_1AB1F0();
      v35._countAndFlagsBits = v33;
      v35._object = a3;
      BOOL v17 = sub_1ACE90(v35);
      swift_bridgeObjectRelease();
      if (v17)
      {
        id v18 = *v30;
        (*v30)(v32, v11, v14);
        uint64_t v19 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_4AA98(0, v19[2] + 1, 1);
          uint64_t v19 = v34;
        }
        unint64_t v21 = v19[2];
        unint64_t v20 = v19[3];
        if (v21 >= v20 >> 1)
        {
          sub_4AA98(v20 > 1, v21 + 1, 1);
          uint64_t v19 = v34;
        }
        v19[2] = v21 + 1;
        unint64_t v22 = (unint64_t)v19 + v15 + v21 * v16;
        uint64_t v14 = v27;
        uint64_t result = v18((char *)v22, v32, v27);
        uint64_t v34 = v19;
        a3 = v25;
        a1 = v26;
      }
      else
      {
        uint64_t result = (*v24)(v11, v14);
      }
      ++v13;
      uint64_t v9 = v28;
      if (v31 == v13)
      {
        uint64_t v12 = v34;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  return result;
}

uint64_t sub_C25D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_201E10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_C263C()
{
  return swift_task_dealloc();
}

uint64_t sub_C2660()
{
  return v0;
}

uint64_t sub_C267C()
{
  return v0;
}

uint64_t sub_C2694()
{
  return v0;
}

uint64_t sub_C26A8()
{
  return swift_beginAccess();
}

uint64_t sub_C26C8()
{
  uint64_t v0 = sub_1AC250();
  __chkstk_darwin(v0 - 8);
  type metadata accessor for WellnessQueryingCATsSimple();
  sub_1AC240();
  uint64_t result = sub_1AC210();
  qword_2146D8 = result;
  return result;
}

uint64_t sub_C2754()
{
  sub_A364();
  *(void *)(v0 + 128) = v1;
  *(void *)(v0 + 136) = v2;
  *(unsigned char *)(v0 + 208) = v3;
  *(void *)(v0 + 120) = v4;
  uint64_t v5 = sub_1AC800();
  *(void *)(v0 + 144) = v5;
  sub_A19C(v5);
  *(void *)(v0 + 152) = v6;
  *(void *)(v0 + 160) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_C27E8()
{
  sub_E588();
  int v1 = *(unsigned __int8 *)(v0 + 208);
  uint64_t v2 = (v1 - 89);
  if (v2 <= 0x3E)
  {
    if (((1 << (v1 - 89)) & 0x6400000000004113) != 0)
    {
LABEL_13:
      swift_task_alloc();
      sub_250E0();
      *(void *)(v0 + 168) = v15;
      void *v15 = v16;
      v15[1] = sub_C2BC8;
      sub_CD418();
      sub_CD28C();
      return sub_C844C();
    }
    if (((1 << (v1 - 89)) & 0x40080) != 0)
    {
      swift_task_alloc();
      sub_250E0();
      *(void *)(v0 + 176) = v3;
      *char v3 = v4;
      v3[1] = sub_C2C94;
      sub_CD418();
      sub_CD28C();
      return sub_CA538();
    }
    if (v2 == 16)
    {
      swift_task_alloc();
      sub_250E0();
      *(void *)(v0 + 200) = v7;
      *uint64_t v7 = v8;
      v7[1] = sub_C2EF8;
      sub_CD340();
      sub_CD28C();
      return sub_C64B8(v9, v10, v11, v12);
    }
  }
  uint64_t v14 = (v1 - 155);
  if (v14 > 0x26) {
    goto LABEL_24;
  }
  if (((1 << v14) & 0x40200C0011) != 0) {
    goto LABEL_13;
  }
  if (v14 != 7)
  {
    if (v14 == 15)
    {
      swift_task_alloc();
      sub_250E0();
      *(void *)(v0 + 192) = v18;
      *id v18 = v19;
      v18[1] = sub_C2E2C;
      sub_CD340();
      sub_CD28C();
      return sub_C4A20(v20, v21, v22, v23);
    }
LABEL_24:
    *(void *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    sub_CCD04(v0 + 16, v0 + 56, &qword_202570);
    uint64_t v28 = *(void *)(v0 + 80);
    sub_5B028(v0 + 56, &qword_202570);
    if (v28)
    {
      sub_72124(v0 + 16, *(void *)(v0 + 120));
    }
    else
    {
      sub_1AC7D0();
      sub_A340();
      uint64_t v29 = sub_4BB4C();
      v30(v29);
      uint64_t v31 = (void *)sub_1AC7F0();
      os_log_type_t v32 = sub_1ACF60();
      if (sub_470C8(v32))
      {
        uint64_t v33 = (_WORD *)sub_292A0();
        sub_475A0(v33);
        sub_471F8(&def_342E4, v34, v35, "#GenerateQueryResponseOutput: Snippet model cannot be created. Possibly unsupported usecase.");
        sub_A1F0();
      }

      sub_B7ACC();
      v36();
      sub_5B028(v0 + 16, &qword_202570);
      sub_CD18C();
    }
    swift_task_dealloc();
    sub_E564();
    sub_CD28C();
    __asm { BRAA            X1, X16 }
  }
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 184) = v25;
  *uint64_t v25 = v26;
  v25[1] = sub_C2D60;
  sub_CD340();
  sub_CD28C();
  return sub_C3104();
}

uint64_t sub_C2BC8()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_E53C();
  void *v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_C2C94()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_E53C();
  void *v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_C2D60()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_E53C();
  void *v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_C2E2C()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_E53C();
  void *v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_C2EF8()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_E53C();
  void *v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

void sub_C2FC4()
{
  sub_E588();
  sub_CCD04(v0 + 16, v0 + 56, &qword_202570);
  uint64_t v1 = *(void *)(v0 + 80);
  sub_5B028(v0 + 56, &qword_202570);
  if (v1)
  {
    sub_72124(v0 + 16, *(void *)(v0 + 120));
  }
  else
  {
    sub_1AC7D0();
    sub_A340();
    uint64_t v2 = sub_4BB4C();
    v3(v2);
    uint64_t v4 = (void *)sub_1AC7F0();
    os_log_type_t v5 = sub_1ACF60();
    if (sub_470C8(v5))
    {
      uint64_t v6 = (_WORD *)sub_292A0();
      sub_475A0(v6);
      sub_471F8(&def_342E4, v7, v8, "#GenerateQueryResponseOutput: Snippet model cannot be created. Possibly unsupported usecase.");
      sub_A1F0();
    }

    sub_B7ACC();
    v9();
    sub_5B028(v0 + 16, &qword_202570);
    sub_CD18C();
  }
  swift_task_dealloc();
  sub_E564();
  sub_CD28C();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_C3104()
{
  sub_A364();
  *(void *)(v0 + 200) = v1;
  *(void *)(v0 + 208) = v2;
  *(unsigned char *)(v0 + 616) = v3;
  *(void *)(v0 + 192) = v4;
  uint64_t v5 = sub_1AC800();
  *(void *)(v0 + 216) = v5;
  sub_A19C(v5);
  *(void *)(v0 + 224) = v6;
  *(void *)(v0 + 232) = sub_A220();
  *(void *)(v0 + 240) = swift_task_alloc();
  *(void *)(v0 + 248) = swift_task_alloc();
  *(void *)(v0 + 256) = swift_task_alloc();
  *(void *)(v0 + 264) = swift_task_alloc();
  uint64_t v7 = sub_2694(&qword_2022D0);
  sub_53D4(v7);
  *(void *)(v0 + 272) = sub_A42C();
  uint64_t v8 = sub_2694(&qword_201E28);
  sub_53D4(v8);
  *(void *)(v0 + 280) = sub_A220();
  *(void *)(v0 + 288) = swift_task_alloc();
  uint64_t Model = type metadata accessor for HeightQueryModel();
  *(void *)(v0 + 296) = Model;
  sub_53D4(Model);
  *(void *)(v0 + 304) = sub_A220();
  *(void *)(v0 + 312) = swift_task_alloc();
  *(void *)(v0 + 320) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SnippetHeaderModel();
  *(void *)(v0 + 328) = v10;
  sub_53D4(v10);
  *(void *)(v0 + 336) = sub_A220();
  *(void *)(v0 + 344) = swift_task_alloc();
  *(void *)(v0 + 352) = swift_task_alloc();
  uint64_t v11 = sub_1AAB10();
  *(void *)(v0 + 360) = v11;
  sub_A19C(v11);
  *(void *)(v0 + 368) = v12;
  *(void *)(v0 + 376) = sub_A42C();
  uint64_t v13 = sub_1AABD0();
  *(void *)(v0 + 384) = v13;
  sub_A19C(v13);
  *(void *)(v0 + 392) = v14;
  *(void *)(v0 + 400) = sub_A42C();
  uint64_t v15 = sub_2694(&qword_201E10);
  sub_53D4(v15);
  *(void *)(v0 + 408) = sub_A42C();
  uint64_t v16 = sub_2694(&qword_201E20);
  sub_53D4(v16);
  *(void *)(v0 + 416) = sub_A220();
  *(void *)(v0 + 424) = swift_task_alloc();
  *(void *)(v0 + 432) = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v17, v18, v19);
}

uint64_t sub_C3354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_6FF4C();
  sub_6FF30();
  uint64_t v23 = v22[54];
  uint64_t v24 = (void *)v22[26];
  sub_CD538(v24);
  v22[55] = v25;
  sub_CD75C(v24, v23);
  uint64_t v26 = sub_A7254(v24);
  uint64_t v28 = sub_1710A4(v26, v27);
  uint64_t v30 = v29;
  v22[56] = v28;
  v22[57] = v29;
  swift_bridgeObjectRelease();
  if (v30)
  {
    uint64_t v31 = (void *)v22[25];
    v22[58] = sub_CE004(v24);
    id v32 = [v31 start];
    if (v32)
    {
      uint64_t v35 = v32;
      sub_1AABB0();

      uint64_t v36 = sub_CD0C0();
      v37(v36);
      sub_CCF9C();
    }
    else
    {
      sub_CD1E0(0, v33, v34, v22[48]);
    }
    sub_5B028(v22[51], &qword_201E10);
    os_log_type_t v58 = (void *)swift_task_alloc();
    v22[59] = v58;
    *os_log_type_t v58 = v22;
    v58[1] = sub_C3618;
    sub_CD19C();
    sub_6FED4();
    return sub_7B3B8(v59, v60, v61);
  }
  else
  {
    sub_1AC7D0();
    sub_A340();
    uint64_t v38 = sub_4BB4C();
    v39(v38);
    uint64_t v40 = (void *)sub_1AC7F0();
    os_log_type_t v41 = sub_1ACF60();
    if (sub_470C8(v41))
    {
      uint64_t v42 = (_WORD *)sub_292A0();
      sub_475A0(v42);
      sub_471F8(&def_342E4, v43, v44, "Failed to execute height pattern: no unit found in intent response.");
      sub_A1F0();
    }
    uint64_t v45 = v22[54];
    uint64_t v46 = v22[24];

    swift_release();
    uint64_t v47 = sub_CD054();
    v48(v47);
    sub_5B028(v45, &qword_201E20);
    *(_OWORD *)uint64_t v46 = 0u;
    *(_OWORD *)(v46 + 16) = 0u;
    *(void *)(v46 + 32) = 0;
    sub_CCE40();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_6FED4();
    return v50(v49, v50, v51, v52, v53, v54, v55, v56, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22);
  }
}

uint64_t sub_C3618()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 480) = v3;
  *(void *)(v1 + 488) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_C36E8()
{
  sub_A364();
  sub_2F2B8(*(unsigned char *)(v0 + 616));
  sub_CD21C();
  *(void *)(v0 + 496) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v2;
  void *v2 = v0;
  v2[1] = sub_C3780;
  sub_47E34();
  return sub_7A988();
}

uint64_t sub_C3780()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = *v0;
  sub_E53C();
  *uint64_t v4 = v3;
  *(void *)(v6 + 512) = v5;
  *(void *)(v6 + 520) = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_C3870()
{
  uint64_t v127 = v0;
  if (!*(void *)(v0 + 520) || !*(void *)(v0 + 488))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_7:
    sub_1AC7D0();
    sub_A340();
    uint64_t v3 = sub_292B8();
    v4(v3);
    uint64_t v5 = (void *)sub_1AC7F0();
    os_log_type_t v6 = sub_1ACF60();
    if (sub_29300(v6))
    {
      uint64_t v7 = (_WORD *)sub_292A0();
      sub_29368(v7);
      sub_A7FC(&def_342E4, v8, v9, "Couldn't create data or date dialog labels or deeplink");
      sub_A1F0();
    }
    uint64_t v10 = *(void *)(v0 + 432);
    uint64_t v11 = *(void *)(v0 + 192);
    swift_release();

    swift_release();
    uint64_t v12 = sub_CD054();
    v13(v12);
    sub_5B028(v10, &qword_201E20);
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(void *)(v11 + 32) = 0;
    sub_CD4B8();
    sub_CD4AC();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_CD2A0();
    __asm { BRAA            X1, X16 }
  }
  sub_CCD04(*(void *)(v0 + 432), *(void *)(v0 + 424), &qword_201E20);
  sub_CD0DC();
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 424);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_5B028(v2, &qword_201E20);
    goto LABEL_7;
  }
  uint64_t v116 = *(void *)(v0 + 416);
  uint64_t v16 = *(void *)(v0 + 352);
  uint64_t v115 = *(void *)(v0 + 360);
  uint64_t v17 = *(void *)(v0 + 328);
  uint64_t v118 = *(void *)(v0 + 320);
  uint64_t v123 = *(void *)(v0 + 312);
  uint64_t v125 = *(void *)(v0 + 288);
  uint64_t v114 = *(void *)(v0 + 280);
  uint64_t v117 = *(void *)(v0 + 272);
  uint64_t v18 = *(void *)(v0 + 224);
  uint64_t v119 = *(void *)(v0 + 264);
  uint64_t v121 = *(void *)(v0 + 216);
  uint64_t v19 = *(void **)(v0 + 208);
  char v20 = *(unsigned char *)(v0 + 616);
  sub_5572C();
  v21();
  sub_CD2C8();
  sub_1ACE40();
  swift_bridgeObjectRelease();
  unint64_t v22 = sub_34250(v20);
  unint64_t v24 = v23;
  unint64_t v25 = sub_2F2B8(v20);
  uint64_t v113 = v16;
  uint64_t v26 = (unint64_t *)(v16 + *(int *)(v17 + 20));
  *uint64_t v26 = v22;
  v26[1] = v24;
  uint64_t v27 = (unint64_t *)(v16 + *(int *)(v17 + 24));
  unint64_t *v27 = v25;
  v27[1] = v28;
  sub_697A0(v19);
  double v30 = v29;
  uint64_t v31 = sub_A7254(v19);
  uint64_t v33 = sub_C0448(v31, v32, v20, v30);
  swift_bridgeObjectRelease();
  [v19 maximum];
  double v35 = v34;
  uint64_t v36 = sub_A7254(v19);
  uint64_t v38 = sub_C0448(v36, v37, v20, v35);
  swift_bridgeObjectRelease();
  [v19 minimum];
  double v40 = v39;
  uint64_t v41 = sub_A7254(v19);
  uint64_t v43 = sub_C0448(v41, v42, v20, v40);
  swift_bridgeObjectRelease();
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v44 = sub_1AC1E0();
  uint64_t v45 = sub_CD1D0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v45, v46, v47, v44);
  [v19 minimum];
  [v19 maximum];
  sub_A7254(v19);
  sub_697F4();
  char v49 = v48;
  swift_bridgeObjectRelease();
  sub_1ACE40();
  sub_47F14();
  uint64_t v124 = v44;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v50, v51, v52, v44);
  sub_47B44();
  v53();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v116, 0, 1, v115);
  sub_CCD54(v113, v117, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_47F14();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v54, v55, v56, v17);
  sub_2BAA0(v33, 0, v38, 0, v43, 0, v125, v49 & 1, v118, v114, v116, v117);
  uint64_t v57 = sub_1AC7D0();
  *(void *)(v0 + 528) = v57;
  sub_A340();
  os_log_type_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  *(void *)(v0 + 536) = v58;
  *(void *)(v0 + 544) = (v18 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v122 = v58;
  v58(v119, v57, v121);
  sub_CCD54(v118, v123, (void (*)(void))type metadata accessor for HeightQueryModel);
  uint64_t v59 = (void *)sub_1AC7F0();
  os_log_type_t v60 = sub_1ACF50();
  BOOL v61 = sub_47A70(v60);
  uint64_t v62 = *(void *)(v0 + 312);
  if (v61)
  {
    uint64_t v120 = *(void *)(v0 + 224);
    uint64_t v63 = (_DWORD *)sub_A4B0();
    uint64_t v64 = sub_E620();
    v126[0] = v64;
    *uint64_t v63 = 136315138;
    sub_CD438(v64, v65, (void (*)(void))type metadata accessor for HeightQueryModel);
    uint64_t v66 = sub_1ACE00();
    *(void *)(v0 + 184) = sub_4A278(v66, v67, v126);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_CCDA8(v62, (void (*)(void))type metadata accessor for HeightQueryModel);
    sub_76694(&def_342E4, v68, v69, "Query snippet model is: %s");
    sub_CD494();
    sub_A1F0();
    sub_A1F0();

    uint64_t v70 = *(void (**)(void))(v120 + 8);
    sub_E530();
    v70();
  }
  else
  {
    uint64_t v71 = *(void *)(v0 + 264);
    uint64_t v72 = *(void *)(v0 + 216);
    uint64_t v73 = *(void *)(v0 + 224);
    sub_CCDA8(*(void *)(v0 + 312), (void (*)(void))type metadata accessor for HeightQueryModel);

    uint64_t v70 = *(void (**)(void))(v73 + 8);
    ((void (*)(uint64_t, uint64_t))v70)(v71, v72);
  }
  *(void *)(v0 + 552) = v70;
  uint64_t v75 = *(void *)(v0 + 344);
  uint64_t v74 = *(void *)(v0 + 352);
  uint64_t v76 = *(void *)(v0 + 256);
  uint64_t v77 = *(void *)(v0 + 216);
  sub_A340();
  v122(v76, v57, v77);
  sub_CCD54(v74, v75, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v78 = sub_1AC7F0();
  os_log_type_t v79 = sub_1ACF50();
  BOOL v80 = os_log_type_enabled(v78, v79);
  uint64_t v81 = *(void *)(v0 + 344);
  if (v80)
  {
    uint64_t v82 = *(void *)(v0 + 336);
    sub_CD334();
    uint64_t v83 = (_DWORD *)sub_A4B0();
    v126[0] = sub_E620();
    *uint64_t v83 = 136315138;
    sub_CCD54(v81, v82, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    uint64_t v84 = sub_1ACE00();
    *(void *)(v0 + 176) = sub_4A278(v84, v85, v126);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_CCDA8(v81, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_A27C(&def_342E4, v86, v87, "Query snippet header model is: %s");
    sub_CD2FC();
    sub_A1F0();
    sub_A1F0();

    sub_E530();
    v88();
  }
  else
  {
    sub_CCDA8(*(void *)(v0 + 344), (void (*)(void))type metadata accessor for SnippetHeaderModel);

    uint64_t v89 = sub_CD0AC();
    ((void (*)(uint64_t))v70)(v89);
  }
  if (qword_201C18 != -1) {
    swift_once();
  }
  uint64_t v90 = *(void *)(v0 + 320);
  uint64_t v91 = *(int **)(v0 + 296);
  uint64_t v92 = *(void *)(v0 + 280);
  *(void *)(v0 + 560) = qword_2146D8;
  uint64_t v93 = v90 + v91[5];
  uint64_t v94 = *(void *)v93;
  char v95 = *(unsigned char *)(v93 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_CD384();
  sub_47F14();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v96, v97, v98, v124);
  *(void *)(v0 + 568) = sub_CC978(v94, v95, v92);
  sub_5B028(v92, &qword_201E28);
  uint64_t v99 = v90 + v91[7];
  uint64_t v100 = *(void *)v99;
  char v101 = *(unsigned char *)(v99 + 8);
  sub_CD384();
  sub_CD450();
  *(void *)(v0 + 576) = sub_CC978(v100, v101, v92);
  sub_5B028(v92, &qword_201E28);
  uint64_t v102 = v90 + v91[6];
  uint64_t v103 = *(void *)v102;
  LOBYTE(v90) = *(unsigned char *)(v102 + 8);
  sub_CD384();
  swift_bridgeObjectRelease();
  sub_CD450();
  *(void *)(v0 + 584) = sub_CC978(v103, v90, v92);
  sub_5B028(v92, &qword_201E28);
  uint64_t v104 = (void *)swift_task_alloc();
  *(void *)(v0 + 592) = v104;
  *uint64_t v104 = v0;
  v104[1] = sub_C4320;
  sub_CD2A0();
  return sub_D55E4(v105, v106, v107, v108, v109, v110);
}

uint64_t sub_C4320()
{
  sub_7F418();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  if (v0)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_errorRelease();
  }
  else
  {
    *(void *)(v4 + 600) = v3;
    swift_release();
    swift_release();
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_C4504()
{
  sub_47634();
  uint64_t v1 = type metadata accessor for WellnessSnippets();
  unint64_t v2 = sub_CD520(v1);
  uint64_t v3 = sub_CD3E8(v2);
  sub_CD4C4((uint64_t)v3, v4, (void (*)(void))type metadata accessor for HeightQueryModel);
  sub_CD2C8();
  swift_storeEnumTagMultiPayload();
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 608) = v5;
  *uint64_t v5 = v6;
  v5[1] = sub_C45DC;
  sub_CD40C();
  return sub_7ADEC();
}

uint64_t sub_C45DC()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  sub_CD100();
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_C46A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_6FF4C();
  sub_6FF30();
  uint64_t v23 = *(void *)(v22 + 432);
  uint64_t v24 = *(void *)(v22 + 352);
  uint64_t v25 = *(void *)(v22 + 320);

  swift_release();
  swift_release();
  sub_CCDA8(v25, (void (*)(void))type metadata accessor for HeightQueryModel);
  sub_CCDA8(v24, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v26 = sub_C267C();
  v27(v26);
  sub_5B028(v23, &qword_201E20);
  sub_CCE40();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_6FED4();
  return v29(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t sub_C4818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_6FF4C();
  sub_6FF30();
  uint64_t v23 = (void (*)(uint64_t))v22[67];
  sub_A340();
  uint64_t v24 = sub_470B8();
  v23(v24);
  uint64_t v25 = (void *)sub_1AC7F0();
  os_log_type_t v26 = sub_1ACF60();
  if (sub_29300(v26))
  {
    uint64_t v27 = (_WORD *)sub_292A0();
    sub_29368(v27);
    sub_A7FC(&def_342E4, v28, v29, "Couldn't create dialog for height");
    sub_A1F0();
  }
  uint64_t v30 = (void (*)(void))v22[69];
  uint64_t v44 = v22[47];
  uint64_t v45 = v22[54];
  uint64_t v42 = v22[44];
  uint64_t v43 = v22[45];
  uint64_t v31 = v22[40];
  swift_release();

  swift_release();
  sub_E530();
  v30();
  sub_CCDA8(v31, (void (*)(void))type metadata accessor for HeightQueryModel);
  sub_CCDA8(v42, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_47814();
  v32();
  sub_5B028(v45, &qword_201E20);
  sub_CD18C();
  sub_CCE40();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_6FED4();
  return v34(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10, a11, a12, a13, a14, a15, v42, v43, v44, v45,
           a20,
           a21,
           a22);
}

uint64_t sub_C4A20(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 200) = a3;
  *(void *)(v4 + 208) = a4;
  *(unsigned char *)(v4 + 608) = a2;
  *(void *)(v4 + 192) = a1;
  uint64_t v5 = sub_1AC800();
  *(void *)(v4 + 216) = v5;
  *(void *)(v4 + 224) = *(void *)(v5 - 8);
  *(void *)(v4 + 232) = swift_task_alloc();
  *(void *)(v4 + 240) = swift_task_alloc();
  *(void *)(v4 + 248) = swift_task_alloc();
  *(void *)(v4 + 256) = swift_task_alloc();
  *(void *)(v4 + 264) = swift_task_alloc();
  sub_2694(&qword_2022D0);
  *(void *)(v4 + 272) = swift_task_alloc();
  sub_2694(&qword_201E28);
  *(void *)(v4 + 280) = swift_task_alloc();
  *(void *)(v4 + 288) = type metadata accessor for OxygenSaturationQueryModel();
  *(void *)(v4 + 296) = swift_task_alloc();
  *(void *)(v4 + 304) = swift_task_alloc();
  *(void *)(v4 + 312) = swift_task_alloc();
  *(void *)(v4 + 320) = type metadata accessor for SnippetHeaderModel();
  *(void *)(v4 + 328) = swift_task_alloc();
  *(void *)(v4 + 336) = swift_task_alloc();
  *(void *)(v4 + 344) = swift_task_alloc();
  uint64_t v6 = sub_1AAB10();
  *(void *)(v4 + 352) = v6;
  *(void *)(v4 + 360) = *(void *)(v6 - 8);
  *(void *)(v4 + 368) = swift_task_alloc();
  uint64_t v7 = sub_1AABD0();
  *(void *)(v4 + 376) = v7;
  *(void *)(v4 + 384) = *(void *)(v7 - 8);
  *(void *)(v4 + 392) = swift_task_alloc();
  sub_2694(&qword_201E10);
  *(void *)(v4 + 400) = swift_task_alloc();
  sub_2694(&qword_201E20);
  *(void *)(v4 + 408) = swift_task_alloc();
  *(void *)(v4 + 416) = swift_task_alloc();
  *(void *)(v4 + 424) = swift_task_alloc();
  return _swift_task_switch(sub_C4D48, 0, 0);
}

uint64_t sub_C4D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_70474();
  uint64_t v21 = v20[53];
  uint64_t v22 = (void *)v20[26];
  sub_CD538(v22);
  v20[54] = v23;
  sub_CD75C(v22, v21);
  uint64_t v24 = sub_A7254(v22);
  uint64_t v26 = sub_1710A4(v24, v25);
  uint64_t v28 = v27;
  v20[55] = v26;
  v20[56] = v27;
  swift_bridgeObjectRelease();
  if (v28)
  {
    uint64_t v29 = (void *)v20[25];
    v20[57] = sub_CE004(v22);
    id v30 = [v29 start];
    if (v30)
    {
      uint64_t v33 = v30;
      sub_1AABB0();

      uint64_t v34 = sub_CD0C0();
      v35(v34);
      sub_CCF9C();
    }
    else
    {
      sub_CD1E0(0, v31, v32, v20[47]);
    }
    sub_5B028(v20[50], &qword_201E10);
    uint64_t v56 = (void *)swift_task_alloc();
    v20[58] = v56;
    *uint64_t v56 = v20;
    v56[1] = sub_C5008;
    sub_CD19C();
    sub_292D4();
    return sub_7B3B8(v57, v58, v59);
  }
  else
  {
    sub_1AC7D0();
    sub_A340();
    uint64_t v36 = sub_4BB4C();
    v37(v36);
    uint64_t v38 = (void *)sub_1AC7F0();
    os_log_type_t v39 = sub_1ACF60();
    if (sub_470C8(v39))
    {
      uint64_t v40 = (_WORD *)sub_292A0();
      sub_475A0(v40);
      sub_471F8(&def_342E4, v41, v42, "Failed to execute height pattern: no unit found in intent response.");
      sub_A1F0();
    }
    uint64_t v43 = v20[53];
    uint64_t v44 = v20[24];

    swift_release();
    uint64_t v45 = sub_CD054();
    v46(v45);
    sub_5B028(v43, &qword_201E20);
    *(_OWORD *)uint64_t v44 = 0u;
    *(_OWORD *)(v44 + 16) = 0u;
    *(void *)(v44 + 32) = 0;
    sub_CCEA4();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_292D4();
    return v48(v47, v48, v49, v50, v51, v52, v53, v54, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  }
}

uint64_t sub_C5008()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 472) = v3;
  *(void *)(v1 + 480) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_C50D8()
{
  sub_A364();
  sub_2F2B8(*(unsigned char *)(v0 + 608));
  sub_CD21C();
  *(void *)(v0 + 488) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v2;
  void *v2 = v0;
  v2[1] = sub_C5170;
  sub_47E34();
  return sub_7A988();
}

uint64_t sub_C5170()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = *v0;
  sub_E53C();
  *uint64_t v4 = v3;
  *(void *)(v7 + 504) = v5;
  *(void *)(v7 + 512) = v6;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_C525C()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 520) = v1;
  void *v1 = v0;
  v1[1] = sub_C52E4;
  uint64_t v2 = sub_CD06C();
  return sub_7A658(v2, v3);
}

uint64_t sub_C52E4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 528) = v3;
  *(void *)(v1 + 536) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_C53B8()
{
  uint64_t v110 = v0;
  uint64_t v1 = *(void *)(v0 + 512);
  if (!v1 || !*(void *)(v0 + 480))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v3 = *(void *)(v0 + 352);
  sub_CCD04(*(void *)(v0 + 424), v2, &qword_201E20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1, v3) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 416);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_5B028(v4, &qword_201E20);
LABEL_6:
    sub_1AC7D0();
    sub_A340();
    uint64_t v5 = sub_292B8();
    v6(v5);
    uint64_t v7 = (void *)sub_1AC7F0();
    os_log_type_t v8 = sub_1ACF60();
    if (sub_29300(v8))
    {
      uint64_t v9 = (_WORD *)sub_292A0();
      sub_29368(v9);
      sub_A7FC(&def_342E4, v10, v11, "Couldn't create data or date dialog labels or deeplink");
      sub_A1F0();
    }
    uint64_t v12 = *(void *)(v0 + 424);
    uint64_t v13 = *(void *)(v0 + 192);
    swift_release();

    swift_release();
    uint64_t v14 = sub_CD054();
    v15(v14);
    sub_5B028(v12, &qword_201E20);
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(void *)(v13 + 32) = 0;
    sub_CD3A0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    return v16();
  }
  uint64_t v18 = *(void *)(v0 + 504);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = *(void *)(v0 + 320);
  uint64_t v21 = *(void **)(v0 + 208);
  char v22 = *(unsigned char *)(v0 + 608);
  sub_5572C();
  v23();
  sub_1ACE40();
  swift_bridgeObjectRelease();
  sub_34250(v22);
  sub_CD21C();
  unint64_t v24 = sub_2F2B8(v22);
  uint64_t v25 = (void *)(v19 + *(int *)(v20 + 20));
  *uint64_t v25 = v1;
  v25[1] = v18;
  uint64_t v26 = (unint64_t *)(v19 + *(int *)(v20 + 24));
  *uint64_t v26 = v24;
  v26[1] = v27;
  [v21 minimum];
  double v29 = v28;
  [v21 maximum];
  double v31 = v30;
  if (v29 != v30)
  {
    uint64_t v32 = *(void **)(v0 + 208);
    unsigned __int8 v33 = *(unsigned char *)(v0 + 608);
    [v32 average];
    double v35 = v34 * 100.0;
    uint64_t v36 = sub_A7254(v32);
    sub_C0448(v36, v37, v33, v35);
    swift_bridgeObjectRelease();
  }
  uint64_t v101 = *(void *)(v0 + 528);
  uint64_t v102 = *(void *)(v0 + 536);
  uint64_t v103 = *(void *)(v0 + 440);
  uint64_t v104 = *(void *)(v0 + 448);
  uint64_t v38 = *(void *)(v0 + 408);
  uint64_t v39 = *(void *)(v0 + 360);
  uint64_t v96 = *(void *)(v0 + 352);
  uint64_t v97 = *(void *)(v0 + 368);
  uint64_t v98 = *(void *)(v0 + 344);
  uint64_t v99 = *(void *)(v0 + 320);
  uint64_t v100 = *(void *)(v0 + 312);
  uint64_t v108 = *(void *)(v0 + 304);
  uint64_t v41 = *(void *)(v0 + 272);
  uint64_t v40 = *(void *)(v0 + 280);
  uint64_t v106 = *(void *)(v0 + 264);
  uint64_t v42 = *(void *)(v0 + 224);
  uint64_t v107 = *(void *)(v0 + 216);
  uint64_t v43 = *(void **)(v0 + 208);
  [v43 maximum];
  uint64_t v44 = sub_A7254(v43);
  sub_CD258(v44, v45);
  swift_bridgeObjectRelease();
  [v43 minimum];
  uint64_t v46 = sub_A7254(v43);
  sub_CD258(v46, v47);
  swift_bridgeObjectRelease();
  [v43 mostRecent];
  uint64_t v48 = sub_A7254(v43);
  sub_CD258(v48, v49);
  swift_bridgeObjectRelease();
  sub_1ACE40();
  swift_bridgeObjectRelease();
  sub_1AC1E0();
  sub_47F14();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v50, v51, v52, v53);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v38, v97, v96);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v38, 0, 1, v96);
  sub_CCD54(v98, v41, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_47F14();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v54, v55, v56, v99);
  sub_19F198(v29 == v31, 0, 0, v100, v103, v104, v40, v38, v101, v102, v41);
  uint64_t v57 = sub_1AC7D0();
  *(void *)(v0 + 544) = v57;
  sub_A340();
  char v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  *(void *)(v0 + 552) = v58;
  *(void *)(v0 + 560) = (v42 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v58(v106, v57, v107);
  sub_CCD54(v100, v108, (void (*)(void))type metadata accessor for OxygenSaturationQueryModel);
  uint64_t v59 = (void *)sub_1AC7F0();
  os_log_type_t v60 = sub_1ACF50();
  BOOL v61 = sub_47A70(v60);
  uint64_t v62 = *(void *)(v0 + 304);
  if (v61)
  {
    sub_CD334();
    uint64_t v105 = v63;
    uint64_t v64 = (_DWORD *)sub_A4B0();
    uint64_t v65 = sub_E620();
    v109[0] = v65;
    *uint64_t v64 = 136315138;
    sub_CD438(v65, v66, (void (*)(void))type metadata accessor for OxygenSaturationQueryModel);
    uint64_t v67 = sub_1ACE00();
    *(void *)(v0 + 184) = sub_4A278(v67, v68, v109);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_CCDA8(v62, (void (*)(void))type metadata accessor for OxygenSaturationQueryModel);
    sub_CD16C(&def_342E4, v69, v70, "Query snippet model is: %s");
    sub_CD494();
    sub_A1F0();
    sub_A1F0();

    uint64_t v71 = *(void (**)(void))(v105 + 8);
    sub_E530();
    v71();
  }
  else
  {
    uint64_t v72 = *(void *)(v0 + 264);
    uint64_t v73 = *(void *)(v0 + 216);
    uint64_t v74 = *(void *)(v0 + 224);
    sub_CCDA8(*(void *)(v0 + 304), (void (*)(void))type metadata accessor for OxygenSaturationQueryModel);

    uint64_t v71 = *(void (**)(void))(v74 + 8);
    ((void (*)(uint64_t, uint64_t))v71)(v72, v73);
  }
  *(void *)(v0 + 568) = v71;
  sub_A340();
  uint64_t v75 = sub_A7C4();
  uint64_t v76 = ((uint64_t (*)(uint64_t))v58)(v75);
  sub_CD36C(v76, v77, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v78 = sub_1AC7F0();
  os_log_type_t v79 = sub_1ACF50();
  BOOL v80 = os_log_type_enabled(v78, v79);
  uint64_t v81 = *(void *)(v0 + 336);
  if (v80)
  {
    uint64_t v82 = *(void *)(v0 + 328);
    uint64_t v83 = (_DWORD *)sub_A4B0();
    v109[0] = sub_E620();
    *uint64_t v83 = 136315138;
    sub_CCD54(v81, v82, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    uint64_t v84 = sub_1ACE00();
    *(void *)(v0 + 176) = sub_4A278(v84, v85, v109);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_CCDA8(v81, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_A27C(&def_342E4, v86, v87, "Query snippet header model is: %s");
    sub_CD2FC();
    sub_A1F0();
    sub_A1F0();

    sub_E530();
    v88();
  }
  else
  {
    sub_CCDA8(*(void *)(v0 + 336), (void (*)(void))type metadata accessor for SnippetHeaderModel);

    uint64_t v89 = sub_CD0AC();
    ((void (*)(uint64_t))v71)(v89);
  }
  if (qword_201C18 != -1) {
    swift_once();
  }
  uint64_t v90 = *(void *)(v0 + 456);
  uint64_t v91 = *(void *)(v0 + 312);
  uint64_t v92 = *(void *)(v0 + 288);
  *(void *)(v0 + 576) = qword_2146D8;
  char v93 = *(unsigned char *)(v91 + *(int *)(v92 + 20) + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v94 = (void *)swift_task_alloc();
  *(void *)(v0 + 584) = v94;
  *uint64_t v94 = v0;
  v94[1] = sub_C5E48;
  uint64_t v113 = v90;
  char v112 = v93;
  uint64_t v95 = sub_A7C4();
  return sub_D378C(v95);
}

uint64_t sub_C5E48()
{
  sub_7F418();
  uint64_t v3 = v2;
  sub_A1B4();
  uint64_t v5 = v4;
  sub_E53C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_E53C();
  *os_log_type_t v8 = v7;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  else {
    *(void *)(v5 + 592) = v3;
  }
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_C5FA4()
{
  sub_47634();
  uint64_t v1 = type metadata accessor for WellnessSnippets();
  unint64_t v2 = sub_CD520(v1);
  uint64_t v3 = sub_CD3E8(v2);
  sub_CD4C4((uint64_t)v3, v4, (void (*)(void))type metadata accessor for OxygenSaturationQueryModel);
  sub_CD2C8();
  swift_storeEnumTagMultiPayload();
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 600) = v5;
  *uint64_t v5 = v6;
  v5[1] = sub_C607C;
  sub_CD40C();
  return sub_7ADEC();
}

uint64_t sub_C607C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  sub_CD100();
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_C6148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_70474();
  uint64_t v21 = *(void *)(v20 + 424);
  uint64_t v22 = *(void *)(v20 + 344);
  uint64_t v23 = *(void *)(v20 + 312);

  swift_release();
  swift_release();
  sub_CCDA8(v23, (void (*)(void))type metadata accessor for OxygenSaturationQueryModel);
  sub_CCDA8(v22, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v24 = sub_C267C();
  v25(v24);
  sub_5B028(v21, &qword_201E20);
  sub_CCEA4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_292D4();
  return v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t sub_C62B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_70474();
  uint64_t v21 = (void (*)(uint64_t))v20[69];
  sub_A340();
  uint64_t v22 = sub_470B8();
  v21(v22);
  uint64_t v23 = (void *)sub_1AC7F0();
  os_log_type_t v24 = sub_1ACF60();
  if (sub_29300(v24))
  {
    uint64_t v25 = (_WORD *)sub_292A0();
    sub_29368(v25);
    sub_A7FC(&def_342E4, v26, v27, "Couldn't create dialog for blood oxygen");
    sub_A1F0();
  }
  uint64_t v28 = (void (*)(void))v20[71];
  uint64_t v42 = v20[46];
  uint64_t v43 = v20[53];
  uint64_t v40 = v20[43];
  uint64_t v41 = v20[44];
  uint64_t v29 = v20[39];
  swift_release();

  swift_release();
  sub_E530();
  v28();
  sub_CCDA8(v29, (void (*)(void))type metadata accessor for OxygenSaturationQueryModel);
  sub_CCDA8(v40, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_47814();
  v30();
  sub_5B028(v43, &qword_201E20);
  sub_CD18C();
  sub_CCEA4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_292D4();
  return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, v40, v41, v42, v43, a18, a19, a20);
}

uint64_t sub_C64B8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 184) = a3;
  *(void *)(v4 + 192) = a4;
  *(unsigned char *)(v4 + 664) = a2;
  *(void *)(v4 + 176) = a1;
  uint64_t v5 = sub_1AC800();
  *(void *)(v4 + 200) = v5;
  *(void *)(v4 + 208) = *(void *)(v5 - 8);
  *(void *)(v4 + 216) = swift_task_alloc();
  *(void *)(v4 + 224) = swift_task_alloc();
  *(void *)(v4 + 232) = swift_task_alloc();
  *(void *)(v4 + 240) = swift_task_alloc();
  sub_2694(&qword_2022D0);
  *(void *)(v4 + 248) = swift_task_alloc();
  sub_2694(&qword_201E28);
  *(void *)(v4 + 256) = swift_task_alloc();
  *(void *)(v4 + 264) = swift_task_alloc();
  *(void *)(v4 + 272) = type metadata accessor for GenericQueryModel();
  *(void *)(v4 + 280) = swift_task_alloc();
  *(void *)(v4 + 288) = swift_task_alloc();
  *(void *)(v4 + 296) = swift_task_alloc();
  *(void *)(v4 + 304) = type metadata accessor for SnippetHeaderModel();
  *(void *)(v4 + 312) = swift_task_alloc();
  *(void *)(v4 + 320) = swift_task_alloc();
  *(void *)(v4 + 328) = swift_task_alloc();
  uint64_t v6 = sub_2694(&qword_203600);
  *(void *)(v4 + 336) = v6;
  *(void *)(v4 + 344) = *(void *)(v6 - 8);
  *(void *)(v4 + 352) = swift_task_alloc();
  *(void *)(v4 + 360) = swift_task_alloc();
  *(void *)(v4 + 368) = swift_task_alloc();
  *(void *)(v4 + 376) = swift_task_alloc();
  *(void *)(v4 + 384) = swift_task_alloc();
  uint64_t v7 = sub_1AAB10();
  *(void *)(v4 + 392) = v7;
  *(void *)(v4 + 400) = *(void *)(v7 - 8);
  *(void *)(v4 + 408) = swift_task_alloc();
  uint64_t v8 = sub_1AABD0();
  *(void *)(v4 + 416) = v8;
  *(void *)(v4 + 424) = *(void *)(v8 - 8);
  *(void *)(v4 + 432) = swift_task_alloc();
  sub_2694(&qword_201E10);
  *(void *)(v4 + 440) = swift_task_alloc();
  sub_2694(&qword_201E20);
  *(void *)(v4 + 448) = swift_task_alloc();
  *(void *)(v4 + 456) = swift_task_alloc();
  *(void *)(v4 + 464) = swift_task_alloc();
  return _swift_task_switch(sub_C6878, 0, 0);
}

uint64_t sub_C6878()
{
  sub_7F418();
  uint64_t v1 = v0[58];
  uint64_t v2 = (void *)v0[23];
  uint64_t v3 = (void *)v0[24];
  sub_CD538(v3);
  uint64_t v5 = v4;
  v0[59] = v4;
  sub_CD75C(v3, v1);
  uint64_t v6 = sub_CE004(v3);
  v0[60] = v6;
  id v7 = [v2 start];
  uint64_t v10 = v0[55];
  if (!v7)
  {
    sub_CD1E0(0, v8, v9, v0[52]);
    goto LABEL_5;
  }
  uint64_t v11 = v7;
  uint64_t v13 = v0[53];
  uint64_t v12 = v0[54];
  uint64_t v14 = v0[52];
  sub_1AABB0();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v10, v12, v14);
  sub_CCF9C();
  if (v15) {
LABEL_5:
  }
    LOBYTE(v10) = 1;
  sub_5B028(v0[55], &qword_201E10);
  uint64_t v16 = (void *)swift_task_alloc();
  v0[61] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_C69D4;
  return sub_7B3B8(v6, v10, v5);
}

uint64_t sub_C69D4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 496) = v3;
  *(void *)(v1 + 504) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_C6AA4()
{
  sub_A364();
  sub_2F2B8(*(unsigned char *)(v0 + 664));
  sub_CD21C();
  *(void *)(v0 + 512) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 520) = v2;
  void *v2 = v0;
  v2[1] = sub_C6B3C;
  sub_47E34();
  return sub_7A988();
}

uint64_t sub_C6B3C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = *v0;
  sub_E53C();
  *uint64_t v4 = v3;
  *(void *)(v6 + 528) = v5;
  *(void *)(v6 + 536) = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_C6C2C()
{
  sub_47634();
  uint64_t v1 = *(void **)(v0 + 192);
  unsigned __int8 v2 = *(unsigned char *)(v0 + 664);
  sub_697A0(v1);
  double v4 = v3;
  uint64_t v5 = sub_A7254(v1);
  *(double *)(v0 + 544) = sub_C0448(v5, v6, v2, v4);
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 552) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_C6CF4;
  uint64_t v8 = sub_CD06C();
  return sub_7A658(v8, v9);
}

uint64_t sub_C6CF4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 560) = v3;
  *(void *)(v1 + 568) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_C6DC8()
{
  uint64_t v132 = v0;
  if (!*(void *)(v0 + 536) || !*(void *)(v0 + 504)) {
    goto LABEL_6;
  }
  sub_CCD04(*(void *)(v0 + 464), *(void *)(v0 + 456), &qword_201E20);
  sub_CD0DC();
  if (!v1)
  {
    uint64_t v17 = *(void **)(v0 + 192);
    sub_5572C();
    v18();
    uint64_t v19 = sub_A7254(v17);
    if (v20)
    {
      uint64_t v21 = v20;
      if (*(void *)(v0 + 568))
      {
        uint64_t v22 = v19;
        uint64_t v118 = *(void *)(v0 + 344);
        uint64_t v120 = *(void *)(v0 + 368);
        uint64_t v123 = *(void *)(v0 + 328);
        uint64_t v126 = *(void *)(v0 + 304);
        uint64_t v23 = *(void **)(v0 + 192);
        char v125 = *(unsigned char *)(v0 + 664);
        sub_CCDFC();
        swift_bridgeObjectRetain();
        uint64_t v116 = v22;
        uint64_t v128 = v21;
        id v24 = sub_6F09C();
        *(void *)(v0 + 576) = v24;
        id v121 = v23;
        [v23 minimum];
        id v25 = v24;
        sub_1AA960();
        [v23 maximum];
        id v130 = v25;
        sub_1AA960();
        uint64_t v26 = self;
        id v27 = [v26 poundsMass];
        sub_1AA990();

        id v28 = [v26 poundsMass];
        sub_1AA990();

        sub_1AA980();
        uint64_t v29 = *(void (**)(void))(v118 + 8);
        *(void *)(v0 + 584) = v29;
        *(void *)(v0 + 592) = (v118 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        sub_CD2F0();
        v29();
        sub_CD2F0();
        v29();
        sub_1AA970();
        double v31 = v30;
        sub_CD2F0();
        v29();
        sub_1ACE40();
        swift_bridgeObjectRelease();
        sub_34250(v125);
        sub_CD21C();
        unint64_t v32 = sub_2F2B8(v125);
        uint64_t v33 = (void *)(v123 + *(int *)(v126 + 20));
        *uint64_t v33 = v120;
        v33[1] = v29;
        uint64_t v34 = (unint64_t *)(v123 + *(int *)(v126 + 24));
        *uint64_t v34 = v32;
        v34[1] = v35;
        [v121 minimum];
        double v37 = v36;
        [v121 maximum];
        double v39 = v38;
        if (v37 != v38)
        {
          unsigned __int8 v40 = *(unsigned char *)(v0 + 664);
          [*(id *)(v0 + 192) minimum];
          double v42 = v41;
          swift_bridgeObjectRetain();
          sub_C0448(v116, v128, v40, v42);
          swift_bridgeObjectRelease();
        }
        uint64_t v43 = *(void **)(v0 + 192);
        [v43 minimum];
        double v45 = v44;
        [v43 maximum];
        double v47 = v46;
        if (v45 != v46)
        {
          unsigned __int8 v50 = *(unsigned char *)(v0 + 664);
          [*(id *)(v0 + 192) maximum];
          sub_C0448(v116, v128, v50, v51);
        }
        swift_bridgeObjectRelease();
        uint64_t v115 = *(void *)(v0 + 560);
        uint64_t v117 = *(void *)(v0 + 568);
        uint64_t v129 = *(void *)(v0 + 544);
        uint64_t v52 = *(void *)(v0 + 448);
        uint64_t v53 = *(void *)(v0 + 400);
        uint64_t v109 = *(void *)(v0 + 408);
        uint64_t v54 = *(void *)(v0 + 392);
        uint64_t v112 = *(void *)(v0 + 328);
        uint64_t v113 = *(void *)(v0 + 304);
        uint64_t v114 = *(void *)(v0 + 296);
        uint64_t v55 = *(void *)(v0 + 264);
        uint64_t v56 = *(void *)(v0 + 248);
        uint64_t v57 = *(void *)(v0 + 208);
        id v122 = *(id *)(v0 + 288);
        id v58 = [v130 symbol];
        uint64_t v59 = sub_1ACDD0();
        uint64_t v110 = v60;
        uint64_t v111 = v59;

        sub_A7C4();
        sub_1ACE40();
        swift_bridgeObjectRelease();
        sub_1AC1E0();
        sub_47F14();
        uint64_t v127 = v61;
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v62, v63, v64, v61);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v52, v109, v54);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v52, 0, 1, v54);
        sub_CCD54(v112, v56, (void (*)(void))type metadata accessor for SnippetHeaderModel);
        sub_47F14();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v65, v66, v67, v113);
        sub_15D5E4(v129, 0, v37 == v39, v45 == v47, 1, v114, 0, 1, v111, v110, v55, v52, v115, v117, v56);
        uint64_t v68 = sub_1AC7D0();
        *(void *)(v0 + 600) = v68;
        sub_A340();
        uint64_t v69 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 16);
        *(void *)(v0 + 608) = v69;
        *(void *)(v0 + 616) = (v57 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        uint64_t v124 = v69;
        sub_47B44();
        v70();
        sub_CCD54(v114, (uint64_t)v122, (void (*)(void))type metadata accessor for GenericQueryModel);
        uint64_t v71 = (void *)sub_1AC7F0();
        os_log_type_t v72 = sub_1ACF50();
        BOOL v73 = sub_47A70(v72);
        uint64_t v74 = *(void *)(v0 + 288);
        if (v73)
        {
          uint64_t v75 = *(void *)(v0 + 280);
          uint64_t v119 = *(void *)(v0 + 208);
          uint64_t v76 = (_DWORD *)sub_A4B0();
          v131[0] = sub_E620();
          *uint64_t v76 = 136315138;
          sub_CCD54(v74, v75, (void (*)(void))type metadata accessor for GenericQueryModel);
          uint64_t v77 = sub_1ACE00();
          *(void *)(v0 + 168) = sub_4A278(v77, v78, v131);
          sub_1ACFE0();
          swift_bridgeObjectRelease();
          sub_CCDA8(v74, (void (*)(void))type metadata accessor for GenericQueryModel);
          sub_CD16C(&def_342E4, v79, v80, "Query snippet model is: %s");
          swift_arrayDestroy();
          sub_A1F0();
          sub_A1F0();

          uint64_t v81 = *(void (**)(void))(v119 + 8);
          sub_E530();
          v81();
        }
        else
        {
          uint64_t v82 = *(void *)(v0 + 208);
          sub_CCDA8(*(void *)(v0 + 288), (void (*)(void))type metadata accessor for GenericQueryModel);

          uint64_t v81 = *(void (**)(void))(v82 + 8);
          uint64_t v83 = sub_CD35C();
          ((void (*)(uint64_t))v81)(v83);
        }
        *(void *)(v0 + 624) = v81;
        uint64_t v84 = *(void *)(v0 + 232);
        uint64_t v85 = *(void *)(v0 + 200);
        sub_A340();
        uint64_t v86 = v124(v84, v68, v85);
        sub_CD36C(v86, v87, (void (*)(void))type metadata accessor for SnippetHeaderModel);
        uint64_t v88 = (void *)sub_1AC7F0();
        os_log_type_t v89 = sub_1ACF50();
        BOOL v90 = sub_47A70(v89);
        uint64_t v91 = *(void *)(v0 + 320);
        if (v90)
        {
          uint64_t v92 = (_DWORD *)sub_A4B0();
          uint64_t v93 = sub_E620();
          v131[0] = v93;
          *uint64_t v92 = 136315138;
          sub_CD438(v93, v94, (void (*)(void))type metadata accessor for SnippetHeaderModel);
          uint64_t v95 = sub_1ACE00();
          *(void *)(v0 + 160) = sub_4A278(v95, v96, v131);
          sub_1ACFE0();
          swift_bridgeObjectRelease();
          sub_CCDA8(v91, (void (*)(void))type metadata accessor for SnippetHeaderModel);
          sub_CD16C(&def_342E4, v97, v98, "Query snippet header model is: %s");
          sub_CD494();
          sub_A1F0();
          sub_A1F0();

          sub_E530();
          v99();
        }
        else
        {
          sub_CCDA8(*(void *)(v0 + 320), (void (*)(void))type metadata accessor for SnippetHeaderModel);

          uint64_t v100 = sub_CD0AC();
          ((void (*)(uint64_t))v81)(v100);
        }
        if (qword_201C18 != -1) {
          swift_once();
        }
        uint64_t v101 = *(void *)(v0 + 480);
        uint64_t v102 = *(void **)(v0 + 192);
        *(void *)(v0 + 632) = qword_2146D8;
        swift_retain();
        swift_retain();
        [v102 minimum];
        [v102 maximum];
        id v103 = [v130 symbol];
        sub_1ACDD0();

        sub_1ACE40();
        swift_bridgeObjectRelease();
        sub_47F14();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v104, v105, v106, v127);
        swift_retain();
        uint64_t v107 = (void *)swift_task_alloc();
        *(void *)(v0 + 640) = v107;
        *uint64_t v107 = v0;
        v107[1] = sub_C7A7C;
        uint64_t v134 = v101;
        BOOL v133 = v31 < 0.5;
        sub_CD470();
        return sub_D769C();
      }
      sub_E530();
      v49();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    sub_E530();
    v48();
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(v0 + 456);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_5B028(v2, &qword_201E20);
LABEL_8:
  sub_1AC7D0();
  sub_A340();
  uint64_t v3 = sub_292B8();
  v4(v3);
  uint64_t v5 = (void *)sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF60();
  if (sub_29300(v6))
  {
    uint64_t v7 = (_WORD *)sub_292A0();
    sub_29368(v7);
    sub_A7FC(&def_342E4, v8, v9, "Couldn't create data or date dialog labels or deeplink or invalid unit");
    sub_A1F0();
  }
  uint64_t v10 = *(void *)(v0 + 464);
  uint64_t v11 = *(void *)(v0 + 176);
  swift_release();

  swift_release();
  uint64_t v12 = sub_CD054();
  v13(v12);
  sub_5B028(v10, &qword_201E20);
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(void *)(v11 + 32) = 0;
  sub_CD088();
  sub_CD350();
  sub_CD4B8();
  sub_CD4AC();
  sub_CD334();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_CD470();
  return v14();
}

uint64_t sub_C7A7C()
{
  sub_7F418();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  sub_E53C();
  *os_log_type_t v6 = v5;
  *os_log_type_t v6 = *v1;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 256);
  if (v0)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_errorRelease();
    sub_5B028(v7, &qword_201E28);
  }
  else
  {
    *(void *)(v5 + 648) = v3;
    sub_5B028(v7, &qword_201E28);
    swift_release();
    swift_release();
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_C7C48()
{
  sub_47634();
  uint64_t v1 = type metadata accessor for WellnessSnippets();
  unint64_t v2 = sub_CD520(v1);
  uint64_t v3 = sub_CD3E8(v2);
  sub_CD4C4((uint64_t)v3, v4, (void (*)(void))type metadata accessor for GenericQueryModel);
  sub_CD2C8();
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 656) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_C7D24;
  sub_CD40C();
  return sub_7ADEC();
}

uint64_t sub_C7D24()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  sub_CD100();
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_C7DF0()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
  uint64_t v2 = *(void **)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 400);
  uint64_t v12 = *(void *)(v0 + 408);
  uint64_t v13 = *(void *)(v0 + 464);
  uint64_t v10 = *(void *)(v0 + 384);
  uint64_t v11 = *(void *)(v0 + 392);
  uint64_t v9 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 296);

  swift_release();
  swift_release();

  sub_CCDA8(v6, (void (*)(void))type metadata accessor for GenericQueryModel);
  sub_CCDA8(v5, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  v1(v9, v4);
  v1(v10, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v12, v11);
  sub_5B028(v13, &qword_201E20);
  sub_CD088();
  sub_CD350();
  sub_CD4B8();
  sub_CD4AC();
  sub_CD334();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v7();
}

uint64_t sub_C802C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void (*a20)(uint64_t, uint64_t),uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_CD12C();
  a35 = v37;
  a36 = v38;
  sub_CD42C();
  a34 = v36;
  double v39 = *(void (**)(uint64_t))(v36 + 608);
  sub_A340();
  uint64_t v40 = sub_470B8();
  v39(v40);
  double v41 = sub_1AC7F0();
  os_log_type_t v42 = sub_1ACF60();
  if (os_log_type_enabled(v41, v42))
  {
    sub_CD1B0();
    a10 = *(void *)(v36 + 480);
    sub_CD270(*(void *)(v36 + 408));
    uint64_t v43 = *(void *)(v36 + 336);
    uint64_t v80 = *(void *)(v36 + 328);
    uint64_t v77 = *(void *)(v36 + 296);
    a9 = *(void *)(v36 + 208);
    char v44 = *(unsigned char *)(v36 + 664);
    double v45 = (uint8_t *)sub_A4B0();
    a25 = sub_E620();
    *(_DWORD *)double v45 = 136315138;
    unint64_t v46 = sub_2F2B8(v44);
    *(void *)(v36 + 152) = sub_4A278(v46, v47, &a25);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v41, v42, "Couldn't create dialog for %s", v45, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    swift_release();
    swift_release();

    sub_E530();
    v48();
    sub_CCDA8(v77, (void (*)(void))type metadata accessor for GenericQueryModel);
    sub_CCDA8(v80, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    a20(a18, v43);
    a20(a19, v43);
    sub_B7ACC();
    v49();
  }
  else
  {
    sub_CD1B0();
    uint64_t v50 = *(void *)(v36 + 400);
    sub_CD270(*(void *)(v36 + 408));
    uint64_t v51 = *(void *)(v36 + 336);
    uint64_t v81 = *(void *)(v36 + 328);
    uint64_t v52 = *(void *)(v36 + 296);

    swift_release();
    swift_release();

    sub_E530();
    v53();
    sub_CCDA8(v52, (void (*)(void))type metadata accessor for GenericQueryModel);
    sub_CCDA8(v81, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    a20(a18, v51);
    a20(a19, v51);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(a23, a22);
  }
  sub_5B028(a24, &qword_201E20);
  uint64_t v54 = *(void *)(v36 + 176);
  *(void *)(v54 + 32) = 0;
  *(_OWORD *)uint64_t v54 = 0u;
  *(_OWORD *)(v54 + 16) = 0u;
  sub_CD088();
  uint64_t v74 = v56;
  uint64_t v75 = v55;
  uint64_t v76 = *(void *)(v36 + 320);
  uint64_t v78 = *(void *)(v36 + 312);
  sub_CD350();
  uint64_t v79 = v58;
  uint64_t v82 = v57;
  uint64_t v83 = *(void *)(v36 + 280);
  uint64_t v84 = *(void *)(v36 + 264);
  sub_CD4B8();
  uint64_t v85 = v60;
  uint64_t v86 = v59;
  sub_CD4AC();
  uint64_t v87 = v62;
  uint64_t v88 = v61;
  sub_CD334();
  uint64_t v89 = v64;
  uint64_t v90 = v63;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_A5EC();
  return v66(v65, v66, v67, v68, v69, v70, v71, v72, a9, a10, v74, v75, v76, v78, v79, v82, v83, v84, v85,
           v86,
           v87,
           v88,
           v89,
           v90,
           a25,
           a26,
           a27,
           a28);
}

uint64_t sub_C844C()
{
  sub_A364();
  *(void *)(v0 + 224) = v1;
  *(void *)(v0 + 232) = v2;
  *(unsigned char *)(v0 + 656) = v3;
  *(void *)(v0 + 216) = v4;
  uint64_t v5 = sub_1AC800();
  *(void *)(v0 + 240) = v5;
  sub_A19C(v5);
  *(void *)(v0 + 248) = v6;
  *(void *)(v0 + 256) = sub_A220();
  *(void *)(v0 + 264) = swift_task_alloc();
  *(void *)(v0 + 272) = swift_task_alloc();
  *(void *)(v0 + 280) = swift_task_alloc();
  *(void *)(v0 + 288) = swift_task_alloc();
  uint64_t v7 = sub_2694(&qword_2022D0);
  sub_53D4(v7);
  *(void *)(v0 + 296) = sub_A42C();
  uint64_t v8 = sub_2694(&qword_201E28);
  sub_53D4(v8);
  *(void *)(v0 + 304) = sub_A220();
  *(void *)(v0 + 312) = swift_task_alloc();
  *(void *)(v0 + 320) = swift_task_alloc();
  uint64_t Model = type metadata accessor for GenericQueryModel();
  *(void *)(v0 + 328) = Model;
  sub_53D4(Model);
  *(void *)(v0 + 336) = sub_A220();
  *(void *)(v0 + 344) = swift_task_alloc();
  *(void *)(v0 + 352) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SnippetHeaderModel();
  *(void *)(v0 + 360) = v10;
  sub_53D4(v10);
  *(void *)(v0 + 368) = sub_A220();
  *(void *)(v0 + 376) = swift_task_alloc();
  *(void *)(v0 + 384) = swift_task_alloc();
  uint64_t v11 = sub_1AAB10();
  *(void *)(v0 + 392) = v11;
  sub_A19C(v11);
  *(void *)(v0 + 400) = v12;
  *(void *)(v0 + 408) = sub_A42C();
  uint64_t v13 = sub_1AABD0();
  *(void *)(v0 + 416) = v13;
  sub_A19C(v13);
  *(void *)(v0 + 424) = v14;
  *(void *)(v0 + 432) = sub_A42C();
  uint64_t v15 = sub_2694(&qword_201E10);
  sub_53D4(v15);
  *(void *)(v0 + 440) = sub_A42C();
  uint64_t v16 = sub_2694(&qword_201E20);
  sub_53D4(v16);
  *(void *)(v0 + 448) = sub_A220();
  *(void *)(v0 + 456) = swift_task_alloc();
  *(void *)(v0 + 464) = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v17, v18, v19);
}

uint64_t sub_C86A8()
{
  sub_47634();
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v2 = *(void **)(v0 + 232);
  sub_CD538(v2);
  *(void *)(v0 + 472) = v3;
  sub_CD75C(v2, v1);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_C8764;
  char v5 = *(unsigned char *)(v0 + 656);
  return sub_CDCB8(v5);
}

uint64_t sub_C8764()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 488) = v3;
  *(void *)(v1 + 496) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_C8834()
{
  sub_E588();
  uint64_t v1 = *(void **)(v0 + 224);
  unsigned __int8 v2 = *(unsigned char *)(v0 + 656);
  *(void *)(v0 + 504) = sub_CE004(*(void **)(v0 + 232));
  *(void *)(v0 + 512) = sub_CE724(v2);
  *(unsigned char *)(v0 + 657) = v3;
  id v4 = [v1 start];
  uint64_t v5 = *(void *)(v0 + 440);
  if (v4)
  {
    uint64_t v6 = v4;
    uint64_t v8 = *(void *)(v0 + 424);
    uint64_t v7 = *(void *)(v0 + 432);
    uint64_t v9 = *(void *)(v0 + 416);
    sub_1AABB0();

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v5, v7, v9);
    sub_CD110(v5);
    _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v9);
  }
  else
  {
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 440), 1, 1, *(void *)(v0 + 416));
  }
  sub_5B028(*(void *)(v0 + 440), &qword_201E10);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 520) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_C89A8;
  sub_CD28C();
  return sub_7B3B8(v11, v12, v13);
}

uint64_t sub_C89A8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 528) = v3;
  *(void *)(v1 + 536) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_C8A7C()
{
  sub_A364();
  sub_2F2B8(*(unsigned char *)(v0 + 656));
  sub_CD21C();
  *(void *)(v0 + 544) = v1;
  unsigned __int8 v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 552) = v2;
  void *v2 = v0;
  v2[1] = sub_C8B14;
  sub_47E34();
  return sub_7A988();
}

uint64_t sub_C8B14()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = *v0;
  sub_E53C();
  *uint64_t v4 = v3;
  *(void *)(v6 + 560) = v5;
  *(void *)(v6 + 568) = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_C8C04()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 576) = v1;
  void *v1 = v0;
  v1[1] = sub_C8C8C;
  uint64_t v2 = sub_CD06C();
  return sub_7A658(v2, v3);
}

uint64_t sub_C8C8C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 584) = v3;
  *(void *)(v1 + 592) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_C8D60()
{
  uint64_t v122 = v0;
  if (*(void *)(v0 + 568) && *(void *)(v0 + 536))
  {
    sub_CCD04(*(void *)(v0 + 464), *(void *)(v0 + 456), &qword_201E20);
    sub_CD0DC();
    if (!v2)
    {
      uint64_t v116 = *(void *)(v0 + 592);
      uint64_t v114 = *(void *)(v0 + 584);
      uint64_t v117 = *(void *)(v0 + 512);
      uint64_t v105 = *(void *)(v0 + 496);
      uint64_t v113 = *(void *)(v0 + 488);
      uint64_t v17 = *(void *)(v0 + 400);
      uint64_t v108 = *(void *)(v0 + 408);
      uint64_t v109 = *(void *)(v0 + 448);
      uint64_t v18 = *(void *)(v0 + 384);
      uint64_t v106 = *(void *)(v0 + 392);
      uint64_t v19 = *(void *)(v0 + 360);
      uint64_t v112 = *(void *)(v0 + 352);
      uint64_t v119 = *(void *)(v0 + 344);
      uint64_t v104 = *(void *)(v0 + 320);
      uint64_t v110 = *(void *)(v0 + 296);
      uint64_t v20 = *(void *)(v0 + 248);
      uint64_t v21 = *(void **)(v0 + 232);
      char v111 = *(unsigned char *)(v0 + 657) & 1;
      char v22 = *(unsigned char *)(v0 + 656);
      sub_5572C();
      v23();
      sub_1ACE40();
      swift_bridgeObjectRelease();
      unint64_t v24 = sub_34250(v22);
      unint64_t v26 = v25;
      unint64_t v27 = sub_2F2B8(v22);
      id v28 = (unint64_t *)(v18 + *(int *)(v19 + 20));
      unint64_t *v28 = v24;
      v28[1] = v26;
      uint64_t v29 = (unint64_t *)(v18 + *(int *)(v19 + 24));
      *uint64_t v29 = v27;
      v29[1] = v30;
      [v21 maximum];
      uint64_t v31 = sub_CD3AC();
      sub_CD228(v31, v32);
      sub_70548();
      [v21 minimum];
      uint64_t v33 = sub_CD3AC();
      sub_CD228(v33, v34);
      sub_70548();
      [v21 mostRecent];
      uint64_t v35 = sub_CD3AC();
      sub_CD228(v35, v36);
      sub_70548();
      [v21 total];
      uint64_t v37 = sub_CD3AC();
      sub_CD228(v37, v38);
      sub_70548();
      swift_bridgeObjectRetain();
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v39 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v104, 0, 1, v39);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v109, v108, v106);
      sub_47F14();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v40, v41, v42, v106);
      sub_CCD54(v18, v110, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v110, 0, 1, v19);
      sub_15D5E4(v117, v111, 0, 0, 0, v112, v1, 0, v113, v105, v104, v109, v114, v116, v110);
      *(void *)(v0 + 600) = sub_1AC7D0();
      sub_A340();
      uint64_t v43 = *(void (**)(void))(v20 + 16);
      *(void *)(v0 + 608) = v43;
      *(void *)(v0 + 616) = (v20 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      sub_47B44();
      v43();
      sub_CCD54(v112, v119, (void (*)(void))type metadata accessor for GenericQueryModel);
      char v44 = (void *)sub_1AC7F0();
      os_log_type_t v45 = sub_1ACF50();
      BOOL v46 = sub_47A70(v45);
      uint64_t v47 = *(void *)(v0 + 344);
      uint64_t v107 = v39;
      if (v46)
      {
        uint64_t v48 = *(void *)(v0 + 336);
        uint64_t v118 = *(void *)(v0 + 248);
        uint64_t v49 = (_DWORD *)swift_slowAlloc();
        v121[0] = sub_E620();
        *uint64_t v49 = 136315138;
        sub_CCD54(v47, v48, (void (*)(void))type metadata accessor for GenericQueryModel);
        uint64_t v50 = sub_1ACE00();
        *(void *)(v0 + 208) = sub_4A278(v50, v51, v121);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        sub_CCDA8(v47, (void (*)(void))type metadata accessor for GenericQueryModel);
        sub_76694(&def_342E4, v52, v53, "Query snippet model is: %s");
        sub_6FA28();
        sub_A1F0();
        sub_A1F0();

        uint64_t v54 = *(void (**)(void))(v118 + 8);
        sub_E530();
        v54();
      }
      else
      {
        uint64_t v55 = *(void *)(v0 + 248);
        sub_CCDA8(v47, (void (*)(void))type metadata accessor for GenericQueryModel);

        uint64_t v54 = *(void (**)(void))(v55 + 8);
        uint64_t v56 = sub_CD35C();
        ((void (*)(uint64_t))v54)(v56);
      }
      *(void *)(v0 + 624) = v54;
      sub_A340();
      sub_47B44();
      uint64_t v57 = ((uint64_t (*)(void))v43)();
      sub_CD36C(v57, v58, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      uint64_t v59 = (void *)sub_1AC7F0();
      os_log_type_t v60 = sub_1ACF50();
      BOOL v61 = sub_47A70(v60);
      uint64_t v62 = v54;
      uint64_t v63 = *(void *)(v0 + 376);
      uint64_t v120 = v62;
      if (v61)
      {
        uint64_t v64 = *(void *)(v0 + 368);
        uint64_t v65 = (_DWORD *)sub_A4B0();
        v121[0] = sub_E620();
        *uint64_t v65 = 136315138;
        sub_CCD54(v63, v64, (void (*)(void))type metadata accessor for SnippetHeaderModel);
        uint64_t v66 = sub_1ACE00();
        *(void *)(v0 + 200) = sub_4A278(v66, v67, v121);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        sub_CCDA8(v63, (void (*)(void))type metadata accessor for SnippetHeaderModel);
        sub_76694(&def_342E4, v68, v69, "Query snippet header model is: %s");
        sub_6FA28();
        sub_A1F0();
        sub_A1F0();

        uint64_t v70 = v120;
      }
      else
      {
        uint64_t v70 = v62;
        sub_CCDA8(*(void *)(v0 + 376), (void (*)(void))type metadata accessor for SnippetHeaderModel);
      }
      sub_E530();
      v70();
      sub_A340();
      sub_47B44();
      v43();
      swift_retain_n();
      uint64_t v71 = sub_1AC7F0();
      os_log_type_t v72 = sub_1ACF50();
      BOOL v73 = sub_47A70(v72);
      uint64_t v74 = *(void *)(v0 + 472);
      if (v73)
      {
        uint64_t v75 = (uint8_t *)sub_A4B0();
        v121[0] = sub_E620();
        *(_DWORD *)uint64_t v75 = 136315138;
        *(void *)(v0 + 184) = v74;
        type metadata accessor for WellnessTime(0);
        swift_retain();
        sub_A7C4();
        uint64_t v76 = sub_1ACE00();
        *(void *)(v0 + 192) = sub_4A278(v76, v77, v121);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&def_342E4, v71, (os_log_type_t)v105, "Query snippet wellness time is: %s", v75, 0xCu);
        sub_CD494();
        sub_A1F0();
        sub_A1F0();

        sub_E530();
        v78();
      }
      else
      {
        swift_release_n();

        uint64_t v79 = sub_CD0AC();
        ((void (*)(uint64_t))v70)(v79);
      }
      uint64_t v80 = *(void *)(v0 + 352);
      uint64_t v81 = *(int **)(v0 + 328);
      uint64_t v82 = (uint64_t *)(v80 + v81[6]);
      uint64_t v115 = *v82;
      char v83 = *((unsigned char *)v82 + 8);
      uint64_t v84 = (uint64_t *)(v80 + v81[5]);
      uint64_t v85 = *v84;
      char v86 = *((unsigned char *)v84 + 8);
      uint64_t v87 = *(void *)(v0 + 312);
      if (*(void *)(v80 + v81[16] + 8))
      {
        swift_retain();
        swift_bridgeObjectRetain();
        sub_1ACE40();
        swift_bridgeObjectRelease();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v87, 0, 1, v107);
      }
      else
      {
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 312), 1, 1, v107);
        swift_retain();
      }
      uint64_t v88 = *(void *)(v0 + 504);
      swift_retain();
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v89 = sub_CD1D0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v89, v90, v91, v107);
      uint64_t v92 = (void *)swift_task_alloc();
      *(void *)(v0 + 632) = v92;
      *uint64_t v92 = v0;
      v92[1] = sub_C9974;
      uint64_t v94 = *(void *)(v0 + 304);
      uint64_t v93 = *(void *)(v0 + 312);
      uint64_t v131 = v88;
      uint64_t v132 = v94;
      uint64_t v130 = v93;
      char v129 = 1;
      uint64_t v128 = 0;
      char v127 = v86;
      uint64_t v126 = v85;
      char v125 = v83;
      uint64_t v124 = v115;
      sub_CD3C4();
      return sub_1422AC(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    uint64_t v3 = *(void *)(v0 + 456);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_5B028(v3, &qword_201E20);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1AC7D0();
  sub_A340();
  uint64_t v4 = sub_292B8();
  v5(v4);
  uint64_t v6 = (void *)sub_1AC7F0();
  os_log_type_t v7 = sub_1ACF60();
  if (sub_29300(v7))
  {
    uint64_t v8 = (_WORD *)sub_292A0();
    sub_29368(v8);
    sub_A7FC(&def_342E4, v9, v10, "Couldn't create data or date dialog labels or deeplink");
    sub_A1F0();
  }
  uint64_t v11 = *(void *)(v0 + 464);
  uint64_t v12 = *(void *)(v0 + 216);
  swift_release();

  swift_release();
  uint64_t v13 = sub_CD054();
  v14(v13);
  sub_5B028(v11, &qword_201E20);
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(void *)(v12 + 32) = 0;
  sub_CD350();
  sub_CD3A0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v15();
}

uint64_t sub_C9974()
{
  sub_E588();
  sub_46F18();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v7 + 640) = v6;
  swift_task_dealloc();
  swift_release();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  sub_CD508();
  sub_CD4F0();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_C9AF4()
{
  uint64_t v26 = v0;
  if (!*(void *)(v0 + 640))
  {
    uint64_t v7 = *(void (**)(uint64_t))(v0 + 608);
    sub_A340();
    uint64_t v8 = sub_470B8();
    v7(v8);
    uint64_t v9 = sub_1AC7F0();
    os_log_type_t v10 = sub_1ACF60();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void (**)(void))(v0 + 624);
    uint64_t v13 = *(void *)(v0 + 464);
    uint64_t v14 = *(void *)(v0 + 384);
    uint64_t v15 = *(void *)(v0 + 352);
    if (v11)
    {
      char v16 = *(unsigned char *)(v0 + 656);
      uint64_t v17 = (uint8_t *)sub_A4B0();
      uint64_t v25 = sub_E620();
      *(_DWORD *)uint64_t v17 = 136315138;
      unint64_t v18 = sub_2F2B8(v16);
      *(void *)(v0 + 176) = sub_4A278(v18, v19, &v25);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v9, v10, "Couldn't create dialog for %s", v17, 0xCu);
      sub_CD2FC();
      sub_A1F0();
      sub_A1F0();

      swift_release();
      swift_release();
      sub_E530();
      v20();
      sub_CCDA8(v15, (void (*)(void))type metadata accessor for GenericQueryModel);
      sub_CCDA8(v14, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      sub_CD400();
      v21();
    }
    else
    {

      swift_release();
      swift_release();
      sub_E530();
      v12();
      sub_CCDA8(v15, (void (*)(void))type metadata accessor for GenericQueryModel);
      sub_CCDA8(v14, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      sub_CD400();
      v22();
    }
    sub_5B028(v13, &qword_201E20);
    sub_CCFD8();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_CD2D4();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v1 = *(void *)(v0 + 352);
  *(void *)(v0 + 40) = type metadata accessor for WellnessSnippets();
  *(void *)(v0 + 48) = sub_24F2C();
  uint64_t v2 = sub_B5B0((uint64_t *)(v0 + 16));
  sub_CCD54(v1, (uint64_t)v2, (void (*)(void))type metadata accessor for GenericQueryModel);
  swift_storeEnumTagMultiPayload();
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 648) = v3;
  *uint64_t v3 = v4;
  v3[1] = sub_C9F18;
  sub_CD2D4();
  return sub_7ADEC();
}

uint64_t sub_C9F18()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  sub_CD100();
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_C9FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_6FF4C();
  sub_6FF30();
  uint64_t v23 = (void *)v22[80];
  uint64_t v24 = v22[58];
  uint64_t v25 = v22[48];
  uint64_t v26 = v22[44];
  swift_release();
  swift_release();

  sub_CCDA8(v26, (void (*)(void))type metadata accessor for GenericQueryModel);
  sub_CCDA8(v25, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v27 = sub_A7C4();
  v28(v27);
  sub_5B028(v24, &qword_201E20);
  uint64_t v38 = v22[43];
  uint64_t v39 = v22[42];
  uint64_t v40 = v22[40];
  uint64_t v41 = v22[39];
  uint64_t v42 = v22[38];
  uint64_t v43 = v22[37];
  uint64_t v44 = v22[36];
  uint64_t v45 = v22[35];
  uint64_t v46 = v22[34];
  uint64_t v47 = v22[33];
  uint64_t v48 = v22[32];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_6FED4();
  return v30(v29, v30, v31, v32, v33, v34, v35, v36, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48,
           a20,
           a21,
           a22);
}

void sub_CA1C0()
{
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 608);
  sub_A340();
  uint64_t v2 = sub_470B8();
  v1(v2);
  uint64_t v3 = sub_1AC7F0();
  os_log_type_t v4 = sub_1ACF60();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v21 = *(void *)(v0 + 464);
    uint64_t v17 = *(void *)(v0 + 384);
    uint64_t v16 = *(void *)(v0 + 352);
    char v5 = *(unsigned char *)(v0 + 656);
    uint64_t v6 = (uint8_t *)sub_A4B0();
    uint64_t v22 = sub_E620();
    *(_DWORD *)uint64_t v6 = 136315138;
    unint64_t v7 = sub_2F2B8(v5);
    *(void *)(v0 + 176) = sub_4A278(v7, v8, &v22);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v3, v4, "Couldn't create dialog for %s", v6, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    swift_release();
    swift_release();
    sub_E530();
    v9();
    sub_CCDA8(v16, (void (*)(void))type metadata accessor for GenericQueryModel);
    sub_CCDA8(v17, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_CD400();
    v10();
  }
  else
  {
    BOOL v11 = *(void (**)(void))(v0 + 624);
    uint64_t v12 = *(void *)(v0 + 400);
    uint64_t v20 = *(void *)(v0 + 408);
    uint64_t v21 = *(void *)(v0 + 464);
    uint64_t v18 = *(void *)(v0 + 384);
    uint64_t v19 = *(void *)(v0 + 392);
    uint64_t v13 = *(void *)(v0 + 352);

    swift_release();
    swift_release();
    sub_E530();
    v11();
    sub_CCDA8(v13, (void (*)(void))type metadata accessor for GenericQueryModel);
    sub_CCDA8(v18, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v20, v19);
  }
  sub_5B028(v21, &qword_201E20);
  sub_CCFD8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_CD2D4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_CA538()
{
  sub_A364();
  *(void *)(v0 + 232) = v1;
  *(void *)(v0 + 240) = v2;
  *(unsigned char *)(v0 + 664) = v3;
  *(void *)(v0 + 224) = v4;
  uint64_t v5 = sub_1AC800();
  *(void *)(v0 + 248) = v5;
  sub_A19C(v5);
  *(void *)(v0 + 256) = v6;
  *(void *)(v0 + 264) = sub_A220();
  *(void *)(v0 + 272) = swift_task_alloc();
  *(void *)(v0 + 280) = swift_task_alloc();
  *(void *)(v0 + 288) = swift_task_alloc();
  *(void *)(v0 + 296) = swift_task_alloc();
  uint64_t v7 = sub_2694(&qword_2022D0);
  sub_53D4(v7);
  *(void *)(v0 + 304) = sub_A42C();
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  *(void *)(v0 + 312) = Model;
  sub_53D4(Model);
  *(void *)(v0 + 320) = sub_A220();
  *(void *)(v0 + 328) = swift_task_alloc();
  *(void *)(v0 + 336) = swift_task_alloc();
  *(void *)(v0 + 344) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  *(void *)(v0 + 352) = v9;
  sub_53D4(v9);
  *(void *)(v0 + 360) = sub_A220();
  *(void *)(v0 + 368) = swift_task_alloc();
  *(void *)(v0 + 376) = swift_task_alloc();
  uint64_t v10 = sub_1AC1E0();
  *(void *)(v0 + 384) = v10;
  sub_A19C(v10);
  *(void *)(v0 + 392) = v11;
  *(void *)(v0 + 400) = sub_A42C();
  uint64_t v12 = sub_1AAB10();
  *(void *)(v0 + 408) = v12;
  sub_A19C(v12);
  *(void *)(v0 + 416) = v13;
  *(void *)(v0 + 424) = sub_A42C();
  uint64_t v14 = sub_1AABD0();
  *(void *)(v0 + 432) = v14;
  sub_A19C(v14);
  *(void *)(v0 + 440) = v15;
  *(void *)(v0 + 448) = sub_A42C();
  uint64_t v16 = sub_2694(&qword_201E10);
  sub_53D4(v16);
  *(void *)(v0 + 456) = sub_A42C();
  uint64_t v17 = sub_2694(&qword_201E28);
  sub_53D4(v17);
  *(void *)(v0 + 464) = sub_A220();
  *(void *)(v0 + 472) = swift_task_alloc();
  *(void *)(v0 + 480) = swift_task_alloc();
  *(void *)(v0 + 488) = swift_task_alloc();
  *(void *)(v0 + 496) = swift_task_alloc();
  *(void *)(v0 + 504) = swift_task_alloc();
  uint64_t v18 = sub_2694(&qword_201E20);
  sub_53D4(v18);
  *(void *)(v0 + 512) = sub_A220();
  *(void *)(v0 + 520) = swift_task_alloc();
  *(void *)(v0 + 528) = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v19, v20, v21);
}

uint64_t sub_CA7F4()
{
  sub_7F418();
  uint64_t v1 = *(void *)(v0 + 528);
  uint64_t v2 = *(void **)(v0 + 240);
  sub_CD538(v2);
  *(void *)(v0 + 536) = v3;
  sub_CD75C(v2, v1);
  uint64_t v4 = sub_A7254(v2);
  sub_170F24(v4, v5);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
  }
  uint64_t v10 = *(void **)(v0 + 232);
  uint64_t v9 = *(void **)(v0 + 240);
  char v11 = *(unsigned char *)(v0 + 664);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 504), v8, 1, *(void *)(v0 + 384));
  *(void *)(v0 + 544) = sub_CE004(v2);
  *(void *)(v0 + 552) = sub_CC704(v11, v9);
  *(unsigned char *)(v0 + 665) = v12;
  id v13 = [v10 start];
  if (v13)
  {
    uint64_t v16 = v13;
    sub_1AABB0();

    uint64_t v17 = sub_CD0C0();
    v18(v17);
    sub_CCF9C();
  }
  else
  {
    sub_CD1E0(0, v14, v15, *(void *)(v0 + 432));
  }
  sub_5B028(*(void *)(v0 + 456), &qword_201E10);
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 560) = v19;
  void *v19 = v0;
  v19[1] = sub_CA9A8;
  uint64_t v20 = sub_CD19C();
  return sub_7B3B8(v20, v21, v22);
}

uint64_t sub_CA9A8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 568) = v3;
  *(void *)(v1 + 576) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_CAA7C()
{
  sub_A364();
  sub_2F2B8(*(unsigned char *)(v0 + 664));
  sub_CD21C();
  *(void *)(v0 + 584) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 592) = v2;
  void *v2 = v0;
  v2[1] = sub_CAB14;
  sub_47E34();
  return sub_7A988();
}

uint64_t sub_CAB14()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = *v0;
  sub_E53C();
  *uint64_t v4 = v3;
  *(void *)(v6 + 600) = v5;
  *(void *)(v6 + 608) = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_CAC04()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 616) = v1;
  void *v1 = v0;
  v1[1] = sub_CAC8C;
  uint64_t v2 = sub_CD06C();
  return sub_7A658(v2, v3);
}

uint64_t sub_CAC8C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 624) = v3;
  *(void *)(v1 + 632) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_CAD60()
{
  if (!*(void *)(v0 + 608) || !*(void *)(v0 + 576))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_10:
    sub_1AC7D0();
    sub_A340();
    uint64_t v10 = sub_292B8();
    v11(v10);
    uint64_t v12 = (void *)sub_1AC7F0();
    os_log_type_t v13 = sub_1ACF60();
    if (sub_29300(v13))
    {
      uint64_t v14 = (_WORD *)sub_292A0();
      sub_29368(v14);
      sub_A7FC(&def_342E4, v15, v16, "Couldn't create data or date dialog labels or deeplink");
      sub_A1F0();
    }
    uint64_t v17 = *(void *)(v0 + 528);
    uint64_t v18 = *(void *)(v0 + 504);
    uint64_t v20 = *(void *)(v0 + 256);
    uint64_t v19 = *(void *)(v0 + 264);
    uint64_t v21 = *(void *)(v0 + 248);
    uint64_t v22 = *(void *)(v0 + 224);
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    sub_5B028(v18, &qword_201E28);
    sub_5B028(v17, &qword_201E20);
    *(_OWORD *)uint64_t v22 = 0u;
    *(_OWORD *)(v22 + 16) = 0u;
    *(void *)(v22 + 32) = 0;
    sub_CD148();
    sub_CD350();
    sub_CD3A0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    return v23();
  }
  sub_CCD04(*(void *)(v0 + 528), *(void *)(v0 + 520), &qword_201E20);
  sub_CD0DC();
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 520);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = &qword_201E20;
LABEL_9:
    sub_5B028(v2, v3);
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)(v0 + 496);
  uint64_t v5 = *(void *)(v0 + 504);
  uint64_t v6 = *(void *)(v0 + 384);
  sub_5572C();
  v7();
  sub_CCD04(v5, v4, &qword_201E28);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1, v6);
  if (v8 == 1)
  {
    uint64_t v2 = *(void *)(v0 + 496);
    sub_E530();
    v9();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = &qword_201E28;
    goto LABEL_9;
  }
  uint64_t v71 = *(void *)(v0 + 624);
  uint64_t v72 = *(void *)(v0 + 632);
  uint64_t v75 = *(void *)(v0 + 536);
  uint64_t v69 = *(void *)(v0 + 512);
  uint64_t v63 = *(void *)(v0 + 488);
  uint64_t v64 = *(void *)(v0 + 480);
  uint64_t v73 = *(void *)(v0 + 472);
  uint64_t v74 = *(void *)(v0 + 464);
  uint64_t v65 = *(void *)(v0 + 416);
  uint64_t v66 = *(void *)(v0 + 408);
  uint64_t v67 = *(void *)(v0 + 424);
  uint64_t v62 = *(void *)(v0 + 392);
  uint64_t v25 = *(void *)(v0 + 376);
  uint64_t v27 = *(void *)(v0 + 344);
  uint64_t v26 = *(void *)(v0 + 352);
  uint64_t v68 = *(void *)(v0 + 304);
  id v28 = *(void **)(v0 + 240);
  char v70 = *(unsigned char *)(v0 + 665) & 1;
  char v29 = *(unsigned char *)(v0 + 664);
  sub_5572C();
  v30();
  sub_1ACE40();
  swift_bridgeObjectRelease();
  unint64_t v31 = sub_34250(v29);
  unint64_t v33 = v32;
  unint64_t v34 = sub_2F2B8(v29);
  uint64_t v35 = (unint64_t *)(v25 + *(int *)(v26 + 20));
  *uint64_t v35 = v31;
  v35[1] = v33;
  uint64_t v36 = (unint64_t *)(v25 + *(int *)(v26 + 24));
  *uint64_t v36 = v34;
  v36[1] = v37;
  [v28 maximum];
  uint64_t v38 = sub_A7254(v28);
  sub_CD258(v38, v39);
  swift_bridgeObjectRelease();
  [v28 minimum];
  uint64_t v40 = sub_A7254(v28);
  sub_CD258(v40, v41);
  swift_bridgeObjectRelease();
  [v28 mostRecent];
  uint64_t v42 = sub_A7254(v28);
  uint64_t v44 = sub_CD258(v42, v43);
  swift_bridgeObjectRelease();
  uint64_t v61 = sub_CC87C(v29, v75, v28);
  char v60 = v45 & 1;
  uint64_t v46 = *(void (**)(void))(v62 + 16);
  sub_CD244();
  v46();
  sub_CD110(v63);
  sub_1ACE40();
  swift_bridgeObjectRelease();
  sub_CD110(v64);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v69, v67, v66);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v69, 0, 1, v66);
  sub_CCD54(v25, v68, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v47 = sub_CD1D0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v47, v48, v49, v26);
  sub_FD8F4(v70, 0, 0, v44, 0, v27, v61, v60, v63, v64, v69, v71, v72, v68);
  sub_CD244();
  v46();
  sub_CD110(v73);
  sub_CD244();
  v46();
  sub_CD110(v74);
  swift_retain();
  swift_retain();
  uint64_t v50 = (void *)swift_task_alloc();
  *(void *)(v0 + 640) = v50;
  *uint64_t v50 = v0;
  v50[1] = sub_CB4F0;
  sub_CD3C4();
  return sub_1422AC(v51, v52, v53, v54, v55, v56, v57, v58);
}

uint64_t sub_CB4F0()
{
  sub_E588();
  sub_46F18();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v7 + 648) = v6;
  swift_task_dealloc();
  swift_release();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  sub_CD508();
  sub_CD4F0();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_CB670(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t type, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_CD12C();
  a35 = v37;
  a36 = v38;
  sub_CD42C();
  a34 = v36;
  if (*(void *)(v36 + 648))
  {
    uint64_t v40 = *(void *)(v36 + 336);
    uint64_t v39 = *(void *)(v36 + 344);
    uint64_t v41 = *(void *)(v36 + 296);
    uint64_t v42 = *(void *)(v36 + 248);
    uint64_t v43 = *(void *)(v36 + 256);
    uint64_t v44 = sub_1AC7D0();
    sub_A340();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v41, v44, v42);
    sub_CCD54(v39, v40, (void (*)(void))type metadata accessor for TemperatureQueryModel);
    char v45 = sub_1AC7F0();
    os_log_type_t v46 = sub_1ACF50();
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v48 = *(void *)(v36 + 336);
    if (v47)
    {
      uint64_t v49 = *(void *)(v36 + 328);
      uint64_t v50 = *(void *)(v36 + 256);
      char v51 = (uint8_t *)sub_A4B0();
      a25 = sub_E620();
      *(_DWORD *)char v51 = 136315138;
      sub_CCD54(v48, v49, (void (*)(void))type metadata accessor for TemperatureQueryModel);
      uint64_t v52 = sub_1ACE00();
      *(void *)(v36 + 216) = sub_4A278(v52, v53, &a25);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      sub_CCDA8(v48, (void (*)(void))type metadata accessor for TemperatureQueryModel);
      _os_log_impl(&def_342E4, v45, v46, "Query snippet model is: %s", v51, 0xCu);
      sub_CD318();
      sub_A1F0();
      sub_A1F0();

      char v54 = *(void (**)(void))(v50 + 8);
      sub_E530();
      v54();
    }
    else
    {
      uint64_t v73 = *(void *)(v36 + 256);
      sub_CCDA8(*(void *)(v36 + 336), (void (*)(void))type metadata accessor for TemperatureQueryModel);

      char v54 = *(void (**)(void))(v73 + 8);
      uint64_t v74 = sub_CD35C();
      ((void (*)(uint64_t))v54)(v74);
    }
    sub_A340();
    uint64_t v75 = sub_CD1FC();
    uint64_t v77 = v76(v75);
    sub_CD36C(v77, v78, (void (*)(void))type metadata accessor for TemperatureQueryModel);
    uint64_t v79 = sub_1AC7F0();
    os_log_type_t v80 = sub_1ACF50();
    BOOL v81 = os_log_type_enabled(v79, v80);
    uint64_t v82 = *(void *)(v36 + 320);
    if (v81)
    {
      char v83 = v54;
      uint64_t v84 = *(void *)(v36 + 312);
      uint64_t v85 = (uint8_t *)sub_A4B0();
      uint64_t v86 = sub_E620();
      *(_DWORD *)uint64_t v85 = 136315138;
      a25 = v86;
      uint64_t v87 = *(int *)(v84 + 60);
      char v54 = v83;
      *(_OWORD *)(v36 + 176) = *(_OWORD *)(v82 + v87);
      sub_2694(&qword_2032A8);
      uint64_t v88 = sub_1ACFC0();
      *(void *)(v36 + 208) = sub_4A278(v88, v89, &a25);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      sub_CCDA8(v82, (void (*)(void))type metadata accessor for TemperatureQueryModel);
      _os_log_impl(&def_342E4, v79, v80, "Basal temp is: %s", v85, 0xCu);
      sub_CD318();
      sub_A1F0();
      sub_A1F0();
    }
    else
    {
      sub_CCDA8(*(void *)(v36 + 320), (void (*)(void))type metadata accessor for TemperatureQueryModel);
    }

    sub_E530();
    v54();
    sub_A340();
    uint64_t v90 = sub_CD1FC();
    uint64_t v92 = v91(v90);
    sub_CD36C(v92, v93, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    uint64_t v94 = (void *)sub_1AC7F0();
    os_log_type_t v95 = sub_1ACF50();
    BOOL v96 = sub_47A70(v95);
    uint64_t v97 = *(void *)(v36 + 368);
    if (v96)
    {
      char v98 = (_DWORD *)sub_A4B0();
      uint64_t v99 = sub_E620();
      a25 = v99;
      *char v98 = 136315138;
      sub_CD438(v99, v100, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      uint64_t v101 = sub_1ACE00();
      *(void *)(v36 + 192) = sub_4A278(v101, v102, &a25);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      sub_CCDA8(v97, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      sub_76694(&def_342E4, v103, v104, "Query snippet header model is: %s");
      sub_CD318();
      sub_A1F0();
      sub_A1F0();

      sub_E530();
      v105();
    }
    else
    {
      sub_CCDA8(*(void *)(v36 + 368), (void (*)(void))type metadata accessor for SnippetHeaderModel);

      uint64_t v106 = sub_CD0AC();
      ((void (*)(uint64_t))v54)(v106);
    }
    uint64_t v107 = type metadata accessor for WellnessSnippets();
    unint64_t v108 = sub_CD520(v107);
    uint64_t v109 = sub_CD3E8(v108);
    sub_CD4C4((uint64_t)v109, v110, (void (*)(void))type metadata accessor for TemperatureQueryModel);
    sub_CD2C8();
    swift_storeEnumTagMultiPayload();
    char v111 = (void *)swift_task_alloc();
    *(void *)(v36 + 656) = v111;
    *char v111 = v36;
    v111[1] = sub_CC028;
    sub_CD40C();
    sub_A5EC();
    return sub_7ADEC();
  }
  else
  {
    sub_1AC7D0();
    sub_A340();
    uint64_t v55 = sub_292B8();
    v56(v55);
    uint64_t v57 = sub_1AC7F0();
    os_log_type_t v58 = sub_1ACF60();
    LODWORD(type) = v58;
    BOOL v59 = os_log_type_enabled(v57, v58);
    uint64_t v126 = *(void *)(v36 + 544);
    uint64_t v127 = *(void *)(v36 + 536);
    uint64_t v60 = *(void *)(v36 + 528);
    uint64_t v61 = *(void *)(v36 + 504);
    uint64_t v62 = *(void *)(v36 + 424);
    uint64_t v63 = *(void *)(v36 + 392);
    uint64_t v129 = *(void *)(v36 + 384);
    uint64_t v130 = *(void *)(v36 + 400);
    uint64_t v64 = *(void *)(v36 + 376);
    uint64_t v128 = *(void *)(v36 + 344);
    uint64_t v124 = *(void *)(v36 + 248);
    uint64_t v125 = *(void *)(v36 + 272);
    if (v59)
    {
      a12 = *(void *)(v36 + 392);
      a13 = *(void *)(v36 + 416);
      char v65 = *(unsigned char *)(v36 + 664);
      a14 = *(void *)(v36 + 528);
      uint64_t v66 = (uint8_t *)sub_A4B0();
      a11 = v61;
      a25 = sub_E620();
      a10 = v62;
      *(_DWORD *)uint64_t v66 = 136315138;
      unint64_t v67 = sub_2F2B8(v65);
      *(void *)(v36 + 200) = sub_4A278(v67, v68, &a25);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v57, (os_log_type_t)type, "Couldn't create dialog for %s", v66, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      swift_release();
      swift_release();
      sub_B7ACC();
      v69();
      sub_CCDA8(v128, (void (*)(void))type metadata accessor for TemperatureQueryModel);
      sub_CCDA8(v64, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      sub_E558();
      v70();
      sub_E558();
      v71();
      sub_5B028(v61, &qword_201E28);
      uint64_t v72 = a14;
    }
    else
    {

      swift_release();
      swift_release();
      sub_B7ACC();
      v114();
      sub_CCDA8(v128, (void (*)(void))type metadata accessor for TemperatureQueryModel);
      sub_CCDA8(v64, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v130, v129);
      sub_47814();
      v115();
      sub_5B028(v61, &qword_201E28);
      uint64_t v72 = v60;
    }
    sub_5B028(v72, &qword_201E20);
    sub_CCF04();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_A5EC();
    return v117(v116, v117, v118, v119, v120, v121, v122, v123, a9, a10, a11, a12, a13, a14, type, v124, v125, v126, v127,
             v36 + 208,
             v36 + 200,
             v128,
             v129,
             v130,
             a25,
             a26,
             a27,
             a28);
  }
}

uint64_t sub_CC028()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  sub_CD100();
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_CC0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_CD12C();
  sub_CD42C();
  char v29 = (void *)v28[81];
  uint64_t v61 = v28[63];
  uint64_t v63 = v28[66];
  uint64_t v30 = v28[47];
  uint64_t v31 = v28[43];
  swift_release();
  swift_release();

  sub_CCDA8(v31, (void (*)(void))type metadata accessor for TemperatureQueryModel);
  sub_CCDA8(v30, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_47814();
  v32();
  sub_CD2F0();
  v33();
  sub_5B028(v61, &qword_201E28);
  sub_5B028(v63, &qword_201E20);
  sub_CD148();
  uint64_t v47 = v35;
  uint64_t v48 = v34;
  uint64_t v49 = v28[50];
  uint64_t v50 = v28[47];
  uint64_t v51 = v28[46];
  uint64_t v52 = v28[45];
  uint64_t v53 = v28[43];
  uint64_t v54 = v28[42];
  uint64_t v55 = v28[41];
  uint64_t v56 = v28[40];
  uint64_t v57 = v28[38];
  uint64_t v58 = v28[37];
  uint64_t v59 = v28[36];
  sub_CD3A0();
  uint64_t v60 = v37;
  uint64_t v62 = v36;
  uint64_t v64 = v28[33];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_A5EC();
  return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56,
           v57,
           v58,
           v59,
           v60,
           v62,
           v64,
           a26,
           a27,
           a28);
}

uint64_t sub_CC334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_CD12C();
  a35 = v37;
  a36 = v38;
  sub_CD42C();
  a34 = v36;
  sub_1AC7D0();
  sub_A340();
  uint64_t v39 = sub_292B8();
  v40(v39);
  uint64_t v41 = sub_1AC7F0();
  os_log_type_t v42 = sub_1ACF60();
  if (os_log_type_enabled(v41, v42))
  {
    a14 = *(void *)(v36 + 544);
    a15 = *(void *)(v36 + 536);
    uint64_t v68 = *(void *)(v36 + 504);
    uint64_t v69 = *(void *)(v36 + 528);
    uint64_t v66 = *(void *)(v36 + 408);
    uint64_t v67 = *(void *)(v36 + 424);
    uint64_t v64 = *(void *)(v36 + 400);
    uint64_t v65 = *(void *)(v36 + 416);
    a17 = *(void *)(v36 + 376);
    uint64_t v63 = *(void *)(v36 + 384);
    a16 = *(void *)(v36 + 344);
    a12 = *(void *)(v36 + 248);
    a13 = *(void *)(v36 + 272);
    char v43 = *(unsigned char *)(v36 + 664);
    uint64_t v44 = (uint8_t *)sub_A4B0();
    a25 = sub_E620();
    *(_DWORD *)uint64_t v44 = 136315138;
    unint64_t v45 = sub_2F2B8(v43);
    *(void *)(v36 + 200) = sub_4A278(v45, v46, &a25);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v41, v42, "Couldn't create dialog for %s", v44, 0xCu);
    sub_6FA28();
    sub_A1F0();
    sub_A1F0();

    swift_release();
    swift_release();
    sub_CD2F0();
    v47();
    sub_CCDA8(a16, (void (*)(void))type metadata accessor for TemperatureQueryModel);
    sub_CCDA8(a17, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_47814();
    v48();
    sub_E558();
    v49();
  }
  else
  {
    uint64_t v68 = *(void *)(v36 + 504);
    uint64_t v69 = *(void *)(v36 + 528);
    uint64_t v50 = *(void *)(v36 + 416);
    uint64_t v66 = *(void *)(v36 + 408);
    uint64_t v67 = *(void *)(v36 + 424);
    uint64_t v51 = *(void *)(v36 + 392);
    uint64_t v64 = *(void *)(v36 + 384);
    uint64_t v65 = *(void *)(v36 + 400);
    uint64_t v63 = *(void *)(v36 + 376);
    uint64_t v52 = *(void *)(v36 + 344);

    swift_release();
    swift_release();
    sub_CD400();
    v53();
    sub_CCDA8(v52, (void (*)(void))type metadata accessor for TemperatureQueryModel);
    sub_CCDA8(v63, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v65, v64);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v67, v66);
  }
  sub_5B028(v68, &qword_201E28);
  sub_5B028(v69, &qword_201E20);
  sub_CCF04();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_A5EC();
  return v55(v54, v55, v56, v57, v58, v59, v60, v61, a9, a10, a11, a12, a13, a14, a15, a16, a17, v63, v64,
           v65,
           v66,
           v67,
           v68,
           v69,
           a25,
           a26,
           a27,
           a28);
}

uint64_t sub_CC704(char a1, void *a2)
{
  if (sub_2F2B8(a1) == 0xD000000000000027 && v4 == 0x80000000001B8D80)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  char v5 = sub_1AD2F0();
  swift_bridgeObjectRelease();
  if (v5)
  {
LABEL_5:
    [a2 minimum];
    double v7 = v6;
    [a2 maximum];
    if (v7 != v8) {
      goto LABEL_11;
    }
  }
  if (sub_2F2B8(a1) == 0xD000000000000027 && v9 == 0x80000000001B8D80)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  char v10 = sub_1AD2F0();
  swift_bridgeObjectRelease();
  if (v10) {
    return 0;
  }
LABEL_11:
  [a2 average];
  double v13 = v12;
  uint64_t v14 = sub_A7254(a2);
  double v16 = sub_C0448(v14, v15, a1, v13);
  swift_bridgeObjectRelease();
  return *(void *)&v16;
}

uint64_t sub_CC87C(char a1, uint64_t a2, void *a3)
{
  if (sub_2F2B8(a1) == 0xD00000000000002CLL && v4 == 0x80000000001B8B60)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = sub_1AD2F0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0) {
      return 0;
    }
  }
  if (sub_19C12C() >= 3u)
  {
    double v6 = &selRef_average;
    if ((sub_1997D0() & 1) == 0)
    {
      [a3 average];
      if (v7 <= 0.0) {
        double v6 = &selRef_mostRecent;
      }
    }
  }
  else
  {
    double v6 = &selRef_average;
  }
  [a3 *v6];
  return v8;
}

uint64_t sub_CC978(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v25 = a1;
  uint64_t v5 = sub_1AC800();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2694(&qword_201E28);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  double v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v15 = sub_1AC1E0();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    sub_CCD04(a3, (uint64_t)v14, &qword_201E28);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v14, 1, v15) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
      sub_1ABEF0();
      swift_allocObject();
      sub_1ABEE0();
      sub_1AC020();
      swift_release();
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v12, v18, v15);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v15);
      sub_1AC010();
      swift_release();
      sub_5B028((uint64_t)v12, &qword_201E28);
      uint64_t v23 = sub_1AC000();
      swift_release();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      return v23;
    }
    sub_5B028((uint64_t)v14, &qword_201E28);
  }
  uint64_t v19 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v19, v5);
  uint64_t v20 = sub_1AC7F0();
  os_log_type_t v21 = sub_1ACF50();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&def_342E4, v20, v21, "GenerateQueryResponseOutput: In getDialogPersonHeight value or unit is nil", v22, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return 0;
}

uint64_t sub_CCD04(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2694(a3);
  sub_20688();
  uint64_t v4 = sub_CD4DC();
  v5(v4);
  return a2;
}

uint64_t sub_CCD54(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_20688();
  uint64_t v4 = sub_CD4DC();
  v5(v4);
  return a2;
}

uint64_t sub_CCDA8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  sub_E558();
  v3();
  return a1;
}

unint64_t sub_CCDFC()
{
  unint64_t result = qword_203608;
  if (!qword_203608)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_203608);
  }
  return result;
}

uint64_t sub_CCE40()
{
  return swift_task_dealloc();
}

uint64_t sub_CCEA4()
{
  return swift_task_dealloc();
}

uint64_t sub_CCF04()
{
  uint64_t v3 = v0[28];
  *(void *)(v3 + 32) = 0;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  uint64_t v4 = v0[33];
  *(void *)(v1 - 96) = v0[34];
  *(void *)(v1 - 88) = v4;
  return swift_task_dealloc();
}

uint64_t sub_CCF9C()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 0, 1, v1);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, v1);
}

uint64_t sub_CCFD8()
{
  uint64_t v2 = *(void *)(v0 + 216);
  *(void *)(v2 + 32) = 0;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  return swift_task_dealloc();
}

uint64_t sub_CD054()
{
  return v0;
}

uint64_t sub_CD06C()
{
  return 0x65676172657661;
}

uint64_t sub_CD088()
{
  return *(void *)(v0 + 464);
}

uint64_t sub_CD0AC()
{
  return v0;
}

uint64_t sub_CD0C0()
{
  return v0;
}

uint64_t sub_CD0DC()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v0);
}

uint64_t sub_CD110(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0, 1, v1);
}

uint64_t sub_CD148()
{
  return *(void *)(v0 + 528);
}

void sub_CD16C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

double sub_CD18C()
{
  double result = 0.0;
  *(_OWORD *)uint64_t v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(void *)(v0 + 32) = 0;
  return result;
}

uint64_t sub_CD19C()
{
  return v0;
}

uint64_t sub_CD1D0()
{
  return v0;
}

uint64_t sub_CD1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v4, 1, 1, a4);
}

uint64_t sub_CD1FC()
{
  return v0;
}

double sub_CD228(uint64_t a1, uint64_t a2)
{
  return sub_C0448(a1, a2, v2, v4);
}

double sub_CD258(uint64_t a1, uint64_t a2)
{
  return sub_C0448(a1, a2, v2, v4);
}

void sub_CD270(uint64_t a1@<X8>)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 88) = v1;
}

uint64_t sub_CD2C8()
{
  return v0;
}

uint64_t sub_CD2FC()
{
  return swift_arrayDestroy();
}

uint64_t sub_CD318()
{
  return swift_arrayDestroy();
}

uint64_t sub_CD340()
{
  return v0;
}

uint64_t sub_CD35C()
{
  return v0;
}

uint64_t sub_CD36C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return sub_CCD54(v4, v3, a3);
}

uint64_t sub_CD384()
{
  return sub_1ACE40();
}

uint64_t sub_CD3AC()
{
  return sub_A7254(v0);
}

uint64_t *sub_CD3E8(uint64_t a1)
{
  *(void *)(v2 + 48) = a1;
  return sub_B5B0(v1);
}

uint64_t sub_CD418()
{
  return v0;
}

uint64_t sub_CD438(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return sub_CCD54(v3, v4, a3);
}

uint64_t sub_CD450()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 0, 1, v1);
}

uint64_t sub_CD494()
{
  return swift_arrayDestroy();
}

uint64_t sub_CD4C4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return sub_CCD54(v3, v4, a3);
}

uint64_t sub_CD4DC()
{
  return v0;
}

uint64_t sub_CD4F0()
{
  return sub_5B028(v0, v1);
}

uint64_t sub_CD508()
{
  return sub_5B028(v1, v0);
}

unint64_t sub_CD520(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return sub_24F2C();
}

void sub_CD538(void *a1)
{
  uint64_t v4 = v2;
  uint64_t v6 = sub_2694(&qword_201E10);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_98778();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - v10;
  __chkstk_darwin(v9);
  sub_CEB2C();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v29 - v13;
  id v15 = [v4 start];
  if (v15)
  {
    uint64_t v16 = v15;
    sub_1AABB0();

    uint64_t v17 = sub_1AABD0();
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v17 = sub_1AABD0();
    uint64_t v18 = 1;
  }
  uint64_t v19 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v14, v18, 1, v17);
  id v20 = [v4 end];
  if (v20)
  {
    os_log_type_t v21 = v20;
    sub_1AABB0();

    uint64_t v19 = 0;
  }
  uint64_t v22 = sub_1AABD0();
  uint64_t v23 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, v19, 1, v22);
  id v24 = [a1 sampleStartDate];
  if (v24)
  {
    uint64_t v25 = v24;
    sub_1AABB0();

    uint64_t v23 = 0;
  }
  uint64_t v26 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, v23, 1, v22);
  id v27 = [a1 sampleEndDate];
  if (v27)
  {
    id v28 = v27;
    sub_1AABB0();

    uint64_t v26 = 0;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, v26, 1, v22);
  type metadata accessor for WellnessTime(0);
  sub_1993BC();
}

uint64_t sub_CD75C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v66 = a1;
  uint64_t v6 = sub_2694(&qword_201E10);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_A314();
  uint64_t v64 = (void *)(v8 - v9);
  sub_A358();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v59 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)&v59 - v14;
  uint64_t v16 = sub_1AABD0();
  sub_52C4();
  uint64_t v67 = v17;
  __chkstk_darwin(v18);
  sub_98778();
  __chkstk_darwin(v19);
  uint64_t v63 = (char *)&v59 - v20;
  sub_A358();
  __chkstk_darwin(v21);
  sub_A754();
  __chkstk_darwin(v22);
  uint64_t v65 = (char *)&v59 - v23;
  uint64_t v24 = sub_2694(&qword_201E20);
  uint64_t v25 = sub_53D4(v24);
  __chkstk_darwin(v25);
  sub_53E0();
  uint64_t v68 = v26;
  uint64_t v27 = sub_2694(&qword_201CC8);
  uint64_t v28 = sub_53D4(v27);
  __chkstk_darwin(v28);
  sub_A314();
  uint64_t v31 = v29 - v30;
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v59 - v33;
  uint64_t v35 = sub_1AAA10();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v34, 1, 1, v35);
  uint64_t v36 = sub_CEA4C(v3);
  if (!v37 || (int v38 = sub_303FC(v36, v37), v38 == 205))
  {
    sub_24ED0((uint64_t)v34, &qword_201CC8);
    uint64_t v39 = sub_1AAB10();
    return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a2, 1, 1, v39);
  }
  int v61 = v38;
  uint64_t v62 = a2;
  id v41 = [v3 start];
  if (!v41)
  {
    sub_CEAF0((uint64_t)v15, 1);
    goto LABEL_10;
  }
  os_log_type_t v42 = v41;
  sub_1AABB0();

  uint64_t v60 = *(void (**)(void))(v67 + 32);
  sub_CEB20();
  v43();
  sub_CEAF0((uint64_t)v15, 0);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v15, 1, v16) == 1)
  {
LABEL_10:
    uint64_t v13 = v15;
    goto LABEL_13;
  }
  uint64_t v44 = v60;
  sub_CEB20();
  v44();
  id v45 = [v3 end];
  if (!v45)
  {
    sub_CEAF0((uint64_t)v13, 1);
    goto LABEL_12;
  }
  unint64_t v46 = v45;
  sub_1AABB0();

  sub_CEB20();
  v44();
  sub_CEAF0((uint64_t)v13, 0);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v16) == 1)
  {
LABEL_12:
    (*(void (**)(char *, uint64_t))(v67 + 8))(v65, v16);
LABEL_13:
    uint64_t v52 = v62;
    uint64_t v50 = v68;
    uint64_t v53 = v66;
    sub_24ED0((uint64_t)v13, &qword_201E10);
    if (v53)
    {
      id v54 = [v53 sampleEndDate];
      if (v54)
      {
        uint64_t v55 = v54;
        uint64_t v56 = v64;
        sub_1AABB0();

        uint64_t v57 = 0;
      }
      else
      {
        uint64_t v57 = 1;
        uint64_t v56 = v64;
      }
      sub_CEAF0((uint64_t)v56, v57);
      sub_1546D4(v61, v56);
      sub_24ED0((uint64_t)v56, &qword_201E10);
      sub_24ED0((uint64_t)v34, &qword_201CC8);
    }
    else
    {
      sub_24ED0((uint64_t)v34, &qword_201CC8);
      uint64_t v58 = sub_1AAB10();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v50, 1, 1, v58);
    }
    return sub_9FAC8(v50, v52, &qword_201E20);
  }
  sub_CEB20();
  v44();
  uint64_t v47 = v67;
  uint64_t v48 = *(void (**)(uint64_t, char *, uint64_t))(v67 + 16);
  v48(v4, v65, v16);
  uint64_t v49 = v63;
  v48(v2, v63, v16);
  sub_1AA9D0();
  sub_24ED0((uint64_t)v34, &qword_201CC8);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v31, 0, 1, v35);
  sub_9FAC8(v31, (uint64_t)v34, &qword_201CC8);
  uint64_t v50 = v68;
  sub_153CEC(v61, v34);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v47 + 8);
  v51(v49, v16);
  v51(v65, v16);
  sub_24ED0((uint64_t)v34, &qword_201CC8);
  uint64_t v52 = v62;
  return sub_9FAC8(v50, v52, &qword_201E20);
}

uint64_t sub_CDCB8(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 56) = a1;
  uint64_t v3 = sub_1AC1E0();
  *(void *)(v2 + 24) = v3;
  *(void *)(v2 + 32) = *(void *)(v3 - 8);
  *(void *)(v2 + 40) = swift_task_alloc();
  return _swift_task_switch(sub_CDD7C, 0, 0);
}

uint64_t sub_CDD7C()
{
  uint64_t v1 = sub_A7254(*(void **)(v0 + 16));
  if (v2)
  {
    uint64_t v3 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0) {
      uint64_t v3 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (v3)
    {
      uint64_t v5 = *(void *)(v0 + 32);
      uint64_t v4 = *(void *)(v0 + 40);
      uint64_t v6 = *(void *)(v0 + 24);
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v7 = sub_1AC1D0();
      uint64_t v9 = v8;
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      swift_task_dealloc();
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      return v10(v7, v9);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v12;
  void *v12 = v0;
  v12[1] = sub_CDEDC;
  char v13 = *(unsigned char *)(v0 + 56);
  return sub_CE7D8(v13);
}

uint64_t sub_CDEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t sub_CE004(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v85 = sub_1AABD0();
  sub_52C4();
  uint64_t v87 = v6;
  __chkstk_darwin(v7);
  sub_53E0();
  uint64_t v86 = v8;
  uint64_t v9 = sub_2694(&qword_201E10);
  uint64_t v10 = sub_53D4(v9);
  __chkstk_darwin(v10);
  sub_A314();
  uint64_t v13 = v11 - v12;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v80 - v16;
  __chkstk_darwin(v15);
  sub_A754();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v80 - v20;
  __chkstk_darwin(v19);
  BOOL v81 = (char *)&v80 - v22;
  sub_A358();
  __chkstk_darwin(v23);
  uint64_t v82 = (char *)&v80 - v24;
  sub_A358();
  __chkstk_darwin(v25);
  char v83 = (char *)&v80 - v26;
  sub_A358();
  __chkstk_darwin(v27);
  uint64_t v84 = (char *)&v80 - v28;
  sub_A358();
  __chkstk_darwin(v29);
  sub_CEB2C();
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v80 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (char *)&v80 - v35;
  __chkstk_darwin(v34);
  int v38 = (char *)&v80 - v37;
  if (!a1)
  {
    sub_1ABFA0();
    swift_allocObject();
    uint64_t v44 = sub_1ABF90();
    id v45 = v4;
    id v46 = [v4 start];
    if (v46)
    {
      uint64_t v47 = v46;
      sub_1AABB0();

      uint64_t v48 = 0;
    }
    else
    {
      uint64_t v48 = 1;
    }
    uint64_t v55 = v85;
    sub_CEAC0(v3, v48);
    sub_9FAC8(v3, (uint64_t)v21, &qword_201E10);
    if (sub_CEAD8((uint64_t)v21))
    {
      sub_24ED0((uint64_t)v21, &qword_201E10);
    }
    else
    {
      sub_CEB40();
      sub_CEAB0();
      v56();
      sub_24ED0((uint64_t)v21, &qword_201E10);
      sub_1AABA0();
      uint64_t v57 = sub_CEB08();
      v58(v57);
    }
    uint64_t v59 = (void *)v44;
    sub_1ABF70();
    swift_release();
    id v60 = [v45 end];
    if (v60)
    {
      uint64_t v59 = v60;
      sub_1AABB0();

      uint64_t v61 = 0;
    }
    else
    {
      uint64_t v61 = 1;
    }
    sub_CEAC0(v13, v61);
    sub_9FAC8(v13, (uint64_t)v17, &qword_201E10);
    if (sub_CEAD8((uint64_t)v17))
    {
      sub_24ED0((uint64_t)v17, &qword_201E10);
    }
    else
    {
      sub_CEB40();
      sub_CEAB0();
      v78();
      sub_24ED0((uint64_t)v17, &qword_201E10);
      sub_1AABA0();
      (*(void (**)(void *, uint64_t))(v3 + 8))(v59, v55);
    }
    sub_1ABF60();
    swift_release();
    uint64_t v77 = sub_1ABF80();
    goto LABEL_38;
  }
  sub_1ABFA0();
  swift_allocObject();
  id v39 = a1;
  sub_1ABF90();
  id v40 = [v4 start];
  id v41 = v4;
  if (v40)
  {
    os_log_type_t v42 = v40;
    sub_1AABB0();

    uint64_t v43 = 0;
  }
  else
  {
    uint64_t v43 = 1;
  }
  uint64_t v49 = v85;
  sub_CEAC0((uint64_t)v36, v43);
  sub_9FAC8((uint64_t)v36, (uint64_t)v38, &qword_201E10);
  if (!sub_CEAD8((uint64_t)v38))
  {
    sub_CEAB0();
    v53();
    uint64_t v54 = (uint64_t)v38;
LABEL_21:
    sub_24ED0(v54, &qword_201E10);
    sub_1AABA0();
    uint64_t v63 = sub_CEB08();
    v64(v63);
    goto LABEL_22;
  }
  sub_24ED0((uint64_t)v38, &qword_201E10);
  id v50 = [v39 sampleEndDate];
  if (v50)
  {
    uint64_t v51 = v50;
    sub_1AABB0();

    uint64_t v52 = 0;
  }
  else
  {
    uint64_t v52 = 1;
  }
  sub_CEAC0(v2, v52);
  sub_9FAC8(v2, (uint64_t)v33, &qword_201E10);
  if (!sub_CEAD8((uint64_t)v33))
  {
    sub_CEAB0();
    v62();
    uint64_t v54 = (uint64_t)v33;
    goto LABEL_21;
  }
  sub_24ED0((uint64_t)v33, &qword_201E10);
LABEL_22:
  uint64_t v65 = (uint64_t)v83;
  uint64_t v66 = (uint64_t)v84;
  sub_1ABF70();
  swift_release();
  id v67 = [v41 end];
  if (v67)
  {
    uint64_t v68 = v67;
    sub_1AABB0();

    uint64_t v69 = 0;
  }
  else
  {
    uint64_t v69 = 1;
  }
  sub_CEAC0(v65, v69);
  sub_9FAC8(v65, v66, &qword_201E10);
  if (!sub_CEAD8(v66)) {
    goto LABEL_34;
  }
  sub_24ED0(v66, &qword_201E10);
  id v70 = [v39 sampleEndDate];
  if (v70)
  {
    uint64_t v71 = v70;
    uint64_t v72 = (uint64_t)v81;
    sub_1AABB0();

    uint64_t v73 = 0;
  }
  else
  {
    uint64_t v73 = 1;
    uint64_t v72 = (uint64_t)v81;
  }
  uint64_t v66 = (uint64_t)v82;
  sub_CEAC0(v72, v73);
  sub_9FAC8(v72, v66, &qword_201E10);
  if (sub_CEAD8(v66))
  {
    sub_24ED0(v66, &qword_201E10);
  }
  else
  {
LABEL_34:
    uint64_t v74 = v86;
    uint64_t v75 = v87;
    sub_CEAB0();
    v76();
    sub_24ED0(v66, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v49);
  }
  sub_1ABF60();
  swift_release();
  uint64_t v77 = sub_1ABF80();

LABEL_38:
  swift_release();
  return v77;
}

uint64_t sub_CE724(unsigned __int8 a1)
{
  if (a1 == 193 || a1 == 159)
  {
    [v1 minimum];
    double v4 = v3;
    [v1 maximum];
    if (v4 == v5) {
      return 0;
    }
  }
  [v1 average];
  double v8 = v7;
  uint64_t v9 = sub_A7254(v1);
  double v11 = sub_C0448(v9, v10, a1, v8);
  swift_bridgeObjectRelease();
  return *(void *)&v11;
}

uint64_t sub_CE7D8(char a1)
{
  *(unsigned char *)(v1 + 24) = a1;
  return _swift_task_switch(sub_CE7F8, 0, 0);
}

uint64_t sub_CE7F8()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 == 147 || v1 == 150)
  {
    unint64_t v2 = 0xE200000000000000;
    uint64_t v3 = 26989;
    goto LABEL_14;
  }
  if (v1 == 193)
  {
LABEL_7:
    unint64_t v2 = 0xE300000000000000;
    uint64_t v3 = 5066818;
LABEL_14:
    uint64_t v6 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
    return v6(v3, v2);
  }
  if (v1 != 174)
  {
    if (v1 == 184)
    {
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x7370657473;
      goto LABEL_14;
    }
    if (v1 != 159)
    {
      uint64_t v3 = 0;
      unint64_t v2 = 0xE000000000000000;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  double v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v4;
  *double v4 = v0;
  v4[1] = sub_CE940;
  return sub_7B6F8();
}

uint64_t sub_CE940(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (a2) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = 0xE000000000000000;
  }
  double v8 = *(uint64_t (**)(uint64_t, unint64_t))(v5 + 8);
  return v8(v6, v7);
}

uint64_t sub_CEA4C(void *a1)
{
  id v1 = [a1 quantityIdentifier];
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  uint64_t v3 = sub_1ACDD0();

  return v3;
}

uint64_t sub_CEAC0(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1, v2);
}

uint64_t sub_CEAD8(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v1);
}

uint64_t sub_CEAF0(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1, v2);
}

uint64_t sub_CEB08()
{
  return v0;
}

uint64_t sub_CEB40()
{
  return *(void *)(v0 - 112);
}

uint64_t sub_CEB54(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1AC250();
  __chkstk_darwin(v6 - 8);
  uint64_t v94 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AABD0();
  sub_52C4();
  uint64_t v96 = v9;
  uint64_t v97 = v8;
  __chkstk_darwin(v8);
  double v11 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1AC800();
  sub_52C4();
  uint64_t v14 = v13;
  uint64_t v16 = __chkstk_darwin(v15);
  os_log_type_t v95 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v90 = (char *)&v88 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v88 - v20;
  uint64_t v22 = sub_1AC7D0();
  swift_beginAccess();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v92 = v14 + 16;
  uint64_t v93 = v22;
  uint64_t v91 = v23;
  v23(v21, v22, v12);
  uint64_t v24 = sub_1AC7F0();
  os_log_type_t v25 = sub_1ACF50();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v89 = v14;
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&def_342E4, v24, v25, "Getting Med Logging Flow", v26, 2u);
    uint64_t v14 = v89;
    swift_slowDealloc();
  }

  uint64_t v27 = *(void (**)(void))(v14 + 8);
  sub_5B530();
  v27();
  sub_1AABC0();
  if (isLoggingTimeframeToday(from:todayDate:)(a1, (uint64_t)v11))
  {
    uint64_t v28 = sub_CF800();
    v29(v28);
  }
  else
  {
    char v30 = isLoggingTimeframeNone(from:)();
    uint64_t v31 = sub_CF800();
    v32(v31);
    if ((v30 & 1) == 0)
    {
      uint64_t v109 = &type metadata for ComplexMedLoggingErrorFlow;
      unint64_t v110 = sub_ABC40();
      uint64_t v68 = swift_allocObject();
      v108[0] = v68;
      sub_9B48(a3, v68 + 24);
      sub_E3FC((uint64_t)a2, v68 + 184);
      uint64_t v69 = sub_1AB1C0();
      swift_allocObject();
      sub_CF818();
      uint64_t v70 = sub_1AB1B0();
      *(void *)(v68 + 256) = v69;
      *(void *)(v68 + 264) = &protocol witness table for ResponseFactory;
      *(void *)(v68 + 232) = v70;
      type metadata accessor for WellnessLoggingCATsSimple();
      sub_1AC240();
      uint64_t v71 = sub_1AC210();
      type metadata accessor for WellnessCATs();
      sub_1AC240();
      uint64_t v72 = sub_1AC1A0();
      uint64_t v73 = (objc_class *)sub_1AC4D0();
      long long v102 = 0u;
      long long v103 = 0u;
      uint64_t v104 = 0;
      id v74 = objc_allocWithZone(v73);
      uint64_t v75 = sub_1AC4C0();
      *(void *)(v68 + 312) = v73;
      *(void *)(v68 + 320) = &protocol witness table for MedStorageHelper;
      *(void *)(v68 + 280) = v72;
      *(void *)(v68 + 288) = v75;
      *(void *)(v68 + 16) = a1;
      *(_WORD *)(v68 + 224) = 1;
      *(void *)(v68 + 272) = v71;
LABEL_18:
      sub_2694(&qword_205708);
      uint64_t v85 = sub_1AAF10();
      sub_A19C(v85);
      *(_OWORD *)(sub_CF7D8() + 16) = xmmword_1ADCF0;
      sub_1AAF00();
      goto LABEL_19;
    }
  }
  uint64_t v33 = a2[3];
  uint64_t v34 = a2[4];
  sub_2E38(a2, v33);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v34 + 8))(&v102, v33, v34);
  isSpecificMedRequest(from:deviceState:)();
  char v36 = v35;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v102);
  if ((v36 & 1) == 0)
  {
    uint64_t v60 = v93;
    swift_beginAccess();
    v91(v95, v60, v12);
    uint64_t v61 = sub_1AC7F0();
    os_log_type_t v62 = sub_1ACF50();
    if (os_log_type_enabled(v61, v62))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_47358(&def_342E4, v63, v64, "Got generic med request, returning GenericMedLoggingFlow.");
      swift_slowDealloc();
    }

    sub_5B530();
    v27();
    sub_E3FC((uint64_t)a2, (uint64_t)&v105);
    sub_9B48(a3, (uint64_t)&v102);
    sub_CF7B4();
    uint64_t v65 = type metadata accessor for GenericMedLoggingFlow();
    swift_allocObject();
    uint64_t v66 = sub_CF818();
    uint64_t v57 = sub_343EC(v66, &v105, &v102, (uint64_t)v108, (uint64_t)v101);
    uint64_t v106 = v65;
    uint64_t v58 = &qword_203040;
    uint64_t v59 = type metadata accessor for GenericMedLoggingFlow;
    goto LABEL_15;
  }
  uint64_t v97 = a3;
  hasDateEdit(from:)();
  char v38 = v37;
  BOOL v39 = hasTimeEdit(from:)();
  BOOL v40 = v39;
  if ((v38 & 1) != 0 || v39)
  {
    uint64_t v109 = &type metadata for ComplexMedLoggingErrorFlow;
    unint64_t v110 = sub_ABC40();
    uint64_t v76 = swift_allocObject();
    v108[0] = v76;
    sub_9B48(v97, v76 + 24);
    sub_E3FC((uint64_t)a2, v76 + 184);
    uint64_t v77 = sub_1AB1C0();
    swift_allocObject();
    sub_CF818();
    uint64_t v78 = sub_1AB1B0();
    *(void *)(v76 + 256) = v77;
    *(void *)(v76 + 264) = &protocol witness table for ResponseFactory;
    *(void *)(v76 + 232) = v78;
    type metadata accessor for WellnessLoggingCATsSimple();
    sub_1AC240();
    uint64_t v79 = sub_1AC210();
    type metadata accessor for WellnessCATs();
    sub_1AC240();
    uint64_t v80 = sub_1AC1A0();
    uint64_t v81 = a1;
    uint64_t v82 = (objc_class *)sub_1AC4D0();
    long long v102 = 0u;
    long long v103 = 0u;
    uint64_t v104 = 0;
    id v83 = objc_allocWithZone(v82);
    uint64_t v84 = sub_1AC4C0();
    *(void *)(v76 + 312) = v82;
    *(void *)(v76 + 320) = &protocol witness table for MedStorageHelper;
    *(void *)(v76 + 280) = v80;
    *(void *)(v76 + 288) = v84;
    *(void *)(v76 + 16) = v81;
    *(unsigned char *)(v76 + 224) = v38 & 1;
    *(unsigned char *)(v76 + 225) = v40;
    *(void *)(v76 + 272) = v79;
    goto LABEL_18;
  }
  uint64_t v41 = v93;
  swift_beginAccess();
  v91(v90, v41, v12);
  os_log_type_t v42 = sub_1AC7F0();
  os_log_type_t v43 = sub_1ACF50();
  if (os_log_type_enabled(v42, v43))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_47358(&def_342E4, v44, v45, "Got specific med request without edits, returning SpecificMedLoggingFlow.");
    swift_slowDealloc();
  }

  sub_5B530();
  v27();
  sub_E3FC((uint64_t)a2, (uint64_t)&v105);
  sub_9B48(v97, (uint64_t)&v102);
  sub_CF7B4();
  sub_1AB1C0();
  swift_allocObject();
  sub_CF818();
  uint64_t v46 = sub_1AB1B0();
  type metadata accessor for WellnessLoggingCATsSimple();
  sub_1AC240();
  uint64_t v47 = sub_1AC210();
  type metadata accessor for WellnessCATs();
  sub_1AC240();
  uint64_t v48 = sub_1AC1A0();
  uint64_t v49 = (objc_class *)sub_1AC790();
  long long v98 = 0u;
  long long v99 = 0u;
  uint64_t v100 = 0;
  id v50 = objc_allocWithZone(v49);
  uint64_t v51 = sub_1AC780();
  uint64_t v52 = (objc_class *)sub_1AC4D0();
  long long v98 = 0u;
  long long v99 = 0u;
  uint64_t v100 = 0;
  id v53 = objc_allocWithZone(v52);
  uint64_t v54 = sub_1AC4C0();
  uint64_t v55 = type metadata accessor for SpecificMedLoggingFlow();
  uint64_t v56 = (void *)swift_allocObject();
  uint64_t v57 = (uint64_t)sub_CF524(a1, &v105, &v102, (uint64_t)v108, v46, v47, v48, v51, v54, (uint64_t)v101, v56);
  uint64_t v106 = v55;
  uint64_t v58 = &qword_203038;
  uint64_t v59 = type metadata accessor for SpecificMedLoggingFlow;
LABEL_15:
  uint64_t v107 = sub_CF6B4(v58, (void (*)(uint64_t))v59);
  *(void *)&long long v105 = v57;
  sub_2694(&qword_205708);
  uint64_t v67 = sub_1AAF10();
  sub_A19C(v67);
  *(_OWORD *)(sub_CF7D8() + 16) = xmmword_1ADCF0;
  sub_1AAF00();
LABEL_19:
  sub_1AC2E0();
  sub_B6BB0();
  uint64_t v86 = sub_1AAF70();
  sub_B6BFC((uint64_t)&v102);
  return v86;
}

uint64_t sub_CF4A4()
{
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 24);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 64);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 104);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 144);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 184);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 232);
  swift_release();
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 288);

  return _swift_deallocObject(v0, 328, 7);
}

void *sub_CF524(uint64_t a1, long long *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v30 = sub_1AB1C0();
  uint64_t v31 = &protocol witness table for ResponseFactory;
  *(void *)&long long v29 = a5;
  uint64_t v27 = sub_1AC4D0();
  uint64_t v28 = &protocol witness table for MedStorageHelper;
  *(void *)&long long v26 = a9;
  a11[2] = a1;
  sub_E3FC((uint64_t)a2, (uint64_t)(a11 + 3));
  sub_9B48((uint64_t)a3, (uint64_t)(a11 + 8));
  sub_467AC(a4, (uint64_t)(a11 + 28));
  sub_24D80(&v29, (uint64_t)(a11 + 37));
  a11[42] = a6;
  a11[43] = a7;
  a11[44] = a8;
  sub_24D80(&v26, (uint64_t)(a11 + 50));
  sub_24D80(a2, (uint64_t)v22);
  memcpy(__dst, a3, sizeof(__dst));
  if (*(void *)(a10 + 24))
  {
    sub_E4B8((uint64_t)__dst);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v22);
    sub_24D80((long long *)a10, (uint64_t)&v23);
  }
  else
  {
    uint64_t v24 = &type metadata for MedsCorrectionsFlowProvider;
    os_log_type_t v25 = &off_1F75E0;
    uint64_t v18 = swift_allocObject();
    *(void *)&long long v23 = v18;
    sub_24D80(v22, v18 + 16);
    memcpy((void *)(v18 + 56), __dst, 0xA0uLL);
    sub_CF754(a10);
  }
  sub_24D80(&v23, (uint64_t)(a11 + 45));
  return a11;
}

uint64_t sub_CF6B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_CF6FC()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 96);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 136);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 176);

  return _swift_deallocObject(v0, 216, 7);
}

uint64_t sub_CF754(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_203048);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_CF7B4()
{
  *(void *)(v0 + 176) = 0;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v1 - 160) = 0u;
  *(_OWORD *)(v1 - 144) = 0u;
  *(_OWORD *)(v1 - 128) = 0u;
  *(_OWORD *)(v1 - 112) = 0u;
  *(unsigned char *)(v1 - 96) = -64;
  return 0;
}

uint64_t sub_CF7D8()
{
  return swift_allocObject();
}

uint64_t sub_CF800()
{
  return v0;
}

uint64_t sub_CF818()
{
  return swift_retain();
}

uint64_t destroy for MoodPunchoutFlow(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);

  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 240);
}

uint64_t initializeWithCopy for MoodPunchoutFlow(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  long long v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  long long v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  uint64_t v10 = *(void *)(a2 + 264);
  uint64_t v11 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = v10;
  *(void *)(a1 + 272) = v11;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 240, a2 + 240);
  return a1;
}

uint64_t *assignWithCopy for MoodPunchoutFlow(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

void *initializeWithTake for MoodPunchoutFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for MoodPunchoutFlow(uint64_t a1, uint64_t a2)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 240);
  long long v7 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v7;
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  return a1;
}

uint64_t getEnumTagSinglePayload for MoodPunchoutFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 280))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MoodPunchoutFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 280) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 280) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MoodPunchoutFlow()
{
  return &type metadata for MoodPunchoutFlow;
}

uint64_t sub_CFD00()
{
  sub_B6910();

  return sub_1AAF80();
}

uint64_t sub_CFD54(uint64_t a1)
{
  v2[129] = v1;
  v2[128] = a1;
  uint64_t v3 = sub_1AC3D0();
  v2[130] = v3;
  sub_53D4(v3);
  v2[131] = sub_A42C();
  uint64_t v4 = sub_1AC2D0();
  v2[132] = v4;
  sub_53D4(v4);
  v2[133] = sub_A42C();
  uint64_t v5 = sub_2694(&qword_205B30);
  sub_53D4(v5);
  v2[134] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_205B38);
  sub_53D4(v6);
  v2[135] = sub_A42C();
  uint64_t v7 = sub_1AAB10();
  v2[136] = v7;
  sub_A19C(v7);
  v2[137] = v8;
  v2[138] = sub_A220();
  v2[139] = swift_task_alloc();
  uint64_t v9 = sub_1AC800();
  v2[140] = v9;
  sub_A19C(v9);
  v2[141] = v10;
  v2[142] = sub_A220();
  v2[143] = swift_task_alloc();
  uint64_t v11 = sub_2694(&qword_201E28);
  sub_53D4(v11);
  v2[144] = sub_A220();
  v2[145] = swift_task_alloc();
  uint64_t v12 = sub_1AC250();
  sub_53D4(v12);
  v2[146] = sub_A42C();
  uint64_t v13 = sub_2694(&qword_2030F8);
  sub_53D4(v13);
  v2[147] = sub_A220();
  v2[148] = swift_task_alloc();
  return _swift_task_switch(sub_CFF44, 0, 0);
}

uint64_t sub_CFF44()
{
  uint64_t v73 = v0;
  uint64_t v1 = *(void **)(v0 + 1032);
  uint64_t v2 = (uint64_t)(v1 + 30);
  uint64_t v3 = v1[33];
  uint64_t v4 = v1[34];
  sub_2E38(v1 + 30, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  sub_2E38((void *)(v0 + 808), *(void *)(v0 + 832));
  char v5 = sub_1AB040();
  sub_D09F8((uint64_t)v1, v0 + 16);
  if (v5)
  {
    sub_D0A30(v0 + 16);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 808);
LABEL_4:
    if ((sub_1AC290() & 1) == 0)
    {
      sub_E3FC(v2, v0 + 712);
      uint64_t v43 = sub_1AB1C0();
      swift_allocObject();
      uint64_t v44 = sub_1AB1B0();
      *(void *)(v0 + 776) = v43;
      *(void *)(v0 + 784) = &protocol witness table for ResponseFactory;
      *(void *)(v0 + 752) = v44;
      type metadata accessor for WellnessCATsSimple();
      sub_1AC240();
      uint64_t v45 = sub_1AC210();
      type metadata accessor for WellnessCATs();
      sub_1AC240();
      uint64_t v46 = sub_1AC1A0();
      *(void *)(v0 + 792) = v45;
      *(void *)(v0 + 800) = v46;
      sub_AD6C4();
      sub_1AB120();
      sub_AD694(v0 + 712);
      goto LABEL_19;
    }
    uint64_t v70 = v1 + 30;
    uint64_t v9 = (uint64_t *)(v0 + 1160);
    uint64_t v10 = *(void *)(v0 + 1160);
    sub_D0B54();
    sub_D0BA0();
    uint64_t v11 = sub_1AC1E0();
    sub_D0BC4(v11);
LABEL_6:
    uint64_t v12 = sub_1AC280();
    sub_26B1C(v10, v12);
    uint64_t v13 = *v9;
    uint64_t v14 = *(void *)(v0 + 1136);
    uint64_t v15 = *(void *)(v0 + 1128);
    uint64_t v69 = *(void *)(v0 + 1120);
    uint64_t v16 = *(void *)(v0 + 1080);
    uint64_t v17 = *(void *)(v0 + 1072);
    uint64_t v18 = *(void **)(v0 + 1032);
    swift_release();
    swift_release();
    sub_2EF0C(v13, &qword_201E28);
    sub_2E38(v18, v18[3]);
    uint64_t v19 = sub_D0B90();
    LODWORD(v18) = v20(v19);
    uint64_t v21 = sub_1ABEA0();
    sub_20688();
    long long v23 = (unsigned int *)&enum case for Route.logStateOfMind(_:);
    if (v18 != 1) {
      long long v23 = (unsigned int *)&enum case for Route.categoryRoom(_:);
    }
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v16, *v23, v21);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v16, 0, 1, v21);
    uint64_t v24 = sub_1ABE90();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v17, 1, 1, v24);
    sub_1AAAC0();
    sub_2EF0C(v17, &qword_205B30);
    sub_2EF0C(v16, &qword_205B38);
    uint64_t v25 = sub_1AC7D0();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v25, v69);
    long long v26 = sub_1AC7F0();
    os_log_type_t v27 = sub_1ACF50();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&def_342E4, v26, v27, "Preparing SequenceFlow for Output and AppPunchOut.", v28, 2u);
      swift_slowDealloc();
    }
    uint64_t v29 = *(void *)(v0 + 1184);
    uint64_t v30 = *(void *)(v0 + 1176);
    uint64_t v31 = *(void *)(v0 + 1136);
    uint64_t v32 = *(void *)(v0 + 1128);
    uint64_t v33 = *(void *)(v0 + 1120);
    uint64_t v65 = *(void *)(v0 + 1096);
    uint64_t v66 = *(void *)(v0 + 1104);
    uint64_t v67 = *(void *)(v0 + 1088);
    uint64_t v68 = *(void *)(v0 + 1112);
    uint64_t v34 = *(void *)(v0 + 1064);
    uint64_t v35 = *(void *)(v0 + 1048);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    uint64_t v36 = v1[33];
    uint64_t v37 = v1[34];
    sub_2E38(v70, v36);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v37 + 16))(v71, v36, v37);
    sub_2694(&qword_202588);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_1B04D0;
    sub_4E000(v29, v30);
    sub_E3FC((uint64_t)v70, v0 + 928);
    sub_1AC2C0();
    sub_D0B0C(&qword_203108, (void (*)(uint64_t))&type metadata accessor for OutputFlow);
    uint64_t v39 = sub_1AAF70();
    sub_D0AB4(v34, (void (*)(void))&type metadata accessor for OutputFlow);
    *(void *)(v38 + 32) = v39;
    uint64_t v40 = v1[33];
    uint64_t v41 = v1[34];
    sub_2E38(v70, v40);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v41 + 16))(v72, v40, v41);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v66, v68, v67);
    sub_1AC3C0();
    sub_D0B0C(&qword_203100, (void (*)(uint64_t))&type metadata accessor for AppPunchOutFlow);
    uint64_t v42 = sub_1AAF70();
    sub_D0AB4(v35, (void (*)(void))&type metadata accessor for AppPunchOutFlow);
    *(void *)(v38 + 40) = v42;
    v72[0] = v38;
    sub_1ACEF0();
    sub_1AC300();
    swift_allocObject();
    *(void *)(v0 + 1016) = sub_1AC2F0();
    sub_D0B0C(&qword_203110, (void (*)(uint64_t))&type metadata accessor for SequenceFlow);
    sub_1AB120();
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v68, v67);
    sub_2EF0C(v29, &qword_2030F8);
    swift_release();
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v7 = *(void *)(v0 + 288);
  sub_2E38((void *)(v0 + 256), v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  sub_2E38((void *)(v0 + 888), *(void *)(v0 + 912));
  char v8 = sub_1AB030();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 888);
  sub_D0A30(v0 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 808);
  if (v8) {
    goto LABEL_4;
  }
  sub_2E38(v1 + 30, v1[33]);
  uint64_t v47 = sub_D0B90();
  v48(v47);
  sub_2E38((void *)(v0 + 848), *(void *)(v0 + 872));
  sub_D0B90();
  char v49 = sub_1AB050();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 848);
  if (v49)
  {
    if ((sub_1AC290() & 1) == 0)
    {
      uint64_t v62 = *(void *)(v0 + 1032);
      sub_E3FC(v2, v0 + 304);
      sub_E3FC(v62 + 40, v0 + 344);
      sub_9B48(v62 + 80, v0 + 384);
      *(_WORD *)(v0 + 296) = 132;
      *(unsigned char *)(v0 + 544) = 0;
      sub_4E104();
      sub_1AB120();
      sub_D0A60(v0 + 296);
      goto LABEL_19;
    }
    uint64_t v70 = v1 + 30;
    uint64_t v9 = (uint64_t *)(v0 + 1152);
    uint64_t v10 = *(void *)(v0 + 1152);
    sub_D0B54();
    sub_D0BA0();
    uint64_t v50 = sub_1AC1E0();
    sub_D0BC4(v50);
    goto LABEL_6;
  }
  uint64_t v51 = *(void *)(v0 + 1144);
  uint64_t v52 = *(void *)(v0 + 1128);
  uint64_t v53 = *(void *)(v0 + 1120);
  uint64_t v54 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v51, v54, v53);
  uint64_t v55 = sub_1AC7F0();
  os_log_type_t v56 = sub_1ACF60();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v57 = 0;
    _os_log_impl(&def_342E4, v55, v56, "Could not create dialog on supported device, returning UnsupportedDeviceFlow", v57, 2u);
    swift_slowDealloc();
  }
  uint64_t v58 = *(void *)(v0 + 1144);
  uint64_t v59 = *(void *)(v0 + 1128);
  uint64_t v60 = *(void *)(v0 + 1120);
  uint64_t v61 = *(void *)(v0 + 1032);

  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
  sub_9B48(v61 + 80, v0 + 552);
  sub_B6D74();
  sub_1AB120();
  sub_B6DC0(v0 + 552);
LABEL_19:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v63 = *(uint64_t (**)(void))(v0 + 8);
  return v63();
}

uint64_t sub_D0960(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_4B990;
  return sub_CFD54(a1);
}

uint64_t sub_D09F8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_D0A30(uint64_t a1)
{
  return a1;
}

uint64_t sub_D0A60(uint64_t a1)
{
  return a1;
}

uint64_t sub_D0AB4(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_D0B0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_D0B54()
{
  uint64_t v1 = *sub_2E38((void *)(*(void *)(v0 + 1032) + 40), *(void *)(*(void *)(v0 + 1032) + 64));
  return sub_18ADDC(v1);
}

uint64_t sub_D0B90()
{
  return v0;
}

uint64_t sub_D0BA0()
{
  return sub_1ACE40();
}

uint64_t sub_D0BC4(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, a1);
}

uint64_t sub_D0BE4(void *a1, long long *a2, long long *a3)
{
  uint64_t v6 = swift_allocObject();
  sub_D0C3C(a1, a2, a3);
  return v6;
}

uint64_t sub_D0C3C(void *__src, long long *a2, long long *a3)
{
  memcpy((void *)(v3 + 16), __src, 0xA0uLL);
  sub_24D80(a2, v3 + 176);
  sub_24D80(a3, v3 + 216);
  return v3;
}

uint64_t sub_D0C94()
{
  uint64_t v0 = sub_1AC800();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)sub_292A0();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&def_342E4, v5, v6, "In MedNameDisambiguationStrategy's actionForInput().", v7, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return sub_1AB0B0();
}

uint64_t sub_D0E08()
{
  sub_A364();
  v1[12] = v2;
  v1[13] = v0;
  v1[11] = v3;
  uint64_t v4 = sub_1AB0A0();
  v1[14] = v4;
  sub_A19C(v4);
  v1[15] = v5;
  v1[16] = sub_A220();
  v1[17] = swift_task_alloc();
  uint64_t v6 = sub_1AB3D0();
  v1[18] = v6;
  sub_A19C(v6);
  v1[19] = v7;
  v1[20] = swift_task_alloc();
  uint64_t v8 = sub_1AC800();
  v1[21] = v8;
  sub_A19C(v8);
  v1[22] = v9;
  v1[23] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_D0F14()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v4 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  if (sub_29300(v6))
  {
    uint64_t v7 = (uint8_t *)sub_292A0();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&def_342E4, v5, (os_log_type_t)v1, "MedScheduleDisambiguationStrategy: makePromptForDisambiguation", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v8 = v0[22];
  uint64_t v9 = v0[23];
  uint64_t v10 = v0[21];
  uint64_t v12 = v0[16];
  uint64_t v11 = v0[17];
  uint64_t v14 = v0[14];
  uint64_t v13 = v0[15];
  uint64_t v18 = v0[13];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  sub_1AB080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v11, v14);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v14);
  sub_1AB3B0();
  sub_2694(&qword_205CA0);
  uint64_t v15 = sub_1AB360();
  v0[24] = v15;
  v0[25] = sub_D2464(v15, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_D2A8C);
  sub_2E38((void *)(v18 + 56), *(void *)(v18 + 80));
  uint64_t v19 = (uint64_t (__cdecl *)())((char *)&dword_204E60 + dword_204E60);
  swift_bridgeObjectRetain();
  uint64_t v16 = (void *)swift_task_alloc();
  v0[26] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_D119C;
  return v19();
}

uint64_t sub_D119C()
{
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v7 + 216) = v6;
  *(void *)(v7 + 224) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_D12FC()
{
  uint64_t v1 = *(void *)(v0 + 104);
  id v2 = [*(id *)(v0 + 216) patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_E3FC(v1 + 176, v0 + 16);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  sub_2E38((void *)(v0 + 16), v3);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_D1418;
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v7 = *(void *)(v0 + 160);
  uint64_t v8 = *(void *)(v0 + 88);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v8, v6, v7, v3, v4);
}

uint64_t sub_D1418()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 240) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_D14F8()
{
  (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_D159C()
{
  uint64_t v1 = sub_D2AD4();
  v2(v1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_D165C()
{
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_D171C()
{
  sub_A364();
  v0[23] = v1;
  v0[24] = v2;
  uint64_t v3 = sub_1AB410();
  v0[25] = v3;
  sub_A19C(v3);
  v0[26] = v4;
  v0[27] = swift_task_alloc();
  uint64_t v5 = sub_1AB420();
  v0[28] = v5;
  sub_A19C(v5);
  v0[29] = v6;
  v0[30] = sub_A220();
  v0[31] = swift_task_alloc();
  uint64_t v7 = sub_1AC800();
  v0[32] = v7;
  sub_A19C(v7);
  v0[33] = v8;
  v0[34] = sub_A220();
  v0[35] = swift_task_alloc();
  v0[36] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_D1834()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v4 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)sub_292A0();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&def_342E4, v5, v6, "MedScheduleDisambiguationStrategy: parseDisambiguationResponse", v7, 2u);
    sub_D2AEC();
  }
  uint64_t v8 = *(void *)(v0 + 288);
  uint64_t v10 = *(void *)(v0 + 256);
  uint64_t v9 = *(void *)(v0 + 264);
  uint64_t v12 = *(void *)(v0 + 240);
  uint64_t v11 = *(void *)(v0 + 248);
  uint64_t v13 = *(void *)(v0 + 224);
  uint64_t v14 = *(void *)(v0 + 232);

  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v15(v8, v10);
  sub_1AB3E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v11, v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 88))(v12, v13) == enum case for Parse.directInvocation(_:))
  {
    uint64_t v16 = *(void *)(v0 + 240);
    uint64_t v17 = *(void *)(v0 + 216);
    uint64_t v18 = *(void *)(v0 + 200);
    uint64_t v19 = *(void *)(v0 + 208);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 232) + 96))(v16, *(void *)(v0 + 224));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v17, v16, v18);
    uint64_t v20 = sub_1AB400();
    if (v20)
    {
      sub_19DA50(0x656C756465686373, 0xEA00000000004449, v20, (_OWORD *)(v0 + 16));
      swift_bridgeObjectRelease();
      if (*(void *)(v0 + 40))
      {
        if (swift_dynamicCast())
        {
          uint64_t v21 = *(void *)(v0 + 248);
          uint64_t v22 = *(void *)(v0 + 224);
          uint64_t v23 = *(void *)(v0 + 232);
          uint64_t v24 = *(void *)(v0 + 160);
          *(void *)(v0 + 168) = *(void *)(v0 + 152);
          *(void *)(v0 + 176) = v24;
          sub_1AB340();
          uint64_t v25 = sub_D2AD4();
          v26(v25);
          (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        goto LABEL_13;
      }
    }
    else
    {
      *(_OWORD *)(v0 + 16) = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    sub_24ED0(v0 + 16, &qword_202BA0);
LABEL_13:
    uint64_t v55 = v15;
    sub_D2B08();
    uint64_t v40 = sub_D2AB4();
    v41(v40);
    uint64_t v42 = (void *)sub_1AC7F0();
    os_log_type_t v43 = sub_1ACF50();
    if (sub_29300(v43))
    {
      *(_WORD *)sub_292A0() = 0;
      sub_2B3B0(&def_342E4, v44, v45, "error in parseDisambiguationResponse for medication schedule; could not unpack directInvocation.");
      sub_D2AEC();
    }
    uint64_t v46 = *(void *)(v0 + 280);
    uint64_t v47 = *(void *)(v0 + 256);
    uint64_t v56 = *(void *)(v0 + 248);
    uint64_t v49 = *(void *)(v0 + 224);
    uint64_t v48 = *(void *)(v0 + 232);
    uint64_t v50 = *(void *)(v0 + 208);
    uint64_t v51 = *(void *)(v0 + 216);
    uint64_t v52 = *(void *)(v0 + 200);

    v55(v46, v47);
    *(void *)(v0 + 136) = 0;
    *(void *)(v0 + 144) = 0xE000000000000000;
    sub_1AB340();
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v51, v52);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v56, v49);
    goto LABEL_16;
  }
  sub_D2B08();
  uint64_t v27 = sub_D2AB4();
  v28(v27);
  uint64_t v29 = (void *)sub_1AC7F0();
  os_log_type_t v30 = sub_1ACF50();
  if (sub_29300(v30))
  {
    *(_WORD *)sub_292A0() = 0;
    sub_2B3B0(&def_342E4, v31, v32, "error in parsing disambiguation response for medication name.");
    sub_D2AEC();
  }
  uint64_t v33 = *(void *)(v0 + 272);
  uint64_t v35 = *(void *)(v0 + 248);
  uint64_t v34 = *(void *)(v0 + 256);
  uint64_t v37 = *(void *)(v0 + 232);
  uint64_t v36 = *(void *)(v0 + 240);
  uint64_t v38 = *(void *)(v0 + 224);

  v15(v33, v34);
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = 0xE000000000000000;
  sub_1AB340();
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  v39(v35, v38);
  v39(v36, v38);
LABEL_16:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v53 = *(uint64_t (**)(void))(v0 + 8);
  return v53();
}

uint64_t sub_D1CE0(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v63 = a8;
  uint64_t v65 = a6;
  uint64_t v64 = a5;
  uint64_t v67 = a4;
  uint64_t v62 = a3;
  uint64_t v60 = a9;
  uint64_t v61 = sub_1AC800();
  uint64_t v66 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v68 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2694(&qword_201E28);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v60 - v15;
  uint64_t v17 = sub_1AC1E0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v60 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v60 - v26;
  __chkstk_darwin(v25);
  uint64_t v69 = (char *)&v60 - v28;
  sub_1ACE40();
  uint64_t v70 = v27;
  uint64_t v29 = v63;
  sub_1ACE40();
  uint64_t v67 = v24;
  sub_1ACE40();
  if (a7 == 48 && v29 == (void *)0xE100000000000000)
  {
    uint64_t v32 = (uint64_t)v16;
    uint64_t v33 = v21;
    uint64_t v34 = v60;
  }
  else
  {
    char v31 = sub_1AD2F0();
    uint64_t v32 = (uint64_t)v16;
    uint64_t v33 = v21;
    uint64_t v34 = v60;
    if ((v31 & 1) == 0)
    {
      uint64_t v75 = 0x20646E6128;
      unint64_t v76 = 0xE500000000000000;
      v81._countAndFlagsBits = a7;
      v81._object = v29;
      sub_1ACE70(v81);
      v82._countAndFlagsBits = 0x2965726F6D20;
      v82._object = (void *)0xE600000000000000;
      sub_1ACE70(v82);
    }
  }
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v75 = sub_1AC1D0();
  unint64_t v76 = v35;
  long long v77 = xmmword_1B2470;
  unint64_t v78 = 0xBFF0000000000000;
  char v79 = 0;
  long long v80 = xmmword_1B2480;
  sub_E3FC(v34 + 216, (uint64_t)v72);
  uint64_t v36 = v73;
  uint64_t v37 = v74;
  sub_2E38(v72, v73);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v37 + 8))(v71, v36, v37);
  sub_9F720(v71);
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v71);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v72);
  if (v39)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = 1;
  }
  uint64_t v41 = v61;
  uint64_t v42 = v68;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v32, v40, 1, v17);
  uint64_t v43 = sub_1AC7D0();
  swift_beginAccess();
  uint64_t v44 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v42, v43, v41);
  uint64_t v45 = sub_1AC7F0();
  os_log_type_t v46 = sub_1ACF50();
  BOOL v47 = os_log_type_enabled(v45, v46);
  uint64_t v65 = v32;
  if (v47)
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl(&def_342E4, v45, v46, "Converted to string quartets.", v48, 2u);
    uint64_t v42 = v68;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v41);
  type metadata accessor for WellnessDialogStringQuartet.Builder(0);
  swift_allocObject();
  uint64_t v49 = sub_E364C();
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v50(v14, v70, v17);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v14, 0, 1, v17);
  uint64_t v51 = v49 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_first;
  swift_beginAccess();
  sub_A1440((uint64_t)v14, v51);
  swift_endAccess();
  sub_24ED0((uint64_t)v14, &qword_201E28);
  uint64_t v52 = v67;
  v50(v14, v67, v17);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v14, 0, 1, v17);
  uint64_t v53 = v49 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_second;
  swift_beginAccess();
  sub_A1440((uint64_t)v14, v53);
  swift_endAccess();
  sub_24ED0((uint64_t)v14, &qword_201E28);
  v50(v14, v33, v17);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v14, 0, 1, v17);
  uint64_t v54 = v49 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_third;
  swift_beginAccess();
  sub_A1440((uint64_t)v14, v54);
  swift_endAccess();
  sub_24ED0((uint64_t)v14, &qword_201E28);
  uint64_t v55 = v49 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_fourth;
  swift_beginAccess();
  uint64_t v56 = v65;
  sub_A1440(v65, v55);
  swift_endAccess();
  type metadata accessor for WellnessDialogStringQuartet(0);
  swift_allocObject();
  uint64_t v57 = sub_E3750();
  sub_24ED0(v56, &qword_201E28);
  uint64_t v58 = *(void (**)(char *, uint64_t))(v18 + 8);
  v58(v33, v17);
  v58(v52, v17);
  v58(v70, v17);
  v58(v69, v17);
  return v57;
}

void *sub_D2464(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = &_swiftEmptyArrayStorage;
  if (v3)
  {
    sub_1AD110();
    uint64_t v5 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v6 = *(v5 - 2);
      uint64_t v7 = *(v5 - 1);
      uint64_t v8 = *v5;
      uint64_t v9 = v5[1];
      uint64_t v10 = v5[2];
      uint64_t v11 = v5[3];
      uint64_t v12 = v5[4];
      uint64_t v13 = v5[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a2(v6, v7, v8, v9, v10, v11, v12, v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AD0F0();
      sub_1AD120();
      sub_1AD130();
      sub_1AD100();
      v5 += 8;
      --v3;
    }
    while (v3);
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_D25A4()
{
  sub_E4B8(v0 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 176);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 216);
  return v0;
}

uint64_t sub_D25D4()
{
  sub_D25A4();

  return _swift_deallocClassInstance(v0, 256, 7);
}

uint64_t type metadata accessor for MedScheduleDisambiguationStrategy()
{
  return self;
}

uint64_t sub_D262C()
{
  return sub_D0C94();
}

uint64_t sub_D2644()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_D2AB0;
  return sub_D171C();
}

uint64_t sub_D26E4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_D2AB0;
  return sub_D0E08();
}

uint64_t sub_D278C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for MedScheduleDisambiguationStrategy();
  *uint64_t v8 = v4;
  v8[1] = sub_D2AB0;
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t sub_D2850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for MedScheduleDisambiguationStrategy();
  *uint64_t v8 = v4;
  v8[1] = sub_D2AB0;
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t sub_D2914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_B2D40;
  return PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse()(a1, a2, a3);
}

uint64_t sub_D29C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_D2AB0;
  return PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, a3, a4);
}

uint64_t sub_D2A8C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  return sub_D1CE0(a1, a2, a3, a4, a5, a6, a7, a8, v9);
}

uint64_t sub_D2AB4()
{
  return v0;
}

uint64_t sub_D2AD4()
{
  return v0;
}

uint64_t sub_D2AEC()
{
  return swift_slowDealloc();
}

uint64_t sub_D2B08()
{
  return swift_beginAccess();
}

void sub_D2B2C()
{
  uint64_t v0 = self;
  id v1 = [v0 standardUserDefaults];
  NSString v2 = sub_1ACDC0();
  uint64_t v3 = (char *)[v1 integerForKey:v2];

  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    id v4 = [v0 standardUserDefaults];
    NSString v5 = sub_1ACDC0();
    [v4 setInteger:v3 + 1 forKey:v5];

    id v6 = [v0 standardUserDefaults];
    [v6 synchronize];
  }
}

BOOL sub_D2C5C()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = sub_1ACDC0();
  id v2 = [v0 integerForKey:v1];

  return (uint64_t)v2 < 2;
}

uint64_t type metadata accessor for WellnessQueryingCATsSimple()
{
  uint64_t result = qword_205CA8;
  if (!qword_205CA8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_D2D34()
{
  return swift_initClassMetadata2();
}

uint64_t sub_D2D74()
{
  sub_A364();
  sub_D7EF4(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = sub_2694(&qword_201E28);
  sub_53D4(v8);
  *(void *)(v0 + 64) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_D2DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v14 = *(void *)(v11 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v15 = sub_D8208();
  uint64_t v16 = (__n128 *)sub_D8274(v15);
  uint64_t v17 = sub_D7E08(v16, (__n128)xmmword_1B08D0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for WellnessTime(v17);
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  sub_D7D94(v17);
  if (v18) {
    sub_D7F0C();
  }
  else {
    uint64_t v19 = &type metadata for Double;
  }
  sub_D7DE0((uint64_t)v19);
  if (v20) {
    sub_D7F1C();
  }
  else {
    uint64_t v21 = &type metadata for Double;
  }
  uint64_t v22 = sub_D7E40((uint64_t)v21);
  sub_9FA8(v22, v12, &qword_201E28);
  uint64_t v23 = sub_1AC1E0();
  sub_D7E80(v23);
  if (v24)
  {
    swift_retain();
    sub_A068(v12, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_D8220();
    sub_D7F74();
    sub_D7EE0();
    v25();
    swift_retain();
  }
  sub_D8084();
  uint64_t v26 = sub_D8000((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v26 = sub_1ABFB0();
  }
  else
  {
    v13[31] = 0;
    v13[32] = 0;
  }
  sub_D82C8(v26);
  sub_D7DC0();
  uint64_t v27 = swift_task_alloc();
  uint64_t v28 = (void *)sub_D8078(v27);
  void *v28 = v29;
  v28[1] = sub_D2FA0;
  sub_D7E24(v12 + 16);
  sub_987B0();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t sub_D2FA0()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_D30B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_7BBF0((uint64_t)sub_D30D4);
}

uint64_t sub_D30D4()
{
  sub_7F418();
  unint64_t v1 = v0[2];
  sub_2694(&qword_2027C8);
  uint64_t v2 = (__n128 *)swift_allocObject();
  v0[6] = v2;
  sub_D7E68(v2, (__n128)xmmword_1B08C0);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for WellnessTime(0);
    unint64_t v4 = v1;
  }
  else
  {
    uint64_t v3 = sub_990E4();
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  unint64_t v5 = v0[3];
  v2[3].n128_u64[0] = v4;
  v2[4].n128_u64[1] = v3;
  v2[5].n128_u64[0] = 0x74617265706D6574;
  v2[5].n128_u64[1] = 0xEB00000000657275;
  if (v5)
  {
    uint64_t v6 = sub_1ABED0();
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = sub_990E4();
    v2[6].n128_u64[1] = 0;
    v2[7].n128_u64[0] = 0;
  }
  unint64_t v8 = v0[4];
  v2[6].n128_u64[0] = v7;
  v2[7].n128_u64[1] = v6;
  v2[8].n128_u64[0] = 0xD000000000000014;
  sub_98CCC();
  v2[8].n128_u64[1] = v9;
  uint64_t v10 = 0;
  if (v8)
  {
    uint64_t v10 = sub_1ABFB0();
  }
  else
  {
    v2[9].n128_u64[1] = 0;
    v2[10].n128_u64[0] = 0;
  }
  v2[9].n128_u64[0] = v8;
  v2[10].n128_u64[1] = v10;
  sub_D82A8();
  swift_retain();
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[7] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_D3288;
  return v13(0xD00000000000002CLL, 0x80000000001BC020, v2);
}

uint64_t sub_D3288()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *unint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_D7EB0();
    return v11(v10);
  }
}

uint64_t sub_D339C()
{
  sub_A364();
  swift_bridgeObjectRelease();
  sub_E564();
  return v0();
}

uint64_t sub_D33F8()
{
  sub_A364();
  sub_D7FB4(v1, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v9 = sub_2694(&qword_201E28);
  sub_53D4(v9);
  *(void *)(v0 + 80) = sub_A42C();
  sub_A4F0();
  return sub_D8280(v10, v11, v12);
}

uint64_t sub_D346C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v14 = *(void *)(v11 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v15 = sub_D8388();
  uint64_t v16 = (__n128 *)sub_D83D4(v15);
  uint64_t v17 = sub_D7E08(v16, (__n128)xmmword_1B1080);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for WellnessTime(v17);
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  sub_D7FE0(v17);
  if (v18) {
    sub_D7F0C();
  }
  else {
    uint64_t v19 = &type metadata for Double;
  }
  sub_D7F50((uint64_t)v19);
  if (v20) {
    sub_D7F1C();
  }
  else {
    uint64_t v21 = &type metadata for Double;
  }
  sub_D7F2C((uint64_t)v21);
  if (v22) {
    sub_D8264();
  }
  else {
    uint64_t v23 = &type metadata for Double;
  }
  sub_D7F84((uint64_t)v23);
  if (v24) {
    sub_D834C();
  }
  else {
    uint64_t v25 = &type metadata for Double;
  }
  uint64_t v26 = sub_D8014((uint64_t)v25);
  sub_9FA8(v26, v12, &qword_201E28);
  uint64_t v27 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v12, 1, v27);
  uint64_t v28 = *(void *)(v11 + 80);
  sub_D8094();
  if (v29)
  {
    swift_retain();
    sub_A068(v28, &qword_201E28);
    sub_508E4();
  }
  else
  {
    v13[39] = v27;
    sub_B5B0(v10);
    sub_D7F74();
    sub_D7EE0();
    v30();
    swift_retain();
  }
  sub_D8378();
  uint64_t v31 = sub_D82E8((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v31 = sub_1ABFB0();
  }
  else
  {
    v13[43] = 0;
    v13[44] = 0;
  }
  sub_D83E0(v31);
  sub_D7DC0();
  uint64_t v32 = swift_task_alloc();
  uint64_t v33 = (void *)sub_D83EC(v32);
  *uint64_t v33 = v34;
  v33[1] = sub_D3674;
  sub_D7E24(v28 + 16);
  sub_987B0();
  return v38(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10);
}

uint64_t sub_D3674()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

#error "D3790: call analysis failed (funcsize=7)"

uint64_t sub_D37AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v14 = *(void *)(v11 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v15 = sub_D81F0();
  uint64_t v16 = (__n128 *)sub_D83C8(v15);
  sub_D7E68(v16, (__n128)xmmword_1B10B0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for WellnessTime(0);
    uint64_t v18 = v14;
  }
  else
  {
    uint64_t v17 = sub_D80D0();
  }
  sub_D81CC(v17, v18);
  if (v19) {
    sub_D80E0();
  }
  else {
    char v20 = &type metadata for Double;
  }
  sub_D817C((uint64_t)v20);
  if (v21) {
    sub_D835C();
  }
  else {
    char v22 = &type metadata for Double;
  }
  sub_D81A4((uint64_t)v22);
  if (v23)
  {
    char v24 = 0;
    v12[25] = 0;
    v12[26] = 0;
  }
  else
  {
    char v24 = &type metadata for Double;
  }
  sub_D80A0((uint64_t)v24);
  if (v25) {
    sub_D832C();
  }
  else {
    uint64_t v26 = *(void *)(v11 + 48);
  }
  sub_D8164(v26);
  uint64_t v27 = sub_D82D4((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v27 = sub_1ABFB0();
  }
  else
  {
    v12[37] = 0;
    v12[38] = 0;
  }
  v12[36] = v10;
  v12[39] = v27;
  sub_D7DC0();
  swift_retain();
  uint64_t v28 = swift_task_alloc();
  char v29 = (void *)sub_D8078(v28);
  *char v29 = v30;
  v29[1] = sub_D3938;
  sub_D7EC4(v13 + 15);
  sub_987B0();
  return v34(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

uint64_t sub_D3938()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_D7EB0();
    return v11(v10);
  }
}

uint64_t sub_D3A4C()
{
  sub_A364();
  swift_bridgeObjectRelease();
  sub_D8254();
  return v0();
}

#error "D3AA8: call analysis failed (funcsize=7)"

uint64_t sub_D3AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v14 = *(void *)(v11 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v15 = sub_D81F0();
  uint64_t v16 = (__n128 *)sub_D83C8(v15);
  sub_D7E68(v16, (__n128)xmmword_1B10B0);
  if (v14)
  {
    type metadata accessor for WellnessTime(0);
  }
  else
  {
    *(void *)(v12 + 56) = 0;
    *(void *)(v12 + 64) = 0;
  }
  sub_D83A0();
  char v18 = *(unsigned char *)(v11 + 96);
  *(void *)(v12 + 48) = v19;
  *(void *)(v12 + 72) = v20;
  *(void *)(v12 + 80) = v17;
  *(void *)(v12 + 88) = 0xEB000000006E694DLL;
  if (v18)
  {
    char v22 = 0;
    uint64_t v21 = 0;
    *(void *)(v12 + 104) = 0;
    *(void *)(v12 + 112) = 0;
  }
  else
  {
    uint64_t v21 = *(void *)(v11 + 24);
    char v22 = &type metadata for Double;
  }
  char v23 = *(unsigned char *)(v11 + 97);
  *(void *)(v12 + 96) = v21;
  *(void *)(v12 + 120) = v22;
  *(void *)(v12 + 128) = v17;
  *(void *)(v12 + 136) = 0xEB0000000078614DLL;
  if (v23)
  {
    char v25 = 0;
    uint64_t v24 = 0;
    *(void *)(v12 + 152) = 0;
    *(void *)(v12 + 160) = 0;
  }
  else
  {
    uint64_t v24 = *(void *)(v11 + 32);
    char v25 = &type metadata for Double;
  }
  char v26 = *(unsigned char *)(v11 + 98);
  *(void *)(v12 + 144) = v24;
  *(void *)(v12 + 168) = v25;
  strcpy((char *)(v12 + 176), "diastolicMin");
  *(unsigned char *)(v12 + 189) = 0;
  *(_WORD *)(v12 + 190) = -5120;
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v27 = 0;
    *(void *)(v12 + 200) = 0;
    *(void *)(v12 + 208) = 0;
  }
  else
  {
    uint64_t v27 = *(void *)(v11 + 40);
    uint64_t v28 = &type metadata for Double;
  }
  char v29 = *(unsigned char *)(v11 + 99);
  *(void *)(v12 + 192) = v27;
  *(void *)(v12 + 216) = v28;
  strcpy((char *)(v12 + 224), "diastolicMax");
  *(unsigned char *)(v12 + 237) = 0;
  *(_WORD *)(v12 + 238) = -5120;
  if (v29) {
    sub_D832C();
  }
  else {
    uint64_t v30 = *(void *)(v11 + 48);
  }
  sub_D8164(v30);
  uint64_t v31 = sub_D82D4((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v31 = sub_1ABFB0();
  }
  else
  {
    *(void *)(v12 + 296) = 0;
    *(void *)(v12 + 304) = 0;
  }
  *(void *)(v12 + 288) = v10;
  *(void *)(v12 + 312) = v31;
  sub_D7DC0();
  swift_retain();
  uint64_t v32 = swift_task_alloc();
  uint64_t v33 = (void *)sub_D8078(v32);
  *uint64_t v33 = v34;
  v33[1] = sub_D3CDC;
  sub_D7EC4(v13 + 32);
  sub_987B0();
  return v38(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10);
}

uint64_t sub_D3CDC()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_D7EB0();
    return v11(v10);
  }
}

uint64_t sub_D3DF0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v7 + 40) = a6;
  *(void *)(v7 + 48) = v6;
  *(unsigned char *)(v7 + 81) = a5;
  *(void *)(v7 + 24) = a2;
  *(void *)(v7 + 32) = a4;
  *(unsigned char *)(v7 + 80) = a3;
  *(void *)(v7 + 16) = a1;
  return sub_7BBF0((uint64_t)sub_D3E18);
}

uint64_t sub_D3E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  unint64_t v13 = *(void *)(v11 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v14 = (__n128 *)sub_D83F8();
  *(void *)(v11 + 56) = v14;
  sub_D7E68(v14, (__n128)xmmword_1B08E0);
  if (v13)
  {
    type metadata accessor for WellnessTime(0);
    unint64_t v15 = v13;
  }
  else
  {
    sub_D80D0();
  }
  v14[3].n128_u64[0] = v15;
  sub_D83A0();
  v14[4].n128_u64[1] = v16;
  v14[5].n128_u64[0] = v17;
  v14[5].n128_u64[1] = 0xE800000000000000;
  if (v18)
  {
    sub_D80E0();
  }
  else
  {
    unint64_t v19 = *(void *)(v11 + 24);
    uint64_t v20 = &type metadata for Double;
  }
  char v21 = *(unsigned char *)(v11 + 81);
  v14[6].n128_u64[0] = v19;
  v14[7].n128_u64[1] = (unint64_t)v20;
  v14[8].n128_u64[0] = 0x696C6F7473616964;
  v14[8].n128_u64[1] = 0xE900000000000063;
  if (v21) {
    sub_D833C();
  }
  else {
    uint64_t v22 = *(void *)(v11 + 32);
  }
  sub_D814C(v22);
  uint64_t v23 = sub_D82FC((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v23 = sub_1ABFB0();
  }
  else
  {
    v14[12].n128_u64[1] = 0;
    v14[13].n128_u64[0] = 0;
  }
  v14[12].n128_u64[0] = v10;
  v14[13].n128_u64[1] = v23;
  sub_D7DC0();
  swift_retain();
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v11 + 64) = v24;
  *uint64_t v24 = v11;
  v24[1] = sub_D3FA4;
  sub_D7EC4(v12 + 30);
  sub_987B0();
  return v28(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10);
}

uint64_t sub_D3FA4()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_D7EB0();
    return v11(v10);
  }
}

uint64_t sub_D40B8()
{
  sub_A364();
  swift_bridgeObjectRelease();
  sub_E564();
  return v0();
}

uint64_t sub_D4114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return sub_7BBF0((uint64_t)sub_D4138);
}

uint64_t sub_D4138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  unint64_t v13 = v12[2];
  sub_2694(&qword_2027C8);
  uint64_t v14 = (__n128 *)sub_D81F0();
  v12[9] = v14;
  sub_D7E68(v14, (__n128)xmmword_1B10B0);
  if (v13)
  {
    uint64_t v15 = type metadata accessor for WellnessTime(0);
    unint64_t v16 = v13;
  }
  else
  {
    unint64_t v16 = 0;
    uint64_t v15 = 0;
    v14[3].n128_u64[1] = 0;
    v14[4].n128_u64[0] = 0;
  }
  unint64_t v17 = v12[3];
  v14[3].n128_u64[0] = v16;
  v14[4].n128_u64[1] = v15;
  v14[5].n128_u64[0] = 0x65756C6176;
  v14[5].n128_u64[1] = 0xE500000000000000;
  if (v17)
  {
    uint64_t v18 = sub_1ABED0();
    unint64_t v19 = v17;
  }
  else
  {
    unint64_t v19 = 0;
    uint64_t v18 = 0;
    v14[6].n128_u64[1] = 0;
    v14[7].n128_u64[0] = 0;
  }
  unint64_t v20 = v12[4];
  v14[6].n128_u64[0] = v19;
  v14[7].n128_u64[1] = v18;
  v14[8].n128_u64[0] = 0x65756C61566E696DLL;
  v14[8].n128_u64[1] = 0xE800000000000000;
  if (v20)
  {
    uint64_t v21 = sub_1ABED0();
    unint64_t v22 = v20;
  }
  else
  {
    unint64_t v22 = 0;
    uint64_t v21 = 0;
    v14[9].n128_u64[1] = 0;
    v14[10].n128_u64[0] = 0;
  }
  unint64_t v23 = v12[5];
  v14[9].n128_u64[0] = v22;
  v14[10].n128_u64[1] = v21;
  v14[11].n128_u64[0] = 0x65756C615678616DLL;
  v14[11].n128_u64[1] = 0xE800000000000000;
  if (v23)
  {
    uint64_t v24 = sub_1ABED0();
    unint64_t v25 = v23;
  }
  else
  {
    unint64_t v25 = 0;
    uint64_t v24 = 0;
    v14[12].n128_u64[1] = 0;
    v14[13].n128_u64[0] = 0;
  }
  unint64_t v26 = v12[6];
  v14[12].n128_u64[0] = v25;
  v14[13].n128_u64[1] = v24;
  strcpy((char *)&v14[14], "averageValue");
  v14[14].n128_u8[13] = 0;
  v14[14].n128_u16[7] = -5120;
  if (v26)
  {
    uint64_t v27 = sub_1ABED0();
    unint64_t v28 = v26;
  }
  else
  {
    unint64_t v28 = 0;
    uint64_t v27 = 0;
    v14[15].n128_u64[1] = 0;
    v14[16].n128_u64[0] = 0;
  }
  unint64_t v29 = v12[7];
  v14[15].n128_u64[0] = v28;
  v14[16].n128_u64[1] = v27;
  v14[17].n128_u64[0] = 0xD000000000000014;
  uint64_t v30 = sub_D8410((uint64_t)"queriedCalendarRange");
  if (v29)
  {
    uint64_t v30 = sub_1ABFB0();
  }
  else
  {
    v14[18].n128_u64[1] = 0;
    v14[19].n128_u64[0] = 0;
  }
  v14[18].n128_u64[0] = v29;
  v14[19].n128_u64[1] = v30;
  sub_D82A8();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v31 = swift_task_alloc();
  uint64_t v32 = (void *)sub_D8078(v31);
  *uint64_t v32 = v33;
  v32[1] = sub_D3CDC;
  sub_D8310(0xD000000000000027);
  sub_46EC4();
  return v37(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10, a11, a12);
}

uint64_t sub_D43A4()
{
  sub_A364();
  sub_D7EF4(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = sub_2694(&qword_201E28);
  sub_53D4(v8);
  *(void *)(v0 + 64) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_D4424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v14 = *(void *)(v11 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v15 = sub_D8208();
  unint64_t v16 = (__n128 *)sub_D8274(v15);
  uint64_t v17 = sub_D7E08(v16, (__n128)xmmword_1B08D0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for WellnessTime(v17);
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  sub_D7D94(v17);
  if (v18) {
    sub_D7F0C();
  }
  else {
    unint64_t v19 = &type metadata for Double;
  }
  sub_D7DE0((uint64_t)v19);
  if (v20) {
    sub_D7F1C();
  }
  else {
    uint64_t v21 = &type metadata for Double;
  }
  uint64_t v22 = sub_D7E40((uint64_t)v21);
  sub_9FA8(v22, v12, &qword_201E28);
  uint64_t v23 = sub_1AC1E0();
  sub_D7E80(v23);
  if (v24)
  {
    swift_retain();
    sub_A068(v12, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_D8220();
    sub_D7F74();
    sub_D7EE0();
    v25();
    swift_retain();
  }
  sub_D8084();
  uint64_t v26 = sub_D8000((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v26 = sub_1ABFB0();
  }
  else
  {
    v13[31] = 0;
    v13[32] = 0;
  }
  sub_D82C8(v26);
  sub_D7DC0();
  uint64_t v27 = swift_task_alloc();
  unint64_t v28 = (void *)sub_D8078(v27);
  void *v28 = v29;
  v28[1] = sub_D2FA0;
  sub_D7E24(v12 + 19);
  sub_987B0();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t sub_D45D0(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 64) = a2;
  *(void *)(v4 + 16) = a1;
  return sub_7BBF0((uint64_t)sub_D45F0);
}

uint64_t sub_D45F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v11 = v10[2];
  sub_2694(&qword_2027C8);
  uint64_t v12 = swift_allocObject();
  v10[5] = v12;
  *(_OWORD *)(v12 + 16) = xmmword_1B08C0;
  sub_D836C();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v15;
  if (v11)
  {
    uint64_t v16 = sub_1ABFB0();
    uint64_t v17 = v11;
  }
  else
  {
    uint64_t v16 = sub_D80D0();
  }
  uint64_t v18 = v10[3];
  *(void *)(v12 + 48) = v17;
  *(void *)(v12 + 72) = v16;
  *(void *)(v12 + 80) = 0xD000000000000010;
  sub_98CCC();
  *(void *)(v12 + 88) = v19;
  *(unsigned char *)(v12 + 96) = v20;
  *(void *)(v12 + 120) = &type metadata for Bool;
  *(void *)(v12 + 128) = 1701669236;
  *(void *)(v12 + 136) = 0xE400000000000000;
  uint64_t v21 = 0;
  if (v18)
  {
    uint64_t v21 = type metadata accessor for WellnessTime(0);
  }
  else
  {
    *(void *)(v12 + 152) = 0;
    *(void *)(v12 + 160) = 0;
  }
  *(void *)(v12 + 144) = v18;
  *(void *)(v12 + 168) = v21;
  sub_D7DC0();
  swift_retain();
  uint64_t v22 = (void *)swift_task_alloc();
  v10[6] = v22;
  void *v22 = v10;
  v22[1] = sub_D4764;
  sub_D7EC4(0xD000000000000021);
  sub_987B0();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

uint64_t sub_D4764()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_D7EB0();
    return v11(v10);
  }
}

uint64_t sub_D4878()
{
  sub_A364();
  swift_bridgeObjectRelease();
  sub_E564();
  return v0();
}

uint64_t sub_D48D4()
{
  sub_A364();
  sub_D7EF4(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = sub_2694(&qword_201E28);
  sub_53D4(v8);
  *(void *)(v0 + 64) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_D4954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v14 = *(void *)(v11 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v15 = sub_D8208();
  uint64_t v16 = (__n128 *)sub_D8274(v15);
  uint64_t v17 = sub_D7E08(v16, (__n128)xmmword_1B08D0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for WellnessTime(v17);
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  sub_D7D94(v17);
  if (v18) {
    sub_D7F0C();
  }
  else {
    uint64_t v19 = &type metadata for Double;
  }
  sub_D7DE0((uint64_t)v19);
  if (v20) {
    sub_D7F1C();
  }
  else {
    uint64_t v21 = &type metadata for Double;
  }
  uint64_t v22 = sub_D7E40((uint64_t)v21);
  sub_9FA8(v22, v12, &qword_201E28);
  uint64_t v23 = sub_1AC1E0();
  sub_D7E80(v23);
  if (v24)
  {
    swift_retain();
    sub_A068(v12, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_D8220();
    sub_D7F74();
    sub_D7EE0();
    v25();
    swift_retain();
  }
  sub_D8084();
  uint64_t v26 = sub_D8000((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v26 = sub_1ABFB0();
  }
  else
  {
    v13[31] = 0;
    v13[32] = 0;
  }
  sub_D82C8(v26);
  sub_D7DC0();
  uint64_t v27 = swift_task_alloc();
  uint64_t v28 = (void *)sub_D8078(v27);
  void *v28 = v29;
  v28[1] = sub_D2FA0;
  sub_D7E24(v12 + 29);
  sub_987B0();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t sub_D4B00()
{
  sub_A364();
  sub_D7EF4(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = sub_2694(&qword_201E28);
  sub_53D4(v8);
  *(void *)(v0 + 64) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_D4B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v14 = *(void *)(v11 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v15 = sub_D8208();
  uint64_t v16 = (__n128 *)sub_D8274(v15);
  uint64_t v17 = sub_D7E08(v16, (__n128)xmmword_1B08D0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for WellnessTime(v17);
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  sub_D7D94(v17);
  if (v18) {
    sub_D7F0C();
  }
  else {
    uint64_t v19 = &type metadata for Double;
  }
  sub_D7DE0((uint64_t)v19);
  if (v20) {
    sub_D7F1C();
  }
  else {
    uint64_t v21 = &type metadata for Double;
  }
  uint64_t v22 = sub_D7E40((uint64_t)v21);
  sub_9FA8(v22, v12, &qword_201E28);
  uint64_t v23 = sub_1AC1E0();
  sub_D7E80(v23);
  if (v24)
  {
    swift_retain();
    sub_A068(v12, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_D8220();
    sub_D7F74();
    sub_D7EE0();
    v25();
    swift_retain();
  }
  sub_D8084();
  uint64_t v26 = sub_D8000((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v26 = sub_1ABFB0();
  }
  else
  {
    v13[31] = 0;
    v13[32] = 0;
  }
  sub_D82C8(v26);
  sub_D7DC0();
  uint64_t v27 = swift_task_alloc();
  uint64_t v28 = (void *)sub_D8078(v27);
  void *v28 = v29;
  v28[1] = sub_D2FA0;
  sub_D7E24(v12 + 22);
  sub_987B0();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t sub_D4D2C()
{
  sub_A364();
  sub_D7EF4(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = sub_2694(&qword_201E28);
  sub_53D4(v8);
  *(void *)(v0 + 64) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_D4DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v14 = *(void *)(v11 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v15 = sub_D8208();
  uint64_t v16 = (__n128 *)sub_D8274(v15);
  uint64_t v17 = sub_D7E08(v16, (__n128)xmmword_1B08D0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for WellnessTime(v17);
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  sub_D7D94(v17);
  if (v18) {
    sub_D7F0C();
  }
  else {
    uint64_t v19 = &type metadata for Double;
  }
  sub_D7DE0((uint64_t)v19);
  if (v20) {
    sub_D7F1C();
  }
  else {
    uint64_t v21 = &type metadata for Double;
  }
  uint64_t v22 = sub_D7E40((uint64_t)v21);
  sub_9FA8(v22, v12, &qword_201E28);
  uint64_t v23 = sub_1AC1E0();
  sub_D7E80(v23);
  if (v24)
  {
    swift_retain();
    sub_A068(v12, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_D8220();
    sub_D7F74();
    sub_D7EE0();
    v25();
    swift_retain();
  }
  sub_D8084();
  uint64_t v26 = sub_D8000((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v26 = sub_1ABFB0();
  }
  else
  {
    v13[31] = 0;
    v13[32] = 0;
  }
  sub_D82C8(v26);
  sub_D7DC0();
  uint64_t v27 = swift_task_alloc();
  uint64_t v28 = (void *)sub_D8078(v27);
  void *v28 = v29;
  v28[1] = sub_D2FA0;
  sub_D7E24(v12 + 19);
  sub_987B0();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t sub_D4F58(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v7 + 40) = a6;
  *(void *)(v7 + 48) = v6;
  *(unsigned char *)(v7 + 81) = a5;
  *(void *)(v7 + 24) = a2;
  *(void *)(v7 + 32) = a4;
  *(unsigned char *)(v7 + 80) = a3;
  *(void *)(v7 + 16) = a1;
  return sub_7BBF0((uint64_t)sub_D4F80);
}

uint64_t sub_D4F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v13 = v11[2];
  sub_2694(&qword_2027C8);
  uint64_t v14 = (__n128 *)sub_D83F8();
  v11[7] = v14;
  sub_D7E68(v14, (__n128)xmmword_1B08E0);
  if (v13)
  {
    uint64_t v15 = type metadata accessor for WellnessTime(0);
    uint64_t v16 = v13;
  }
  else
  {
    uint64_t v15 = sub_D80D0();
  }
  sub_D80F0(v15, v16);
  if (v17) {
    sub_D80E0();
  }
  else {
    char v18 = &type metadata for Double;
  }
  sub_D8120((uint64_t)v18);
  if (v19) {
    sub_D833C();
  }
  else {
    uint64_t v20 = v11[4];
  }
  sub_D814C(v20);
  uint64_t v21 = sub_D82FC((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v21 = sub_1ABFB0();
  }
  else
  {
    v14[12].n128_u64[1] = 0;
    v14[13].n128_u64[0] = 0;
  }
  v14[12].n128_u64[0] = v10;
  v14[13].n128_u64[1] = v21;
  sub_D7DC0();
  swift_retain();
  uint64_t v22 = (void *)swift_task_alloc();
  v11[8] = v22;
  void *v22 = v11;
  v22[1] = sub_D50D4;
  sub_D7EC4(v12 + 18);
  sub_987B0();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

uint64_t sub_D50D4()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_D7EB0();
    return v11(v10);
  }
}

uint64_t sub_D51E8()
{
  sub_A364();
  sub_D7FB4(v1, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v9 = sub_2694(&qword_201E28);
  sub_53D4(v9);
  *(void *)(v0 + 80) = sub_A42C();
  sub_A4F0();
  return sub_D8280(v10, v11, v12);
}

uint64_t sub_D525C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v14 = *(void *)(v11 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v15 = sub_D8388();
  uint64_t v16 = (__n128 *)sub_D83D4(v15);
  uint64_t v17 = sub_D7E08(v16, (__n128)xmmword_1B1080);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for WellnessTime(v17);
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  sub_D7FE0(v17);
  if (v18) {
    sub_D7F0C();
  }
  else {
    char v19 = &type metadata for Double;
  }
  sub_D7F50((uint64_t)v19);
  if (v20) {
    sub_D7F1C();
  }
  else {
    uint64_t v21 = &type metadata for Double;
  }
  sub_D7F2C((uint64_t)v21);
  if (v22) {
    sub_D8264();
  }
  else {
    uint64_t v23 = &type metadata for Double;
  }
  sub_D7F84((uint64_t)v23);
  if (v24) {
    sub_D834C();
  }
  else {
    uint64_t v25 = &type metadata for Double;
  }
  uint64_t v26 = sub_D8014((uint64_t)v25);
  sub_9FA8(v26, v12, &qword_201E28);
  uint64_t v27 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v12, 1, v27);
  uint64_t v28 = *(void *)(v11 + 80);
  sub_D8094();
  if (v29)
  {
    swift_retain();
    sub_A068(v28, &qword_201E28);
    sub_508E4();
  }
  else
  {
    v13[39] = v27;
    sub_B5B0(v10);
    sub_D7F74();
    sub_D7EE0();
    v30();
    swift_retain();
  }
  sub_D8378();
  uint64_t v31 = sub_D82E8((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v31 = sub_1ABFB0();
  }
  else
  {
    v13[43] = 0;
    v13[44] = 0;
  }
  sub_D83E0(v31);
  sub_D7DC0();
  uint64_t v32 = swift_task_alloc();
  uint64_t v33 = (void *)sub_D83EC(v32);
  *uint64_t v33 = v34;
  v33[1] = sub_D5464;
  sub_D7E24(v28 + 13);
  sub_987B0();
  return v38(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10);
}

uint64_t sub_D5464()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_D557C()
{
  sub_A364();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_D55E4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = v6;
  *(void *)(v7 + 32) = a4;
  *(void *)(v7 + 40) = a5;
  *(unsigned char *)(v7 + 88) = a2;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a3;
  return sub_7BBF0((uint64_t)sub_D5608);
}

uint64_t sub_D5608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  unint64_t v13 = v12[2];
  sub_2694(&qword_2027C8);
  uint64_t v14 = (__n128 *)sub_D81F0();
  v12[8] = v14;
  sub_D7E68(v14, (__n128)xmmword_1B10B0);
  if (v13)
  {
    uint64_t v15 = type metadata accessor for WellnessTime(0);
    unint64_t v16 = v13;
  }
  else
  {
    uint64_t v15 = sub_990E4();
    v14[3].n128_u64[1] = 0;
    v14[4].n128_u64[0] = 0;
  }
  unint64_t v17 = v12[3];
  v14[3].n128_u64[0] = v16;
  v14[4].n128_u64[1] = v15;
  v14[5].n128_u64[0] = 0xD000000000000016;
  sub_98CCC();
  v14[5].n128_u64[1] = v18;
  v14[6].n128_u8[0] = v19;
  v14[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v14[8].n128_u64[0] = 0xD000000000000014;
  sub_98CCC();
  v14[8].n128_u64[1] = v20;
  if (v17)
  {
    uint64_t v21 = sub_1ABFB0();
    unint64_t v22 = v17;
  }
  else
  {
    uint64_t v21 = sub_990E4();
    v14[9].n128_u64[1] = 0;
    v14[10].n128_u64[0] = 0;
  }
  unint64_t v23 = v12[4];
  v14[9].n128_u64[0] = v22;
  v14[10].n128_u64[1] = v21;
  v14[11].n128_u64[0] = 0x746867696568;
  v14[11].n128_u64[1] = 0xE600000000000000;
  if (v23)
  {
    uint64_t v24 = sub_1ABF10();
    unint64_t v25 = v23;
  }
  else
  {
    uint64_t v24 = sub_990E4();
    v14[12].n128_u64[1] = 0;
    v14[13].n128_u64[0] = 0;
  }
  unint64_t v26 = v12[5];
  v14[12].n128_u64[0] = v25;
  v14[13].n128_u64[1] = v24;
  v14[14].n128_u64[0] = 0x68676965486E696DLL;
  v14[14].n128_u64[1] = 0xE900000000000074;
  if (v26)
  {
    uint64_t v27 = sub_1ABF10();
    unint64_t v28 = v26;
  }
  else
  {
    uint64_t v27 = sub_990E4();
    v14[15].n128_u64[1] = 0;
    v14[16].n128_u64[0] = 0;
  }
  unint64_t v29 = v12[6];
  v14[15].n128_u64[0] = v28;
  v14[16].n128_u64[1] = v27;
  v14[17].n128_u64[0] = 0x686769654878616DLL;
  v14[17].n128_u64[1] = 0xE900000000000074;
  uint64_t v30 = 0;
  if (v29)
  {
    uint64_t v30 = sub_1ABF10();
  }
  else
  {
    v14[18].n128_u64[1] = 0;
    v14[19].n128_u64[0] = 0;
  }
  v14[18].n128_u64[0] = v29;
  v14[19].n128_u64[1] = v30;
  sub_D82A8();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v31 = (void *)swift_task_alloc();
  v12[9] = v31;
  *uint64_t v31 = v12;
  v31[1] = sub_D5844;
  sub_D8294(0xD00000000000001ELL);
  sub_46EC4();
  return v35(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12);
}

uint64_t sub_D5844()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_D7EB0();
    return v11(v10);
  }
}

uint64_t sub_D5958()
{
  sub_A364();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_D59B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v7 + 40) = a6;
  *(void *)(v7 + 48) = v6;
  *(unsigned char *)(v7 + 81) = a5;
  *(void *)(v7 + 24) = a2;
  *(void *)(v7 + 32) = a4;
  *(unsigned char *)(v7 + 80) = a3;
  *(void *)(v7 + 16) = a1;
  return sub_7BBF0((uint64_t)sub_D59E0);
}

uint64_t sub_D59E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v13 = v11[2];
  sub_2694(&qword_2027C8);
  uint64_t v14 = (__n128 *)sub_D83F8();
  v11[7] = v14;
  sub_D7E68(v14, (__n128)xmmword_1B08E0);
  if (v13)
  {
    uint64_t v15 = type metadata accessor for WellnessTime(0);
    uint64_t v16 = v13;
  }
  else
  {
    uint64_t v15 = sub_D80D0();
  }
  sub_D80F0(v15, v16);
  if (v17) {
    sub_D80E0();
  }
  else {
    unint64_t v18 = &type metadata for Double;
  }
  sub_D8120((uint64_t)v18);
  if (v19) {
    sub_D833C();
  }
  else {
    uint64_t v20 = v11[4];
  }
  sub_D814C(v20);
  uint64_t v21 = sub_D82FC((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v21 = sub_1ABFB0();
  }
  else
  {
    v14[12].n128_u64[1] = 0;
    v14[13].n128_u64[0] = 0;
  }
  v14[12].n128_u64[0] = v10;
  v14[13].n128_u64[1] = v21;
  sub_D7DC0();
  swift_retain();
  unint64_t v22 = (void *)swift_task_alloc();
  v11[8] = v22;
  void *v22 = v11;
  v22[1] = sub_D50D4;
  sub_D7EC4(v12 + 10);
  sub_987B0();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

#error "D5B38: call analysis failed (funcsize=7)"

uint64_t sub_D5B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v14 = *(void *)(v11 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v15 = sub_D81F0();
  uint64_t v16 = (__n128 *)sub_D83C8(v15);
  sub_D7E68(v16, (__n128)xmmword_1B10B0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for WellnessTime(0);
    uint64_t v18 = v14;
  }
  else
  {
    uint64_t v17 = sub_D80D0();
  }
  sub_D81CC(v17, v18);
  if (v19) {
    sub_D80E0();
  }
  else {
    uint64_t v20 = &type metadata for Double;
  }
  sub_D817C((uint64_t)v20);
  if (v21) {
    sub_D835C();
  }
  else {
    unint64_t v22 = &type metadata for Double;
  }
  sub_D81A4((uint64_t)v22);
  if (v23)
  {
    uint64_t v24 = 0;
    v12[25] = 0;
    v12[26] = 0;
  }
  else
  {
    uint64_t v24 = &type metadata for Double;
  }
  sub_D80A0((uint64_t)v24);
  if (v25) {
    sub_D832C();
  }
  else {
    uint64_t v26 = *(void *)(v11 + 48);
  }
  sub_D8164(v26);
  uint64_t v27 = sub_D82D4((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v27 = sub_1ABFB0();
  }
  else
  {
    v12[37] = 0;
    v12[38] = 0;
  }
  v12[36] = v10;
  v12[39] = v27;
  sub_D7DC0();
  swift_retain();
  uint64_t v28 = swift_task_alloc();
  uint64_t v29 = (void *)sub_D8078(v28);
  *uint64_t v29 = v30;
  v29[1] = sub_D3CDC;
  sub_D7EC4(v13 + 19);
  sub_987B0();
  return v34(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

uint64_t sub_D5CE0()
{
  sub_A364();
  sub_D7EF4(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = sub_2694(&qword_201E28);
  sub_53D4(v8);
  *(void *)(v0 + 64) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_D5D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v14 = *(void *)(v11 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v15 = sub_D8208();
  uint64_t v16 = (__n128 *)sub_D8274(v15);
  uint64_t v17 = sub_D7E08(v16, (__n128)xmmword_1B08D0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for WellnessTime(v17);
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  sub_D7D94(v17);
  if (v18) {
    sub_D7F0C();
  }
  else {
    char v19 = &type metadata for Double;
  }
  sub_D7DE0((uint64_t)v19);
  if (v20) {
    sub_D7F1C();
  }
  else {
    char v21 = &type metadata for Double;
  }
  uint64_t v22 = sub_D7E40((uint64_t)v21);
  sub_9FA8(v22, v12, &qword_201E28);
  uint64_t v23 = sub_1AC1E0();
  sub_D7E80(v23);
  if (v24)
  {
    swift_retain();
    sub_A068(v12, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_D8220();
    sub_D7F74();
    sub_D7EE0();
    v25();
    swift_retain();
  }
  sub_D8084();
  uint64_t v26 = sub_D8000((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v26 = sub_1ABFB0();
  }
  else
  {
    v13[31] = 0;
    v13[32] = 0;
  }
  sub_D82C8(v26);
  sub_D7DC0();
  uint64_t v27 = swift_task_alloc();
  uint64_t v28 = (void *)sub_D8078(v27);
  void *v28 = v29;
  v28[1] = sub_D2FA0;
  sub_D7E24(v12 + 17);
  sub_987B0();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t sub_D5F0C(char a1, char a2, char a3, char a4)
{
  *(void *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 51) = a4;
  *(unsigned char *)(v5 + 50) = a3;
  *(unsigned char *)(v5 + 49) = a2;
  *(unsigned char *)(v5 + 48) = a1;
  return sub_7BBF0((uint64_t)sub_D5F34);
}

uint64_t sub_D5F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  char v11 = *(unsigned char *)(v10 + 51);
  char v12 = *(unsigned char *)(v10 + 50);
  char v13 = *(unsigned char *)(v10 + 49);
  char v14 = *(unsigned char *)(v10 + 48);
  sub_2694(&qword_2027C8);
  uint64_t v15 = sub_D83F8();
  *(void *)(v10 + 24) = v15;
  *(_OWORD *)(v15 + 16) = xmmword_1B08E0;
  sub_98CCC();
  *(void *)(v16 + 32) = 0xD000000000000010;
  *(void *)(v16 + 40) = v17;
  *(unsigned char *)(v16 + 48) = v14;
  *(void *)(v16 + 72) = &type metadata for Bool;
  *(void *)(v16 + 80) = 0xD000000000000014;
  sub_D836C();
  *(void *)(v18 + 88) = v19;
  *(unsigned char *)(v18 + 96) = v13;
  *(void *)(v18 + 120) = v20;
  *(void *)(v18 + 128) = 0xD000000000000011;
  sub_D836C();
  *(void *)(v21 + 136) = v22;
  *(unsigned char *)(v21 + 144) = v12;
  *(void *)(v21 + 168) = v23;
  *(void *)(v21 + 176) = 0xD000000000000010;
  sub_D836C();
  *(void *)(v24 + 184) = v25;
  *(void *)(v24 + 216) = v26;
  sub_D83B4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(unsigned char *)(v15 + 192) = v11;
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v10 + 32) = v27;
  void *v27 = v10;
  v27[1] = sub_D608C;
  sub_D8294(0xD000000000000024);
  sub_987B0();
  return v31(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10);
}

uint64_t sub_D608C()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_D7EB0();
    return v11(v10);
  }
}

uint64_t sub_D61A0()
{
  sub_A364();
  swift_bridgeObjectRelease();
  sub_E564();
  return v0();
}

uint64_t sub_D61FC()
{
  sub_A364();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  *(unsigned char *)(v1 + 99) = v3;
  *(unsigned char *)(v1 + 98) = v4;
  *(unsigned char *)(v1 + 97) = v5;
  *(void *)(v1 + 24) = v6;
  *(void *)(v1 + 32) = v7;
  *(unsigned char *)(v1 + 96) = v8;
  *(void *)(v1 + 16) = v9;
  uint64_t v10 = sub_2694(&qword_201E28);
  sub_53D4(v10);
  *(void *)(v1 + 56) = swift_task_alloc();
  *(void *)(v1 + 64) = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_D62AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v12 = *(void *)(v10 + 64);
  uint64_t v13 = *(void *)(v10 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v14 = sub_D81F0();
  uint64_t v15 = sub_D83C8(v14);
  *(_OWORD *)(v15 + 16) = xmmword_1B10B0;
  uint64_t v16 = (uint64_t *)(v15 + 48);
  *(void *)(v15 + 32) = 0x6570797461746164;
  *(void *)(v15 + 40) = 0xE800000000000000;
  sub_9FA8(v13, v12, &qword_201E28);
  uint64_t v17 = sub_1AC1E0();
  if (sub_D8238() == 1)
  {
    sub_A068(*(void *)(v10 + 64), &qword_201E28);
    sub_50958();
  }
  else
  {
    *(void *)(v11 + 72) = v17;
    sub_B5B0(v16);
    sub_A5C0();
    sub_50848();
    v18();
  }
  char v19 = *(unsigned char *)(v10 + 96);
  *(void *)(v11 + 80) = 0x6C61566C61746F74;
  *(void *)(v11 + 88) = 0xEA00000000006575;
  if (v19)
  {
    sub_D80E0();
  }
  else
  {
    uint64_t v20 = *(void *)(v10 + 24);
    uint64_t v21 = &type metadata for Double;
  }
  char v22 = *(unsigned char *)(v10 + 97);
  *(void *)(v11 + 96) = v20;
  *(void *)(v11 + 120) = v21;
  *(void *)(v11 + 128) = 0x756C61566C616F67;
  *(void *)(v11 + 136) = 0xE900000000000065;
  if (v22)
  {
    sub_D835C();
  }
  else
  {
    uint64_t v23 = *(void *)(v10 + 32);
    uint64_t v24 = &type metadata for Double;
  }
  uint64_t v25 = *(void *)(v10 + 56);
  char v26 = *(unsigned char *)(v10 + 98);
  *(void *)(v11 + 144) = v23;
  *(void *)(v11 + 168) = v24;
  strcpy((char *)(v11 + 176), "isRingClosed");
  *(unsigned char *)(v11 + 189) = 0;
  *(_WORD *)(v11 + 190) = -5120;
  *(unsigned char *)(v11 + 192) = v26;
  *(void *)(v11 + 216) = &type metadata for Bool;
  *(void *)(v11 + 224) = 0xD000000000000010;
  sub_D836C();
  *(void *)(v11 + 232) = v27;
  *(unsigned char *)(v11 + 240) = v28;
  *(void *)(v11 + 264) = v29;
  *(void *)(v11 + 272) = 1953066613;
  *(void *)(v11 + 280) = 0xE400000000000000;
  sub_9FA8(v30, v25, &qword_201E28);
  if (sub_D8238() == 1)
  {
    sub_A068(*(void *)(v10 + 56), &qword_201E28);
    sub_50958();
  }
  else
  {
    *(void *)(v11 + 312) = v17;
    sub_B5B0((uint64_t *)(v11 + 288));
    sub_A5C0();
    sub_50848();
    v31();
  }
  sub_D83B4((uint64_t)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  uint64_t v32 = swift_task_alloc();
  uint64_t v33 = (void *)sub_D8078(v32);
  *uint64_t v33 = v34;
  v33[1] = sub_D6564;
  sub_D7EC4(0xD00000000000001DLL);
  sub_987B0();
  return v38(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10);
}

uint64_t sub_D6564()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *char v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_D6688()
{
  sub_A364();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_D8254();
  return v0();
}

uint64_t sub_D66F4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = v6;
  *(void *)(v7 + 32) = a4;
  *(void *)(v7 + 40) = a5;
  *(unsigned char *)(v7 + 88) = a3;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return sub_7BBF0((uint64_t)sub_D6718);
}

uint64_t sub_D6718()
{
  sub_4712C();
  unint64_t v1 = v0[2];
  sub_2694(&qword_2027C8);
  uint64_t v2 = (__n128 *)sub_D8208();
  v0[8] = v2;
  sub_D7E68(v2, (__n128)xmmword_1B08D0);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for WellnessTime(0);
    unint64_t v4 = v1;
  }
  else
  {
    uint64_t v3 = sub_990E4();
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v4;
  v2[4].n128_u64[1] = v3;
  v2[5].n128_u64[0] = 0xD000000000000018;
  sub_98CCC();
  v2[5].n128_u64[1] = v5;
  if (v6)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
    v2[6].n128_u64[1] = 0;
    v2[7].n128_u64[0] = 0;
  }
  else
  {
    unint64_t v7 = v0[3];
    uint64_t v8 = &type metadata for Double;
  }
  unint64_t v9 = v0[4];
  v2[6].n128_u64[0] = v7;
  v2[7].n128_u64[1] = (unint64_t)v8;
  v2[8].n128_u64[0] = 0xD000000000000014;
  sub_98CCC();
  v2[8].n128_u64[1] = v10;
  if (v9)
  {
    uint64_t v11 = sub_1AC160();
    unint64_t v12 = v9;
  }
  else
  {
    uint64_t v11 = sub_990E4();
    v2[9].n128_u64[1] = 0;
    v2[10].n128_u64[0] = 0;
  }
  unint64_t v13 = v0[5];
  v2[9].n128_u64[0] = v12;
  v2[10].n128_u64[1] = v11;
  v2[11].n128_u64[0] = 0xD000000000000015;
  sub_98CCC();
  v2[11].n128_u64[1] = v14;
  if (v13)
  {
    uint64_t v15 = sub_1AC160();
    unint64_t v16 = v13;
  }
  else
  {
    uint64_t v15 = sub_990E4();
    v2[12].n128_u64[1] = 0;
    v2[13].n128_u64[0] = 0;
  }
  unint64_t v17 = v0[6];
  v2[12].n128_u64[0] = v16;
  v2[13].n128_u64[1] = v15;
  v2[14].n128_u64[0] = 0xD000000000000014;
  sub_98CCC();
  v2[14].n128_u64[1] = v18;
  uint64_t v19 = 0;
  if (v17)
  {
    uint64_t v19 = sub_1ABFB0();
  }
  else
  {
    v2[15].n128_u64[1] = 0;
    v2[16].n128_u64[0] = 0;
  }
  v2[15].n128_u64[0] = v17;
  v2[16].n128_u64[1] = v19;
  sub_D7DC0();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v20 = (void *)swift_task_alloc();
  v0[9] = v20;
  void *v20 = v0;
  v20[1] = sub_D5844;
  uint64_t v21 = sub_D8294(0xD00000000000002CLL);
  return v23(v21);
}

uint64_t sub_D6930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return sub_7BBF0((uint64_t)sub_D6954);
}

uint64_t sub_D6954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  unint64_t v13 = v12[2];
  sub_2694(&qword_2027C8);
  unint64_t v14 = (__n128 *)sub_D81F0();
  v12[9] = v14;
  sub_D7E68(v14, (__n128)xmmword_1B10B0);
  if (v13)
  {
    uint64_t v15 = type metadata accessor for WellnessTime(0);
    unint64_t v16 = v13;
  }
  else
  {
    unint64_t v16 = 0;
    uint64_t v15 = 0;
    v14[3].n128_u64[1] = 0;
    v14[4].n128_u64[0] = 0;
  }
  unint64_t v17 = v12[3];
  v14[3].n128_u64[0] = v16;
  v14[4].n128_u64[1] = v15;
  v14[5].n128_u64[0] = 0xD000000000000012;
  sub_98CCC();
  v14[5].n128_u64[1] = v18;
  if (v17)
  {
    uint64_t v19 = sub_1AC160();
    unint64_t v20 = v17;
  }
  else
  {
    unint64_t v20 = 0;
    uint64_t v19 = 0;
    v14[6].n128_u64[1] = 0;
    v14[7].n128_u64[0] = 0;
  }
  unint64_t v21 = v12[4];
  v14[6].n128_u64[0] = v20;
  v14[7].n128_u64[1] = v19;
  v14[8].n128_u64[0] = 0xD000000000000013;
  sub_98CCC();
  v14[8].n128_u64[1] = v22;
  if (v21)
  {
    uint64_t v23 = sub_1AC160();
    unint64_t v24 = v21;
  }
  else
  {
    unint64_t v24 = 0;
    uint64_t v23 = 0;
    v14[9].n128_u64[1] = 0;
    v14[10].n128_u64[0] = 0;
  }
  unint64_t v25 = v12[5];
  v14[9].n128_u64[0] = v24;
  v14[10].n128_u64[1] = v23;
  v14[11].n128_u64[0] = 0xD000000000000014;
  sub_98CCC();
  v14[11].n128_u64[1] = v26;
  if (v25)
  {
    uint64_t v27 = sub_1AC160();
    unint64_t v28 = v25;
  }
  else
  {
    unint64_t v28 = 0;
    uint64_t v27 = 0;
    v14[12].n128_u64[1] = 0;
    v14[13].n128_u64[0] = 0;
  }
  unint64_t v29 = v12[6];
  v14[12].n128_u64[0] = v28;
  v14[13].n128_u64[1] = v27;
  v14[14].n128_u64[0] = 0xD000000000000015;
  sub_98CCC();
  v14[14].n128_u64[1] = v30;
  if (v29)
  {
    uint64_t v31 = sub_1AC160();
    unint64_t v32 = v29;
  }
  else
  {
    unint64_t v32 = 0;
    uint64_t v31 = 0;
    v14[15].n128_u64[1] = 0;
    v14[16].n128_u64[0] = 0;
  }
  unint64_t v33 = v12[7];
  v14[15].n128_u64[0] = v32;
  v14[16].n128_u64[1] = v31;
  v14[17].n128_u64[0] = 0xD000000000000014;
  uint64_t v34 = sub_D8410((uint64_t)"queriedCalendarRange");
  if (v33)
  {
    uint64_t v34 = sub_1ABFB0();
  }
  else
  {
    v14[18].n128_u64[1] = 0;
    v14[19].n128_u64[0] = 0;
  }
  v14[18].n128_u64[0] = v33;
  v14[19].n128_u64[1] = v34;
  BOOL v47 = (char *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:)
      + async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v35 = swift_task_alloc();
  uint64_t v36 = (void *)sub_D8078(v35);
  *uint64_t v36 = v37;
  v36[1] = sub_D3938;
  sub_D8310(0xD00000000000002ALL);
  sub_46EC4();
  return v41(v38, v39, v40, v41, v42, v43, v44, v45, v47, a10, a11, a12);
}

uint64_t sub_D6BB0()
{
  sub_A364();
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = v0;
  *(void *)(v1 + 40) = v3;
  *(void *)(v1 + 48) = v4;
  *(unsigned char *)(v1 + 113) = v5;
  *(void *)(v1 + 24) = v6;
  *(void *)(v1 + 32) = v7;
  *(unsigned char *)(v1 + 112) = v8;
  *(void *)(v1 + 16) = v9;
  uint64_t v10 = sub_2694(&qword_201E28);
  sub_53D4(v10);
  *(void *)(v1 + 72) = swift_task_alloc();
  *(void *)(v1 + 80) = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_D6C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v12 = v10[2];
  sub_2694(&qword_2027C8);
  uint64_t v13 = sub_D81F0();
  unint64_t v14 = (__n128 *)sub_D83D4(v13);
  uint64_t v15 = sub_D7E08(v14, (__n128)xmmword_1B10B0);
  if (v12)
  {
    uint64_t v15 = type metadata accessor for WellnessTime(v15);
  }
  else
  {
    v11[7] = 0;
    v11[8] = 0;
  }
  sub_D7D94(v15);
  if (v16) {
    sub_D7F0C();
  }
  else {
    unint64_t v17 = &type metadata for Double;
  }
  sub_D7DE0((uint64_t)v17);
  if (v18)
  {
    sub_D7F1C();
  }
  else
  {
    uint64_t v19 = v10[4];
    unint64_t v20 = &type metadata for Double;
  }
  uint64_t v21 = v10[10];
  uint64_t v22 = v10[5];
  v11[18] = v19;
  v11[21] = v20;
  v11[22] = 1953066613;
  v11[23] = 0xE400000000000000;
  sub_9FA8(v22, v21, &qword_201E28);
  uint64_t v23 = sub_1AC1E0();
  sub_D8238();
  uint64_t v24 = v10[10];
  sub_D8094();
  if (v25)
  {
    swift_retain();
    sub_A068(v24, &qword_201E28);
    sub_50958();
  }
  else
  {
    v11[27] = v23;
    sub_B5B0(v11 + 24);
    sub_A5C0();
    sub_50848();
    v26();
    swift_retain();
  }
  uint64_t v27 = v10[9];
  uint64_t v28 = v10[6];
  v11[28] = 0x6570795461746164;
  v11[29] = 0xE800000000000000;
  sub_9FA8(v28, v27, &qword_201E28);
  if (sub_D8238() == 1)
  {
    sub_A068(v10[9], &qword_201E28);
    sub_50958();
  }
  else
  {
    v11[33] = v23;
    sub_B5B0(v11 + 30);
    sub_A5C0();
    sub_50848();
    v29();
  }
  uint64_t v30 = v10[7];
  sub_98CCC();
  v11[34] = 0xD000000000000014;
  v11[35] = v31;
  uint64_t v32 = 0;
  if (v30)
  {
    uint64_t v32 = sub_1ABFB0();
  }
  else
  {
    v11[37] = 0;
    v11[38] = 0;
  }
  v11[36] = v30;
  v11[39] = v32;
  sub_D7DC0();
  uint64_t v33 = swift_task_alloc();
  uint64_t v34 = (void *)sub_D83EC(v33);
  *uint64_t v34 = v35;
  v34[1] = sub_D6EE4;
  sub_D7E24(0xD000000000000024);
  sub_987B0();
  return v39(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10);
}

uint64_t sub_D6EE4()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_D7008()
{
  sub_A364();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_D707C()
{
  sub_A364();
  sub_D7EF4(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = sub_2694(&qword_201E28);
  sub_53D4(v8);
  *(void *)(v0 + 64) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_D70FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v14 = *(void *)(v11 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v15 = sub_D8208();
  char v16 = (__n128 *)sub_D8274(v15);
  uint64_t v17 = sub_D7E08(v16, (__n128)xmmword_1B08D0);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for WellnessTime(v17);
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  sub_D7D94(v17);
  if (v18) {
    sub_D7F0C();
  }
  else {
    uint64_t v19 = &type metadata for Double;
  }
  sub_D7DE0((uint64_t)v19);
  if (v20) {
    sub_D7F1C();
  }
  else {
    uint64_t v21 = &type metadata for Double;
  }
  uint64_t v22 = sub_D7E40((uint64_t)v21);
  sub_9FA8(v22, v12, &qword_201E28);
  uint64_t v23 = sub_1AC1E0();
  sub_D7E80(v23);
  if (v24)
  {
    swift_retain();
    sub_A068(v12, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_D8220();
    sub_D7F74();
    sub_D7EE0();
    v25();
    swift_retain();
  }
  sub_D8084();
  uint64_t v26 = sub_D8000((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v26 = sub_1ABFB0();
  }
  else
  {
    v13[31] = 0;
    v13[32] = 0;
  }
  sub_D82C8(v26);
  sub_D7DC0();
  uint64_t v27 = swift_task_alloc();
  uint64_t v28 = (void *)sub_D8078(v27);
  void *v28 = v29;
  v28[1] = sub_D72A8;
  sub_D7E24(v12 + 9);
  sub_987B0();
  return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10);
}

uint64_t sub_D72A8()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_D73C0()
{
  sub_A364();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_D8254();
  return v0();
}

uint64_t sub_D7420()
{
  sub_A364();
  sub_D7FB4(v1, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v9 = sub_2694(&qword_201E28);
  sub_53D4(v9);
  *(void *)(v0 + 80) = sub_A42C();
  sub_A4F0();
  return sub_D8280(v10, v11, v12);
}

uint64_t sub_D7494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v14 = *(void *)(v11 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v15 = sub_D8388();
  char v16 = (__n128 *)sub_D83D4(v15);
  uint64_t v17 = sub_D7E08(v16, (__n128)xmmword_1B1080);
  if (v14)
  {
    uint64_t v17 = type metadata accessor for WellnessTime(v17);
  }
  else
  {
    v13[7] = 0;
    v13[8] = 0;
  }
  sub_D7FE0(v17);
  if (v18) {
    sub_D7F0C();
  }
  else {
    uint64_t v19 = &type metadata for Double;
  }
  sub_D7F50((uint64_t)v19);
  if (v20) {
    sub_D7F1C();
  }
  else {
    uint64_t v21 = &type metadata for Double;
  }
  sub_D7F2C((uint64_t)v21);
  if (v22) {
    sub_D8264();
  }
  else {
    uint64_t v23 = &type metadata for Double;
  }
  sub_D7F84((uint64_t)v23);
  if (v24) {
    sub_D834C();
  }
  else {
    char v25 = &type metadata for Double;
  }
  uint64_t v26 = sub_D8014((uint64_t)v25);
  sub_9FA8(v26, v12, &qword_201E28);
  uint64_t v27 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v12, 1, v27);
  uint64_t v28 = *(void *)(v11 + 80);
  sub_D8094();
  if (v29)
  {
    swift_retain();
    sub_A068(v28, &qword_201E28);
    sub_508E4();
  }
  else
  {
    v13[39] = v27;
    sub_B5B0(v10);
    sub_D7F74();
    sub_D7EE0();
    v30();
    swift_retain();
  }
  sub_D8378();
  uint64_t v31 = sub_D82E8((uint64_t)"queriedCalendarRange");
  if (v10)
  {
    uint64_t v31 = sub_1ABFB0();
  }
  else
  {
    v13[43] = 0;
    v13[44] = 0;
  }
  sub_D83E0(v31);
  sub_D7DC0();
  uint64_t v32 = swift_task_alloc();
  uint64_t v33 = (void *)sub_D83EC(v32);
  *uint64_t v33 = v34;
  v33[1] = sub_D3674;
  sub_D7E24(v28 + 27);
  sub_987B0();
  return v38(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10);
}

uint64_t sub_D769C()
{
  sub_A364();
  *(void *)(v1 + 56) = v17;
  *(void *)(v1 + 64) = v0;
  *(unsigned char *)(v1 + 107) = v16;
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v3;
  *(unsigned char *)(v1 + 106) = v4;
  *(unsigned char *)(v1 + 105) = v5;
  *(void *)(v1 + 24) = v6;
  *(void *)(v1 + 32) = v7;
  *(unsigned char *)(v1 + 104) = v8;
  *(void *)(v1 + 16) = v9;
  uint64_t v10 = sub_2694(&qword_201E28);
  sub_53D4(v10);
  *(void *)(v1 + 72) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_D7744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_98364();
  sub_7F418();
  uint64_t v11 = *(void *)(v10 + 16);
  sub_2694(&qword_2027C8);
  uint64_t v12 = (__n128 *)sub_D8388();
  *(void *)(v10 + 80) = v12;
  uint64_t v13 = sub_D7E08(v12, (__n128)xmmword_1B1080);
  if (v11)
  {
    uint64_t v13 = type metadata accessor for WellnessTime(v13);
  }
  else
  {
    v12[3].n128_u64[1] = 0;
    v12[4].n128_u64[0] = 0;
  }
  sub_D7FE0(v13);
  if (v14) {
    sub_D7F0C();
  }
  else {
    uint64_t v15 = &type metadata for Double;
  }
  sub_D7F50((uint64_t)v15);
  if (v16) {
    sub_D7F1C();
  }
  else {
    uint64_t v17 = &type metadata for Double;
  }
  sub_D7F2C((uint64_t)v17);
  if (v18)
  {
    sub_D8264();
  }
  else
  {
    unint64_t v19 = *(void *)(v10 + 40);
    char v20 = &type metadata for Double;
  }
  uint64_t v21 = *(void *)(v10 + 72);
  uint64_t v22 = *(void *)(v10 + 48);
  v12[12].n128_u64[0] = v19;
  v12[13].n128_u64[1] = (unint64_t)v20;
  v12[14].n128_u64[0] = 1953066613;
  v12[14].n128_u64[1] = 0xE400000000000000;
  sub_9FA8(v22, v21, &qword_201E28);
  uint64_t v23 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v21, 1, v23);
  uint64_t v24 = *(void *)(v10 + 72);
  sub_D8094();
  if (v25)
  {
    swift_retain();
    sub_A068(v24, &qword_201E28);
    sub_508E4();
  }
  else
  {
    v12[16].n128_u64[1] = v23;
    sub_B5B0((uint64_t *)&v12[15]);
    sub_D7F74();
    sub_D7EE0();
    v26();
    swift_retain();
  }
  uint64_t v27 = *(void *)(v10 + 56);
  unsigned __int8 v28 = *(unsigned char *)(v10 + 107);
  v12[17].n128_u64[0] = 0xD000000000000016;
  v12[17].n128_u64[1] = 0x80000000001BAD00;
  v12[18].n128_u8[0] = v28;
  v12[19].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v12[20].n128_u64[0] = 0xD000000000000014;
  sub_98CCC();
  v12[20].n128_u64[1] = v29;
  uint64_t v30 = 0;
  if (v27)
  {
    uint64_t v30 = sub_1ABFB0();
  }
  else
  {
    v12[21].n128_u64[1] = 0;
    v12[22].n128_u64[0] = 0;
  }
  sub_D83E0(v30);
  sub_D7DC0();
  uint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v10 + 88) = v31;
  *uint64_t v31 = v10;
  v31[1] = sub_D7994;
  sub_D7E24(0xD00000000000001ELL);
  sub_987B0();
  return v35(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10);
}

uint64_t sub_D7994()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *char v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_D7AAC()
{
  sub_A364();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_E564();
  return v0();
}

uint64_t sub_D7B10(uint64_t a1, uint64_t a2)
{
  return sub_D7B64(a1, a2);
}

uint64_t sub_D7B64(uint64_t a1, uint64_t a2)
{
  sub_1AC250();
  sub_507F8();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_E548();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_2694(&qword_201E20);
  uint64_t v12 = sub_53D4(v11);
  __chkstk_darwin(v12);
  sub_E548();
  sub_9FA8(a1, v14 - v13, &qword_201E20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, a2, v2);
  uint64_t v15 = sub_1AC1F0();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  sub_A068(a1, &qword_201E20);
  return v15;
}

uint64_t sub_D7CA0(uint64_t a1, uint64_t a2)
{
  sub_1AC250();
  sub_507F8();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_E548();
  uint64_t v9 = v8 - v7;
  swift_allocObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, a2, v2);
  uint64_t v10 = sub_1AC200();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v2);
  return v10;
}

uint64_t sub_D7D7C()
{
  return type metadata accessor for WellnessQueryingCATsSimple();
}

uint64_t sub_D7D94(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "averageValue");
  *(unsigned char *)(v2 + 93) = 0;
  *(_WORD *)(v2 + 94) = -5120;
  return result;
}

uint64_t sub_D7DC0()
{
  return swift_retain();
}

void sub_D7DE0(uint64_t a1@<X8>)
{
  v2[12] = v1;
  v2[15] = a1;
  v2[16] = 0x6C61566C61746F74;
  v2[17] = 0xEA00000000006575;
}

uint64_t sub_D7E08(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 1701669236;
  a1[2].n128_u64[1] = 0xE400000000000000;
  return 0;
}

uint64_t sub_D7E24@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_D7E40@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(void *)(v2 + 40);
  v3[18] = v1;
  v3[21] = a1;
  v3[22] = 1953066613;
  v3[23] = 0xE400000000000000;
  return result;
}

__n128 *sub_D7E68(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 1701669236;
  result[2].n128_u64[1] = 0xE400000000000000;
  return result;
}

uint64_t sub_D7E80(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, a1);
}

uint64_t sub_D7EB0()
{
  return v0;
}

uint64_t sub_D7EC4@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_D7EF4(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 48) = a7;
  *(void *)(v8 + 56) = v7;
  *(unsigned char *)(v8 + 97) = a5;
  *(void *)(v8 + 32) = a4;
  *(void *)(v8 + 40) = a6;
  *(unsigned char *)(v8 + 96) = a3;
  *(void *)(v8 + 16) = result;
  *(void *)(v8 + 24) = a2;
  return result;
}

void sub_D7F0C()
{
  *(void *)(v0 + 104) = 0;
  *(void *)(v0 + 112) = 0;
}

void sub_D7F1C()
{
  *(void *)(v0 + 152) = 0;
  *(void *)(v0 + 160) = 0;
}

void sub_D7F2C(uint64_t a1@<X8>)
{
  v2[18] = v1;
  v2[21] = a1;
  v2[22] = 0x65756C615678616DLL;
  v2[23] = 0xE800000000000000;
}

void sub_D7F50(uint64_t a1@<X8>)
{
  v2[12] = v1;
  v2[15] = a1;
  v2[16] = 0x65756C61566E696DLL;
  v2[17] = 0xE800000000000000;
}

void sub_D7F84(uint64_t a1@<X8>)
{
  *(void *)(v2 + 192) = v1;
  *(void *)(v2 + 216) = a1;
  strcpy((char *)(v2 + 224), "averageValue");
  *(unsigned char *)(v2 + 237) = 0;
  *(_WORD *)(v2 + 238) = -5120;
}

uint64_t sub_D7FB4(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  char v11 = *(unsigned char *)(v10 + 16);
  uint64_t v12 = *(void *)(v10 + 24);
  *(void *)(v9 + 64) = *(void *)(v10 + 32);
  *(void *)(v9 + 72) = v8;
  *(unsigned char *)(v9 + 115) = v11;
  *(void *)(v9 + 48) = a8;
  *(void *)(v9 + 56) = v12;
  *(unsigned char *)(v9 + 114) = a7;
  *(unsigned char *)(v9 + 113) = a5;
  *(void *)(v9 + 32) = a4;
  *(void *)(v9 + 40) = a6;
  *(unsigned char *)(v9 + 112) = a3;
  *(void *)(v9 + 16) = result;
  *(void *)(v9 + 24) = a2;
  return result;
}

uint64_t sub_D7FE0(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x65756C6176;
  v2[11] = 0xE500000000000000;
  return result;
}

uint64_t sub_D8000@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 224) = v1;
  *(void *)(v2 + 232) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t sub_D8014@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(void *)(v2 + 56);
  v3[30] = v1;
  v3[33] = a1;
  v3[34] = 1953066613;
  v3[35] = 0xE400000000000000;
  return result;
}

uint64_t sub_D803C(uint64_t a1)
{
  return _swift_task_switch(a1, 0, 0);
}

uint64_t sub_D804C(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t a10)
{
  *(void *)(v11 + 56) = a10;
  *(void *)(v11 + 64) = v10;
  *(unsigned char *)(v11 + 99) = a9;
  *(void *)(v11 + 40) = a6;
  *(void *)(v11 + 48) = a8;
  *(unsigned char *)(v11 + 98) = a7;
  *(unsigned char *)(v11 + 97) = a5;
  *(void *)(v11 + 24) = a2;
  *(void *)(v11 + 32) = a4;
  *(unsigned char *)(v11 + 96) = a3;
  *(void *)(v11 + 16) = result;
  return result;
}

uint64_t sub_D8078(uint64_t result)
{
  *(void *)(v1 + 80) = result;
  return result;
}

void sub_D80A0(uint64_t a1@<X8>)
{
  *(void *)(v2 + 192) = v1;
  *(void *)(v2 + 216) = a1;
  strcpy((char *)(v2 + 224), "averageValue");
  *(unsigned char *)(v2 + 237) = 0;
  *(_WORD *)(v2 + 238) = -5120;
}

uint64_t sub_D80D0()
{
  uint64_t result = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
  return result;
}

void sub_D80E0()
{
  *(void *)(v0 + 104) = 0;
  *(void *)(v0 + 112) = 0;
}

uint64_t sub_D80F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 48) = a2;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "averageValue");
  *(unsigned char *)(v2 + 93) = 0;
  *(_WORD *)(v2 + 94) = -5120;
  return result;
}

void sub_D8120(uint64_t a1@<X8>)
{
  v2[12] = v1;
  v2[15] = a1;
  v2[16] = 0x6C61566C61746F74;
  v2[17] = 0xEA00000000006575;
}

void sub_D814C(uint64_t a1@<X8>)
{
  v2[18] = a1;
  v2[21] = v1;
  v2[22] = 0xD000000000000014;
}

void sub_D8164(uint64_t a1@<X8>)
{
  v2[30] = a1;
  v2[33] = v1;
  v2[34] = 0xD000000000000014;
}

void sub_D817C(uint64_t a1@<X8>)
{
  v2[12] = v1;
  v2[15] = a1;
  v2[16] = 0x65756C61566E696DLL;
  v2[17] = 0xE800000000000000;
}

void sub_D81A4(uint64_t a1@<X8>)
{
  v2[18] = v1;
  v2[21] = a1;
  v2[22] = 0x65756C615678616DLL;
  v2[23] = 0xE800000000000000;
}

uint64_t sub_D81CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[6] = a2;
  v2[9] = result;
  v2[10] = 0x65756C6176;
  v2[11] = 0xE500000000000000;
  return result;
}

uint64_t sub_D81F0()
{
  return swift_allocObject();
}

uint64_t sub_D8208()
{
  return swift_allocObject();
}

uint64_t *sub_D8220()
{
  *(void *)(v2 + 216) = v1;
  return sub_B5B0(v0);
}

uint64_t sub_D8238()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v0);
}

uint64_t sub_D8254()
{
  return v0 + 8;
}

void sub_D8264()
{
  *(void *)(v0 + 200) = 0;
  *(void *)(v0 + 208) = 0;
}

uint64_t sub_D8274(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t sub_D8280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_D8294@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_D82A8()
{
  return swift_retain();
}

uint64_t sub_D82C8(uint64_t result)
{
  *(void *)(v2 + 240) = v1;
  *(void *)(v2 + 264) = result;
  return result;
}

uint64_t sub_D82D4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 280) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t sub_D82E8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 320) = v1;
  *(void *)(v2 + 328) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t sub_D82FC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 184) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t sub_D8310@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

void sub_D832C()
{
  *(void *)(v0 + 248) = 0;
  *(void *)(v0 + 256) = 0;
}

void sub_D833C()
{
  *(void *)(v0 + 152) = 0;
  *(void *)(v0 + 160) = 0;
}

void sub_D834C()
{
  *(void *)(v0 + 248) = 0;
  *(void *)(v0 + 256) = 0;
}

void sub_D835C()
{
  *(void *)(v0 + 152) = 0;
  *(void *)(v0 + 160) = 0;
}

uint64_t sub_D8388()
{
  return swift_allocObject();
}

uint64_t sub_D83B4@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t sub_D83C8(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t sub_D83D4(uint64_t result)
{
  *(void *)(v1 + 88) = result;
  return result;
}

uint64_t sub_D83E0(uint64_t result)
{
  *(void *)(v2 + 336) = v1;
  *(void *)(v2 + 360) = result;
  return result;
}

uint64_t sub_D83EC(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  return result;
}

uint64_t sub_D83F8()
{
  return swift_allocObject();
}

uint64_t sub_D8410@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 280) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t sub_D8424()
{
  sub_D895C();
  if (v0 != 270)
  {
    BOOL v2 = sub_1771BC(v0) == 0x61757274736E656DLL && v1 == 0xEC0000006E6F6974;
    if (v2)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    char v3 = sub_1AD2F0();
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_21:
      if (sub_1AC270())
      {
        sub_1AB7E0();
        sub_55634();
      }
      sub_DA944();
      double v12 = v11;
      swift_release();
      return *(void *)&v12;
    }
  }
  sub_D895C();
  if (v4 == 270) {
    goto LABEL_8;
  }
  if (sub_1771BC(v4) == 0x676E6974746F7073 && v8 == 0xE800000000000000) {
    goto LABEL_20;
  }
  char v10 = sub_1AD2F0();
  swift_bridgeObjectRelease();
  if (v10) {
    goto LABEL_21;
  }
LABEL_8:
  unint64_t v5 = (unint64_t)sub_D8D30();
  unint64_t v6 = v5;
  if (v5 >> 62)
  {
    if (sub_1AD170()) {
      goto LABEL_10;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  if (!*(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8))) {
    goto LABEL_25;
  }
LABEL_10:
  sub_4AA30(0, (v6 & 0xC000000000000001) == 0, v6);
  if ((v6 & 0xC000000000000001) != 0) {
    sub_1AD0A0();
  }
  else {
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_1ABA10();
  swift_release();
  if (v7)
  {
    sub_1AB5B0();
    sub_55634();
  }
LABEL_26:
  sub_DB184();
  double v12 = v13;
  char v15 = v14;
  swift_release();
  if ((v15 & 1) == 0 && v12 > 0.0)
  {
    sub_D8704();
    sub_DBC80();
    if (!v2)
    {
      uint64_t v18 = sub_481F0(v16);
      if (v18 == 0x6C696B5F666C6168 && v19 == 0xED00006D6172676FLL)
      {
        swift_bridgeObjectRelease();
LABEL_38:
        double v12 = v12 * 0.5;
        return *(void *)&v12;
      }
      char v21 = sub_1AD2F0();
      swift_bridgeObjectRelease();
      if (v21) {
        goto LABEL_38;
      }
    }
  }
  return *(void *)&v12;
}

uint64_t sub_D8704()
{
  sub_1AB750();
  sub_553FC((uint64_t)v15, (uint64_t)v13, &qword_202BA0);
  if (!v14)
  {
    sub_2EF0C((uint64_t)v13, &qword_202BA0);
    goto LABEL_15;
  }
  sub_1AB8B0();
  if ((sub_DBC1C() & 1) == 0) {
    goto LABEL_15;
  }
  swift_release();
  unint64_t v0 = (unint64_t)sub_D8D30();
  unint64_t v1 = v0;
  if (v0 >> 62)
  {
    if (!sub_1AD170()) {
      goto LABEL_9;
    }
  }
  else if (!*(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8)))
  {
    goto LABEL_9;
  }
  sub_4AA30(0, (v1 & 0xC000000000000001) == 0, v1);
  if ((v1 & 0xC000000000000001) != 0) {
    sub_1AD0A0();
  }
  else {
    swift_retain();
  }
LABEL_9:
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_1AC410();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_15:
    sub_553FC((uint64_t)v15, (uint64_t)v13, &qword_202BA0);
    if (v14)
    {
      sub_1AB5A0();
      if (sub_DBC1C())
      {
        swift_retain();
        sub_1ABB20();
        sub_55634();
        uint64_t v7 = sub_1AC420();
        swift_release();
        uint64_t v8 = *(void *)(v7 + 16);
        if (v8)
        {
          uint64_t v9 = v7 + 40;
          while (1)
          {
            swift_bridgeObjectRetain();
            sub_48190();
            sub_DBC80();
            if (!v6) {
              break;
            }
            v9 += 16;
            if (!--v8) {
              goto LABEL_22;
            }
          }
          uint64_t v12 = v10;
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_25;
        }
LABEL_22:
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
    else
    {
      sub_2EF0C((uint64_t)v13, &qword_202BA0);
    }
    uint64_t v12 = 61;
    goto LABEL_25;
  }
  uint64_t v4 = v2 + 40;
  while (1)
  {
    swift_bridgeObjectRetain();
    sub_48190();
    sub_DBC80();
    if (!v6) {
      break;
    }
    v4 += 16;
    if (!--v3) {
      goto LABEL_14;
    }
  }
  uint64_t v12 = v5;
  swift_bridgeObjectRelease();
LABEL_25:
  sub_2EF0C((uint64_t)v15, &qword_202BA0);
  return v12;
}

void sub_D895C()
{
  sub_A638();
  uint64_t v3 = sub_2694(&qword_205DD0);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_E548();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = sub_2694(&qword_205DD8);
  uint64_t v9 = sub_53D4(v8);
  __chkstk_darwin(v9);
  sub_DBBA8();
  uint64_t v10 = sub_1AB9F0();
  sub_52C4();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_DBAB8();
  __chkstk_darwin(v14);
  uint64_t v15 = sub_DBC8C();
  char v16 = sub_D8704();
  int v17 = (unsigned __int16)sub_DA65C(v15, v16);
  swift_release();
  if (v17 == 270)
  {
    sub_1AB750();
    sub_553FC((uint64_t)v38, (uint64_t)v36, &qword_202BA0);
    if (v37)
    {
      sub_1AB5A0();
      if ((sub_DBC40() & 1) == 0) {
        goto LABEL_13;
      }
      swift_retain();
      uint64_t v18 = sub_1ABB20();
      swift_release();
      if (v18 && (uint64_t v19 = sub_1AB8E0(), swift_release(), v19))
      {
        sub_1AB9E0();
        swift_release();
        sub_A208(v0, 1, v10);
        if (!v20)
        {
          uint64_t v21 = sub_DBB34();
          v22(v21);
          uint64_t v23 = sub_DBB8C();
          v24(v23);
          char v25 = sub_15452C(v2, v1);
          swift_release();
          uint64_t v26 = *(void (**)(void))(v12 + 8);
          sub_DBB68();
          v26();
          sub_DBB68();
          v26();
          if (v25) {
            goto LABEL_23;
          }
LABEL_13:
          sub_553FC((uint64_t)v38, (uint64_t)v36, &qword_202BA0);
          if (v37)
          {
            sub_1AB8C0();
            if ((sub_DBC40() & 1) == 0)
            {
LABEL_23:
              sub_2EF0C((uint64_t)v38, &qword_202BA0);
              goto LABEL_24;
            }
            swift_retain();
            sub_1AB940();
            swift_release();
            if (!v36[0] || (uint64_t v29 = sub_1AB620(), swift_release(), !v29))
            {
              swift_release();
              goto LABEL_23;
            }
            sub_C1010(v29, v7);
            swift_bridgeObjectRelease();
            uint64_t v30 = sub_1AB5E0();
            sub_A208(v7, 1, v30);
            if (!v20)
            {
              uint64_t v33 = sub_1AB5C0();
              uint64_t v35 = v34;
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v7, v30);
              sub_178E48(v33, v35);
              swift_release();
              sub_2EF0C((uint64_t)v38, &qword_202BA0);
              goto LABEL_24;
            }
            swift_release();
            uint64_t v31 = &qword_205DD0;
            uint64_t v32 = (void *)v7;
          }
          else
          {
            uint64_t v31 = &qword_202BA0;
            uint64_t v32 = v36;
          }
          sub_2EF0C((uint64_t)v32, v31);
          goto LABEL_23;
        }
      }
      else
      {
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 1, 1, v10);
      }
      swift_release();
      uint64_t v27 = &qword_205DD8;
      unsigned __int8 v28 = (void *)v0;
    }
    else
    {
      uint64_t v27 = &qword_202BA0;
      unsigned __int8 v28 = v36;
    }
    sub_2EF0C((uint64_t)v28, v27);
    goto LABEL_13;
  }
LABEL_24:
  sub_A56C();
}

void *sub_D8D30()
{
  if (!sub_1AC270()) {
    return &_swiftEmptyArrayStorage;
  }
  if (!sub_1AB800() || (sub_1AB850(), sub_55634(), !v0))
  {
    swift_release();
    return &_swiftEmptyArrayStorage;
  }
  if (!(v0 >> 62))
  {
    uint64_t v1 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8));
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v1) {
      goto LABEL_6;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t result = (void *)sub_1AD170();
  uint64_t v1 = (uint64_t)result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_6:
  if (v1 >= 1)
  {
    for (uint64_t i = 0; i != v1; ++i)
    {
      if ((v0 & 0xC000000000000001) != 0) {
        sub_1AD0A0();
      }
      else {
        swift_retain();
      }
      sub_1AB600();
      swift_release();
      if (v4)
      {
        sub_1ACEB0();
        if (*(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
          sub_1ACF00();
        }
        sub_1ACF20();
        sub_1ACEF0();
      }
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_D8ED0()
{
  uint64_t v0 = sub_1ABB60();
  unsigned __int8 v2 = sub_195114(v0, v1);
  if (v2 > 9u) {
    return 0;
  }
  else {
    return byte_1B2636[(char)v2];
  }
}

void sub_D8F1C()
{
  sub_A638();
  sub_1AABD0();
  sub_52C4();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_98794();
  __chkstk_darwin(v4);
  uint64_t v5 = sub_2694(&qword_201CC8);
  uint64_t v6 = sub_53D4(v5);
  __chkstk_darwin(v6);
  sub_E548();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = sub_1AAA10();
  sub_52C4();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_DBC04();
  sub_D90F8();
  sub_A208(v9, 1, v10);
  if (v14)
  {
    sub_2EF0C(v9, &qword_201CC8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v0, v9, v10);
    sub_1AABC0();
    char v15 = sub_1AAA00();
    if (v15)
    {
      sub_DBBDC();
      v16();
    }
    else
    {
      sub_1AA9C0();
      sub_1AAB80();
      uint64_t v19 = *(void (**)(void))(v2 + 8);
      sub_DBBDC();
      v19();
      sub_DBBDC();
      v19();
    }
    uint64_t v17 = sub_DBBC4();
    v18(v17);
  }
  sub_A56C();
}

void sub_D90F8()
{
  sub_A638();
  uint64_t v93 = v1;
  uint64_t v2 = sub_1ABBD0();
  sub_52C4();
  uint64_t v91 = v3;
  __chkstk_darwin(v4);
  sub_53E0();
  uint64_t v90 = v5;
  sub_1AC800();
  sub_52C4();
  uint64_t v86 = v7;
  uint64_t v87 = v6;
  __chkstk_darwin(v6);
  sub_53E0();
  uint64_t v85 = v8;
  uint64_t v9 = sub_1AB880();
  sub_52C4();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  char v14 = &v75[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v92 = sub_2694(&qword_203520);
  sub_20688();
  __chkstk_darwin(v15);
  sub_DBAB8();
  __chkstk_darwin(v16);
  uint64_t v18 = &v75[-v17];
  uint64_t v19 = sub_2694(&qword_201CB8);
  uint64_t v20 = sub_53D4(v19);
  __chkstk_darwin(v20);
  sub_A314();
  uint64_t v84 = v21 - v22;
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v88 = &v75[-v25];
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v89 = &v75[-v27];
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = &v75[-v29];
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v33 = &v75[-v32];
  __chkstk_darwin(v31);
  uint64_t v35 = &v75[-v34];
  uint64_t v36 = sub_1AC270();
  if (v36)
  {
    Swift::String v82 = v14;
    uint64_t v37 = v36;
    if (sub_1AB810())
    {
      uint64_t v81 = v2;
      sub_172774();
      uint64_t v80 = v38;
      swift_release();
      uint64_t v83 = v37;
      uint64_t v39 = sub_1AB810();
      uint64_t v79 = v0;
      if (v39 && (sub_1AB7B0(), sub_55890(), uint64_t v40 = sub_1AB680(), swift_release(), v40))
      {
        sub_1AB610();
        sub_55890();
        sub_1AB870();
        swift_release();
      }
      else
      {
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v35, 1, 1, v9);
      }
      uint64_t v41 = v92;
      uint64_t v42 = v11;
      uint64_t v43 = *(void (**)(void))(v11 + 104);
      unsigned int v78 = enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Previous(_:);
      long long v77 = (void (*)(unsigned char *, void, uint64_t))v43;
      v43(v33);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v33, 0, 1, v9);
      uint64_t v44 = (uint64_t)&v18[*(int *)(v41 + 48)];
      sub_553FC((uint64_t)v35, (uint64_t)v18, &qword_201CB8);
      sub_553FC((uint64_t)v33, v44, &qword_201CB8);
      sub_DBA98((uint64_t)v18);
      if (v51)
      {
        sub_2EF0C((uint64_t)v33, &qword_201CB8);
        sub_2EF0C((uint64_t)v35, &qword_201CB8);
        sub_DBA98(v44);
        if (v51)
        {
          uint64_t v45 = v90;
          goto LABEL_33;
        }
      }
      else
      {
        sub_553FC((uint64_t)v18, (uint64_t)v30, &qword_201CB8);
        sub_DBA98(v44);
        if (!v51)
        {
          uint64_t v61 = sub_DBB10();
          v62(v61);
          sub_DB9CC(&qword_203538, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues);
          int v76 = sub_1ACDB0();
          uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
          uint64_t v64 = v41;
          uint64_t v41 = v92;
          v63(v64, v9);
          sub_2EF0C((uint64_t)v33, &qword_201CB8);
          sub_2EF0C((uint64_t)v35, &qword_201CB8);
          v63((uint64_t)v30, v9);
          sub_2EF0C((uint64_t)v18, &qword_201CB8);
          uint64_t v45 = v90;
          if (v76)
          {
LABEL_42:
            uint64_t v68 = sub_1AC7D0();
            swift_beginAccess();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v85, v68, v87);
            uint64_t v69 = sub_1AC7F0();
            os_log_type_t v70 = sub_1ACF50();
            if (os_log_type_enabled(v69, v70))
            {
              uint64_t v71 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v71 = 0;
              _os_log_impl(&def_342E4, v69, v70, "We are forcing DateTime convergence strategy to be .future because user said previous dayOfWeek or monthOfYear", v71, 2u);
              sub_A1F0();
            }

            sub_47814();
            v72();
            sub_1AB430();
            uint64_t v60 = (unsigned int *)&enum case for DateTimeResolutionSpec.DateTimeConvergenceStrategy.future(_:);
            goto LABEL_45;
          }
          goto LABEL_22;
        }
        sub_2EF0C((uint64_t)v33, &qword_201CB8);
        sub_2EF0C((uint64_t)v35, &qword_201CB8);
        (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v30, v9);
      }
      sub_2EF0C((uint64_t)v18, &qword_203520);
      uint64_t v45 = v90;
LABEL_22:
      if (sub_1AB810() && (sub_1AB7B0(), sub_55890(), uint64_t v52 = sub_1AB640(), swift_release(), v52))
      {
        sub_1AB610();
        sub_55890();
        uint64_t v53 = v89;
        sub_1AB870();
        swift_release();
      }
      else
      {
        uint64_t v53 = v89;
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v89, 1, 1, v9);
      }
      uint64_t v54 = (uint64_t)v88;
      v77(v88, v78, v9);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v54, 0, 1, v9);
      uint64_t v55 = *(int *)(v41 + 48);
      uint64_t v56 = v79;
      uint64_t v57 = v79 + v55;
      sub_553FC((uint64_t)v53, v79, &qword_201CB8);
      sub_553FC(v54, v57, &qword_201CB8);
      sub_DBA98(v56);
      if (!v51)
      {
        uint64_t v58 = v84;
        sub_553FC(v56, v84, &qword_201CB8);
        sub_DBA98(v57);
        if (!v59)
        {
          uint64_t v65 = sub_DBB10();
          v66(v65);
          sub_DB9CC(&qword_203538, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues);
          LODWORD(v93) = sub_1ACDB0();
          uint64_t v67 = *(void (**)(void))(v42 + 8);
          sub_47814();
          v67();
          sub_2EF0C(v54, &qword_201CB8);
          sub_2EF0C((uint64_t)v53, &qword_201CB8);
          sub_47814();
          v67();
          sub_2EF0C(v79, &qword_201CB8);
          if (v93) {
            goto LABEL_42;
          }
LABEL_38:
          sub_1AB430();
          uint64_t v60 = (unsigned int *)&enum case for DateTimeResolutionSpec.DateTimeConvergenceStrategy.past(_:);
LABEL_45:
          uint64_t v73 = v91;
          uint64_t v74 = v81;
          (*(void (**)(uint64_t, void, uint64_t))(v91 + 104))(v45, *v60, v81);
          sub_172BE4();
          swift_release();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v45, v74);
          sub_55360((uint64_t)&v94);
          sub_A56C();
          return;
        }
        sub_2EF0C(v54, &qword_201CB8);
        sub_2EF0C((uint64_t)v53, &qword_201CB8);
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v58, v9);
LABEL_37:
        sub_2EF0C(v56, &qword_203520);
        goto LABEL_38;
      }
      sub_2EF0C(v54, &qword_201CB8);
      sub_2EF0C((uint64_t)v53, &qword_201CB8);
      sub_DBA98(v57);
      if (!v51) {
        goto LABEL_37;
      }
      uint64_t v18 = (unsigned char *)v56;
LABEL_33:
      sub_2EF0C((uint64_t)v18, &qword_201CB8);
      goto LABEL_42;
    }
    swift_release();
  }
  sub_1AAA10();
  sub_A56C();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v46, v47, v48, v49);
}

uint64_t sub_D99F4()
{
  uint64_t v0 = sub_1ABB60();
  LODWORD(result) = sub_195114(v0, v1);
  if (result == 9) {
    return 3;
  }
  else {
    return result;
  }
}

void sub_D9A2C()
{
  sub_A638();
  uint64_t v3 = v2;
  sub_2694(&qword_201CB8);
  sub_20688();
  __chkstk_darwin(v4);
  sub_53E0();
  uint64_t v50 = v5;
  sub_2694(&qword_201CC0);
  sub_20688();
  __chkstk_darwin(v6);
  sub_53E0();
  uint64_t v49 = v7;
  uint64_t v8 = sub_2694(&qword_201CC8);
  uint64_t v9 = sub_53D4(v8);
  __chkstk_darwin(v9);
  sub_47EB8();
  uint64_t v10 = sub_1AAA10();
  sub_52C4();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_E548();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = sub_1AAD60();
  sub_52C4();
  uint64_t v19 = v18;
  __chkstk_darwin(v20);
  sub_DBC04();
  id v21 = [objc_allocWithZone((Class)NSDateIntervalFormatter) init];
  [v21 setDateStyle:1];
  sub_1AAD50();
  Class isa = sub_1AAD40().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v0, v17);
  [v21 setTimeZone:isa];

  sub_D90F8();
  sub_A208(v1, 1, v10);
  if (v32)
  {
    uint64_t v23 = 7104878;
    sub_2EF0C(v1, &qword_201CC8);
    uint64_t v24 = (void *)0xE300000000000000;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v16, v1, v10);
    Class v25 = sub_1AA9A0().super.isa;
    id v26 = [v21 stringFromDateInterval:v25];

    if (v26)
    {
      uint64_t v23 = sub_1ACDD0();
      uint64_t v24 = v27;
    }
    else
    {
      uint64_t v23 = 7104878;
      uint64_t v24 = (void *)0xE300000000000000;
    }
    sub_47814();
    v28();
  }
  sub_1AD080(186);
  v51._countAndFlagsBits = 0xD000000000000015;
  v51._object = (void *)0x80000000001BC0A0;
  sub_1ACE70(v51);
  uint64_t v29 = sub_1ABB60();
  sub_195114(v29, v30);
  sub_1AD140();
  v52._countAndFlagsBits = 0x707954617461640ALL;
  v52._object = (void *)0xEB00000000203A65;
  sub_1ACE70(v52);
  sub_D895C();
  sub_2694(&qword_201DA8);
  v53._countAndFlagsBits = sub_1ACFC0();
  sub_1ACE70(v53);
  swift_bridgeObjectRelease();
  v54._countAndFlagsBits = 0x6E6152657461640ALL;
  v54._object = (void *)0xEC000000203A6567;
  sub_1ACE70(v54);
  v55._countAndFlagsBits = v23;
  v55._object = v24;
  sub_1ACE70(v55);
  swift_bridgeObjectRelease();
  sub_DBCAC((uint64_t)"\nisRequestForUser: ");
  sub_DA0C8();
  BOOL v32 = (v31 & 1) == 0;
  if (v31) {
    v33._countAndFlagsBits = 1702195828;
  }
  else {
    v33._countAndFlagsBits = 0x65736C6166;
  }
  if (v32) {
    uint64_t v34 = (void *)0xE500000000000000;
  }
  else {
    uint64_t v34 = (void *)0xE400000000000000;
  }
  v33._object = v34;
  sub_1ACE70(v33);
  swift_bridgeObjectRelease();
  v56._countAndFlagsBits = 0xD000000000000012;
  v56._object = (void *)0x80000000001B7310;
  sub_1ACE70(v56);
  sub_D8704();
  sub_2694(&qword_201DB0);
  v57._countAndFlagsBits = sub_1ACFC0();
  sub_1ACE70(v57);
  swift_bridgeObjectRelease();
  sub_DBCAC((uint64_t)"\nmeasurementValue: ");
  sub_D8424();
  sub_2694(qword_201DB8);
  v58._countAndFlagsBits = sub_1ACFC0();
  sub_1ACE70(v58);
  swift_bridgeObjectRelease();
  v59._countAndFlagsBits = 0xD000000000000017;
  v59._object = (void *)0x80000000001B7350;
  sub_1ACE70(v59);
  sub_DA4E0((uint64_t (*)(void))&dispatch thunk of UsoEntity_common_HealthLog.valueQualifier.getter, (void (*)(uint64_t))&dispatch thunk of UsoEntity_common_MeasurementQualifier.definedValue.getter, (uint64_t (*)(void))&type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues, v49);
  uint64_t v35 = sub_1ACFC0();
  uint64_t v37 = v36;
  sub_2EF0C(v49, &qword_201CC0);
  v60._countAndFlagsBits = v35;
  v60._object = v37;
  sub_1ACE70(v60);
  swift_bridgeObjectRelease();
  v61._countAndFlagsBits = 0x736F507473696C0ALL;
  v61._object = (void *)0xEF203A6E6F697469;
  sub_1ACE70(v61);
  sub_DA4E0((uint64_t (*)(void))&dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter, (void (*)(uint64_t))&dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter, (uint64_t (*)(void))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues, v50);
  uint64_t v38 = sub_1ACFC0();
  uint64_t v40 = v39;
  sub_2EF0C(v50, &qword_201CB8);
  v62._countAndFlagsBits = v38;
  v62._object = v40;
  sub_1ACE70(v62);
  swift_bridgeObjectRelease();
  v63._countAndFlagsBits = 0x726174537361680ALL;
  v63._object = (void *)0xEF203A6574614474;
  sub_1ACE70(v63);
  char v41 = sub_DA5D4(v3, (uint64_t (*)(uint64_t))&dispatch thunk of UsoEntity_common_DateTimeRange.start.getter);
  BOOL v42 = (v41 & 1) == 0;
  if (v41) {
    v43._countAndFlagsBits = 1702195828;
  }
  else {
    v43._countAndFlagsBits = 0x65736C6166;
  }
  if (v42) {
    uint64_t v44 = (void *)0xE500000000000000;
  }
  else {
    uint64_t v44 = (void *)0xE400000000000000;
  }
  v43._object = v44;
  sub_1ACE70(v43);
  swift_bridgeObjectRelease();
  v64._countAndFlagsBits = 0x44646E457361680ALL;
  v64._object = (void *)0xED0000203A657461;
  sub_1ACE70(v64);
  char v45 = sub_DA5D4(v3, (uint64_t (*)(uint64_t))&dispatch thunk of UsoEntity_common_DateTimeRange.end.getter);
  BOOL v46 = (v45 & 1) == 0;
  if (v45) {
    v47._countAndFlagsBits = 1702195828;
  }
  else {
    v47._countAndFlagsBits = 0x65736C6166;
  }
  if (v46) {
    uint64_t v48 = (void *)0xE500000000000000;
  }
  else {
    uint64_t v48 = (void *)0xE400000000000000;
  }
  v47._object = v48;
  sub_1ACE70(v47);

  swift_bridgeObjectRelease();
  sub_A56C();
}

void sub_DA0C8()
{
  sub_A638();
  uint64_t v3 = sub_1AB6D0();
  sub_52C4();
  uint64_t v22 = v4;
  __chkstk_darwin(v5);
  sub_E548();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_2694(&qword_205DE0);
  sub_20688();
  __chkstk_darwin(v10);
  sub_47EB8();
  uint64_t v11 = sub_2694(&qword_205DE8);
  uint64_t v12 = sub_53D4(v11);
  __chkstk_darwin(v12);
  sub_98794();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v21 - v15;
  __chkstk_darwin(v14);
  if (sub_DBC8C())
  {
    if (!sub_1AB7F0())
    {
      swift_release();
      goto LABEL_14;
    }
    sub_1AB6C0();
    (*(void (**)(char *, void, uint64_t))(v22 + 104))(v16, enum case for UsoEntity_common_Person.DefinedValues.common_Person_User(_:), v3);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v16, 0, 1, v3);
    uint64_t v17 = v0 + *(int *)(v9 + 48);
    sub_553FC(v2, v0, &qword_205DE8);
    sub_553FC((uint64_t)v16, v17, &qword_205DE8);
    sub_A208(v0, 1, v3);
    if (!v18)
    {
      sub_553FC(v0, v1, &qword_205DE8);
      sub_A208(v17, 1, v3);
      if (!v18)
      {
        uint64_t v19 = v22;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v8, v17, v3);
        sub_DB9CC(&qword_205DF0, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_Person.DefinedValues);
        sub_1ACDB0();
        swift_release();
        swift_release();
        uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
        v20(v8, v3);
        sub_2EF0C((uint64_t)v16, &qword_205DE8);
        sub_2EF0C(v2, &qword_205DE8);
        v20(v1, v3);
        sub_2EF0C(v0, &qword_205DE8);
        goto LABEL_14;
      }
      swift_release();
      swift_release();
      sub_2EF0C((uint64_t)v16, &qword_205DE8);
      sub_2EF0C(v2, &qword_205DE8);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v1, v3);
LABEL_13:
      sub_2EF0C(v0, &qword_205DE0);
      goto LABEL_14;
    }
    swift_release();
    swift_release();
    sub_2EF0C((uint64_t)v16, &qword_205DE8);
    sub_2EF0C(v2, &qword_205DE8);
    sub_A208(v17, 1, v3);
    if (!v18) {
      goto LABEL_13;
    }
    sub_2EF0C(v0, &qword_205DE8);
  }
LABEL_14:
  sub_A56C();
}

uint64_t sub_DA460@<X0>(uint64_t a1@<X8>)
{
  return sub_DA4E0((uint64_t (*)(void))&dispatch thunk of UsoEntity_common_HealthLog.valueQualifier.getter, (void (*)(uint64_t))&dispatch thunk of UsoEntity_common_MeasurementQualifier.definedValue.getter, (uint64_t (*)(void))&type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues, a1);
}

uint64_t sub_DA4A0@<X0>(uint64_t a1@<X8>)
{
  return sub_DA4E0((uint64_t (*)(void))&dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter, (void (*)(uint64_t))&dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter, (uint64_t (*)(void))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues, a1);
}

uint64_t sub_DA4E0@<X0>(uint64_t (*a1)(void)@<X1>, void (*a2)(uint64_t)@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X8>)
{
  if (sub_1AC270() && (uint64_t v8 = a1(), v9 = swift_release(), v8))
  {
    a2(v9);
    return swift_release();
  }
  else
  {
    uint64_t v11 = a3(0);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a4, 1, 1, v11);
  }
}

uint64_t sub_DA5A4(uint64_t a1)
{
  return sub_DA5D4(a1, (uint64_t (*)(uint64_t))&dispatch thunk of UsoEntity_common_DateTimeRange.start.getter);
}

uint64_t sub_DA5BC(uint64_t a1)
{
  return sub_DA5D4(a1, (uint64_t (*)(uint64_t))&dispatch thunk of UsoEntity_common_DateTimeRange.end.getter);
}

uint64_t sub_DA5D4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result = sub_1AC270();
  if (result)
  {
    uint64_t v4 = sub_1AB810();
    swift_release();
    if (v4 && (sub_1AB780(), uint64_t v5 = sub_55634(), v6 = a2(v5), swift_release(), v6))
    {
      swift_release();
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_DA65C(uint64_t a1, char a2)
{
  if (sub_1AC3F0()) {
    return 239;
  }
  uint64_t v5 = sub_1AC260();
  if (!v6)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void *)0xE000000000000000;
  }
  __int16 v7 = sub_178E48(v5, v6);
  if (v7 != 270)
  {
    if (sub_1771BC(v7) == 0x6168636C65656877 && v8 == 0xEE006573755F7269)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_DBAD4();
      sub_1AD2F0();
      sub_DBBEC();
    }
    if ((sub_7235C(268, (uint64_t)&off_1F4028) & 1) == 0 || a2 == 61)
    {
      if (sub_1771BC(268) == 0x6168636C65656877 && v12 == 0xEA00000000007269)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_DBAD4();
        sub_1AD2F0();
        sub_DBBEC();
      }
      if (a2 != 61)
      {
        if (sub_481F0(a2) == 0x6168636C65656877 && v14 == 0xEF687375705F7269)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_DBAD4();
          sub_1AD2F0();
          sub_DBBEC();
        }
      }
      return 247;
    }
    else
    {
      if (sub_481F0(a2) == 1885697139 && v10 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_1AD2F0();
        sub_DBBEC();
      }
      return 269;
    }
  }

  return sub_DB788(a2);
}

void sub_DA944()
{
  sub_A638();
  uint64_t v1 = v0;
  uint64_t v2 = sub_1AC800();
  sub_52C4();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_A314();
  uint64_t v8 = v6 - v7;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v69 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v69 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v69 - v16;
  uint64_t v18 = sub_1AB5E0();
  sub_52C4();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  sub_A314();
  uint64_t v24 = v22 - v23;
  __chkstk_darwin(v25);
  if (!v1)
  {
    sub_1AC7D0();
    sub_DBAF0();
    sub_DBB54();
    v44();
    char v45 = sub_1AC7F0();
    os_log_type_t v46 = sub_1ACF50();
    if (os_log_type_enabled(v45, v46))
    {
      Swift::String v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v47 = 0;
      _os_log_impl(&def_342E4, v45, v46, "Failed to parse flowDistinction: no measurementCategory entity", v47, 2u);
      sub_A1F0();
    }

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
    goto LABEL_20;
  }
  uint64_t v74 = (char *)&v69 - v26;
  swift_retain();
  uint64_t v27 = sub_1AB620();
  if (!v27)
  {
    sub_1AC7D0();
    sub_DBAF0();
    sub_DBB54();
    v48();
    swift_retain_n();
    uint64_t v49 = sub_1AC7F0();
    os_log_type_t v50 = sub_1ACF50();
    if (os_log_type_enabled(v49, v50))
    {
      Swift::String v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      uint64_t v80 = v1;
      v81[0] = v52;
      *(_DWORD *)Swift::String v51 = 136315138;
      sub_1AB9D0();
      uint64_t v77 = v2;
      swift_retain();
      uint64_t v53 = sub_1ACE00();
      uint64_t v55 = sub_4A278(v53, v54, v81);
      sub_DBB78(v55);
      sub_1ACFE0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v49, v50, "Failed to parse flowDistinction: no 'name' UsoIdentifier found in measurementCategory: %s", v51, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();
      swift_release();

      (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v77);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v2);
    }
    goto LABEL_20;
  }
  uint64_t v76 = v20;
  uint64_t v77 = v2;
  uint64_t v28 = *(void *)(v27 + 16);
  uint64_t v75 = v1;
  uint64_t v73 = v15;
  if (!v28)
  {
LABEL_11:
    sub_1AC7D0();
    sub_DBAF0();
    sub_DBB54();
    v36();
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_1AC7F0();
    os_log_type_t v38 = sub_1ACF50();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      v81[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_1ACEE0();
      unint64_t v42 = v41;
      swift_bridgeObjectRelease();
      uint64_t v43 = sub_4A278(v40, v42, v81);
      sub_DBB78(v43);
      sub_1ACFE0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v37, v38, "Failed to parse flowDistinction: no identifier found with namespace 'healthLogValueCategory' in identifiers: %s", v39, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();
      swift_release();

      (*(void (**)(char *, uint64_t))(v4 + 8))(v73, v77);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v2);
    }
    goto LABEL_20;
  }
  os_log_type_t v70 = v17;
  uint64_t v71 = v4;
  uint64_t v29 = *(void (**)(uint64_t, unint64_t, uint64_t))(v76 + 16);
  unint64_t v30 = v27 + ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
  char v31 = (void (**)(uint64_t, uint64_t))(v76 + 8);
  uint64_t v32 = *(void *)(v76 + 72);
  uint64_t v72 = v27;
  swift_bridgeObjectRetain();
  uint64_t v79 = "#activeEnergy_Dialog";
  unint64_t v78 = 0x80000000001BC080;
  while (1)
  {
    v29(v24, v30, v18);
    uint64_t v33 = sub_1AB5D0();
    if (!v34) {
      goto LABEL_9;
    }
    if (v33 == 0xD000000000000016 && v34 == v78) {
      break;
    }
    char v35 = sub_1AD2F0();
    swift_bridgeObjectRelease();
    if (v35) {
      goto LABEL_22;
    }
LABEL_9:
    (*v31)(v24, v18);
    v30 += v32;
    if (!--v28)
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = v71;
      uint64_t v2 = v77;
      uint64_t v15 = v73;
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
LABEL_22:
  uint64_t v56 = v76;
  uint64_t v57 = v77;
  swift_bridgeObjectRelease();
  Swift::String v58 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v74, v24, v18);
  swift_bridgeObjectRelease();
  uint64_t v59 = sub_1AB5C0();
  unint64_t v61 = v60;
  (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v18);
  swift_bridgeObjectRetain();
  sub_1AC470();
  if (v62)
  {
    sub_1AC7D0();
    sub_DBAF0();
    uint64_t v63 = v71;
    Swift::String v64 = v70;
    (*(void (**)(void))(v71 + 16))();
    swift_bridgeObjectRetain();
    uint64_t v65 = sub_1AC7F0();
    os_log_type_t v66 = sub_1ACF50();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      v81[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v68 = sub_4A278(v59, v61, v81);
      sub_DBB78(v68);
      sub_1ACFE0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&def_342E4, v65, v66, "Failed to parse flowDistinction: unexpected healthLogValueCategory value: %s", v67, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();
      swift_release();

      (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v77);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v57);
    }
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_20:
  sub_A56C();
}

void sub_DB184()
{
  sub_A638();
  uint64_t v3 = v2;
  uint64_t v4 = sub_2694(&qword_205DC8);
  uint64_t v5 = sub_53D4(v4);
  __chkstk_darwin(v5);
  sub_DBBA8();
  uint64_t v6 = sub_1AB700();
  sub_52C4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_DBAB8();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - v11;
  if (v3)
  {
    sub_1AB980();
    swift_retain();
    sub_DBC64();
    if (v27)
    {
      if (!sub_1AB970()) {
        goto LABEL_19;
      }
      uint64_t v26 = v8;
      sub_1AB5B0();
      sub_1AB740();
      sub_1AB7D0();
      swift_release();
      if (v27)
      {
        sub_1AB730();
        char v14 = v13;
        swift_release();
        swift_release();
        swift_release();
        uint64_t v8 = v26;
        if ((v14 & 1) == 0) {
          goto LABEL_20;
        }
      }
      else
      {
        swift_release();
        swift_release();
        uint64_t v8 = v26;
      }
    }
    sub_1AB740();
    swift_retain();
    sub_DBC64();
    swift_release();
    if (v27)
    {
      sub_1AB730();
      char v16 = v15;
      swift_release();
      if ((v16 & 1) == 0) {
        goto LABEL_20;
      }
    }
    sub_1AB720();
    swift_retain();
    sub_DBC64();
    swift_release();
    if (!v27) {
      goto LABEL_20;
    }
    sub_1AB6F0();
    sub_A208(v0, 1, v6);
    if (v17)
    {
      sub_2EF0C(v0, &qword_205DC8);
    }
    else
    {
      uint64_t v18 = sub_DBB34();
      v19(v18);
      uint64_t v20 = sub_DBB8C();
      v21(v20);
      char v22 = sub_15468C((uint64_t)v12, v1);
      uint64_t v23 = *(void (**)(void))(v8 + 8);
      sub_DBB68();
      v23();
      sub_DBB68();
      v23();
      if (v22)
      {
        swift_release();
        swift_release();
        goto LABEL_21;
      }
    }
    uint64_t v24 = sub_1AB710();
    if (v25)
    {
      sub_DB5F8(v24, v25);
      swift_release();
      swift_release();
      goto LABEL_21;
    }
LABEL_19:
    swift_release();
LABEL_20:
    swift_release();
  }
LABEL_21:
  sub_A56C();
}

uint64_t sub_DB480()
{
  return sub_D99F4();
}

void sub_DB488()
{
}

void sub_DB490()
{
}

void sub_DB498()
{
}

uint64_t sub_DB4A0()
{
  return sub_D8704();
}

void *sub_DB4A8()
{
  return sub_D8D30();
}

uint64_t sub_DB4B0()
{
  return sub_D8424();
}

uint64_t sub_DB4D0@<X0>(uint64_t a1@<X8>)
{
  return sub_DA4E0((uint64_t (*)(void))&dispatch thunk of UsoEntity_common_HealthLog.valueQualifier.getter, (void (*)(uint64_t))&dispatch thunk of UsoEntity_common_MeasurementQualifier.definedValue.getter, (uint64_t (*)(void))&type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues, a1);
}

uint64_t sub_DB528@<X0>(uint64_t a1@<X8>)
{
  return sub_DA4E0((uint64_t (*)(void))&dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter, (void (*)(uint64_t))&dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter, (uint64_t (*)(void))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues, a1);
}

uint64_t sub_DB580()
{
  return sub_DA5D4(*v0, (uint64_t (*)(uint64_t))&dispatch thunk of UsoEntity_common_DateTimeRange.start.getter) & 1;
}

uint64_t sub_DB5B4()
{
  return sub_DA5D4(*v0, (uint64_t (*)(uint64_t))&dispatch thunk of UsoEntity_common_DateTimeRange.end.getter) & 1;
}

void sub_DB5E8()
{
}

void sub_DB5F0()
{
}

uint64_t sub_DB5F8(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_1AD070();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    __chkstk_darwin(a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (uint64_t v7 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = sub_1AD0E0();
      }
      char v6 = sub_DB90C(v4, v5, (void (*)(uint64_t *__return_ptr))sub_DB988);
      swift_bridgeObjectRelease();
    }
  }
  if (v6) {
    return 0;
  }
  else {
    return 0;
  }
}

uint64_t sub_DB788(char a1)
{
  sub_DBC80();
  if (!v3)
  {
    switch(v2)
    {
      case 16:
        return 76;
      case 38:
        return 241;
      case 37:
        return 248;
      case 36:
        return 230;
    }
    sub_48170(a1);
  }
  char v4 = sub_1AC510();
  swift_bridgeObjectRelease();
  uint64_t result = 261;
  switch(v4)
  {
    case 1:
      uint64_t result = 267;
      break;
    case 2:
      return 230;
    case 3:
      unint64_t v6 = 0xF7004C010DuLL >> (16 * (a1 - 53));
      if ((a1 - 53) > 2u) {
        LODWORD(v6) = 270;
      }
      if (a1 == 61) {
        uint64_t result = 270;
      }
      else {
        uint64_t result = v6;
      }
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *sub_DB8A0@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_DB90C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

unsigned char *sub_DB96C@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_DB8A0(a1, a2);
}

void *sub_DB988@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_DB9CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for WellnessTask()
{
  return &type metadata for WellnessTask;
}

unint64_t sub_DBA24(uint64_t a1)
{
  unint64_t result = sub_DBA4C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_DBA4C()
{
  unint64_t result = qword_205DF8[0];
  if (!qword_205DF8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_205DF8);
  }
  return result;
}

uint64_t sub_DBA98(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v1);
}

uint64_t sub_DBAF0()
{
  return swift_beginAccess();
}

uint64_t sub_DBB10()
{
  return *(void *)(v0 - 248);
}

uint64_t sub_DBB34()
{
  return v0;
}

uint64_t sub_DBB78(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return v1 - 120;
}

uint64_t sub_DBB8C()
{
  return v0;
}

uint64_t sub_DBBA8()
{
  return 0;
}

uint64_t sub_DBBC4()
{
  return v0;
}

uint64_t sub_DBBEC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_DBC1C()
{
  return swift_dynamicCast();
}

uint64_t sub_DBC40()
{
  return swift_dynamicCast();
}

uint64_t sub_DBC64()
{
  return sub_1AB7D0();
}

uint64_t sub_DBC8C()
{
  return sub_1AC270();
}

void sub_DBCAC(uint64_t a1@<X8>)
{
  v2._countAndFlagsBits = 0xD000000000000013;
  v2._object = (void *)((a1 - 32) | 0x8000000000000000);
  sub_1ACE70(v2);
}

uint64_t initializeWithCopy for GenericNotSupportedFlow(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  return a1;
}

uint64_t assignWithCopy for GenericNotSupportedFlow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  return a1;
}

void *initializeWithTake for GenericNotSupportedFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA1uLL);
}

uint64_t assignWithTake for GenericNotSupportedFlow(uint64_t a1, uint64_t a2)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericNotSupportedFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 161))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericNotSupportedFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 160) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 161) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 161) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericNotSupportedFlow()
{
  return &type metadata for GenericNotSupportedFlow;
}

uint64_t sub_DBFD8()
{
  sub_24CE0();

  return sub_1AAF80();
}

uint64_t sub_DC02C()
{
  sub_A364();
  v1[5] = v2;
  v1[6] = v0;
  uint64_t v3 = sub_1AC800();
  v1[7] = v3;
  sub_A19C(v3);
  v1[8] = v4;
  v1[9] = swift_task_alloc();
  uint64_t v5 = sub_1AB0A0();
  v1[10] = v5;
  sub_A19C(v5);
  v1[11] = v6;
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v1[14] = v7;
  sub_A19C(v7);
  v1[15] = v8;
  v1[16] = swift_task_alloc();
  return _swift_task_switch(sub_DC144, 0, 0);
}

uint64_t sub_DC144()
{
  sub_A364();
  sub_2E38((void *)(*(void *)(v0 + 48) + 40), *(void *)(*(void *)(v0 + 48) + 64));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  void *v1 = v0;
  v1[1] = sub_DC1E0;
  return sub_9D71C();
}

uint64_t sub_DC1E0(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v8 = sub_DC4A0;
  }
  else
  {
    *(void *)(v5 + 144) = a1;
    uint64_t v8 = sub_DC2E0;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_DC2E0()
{
  uint64_t v1 = (void *)v0[18];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[13];
  uint64_t v12 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];
  uint64_t v7 = v0[10];
  uint64_t v8 = (void *)v0[6];
  sub_1AB090();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v4, v7);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
  id v9 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_2E38(v8, v8[3]);
  sub_1AAF40();
  sub_1AC330();
  sub_1AB130();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_DC4A0()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v4 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF60();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&def_342E4, v5, v6, "Failed to get wellness pattern for error message", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[8];
  uint64_t v8 = v0[9];
  uint64_t v10 = v0[7];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  sub_1AC320();
  sub_1AB140();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_DC618()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_9A7C;
  return sub_DC02C();
}

uint64_t sub_DC6B0()
{
  sub_A364();
  v1[17] = v2;
  v1[18] = v0;
  sub_E510();
  v1[19] = v3;
  uint64_t v4 = sub_1AB410();
  v1[20] = v4;
  sub_A19C(v4);
  v1[21] = v5;
  v1[22] = sub_A42C();
  sub_2694(&qword_203A20);
  v1[23] = sub_A42C();
  uint64_t v6 = sub_1AB4B0();
  v1[24] = v6;
  sub_A19C(v6);
  v1[25] = v7;
  v1[26] = sub_A42C();
  uint64_t v8 = sub_1AB510();
  v1[27] = v8;
  sub_A19C(v8);
  v1[28] = v9;
  v1[29] = sub_A220();
  v1[30] = swift_task_alloc();
  uint64_t v10 = sub_1AB420();
  v1[31] = v10;
  sub_A19C(v10);
  v1[32] = v11;
  v1[33] = sub_A220();
  v1[34] = swift_task_alloc();
  uint64_t v12 = sub_1AB450();
  v1[35] = v12;
  sub_A19C(v12);
  v1[36] = v13;
  v1[37] = sub_A42C();
  uint64_t v14 = sub_1AB3F0();
  v1[38] = v14;
  sub_A19C(v14);
  v1[39] = v15;
  v1[40] = sub_A42C();
  uint64_t v16 = sub_1AC800();
  v1[41] = v16;
  sub_A19C(v16);
  v1[42] = v17;
  v1[43] = sub_A220();
  v1[44] = swift_task_alloc();
  v1[45] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v18, v19, v20);
}

uint64_t sub_DC8BC()
{
  uint64_t v105 = v0;
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = v0 + 136;
  uint64_t v3 = *(void *)(v1 + 224);
  uint64_t v4 = *(void *)(v1 + 192);
  uint64_t v5 = *(void *)(v1 + 200);
  uint64_t v6 = *(void *)(v1 + 176);
  uint64_t v7 = *(void *)(v1 + 184);
  uint64_t v8 = *(void *)(v1 + 168);
  uint64_t v9 = sub_1AC7D0();
  sub_A340();
  uint64_t v99 = v9;
  long long v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v98(v3, v9, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v2, v8);
  uint64_t v10 = sub_1AC7F0();
  os_log_type_t v11 = sub_1ACF50();
  uint64_t v12 = v102;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v96 = v102[42];
    uint64_t v13 = swift_slowAlloc();
    uint64_t v104 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = sub_1AD3E0();
    v102[15] = sub_4A278(v14, v15, &v104);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    sub_7F1C0((unint64_t *)&qword_202010, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v16 = sub_1AD2C0();
    v102[16] = sub_4A278(v16, v17, &v104);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_E558();
    v18();
    _os_log_impl(&def_342E4, v10, v11, "%s Parsing Input: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v97 = *(void (**)(void))(v96 + 8);
    sub_E558();
    v19();
  }
  else
  {
    uint64_t v20 = v102[45];
    uint64_t v21 = v102[41];
    uint64_t v22 = v102[42];
    sub_E530();
    v23();

    uint64_t v97 = *(void (**)(void))(v22 + 8);
    ((void (*)(uint64_t, uint64_t))v97)(v20, v21);
  }
  uint64_t v24 = v102[34];
  uint64_t v26 = v102[31];
  uint64_t v25 = v102[32];
  uint64_t v101 = sub_7E618();
  uint64_t v28 = v27;
  sub_1AB3E0();
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t))(v25 + 88);
  if (v29(v24, v26) == enum case for Parse.uso(_:))
  {
    *(void *)type = v29;
    uint64_t v103 = v28;
    uint64_t v31 = v12[36];
    uint64_t v30 = v12[37];
    uint64_t v33 = v12[34];
    uint64_t v32 = v12[35];
    uint64_t v34 = v12[26];
    uint64_t v35 = v12[25];
    uint64_t v94 = v12[24];
    uint64_t v95 = v12[27];
    uint64_t v36 = v12[23];
    (*(void (**)(uint64_t, void))(v12[32] + 96))(v33, v12[31]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v30, v33, v32);
    sub_1AB440();
    uint64_t v37 = sub_1AB4A0();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v94);
    sub_C1028(v37, v36);
    swift_bridgeObjectRelease();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v36, 1, v95) != 1)
    {
      (*(void (**)(void, void, void))(v12[28] + 32))(v12[30], v12[23], v12[27]);
      if (sub_1AB4E0())
      {
        uint64_t v58 = v12[30];
        uint64_t v60 = v12[27];
        uint64_t v59 = v12[28];
        Swift::String v47 = v12;
        if (*(unsigned char *)(v12[18] + 16) == 1)
        {
          uint64_t v104 = v103;
          swift_bridgeObjectRetain();
          unint64_t v61 = swift_bridgeObjectRetain();
          sub_DF120(v61);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v104 = v103;
          swift_bridgeObjectRetain();
          sub_DF120((unint64_t)v101);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v103 = v104;
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
        goto LABEL_42;
      }
      uint64_t v64 = v12[29];
      uint64_t v63 = v12[30];
      uint64_t v65 = v12;
      uint64_t v68 = v12 + 27;
      uint64_t v67 = v12[27];
      uint64_t v66 = v68[1];
      char v69 = sub_1AB4F0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v64, v63, v67);
      Swift::String v47 = v65;
      uint64_t v70 = v65[28];
      if (v69)
      {
        uint64_t v71 = *(void (**)(void))(v70 + 8);
        sub_DF6A8();
        v71();
        sub_DF6A8();
        v71();
        uint64_t v72 = sub_DF690();
        v73(v72);
      }
      else
      {
        char v85 = sub_1AB500();
        uint64_t v86 = *(void (**)(void))(v70 + 8);
        sub_DF6A8();
        v86();
        sub_DF6A8();
        v86();
        uint64_t v87 = sub_DF690();
        v88(v87);
        if ((v85 & 1) == 0)
        {
          uint64_t v12 = v65;
          uint64_t v90 = v65[18];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v103 = *(void *)(v90 + 24);
          swift_bridgeObjectRetain();
          uint64_t v100 = 2;
          goto LABEL_31;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v100 = 0;
LABEL_30:
      uint64_t v12 = v47;
      goto LABEL_31;
    }
    uint64_t v38 = v12[23];
    sub_E530();
    v39();
    sub_7F208(v38, &qword_203A20);
    uint64_t v28 = v103;
    uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t))type;
  }
  else
  {
    (*(void (**)(void, void))(v102[32] + 8))(v102[34], v102[31]);
  }
  uint64_t v40 = v12[33];
  uint64_t v41 = v12[31];
  sub_1AB3E0();
  if (v29(v40, v41) != enum case for Parse.directInvocation(_:))
  {
    Swift::String v47 = v12;
    uint64_t v49 = v12[32];
    uint64_t v50 = v12[33];
    uint64_t v51 = v12[31];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v51);
    sub_A340();
    sub_E524();
    v52();
    uint64_t v53 = (void *)sub_1AC7F0();
    os_log_type_t v54 = sub_1ACF60();
    if (sub_29300(v54))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_A7FC(&def_342E4, v55, v56, "Received unsupported type of input");
      sub_A1F0();
    }

    sub_E530();
    v57();
    goto LABEL_29;
  }
  uint64_t v42 = v12[33];
  uint64_t v43 = v12[21];
  uint64_t v44 = v12[22];
  uint64_t v45 = v12[20];
  (*(void (**)(uint64_t, void))(v12[32] + 96))(v42, v12[31]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v44, v42, v45);
  uint64_t v46 = sub_1AB400();
  if (!v46)
  {
    *(_OWORD *)(v1 - 120) = 0u;
    *(_OWORD *)(v1 - 104) = 0u;
    goto LABEL_22;
  }
  sub_19DA50(0xD000000000000012, 0x80000000001B73B0, v46, (_OWORD *)(v1 - 120));
  swift_bridgeObjectRelease();
  if (!v12[5])
  {
LABEL_22:
    char v62 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_7F208(v1 - 120, &qword_202BA0);
LABEL_26:
    Swift::String v47 = v62;
    uint64_t v74 = v62[44];
    uint64_t v75 = v47[41];
    sub_A340();
    v98(v74, v99, v75);
    uint64_t v76 = (void *)sub_1AC7F0();
    os_log_type_t v77 = sub_1ACF60();
    if (sub_29300(v77))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_A7FC(&def_342E4, v78, v79, "LogMedAsNeededConfirmationStrategy failed to unpack directInvocation, returning nil");
      sub_A1F0();
    }
    uint64_t v81 = v47[21];
    uint64_t v80 = v47[22];
    uint64_t v82 = v47[20];

    sub_E530();
    v97();
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v80, v82);
LABEL_29:
    uint64_t v100 = 0;
    uint64_t v103 = 1;
    goto LABEL_30;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    char v62 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  if (*(unsigned char *)(v1 + 232) == 1)
  {
    Swift::String v47 = v12;
    if (*(unsigned char *)(v12[18] + 16) == 1)
    {
      uint64_t v104 = v28;
      swift_bridgeObjectRetain();
      unint64_t v48 = swift_bridgeObjectRetain();
      sub_DF120(v48);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v104 = v28;
      swift_bridgeObjectRetain();
      sub_DF120((unint64_t)v101);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v103 = v104;
LABEL_42:
    uint64_t v91 = sub_DF690();
    v92(v91);
    uint64_t v100 = 1;
    goto LABEL_30;
  }
  sub_E530();
  v89();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v100 = 0;
  uint64_t v103 = v28;
LABEL_31:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v83 = (uint64_t (*)(uint64_t, uint64_t))v12[1];
  return v83(v100, v103);
}

uint64_t sub_DD300()
{
  sub_E510();
  sub_1AB3F0();
  sub_52C4();
  __chkstk_darwin(v0);
  sub_E548();
  uint64_t v1 = sub_1AC800();
  sub_52C4();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_E548();
  uint64_t v7 = v6 - v5;
  sub_1AC7C0();
  sub_A340();
  uint64_t v22 = v1;
  sub_E524();
  v8();
  sub_E524();
  v9();
  uint64_t v10 = sub_1AC7F0();
  os_log_type_t v11 = sub_1ACF50();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = sub_1AD3E0();
    sub_4A278(v13, v14, &v23);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    sub_7F1C0((unint64_t *)&qword_202010, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v15 = sub_1AD2C0();
    sub_4A278(v15, v16, &v23);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v17 = sub_7F404();
    v18(v17);
    _os_log_impl(&def_342E4, v10, v11, "%s Handling Input: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    uint64_t v19 = sub_7F404();
    v20(v19);
  }

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v22);
  return sub_1AB0B0();
}

uint64_t sub_DD5E0()
{
  sub_A364();
  v1[13] = v2;
  v1[14] = v0;
  v1[12] = v3;
  sub_E510();
  v1[15] = v4;
  uint64_t v5 = sub_1AB0A0();
  v1[16] = v5;
  sub_A19C(v5);
  v1[17] = v6;
  v1[18] = sub_A220();
  v1[19] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v1[20] = v7;
  sub_A19C(v7);
  v1[21] = v8;
  v1[22] = sub_A42C();
  uint64_t v9 = sub_1AC800();
  v1[23] = v9;
  sub_A19C(v9);
  v1[24] = v10;
  v1[25] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_DD6E4()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0;
  uint64_t v4 = v0 + 24;
  uint64_t v3 = v0[24];
  uint64_t v2 = v4[1];
  uint64_t v5 = v1[23];
  uint64_t v6 = sub_1AC7D0();
  sub_A340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v5);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = sub_1AC7F0();
  os_log_type_t v8 = sub_1ACF50();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = sub_1AD3E0();
    v1[10] = sub_4A278(v11, v12, &v20);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v1[11] = v13;
    sub_1ACFE0();
    *uint64_t v10 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_342E4, v7, v8, "%s makeErrorResponse called with error: %@", (uint8_t *)v9, 0x16u);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    sub_E558();
    v14();
  }
  else
  {
    uint64_t v16 = v1[24];
    uint64_t v15 = v1[25];
    uint64_t v17 = v1[23];
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  sub_2E38((void *)(v1[14] + 72), *(void *)(v1[14] + 96));
  uint64_t v18 = (void *)swift_task_alloc();
  v1[26] = v18;
  *uint64_t v18 = v1;
  v18[1] = sub_DD9C8;
  return sub_9D67C();
}

uint64_t sub_DD9C8()
{
  sub_47634();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 216) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    return v6();
  }
  else
  {
    sub_A4F0();
    return _swift_task_switch(v8, v9, v10);
  }
}

uint64_t sub_DDAFC()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[14];
  sub_1AB090();
  sub_E524();
  v6();
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1AB390();
  id v7 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_E3FC(v5 + 208, (uint64_t)(v0 + 2));
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[6];
  sub_2E38(v0 + 2, v8);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[28] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_DDC94;
  uint64_t v11 = v0[27];
  uint64_t v12 = v0[22];
  uint64_t v13 = v0[12];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v13, v11, v12, v8, v9);
}

uint64_t sub_DDC94()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 232) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_DDD74()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_7F3CC();
  return v4();
}

uint64_t sub_DDE3C()
{
  sub_A364();
  v1[26] = v2;
  v1[27] = v0;
  uint64_t v3 = sub_1AC800();
  v1[28] = v3;
  sub_A19C(v3);
  v1[29] = v4;
  v1[30] = sub_A42C();
  sub_2694(&qword_202008);
  v1[31] = sub_A42C();
  sub_1AB0A0();
  v1[32] = sub_A42C();
  uint64_t v5 = sub_1AB3D0();
  v1[33] = v5;
  sub_A19C(v5);
  v1[34] = v6;
  v1[35] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_DDF44()
{
  sub_E588();
  uint64_t v1 = v0[27];
  uint64_t v2 = sub_DEC00();
  char v5 = *(unsigned char *)(v1 + 16);
  if (v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v2;
  }
  char v8 = v2 < 1 || v3 < 1;
  char v9 = v4 > 0;
  v0[36] = *(void *)(v1 + 192);
  double v10 = (double)v6;
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[37] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_DE034;
  return sub_1A5728(v5, *(uint64_t *)&v10, 0, v8, v9);
}

uint64_t sub_DE034()
{
  sub_E588();
  uint64_t v3 = v2;
  sub_A1B4();
  uint64_t v5 = v4;
  sub_E53C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_E53C();
  *char v8 = v7;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  else {
    *(void *)(v5 + 304) = v3;
  }
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_DE150()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 312) = v1;
  void *v1 = v0;
  v1[1] = sub_DE1E8;
  return sub_7A658(0x6C65636E6163, 0xE600000000000000);
}

uint64_t sub_DE1E8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  v1[20] = v0;
  v1[21] = v3;
  v1[22] = v4;
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 320) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_DE2BC()
{
  sub_A364();
  v0[41] = v0[21];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[42] = v1;
  void *v1 = v0;
  v1[1] = sub_DE360;
  return sub_7A658(0x6D7269666E6F63, 0xE700000000000000);
}

uint64_t sub_DE360()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  v1[23] = v0;
  v1[24] = v3;
  v1[25] = v4;
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 344) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_DE434()
{
  unint64_t v1 = *(void *)(v0 + 344);
  unint64_t v3 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v4 = *(void **)(v0 + 304);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 216);
  BOOL v7 = v3 == 0;
  if (!v3) {
    unint64_t v3 = 0xE600000000000000;
  }
  unint64_t v24 = v3;
  if (v7) {
    uint64_t v2 = 0x6C65636E6143;
  }
  uint64_t v23 = v2;
  if (v1) {
    uint64_t v8 = *(void *)(v0 + 192);
  }
  else {
    uint64_t v8 = 0x6D7269666E6F43;
  }
  if (!v1) {
    unint64_t v1 = 0xE700000000000000;
  }
  unint64_t v21 = v1;
  uint64_t v22 = v8;
  *(void *)(v0 + 40) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 48) = sub_45E30();
  *(unsigned char *)(v0 + 16) = 4;
  char v9 = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  sub_1AB080();
  sub_1AB370();
  sub_1AB3B0();
  sub_DED1C();
  uint64_t v10 = sub_1AB190();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, 0, 1, v10);
  sub_1AB3A0();
  sub_1AB390();
  id v11 = [v4 catId];
  sub_1ACDD0();

  sub_1AB380();
  sub_1AB3C0();
  sub_E3FC(v6 + 208, v0 + 56);
  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v13 = *(void *)(v0 + 88);
  sub_2E38((void *)(v0 + 56), v12);
  *(void *)(v0 + 120) = type metadata accessor for WellnessSnippets();
  *(void *)(v0 + 128) = sub_7F1C0((unint64_t *)&qword_202590, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  unint64_t v14 = sub_B5B0((uint64_t *)(v0 + 96));
  uint64_t *v14 = 0xD000000000000031;
  v14[1] = 0x80000000001BAC40;
  void v14[2] = v23;
  v14[3] = v24;
  v14[4] = v22;
  v14[5] = v21;
  *((unsigned char *)v14 + 48) = v9 & 1;
  swift_storeEnumTagMultiPayload();
  sub_2694(&qword_202588);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1AF530;
  *(void *)(v15 + 32) = v4;
  uint64_t v25 = v15;
  sub_1ACEF0();
  *(void *)(v0 + 352) = v25;
  id v16 = v4;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 360) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_DE748;
  uint64_t v18 = *(void *)(v0 + 280);
  uint64_t v19 = *(void *)(v0 + 208);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v19, v0 + 96, v25, v18, v12, v13);
}

uint64_t sub_DE748()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 96;
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_DE838()
{
  sub_47634();

  uint64_t v1 = sub_E570();
  v2(v1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_7F3CC();
  return v3();
}

uint64_t sub_DE8DC()
{
  sub_E588();
  uint64_t v2 = v0[29];
  uint64_t v1 = v0[30];
  uint64_t v3 = v0[28];
  uint64_t v4 = sub_1AC7D0();
  sub_A340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = (void *)sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  if (sub_29300(v6))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_A7FC(&def_342E4, v7, v8, "Couldn't create logMedGenericMixedStatusConfirmation_Dialog, returning generic error output.");
    sub_A1F0();
  }

  uint64_t v9 = sub_E570();
  v10(v9);
  sub_DF4CC();
  v0[46] = swift_allocError();
  id v11 = (void *)swift_task_alloc();
  v0[47] = v11;
  *id v11 = v0;
  v11[1] = sub_DEA38;
  return sub_DD5E0();
}

uint64_t sub_DEA38()
{
  sub_47634();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *os_log_type_t v6 = v5;
  *(void *)(v3 + 384) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_7F3CC();
    return v10();
  }
}

uint64_t sub_DEB70()
{
  sub_47634();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v0();
}

uint64_t sub_DEC00()
{
  unint64_t v0 = (unint64_t)sub_7E618();
  unint64_t v2 = v1;
  unint64_t v4 = v3;
  if (v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1AD170();
  }
  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1AD170();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v4 >> 62)
  {
    sub_DF6B8();
    sub_1AD170();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_DED1C()
{
  uint64_t v0 = sub_1AB580();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_E548();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_1AB4D0();
  sub_52C4();
  uint64_t v7 = v6;
  uint64_t v9 = __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  id v11 = (char *)&v15 - v10;
  sub_1AB4C0();
  sub_1AB570();
  sub_E524();
  v12();
  sub_1AB550();
  sub_1AB180();
  sub_2694(&qword_202000);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1ADCF0;
  sub_E524();
  v13();
  sub_1AB170();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v5);
}

uint64_t type metadata accessor for LogMedGenericMixedStatusConfirmationStrategy()
{
  return self;
}

uint64_t sub_DEF48(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  void *v2 = v1;
  v2[1] = sub_BED5C;
  return sub_DC6B0();
}

uint64_t sub_DEFE0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_E50C;
  return sub_DDE3C();
}

uint64_t sub_DF078()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_E50C;
  return sub_DD5E0();
}

uint64_t sub_DF120(unint64_t a1)
{
  if (a1 >> 62)
  {
    sub_DF6B8();
    uint64_t v3 = sub_1AD170();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1AD170();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8));
  }
  if (__OFADD__(v4, v3))
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v5 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v1 = v5;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
    {
      uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
      if (v4 + v3 <= *(void *)((char *)&dword_18 + (v5 & 0xFFFFFFFFFFFFFF8)) >> 1) {
        goto LABEL_12;
      }
    }
  }
  if (v5 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1AD0B0();
    swift_bridgeObjectRelease();
    uint64_t *v1 = v8;
    uint64_t v7 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_12:
    uint64_t result = sub_DF33C(v7 + 8 * *(void *)(v7 + 16) + 32, (*(void *)(v7 + 24) >> 1) - *(void *)(v7 + 16), a1);
    if (v10 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    sub_1AD170();
    swift_bridgeObjectRelease();
  }
  if (v10 >= 1)
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8));
    BOOL v12 = __OFADD__(v11, v10);
    uint64_t v13 = v11 + v10;
    if (v12)
    {
      __break(1u);
      return result;
    }
    *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8)) = v13;
  }
  swift_bridgeObjectRelease();

  return sub_1ACEF0();
}

uint64_t sub_DF2D8(void *a1)
{
  id v1 = [a1 completionStatus];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_1ACDD0();

  return v3;
}

uint64_t sub_DF33C(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1AD170();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_1AD170();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_DF518();
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            sub_2694(&qword_206000);
            uint64_t v10 = sub_1AA660(v13, i, a3);
            id v12 = *v11;
            ((void (*)(void *, void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)) <= a2)
      {
        sub_4A0F0((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)), v5);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_DF4CC()
{
  unint64_t result = qword_205FF8;
  if (!qword_205FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205FF8);
  }
  return result;
}

unint64_t sub_DF518()
{
  unint64_t result = qword_206008;
  if (!qword_206008)
  {
    sub_B464(&qword_206000);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206008);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LogMedGenericMixedStatusConfirmationStrategyError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0xDF608);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LogMedGenericMixedStatusConfirmationStrategyError()
{
  return &type metadata for LogMedGenericMixedStatusConfirmationStrategyError;
}

unint64_t sub_DF644()
{
  unint64_t result = qword_206010;
  if (!qword_206010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206010);
  }
  return result;
}

uint64_t sub_DF690()
{
  return v0;
}

uint64_t sub_DF6B8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_DF6D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AB0A0();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(&v10[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v6);
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  sub_1AB370();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
}

uint64_t sub_DF7FC()
{
  return sub_1AB390();
}

uint64_t sub_DF824(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return a2(a1);
}

uint64_t sub_DF86C(uint64_t a1)
{
  return sub_DF824(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t GenericMedCompletedLogModel.init(medStatus:givenTime:url:dontDisplayGranularTime:sashBundleID:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:allScheduledMedicationsLabel:snippetHeaderModel:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v52 = a7;
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  int v47 = a4;
  uint64_t v46 = a2;
  int v43 = a1;
  uint64_t v58 = a16;
  uint64_t v59 = a17;
  uint64_t v56 = a14;
  uint64_t v57 = a15;
  uint64_t v54 = a8;
  uint64_t v55 = a13;
  uint64_t v53 = a12;
  uint64_t v51 = a11;
  uint64_t v48 = a10;
  uint64_t v19 = sub_2694(&qword_2022C8);
  __chkstk_darwin(v19 - 8);
  unint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (int *)type metadata accessor for GenericMedCompletedLogModel();
  uint64_t v44 = a9 + v22[6];
  uint64_t v23 = v44;
  uint64_t v41 = sub_1AAD90();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v23, 1, 1, v41);
  uint64_t v42 = v22[7];
  *(unsigned char *)(a9 + v42) = 0;
  unint64_t v24 = (void *)(a9 + v22[8]);
  *unint64_t v24 = 0xD000000000000010;
  v24[1] = 0x80000000001B6D10;
  uint64_t v25 = v22[9];
  *(unsigned char *)(a9 + v25) = 0;
  uint64_t v26 = (void *)(a9 + v22[10]);
  *uint64_t v26 = 0;
  v26[1] = 0;
  uint64_t v27 = (void *)(a9 + v22[11]);
  void *v27 = 0;
  v27[1] = 0;
  uint64_t v28 = (void *)(a9 + v22[12]);
  void *v28 = 0;
  v28[1] = 0;
  uint64_t v29 = (void *)(a9 + v22[13]);
  *uint64_t v29 = 0;
  v29[1] = 0;
  uint64_t v30 = a9 + v22[14];
  uint64_t v45 = v30;
  uint64_t v31 = type metadata accessor for SnippetHeaderModel();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v30, 1, 1, v31);
  *(unsigned char *)a9 = v43;
  *(void *)(a9 + 8) = sub_E01C4();
  *(void *)(a9 + 16) = v32;
  sub_E0264(a3);
  sub_5B028(a3, &qword_201E20);
  sub_1AABD0();
  sub_20688();
  sub_E558();
  v33();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v41);
  sub_5B0E0((uint64_t)v21, v44, &qword_2022C8);
  *(unsigned char *)(a9 + v42) = v47;
  swift_bridgeObjectRelease();
  uint64_t v34 = v50;
  *unint64_t v24 = v49;
  v24[1] = v34;
  *(unsigned char *)(a9 + v25) = v52;
  swift_bridgeObjectRelease();
  uint64_t v35 = v48;
  *uint64_t v26 = v54;
  v26[1] = v35;
  swift_bridgeObjectRelease();
  uint64_t v36 = v53;
  void *v27 = v51;
  v27[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v37 = v56;
  void *v28 = v55;
  v28[1] = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = v58;
  uint64_t v38 = v59;
  *uint64_t v29 = v57;
  v29[1] = v39;
  return sub_5B0E0(v38, v45, &qword_2022D0);
}

uint64_t type metadata accessor for GenericMedCompletedLogModel()
{
  uint64_t result = qword_206088;
  if (!qword_206088) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SpecificMedCompletedLogModel.time.getter()
{
  return sub_22F80();
}

uint64_t SpecificMedCompletedLogModel.time.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.time.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericMedCompletedLogModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for GenericMedCompletedLogModel();
  return sub_553FC(v1 + *(int *)(v3 + 24), a1, &qword_2022C8);
}

uint64_t GenericMedCompletedLogModel.appPunchout.setter()
{
  uint64_t v2 = sub_E2C98();
  return sub_5B0E0(v0, v1 + *(int *)(v2 + 24), &qword_2022C8);
}

uint64_t (*GenericMedCompletedLogModel.appPunchout.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericMedCompletedLogModel.dontDisplayGranularTime.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 28));
}

uint64_t GenericMedCompletedLogModel.dontDisplayGranularTime.setter(char a1)
{
  uint64_t result = type metadata accessor for GenericMedCompletedLogModel();
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.dontDisplayGranularTime.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericMedCompletedLogModel.sashBundleID.getter()
{
  return sub_22F80();
}

uint64_t GenericMedCompletedLogModel.sashBundleID.setter()
{
  sub_E2CB0();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.sashBundleID.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericMedCompletedLogModel.isSmartEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for GenericMedCompletedLogModel() + 36));
}

uint64_t GenericMedCompletedLogModel.isSmartEnabled.setter(char a1)
{
  uint64_t result = type metadata accessor for GenericMedCompletedLogModel();
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.isSmartEnabled.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericMedCompletedLogModel.loggedLabel.getter()
{
  return sub_22F80();
}

uint64_t GenericMedCompletedLogModel.loggedLabel.setter()
{
  sub_E2CB0();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.loggedLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericMedCompletedLogModel.skippedLabel.getter()
{
  return sub_22F80();
}

uint64_t GenericMedCompletedLogModel.skippedLabel.setter()
{
  sub_E2CB0();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.skippedLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericMedCompletedLogModel.takenLabel.getter()
{
  return sub_22F80();
}

uint64_t GenericMedCompletedLogModel.takenLabel.setter()
{
  sub_E2CB0();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.takenLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericMedCompletedLogModel.allScheduledMedicationsLabel.getter()
{
  return sub_22F80();
}

uint64_t GenericMedCompletedLogModel.allScheduledMedicationsLabel.setter()
{
  sub_E2CB0();
  uint64_t result = sub_7A45C();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*GenericMedCompletedLogModel.allScheduledMedicationsLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericMedCompletedLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for GenericMedCompletedLogModel();
  return sub_553FC(v1 + *(int *)(v3 + 56), a1, &qword_2022D0);
}

uint64_t GenericMedCompletedLogModel.snippetHeaderModel.setter()
{
  uint64_t v2 = sub_E2C98();
  return sub_5B0E0(v0, v1 + *(int *)(v2 + 56), &qword_2022D0);
}

uint64_t (*GenericMedCompletedLogModel.snippetHeaderModel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t sub_E01C4()
{
  id v0 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v0 setTimeStyle:1];
  Class isa = sub_1AAB60().super.isa;
  id v2 = [v0 stringFromDate:isa];

  uint64_t v3 = sub_1ACDD0();
  return v3;
}

uint64_t sub_E0264(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201E20);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AAB10();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_553FC(a1, (uint64_t)v4, &qword_201E20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_5B028((uint64_t)v4, &qword_201E20);
    return sub_1AAD80();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_1AAAD0();
    sub_1AAD80();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_E042C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x757461745364656DLL && a2 == 0xE900000000000073;
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1701669236 && a2 == 0xE400000000000000;
    if (v6 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
      if (v7 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000017 && a2 == 0x80000000001BC110 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x646E754268736173 && a2 == 0xEC0000004449656CLL;
        if (v8 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v9 = a1 == 0x457472616D537369 && a2 == 0xEE0064656C62616ELL;
          if (v9 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            BOOL v10 = a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562;
            if (v10 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              BOOL v11 = a1 == 0x4C64657070696B73 && a2 == 0xEC0000006C656261;
              if (v11 || (sub_1AD2F0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                BOOL v12 = a1 == 0x62614C6E656B6174 && a2 == 0xEA00000000006C65;
                if (v12 || (sub_1AD2F0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 8;
                }
                else if (a1 == 0xD00000000000001CLL && a2 == 0x80000000001BC130 || (sub_1AD2F0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 9;
                }
                else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B78B0)
                {
                  swift_bridgeObjectRelease();
                  return 10;
                }
                else
                {
                  char v13 = sub_1AD2F0();
                  swift_bridgeObjectRelease();
                  if (v13) {
                    return 10;
                  }
                  else {
                    return 11;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_E088C()
{
  return 11;
}

unint64_t sub_E0894(char a1)
{
  unint64_t result = 0xD000000000000017;
  switch(a1)
  {
    case 1:
      unint64_t result = 1701669236;
      break;
    case 2:
      unint64_t result = 0x68636E7550707061;
      break;
    case 3:
      return result;
    case 4:
      unint64_t result = 0x646E754268736173;
      break;
    case 5:
      unint64_t result = 0x457472616D537369;
      break;
    case 6:
      unint64_t result = 0x614C646567676F6CLL;
      break;
    case 7:
      unint64_t result = 0x4C64657070696B73;
      break;
    case 8:
      unint64_t result = 0x62614C6E656B6174;
      break;
    case 9:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      unint64_t result = 0x757461745364656DLL;
      break;
  }
  return result;
}

unint64_t sub_E0A28()
{
  return sub_E0894(*v0);
}

uint64_t sub_E0A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_E042C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_E0A58@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_E088C();
  *a1 = result;
  return result;
}

uint64_t sub_E0A80(uint64_t a1)
{
  unint64_t v2 = sub_E0DFC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E0ABC(uint64_t a1)
{
  unint64_t v2 = sub_E0DFC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GenericMedCompletedLogModel.encode(to:)(void *a1)
{
  uint64_t v4 = sub_2694(&qword_206018);
  sub_52C4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_55784();
  sub_2E38(a1, a1[3]);
  sub_E0DFC();
  sub_1AD3B0();
  v21[6] = 0;
  sub_E2CE8();
  if (!v1)
  {
    v21[5] = 1;
    sub_1AD280();
    BOOL v8 = (int *)type metadata accessor for GenericMedCompletedLogModel();
    v21[4] = 2;
    sub_1AAD90();
    sub_E15B4(&qword_202BC0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    sub_1AD270();
    v21[3] = 3;
    sub_E2CE8();
    sub_7A494(v8[8]);
    v21[2] = 4;
    sub_1AD280();
    v21[1] = 5;
    sub_E2CE8();
    uint64_t v9 = sub_7A494(v8[10]);
    v21[0] = 6;
    sub_E2CCC(v9, v10, (uint64_t)v21);
    uint64_t v11 = sub_7A494(v8[11]);
    char v20 = 7;
    sub_E2CCC(v11, v12, (uint64_t)&v20);
    uint64_t v13 = sub_7A494(v8[12]);
    char v19 = 8;
    sub_E2CCC(v13, v14, (uint64_t)&v19);
    uint64_t v15 = sub_7A494(v8[13]);
    char v18 = 9;
    sub_E2CCC(v15, v16, (uint64_t)&v18);
    type metadata accessor for SnippetHeaderModel();
    sub_E15B4(&qword_202BD0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1AD270();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

unint64_t sub_E0DFC()
{
  unint64_t result = qword_206020;
  if (!qword_206020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206020);
  }
  return result;
}

uint64_t GenericMedCompletedLogModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v4 = sub_2694(&qword_2022D0);
  __chkstk_darwin(v4 - 8);
  sub_53E0();
  uint64_t v59 = v5;
  uint64_t v6 = sub_2694(&qword_2022C8);
  __chkstk_darwin(v6 - 8);
  sub_53E0();
  uint64_t v61 = v7;
  sub_2694(&qword_206028);
  sub_52C4();
  uint64_t v62 = v8;
  uint64_t v63 = v9;
  __chkstk_darwin(v8);
  sub_55784();
  uint64_t v10 = type metadata accessor for GenericMedCompletedLogModel();
  uint64_t v11 = (int *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0xE000000000000000;
  uint64_t v14 = (uint64_t)&v13[v11[8]];
  uint64_t v15 = sub_1AAD90();
  uint64_t v72 = v14;
  uint64_t v60 = v15;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v14, 1, 1, v15);
  uint64_t v16 = v11[9];
  v13[v16] = 0;
  uint64_t v17 = &v13[v11[10]];
  *(void *)uint64_t v17 = 0xD000000000000010;
  *((void *)v17 + 1) = 0x80000000001B6D10;
  uint64_t v18 = v11[11];
  v13[v18] = 0;
  sub_E2D04(v11[12]);
  uint64_t v70 = v19;
  uint64_t v71 = v20;
  sub_E2D04(v11[13]);
  char v69 = v21;
  sub_E2D04(v11[14]);
  uint64_t v68 = v22;
  sub_E2D04(v11[15]);
  uint64_t v67 = v23;
  uint64_t v24 = (uint64_t)&v13[v11[16]];
  uint64_t v25 = type metadata accessor for SnippetHeaderModel();
  uint64_t v65 = v24;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v24, 1, 1, v25);
  uint64_t v26 = a1[3];
  uint64_t v66 = a1;
  sub_2E38(a1, v26);
  sub_E0DFC();
  uint64_t v27 = v64;
  sub_1AD3A0();
  if (v27)
  {
    uint64_t v31 = v72;
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v66);
    swift_bridgeObjectRelease();
    sub_5B028(v31, &qword_2022C8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_5B028(v65, &qword_2022D0);
  }
  else
  {
    uint64_t v64 = v16;
    uint64_t v56 = v25;
    uint64_t v57 = v18;
    uint64_t v28 = v61;
    uint64_t v29 = v63;
    char v83 = 0;
    char *v13 = sub_1AD200() & 1;
    char v82 = 1;
    *((void *)v13 + 1) = sub_1AD1F0();
    *((void *)v13 + 2) = v30;
    char v81 = 2;
    sub_E15B4(&qword_202BE0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    sub_1AD1E0();
    sub_5B0E0(v28, v72, &qword_2022C8);
    char v80 = 3;
    uint64_t v61 = v2;
    v13[v64] = sub_1AD200() & 1;
    char v79 = 4;
    uint64_t v32 = sub_1AD1F0();
    uint64_t v34 = v33;
    uint64_t v35 = v71;
    swift_bridgeObjectRelease();
    *uint64_t v35 = v32;
    v35[1] = v34;
    char v78 = 5;
    char v36 = sub_1AD200();
    uint64_t v38 = v69;
    uint64_t v37 = v70;
    v13[v57] = v36 & 1;
    char v77 = 6;
    uint64_t v39 = sub_E2D10();
    uint64_t v41 = v40;
    swift_bridgeObjectRelease();
    *uint64_t v37 = v39;
    v37[1] = v41;
    char v76 = 7;
    uint64_t v42 = sub_E2D10();
    uint64_t v44 = v43;
    swift_bridgeObjectRelease();
    *uint64_t v38 = v42;
    v38[1] = v44;
    char v75 = 8;
    uint64_t v45 = sub_E2D10();
    uint64_t v47 = v46;
    uint64_t v48 = v68;
    swift_bridgeObjectRelease();
    *uint64_t v48 = v45;
    v48[1] = v47;
    char v74 = 9;
    uint64_t v49 = sub_E2D10();
    uint64_t v51 = v50;
    int v52 = v67;
    swift_bridgeObjectRelease();
    *int v52 = v49;
    v52[1] = v51;
    char v73 = 10;
    sub_E15B4(&qword_202BF0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v54 = v61;
    uint64_t v53 = v62;
    sub_1AD1E0();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v54, v53);
    sub_5B0E0(v59, v65, &qword_2022D0);
    sub_E14C0((uint64_t)v13, v58);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v66);
    return sub_E2130((uint64_t)v13, (void (*)(void))type metadata accessor for GenericMedCompletedLogModel);
  }
}

uint64_t sub_E14C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GenericMedCompletedLogModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_E1524()
{
  return sub_E15B4(&qword_202280, (void (*)(uint64_t))type metadata accessor for GenericMedCompletedLogModel);
}

uint64_t sub_E156C()
{
  return sub_E15B4(&qword_202140, (void (*)(uint64_t))type metadata accessor for GenericMedCompletedLogModel);
}

uint64_t sub_E15B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_E15FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GenericMedCompletedLogModel.init(from:)(a1, a2);
}

uint64_t sub_E1614(void *a1)
{
  return GenericMedCompletedLogModel.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for GenericMedCompletedLogModel(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1AAD90();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_2694(&qword_2022C8);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = a3[8];
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    uint64_t v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    char v19 = (void *)((char *)v4 + v18);
    char v20 = (void *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[11];
    uint64_t v23 = a3[12];
    uint64_t v24 = (void *)((char *)v4 + v22);
    uint64_t v25 = (void *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = (void *)((char *)v4 + v23);
    uint64_t v28 = (void *)((char *)a2 + v23);
    uint64_t v29 = v28[1];
    void *v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = a3[13];
    uint64_t v31 = a3[14];
    uint64_t v32 = (void *)((char *)v4 + v30);
    uint64_t v33 = (void *)((char *)a2 + v30);
    uint64_t v34 = v33[1];
    uint64_t v35 = (char *)a2 + v31;
    char v36 = (char *)v4 + v31;
    *uint64_t v32 = *v33;
    v32[1] = v34;
    uint64_t v37 = type metadata accessor for SnippetHeaderModel();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v35, 1, v37))
    {
      uint64_t v38 = sub_2694(&qword_2022D0);
      memcpy(v36, v35, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      uint64_t v39 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v36, v35, v39);
      uint64_t v40 = *(int *)(v37 + 20);
      uint64_t v41 = &v36[v40];
      uint64_t v42 = &v35[v40];
      uint64_t v43 = *((void *)v42 + 1);
      *(void *)uint64_t v41 = *(void *)v42;
      *((void *)v41 + 1) = v43;
      uint64_t v44 = *(int *)(v37 + 24);
      uint64_t v45 = &v36[v44];
      uint64_t v46 = &v35[v44];
      uint64_t v47 = *((void *)v46 + 1);
      *(void *)uint64_t v45 = *(void *)v46;
      *((void *)v45 + 1) = v47;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v36, 0, 1, v37);
    }
  }
  return v4;
}

uint64_t destroy for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_1AAD90();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 56);
  uint64_t v7 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = sub_1AC1E0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v6, v9);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_1AAD90();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_2694(&qword_2022C8);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[11];
  uint64_t v21 = a3[12];
  uint64_t v22 = (void *)(a1 + v20);
  uint64_t v23 = (void *)(a2 + v20);
  uint64_t v24 = v23[1];
  void *v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (void *)(a1 + v21);
  uint64_t v26 = (void *)(a2 + v21);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = a3[13];
  uint64_t v29 = a3[14];
  uint64_t v30 = (void *)(a1 + v28);
  uint64_t v31 = (void *)(a2 + v28);
  uint64_t v32 = v31[1];
  uint64_t v33 = (char *)(a2 + v29);
  uint64_t v34 = (char *)(a1 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v32;
  uint64_t v35 = type metadata accessor for SnippetHeaderModel();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1, v35))
  {
    uint64_t v36 = sub_2694(&qword_2022D0);
    memcpy(v34, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    uint64_t v37 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v34, v33, v37);
    uint64_t v38 = *(int *)(v35 + 20);
    uint64_t v39 = &v34[v38];
    uint64_t v40 = &v33[v38];
    uint64_t v41 = *((void *)v40 + 1);
    *(void *)uint64_t v39 = *(void *)v40;
    *((void *)v39 + 1) = v41;
    uint64_t v42 = *(int *)(v35 + 24);
    uint64_t v43 = &v34[v42];
    uint64_t v44 = &v33[v42];
    uint64_t v45 = *((void *)v44 + 1);
    *(void *)uint64_t v43 = *(void *)v44;
    *((void *)v43 + 1) = v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v34, 0, 1, v35);
  }
  return a1;
}

uint64_t assignWithCopy for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_1AAD90();
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_2694(&qword_2022C8);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  void *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v17 = a3[10];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[11];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[12];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[13];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  void *v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[14];
  uint64_t v30 = (char *)(a1 + v29);
  uint64_t v31 = (char *)(a2 + v29);
  uint64_t v32 = type metadata accessor for SnippetHeaderModel();
  int v33 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v30, 1, v32);
  int v34 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v31, 1, v32);
  if (!v33)
  {
    if (!v34)
    {
      uint64_t v44 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 24))(v30, v31, v44);
      uint64_t v45 = *(int *)(v32 + 20);
      uint64_t v46 = &v30[v45];
      uint64_t v47 = &v31[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      *((void *)v46 + 1) = *((void *)v47 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v48 = *(int *)(v32 + 24);
      uint64_t v49 = &v30[v48];
      uint64_t v50 = &v31[v48];
      *(void *)uint64_t v49 = *(void *)v50;
      *((void *)v49 + 1) = *((void *)v50 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_E2130((uint64_t)v30, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v34)
  {
LABEL_12:
    uint64_t v42 = sub_2694(&qword_2022D0);
    memcpy(v30, v31, *(void *)(*(void *)(v42 - 8) + 64));
    return a1;
  }
  uint64_t v35 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v30, v31, v35);
  uint64_t v36 = *(int *)(v32 + 20);
  uint64_t v37 = &v30[v36];
  uint64_t v38 = &v31[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = *((void *)v38 + 1);
  uint64_t v39 = *(int *)(v32 + 24);
  uint64_t v40 = &v30[v39];
  uint64_t v41 = &v31[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = *((void *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v30, 0, 1, v32);
  return a1;
}

uint64_t sub_E2130(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  sub_E558();
  v3();
  return a1;
}

uint64_t initializeWithTake for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  uint64_t v14 = a3[13];
  uint64_t v15 = a3[14];
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v18 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v17, 1, v18))
  {
    uint64_t v19 = sub_2694(&qword_2022D0);
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v16, v17, v20);
    *(_OWORD *)&v16[*(int *)(v18 + 20)] = *(_OWORD *)&v17[*(int *)(v18 + 20)];
    *(_OWORD *)&v16[*(int *)(v18 + 24)] = *(_OWORD *)&v17[*(int *)(v18 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v16, 0, 1, v18);
  }
  return a1;
}

uint64_t assignWithTake for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_1AAD90();
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v10);
  int v12 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1, v10);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = sub_2694(&qword_2022C8);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v15 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[12];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[13];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (uint64_t *)(a2 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[14];
  uint64_t v41 = (char *)(a1 + v40);
  uint64_t v42 = (char *)(a2 + v40);
  uint64_t v43 = type metadata accessor for SnippetHeaderModel();
  int v44 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v41, 1, v43);
  int v45 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v42, 1, v43);
  if (!v44)
  {
    if (!v45)
    {
      uint64_t v49 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 40))(v41, v42, v49);
      uint64_t v50 = *(int *)(v43 + 20);
      uint64_t v51 = &v41[v50];
      int v52 = &v42[v50];
      uint64_t v54 = *(void *)v52;
      uint64_t v53 = *((void *)v52 + 1);
      *(void *)uint64_t v51 = v54;
      *((void *)v51 + 1) = v53;
      swift_bridgeObjectRelease();
      uint64_t v55 = *(int *)(v43 + 24);
      uint64_t v56 = &v41[v55];
      uint64_t v57 = &v42[v55];
      uint64_t v59 = *(void *)v57;
      uint64_t v58 = *((void *)v57 + 1);
      *(void *)uint64_t v56 = v59;
      *((void *)v56 + 1) = v58;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_E2130((uint64_t)v41, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v45)
  {
LABEL_12:
    uint64_t v47 = sub_2694(&qword_2022D0);
    memcpy(v41, v42, *(void *)(*(void *)(v47 - 8) + 64));
    return a1;
  }
  uint64_t v46 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(v41, v42, v46);
  *(_OWORD *)&v41[*(int *)(v43 + 20)] = *(_OWORD *)&v42[*(int *)(v43 + 20)];
  *(_OWORD *)&v41[*(int *)(v43 + 24)] = *(_OWORD *)&v42[*(int *)(v43 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v41, 0, 1, v43);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E2720);
}

uint64_t sub_E2720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_2694(&qword_2022C8);
    sub_52E0();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 24);
    }
    else
    {
      uint64_t v10 = sub_2694(&qword_2022D0);
      uint64_t v11 = *(int *)(a3 + 56);
    }
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for GenericMedCompletedLogModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E27E8);
}

uint64_t sub_E27E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    sub_2694(&qword_2022C8);
    sub_52E0();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 24);
    }
    else
    {
      uint64_t v10 = sub_2694(&qword_2022D0);
      uint64_t v11 = *(int *)(a4 + 56);
    }
    return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_E2898()
{
  sub_E29C8(319, &qword_202C60, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  if (v0 <= 0x3F)
  {
    sub_E29C8(319, (unint64_t *)&qword_202C70, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_E29C8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1ACFD0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for GenericMedCompletedLogModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 10) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v5 = v6 - 11;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for GenericMedCompletedLogModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xE2B70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericMedCompletedLogModel.CodingKeys()
{
  return &type metadata for GenericMedCompletedLogModel.CodingKeys;
}

unint64_t sub_E2BAC()
{
  unint64_t result = qword_2060E8;
  if (!qword_2060E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2060E8);
  }
  return result;
}

unint64_t sub_E2BFC()
{
  unint64_t result = qword_2060F0;
  if (!qword_2060F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2060F0);
  }
  return result;
}

unint64_t sub_E2C4C()
{
  unint64_t result = qword_2060F8[0];
  if (!qword_2060F8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_2060F8);
  }
  return result;
}

uint64_t sub_E2C98()
{
  return type metadata accessor for GenericMedCompletedLogModel();
}

uint64_t sub_E2CB0()
{
  return type metadata accessor for GenericMedCompletedLogModel();
}

uint64_t sub_E2CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_E2CE8()
{
  return sub_1AD290();
}

void sub_E2D04(uint64_t a1@<X8>)
{
  int v2 = (void *)(v1 + a1);
  void *v2 = 0;
  v2[1] = 0;
}

uint64_t sub_E2D10()
{
  return sub_1AD1C0();
}

uint64_t sub_E2D28()
{
  sub_E3600();

  return sub_1AAF80();
}

uint64_t sub_E2D7C()
{
  sub_A364();
  v1[26] = v2;
  v1[27] = v0;
  uint64_t v3 = sub_1AC800();
  v1[28] = v3;
  sub_A19C(v3);
  v1[29] = v4;
  v1[30] = swift_task_alloc();
  uint64_t v5 = sub_1AB0A0();
  v1[31] = v5;
  sub_A19C(v5);
  v1[32] = v6;
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v1[35] = v7;
  sub_A19C(v7);
  v1[36] = v8;
  v1[37] = swift_task_alloc();
  return _swift_task_switch(sub_E2E94, 0, 0);
}

uint64_t sub_E2E94()
{
  sub_A364();
  sub_2E38((void *)(*(void *)(v0 + 216) + 40), *(void *)(*(void *)(v0 + 216) + 64));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v1;
  void *v1 = v0;
  v1[1] = sub_E2F30;
  return sub_9D7BC();
}

uint64_t sub_E2F30(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v5 + 312) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v8 = sub_E31E0;
  }
  else
  {
    *(void *)(v5 + 320) = a1;
    uint64_t v8 = sub_E302C;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_E302C()
{
  uint64_t v1 = (void *)v0[40];
  uint64_t v3 = v0[36];
  uint64_t v2 = v0[37];
  uint64_t v4 = v0[34];
  uint64_t v12 = v0[35];
  uint64_t v5 = v0[32];
  uint64_t v6 = v0[33];
  uint64_t v7 = v0[31];
  uint64_t v8 = (void *)v0[27];
  sub_1AB090();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v4, v7);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
  id v9 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_2E38(v8, v8[3]);
  sub_1AAF40();
  sub_1AB130();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_E31E0()
{
  uint64_t v2 = v0[29];
  uint64_t v1 = v0[30];
  uint64_t v3 = v0[28];
  uint64_t v4 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF60();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[25] = v9;
    sub_1ACFE0();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_342E4, v5, v6, "Couldn't execute wellness#outsideRetentionPolicy pattern. Error: %@", v7, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = v0[27];
  (*(void (**)(void, void))(v0[29] + 8))(v0[30], v0[28]);
  sub_9B48(v10, (uint64_t)(v0 + 2));
  sub_9BA4();
  sub_1AB120();
  sub_9BF0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_E344C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1AC250();
  __chkstk_darwin(v2 - 8);
  sub_E988C(a1);
  uint64_t v3 = type metadata accessor for WellnessCATPatternsExecutor(0);
  sub_1AC240();
  uint64_t v4 = sub_1AC1A0();
  a1[8] = v3;
  a1[9] = (uint64_t)&off_1F6840;
  a1[5] = v4;
  uint64_t v5 = type metadata accessor for WellnessLoggingCATPatternsExecutor(0);
  sub_1AC240();
  uint64_t v6 = sub_1AC1A0();
  a1[13] = v5;
  a1[14] = (uint64_t)&off_1F8838;
  a1[10] = v6;
  uint64_t v7 = type metadata accessor for WellnessQueryingCATPatternsExecutor(0);
  sub_1AC240();
  uint64_t result = sub_1AC1A0();
  a1[18] = v7;
  a1[19] = (uint64_t)&off_1F65F0;
  a1[15] = result;
  return result;
}

ValueMetadata *type metadata accessor for RequestOutsideDataRententionPolicyFlow()
{
  return &type metadata for RequestOutsideDataRententionPolicyFlow;
}

uint64_t sub_E3568()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_9A7C;
  return sub_E2D7C();
}

unint64_t sub_E3600()
{
  unint64_t result = qword_206118;
  if (!qword_206118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206118);
  }
  return result;
}

uint64_t sub_E364C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_first;
  uint64_t v2 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, v2);
  sub_E496C(OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_second);
  sub_E496C(OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_third);
  sub_E496C(OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_fourth);
  return v0;
}

uint64_t sub_E36C4()
{
  sub_74610(v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_first);
  sub_74610(v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_second);
  sub_74610(v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_third);
  sub_74610(v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin27WellnessDialogStringQuartet7Builder_fourth);
  return v0;
}

uint64_t sub_E371C()
{
  return sub_E3DA8((void (*)(void))sub_E36C4);
}

unint64_t sub_E3734()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_E3750()
{
  uint64_t v1 = sub_2694(&qword_201E28);
  __chkstk_darwin(v1 - 8);
  sub_E548();
  *(void *)(v0 + 16) = 0;
  sub_A18F4();
  sub_A1964();
  sub_A1934(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_first);
  sub_A18F4();
  sub_A1964();
  sub_A1934(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_second);
  sub_A18F4();
  sub_A1964();
  sub_A1934(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_third);
  sub_A18F4();
  sub_A1964();
  swift_release();
  sub_A1934(OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_fourth);
  return v0;
}

uint64_t sub_E3860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = sub_2694(&qword_201E28);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v26 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v26 - v17;
  BOOL v19 = a1 == 0x7473726966 && a2 == 0xE500000000000000;
  if (v19 || (sub_A1864() & 1) != 0)
  {
    sub_A14A8(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_first, (uint64_t)v18);
    sub_1AC1E0();
    sub_A18C4((uint64_t)v18);
    if (!v19) {
      goto LABEL_31;
    }
    uint64_t v20 = (uint64_t)v18;
  }
  else
  {
    BOOL v21 = a1 == 0x646E6F636573 && a2 == 0xE600000000000000;
    if (v21 || (sub_A1864() & 1) != 0)
    {
      sub_A14A8(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_second, (uint64_t)v16);
      sub_1AC1E0();
      sub_A18C4((uint64_t)v16);
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = (uint64_t)v16;
    }
    else
    {
      BOOL v22 = a1 == 0x6472696874 && a2 == 0xE500000000000000;
      if (v22 || (sub_A1864() & 1) != 0)
      {
        sub_A14A8(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_third, (uint64_t)v13);
        sub_1AC1E0();
        sub_A18C4((uint64_t)v13);
        if (!v19) {
          goto LABEL_31;
        }
        uint64_t v20 = (uint64_t)v13;
      }
      else
      {
        if (a1 != 0x687472756F66 || a2 != 0xE600000000000000)
        {
          uint64_t result = sub_A1864();
          if ((result & 1) == 0) {
            goto LABEL_34;
          }
        }
        sub_A14A8(v3 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_fourth, (uint64_t)v10);
        sub_1AC1E0();
        sub_A18C4((uint64_t)v10);
        if (!v19)
        {
LABEL_31:
          sub_E49BC();
          sub_A18E4();
          return (*(uint64_t (**)(void))(v25 + 32))();
        }
        uint64_t v20 = (uint64_t)v10;
      }
    }
  }
  uint64_t result = sub_74610(v20);
LABEL_34:
  *a3 = 0u;
  a3[1] = 0u;
  return result;
}

uint64_t sub_E3B8C(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1F4880;
  v6._object = a2;
  unint64_t v4 = sub_1AD190(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 4) {
    return 4;
  }
  else {
    return v4;
  }
}

uint64_t sub_E3BDC(char a1)
{
  return *(void *)&aFirst_1[8 * a1];
}

uint64_t sub_E3BFC(char *a1, char *a2)
{
  return sub_1544B0(*a1, *a2);
}

Swift::Int sub_E3C08()
{
  return sub_302DC();
}

uint64_t sub_E3C10()
{
  return sub_19D860();
}

Swift::Int sub_E3C18()
{
  return sub_19D8B4();
}

uint64_t sub_E3C20@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_E3B8C(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_E3C50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_E3BDC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_E3C7C()
{
  return sub_E3BDC(*v0);
}

uint64_t sub_E3C84@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_E3BD8();
  *a1 = result;
  return result;
}

void sub_E3CAC(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_E3CB8(uint64_t a1)
{
  unint64_t v2 = sub_E472C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E3CF4(uint64_t a1)
{
  unint64_t v2 = sub_E472C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_E3D30()
{
  sub_74610(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_first);
  sub_74610(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_second);
  sub_74610(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_third);
  sub_74610(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_fourth);
  return v0;
}

uint64_t sub_E3D90()
{
  return sub_E3DA8((void (*)(void))sub_E3D30);
}

uint64_t sub_E3DA8(void (*a1)(void))
{
  a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return _swift_deallocClassInstance(v1, v2, v3);
}

uint64_t sub_E3E04()
{
  return type metadata accessor for WellnessDialogStringQuartet(0);
}

uint64_t type metadata accessor for WellnessDialogStringQuartet(uint64_t a1)
{
  return sub_95FB8(a1, qword_206148);
}

void sub_E3E2C()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_E3ECC(void *a1)
{
  uint64_t v3 = sub_2694(&qword_2063C8);
  sub_52C4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_E548();
  uint64_t v9 = v8 - v7;
  sub_2E38(a1, a1[3]);
  sub_E472C();
  sub_1AD3B0();
  sub_1AC1E0();
  sub_E46E4(&qword_202BC8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
  sub_A1840();
  if (!v1)
  {
    sub_A1840();
    sub_A1840();
    sub_A1840();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

uint64_t sub_E4084(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_E4190(a1);
  return v2;
}

uint64_t sub_E40D4()
{
  return type metadata accessor for WellnessDialogStringQuartet.Builder(0);
}

uint64_t type metadata accessor for WellnessDialogStringQuartet.Builder(uint64_t a1)
{
  return sub_95FB8(a1, qword_206260);
}

void sub_E40FC()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_E4190(void *a1)
{
  uint64_t v3 = sub_2694(&qword_201E28);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v27 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v27 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  uint64_t v29 = sub_2694(&qword_2063B8);
  sub_52C4();
  __chkstk_darwin(v15);
  sub_E548();
  uint64_t v30 = a1;
  uint64_t v31 = v1;
  *(void *)(v1 + 16) = 0;
  sub_2E38(a1, a1[3]);
  sub_E472C();
  uint64_t v16 = v32;
  sub_1AD3A0();
  if (v16)
  {
    uint64_t v18 = (uint64_t)v30;
    uint64_t v22 = v31;

    type metadata accessor for WellnessDialogStringQuartet(0);
    swift_deallocPartialClassInstance();
    uint64_t v26 = v18;
  }
  else
  {
    uint64_t v32 = v9;
    uint64_t v28 = v6;
    sub_1AC1E0();
    char v36 = 0;
    uint64_t v17 = sub_E46E4(&qword_202BE8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    sub_1AD1E0();
    uint64_t v20 = v31;
    sub_A1510((uint64_t)v14, v31 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_first);
    char v35 = 1;
    v27[2] = v17;
    sub_1AD1E0();
    sub_A1510((uint64_t)v12, v20 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_second);
    char v34 = 2;
    uint64_t v21 = (uint64_t)v32;
    v27[1] = 0;
    sub_1AD1E0();
    uint64_t v22 = v20;
    sub_A1510(v21, v20 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_third);
    char v33 = 3;
    uint64_t v23 = (uint64_t)v28;
    sub_1AD1E0();
    uint64_t v24 = sub_E49A4();
    v25(v24);
    sub_A1510(v23, v20 + OBJC_IVAR____TtC18WellnessFlowPlugin27WellnessDialogStringQuartet_fourth);
    uint64_t v26 = (uint64_t)v30;
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v26);
  return v22;
}

unint64_t sub_E45C0()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_E45E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_E3860(a1, a2, a3);
}

uint64_t sub_E4604@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_E4084(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_E4630(void *a1)
{
  return sub_E3ECC(a1);
}

uint64_t sub_E4654()
{
  return sub_E46E4(&qword_2063A8, (void (*)(uint64_t))type metadata accessor for WellnessDialogStringQuartet);
}

uint64_t sub_E469C()
{
  return sub_E46E4(&qword_2063B0, (void (*)(uint64_t))type metadata accessor for WellnessDialogStringQuartet);
}

uint64_t sub_E46E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_E472C()
{
  unint64_t result = qword_2063C0;
  if (!qword_2063C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2063C0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for WellnessDialogStringQuartet.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xE4844);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WellnessDialogStringQuartet.CodingKeys()
{
  return &type metadata for WellnessDialogStringQuartet.CodingKeys;
}

unint64_t sub_E4880()
{
  unint64_t result = qword_2063D0;
  if (!qword_2063D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2063D0);
  }
  return result;
}

unint64_t sub_E48D0()
{
  unint64_t result = qword_2063D8;
  if (!qword_2063D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2063D8);
  }
  return result;
}

unint64_t sub_E4920()
{
  unint64_t result = qword_2063E0;
  if (!qword_2063E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2063E0);
  }
  return result;
}

uint64_t sub_E496C@<X0>(uint64_t a1@<X8>)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + a1, 1, 1, v2);
}

uint64_t sub_E498C()
{
  return v0;
}

uint64_t sub_E49A4()
{
  return v0;
}

uint64_t *sub_E49BC()
{
  v0[3] = v1;
  return sub_B5B0(v0);
}

uint64_t sub_E49D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_E3FC(v2, (uint64_t)v12);
  sub_9B48(v2 + 40, (uint64_t)v11);
  id v5 = objc_allocWithZone((Class)sub_1AC550());
  swift_bridgeObjectRetain();
  unsigned int v6 = (void *)sub_1AC540();
  uint64_t v7 = type metadata accessor for MedsLoggingCorrectionsFlow();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = sub_E4C74(a1, (uint64_t)v12, (uint64_t)v11, v6, v8);
  a2[3] = v7;
  uint64_t result = sub_E55A8(&qword_2063F0, (void (*)(uint64_t))type metadata accessor for MedsLoggingCorrectionsFlow);
  a2[4] = result;
  *a2 = v9;
  return result;
}

uint64_t sub_E4ACC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = sub_1AAC20();
  __chkstk_darwin(v9);
  uint64_t v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t))(v12 + 16))(v11, a1);
  sub_E3FC(a3, (uint64_t)v24);
  sub_E3FC(v4, (uint64_t)v23);
  sub_9B48(v4 + 40, (uint64_t)v22);
  uint64_t v13 = (objc_class *)sub_1AC720();
  memset(v20, 0, sizeof(v20));
  uint64_t v21 = 0;
  id v14 = objc_allocWithZone(v13);
  uint64_t v15 = (void *)sub_1AC710();
  uint64_t v16 = type metadata accessor for LoggingCorrectionsFlow();
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = sub_E50B4((uint64_t)v11, a2, (uint64_t)v24, (uint64_t)v23, (uint64_t)v22, v15, v17);
  a4[3] = v16;
  uint64_t result = sub_E55A8(&qword_2063E8, (void (*)(uint64_t))type metadata accessor for LoggingCorrectionsFlow);
  a4[4] = result;
  *a4 = v18;
  return result;
}

uint64_t sub_E4C74(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v38 = a4;
  uint64_t v39 = a3;
  uint64_t v36 = a2;
  uint64_t v34 = sub_1AB330();
  uint64_t v7 = *(void (**)(void, void))(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1AC800();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  char v35 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = (void *)(a5 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_kWellnessFlowPluginIdentifier);
  *uint64_t v16 = 0xD000000000000021;
  v16[1] = 0x80000000001BC210;
  uint64_t v17 = a5 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_correctionInput;
  uint64_t v18 = sub_1AB3F0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v17, 1, 1, v18);
  uint64_t v19 = sub_1AC7D0();
  swift_beginAccess();
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v37 = v10;
  uint64_t v32 = v20;
  v20(v15, v19, v10);
  uint64_t v21 = sub_1AC7F0();
  os_log_type_t v22 = sub_1ACF50();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    char v33 = v7;
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&def_342E4, v21, v22, "Initializing MedsLoggingCorrectionsFlow", v23, 2u);
    uint64_t v7 = v33;
    swift_slowDealloc();
  }

  uint64_t v24 = v37;
  char v33 = *(void (**)(void, void))(v11 + 8);
  v33(v15, v37);
  *(void *)(a5 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_matchingMeds) = a1;
  uint64_t v25 = v36;
  sub_E3FC(v36, a5 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_flowConfig);
  sub_9B48(v39, a5 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_provider);
  *(void *)(a5 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_intentHandler) = v38;
  *(unsigned char *)(a5 + 16) = 0;
  strcpy(v9, "initial value");
  *((_WORD *)v9 + 7) = -4864;
  uint64_t v26 = v34;
  (*((void (**)(char *, void, uint64_t))v7 + 13))(v9, enum case for CorrectionsExitValue.failure(_:), v34);
  (*((void (**)(uint64_t, char *, uint64_t))v7 + 4))(a5 + OBJC_IVAR____TtC18WellnessFlowPlugin26MedsLoggingCorrectionsFlow_correctionsExitValue, v9, v26);
  swift_beginAccess();
  uint64_t v27 = v35;
  v32(v35, v19, v24);
  swift_unknownObjectRetain();
  uint64_t v28 = sub_1AC7F0();
  os_log_type_t v29 = sub_1ACF50();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl(&def_342E4, v28, v29, "Initialized LoggingCorrectionsFlow", v30, 2u);
    swift_slowDealloc();
  }

  sub_E4B8(v39);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v25);
  v33(v27, v37);
  return a5;
}

uint64_t sub_E50B4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  id v44 = a6;
  uint64_t v45 = a5;
  uint64_t v46 = a4;
  uint64_t v47 = a3;
  uint64_t v48 = a1;
  uint64_t v40 = sub_1AB330();
  uint64_t v9 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1AC800();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v42 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v18 = (void *)(a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_kWellnessFlowPluginIdentifier);
  *uint64_t v18 = 0xD000000000000021;
  v18[1] = 0x80000000001BC210;
  uint64_t v19 = a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionInput;
  uint64_t v20 = sub_1AB3F0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v19, 1, 1, v20);
  uint64_t v21 = sub_1AC7D0();
  swift_beginAccess();
  os_log_type_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v43 = v12;
  id v38 = v22;
  v22(v17, v21, v12);
  uint64_t v23 = sub_1AC7F0();
  os_log_type_t v24 = sub_1ACF50();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = v11;
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&def_342E4, v23, v24, "Initializing LoggingCorrectionsFlow", v25, 2u);
    uint64_t v11 = v41;
    swift_slowDealloc();
  }

  uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v27 = v43;
  uint64_t v41 = (char *)(v13 + 8);
  uint64_t v39 = v26;
  v26(v17, v43);
  uint64_t v28 = a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_uuidOfLastSavedSample;
  uint64_t v29 = sub_1AAC20();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v28, v48, v29);
  *(unsigned char *)(a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_lastSavedSampleHKIdentifier) = a2;
  sub_E3FC(v47, a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_lastSavedSampleIntent);
  sub_E3FC(v46, a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_flowConfig);
  sub_9B48(v45, a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_provider);
  *(void *)(a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_intentHandler) = v44;
  *(unsigned char *)(a7 + 64) = 0;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  strcpy(v11, "initial value");
  *((_WORD *)v11 + 7) = -4864;
  uint64_t v31 = v40;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for CorrectionsExitValue.failure(_:), v40);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a7 + OBJC_IVAR____TtC18WellnessFlowPlugin22LoggingCorrectionsFlow_correctionsExitValue, v11, v31);
  swift_beginAccess();
  uint64_t v32 = v42;
  v38(v42, v21, v27);
  swift_unknownObjectRetain();
  char v33 = sub_1AC7F0();
  os_log_type_t v34 = sub_1ACF50();
  if (os_log_type_enabled(v33, v34))
  {
    char v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v35 = 0;
    _os_log_impl(&def_342E4, v33, v34, "Initialized LoggingCorrectionsFlow", v35, 2u);
    swift_slowDealloc();
  }

  sub_E4B8(v45);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v46);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v47);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v48, v29);
  v39(v32, v43);
  return a7;
}

uint64_t sub_E55A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeWithTake for CorrectionsFlowProvider(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xC8uLL);
}

ValueMetadata *type metadata accessor for CorrectionsFlowProvider()
{
  return &type metadata for CorrectionsFlowProvider;
}

uint64_t _s18WellnessFlowPlugin23CorrectionsFlowProviderVwxx_0(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);

  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
}

_OWORD *_s18WellnessFlowPlugin23CorrectionsFlowProviderVwcp_0(_OWORD *a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  a1[4] = a2[4];
  sub_E5938();
  (*v5)();
  *(_OWORD *)((char *)a1 + 104) = *(_OWORD *)((char *)a2 + 104);
  sub_E5938();
  (*v6)();
  a1[9] = a2[9];
  sub_E5938();
  (*v7)();
  *(_OWORD *)((char *)a1 + 184) = *(_OWORD *)((char *)a2 + 184);
  sub_E5938();
  (*v8)();
  return a1;
}

uint64_t *_s18WellnessFlowPlugin23CorrectionsFlowProviderVwca_0(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t _s18WellnessFlowPlugin23CorrectionsFlowProviderVwta_0(uint64_t a1, uint64_t a2)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  return a1;
}

uint64_t _s18WellnessFlowPlugin23CorrectionsFlowProviderVwet_0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 200))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_E58B4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 200) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 200) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedsCorrectionsFlowProvider()
{
  return &type metadata for MedsCorrectionsFlowProvider;
}

uint64_t hasStatusOrSchedule(from:)(uint64_t result)
{
  if (result)
  {
    if (sub_1AB900() || (uint64_t result = sub_1AB8F0()) != 0)
    {
      swift_release();
      return 1;
    }
  }
  return result;
}

uint64_t isTimeframeToday(from:todayDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v141 = a2;
  uint64_t v131 = sub_1AB660();
  sub_52C4();
  uint64_t v133 = v4;
  __chkstk_darwin(v5);
  sub_53E0();
  uint64_t v119 = v6;
  uint64_t v130 = sub_2694(&qword_203258);
  sub_20688();
  __chkstk_darwin(v7);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v8);
  uint64_t v122 = (uint64_t)&v118 - v9;
  uint64_t v10 = sub_2694(&qword_203260);
  __chkstk_darwin(v10 - 8);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v11);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v12);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v13);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v14);
  sub_2073C();
  uint64_t v129 = v15;
  __chkstk_darwin(v16);
  uint64_t v128 = (char *)&v118 - v17;
  uint64_t v132 = sub_1AC800();
  sub_52C4();
  uint64_t v135 = v18;
  __chkstk_darwin(v19);
  sub_53E0();
  uint64_t v137 = v20;
  uint64_t v140 = sub_1AAD10();
  sub_52C4();
  uint64_t v143 = v21;
  __chkstk_darwin(v22);
  sub_53E0();
  uint64_t v139 = v23;
  uint64_t v138 = sub_1AAD30();
  sub_52C4();
  uint64_t v142 = v24;
  __chkstk_darwin(v25);
  sub_E548();
  uint64_t v26 = sub_1AB7A0();
  sub_52C4();
  uint64_t v28 = v27;
  __chkstk_darwin(v29);
  sub_E548();
  uint64_t v32 = v31 - v30;
  uint64_t v33 = sub_2694(&qword_203288);
  sub_20688();
  __chkstk_darwin(v34);
  sub_47EB8();
  uint64_t v35 = sub_2694(&qword_203290);
  uint64_t v36 = __chkstk_darwin(v35 - 8);
  id v38 = (char *)&v118 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v41 = (char *)&v118 - v40;
  __chkstk_darwin(v39);
  uint64_t v43 = (char *)&v118 - v42;
  uint64_t v136 = a1;
  if (a1 && sub_1AB910())
  {
    sub_1AB790();
    swift_release();
  }
  else
  {
    sub_55948();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v44, v45, v46, v26);
  }
  sub_E6E58();
  v47();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v41, 0, 1, v26);
  uint64_t v48 = v2 + *(int *)(v33 + 48);
  sub_553FC((uint64_t)v43, v2, &qword_203290);
  sub_553FC((uint64_t)v41, v48, &qword_203290);
  sub_982B8(v2);
  if (v51)
  {
    sub_2EF0C((uint64_t)v41, &qword_203290);
    sub_2EF0C((uint64_t)v43, &qword_203290);
    sub_982B8(v48);
    if (v51)
    {
      uint64_t v49 = &qword_203290;
      uint64_t v50 = v2;
      goto LABEL_72;
    }
    goto LABEL_13;
  }
  sub_553FC(v2, (uint64_t)v38, &qword_203290);
  sub_982B8(v48);
  if (v51)
  {
    sub_2EF0C((uint64_t)v41, &qword_203290);
    sub_2EF0C((uint64_t)v43, &qword_203290);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v38, v26);
LABEL_13:
    sub_2EF0C(v2, &qword_203288);
    goto LABEL_14;
  }
  sub_5572C();
  v55();
  sub_E6D98(&qword_203298, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_DateTime.DefinedValues);
  char v56 = sub_1ACDB0();
  uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v57(v32, v26);
  sub_2EF0C((uint64_t)v41, &qword_203290);
  sub_2EF0C((uint64_t)v43, &qword_203290);
  v57((uint64_t)v38, v26);
  sub_2EF0C(v2, &qword_203290);
  if (v56) {
    goto LABEL_73;
  }
LABEL_14:
  uint64_t v52 = v136;
  if (v136)
  {
    if (sub_1AB910())
    {
      uint64_t v53 = sub_1AB7B0();
      swift_release();
      if (v53)
      {
        sub_1AB670();
        sub_55890();
        sub_1AB730();
        sub_E6E3C();
        int v54 = v2 & 1;
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v53 = 0;
    }
    int v54 = 1;
  }
  else
  {
    uint64_t v53 = 0;
    int v54 = 1;
  }
LABEL_23:
  sub_1AAD00();
  uint64_t v58 = v143;
  uint64_t v134 = *(void (**)(uint64_t, void, uint64_t))(v143 + 104);
  v134(v139, enum case for Calendar.Component.year(_:), v140);
  uint64_t v59 = sub_1AAD20();
  uint64_t v60 = *(void (**)(void))(v58 + 8);
  uint64_t v143 = v58 + 8;
  sub_47814();
  v60();
  uint64_t v61 = *(void (**)(void))(v142 + 8);
  v142 += 8;
  sub_E530();
  v61();
  if (v53 == v59) {
    int v62 = v54;
  }
  else {
    int v62 = 1;
  }
  int v127 = v62;
  if (v52)
  {
    uint64_t v63 = sub_1AB910();
    if (v63)
    {
      sub_1AB7B0();
      sub_55890();
      uint64_t v63 = sub_1AB640();
      swift_release();
      if (v63)
      {
        sub_1AB860();
        sub_55890();
        sub_1AB730();
        sub_E6E3C();
        int v64 = v54 & 1;
        goto LABEL_32;
      }
    }
  }
  else
  {
    uint64_t v63 = 0;
  }
  int v64 = 1;
LABEL_32:
  sub_1AAD00();
  uint64_t v65 = sub_E6E20();
  v66(v65);
  uint64_t v67 = sub_1AAD20();
  sub_E530();
  v60();
  sub_E530();
  v61();
  if (v63 == v67) {
    int v68 = v64;
  }
  else {
    int v68 = 1;
  }
  int v126 = v68;
  if (v52 && sub_1AB910())
  {
    uint64_t v69 = sub_1AB7B0();
    swift_release();
    if (v69)
    {
      sub_1AB630();
      sub_55890();
      sub_1AB730();
      sub_E6E3C();
      BOOL v70 = (v64 & 1) == 0;
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v69 = 0;
  }
  BOOL v70 = 0;
LABEL_41:
  sub_1AAD00();
  uint64_t v71 = sub_E6E20();
  v72(v71);
  uint64_t v73 = sub_1AAD20();
  sub_E530();
  v60();
  sub_E530();
  v61();
  BOOL v74 = v69 == v73 && v70;
  uint64_t v75 = sub_1AC7D0();
  swift_beginAccess();
  uint64_t v76 = v135;
  uint64_t v77 = v132;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 16))(v137, v75, v132);
  swift_retain_n();
  char v78 = sub_1AC7F0();
  uint64_t v79 = v52;
  os_log_type_t v80 = sub_1ACF50();
  if (!os_log_type_enabled(v78, v80))
  {

    swift_release_n();
    uint64_t v83 = v131;
    goto LABEL_61;
  }
  uint64_t v81 = swift_slowAlloc();
  *(_DWORD *)uint64_t v81 = 67109888;
  int v144 = v127 ^ 1;
  sub_1ACFE0();
  *(_WORD *)(v81 + 8) = 1024;
  int v144 = v126 ^ 1;
  sub_1ACFE0();
  *(_WORD *)(v81 + 14) = 1024;
  LODWORD(v143) = v74;
  int v144 = v74;
  sub_1ACFE0();
  *(_WORD *)(v81 + 20) = 1024;
  if (v79 && sub_1AB910())
  {
    sub_1AB7B0();
    sub_55890();
    uint64_t v82 = (uint64_t)v128;
    sub_1AB650();
    swift_release();
    uint64_t v83 = v131;
  }
  else
  {
    uint64_t v82 = (uint64_t)v128;
    sub_55948();
    uint64_t v83 = v131;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v84, v85, v86, v131);
  }
  uint64_t v87 = v129;
  sub_E6E58();
  v88();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v87, 0, 1, v83);
  uint64_t v89 = v122;
  uint64_t v90 = v122 + *(int *)(v130 + 48);
  sub_553FC(v82, v122, &qword_203260);
  sub_553FC(v87, v90, &qword_203260);
  sub_E6DE0(v89);
  if (v51)
  {
    sub_E6DE0(v90);
    BOOL v74 = v143;
    if (v51)
    {
      sub_2EF0C(v89, &qword_203260);
      int v91 = 1;
LABEL_59:
      uint64_t v102 = (uint64_t)v128;
      goto LABEL_60;
    }
LABEL_58:
    sub_2EF0C(v89, &qword_203258);
    int v91 = 0;
    goto LABEL_59;
  }
  uint64_t v92 = v120;
  sub_553FC(v89, v120, &qword_203260);
  sub_E6DE0(v90);
  if (v93)
  {
    sub_E530();
    v94();
    BOOL v74 = v143;
    goto LABEL_58;
  }
  uint64_t v95 = v89;
  uint64_t v96 = v133;
  uint64_t v97 = v119;
  sub_5572C();
  v98();
  sub_E6D98(&qword_203280, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_Date.DefinedValues);
  char v99 = sub_1ACDB0();
  uint64_t v100 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
  v100(v92, v83);
  uint64_t v101 = v97;
  uint64_t v77 = v132;
  v100(v101, v83);
  sub_2EF0C(v95, &qword_203260);
  int v91 = v99 & 1;
  uint64_t v102 = (uint64_t)v128;
  BOOL v74 = v143;
LABEL_60:
  sub_2EF0C(v129, &qword_203260);
  sub_2EF0C(v102, &qword_203260);
  uint64_t v79 = v136;
  swift_release();
  int v144 = v91;
  sub_1ACFE0();
  swift_release();
  _os_log_impl(&def_342E4, v78, v80, "isThisYear: %{BOOL}d,\nisThisMonth: %{BOOL}d,\nisThisDay: %{BOOL}d,\ndefinedValue: %{BOOL}d", (uint8_t *)v81, 0x1Au);
  swift_slowDealloc();

  uint64_t v76 = v135;
LABEL_61:
  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v137, v77);
  if (((v127 | v126) & 1) == 0 && v74) {
    goto LABEL_73;
  }
  if (v79 && sub_1AB910())
  {
    sub_1AB7B0();
    sub_55890();
    uint64_t v103 = v124;
    sub_1AB650();
    swift_release();
  }
  else
  {
    uint64_t v103 = v124;
    sub_55948();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v104, v105, v106, v83);
  }
  uint64_t v107 = v125;
  uint64_t v108 = v133;
  uint64_t v109 = v123;
  sub_E6E58();
  v110();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v109, 0, 1, v83);
  uint64_t v111 = v107 + *(int *)(v130 + 48);
  sub_553FC(v103, v107, &qword_203260);
  sub_553FC(v109, v111, &qword_203260);
  sub_E6DE0(v107);
  if (!v51)
  {
    uint64_t v114 = v121;
    sub_553FC(v107, v121, &qword_203260);
    sub_E6DE0(v111);
    if (!v115)
    {
      sub_5572C();
      v116();
      sub_E6D98(&qword_203280, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_Date.DefinedValues);
      char v112 = sub_1ACDB0();
      uint64_t v117 = *(void (**)(void))(v108 + 8);
      sub_47814();
      v117();
      sub_2EF0C(v109, &qword_203260);
      sub_2EF0C(v103, &qword_203260);
      sub_47814();
      v117();
      sub_2EF0C(v107, &qword_203260);
      return v112 & 1;
    }
    sub_2EF0C(v109, &qword_203260);
    sub_2EF0C(v103, &qword_203260);
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v114, v83);
LABEL_78:
    sub_2EF0C(v107, &qword_203258);
    char v112 = 0;
    return v112 & 1;
  }
  sub_2EF0C(v109, &qword_203260);
  sub_2EF0C(v103, &qword_203260);
  sub_E6DE0(v111);
  if (!v51) {
    goto LABEL_78;
  }
  uint64_t v49 = &qword_203260;
  uint64_t v50 = v107;
LABEL_72:
  sub_2EF0C(v50, v49);
LABEL_73:
  char v112 = 1;
  return v112 & 1;
}

uint64_t isTimeframeNone(from:)(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  if (!sub_1AB910()) {
    return 1;
  }
  swift_release();
  return 0;
}

uint64_t getMedEventDateTime(from:)(uint64_t result)
{
  if (result) {
    return sub_1AB910();
  }
  return result;
}

uint64_t getMedStatus(from:)(uint64_t a1)
{
  uint64_t v3 = sub_1AB960();
  sub_52C4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_E548();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = sub_2694(&qword_2063F8);
  sub_20688();
  __chkstk_darwin(v11);
  sub_47EB8();
  uint64_t v12 = sub_2694(&qword_206400);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v32 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v32 - v19;
  if (a1 && sub_1AB8F0())
  {
    sub_1AB950();
    swift_release();
  }
  else
  {
    sub_55948();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v21, v22, v23, v3);
  }
  sub_E6E58();
  v24();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v18, 0, 1, v3);
  uint64_t v25 = v1 + *(int *)(v10 + 48);
  sub_553FC((uint64_t)v20, v1, &qword_206400);
  sub_553FC((uint64_t)v18, v25, &qword_206400);
  sub_E6E64(v1);
  if (!v27)
  {
    sub_553FC(v1, (uint64_t)v15, &qword_206400);
    sub_E6E64(v25);
    if (!v27)
    {
      sub_5572C();
      v28();
      sub_E6D98(&qword_206408, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_CompletionStatus.DefinedValues);
      char v29 = sub_1ACDB0();
      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v30(v9, v3);
      sub_2EF0C((uint64_t)v18, &qword_206400);
      sub_2EF0C((uint64_t)v20, &qword_206400);
      v30((uint64_t)v15, v3);
      sub_2EF0C(v1, &qword_206400);
      char v26 = v29 ^ 1;
      return v26 & 1;
    }
    sub_2EF0C((uint64_t)v18, &qword_206400);
    sub_2EF0C((uint64_t)v20, &qword_206400);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v15, v3);
LABEL_13:
    sub_2EF0C(v1, &qword_2063F8);
    char v26 = 1;
    return v26 & 1;
  }
  sub_2EF0C((uint64_t)v18, &qword_206400);
  sub_2EF0C((uint64_t)v20, &qword_206400);
  sub_E6E64(v25);
  if (!v27) {
    goto LABEL_13;
  }
  sub_2EF0C(v1, &qword_206400);
  char v26 = 0;
  return v26 & 1;
}

uint64_t isTimeframeTodayOrNone(from:todayDate:)(uint64_t a1)
{
  sub_1AABD0();
  sub_52C4();
  __chkstk_darwin(v3);
  sub_47EB8();
  if (a1 && sub_1AB910())
  {
    swift_release();
    uint64_t v4 = sub_E6E00();
    v5(v4);
    char v6 = isTimeframeToday(from:todayDate:)(a1, v1);
  }
  else
  {
    uint64_t v7 = sub_E6E00();
    v8(v7);
    char v6 = 1;
  }
  sub_47814();
  v9();
  return v6 & 1;
}

uint64_t sub_E6CEC(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_E6D18(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_E6D40@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_E6D70()
{
  return sub_1ACFE0();
}

uint64_t sub_E6D98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_E6DE0(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v1);
}

uint64_t sub_E6E00()
{
  return v0;
}

uint64_t sub_E6E20()
{
  return *(void *)(v0 - 160);
}

uint64_t sub_E6E3C()
{
  return swift_release();
}

uint64_t sub_E6E64(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v1);
}

void __swiftcall HKActivityRingUIViewRepresentable.init(model:)(WellnessFlowPlugin::HKActivityRingUIViewRepresentable *__return_ptr retstr, WellnessFlowPlugin::PhoneRingsModel *model)
{
}

id HKActivityRingUIViewRepresentable.makeUIView(context:)()
{
  id v1 = [objc_allocWithZone((Class)HKActivitySummary) init];
  uint64_t v2 = self;
  id v3 = [v2 largeCalorieUnit];
  if (*(unsigned char *)(v0 + 56)) {
    double v4 = 0.0;
  }
  else {
    double v4 = *(double *)(v0 + 48);
  }
  id v5 = [self quantityWithUnit:v3 doubleValue:v4];

  [v1 setActiveEnergyBurned:v5];
  id v6 = [v2 largeCalorieUnit];
  id v7 = sub_E737C();

  sub_E7398(v8, "setActiveEnergyBurnedGoal:");
  id v9 = [v2 hourUnit];
  id v10 = sub_E737C();

  sub_E7398(v11, "setAppleExerciseTime:");
  id v12 = [v2 hourUnit];
  id v13 = sub_E737C();

  sub_E7398(v14, "setAppleExerciseTimeGoal:");
  id v15 = [v2 countUnit];
  id v16 = sub_E737C();

  sub_E7398(v17, "setAppleStandHours:");
  id v18 = [v2 countUnit];
  id v19 = sub_E737C();

  [v1 setAppleStandHoursGoal:v19];
  id v20 = [objc_allocWithZone((Class)HKActivityRingView) init];
  [v20 setActivitySummary:v1 animated:1];

  return v20;
}

unint64_t sub_E7180()
{
  unint64_t result = qword_206410;
  if (!qword_206410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206410);
  }
  return result;
}

uint64_t sub_E71E0()
{
  return sub_1AC940();
}

void *sub_E7224()
{
  return &protocol witness table for Never;
}

uint64_t sub_E7230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_E7330();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_E7294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_E7330();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_E72F8()
{
}

ValueMetadata *type metadata accessor for HKActivityRingUIViewRepresentable()
{
  return &type metadata for HKActivityRingUIViewRepresentable;
}

unint64_t sub_E7330()
{
  unint64_t result = qword_206418;
  if (!qword_206418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206418);
  }
  return result;
}

id sub_E737C()
{
  double v4 = *(const char **)(v2 + 3520);
  return objc_msgSend(v1, v4, v0);
}

id sub_E7398(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t SingleActivitySummaryModel.totalValue.getter()
{
  return *(void *)v0;
}

uint64_t SingleActivitySummaryModel.totalValue.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t SingleActivitySummaryModel.goalValue.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t SingleActivitySummaryModel.goalValue.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t SingleActivitySummaryModel.date.getter()
{
  return swift_retain();
}

uint64_t SingleActivitySummaryModel.date.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t SpecificMedCompletedLogModel.requestedMedName.getter()
{
  return sub_22F80();
}

uint64_t SingleActivitySummaryModel.dateLabel.setter()
{
  sub_22F74();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.requestedMedName.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SpecificMedCompletedLogModel.requestedMedSchedule.getter()
{
  return sub_22F80();
}

uint64_t SingleActivitySummaryModel.timeLabel.setter()
{
  sub_22F74();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.requestedMedSchedule.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SingleActivitySummaryModel.unitLabel.getter()
{
  return sub_22F80();
}

uint64_t SingleActivitySummaryModel.unitLabel.setter()
{
  sub_22F74();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = v0;
  return result;
}

uint64_t (*SingleActivitySummaryModel.unitLabel.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SingleActivitySummaryModel.dataLabel.getter()
{
  return sub_22F80();
}

uint64_t SingleActivitySummaryModel.dataLabel.setter()
{
  sub_22F74();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 72) = v2;
  *(void *)(v1 + 80) = v0;
  return result;
}

uint64_t (*SingleActivitySummaryModel.dataLabel.modify())()
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SingleActivitySummaryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);

  return sub_E7690(v3, a1);
}

uint64_t type metadata accessor for SingleActivitySummaryModel()
{
  uint64_t result = qword_2064A0;
  if (!qword_2064A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_E7690(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_2022D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SingleActivitySummaryModel.snippetHeaderModel.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SingleActivitySummaryModel() + 44);

  return sub_E773C(a1, v3);
}

uint64_t sub_E773C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_2022D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*SingleActivitySummaryModel.snippetHeaderModel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SingleActivitySummaryModel.init(totalValue:goalValue:date:unitLabel:snippetHeaderModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v14 = sub_2694(&qword_201E28);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v19 = (char *)v40 - v18;
  uint64_t v20 = type metadata accessor for SingleActivitySummaryModel();
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(void *)(a5 + 72) = 0;
  *(void *)(a5 + 80) = 0;
  uint64_t v21 = a5 + *(int *)(v20 + 44);
  uint64_t v22 = type metadata accessor for SnippetHeaderModel();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v21, 1, 1, v22);
  double v23 = trunc(a6);
  if (a6 > -9.22337204e18 && a6 < 9.22337204e18 && v23 == a6)
  {
    *(void *)a5 = (uint64_t)a6;
    if (a7 <= -9.22337204e18)
    {
      uint64_t v26 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v26 = 0;
    *(void *)a5 = 0;
    if (a7 <= -9.22337204e18) {
      goto LABEL_18;
    }
  }
  BOOL v27 = trunc(a7) == a7 && a7 < 9.22337204e18;
  uint64_t v26 = (uint64_t)a7;
  if (!v27) {
    uint64_t v26 = 0;
  }
LABEL_18:
  *(void *)(a5 + 8) = v26;
  *(void *)(a5 + 16) = a1;
  *(void *)(a5 + 56) = a2;
  *(void *)(a5 + 64) = a3;
  swift_retain();
  sub_B8E04(a4, v21);
  uint64_t v28 = *(void *)(a5 + 16);
  if (!v28)
  {
LABEL_21:
    uint64_t v30 = 0;
    goto LABEL_23;
  }
  swift_retain();
  sub_1AC070();
  swift_release();
  uint64_t v29 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1, v29) == 1)
  {
    sub_4E550((uint64_t)v19, &qword_201E28);
    uint64_t v28 = 0;
    goto LABEL_21;
  }
  uint64_t v31 = sub_1AC1D0();
  uint64_t v33 = v32;
  (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8))(v19, v29);
  v40[0] = v31;
  v40[1] = v33;
  sub_B4FC();
  uint64_t v28 = sub_1AD000();
  uint64_t v30 = v34;
  swift_bridgeObjectRelease();
LABEL_23:
  swift_bridgeObjectRelease();
  *(void *)(a5 + 24) = v28;
  *(void *)(a5 + 32) = v30;
  uint64_t v35 = *(void *)(a5 + 16);
  if (v35)
  {
    swift_retain();
    sub_1AC080();
    swift_release();
    uint64_t v36 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v17, 1, v36) != 1)
    {
      uint64_t v35 = sub_1AC1D0();
      uint64_t v37 = v38;
      swift_release();
      sub_4E550(a4, &qword_2022D0);
      (*(void (**)(char *, uint64_t))(*(void *)(v36 - 8) + 8))(v17, v36);
      goto LABEL_29;
    }
    swift_release();
    sub_4E550(a4, &qword_2022D0);
    sub_4E550((uint64_t)v17, &qword_201E28);
    uint64_t v35 = 0;
  }
  else
  {
    swift_release();
    sub_4E550(a4, &qword_2022D0);
  }
  uint64_t v37 = 0;
LABEL_29:
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a5 + 40) = v35;
  *(void *)(a5 + 48) = v37;
  return result;
}

uint64_t sub_E7B48(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6C61566C61746F74 && a2 == 0xEA00000000006575;
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x756C61566C616F67 && a2 == 0xE900000000000065;
    if (v6 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 1702125924 && a2 == 0xE400000000000000;
      if (v7 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL;
        if (v8 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x6562614C656D6974 && a2 == 0xE90000000000006CLL;
          if (v9 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x6562614C74696E75 && a2 == 0xE90000000000006CLL;
            if (v10 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 0x6562614C61746164 && a2 == 0xE90000000000006CLL;
              if (v11 || (sub_1AD2F0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B78B0)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                char v12 = sub_1AD2F0();
                swift_bridgeObjectRelease();
                if (v12) {
                  return 7;
                }
                else {
                  return 8;
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_E7E44()
{
  return 8;
}

uint64_t sub_E7E4C(char a1)
{
  uint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      return 0x756C61566C616F67;
    case 2:
      return 1702125924;
    case 3:
      unsigned int v3 = 1702125924;
      goto LABEL_9;
    case 4:
      unsigned int v3 = 1701669236;
      goto LABEL_9;
    case 5:
      unsigned int v3 = 1953066613;
      goto LABEL_9;
    case 6:
      unsigned int v3 = 1635017060;
LABEL_9:
      uint64_t result = v3 | 0x6562614C00000000;
      break;
    case 7:
      return result;
    default:
      uint64_t result = 0x6C61566C61746F74;
      break;
  }
  return result;
}

uint64_t sub_E7F38()
{
  return sub_E7E4C(*v0);
}

uint64_t sub_E7F40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_E7B48(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_E7F68@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_E7E44();
  *a1 = result;
  return result;
}

uint64_t sub_E7F90(uint64_t a1)
{
  unint64_t v2 = sub_E826C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E7FCC(uint64_t a1)
{
  unint64_t v2 = sub_E826C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SingleActivitySummaryModel.encode(to:)(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_2694(&qword_206420);
  sub_52C4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_2F014();
  sub_2E38(a1, a1[3]);
  sub_E826C();
  sub_1AD3B0();
  sub_E9794(*v4);
  if (!v2)
  {
    sub_E9794(v4[1]);
    sub_1AC100();
    sub_E8794(&qword_206430, (void (*)(uint64_t))&type metadata accessor for DialogCalendar);
    sub_1AD270();
    sub_E9724(v4[3], v4[4], 3);
    sub_E9724(v4[5], v4[6], 4);
    sub_1AD280();
    sub_E9724(v4[9], v4[10], 6);
    type metadata accessor for SingleActivitySummaryModel();
    type metadata accessor for SnippetHeaderModel();
    sub_E8794(&qword_202BD0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1AD270();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
}

unint64_t sub_E826C()
{
  unint64_t result = qword_206428;
  if (!qword_206428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206428);
  }
  return result;
}

uint64_t SingleActivitySummaryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v4 = sub_2694(&qword_2022D0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2694(&qword_206438);
  sub_52C4();
  uint64_t v25 = v8;
  uint64_t v26 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = type metadata accessor for SingleActivitySummaryModel();
  __chkstk_darwin(v9 - 8);
  sub_2F014();
  *(_OWORD *)(v2 + 16) = 0u;
  *(void *)(v2 + 48) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0;
  uint64_t v11 = v2 + *(int *)(v10 + 52);
  uint64_t v12 = type metadata accessor for SnippetHeaderModel();
  uint64_t v28 = v11;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, 1, 1, v12);
  uint64_t v13 = a1[3];
  BOOL v27 = a1;
  sub_2E38(a1, v13);
  sub_E826C();
  uint64_t v14 = v29;
  sub_1AD3A0();
  if (v14)
  {
    uint64_t v17 = v28;
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v27);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_4E550(v17, &qword_2022D0);
  }
  else
  {
    uint64_t v29 = v12;
    LOBYTE(v31) = 0;
    *(void *)uint64_t v2 = sub_1AD210();
    sub_E9780(1);
    *(void *)(v2 + 8) = sub_1AD210();
    sub_1AC100();
    char v30 = 2;
    sub_E8794(&qword_206440, (void (*)(uint64_t))&type metadata accessor for DialogCalendar);
    sub_1AD1E0();
    *(void *)(v2 + 16) = v31;
    *(void *)(v2 + 24) = sub_E9748(3);
    *(void *)(v2 + 32) = v15;
    *(void *)(v2 + 40) = sub_E9748(4);
    *(void *)(v2 + 48) = v16;
    sub_E9780(5);
    *(void *)(v2 + 56) = sub_1AD1F0();
    *(void *)(v2 + 64) = v18;
    *(void *)(v2 + 72) = sub_E9748(6);
    *(void *)(v2 + 80) = v19;
    LOBYTE(v31) = 7;
    sub_E8794(&qword_202BF0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1AD1E0();
    uint64_t v20 = sub_E9768();
    v21(v20);
    sub_E773C((uint64_t)v6, v28);
    sub_E86A0(v2, v24);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v27);
    return sub_E8EDC(v2, (void (*)(void))type metadata accessor for SingleActivitySummaryModel);
  }
}

uint64_t sub_E86A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SingleActivitySummaryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_E8704()
{
  return sub_E8794(&qword_202258, (void (*)(uint64_t))type metadata accessor for SingleActivitySummaryModel);
}

uint64_t sub_E874C()
{
  return sub_E8794(&qword_2020F0, (void (*)(uint64_t))type metadata accessor for SingleActivitySummaryModel);
}

uint64_t sub_E8794(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_E87DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SingleActivitySummaryModel.init(from:)(a1, a2);
}

uint64_t sub_E87F4(void *a1)
{
  return SingleActivitySummaryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SingleActivitySummaryModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = a2[3];
    a1[2] = a2[2];
    a1[3] = v5;
    uint64_t v6 = a2[5];
    a1[4] = a2[4];
    a1[5] = v6;
    uint64_t v7 = a2[7];
    a1[6] = a2[6];
    a1[7] = v7;
    uint64_t v8 = a2[9];
    a1[8] = a2[8];
    a1[9] = v8;
    uint64_t v9 = *(int *)(a3 + 44);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    a1[10] = a2[10];
    uint64_t v12 = type metadata accessor for SnippetHeaderModel();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1, v12))
    {
      uint64_t v13 = sub_2694(&qword_2022D0);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v15 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v10, v11, v15);
      uint64_t v16 = *(int *)(v12 + 20);
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      uint64_t v19 = *((void *)v18 + 1);
      *(void *)uint64_t v17 = *(void *)v18;
      *((void *)v17 + 1) = v19;
      uint64_t v20 = *(int *)(v12 + 24);
      uint64_t v21 = &v10[v20];
      uint64_t v22 = &v11[v20];
      uint64_t v23 = *((void *)v22 + 1);
      *(void *)uint64_t v21 = *(void *)v22;
      *((void *)v21 + 1) = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0, 1, v12);
    }
  }
  return v3;
}

uint64_t destroy for SingleActivitySummaryModel(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = sub_1AC1E0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(int *)(a3 + 44);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_2694(&qword_2022D0);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
    uint64_t v14 = *(int *)(v11 + 20);
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    uint64_t v18 = *(int *)(v11 + 24);
    uint64_t v19 = &v9[v18];
    uint64_t v20 = &v10[v18];
    uint64_t v21 = *((void *)v20 + 1);
    *(void *)uint64_t v19 = *(void *)v20;
    *((void *)v19 + 1) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v11);
  }
  return a1;
}

void *assignWithCopy for SingleActivitySummaryModel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    if (!v11)
    {
      uint64_t v21 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v7, v8, v21);
      uint64_t v22 = *(int *)(v9 + 20);
      uint64_t v23 = &v7[v22];
      uint64_t v24 = &v8[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      *((void *)v23 + 1) = *((void *)v24 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v25 = *(int *)(v9 + 24);
      uint64_t v26 = &v7[v25];
      BOOL v27 = &v8[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      *((void *)v26 + 1) = *((void *)v27 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_E8EDC((uint64_t)v7, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v19 = sub_2694(&qword_2022D0);
    memcpy(v7, v8, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  uint64_t v12 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v7, v8, v12);
  uint64_t v13 = *(int *)(v9 + 20);
  uint64_t v14 = &v7[v13];
  uint64_t v15 = &v8[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = *((void *)v15 + 1);
  uint64_t v16 = *(int *)(v9 + 24);
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
  return a1;
}

uint64_t sub_E8EDC(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_4EB04();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t initializeWithTake for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v7 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = sub_2694(&qword_2022D0);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v5, v6, v9);
    *(_OWORD *)&v5[*(int *)(v7 + 20)] = *(_OWORD *)&v6[*(int *)(v7 + 20)];
    *(_OWORD *)&v5[*(int *)(v7 + 24)] = *(_OWORD *)&v6[*(int *)(v7 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 44);
  int v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for SnippetHeaderModel();
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1, v13);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v12, 1, v13);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v19 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40))(v11, v12, v19);
      uint64_t v20 = *(int *)(v13 + 20);
      uint64_t v21 = &v11[v20];
      uint64_t v22 = &v12[v20];
      uint64_t v24 = *(void *)v22;
      uint64_t v23 = *((void *)v22 + 1);
      *(void *)uint64_t v21 = v24;
      *((void *)v21 + 1) = v23;
      swift_bridgeObjectRelease();
      uint64_t v25 = *(int *)(v13 + 24);
      uint64_t v26 = &v11[v25];
      BOOL v27 = &v12[v25];
      uint64_t v29 = *(void *)v27;
      uint64_t v28 = *((void *)v27 + 1);
      *(void *)uint64_t v26 = v29;
      *((void *)v26 + 1) = v28;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_E8EDC((uint64_t)v11, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v17 = sub_2694(&qword_2022D0);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  uint64_t v16 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v11, v12, v16);
  *(_OWORD *)&v11[*(int *)(v13 + 20)] = *(_OWORD *)&v12[*(int *)(v13 + 20)];
  *(_OWORD *)&v11[*(int *)(v13 + 24)] = *(_OWORD *)&v12[*(int *)(v13 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E926C);
}

uint64_t sub_E926C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 64);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_2694(&qword_2022D0);
    uint64_t v9 = a1 + *(int *)(a3 + 44);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SingleActivitySummaryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E930C);
}

uint64_t sub_E930C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 64) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_2694(&qword_2022D0);
    uint64_t v8 = v5 + *(int *)(a4 + 44);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, a2, a2, v7);
  }
  return result;
}

void sub_E9390()
{
  sub_E9450();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_E9450()
{
  if (!qword_202C70)
  {
    type metadata accessor for SnippetHeaderModel();
    unint64_t v0 = sub_1ACFD0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_202C70);
    }
  }
}

uint64_t getEnumTagSinglePayload for SingleActivitySummaryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SingleActivitySummaryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xE95FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SingleActivitySummaryModel.CodingKeys()
{
  return &type metadata for SingleActivitySummaryModel.CodingKeys;
}

unint64_t sub_E9638()
{
  unint64_t result = qword_2064F0;
  if (!qword_2064F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2064F0);
  }
  return result;
}

unint64_t sub_E9688()
{
  unint64_t result = qword_2064F8;
  if (!qword_2064F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2064F8);
  }
  return result;
}

unint64_t sub_E96D8()
{
  unint64_t result = qword_206500;
  if (!qword_206500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206500);
  }
  return result;
}

uint64_t sub_E9724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(unsigned char *)(v4 - 72) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 72, v3);
}

uint64_t sub_E9748@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return sub_1AD1C0();
}

uint64_t sub_E9768()
{
  return v0;
}

uint64_t sub_E9780@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return v1 - 72;
}

uint64_t sub_E9794(uint64_t a1)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v2 - 72, v1);
}

uint64_t sub_E97B4@<X0>(long long *a1@<X0>, long long *a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_1AC250();
  uint64_t v11 = sub_53D4(v10);
  __chkstk_darwin(v11);
  sub_E548();
  sub_24D80(a1, a5);
  sub_24D80(a2, a5 + 40);
  memcpy((void *)(a5 + 80), a3, 0xA0uLL);
  *(void *)(a5 + 240) = a4;
  strcpy((char *)(a5 + 248), "* ");
  type metadata accessor for WellnessLoggingCATsSimple();
  sub_1AC240();
  uint64_t result = sub_1AC210();
  *(void *)(a5 + 256) = result;
  return result;
}

uint64_t sub_E988C@<X0>(uint64_t *a1@<X8>)
{
  sub_1AB350();
  sub_1AB1C0();
  sub_47658();
  sub_1AB1B0();
  uint64_t v2 = sub_1AAF30();
  sub_47658();
  uint64_t result = sub_1AAF20();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for PatternFlowProvider;
  *a1 = result;
  return result;
}

uint64_t sub_E9920(uint64_t a1, char a2)
{
  **(unsigned char **)(*(void *)(a1 + 64) + 40) = a2;
  return swift_continuation_throwingResume();
}

uint64_t sub_E9940(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 40) = a2;
  return swift_continuation_throwingResume();
}

void sub_E9960()
{
  Swift::UInt v0 = sub_F14A0();
  sub_1AD370(v0);
}

BOOL sub_E9988()
{
  sub_F14A0();
  uint64_t v0 = sub_1AABD0();
  sub_52C4();
  uint64_t v61 = v1;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v60 = (char *)v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v58 = (char *)v55 - v5;
  uint64_t v59 = sub_1AAD30();
  sub_52C4();
  uint64_t v57 = v6;
  __chkstk_darwin(v7);
  sub_E548();
  uint64_t v8 = sub_1AAAA0();
  sub_52C4();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_2F014();
  uint64_t v12 = sub_2694(&qword_201CC8);
  uint64_t v13 = sub_53D4(v12);
  __chkstk_darwin(v13);
  sub_E548();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = sub_1AAA10();
  sub_52C4();
  uint64_t v62 = v18;
  __chkstk_darwin(v19);
  sub_E548();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = sub_B7B9C();
  sub_F0F34(v23, v24, &qword_201CC8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v16, 1, v17) == 1)
  {
    sub_6F194(v16, &qword_201CC8);
    return 1;
  }
  v55[1] = v10;
  v55[2] = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v22, v16, v17);
  sub_1AAD00();
  sub_2694(&qword_206578);
  sub_F14A0();
  sub_1AAD10();
  sub_52C4();
  uint64_t v56 = v0;
  uint64_t v27 = v26;
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1B08C0;
  uint64_t v28 = *(void (**)(void))(v27 + 104);
  sub_F13CC();
  v28();
  sub_F13CC();
  v28();
  sub_F13CC();
  v28();
  sub_19C368();
  uint64_t v29 = v58;
  sub_1AA9F0();
  char v30 = v60;
  sub_1AA9C0();
  sub_1AACC0();
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v61 + 8);
  uint64_t v32 = v56;
  v31(v30, v56);
  v31(v29, v32);
  sub_E558();
  v33();
  uint64_t v34 = sub_1AAA20();
  if (v35)
  {
    uint64_t v48 = sub_F1280();
    v49(v48);
    sub_E558();
    v50();
    return 0;
  }
  uint64_t v36 = v34;
  uint64_t v37 = sub_1AAA60();
  if (v38)
  {
    uint64_t v51 = sub_F1280();
    v52(v51);
    uint64_t v53 = sub_F1430();
    v54(v53);
    return 0;
  }
  uint64_t v39 = v37;
  uint64_t v40 = sub_1AAA50();
  char v42 = v41;
  uint64_t v43 = sub_F1280();
  v44(v43);
  uint64_t v45 = sub_F1430();
  v46(v45);
  if (v42) {
    return 0;
  }
  return !(v40 | v39) && v36 < 2;
}

uint64_t sub_E9DA4()
{
  sub_A364();
  *(unsigned char *)(v0 + 560) = v1;
  *(void *)(v0 + 320) = v2;
  *(void *)(v0 + 328) = v3;
  uint64_t v4 = sub_1AAD30();
  *(void *)(v0 + 336) = v4;
  sub_A19C(v4);
  *(void *)(v0 + 344) = v5;
  *(void *)(v0 + 352) = sub_A42C();
  uint64_t v6 = sub_2694(&qword_201E10);
  sub_53D4(v6);
  *(void *)(v0 + 360) = sub_A42C();
  uint64_t v7 = sub_1AABD0();
  *(void *)(v0 + 368) = v7;
  sub_A19C(v7);
  *(void *)(v0 + 376) = v8;
  *(void *)(v0 + 384) = sub_A220();
  *(void *)(v0 + 392) = swift_task_alloc();
  *(void *)(v0 + 400) = swift_task_alloc();
  *(void *)(v0 + 408) = swift_task_alloc();
  *(void *)(v0 + 416) = swift_task_alloc();
  uint64_t v9 = sub_1AC800();
  *(void *)(v0 + 424) = v9;
  sub_A19C(v9);
  *(void *)(v0 + 432) = v10;
  *(void *)(v0 + 440) = sub_A220();
  *(void *)(v0 + 448) = swift_task_alloc();
  *(void *)(v0 + 456) = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_E9F00()
{
  sub_46EFC();
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[40];
  v0[58] = (uint64_t)[objc_allocWithZone((Class)HKHealthStore) init];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1, v1) == 1)
  {
    sub_1AC7D0();
    sub_A340();
    uint64_t v3 = sub_5B59C();
    v4(v3);
    uint64_t v5 = (void *)sub_1AC7F0();
    os_log_type_t v6 = sub_1ACF60();
    if (sub_470C8(v6))
    {
      uint64_t v7 = (_WORD *)sub_292A0();
      sub_475A0(v7);
      sub_471F8(&def_342E4, v8, v9, "Date is nil. Assuming today.");
      sub_A1F0();
    }

    uint64_t v10 = sub_F146C();
    v11(v10);
  }
  uint64_t v13 = v0[45];
  uint64_t v12 = v0[46];
  sub_F0F34(v0[40], v13, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v13, 1, v12) == 1)
  {
    uint64_t v14 = v0[45];
    sub_1AABC0();
    sub_6F194(v14, &qword_201E10);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[47] + 32))(v0[52], v0[45], v0[46]);
  }
  uint64_t v15 = v0[51];
  uint64_t v16 = v0[52];
  uint64_t v17 = v0[50];
  uint64_t v18 = v0[46];
  uint64_t v19 = v0[47];
  sub_34214(0, &qword_206558);
  Class isa = sub_1ACF80(HKCategoryTypeIdentifierIntermenstrualBleeding).super.super.super.isa;
  v0[59] = (uint64_t)isa;
  sub_34214(0, &qword_206560);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v0[60] = (uint64_t)v21;
  v0[61] = (v19 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v21(v15, v16, v18);
  uint64_t v22 = sub_47968();
  ((void (*)(uint64_t))v21)(v22);
  v0[62] = (uint64_t)sub_EB008(isa, 0, v15, v17);
  uint64_t v23 = (void *)swift_task_alloc();
  v0[63] = (uint64_t)v23;
  void *v23 = v0;
  v23[1] = sub_EA180;
  sub_46EC4();
  return isSiriAuthorizedToAccessHealthData(store:)(v24);
}

uint64_t sub_EA180()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(unsigned char *)(v1 + 561) = v3;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_EA250(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_log_t log, NSObject *type,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_CD12C();
  a35 = v37;
  a36 = v38;
  sub_CD42C();
  a34 = v36;
  if (*(unsigned char *)(v36 + 561) == 1)
  {
    if ((*(unsigned char *)(v36 + 560) & 1) != 0 || *(void *)(v36 + 328) != 1)
    {
      sub_1AC7D0();
      sub_A340();
      uint64_t v81 = sub_F11EC();
      v82(v81);
      uint64_t v83 = sub_1AC7F0();
      os_log_type_t v84 = sub_1ACF50();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v85 = (uint8_t *)sub_292A0();
        *(_WORD *)uint64_t v85 = 0;
        _os_log_impl(&def_342E4, v83, v84, "Saving spotting.", v85, 2u);
        sub_A1F0();
      }
      uint64_t v86 = *(void *)(v36 + 496);
      uint64_t v87 = *(void **)(v36 + 464);

      sub_F139C();
      v88();
      *(void *)(v36 + 80) = v36;
      *(void *)(v36 + 88) = sub_EABC8;
      uint64_t v89 = swift_continuation_init();
      *(void *)(v36 + 144) = _NSConcreteStackBlock;
      *(void *)(v36 + 152) = 0x40000000;
      *(void *)(v36 + 160) = sub_EB158;
      *(void *)(v36 + 168) = &unk_1F77C0;
      *(void *)(v36 + 176) = v89;
      [v87 saveObject:v86 withCompletion:v36 + 144];
    }
    else
    {
      uint64_t v101 = *(void (**)(os_log_t, uint64_t, uint64_t))(v36 + 480);
      uint64_t v96 = *(void *)(v36 + 448);
      uint64_t v39 = *(void *)(v36 + 432);
      uint64_t v41 = *(void *)(v36 + 408);
      uint64_t v40 = *(void *)(v36 + 416);
      uint64_t v97 = *(void *)(v36 + 424);
      os_log_t loga = *(os_log_t *)(v36 + 392);
      uint64_t v42 = *(void *)(v36 + 376);
      typea = *(NSObject **)(v36 + 384);
      uint64_t v43 = *(void *)(v36 + 368);
      uint64_t v44 = self;
      sub_1AAD00();
      sub_1AACA0();
      sub_F1390();
      sub_F139C();
      v45();
      Class isa = sub_1AAB60().super.isa;
      uint64_t v47 = *(void (**)(void))(v42 + 8);
      *(void *)(v36 + 512) = v47;
      *(void *)(v36 + 520) = (v42 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      sub_CD2F0();
      v47();
      sub_9F1D8(v41);
      Class v48 = sub_1AAB60().super.isa;
      uint64_t v95 = v47;
      sub_CD2F0();
      v47();
      id v49 = [v44 predicateForSamplesWithStartDate:isa endDate:v48 options:0];
      *(void *)(v36 + 528) = v49;

      uint64_t v50 = sub_1AC7D0();
      sub_A340();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v96, v50, v97);
      v101(loga, v40, v43);
      v101(typea, v40, v43);
      uint64_t v51 = sub_1AC7F0();
      os_log_type_t v52 = sub_1ACF50();
      BOOL v53 = os_log_type_enabled(v51, v52);
      uint64_t v54 = *(void *)(v36 + 448);
      uint64_t v56 = *(void *)(v36 + 424);
      uint64_t v55 = *(void *)(v36 + 432);
      id v102 = v49;
      if (v53)
      {
        uint64_t v57 = *(void *)(v36 + 408);
        os_log_type_t typeb = v52;
        uint64_t v58 = swift_slowAlloc();
        a24 = swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = 136315394;
        sub_1AAD00();
        sub_1AACA0();
        sub_F1390();
        sub_E530();
        v59();
        sub_F0E84(&qword_206570, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v60 = sub_1AD2C0();
        unint64_t v62 = v61;
        sub_4788C();
        sub_CD2F0();
        v95();
        *(void *)(v36 + 304) = sub_4A278(v60, v62, &a24);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        sub_CD2F0();
        v95();
        *(_WORD *)(v58 + 12) = 2080;
        sub_9F1D8(v57);
        sub_1AD2C0();
        sub_4788C();
        sub_CD2F0();
        v95();
        uint64_t v63 = sub_F1390();
        *(void *)(v36 + 312) = sub_4A278(v63, v64, v65);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        sub_CD2F0();
        v95();
        _os_log_impl(&def_342E4, v51, typeb, "Not spotting, preparing to delete any existing spotting entry from [%s] to [%s].", (uint8_t *)v58, 0x16u);
        swift_arrayDestroy();
        sub_A1F0();
        sub_A1F0();

        sub_E558();
        v66();
      }
      else
      {
        sub_CD2F0();
        v95();
        sub_F1384();
        sub_CD2F0();
        v95();

        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
      }
      uint64_t v90 = *(void **)(v36 + 464);
      id v91 = [*(id *)(v36 + 496) categoryType];
      *(void *)(v36 + 536) = v91;
      *(void *)(v36 + 16) = v36;
      *(void *)(v36 + 56) = v36 + 296;
      *(void *)(v36 + 24) = sub_EA99C;
      uint64_t v92 = swift_continuation_init();
      *(void *)(v36 + 184) = _NSConcreteStackBlock;
      *(void *)(v36 + 192) = 0x40000000;
      *(void *)(v36 + 200) = sub_EB0F8;
      *(void *)(v36 + 208) = &unk_1F77D8;
      *(void *)(v36 + 216) = v92;
      [v90 deleteObjectsOfType:v91 predicate:v102 withCompletion:v36 + 184];
    }
    sub_A5EC();
    return _swift_continuation_await(v93);
  }
  else
  {
    uint64_t v67 = *(void **)(v36 + 496);
    uint64_t v69 = *(void **)(v36 + 464);
    int v68 = *(void **)(v36 + 472);
    sub_F0E38();
    uint64_t v103 = swift_allocError();
    swift_willThrow();

    uint64_t v70 = sub_4788C();
    v71(v70);
    sub_F1240();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_A5EC();
    return v73(v72, v73, v74, v75, v76, v77, v78, v79, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, log,
             type,
             a21,
             a22,
             v103,
             a24,
             a25,
             a26,
             a27,
             a28);
  }
}

uint64_t sub_EA99C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 544) = *(void *)(v3 + 48);
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_EAA7C()
{
  uint64_t v5 = *(void **)(v2 + 536);

  sub_F1190();
  id v6 = (id)sub_1AC5E0();
  Class isa = sub_1AAB60().super.isa;
  [v6 setDate:isa];

  if (v3) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = v4;
  }
  [v6 setFlow:v8];

  uint64_t v9 = sub_F1418();
  v10(v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = sub_F1444();
  return v12(v11);
}

uint64_t sub_EABC8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 552) = *(void *)(v3 + 112);
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_EACA8()
{
  sub_F1190();
  id v4 = (id)sub_1AC5E0();
  Class isa = sub_1AAB60().super.isa;
  [v4 setDate:isa];

  if (v2) {
    uint64_t v6 = 2;
  }
  else {
    uint64_t v6 = v3;
  }
  [v4 setFlow:v6];

  uint64_t v7 = sub_F1418();
  v8(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = sub_F1444();
  return v10(v9);
}

uint64_t sub_EADE4()
{
  uint64_t v9 = (void *)v0[67];
  uint64_t v1 = (void *)v0[66];
  char v2 = (void (*)(uint64_t))v0[64];
  uint64_t v3 = (void *)v0[62];
  id v4 = (void *)v0[58];
  uint64_t v5 = (void *)v0[59];
  swift_willThrow();

  uint64_t v6 = sub_F1384();
  v2(v6);

  sub_F1240();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_EAF00()
{
  uint64_t v1 = (void *)v0[62];
  uint64_t v3 = (void *)v0[58];
  char v2 = (void *)v0[59];
  swift_willThrow();

  uint64_t v4 = sub_F1384();
  v5(v4);
  sub_F1240();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

id sub_EB008(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Class isa = sub_1AAB60().super.isa;
  Class v9 = sub_1AAB60().super.isa;
  id v10 = [(id)swift_getObjCClassFromMetadata() categorySampleWithType:a1 value:a2 startDate:isa endDate:v9];

  uint64_t v11 = sub_1AABD0();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(a4, v11);
  v12(a3, v11);
  return v10;
}

uint64_t sub_EB0F8(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(result + 32);
    return sub_E9940(v4, a3);
  }
  else if (a4)
  {
    return sub_F0ED0(*(void *)(result + 32), (uint64_t)a4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_EB158(uint64_t result, int a2, void *a3)
{
  if (a2)
  {
    return j__swift_continuation_throwingResume();
  }
  else if (a3)
  {
    return sub_F0ED0(*(void *)(result + 32), (uint64_t)a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t LogPeriodFlow.execute(completion:)()
{
  sub_B6E14();

  return sub_1AAF80();
}

uint64_t sub_EB208(uint64_t a1)
{
  v2[78] = v1;
  v2[77] = a1;
  sub_1AC250();
  v2[79] = swift_task_alloc();
  uint64_t v3 = sub_1AC800();
  v2[80] = v3;
  v2[81] = *(void *)(v3 - 8);
  v2[82] = swift_task_alloc();
  v2[83] = swift_task_alloc();
  return _swift_task_switch(sub_EB308, 0, 0);
}

uint64_t sub_EB308()
{
  sub_46EFC();
  uint64_t v1 = v0[81];
  id v2 = sub_EBAF0();
  v0[84] = v2;
  v0[85] = sub_1AC7D0();
  sub_A340();
  v0[86] = *(void *)(v1 + 16);
  v0[87] = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v3 = sub_5B59C();
  v4(v3);
  id v5 = v2;
  uint64_t v6 = (void *)sub_1AC7F0();
  os_log_type_t v7 = sub_1ACF50();
  if (sub_A3D0(v7))
  {
    uint64_t v8 = (_DWORD *)sub_A4B0();
    Class v9 = (void *)sub_B7C18();
    *uint64_t v8 = 138412290;
    v0[76] = v5;
    id v10 = v5;
    sub_F13F4();
    *Class v9 = v5;

    sub_A27C(&def_342E4, v11, v12, "Executing intent: %@");
    sub_2694(&qword_201DE0);
    sub_F12E4();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {

    uint64_t v6 = v5;
  }
  uint64_t v13 = v0[81];
  uint64_t v14 = v0[78];

  v0[88] = *(void *)(v13 + 8);
  v0[89] = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_F139C();
  v15();
  uint64_t v16 = *(void **)(v14 + 240);
  v0[2] = v0;
  v0[7] = v0 + 74;
  v0[3] = sub_EB548;
  v0[67] = swift_continuation_init();
  v0[63] = _NSConcreteStackBlock;
  v0[64] = 0x40000000;
  v0[65] = sub_6AA8;
  v0[66] = &unk_1F77F0;
  [v16 handleLogPeriod:v5 completion:v0 + 63];
  sub_46EC4();
  return _swift_continuation_await(v17);
}

uint64_t sub_EB548()
{
  sub_A364();
  uint64_t v1 = *v0;
  sub_E53C();
  void *v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_EB61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 688);
  uint64_t v14 = *(void *)(v12 + 680);
  uint64_t v15 = *(void *)(v12 + 656);
  uint64_t v16 = *(void *)(v12 + 640);
  uint64_t v17 = *(void **)(v12 + 592);
  *(void *)(v12 + 720) = v17;
  sub_A340();
  v13(v15, v14, v16);
  uint64_t v18 = v17;
  uint64_t v19 = (void *)sub_1AC7F0();
  os_log_type_t v20 = sub_1ACF50();
  if (sub_A3D0(v20))
  {
    a9 = v12 + 600;
    uint64_t v21 = (_DWORD *)sub_A4B0();
    uint64_t v22 = (void *)sub_B7C18();
    *uint64_t v21 = 138412290;
    *(void *)(v12 + 600) = v18;
    uint64_t v23 = v18;
    sub_F13F4();
    void *v22 = v18;

    sub_A27C(&def_342E4, v24, v25, "Received intent response: %@");
    sub_2694(&qword_201DE0);
    sub_F12E4();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
  }
  uint64_t v26 = (*(uint64_t (**)(void, void))(v12 + 704))(*(void *)(v12 + 656), *(void *)(v12 + 640));
  uint64_t v27 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v18)))(v26);
  if (v27 == 4)
  {
    sub_1AC350();
    char v35 = (void *)swift_task_alloc();
    *(void *)(v12 + 728) = v35;
    *char v35 = v12;
    v35[1] = sub_EB980;
    sub_46EC4();
    return sub_EBD3C();
  }
  else
  {
    if (v27 == 101)
    {
      uint64_t v28 = *(void **)(v12 + 672);
      uint64_t v29 = *(void *)(v12 + 624);
      char v30 = *(unsigned char *)(v29 + 248);
      sub_9DE0(v29 + 40, v12 + 88);
      sub_9B48(v29 + 80, v12 + 128);
      uint64_t v31 = sub_1AB1C0();
      sub_47658();
      uint64_t v32 = sub_1AB1B0();
      *(void *)(v12 + 312) = v31;
      *(void *)(v12 + 320) = &protocol witness table for ResponseFactory;
      *(void *)(v12 + 288) = v32;
      type metadata accessor for WellnessCATsSimple();
      sub_1AC240();
      uint64_t v33 = sub_1AC210();
      type metadata accessor for WellnessCATs();
      sub_1AC240();
      uint64_t v34 = sub_1AC1A0();
      *(unsigned char *)(v12 + 80) = v30;
      *(void *)(v12 + 328) = v33;
      *(void *)(v12 + 336) = v34;
      sub_9D40();
      sub_1AB120();

      sub_9D8C(v12 + 80);
    }
    else
    {
      uint64_t v38 = *(void **)(v12 + 672);
      uint64_t v39 = *(void *)(v12 + 624);
      sub_1AC320();
      sub_9B48(v39 + 80, v12 + 344);
      sub_9BA4();
      sub_1AB120();

      sub_9BF0(v12 + 344);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_46EC4();
    return v41(v40, v41, v42, v43, v44, v45, v46, v47, a9, a10, a11, a12);
  }
}

uint64_t sub_EB980()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 736) = v3;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_EBA50()
{
  sub_47634();
  uint64_t v1 = *(void **)(v0 + 720);
  id v2 = *(void **)(v0 + 672);
  sub_1AB130();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v3();
}

id sub_EBAF0()
{
  id v2 = v0;
  uint64_t v3 = sub_2694(&qword_201CC8);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_E548();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = sub_2694(&qword_201E10);
  uint64_t v9 = sub_53D4(v8);
  __chkstk_darwin(v9);
  sub_2F014();
  id v10 = [objc_allocWithZone((Class)sub_1AC4B0()) init];
  uint64_t v11 = (void *)sub_F1390();
  sub_2E38(v11, v12);
  uint64_t v13 = sub_F1298();
  v14(v13);
  uint64_t v15 = sub_1AAA10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v15) == 1)
  {
    sub_6F194(v7, &qword_201CC8);
    uint64_t v16 = sub_1AABD0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, v16);
    Class isa = 0;
  }
  else
  {
    sub_1AA9F0();
    sub_A5C0();
    sub_E558();
    v18();
    uint64_t v19 = sub_1AABD0();
    sub_47F14();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v20, v21, v22, v19);
    Class isa = 0;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v19) != 1)
    {
      Class isa = sub_1AAB60().super.isa;
      sub_A5C0();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v1, v19);
    }
  }
  [v10 setDate:isa];

  uint64_t v24 = v2[3];
  uint64_t v25 = v2[4];
  sub_2E38(v2, v24);
  (*(void (**)(uint64_t, uint64_t))(v25 + 64))(v24, v25);
  [v10 setFlow:sub_1AC480()];
  return v10;
}

uint64_t sub_EBD3C()
{
  sub_A364();
  v1[147] = v0;
  v1[146] = v2;
  uint64_t v3 = sub_1AB0A0();
  v1[148] = v3;
  sub_A19C(v3);
  v1[149] = v4;
  v1[150] = sub_A220();
  v1[151] = swift_task_alloc();
  uint64_t v5 = sub_1AB3D0();
  v1[152] = v5;
  sub_A19C(v5);
  v1[153] = v6;
  v1[154] = sub_A42C();
  uint64_t v7 = sub_1AC800();
  v1[155] = v7;
  sub_A19C(v7);
  v1[156] = v8;
  v1[157] = sub_A220();
  v1[158] = swift_task_alloc();
  v1[159] = swift_task_alloc();
  v1[160] = swift_task_alloc();
  v1[161] = swift_task_alloc();
  v1[162] = swift_task_alloc();
  v1[163] = swift_task_alloc();
  v1[164] = swift_task_alloc();
  uint64_t v9 = sub_2694(&qword_2022D0);
  sub_53D4(v9);
  v1[165] = sub_A42C();
  uint64_t v10 = type metadata accessor for CycleTrackingLogModel();
  v1[166] = v10;
  sub_53D4(v10);
  v1[167] = sub_A220();
  v1[168] = swift_task_alloc();
  v1[169] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  v1[170] = v11;
  sub_53D4(v11);
  v1[171] = sub_A42C();
  uint64_t v12 = sub_2694(&qword_201E28);
  sub_53D4(v12);
  v1[172] = sub_A220();
  v1[173] = swift_task_alloc();
  v1[174] = swift_task_alloc();
  uint64_t v13 = sub_2694(&qword_201E20);
  sub_53D4(v13);
  v1[175] = sub_A220();
  v1[176] = swift_task_alloc();
  uint64_t v14 = sub_2694(&qword_201E10);
  sub_53D4(v14);
  v1[177] = sub_A220();
  v1[178] = swift_task_alloc();
  uint64_t v15 = sub_1AABD0();
  v1[179] = v15;
  sub_A19C(v15);
  v1[180] = v16;
  v1[181] = sub_A220();
  v1[182] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v17, v18, v19);
}

uint64_t sub_EBFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_CD12C();
  sub_CD42C();
  id v30 = [*(id *)(v28 + 1168) date];
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = *(void *)(v28 + 1448);
    uint64_t v33 = *(void *)(v28 + 1440);
    uint64_t v34 = *(void *)(v28 + 1432);
    uint64_t v35 = *(void *)(v28 + 1424);
    sub_1AABB0();

    uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
    v36(v35, v32, v34);
    sub_F134C();
    if (!v42)
    {
      uint64_t v37 = *(void **)(v28 + 1176);
      v36(*(void *)(v28 + 1456), *(void *)(v28 + 1424), *(void *)(v28 + 1432));
      sub_2E38(v37, v37[3]);
      uint64_t v38 = sub_F1300();
      __int16 v40 = v39(v38);
      if (v40 != 270)
      {
        BOOL v42 = sub_1771BC(v40) == 0x676E6974746F7073 && v41 == 0xE800000000000000;
        if (v42)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v43 = sub_1AD2F0();
          swift_bridgeObjectRelease();
          if ((v43 & 1) == 0) {
            goto LABEL_9;
          }
        }
        uint64_t v44 = (char *)(*(void *)(v28 + 1176) + 249);
LABEL_19:
        uint64_t v70 = *(void *)(v28 + 1456);
        uint64_t v71 = *(void *)(v28 + 1440);
        uint64_t v72 = *(void *)(v28 + 1432);
        uint64_t v73 = *(void **)(v28 + 1416);
        char v74 = *v44;
        *(unsigned char *)(v28 + 1658) = *v44;
        (*(void (**)(void *, uint64_t, uint64_t))(v71 + 16))(v73, v70, v72);
        sub_47F14();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v75, v76, v77, v72);
        sub_1546D4(v74, v73);
        sub_6F194((uint64_t)v73, &qword_201E10);
        *(void *)(v28 + 760) = &type metadata for WellnessFeatureFlagsKey;
        *(void *)(v28 + 768) = sub_45E30();
        *(unsigned char *)(v28 + 736) = 4;
        LOBYTE(v72) = sub_1AB480();
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v28 + 736);
        if (v72)
        {
          uint64_t v78 = *(void **)(v28 + 1168);
          sub_1AC100();
          *(void *)(v28 + 1464) = sub_1AC090();
          *(void *)(v28 + 1472) = [v78 flow];
          uint64_t v79 = (void *)swift_task_alloc();
          *(void *)(v28 + 1480) = v79;
          *uint64_t v79 = v28;
          v79[1] = sub_EC5A8;
          sub_A5EC();
          return sub_7A658(v80, v81);
        }
        else
        {
          uint64_t v83 = *(void *)(v28 + 1456);
          uint64_t v84 = *(void *)(v28 + 1408);
          uint64_t v85 = *(void *)(v28 + 1176);
          uint64_t v86 = *(void *)(v28 + 1168);
          sub_9DE0(v85 + 160, v28 + 816);
          sub_2E38((void *)(v28 + 816), *(void *)(v28 + 840));
          uint64_t v87 = (void *)swift_task_alloc();
          *(void *)(v28 + 1632) = v87;
          v87[2] = v85;
          v87[3] = v83;
          v87[4] = v86;
          v87[5] = v84;
          uint64_t v88 = (void *)swift_task_alloc();
          *(void *)(v28 + 1640) = v88;
          *uint64_t v88 = v28;
          v88[1] = sub_EDFB0;
          sub_A5EC();
          return sub_13799C();
        }
      }
LABEL_9:
      uint64_t v44 = (char *)(*(void *)(v28 + 1176) + 248);
      goto LABEL_19;
    }
  }
  else
  {
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v28 + 1424), 1, 1, *(void *)(v28 + 1432));
  }
  uint64_t v45 = *(void **)(v28 + 1168);
  sub_6F194(*(void *)(v28 + 1424), &qword_201E10);
  sub_1AC7D0();
  sub_A340();
  uint64_t v46 = sub_F11EC();
  v47(v46);
  id v48 = v45;
  id v49 = (void *)sub_1AC7F0();
  os_log_type_t v50 = sub_1ACF60();
  BOOL v51 = sub_470C8(v50);
  os_log_type_t v52 = *(void **)(v28 + 1168);
  if (v51)
  {
    BOOL v53 = (_DWORD *)sub_A4B0();
    uint64_t v54 = (void *)sub_B7C18();
    *BOOL v53 = 138412290;
    *(void *)(v28 + 1104) = v52;
    id v55 = v52;
    sub_F13A8();
    *uint64_t v54 = v52;

    sub_F14AC(&def_342E4, v56, v57, "LogPeriodIntentResponse missing date param: %@");
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {

    id v49 = *(void **)(v28 + 1168);
  }
  uint64_t v58 = *(void *)(v28 + 1176);

  uint64_t v59 = sub_F146C();
  v60(v59);
  sub_9B48(v58 + 80, v28 + 176);
  sub_9BA4();
  uint64_t v90 = sub_1AAF70();
  sub_9BF0(v28 + 176);
  sub_F10AC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A444();
  sub_A5EC();
  return v63(v61, v62, v63, v64, v65, v66, v67, v68, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           v90,
           a26,
           a27,
           a28);
}

uint64_t sub_EC5A8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 1488) = v3;
  *(void *)(v1 + 1496) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_EC67C()
{
  sub_2E38(*(void **)(v0 + 1176), *(void *)(*(void *)(v0 + 1176) + 24));
  uint64_t v1 = sub_F1300();
  __int16 v3 = v2(v1);
  if (v3 == 270)
  {
    uint64_t v4 = 1;
  }
  else
  {
    sub_1771BC(v3);
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v0 + 1392);
  uint64_t v6 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, v4, 1, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 1504) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_EC79C;
  sub_F1458(*(void *)(v0 + 1392));
  return sub_1A3880();
}

uint64_t sub_EC79C()
{
  sub_A364();
  sub_A1B4();
  __int16 v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[189] = v5;
  v3[190] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = v3[174];
    swift_bridgeObjectRelease();
    sub_6F194(v6, &qword_201E28);
  }
  else
  {
    sub_6F194(v3[174], &qword_201E28);
  }
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_EC8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_CD12C();
  sub_CD42C();
  id v30 = [*(id *)(v28 + 1512) dialog];
  *(void *)(v28 + 1528) = sub_34214(0, &qword_203810);
  unint64_t v31 = sub_1ACED0();

  if (!(v31 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v31 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_3;
    }
LABEL_12:
    id v49 = *(void **)(v28 + 1512);
    swift_bridgeObjectRelease();

    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v48 = sub_1AD170();
  swift_bridgeObjectRelease();
  if (!v48) {
    goto LABEL_12;
  }
LABEL_3:
  sub_4AA30(0, (v31 & 0xC000000000000001) == 0, v31);
  if ((v31 & 0xC000000000000001) != 0) {
    id v32 = (id)sub_1AD0A0();
  }
  else {
    id v32 = *(id *)(v31 + 32);
  }
  uint64_t v33 = v32;
  uint64_t v34 = *(void **)(v28 + 1512);
  uint64_t v35 = *(void *)(v28 + 1496);
  swift_bridgeObjectRelease();
  id v36 = [v33 fullPrint];

  uint64_t v37 = sub_1ACDD0();
  uint64_t v39 = v38;

  *(void *)(v28 + 1536) = v37;
  *(void *)(v28 + 1544) = v39;
  if (!v35) {
    goto LABEL_13;
  }
  sub_2E38(*(void **)(v28 + 1176), *(void *)(*(void *)(v28 + 1176) + 24));
  uint64_t v40 = sub_47968();
  __int16 v42 = v41(v40);
  *(_WORD *)(v28 + 1656) = v42;
  if (v42 == 270)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v50 = *(void *)(v28 + 1280);
    uint64_t v51 = *(void *)(v28 + 1248);
    sub_1AC7D0();
    sub_A340();
    uint64_t v52 = v51 + 16;
    uint64_t v53 = sub_F11EC();
    v54(v53);
    sub_1AC7F0();
    os_log_type_t v55 = sub_1ACF60();
    if (sub_29300(v55))
    {
      uint64_t v56 = (_WORD *)sub_292A0();
      sub_29368(v56);
      sub_A7FC(&def_342E4, v57, v58, "#LogPeriodFlow: Unable to create cycle tracking response snippet");
      sub_A1F0();
    }
    sub_F1204();
    sub_47814();
    v59();
    sub_9B48(v52 + 80, v50);
    sub_9BA4();
    uint64_t v69 = sub_1AAF70();
    swift_release();
    sub_9BF0(v50);
    sub_6F194(v29, &qword_201E20);
    sub_47310();
    v60();
    sub_F10AC();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_A444();
    sub_A5EC();
    return v63(v61, v62, v63, v64, v65, v66, v67, v68, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             v69,
             a26,
             a27,
             a28);
  }
  char v43 = (void *)swift_task_alloc();
  *(void *)(v28 + 1552) = v43;
  *char v43 = v28;
  v43[1] = sub_ECC9C;
  sub_A5EC();
  return sub_7A658(v44, v45);
}

uint64_t sub_ECC9C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  v1[131] = v0;
  v1[132] = v3;
  v1[133] = v4;
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 1560) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_ECD74()
{
  uint64_t v52 = v0;
  uint64_t v1 = *(void *)(v0 + 1560);
  uint64_t v44 = *(void *)(v0 + 1536);
  uint64_t v45 = *(void *)(v0 + 1544);
  uint64_t v50 = *(void *)(v0 + 1408);
  uint64_t v41 = *(void *)(v0 + 1056);
  uint64_t v42 = *(void *)(v0 + 1400);
  uint64_t v2 = *(void *)(v0 + 1368);
  uint64_t v3 = *(void *)(v0 + 1360);
  uint64_t v43 = *(void *)(v0 + 1352);
  uint64_t v49 = *(void *)(v0 + 1344);
  uint64_t v4 = *(void *)(v0 + 1320);
  uint64_t v5 = *(void *)(v0 + 1248);
  uint64_t v46 = *(void *)(v0 + 1312);
  uint64_t v47 = *(void *)(v0 + 1240);
  char v6 = *(unsigned char *)(v0 + 1658);
  sub_1ACE40();
  swift_bridgeObjectRelease();
  unint64_t v7 = sub_34250(v6);
  unint64_t v9 = v8;
  unint64_t v10 = sub_2F2B8(v6);
  uint64_t v11 = (unint64_t *)(v2 + *(int *)(v3 + 20));
  *uint64_t v11 = v7;
  v11[1] = v9;
  uint64_t v12 = (unint64_t *)(v2 + *(int *)(v3 + 24));
  unint64_t *v12 = v10;
  v12[1] = v13;
  if (v1) {
    uint64_t v14 = v41;
  }
  else {
    uint64_t v14 = 0x646567676F4CLL;
  }
  if (v1) {
    uint64_t v15 = v1;
  }
  else {
    uint64_t v15 = 0xE600000000000000;
  }
  sub_F0CBC(v2, v4);
  sub_47F14();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v16, v17, v18, v3);
  sub_F0F34(v50, v42, &qword_201E20);
  uint64_t v19 = swift_retain();
  CycleTrackingLogModel.init(date:loggedLabel:cycleTrackingType:snippetHeaderModel:url:)(v19, v14, v15, v44, v45, v4, v42, v43);
  uint64_t v20 = sub_1AC7D0();
  *(void *)(v0 + 1568) = v20;
  sub_A340();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(void *)(v0 + 1576) = v21;
  *(void *)(v0 + 1584) = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v21(v46, v20, v47);
  sub_F0CBC(v43, v49);
  uint64_t v22 = sub_1AC7F0();
  os_log_type_t v23 = sub_1ACF50();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = *(void *)(v0 + 1344);
    uint64_t v25 = *(void *)(v0 + 1336);
    uint64_t v48 = *(void *)(v0 + 1248);
    uint64_t v26 = (_DWORD *)sub_A4B0();
    uint64_t v51 = swift_slowAlloc();
    *uint64_t v26 = 136315138;
    sub_F0CBC(v24, v25);
    uint64_t v27 = sub_1ACE00();
    *(void *)(v0 + 1160) = sub_4A278(v27, v28, &v51);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_F0D10(v24, (void (*)(void))type metadata accessor for CycleTrackingLogModel);
    sub_76694(&def_342E4, v29, v30, "#LogPeriodFlow: Snippet model %s");
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    unint64_t v31 = *(void (**)(void))(v48 + 8);
    sub_E530();
    v31();
  }
  else
  {
    uint64_t v32 = *(void *)(v0 + 1312);
    uint64_t v33 = *(void *)(v0 + 1248);
    uint64_t v34 = *(void *)(v0 + 1240);
    sub_F0D10(*(void *)(v0 + 1344), (void (*)(void))type metadata accessor for CycleTrackingLogModel);

    unint64_t v31 = *(void (**)(void))(v33 + 8);
    ((void (*)(uint64_t, uint64_t))v31)(v32, v34);
  }
  *(void *)(v0 + 1592) = v31;
  sub_1771BC(*(_WORD *)(v0 + 1656));
  sub_1ACE40();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 1600) = sub_1AC1E0();
  sub_47F14();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v35, v36, v37, v38);
  swift_retain();
  uint64_t v39 = (void *)swift_task_alloc();
  *(void *)(v0 + 1608) = v39;
  *uint64_t v39 = v0;
  v39[1] = sub_ED1C4;
  return sub_1A3638();
}

uint64_t sub_ED1C4()
{
  sub_47634();
  uint64_t v2 = *v1;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *char v6 = v5;
  *(void *)(v8 + 1616) = v7;
  swift_task_dealloc();
  uint64_t v9 = *(void *)(v2 + 1384);
  if (v0)
  {
    swift_release();
    swift_errorRelease();
    sub_6F194(v9, &qword_201E28);
  }
  else
  {
    sub_6F194(v9, &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_ED338()
{
  uint64_t v52 = v0;
  uint64_t v1 = (void *)v0[202];
  uint64_t v2 = (void (*)(uint64_t))v0[197];
  sub_A340();
  uint64_t v3 = sub_470B8();
  v2(v3);
  id v4 = v1;
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[202];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)sub_A4B0();
    uint64_t v51 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    id v10 = [v8 dialog];
    unint64_t v11 = sub_1ACED0();

    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_1AD170();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v12 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8));
    }
    if (v12)
    {
      sub_4AA30(0, (v11 & 0xC000000000000001) == 0, v11);
      if ((v11 & 0xC000000000000001) != 0) {
        id v13 = (id)sub_1AD0A0();
      }
      else {
        id v13 = *(id *)(v11 + 32);
      }
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      id v15 = [v14 fullPrint];

      uint64_t v12 = sub_1ACDD0();
      uint64_t v17 = v16;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = 0;
    }
    uint64_t v19 = (void *)v0[202];
    v0[136] = v12;
    v0[137] = v17;
    sub_2694(&qword_2032A8);
    sub_1ACFC0();
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_F1384();
    v0[144] = sub_4A278(v20, v21, v22);
    sub_1ACFE0();
    swift_bridgeObjectRelease();

    _os_log_impl(&def_342E4, v5, v6, "#LogPeriodFlow: Snippet dialog is %s", v9, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    sub_E530();
    v23();
  }
  else
  {
    uint64_t v18 = (void (*)(void))v0[199];

    sub_F1384();
    sub_E530();
    v18();
  }
  uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[197];
  uint64_t v25 = v0[196];
  uint64_t v26 = v0[162];
  uint64_t v27 = v0[155];
  sub_A340();
  v24(v26, v25, v27);
  swift_retain_n();
  unint64_t v28 = sub_1AC7F0();
  os_log_type_t v29 = sub_1ACF50();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = v0[200];
    uint64_t v31 = v0[172];
    uint64_t v32 = (uint8_t *)sub_A4B0();
    uint64_t v51 = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136315138;
    sub_1AC070();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v31, 1, v30) == 1)
    {
      sub_6F194(v0[172], &qword_201E28);
      uint64_t v33 = 0;
      uint64_t v34 = 0;
    }
    else
    {
      uint64_t v36 = v0[200];
      uint64_t v37 = v0[172];
      uint64_t v33 = sub_1AC1D0();
      uint64_t v34 = v38;
      sub_A5C0();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v36);
    }
    uint64_t v49 = v0[162];
    uint64_t v50 = (void (*)(uint64_t, uint64_t))v0[199];
    uint64_t v48 = v0[155];
    v0[134] = v33;
    v0[135] = v34;
    sub_2694(&qword_2032A8);
    uint64_t v40 = sub_1ACFC0();
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    v0[142] = sub_4A278(v40, v42, &v51);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&def_342E4, v28, v29, "#LogPeriodFlow: Date is %s", v32, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    v50(v49, v48);
  }
  else
  {
    uint64_t v35 = (void (*)(void))v0[199];
    swift_release_n();

    sub_E530();
    v35();
  }
  uint64_t v43 = v0[169];
  v0[100] = type metadata accessor for WellnessSnippets();
  v0[101] = sub_F0E84((unint64_t *)&qword_202590, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  uint64_t v44 = sub_B5B0(v0 + 97);
  sub_F0CBC(v43, (uint64_t)v44);
  swift_storeEnumTagMultiPayload();
  swift_task_alloc();
  sub_250E0();
  v0[203] = (uint64_t)v45;
  *uint64_t v45 = v46;
  v45[1] = sub_ED978;
  return sub_7ADEC();
}

uint64_t sub_ED978()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 776;
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_EDA4C()
{
  uint64_t v1 = *(void **)(v0 + 1616);
  uint64_t v7 = *(void *)(v0 + 1368);
  uint64_t v8 = *(void *)(v0 + 1408);
  uint64_t v2 = *(void *)(v0 + 1352);
  sub_9DE0(v0 + 696, v0 + 656);
  uint64_t v3 = swift_allocObject();
  sub_24D80((long long *)(v0 + 656), v3 + 16);
  sub_1AB350();
  sub_1AAE40();
  sub_47658();
  *(void *)(v0 + 1120) = sub_1AAE30();
  uint64_t v9 = sub_1AAF70();

  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 696);
  sub_F0D10(v2, (void (*)(void))type metadata accessor for CycleTrackingLogModel);
  sub_F0D10(v7, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_6F194(v8, &qword_201E20);
  sub_47814();
  v4();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v9);
}

uint64_t sub_EDD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_CD12C();
  sub_CD42C();
  os_log_type_t v29 = (void (*)(uint64_t))v28[197];
  sub_A340();
  uint64_t v30 = sub_470B8();
  v29(v30);
  uint64_t v31 = (void *)sub_1AC7F0();
  os_log_type_t v32 = sub_1ACF60();
  if (sub_29300(v32))
  {
    uint64_t v33 = (_WORD *)sub_292A0();
    sub_29368(v33);
    sub_A7FC(&def_342E4, v34, v35, "#LogPeriodFlow: Invalid dialog");
    sub_A1F0();
  }
  uint64_t v36 = (void (*)(void))v28[199];
  uint64_t v51 = v28[179];
  uint64_t v52 = v28[182];
  uint64_t v49 = v28[171];
  uint64_t v50 = v28[176];
  uint64_t v48 = v28[169];
  uint64_t v37 = v28[147];

  sub_E530();
  v36();
  sub_9B48(v37 + 80, (uint64_t)(v28 + 42));
  sub_9BA4();
  uint64_t v53 = sub_1AAF70();
  swift_release();
  sub_9BF0((uint64_t)(v28 + 42));
  sub_F0D10(v48, (void (*)(void))type metadata accessor for CycleTrackingLogModel);
  sub_F0D10(v49, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_6F194(v50, &qword_201E20);
  sub_CD2F0();
  v38();
  sub_F10AC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A444();
  sub_A5EC();
  return v41(v39, v40, v41, v42, v43, v44, v45, v46, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           v48,
           v49,
           v50,
           v51,
           v52,
           v53,
           a26,
           a27,
           a28);
}

uint64_t sub_EDFB0(uint64_t a1)
{
  uint64_t v4 = *v2;
  sub_E53C();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v4 + 1648) = a1;
  }
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_EE0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_CD12C();
  sub_CD42C();
  os_log_type_t v29 = (void *)v28[206];
  uint64_t v51 = v28[182];
  uint64_t v50 = v28[179];
  uint64_t v30 = v28[154];
  uint64_t v31 = v28[153];
  uint64_t v48 = v28[152];
  uint64_t v49 = v28[176];
  uint64_t v32 = v28[147];
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v28 + 102));
  id v33 = v29;
  sub_1AB070();
  uint64_t v34 = sub_470B8();
  v35(v34);
  sub_1AB370();
  sub_B7B9C();
  sub_47310();
  v36();
  id v37 = [v33 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_2E38((void *)(v32 + 80), *(void *)(v32 + 104));
  v28[139] = sub_1AAF40();
  sub_1AAEF0();
  uint64_t v52 = sub_1AAF70();

  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v48);
  sub_6F194(v49, &qword_201E20);
  sub_47814();
  v38();
  swift_release();
  sub_F10AC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A444();
  sub_A5EC();
  return v41(v39, v40, v41, v42, v43, v44, v45, v46, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           v32 + 80,
           v48,
           v49,
           v50,
           v51,
           v52,
           a26,
           a27,
           a28);
}

uint64_t sub_EE398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_CD12C();
  sub_CD42C();
  uint64_t v30 = *(void **)(v28 + 1168);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v28 + 816);
  sub_1AC7D0();
  sub_A340();
  uint64_t v31 = sub_F11EC();
  v32(v31);
  id v33 = v30;
  uint64_t v34 = (void *)sub_1AC7F0();
  os_log_type_t v35 = sub_1ACF60();
  if (sub_470C8(v35))
  {
    uint64_t v36 = *(void **)(v28 + 1168);
    id v37 = (_DWORD *)sub_A4B0();
    uint64_t v38 = (void *)sub_B7C18();
    *id v37 = 138412290;
    *(void *)(v28 + 1128) = v36;
    id v39 = v36;
    sub_F13A8();
    *uint64_t v38 = v36;

    sub_F14AC(&def_342E4, v40, v41, "Failed to produce patternResult from response: %@");
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {

    uint64_t v34 = *(void **)(v28 + 1168);
  }
  uint64_t v56 = *(void *)(v28 + 1456);
  uint64_t v42 = *(void *)(v28 + 1408);

  sub_47310();
  v43();
  uint64_t v44 = sub_F1384();
  sub_9B48(v44, v45);
  sub_9BA4();
  uint64_t v57 = sub_1AAF70();
  sub_9BF0(v28 + 496);
  sub_6F194(v42, &qword_201E20);
  sub_F139C();
  v46();
  sub_F10AC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A444();
  sub_A5EC();
  return v49(v47, v48, v49, v50, v51, v52, v53, v54, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           v56,
           v57,
           a26,
           a27,
           a28);
}

uint64_t sub_EE644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_CD12C();
  sub_CD42C();
  uint64_t v29 = v28[157];
  uint64_t v30 = v28[156];
  uint64_t v31 = v28[155];
  uint64_t v32 = (void *)sub_1AC7D0();
  sub_A340();
  (*(void (**)(uint64_t, void *, uint64_t))(v30 + 16))(v29, v32, v31);
  swift_errorRetain();
  swift_errorRetain();
  id v33 = sub_1AC7F0();
  os_log_type_t v34 = sub_1ACF60();
  uint64_t v35 = v34;
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v36 = (_DWORD *)sub_A4B0();
    uint64_t v32 = (void *)sub_B7C18();
    *uint64_t v36 = 138412290;
    swift_errorRetain();
    uint64_t v37 = _swift_stdlib_bridgeErrorToNSError();
    v28[143] = v37;
    sub_1ACFE0();
    *uint64_t v32 = v37;
    swift_errorRelease();
    swift_errorRelease();
    sub_76694(&def_342E4, v38, v39, "#LogPeriodFlow: Error while generating the cycle tracking label %@");
    sub_2694(&qword_201DE0);
    sub_F12E4();
    sub_A1F0();
    sub_A1F0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_E530();
  v40();
  uint64_t v41 = v28[155];
  sub_1AC7D0();
  sub_A340();
  uint64_t v42 = sub_B7B9C();
  v43(v42);
  sub_1AC7F0();
  os_log_type_t v44 = sub_1ACF60();
  if (sub_29300(v44))
  {
    uint64_t v45 = (_WORD *)sub_292A0();
    sub_29368(v45);
    sub_A7FC(&def_342E4, v46, v47, "#LogPeriodFlow: Unable to create cycle tracking response snippet");
    sub_A1F0();
  }
  sub_F1204();
  sub_47814();
  v48();
  sub_9B48(v35 + 80, v41);
  sub_9BA4();
  uint64_t v59 = sub_1AAF70();
  swift_release();
  sub_9BF0(v41);
  sub_6F194((uint64_t)v32, &qword_201E20);
  sub_47310();
  v49();
  sub_F10AC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A444();
  sub_A5EC();
  return v52(v50, v51, v52, v53, v54, v55, v56, v57, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           v59,
           a26,
           a27,
           a28);
}

uint64_t sub_EE9A8(uint64_t a1)
{
  v2[132] = v1;
  v2[131] = a1;
  uint64_t v3 = sub_1AC800();
  v2[133] = v3;
  v2[134] = *(void *)(v3 - 8);
  v2[135] = swift_task_alloc();
  v2[136] = swift_task_alloc();
  v2[137] = swift_task_alloc();
  v2[138] = swift_task_alloc();
  sub_1AC250();
  v2[139] = swift_task_alloc();
  uint64_t v4 = sub_1AAD30();
  v2[140] = v4;
  v2[141] = *(void *)(v4 - 8);
  v2[142] = swift_task_alloc();
  uint64_t v5 = sub_1AAA10();
  v2[143] = v5;
  v2[144] = *(void *)(v5 - 8);
  v2[145] = swift_task_alloc();
  sub_2694(&qword_201CC8);
  v2[146] = swift_task_alloc();
  v2[147] = swift_task_alloc();
  sub_2694(&qword_201E10);
  v2[148] = swift_task_alloc();
  v2[149] = swift_task_alloc();
  uint64_t v6 = sub_1AABD0();
  v2[150] = v6;
  v2[151] = *(void *)(v6 - 8);
  v2[152] = swift_task_alloc();
  v2[153] = swift_task_alloc();
  v2[154] = swift_task_alloc();
  return _swift_task_switch(sub_EEC70, 0, 0);
}

uint64_t sub_EEC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_F12B0();
  sub_F1480();
  uint64_t v17 = v16[132] + 40;
  uint64_t v18 = (void *)sub_4788C();
  sub_2E38(v18, v19);
  uint64_t v20 = sub_F13DC();
  v21(v20);
  sub_2E38(v16 + 112, v16[115]);
  sub_47968();
  char v22 = sub_1AB050();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v16 + 112));
  if ((v22 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v23 = v16[147];
  uint64_t v24 = v16[143];
  sub_2E38((void *)v16[132], *(void *)(v16[132] + 24));
  uint64_t v25 = sub_F1298();
  v26(v25);
  int v27 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v23, 1, v24);
  uint64_t v28 = v16[150];
  uint64_t v29 = v16[149];
  if (v27 == 1)
  {
    sub_6F194(v16[147], &qword_201CC8);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v29, 1, 1, v28);
LABEL_6:
    sub_6F194(v16[149], &qword_201E10);
LABEL_7:
    uint64_t v33 = v16[134];
    v16[155] = sub_1AC7D0();
    sub_A340();
    v16[156] = *(void *)(v33 + 16);
    v16[157] = (v33 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v34 = sub_F11EC();
    v35(v34);
    uint64_t v36 = (void *)sub_1AC7F0();
    os_log_type_t v37 = sub_1ACF50();
    if (sub_29300(v37))
    {
      uint64_t v38 = (_WORD *)sub_292A0();
      sub_29368(v38);
      sub_A7FC(&def_342E4, v39, v40, "Handling spotting case");
      sub_A1F0();
    }
    uint64_t v41 = v16[146];
    uint64_t v42 = v16[143];
    uint64_t v43 = v16[134];
    os_log_type_t v44 = (void *)v16[132];

    v16[158] = *(void *)(v43 + 8);
    v16[159] = (v43 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v45 = sub_F1320();
    v46(v45);
    sub_2E38(v44, v44[3]);
    uint64_t v47 = sub_F1298();
    v48(v47);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v41, 1, v42) == 1)
    {
      sub_6F194(v16[146], &qword_201CC8);
      uint64_t v49 = 1;
    }
    else
    {
      sub_1AA9F0();
      sub_B7B9C();
      sub_47814();
      v50();
      uint64_t v49 = 0;
    }
    uint64_t v51 = (void *)v16[132];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v16[148], v49, 1, v16[150]);
    sub_2E38(v51, v44[3]);
    uint64_t v52 = sub_F148C();
    v53(v52);
    sub_1AC480();
    uint64_t v54 = (void *)swift_task_alloc();
    v16[160] = v54;
    *uint64_t v54 = v16;
    v54[1] = sub_EF1CC;
    sub_F1458(v16[148]);
    sub_4EA7C();
    return sub_E9DA4();
  }
  uint64_t v30 = v16[144];
  sub_1AA9F0();
  uint64_t v31 = *(void (**)(void))(v30 + 8);
  sub_F1390();
  sub_47310();
  v31();
  sub_F134C();
  if (v32) {
    goto LABEL_6;
  }
  uint64_t v57 = v16[152];
  uint64_t v77 = v16[140];
  uint64_t v78 = v16[143];
  (*(void (**)(void, void, void))(v16[151] + 32))(v16[154], v16[149], v16[150]);
  sub_1AAD00();
  sub_1AACA0();
  sub_F139C();
  v58();
  sub_9F1D8(v57);
  sub_47968();
  sub_1AA9D0();
  char v59 = sub_1AC700();
  sub_47310();
  v31();
  if (v59)
  {
    sub_E530();
    v60();
    goto LABEL_7;
  }
  uint64_t v61 = v16[132];
  sub_1AC330();
  uint64_t v62 = sub_F1390();
  sub_9DE0(v62, v63);
  sub_9DE0(v17, (uint64_t)(v16 + 7));
  sub_9B48(v61 + 80, (uint64_t)(v16 + 12));
  uint64_t v64 = sub_1AB1C0();
  sub_47658();
  uint64_t v65 = sub_1AB1B0();
  v16[35] = v64;
  v16[36] = &protocol witness table for ResponseFactory;
  v16[32] = v65;
  type metadata accessor for WellnessLoggingCATsSimple();
  sub_1AC240();
  uint64_t v66 = sub_1AC210();
  type metadata accessor for WellnessCATs();
  sub_1AC240();
  uint64_t v67 = sub_1AC1A0();
  v16[37] = v66;
  v16[38] = v67;
  sub_2503C();
  sub_1AB120();
  sub_24EA0((uint64_t)(v16 + 2));
  sub_F139C();
  v68();
  sub_F1140();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_4EA7C();
  return v70(v69, v70, v71, v72, v73, v74, v75, v76, a9, a10, a11, v77, v78, a14, a15, a16);
}

uint64_t sub_EF1CC()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 1184);
  uint64_t v6 = *v1;
  sub_E53C();
  *uint64_t v7 = v6;
  *(void *)(v9 + 1288) = v8;
  *(void *)(v9 + 1296) = v0;
  swift_task_dealloc();
  sub_6F194(v5, &qword_201E10);
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_EF2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_F12B0();
  sub_F1480();
  if (v16[161])
  {
    uint64_t v17 = (void *)swift_task_alloc();
    v16[163] = v17;
    *uint64_t v17 = v16;
    v17[1] = sub_EF4DC;
    sub_4EA7C();
    return sub_EBD3C();
  }
  else
  {
    uint64_t v20 = (void (*)(uint64_t))v16[156];
    sub_A340();
    uint64_t v21 = sub_470B8();
    v20(v21);
    char v22 = (void *)sub_1AC7F0();
    os_log_type_t v23 = sub_1ACF60();
    if (sub_29300(v23))
    {
      uint64_t v24 = (_WORD *)sub_292A0();
      sub_29368(v24);
      sub_A7FC(&def_342E4, v25, v26, "Didn't get response from spotting save");
      sub_A1F0();
    }
    int v27 = (void (*)(uint64_t, uint64_t))v16[158];
    uint64_t v28 = v16[137];
    uint64_t v29 = v16[133];
    uint64_t v30 = v16[132];

    v27(v28, v29);
    sub_1AC320();
    sub_9B48(v30 + 80, (uint64_t)(v16 + 72));
    sub_9BA4();
    sub_1AB120();
    sub_9BF0((uint64_t)(v16 + 72));
    sub_F1140();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_4EA7C();
    return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t sub_EF4DC()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 1312) = v3;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_EF5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_F12B0();
  sub_F1480();
  uint64_t v17 = *(void **)(v16 + 1288);
  sub_1AC350();
  sub_1AB130();
  swift_release();

  sub_F1140();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_4EA7C();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_EF6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_F12B0();
  sub_F1480();
  *(void *)(v16 + 1032) = *(void *)(v16 + 1296);
  swift_errorRetain();
  sub_2694(&qword_206538);
  char v17 = swift_dynamicCast();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 1248);
  uint64_t v19 = *(void *)(v16 + 1240);
  uint64_t v20 = *(void *)(v16 + 1064);
  if (v17)
  {
    uint64_t v21 = *(void *)(v16 + 1088);
    swift_errorRelease();
    sub_A340();
    v18(v21, v19, v20);
    uint64_t v22 = (void *)sub_1AC7F0();
    os_log_type_t v23 = sub_1ACF50();
    if (sub_470C8(v23))
    {
      uint64_t v24 = (_WORD *)sub_292A0();
      sub_475A0(v24);
      sub_471F8(&def_342E4, v25, v26, "Requesting access to HealthKit for Spotting request");
      sub_A1F0();
    }
    int v27 = *(void (**)(uint64_t, uint64_t))(v16 + 1264);
    uint64_t v28 = *(void *)(v16 + 1088);
    uint64_t v29 = *(void *)(v16 + 1064);
    uint64_t v30 = *(void *)(v16 + 1056);

    v27(v28, v29);
    sub_9DE0(v30 + 40, v16 + 320);
    sub_9B48(v30 + 80, v16 + 360);
    uint64_t v31 = sub_1AB1C0();
    sub_47658();
    uint64_t v32 = sub_1AB1B0();
    *(void *)(v16 + 544) = v31;
    *(void *)(v16 + 552) = &protocol witness table for ResponseFactory;
    *(void *)(v16 + 520) = v32;
    type metadata accessor for WellnessCATsSimple();
    sub_F12CC();
    uint64_t v33 = sub_1AC210();
    type metadata accessor for WellnessCATs();
    sub_F12CC();
    uint64_t v34 = sub_F1334();
    *(unsigned char *)(v16 + 312) = 42;
    *(void *)(v16 + 560) = v33;
    *(void *)(v16 + 568) = v34;
    sub_9D40();
    sub_1AB120();
    sub_9D8C(v16 + 312);
    swift_errorRelease();
  }
  else
  {
    uint64_t v35 = *(void *)(v16 + 1080);
    swift_errorRelease();
    sub_A340();
    v18(v35, v19, v20);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v36 = (void *)sub_1AC7F0();
    os_log_type_t v37 = sub_1ACF60();
    if (sub_A3D0(v37))
    {
      a13 = v16 + 1040;
      uint64_t v38 = (_DWORD *)sub_A4B0();
      uint64_t v39 = (void *)sub_B7C18();
      *uint64_t v38 = 138412290;
      swift_errorRetain();
      uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v16 + 1040) = v40;
      sub_1ACFE0();
      *uint64_t v39 = v40;
      swift_errorRelease();
      swift_errorRelease();
      sub_A27C(&def_342E4, v41, v42, "Tring to save spotting record threw %@");
      sub_2694(&qword_201DE0);
      sub_F12E4();
      sub_A1F0();
      sub_A1F0();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v43 = *(void (**)(uint64_t))(v16 + 1264);
    uint64_t v44 = *(void *)(v16 + 1056);

    uint64_t v45 = sub_47968();
    v43(v45);
    sub_1AC320();
    sub_9B48(v44 + 80, v16 + 736);
    sub_9BA4();
    sub_1AB120();
    swift_errorRelease();
    sub_9BF0(v16 + 736);
  }
  sub_F1140();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_4EA7C();
  return v47(v46, v47, v48, v49, v50, v51, v52, v53, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t LogPeriodFlow.execute()()
{
  sub_A364();
  v1[50] = v2;
  v1[51] = v0;
  uint64_t v3 = sub_1AC250();
  sub_53D4(v3);
  v1[52] = sub_A42C();
  uint64_t v4 = sub_1AC800();
  v1[53] = v4;
  sub_A19C(v4);
  v1[54] = v5;
  v1[55] = sub_A220();
  v1[56] = swift_task_alloc();
  uint64_t v6 = sub_2694(&qword_201CC8);
  sub_53D4(v6);
  v1[57] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_EFB54()
{
  uint64_t v1 = *(void **)(v0 + 408);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_2E38(v1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 104))(v2, v3);
  if (sub_72770(v4, (uint64_t)&off_1F4900))
  {
    uint64_t v5 = *(void *)(v0 + 456);
    sub_2E38(*(void **)(v0 + 408), v1[3]);
    uint64_t v6 = sub_F13DC();
    v7(v6);
    BOOL v8 = sub_E9988();
    sub_6F194(v5, &qword_201CC8);
    if (v8)
    {
      sub_2E38(*(void **)(v0 + 408), v1[3]);
      uint64_t v9 = sub_F148C();
      if (v10(v9) == 191)
      {
        swift_task_alloc();
        sub_250E0();
        *(void *)(v0 + 464) = v11;
        *uint64_t v11 = v12;
        v11[1] = sub_EFFA8;
        uint64_t v13 = *(void *)(v0 + 400);
        return sub_EE9A8(v13);
      }
      else
      {
        swift_task_alloc();
        sub_250E0();
        *(void *)(v0 + 472) = v41;
        *uint64_t v41 = v42;
        v41[1] = sub_F00E8;
        uint64_t v43 = *(void *)(v0 + 400);
        return sub_EB208(v43);
      }
    }
    uint64_t v15 = v0 + 184;
    sub_1AC7D0();
    sub_A340();
    uint64_t v28 = sub_5B59C();
    v29(v28);
    uint64_t v30 = (void *)sub_1AC7F0();
    os_log_type_t v31 = sub_1ACF60();
    if (sub_470C8(v31))
    {
      uint64_t v32 = (_WORD *)sub_292A0();
      sub_475A0(v32);
      sub_471F8(&def_342E4, v33, v34, "Only one day is loggable");
      sub_A1F0();
    }

    uint64_t v35 = sub_F1320();
    v36(v35);
    sub_1AC370();
    sub_E988C((uint64_t *)(v0 + 184));
    type metadata accessor for WellnessCATPatternsExecutor(0);
    sub_F12CC();
    uint64_t v37 = sub_F1334();
    *(void *)(v0 + 248) = v30;
    *(void *)(v0 + 256) = &off_1F6840;
    *(void *)(v0 + 224) = v37;
    type metadata accessor for WellnessLoggingCATPatternsExecutor(0);
    sub_F12CC();
    uint64_t v38 = sub_F1334();
    *(void *)(v0 + 288) = v30;
    *(void *)(v0 + 296) = &off_1F8838;
    *(void *)(v0 + 264) = v38;
    type metadata accessor for WellnessQueryingCATPatternsExecutor(0);
    sub_F12CC();
    uint64_t v39 = sub_F1334();
    *(void *)(v0 + 328) = v30;
    *(void *)(v0 + 336) = &off_1F65F0;
    *(void *)(v0 + 304) = v39;
    *(unsigned char *)(v0 + 344) = 0;
  }
  else
  {
    uint64_t v15 = v0 + 16;
    sub_1AC7D0();
    sub_A340();
    uint64_t v16 = sub_5B59C();
    v17(v16);
    uint64_t v18 = (void *)sub_1AC7F0();
    os_log_type_t v19 = sub_1ACF60();
    if (sub_470C8(v19))
    {
      uint64_t v20 = (_WORD *)sub_292A0();
      sub_475A0(v20);
      sub_471F8(&def_342E4, v21, v22, "Trying to save future record, which is not allowed");
      sub_A1F0();
    }

    uint64_t v23 = sub_F1320();
    v24(v23);
    sub_1AC370();
    sub_E988C((uint64_t *)(v0 + 16));
    type metadata accessor for WellnessCATPatternsExecutor(0);
    sub_F12CC();
    uint64_t v25 = sub_F1334();
    *(void *)(v0 + 80) = v18;
    *(void *)(v0 + 88) = &off_1F6840;
    *(void *)(v0 + 56) = v25;
    type metadata accessor for WellnessLoggingCATPatternsExecutor(0);
    sub_F12CC();
    uint64_t v26 = sub_F1334();
    *(void *)(v0 + 120) = v18;
    *(void *)(v0 + 128) = &off_1F8838;
    *(void *)(v0 + 96) = v26;
    type metadata accessor for WellnessQueryingCATPatternsExecutor(0);
    sub_F12CC();
    uint64_t v27 = sub_F1334();
    *(void *)(v0 + 160) = v18;
    *(void *)(v0 + 168) = &off_1F65F0;
    *(void *)(v0 + 136) = v27;
    *(unsigned char *)(v0 + 176) = 0;
  }
  sub_24CE0();
  sub_1AB120();
  sub_24D2C(v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v40();
}

uint64_t sub_EFFA8()
{
  sub_47634();
  sub_F1268();
  uint64_t v1 = *v0;
  sub_E53C();
  void *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_F00E8()
{
  sub_47634();
  sub_F1268();
  uint64_t v1 = *v0;
  sub_E53C();
  void *v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_F0228(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v56 = a5;
  uint64_t v8 = sub_1AAC20();
  uint64_t v54 = *(void *)(v8 - 8);
  uint64_t v55 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2694(&qword_201E20);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_2694(&qword_201E28);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  char v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  os_log_type_t v19 = (char *)&v54 - v18;
  uint64_t v20 = a2[3];
  uint64_t v21 = a2[4];
  sub_2E38(a2, v20);
  __int16 v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 24))(v20, v21);
  if (v22 == 270)
  {
    uint64_t v23 = sub_1AC1E0();
    uint64_t v24 = 1;
  }
  else
  {
    sub_1771BC(v22);
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v23 = sub_1AC1E0();
    uint64_t v24 = 0;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, v24, 1, v23);
  uint64_t v25 = (int *)type metadata accessor for WellnessLoggingMenstruationParameters(0);
  sub_9EA0((uint64_t)v19, a1 + v25[5]);
  sub_1AC100();
  uint64_t v26 = sub_1AC090();
  uint64_t v27 = v25[6];
  swift_release();
  *(void *)(a1 + v27) = v26;
  id v28 = [a4 flow];
  uint64_t v29 = a1 + v25[8];
  *(double *)uint64_t v29 = (double)(uint64_t)v28;
  *(unsigned char *)(v29 + 8) = 0;
  sub_F0F34(v56, (uint64_t)v13, &qword_201E20);
  uint64_t v30 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v30) == 1)
  {
    sub_6F194((uint64_t)v13, &qword_201E20);
    uint64_t v31 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v17, 1, 1, v31);
  }
  else
  {
    id v32 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v33);
    uint64_t v35 = v34;
    [v32 setPunchOutUri:v34];

    id v36 = v32;
    sub_1AAC10();
    uint64_t v37 = sub_1AABE0();
    uint64_t v39 = v38;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v10, v55);
    sub_1949C4(v37, v39, v36);

    id v40 = [v36 dictionary];
    if (v40)
    {
      uint64_t v41 = v40;
      uint64_t v42 = self;
      id v57 = 0;
      id v43 = [v42 dataWithPropertyList:v41 format:200 options:0 error:&v57];
      id v44 = v57;
      if (v43)
      {
        uint64_t v45 = sub_1AAB30();
        unint64_t v47 = v46;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v45, v47);
        swift_bridgeObjectRelease();
        uint64_t v48 = sub_1AC1E0();
        uint64_t v49 = (uint64_t)v17;
        uint64_t v50 = 0;
      }
      else
      {
        uint64_t v52 = v44;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v48 = sub_1AC1E0();
        uint64_t v49 = (uint64_t)v17;
        uint64_t v50 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v49, v50, 1, v48);
    }
    else
    {
      uint64_t v51 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v17, 1, 1, v51);
    }
    (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8))(v13, v30);
  }
  return sub_9EA0((uint64_t)v17, a1);
}

uint64_t sub_F071C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_E230;
  return LogPeriodFlow.execute()();
}

uint64_t destroy for LogPeriodFlow(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);
  swift_unknownObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for LogPeriodFlow(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  long long v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  long long v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(_WORD *)(a1 + 249) = *(_WORD *)(a2 + 249);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LogPeriodFlow(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(unsigned char *)(a1 + 249) = *(unsigned char *)(a2 + 249);
  *(unsigned char *)(a1 + 250) = *(unsigned char *)(a2 + 250);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for LogPeriodFlow(uint64_t a1, uint64_t a2)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  uint64_t v7 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v7;
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(_WORD *)(a1 + 249) = *(_WORD *)(a2 + 249);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LogPeriodFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 264))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LogPeriodFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 264) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 264) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LogPeriodFlow()
{
  return &type metadata for LogPeriodFlow;
}

uint64_t sub_F0CB0(uint64_t a1)
{
  return sub_F0228(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_F0CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_F14A0();
  v4(v3);
  sub_A5C0();
  uint64_t v5 = sub_CD4DC();
  v6(v5);
  return a2;
}

uint64_t sub_F0D10(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_A5C0();
  sub_E558();
  v3();
  return a1;
}

uint64_t sub_F0D68()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_F0DA0()
{
  sub_A364();
  uint64_t v3 = v2;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v1 + 16) = v4;
  *long long v4 = v5;
  v4[1] = sub_E230;
  return sub_45618(v3, v0 + 16);
}

unint64_t sub_F0E38()
{
  unint64_t result = qword_206568;
  if (!qword_206568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206568);
  }
  return result;
}

uint64_t sub_F0E84(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_F0ED0(uint64_t a1, uint64_t a2)
{
  sub_2694(&qword_206538);
  uint64_t v4 = swift_allocError();
  *uint64_t v5 = a2;

  return _swift_continuation_throwingResumeWithError(a1, v4);
}

uint64_t sub_F0F34(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2694(a3);
  sub_A5C0();
  uint64_t v4 = sub_CD4DC();
  v5(v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for SpottingErrors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0xF1024);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpottingErrors()
{
  return &type metadata for SpottingErrors;
}

unint64_t sub_F1060()
{
  unint64_t result = qword_206580;
  if (!qword_206580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206580);
  }
  return result;
}

uint64_t sub_F10AC()
{
  uint64_t v3 = *(void *)(v0 + 1200);
  *(void *)(v1 - 96) = *(void *)(v0 + 1208);
  *(void *)(v1 - 88) = v3;
  return swift_task_dealloc();
}

uint64_t sub_F1140()
{
  return swift_task_dealloc();
}

uint64_t sub_F1190()
{
  return type metadata accessor for LogPeriodIntentResponse(0);
}

uint64_t sub_F11EC()
{
  return v0;
}

void sub_F1204()
{
  uint64_t v4 = *(void *)(v1 + 1456);
  *(void *)(v2 - 96) = *(void *)(v1 + 1432);
  *(void *)(v2 - 88) = v4;
}

uint64_t sub_F1240()
{
  return swift_task_dealloc();
}

uint64_t sub_F1280()
{
  return v0;
}

uint64_t sub_F1298()
{
  return v0;
}

uint64_t sub_F12CC()
{
  return sub_1AC240();
}

uint64_t sub_F12E4()
{
  return swift_arrayDestroy();
}

uint64_t sub_F1300()
{
  return v0;
}

uint64_t sub_F1320()
{
  return v0;
}

uint64_t sub_F1334()
{
  return sub_1AC1A0();
}

uint64_t sub_F134C()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, v0);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v0);
}

uint64_t sub_F1384()
{
  return v0;
}

uint64_t sub_F1390()
{
  return v0;
}

uint64_t sub_F13A8()
{
  return sub_1ACFE0();
}

uint64_t sub_F13DC()
{
  return v0;
}

uint64_t sub_F13F4()
{
  return sub_1ACFE0();
}

uint64_t sub_F1418()
{
  return v0;
}

uint64_t sub_F1430()
{
  return v0;
}

uint64_t sub_F1444()
{
  return v0;
}

uint64_t sub_F1458@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_F146C()
{
  return v0;
}

uint64_t sub_F148C()
{
  return v0;
}

uint64_t sub_F14A0()
{
  return 0;
}

void sub_F14AC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

uint64_t sub_F14CC(char a1)
{
  return *(void *)&aThisweekthismo[8 * a1];
}

uint64_t sub_F14EC()
{
  sub_A364();
  sub_E510();
  v0[14] = v1;
  v0[15] = v2;
  uint64_t v3 = sub_1AB4B0();
  v0[16] = v3;
  sub_A19C(v3);
  v0[17] = v4;
  v0[18] = sub_A42C();
  uint64_t v5 = sub_1AB420();
  v0[19] = v5;
  sub_A19C(v5);
  v0[20] = v6;
  v0[21] = sub_A42C();
  uint64_t v7 = sub_1AB450();
  v0[22] = v7;
  sub_A19C(v7);
  v0[23] = v8;
  v0[24] = sub_A42C();
  uint64_t v9 = sub_1AB3F0();
  v0[25] = v9;
  sub_A19C(v9);
  v0[26] = v10;
  v0[27] = sub_A42C();
  uint64_t v11 = sub_1AC800();
  v0[28] = v11;
  sub_A19C(v11);
  v0[29] = v12;
  v0[30] = sub_A220();
  v0[31] = swift_task_alloc();
  v0[32] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_F1654()
{
  uint64_t v66 = v0;
  uint64_t v1 = v0 + 14;
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[32];
  uint64_t v5 = v0[28];
  uint64_t v4 = v0[29];
  uint64_t v6 = v0[26];
  uint64_t v7 = v1[13];
  uint64_t v8 = v1[11];
  uint64_t v9 = sub_1AC7D0();
  sub_A340();
  uint64_t v63 = *(void (**)(void))(v4 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v63)(v3, v9, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v2, v8);
  uint64_t v10 = sub_1AC7F0();
  os_log_type_t v11 = sub_1ACF50();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v62 = v64[29];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = sub_1AD3E0();
    v64[12] = sub_4A278(v13, v14, &v65);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    sub_E468();
    uint64_t v15 = sub_1AD2C0();
    v64[13] = sub_4A278(v15, v16, &v65);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_E558();
    v17();
    _os_log_impl(&def_342E4, v10, v11, "%s received input: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v18 = *(void (**)(void))(v62 + 8);
    sub_E530();
    v18();
  }
  else
  {
    uint64_t v19 = v64[32];
    uint64_t v20 = v64[28];
    uint64_t v21 = v64[29];
    sub_E530();
    v22();

    uint64_t v18 = *(void (**)(void))(v21 + 8);
    ((void (*)(uint64_t, uint64_t))v18)(v19, v20);
  }
  uint64_t v24 = v64[20];
  uint64_t v23 = v64[21];
  uint64_t v25 = v64[19];
  sub_1AB3E0();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v24 + 88))(v23, v25) != enum case for Parse.uso(_:)) {
    goto LABEL_20;
  }
  uint64_t v27 = v64[23];
  uint64_t v26 = v64[24];
  uint64_t v29 = v64[21];
  uint64_t v28 = v64[22];
  (*(void (**)(uint64_t, void))(v64[20] + 96))(v29, v64[19]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v26, v29, v28);
  sub_1AB440();
  uint64_t v30 = sub_141EE8();
  sub_5B530();
  v31();
  if (!v30)
  {
LABEL_20:
    sub_E530();
    v48();
    sub_A340();
    sub_E524();
    v63();
    uint64_t v49 = sub_1AC7F0();
    os_log_type_t v50 = sub_1ACF60();
    if (os_log_type_enabled(v49, v50))
    {
      id v44 = v64;
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136315138;
      uint64_t v52 = sub_1AD3E0();
      v64[11] = sub_4A278(v52, v53, &v65);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v49, v50, "%s received unsupported input", v51, 0xCu);
      uint64_t v54 = 1;
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      sub_E530();
      v55();
      uint64_t v37 = 0;
      uint64_t v47 = 0;
      goto LABEL_24;
    }

    sub_E530();
    v18();
    uint64_t v37 = 0;
    uint64_t v47 = 0;
    id v44 = v64;
    goto LABEL_23;
  }
  swift_retain();
  unint64_t v32 = (unint64_t)sub_D8D30();
  unint64_t v33 = v32;
  if (v32 >> 62) {
    uint64_t v34 = sub_1AD170();
  }
  else {
    uint64_t v34 = *(void *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFFF8));
  }
  if (v34 < 2) {
    goto LABEL_16;
  }
  unint64_t v35 = v33 & 0xC000000000000001;
  sub_4AA30(0, (v33 & 0xC000000000000001) == 0, v33);
  if ((v33 & 0xC000000000000001) != 0) {
    sub_1AD0A0();
  }
  else {
    swift_retain();
  }
  uint64_t v36 = sub_1ABA10();
  swift_release();
  if (!v36 || (v37 = sub_1AB6B0(), char v39 = v38, swift_release(), (v39 & 1) != 0))
  {
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    sub_A340();
    sub_E524();
    v40();
    uint64_t v41 = sub_1AC7F0();
    os_log_type_t v42 = sub_1ACF60();
    if (os_log_type_enabled(v41, v42))
    {
      id v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v43 = 0;
      _os_log_impl(&def_342E4, v41, v42, "Failed to populate LogBloodPressureIntent: missing systolic/diastolic values", v43, 2u);
      sub_A1F0();
    }
    id v44 = v64;
    swift_release_n();

    sub_E530();
    v45();
    sub_5B530();
    v46();
    uint64_t v37 = 0;
    uint64_t v47 = 0;
LABEL_23:
    uint64_t v54 = 1;
    goto LABEL_24;
  }
  sub_4AA30(1, v35 == 0, v33);
  if (v35) {
    sub_1AD0A0();
  }
  else {
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v58 = sub_1ABA10();
  swift_release();
  if (!v58) {
    goto LABEL_17;
  }
  uint64_t v47 = sub_1AB6B0();
  char v60 = v59;
  swift_release();
  if (v60) {
    goto LABEL_17;
  }
  sub_E530();
  v61();
  swift_release_n();
  id v44 = v64;
  uint64_t v54 = 0;
LABEL_24:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v44[1];
  return v56(v37, v47, v54);
}

uint64_t sub_F1E00()
{
  sub_E510();
  sub_1AB3F0();
  sub_52C4();
  __chkstk_darwin(v0);
  sub_E548();
  uint64_t v1 = sub_1AC800();
  sub_52C4();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_E548();
  uint64_t v7 = v6 - v5;
  sub_1AC7D0();
  sub_A340();
  uint64_t v22 = v1;
  sub_E524();
  v8();
  sub_E524();
  v9();
  uint64_t v10 = sub_1AC7F0();
  os_log_type_t v11 = sub_1ACF50();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = sub_1AD3E0();
    sub_4A278(v13, v14, &v23);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    sub_E468();
    uint64_t v15 = sub_1AD2C0();
    sub_4A278(v15, v16, &v23);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v17 = sub_7F404();
    v18(v17);
    _os_log_impl(&def_342E4, v10, v11, "%s handling input: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    uint64_t v19 = sub_7F404();
    v20(v19);
  }

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v22);
  return sub_1AB0B0();
}

uint64_t sub_F20B0()
{
  sub_A364();
  v1[7] = v2;
  v1[8] = v0;
  sub_2694(&qword_202008);
  v1[9] = sub_A42C();
  uint64_t v3 = sub_1AB0A0();
  v1[10] = v3;
  sub_A19C(v3);
  v1[11] = v4;
  v1[12] = sub_A220();
  v1[13] = swift_task_alloc();
  uint64_t v5 = sub_1AB3D0();
  v1[14] = v5;
  sub_A19C(v5);
  v1[15] = v6;
  v1[16] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_F21A0()
{
  sub_47634();
  sub_2E38((void *)(*(void *)(v0 + 64) + 104), *(void *)(*(void *)(v0 + 64) + 128));
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_206F20 + dword_206F20);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  void *v1 = v0;
  v1[1] = sub_F226C;
  return v3();
}

uint64_t sub_F226C()
{
  sub_47634();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 144) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    return v6();
  }
  else
  {
    sub_A4F0();
    return _swift_task_switch(v8, v9, v10);
  }
}

uint64_t sub_F23A0()
{
  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  sub_1AB080();
  sub_E524();
  v7();
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1AB3B0();
  sub_1AB390();
  sub_F2E78(v5);
  uint64_t v8 = sub_1AB190();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, 0, 1, v8);
  sub_1AB3A0();
  id v9 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_E3FC(v6 + 184, (uint64_t)(v0 + 2));
  uint64_t v10 = v0[5];
  uint64_t v11 = v0[6];
  sub_2E38(v0 + 2, v10);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[19] = v12;
  void *v12 = v0;
  v12[1] = sub_F2574;
  uint64_t v13 = v0[18];
  uint64_t v14 = v0[16];
  uint64_t v15 = v0[7];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v15, v13, v14, v10, v11);
}

uint64_t sub_F2574()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 160) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_F2654()
{
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 112);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_F2724()
{
  sub_47634();

  uint64_t v1 = sub_E570();
  v2(v1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v3();
}

uint64_t sub_F27CC()
{
  sub_A364();
  v1[13] = v2;
  v1[14] = v0;
  v1[12] = v3;
  sub_E510();
  v1[15] = v4;
  uint64_t v5 = sub_1AB0A0();
  v1[16] = v5;
  sub_A19C(v5);
  v1[17] = v6;
  v1[18] = sub_A220();
  v1[19] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v1[20] = v7;
  sub_A19C(v7);
  v1[21] = v8;
  v1[22] = sub_A42C();
  uint64_t v9 = sub_1AC800();
  v1[23] = v9;
  sub_A19C(v9);
  v1[24] = v10;
  v1[25] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_F28D0()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0;
  uint64_t v4 = v0 + 24;
  uint64_t v3 = v0[24];
  uint64_t v2 = v4[1];
  uint64_t v5 = v1[23];
  uint64_t v6 = sub_1AC7D0();
  sub_A340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v5);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = sub_1AC7F0();
  os_log_type_t v8 = sub_1ACF50();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = sub_1AD3E0();
    v1[10] = sub_4A278(v11, v12, &v20);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v1[11] = v13;
    sub_1ACFE0();
    *uint64_t v10 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_342E4, v7, v8, "%s makeErrorResponse called with error: %@", (uint8_t *)v9, 0x16u);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    sub_E558();
    v14();
  }
  else
  {
    uint64_t v16 = v1[24];
    uint64_t v15 = v1[25];
    uint64_t v17 = v1[23];
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  sub_2E38((void *)(v1[14] + 64), *(void *)(v1[14] + 88));
  uint64_t v18 = (void *)swift_task_alloc();
  v1[26] = v18;
  *uint64_t v18 = v1;
  v18[1] = sub_F2BB4;
  return sub_9D67C();
}

uint64_t sub_F2BB4()
{
  sub_47634();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 216) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    return v6();
  }
  else
  {
    sub_A4F0();
    return _swift_task_switch(v8, v9, v10);
  }
}

uint64_t sub_F2CE8()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v2 = v0[14];
  sub_1AB090();
  sub_E524();
  v3();
  sub_1AB370();
  sub_5B530();
  v4();
  sub_1AB390();
  id v5 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_E3FC(v2 + 184, (uint64_t)(v0 + 2));
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  sub_2E38(v0 + 2, v6);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[28] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_BE1AC;
  uint64_t v9 = v0[27];
  uint64_t v10 = v0[22];
  uint64_t v11 = v0[12];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v11, v9, v10, v6, v7);
}

uint64_t sub_F2E78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v63 = a1;
  uint64_t v1 = sub_1AC800();
  sub_52C4();
  uint64_t v64 = v2;
  __chkstk_darwin(v3);
  sub_A314();
  uint64_t v6 = v4 - v5;
  __chkstk_darwin(v7);
  uint64_t v62 = (char *)v52 - v8;
  sub_1AB190();
  sub_52C4();
  uint64_t v53 = v10;
  uint64_t v54 = v9;
  __chkstk_darwin(v9);
  sub_E548();
  uint64_t v13 = v12 - v11;
  sub_1AB580();
  sub_52C4();
  uint64_t v60 = v15;
  uint64_t v61 = v14;
  __chkstk_darwin(v14);
  sub_E548();
  uint64_t v57 = v17 - v16;
  sub_1AB540();
  sub_52C4();
  uint64_t v58 = v19;
  uint64_t v59 = v18;
  __chkstk_darwin(v18);
  sub_A314();
  __chkstk_darwin(v20);
  uint64_t v21 = sub_2694(&qword_201FF8);
  __chkstk_darwin(v21 - 8);
  sub_E548();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = sub_1AB490();
  sub_52C4();
  uint64_t v56 = v26;
  __chkstk_darwin(v27);
  sub_A314();
  __chkstk_darwin(v28);
  uint64_t v55 = (char *)v52 - v29;
  sub_1ABB90();
  uint64_t v30 = sub_1ABB70();
  sub_1AB5F0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v24, 1, v25) == 1)
  {
    sub_E39C(v24);
    sub_1AC7E0();
    sub_A340();
    uint64_t v31 = v64;
    sub_E524();
    v32();
    unint64_t v33 = sub_1AC7F0();
    os_log_type_t v34 = sub_1ACF60();
    if (os_log_type_enabled(v33, v34))
    {
      unint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v35 = 0;
      _os_log_impl(&def_342E4, v33, v34, "Failed to create protobuf UsoGraph from UsoTask", v35, 2u);
      sub_A1F0();
    }

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v6, v1);
    sub_1AB180();
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v55, v24, v25);
    sub_1AB530();
    sub_E524();
    v37();
    sub_1AB520();
    sub_1AB570();
    sub_E524();
    v38();
    sub_1AB560();
    sub_1AB180();
    sub_2694(&qword_202000);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1ADCF0;
    sub_E524();
    v39();
    sub_1AB170();
    sub_1AC7E0();
    sub_A340();
    uint64_t v40 = v64;
    sub_E524();
    v41();
    swift_retain_n();
    os_log_type_t v42 = sub_1AC7F0();
    os_log_type_t v43 = sub_1ACF50();
    if (os_log_type_enabled(v42, v43))
    {
      id v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      v52[1] = v1;
      uint64_t v65 = v30;
      uint64_t v66 = v45;
      *(_DWORD *)id v44 = 136315138;
      v52[0] = v44 + 4;
      sub_1ABA60();
      swift_retain();
      uint64_t v46 = sub_1ACE00();
      uint64_t v65 = sub_4A278(v46, v47, &v66);
      sub_1ACFE0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v42, v43, "Built nlContextUpdate with SystemPrompted for task: %s", v44, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();
      swift_release();

      sub_E558();
      v48();
    }
    else
    {
      swift_release_n();

      (*(void (**)(char *, uint64_t))(v40 + 8))(v62, v1);
    }
    sub_E558();
    v49();
    sub_E558();
    v50();
    sub_E558();
    v51();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v63, v13, v54);
  }
}

uint64_t type metadata accessor for LogBloodPressurePromptStartegy()
{
  return self;
}

uint64_t sub_F34F8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  void *v2 = v1;
  v2[1] = sub_F3590;
  return sub_F14EC();
}

uint64_t sub_F3590(uint64_t a1, uint64_t a2, char a3)
{
  sub_A1B4();
  uint64_t v9 = v8;
  sub_E53C();
  *uint64_t v10 = v9;
  uint64_t v11 = *v4;
  sub_E53C();
  void *v12 = v11;
  swift_task_dealloc();
  if (!v3)
  {
    uint64_t v13 = *(void *)(v9 + 16);
    *(void *)uint64_t v13 = a1;
    *(void *)(v13 + 8) = a2;
    *(unsigned char *)(v13 + 16) = a3 & 1;
  }
  uint64_t v14 = *(uint64_t (**)(void))(v11 + 8);
  return v14();
}

uint64_t sub_F368C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_E50C;
  return sub_F20B0();
}

uint64_t sub_F3724()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_E50C;
  return sub_F27CC();
}

uint64_t sub_F37CC@<X0>(long long *a1@<X0>, long long *a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_1AC250();
  uint64_t v11 = sub_53D4(v10);
  __chkstk_darwin(v11);
  sub_24D80(a1, a5);
  sub_24D80(a2, a5 + 40);
  memcpy((void *)(a5 + 80), a3, 0xA0uLL);
  *(void *)(a5 + 240) = a4;
  *(unsigned char *)(a5 + 248) = 0;
  type metadata accessor for WellnessCATsSimple();
  sub_A6A4();
  *(void *)(a5 + 256) = sub_1AC210();
  type metadata accessor for WellnessQueryingCATsSimple();
  sub_A6A4();
  uint64_t result = sub_1AC210();
  *(void *)(a5 + 264) = result;
  *(unsigned char *)(a5 + 272) = 60;
  return result;
}

uint64_t destroy for GetSleepAnalysisFlow(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);
  swift_unknownObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for GetSleepAnalysisFlow(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  long long v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  long long v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  uint64_t v10 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v10;
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GetSleepAnalysisFlow(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_retain();
  swift_release();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  return a1;
}

void *initializeWithTake for GetSleepAnalysisFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x111uLL);
}

uint64_t assignWithTake for GetSleepAnalysisFlow(uint64_t a1, uint64_t a2)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  uint64_t v7 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v7;
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_release();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_release();
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetSleepAnalysisFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 273))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GetSleepAnalysisFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 272) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 273) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 273) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GetSleepAnalysisFlow()
{
  return &type metadata for GetSleepAnalysisFlow;
}

uint64_t sub_F3E04()
{
  sub_B6EF8();

  return sub_1AAF80();
}

uint64_t sub_F3E58()
{
  sub_A364();
  v1[108] = v0;
  v1[107] = v2;
  uint64_t v3 = type metadata accessor for UnavailableDataFlow();
  v1[109] = v3;
  sub_53D4(v3);
  v1[110] = sub_A42C();
  uint64_t v4 = sub_2694(&qword_201CC8);
  sub_53D4(v4);
  v1[111] = sub_A220();
  v1[112] = swift_task_alloc();
  uint64_t v5 = sub_1AC250();
  sub_53D4(v5);
  v1[113] = sub_A42C();
  uint64_t v6 = sub_1AC800();
  v1[114] = v6;
  sub_A19C(v6);
  v1[115] = v7;
  v1[116] = sub_A220();
  v1[117] = swift_task_alloc();
  uint64_t v8 = sub_1AAA10();
  v1[118] = v8;
  sub_A19C(v8);
  v1[119] = v9;
  v1[120] = sub_A42C();
  uint64_t v10 = sub_2694(&qword_201E10);
  sub_53D4(v10);
  v1[121] = sub_A220();
  v1[122] = swift_task_alloc();
  v1[123] = swift_task_alloc();
  v1[124] = swift_task_alloc();
  uint64_t v11 = sub_1AABD0();
  v1[125] = v11;
  sub_A19C(v11);
  v1[126] = v12;
  v1[127] = sub_A220();
  v1[128] = swift_task_alloc();
  v1[129] = swift_task_alloc();
  v1[130] = swift_task_alloc();
  v1[131] = swift_task_alloc();
  v1[132] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_F404C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  uint64_t v19 = v18[108];
  id v20 = sub_F5328();
  v18[133] = v20;
  sub_1AC3B0();
  sub_2E38((void *)(v19 + 40), *(void *)(v19 + 64));
  uint64_t v21 = sub_47968();
  v22(v21);
  uint64_t v23 = (void *)sub_A7C4();
  sub_2E38(v23, v24);
  sub_47968();
  LOBYTE(v19) = sub_1AB050();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v18 + 93));
  if ((v19 & 1) == 0)
  {
LABEL_13:
    uint64_t v51 = v18[115];
    v18[134] = sub_1AC7D0();
    sub_A340();
    v18[135] = *(void *)(v51 + 16);
    v18[136] = (v51 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v52 = sub_FD898();
    v53(v52);
    id v54 = v20;
    uint64_t v55 = (void *)sub_1AC7F0();
    os_log_type_t v56 = sub_1ACF50();
    if (sub_A3D0(v56))
    {
      uint64_t v57 = (_DWORD *)sub_A4B0();
      uint64_t v58 = (void *)swift_slowAlloc();
      *uint64_t v57 = 138412290;
      v18[105] = v54;
      id v59 = v54;
      sub_1ACFE0();
      *uint64_t v58 = v54;

      sub_A27C(&def_342E4, v60, v61, "Trying to fetch sleep data with intent: %@");
      sub_2694(&qword_201DE0);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();
    }
    else
    {

      uint64_t v55 = v54;
    }
    uint64_t v62 = v18[115];
    uint64_t v63 = v18[108];

    v18[137] = *(void *)(v62 + 8);
    v18[138] = (v62 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_F139C();
    v64();
    uint64_t v65 = *(void **)(v63 + 240);
    v18[2] = v18;
    v18[7] = v18 + 106;
    v18[3] = sub_F4670;
    v18[87] = swift_continuation_init();
    v18[83] = _NSConcreteStackBlock;
    v18[84] = 0x40000000;
    v18[85] = sub_6AA8;
    v18[86] = &unk_1F7930;
    [v65 handleGetSleepAnalysis:v54 completion:v18 + 83];
    sub_6F544();
    return _swift_continuation_await(v66);
  }
  id v25 = [v20 start];
  if (!v25)
  {
    sub_A708(v18[124], v26, v27, v18[125]);
    goto LABEL_9;
  }
  uint64_t v28 = v25;
  uint64_t v29 = v18[126];
  uint64_t v30 = v18[125];
  uint64_t v31 = v18[124];
  sub_1AABB0();

  unint64_t v32 = *(void (**)(void))(v29 + 32);
  sub_FD34C();
  v32();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v31, 0, 1, v30);
  sub_A208(v31, 1, v30);
  if (v33)
  {
LABEL_9:
    uint64_t v48 = v18[124];
LABEL_12:
    sub_5B028(v48, &qword_201E10);
    goto LABEL_13;
  }
  sub_FD34C();
  v32();
  id v34 = [v20 end];
  if (!v34)
  {
    sub_A708(v18[123], v35, v36, v18[125]);
    goto LABEL_11;
  }
  uint64_t v37 = v34;
  uint64_t v38 = v18[125];
  uint64_t v39 = v18[123];
  sub_1AABB0();

  sub_FD34C();
  v32();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v39, 0, 1, v38);
  sub_A208(v39, 1, v38);
  if (v33)
  {
LABEL_11:
    uint64_t v49 = v18[123];
    sub_E530();
    v50();
    uint64_t v48 = v49;
    goto LABEL_12;
  }
  uint64_t v79 = v18[131];
  uint64_t v80 = v18[132];
  uint64_t v40 = v18[130];
  uint64_t v41 = v18[129];
  uint64_t v42 = v18[126];
  uint64_t v43 = v18[125];
  uint64_t v44 = v18[120];
  uint64_t v45 = v18[119];
  uint64_t v81 = v18[118];
  sub_FD34C();
  v32();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  v46(v79, v80, v43);
  v46(v41, v40, v43);
  sub_1AA9D0();
  LOBYTE(v42) = sub_1AC670();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v81);
  if (v42)
  {
    unint64_t v47 = *(void (**)(void))(v18[126] + 8);
    sub_47814();
    v47();
    sub_B7B9C();
    sub_47814();
    v47();
    goto LABEL_13;
  }
  uint64_t v68 = v18[126];
  sub_E344C(v18 + 43);
  sub_E3600();
  sub_1AB120();

  sub_FCBA4((uint64_t)(v18 + 43));
  uint64_t v69 = *(void (**)(void))(v68 + 8);
  sub_FD430();
  v69();
  sub_FD430();
  v69();
  sub_FD200();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_6F544();
  return v71(v70, v71, v72, v73, v74, v75, v76, v77, a9, a10, a11, a12, v79, v80, v81, a16, a17, a18);
}

uint64_t sub_F4670()
{
  sub_A364();
  uint64_t v1 = *v0;
  sub_E53C();
  void *v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_F4744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 1080);
  uint64_t v20 = *(void *)(v18 + 1072);
  uint64_t v21 = *(void *)(v18 + 928);
  uint64_t v22 = *(void *)(v18 + 912);
  uint64_t v23 = *(void **)(v18 + 848);
  *(void *)(v18 + 1112) = v23;
  sub_A340();
  v19(v21, v20, v22);
  uint64_t v24 = v23;
  id v25 = (void *)sub_1AC7F0();
  os_log_type_t v26 = sub_1ACF50();
  if (sub_A3D0(v26))
  {
    a15 = (void *)(v18 + 832);
    uint64_t v27 = (_DWORD *)sub_A4B0();
    uint64_t v28 = (void *)swift_slowAlloc();
    _DWORD *v27 = 138412290;
    *(void *)(v18 + 832) = v24;
    uint64_t v29 = v24;
    sub_1ACFE0();
    void *v28 = v24;

    sub_A27C(&def_342E4, v30, v31, "Received response: %@");
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
  }
  uint64_t v32 = (*(uint64_t (**)(void, void))(v18 + 1096))(*(void *)(v18 + 928), *(void *)(v18 + 912));
  uint64_t v33 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v24)))(v32);
  if (v33 != 4)
  {
    if (v33 != 102)
    {
      if (v33 == 101)
      {
        id v34 = *(void **)(v18 + 1064);
        uint64_t v35 = *(void *)(v18 + 864);
        sub_1AC390();
        char v36 = *(unsigned char *)(v35 + 272);
        sub_9DE0(v35 + 40, v18 + 88);
        sub_9B48(v35 + 80, v18 + 128);
        uint64_t v37 = sub_1AB1C0();
        sub_47658();
        uint64_t v38 = sub_1AB1B0();
        *(void *)(v18 + 312) = v37;
        *(void *)(v18 + 320) = &protocol witness table for ResponseFactory;
        *(void *)(v18 + 288) = v38;
        type metadata accessor for WellnessCATsSimple();
        sub_A6A4();
        uint64_t v39 = sub_1AC210();
        type metadata accessor for WellnessCATs();
        sub_A6A4();
        uint64_t v40 = sub_1AC1A0();
        *(unsigned char *)(v18 + 80) = v36;
        *(void *)(v18 + 328) = v39;
        *(void *)(v18 + 336) = v40;
        sub_9D40();
        sub_1AB120();

        sub_9D8C(v18 + 80);
      }
      else
      {
        uint64_t v72 = *(void **)(v18 + 1064);
        uint64_t v73 = *(void *)(v18 + 864);
        sub_1AC320();
        sub_9B48(v73 + 80, v18 + 504);
        sub_9BA4();
        sub_1AB120();

        sub_9BF0(v18 + 504);
      }
LABEL_27:
      sub_FD200();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_E564();
      sub_6F544();
      return v91(v90, v91, v92, v93, v94, v95, v96, v97, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
    }
    a15 = v24;
    uint64_t v45 = *(void **)(v18 + 1064);
    uint64_t v46 = *(void *)(v18 + 896);
    sub_1AC320();
    sub_FD5BC(v46);
    id v47 = [v45 start];
    if (v47)
    {
      os_log_type_t v50 = v47;
      uint64_t v51 = *(void *)(v18 + 1008);
      uint64_t v52 = *(void *)(v18 + 1000);
      uint64_t v53 = *(void *)(v18 + 976);
      sub_1AABB0();

      id v54 = *(void (**)(void))(v51 + 32);
      sub_FD34C();
      v54();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v53, 0, 1, v52);
      sub_A208(v53, 1, v52);
      if (!v55)
      {
        os_log_type_t v56 = *(void **)(v18 + 1064);
        sub_FD34C();
        v54();
        id v57 = [v56 end];
        if (v57)
        {
          uint64_t v60 = v57;
          uint64_t v61 = *(void *)(v18 + 1000);
          uint64_t v62 = *(void *)(v18 + 968);
          sub_1AABB0();

          sub_FD34C();
          v54();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v62, 0, 1, v61);
          sub_A208(v62, 1, v61);
          if (!v55)
          {
            uint64_t v63 = *(void *)(v18 + 1008);
            a13 = *(void *)(v18 + 896);
            a14 = *(void *)(v18 + 944);
            uint64_t v64 = *(void *)(v18 + 888);
            sub_FD34C();
            v54();
            uint64_t v65 = *(void (**)(uint64_t))(v63 + 16);
            uint64_t v66 = sub_B7B9C();
            v65(v66);
            uint64_t v67 = sub_4788C();
            v65(v67);
            sub_F1384();
            sub_1AA9D0();
            uint64_t v68 = *(void (**)(void))(v63 + 8);
            sub_FD430();
            v68();
            sub_FD430();
            v68();
            sub_5B028(a13, &qword_201CC8);
            uint64_t v69 = sub_FD67C();
            _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v69, v70, v71, a14);
            sub_FCE44(v64, a13, &qword_201CC8);
LABEL_26:
            uint64_t v79 = *(void **)(v18 + 1064);
            uint64_t v80 = *(void *)(v18 + 896);
            uint64_t v81 = *(unsigned char **)(v18 + 880);
            uint64_t v82 = *(int **)(v18 + 872);
            uint64_t v83 = *(void *)(v18 + 864);
            char v84 = *(unsigned char *)(v83 + 272);
            sub_FCBF8(v80, (uint64_t)&v81[v82[5]], &qword_201CC8);
            sub_9DE0(v83 + 40, (uint64_t)&v81[v82[6]]);
            sub_9B48(v83 + 80, (uint64_t)&v81[v82[7]]);
            uint64_t v85 = sub_1AB1C0();
            sub_47658();
            uint64_t v86 = sub_1AB1B0();
            uint64_t v87 = (uint64_t *)&v81[v82[8]];
            v87[3] = v85;
            v87[4] = (uint64_t)&protocol witness table for ResponseFactory;
            *uint64_t v87 = v86;
            type metadata accessor for WellnessCATsSimple();
            sub_1AC240();
            uint64_t v88 = sub_1AC210();
            type metadata accessor for WellnessCATs();
            sub_1AC240();
            uint64_t v89 = sub_1AC1A0();
            *uint64_t v81 = v84;
            *(void *)&v81[v82[9]] = v88;
            *(void *)&v81[v82[10]] = v89;
            sub_FCE94(&qword_201DF0, (void (*)(uint64_t))type metadata accessor for UnavailableDataFlow);
            sub_FD8D4();
            sub_1AB120();

            sub_FCC90((uint64_t)v81, (void (*)(void))type metadata accessor for UnavailableDataFlow);
            sub_5B028(v80, &qword_201CC8);
            goto LABEL_27;
          }
        }
        else
        {
          sub_A708(*(void *)(v18 + 968), v58, v59, *(void *)(v18 + 1000));
        }
        uint64_t v77 = *(void *)(v18 + 968);
        sub_E530();
        v78();
        uint64_t v76 = v77;
LABEL_25:
        sub_5B028(v76, &qword_201E10);
        goto LABEL_26;
      }
    }
    else
    {
      sub_A708(*(void *)(v18 + 976), v48, v49, *(void *)(v18 + 1000));
    }
    uint64_t v76 = *(void *)(v18 + 976);
    goto LABEL_25;
  }
  *(void *)(v18 + 728) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v18 + 736) = sub_45E30();
  *(unsigned char *)(v18 + 704) = 4;
  char v41 = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v18 + 704);
  if (v41)
  {
    uint64_t v42 = (void *)swift_task_alloc();
    *(void *)(v18 + 1120) = v42;
    *uint64_t v42 = v18;
    v42[1] = sub_F4F70;
    sub_FD5A4();
    sub_6F544();
    return sub_F5804();
  }
  else
  {
    uint64_t v74 = (void *)swift_task_alloc();
    *(void *)(v18 + 1136) = v74;
    *uint64_t v74 = v18;
    v74[1] = sub_F514C;
    sub_FD5A4();
    sub_6F544();
    return sub_F9FA8();
  }
}

uint64_t sub_F4F70()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 1128) = v3;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_F5040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  sub_FD530();
  sub_1AC350();
  sub_1AB130();
  swift_release_n();

  sub_FD200();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_6F544();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_F514C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 1144) = v3;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_F521C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  sub_FD530();
  sub_1AC350();
  sub_1AB130();
  swift_release_n();

  sub_FD200();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_6F544();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

id sub_F5328()
{
  uint64_t v1 = v0;
  sub_1AAD30();
  sub_52C4();
  v47[1] = v3;
  v47[2] = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = sub_2694(&qword_201CC8);
  uint64_t v5 = sub_53D4(v4);
  __chkstk_darwin(v5);
  sub_E594();
  uint64_t v49 = v6;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v47 - v8;
  uint64_t v10 = sub_2694(&qword_201E10);
  uint64_t v11 = sub_53D4(v10);
  __chkstk_darwin(v11);
  sub_E594();
  uint64_t v51 = v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v47 - v14;
  uint64_t v16 = sub_1AABD0();
  sub_52C4();
  uint64_t v52 = v17;
  __chkstk_darwin(v18);
  sub_E594();
  uint64_t v50 = v19;
  uint64_t v21 = __chkstk_darwin(v20);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v47 - v22;
  id v48 = [objc_allocWithZone((Class)sub_1AC590()) init];
  uint64_t v25 = v0[3];
  uint64_t v24 = v0[4];
  sub_2E38(v0, v25);
  (*(void (**)(uint64_t, uint64_t))(v24 + 32))(v25, v24);
  uint64_t v26 = sub_1AAA10();
  sub_A208((uint64_t)v9, 1, v26);
  if (v31)
  {
    sub_5B028((uint64_t)v9, &qword_201CC8);
    sub_FD5BC((uint64_t)v15);
  }
  else
  {
    sub_1AA9F0();
    sub_A5C0();
    sub_E558();
    v27();
    uint64_t v28 = sub_FD67C();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v28, v29, v30, v16);
    sub_A208((uint64_t)v15, 1, v16);
    if (!v31)
    {
      uint64_t v34 = v52;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v23, v15, v16);
      goto LABEL_7;
    }
  }
  sub_1AABC0();
  sub_1AAD00();
  sub_1AACA0();
  sub_E558();
  v32();
  uint64_t v34 = v52;
  sub_E530();
  v33();
  sub_5B028((uint64_t)v15, &qword_201E10);
LABEL_7:
  Class isa = sub_1AAB60().super.isa;
  char v36 = *(void (**)(void))(v34 + 8);
  sub_47814();
  v36();
  id v37 = v48;
  [v48 setStart:isa];

  uint64_t v38 = v1[3];
  uint64_t v39 = v1[4];
  sub_2E38(v1, v38);
  uint64_t v40 = v49;
  (*(void (**)(uint64_t, uint64_t))(v39 + 32))(v38, v39);
  sub_A208(v40, 1, v26);
  if (v31)
  {
    sub_5B028(v40, &qword_201CC8);
    uint64_t v42 = v51;
    sub_FD5BC(v51);
    uint64_t v41 = v50;
LABEL_12:
    sub_1AABC0();
    sub_9F1D8(v41);
    sub_47814();
    v36();
    sub_5B028(v42, &qword_201E10);
    goto LABEL_13;
  }
  uint64_t v42 = v51;
  sub_1AA9C0();
  sub_A5C0();
  sub_E558();
  v43();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v42, 0, 1, v16);
  sub_A208(v42, 1, v16);
  uint64_t v41 = v50;
  if (v44) {
    goto LABEL_12;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v50, v42, v16);
LABEL_13:
  Class v45 = sub_1AAB60().super.isa;
  sub_47814();
  v36();
  [v37 setEnd:v45];

  return v37;
}

uint64_t sub_F5804()
{
  sub_A364();
  v1[151] = v0;
  v1[150] = v2;
  v1[149] = v3;
  uint64_t v4 = sub_2694(&qword_2022D0);
  sub_53D4(v4);
  v1[152] = sub_A42C();
  uint64_t v5 = sub_2694(&qword_201E28);
  sub_53D4(v5);
  v1[153] = sub_A220();
  v1[154] = swift_task_alloc();
  uint64_t Model = type metadata accessor for SleepQueryModel();
  v1[155] = Model;
  sub_53D4(Model);
  v1[156] = sub_A220();
  v1[157] = swift_task_alloc();
  v1[158] = swift_task_alloc();
  v1[159] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SnippetHeaderModel();
  v1[160] = v7;
  sub_53D4(v7);
  v1[161] = sub_A220();
  v1[162] = swift_task_alloc();
  v1[163] = swift_task_alloc();
  v1[164] = swift_task_alloc();
  uint64_t v8 = sub_1AC800();
  v1[165] = v8;
  sub_A19C(v8);
  v1[166] = v9;
  v1[167] = sub_A220();
  v1[168] = swift_task_alloc();
  v1[169] = swift_task_alloc();
  v1[170] = swift_task_alloc();
  v1[171] = swift_task_alloc();
  v1[172] = swift_task_alloc();
  v1[173] = swift_task_alloc();
  v1[174] = swift_task_alloc();
  v1[175] = swift_task_alloc();
  uint64_t v10 = sub_1AAD10();
  v1[176] = v10;
  sub_A19C(v10);
  v1[177] = v11;
  v1[178] = sub_A42C();
  uint64_t v12 = sub_1AAD30();
  v1[179] = v12;
  sub_A19C(v12);
  v1[180] = v13;
  v1[181] = sub_A42C();
  uint64_t v14 = sub_1AAA10();
  v1[182] = v14;
  sub_A19C(v14);
  v1[183] = v15;
  v1[184] = sub_A220();
  v1[185] = swift_task_alloc();
  uint64_t v16 = sub_2694(&qword_201E20);
  sub_53D4(v16);
  v1[186] = sub_A220();
  v1[187] = swift_task_alloc();
  uint64_t v17 = sub_2694(&qword_201CC8);
  sub_53D4(v17);
  v1[188] = sub_A220();
  v1[189] = swift_task_alloc();
  v1[190] = swift_task_alloc();
  uint64_t v18 = sub_1AABD0();
  v1[191] = v18;
  sub_A19C(v18);
  v1[192] = v19;
  v1[193] = sub_A220();
  v1[194] = swift_task_alloc();
  v1[195] = swift_task_alloc();
  v1[196] = swift_task_alloc();
  v1[197] = swift_task_alloc();
  uint64_t v20 = sub_2694(&qword_201E10);
  sub_53D4(v20);
  v1[198] = sub_A220();
  v1[199] = swift_task_alloc();
  v1[200] = swift_task_alloc();
  v1[201] = swift_task_alloc();
  v1[202] = swift_task_alloc();
  v1[203] = swift_task_alloc();
  v1[204] = swift_task_alloc();
  v1[205] = swift_task_alloc();
  v1[206] = swift_task_alloc();
  v1[207] = swift_task_alloc();
  v1[208] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v21, v22, v23);
}

uint64_t sub_F5BE0()
{
  uint64_t v147 = v0;
  uint64_t v1 = *(void **)(v0 + 1200);
  uint64_t v2 = *(void **)(v0 + 1192);
  *(void *)(v0 + 1672) = sub_FD7A8();
  [v1 totalInBedDuration];
  *(void *)(v0 + 1680) = v3;
  [v1 totalAsleepDuration];
  *(void *)(v0 + 1688) = v4;
  *(void *)(v0 + 1696) = sub_FD7A8();
  *(void *)(v0 + 1704) = [v1 daysSummarized];
  sub_1ABFA0();
  sub_47658();
  sub_1ABF90();
  p_type = &stru_1FFFF0.type;
  id v6 = [v2 start];
  if (v6)
  {
    uint64_t v7 = v6;
    sub_1AABB0();

    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
  }
  uint64_t v9 = (id *)(v0 + 1192);
  uint64_t v10 = *(void *)(v0 + 1664);
  uint64_t v11 = *(void *)(v0 + 1656);
  uint64_t v12 = *(void *)(v0 + 1528);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, v8, 1, v12);
  sub_FCE44(v11, v10, &qword_201E10);
  LODWORD(v11) = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v10, 1, v12);
  uint64_t v13 = *(void *)(v0 + 1664);
  if (v11)
  {
    sub_5B028(*(void *)(v0 + 1664), &qword_201E10);
  }
  else
  {
    uint64_t v14 = sub_FD2D0();
    v15(v14);
    sub_5B028(v13, &qword_201E10);
    sub_1AABA0();
    sub_FD4A0();
    v16();
  }
  id v17 = *v9;
  sub_1ABF70();
  swift_release();
  id v18 = [v17 end];
  if (v18)
  {
    uint64_t v19 = v18;
    sub_1AABB0();

    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = 1;
  }
  uint64_t v21 = *(void *)(v0 + 1648);
  uint64_t v22 = *(void *)(v0 + 1640);
  uint64_t v23 = *(void *)(v0 + 1528);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v22, v20, 1, v23);
  sub_FCE44(v22, v21, &qword_201E10);
  LODWORD(v22) = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v21, 1, v23);
  uint64_t v24 = *(void *)(v0 + 1648);
  if (v22)
  {
    sub_5B028(*(void *)(v0 + 1648), &qword_201E10);
  }
  else
  {
    uint64_t v25 = sub_FD2D0();
    v26(v25);
    sub_5B028(v24, &qword_201E10);
    sub_1AABA0();
    sub_FD4A0();
    v27();
  }
  uint64_t v28 = *(void *)(v0 + 1520);
  uint64_t v29 = *(void *)(v0 + 1456);
  uint64_t v30 = *(void **)(v0 + 1192);
  sub_1ABF60();
  swift_release();
  *(void *)(v0 + 1712) = sub_1ABF80();
  swift_release();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v28, 1, 1, v29);
  id v31 = [v30 start];
  uint64_t v34 = *(void *)(v0 + 1632);
  if (!v31)
  {
    sub_A708(*(void *)(v0 + 1632), v32, v33, *(void *)(v0 + 1528));
    goto LABEL_19;
  }
  uint64_t v35 = v31;
  uint64_t v36 = *(void *)(v0 + 1536);
  uint64_t v37 = *(void *)(v0 + 1528);
  sub_1AABB0();

  uint64_t v38 = *(void (**)(uint64_t))(v36 + 32);
  uint64_t v39 = sub_FD698();
  v38(v39);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v34, 0, 1, v37);
  sub_A208(v34, 1, v37);
  if (v40)
  {
LABEL_19:
    uint64_t v63 = *(void *)(v0 + 1632);
    goto LABEL_22;
  }
  uint64_t v41 = *(void **)(v0 + 1192);
  ((void (*)(void, void, void))v38)(*(void *)(v0 + 1568), *(void *)(v0 + 1632), *(void *)(v0 + 1528));
  id v42 = [v41 end];
  uint64_t v45 = *(void *)(v0 + 1624);
  if (v42)
  {
    uint64_t v46 = v42;
    uint64_t v47 = *(void *)(v0 + 1528);
    sub_1AABB0();

    uint64_t v48 = sub_FD698();
    v38(v48);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v45, 0, 1, v47);
    sub_A208(v45, 1, v47);
    if (!v40)
    {
      uint64_t v49 = *(void *)(v0 + 1568);
      uint64_t v50 = *(void *)(v0 + 1560);
      uint64_t v51 = *(void *)(v0 + 1552);
      uint64_t v52 = *(void *)(v0 + 1536);
      uint64_t v53 = *(void *)(v0 + 1528);
      uint64_t v54 = *(void *)(v0 + 1512);
      uint64_t v142 = *(void *)(v0 + 1520);
      uint64_t v144 = *(void *)(v0 + 1456);
      ((void (*)(uint64_t, void, uint64_t))v38)(v50, *(void *)(v0 + 1624), v53);
      char v55 = *(void (**)(uint64_t))(v52 + 16);
      uint64_t v56 = sub_B7B9C();
      v55(v56);
      ((void (*)(uint64_t, uint64_t, uint64_t))v55)(v51, v50, v53);
      sub_1AA9D0();
      id v57 = *(void (**)(uint64_t))(v52 + 8);
      uint64_t v58 = sub_FD8D4();
      v57(v58);
      ((void (*)(uint64_t, uint64_t))v57)(v49, v53);
      p_type = (char **)(&stru_1FFFF0 + 16);
      sub_5B028(v142, &qword_201CC8);
      uint64_t v59 = sub_FD67C();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v59, v60, v61, v144);
      uint64_t v62 = v54;
      uint64_t v9 = (id *)(v0 + 1192);
      sub_FCE44(v62, v142, &qword_201CC8);
      goto LABEL_23;
    }
  }
  else
  {
    sub_A708(*(void *)(v0 + 1624), v43, v44, *(void *)(v0 + 1528));
  }
  uint64_t v64 = *(void *)(v0 + 1624);
  sub_E530();
  v65();
  uint64_t v63 = v64;
LABEL_22:
  sub_5B028(v63, &qword_201E10);
LABEL_23:
  uint64_t v66 = *(void *)(v0 + 1504);
  uint64_t v67 = *(void *)(v0 + 1456);
  uint64_t v68 = *(void *)(v0 + 1208);
  sub_153CEC(*(unsigned char *)(v68 + 272), *(void **)(v0 + 1520));
  uint64_t v69 = sub_B7B9C();
  sub_FCBF8(v69, v70, v71);
  sub_A208(v66, 1, v67);
  if (v40)
  {
    sub_5B028(*(void *)(v0 + 1504), &qword_201CC8);
    goto LABEL_36;
  }
  v145 = v9;
  uint64_t v72 = *(void *)(v0 + 1616);
  uint64_t v73 = *(void *)(v0 + 1536);
  uint64_t v74 = *(void *)(v0 + 1528);
  uint64_t v75 = *(void *)(v0 + 1440);
  uint64_t v143 = v68;
  uint64_t v76 = *(void *)(v0 + 1424);
  uint64_t v77 = *(void *)(v0 + 1416);
  uint64_t v78 = *(void *)(v0 + 1408);
  sub_5572C();
  v79();
  sub_1AAD00();
  (*(void (**)(uint64_t, void, uint64_t))(v77 + 104))(v76, enum case for Calendar.Component.day(_:), v78);
  sub_1AABC0();
  sub_1AACE0();
  uint64_t v141 = *(void (**)(void))(v73 + 8);
  sub_B7ACC();
  v80();
  uint64_t v81 = sub_FD6C8();
  v82(v81);
  uint64_t v83 = *(void (**)(void))(v75 + 8);
  sub_FD4A0();
  v83();
  int v84 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v72, 1, v74);
  uint64_t v85 = *(void *)(v0 + 1616);
  if (v84 == 1)
  {
    sub_E530();
    v86();
    sub_5B028(v85, &qword_201E10);
LABEL_33:
    p_type = (char **)(&stru_1FFFF0 + 16);
    uint64_t v9 = v145;
    uint64_t v68 = v143;
    goto LABEL_36;
  }
  uint64_t v140 = *(void (**)(uint64_t, uint64_t))(v0 + 1544);
  sub_5572C();
  v87();
  sub_1AAD00();
  sub_1AA9F0();
  sub_1AA9C0();
  char v139 = sub_1AACF0();
  sub_B7ACC();
  v141();
  sub_B7ACC();
  v141();
  sub_FD4A0();
  v83();
  sub_1AAD00();
  sub_1AA9C0();
  char v88 = sub_1AACF0();
  sub_B7ACC();
  v141();
  sub_FD4A0();
  v83();
  uint64_t v89 = *(void *)(v0 + 1464);
  uint64_t v90 = *(void *)(v0 + 1456);
  if ((v139 & 1) == 0 || (v88 & 1) == 0)
  {
    uint64_t v104 = *(void *)(v0 + 1480);
    sub_B7ACC();
    v141();
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v104, v90);
    goto LABEL_33;
  }
  uint64_t v91 = *(void *)(v0 + 1480);
  uint64_t v92 = *(void *)(v0 + 1472);
  sub_1AC7D0();
  sub_A340();
  sub_FD3F0();
  v93();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 16))(v92, v91, v90);
  uint64_t v94 = sub_1AC7F0();
  os_log_type_t v95 = sub_1ACF50();
  BOOL v96 = os_log_type_enabled(v94, v95);
  uint64_t v97 = *(void *)(v0 + 1328);
  uint64_t v98 = *(void *)(v0 + 1320);
  if (v96)
  {
    uint64_t v140 = (void (*)(uint64_t, uint64_t))(v0 + 1184);
    uint64_t v138 = *(void *)(v0 + 1400);
    char v99 = (uint8_t *)sub_A4B0();
    uint64_t v137 = sub_E620();
    uint64_t v146 = v137;
    *(_DWORD *)char v99 = 136315138;
    sub_FCE94(&qword_206728, (void (*)(uint64_t))&type metadata accessor for DateInterval);
    uint64_t v100 = sub_1AD2C0();
    *(void *)(v0 + 1184) = sub_4A278(v100, v101, &v146);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v102 = sub_FD37C();
    v103(v102);
    _os_log_impl(&def_342E4, v94, v95, "%s seems like a request for last night, removing intervals from deep link", v99, 0xCu);
    sub_FD82C();
    sub_A1F0();
    sub_A1F0();

    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v138, v98);
  }
  else
  {
    uint64_t v105 = sub_FD37C();
    v106(v105);

    uint64_t v107 = sub_47968();
    v109(v107, v108);
  }
  uint64_t v68 = v143;
  uint64_t v110 = *(void *)(v0 + 1512);
  uint64_t v111 = *(void *)(v0 + 1496);
  uint64_t v112 = *(void *)(v0 + 1480);
  uint64_t v113 = *(void *)(v0 + 1456);
  sub_FD4F0();
  sub_5B028(v110, &qword_201CC8);
  sub_F1384();
  sub_E530();
  v115(v114);
  v140(v112, v113);
  sub_5B028(v111, &qword_201E20);
  uint64_t v116 = sub_FD704();
  sub_FCE44(v116, v117, &qword_201E20);
  p_type = &stru_1FFFF0.type;
  uint64_t v9 = v145;
LABEL_36:
  id v118 = objc_msgSend(*v9, p_type[403], v137);
  if (v118)
  {
    uint64_t v119 = v118;
    sub_1AABB0();

    uint64_t v120 = 0;
  }
  else
  {
    uint64_t v120 = 1;
  }
  uint64_t v121 = *(void **)(v0 + 1192);
  uint64_t v122 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 1608), v120, 1, *(void *)(v0 + 1528));
  id v123 = [v121 end];
  if (v123)
  {
    uint64_t v124 = v123;
    sub_1AABB0();

    uint64_t v122 = 0;
  }
  uint64_t v125 = *(void **)(v0 + 1200);
  uint64_t v126 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 1600), v122, 1, *(void *)(v0 + 1528));
  id v127 = [v125 summaryStartDate];
  if (v127)
  {
    uint64_t v128 = v127;
    sub_1AABB0();

    uint64_t v126 = 0;
  }
  uint64_t v129 = *(void **)(v0 + 1200);
  uint64_t v130 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 1592), v126, 1, *(void *)(v0 + 1528));
  id v131 = [v129 summaryEndDate];
  if (v131)
  {
    uint64_t v132 = v131;
    sub_1AABB0();

    uint64_t v130 = 0;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 1584), v130, 1, *(void *)(v0 + 1528));
  type metadata accessor for WellnessTime(0);
  sub_FD710();
  *(void *)(v0 + 1720) = v133;
  sub_2F2B8(*(unsigned char *)(v68 + 272));
  *(void *)(v0 + 1728) = v134;
  uint64_t v135 = (void *)swift_task_alloc();
  *(void *)(v0 + 1736) = v135;
  *uint64_t v135 = v0;
  v135[1] = sub_F67AC;
  sub_F1384();
  return sub_7A988();
}

uint64_t sub_F67AC()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = *v0;
  sub_E53C();
  *uint64_t v4 = v3;
  *(void *)(v6 + 1744) = v5;
  *(void *)(v6 + 1752) = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_F689C()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 1760) = v1;
  void *v1 = v0;
  v1[1] = sub_F693C;
  return sub_7A658(0x6867694E7473616CLL, 0xE900000000000074);
}

uint64_t sub_F693C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 1768) = v3;
  *(void *)(v1 + 1776) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_F6A10()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 1784) = v1;
  void *v1 = v0;
  v1[1] = sub_F6AB8;
  return sub_7A658(0x6D69546C61746F74, 0xEF7065656C734165);
}

uint64_t sub_F6AB8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 1792) = v3;
  *(void *)(v1 + 1800) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_F6B8C()
{
  if (!*(void *)(v0 + 1752) || !*(void *)(v0 + 1800))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AC7D0();
    sub_A340();
    sub_4788C();
    sub_47AD0();
    v15();
    uint64_t v16 = (void *)sub_1AC7F0();
    os_log_type_t v17 = sub_1ACF60();
    if (sub_29300(v17))
    {
      id v18 = (_WORD *)sub_292A0();
      sub_29368(v18);
      sub_A7FC(&def_342E4, v19, v20, "#GetSleepAnalysisFlow: Category label or last night label is nil");
      sub_A1F0();
    }
    uint64_t v75 = *(void *)(v0 + 1520);
    uint64_t v21 = *(void *)(v0 + 1496);
    uint64_t v22 = *(void *)(v0 + 1208);

    uint64_t v23 = sub_FD6C8();
    v24(v23);
    sub_9B48(v22 + 80, v0 + 176);
    sub_9BA4();
    sub_1AAF70();
    swift_release();
    swift_release();
    sub_9BF0(v0 + 176);
    sub_5B028(v21, &qword_201E20);
    sub_5B028(v75, &qword_201CC8);
    sub_FD29C();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_FD410();
    __asm { BRAA            X2, X16 }
  }
  uint64_t v1 = *(void *)(v0 + 1312);
  uint64_t v2 = *(void *)(v0 + 1280);
  uint64_t v3 = *(void *)(v0 + 1208);
  sub_1ACE40();
  swift_bridgeObjectRelease();
  char v4 = *(unsigned char *)(v3 + 272);
  unint64_t v5 = sub_34250(v4);
  unint64_t v7 = v6;
  unint64_t v8 = sub_2F2B8(v4);
  uint64_t v9 = (unint64_t *)(v1 + *(int *)(v2 + 20));
  *uint64_t v9 = v5;
  v9[1] = v7;
  uint64_t v10 = (unint64_t *)(v1 + *(int *)(v2 + 24));
  *uint64_t v10 = v8;
  v10[1] = v11;
  if (!sub_1ABF50())
  {
LABEL_17:
    swift_bridgeObjectRelease();
    if (sub_1ABF20())
    {
      uint64_t v14 = *(void *)(*(void *)(v0 + 1720) + 48);
      if (!v14)
      {
LABEL_24:
        uint64_t v13 = 0;
        goto LABEL_27;
      }
      uint64_t v27 = *(void *)(v0 + 1232);
      sub_1AC070();
      uint64_t v28 = sub_1AC1E0();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v27, 1, v28) != 1)
      {
        sub_1AC1D0();
        sub_A5C0();
        sub_B7B9C();
        sub_E558();
        v34();
        sub_47968();
        uint64_t v14 = sub_1ACE50();
        uint64_t v13 = v35;
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
      uint64_t v29 = *(void *)(v0 + 1232);
    }
    else
    {
      uint64_t v30 = *(void *)(v0 + 1224);
      sub_1ABF30();
      uint64_t v31 = sub_1AC1E0();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v30, 1, v31) != 1)
      {
        uint64_t v14 = sub_1AC1D0();
        uint64_t v13 = v32;
        sub_A5C0();
        sub_FD704();
        sub_E558();
        v33();
        goto LABEL_27;
      }
      uint64_t v29 = *(void *)(v0 + 1224);
    }
    sub_5B028(v29, &qword_201E28);
    uint64_t v14 = 0;
    goto LABEL_24;
  }
  if (!sub_1ABF40())
  {
LABEL_16:
    swift_release();
    goto LABEL_17;
  }
  if ((sub_1AC060() & 1) == 0 || (sub_1AC060() & 1) == 0 || (sub_1AC0F0() & 1) == 0)
  {
    swift_release();
    goto LABEL_16;
  }
  char v12 = sub_1AC0F0();
  swift_release();
  swift_release();
  if ((v12 & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v13 = *(void *)(v0 + 1776);
  uint64_t v14 = *(void *)(v0 + 1768);
LABEL_27:
  *(void *)(v0 + 1816) = v13;
  *(void *)(v0 + 1808) = v14;
  double v36 = *(double *)(v0 + 1688);
  double v37 = *(double *)(v0 + 1680);
  if ([*(id *)(v0 + 1200) daysSummarized] == (char *)&def_342E4 + 1 || v37 <= 0.0 || v36 <= 0.0)
  {
    uint64_t v43 = *(void *)(v0 + 1800);
    uint64_t v44 = *(void *)(v0 + 1792);
    uint64_t v45 = *(void *)(v0 + 1496);
    uint64_t v46 = *(void *)(v0 + 1488);
    uint64_t v47 = *(void *)(v0 + 1280);
    uint64_t v48 = *(void *)(v0 + 1272);
    uint64_t v49 = *(void *)(v0 + 1216);
    uint64_t v76 = *(void **)(v0 + 1200);
    sub_FCC3C(*(void *)(v0 + 1312), v49, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v49, 0, 1, v47);
    sub_FCBF8(v45, v46, &qword_201E20);
    SleepQueryModel.init(snippetHeaderModel:dateLabel:sleepTypeLabel:dataLabel:avgTimeAsleepLabel:avgTimeInBedLabel:avgTimeAsleep:avgTimeInBed:totalTimeAsleep:totalTimeInBed:url:sleepDuration:avgTimeAsleepData:avgTimeInBedData:)(v49, v14, v13, v44, v43, 0, 0, 0, v48, 0, 0, 0, 0, 0, 0, 0, v46);
    if ([v76 daysSummarized] == (char *)&def_342E4 + 1)
    {
      if (*(uint64_t *)(v0 + 1672) >= 1)
      {
        uint64_t v50 = *(void *)(v0 + 1272);
        uint64_t v51 = *(void *)(v0 + 1240);
        sub_FD790();
        sub_47658();
        sub_1AC140();
        [(id)v43 totalAsleepDuration];
        sub_FD264();
        sub_55A24();
        sub_1AC120();
        sub_FD734();
        swift_release();
        sub_FD770();
        sub_1AC140();
        [(id)v43 averageAsleepDuration];
        sub_FD264();
        sub_FD84C();
        uint64_t v52 = v43;
        sub_1AC120();
        sub_55890();
        uint64_t v43 = *(int *)(v51 + 44);
        swift_release();
        *(void *)(v50 + v43) = v52;
      }
      uint64_t v53 = *(void *)(v0 + 1272);
      uint64_t v54 = *(void *)(v0 + 1240);
      sub_FD790();
      sub_47658();
      sub_1AC140();
      [(id)v43 totalInBedDuration];
      sub_FD264();
      sub_55A24();
      sub_1AC120();
      sub_FD734();
      swift_release();
      sub_FD770();
      sub_1AC140();
      [(id)v43 averageInBedDuration];
      sub_FD264();
      sub_FD84C();
      uint64_t v55 = v43;
      sub_1AC120();
      sub_55890();
      uint64_t v43 = *(int *)(v54 + 48);
      swift_release();
      *(void *)(v53 + v43) = v55;
    }
    if (*(double *)(v0 + 1680) <= 0.0 || v36 <= 0.0)
    {
      if (*(uint64_t *)(v0 + 1672) >= 1)
      {
        uint64_t v56 = *(void *)(v0 + 1272);
        uint64_t v57 = *(void *)(v0 + 1240);
        sub_FD790();
        sub_47658();
        sub_1AC140();
        [(id)v43 averageAsleepDuration];
        sub_FD264();
        sub_FD84C();
        uint64_t v58 = v43;
        sub_1AC120();
        sub_55890();
        uint64_t v43 = *(int *)(v57 + 44);
        swift_release();
        *(void *)(v56 + v43) = v58;
      }
      uint64_t v59 = *(void *)(v0 + 1272);
      uint64_t v60 = *(void *)(v0 + 1240);
      sub_FD790();
      sub_47658();
      sub_1AC140();
      [(id)v43 averageInBedDuration];
      sub_FD264();
      sub_FD84C();
      uint64_t v61 = v43;
      sub_1AC120();
      sub_55890();
      uint64_t v62 = *(int *)(v60 + 48);
      swift_release();
      *(void *)(v59 + v62) = v61;
    }
    uint64_t v63 = *(void *)(v0 + 1272);
    uint64_t v64 = *(int **)(v0 + 1240);
    Swift::String_optional v65 = SleepQueryModel.fetchSleepDuration()();
    uint64_t v66 = (Swift::String_optional *)(v63 + v64[15]);
    swift_bridgeObjectRelease();
    *uint64_t v66 = v65;
    *(void *)(v0 + 1824) = *(void *)(v63 + v64[14]);
    *(void *)(v0 + 1832) = *(void *)(v63 + v64[13]);
    *(void *)(v0 + 1840) = *(void *)(v63 + v64[12]);
    *(void *)(v0 + 1848) = *(void *)(v63 + v64[11]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v67 = (void *)swift_task_alloc();
    *(void *)(v0 + 1856) = v67;
    void *v67 = v0;
    v67[1] = sub_F7614;
    sub_FD898();
    sub_FD410();
    return sub_D6930(v68, v69, v70, v71, v72, v73);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v38 = (void *)swift_task_alloc();
    *(void *)(v0 + 1920) = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_F84D4;
    sub_FD7F8();
    sub_FD410();
    return sub_7A658(v39, v40);
  }
}

uint64_t sub_F7614(uint64_t a1)
{
  sub_A1B4();
  uint64_t v4 = v3;
  sub_E53C();
  *unint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_E53C();
  *unint64_t v7 = v6;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v4 + 1864) = a1;
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_F77D4()
{
  uint64_t v62 = v0;
  uint64_t v2 = (void *)v0[233];
  v0[234] = (uint64_t)v2;
  uint64_t v3 = v0[166];
  v0[235] = sub_1AC7D0();
  sub_A340();
  v0[236] = *(void *)(v3 + 16);
  v0[237] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  sub_FD8A4();
  v4();
  unint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  uint64_t v59 = v2;
  if (sub_FD440(v6))
  {
    uint64_t v55 = v0[174];
    uint64_t v7 = v0[166];
    uint64_t v54 = v0[165];
    uint64_t v8 = v0[159];
    uint64_t v9 = v0[158];
    uint64_t v10 = (uint8_t *)sub_A4B0();
    v61[0] = sub_E620();
    *(_DWORD *)uint64_t v10 = 136315138;
    sub_FD704();
    sub_A340();
    sub_FCC3C(v8, v9, (void (*)(void))type metadata accessor for SleepQueryModel);
    uint64_t v11 = sub_1ACE00();
    uint64_t v13 = sub_4A278(v11, v12, v61);
    sub_FD884(v13);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v5, v1, "#GetSleepAnalysisFlow: snippet model is %s", v10, 0xCu);
    sub_FD628();
    sub_A1F0();
    sub_A1F0();

    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v14(v55, v54);
  }
  else
  {
    uint64_t v15 = v0[166];

    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    uint64_t v16 = sub_A7C4();
    v14(v16, v17);
  }
  v0[238] = (uint64_t)v14;
  uint64_t v18 = v0[164];
  uint64_t v19 = v0[163];
  sub_A340();
  sub_FD8A4();
  v20();
  sub_FCC3C(v18, v19, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v21 = sub_1AC7F0();
  os_log_type_t v22 = sub_1ACF50();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v24 = v0[173];
  uint64_t v25 = v0[165];
  uint64_t v26 = v0[163];
  if (v23)
  {
    uint64_t v56 = v0[165];
    uint64_t v27 = v0[162];
    uint64_t v28 = (uint8_t *)sub_A4B0();
    v61[0] = sub_E620();
    *(_DWORD *)uint64_t v28 = 136315138;
    sub_FCC3C(v26, v27, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_A7C4();
    uint64_t v29 = sub_1ACE00();
    v0[144] = sub_4A278(v29, v30, v61);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_FCC90(v26, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    _os_log_impl(&def_342E4, v21, v22, "#GetSleepAnalysisFlow: snippet header model is %s", v28, 0xCu);
    sub_FD628();
    sub_A1F0();
    sub_A1F0();

    uint64_t v31 = v24;
    uint64_t v32 = v56;
  }
  else
  {
    sub_FCC90(v0[163], (void (*)(void))type metadata accessor for SnippetHeaderModel);

    uint64_t v31 = v24;
    uint64_t v32 = v25;
  }
  v14(v31, v32);
  if (!v59)
  {
    uint64_t v40 = v0[165];
    sub_A340();
    sub_FD8A4();
    v41();
    id v42 = (void *)sub_1AC7F0();
    os_log_type_t v43 = sub_1ACF60();
    if (sub_29300(v43))
    {
      uint64_t v44 = (_WORD *)sub_292A0();
      sub_29368(v44);
      sub_A7FC(&def_342E4, v45, v46, "Couldn't create sleep analysis dialog returning nil");
      sub_A1F0();
    }
    sub_FD3FC();
    uint64_t v57 = v47;
    uint64_t v58 = v48;
    sub_FD5D8();
    uint64_t v60 = v49;
    uint64_t v50 = v0[151];

    sub_FD68C();
    sub_E530();
    v51();
    sub_9B48(v50 + 80, (uint64_t)(v0 + 2));
    sub_9BA4();
    sub_1AAF70();
    swift_release();
    swift_release();
    sub_9BF0((uint64_t)(v0 + 2));
    sub_FCC90(v40, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v57, &qword_201E20);
    sub_5B028(v58, &qword_201CC8);
    sub_FCC90(v60, (void (*)(void))type metadata accessor for SleepQueryModel);
    sub_FCFE8();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_FD5F0();
    __asm { BRAA            X2, X16 }
  }
  v0[70] = type metadata accessor for WellnessSnippets();
  v0[71] = sub_FCE94((unint64_t *)&qword_202590, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  sub_B5B0(v0 + 67);
  sub_CD2C8();
  sub_A340();
  uint64_t v33 = sub_FD8D4();
  sub_FCC3C(v33, v34, v35);
  swift_storeEnumTagMultiPayload();
  id v36 = v59;
  double v37 = (void *)swift_task_alloc();
  v0[239] = (uint64_t)v37;
  *double v37 = v0;
  v37[1] = sub_F7F74;
  sub_47228();
  sub_FD5F0();
  return sub_7ADEC();
}

uint64_t sub_F7F74()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 536;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *unint64_t v5 = v4;
  swift_task_dealloc();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_F8044()
{
  uint64_t v30 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1888);
  uint64_t v2 = *(void *)(v0 + 1880);
  uint64_t v3 = *(void *)(v0 + 1376);
  uint64_t v4 = *(void *)(v0 + 1320);
  sub_A340();
  v1(v3, v2, v4);
  uint64_t v27 = v0 + 776;
  sub_9DE0(v0 + 776, v0 + 496);
  unint64_t v5 = (void *)sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  if (sub_FD440(v6))
  {
    uint64_t v7 = (_DWORD *)sub_A4B0();
    v29[0] = sub_E620();
    *uint64_t v7 = 136315138;
    uint64_t v8 = sub_A7C4();
    sub_9DE0(v8, v9);
    sub_2694(&qword_206720);
    uint64_t v10 = sub_1ACE00();
    *(void *)(v0 + 1144) = sub_4A278(v10, v11, v29);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 496);
    sub_A7DC(&def_342E4, v12, v13, "#GetSleepAnalysisFlow: output is %s");
    sub_FD628();
    sub_A1F0();
    sub_A1F0();

    sub_E530();
    v14();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t))(v0 + 1904);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 496);

    uint64_t v16 = sub_47968();
    v15(v16);
  }
  uint64_t v17 = *(void **)(v0 + 1872);
  sub_FD8E0();
  uint64_t v24 = v18;
  uint64_t v25 = v19;
  uint64_t v20 = *(void *)(v0 + 1312);
  uint64_t v26 = *(void *)(v0 + 1272);
  sub_9DE0(v27, v0 + 616);
  uint64_t v21 = swift_allocObject();
  sub_24D80((long long *)(v0 + 616), v21 + 16);
  sub_1AB350();
  sub_1AAE40();
  sub_47658();
  *(void *)(v0 + 1128) = sub_1AAE30();
  uint64_t v28 = sub_1AAF70();

  swift_release();
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v27);
  sub_FCC90(v20, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v24, &qword_201E20);
  sub_5B028(v25, &qword_201CC8);
  swift_release();
  sub_FCC90(v26, (void (*)(void))type metadata accessor for SleepQueryModel);
  sub_FD0F4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v22 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v22(v28);
}

uint64_t sub_F84D4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 1928) = v3;
  *(void *)(v1 + 1936) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_F85A8()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 1944) = v1;
  void *v1 = v0;
  v1[1] = sub_F8640;
  uint64_t v2 = sub_FD7F8() & 0xFFFFFFFFFFFFLL | 0x4965000000000000;
  return sub_7A658(v2, 0xEC0000006465426ELL);
}

uint64_t sub_F8640()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 1952) = v3;
  *(void *)(v1 + 1960) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_F8714()
{
  uint64_t v75 = v0;
  uint64_t v66 = v0[244];
  uint64_t v68 = v0[245];
  uint64_t v65 = v0[242];
  uint64_t v72 = v0[241];
  uint64_t v69 = v0[227];
  uint64_t v63 = v0[226];
  uint64_t v1 = v0[187];
  uint64_t v2 = v0[186];
  uint64_t v3 = v0[160];
  uint64_t v4 = v0[159];
  uint64_t v70 = v0[157];
  uint64_t v5 = v0[155];
  uint64_t v6 = v0[152];
  uint64_t v7 = (void *)v0[150];
  sub_FCC3C(v0[164], v6, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v6, 0, 1, v3);
  sub_1AC150();
  sub_47658();
  uint64_t v8 = sub_1AC140();
  [v7 averageAsleepDuration];
  sub_1AC130();
  sub_FD734();
  sub_1AC120();
  sub_55A24();
  swift_allocObject();
  sub_1AC140();
  [v7 averageInBedDuration];
  sub_FD264();
  swift_release();
  uint64_t v9 = sub_1AC120();
  swift_release();
  sub_FCBF8(v1, v2, &qword_201E20);
  SleepQueryModel.init(snippetHeaderModel:dateLabel:sleepTypeLabel:dataLabel:avgTimeAsleepLabel:avgTimeInBedLabel:avgTimeAsleep:avgTimeInBed:totalTimeAsleep:totalTimeInBed:url:sleepDuration:avgTimeAsleepData:avgTimeInBedData:)(v6, v63, v69, 0, 0, 0, 0, v72, v4, v65, v66, v68, v8, v9, 0, 0, v2);
  uint64_t result = sub_FCC3C(v4, v70, (void (*)(void))type metadata accessor for SleepQueryModel);
  uint64_t v73 = v5;
  if (!*(void *)(v4 + *(int *)(v5 + 44)))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = v0[159];
  uint64_t v12 = v0[157];
  uint64_t v13 = v0[155];
  swift_retain();
  uint64_t v14 = SleepQueryModel.getAbbrHoursMinDialogDuration(duration:)();
  uint64_t v16 = v15;
  swift_release();
  sub_FCC90(v12, (void (*)(void))type metadata accessor for SleepQueryModel);
  uint64_t v17 = (uint64_t *)(v11 + *(int *)(v13 + 64));
  swift_bridgeObjectRelease();
  *uint64_t v17 = v14;
  v17[1] = v16;
  uint64_t v18 = sub_A7C4();
  uint64_t result = sub_FCC3C(v18, v19, v20);
  uint64_t v71 = v13;
  if (!*(void *)(v11 + *(int *)(v13 + 48)))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v21 = v0[166];
  uint64_t v22 = v0[159];
  uint64_t v23 = v0[156];
  uint64_t v24 = v0[155];
  swift_retain();
  uint64_t v25 = SleepQueryModel.getAbbrHoursMinDialogDuration(duration:)();
  uint64_t v27 = v26;
  swift_release();
  sub_FCC90(v23, (void (*)(void))type metadata accessor for SleepQueryModel);
  uint64_t v28 = (uint64_t *)(v22 + *(int *)(v24 + 68));
  swift_bridgeObjectRelease();
  uint64_t *v28 = v25;
  v28[1] = v27;
  uint64_t v29 = sub_1AC7D0();
  v0[246] = v29;
  sub_A340();
  v0[247] = *(void *)(v21 + 16);
  v0[248] = (v21 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  sub_CD2C8();
  uint64_t v67 = v30;
  sub_47AD0();
  v31();
  uint64_t v32 = (void *)sub_1AC7F0();
  os_log_type_t v33 = sub_1ACF50();
  BOOL v34 = sub_FD440(v33);
  uint64_t v35 = v0[166];
  if (v34)
  {
    uint64_t v36 = v0[159];
    uint64_t v37 = v0[158];
    uint64_t v38 = (_DWORD *)sub_A4B0();
    v74[0] = sub_E620();
    *uint64_t v38 = 136315138;
    sub_A340();
    sub_FCC3C(v36, v37, (void (*)(void))type metadata accessor for SleepQueryModel);
    uint64_t v39 = sub_1ACE00();
    v0[147] = sub_4A278(v39, v40, v74);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_A7DC(&def_342E4, v41, v42, "#GetSleepAnalysisFlow: snippet model is %s");
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    os_log_type_t v43 = *(void (**)(void))(v35 + 8);
  }
  else
  {

    os_log_type_t v43 = *(void (**)(void))(v35 + 8);
    sub_4788C();
  }
  sub_F139C();
  v43();
  v0[249] = v43;
  uint64_t v44 = v0[169];
  uint64_t v45 = v0[165];
  uint64_t v46 = v0[164];
  uint64_t v47 = v0[161];
  sub_A340();
  v67(v44, v29, v45);
  sub_FCC3C(v46, v47, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v48 = sub_1AC7F0();
  os_log_type_t v49 = sub_1ACF50();
  if (sub_A3D0(v49))
  {
    uint64_t v64 = v0[161];
    uint64_t v50 = (uint8_t *)sub_A4B0();
    v74[0] = sub_E620();
    *(_DWORD *)uint64_t v50 = 136315138;
    uint64_t v51 = sub_FD68C();
    sub_FCC3C(v51, v52, v53);
    uint64_t v54 = sub_1ACE00();
    v0[145] = sub_4A278(v54, v55, v74);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_FCC90(v64, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    _os_log_impl(&def_342E4, v48, (os_log_type_t)v46, "#GetSleepAnalysisFlow: snippet header model is %s", v50, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    sub_FCC90(v0[161], (void (*)(void))type metadata accessor for SnippetHeaderModel);
  }

  sub_E530();
  v43();
  uint64_t v56 = v0[215];
  uint64_t v57 = v0[214];
  uint64_t v58 = v0[159];
  double v59 = (double)(uint64_t)v0[212] / (double)(uint64_t)v0[213];
  sub_A340();
  uint64_t v60 = *(void *)(v58 + *(int *)(v71 + 48));
  v0[250] = v60;
  uint64_t v61 = *(void *)(v58 + *(int *)(v73 + 44));
  v0[251] = v61;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v62 = (void *)swift_task_alloc();
  v0[252] = v62;
  *uint64_t v62 = v0;
  v62[1] = sub_F8E60;
  return sub_D66F4(v56, *(uint64_t *)&v59, 0, v60, v61, v57);
}

uint64_t sub_F8E60(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  sub_E53C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  sub_E53C();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v5 + 2024) = a1;
  }
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_F8FDC()
{
  uint64_t v1 = (void *)v0[253];
  v0[90] = type metadata accessor for WellnessSnippets();
  v0[91] = sub_FCE94((unint64_t *)&qword_202590, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  sub_B5B0(v0 + 87);
  uint64_t v2 = sub_FD898();
  sub_FCC3C(v2, v3, v4);
  sub_FD704();
  swift_storeEnumTagMultiPayload();
  id v5 = v1;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[254] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_F9120;
  return sub_7ADEC();
}

uint64_t sub_F9120()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 696;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *id v5 = v4;
  swift_task_dealloc();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_F91F0()
{
  uint64_t v1 = *(void **)(v0 + 2024);
  sub_FD8E0();
  uint64_t v8 = v2;
  uint64_t v9 = v3;
  uint64_t v4 = *(void *)(v0 + 1312);
  uint64_t v10 = *(void *)(v0 + 1272);
  sub_9DE0(v0 + 656, v0 + 736);
  uint64_t v5 = swift_allocObject();
  sub_24D80((long long *)(v0 + 736), v5 + 16);
  sub_1AB350();
  sub_1AAE40();
  sub_47658();
  *(void *)(v0 + 1136) = sub_1AAE30();
  uint64_t v11 = sub_1AAF70();

  swift_release();
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 656);
  sub_FCC90(v4, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v8, &qword_201E20);
  sub_5B028(v9, &qword_201CC8);
  swift_release();
  sub_FCC90(v10, (void (*)(void))type metadata accessor for SleepQueryModel);
  sub_FD0F4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v6(v11);
}

uint64_t sub_F9500()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[247];
  uint64_t v2 = v0[246];
  uint64_t v3 = v0[168];
  uint64_t v4 = v0[165];
  sub_A340();
  v1(v3, v2, v4);
  uint64_t v5 = (void *)sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF60();
  if (sub_29300(v6))
  {
    uint64_t v7 = (_WORD *)sub_292A0();
    sub_29368(v7);
    sub_A7FC(&def_342E4, v8, v9, "Couldn't create detailed sleep analysis dialog returning nil");
    sub_A1F0();
  }
  uint64_t v10 = (void (*)(void))v0[249];
  sub_FD3FC();
  uint64_t v17 = v11;
  uint64_t v18 = v12;
  uint64_t v16 = v0[164];
  uint64_t v19 = v0[159];
  uint64_t v13 = v0[151];

  sub_FD68C();
  sub_E530();
  v10();
  sub_9B48(v13 + 80, (uint64_t)(v0 + 42));
  sub_9BA4();
  uint64_t v20 = sub_1AAF70();
  swift_release();
  swift_release();
  sub_9BF0((uint64_t)(v0 + 42));
  sub_FCC90(v16, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v17, &qword_201E20);
  sub_5B028(v18, &qword_201CC8);
  sub_FCC90(v19, (void (*)(void))type metadata accessor for SleepQueryModel);
  sub_FD29C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v20);
}

void sub_F98F8()
{
  os_log_type_t v1 = (_BYTE)v0 - 112;
  v0[234] = 0;
  uint64_t v2 = v0[166];
  v0[235] = sub_1AC7D0();
  sub_A340();
  v0[236] = *(void *)(v2 + 16);
  v0[237] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  sub_FD3F0();
  v3();
  uint64_t v4 = sub_1AC7F0();
  os_log_type_t v5 = sub_1ACF50();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v43 = v0[166];
    uint64_t v6 = v0[159];
    uint64_t v7 = v0[158];
    uint64_t v8 = (uint8_t *)sub_A4B0();
    v47[0] = sub_E620();
    *(_DWORD *)uint64_t v8 = 136315138;
    sub_A340();
    uint64_t v9 = v6;
    os_log_type_t v1 = (_BYTE)v0 - 112;
    sub_FCC3C(v9, v7, (void (*)(void))type metadata accessor for SleepQueryModel);
    uint64_t v10 = sub_1ACE00();
    uint64_t v12 = sub_4A278(v10, v11, v47);
    sub_FD884(v12);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v4, v5, "#GetSleepAnalysisFlow: snippet model is %s", v8, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v13 = *(void (**)(void))(v43 + 8);
    sub_E530();
    v13();
  }
  else
  {
    uint64_t v14 = v0[166];

    uint64_t v13 = *(void (**)(void))(v14 + 8);
    uint64_t v15 = sub_4788C();
    ((void (*)(uint64_t))v13)(v15);
  }
  v0[238] = v13;
  uint64_t v16 = v0[164];
  uint64_t v17 = v0[163];
  sub_A340();
  sub_FD3F0();
  v18();
  sub_FCC3C(v16, v17, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v19 = sub_1AC7F0();
  os_log_type_t v20 = sub_1ACF50();
  BOOL v21 = sub_FD440(v20);
  uint64_t v22 = v0[163];
  if (v21)
  {
    uint64_t v23 = v0[162];
    uint64_t v24 = (uint8_t *)sub_A4B0();
    v47[0] = sub_E620();
    *(_DWORD *)uint64_t v24 = 136315138;
    sub_FCC3C(v22, v23, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    uint64_t v25 = sub_1ACE00();
    v0[144] = sub_4A278(v25, v26, v47);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_FCC90(v22, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    _os_log_impl(&def_342E4, v19, v1, "#GetSleepAnalysisFlow: snippet header model is %s", v24, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    sub_E530();
    v27();
  }
  else
  {
    sub_FCC90(v22, (void (*)(void))type metadata accessor for SnippetHeaderModel);

    uint64_t v28 = sub_4788C();
    ((void (*)(uint64_t))v13)(v28);
  }
  uint64_t v29 = v0[165];
  sub_A340();
  sub_FD3F0();
  v30();
  uint64_t v31 = (void *)sub_1AC7F0();
  os_log_type_t v32 = sub_1ACF60();
  if (sub_29300(v32))
  {
    os_log_type_t v33 = (_WORD *)sub_292A0();
    sub_29368(v33);
    sub_A7FC(&def_342E4, v34, v35, "Couldn't create sleep analysis dialog returning nil");
    sub_A1F0();
  }
  sub_FD3FC();
  uint64_t v44 = v36;
  uint64_t v45 = v37;
  sub_FD5D8();
  uint64_t v46 = v38;
  uint64_t v39 = v0[151];

  sub_FD68C();
  sub_E530();
  v40();
  sub_9B48(v39 + 80, (uint64_t)(v0 + 2));
  sub_9BA4();
  sub_1AAF70();
  swift_release();
  swift_release();
  sub_9BF0((uint64_t)(v0 + 2));
  sub_FCC90(v29, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v44, &qword_201E20);
  sub_5B028(v45, &qword_201CC8);
  sub_FCC90(v46, (void (*)(void))type metadata accessor for SleepQueryModel);
  sub_FCFE8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_FD5F0();
  __asm { BRAA            X2, X16 }
}

uint64_t sub_F9FA8()
{
  sub_A364();
  v1[42] = v2;
  v1[43] = v0;
  v1[41] = v3;
  uint64_t v4 = sub_1AB0A0();
  v1[44] = v4;
  sub_A19C(v4);
  v1[45] = v5;
  v1[46] = sub_A220();
  v1[47] = swift_task_alloc();
  uint64_t v6 = sub_1AB3D0();
  v1[48] = v6;
  sub_A19C(v6);
  v1[49] = v7;
  v1[50] = sub_A42C();
  uint64_t v8 = sub_1AC800();
  v1[51] = v8;
  sub_A19C(v8);
  v1[52] = v9;
  v1[53] = sub_A42C();
  uint64_t v10 = sub_1AAD10();
  v1[54] = v10;
  sub_A19C(v10);
  v1[55] = v11;
  v1[56] = sub_A42C();
  uint64_t v12 = sub_1AAD30();
  v1[57] = v12;
  sub_A19C(v12);
  v1[58] = v13;
  v1[59] = sub_A42C();
  uint64_t v14 = sub_1AAA10();
  v1[60] = v14;
  sub_A19C(v14);
  v1[61] = v15;
  v1[62] = sub_A220();
  v1[63] = swift_task_alloc();
  uint64_t v16 = sub_2694(&qword_201E20);
  sub_53D4(v16);
  v1[64] = sub_A220();
  v1[65] = swift_task_alloc();
  uint64_t v17 = sub_2694(&qword_201CC8);
  sub_53D4(v17);
  v1[66] = sub_A220();
  v1[67] = swift_task_alloc();
  v1[68] = swift_task_alloc();
  uint64_t v18 = sub_1AABD0();
  v1[69] = v18;
  sub_A19C(v18);
  v1[70] = v19;
  v1[71] = sub_A220();
  v1[72] = swift_task_alloc();
  v1[73] = swift_task_alloc();
  v1[74] = swift_task_alloc();
  v1[75] = swift_task_alloc();
  uint64_t v20 = sub_2694(&qword_201E10);
  sub_53D4(v20);
  v1[76] = sub_A220();
  v1[77] = swift_task_alloc();
  v1[78] = swift_task_alloc();
  v1[79] = swift_task_alloc();
  v1[80] = swift_task_alloc();
  v1[81] = swift_task_alloc();
  v1[82] = swift_task_alloc();
  v1[83] = swift_task_alloc();
  v1[84] = swift_task_alloc();
  v1[85] = swift_task_alloc();
  v1[86] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v21, v22, v23);
}

uint64_t sub_FA2A8()
{
  uint64_t v157 = v0;
  os_log_type_t v1 = *(void **)(v0 + 328);
  uint64_t v2 = *(void **)(v0 + 336);
  uint64_t v3 = 0x200000;
  sub_FD7A8();
  [v2 totalInBedDuration];
  double v5 = v4;
  [v2 totalAsleepDuration];
  double v7 = v6;
  id v8 = sub_FD7A8();
  id v154 = [v2 daysSummarized];
  sub_1ABFA0();
  sub_47658();
  sub_1ABF90();
  id v9 = [v1 start];
  if (v9)
  {
    uint64_t v10 = v9;
    sub_1AABB0();

    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 1;
  }
  uint64_t v155 = (id *)(v0 + 328);
  uint64_t v12 = *(void *)(v0 + 688);
  uint64_t v13 = *(void *)(v0 + 680);
  sub_FD864((uint64_t)v9, v11);
  sub_FCE44(v13, v12, &qword_201E10);
  LODWORD(v13) = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v12, 1, 0x200000);
  uint64_t v14 = *(void *)(v0 + 688);
  if (v13)
  {
    sub_5B028(*(void *)(v0 + 688), &qword_201E10);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 600);
    uint64_t v15 = sub_FD4AC();
    v16(v15);
    sub_5B028(v14, &qword_201E10);
    sub_1AABA0();
    sub_A7C4();
    sub_B7ACC();
    v17();
  }
  id v18 = *v155;
  sub_1ABF70();
  swift_release();
  id v19 = [v18 end];
  if (v19)
  {
    uint64_t v20 = v19;
    sub_1AABB0();

    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = 1;
  }
  uint64_t v22 = *(void *)(v0 + 672);
  uint64_t v23 = *(void *)(v0 + 664);
  sub_FD864((uint64_t)v19, v21);
  sub_FCE44(v23, v22, &qword_201E10);
  LODWORD(v23) = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v22, 1, v3);
  uint64_t v24 = *(void *)(v0 + 672);
  if (v23)
  {
    sub_5B028(*(void *)(v0 + 672), &qword_201E10);
  }
  else
  {
    uint64_t v25 = sub_FD4AC();
    v26(v25);
    sub_5B028(v24, &qword_201E10);
    sub_1AABA0();
    uint64_t v27 = sub_A7C4();
    v28(v27);
  }
  uint64_t v29 = *(void *)(v0 + 544);
  uint64_t v30 = *(void *)(v0 + 480);
  uint64_t v31 = *(void **)(v0 + 328);
  sub_1ABF60();
  swift_release();
  uint64_t v32 = sub_1ABF80();
  *(void *)(v0 + 696) = v32;
  swift_release();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v29, 1, 1, v30);
  id v33 = [v31 start];
  uint64_t v36 = *(void *)(v0 + 656);
  if (!v33)
  {
    sub_A708(*(void *)(v0 + 656), v34, v35, *(void *)(v0 + 552));
    goto LABEL_19;
  }
  uint64_t v37 = v33;
  uint64_t v38 = *(void *)(v0 + 560);
  uint64_t v39 = *(void *)(v0 + 552);
  sub_1AABB0();

  unint64_t v40 = *(void (**)(uint64_t))(v38 + 32);
  uint64_t v41 = sub_FD6B0();
  v40(v41);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v36, 0, 1, v39);
  sub_A208(v36, 1, v39);
  if (v42)
  {
LABEL_19:
    uint64_t v55 = *(void *)(v0 + 656);
    goto LABEL_22;
  }
  uint64_t v43 = *(void **)(v0 + 328);
  ((void (*)(void, void, void))v40)(*(void *)(v0 + 592), *(void *)(v0 + 656), *(void *)(v0 + 552));
  id v44 = [v43 end];
  uint64_t v47 = *(void *)(v0 + 648);
  if (v44)
  {
    uint64_t v48 = v44;
    uint64_t v49 = *(void *)(v0 + 552);
    sub_1AABB0();

    uint64_t v50 = sub_FD6B0();
    v40(v50);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v47, 0, 1, v49);
    sub_A208(v47, 1, v49);
    if (!v42)
    {
      id v152 = v8;
      uint64_t v51 = *(void *)(v0 + 560);
      uint64_t v52 = *(void *)(v0 + 536);
      uint64_t v148 = *(void *)(v0 + 544);
      uint64_t v150 = *(void *)(v0 + 480);
      ((void (*)(void, void, void))v40)(*(void *)(v0 + 584), *(void *)(v0 + 648), *(void *)(v0 + 552));
      uint64_t v53 = *(void (**)(void))(v51 + 16);
      sub_F1384();
      sub_47AD0();
      v53();
      sub_CD2C8();
      sub_47AD0();
      v53();
      sub_1AA9D0();
      uint64_t v54 = *(void (**)(void))(v51 + 8);
      sub_F139C();
      v54();
      sub_F139C();
      v54();
      id v8 = v152;
      sub_5B028(v148, &qword_201CC8);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v52, 0, 1, v150);
      sub_FCE44(v52, v148, &qword_201CC8);
      goto LABEL_23;
    }
  }
  else
  {
    sub_A708(*(void *)(v0 + 648), v45, v46, *(void *)(v0 + 552));
  }
  uint64_t v56 = *(void *)(v0 + 648);
  sub_E530();
  v57();
  uint64_t v55 = v56;
LABEL_22:
  sub_5B028(v55, &qword_201E10);
LABEL_23:
  uint64_t v58 = *(void *)(v0 + 528);
  uint64_t v59 = *(void *)(v0 + 480);
  sub_153CEC(*(unsigned char *)(*(void *)(v0 + 344) + 272), *(void **)(v0 + 544));
  uint64_t v60 = sub_F1384();
  sub_FCBF8(v60, v61, v62);
  sub_A208(v58, 1, v59);
  if (v42)
  {
    sub_5B028(*(void *)(v0 + 528), &qword_201CC8);
  }
  else
  {
    uint64_t v151 = v32;
    id v153 = v8;
    uint64_t v63 = *(void *)(v0 + 640);
    uint64_t v64 = *(void *)(v0 + 560);
    uint64_t v65 = *(void *)(v0 + 552);
    uint64_t v66 = *(void *)(v0 + 464);
    uint64_t v67 = *(void *)(v0 + 448);
    uint64_t v69 = *(void *)(v0 + 432);
    uint64_t v68 = *(void *)(v0 + 440);
    sub_5572C();
    v70();
    sub_1AAD00();
    (*(void (**)(uint64_t, void, uint64_t))(v68 + 104))(v67, enum case for Calendar.Component.day(_:), v69);
    sub_1AABC0();
    sub_1AACE0();
    uint64_t v149 = *(void (**)(void))(v64 + 8);
    sub_47814();
    v71();
    uint64_t v72 = sub_FD68C();
    v73(v72);
    uint64_t v74 = *(void (**)(void))(v66 + 8);
    sub_FD4A0();
    v74();
    int v75 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v63, 1, v65);
    uint64_t v76 = *(void *)(v0 + 640);
    if (v75 == 1)
    {
      sub_E530();
      v77();
      sub_5B028(v76, &qword_201E10);
    }
    else
    {
      uint64_t v147 = *(void (**)(uint64_t, uint64_t))(v0 + 568);
      sub_5572C();
      v78();
      sub_1AAD00();
      sub_1AA9F0();
      sub_1AA9C0();
      char v146 = sub_1AACF0();
      sub_47814();
      v149();
      sub_47814();
      v149();
      sub_FD898();
      sub_B7ACC();
      v74();
      sub_1AAD00();
      sub_1AA9C0();
      char v79 = sub_1AACF0();
      sub_47814();
      v149();
      sub_B7ACC();
      v74();
      uint64_t v80 = *(void *)(v0 + 480);
      uint64_t v81 = *(void *)(v0 + 488);
      if (v146 & 1) != 0 && (v79)
      {
        sub_1AC7D0();
        sub_A340();
        sub_FD3F0();
        v82();
        sub_CD2C8();
        sub_FD8A4();
        v83();
        int v84 = sub_1AC7F0();
        os_log_type_t v85 = sub_1ACF50();
        BOOL v86 = os_log_type_enabled(v84, v85);
        uint64_t v87 = *(void *)(v0 + 416);
        uint64_t v88 = *(void *)(v0 + 408);
        if (v86)
        {
          uint64_t v147 = (void (*)(uint64_t, uint64_t))(v0 + 320);
          uint64_t v145 = *(void *)(v0 + 424);
          uint64_t v89 = (uint8_t *)sub_A4B0();
          uint64_t v144 = sub_E620();
          uint64_t v156 = v144;
          *(_DWORD *)uint64_t v89 = 136315138;
          sub_FCE94(&qword_206728, (void (*)(uint64_t))&type metadata accessor for DateInterval);
          uint64_t v90 = sub_1AD2C0();
          *(void *)(v0 + 320) = sub_4A278(v90, v91, &v156);
          sub_1ACFE0();
          swift_bridgeObjectRelease();
          uint64_t v92 = sub_FD358();
          v93(v92);
          _os_log_impl(&def_342E4, v84, v85, "%s seems like a request for last night, removing intervals from deep link", v89, 0xCu);
          sub_FD82C();
          sub_A1F0();
          sub_A1F0();

          (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v145, v88);
        }
        else
        {
          uint64_t v96 = sub_FD358();
          v97(v96);

          uint64_t v98 = sub_FD8D4();
          v100(v98, v99);
        }
        uint64_t v101 = *(void *)(v0 + 536);
        uint64_t v102 = *(void *)(v0 + 504);
        uint64_t v103 = *(void *)(v0 + 480);
        sub_FD4F0();
        sub_5B028(v101, &qword_201CC8);
        sub_F1384();
        sub_E530();
        v105(v104);
        v147(v102, v103);
        uint64_t v106 = sub_FD704();
        sub_FCEF0(v106, v107, v108);
      }
      else
      {
        uint64_t v94 = *(void *)(v0 + 504);
        sub_47814();
        v95();
        (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v94, v80);
      }
    }
    uint64_t v32 = v151;
    id v8 = v153;
  }
  id v109 = objc_msgSend(*v155, "start", v144);
  if (v109)
  {
    uint64_t v110 = v109;
    sub_1AABB0();

    uint64_t v111 = 0;
  }
  else
  {
    uint64_t v111 = 1;
  }
  uint64_t v112 = *(void **)(v0 + 328);
  uint64_t v113 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 632), v111, 1, *(void *)(v0 + 552));
  id v114 = [v112 end];
  if (v114)
  {
    char v115 = v114;
    sub_1AABB0();

    uint64_t v113 = 0;
  }
  uint64_t v116 = *(void **)(v0 + 336);
  uint64_t v117 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 624), v113, 1, *(void *)(v0 + 552));
  id v118 = [v116 summaryStartDate];
  if (v118)
  {
    uint64_t v119 = v118;
    sub_1AABB0();

    uint64_t v117 = 0;
  }
  uint64_t v120 = *(void **)(v0 + 336);
  uint64_t v121 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 616), v117, 1, *(void *)(v0 + 552));
  id v122 = [v120 summaryEndDate];
  if (v122)
  {
    id v123 = v122;
    sub_1AABB0();

    uint64_t v121 = 0;
  }
  uint64_t v124 = *(void **)(v0 + 336);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 608), v121, 1, *(void *)(v0 + 552));
  type metadata accessor for WellnessTime(0);
  sub_FD710();
  uint64_t v126 = v125;
  *(void *)(v0 + 704) = v125;
  id v127 = (char *)[v124 daysSummarized];
  uint64_t v128 = *(void *)(v0 + 344);
  if (v127 == (unsigned char *)&def_342E4 + 1)
  {
    uint64_t v129 = *(void **)(v0 + 336);
    sub_2E38((void *)(v128 + 200), *(void *)(v128 + 224));
    sub_FD74C();
    swift_retain();
    id v130 = v129;
    id v131 = (void *)swift_task_alloc();
    *(void *)(v0 + 712) = v131;
    *id v131 = v0;
    uint64_t v132 = sub_FAFF4;
    goto LABEL_53;
  }
  uint64_t v133 = (void *)(v128 + 200);
  if (v5 <= 0.0 || v7 <= 0.0)
  {
    uint64_t v140 = *(void **)(v0 + 336);
    sub_2E38(v133, *(void *)(v128 + 224));
    sub_FD74C();
    swift_retain();
    id v141 = v140;
    id v131 = (void *)swift_task_alloc();
    *(void *)(v0 + 720) = v131;
    *id v131 = v0;
    uint64_t v132 = sub_FB498;
LABEL_53:
    v131[1] = v132;
    sub_FD8B0();
    __asm { BR              X6 }
  }
  uint64_t v134 = *(void *)(v0 + 520);
  uint64_t v135 = *(void *)(v0 + 336);
  sub_9DE0((uint64_t)v133, v0 + 176);
  sub_2E38((void *)(v0 + 176), *(void *)(v0 + 200));
  uint64_t v136 = swift_task_alloc();
  *(void *)(v0 + 728) = v136;
  *(void *)(v136 + 16) = v128;
  *(void *)(v136 + 24) = v134;
  *(void *)(v136 + 32) = v32;
  *(void *)(v136 + 40) = v126;
  *(void *)(v136 + 48) = v135;
  *(double *)(v136 + 56) = (double)(uint64_t)v8 / (double)(uint64_t)v154;
  uint64_t v137 = (void *)swift_task_alloc();
  *(void *)(v0 + 736) = v137;
  *uint64_t v137 = v0;
  v137[1] = sub_FB7A0;
  sub_FD8B0();
  return sub_87144();
}

uint64_t sub_FAFF4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  v2[30] = v1;
  v2[31] = v4;
  v2[32] = v0;
  sub_470E4();
  uint64_t v5 = *v1;
  sub_E53C();
  *double v6 = v5;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_FB0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_47458();
  sub_47B50();
  id v33 = sub_FD2FC(*(void **)(v32 + 248));
  sub_1AB070();
  uint64_t v34 = sub_FD27C();
  v35(v34);
  sub_FD644();
  uint64_t v36 = sub_FD334();
  v37(v36);
  id v38 = [v33 patternId];
  uint64_t v39 = sub_1ACDD0();

  sub_FD60C();
  uint64_t v40 = sub_FD45C();
  sub_FD660(v40);
  uint64_t v51 = sub_1AAF70();
  swift_release();
  swift_release();

  sub_47814();
  v41();
  sub_5B028(a28, &qword_201CC8);
  swift_release();
  sub_FCF48();
  sub_5B028(v39, &qword_201E20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A444();
  sub_4743C();
  return v44(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           v51,
           a30,
           a31,
           a32);
}

uint64_t sub_FB2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_47458();
  sub_47B50();
  sub_FD4C8();
  sub_9BA4();
  uint64_t v44 = sub_1AAF70();
  swift_release();
  swift_release();
  sub_9BF0(v33 + 16);
  sub_5B028(v34, &qword_201CC8);
  sub_FCF48();
  sub_5B028(v32, &qword_201E20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A444();
  sub_4743C();
  return v37(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           v44,
           a30,
           a31,
           a32);
}

uint64_t sub_FB498()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  v2[33] = v1;
  v2[34] = v4;
  v2[35] = v0;
  sub_470E4();
  uint64_t v5 = *v1;
  sub_E53C();
  *double v6 = v5;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_FB580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_47458();
  sub_47B50();
  id v33 = sub_FD2FC(*(void **)(v32 + 272));
  sub_1AB070();
  uint64_t v34 = sub_FD27C();
  v35(v34);
  sub_FD644();
  uint64_t v36 = sub_FD334();
  v37(v36);
  id v38 = [v33 patternId];
  uint64_t v39 = sub_1ACDD0();

  sub_FD60C();
  uint64_t v40 = sub_FD45C();
  sub_FD660(v40);
  uint64_t v51 = sub_1AAF70();
  swift_release();
  swift_release();

  sub_47814();
  v41();
  sub_5B028(a28, &qword_201CC8);
  swift_release();
  sub_FCF48();
  sub_5B028(v39, &qword_201E20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A444();
  sub_4743C();
  return v44(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           v51,
           a30,
           a31,
           a32);
}

uint64_t sub_FB7A0()
{
  sub_E53C();
  *uint64_t v3 = v2;
  v2[36] = v1;
  v2[37] = v4;
  v2[38] = v0;
  uint64_t v5 = *v1;
  sub_E53C();
  *double v6 = v5;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_FB8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_47458();
  sub_47B50();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v32 + 176);
  uint64_t v54 = *(void *)(v32 + 544);
  uint64_t v52 = *(void *)(v32 + 704);
  uint64_t v53 = *(void *)(v32 + 384);
  uint64_t v33 = *(void *)(v32 + 344);
  id v34 = *(id *)(v32 + 296);
  sub_1AB070();
  uint64_t v35 = sub_FD27C();
  v36(v35);
  sub_FD644();
  uint64_t v37 = sub_FD334();
  v38(v37);
  id v39 = [v34 patternId];
  sub_1ACDD0();

  sub_FD60C();
  uint64_t v40 = *(void *)(v33 + 104);
  sub_2E38((void *)(v33 + 80), v40);
  uint64_t v41 = sub_1AAF40();
  sub_FD660(v41);
  uint64_t v55 = sub_1AAF70();
  swift_release();
  swift_release();

  sub_47814();
  v42();
  sub_5B028(v54, &qword_201CC8);
  swift_release();
  sub_FCF48();
  sub_5B028(v40, &qword_201E20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A444();
  sub_4743C();
  return v45(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           v52,
           v53,
           v54,
           v55,
           a30,
           a31,
           a32);
}

uint64_t sub_FBB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_47458();
  sub_47B50();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v33 + 176);
  sub_FD4C8();
  sub_9BA4();
  uint64_t v44 = sub_1AAF70();
  swift_release();
  swift_release();
  sub_9BF0(v33 + 16);
  sub_5B028(v34, &qword_201CC8);
  sub_FCF48();
  sub_5B028(v32, &qword_201E20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A444();
  sub_4743C();
  return v37(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           v44,
           a30,
           a31,
           a32);
}

uint64_t sub_FBD00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  uint64_t v12 = sub_1AAC20();
  sub_52C4();
  __chkstk_darwin(v13);
  sub_FD558();
  sub_52C4();
  __chkstk_darwin(v14);
  sub_A608();
  uint64_t v15 = sub_2694(&qword_201E28);
  uint64_t v16 = sub_53D4(v15);
  __chkstk_darwin(v16);
  if (sub_FD3A0())
  {
    uint64_t v17 = sub_1AC1E0();
    sub_A708(v8, v18, v19, v17);
  }
  else
  {
    char v51 = a5;
    uint64_t v52 = a6;
    uint64_t v20 = sub_FD3D0();
    v21(v20);
    id v22 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v23);
    uint64_t v25 = v24;
    [v22 setPunchOutUri:v24];

    id v26 = v22;
    sub_1AAC10();
    uint64_t v27 = sub_1AABE0();
    uint64_t v29 = v28;
    sub_E558();
    v30();
    sub_1949C4(v27, v29, v26);

    id v31 = [v26 dictionary];
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v33 = self;
      id v34 = sub_FD80C(v33, "dataWithPropertyList:format:options:error:");
      uint64_t v35 = (char *)0;
      if (v34)
      {
        double v6 = (char *)sub_1AAB30();
        unint64_t v37 = v36;

        sub_1AAB20(0);
        uint64_t v12 = v38;
        sub_1ACE40();

        sub_9F08((uint64_t)v6, v37);
        swift_bridgeObjectRelease();
        uint64_t v39 = sub_1AC1E0();
        uint64_t v40 = v8;
        uint64_t v41 = 0;
      }
      else
      {
        double v6 = v35;
        uint64_t v43 = sub_1AAAB0();

        uint64_t v12 = v43;
        swift_willThrow();

        swift_errorRelease();
        uint64_t v39 = sub_1AC1E0();
        uint64_t v40 = v8;
        uint64_t v41 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v40, v41, 1, v39);
    }
    else
    {
      uint64_t v42 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, 1, 1, v42);
    }
    sub_E558();
    v44();
    a6 = v52;
    a5 = v51;
  }
  sub_FCEF0(v8, a1, &qword_201E28);
  type metadata accessor for WellnessQueryingSleep_SimpleResultParameters(0);
  sub_FD6E0();
  swift_release();
  sub_FD580();
  swift_release();
  *(void *)&v6[a1] = v7;
  if (a5)
  {
    uint64_t v45 = sub_1AC150();
    sub_47658();
    sub_1AC140();
    [a6 totalAsleepDuration];
    sub_FD264();
    sub_55A24();
    sub_1AC120();
    sub_FD734();
    swift_release();
    sub_FD7C0();
    sub_1AC140();
    [a6 averageAsleepDuration];
    sub_FD264();
    sub_FD7E0();
    uint64_t v46 = v45;
    sub_1AC120();
    sub_557C4();
    uint64_t v47 = *(int *)(v12 + 20);
    swift_release();
    *(void *)(a1 + v47) = v46;
  }
  uint64_t v48 = sub_1AC150();
  sub_47658();
  sub_1AC140();
  [a6 totalInBedDuration];
  sub_FD264();
  sub_55A24();
  sub_1AC120();
  sub_FD734();
  swift_release();
  sub_FD7C0();
  sub_1AC140();
  [a6 averageInBedDuration];
  sub_FD264();
  sub_FD7E0();
  sub_1AC120();
  sub_557C4();
  uint64_t v49 = *(int *)(v12 + 24);
  uint64_t result = swift_release();
  *(void *)(a1 + v49) = v48;
  return result;
}

uint64_t sub_FC180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  uint64_t v12 = sub_1AAC20();
  sub_52C4();
  __chkstk_darwin(v13);
  sub_FD558();
  sub_52C4();
  __chkstk_darwin(v14);
  sub_A608();
  uint64_t v15 = sub_2694(&qword_201E28);
  uint64_t v16 = sub_53D4(v15);
  __chkstk_darwin(v16);
  if (sub_FD3A0())
  {
    uint64_t v17 = sub_1AC1E0();
    sub_A708(v8, v18, v19, v17);
  }
  else
  {
    char v48 = a5;
    uint64_t v49 = a6;
    uint64_t v20 = sub_FD3D0();
    v21(v20);
    id v22 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v23);
    uint64_t v25 = v24;
    [v22 setPunchOutUri:v24];

    id v26 = v22;
    sub_1AAC10();
    uint64_t v27 = sub_1AABE0();
    uint64_t v29 = v28;
    sub_E558();
    v30();
    sub_1949C4(v27, v29, v26);

    id v31 = [v26 dictionary];
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v33 = self;
      id v34 = sub_FD80C(v33, "dataWithPropertyList:format:options:error:");
      id v35 = 0;
      if (v34)
      {
        uint64_t v6 = sub_1AAB30();
        unint64_t v37 = v36;

        sub_1AAB20(0);
        uint64_t v12 = v38;
        sub_1ACE40();

        sub_9F08(v6, v37);
        swift_bridgeObjectRelease();
        uint64_t v39 = sub_1AC1E0();
        uint64_t v40 = v8;
        uint64_t v41 = 0;
      }
      else
      {
        uint64_t v6 = (uint64_t)v35;
        uint64_t v43 = sub_1AAAB0();

        uint64_t v12 = v43;
        swift_willThrow();

        swift_errorRelease();
        uint64_t v39 = sub_1AC1E0();
        uint64_t v40 = v8;
        uint64_t v41 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v40, v41, 1, v39);
    }
    else
    {
      uint64_t v42 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, 1, 1, v42);
    }
    sub_E558();
    v44();
    a6 = v49;
    a5 = v48;
  }
  sub_FCEF0(v8, a1, &qword_201E28);
  type metadata accessor for WellnessQueryingSleep_SimpleResultParameters(0);
  sub_FD6E0();
  swift_release();
  sub_FD580();
  swift_release();
  *(void *)(a1 + v6) = v7;
  if (a5)
  {
    sub_1AC150();
    sub_47658();
    sub_1AC140();
    [a6 averageAsleepDuration];
    sub_FD264();
    sub_FD7E0();
    uint64_t v45 = v6;
    sub_1AC120();
    sub_557C4();
    uint64_t v6 = *(int *)(v12 + 20);
    swift_release();
    *(void *)(a1 + v6) = v45;
  }
  sub_1AC150();
  sub_47658();
  sub_1AC140();
  [a6 averageInBedDuration];
  sub_FD264();
  sub_FD7E0();
  sub_1AC120();
  sub_557C4();
  uint64_t v46 = *(int *)(v12 + 24);
  uint64_t result = swift_release();
  *(void *)(a1 + v46) = v6;
  return result;
}

uint64_t sub_FC578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, double a7)
{
  uint64_t v61 = a5;
  id v62 = a6;
  uint64_t v60 = a4;
  uint64_t v11 = sub_1AAC20();
  uint64_t v57 = *(void *)(v11 - 8);
  uint64_t v58 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1AAB10();
  uint64_t v59 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_2694(&qword_201E28);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v22 = (char *)&v56 - v21;
  sub_2F2B8(*(unsigned char *)(a2 + 272));
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v23 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v22, 0, 1, v23);
  uint64_t v24 = (int *)type metadata accessor for WellnessQueryingSleep_DetailedResultParameters(0);
  sub_FCEF0((uint64_t)v22, a1 + v24[7], &qword_201E28);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a3, 1, v14))
  {
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 1, 1, v23);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v16, a3, v14);
    id v25 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    uint64_t v56 = v16;
    sub_1AAAE0(v26);
    uint64_t v28 = v27;
    [v25 setPunchOutUri:v27];

    id v29 = v25;
    sub_1AAC10();
    uint64_t v30 = sub_1AABE0();
    uint64_t v32 = v31;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v13, v58);
    sub_1949C4(v30, v32, v29);

    id v33 = [v29 dictionary];
    uint64_t v34 = v14;
    if (v33)
    {
      id v35 = v33;
      unint64_t v36 = self;
      id v63 = 0;
      id v37 = [v36 dataWithPropertyList:v35 format:200 options:0 error:&v63];
      id v38 = v63;
      if (v37)
      {
        uint64_t v39 = sub_1AAB30();
        unint64_t v41 = v40;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v39, v41);
        swift_bridgeObjectRelease();
        uint64_t v42 = (uint64_t)v20;
        uint64_t v43 = 0;
      }
      else
      {
        uint64_t v44 = v38;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v42 = (uint64_t)v20;
        uint64_t v43 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v42, v43, 1, v23);
    }
    else
    {
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 1, 1, v23);
    }
    (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v34);
  }
  sub_FCEF0((uint64_t)v20, a1, &qword_201E28);
  uint64_t v45 = v24[14];
  uint64_t v46 = v60;
  swift_retain();
  swift_release();
  *(void *)(a1 + v45) = v46;
  uint64_t v47 = v24[15];
  uint64_t v48 = v61;
  swift_retain();
  swift_release();
  *(void *)(a1 + v47) = v48;
  sub_1AC150();
  swift_allocObject();
  sub_1AC140();
  id v49 = v62;
  [v62 averageAsleepDuration];
  sub_1AC130();
  swift_release();
  uint64_t v50 = sub_1AC120();
  swift_release();
  uint64_t v51 = v24[5];
  swift_release();
  *(void *)(a1 + v51) = v50;
  swift_allocObject();
  sub_1AC140();
  [v49 averageInBedDuration];
  sub_1AC130();
  swift_release();
  uint64_t v52 = sub_1AC120();
  swift_release();
  uint64_t v53 = v24[6];
  uint64_t result = swift_release();
  *(void *)(a1 + v53) = v52;
  uint64_t v55 = a1 + v24[13];
  *(double *)uint64_t v55 = a7;
  *(unsigned char *)(v55 + 8) = 0;
  return result;
}

uint64_t sub_FCB0C()
{
  os_log_type_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_E230;
  return sub_F3E58();
}

uint64_t sub_FCBA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_FCBF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2EFF8(a1, a2, a3);
  sub_20688();
  uint64_t v4 = sub_CD4DC();
  v5(v4);
  return v3;
}

uint64_t sub_FCC3C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_20688();
  uint64_t v4 = sub_CD4DC();
  v5(v4);
  return a2;
}

uint64_t sub_FCC90(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  sub_E558();
  v3();
  return a1;
}

uint64_t sub_FCCE4()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_FCD1C()
{
  sub_A364();
  os_log_type_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_E230;
  uint64_t v2 = sub_47228();
  return sub_45618(v2, v3);
}

uint64_t sub_FCDB0()
{
  sub_A364();
  os_log_type_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_E50C;
  uint64_t v2 = sub_47228();
  return sub_3F878(v2, v3);
}

uint64_t sub_FCE44(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2EFF8(a1, a2, a3);
  sub_20688();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v3, v4);
  return v3;
}

uint64_t sub_FCE94(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_FCEDC(uint64_t a1)
{
  return sub_FC578(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(double *)(v1 + 56));
}

uint64_t sub_FCEF0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_2EFF8(a1, a2, a3);
  sub_20688();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v3, v4);
  return v3;
}

void sub_FCF48()
{
  uint64_t v2 = v0[50];
  *(void *)(v1 - 112) = v0[53];
  *(void *)(v1 - 104) = v2;
  uint64_t v3 = v0[46];
  *(void *)(v1 - 96) = v0[47];
  *(void *)(v1 - 88) = v3;
}

uint64_t sub_FCFE8()
{
  uint64_t v3 = v0[163];
  *(void *)(v1 - 184) = v0[164];
  *(void *)(v1 - 176) = v3;
  uint64_t v4 = v0[161];
  *(void *)(v1 - 168) = v0[162];
  *(void *)(v1 - 160) = v4;
  uint64_t v5 = v0[158];
  *(void *)(v1 - 152) = v0[159];
  *(void *)(v1 - 144) = v5;
  uint64_t v6 = v0[156];
  *(void *)(v1 - 136) = v0[157];
  *(void *)(v1 - 128) = v6;
  uint64_t v7 = v0[153];
  *(void *)(v1 - 120) = v0[154];
  *(void *)(v1 - 112) = v7;
  *(void *)(v1 - 104) = v0[152];
  return swift_task_dealloc();
}

uint64_t sub_FD0F4()
{
  uint64_t v3 = v0[161];
  *(void *)(v1 - 200) = v0[162];
  *(void *)(v1 - 192) = v3;
  uint64_t v4 = v0[158];
  *(void *)(v1 - 184) = v0[159];
  *(void *)(v1 - 176) = v4;
  uint64_t v5 = v0[156];
  *(void *)(v1 - 168) = v0[157];
  *(void *)(v1 - 160) = v5;
  uint64_t v6 = v0[153];
  *(void *)(v1 - 152) = v0[154];
  *(void *)(v1 - 144) = v6;
  *(void *)(v1 - 136) = v0[152];
  return swift_task_dealloc();
}

uint64_t sub_FD200()
{
  return swift_task_dealloc();
}

uint64_t sub_FD264()
{
  return sub_1AC130();
}

uint64_t sub_FD27C()
{
  return v0;
}

uint64_t sub_FD29C()
{
  return *(void *)(v0 + 1664);
}

uint64_t sub_FD2D0()
{
  return *(void *)(v0 + 1576);
}

id sub_FD2FC@<X0>(void *a1@<X8>)
{
  uint64_t v4 = v1[88];
  *(void *)(v2 - 112) = v1[87];
  *(void *)(v2 - 104) = v4;
  uint64_t v5 = v1[68];
  *(void *)(v2 - 96) = v1[48];
  *(void *)(v2 - 88) = v5;
  return a1;
}

uint64_t sub_FD334()
{
  return v0;
}

uint64_t sub_FD358()
{
  return v0;
}

uint64_t sub_FD37C()
{
  return v0;
}

uint64_t sub_FD3A0()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, v1);
}

uint64_t sub_FD3D0()
{
  *(void *)(v2 - 152) = v1;
  return v0;
}

BOOL sub_FD440(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_FD45C()
{
  sub_2E38((void *)(v0 + 80), *(void *)(v0 + 104));
  return sub_1AAF40();
}

uint64_t sub_FD4AC()
{
  return v0;
}

uint64_t sub_FD4C8()
{
  uint64_t v3 = *(void *)(v1 + 344) + 80;
  return sub_9B48(v3, v0);
}

void sub_FD4F0()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v0, 1, 1, v1);
  sub_153CEC(v2, v0);
}

uint64_t sub_FD530()
{
  return swift_retain();
}

uint64_t sub_FD558()
{
  return sub_1AAB10();
}

uint64_t sub_FD580()
{
  *(void *)(v0 + v1) = v2;
  return swift_retain();
}

uint64_t sub_FD5A4()
{
  return *(void *)(v0 + 1064);
}

uint64_t sub_FD5BC(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 1, 1, v1);
}

uint64_t sub_FD60C()
{
  return sub_1AB380();
}

uint64_t sub_FD628()
{
  return swift_arrayDestroy();
}

uint64_t sub_FD644()
{
  return sub_1AB370();
}

uint64_t sub_FD660(uint64_t a1)
{
  *(void *)(v1 + 312) = a1;
  return sub_1AAEF0();
}

uint64_t sub_FD67C()
{
  return v0;
}

uint64_t sub_FD68C()
{
  return v0;
}

uint64_t sub_FD698()
{
  return v0;
}

uint64_t sub_FD6B0()
{
  return v0;
}

uint64_t sub_FD6C8()
{
  return v0;
}

uint64_t sub_FD6E0()
{
  return swift_retain();
}

uint64_t sub_FD704()
{
  return v0;
}

void sub_FD710()
{
  sub_1993BC();
}

uint64_t sub_FD734()
{
  return swift_release();
}

uint64_t sub_FD74C()
{
  return swift_retain();
}

uint64_t sub_FD770()
{
  *(void *)(v2 + v1) = v0;
  return swift_allocObject();
}

uint64_t sub_FD790()
{
  return sub_1AC150();
}

id sub_FD7A8()
{
  uint64_t v3 = *(const char **)(v1 + 3688);
  return [v0 v3];
}

uint64_t sub_FD7C0()
{
  *(void *)(v0 + v2) = v1;
  return swift_allocObject();
}

uint64_t sub_FD7E0()
{
  return swift_release();
}

uint64_t sub_FD7F8()
{
  return 0x6D6954677661;
}

id sub_FD80C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2, 200, 0, v3 - 96);
}

uint64_t sub_FD82C()
{
  return swift_arrayDestroy();
}

uint64_t sub_FD84C()
{
  return swift_release();
}

uint64_t sub_FD864(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v3 + 552);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v2, a2, 1, v5);
}

uint64_t sub_FD884(uint64_t a1)
{
  *(void *)(v1 + 1168) = a1;
  return *(void *)(v2 - 152);
}

uint64_t sub_FD898()
{
  return v0;
}

uint64_t sub_FD8D4()
{
  return v0;
}

uint64_t sub_FD8F4@<X0>(char a1@<W1>, char a2@<W3>, char a3@<W5>, uint64_t a4@<X6>, char a5@<W7>, uint64_t a6@<X8>, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  BOOL v53 = (a5 & 1) == 0;
  uint64_t v19 = sub_2694(&qword_2022C8);
  uint64_t v20 = sub_53D4(v19);
  __chkstk_darwin(v20);
  sub_53E0();
  uint64_t v56 = v21;
  uint64_t v55 = sub_1AAD90();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a6, 1, 1, v55);
  uint64_t Model = (int *)type metadata accessor for TemperatureQueryModel();
  uint64_t v23 = a6 + Model[10];
  uint64_t v52 = v23;
  uint64_t v24 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v23, 1, 1, v24);
  id v25 = (void *)(a6 + Model[11]);
  *id v25 = 0;
  v25[1] = 0;
  uint64_t v57 = (void *)(a6 + Model[12]);
  *uint64_t v57 = 0;
  v57[1] = 0;
  uint64_t v58 = (void *)(a6 + Model[13]);
  *uint64_t v58 = 0;
  v58[1] = 0;
  uint64_t v59 = (void *)(a6 + Model[14]);
  *uint64_t v59 = 0;
  v59[1] = 0;
  uint64_t v60 = (uint64_t *)(a6 + Model[15]);
  *uint64_t v60 = 0;
  v60[1] = 0;
  uint64_t v26 = a6 + Model[16];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v26, 1, 1, v24);
  uint64_t v27 = (void *)(a6 + Model[17]);
  void *v27 = 0;
  v27[1] = 0;
  uint64_t v28 = a6 + Model[18];
  uint64_t v51 = v28;
  uint64_t v29 = type metadata accessor for SnippetHeaderModel();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v28, 1, 1, v29);
  sub_10223C();
  sub_102230();
  char v31 = a1 | v30;
  uint64_t v32 = a6 + Model[5];
  *(void *)uint64_t v32 = v33;
  *(unsigned char *)(v32 + 8) = v31 & 1;
  sub_10223C();
  sub_102230();
  char v35 = a2 | v34;
  uint64_t v36 = a6 + Model[6];
  *(void *)uint64_t v36 = v37;
  *(unsigned char *)(v36 + 8) = v35 & 1;
  sub_10223C();
  sub_102230();
  char v39 = a3 | v38;
  uint64_t v40 = a6 + Model[7];
  *(void *)uint64_t v40 = v41;
  *(unsigned char *)(v40 + 8) = v39 & 1;
  if (v53 && (a4 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = a4;
  }
  uint64_t v43 = a6 + Model[8];
  *(void *)uint64_t v43 = v42;
  *(unsigned char *)(v43 + 8) = a5 & 1 | ((a4 & 0x7FFFFFFFFFFFFFFFLL) == 0);
  sub_10223C();
  sub_102230();
  uint64_t v45 = a6 + Model[9];
  *(void *)uint64_t v45 = v46;
  *(unsigned char *)(v45 + 8) = (a8 | v44) & 1;
  sub_2EEC4(a9, v26, &qword_201E28);
  sub_2EEC4(a10, v52, &qword_201E28);
  sub_FE6C0(a11);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v56, 0, 1, v55);
  sub_2B7FC(v56, a6, &qword_2022C8);
  swift_bridgeObjectRelease();
  void *v27 = a12;
  v27[1] = a13;
  sub_2EEC4(a14, v51, &qword_2022D0);
  sub_102254(*(void *)v32, *(unsigned char *)(v32 + 8));
  sub_102248();
  swift_bridgeObjectRelease();
  *id v25 = v27;
  v25[1] = v32;
  sub_102254(*(void *)v36, *(unsigned char *)(v36 + 8));
  sub_102248();
  swift_bridgeObjectRelease();
  *uint64_t v57 = v27;
  v57[1] = v32;
  sub_FE888(*(void *)v40, *(unsigned char *)(v40 + 8), v26, 0);
  sub_102248();
  swift_bridgeObjectRelease();
  *uint64_t v58 = v27;
  v58[1] = v32;
  sub_102254(*(void *)v43, *(unsigned char *)(v43 + 8));
  sub_102248();
  swift_bridgeObjectRelease();
  *uint64_t v59 = v27;
  v59[1] = v32;
  uint64_t v47 = sub_102254(*(void *)v45, *(unsigned char *)(v45 + 8));
  uint64_t v49 = v48;
  sub_2EF0C(a14, &qword_2022D0);
  sub_2EF0C(a11, &qword_201E20);
  sub_2EF0C(a10, &qword_201E28);
  sub_2EF0C(a9, &qword_201E28);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v60 = v47;
  v60[1] = v49;
  return result;
}

uint64_t TemperatureQueryModel.averageValue.getter()
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 20));
}

uint64_t type metadata accessor for TemperatureQueryModel()
{
  uint64_t result = qword_2067A0;
  if (!qword_2067A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void TemperatureQueryModel.averageValue.setter()
{
  uint64_t v0 = sub_1021FC();
  sub_2EFC0(*(int *)(v0 + 20));
}

uint64_t (*TemperatureQueryModel.averageValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t TemperatureQueryModel.maxValue.getter()
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 24));
}

void TemperatureQueryModel.maxValue.setter()
{
  uint64_t v0 = sub_1021FC();
  sub_2EFC0(*(int *)(v0 + 24));
}

uint64_t (*TemperatureQueryModel.maxValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t TemperatureQueryModel.minValue.getter()
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 28));
}

void TemperatureQueryModel.minValue.setter()
{
  uint64_t v0 = sub_1021FC();
  sub_2EFC0(*(int *)(v0 + 28));
}

uint64_t (*TemperatureQueryModel.minValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t TemperatureQueryModel.mostRecentValue.getter()
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 32));
}

void TemperatureQueryModel.mostRecentValue.setter()
{
  uint64_t v0 = sub_1021FC();
  sub_2EFC0(*(int *)(v0 + 32));
}

uint64_t (*TemperatureQueryModel.mostRecentValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t TemperatureQueryModel.basalTemperatureValue.getter()
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 36));
}

void TemperatureQueryModel.basalTemperatureValue.setter()
{
  uint64_t v0 = sub_1021FC();
  sub_2EFC0(*(int *)(v0 + 36));
}

uint64_t (*TemperatureQueryModel.basalTemperatureValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t TemperatureQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  return sub_2EF60(v1 + *(int *)(Model + 40), a1, &qword_201E28);
}

uint64_t TemperatureQueryModel.dateLabel.setter()
{
  uint64_t v2 = sub_1021E4();
  return sub_2B7FC(v0, v1 + *(int *)(v2 + 40), &qword_201E28);
}

uint64_t (*TemperatureQueryModel.dateLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t TemperatureQueryModel.averageValueString.getter()
{
  return sub_22F80();
}

uint64_t TemperatureQueryModel.averageValueString.setter(uint64_t a1, uint64_t a2)
{
  sub_1021FC();
  uint64_t result = sub_7A45C();
  void *v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.averageValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t TemperatureQueryModel.maxValueString.getter()
{
  return sub_22F80();
}

uint64_t TemperatureQueryModel.maxValueString.setter(uint64_t a1, uint64_t a2)
{
  sub_1021FC();
  uint64_t result = sub_7A45C();
  void *v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.maxValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t TemperatureQueryModel.minValueString.getter()
{
  return sub_22F80();
}

uint64_t TemperatureQueryModel.minValueString.setter(uint64_t a1, uint64_t a2)
{
  sub_1021FC();
  uint64_t result = sub_7A45C();
  void *v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.minValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t TemperatureQueryModel.mostRecentValueString.getter()
{
  return sub_22F80();
}

uint64_t TemperatureQueryModel.mostRecentValueString.setter(uint64_t a1, uint64_t a2)
{
  sub_1021FC();
  uint64_t result = sub_7A45C();
  void *v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.mostRecentValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t TemperatureQueryModel.basalTemperatureValueString.getter()
{
  return sub_22F80();
}

uint64_t TemperatureQueryModel.basalTemperatureValueString.setter(uint64_t a1, uint64_t a2)
{
  sub_1021FC();
  uint64_t result = sub_7A45C();
  void *v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.basalTemperatureValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t TemperatureQueryModel.unitString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  return sub_2EF60(v1 + *(int *)(Model + 64), a1, &qword_201E28);
}

uint64_t TemperatureQueryModel.unitString.setter()
{
  uint64_t v2 = sub_1021E4();
  return sub_2B7FC(v0, v1 + *(int *)(v2 + 64), &qword_201E28);
}

uint64_t (*TemperatureQueryModel.unitString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t TemperatureQueryModel.averageLabelString.getter()
{
  return sub_22F80();
}

uint64_t TemperatureQueryModel.averageLabelString.setter(uint64_t a1, uint64_t a2)
{
  sub_1021FC();
  uint64_t result = sub_7A45C();
  void *v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t (*TemperatureQueryModel.averageLabelString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t TemperatureQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  return sub_2EF60(v1 + *(int *)(Model + 72), a1, &qword_2022D0);
}

uint64_t TemperatureQueryModel.snippetHeaderModel.setter()
{
  uint64_t v2 = sub_1021E4();
  return sub_2B7FC(v0, v1 + *(int *)(v2 + 72), &qword_2022D0);
}

uint64_t (*TemperatureQueryModel.snippetHeaderModel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t sub_FE6C0(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201E20);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AAB10();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2EF60(a1, (uint64_t)v4, &qword_201E20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_2EF0C((uint64_t)v4, &qword_201E20);
    return sub_1AAD80();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_1AAAD0();
    sub_1AAD80();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_FE888(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v6 = sub_2694(&qword_201E28);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v17 - v10;
  if ((a2 & 1) == 0)
  {
    sub_1ABFF0();
    swift_allocObject();
    sub_1ABFE0();
    sub_1AC050();
    swift_release();
    sub_1AC040();
    swift_release();
    sub_1AC030();
    swift_release();
    if (a4)
    {
      sub_1ABFC0();
      uint64_t v12 = sub_1AC1E0();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1, v12) != 1)
      {
        uint64_t v15 = sub_1AC1D0();
        swift_release();
        (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
        return v15;
      }
      swift_release();
      uint64_t v13 = (uint64_t)v11;
    }
    else
    {
      sub_1ABFD0();
      uint64_t v14 = sub_1AC1E0();
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1, v14) != 1)
      {
        uint64_t v15 = sub_1AC1D0();
        swift_release();
        (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v9, v14);
        return v15;
      }
      swift_release();
      uint64_t v13 = (uint64_t)v9;
    }
    sub_2EF0C(v13, &qword_201E28);
  }
  return 0;
}

uint64_t sub_FEAC4(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x5665676172657661 && a2 == 0xEC00000065756C61;
    if (v6 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000;
      if (v7 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000;
        if (v8 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x6563655274736F6DLL && a2 == 0xEF65756C6156746ELL;
          if (v9 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else if (a1 == 0xD000000000000015 && a2 == 0x80000000001BC300 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            BOOL v10 = a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL;
            if (v10 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else if (a1 == 0xD000000000000012 && a2 == 0x80000000001BAB70 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 7;
            }
            else
            {
              BOOL v11 = a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453;
              if (v11 || (sub_1AD2F0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 8;
              }
              else
              {
                BOOL v12 = a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453;
                if (v12 || (sub_1AD2F0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 9;
                }
                else if (a1 == 0xD000000000000015 && a2 == 0x80000000001BC320 || (sub_1AD2F0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 10;
                }
                else if (a1 == 0xD00000000000001BLL && a2 == 0x80000000001BC340 || (sub_1AD2F0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 11;
                }
                else
                {
                  BOOL v13 = a1 == 0x6972745374696E75 && a2 == 0xEA0000000000676ELL;
                  if (v13 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 12;
                  }
                  else if (a1 == 0xD000000000000012 && a2 == 0x80000000001BC360 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 13;
                  }
                  else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B78B0)
                  {
                    swift_bridgeObjectRelease();
                    return 14;
                  }
                  else
                  {
                    char v14 = sub_1AD2F0();
                    swift_bridgeObjectRelease();
                    if (v14) {
                      return 14;
                    }
                    else {
                      return 15;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_FF070()
{
  return 15;
}

uint64_t sub_FF078(char a1)
{
  uint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
      return 0x5665676172657661;
    case 2:
      unsigned int v3 = 1450729837;
      return v3 | 0x65756C6100000000;
    case 3:
      unsigned int v3 = 1450076525;
      return v3 | 0x65756C6100000000;
    case 4:
      return 0x6563655274736F6DLL;
    case 5:
      return result;
    case 6:
      return 0x6562614C65746164;
    case 7:
    case 13:
    case 14:
      return 0xD000000000000012;
    case 8:
      unsigned int v4 = 1450729837;
      goto LABEL_11;
    case 9:
      unsigned int v4 = 1450076525;
LABEL_11:
      uint64_t result = v4 | 0x65756C6100000000;
      break;
    case 10:
      uint64_t result = 0xD000000000000015;
      break;
    case 11:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 12:
      uint64_t result = 0x6972745374696E75;
      break;
    default:
      uint64_t result = 0x68636E7550707061;
      break;
  }
  return result;
}

uint64_t sub_FF248()
{
  return sub_FF078(*v0);
}

uint64_t sub_FF250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_FEAC4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_FF278@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_FF070();
  *a1 = result;
  return result;
}

uint64_t sub_FF2A0(uint64_t a1)
{
  unint64_t v2 = sub_FF6F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FF2DC(uint64_t a1)
{
  unint64_t v2 = sub_FF6F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t TemperatureQueryModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2694(&qword_206730);
  sub_52C4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  BOOL v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2E38(a1, a1[3]);
  sub_FF6F8();
  sub_1AD3B0();
  v31[7] = 0;
  sub_1AAD90();
  sub_100024(&qword_202BC0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  sub_1AD270();
  if (!v2)
  {
    uint64_t Model = (int *)type metadata accessor for TemperatureQueryModel();
    sub_2EFEC(v3 + Model[5]);
    v31[6] = 1;
    sub_2F078();
    sub_2EFEC(v3 + Model[6]);
    v31[5] = 2;
    sub_2F078();
    sub_2EFEC(v3 + Model[7]);
    v31[4] = 3;
    sub_2F078();
    sub_2EFEC(v3 + Model[8]);
    v31[3] = 4;
    sub_2F078();
    sub_2EFEC(v3 + Model[9]);
    v31[2] = 5;
    sub_2F078();
    v31[1] = 6;
    sub_1AC1E0();
    sub_100024(&qword_202BC8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    sub_7A438();
    uint64_t v12 = sub_7A494(Model[11]);
    v31[0] = 7;
    sub_2F05C(v12, v13, (uint64_t)v31);
    uint64_t v14 = sub_7A494(Model[12]);
    char v30 = 8;
    sub_2F05C(v14, v15, (uint64_t)&v30);
    uint64_t v16 = sub_7A494(Model[13]);
    char v29 = 9;
    sub_2F05C(v16, v17, (uint64_t)&v29);
    uint64_t v18 = sub_7A494(Model[14]);
    char v28 = 10;
    sub_2F05C(v18, v19, (uint64_t)&v28);
    uint64_t v20 = sub_7A494(Model[15]);
    char v27 = 11;
    sub_2F05C(v20, v21, (uint64_t)&v27);
    v26[1] = 12;
    sub_7A438();
    uint64_t v22 = sub_7A494(Model[17]);
    v26[0] = 13;
    sub_2F05C(v22, v23, (uint64_t)v26);
    v25[9] = 14;
    type metadata accessor for SnippetHeaderModel();
    sub_100024(&qword_202BD0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1AD270();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v5);
}

unint64_t sub_FF6F8()
{
  unint64_t result = qword_206738;
  if (!qword_206738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206738);
  }
  return result;
}

uint64_t TemperatureQueryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v100 = a2;
  uint64_t v3 = sub_2694(&qword_2022D0);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_53E0();
  uint64_t v115 = v5;
  uint64_t v6 = sub_2694(&qword_201E28);
  uint64_t v7 = sub_53D4(v6);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v113 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v112 = (char *)&v96 - v10;
  uint64_t v11 = sub_2694(&qword_2022C8);
  uint64_t v12 = sub_53D4(v11);
  __chkstk_darwin(v12);
  sub_53E0();
  uint64_t v114 = v13;
  sub_2694(&qword_206740);
  sub_52C4();
  uint64_t v116 = v15;
  uint64_t v117 = v14;
  __chkstk_darwin(v14);
  sub_53E0();
  uint64_t v121 = v16;
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  uint64_t v18 = (int *)(Model - 8);
  __chkstk_darwin(Model);
  uint64_t v20 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AAD90();
  sub_55948();
  uint64_t v111 = v21;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v22, v23, v24, v21);
  sub_7A488(v18[7]);
  uint64_t v110 = v25;
  *(unsigned char *)(v25 + 8) = 1;
  sub_7A488(v18[8]);
  uint64_t v109 = v26;
  *(unsigned char *)(v26 + 8) = 1;
  sub_7A488(v18[9]);
  uint64_t v108 = v27;
  *(unsigned char *)(v27 + 8) = 1;
  sub_7A488(v18[10]);
  uint64_t v107 = v28;
  *(unsigned char *)(v28 + 8) = 1;
  sub_7A488(v18[11]);
  uint64_t v105 = v29;
  *(unsigned char *)(v29 + 8) = 1;
  uint64_t v30 = (uint64_t)&v20[v18[12]];
  uint64_t v31 = sub_1AC1E0();
  uint64_t v104 = v30;
  sub_55948();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v32, v33, v34, v31);
  char v35 = &v20[v18[13]];
  *(void *)char v35 = 0;
  *((void *)v35 + 1) = 0;
  uint64_t v103 = v35;
  uint64_t v36 = &v20[v18[14]];
  *(void *)uint64_t v36 = 0;
  *((void *)v36 + 1) = 0;
  uint64_t v102 = v36;
  uint64_t v37 = &v20[v18[15]];
  *(void *)uint64_t v37 = 0;
  *((void *)v37 + 1) = 0;
  char v38 = &v20[v18[16]];
  *(void *)char v38 = 0;
  *((void *)v38 + 1) = 0;
  char v39 = &v20[v18[17]];
  *(void *)char v39 = 0;
  *((void *)v39 + 1) = 0;
  uint64_t v101 = &v20[v18[18]];
  sub_55948();
  uint64_t v106 = v31;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v40, v41, v42, v31);
  uint64_t v43 = &v20[v18[19]];
  *(void *)uint64_t v43 = 0;
  *((void *)v43 + 1) = 0;
  uint64_t v44 = v18[20];
  uint64_t v120 = v20;
  uint64_t v45 = (uint64_t)&v20[v44];
  uint64_t v46 = type metadata accessor for SnippetHeaderModel();
  sub_55948();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v47, v48, v49, v46);
  uint64_t v50 = a1[3];
  uint64_t v119 = a1;
  sub_2E38(a1, v50);
  sub_FF6F8();
  uint64_t v51 = v118;
  sub_1AD3A0();
  if (v51)
  {
    uint64_t v95 = (uint64_t)v120;
  }
  else
  {
    id v118 = v37;
    uint64_t v99 = v38;
    uint64_t v52 = (uint64_t)v112;
    uint64_t v98 = v39;
    uint64_t v97 = v43;
    uint64_t v96 = v45;
    uint64_t v53 = (uint64_t)v113;
    uint64_t v54 = v115;
    uint64_t v55 = v116;
    char v136 = 0;
    sub_100024(&qword_202BE0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    uint64_t v56 = v114;
    sub_1AD1E0();
    sub_2B7FC(v56, (uint64_t)v120, &qword_2022C8);
    char v135 = 1;
    uint64_t v58 = sub_7A4A0();
    sub_7A428(v58, v59);
    char v134 = 2;
    uint64_t v60 = sub_7A4A0();
    sub_7A428(v60, v61);
    char v133 = 3;
    uint64_t v62 = sub_7A4A0();
    sub_7A428(v62, v63);
    char v132 = 4;
    uint64_t v64 = sub_7A4A0();
    sub_7A428(v64, v65);
    char v131 = 5;
    uint64_t v66 = sub_7A4A0();
    sub_7A428(v66, v67);
    char v130 = 6;
    uint64_t v68 = sub_100024(&qword_202BE8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    sub_1AD1E0();
    sub_2B7FC(v52, v104, &qword_201E28);
    char v129 = 7;
    uint64_t v69 = sub_1AD1C0();
    uint64_t v114 = v68;
    uint64_t v70 = (uint64_t *)v103;
    uint64_t v72 = v71;
    swift_bridgeObjectRelease();
    *uint64_t v70 = v69;
    v70[1] = v72;
    char v128 = 8;
    uint64_t v73 = sub_102214();
    uint64_t v75 = v74;
    uint64_t v76 = (uint64_t *)v102;
    swift_bridgeObjectRelease();
    *uint64_t v76 = v73;
    v76[1] = v75;
    char v127 = 9;
    uint64_t v77 = sub_102214();
    uint64_t v79 = v78;
    uint64_t v80 = (uint64_t *)v118;
    swift_bridgeObjectRelease();
    *uint64_t v80 = v77;
    v80[1] = v79;
    char v126 = 10;
    uint64_t v81 = sub_102214();
    uint64_t v83 = v82;
    int v84 = (uint64_t *)v99;
    swift_bridgeObjectRelease();
    *int v84 = v81;
    v84[1] = v83;
    char v125 = 11;
    uint64_t v85 = sub_102214();
    uint64_t v87 = v86;
    uint64_t v88 = (uint64_t *)v98;
    swift_bridgeObjectRelease();
    *uint64_t v88 = v85;
    v88[1] = v87;
    char v124 = 12;
    sub_1AD1E0();
    sub_2B7FC(v53, (uint64_t)v101, &qword_201E28);
    char v123 = 13;
    uint64_t v89 = sub_102214();
    uint64_t v91 = v90;
    uint64_t v92 = (uint64_t *)v97;
    swift_bridgeObjectRelease();
    *uint64_t v92 = v89;
    v92[1] = v91;
    char v122 = 14;
    sub_100024(&qword_202BF0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v93 = v117;
    uint64_t v94 = v121;
    sub_1AD1E0();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v94, v93);
    uint64_t v95 = (uint64_t)v120;
    sub_2B7FC(v54, v96, &qword_2022D0);
    sub_FFF30(v95, v100);
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v119);
  return sub_1011F4(v95, (void (*)(void))type metadata accessor for TemperatureQueryModel);
}

uint64_t sub_FFF30(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for TemperatureQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t sub_FFF94()
{
  return sub_100024(&qword_202240, (void (*)(uint64_t))type metadata accessor for TemperatureQueryModel);
}

uint64_t sub_FFFDC()
{
  return sub_100024(&qword_2020C0, (void (*)(uint64_t))type metadata accessor for TemperatureQueryModel);
}

uint64_t sub_100024(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TemperatureQueryModel.init(from:)(a1, a2);
}

uint64_t sub_100084(void *a1)
{
  return TemperatureQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for TemperatureQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AAD90();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_2022C8);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = (char *)a1 + v11;
    uint64_t v15 = (char *)a2 + v11;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)a1 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (char *)a1 + v17;
    uint64_t v21 = (char *)a2 + v17;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = a3[10];
    uint64_t v24 = (char *)a1 + v22;
    uint64_t v25 = (char *)a2 + v22;
    v24[8] = v25[8];
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v26 = (char *)a1 + v23;
    uint64_t v27 = (char *)a2 + v23;
    uint64_t v28 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v28))
    {
      uint64_t v29 = sub_2694(&qword_201E28);
      memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0, 1, v28);
    }
    uint64_t v30 = a3[11];
    uint64_t v31 = a3[12];
    uint64_t v32 = (uint64_t *)((char *)a1 + v30);
    uint64_t v33 = (uint64_t *)((char *)a2 + v30);
    uint64_t v34 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v34;
    char v35 = (uint64_t *)((char *)a1 + v31);
    uint64_t v36 = (uint64_t *)((char *)a2 + v31);
    uint64_t v37 = v36[1];
    *char v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = a3[13];
    uint64_t v39 = a3[14];
    uint64_t v40 = (uint64_t *)((char *)a1 + v38);
    uint64_t v41 = (uint64_t *)((char *)a2 + v38);
    uint64_t v42 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v42;
    uint64_t v43 = (uint64_t *)((char *)a1 + v39);
    uint64_t v44 = (uint64_t *)((char *)a2 + v39);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = a3[15];
    uint64_t v47 = a3[16];
    uint64_t v48 = (uint64_t *)((char *)a1 + v46);
    uint64_t v49 = (uint64_t *)((char *)a2 + v46);
    uint64_t v50 = v49[1];
    *uint64_t v48 = *v49;
    v48[1] = v50;
    uint64_t v51 = (char *)a1 + v47;
    uint64_t v52 = (char *)a2 + v47;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v52, 1, v28))
    {
      uint64_t v53 = sub_2694(&qword_201E28);
      memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v51, v52, v28);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v51, 0, 1, v28);
    }
    uint64_t v54 = a3[17];
    uint64_t v55 = a3[18];
    uint64_t v56 = (uint64_t *)((char *)a1 + v54);
    uint64_t v57 = (uint64_t *)((char *)a2 + v54);
    uint64_t v58 = v57[1];
    *uint64_t v56 = *v57;
    v56[1] = v58;
    char v59 = (char *)a1 + v55;
    uint64_t v60 = (char *)a2 + v55;
    uint64_t v61 = type metadata accessor for SnippetHeaderModel();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v60, 1, v61))
    {
      uint64_t v62 = sub_2694(&qword_2022D0);
      memcpy(v59, v60, *(void *)(*(void *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v59, v60, v28);
      uint64_t v63 = *(int *)(v61 + 20);
      uint64_t v64 = &v59[v63];
      char v65 = &v60[v63];
      uint64_t v66 = *((void *)v65 + 1);
      *(void *)uint64_t v64 = *(void *)v65;
      *((void *)v64 + 1) = v66;
      uint64_t v67 = *(int *)(v61 + 24);
      uint64_t v68 = &v59[v67];
      uint64_t v69 = &v60[v67];
      uint64_t v70 = *((void *)v69 + 1);
      *(void *)uint64_t v68 = *(void *)v69;
      *((void *)v68 + 1) = v70;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v59, 0, 1, v61);
    }
  }
  return a1;
}

uint64_t destroy for TemperatureQueryModel(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1AAD90();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + a2[10];
  uint64_t v6 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[16];
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v7, v6);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[18];
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, 1, v9);
  if (!result)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v8, v6);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  uint64_t v26 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1, v26))
  {
    uint64_t v27 = sub_2694(&qword_201E28);
    memcpy(v24, v25, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0, 1, v26);
  }
  uint64_t v28 = a3[11];
  uint64_t v29 = a3[12];
  uint64_t v30 = &a1[v28];
  uint64_t v31 = &a2[v28];
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = v32;
  uint64_t v33 = &a1[v29];
  uint64_t v34 = &a2[v29];
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = v35;
  uint64_t v36 = a3[13];
  uint64_t v37 = a3[14];
  uint64_t v38 = &a1[v36];
  uint64_t v39 = &a2[v36];
  uint64_t v40 = *((void *)v39 + 1);
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = v40;
  uint64_t v41 = &a1[v37];
  uint64_t v42 = &a2[v37];
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  uint64_t v44 = a3[15];
  uint64_t v45 = a3[16];
  uint64_t v46 = &a1[v44];
  uint64_t v47 = &a2[v44];
  uint64_t v48 = *((void *)v47 + 1);
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + 1) = v48;
  uint64_t v49 = &a1[v45];
  uint64_t v50 = &a2[v45];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v50, 1, v26))
  {
    uint64_t v51 = sub_2694(&qword_201E28);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v49, v50, v26);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v49, 0, 1, v26);
  }
  uint64_t v52 = a3[17];
  uint64_t v53 = a3[18];
  uint64_t v54 = &a1[v52];
  uint64_t v55 = &a2[v52];
  uint64_t v56 = *((void *)v55 + 1);
  *(void *)uint64_t v54 = *(void *)v55;
  *((void *)v54 + 1) = v56;
  uint64_t v57 = &a1[v53];
  uint64_t v58 = &a2[v53];
  uint64_t v59 = type metadata accessor for SnippetHeaderModel();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v58, 1, v59))
  {
    uint64_t v60 = sub_2694(&qword_2022D0);
    memcpy(v57, v58, *(void *)(*(void *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v57, v58, v26);
    uint64_t v61 = *(int *)(v59 + 20);
    uint64_t v62 = &v57[v61];
    uint64_t v63 = &v58[v61];
    uint64_t v64 = *((void *)v63 + 1);
    *(void *)uint64_t v62 = *(void *)v63;
    *((void *)v62 + 1) = v64;
    uint64_t v65 = *(int *)(v59 + 24);
    uint64_t v66 = &v57[v65];
    uint64_t v67 = &v58[v65];
    uint64_t v68 = *((void *)v67 + 1);
    *(void *)uint64_t v66 = *(void *)v67;
    *((void *)v66 + 1) = v68;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v57, 0, 1, v59);
  }
  return a1;
}

char *assignWithCopy for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)uint64_t v24 = v26;
  uint64_t v27 = a3[9];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = *(void *)v29;
  v28[8] = v29[8];
  *(void *)uint64_t v28 = v30;
  uint64_t v31 = a3[10];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = sub_1AC1E0();
  int v35 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v34);
  int v36 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1, v34);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v32, 0, 1, v34);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v37 = *(void *)(v34 - 8);
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v34);
LABEL_12:
    uint64_t v38 = sub_2694(&qword_201E28);
    memcpy(v32, v33, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 24))(v32, v33, v34);
LABEL_13:
  uint64_t v39 = a3[11];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = *((void *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[12];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = a3[13];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + 1) = *((void *)v47 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[14];
  uint64_t v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + 1) = *((void *)v50 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[15];
  uint64_t v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  *(void *)uint64_t v52 = *(void *)v53;
  *((void *)v52 + 1) = *((void *)v53 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[16];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  int v57 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v54], 1, v34);
  int v58 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v56, 1, v34);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v55, v56, v34);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v55, 0, 1, v34);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v59 = *(void *)(v34 - 8);
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v55, v34);
LABEL_18:
    uint64_t v60 = sub_2694(&qword_201E28);
    memcpy(v55, v56, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 24))(v55, v56, v34);
LABEL_19:
  uint64_t v61 = a3[17];
  uint64_t v62 = &a1[v61];
  uint64_t v63 = &a2[v61];
  *(void *)uint64_t v62 = *(void *)v63;
  *((void *)v62 + 1) = *((void *)v63 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v64 = a3[18];
  uint64_t v65 = &a1[v64];
  uint64_t v66 = &a2[v64];
  uint64_t v67 = type metadata accessor for SnippetHeaderModel();
  int v68 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v65, 1, v67);
  int v69 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v66, 1, v67);
  if (!v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 24))(v65, v66, v34);
      uint64_t v78 = *(int *)(v67 + 20);
      uint64_t v79 = &v65[v78];
      uint64_t v80 = &v66[v78];
      *(void *)uint64_t v79 = *(void *)v80;
      *((void *)v79 + 1) = *((void *)v80 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v81 = *(int *)(v67 + 24);
      uint64_t v82 = &v65[v81];
      uint64_t v83 = &v66[v81];
      *(void *)uint64_t v82 = *(void *)v83;
      *((void *)v82 + 1) = *((void *)v83 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1011F4((uint64_t)v65, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v69)
  {
LABEL_24:
    uint64_t v76 = sub_2694(&qword_2022D0);
    memcpy(v65, v66, *(void *)(*(void *)(v76 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v65, v66, v34);
  uint64_t v70 = *(int *)(v67 + 20);
  uint64_t v71 = &v65[v70];
  uint64_t v72 = &v66[v70];
  *(void *)uint64_t v71 = *(void *)v72;
  *((void *)v71 + 1) = *((void *)v72 + 1);
  uint64_t v73 = *(int *)(v67 + 24);
  uint64_t v74 = &v65[v73];
  uint64_t v75 = &v66[v73];
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = *((void *)v75 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v65, 0, 1, v67);
  return a1;
}

uint64_t sub_1011F4(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

char *initializeWithTake for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  uint64_t v26 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1, v26))
  {
    uint64_t v27 = sub_2694(&qword_201E28);
    memcpy(v24, v25, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0, 1, v26);
  }
  uint64_t v28 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v28] = *(_OWORD *)&a2[v28];
  uint64_t v29 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  uint64_t v30 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v30], 1, v26))
  {
    uint64_t v33 = sub_2694(&qword_201E28);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v31, v32, v26);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v31, 0, 1, v26);
  }
  uint64_t v34 = a3[18];
  *(_OWORD *)&a1[a3[17]] = *(_OWORD *)&a2[a3[17]];
  int v35 = &a1[v34];
  int v36 = &a2[v34];
  uint64_t v37 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v36, 1, v37))
  {
    uint64_t v38 = sub_2694(&qword_2022D0);
    memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v35, v36, v26);
    *(_OWORD *)&v35[*(int *)(v37 + 20)] = *(_OWORD *)&v36[*(int *)(v37 + 20)];
    *(_OWORD *)&v35[*(int *)(v37 + 24)] = *(_OWORD *)&v36[*(int *)(v37 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v35, 0, 1, v37);
  }
  return a1;
}

char *assignWithTake for TemperatureQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  *(void *)uint64_t v15 = *(void *)v16;
  _WORD v15[8] = v16[8];
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = &a1[v18];
  uint64_t v22 = &a2[v18];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v25 = &a1[v23];
  uint64_t v26 = &a2[v23];
  v25[8] = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  uint64_t v27 = &a1[v24];
  uint64_t v28 = &a2[v24];
  uint64_t v29 = sub_1AC1E0();
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v29);
  int v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1, v29);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0, 1, v29);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v32 = *(void *)(v29 - 8);
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v27, v29);
LABEL_12:
    uint64_t v33 = sub_2694(&qword_201E28);
    memcpy(v27, v28, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 40))(v27, v28, v29);
LABEL_13:
  uint64_t v34 = a3[11];
  int v35 = &a1[v34];
  int v36 = &a2[v34];
  uint64_t v38 = *(void *)v36;
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)int v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[12];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[13];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  uint64_t v48 = *(void *)v46;
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = v48;
  *((void *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = a3[14];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  uint64_t v53 = *(void *)v51;
  uint64_t v52 = *((void *)v51 + 1);
  *(void *)uint64_t v50 = v53;
  *((void *)v50 + 1) = v52;
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[15];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  uint64_t v58 = *(void *)v56;
  uint64_t v57 = *((void *)v56 + 1);
  *(void *)uint64_t v55 = v58;
  *((void *)v55 + 1) = v57;
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[16];
  uint64_t v60 = &a1[v59];
  uint64_t v61 = &a2[v59];
  int v62 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v59], 1, v29);
  int v63 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v61, 1, v29);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v60, v61, v29);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v60, 0, 1, v29);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v64 = *(void *)(v29 - 8);
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v60, v29);
LABEL_18:
    uint64_t v65 = sub_2694(&qword_201E28);
    memcpy(v60, v61, *(void *)(*(void *)(v65 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v64 + 40))(v60, v61, v29);
LABEL_19:
  uint64_t v66 = a3[17];
  uint64_t v67 = &a1[v66];
  int v68 = &a2[v66];
  uint64_t v70 = *(void *)v68;
  uint64_t v69 = *((void *)v68 + 1);
  *(void *)uint64_t v67 = v70;
  *((void *)v67 + 1) = v69;
  swift_bridgeObjectRelease();
  uint64_t v71 = a3[18];
  uint64_t v72 = &a1[v71];
  uint64_t v73 = &a2[v71];
  uint64_t v74 = type metadata accessor for SnippetHeaderModel();
  int v75 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v72, 1, v74);
  int v76 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v73, 1, v74);
  if (!v75)
  {
    if (!v76)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 40))(v72, v73, v29);
      uint64_t v79 = *(int *)(v74 + 20);
      uint64_t v80 = &v72[v79];
      uint64_t v81 = &v73[v79];
      uint64_t v83 = *(void *)v81;
      uint64_t v82 = *((void *)v81 + 1);
      *(void *)uint64_t v80 = v83;
      *((void *)v80 + 1) = v82;
      swift_bridgeObjectRelease();
      uint64_t v84 = *(int *)(v74 + 24);
      uint64_t v85 = &v72[v84];
      uint64_t v86 = &v73[v84];
      uint64_t v88 = *(void *)v86;
      uint64_t v87 = *((void *)v86 + 1);
      *(void *)uint64_t v85 = v88;
      *((void *)v85 + 1) = v87;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1011F4((uint64_t)v72, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_24;
  }
  if (v76)
  {
LABEL_24:
    uint64_t v77 = sub_2694(&qword_2022D0);
    memcpy(v72, v73, *(void *)(*(void *)(v77 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v72, v73, v29);
  *(_OWORD *)&v72[*(int *)(v74 + 20)] = *(_OWORD *)&v73[*(int *)(v74 + 20)];
  *(_OWORD *)&v72[*(int *)(v74 + 24)] = *(_OWORD *)&v73[*(int *)(v74 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v72, 0, 1, v74);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemperatureQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_101C08);
}

uint64_t sub_101C08(uint64_t a1, uint64_t a2, int *a3)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_13:
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
  sub_2694(&qword_201E28);
  sub_52E0();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v12 = a3[10];
LABEL_12:
    uint64_t v9 = a1 + v12;
    goto LABEL_13;
  }
  if (a2 != 2147483646)
  {
    uint64_t v8 = sub_2694(&qword_2022D0);
    uint64_t v12 = a3[18];
    goto LABEL_12;
  }
  unint64_t v13 = *(void *)(a1 + a3[11] + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  int v14 = v13 - 1;
  if (v14 < 0) {
    int v14 = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for TemperatureQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_101D0C);
}

void sub_101D0C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    sub_2694(&qword_201E28);
    sub_52E0();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[10];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(void *)(a1 + a4[11] + 8) = a2;
        return;
      }
      uint64_t v10 = sub_2694(&qword_2022D0);
      uint64_t v14 = a4[18];
    }
    uint64_t v11 = a1 + v14;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, a2, a2, v10);
}

void sub_101DEC()
{
  sub_2EBF4(319, &qword_202C60, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  if (v0 <= 0x3F)
  {
    sub_2EBF4(319, (unint64_t *)&qword_202C68, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    if (v1 <= 0x3F)
    {
      sub_2EBF4(319, (unint64_t *)&qword_202C70, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for TemperatureQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF2)
  {
    if (a2 + 14 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 14) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 15;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v5 = v6 - 15;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for TemperatureQueryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *uint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1020BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TemperatureQueryModel.CodingKeys()
{
  return &type metadata for TemperatureQueryModel.CodingKeys;
}

unint64_t sub_1020F8()
{
  unint64_t result = qword_206810;
  if (!qword_206810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206810);
  }
  return result;
}

unint64_t sub_102148()
{
  unint64_t result = qword_206818;
  if (!qword_206818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206818);
  }
  return result;
}

unint64_t sub_102198()
{
  unint64_t result = qword_206820;
  if (!qword_206820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206820);
  }
  return result;
}

uint64_t sub_1021E4()
{
  return type metadata accessor for TemperatureQueryModel();
}

uint64_t sub_1021FC()
{
  return type metadata accessor for TemperatureQueryModel();
}

uint64_t sub_102214()
{
  return sub_1AD1C0();
}

uint64_t sub_102254(uint64_t a1, char a2)
{
  return sub_FE888(a1, a2, v2, 1);
}

void *PhoneRingsSnippet.init(model:)@<X0>(const void *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = swift_getKeyPath();
  sub_2694(&qword_201C50);
  swift_storeEnumTagMultiPayload();
  unsigned int v4 = (char *)a2 + *(int *)(type metadata accessor for PhoneRingsSnippet() + 20);

  return memcpy(v4, a1, 0xF1uLL);
}

uint64_t type metadata accessor for PhoneRingsSnippet()
{
  uint64_t result = qword_2068E8;
  if (!qword_2068E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t PhoneRingsSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v118 = a1;
  sub_1ACD20();
  sub_52C4();
  uint64_t v116 = v3;
  uint64_t v117 = v2;
  __chkstk_darwin(v2);
  sub_53E0();
  uint64_t v115 = v4;
  uint64_t v5 = type metadata accessor for PhoneRingsSnippet();
  uint64_t v6 = v5 - 8;
  uint64_t v109 = *(void *)(v5 - 8);
  uint64_t v108 = *(void *)(v109 + 64);
  __chkstk_darwin(v5);
  uint64_t v107 = (uint64_t)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2694(&qword_206828);
  sub_52C4();
  uint64_t v113 = v9;
  uint64_t v114 = v8;
  __chkstk_darwin(v8);
  sub_53E0();
  uint64_t v111 = v10;
  uint64_t v112 = sub_2694(&qword_206830);
  sub_20688();
  __chkstk_darwin(v11);
  sub_53E0();
  uint64_t v110 = v12;
  uint64_t v13 = sub_2694(&qword_206838);
  uint64_t v14 = sub_A19C(v13);
  uint64_t v106 = v15;
  uint64_t v105 = *(void *)(v16 + 64);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v104 = (uint64_t)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v103 = (uint64_t *)((char *)&v87 - v19);
  uint64_t v20 = sub_1ACBB0();
  sub_52C4();
  uint64_t v22 = v21;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v87 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = (const void *)(v1 + *(int *)(v6 + 28));
  memcpy(v131, v26, sizeof(v131));
  memcpy(v136, v26, 0xF1uLL);
  sub_211C8((uint64_t)v131);
  sub_1ACC30();
  sub_1AC840();
  uint64_t v27 = v120;
  uint64_t v28 = v122;
  uint64_t v100 = v125;
  uint64_t v101 = v124;
  char v135 = v121;
  char v133 = v123;
  (*(void (**)(char *, void, uint64_t))(v22 + 104))(v25, enum case for Color.RGBColorSpace.sRGB(_:), v20);
  uint64_t v29 = sub_1ACBF0();
  sub_1AC830();
  uint64_t v30 = v126;
  uint64_t v31 = v128;
  uint64_t v32 = v129;
  uint64_t v33 = v130;
  uint64_t v34 = sub_1ACC20();
  uint64_t v36 = v35;
  uint64_t v37 = sub_1ACC20();
  uint64_t v39 = v38;
  memcpy(v137, v136, 0xF8uLL);
  v137[31] = v27;
  LOBYTE(v137[32]) = v135;
  *(_DWORD *)((char *)&v137[32] + 1) = *(_DWORD *)v134;
  HIDWORD(v137[32]) = *(_DWORD *)&v134[3];
  v137[33] = v28;
  LOBYTE(v137[34]) = v133;
  *(_DWORD *)((char *)&v137[34] + 1) = *(_DWORD *)v132;
  HIDWORD(v137[34]) = *(_DWORD *)&v132[3];
  v137[35] = v101;
  v137[36] = v100;
  v137[37] = v30;
  v137[38] = v127;
  v137[39] = v31;
  v137[40] = v32;
  v137[41] = v33;
  v137[42] = v29;
  LOWORD(v137[43]) = 256;
  v137[44] = v34;
  v137[45] = v36;
  v137[46] = v37;
  v137[47] = v39;
  LODWORD(v101) = sub_1ACA20();
  sub_1AC810();
  uint64_t v99 = v41;
  uint64_t v100 = v40;
  uint64_t v97 = v43;
  uint64_t v98 = v42;
  memcpy(v119, v137, sizeof(v119));
  unsigned __int8 v138 = 0;
  int v90 = sub_1ACA40();
  sub_1AC810();
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  int v87 = v138;
  unsigned __int8 v140 = 0;
  int v91 = sub_1ACA50();
  sub_1AC810();
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  int v88 = v140;
  unsigned __int8 v143 = 0;
  int v92 = sub_1ACA30();
  sub_1AC810();
  uint64_t v95 = v61;
  uint64_t v96 = v60;
  uint64_t v93 = v63;
  uint64_t v94 = v62;
  int v89 = v143;
  char v146 = 0;
  uint64_t v64 = sub_1AC910();
  uint64_t v65 = (uint64_t)v103;
  *uint64_t v103 = v64;
  *(void *)(v65 + 8) = 0x401C000000000000;
  *(unsigned char *)(v65 + 16) = 0;
  uint64_t v66 = sub_2694(&qword_206840);
  uint64_t v67 = v102;
  sub_102B70(v102, (char *)(v65 + *(int *)(v66 + 44)));
  uint64_t v68 = v107;
  sub_103B34(v67, v107);
  LOBYTE(v67) = v146;
  uint64_t v69 = v104;
  sub_553FC(v65, v104, &qword_206838);
  unint64_t v70 = (*(unsigned __int8 *)(v109 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
  unint64_t v71 = (v108 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v72 = (*(unsigned __int8 *)(v106 + 80) + v71 + 569) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
  uint64_t v73 = swift_allocObject();
  sub_103E1C(v68, v73 + v70);
  unint64_t v74 = v73 + v71;
  memcpy((void *)(v73 + v71), v119, 0x180uLL);
  *(unsigned char *)(v74 + 384) = v101;
  *(_DWORD *)(v74 + 385) = *(_DWORD *)v139;
  *(_DWORD *)(v74 + 388) = *(_DWORD *)&v139[3];
  uint64_t v75 = v99;
  *(void *)(v74 + 392) = v100;
  *(void *)(v74 + 400) = v75;
  uint64_t v76 = v97;
  *(void *)(v74 + 408) = v98;
  *(void *)(v74 + 416) = v76;
  *(unsigned char *)(v74 + 424) = v87;
  *(_DWORD *)(v74 + 425) = *(_DWORD *)v142;
  *(_DWORD *)(v74 + 428) = *(_DWORD *)&v142[3];
  *(unsigned char *)(v74 + 432) = v90;
  *(_DWORD *)(v74 + 433) = *(_DWORD *)v141;
  *(_DWORD *)(v74 + 436) = *(_DWORD *)&v141[3];
  *(void *)(v74 + 440) = v45;
  *(void *)(v74 + 448) = v47;
  *(void *)(v74 + 456) = v49;
  *(void *)(v74 + 464) = v51;
  *(unsigned char *)(v74 + 472) = v88;
  *(_DWORD *)(v74 + 476) = *(_DWORD *)&v145[3];
  *(_DWORD *)(v74 + 473) = *(_DWORD *)v145;
  *(unsigned char *)(v74 + 480) = v91;
  *(_DWORD *)(v74 + 484) = *(_DWORD *)&v144[3];
  *(_DWORD *)(v74 + 481) = *(_DWORD *)v144;
  *(void *)(v74 + 488) = v53;
  *(void *)(v74 + 496) = v55;
  *(void *)(v74 + 504) = v57;
  *(void *)(v74 + 512) = v59;
  *(unsigned char *)(v74 + 520) = v89;
  *(_DWORD *)(v74 + 524) = *(_DWORD *)((char *)v148 + 3);
  *(_DWORD *)(v74 + 521) = v148[0];
  *(unsigned char *)(v74 + 528) = v92;
  *(_DWORD *)(v74 + 532) = *(_DWORD *)&v147[3];
  *(_DWORD *)(v74 + 529) = *(_DWORD *)v147;
  *(void *)(v74 + 536) = v96;
  *(void *)(v74 + 544) = v95;
  *(void *)(v74 + 552) = v94;
  *(void *)(v74 + 560) = v93;
  *(unsigned char *)(v74 + 568) = v67;
  sub_A76E8(v69, v73 + v72, &qword_206838);
  sub_106598();
  sub_2694(&qword_206858);
  sub_B56C(&qword_206860, &qword_206858);
  uint64_t v77 = v111;
  sub_1ACCA0();
  uint64_t v78 = sub_1ACBE0();
  LOBYTE(v74) = sub_1ACA10();
  uint64_t v80 = v113;
  uint64_t v79 = v114;
  uint64_t v81 = v110;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 16))(v110, v77, v114);
  uint64_t v82 = v81 + *(int *)(v112 + 36);
  *(void *)uint64_t v82 = v78;
  *(unsigned char *)(v82 + 8) = v74;
  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v77, v79);
  uint64_t v84 = v115;
  uint64_t v83 = v116;
  uint64_t v85 = v117;
  (*(void (**)(uint64_t, void, uint64_t))(v116 + 104))(v115, enum case for ComponentStackBottomSpacing.none(_:), v117);
  sub_103F44();
  sub_1ACB60();
  sub_10664C();
  (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v84, v85);
  sub_2EF0C(v81, &qword_206830);
  return sub_2EF0C(v65, &qword_206838);
}

uint64_t sub_102B70@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v68 = a2;
  uint64_t v78 = sub_1ACBB0();
  uint64_t v3 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v79 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_2694(&qword_206848);
  uint64_t v77 = *(void *)(v80 - 8);
  uint64_t v5 = __chkstk_darwin(v80);
  uint64_t v67 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v66 = (char *)&v62 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v76 = (char *)&v62 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v64 = (uint64_t)&v62 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v65 = (char *)&v62 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v63 = (uint64_t)&v62 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v75 = (char *)&v62 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v62 - v20;
  __chkstk_darwin(v19);
  uint64_t v81 = (char *)&v62 - v22;
  uint64_t v23 = *(int *)(type metadata accessor for PhoneRingsSnippet() + 20);
  uint64_t v82 = a1;
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = *(void *)(a1 + v23 + 152);
  if (v25)
  {
    uint64_t v71 = v24[18];
    uint64_t v26 = v25;
  }
  else
  {
    uint64_t v26 = 0xE400000000000000;
    uint64_t v71 = 1702260557;
  }
  uint64_t v69 = 3157808;
  uint64_t v27 = v24[21];
  if (v27)
  {
    uint64_t v70 = v24[20];
    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v28 = 0xE300000000000000;
    uint64_t v70 = 3157808;
  }
  if (v24[23])
  {
    uint64_t v29 = v24[22];
    uint64_t v30 = v24[23];
  }
  else
  {
    uint64_t v30 = 0xE300000000000000;
    uint64_t v29 = 4997443;
  }
  uint64_t v31 = *(void (**)(void))(v3 + 104);
  unsigned int v73 = enum case for Color.RGBColorSpace.sRGB(_:);
  uint64_t v74 = v3 + 104;
  unint64_t v72 = (void (*)(char *, void, uint64_t))v31;
  v31(v79);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v32 = sub_1ACBF0();
  sub_1032D0(v71, v26, v70, v28, v29, v30, v32, (uint64_t)v21);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v70 = *(void *)(v77 + 32);
  uint64_t v71 = v77 + 32;
  ((void (*)(char *, char *, uint64_t))v70)(v81, v21, v80);
  uint64_t v33 = v24[13];
  if (v33)
  {
    uint64_t v62 = v24[12];
    uint64_t v34 = v33;
  }
  else
  {
    uint64_t v34 = 0xE800000000000000;
    uint64_t v62 = 0x6573696372657845;
  }
  if (v24[15])
  {
    uint64_t v35 = v24[14];
    uint64_t v36 = v24[15];
  }
  else
  {
    uint64_t v36 = 0xE300000000000000;
    uint64_t v35 = 3157808;
  }
  if (v24[17])
  {
    uint64_t v37 = v24[16];
    uint64_t v38 = v24[17];
  }
  else
  {
    uint64_t v38 = 0xE300000000000000;
    uint64_t v37 = 5130573;
  }
  v72(v79, v73, v78);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v39 = sub_1ACBF0();
  uint64_t v40 = v63;
  sub_1032D0(v62, v34, v35, v36, v37, v38, v39, v63);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, uint64_t))v70)(v75, v40, v80);
  if (v24[25])
  {
    uint64_t v41 = v24[24];
    uint64_t v42 = v24[25];
  }
  else
  {
    uint64_t v42 = 0xE500000000000000;
    uint64_t v41 = 0x646E617453;
  }
  uint64_t v43 = v24[27];
  if (v43)
  {
    uint64_t v69 = v24[26];
    uint64_t v44 = v43;
  }
  else
  {
    uint64_t v44 = 0xE300000000000000;
  }
  if (v24[29])
  {
    uint64_t v45 = v24[28];
    uint64_t v46 = v24[29];
  }
  else
  {
    uint64_t v46 = 0xE300000000000000;
    uint64_t v45 = 5460552;
  }
  v72(v79, v73, v78);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v47 = sub_1ACBF0();
  uint64_t v48 = v64;
  sub_1032D0(v41, v42, v69, v44, v45, v46, v47, v64);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v49 = v65;
  uint64_t v50 = v48;
  uint64_t v51 = v80;
  ((void (*)(char *, uint64_t, uint64_t))v70)(v65, v50, v80);
  uint64_t v52 = v76;
  uint64_t v53 = v77;
  uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
  v54(v76, v81, v51);
  uint64_t v55 = v66;
  uint64_t v56 = v75;
  v54(v66, v75, v51);
  uint64_t v57 = v67;
  v54(v67, v49, v51);
  uint64_t v58 = v68;
  v54(v68, v52, v51);
  uint64_t v59 = sub_2694(&qword_206850);
  v54(&v58[*(int *)(v59 + 48)], v55, v51);
  v54(&v58[*(int *)(v59 + 64)], v57, v51);
  uint64_t v60 = *(void (**)(char *, uint64_t))(v53 + 8);
  v60(v49, v51);
  v60(v56, v51);
  v60(v81, v51);
  v60(v57, v51);
  v60(v55, v51);
  return ((uint64_t (*)(char *, uint64_t))v60)(v76, v51);
}

uint64_t sub_1032D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v20 = a8;
  sub_2694(&qword_2069B0);
  sub_20688();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v21 = 0xC008000000000000;
  if (sub_104A58()) {
    unint64_t v21 = 0xC018000000000000;
  }
  *(void *)uint64_t v17 = sub_1AC910();
  *((void *)v17 + 1) = 0xC014000000000000;
  v17[16] = 0;
  uint64_t v18 = sub_2694(&qword_2069B8);
  sub_105024(a1, a2, (uint64_t)&v21, a3, a4, a5, a6, a7, &v17[*(int *)(v18 + 44)]);
  sub_B56C(&qword_2069C0, &qword_2069B0);
  sub_1ACB50();
  return sub_2EF0C((uint64_t)v17, &qword_2069B0);
}

uint64_t sub_103440@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v52 = a3;
  uint64_t v50 = a2;
  uint64_t v58 = a4;
  uint64_t v59 = a1;
  uint64_t v57 = sub_2694(&qword_206928);
  __chkstk_darwin(v57);
  uint64_t v49 = (uint64_t *)((char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v51 = sub_2694(&qword_206930);
  __chkstk_darwin(v51);
  uint64_t v54 = (uint64_t)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_2694(&qword_206938);
  __chkstk_darwin(v53);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2694(&qword_206940);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v56 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v55 = (char *)&v48 - v11;
  uint64_t v12 = sub_2694(&qword_206948);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v48 - v16;
  uint64_t v18 = sub_2694(&qword_206950);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1AADA0();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (uint64_t *)((char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = sub_1AADC0();
  __chkstk_darwin(v25 - 8);
  uint64_t v26 = sub_2694(&qword_206958);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v29 = (char *)&v48 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v48 - v30;
  if (*(unsigned char *)(v59 + *(int *)(type metadata accessor for PhoneRingsSnippet() + 20) + 240))
  {
    uint64_t v32 = sub_1ACCF0();
    uint64_t v33 = 1;
  }
  else
  {
    *uint64_t v24 = 0xD000000000000011;
    v24[1] = 0x80000000001BC380;
    (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, enum case for SashStandard.Title.applicationBundleIdentifier(_:), v21);
    uint64_t v34 = sub_1AADF0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 1, 1, v34);
    uint64_t v35 = sub_1AAE00();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v17, 1, 1, v35);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v15, 1, 1, v35);
    uint64_t v62 = 0;
    long long v60 = 0u;
    long long v61 = 0u;
    sub_1AADB0();
    sub_1ACCE0();
    uint64_t v32 = sub_1ACCF0();
    uint64_t v33 = 0;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v31, v33, 1, v32);
  char v36 = sub_104024();
  uint64_t v37 = (uint64_t)v55;
  if (v36)
  {
    *(void *)uint64_t v7 = sub_1AC910();
    *((void *)v7 + 1) = 0;
    v7[16] = 1;
    uint64_t v38 = sub_2694(&qword_206980);
    sub_10447C(v50, v52, &v7[*(int *)(v38 + 44)]);
    uint64_t v39 = &qword_206938;
    sub_553FC((uint64_t)v7, v54, &qword_206938);
    swift_storeEnumTagMultiPayload();
    sub_B56C(&qword_206968, &qword_206938);
    sub_B56C(&qword_206970, &qword_206928);
    sub_1AC9E0();
    uint64_t v40 = (uint64_t)v7;
  }
  else
  {
    uint64_t v41 = sub_1AC900();
    uint64_t v42 = (uint64_t)v49;
    *uint64_t v49 = v41;
    *(void *)(v42 + 8) = 0;
    *(unsigned char *)(v42 + 16) = 1;
    uint64_t v43 = sub_2694(&qword_206960);
    sub_1047B8(v50, v52, (char *)(v42 + *(int *)(v43 + 44)));
    uint64_t v39 = &qword_206928;
    sub_553FC(v42, v54, &qword_206928);
    swift_storeEnumTagMultiPayload();
    sub_B56C(&qword_206968, &qword_206938);
    sub_B56C(&qword_206970, &qword_206928);
    sub_1AC9E0();
    uint64_t v40 = v42;
  }
  sub_2EF0C(v40, v39);
  sub_553FC((uint64_t)v31, (uint64_t)v29, &qword_206958);
  uint64_t v44 = v56;
  sub_553FC(v37, v56, &qword_206940);
  uint64_t v45 = v58;
  sub_553FC((uint64_t)v29, v58, &qword_206958);
  uint64_t v46 = sub_2694(&qword_206978);
  sub_553FC(v44, v45 + *(int *)(v46 + 48), &qword_206940);
  sub_2EF0C(v37, &qword_206940);
  sub_2EF0C((uint64_t)v31, &qword_206958);
  sub_2EF0C(v44, &qword_206940);
  return sub_2EF0C((uint64_t)v29, &qword_206958);
}

uint64_t sub_103B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneRingsSnippet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_103B98()
{
  uint64_t v1 = *(void *)(type metadata accessor for PhoneRingsSnippet() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = sub_2694(&qword_206838);
  sub_A19C(v5);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v8 + 64);
  sub_2694(&qword_201C50);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1AC860();
    sub_20688();
    (*(void (**)(uint64_t))(v10 + 8))(v0 + v3);
  }
  else
  {
    swift_release();
  }
  uint64_t v11 = v2 | v7 | 7;
  uint64_t v12 = ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + v7 + 569) & ~v7) + v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_2694(&qword_206840);
  sub_2694(&qword_206848);
  sub_20688();
  uint64_t v14 = *(void (**)(void))(v13 + 8);
  sub_106A60();
  v14();
  sub_2694(&qword_206850);
  sub_106A60();
  v14();
  sub_106A60();
  v14();

  return _swift_deallocObject(v0, v12, v11);
}

uint64_t sub_103E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneRingsSnippet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_103E80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PhoneRingsSnippet();
  sub_A19C(v3);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v7 = (*(void *)(v6 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(sub_2694(&qword_206838) - 8);
  uint64_t v9 = v1 + ((v7 + *(unsigned __int8 *)(v8 + 80) + 569) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  return sub_103440(v1 + v5, (const void *)(v1 + v7), v9, a1);
}

unint64_t sub_103F44()
{
  unint64_t result = qword_206868;
  if (!qword_206868)
  {
    sub_B464(&qword_206830);
    sub_B56C(&qword_206870, &qword_206828);
    sub_B56C(&qword_206878, &qword_206880);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206868);
  }
  return result;
}

uint64_t sub_104008()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_104024()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PhoneRingsSnippet();
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v33 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v32 = (uint64_t)&v30 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v30 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_1AC860();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v30 - v17;
  sub_106700((uint64_t)&v30 - v17);
  uint64_t v31 = *(void (**)(char *, void, uint64_t))(v13 + 104);
  v31(v16, enum case for DynamicTypeSize.accessibility1(_:), v12);
  char v19 = sub_1AC850();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v16, v12);
  v20(v18, v12);
  sub_103B34(v1, (uint64_t)v11);
  if (v19)
  {
    sub_1069C0((uint64_t)v11);
    sub_103B34(v1, (uint64_t)v9);
LABEL_4:
    sub_1069C0((uint64_t)v9);
    uint64_t v22 = v32;
    sub_103B34(v1, v32);
LABEL_5:
    sub_1069C0(v22);
    uint64_t v23 = v1;
    uint64_t v24 = v33;
    sub_103B34(v23, v33);
    goto LABEL_6;
  }
  sub_106700((uint64_t)v18);
  v31(v16, enum case for DynamicTypeSize.accessibility2(_:), v12);
  char v21 = sub_1AC850();
  v20(v16, v12);
  v20(v18, v12);
  sub_1069C0((uint64_t)v11);
  sub_103B34(v1, (uint64_t)v9);
  if (v21) {
    goto LABEL_4;
  }
  sub_106700((uint64_t)v18);
  v31(v16, enum case for DynamicTypeSize.accessibility3(_:), v12);
  char v27 = sub_1AC850();
  v20(v16, v12);
  v20(v18, v12);
  sub_1069C0((uint64_t)v9);
  uint64_t v22 = v32;
  sub_103B34(v1, v32);
  if (v27) {
    goto LABEL_5;
  }
  sub_106700((uint64_t)v18);
  v31(v16, enum case for DynamicTypeSize.accessibility4(_:), v12);
  char v28 = sub_1AC850();
  v20(v16, v12);
  v20(v18, v12);
  sub_1069C0(v22);
  uint64_t v29 = v1;
  uint64_t v24 = v33;
  sub_103B34(v29, v33);
  if ((v28 & 1) == 0)
  {
    sub_106700((uint64_t)v18);
    v31(v16, enum case for DynamicTypeSize.accessibility5(_:), v12);
    char v25 = sub_1AC850();
    v20(v16, v12);
    v20(v18, v12);
    goto LABEL_7;
  }
LABEL_6:
  char v25 = 1;
LABEL_7:
  sub_1069C0(v24);
  return v25 & 1;
}

uint64_t sub_10447C@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v5 = sub_2694(&qword_206988);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = &v51[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v9 = sub_2694(&qword_206990);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = &v51[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v13 = sub_2694(&qword_206998);
  uint64_t v14 = v13 - 8;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = &v51[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v15);
  char v19 = &v51[-v18 - 8];
  memcpy(v52, a1, sizeof(v52));
  sub_106598();
  LOBYTE(a1) = sub_1ACA50();
  sub_1AC810();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  sub_553FC(a2, (uint64_t)v8, &qword_206838);
  char v28 = &v8[*(int *)(v6 + 44)];
  unsigned char *v28 = (_BYTE)a1;
  *((void *)v28 + 1) = v21;
  *((void *)v28 + 2) = v23;
  *((void *)v28 + 3) = v25;
  *((void *)v28 + 4) = v27;
  v28[40] = 0;
  LOBYTE(v6) = sub_1ACA40();
  sub_1AC810();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  sub_553FC((uint64_t)v8, (uint64_t)v12, &qword_206988);
  uint64_t v37 = &v12[*(int *)(v10 + 44)];
  *uint64_t v37 = v6;
  *((void *)v37 + 1) = v30;
  *((void *)v37 + 2) = v32;
  *((void *)v37 + 3) = v34;
  *((void *)v37 + 4) = v36;
  v37[40] = 0;
  sub_2EF0C((uint64_t)v8, &qword_206988);
  LOBYTE(v6) = sub_1ACA30();
  sub_1AC810();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  sub_553FC((uint64_t)v12, (uint64_t)v17, &qword_206990);
  uint64_t v46 = &v17[*(int *)(v14 + 44)];
  *uint64_t v46 = v6;
  *((void *)v46 + 1) = v39;
  *((void *)v46 + 2) = v41;
  *((void *)v46 + 3) = v43;
  *((void *)v46 + 4) = v45;
  v46[40] = 0;
  sub_2EF0C((uint64_t)v12, &qword_206990);
  sub_A76E8((uint64_t)v17, (uint64_t)v19, &qword_206998);
  memcpy(v51, v52, sizeof(v51));
  sub_553FC((uint64_t)v19, (uint64_t)v17, &qword_206998);
  memcpy(v53, v51, sizeof(v53));
  uint64_t v47 = v50;
  memcpy(v50, v51, 0x239uLL);
  uint64_t v48 = sub_2694(&qword_2069A0);
  sub_553FC((uint64_t)v17, (uint64_t)v47 + *(int *)(v48 + 48), &qword_206998);
  sub_106598();
  sub_2EF0C((uint64_t)v19, &qword_206998);
  sub_2EF0C((uint64_t)v17, &qword_206998);
  memcpy(v54, v51, sizeof(v54));
  return sub_10664C();
}

uint64_t sub_1047B8@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = sub_2694(&qword_206988);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = &v39[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v10 = sub_2694(&qword_206990);
  uint64_t v11 = v10 - 8;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = &v39[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v12);
  uint64_t v16 = &v39[-v15 - 8];
  memcpy(v40, a1, sizeof(v40));
  sub_106598();
  LOBYTE(a1) = sub_1ACA20();
  sub_1AC810();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  sub_553FC(a2, (uint64_t)v9, &qword_206838);
  uint64_t v25 = &v9[*(int *)(v7 + 44)];
  *uint64_t v25 = (_BYTE)a1;
  *((void *)v25 + 1) = v18;
  *((void *)v25 + 2) = v20;
  *((void *)v25 + 3) = v22;
  *((void *)v25 + 4) = v24;
  v25[40] = 0;
  LOBYTE(a1) = sub_1ACA30();
  sub_1AC810();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  sub_553FC((uint64_t)v9, (uint64_t)v14, &qword_206988);
  uint64_t v34 = &v14[*(int *)(v11 + 44)];
  *uint64_t v34 = (_BYTE)a1;
  *((void *)v34 + 1) = v27;
  *((void *)v34 + 2) = v29;
  *((void *)v34 + 3) = v31;
  *((void *)v34 + 4) = v33;
  v34[40] = 0;
  sub_2EF0C((uint64_t)v9, &qword_206988);
  sub_A76E8((uint64_t)v14, (uint64_t)v16, &qword_206990);
  memcpy(v39, v40, sizeof(v39));
  sub_553FC((uint64_t)v16, (uint64_t)v14, &qword_206990);
  memcpy(v41, v39, sizeof(v41));
  memcpy(a3, v39, 0x239uLL);
  uint64_t v35 = sub_2694(&qword_2069A8);
  sub_553FC((uint64_t)v14, (uint64_t)&a3[*(int *)(v35 + 48)], &qword_206990);
  uint64_t v36 = &a3[*(int *)(v35 + 64)];
  *(void *)uint64_t v36 = 0;
  v36[8] = 1;
  sub_106598();
  sub_2EF0C((uint64_t)v16, &qword_206990);
  sub_2EF0C((uint64_t)v14, &qword_206990);
  memcpy(v42, v39, sizeof(v42));
  return sub_10664C();
}

uint64_t sub_104A58()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PhoneRingsSnippet();
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v41 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v40 = (char *)&v36 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v39 = (uint64_t)&v36 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)&v36 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = sub_1AC860();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v36 - v21;
  sub_106700((uint64_t)&v36 - v21);
  uint64_t v37 = *(void (**)(char *, void, uint64_t))(v17 + 104);
  v37(v20, enum case for DynamicTypeSize.accessibility1(_:), v16);
  char v23 = sub_1AC850();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v17 + 8);
  v24(v20, v16);
  v24(v22, v16);
  sub_103B34(v1, (uint64_t)v15);
  if (v23)
  {
    sub_1069C0((uint64_t)v15);
    sub_103B34(v1, (uint64_t)v13);
LABEL_4:
    sub_1069C0((uint64_t)v13);
    uint64_t v26 = v38;
    sub_103B34(v1, v38);
LABEL_5:
    sub_1069C0(v26);
    uint64_t v27 = v39;
    sub_103B34(v1, v39);
    uint64_t v28 = (uint64_t)v40;
LABEL_6:
    sub_1069C0(v27);
    sub_103B34(v1, v28);
LABEL_7:
    sub_1069C0(v28);
    uint64_t v29 = v41;
    sub_103B34(v1, v41);
    goto LABEL_8;
  }
  sub_106700((uint64_t)v22);
  v37(v20, enum case for DynamicTypeSize.accessibility2(_:), v16);
  char v25 = sub_1AC850();
  v24(v20, v16);
  v24(v22, v16);
  sub_1069C0((uint64_t)v15);
  sub_103B34(v1, (uint64_t)v13);
  if (v25) {
    goto LABEL_4;
  }
  sub_106700((uint64_t)v22);
  v37(v20, enum case for DynamicTypeSize.accessibility3(_:), v16);
  char v32 = sub_1AC850();
  v24(v20, v16);
  v24(v22, v16);
  sub_1069C0((uint64_t)v13);
  uint64_t v26 = v38;
  sub_103B34(v1, v38);
  if (v32) {
    goto LABEL_5;
  }
  sub_106700((uint64_t)v22);
  v37(v20, enum case for DynamicTypeSize.accessibility4(_:), v16);
  char v33 = sub_1AC850();
  v24(v20, v16);
  v24(v22, v16);
  sub_1069C0(v26);
  uint64_t v27 = v39;
  sub_103B34(v1, v39);
  uint64_t v28 = (uint64_t)v40;
  if (v33) {
    goto LABEL_6;
  }
  sub_106700((uint64_t)v22);
  v37(v20, enum case for DynamicTypeSize.accessibility5(_:), v16);
  char v34 = sub_1AC850();
  v24(v20, v16);
  v24(v22, v16);
  sub_1069C0(v27);
  sub_103B34(v1, v28);
  if (v34) {
    goto LABEL_7;
  }
  sub_106700((uint64_t)v22);
  v37(v20, enum case for DynamicTypeSize.xxLarge(_:), v16);
  char v35 = sub_1AC850();
  v24(v20, v16);
  v24(v22, v16);
  sub_1069C0(v28);
  uint64_t v29 = v41;
  sub_103B34(v1, v41);
  if ((v35 & 1) == 0)
  {
    sub_106700((uint64_t)v22);
    v37(v20, enum case for DynamicTypeSize.xxxLarge(_:), v16);
    char v30 = sub_1AC850();
    v24(v20, v16);
    v24(v22, v16);
    goto LABEL_9;
  }
LABEL_8:
  char v30 = 1;
LABEL_9:
  sub_1069C0(v29);
  return v30 & 1;
}

uint64_t sub_105024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v58 = a8;
  uint64_t v59 = a6;
  uint64_t v60 = a7;
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v53 = a3;
  uint64_t v57 = a9;
  uint64_t v62 = sub_2694(&qword_2069C8);
  uint64_t v54 = *(void *)(v62 - 8);
  uint64_t v11 = __chkstk_darwin(v62);
  long long v61 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v51 - v13;
  uint64_t v63 = a1;
  uint64_t v64 = a2;
  sub_B4FC();
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1ACB20();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  sub_1ACA60();
  uint64_t v20 = sub_1ACB10();
  uint64_t v22 = v21;
  char v24 = v23;
  swift_release();
  sub_106A1C(v15, v17, v19);
  swift_bridgeObjectRelease();
  sub_1ACA90();
  uint64_t v25 = sub_1ACAF0();
  uint64_t v27 = v26;
  char v29 = v28 & 1;
  sub_106A1C(v20, v22, v24 & 1);
  swift_bridgeObjectRelease();
  uint64_t v63 = sub_1ACBD0();
  uint64_t v30 = sub_1ACB00();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  LOBYTE(v22) = v35 & 1;
  sub_106A1C(v25, v27, v29);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v63 = v30;
  uint64_t v64 = v32;
  char v65 = v22;
  uint64_t v66 = v34;
  uint64_t v52 = v14;
  sub_1ACB50();
  sub_106A1C(v30, v32, v22);
  swift_bridgeObjectRelease();
  uint64_t v53 = sub_1AC8F0();
  sub_105420(v55, v56, v59, v60, &v63);
  uint64_t v36 = v63;
  uint64_t v37 = v64;
  LOBYTE(v27) = v65;
  uint64_t v38 = v66;
  uint64_t v59 = v68;
  uint64_t v60 = v67;
  LODWORD(v55) = v69;
  uint64_t v56 = v70;
  uint64_t v39 = v54;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  uint64_t v42 = v61;
  uint64_t v41 = v62;
  v40(v61, v14, v62);
  uint64_t v43 = v57;
  v40(v57, v42, v41);
  uint64_t v44 = &v43[*(int *)(sub_2694(&qword_2069D0) + 48)];
  *(void *)uint64_t v44 = v53;
  *((void *)v44 + 1) = 0;
  v44[16] = 0;
  *((void *)v44 + 3) = v36;
  *((void *)v44 + 4) = v37;
  v44[40] = v27;
  uint64_t v46 = v59;
  uint64_t v45 = v60;
  *((void *)v44 + 6) = v38;
  *((void *)v44 + 7) = v45;
  *((void *)v44 + 8) = v46;
  LOBYTE(v42) = v55;
  v44[72] = v55;
  uint64_t v47 = v58;
  *((void *)v44 + 10) = v56;
  *((void *)v44 + 11) = v47;
  sub_106A2C(v36, v37, v27);
  swift_bridgeObjectRetain();
  sub_106A2C(v45, v46, (char)v42);
  uint64_t v48 = *(void (**)(char *, uint64_t))(v39 + 8);
  swift_bridgeObjectRetain();
  swift_retain_n();
  uint64_t v49 = v62;
  v48(v52, v62);
  sub_106A1C(v36, v37, v27);
  swift_bridgeObjectRelease();
  sub_106A1C(v60, v59, (char)v42);
  swift_release();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v48)(v61, v49);
}

uint64_t sub_105420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v70 = a3;
  uint64_t v71 = a4;
  unint64_t v72 = a5;
  uint64_t v7 = sub_2694(&qword_2069D8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1ACAD0();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = a1;
  uint64_t v74 = a2;
  unint64_t v69 = sub_B4FC();
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1ACB20();
  uint64_t v16 = v15;
  LOBYTE(a1) = v17 & 1;
  unsigned int v68 = enum case for Font.TextStyle.title2(_:);
  char v18 = *(void (**)(void))(v11 + 104);
  uint64_t v57 = v11 + 104;
  uint64_t v67 = (void (*)(char *, void, uint64_t))v18;
  uint64_t v56 = v10;
  v18(v13);
  uint64_t v19 = enum case for Font.Design.rounded(_:);
  unsigned int v61 = enum case for Font.Design.rounded(_:);
  uint64_t v20 = sub_1ACA70();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v60 = *(void (**)(char *, uint64_t))(v21 + 104);
  uint64_t v62 = v21 + 104;
  uint64_t v22 = v19;
  uint64_t v23 = v20;
  uint64_t v55 = v20;
  v60(v9, v22);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v23);
  uint64_t v54 = v13;
  sub_1ACAB0();
  sub_2EF0C((uint64_t)v9, &qword_2069D8);
  char v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v58 = v11 + 8;
  uint64_t v59 = v24;
  v24(v13, v10);
  uint64_t v25 = sub_1ACB10();
  uint64_t v27 = v26;
  LOBYTE(v23) = v28;
  swift_release();
  sub_106A1C(v14, v16, a1);
  swift_bridgeObjectRelease();
  sub_1ACAA0();
  uint64_t v29 = sub_1ACAF0();
  uint64_t v65 = v30;
  uint64_t v66 = v29;
  uint64_t v64 = v31;
  int v63 = v32 & 1;
  sub_106A1C(v25, v27, v23 & 1);
  swift_bridgeObjectRelease();
  uint64_t v73 = v70;
  uint64_t v74 = v71;
  swift_bridgeObjectRetain();
  uint64_t v33 = sub_1ACB20();
  uint64_t v35 = v34;
  char v37 = v36 & 1;
  uint64_t v38 = v54;
  uint64_t v39 = v56;
  v67(v54, v68, v56);
  uint64_t v40 = v55;
  ((void (*)(char *, void, uint64_t))v60)(v9, v61, v55);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v40);
  sub_1ACAB0();
  sub_2EF0C((uint64_t)v9, &qword_2069D8);
  v59(v38, v39);
  sub_1ACA80();
  sub_1ACAC0();
  swift_release();
  sub_1ACAE0();
  swift_release();
  uint64_t v41 = sub_1ACB10();
  uint64_t v43 = v42;
  LOBYTE(a1) = v44;
  uint64_t v46 = v45;
  swift_release();
  LOBYTE(v38) = a1 & 1;
  sub_106A1C(v33, v35, v37);
  swift_bridgeObjectRelease();
  char v47 = v63;
  LOBYTE(v73) = v63;
  uint64_t v48 = v72;
  uint64_t v49 = v65;
  uint64_t v50 = v66;
  uint64_t v51 = v64;
  *unint64_t v72 = v66;
  v48[1] = v51;
  *((unsigned char *)v48 + 16) = v47;
  v48[3] = v49;
  v48[4] = v41;
  v48[5] = v43;
  *((unsigned char *)v48 + 48) = (_BYTE)v38;
  v48[7] = v46;
  sub_106A2C(v50, v51, v47);
  swift_bridgeObjectRetain();
  sub_106A2C(v41, v43, (char)v38);
  swift_bridgeObjectRetain();
  sub_106A1C(v41, v43, (char)v38);
  swift_bridgeObjectRelease();
  sub_106A1C(v50, v51, v73);
  return swift_bridgeObjectRelease();
}

uint64_t *initializeBufferWithCopyOfBuffer for PhoneRingsSnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_2694(&qword_201C50);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1AC860();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    *((void *)v10 + 2) = *((void *)v11 + 2);
    v10[24] = v11[24];
    *((void *)v10 + 4) = *((void *)v11 + 4);
    v10[40] = v11[40];
    v10[56] = v11[56];
    *((void *)v10 + 6) = *((void *)v11 + 6);
    uint64_t v12 = *((void *)v11 + 8);
    v10[72] = v11[72];
    *((void *)v10 + 8) = v12;
    *((void *)v10 + 10) = *((void *)v11 + 10);
    v10[88] = v11[88];
    uint64_t v13 = *((void *)v11 + 13);
    *((void *)v10 + 12) = *((void *)v11 + 12);
    *((void *)v10 + 13) = v13;
    uint64_t v14 = *((void *)v11 + 15);
    *((void *)v10 + 14) = *((void *)v11 + 14);
    *((void *)v10 + 15) = v14;
    uint64_t v15 = *((void *)v11 + 17);
    *((void *)v10 + 16) = *((void *)v11 + 16);
    *((void *)v10 + 17) = v15;
    uint64_t v16 = *((void *)v11 + 19);
    *((void *)v10 + 18) = *((void *)v11 + 18);
    *((void *)v10 + 19) = v16;
    uint64_t v17 = *((void *)v11 + 21);
    *((void *)v10 + 20) = *((void *)v11 + 20);
    *((void *)v10 + 21) = v17;
    uint64_t v18 = *((void *)v11 + 23);
    *((void *)v10 + 22) = *((void *)v11 + 22);
    *((void *)v10 + 23) = v18;
    uint64_t v19 = *((void *)v11 + 25);
    *((void *)v10 + 24) = *((void *)v11 + 24);
    *((void *)v10 + 25) = v19;
    uint64_t v20 = *((void *)v11 + 27);
    *((void *)v10 + 26) = *((void *)v11 + 26);
    *((void *)v10 + 27) = v20;
    uint64_t v21 = *((void *)v11 + 29);
    *((void *)v10 + 28) = *((void *)v11 + 28);
    *((void *)v10 + 29) = v21;
    v10[240] = v11[240];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PhoneRingsSnippet(uint64_t a1)
{
  sub_2694(&qword_201C50);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_1AC860();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PhoneRingsSnippet(void *a1, void *a2, uint64_t a3)
{
  sub_2694(&qword_201C50);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1AC860();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  v8[8] = v9[8];
  *((void *)v8 + 2) = *((void *)v9 + 2);
  v8[24] = v9[24];
  *((void *)v8 + 4) = *((void *)v9 + 4);
  v8[40] = v9[40];
  v8[56] = v9[56];
  *((void *)v8 + 6) = *((void *)v9 + 6);
  uint64_t v10 = *((void *)v9 + 8);
  v8[72] = v9[72];
  *((void *)v8 + 8) = v10;
  *((void *)v8 + 10) = *((void *)v9 + 10);
  v8[88] = v9[88];
  uint64_t v11 = *((void *)v9 + 13);
  *((void *)v8 + 12) = *((void *)v9 + 12);
  *((void *)v8 + 13) = v11;
  uint64_t v12 = *((void *)v9 + 15);
  *((void *)v8 + 14) = *((void *)v9 + 14);
  *((void *)v8 + 15) = v12;
  uint64_t v13 = *((void *)v9 + 17);
  *((void *)v8 + 16) = *((void *)v9 + 16);
  *((void *)v8 + 17) = v13;
  uint64_t v14 = *((void *)v9 + 19);
  *((void *)v8 + 18) = *((void *)v9 + 18);
  *((void *)v8 + 19) = v14;
  uint64_t v15 = *((void *)v9 + 21);
  *((void *)v8 + 20) = *((void *)v9 + 20);
  *((void *)v8 + 21) = v15;
  uint64_t v16 = *((void *)v9 + 23);
  *((void *)v8 + 22) = *((void *)v9 + 22);
  *((void *)v8 + 23) = v16;
  uint64_t v17 = *((void *)v9 + 25);
  *((void *)v8 + 24) = *((void *)v9 + 24);
  *((void *)v8 + 25) = v17;
  uint64_t v18 = *((void *)v9 + 27);
  *((void *)v8 + 26) = *((void *)v9 + 26);
  *((void *)v8 + 27) = v18;
  uint64_t v19 = *((void *)v9 + 29);
  *((void *)v8 + 28) = *((void *)v9 + 28);
  *((void *)v8 + 29) = v19;
  v8[240] = v9[240];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PhoneRingsSnippet(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2EF0C((uint64_t)a1, &qword_201C50);
    sub_2694(&qword_201C50);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1AC860();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)((char *)a2 + v7);
  v8[8] = v9[8];
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = *((void *)v9 + 2);
  v8[24] = v9[24];
  *((void *)v8 + 2) = v11;
  uint64_t v12 = *((void *)v9 + 4);
  v8[40] = v9[40];
  *((void *)v8 + 4) = v12;
  uint64_t v13 = *((void *)v9 + 6);
  v8[56] = v9[56];
  *((void *)v8 + 6) = v13;
  uint64_t v14 = *((void *)v9 + 8);
  v8[72] = v9[72];
  *((void *)v8 + 8) = v14;
  uint64_t v15 = *((void *)v9 + 10);
  v8[88] = v9[88];
  *((void *)v8 + 10) = v15;
  *((void *)v8 + 12) = *((void *)v9 + 12);
  *((void *)v8 + 13) = *((void *)v9 + 13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 14) = *((void *)v9 + 14);
  *((void *)v8 + 15) = *((void *)v9 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 16) = *((void *)v9 + 16);
  *((void *)v8 + 17) = *((void *)v9 + 17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 18) = *((void *)v9 + 18);
  *((void *)v8 + 19) = *((void *)v9 + 19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 20) = *((void *)v9 + 20);
  *((void *)v8 + 21) = *((void *)v9 + 21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 22) = *((void *)v9 + 22);
  *((void *)v8 + 23) = *((void *)v9 + 23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 24) = *((void *)v9 + 24);
  *((void *)v8 + 25) = *((void *)v9 + 25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 26) = *((void *)v9 + 26);
  *((void *)v8 + 27) = *((void *)v9 + 27);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 28) = *((void *)v9 + 28);
  *((void *)v8 + 29) = *((void *)v9 + 29);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[240] = v9[240];
  return a1;
}

char *initializeWithTake for PhoneRingsSnippet(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_2694(&qword_201C50);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_1AC860();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  memcpy(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], 0xF1uLL);
  return a1;
}

char *assignWithTake for PhoneRingsSnippet(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2EF0C((uint64_t)a1, &qword_201C50);
    uint64_t v6 = sub_2694(&qword_201C50);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1AC860();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)uint64_t v9 = *(void *)v10;
  v9[8] = v10[8];
  *((void *)v9 + 2) = *((void *)v10 + 2);
  v9[24] = v10[24];
  *((void *)v9 + 4) = *((void *)v10 + 4);
  v9[40] = v10[40];
  v9[56] = v10[56];
  *((void *)v9 + 6) = *((void *)v10 + 6);
  uint64_t v11 = *((void *)v10 + 8);
  v9[72] = v10[72];
  *((void *)v9 + 8) = v11;
  *((void *)v9 + 10) = *((void *)v10 + 10);
  v9[88] = v10[88];
  uint64_t v12 = *((void *)v10 + 13);
  *((void *)v9 + 12) = *((void *)v10 + 12);
  *((void *)v9 + 13) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *((void *)v10 + 15);
  *((void *)v9 + 14) = *((void *)v10 + 14);
  *((void *)v9 + 15) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *((void *)v10 + 17);
  *((void *)v9 + 16) = *((void *)v10 + 16);
  *((void *)v9 + 17) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *((void *)v10 + 19);
  *((void *)v9 + 18) = *((void *)v10 + 18);
  *((void *)v9 + 19) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *((void *)v10 + 21);
  *((void *)v9 + 20) = *((void *)v10 + 20);
  *((void *)v9 + 21) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *((void *)v10 + 23);
  *((void *)v9 + 22) = *((void *)v10 + 22);
  *((void *)v9 + 23) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *((void *)v10 + 25);
  *((void *)v9 + 24) = *((void *)v10 + 24);
  *((void *)v9 + 25) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = *((void *)v10 + 27);
  *((void *)v9 + 26) = *((void *)v10 + 26);
  *((void *)v9 + 27) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *((void *)v10 + 29);
  *((void *)v9 + 28) = *((void *)v10 + 28);
  *((void *)v9 + 29) = v20;
  swift_bridgeObjectRelease();
  v9[240] = v10[240];
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneRingsSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10630C);
}

uint64_t sub_10630C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2694(&qword_206888);
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 104);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    int v10 = v9 - 1;
    if (v10 < 0) {
      int v10 = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PhoneRingsSnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1063C0);
}

void sub_1063C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_2694(&qword_206888);
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 104) = a2;
  }
}

void sub_106450()
{
  sub_1064E4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1064E4()
{
  if (!qword_2068F8)
  {
    sub_1AC860();
    unint64_t v0 = sub_1AC820();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2068F8);
    }
  }
}

uint64_t sub_10653C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_106598()
{
  sub_106A3C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_10664C()
{
  sub_106A3C();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_106700@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1AC8E0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2694(&qword_201C50);
  __chkstk_darwin(v8);
  int v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_553FC(v2, (uint64_t)v10, &qword_201C50);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_1AC860();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    os_log_type_t v13 = sub_1ACF70();
    uint64_t v14 = sub_1ACA00();
    os_log_type_t v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v18[1] = a1;
      uint64_t v19 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      v18[2] = sub_4A278(0x5463696D616E7944, 0xEF657A6953657079, &v19);
      sub_1ACFE0();
      _os_log_impl(&def_342E4, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1AC8D0();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_1069C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PhoneRingsSnippet();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_106A1C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_106A2C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_106A74(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 40) = a2;
  return _swift_continuation_resume();
}

void sub_106A94()
{
}

id sub_106AB0(char a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return [v2 initWithBool:a1 & 1];
}

void sub_106AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_A638();
  uint64_t v24 = v23;
  uint64_t v52 = v25;
  uint64_t v53 = v26;
  uint64_t v28 = v27;
  uint64_t v50 = v29;
  uint64_t v51 = v30;
  uint64_t v48 = v31;
  uint64_t v49 = v32;
  uint64_t v47 = a22;
  uint64_t v46 = (void *)swift_allocObject();
  uint64_t v33 = *(void *)(v28 + 24);
  uint64_t v34 = *(void *)(v28 + 32);
  uint64_t v35 = sub_479C8();
  sub_BF0C8(v35, v36);
  sub_9F5AC();
  __chkstk_darwin(v37);
  sub_2F014();
  (*(void (**)(uint64_t))(v38 + 16))(v22);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v40 = *(void *)(a21 + 24);
  uint64_t v41 = *(void *)(a21 + 32);
  sub_BF0C8(a21, v40);
  sub_9F5AC();
  __chkstk_darwin(v42);
  char v44 = (char *)&v46 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v45 + 16))(v44);
  sub_12ED90(v48, v49, v50, v51, v22, v52, v53, v24, (uint64_t)v44, v47, v46, ObjectType, v33, v40, v34, v41);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a21);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v28);
  sub_A56C();
}

uint64_t sub_106C94()
{
  return sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t sub_106CC0()
{
  return sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t sub_106CEC(uint64_t a1, uint64_t a2)
{
  return sub_106D34(a1, a2, (void (*)(void))type metadata accessor for LogMedAsScheduledConfirmationStrategy, &qword_203000, (void (*)(uint64_t))type metadata accessor for LogMedAsScheduledConfirmationStrategy);
}

uint64_t sub_106D34(uint64_t a1, uint64_t a2, void (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  return sub_1AAE80();
}

uint64_t sub_106DD4()
{
  return sub_1AAE80();
}

uint64_t sub_106E7C(unint64_t a1)
{
  if (!(a1 >> 62)) {
    return *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_1AD170();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_106EDC()
{
  sub_1ACEB0();
  sub_12D3E8(*(void *)((char *)&dword_10 + (*v0 & 0xFFFFFFFFFFFFFF8)));
  sub_1324AC();
  sub_1ACF20();

  return sub_1ACEF0();
}

__n128 sub_106F34(long long *a1)
{
  long long v9 = a1[1];
  long long v10 = *a1;
  __n128 v8 = (__n128)a1[2];
  uint64_t v2 = *((void *)a1 + 6);
  uint64_t v3 = *((void *)a1 + 7);
  sub_12D39C();
  uint64_t v4 = *(void *)(*v1 + 16);
  sub_12D414(v4);
  uint64_t v5 = *v1;
  *(void *)(v5 + 16) = v4 + 1;
  uint64_t v6 = v5 + (v4 << 6);
  *(_OWORD *)(v6 + 32) = v10;
  *(_OWORD *)(v6 + 48) = v9;
  __n128 result = v8;
  *(__n128 *)(v6 + 64) = v8;
  *(void *)(v6 + 80) = v2;
  *(void *)(v6 + 88) = v3;
  uint64_t *v1 = v5;
  return result;
}

uint64_t sub_106FB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_1AC250();
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_47EB8();
  sub_E988C(a1);
  type metadata accessor for WellnessCATPatternsExecutor(0);
  sub_48120();
  uint64_t v5 = sub_1AC1A0();
  a1[8] = v1;
  a1[9] = (uint64_t)&off_1F6840;
  a1[5] = v5;
  type metadata accessor for WellnessLoggingCATPatternsExecutor(0);
  sub_48120();
  uint64_t v6 = sub_1AC1A0();
  a1[13] = v1;
  a1[14] = (uint64_t)&off_1F8838;
  a1[10] = v6;
  type metadata accessor for WellnessQueryingCATPatternsExecutor(0);
  sub_48120();
  uint64_t result = sub_1AC1A0();
  a1[18] = v1;
  a1[19] = (uint64_t)&off_1F65F0;
  a1[15] = result;
  return result;
}

void *sub_107094(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (v4)
  {
    while (1)
    {
      uint64_t v37 = &_swiftEmptyArrayStorage;
      uint64_t result = (void *)sub_1AD110();
      if (v4 < 0) {
        break;
      }
      unint64_t v31 = v3 & 0xC000000000000001;
      uint64_t v6 = 0;
      uint64_t v30 = a2 + 24;
      type metadata accessor for WellnessMedicationDialogObject(0);
      unint64_t v32 = v3;
      while (v4 != v6)
      {
        if (v31) {
          id v7 = (id)sub_1AD0A0();
        }
        else {
          id v7 = *(id *)(v3 + 8 * v6 + 32);
        }
        __n128 v8 = v7;
        uint64_t v9 = sub_12E078(v7, (SEL *)&selRef_scheduleID);
        unint64_t v11 = v10;
        uint64_t v12 = sub_12E078(v8, (SEL *)&selRef_medicationID);
        unint64_t v14 = v13;
        id v15 = [v8 strength];
        uint64_t v16 = v15;
        if (v15)
        {
          [v15 doubleValue];
          unint64_t v18 = v17;

          unint64_t v19 = v18;
        }
        else
        {
          unint64_t v19 = 0;
        }
        ++v6;
        uint64_t v20 = sub_12E078(v8, (SEL *)&selRef_strengthUnit);
        sub_9F67C(v9, v11, v12, v14, v19, v16 == 0, v20, v21, (uint64_t)v38);
        sub_E3FC(v30, (uint64_t)v34);
        uint64_t v22 = v35;
        uint64_t v23 = v36;
        sub_2E38(v34, v35);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v23 + 8))(v33, v22, v23);
        uint64_t v24 = sub_9F720(v33);
        uint64_t v26 = v25;
        sub_12ECE8((uint64_t)v38);
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v33);
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v34);
        if (v26) {
          uint64_t v27 = v24;
        }
        else {
          uint64_t v27 = 0;
        }
        if (v26) {
          uint64_t v28 = v26;
        }
        else {
          uint64_t v28 = 0xE000000000000000;
        }
        a2 = sub_15CEE4(v8, v27, v28);
        sub_1AD0F0();
        sub_1AD120();
        sub_1AD130();
        sub_1AD100();
        unint64_t v3 = v32;
        if (v4 == v6)
        {
          uint64_t v29 = v37;
          swift_release();
          return v29;
        }
      }
      __break(1u);
LABEL_21:
      swift_bridgeObjectRetain();
      uint64_t v4 = sub_1AD170();
      swift_bridgeObjectRelease();
      if (!v4) {
        goto LABEL_22;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_22:
    swift_release();
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_107354()
{
  type metadata accessor for SpecificMedLoggingFlow();
  sub_12ED48(&qword_203038, v0, (void (*)(uint64_t))type metadata accessor for SpecificMedLoggingFlow);
  sub_1324AC();
  return sub_1AAF80();
}

uint64_t sub_1073DC()
{
  sub_A364();
  v1[3247] = v0;
  v1[3246] = v2;
  uint64_t v3 = sub_2694(&qword_2022D0);
  sub_53D4(v3);
  v1[3248] = sub_A42C();
  uint64_t v4 = sub_1AABD0();
  v1[3249] = v4;
  sub_A19C(v4);
  v1[3250] = v5;
  v1[3251] = sub_A220();
  v1[3252] = swift_task_alloc();
  v1[3253] = swift_task_alloc();
  v1[3254] = swift_task_alloc();
  v1[3255] = swift_task_alloc();
  v1[3256] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SpecificMedCompletedLogModel();
  sub_53D4(v6);
  v1[3257] = sub_A220();
  v1[3258] = swift_task_alloc();
  v1[3259] = swift_task_alloc();
  v1[3260] = swift_task_alloc();
  v1[3261] = swift_task_alloc();
  v1[3262] = swift_task_alloc();
  v1[3263] = swift_task_alloc();
  v1[3264] = swift_task_alloc();
  uint64_t v7 = sub_2694(&qword_201E20);
  sub_53D4(v7);
  v1[3265] = sub_A220();
  v1[3266] = swift_task_alloc();
  v1[3267] = swift_task_alloc();
  v1[3268] = swift_task_alloc();
  v1[3269] = swift_task_alloc();
  v1[3270] = swift_task_alloc();
  v1[3271] = swift_task_alloc();
  v1[3272] = swift_task_alloc();
  v1[3273] = swift_task_alloc();
  v1[3274] = swift_task_alloc();
  uint64_t v8 = sub_1AB0A0();
  sub_53D4(v8);
  v1[3275] = sub_A42C();
  uint64_t v9 = sub_1AB3D0();
  v1[3276] = v9;
  sub_A19C(v9);
  v1[3277] = v10;
  v1[3278] = sub_A220();
  v1[3279] = swift_task_alloc();
  v1[3280] = swift_task_alloc();
  v1[3281] = swift_task_alloc();
  v1[3282] = swift_task_alloc();
  v1[3283] = swift_task_alloc();
  v1[3284] = swift_task_alloc();
  v1[3285] = swift_task_alloc();
  v1[3286] = swift_task_alloc();
  v1[3287] = swift_task_alloc();
  v1[3288] = swift_task_alloc();
  v1[3289] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters();
  v1[3290] = v11;
  sub_53D4(v11);
  v1[3291] = sub_A220();
  v1[3292] = swift_task_alloc();
  v1[3293] = swift_task_alloc();
  v1[3294] = swift_task_alloc();
  uint64_t v12 = sub_2694(&qword_203270);
  v1[3295] = v12;
  sub_53D4(v12);
  v1[3296] = sub_A220();
  v1[3297] = swift_task_alloc();
  uint64_t v13 = sub_1AC1E0();
  v1[3298] = v13;
  sub_A19C(v13);
  v1[3299] = v14;
  v1[3300] = sub_A220();
  v1[3301] = swift_task_alloc();
  v1[3302] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for SnippetHeaderModel();
  v1[3303] = v15;
  sub_53D4(v15);
  v1[3304] = sub_A42C();
  uint64_t v16 = sub_2694(&qword_2055C0);
  sub_53D4(v16);
  v1[3305] = sub_A220();
  v1[3306] = swift_task_alloc();
  uint64_t v17 = sub_2694(&qword_201E10);
  sub_53D4(v17);
  v1[3307] = sub_A42C();
  uint64_t v18 = sub_2694(&qword_201E28);
  sub_53D4(v18);
  v1[3308] = sub_A220();
  v1[3309] = swift_task_alloc();
  v1[3310] = swift_task_alloc();
  v1[3311] = swift_task_alloc();
  v1[3312] = swift_task_alloc();
  v1[3313] = swift_task_alloc();
  v1[3314] = swift_task_alloc();
  v1[3315] = swift_task_alloc();
  v1[3316] = swift_task_alloc();
  v1[3317] = swift_task_alloc();
  v1[3318] = swift_task_alloc();
  v1[3319] = swift_task_alloc();
  v1[3320] = swift_task_alloc();
  v1[3321] = swift_task_alloc();
  v1[3322] = swift_task_alloc();
  v1[3323] = swift_task_alloc();
  v1[3324] = swift_task_alloc();
  v1[3325] = swift_task_alloc();
  v1[3326] = swift_task_alloc();
  v1[3327] = swift_task_alloc();
  v1[3328] = swift_task_alloc();
  v1[3329] = swift_task_alloc();
  v1[3330] = swift_task_alloc();
  v1[3331] = swift_task_alloc();
  v1[3332] = swift_task_alloc();
  v1[3333] = swift_task_alloc();
  v1[3334] = swift_task_alloc();
  v1[3335] = swift_task_alloc();
  v1[3336] = swift_task_alloc();
  uint64_t v19 = sub_2694(&qword_2032A0);
  sub_53D4(v19);
  v1[3337] = sub_A220();
  v1[3338] = swift_task_alloc();
  v1[3339] = swift_task_alloc();
  v1[3340] = swift_task_alloc();
  v1[3341] = swift_task_alloc();
  uint64_t v20 = sub_1AC800();
  v1[3342] = v20;
  sub_A19C(v20);
  v1[3343] = v21;
  v1[3344] = sub_A220();
  v1[3345] = swift_task_alloc();
  v1[3346] = swift_task_alloc();
  v1[3347] = swift_task_alloc();
  v1[3348] = swift_task_alloc();
  v1[3349] = swift_task_alloc();
  v1[3350] = swift_task_alloc();
  v1[3351] = swift_task_alloc();
  v1[3352] = swift_task_alloc();
  v1[3353] = swift_task_alloc();
  v1[3354] = swift_task_alloc();
  v1[3355] = swift_task_alloc();
  v1[3356] = swift_task_alloc();
  v1[3357] = swift_task_alloc();
  v1[3358] = swift_task_alloc();
  v1[3359] = swift_task_alloc();
  v1[3360] = swift_task_alloc();
  v1[3361] = swift_task_alloc();
  v1[3362] = swift_task_alloc();
  v1[3363] = swift_task_alloc();
  v1[3364] = swift_task_alloc();
  v1[3365] = swift_task_alloc();
  v1[3366] = swift_task_alloc();
  v1[3367] = swift_task_alloc();
  v1[3368] = swift_task_alloc();
  v1[3369] = swift_task_alloc();
  v1[3370] = swift_task_alloc();
  v1[3371] = swift_task_alloc();
  v1[3372] = swift_task_alloc();
  v1[3373] = swift_task_alloc();
  v1[3374] = swift_task_alloc();
  v1[3375] = swift_task_alloc();
  v1[3376] = swift_task_alloc();
  v1[3377] = swift_task_alloc();
  v1[3378] = swift_task_alloc();
  v1[3379] = swift_task_alloc();
  v1[3380] = swift_task_alloc();
  v1[3381] = swift_task_alloc();
  v1[3382] = swift_task_alloc();
  v1[3383] = swift_task_alloc();
  v1[3384] = swift_task_alloc();
  v1[3385] = swift_task_alloc();
  v1[3386] = swift_task_alloc();
  v1[3387] = swift_task_alloc();
  v1[3388] = swift_task_alloc();
  v1[3389] = swift_task_alloc();
  v1[3390] = swift_task_alloc();
  v1[3391] = swift_task_alloc();
  v1[3392] = swift_task_alloc();
  v1[3393] = swift_task_alloc();
  v1[3394] = swift_task_alloc();
  v1[3395] = swift_task_alloc();
  v1[3396] = swift_task_alloc();
  v1[3397] = swift_task_alloc();
  v1[3398] = swift_task_alloc();
  v1[3399] = swift_task_alloc();
  v1[3400] = swift_task_alloc();
  v1[3401] = swift_task_alloc();
  v1[3402] = swift_task_alloc();
  v1[3403] = swift_task_alloc();
  v1[3404] = swift_task_alloc();
  v1[3405] = swift_task_alloc();
  v1[3406] = swift_task_alloc();
  v1[3407] = swift_task_alloc();
  v1[3408] = swift_task_alloc();
  v1[3409] = swift_task_alloc();
  v1[3410] = swift_task_alloc();
  v1[3411] = swift_task_alloc();
  v1[3412] = swift_task_alloc();
  v1[3413] = swift_task_alloc();
  v1[3414] = swift_task_alloc();
  v1[3415] = swift_task_alloc();
  v1[3416] = swift_task_alloc();
  v1[3417] = swift_task_alloc();
  v1[3418] = swift_task_alloc();
  v1[3419] = swift_task_alloc();
  v1[3420] = swift_task_alloc();
  v1[3421] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v22, v23, v24);
}

uint64_t sub_107D74()
{
  uint64_t v41 = v0;
  uint64_t v1 = *(void *)(v0 + 26744);
  *(void *)(v0 + 27376) = sub_1AC7D0();
  sub_A340();
  *(void *)(v0 + 27384) = *(void *)(v1 + 16);
  *(void *)(v0 + 27392) = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v2 = sub_480D4();
  v3(v2);
  uint64_t v4 = sub_1AC7F0();
  os_log_type_t v5 = sub_1ACF50();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 26744);
  if (v6)
  {
    uint64_t v8 = (_WORD *)sub_49780();
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    *uint64_t v8 = 0;
    uint64_t v38 = v8 + 1;
    sub_12D1CC((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    swift_bridgeObjectRelease();
    sub_131FDC(&def_342E4, v4, v5, "Specific med request: checking for defined value in schedule.");
    sub_497D4();

    uint64_t v9 = *(void (**)(void))(v7 + 8);
    sub_FD4A0();
    v9();
  }
  else
  {

    swift_bridgeObjectRelease();
    uint64_t v9 = *(void (**)(void))(v7 + 8);
    sub_FD4A0();
    v9();
  }
  *(void *)(v0 + 27408) = v9;
  *(void *)(v0 + 27400) = 0;
  uint64_t v10 = *(void *)(v0 + 26728);
  uint64_t v37 = *(void *)(v0 + 26720);
  sub_E3FC(*(void *)(v0 + 25976) + 24, v0 + 23488);
  uint64_t v11 = *(void *)(v0 + 23520);
  sub_2E38((void *)(v0 + 23488), *(void *)(v0 + 23512));
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  swift_retain();
  uint64_t v13 = sub_132D58();
  v12(v13, v11);
  getMedScheduleWithDefinedValues(from:deviceState:)();
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 22848);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 23488);
  sub_CCD04(v10, v37, &qword_2032A0);
  uint64_t v14 = sub_2694(&qword_203268);
  *(void *)(v0 + 27416) = v14;
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v37, 1, v14);
  uint64_t v16 = *(void *)(v0 + 26720);
  if (v15 == 1)
  {
    sub_5B028(v16, &qword_2032A0);
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v16 + *(int *)(v14 + 48));
    uint64_t v17 = *v18;
    uint64_t v19 = v18[1];
    sub_5B028(v16, &qword_2055C0);
    if (v19)
    {
      swift_bridgeObjectRetain();
      sub_B7B9C();
      sub_1ACE40();
      char v20 = 0;
      uint64_t v21 = v19;
LABEL_16:
      swift_bridgeObjectRelease();
      uint64_t v34 = 0;
      goto LABEL_18;
    }
  }
  uint64_t v22 = *(void *)(v0 + 26712);
  sub_CCD04(*(void *)(v0 + 26728), v22, &qword_2032A0);
  int v23 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v22, 1, v14);
  uint64_t v24 = *(void *)(v0 + 26712);
  if (v23 == 1)
  {
    uint64_t v25 = &qword_2032A0;
    uint64_t v26 = *(void *)(v0 + 26712);
  }
  else
  {
    uint64_t v27 = *(void *)(v0 + 26448);
    uint64_t v28 = *(void *)(v0 + 26360);
    swift_bridgeObjectRelease();
    sub_A76E8(v24, v27, &qword_2055C0);
    sub_A208(v27, 1, v28);
    if (!v29)
    {
      uint64_t v30 = *(void *)(v0 + 26456);
      uint64_t v31 = *(void *)(v0 + 26000);
      uint64_t v24 = *(void *)(v0 + 25992);
      uint64_t v32 = *(void *)(v0 + 26448) + *(int *)(*(void *)(v0 + 26360) + 48);
      (*(void (**)(uint64_t))(v31 + 32))(v30);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v30, 0, 1, v24);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v24);
      goto LABEL_14;
    }
    uint64_t v26 = *(void *)(v0 + 26448);
    uint64_t v25 = &qword_2055C0;
  }
  sub_5B028(v26, v25);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 26456), 1, 1, *(void *)(v0 + 25992));
LABEL_14:
  uint64_t v33 = *(void *)(v0 + 26456);
  sub_C2180(v33);
  sub_1326A8();
  sub_5B028(v33, &qword_201E10);
  if (v24)
  {
    sub_479C8();
    sub_1ACE40();
    uint64_t v21 = 0;
    char v20 = 1;
    goto LABEL_16;
  }
  uint64_t v21 = 0;
  uint64_t v34 = 1;
  char v20 = 1;
LABEL_18:
  *(void *)(v0 + 27432) = v17;
  *(void *)(v0 + 27424) = v21;
  *(unsigned char *)(v0 + 28524) = v20;
  sub_132CF0(*(void *)(v0 + 26688), v34);
  uint64_t v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 27440) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_108220;
  return sub_7A658(0x646567676F6CLL, 0xE600000000000000);
}

uint64_t sub_108220()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  v1[3205] = v0;
  v1[3206] = v3;
  v1[3207] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *BOOL v6 = v5;
  *(void *)(v8 + 27448) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1082F4()
{
  sub_A364();
  v0[3432] = v0[3206];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[3433] = v1;
  void *v1 = v0;
  v1[1] = sub_10838C;
  uint64_t v2 = sub_132CC4(0x6B73u);
  return sub_7A658(v2, v3);
}

uint64_t sub_10838C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  v1[3208] = v0;
  v1[3209] = v3;
  v1[3210] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *BOOL v6 = v5;
  *(void *)(v8 + 27472) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_108460()
{
  sub_A364();
  v0[3435] = v0[3209];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[3436] = v1;
  void *v1 = v0;
  v1[1] = sub_108500;
  return sub_7A658(0x6E656B6174, 0xE500000000000000);
}

uint64_t sub_108500()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  v1[3211] = v0;
  v1[3212] = v3;
  v1[3213] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *BOOL v6 = v5;
  *(void *)(v8 + 27496) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1085D4()
{
  sub_A364();
  v0[3438] = v0[3212];
  sub_2F2B8(88);
  v0[3439] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[3440] = v2;
  void *v2 = v0;
  v2[1] = sub_10867C;
  sub_F1384();
  return sub_7A988();
}

uint64_t sub_10867C()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  v1[3214] = v0;
  v1[3215] = v3;
  v1[3216] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *BOOL v6 = v5;
  *(void *)(v8 + 27528) = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_10876C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  uint64_t v14 = *(void *)(v12 + 26416);
  uint64_t v15 = *(void *)(v12 + 25976);
  sub_1ACE40();
  swift_bridgeObjectRelease();
  sub_34250(0x58u);
  uint64_t v17 = v16;
  sub_2F2B8(88);
  uint64_t v18 = sub_479C8();
  SnippetHeaderModel.init(categoryLabel:categoryListIconName:categoryIdentifier:)(v18, v19, v17, v20, v21, v22);
  uint64_t v23 = *(void *)(v15 + 224);
  *(void *)(v12 + 27536) = v23;
  uint64_t v24 = *(void *)(v15 + 232);
  *(void *)(v12 + 27544) = v24;
  uint64_t v25 = *(void *)(v15 + 240);
  *(void *)(v12 + 27552) = v25;
  uint64_t v26 = *(void *)(v15 + 248);
  *(void *)(v12 + 27560) = v26;
  uint64_t v27 = *(void *)(v15 + 256);
  *(void *)(v12 + 27568) = v27;
  uint64_t v28 = *(void *)(v15 + 264);
  *(void *)(v12 + 27576) = v28;
  uint64_t v29 = *(void *)(v15 + 272);
  *(void *)(v12 + 27584) = v29;
  uint64_t v30 = *(void *)(v15 + 280);
  *(void *)(v12 + 27592) = v30;
  unsigned int v31 = *(unsigned __int8 *)(v15 + 288);
  *(unsigned char *)(v12 + 28525) = v31;
  unsigned int v32 = v31 >> 6;
  if (!(v31 >> 6))
  {
    uint64_t v40 = v24;
    v294 = *(void (**)(uint64_t))(v12 + 27384);
    uint64_t v41 = v25;
    uint64_t v42 = v26;
    unsigned int v43 = v31;
    uint64_t v306 = v28;
    swift_beginAccess();
    uint64_t v44 = sub_1324AC();
    v294(v44);
    uint64_t v302 = sub_132804();
    *(void *)(v302 + 16) = v23;
    *(void *)(v302 + 24) = v40;
    *(void *)(v302 + 32) = v41;
    *(void *)(v302 + 40) = v42;
    *(void *)(v302 + 48) = v27;
    *(unsigned char *)(v302 + 56) = v306 & 1;
    *(void *)(v302 + 64) = v29;
    *(void *)(v302 + 72) = v30;
    *(unsigned char *)(v302 + 80) = v43;
    uint64_t v278 = sub_132804();
    sub_131D50(v278);
    uint64_t v283 = sub_132804();
    sub_131D50(v283);
    uint64_t v295 = sub_132804();
    sub_131D50(v295);
    uint64_t v281 = sub_132804();
    sub_131D50(v281);
    sub_12CD2C(v23, v40, v41, v42, v27, v306, v29, v30, v43);
    sub_132040(v23, v40, v45, v46, v47, v48, v49, v50, v43);
    sub_132040(v23, v40, v51, v52, v53, v54, v55, v56, v43);
    unsigned int v292 = v43;
    uint64_t v57 = sub_132F30();
    uint64_t v287 = v41;
    sub_132040(v57, v58, v59, v60, v61, v62, v63, v64, v43);
    swift_bridgeObjectRetain_n();
    uint64_t v285 = v40;
    swift_bridgeObjectRetain_n();
    uint64_t v290 = v42;
    swift_bridgeObjectRetain_n();
    v277 = sub_1AC7F0();
    os_log_type_t v272 = sub_1ACF50();
    uint64_t v65 = sub_131A8C();
    *(unsigned char *)(v65 + 16) = 32;
    uint64_t v66 = v65;
    uint64_t v307 = sub_131A8C();
    *(unsigned char *)(v307 + 16) = 8;
    uint64_t v67 = sub_131A40();
    *(void *)(v67 + 16) = sub_12E68C;
    *(void *)(v67 + 24) = v302;
    uint64_t v303 = sub_131A40();
    *(void *)(v303 + 16) = sub_130064;
    *(void *)(v303 + 24) = v67;
    uint64_t v299 = sub_131A8C();
    *(unsigned char *)(v299 + 16) = 32;
    uint64_t v68 = sub_131A8C();
    *(unsigned char *)(v68 + 16) = 8;
    uint64_t v69 = v68;
    uint64_t v70 = sub_131A40();
    *(void *)(v70 + 16) = sub_12E6A8;
    *(void *)(v70 + 24) = v278;
    uint64_t v71 = sub_131A40();
    *(void *)(v71 + 16) = sub_130064;
    *(void *)(v71 + 24) = v70;
    uint64_t v279 = sub_131A8C();
    *(unsigned char *)(v279 + 16) = 32;
    uint64_t v276 = sub_131A8C();
    *(unsigned char *)(v276 + 16) = 8;
    uint64_t v72 = sub_131A40();
    *(void *)(v72 + 16) = sub_12E6C4;
    *(void *)(v72 + 24) = v283;
    uint64_t v284 = sub_131A40();
    *(void *)(v284 + 16) = sub_130064;
    *(void *)(v284 + 24) = v72;
    uint64_t v275 = sub_131A8C();
    *(unsigned char *)(v275 + 16) = 32;
    uint64_t v274 = sub_131A8C();
    *(unsigned char *)(v274 + 16) = 8;
    uint64_t v73 = sub_131A40();
    *(void *)(v73 + 16) = sub_12E6E0;
    *(void *)(v73 + 24) = v295;
    uint64_t v74 = sub_131A40();
    *(void *)(v74 + 16) = sub_130064;
    *(void *)(v74 + 24) = v73;
    uint64_t v75 = v74;
    uint64_t v271 = sub_131A8C();
    *(unsigned char *)(v271 + 16) = 32;
    uint64_t v296 = sub_131A8C();
    *(unsigned char *)(v296 + 16) = 8;
    uint64_t v76 = sub_131A40();
    *(void *)(v76 + 16) = sub_12E744;
    *(void *)(v76 + 24) = v281;
    uint64_t v282 = sub_131A40();
    *(void *)(v282 + 16) = sub_130064;
    *(void *)(v282 + 24) = v76;
    *(void *)(v12 + 27600) = sub_2694(&qword_206C60);
    uint64_t v77 = swift_allocObject();
    sub_731BC(v77, 15);
    *uint64_t v78 = sub_130074;
    v78[1] = v66;
    v78[2] = sub_130074;
    v78[3] = v307;
    v78[4] = sub_13006C;
    v78[5] = v303;
    v78[6] = sub_130074;
    v78[7] = v299;
    v78[8] = sub_130074;
    v78[9] = v69;
    v78[10] = sub_13006C;
    v78[11] = v71;
    v78[12] = sub_130074;
    v78[13] = v279;
    v78[14] = sub_130074;
    v78[15] = v276;
    v78[16] = sub_13006C;
    v78[17] = v284;
    v78[18] = sub_130074;
    v78[19] = v275;
    v78[20] = sub_130074;
    v78[21] = v274;
    v78[22] = sub_13006C;
    v78[23] = v75;
    v78[24] = sub_130074;
    v78[25] = v271;
    v78[26] = sub_130074;
    v78[27] = v296;
    v78[28] = sub_13006C;
    v78[29] = v282;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v277, v272))
    {
      uint64_t v79 = *(void *)(v12 + 27400);
      uint64_t v80 = (uint8_t *)sub_49780();
      uint64_t v314 = 0;
      v315[0] = swift_slowAlloc();
      *(_WORD *)uint64_t v80 = 1282;
      v312 = sub_130074;
      uint64_t v313 = v66;
      sub_131764();
      if (v79) {
        goto LABEL_79;
      }
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      v312 = sub_13006C;
      uint64_t v313 = v282;
      sub_131764();
      uint64_t v81 = *(void *)(v12 + 26744);
      swift_release();
      _os_log_impl(&def_342E4, v277, v272, "Entering .nameSelected case with value (scheduleID: %s), (medicationID: %s), strength (%s), strengthUnit (%s), confirmationStatus (%s", v80, 0x34u);
      swift_arrayDestroy();
      sub_A1F0();
      sub_497D4();

      uint64_t v82 = *(void (**)(void))(v81 + 8);
      sub_CD2F0();
      v82();
      uint64_t v83 = 0;
    }
    else
    {
      uint64_t v122 = *(void *)(v12 + 27088);
      uint64_t v123 = *(void *)(v12 + 26744);
      uint64_t v273 = *(void *)(v12 + 26736);

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v82 = *(void (**)(void))(v123 + 8);
      ((void (*)(uint64_t, uint64_t))v82)(v122, v273);
      uint64_t v83 = *(void *)(v12 + 27400);
    }
    *(void *)(v12 + 27896) = v82;
    *(void *)(v12 + 27888) = v83;
    sub_1AC660();
    uint64_t v124 = (void *)sub_1AC650();
    *(void *)(v12 + 27904) = v124;
    *(void *)(v12 + 27912) = sub_46188();
    swift_retain();
    char v125 = getMedStatus(from:)();
    swift_release();
    id v126 = sub_106AB0(v125 & 1);
    sub_131E54((uint64_t)v126, "setMedStatus:");

    if (v285)
    {
      NSString v127 = sub_1ACDC0();
      uint64_t v128 = v127;
    }
    else
    {
      uint64_t v128 = 0;
    }
    sub_131E54((uint64_t)v127, "setScheduleID:");

    sub_12E078(v124, (SEL *)&selRef_scheduleID);
    uint64_t v139 = v138;
    swift_bridgeObjectRelease();
    if (!v139)
    {
      Class isa = sub_1ACFA0(1).super.super.isa;
      sub_131E54((uint64_t)isa, "setLogAsNeeded:");
    }
    if (v292 == 3)
    {
      Class v160 = sub_1ACFA0(1).super.super.isa;
      sub_131E54((uint64_t)v160, "setConfirmedAsScheduled:");

      Class v161 = sub_1ACFA0(0).super.super.isa;
      sub_131E54((uint64_t)v161, "setConfirmedAsNeeded:");

      v164.super.super.Class isa = (Class)sub_106AB0(0);
      Class v165 = v164.super.super.isa;
      os_log_type_t v166 = &selRef_setMedStatus_;
    }
    else if (v292 == 2)
    {
      Class v162 = sub_1ACFA0(1).super.super.isa;
      sub_131E54((uint64_t)v162, "setConfirmedAsScheduled:");

      v164.super.super.Class isa = sub_1ACFA0(0).super.super.isa;
      Class v165 = v164.super.super.isa;
      os_log_type_t v166 = &selRef_setConfirmedAsNeeded_;
    }
    else
    {
      Class v163 = sub_1ACFA0(v292 == 1).super.super.isa;
      sub_131E54((uint64_t)v163, "setConfirmedAsNeeded:");

      v164.super.super.Class isa = sub_1ACFA0(0).super.super.isa;
      Class v165 = v164.super.super.isa;
      os_log_type_t v166 = &selRef_setConfirmedAsScheduled_;
    }
    uint64_t v167 = *(void *)(v12 + 25976);
    sub_131E54((uint64_t)v164.super.super.isa, *v166);

    sub_2694(&qword_203090);
    uint64_t v168 = swift_allocObject();
    uint64_t v169 = sub_731B4(v168, 1);
    *uint64_t v170 = v287;
    v170[1] = v290;
    swift_bridgeObjectRetain();
    uint64_t v171 = HKActivityRingUIViewRepresentable.updateUIView(_:context:)(v169);
    sub_12DEF8(v171, v124);
    sub_E3FC(v167 + 400, v12 + 18808);
    sub_2E38((void *)(v12 + 18808), *(void *)(v12 + 18832));
    uint64_t v172 = (void *)swift_task_alloc();
    *(void *)(v12 + 27920) = v172;
    *uint64_t v172 = v12;
    v172[1] = sub_115710;
    sub_46EC4();
    return v178(v173, v174, v175, v176, v177, v178, v179, v180, a9, a10, a11, a12);
  }
  if (v32 == 1)
  {
    uint64_t v84 = v24;
    v297 = *(void (**)(uint64_t))(v12 + 27384);
    uint64_t v85 = v25;
    uint64_t v86 = v26;
    unsigned __int8 v293 = v31;
    uint64_t v308 = v28;
    swift_beginAccess();
    uint64_t v87 = sub_132E94();
    v297(v87);
    uint64_t v88 = swift_allocObject();
    sub_13275C(v88);
    uint64_t v89 = swift_allocObject();
    sub_13275C(v89);
    uint64_t v304 = swift_allocObject();
    sub_13275C(v304);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v280 = v23;
    char v291 = v86;
    sub_12CD2C(v23, v84, v85, v86, v27, v308, v29, v30, v293);
    uint64_t v286 = v84;
    swift_bridgeObjectRetain();
    v288 = (objc_class *)v85;
    swift_bridgeObjectRetain();
    v309 = sub_1AC7F0();
    os_log_type_t v300 = sub_1ACF50();
    uint64_t v90 = sub_131A8C();
    *(unsigned char *)(v90 + 16) = 32;
    uint64_t v298 = sub_131A8C();
    *(unsigned char *)(v298 + 16) = 8;
    uint64_t v91 = sub_131A40();
    *(void *)(v91 + 16) = sub_12E224;
    *(void *)(v91 + 24) = v88;
    uint64_t v92 = sub_131A40();
    *(void *)(v92 + 16) = sub_12E2EC;
    *(void *)(v92 + 24) = v91;
    uint64_t v93 = sub_131A8C();
    *(unsigned char *)(v93 + 16) = 32;
    uint64_t v94 = sub_131A8C();
    *(unsigned char *)(v94 + 16) = 8;
    uint64_t v95 = sub_131A40();
    *(void *)(v95 + 16) = sub_12E254;
    *(void *)(v95 + 24) = v89;
    uint64_t v96 = sub_131A40();
    *(void *)(v96 + 16) = sub_130064;
    *(void *)(v96 + 24) = v95;
    uint64_t v97 = sub_131A8C();
    *(unsigned char *)(v97 + 16) = 32;
    uint64_t v98 = sub_131A8C();
    *(unsigned char *)(v98 + 16) = 8;
    uint64_t v99 = v97;
    uint64_t v100 = sub_131A40();
    *(void *)(v100 + 16) = sub_12E2A8;
    *(void *)(v100 + 24) = v304;
    uint64_t v101 = sub_131A40();
    *(void *)(v101 + 16) = sub_130064;
    *(void *)(v101 + 24) = v100;
    *(void *)(v12 + 27608) = sub_2694(&qword_206C60);
    uint64_t v102 = swift_allocObject();
    sub_731BC(v102, 9);
    *uint64_t v103 = sub_12E2E0;
    v103[1] = v90;
    v103[2] = sub_130074;
    v103[3] = v298;
    v103[4] = sub_12E2F4;
    v103[5] = v92;
    v103[6] = sub_130074;
    v103[7] = v93;
    v103[8] = sub_130074;
    v103[9] = v94;
    v103[10] = sub_13006C;
    v103[11] = v96;
    v103[12] = sub_130074;
    v103[13] = v99;
    v103[14] = sub_130074;
    v103[15] = v98;
    v103[16] = sub_13006C;
    v103[17] = v101;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v309, v300))
    {
      uint64_t v104 = *(void *)(v12 + 27400);
      uint64_t v105 = (uint8_t *)sub_49780();
      uint64_t v314 = 0;
      v315[0] = swift_slowAlloc();
      *(_WORD *)uint64_t v105 = 770;
      v312 = (uint64_t (*)())sub_12E2E0;
      uint64_t v313 = v90;
      sub_131764();
      if (v104) {
        goto LABEL_79;
      }
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      sub_131764();
      swift_release();
      v312 = sub_13006C;
      uint64_t v313 = v101;
      sub_131764();
      uint64_t v106 = *(void *)(v12 + 26744);
      swift_release();
      _os_log_impl(&def_342E4, v309, v300, "Entering .scheduleSelected case with value (scheduleID: %s), potentially medicationIDs: (%s), confirmationStatus: (%s)", v105, 0x20u);
      swift_arrayDestroy();
      sub_A1F0();
      sub_497D4();

      uint64_t v107 = *(void (**)(void))(v106 + 8);
      sub_F1384();
      sub_CD2F0();
      v107();
      uint64_t v108 = 0;
    }
    else
    {
      uint64_t v129 = *(void *)(v12 + 26744);

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v107 = *(void (**)(void))(v129 + 8);
      sub_4783C();
      v107();
      uint64_t v108 = *(void *)(v12 + 27400);
    }
    *(void *)(v12 + 28120) = v107;
    *(void *)(v12 + 28112) = v108;
    sub_1AC660();
    uint64_t v130 = (void *)sub_1AC650();
    *(void *)(v12 + 28128) = v130;
    sub_46188();
    swift_retain();
    char v131 = getMedStatus(from:)();
    swift_release();
    id v132 = sub_106AB0(v131 & 1);
    sub_131E54((uint64_t)v132, "setMedStatus:");

    sub_12DEA0(v280, v286, v130);
    Class v133 = v288;
    if (v288)
    {
      Class v133 = sub_1ACEC0().super.isa;
      Class v134 = v133;
    }
    else
    {
      Class v134 = 0;
    }
    sub_131E54((uint64_t)v133, "setMedicationIDs:");

    if (v291 != 3)
    {
      if (v291 == 5)
      {
        Swift::Bool v157 = 1;
      }
      else
      {
        if (v291 == 4)
        {
          Class v135 = sub_1ACFA0(1).super.super.isa;
          sub_131E54((uint64_t)v135, "setConfirmedAsScheduled:");

          Class v136 = sub_1ACFA0(0).super.super.isa;
          sub_131E54((uint64_t)v136, "setConfirmedAsNeeded:");

          char v137 = 1;
LABEL_50:
          uint64_t v155 = sub_106AB0(v137);
          uint64_t v156 = &selRef_setMedStatus_;
LABEL_54:
          uint64_t v159 = *(void *)(v12 + 25976);
          objc_msgSend(v130, *v156, v155);

          *(void *)(v12 + 28136) = *(void *)(v159 + 352);
          *(void *)(v12 + 80) = v12;
          *(void *)(v12 + 120) = v12 + 25888;
          *(void *)(v12 + 88) = sub_11D208;
          *(void *)(v12 + 22280) = swift_continuation_init();
          *(void *)(v12 + 22248) = _NSConcreteStackBlock;
          *(void *)(v12 + 22256) = 0x40000000;
          *(void *)(v12 + 22264) = sub_129964;
          *(void *)(v12 + 22272) = &unk_1F7D60;
          [(id)swift_unknownObjectRetain() handleLogSpecificMedications:v130 completion:v12 + 22248];
LABEL_87:
          sub_46EC4();
          return _swift_continuation_await(v268);
        }
        Swift::Bool v157 = 0;
      }
      Class v158 = sub_1ACFA0(v157).super.super.isa;
      sub_131E54((uint64_t)v158, "setConfirmedAsScheduled:");

      uint64_t v155 = sub_1ACFA0(0).super.super.isa;
      uint64_t v156 = &selRef_setConfirmedAsNeeded_;
      goto LABEL_54;
    }
    Class v153 = sub_1ACFA0(1).super.super.isa;
    sub_131E54((uint64_t)v153, "setConfirmedAsScheduled:");

    Class v154 = sub_1ACFA0(0).super.super.isa;
    sub_131E54((uint64_t)v154, "setConfirmedAsNeeded:");

    char v137 = 0;
    goto LABEL_50;
  }
  if (v32 != 3) {
    goto LABEL_22;
  }
  uint64_t v33 = v27 | v28 | v29;
  if (!(v25 | v24 | v23 | v26 | v33 | v30) && v31 == 192)
  {
    sub_1AC660();
    uint64_t v34 = (void *)sub_1AC650();
    *(void *)(v12 + 27616) = v34;
    sub_46188();
    swift_retain();
    char v35 = getMedStatus(from:)();
    swift_release();
    id v36 = sub_106AB0(v35 & 1);
    sub_132914((uint64_t)v36, "setMedStatus:");

    swift_retain();
    uint64_t v37 = getUSOMedNames(from:)();
    uint64_t v38 = swift_release();
    if (v37)
    {
      v39.super.Class isa = sub_1ACEC0().super.isa;
      uint64_t v38 = swift_bridgeObjectRelease();
    }
    else
    {
      v39.super.Class isa = 0;
    }
    uint64_t v141 = *(void *)(v12 + 27416);
    uint64_t v142 = *(void *)(v12 + 26704);
    sub_132914(v38, "setMedicationIDs:");

    uint64_t v143 = sub_47BF8();
    sub_CCD04(v143, v144, v145);
    sub_A208(v142, 1, v141);
    v311 = v34;
    if (v109)
    {
      uint64_t v146 = *(void *)(v12 + 26440);
      sub_5B028(*(void *)(v12 + 26704), &qword_2032A0);
      sub_132884(v146);
    }
    else
    {
      uint64_t v147 = *(void *)(v12 + 26440);
      uint64_t v148 = *(void *)(v12 + 26360);
      swift_bridgeObjectRelease();
      uint64_t v149 = sub_F1390();
      sub_A76E8(v149, v150, v151);
      sub_A208(v147, 1, v148);
      if (!v152)
      {
        uint64_t v186 = *(void *)(v12 + 26376);
        uint64_t v187 = *(void **)(v12 + 26000);
        uint64_t v188 = *(void *)(v12 + 25992);
        uint64_t v189 = *(int *)(*(void *)(v12 + 26360) + 48);
        uint64_t v190 = v186 + v189;
        uint64_t v191 = *(void *)(v12 + 26440) + v189;
        unint64_t v192 = (void (*)(uint64_t))v187[4];
        v192(v186);
        ((void (*)(uint64_t, uint64_t, uint64_t))v192)(v190, v191, v188);
        uint64_t v193 = (void (*)(void))v187[2];
        sub_6F6C8();
        v193();
        sub_6F6C8();
        v193();
        Class v194 = sub_1AAB60().super.isa;
        uint64_t v195 = (void (*)(void))v187[1];
        sub_47814();
        v195();
        sub_47814();
        uint64_t v196 = ((uint64_t (*)(void))v195)();
        sub_132914(v196, "setStartTime:");

        sub_6F6C8();
        v193();
        sub_6F6C8();
        v193();
        Class v197 = sub_1AAB60().super.isa;
        sub_47814();
        v195();
        sub_47814();
        v195();
        [v34 setEndTime:v197];

        uint64_t v198 = &qword_203270;
        uint64_t v199 = v186;
LABEL_64:
        sub_5B028(v199, v198);
        uint64_t v200 = *(void *)(v12 + 27416);
        uint64_t v201 = *(void *)(v12 + 26696);
        sub_CCD04(*(void *)(v12 + 26728), v201, &qword_2032A0);
        sub_A208(v201, 1, v200);
        if (v109)
        {
          sub_5B028(*(void *)(v12 + 26696), &qword_2032A0);
          char v204 = 0;
        }
        else
        {
          uint64_t v202 = *(void *)(v12 + 27416);
          uint64_t v203 = *(void *)(v12 + 26696);
          swift_bridgeObjectRelease();
          char v204 = *(unsigned char *)(v203 + *(int *)(v202 + 64));
          sub_5B028(v203, &qword_2055C0);
        }
        uint64_t v205 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 27384);
        uint64_t v206 = *(void *)(v12 + 27376);
        uint64_t v207 = *(void *)(v12 + 27360);
        uint64_t v208 = *(void *)(v12 + 26736);
        id v209 = sub_106AB0(v204);
        sub_132914((uint64_t)v209, "setHasMeridiem:");

        sub_A340();
        v205(v207, v206, v208);
        uint64_t v210 = (void *)sub_1AC7F0();
        os_log_type_t v211 = sub_1ACF50();
        BOOL v212 = sub_47A70(v211);
        uint64_t v213 = *(void (**)(void))(v12 + 27408);
        if (v212)
        {
          uint64_t v214 = *(void *)(v12 + 27400);
          uint64_t v215 = *(void (**)(uint64_t))(v12 + 26744);
          v216 = (_WORD *)sub_1321CC();
          sub_1320E8(v216);
          sub_12D1CC((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)&v314, (uint64_t)v315, (uint64_t)&v312);
          swift_bridgeObjectRelease();
          sub_131C84(&def_342E4, v217, v218, "Specific med request: checking for dosage and dosageUnit in task");
          sub_497D4();

          sub_E530();
          v213();
        }
        else
        {
          uint64_t v215 = *(void (**)(uint64_t))(v12 + 26744);

          swift_bridgeObjectRelease();
          sub_E530();
          v213();
          uint64_t v214 = *(void *)(v12 + 27400);
        }
        swift_retain();
        uint64_t v219 = getMedDosageValue(from:)();
        char v221 = v220;
        swift_release();
        if (v221) {
          goto LABEL_75;
        }
        sub_132CB8();
        id v222 = sub_12991C(*(double *)&v219);
        sub_132914((uint64_t)v222, "setDosage:");
        sub_A340();
        uint64_t v223 = sub_132094();
        v215(v223);
        uint64_t v224 = swift_allocObject();
        *(void *)(v224 + 16) = v222;
        id v225 = v222;
        v226 = sub_1AC7F0();
        uint64_t v227 = sub_1ACF50();
        uint64_t v228 = sub_131A8C();
        *(unsigned char *)(v228 + 16) = 64;
        uint64_t v229 = sub_131A8C();
        sub_13284C(v229);
        uint64_t v230 = sub_131A40();
        *(void *)(v230 + 16) = sub_1300E8;
        *(void *)(v230 + 24) = v224;
        uint64_t v231 = sub_131A40();
        *(void *)(v231 + 16) = sub_130068;
        *(void *)(v231 + 24) = v230;
        sub_2694(&qword_206C60);
        uint64_t v232 = sub_132834();
        sub_731BC(v232, 3);
        void *v233 = sub_130074;
        v233[1] = v228;
        v233[2] = sub_130074;
        v233[3] = v229;
        v233[4] = sub_130070;
        v233[5] = v231;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (!os_log_type_enabled(v226, (os_log_type_t)v227))
        {
          v236 = *(void (**)(uint64_t, uint64_t))(v12 + 27408);
          uint64_t v237 = *(void *)(v12 + 27352);
          sub_132B44();

          swift_release();
          swift_release();
          swift_release();

          v236(v237, v227);
          goto LABEL_75;
        }
        v234 = (uint8_t *)sub_49780();
        uint64_t v314 = sub_B7C18();
        v315[0] = 0;
        *(_WORD *)v234 = 258;
        v312 = sub_130074;
        uint64_t v313 = v228;
        sub_131764();
        if (!v214)
        {
          swift_release();
          v312 = sub_130074;
          uint64_t v313 = v229;
          sub_131764();
          swift_release();
          v312 = (uint64_t (*)())sub_130070;
          uint64_t v313 = v231;
          sub_131764();
          swift_release();
          _os_log_impl(&def_342E4, v226, (os_log_type_t)v227, "Specific med request: parsed dosage (%@) in task", v234, 0xCu);
          sub_2694(&qword_201DE0);
          swift_arrayDestroy();
          sub_A1F0();
          sub_497D4();

          sub_132EAC();
          sub_E530();
          v235();
          uint64_t v214 = 0;
LABEL_75:
          swift_retain();
          uint64_t v239 = getMedDosageUnit(from:)();
          uint64_t v241 = v240;
          swift_release();
          if (!v241)
          {
LABEL_83:
            v259 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 27384);
            uint64_t v260 = *(void *)(v12 + 27376);
            uint64_t v261 = *(void *)(v12 + 27336);
            uint64_t v262 = *(void *)(v12 + 26736);
            sub_A340();
            v259(v261, v260, v262);
            v263 = sub_1AC7F0();
            os_log_type_t v264 = sub_1ACF50();
            sub_FD440(v264);
            v265 = *(void (**)(void))(v12 + 27408);
            sub_132B44();
            if (v266)
            {
              v267 = (uint8_t *)sub_49780();
              sub_1320E8(v267);
              sub_12D1CC((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)&v314, (uint64_t)v315, (uint64_t)&v312);
              swift_bridgeObjectRelease();
              _os_log_impl(&def_342E4, v263, (os_log_type_t)v259, "Specific med request is being sent to intent handler for handling.", v267, 2u);
              sub_497D4();
            }
            else
            {

              swift_bridgeObjectRelease();
            }
            sub_E530();
            v265();
            *(void *)(v12 + 27624) = v214;
            *(void *)(v12 + 27632) = *(void *)(*(void *)(v12 + 25976) + 352);
            *(void *)(v12 + 144) = v12;
            *(void *)(v12 + 184) = v12 + 25936;
            *(void *)(v12 + 152) = sub_10B2D0;
            *(void *)(v12 + 22400) = swift_continuation_init();
            *(void *)(v12 + 22368) = _NSConcreteStackBlock;
            *(void *)(v12 + 22376) = 0x40000000;
            *(void *)(v12 + 22384) = sub_129964;
            *(void *)(v12 + 22392) = &unk_1F8510;
            [(id)swift_unknownObjectRetain() handleLogSpecificMedications:v311 completion:v12 + 22368];
            goto LABEL_87;
          }
          v242 = *(void (**)(uint64_t))(v12 + 27384);
          sub_12DFBC(v239, v241, v311);
          sub_A340();
          uint64_t v243 = sub_132094();
          v242(v243);
          uint64_t v244 = sub_131A40();
          *(void *)(v244 + 16) = v239;
          *(void *)(v244 + 24) = v241;
          v245 = sub_1AC7F0();
          os_log_type_t v246 = sub_1ACF50();
          uint64_t v247 = sub_131A8C();
          *(unsigned char *)(v247 + 16) = 32;
          uint64_t v248 = sub_131A8C();
          sub_13284C(v248);
          uint64_t v249 = sub_131A40();
          *(void *)(v249 + 16) = sub_130120;
          *(void *)(v249 + 24) = v244;
          uint64_t v250 = sub_131A40();
          *(void *)(v250 + 16) = sub_130064;
          *(void *)(v250 + 24) = v249;
          sub_2694(&qword_206C60);
          uint64_t v251 = sub_132834();
          sub_731BC(v251, 3);
          void *v252 = sub_130074;
          v252[1] = v247;
          v252[2] = sub_130074;
          v252[3] = v248;
          v252[4] = sub_13006C;
          v252[5] = v250;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (!os_log_type_enabled(v245, v246))
          {
            v256 = *(void (**)(uint64_t, uint64_t))(v12 + 27408);
            uint64_t v257 = *(void *)(v12 + 27344);
            uint64_t v258 = *(void *)(v12 + 26736);

            swift_release();
            swift_release();
            swift_release();
            v256(v257, v258);
            goto LABEL_83;
          }
          v253 = (uint8_t *)sub_49780();
          uint64_t v254 = sub_E620();
          uint64_t v314 = 0;
          v315[0] = v254;
          *(_WORD *)v253 = 258;
          v312 = sub_130074;
          uint64_t v313 = v247;
          sub_131764();
          if (!v214)
          {
            swift_release();
            v312 = sub_130074;
            uint64_t v313 = v248;
            sub_131764();
            swift_release();
            v312 = sub_13006C;
            uint64_t v313 = v250;
            sub_131764();
            v270 = *(void (**)(void))(v12 + 27408);
            swift_release();
            _os_log_impl(&def_342E4, v245, v246, "Specific med request: parsed dosageUnit (%s) in task", v253, 0xCu);
            swift_arrayDestroy();
            sub_A1F0();
            sub_497D4();

            sub_E530();
            v270();
            uint64_t v214 = 0;
            goto LABEL_83;
          }
        }
LABEL_79:
        sub_46EC4();
        return swift_errorRelease();
      }
    }
    uint64_t v199 = *(void *)(v12 + 26440);
    uint64_t v198 = &qword_2055C0;
    goto LABEL_64;
  }
  BOOL v109 = v31 == 192 && v23 == 7;
  if (!v109 || v26 | v25 | v24 | v33 | v30)
  {
LABEL_22:
    uint64_t v310 = *(void *)(v12 + 26728);
    uint64_t v305 = *(void *)(v12 + 26688);
    uint64_t v301 = *(void *)(v12 + 26432);
    uint64_t v289 = *(void *)(v12 + 25976);
    uint64_t v116 = v25;
    uint64_t v117 = v26;
    uint64_t v118 = v28;
    unsigned __int8 v119 = v31;
    sub_12CD2C(v23, v24, v25, v26, v27, v28, v29, v30, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_4610C(v23, v24, v116, v117, v27, v118, v29, v30, v119);
    sub_9B48(v289 + 64, v12 + 1408);
    sub_75790((void *)(v12 + 1408), (void *)(v12 + 3008));
    sub_9BA4();
    sub_1AB120();
    sub_9BF0(v12 + 3008);
    sub_12E41C(v301, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v305, &qword_201E28);
    sub_5B028(v310, &qword_2032A0);
    sub_130EC4();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_131CA4();
    sub_46EC4();
    __asm { BRAA            X1, X16 }
  }
  sub_131934();
  sub_131EEC();
  swift_bridgeObjectRelease();
  sub_131FD0();
  swift_bridgeObjectRelease();
  sub_131E6C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_A340();
  uint64_t v110 = sub_47CBC();
  v13(v110);
  uint64_t v111 = sub_1AC7F0();
  os_log_type_t v112 = sub_1ACF50();
  BOOL v113 = sub_29300(v112);
  uint64_t v114 = *(void (**)(void))(v12 + 27408);
  if (v113)
  {
    uint64_t v115 = (_WORD *)sub_131970();
    sub_1320E8(v115);
    sub_132AE4();
    swift_bridgeObjectRelease();
    sub_131958(&def_342E4, v111, (os_log_type_t)v14, "Received .rejectedConfirmation code, creating output.");
    sub_497D4();

    sub_13229C();
  }
  else
  {
    sub_132D14();
    swift_bridgeObjectRelease();
    sub_479C8();
  }
  sub_E530();
  v114();
  sub_132418();
  *(void *)(v12 + 28456) = v111;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v182, 1, 1, v183);
  swift_retain();
  uint64_t v184 = (void *)swift_task_alloc();
  *(void *)(v12 + 28464) = v184;
  *uint64_t v184 = v12;
  v184[1] = sub_127FD8;
  sub_46EC4();
  return sub_1A5530();
}

uint64_t sub_10B2D0()
{
  sub_A364();
  sub_472B4();
  uint64_t v1 = *v0;
  sub_E53C();
  void *v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10B384()
{
  sub_471BC();
  uint64_t v432 = v8 | 0x1000000000000000;
  uint64_t v433 = v9;
  sub_4712C();
  uint64_t v431 = v2;
  uint64_t v10 = *(void **)(v2 + 25936);
  *(void *)(v2 + 27640) = v10;
  uint64_t v11 = swift_unknownObjectRelease();
  uint64_t v12 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v10)))(v11);
  switch(v12)
  {
    case 'e':
      uint64_t v412 = v2 + 1144;
      v405 = (const void *)(v2 + 1568);
      v400 = (long long *)(v2 + 22808);
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 27384);
      uint64_t v14 = *(void *)(v2 + 27376);
      uint64_t v15 = *(void *)(v2 + 27328);
      uint64_t v16 = *(void *)(v2 + 26736);
      sub_1325FC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_A340();
      v13(v15, v14, v16);
      uint64_t v17 = sub_1AC7F0();
      os_log_type_t v18 = sub_1ACF50();
      if (sub_13221C(v18))
      {
        uint64_t v19 = *(void (**)(void))(v2 + 27408);
        uint64_t v20 = (_WORD *)sub_132CA0();
        sub_1317C0(v20);
        sub_132B24();
        swift_bridgeObjectRelease();
        sub_132284(&def_342E4, v17, (os_log_type_t)v15, "Received .requiresAuthorization, returning AskAuthorizationFlow");
        sub_497D4();

        sub_E530();
        v19();
      }
      else
      {
        Swift::Bool v157 = *(void (**)(uint64_t))(v2 + 27408);
        sub_131DDC();
        swift_bridgeObjectRelease();
        uint64_t v158 = sub_13198C();
        v157(v158);
      }
      uint64_t v159 = *(void **)(v2 + 27616);
      uint64_t v395 = *(void *)(v2 + 26728);
      uint64_t v160 = *(void *)(v2 + 26688);
      uint64_t v161 = *(void *)(v2 + 26432);
      uint64_t v162 = *(void *)(v2 + 25976);
      sub_E3FC(v162 + 24, (uint64_t)v400);
      sub_9B48(v162 + 64, (uint64_t)v405);
      sub_9AD48((uint64_t *)v420);
      uint64_t v163 = sub_9ADA0();
      uint64_t v164 = sub_9ADCC();
      sub_9AE90(88, v400, v405, v420, v163, v164, v412);
      sub_9D40();
      sub_1AB120();

      sub_9D8C(v412);
      sub_12E41C(v161, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      uint64_t v165 = v160;
      goto LABEL_93;
    case 'f':
      goto LABEL_8;
    case 'g':
      uint64_t v33 = *(void *)(v2 + 25976);
      sub_1325FC();
      swift_bridgeObjectRelease();
      sub_132A5C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v34 = *(void *)(v33 + 224);
      uint64_t v35 = *(void *)(v33 + 232);
      v33 += 224;
      uint64_t v36 = *(void *)(v33 + 16);
      uint64_t v37 = *(void *)(v33 + 24);
      uint64_t v38 = *(void *)(v33 + 32);
      uint64_t v39 = *(void *)(v33 + 40);
      uint64_t v40 = *(void *)(v33 + 48);
      uint64_t v41 = *(void *)(v33 + 56);
      unsigned __int8 v42 = *(unsigned char *)(v33 + 64);
      *(void *)uint64_t v33 = 1;
      *(_OWORD *)(v33 + 8) = 0u;
      *(_OWORD *)(v33 + 24) = 0u;
      *(_OWORD *)(v33 + 40) = 0u;
      *(void *)(v33 + 56) = 0;
      *(unsigned char *)(v33 + 64) = -64;
      sub_4610C(v34, v35, v36, v37, v38, v39, v40, v41, v42);
      uint64_t v43 = sub_12E014(v10, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
      v418 = v10;
      if (v43)
      {
        uint64_t v44 = v43;
        uint64_t v1 = *(char ***)(v2 + 27624);
        swift_retain();
        unint64_t v45 = sub_132E94();
        unint64_t v7 = (unint64_t)sub_107094(v45, v46);
        uint64_t v47 = (uint64_t)&_swiftEmptySetSingleton;
        v428 = &_swiftEmptySetSingleton;
        uint64_t v48 = sub_106E78(v44);
        if (!v48)
        {
          os_log_type_t v63 = OS_LOG_TYPE_DEFAULT;
          goto LABEL_151;
        }
        uint64_t v49 = v48;
        LOBYTE(v50) = sub_1AA5D0(v44);
        sub_4AA30(0, v50 & 1, v44);
        if (v50)
        {
          id v51 = *(id *)(v44 + 32);
          goto LABEL_14;
        }
LABEL_167:
        id v51 = (id)sub_1AD0A0();
LABEL_14:
        uint64_t v52 = v51;
        swift_bridgeObjectRetain();
        uint64_t v53 = sub_12E078(v52, (SEL *)&selRef_schedule);
        char v55 = sub_129D84(v53, v54, v47);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v55) {
          goto LABEL_23;
        }
        v413 = v1;
        unint64_t v407 = v7;
        unint64_t v7 = 0;
        uint64_t v56 = (char *)&v49[-1].isa + 7;
        uint64_t v1 = &selRef_schedule;
        do
        {
          Swift::Int v57 = sub_12E078(v52, (SEL *)&selRef_schedule);
          sub_12D454((Swift::Int *)v420, v57, v58);

          swift_bridgeObjectRelease();
          if (v56 == (char *)v7)
          {
            os_log_type_t v63 = OS_LOG_TYPE_DEFAULT;
            unint64_t v7 = v407;
            uint64_t v1 = v413;
            goto LABEL_151;
          }
          uint64_t v49 = (v7 + 1);
          sub_4AA30(v7 + 1, v50 & 1, v44);
          if (v50)
          {
            id v59 = *(id *)(v44 + 8 * v7 + 40);
          }
          else
          {
            sub_F1390();
            id v59 = (id)sub_1AD0A0();
          }
          uint64_t v52 = v59;
          if (__OFADD__(v49, 1))
          {
            __break(1u);
            goto LABEL_166;
          }
          uint64_t v47 = (uint64_t)v428;
          swift_bridgeObjectRetain();
          uint64_t v60 = sub_12E078(v52, (SEL *)&selRef_schedule);
          char v62 = sub_129D84(v60, v61, v47);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          ++v7;
        }
        while ((v62 & 1) == 0);
        unint64_t v7 = v407;
        uint64_t v1 = v413;
LABEL_23:

        os_log_type_t v63 = OS_LOG_TYPE_INFO;
LABEL_151:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_retain();
        getLocalizedMedName(from:)();
        uint64_t v334 = v333;
        swift_release();
        if (!v334)
        {
          v338 = *(void (**)(uint64_t))(v2 + 27384);
          swift_bridgeObjectRelease();
          sub_A340();
          uint64_t v339 = sub_13226C();
          v338(v339);
          v340 = sub_1AC7F0();
          os_log_type_t v341 = sub_1ACF60();
          BOOL v342 = sub_131BA4(v341);
          v343 = *(void (**)(void))(v2 + 27408);
          if (v342)
          {
            v344 = (_WORD *)sub_49780();
            sub_1317C0(v344);
            sub_12D1CC((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)v430, (uint64_t)v429, (uint64_t)v420);
            swift_bridgeObjectRelease();
            sub_13201C(&def_342E4, v340, v63, "Needed name disambiguation but unable to unwrap med name from task. Returning GenericErrorFlow");
            sub_497D4();
          }
          else
          {

            swift_bridgeObjectRelease();
          }
          sub_E530();
          v343();
          v345 = *(void **)(v2 + 27616);
          uint64_t v389 = *(void *)(v2 + 27592);
          uint64_t v384 = *(void *)(v2 + 27584);
          uint64_t v380 = *(void *)(v2 + 27576);
          uint64_t v346 = *(void *)(v2 + 27568);
          uint64_t v347 = *(void *)(v2 + 27560);
          uint64_t v348 = *(void *)(v2 + 27552);
          sub_132674();
          uint64_t v349 = sub_1328BC();
          sub_9B48(v349, v2 + 12448);
          v350 = (void *)sub_132D58();
          sub_75790(v350, v351);
          sub_9BA4();
          sub_1AB120();

          sub_132F5C();
          uint64_t v352 = sub_F1390();
          sub_4610C(v352, v353, v348, v347, v346, v380, v384, v389, v368);

          sub_9BF0(v2 + 12288);
          sub_12E41C((uint64_t)v390, (void (*)(void))type metadata accessor for SnippetHeaderModel);
          sub_5B028(v394, &qword_201E28);
          uint64_t v247 = (uint64_t)v1;
          goto LABEL_131;
        }
        v374 = *(void **)(v2 + 27616);
        uint64_t v397 = *(void *)(v2 + 27592);
        uint64_t v393 = *(void *)(v2 + 27584);
        uint64_t v388 = *(void *)(v2 + 27576);
        uint64_t v383 = *(void *)(v2 + 27568);
        uint64_t v379 = *(void *)(v2 + 27560);
        uint64_t v376 = *(void *)(v2 + 27552);
        uint64_t v372 = *(void *)(v2 + 27544);
        uint64_t v370 = *(void *)(v2 + 27536);
        uint64_t v411 = *(void *)(v2 + 26728);
        uint64_t v404 = *(void *)(v2 + 26688);
        uint64_t v399 = *(void *)(v2 + 26432);
        uint64_t v335 = *(void *)(v2 + 25976);
        type metadata accessor for MedNameDisambiguationStrategy();
        sub_9B48(v335 + 64, v2 + 12608);
        uint64_t v336 = sub_132F30();
        sub_E3FC(v336, v337);
        sub_106E7C(v7);
        sub_9AD48((uint64_t *)v420);
        sub_29A98();
        swift_retain();
        sub_1AB350();
        *(void *)(v2 + 25808) = sub_129EB0();
        sub_12A018();
        sub_1326A8();
        sub_2694(&qword_206D28);
        sub_B56C(&qword_206D30, &qword_206D28);
        sub_1AB100();
        swift_release();

        sub_132F5C();
        sub_4610C(v370, v372, v376, v379, v383, v388, v393, v397, v368);
        swift_release();
        uint64_t v230 = v418;
        goto LABEL_85;
      }
      uint64_t v282 = (void *)(v2 + 11488);
      uint64_t v283 = *(void *)(v2 + 27392);
      uint64_t v284 = *(void (**)(uint64_t))(v2 + 27384);
      uint64_t v1 = *(char ***)(v2 + 26736);
      sub_A340();
      uint64_t v285 = sub_470B8();
      v284(v285);
      uint64_t v28 = sub_1AC7F0();
      os_log_type_t v286 = sub_1ACF50();
      if (sub_FD440(v286))
      {
        sub_1327DC();
        unsigned int v31 = *(void (**)(uint64_t))(v2 + 26744);
        uint64_t v287 = (_WORD *)sub_1321CC();
        sub_1317C0(v287);
        sub_1322DC();
        swift_bridgeObjectRelease();
        sub_131FDC(&def_342E4, v28, (os_log_type_t)v283, "Needed name disambiguation but intentResponse.matchingMeds was nil.");
        sub_497D4();

        sub_E530();
        v288();
      }
      else
      {
        v328 = *(void (**)(void (*)(uint64_t), char **))(v2 + 27408);
        unsigned int v31 = *(void (**)(uint64_t))(v2 + 27240);
        uint64_t v1 = *(char ***)(v2 + 26736);

        swift_bridgeObjectRelease();
        v328(v31, v1);
      }
      v329 = *(void **)(v2 + 27616);
      uint64_t v330 = sub_131D14();
      sub_9B48(v330, v2 + 11648);
      sub_75790((void *)(v2 + 11648), (void *)(v2 + 11488));
      sub_9BA4();
      sub_1AB120();

      goto LABEL_129;
    case 'h':
      v418 = v10;
      sub_131AA4();
      uint64_t v64 = *(void *)(v2 + 26736);
      sub_131EEC();
      swift_bridgeObjectRelease();
      sub_132360();
      swift_bridgeObjectRelease();
      sub_132034();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v65 = sub_131EF8();
      sub_131ACC(v65, v66, v67, v68, v69, v70, v71, v72, v73);
      sub_A340();
      uint64_t v74 = sub_132150();
      v5(v74);
      uint64_t v49 = sub_1AC7F0();
      os_log_type_t v75 = sub_1ACF50();
      if (sub_A3D0(v75))
      {
        sub_132278();
        uint64_t v76 = (_WORD *)sub_131970();
        sub_1317C0(v76);
        sub_131A20();
        uint64_t v394 = (uint64_t)v1;
        swift_bridgeObjectRelease();
        sub_131958(&def_342E4, v49, (os_log_type_t)v64, "got state .needsScheduleDisambiguation in SpecificMedLoggingFlow");
        sub_497D4();

        sub_E530();
        v6();
      }
      else
      {
        os_log_type_t v166 = *(void (**)(void))(v2 + 27408);
        sub_131DDC();
        swift_bridgeObjectRelease();
        sub_E530();
        v166();
        uint64_t v394 = *(void *)(v2 + 27624);
      }
      uint64_t v167 = sub_12E014(v10, (SEL *)&selRef_matchingSchedules, (void (*)(void))&type metadata accessor for MatchedMedSchedule);
      if (v167)
      {
        uint64_t v44 = v167;
        v428 = &_swiftEmptyArrayStorage;
        uint64_t v409 = ((uint64_t (*)(void))sub_106E78)();
        if (!v409)
        {
LABEL_61:
          v371 = *(void **)(v2 + 27616);
          uint64_t v391 = *(void *)(v2 + 27592);
          uint64_t v387 = *(void *)(v2 + 27584);
          uint64_t v382 = *(void *)(v2 + 27576);
          uint64_t v378 = *(void *)(v2 + 27568);
          uint64_t v375 = *(void *)(v2 + 27560);
          uint64_t v373 = *(void *)(v2 + 27552);
          uint64_t v369 = *(void *)(v2 + 27544);
          uint64_t v182 = *(void *)(v2 + 27536);
          uint64_t v411 = *(void *)(v2 + 26728);
          uint64_t v404 = *(void *)(v2 + 26688);
          uint64_t v396 = *(void *)(v2 + 26432);
          uint64_t v183 = *(void *)(v2 + 25976);
          swift_bridgeObjectRelease();
          type metadata accessor for MedScheduleDisambiguationStrategy();
          sub_9B48(v183 + 64, v2 + 10208);
          uint64_t v184 = sub_132F0C();
          sub_E3FC(v184, v185);
          sub_9AD48((uint64_t *)v420);
          sub_D0BE4((void *)(v2 + 10208), v420, (long long *)(v2 + 20408));
          swift_retain();
          sub_1AB350();
          *(void *)(v2 + 25848) = sub_129F64();
          sub_12A058();
          sub_2694(&qword_206D18);
          sub_B56C(&qword_206D20, &qword_206D18);
          sub_1AB100();
          swift_release();

          sub_132F5C();
          sub_4610C(v182, v369, v373, v375, v378, v382, v387, v391, v368);
          swift_release();

          uint64_t v186 = v396;
LABEL_86:
          sub_12E41C(v186, (void (*)(void))type metadata accessor for SnippetHeaderModel);
          sub_5B028(v404, &qword_201E28);
          sub_5B028(v411, &qword_2032A0);
          swift_release();
          goto LABEL_132;
        }
        v390 = (void *)(v2 + 9888);
        v386 = (void *)(v2 + 10048);
        BOOL v415 = sub_1AA908(v44);
        uint64_t v47 = 0;
        uint64_t v402 = v44;
        while (1)
        {
          id v168 = v415 ? *(id *)(v44 + 8 * v47 + 32) : (id)sub_1AD0A0();
          uint64_t v50 = v168;
          uint64_t v169 = v47 + 1;
          if (__OFADD__(v47, 1)) {
            break;
          }
          uint64_t v170 = sub_12E078(v168, (SEL *)&selRef_scheduleID);
          if (!v171) {
            goto LABEL_161;
          }
          uint64_t v172 = v170;
          uint64_t v173 = v171;
          uint64_t v174 = sub_12E078(v50, (SEL *)&selRef_schedule);
          if (!v175) {
            goto LABEL_160;
          }
          uint64_t v176 = v174;
          uint64_t v177 = v175;
          uint64_t v178 = sub_12E078(v50, (SEL *)&selRef_medName);
          if (!v179) {
            goto LABEL_159;
          }
          unint64_t v7 = v178;
          uint64_t v1 = v179;
          uint64_t v180 = sub_12E078(v50, (SEL *)&selRef_remainingMedCount);
          if (!v181)
          {
            swift_bridgeObjectRelease();
LABEL_159:
            swift_bridgeObjectRelease();
LABEL_160:
            swift_bridgeObjectRelease();
LABEL_161:
            v381 = v50;
            swift_bridgeObjectRelease();
            v354 = *(void (**)(uint64_t))(v2 + 27384);
            swift_bridgeObjectRelease();
            sub_A340();
            uint64_t v355 = sub_470B8();
            v354(v355);
            v356 = sub_1AC7F0();
            os_log_type_t v357 = sub_1ACF50();
            sub_13221C(v357);
            v358 = *(void (**)(void))(v2 + 27408);
            sub_132B44();
            if (v359)
            {
              v360 = (_WORD *)sub_49780();
              sub_1317C0(v360);
              sub_12D1CC((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)v430, (uint64_t)v429, (uint64_t)v420);
              swift_bridgeObjectRelease();
              sub_13201C(&def_342E4, v356, (os_log_type_t)v169, "Missing fields while unpacking matchingScheduleObjects from intentResponse, returning GenericErrorFlow");
              sub_497D4();
            }
            else
            {

              swift_bridgeObjectRelease();
            }
            sub_E530();
            v358();
            v361 = *(void **)(v2 + 27616);
            uint64_t v403 = *(void *)(v2 + 27592);
            uint64_t v398 = *(void *)(v2 + 27584);
            uint64_t v385 = *(void *)(v2 + 27576);
            uint64_t v377 = *(void *)(v2 + 27568);
            uint64_t v362 = *(void *)(v2 + 27560);
            uint64_t v363 = *(void *)(v2 + 27552);
            uint64_t v364 = *(void *)(v2 + 27544);
            uint64_t v365 = *(void *)(v2 + 27536);
            uint64_t v366 = *(void *)(v2 + 26728);
            uint64_t v416 = *(void *)(v2 + 26688);
            uint64_t v410 = *(void *)(v2 + 26432);
            uint64_t v367 = sub_13220C();
            sub_9B48(v367, (uint64_t)v386);
            sub_75790(v386, v390);
            sub_9BA4();
            sub_1AB120();

            sub_132F5C();
            sub_4610C(v365, v364, v363, v362, v377, v385, v398, v403, v368);

            sub_9BF0((uint64_t)v390);
            sub_12E41C(v410, (void (*)(void))type metadata accessor for SnippetHeaderModel);
            sub_5B028(v416, &qword_201E28);
            uint64_t v247 = v366;
LABEL_131:
            sub_5B028(v247, &qword_2032A0);
LABEL_132:
            sub_131324();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            sub_E564();
            sub_131C08();
            __asm { BRAA            X1, X16 }
          }
          *(void *)&long long v421 = v172;
          *((void *)&v421 + 1) = v173;
          uint64_t v422 = v176;
          uint64_t v423 = v177;
          unint64_t v424 = v7;
          v425 = v1;
          uint64_t v426 = v180;
          uint64_t v427 = v181;
          uint64_t v49 = &v428;
          sub_106F34(&v421);

          ++v47;
          uint64_t v44 = v402;
          if (v169 == v409) {
            goto LABEL_61;
          }
        }
LABEL_166:
        __break(1u);
        goto LABEL_167;
      }
      uint64_t v282 = (void *)(v2 + 9088);
      uint64_t v289 = v2 + 9248;
      uint64_t v290 = *(void (**)(uint64_t))(v2 + 27384);
      uint64_t v1 = *(char ***)(v2 + 26736);
      sub_A340();
      uint64_t v291 = sub_470B8();
      v290(v291);
      uint64_t v28 = sub_1AC7F0();
      os_log_type_t v292 = sub_1ACF50();
      sub_131BA4(v292);
      unsigned int v31 = *(void (**)(uint64_t))(v2 + 27408);
      sub_132738();
      if (!v293) {
        goto LABEL_126;
      }
      unsigned int v31 = (void (*)(uint64_t))sub_49780();
      sub_1317C0(v31);
      uint64_t v1 = (char **)v394;
      sub_12D1CC((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)v430, (uint64_t)v429, (uint64_t)v420);
      swift_bridgeObjectRelease();
      v294 = "Needed schedule disambiguation but intentResponse.matchingSchedules was nil.";
      goto LABEL_125;
    case 'i':
      sub_131934();
      sub_131EEC();
      swift_bridgeObjectRelease();
      sub_131FD0();
      swift_bridgeObjectRelease();
      sub_131E6C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_A340();
      uint64_t v77 = sub_47CBC();
      ((void (*)(uint64_t))v7)(v77);
      uint64_t v78 = sub_1AC7F0();
      os_log_type_t v79 = sub_1ACF50();
      if (sub_29300(v79))
      {
        sub_132278();
        uint64_t v80 = (_WORD *)sub_131970();
        sub_1317C0(v80);
        sub_131A20();
        swift_bridgeObjectRelease();
        sub_131958(&def_342E4, v78, (os_log_type_t)v0, "Received failure intent response, creating output.");
        sub_497D4();

        sub_E530();
        v6();
      }
      else
      {
        uint64_t v187 = *(void (**)(uint64_t))(v2 + 27408);
        uint64_t v0 = *(void *)(v2 + 27272);
        sub_131DDC();
        swift_bridgeObjectRelease();
        uint64_t v188 = sub_13198C();
        v187(v188);
      }
      sub_132418();
      *(void *)(v2 + 27744) = v78;
      swift_retain();
      swift_retain();
      getLocalizedMedName(from:)();
      sub_1329E8();
      if (v0)
      {
        sub_1ACE40();
        swift_bridgeObjectRelease();
        uint64_t v189 = 0;
      }
      else
      {
        uint64_t v189 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v2 + 26632), v189, 1, *(void *)(v2 + 26384));
      sub_129D2C();
      uint64_t v295 = (void *)swift_task_alloc();
      *(void *)(v2 + 27752) = v295;
      *uint64_t v295 = v2;
      v295[1] = sub_111010;
      sub_132A94(*(void *)(v2 + 26632));
      sub_131C08();
      return sub_1A6800();
    case 'j':
      v418 = v10;
      sub_131AA4();
      uint64_t v81 = *(void *)(v2 + 26736);
      sub_131EEC();
      swift_bridgeObjectRelease();
      sub_132360();
      swift_bridgeObjectRelease();
      sub_132034();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v82 = sub_131EF8();
      sub_131ACC(v82, v83, v84, v85, v86, v87, v88, v89, v90);
      sub_A340();
      uint64_t v91 = sub_132150();
      v5(v91);
      uint64_t v92 = sub_1AC7F0();
      os_log_type_t v93 = sub_1ACF50();
      if (sub_A3D0(v93))
      {
        sub_132278();
        uint64_t v94 = (_WORD *)sub_131970();
        sub_1317C0(v94);
        uint64_t v5 = (void (*)(uint64_t))&_swiftEmptyArrayStorage;
        sub_131A20();
        swift_bridgeObjectRelease();
        sub_131958(&def_342E4, v92, (os_log_type_t)v81, "got state .awaitingConfirmationLogAsScheduled in SpecificMedLoggingFlow");
        sub_497D4();

        sub_E530();
        v6();
      }
      else
      {
        uint64_t v190 = *(void (**)(void))(v2 + 27408);
        sub_131DDC();
        swift_bridgeObjectRelease();
        sub_E530();
        v190();
        uint64_t v1 = *(char ***)(v2 + 27624);
      }
      uint64_t v191 = sub_12E014(v10, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
      if (v191)
      {
        uint64_t v192 = v191;
        swift_retain();
        uint64_t v193 = getLocalizedMedName(from:)();
        uint64_t v195 = v194;
        swift_release();
        if (v195)
        {
          uint64_t v394 = *(void *)(v2 + 27616);
          uint64_t v411 = *(void *)(v2 + 26728);
          uint64_t v404 = *(void *)(v2 + 26688);
          uint64_t v399 = *(void *)(v2 + 26432);
          uint64_t v196 = *(void *)(v2 + 25976);
          type metadata accessor for LogMedAsScheduledConfirmationStrategy();
          swift_retain();
          char v197 = getMedStatus(from:)();
          swift_release();
          sub_9B48(v196 + 64, v2 + 8608);
          uint64_t v198 = sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
          uint64_t v199 = sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
          sub_9AD48((uint64_t *)v420);
          uint64_t v200 = sub_BCF28(v193, v195, v197 & 1, v192, (const void *)(v2 + 8608), v198, v199, (uint64_t)v420);
          swift_retain();
          sub_1AB350();
          *(void *)(v2 + 25872) = sub_106D34(v200, (uint64_t)v420, (void (*)(void))type metadata accessor for LogMedAsScheduledConfirmationStrategy, &qword_203000, (void (*)(uint64_t))type metadata accessor for LogMedAsScheduledConfirmationStrategy);
          sub_12A098();
          sub_2694(&qword_202FD8);
          sub_B56C(&qword_202FE8, &qword_202FD8);
          sub_1AB100();
          swift_release();

LABEL_84:
          swift_release();
          uint64_t v230 = (void *)v394;
LABEL_85:

          uint64_t v186 = v399;
          goto LABEL_86;
        }
        uint64_t v282 = (void *)(v2 + 7168);
        v322 = *(void (**)(uint64_t))(v2 + 27384);
        uint64_t v323 = *(void *)(v2 + 26736);
        swift_bridgeObjectRelease();
        sub_A340();
        uint64_t v324 = sub_132094();
        v322(v324);
        uint64_t v28 = sub_1AC7F0();
        os_log_type_t v325 = sub_1ACF60();
        sub_131BA4(v325);
        unsigned int v31 = *(void (**)(uint64_t))(v2 + 27408);
        sub_132738();
        if (v326)
        {
          unsigned int v31 = (void (*)(uint64_t))sub_49780();
          sub_1317C0(v31);
          sub_1322DC();
          swift_bridgeObjectRelease();
          sub_13201C(&def_342E4, v28, (os_log_type_t)v323, "Needed confirmation log as scheduled but unable to unwrap med name from task. Returning GenericErrorFlow");
          sub_497D4();

          sub_47BF8();
          sub_E530();
          v327();
        }
        else
        {

          swift_bridgeObjectRelease();
          uint64_t v331 = sub_13245C();
          v31(v331);
        }
        uint64_t v310 = *(void **)(v2 + 27616);
        uint64_t v332 = sub_131D14();
        sub_9B48(v332, v2 + 7968);
        uint64_t v313 = (void *)sub_132D58();
        goto LABEL_128;
      }
      uint64_t v282 = (void *)(v2 + 6368);
      uint64_t v289 = v2 + 7008;
      sub_13236C();
      sub_A340();
      uint64_t v297 = sub_132518();
      v5(v297);
      uint64_t v28 = sub_1AC7F0();
      os_log_type_t v298 = sub_1ACF50();
      sub_131BA4(v298);
      unsigned int v31 = *(void (**)(uint64_t))(v2 + 27408);
      goto LABEL_119;
    case 'k':
      v418 = v10;
      sub_131AA4();
      uint64_t v95 = *(void *)(v2 + 26736);
      sub_131EEC();
      swift_bridgeObjectRelease();
      sub_132360();
      swift_bridgeObjectRelease();
      sub_132034();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v96 = sub_131EF8();
      sub_131ACC(v96, v97, v98, v99, v100, v101, v102, v103, v104);
      sub_A340();
      uint64_t v105 = sub_132150();
      v5(v105);
      uint64_t v106 = sub_1AC7F0();
      os_log_type_t v107 = sub_1ACF50();
      if (sub_A3D0(v107))
      {
        sub_132278();
        uint64_t v108 = (_WORD *)sub_131970();
        sub_1317C0(v108);
        uint64_t v5 = (void (*)(uint64_t))&_swiftEmptyArrayStorage;
        sub_131A20();
        swift_bridgeObjectRelease();
        sub_131958(&def_342E4, v106, (os_log_type_t)v95, "got state .awaitingConfirmationLogAsNeeded in SpecificMedLoggingFlow");
        sub_497D4();

        sub_E530();
        v6();
      }
      else
      {
        uint64_t v201 = *(void (**)(void))(v2 + 27408);
        sub_131DDC();
        swift_bridgeObjectRelease();
        sub_E530();
        v201();
        uint64_t v1 = *(char ***)(v2 + 27624);
      }
      uint64_t v202 = v10;
      if (sub_12E014(v10, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName))
      {
        sub_131BD8();
        type metadata accessor for LogMedAsNeededConfirmationStrategy();
        sub_9B48((uint64_t)v6 + 64, v2 + 5888);
        sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
        sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
        sub_9AD48((uint64_t *)v420);
        uint64_t v203 = sub_1326DC();
        uint64_t v208 = sub_17AA8C(v203, v204, v205, v206, v207);
        swift_retain();
        sub_1AB350();
        *(void *)(v2 + 25920) = sub_106D34((uint64_t)v208, (uint64_t)v420, (void (*)(void))type metadata accessor for LogMedAsNeededConfirmationStrategy, &qword_206D80, (void (*)(uint64_t))type metadata accessor for LogMedAsNeededConfirmationStrategy);
        sub_12A0D8();
LABEL_80:
        sub_1326A8();
        sub_2694(&qword_202FD8);
        sub_B56C(&qword_202FE8, &qword_202FD8);
        sub_132ED8();
        sub_1AB100();
        swift_release();

        goto LABEL_84;
      }
      uint64_t v282 = (void *)(v2 + 5568);
      uint64_t v289 = v2 + 5728;
      sub_13236C();
      sub_A340();
      uint64_t v299 = sub_132518();
      v5(v299);
      uint64_t v28 = sub_1AC7F0();
      os_log_type_t v300 = sub_1ACF50();
      sub_131BA4(v300);
      unsigned int v31 = *(void (**)(uint64_t))(v2 + 27408);
LABEL_119:
      sub_132738();
      if (!v301) {
        goto LABEL_126;
      }
      unsigned int v31 = (void (*)(uint64_t))sub_49780();
      sub_1317C0(v31);
      sub_132704((uint64_t)&_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease();
      v294 = "Needed confirmation log as scheduled but intentResponse.matchingMeds was nil.";
      goto LABEL_125;
    case 'l':
      sub_13180C();
      sub_A340();
      uint64_t v109 = sub_470B8();
      v4(v109);
      uint64_t v110 = sub_1AC7F0();
      os_log_type_t v111 = sub_1ACF50();
      if (sub_A3D0(v111))
      {
        sub_1327DC();
        os_log_type_t v112 = (_WORD *)sub_131970();
        sub_1317C0(v112);
        sub_131A20();
        swift_bridgeObjectRelease();
        sub_131958(&def_342E4, v110, v3, "SpecificMedLoggingFlow received .statusBothSkipped intent response, creating output.");
        sub_497D4();

        sub_E530();
        v113();
      }
      else
      {
        id v209 = *(void (**)(uint64_t))(v2 + 27408);
        sub_131DDC();
        swift_bridgeObjectRelease();
        uint64_t v210 = sub_13198C();
        v209(v210);
      }
      uint64_t v211 = *(void *)(v2 + 25976);
      uint64_t v212 = sub_1AB090();
      sub_132AA4(v212, (uint64_t)HKActivityRingUIViewRepresentable.updateUIView(_:context:));
      uint64_t v213 = 1;
      sub_1AB3C0();
      *(void *)(v2 + 27800) = *(void *)(v211 + 336);
      swift_retain();
      unint64_t v214 = sub_12E014(v10, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
      if (v214)
      {
        id v215 = sub_C10E8(v214);
        swift_bridgeObjectRelease();
        if (v215 && (sub_17D4E4(v215), v216))
        {
          sub_1ACE40();
          swift_bridgeObjectRelease();
          uint64_t v213 = 0;
        }
        else
        {
          uint64_t v213 = 1;
        }
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v2 + 26624), v213, 1, *(void *)(v2 + 26384));
      uint64_t v280 = (void *)swift_task_alloc();
      *(void *)(v2 + 27808) = v280;
      *uint64_t v280 = v2;
      v280[1] = sub_112264;
      sub_132A94(*(void *)(v2 + 26624));
      sub_131C08();
      return sub_1A7108();
    case 'm':
      v418 = v10;
      sub_131AA4();
      uint64_t v114 = *(void *)(v2 + 26736);
      sub_131EEC();
      swift_bridgeObjectRelease();
      sub_132360();
      swift_bridgeObjectRelease();
      sub_132034();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v115 = sub_131EF8();
      sub_131ACC(v115, v116, v117, v118, v119, v120, v121, v122, v123);
      sub_A340();
      uint64_t v124 = sub_132150();
      v5(v124);
      char v125 = sub_1AC7F0();
      os_log_type_t v126 = sub_1ACF50();
      if (sub_A3D0(v126))
      {
        sub_132278();
        NSString v127 = (_WORD *)sub_131970();
        sub_1317C0(v127);
        uint64_t v5 = (void (*)(uint64_t))&_swiftEmptyArrayStorage;
        sub_131A20();
        swift_bridgeObjectRelease();
        sub_131958(&def_342E4, v125, (os_log_type_t)v114, "got state .awaitingConfirmationUpdateToStatus in SpecificMedLoggingFlow");
        sub_497D4();

        sub_E530();
        v6();
      }
      else
      {
        uint64_t v217 = *(void (**)(void))(v2 + 27408);
        sub_131DDC();
        swift_bridgeObjectRelease();
        sub_E530();
        v217();
        uint64_t v1 = *(char ***)(v2 + 27624);
      }
      uint64_t v202 = v10;
      if (sub_12E014(v10, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName))
      {
        sub_131BD8();
        type metadata accessor for MedUpdateLogStatusStrategy();
        sub_9B48((uint64_t)v6 + 64, v2 + 4448);
        sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
        sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
        sub_9AD48((uint64_t *)v420);
        uint64_t v218 = sub_1326DC();
        uint64_t v223 = sub_17AA8C(v218, v219, v220, v221, v222);
        swift_retain();
        sub_1AB350();
        *(void *)(v2 + 25928) = sub_106D34((uint64_t)v223, (uint64_t)v420, (void (*)(void))type metadata accessor for MedUpdateLogStatusStrategy, &qword_206D88, (void (*)(uint64_t))type metadata accessor for MedUpdateLogStatusStrategy);
        sub_12A198();
        goto LABEL_80;
      }
      uint64_t v282 = (void *)(v2 + 3968);
      uint64_t v289 = v2 + 4288;
      sub_13236C();
      sub_A340();
      uint64_t v302 = sub_132518();
      v5(v302);
      uint64_t v28 = sub_1AC7F0();
      os_log_type_t v303 = sub_1ACF50();
      sub_131BA4(v303);
      unsigned int v31 = *(void (**)(uint64_t))(v2 + 27408);
      sub_132738();
      if (v304)
      {
        unsigned int v31 = (void (*)(uint64_t))sub_49780();
        sub_1317C0(v31);
        sub_132704((uint64_t)&_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease();
        v294 = "Needed confirmation update to status but intentResponse.matchingMeds was nil.";
LABEL_125:
        sub_13201C(&def_342E4, v28, (os_log_type_t)v6, v294);
        sub_497D4();

        sub_47BF8();
        sub_E530();
        v308();
      }
      else
      {
LABEL_126:

        swift_bridgeObjectRelease();
        uint64_t v309 = sub_13245C();
        v31(v309);
      }
      uint64_t v310 = *(void **)(v2 + 27616);
      uint64_t v311 = sub_131D14();
      sub_9B48(v311, v289);
      v312 = v282;
      uint64_t v313 = (void *)v289;
LABEL_128:
      sub_75790(v313, v312);
      sub_9BA4();
      sub_1AB120();

LABEL_129:
      uint64_t v156 = (uint64_t)v282;
LABEL_130:
      sub_9BF0(v156);
      sub_12E41C((uint64_t)v1, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      sub_5B028((uint64_t)v31, &qword_201E28);
      uint64_t v247 = (uint64_t)v28;
      goto LABEL_131;
    case 'n':
      v418 = v10;
      sub_131934();
      uint64_t v128 = *(void *)(v2 + 27112);
      sub_131EEC();
      swift_bridgeObjectRelease();
      sub_131FD0();
      swift_bridgeObjectRelease();
      sub_131E6C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_A340();
      uint64_t v129 = sub_47CBC();
      ((void (*)(uint64_t))v7)(v129);
      uint64_t v130 = sub_1AC7F0();
      os_log_type_t v131 = sub_1ACF50();
      if (sub_A3D0(v131))
      {
        sub_132278();
        id v132 = (_WORD *)sub_131970();
        sub_1317C0(v132);
        uint64_t v5 = (void (*)(uint64_t))&_swiftEmptyArrayStorage;
        sub_131A20();
        swift_bridgeObjectRelease();
        sub_131958(&def_342E4, v130, (os_log_type_t)v128, "SpecificMedLoggingFlow received .needsConfirmMixedLogging in intent response, creating confirmation.");
        sub_497D4();

        sub_E530();
        v6();
      }
      else
      {
        uint64_t v224 = *(void (**)(void))(v2 + 27408);
        sub_131DDC();
        swift_bridgeObjectRelease();
        sub_E530();
        v224();
        uint64_t v1 = *(char ***)(v2 + 27624);
      }
      sub_131D6C();
      uint64_t v225 = sub_12E014(v10, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
      if (v225)
      {
        uint64_t v226 = v225;
        sub_131BD8();
        type metadata accessor for LogMedScheduleMixedStatusConfirmationStrategy();
        swift_retain();
        char v227 = getMedStatus(from:)();
        swift_release();
        sub_106FB8((uint64_t *)v420);
        uint64_t v228 = sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
        uint64_t v229 = sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
        sub_9AD48((uint64_t *)v429);
        sub_7BC0C(v227 & 1, v226, v420, v228, v229, v429);
        swift_retain();
        sub_1AB350();
        *(void *)(v2 + 25952) = sub_106DD4();
        sub_12A1D8();
        sub_2694(&qword_206C68);
        sub_B56C(&qword_206C70, &qword_206C68);
        sub_132ED8();
        sub_1AB100();
        swift_release();

        goto LABEL_84;
      }
      uint64_t v289 = v2 + 2528;
      uint64_t v282 = (void *)(v2 + 2848);
      sub_13236C();
      sub_A340();
      uint64_t v305 = sub_132518();
      v5(v305);
      uint64_t v28 = sub_1AC7F0();
      os_log_type_t v306 = sub_1ACF50();
      sub_131BA4(v306);
      unsigned int v31 = *(void (**)(uint64_t))(v2 + 27408);
      sub_132738();
      if (!v307) {
        goto LABEL_126;
      }
      unsigned int v31 = (void (*)(uint64_t))sub_49780();
      sub_1317C0(v31);
      sub_132704((uint64_t)&_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease();
      v294 = "Needed confirmation for mixed logging, but intentResponse.matchingMeds was nil.";
      goto LABEL_125;
    case 'o':
      sub_13180C();
      uint64_t v133 = *(void *)(v2 + 27128);
      sub_A340();
      uint64_t v134 = sub_470B8();
      v4(v134);
      Class v135 = sub_1AC7F0();
      os_log_type_t v136 = sub_1ACF50();
      if (sub_29300(v136))
      {
        sub_132278();
        char v137 = (_WORD *)sub_131970();
        sub_1317C0(v137);
        sub_131A20();
        swift_bridgeObjectRelease();
        sub_131958(&def_342E4, v135, (os_log_type_t)v133, "SpecificMedLoggingFlow received .allMedsLoggedAlready in intent response, creating output.");
        sub_497D4();

        sub_E530();
        v6();
      }
      else
      {
        uint64_t v231 = *(void (**)(uint64_t))(v2 + 27408);
        sub_131DDC();
        swift_bridgeObjectRelease();
        uint64_t v232 = sub_13198C();
        v231(v232);
      }
      uint64_t v233 = *(void *)(v2 + 25976);
      uint64_t v234 = sub_1AB090();
      sub_132AA4(v234, (uint64_t)HKActivityRingUIViewRepresentable.updateUIView(_:context:));
      sub_1AB3C0();
      *(void *)(v2 + 27848) = *(void *)(v233 + 336);
      swift_retain();
      swift_retain();
      getMedStatus(from:)();
      swift_release();
      v235 = (void *)swift_task_alloc();
      *(void *)(v2 + 27856) = v235;
      void *v235 = v2;
      v235[1] = sub_114338;
      sub_132E80();
      sub_131C08();
      return sub_1A6154();
    case 'p':
      v419 = v10;
      uint64_t v414 = v2 + 208;
      v408 = (const void *)(v2 + 11328);
      v401 = (long long *)(v2 + 20488);
      uint64_t v138 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 27384);
      uint64_t v139 = *(void *)(v2 + 27376);
      uint64_t v140 = *(void *)(v2 + 27304);
      uint64_t v141 = *(void *)(v2 + 26736);
      sub_1325FC();
      swift_bridgeObjectRelease();
      sub_1327EC();
      swift_bridgeObjectRelease();
      sub_132B50();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_A340();
      v138(v140, v139, v141);
      uint64_t v142 = sub_1AC7F0();
      os_log_type_t v143 = sub_1ACF60();
      if (sub_13221C(v143))
      {
        uint64_t v144 = *(void (**)(void))(v2 + 27408);
        uint64_t v145 = (_WORD *)sub_132CA0();
        sub_1317C0(v145);
        sub_132B24();
        swift_bridgeObjectRelease();
        sub_132284(&def_342E4, v142, (os_log_type_t)v140, "Received gotComplexDosageLoggingError, creating output.");
        sub_497D4();

        sub_E530();
        v144();
      }
      else
      {
        id v238 = *(void (**)(uint64_t))(v2 + 27408);
        sub_131DDC();
        swift_bridgeObjectRelease();
        uint64_t v239 = sub_13198C();
        v238(v239);
      }
      uint64_t v240 = *(void **)(v2 + 27616);
      uint64_t v395 = *(void *)(v2 + 26728);
      uint64_t v392 = *(void *)(v2 + 26688);
      uint64_t v241 = *(void *)(v2 + 26432);
      uint64_t v242 = *(void *)(v2 + 25976);
      uint64_t v243 = v242 + 24;
      uint64_t v244 = *(void *)(v242 + 16);
      sub_9B48(v242 + 64, (uint64_t)v408);
      sub_E3FC(v243, (uint64_t)v401);
      swift_retain();
      sub_9AD48((uint64_t *)v429);
      uint64_t v245 = sub_AB20C();
      uint64_t v246 = sub_AB238();
      sub_3F810((uint64_t *)v420);
      sub_AB2FC(v244, v408, v401, 0, 0, v429, v245, v246, v414, v420);
      sub_ABC40();
      sub_1AB120();

      sub_ABB40(v414);
      sub_12E41C(v241, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      uint64_t v165 = v392;
LABEL_93:
      sub_5B028(v165, &qword_201E28);
      uint64_t v247 = v395;
      goto LABEL_131;
    default:
      if (v12 == 4)
      {
        uint64_t v146 = v10;
        sub_13180C();
        sub_A340();
        uint64_t v147 = sub_470B8();
        v4(v147);
        uint64_t v148 = sub_1AC7F0();
        os_log_type_t v149 = sub_1ACF50();
        if (sub_A3D0(v149))
        {
          sub_1327DC();
          uint64_t v150 = (_WORD *)sub_131970();
          sub_1317C0(v150);
          sub_131A20();
          swift_bridgeObjectRelease();
          sub_131958(&def_342E4, v148, v3, "Received successful intent response, creating output.");
          sub_497D4();

          sub_E530();
          v151();
        }
        else
        {
          uint64_t v251 = *(void (**)(uint64_t))(v2 + 27408);
          sub_131DDC();
          swift_bridgeObjectRelease();
          uint64_t v252 = sub_13198C();
          v251(v252);
        }
        uint64_t v253 = *(void *)(v2 + 26352);
        uint64_t v254 = *(void *)(v2 + 26320);
        uint64_t v255 = sub_12E014(v146, (SEL *)&selRef_matchingMedsBeforeUpdate, (void (*)(void))&type metadata accessor for MatchedMedName);
        if (v255) {
          v256 = (void *)v255;
        }
        else {
          v256 = &_swiftEmptyArrayStorage;
        }
        sub_12C9AC((uint64_t)v256);
        swift_bridgeObjectRelease();
        id v257 = v146;
        swift_retain();
        uint64_t v258 = (void *)sub_F1390();
        sub_129994(v258, v259);
        uint64_t v260 = *(int *)(v254 + 36);
        *(_DWORD *)(v2 + 28512) = v260;
        uint64_t v261 = (uint64_t *)(v253 + v260);
        uint64_t v262 = *v261;
        char v263 = *((unsigned char *)v261 + 8);
        sub_132528();
        if ((v263 & 1) == 0)
        {
          uint64_t v264 = *(void *)(v2 + 26680);
          uint64_t v265 = *(void *)(v2 + 26672);
          uint64_t v266 = *(void *)(v2 + 26384);
          sub_2694(&qword_205890);
          uint64_t v267 = swift_allocObject();
          uint64_t v268 = sub_731BC(v267, 1);
          v269[3] = &type metadata for Double;
          v269[4] = &protocol witness table for Double;
          *uint64_t v269 = v262;
          uint64_t v270 = HKActivityRingUIViewRepresentable.updateUIView(_:context:)(v268);
          sub_132548(v270);
          sub_1ACE40();
          swift_bridgeObjectRelease();
          sub_5B028(v264, &qword_201E28);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v265, 0, 1, v266);
          uint64_t v271 = sub_1324AC();
          sub_A76E8(v271, v272, &qword_201E28);
        }
        uint64_t v273 = *(void *)(v2 + 26680);
        uint64_t v274 = *(void *)(v2 + 26664);
        uint64_t v275 = *(void *)(v2 + 26656);
        uint64_t v276 = *(void *)(v2 + 26352);
        uint64_t v277 = *(void *)(v2 + 26320);
        *(void *)(v2 + 27648) = *(void *)(*(void *)(v2 + 25976) + 336);
        sub_CCD04(v276 + *(int *)(v277 + 24), v274, &qword_201E28);
        sub_CCD04(v273, v275, &qword_201E28);
        swift_retain();
        sub_12E078(v257, (SEL *)&selRef_dosageUnit);
        if (v278)
        {
          sub_1ACE40();
          swift_bridgeObjectRelease();
          uint64_t v279 = 0;
        }
        else
        {
          uint64_t v279 = 1;
        }
        uint64_t v318 = *(void *)(v2 + 26352);
        uint64_t v319 = *(void *)(v2 + 26320);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v2 + 26648), v279, 1, *(void *)(v2 + 26384));
        LOBYTE(v318) = *(unsigned char *)(v318 + *(int *)(v319 + 44));
        v320 = (void *)swift_task_alloc();
        *(void *)(v2 + 27656) = v320;
        void *v320 = v2;
        v320[1] = sub_10E800;
        uint64_t v321 = *(void *)(v2 + 26648);
        char v435 = v318;
        uint64_t v434 = v321;
        return sub_1A6A78();
      }
      else
      {
        if (v12 != 5)
        {
LABEL_8:
          v417 = v10;
          v406 = (void *)(v2 + 3488);
          uint64_t v25 = *(void (**)(uint64_t, char **, uint64_t))(v2 + 27384);
          uint64_t v1 = *(char ***)(v2 + 27376);
          uint64_t v26 = *(void *)(v2 + 27096);
          uint64_t v27 = *(void *)(v2 + 26736);
          sub_1325FC();
          swift_bridgeObjectRelease();
          sub_132360();
          swift_bridgeObjectRelease();
          sub_132034();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_A340();
          v25(v26, v1, v27);
          uint64_t v28 = sub_1AC7F0();
          os_log_type_t v29 = sub_1ACF50();
          if (sub_FD440(v29))
          {
            uint64_t v1 = *(char ***)(v2 + 27624);
            uint64_t v30 = *(void (**)(void))(v2 + 27408);
            unsigned int v31 = *(void (**)(uint64_t))(v2 + 27096);
            unsigned int v32 = (_WORD *)sub_1321CC();
            sub_1317C0(v32);
            sub_1322DC();
            swift_bridgeObjectRelease();
            sub_131FDC(&def_342E4, v28, (os_log_type_t)v26, "Intent response code was not an expected one or is one we're not handling yet, returning nil output.");
            sub_497D4();

            sub_E530();
            v30();
          }
          else
          {
            char v152 = *(void (**)(uint64_t))(v2 + 27408);
            unsigned int v31 = *(void (**)(uint64_t))(v2 + 27096);
            sub_131DDC();
            swift_bridgeObjectRelease();
            uint64_t v153 = sub_13198C();
            v152(v153);
          }
          Class v154 = *(void **)(v2 + 27616);
          uint64_t v155 = sub_131D14();
          sub_9B48(v155, (uint64_t)v406);
          sub_75790(v406, (void *)(v2 + 3648));
          sub_9BA4();
          sub_1AB120();

          uint64_t v156 = v2 + 3648;
          goto LABEL_130;
        }
        sub_131934();
        sub_131EEC();
        swift_bridgeObjectRelease();
        sub_131FD0();
        swift_bridgeObjectRelease();
        sub_131E6C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_A340();
        uint64_t v21 = sub_47CBC();
        ((void (*)(uint64_t))v7)(v21);
        uint64_t v22 = sub_1AC7F0();
        os_log_type_t v23 = sub_1ACF60();
        if (sub_29300(v23))
        {
          sub_132278();
          uint64_t v24 = (_WORD *)sub_131970();
          sub_1317C0(v24);
          sub_131A20();
          swift_bridgeObjectRelease();
          sub_131958(&def_342E4, v22, (os_log_type_t)v0, "Received failure intent response, creating output.");
          sub_497D4();

          sub_E530();
          v6();
        }
        else
        {
          uint64_t v248 = *(void (**)(uint64_t))(v2 + 27408);
          uint64_t v0 = *(void *)(v2 + 27296);
          sub_131DDC();
          swift_bridgeObjectRelease();
          uint64_t v249 = sub_13198C();
          v248(v249);
        }
        sub_132418();
        *(void *)(v2 + 27688) = v22;
        swift_retain();
        swift_retain();
        getLocalizedMedName(from:)();
        sub_1329E8();
        if (v0)
        {
          sub_1ACE40();
          swift_bridgeObjectRelease();
          uint64_t v250 = 0;
        }
        else
        {
          uint64_t v250 = 1;
        }
        sub_132CF0(*(void *)(v2 + 26640), v250);
        v316 = (void *)swift_task_alloc();
        *(void *)(v2 + 27696) = v316;
        void *v316 = v2;
        v316[1] = sub_10FDB0;
        sub_132A94(*(void *)(v2 + 26640));
        sub_131C08();
        return sub_1A6434();
      }
  }
}

uint64_t sub_10E800()
{
  sub_7F418();
  sub_1318C0();
  os_log_type_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *BOOL v6 = v5;
  v3[3458] = v7;
  swift_task_dealloc();
  sub_6FD18();
  if (v0)
  {
    uint64_t v8 = v3[3333];
    uint64_t v9 = v3[3332];
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_CD4F0();
    sub_5B028(v9, &qword_201E28);
    sub_5B028(v8, &qword_201E28);
  }
  else
  {
    uint64_t v10 = v3[3333];
    uint64_t v11 = v3[3332];
    uint64_t v12 = v3[3331];
    swift_release();
    sub_5B028(v12, &qword_201E28);
    sub_5B028(v11, &qword_201E28);
    sub_5B028(v10, &qword_201E28);
  }
  sub_A4F0();
  return _swift_task_switch(v13, v14, v15);
}

#error "10ED58: call analysis failed (funcsize=305)"

uint64_t sub_10EED0()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 22328;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

void sub_10EFC0()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v1 = (void *)v0[3455];
  uint64_t v9 = (void *)v0[3458];
  uint64_t v10 = (void *)v0[3452];
  uint64_t v15 = v0[3336];
  uint64_t v16 = v0[3341];
  uint64_t v14 = v0[3304];
  uint64_t v12 = v0[3335];
  uint64_t v13 = v0[3294];
  uint64_t v11 = v0[3274];
  uint64_t v2 = v0[3264];
  sub_1326B4((uint64_t)(v0 + 2786));
  uint64_t v3 = sub_22F80();
  sub_E3FC(v3, v4);
  uint64_t v5 = sub_47588();
  sub_131CE4(v5);
  v0[3239] = sub_132CD8();
  sub_1328A0();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2776));
  sub_12E41C(v2, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  sub_5B028(v11, &qword_201E20);
  sub_F139C();
  v6();
  sub_5B028(v12, &qword_201E28);
  sub_12E41C(v13, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_12E41C(v14, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v15, &qword_201E28);
  sub_5B028(v16, &qword_2032A0);
  swift_release();
  sub_130580();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131CA4();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_10F6BC()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  sub_A340();
  uint64_t v2 = sub_470B8();
  v1(v2);
  uint64_t v3 = (void *)sub_1AC7F0();
  os_log_type_t v4 = sub_1ACF50();
  sub_47A70(v4);
  uint64_t v5 = (void (*)(void))v0[3426];
  sub_131CD8();
  if (v6)
  {
    uint64_t v7 = (_WORD *)sub_49780();
    sub_4753C(v7);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v8, v9, "Couldn't create specificMedicationSuccess_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  sub_E530();
  v5();
  uint64_t v10 = (void *)v0[3455];
  uint64_t v11 = (void *)v0[3452];
  uint64_t v19 = v0[3341];
  uint64_t v12 = v0[3335];
  uint64_t v13 = v0[3304];
  uint64_t v14 = v0[3294];
  sub_9B48(v0[3247] + 64, (uint64_t)(v0 + 1016));
  sub_75790(v0 + 1016, v0 + 1316);
  sub_9BA4();
  sub_1325E4();

  sub_9BF0((uint64_t)(v0 + 1316));
  sub_5B028(v12, &qword_201E28);
  sub_12E41C(v14, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_12E41C(v13, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v15 = sub_479C8();
  sub_5B028(v15, v16);
  sub_5B028(v19, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_10FDB0()
{
  sub_47634();
  sub_470A0();
  sub_E53C();
  *os_log_type_t v4 = v3;
  uint64_t v5 = *v2;
  sub_E53C();
  *int v6 = v5;
  *(void *)(v8 + 27704) = v7;
  *(void *)(v8 + 27712) = v1;
  swift_task_dealloc();
  sub_47C98();
  uint64_t v9 = *(void *)(v0 + 26640);
  if (v1)
  {
    swift_release();
    swift_errorRelease();
    sub_5B028(v9, &qword_201E28);
  }
  else
  {
    sub_5B028(v9, &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_10FF00()
{
  sub_471BC();
  sub_4712C();
  sub_132640(18888);
  uint64_t v3 = (void *)v0[3463];
  uint64_t v4 = sub_132DB0();
  sub_47E6C(v4, (uint64_t)HKActivityRingUIViewRepresentable.updateUIView(_:context:));
  sub_1AB3C0();
  id v5 = [v3 catId];
  sub_1ACDD0();
  sub_1322FC();
  sub_1324E4();
  sub_E3FC(v2, (uint64_t)(v0 + 2376));
  sub_9B48(v1 + 64, (uint64_t)(v0 + 1976));
  sub_E3FC(v1 + 296, (uint64_t)(v0 + 2381));
  v0[3465] = *(void *)(v1 + 336);
  v0[3466] = *(void *)(v1 + 344);
  swift_retain();
  swift_retain();
  swift_task_alloc();
  sub_250E0();
  v0[3467] = v6;
  *int v6 = v7;
  v6[1] = sub_11005C;
  sub_13217C();
  sub_47294();
  return sub_C1180();
}

uint64_t sub_11005C()
{
  sub_47D74();
  sub_E588();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 19008;
  uint64_t v4 = v1 + 19048;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *int v6 = v5;
  swift_task_dealloc();
  swift_release();
  swift_release();
  sub_132EE4(v4);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v7, v8, v9);
}

void sub_110188()
{
  sub_46EFC();
  sub_4712C();
  if (v1[2364])
  {
    uint64_t v4 = (void *)v1[3463];
    uint64_t v5 = (void *)v1[3452];
    sub_13237C();
    sub_1325A4(v6, v1[3288]);
    sub_E3FC((uint64_t)(v1 + 2316), (uint64_t)(v1 + 2481));
    uint64_t v7 = sub_47588();
    sub_131E78(v7);
    v1[3218] = sub_1327B0();
    sub_132794();

    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v1 + 2316));
    sub_47814();
    v8();
    sub_12E41C(v27, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v28, &qword_201E28);
    sub_5B028((uint64_t)v29, &qword_2032A0);
    swift_release();
  }
  else
  {
    sub_132990(14048);
    sub_13264C(14208);
    sub_132480();
    uint64_t v9 = (void *)v1[3411];
    sub_5B028(v10, &qword_202570);
    sub_A340();
    uint64_t v11 = sub_47A34();
    v3(v11);
    uint64_t v12 = (void *)sub_1AC7F0();
    os_log_type_t v13 = sub_1ACF50();
    if (sub_47A70(v13))
    {
      uint64_t v0 = (void (*)(void))v1[3426];
      uint64_t v2 = (void *)v1[3411];
      uint64_t v14 = (_WORD *)sub_1321CC();
      sub_131BC0(v14);
      sub_131D30();
      swift_bridgeObjectRelease();
      sub_131C84(&def_342E4, v15, v16, "Couldn't create output, returning GenericErrorFlow");
      sub_497D4();

      sub_E530();
      v0();
    }
    else
    {
      uint64_t v17 = (void (*)(uint64_t))v1[3426];
      uint64_t v9 = (void *)v1[3342];
      swift_bridgeObjectRelease();

      uint64_t v18 = sub_132084();
      v17(v18);
    }
    uint64_t v19 = (void *)v1[3463];
    sub_132340();
    sub_132314();
    sub_75790(v9, v29);
    sub_9BA4();
    sub_1325E4();

    sub_9BF0((uint64_t)v29);
    uint64_t v20 = sub_13277C();
    v21(v20);
    sub_12E41C(v25, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v26, &qword_201E28);
    sub_5B028(v27, &qword_2032A0);
  }
  sub_1309E4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1320A4();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_110970()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  uint64_t v3 = v0[3342];
  sub_A340();
  uint64_t v4 = sub_470B8();
  v2(v4);
  uint64_t v5 = (void *)sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  sub_47A70(v6);
  uint64_t v7 = (void (*)(void))v0[3426];
  sub_131CD8();
  if (v8)
  {
    uint64_t v9 = (_WORD *)sub_49780();
    sub_4753C(v9);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v10, v11, "Couldn't create specificMedicationLogFailed_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  sub_E530();
  v7();
  uint64_t v12 = (void *)v0[3455];
  os_log_type_t v13 = (void *)v0[3452];
  sub_131F10();
  sub_75790(v0 + 2236, v0 + 516);
  sub_9BA4();
  sub_132B5C();

  sub_9BF0((uint64_t)(v0 + 516));
  sub_12E41C((uint64_t)v2, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v1, &qword_201E28);
  sub_5B028(v3, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_111010()
{
  sub_47634();
  sub_470A0();
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v2;
  sub_E53C();
  *os_log_type_t v6 = v5;
  *(void *)(v8 + 27760) = v7;
  *(void *)(v8 + 27768) = v1;
  swift_task_dealloc();
  sub_47C98();
  uint64_t v9 = *(void *)(v0 + 26632);
  if (v1)
  {
    swift_release();
    swift_errorRelease();
    sub_5B028(v9, &qword_201E28);
  }
  else
  {
    sub_5B028(v9, &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_111160()
{
  sub_471BC();
  sub_4712C();
  sub_132640(19128);
  uint64_t v2 = (void *)v0[3470];
  uint64_t v3 = sub_132424();
  sub_47E6C(v3, (uint64_t)HKActivityRingUIViewRepresentable.updateUIView(_:context:));
  sub_1AB3C0();
  id v4 = [v2 catId];
  sub_1ACDD0();
  sub_1322FC();
  sub_1324E4();
  sub_1328FC();
  sub_132BA8();
  sub_E3FC(v1 + 296, (uint64_t)(v0 + 2356));
  v0[3472] = *(void *)(v1 + 336);
  v0[3473] = *(void *)(v1 + 344);
  swift_retain();
  swift_retain();
  swift_task_alloc();
  sub_250E0();
  v0[3474] = v5;
  *uint64_t v5 = v6;
  v5[1] = sub_1112B0;
  sub_131F3C();
  sub_47294();
  return sub_C1180();
}

uint64_t sub_1112B0()
{
  sub_47D74();
  sub_E588();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 18848;
  uint64_t v4 = v1 + 19088;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  swift_release();
  sub_132EE4(v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v4);
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v7, v8, v9);
}

void sub_1113DC()
{
  sub_46EFC();
  sub_4712C();
  if (v1[2394])
  {
    uint64_t v4 = (void *)v1[3470];
    uint64_t v5 = (void *)v1[3452];
    sub_13237C();
    sub_1325A4(v6, v1[3287]);
    sub_E3FC((uint64_t)(v1 + 2446), (uint64_t)(v1 + 2326));
    uint64_t v7 = sub_47588();
    sub_131E78(v7);
    v1[3221] = sub_1327B0();
    sub_132794();

    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v1 + 2446));
    sub_47814();
    v8();
    sub_12E41C(v27, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v28, &qword_201E28);
    sub_5B028((uint64_t)v29, &qword_2032A0);
    swift_release();
  }
  else
  {
    sub_13264C(17088);
    sub_132990(17568);
    sub_132480();
    uint64_t v9 = (void *)v1[3408];
    sub_5B028(v10, &qword_202570);
    sub_A340();
    uint64_t v11 = sub_47A34();
    v3(v11);
    uint64_t v12 = (void *)sub_1AC7F0();
    os_log_type_t v13 = sub_1ACF50();
    if (sub_47A70(v13))
    {
      uint64_t v0 = (void (*)(void))v1[3426];
      uint64_t v2 = (void *)v1[3408];
      uint64_t v14 = (_WORD *)sub_1321CC();
      sub_131BC0(v14);
      sub_131D30();
      swift_bridgeObjectRelease();
      sub_131C84(&def_342E4, v15, v16, "Couldn't create output, returning GenericErrorFlow");
      sub_497D4();

      sub_E530();
      v0();
    }
    else
    {
      uint64_t v17 = (void (*)(uint64_t))v1[3426];
      uint64_t v9 = (void *)v1[3342];
      swift_bridgeObjectRelease();

      uint64_t v18 = sub_132084();
      v17(v18);
    }
    uint64_t v19 = (void *)v1[3470];
    sub_132340();
    sub_132314();
    sub_75790(v9, v29);
    sub_9BA4();
    sub_1325E4();

    sub_9BF0((uint64_t)v29);
    uint64_t v20 = sub_13277C();
    v21(v20);
    sub_12E41C(v25, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v26, &qword_201E28);
    sub_5B028(v27, &qword_2032A0);
  }
  sub_1309E4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1320A4();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_111BC4()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  uint64_t v3 = v0[3342];
  sub_A340();
  uint64_t v4 = sub_470B8();
  v2(v4);
  uint64_t v5 = (void *)sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  sub_47A70(v6);
  uint64_t v7 = (void (*)(void))v0[3426];
  sub_131CD8();
  if (v8)
  {
    uint64_t v9 = (_WORD *)sub_49780();
    sub_4753C(v9);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v10, v11, "Couldn't create specificMedicationNoMatch_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  sub_E530();
  v7();
  uint64_t v12 = (void *)v0[3455];
  os_log_type_t v13 = (void *)v0[3452];
  sub_131F10();
  sub_75790(v0 + 1736, v0 + 1716);
  sub_9BA4();
  sub_132B5C();

  sub_9BF0((uint64_t)(v0 + 1716));
  sub_12E41C((uint64_t)v2, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v1, &qword_201E28);
  sub_5B028(v3, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_112264()
{
  sub_132494();
  sub_7F418();
  sub_46F18();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *os_log_type_t v6 = v5;
  v3[3477] = v7;
  v3[3478] = v0;
  swift_task_dealloc();
  sub_47BA8();
  if (v0)
  {
    sub_132B94();
    uint64_t v8 = v3[3328];
    swift_release();
    sub_1327F8();
    swift_bridgeObjectRelease();
    sub_131FD0();
    swift_bridgeObjectRelease();
    sub_131E6C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_5B028(v8, &qword_201E28);
  }
  else
  {
    sub_5B028(v3[3328], &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  sub_132444();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1123D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  sub_132D84();
  id v14 = [v13 catId];
  sub_1ACDD0();
  sub_13292C();
  sub_1328E4();
  sub_132DD0();
  uint64_t v15 = sub_131784();
  v16(v15);
  if (sub_131B00())
  {
    uint64_t v17 = sub_131CB4();
  }
  else
  {
    sub_131F5C(23648);
    uint64_t v20 = sub_131884();
    v21(v20);
    sub_131B70((void *)(v12 + 23688));
    uint64_t v17 = sub_1319D8();
    if (v65) {
      char v19 = 0;
    }
    else {
      char v19 = 4;
    }
  }
  sub_131C44(v17, v18, v19);
  uint64_t v22 = sub_B7B9C();
  sub_E3FC(v22, v23);
  sub_2E38((void *)(v12 + 23728), *(void *)(v12 + 23752));
  sub_471EC();
  v24();
  uint64_t v25 = *(void **)(v12 + 23472);
  uint64_t v26 = *(void **)(v12 + 23480);
  sub_2E38((void *)(v12 + 23448), (uint64_t)v25);
  if ((sub_1AB040() & 1) == 0)
  {
    sub_13296C();
    sub_2E38(v26, *(void *)(v12 + 23432));
    uint64_t v27 = sub_131830();
    v28(v27);
    sub_131A58(v25);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v25);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v26);
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v12 + 23448);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v12 + 23728);
  os_log_type_t v29 = *(void **)(v12 + 27640);
  sub_1AC2B0();
  unint64_t v30 = sub_12E014(v29, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
  if (v30 && (sub_C10E8(v30), sub_132BE0(), v25) && (sub_17D4E4(v25), v31))
  {
    unsigned int v32 = (void *)*(unsigned __int8 *)(v12 + 28524);
    swift_retain();
    getMedStatus(from:)();
    swift_release();
    swift_retain();
    uint64_t v33 = getLocalizedMedName(from:)();
    uint64_t v35 = v34;
    swift_release();
    uint64_t v118 = v35;
    uint64_t v119 = v33;
    if (v32)
    {
      unint64_t v36 = sub_12E014(*(void **)(v12 + 27640), (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
      if (v36 && (sub_C10E8(v36), sub_132BE0(), v32))
      {
        uint64_t v37 = sub_1AA5DC(v32);
        unint64_t v110 = v38;
        uint64_t v111 = v37;
      }
      else
      {
        unint64_t v110 = 0;
        uint64_t v111 = 0;
      }
    }
    else
    {
      unint64_t v110 = *(void *)(v12 + 27424);
      uint64_t v111 = *(void *)(v12 + 27432);
    }
    sub_132E08(22688);
    uint64_t v117 = (void *)(v12 + 22568);
    uint64_t v120 = *(void **)(v12 + 27816);
    uint64_t v63 = *(void *)(v12 + 26432);
    uint64_t v64 = *(void *)(v12 + 26184);
    uint64_t v115 = *(void *)(v12 + 26104);
    sub_1326F8();
    unint64_t v70 = v69 & 0xFFFF00000000FFFFLL | 0x646567670000;
    if (v65) {
      unint64_t v66 = v70;
    }
    uint64_t v114 = v66;
    uint64_t v71 = *(void *)(v12 + 25984);
    uint64_t v116 = *(void *)(v12 + 25976);
    unint64_t v72 = 0xE600000000000000;
    if (!v65) {
      unint64_t v72 = v67;
    }
    uint64_t v112 = v68;
    uint64_t v113 = v72;
    sub_132AD8();
    uint64_t v80 = v79 | 0x64657070690000;
    if (v73) {
      uint64_t v81 = v80;
    }
    else {
      uint64_t v81 = v77;
    }
    if (v73) {
      uint64_t v82 = 0xE700000000000000;
    }
    else {
      uint64_t v82 = v78;
    }
    if (v76) {
      uint64_t v83 = v75;
    }
    else {
      uint64_t v83 = 0x6E656B6154;
    }
    if (v76) {
      uint64_t v84 = v76;
    }
    else {
      uint64_t v84 = 0xE500000000000000;
    }
    uint64_t v85 = sub_CCD04(v74, v64, &qword_201E20);
    HKActivityRingUIViewRepresentable.updateUIView(_:context:)(v85);
    sub_18608C();
    sub_12E8E8(v63, v71, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_47F14();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v86, v87, v88, v112);
    char v89 = sub_132568();
    SpecificMedCompletedLogModel.init(medStatus:givenTimeString:requestedMedName:requestedMedSchedule:dosage:dosageUnit:url:sashBundleID:dontDisplayGranularTime:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:snippetHeaderModel:)(v89, v119, v118, v111, v110, 0, v115, 1, 0, 0, v106, v107, v108, v109, SHIBYTE(v109), v114, v113, v81, v82,
      v83,
      v84,
      v71);
    sub_E3FC(v116 + 296, (uint64_t)v117);
    sub_2E38(v117, *(void *)(v12 + 22592));
    *(void *)(v12 + 22552) = type metadata accessor for WellnessSnippets();
    *(void *)(v12 + 22560) = sub_12ED48((unint64_t *)&qword_202590, 255, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
    sub_B5B0((uint64_t *)(v12 + 22528));
    uint64_t v90 = sub_480D4();
    sub_12E8E8(v90, v91, v92);
    swift_storeEnumTagMultiPayload();
    sub_2694(&qword_202588);
    uint64_t v93 = sub_47CA4();
    uint64_t v94 = sub_731A8(v93, 1);
    *uint64_t v95 = v120;
    sub_72328();
    *(void *)(v12 + 27832) = v94;
    id v96 = v120;
    swift_task_alloc();
    sub_250E0();
    *(void *)(v12 + 27840) = v97;
    *uint64_t v97 = v98;
    v97[1] = sub_1134D8;
    sub_46EC4();
    return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v99, v100, v101, v102, v103, v104);
  }
  else
  {
    sub_1327CC();
    uint64_t v124 = v39;
    uint64_t v40 = *(void (**)(void))(v12 + 27384);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_132360();
    swift_bridgeObjectRelease();
    sub_132034();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_A340();
    sub_132A68();
    v40();
    uint64_t v41 = sub_1AC7F0();
    os_log_type_t v42 = sub_1ACF60();
    if (sub_29300(v42))
    {
      uint64_t v43 = *(void (**)(void))(v12 + 27408);
      uint64_t v44 = (_WORD *)sub_131970();
      sub_4753C(v44);
      sub_1323B0();
      swift_bridgeObjectRelease();
      sub_131958(&def_342E4, v41, (os_log_type_t)(v12 + 32), "No loggedTime present nested inside intentResponse, returning GenericErrorFlow");
      sub_497D4();

      sub_E530();
      v43();
    }
    else
    {
      unint64_t v45 = *(void (**)(uint64_t))(v12 + 27408);
      swift_bridgeObjectRelease();

      uint64_t v46 = sub_13198C();
      v45(v46);
    }
    uint64_t v47 = *(void **)(v12 + 27816);
    uint64_t v48 = *(void **)(v12 + 27640);
    uint64_t v49 = *(void **)(v12 + 27616);
    sub_1323D0();
    uint64_t v121 = *(void *)(v12 + 26288);
    uint64_t v122 = v50;
    uint64_t v51 = *(void *)(v12 + 26216);
    uint64_t v52 = *(void *)(v12 + 26208);
    uint64_t v53 = *(void *)(v12 + 26176);
    sub_9B48(*(void *)(v12 + 25976) + 64, v12 + 2368);
    sub_75790((void *)(v12 + 2368), (void *)(v12 + 2208));
    sub_9BA4();
    sub_1AB120();

    sub_9BF0(v12 + 2208);
    sub_5B028(v53, &qword_201E20);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v121, v52);
    sub_12E41C(v122, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v123, &qword_201E28);
    sub_5B028(v124, &qword_2032A0);
    sub_130E48();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_46EC4();
    return v55(v54, v55, v56, v57, v58, v59, v60, v61, a9, a10, a11, a12);
  }
}

uint64_t sub_1134D8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 22528;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

void sub_1135C8()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v10 = (void *)v0[3477];
  uint64_t v1 = (void *)v0[3455];
  uint64_t v2 = (void *)v0[3452];
  sub_1321E4();
  uint64_t v12 = v3;
  uint64_t v11 = v0[3272];
  uint64_t v9 = v0[3263];
  sub_1326B4(v4);
  sub_1328CC();
  uint64_t v5 = sub_47588();
  sub_131CE4(v5);
  v0[3243] = sub_1AAE20();
  sub_132A04();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2836));
  sub_12E41C(v9, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  sub_5B028(v11, &qword_201E20);
  sub_4783C();
  v6();
  sub_12E41C(v12, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v13, &qword_201E28);
  sub_5B028(v14, &qword_2032A0);
  swift_release();
  sub_130580();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131CA4();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_113C84()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  sub_A340();
  uint64_t v3 = sub_470B8();
  v1(v3);
  uint64_t v4 = (void *)sub_1AC7F0();
  os_log_type_t v5 = sub_1ACF50();
  sub_47A70(v5);
  uint64_t v6 = (void (*)(void))v0[3426];
  sub_131CD8();
  if (v7)
  {
    uint64_t v8 = (_WORD *)sub_49780();
    sub_4753C(v8);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v9, v10, "Couldn't create specificMedicationStatusBothSkipped_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  sub_E530();
  v6();
  sub_132608();
  sub_131FF4();
  sub_75790(v0 + 1596, v0 + 1356);
  sub_9BA4();
  sub_1325E4();

  sub_9BF0((uint64_t)(v0 + 1356));
  sub_47814();
  v11();
  sub_12E41C((uint64_t)v1, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v14, &qword_201E28);
  sub_5B028(v15, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_114338()
{
  sub_E588();
  sub_1318C0();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 27864) = v7;
  swift_task_dealloc();
  sub_6FD18();
  if (v0)
  {
    sub_132F3C();
    swift_bridgeObjectRelease();
    sub_1327EC();
    swift_bridgeObjectRelease();
    sub_132B50();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else
  {
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_114480()
{
  sub_132D84();
  id v2 = [v1 catId];
  sub_1ACDD0();
  sub_13292C();
  sub_1328E4();
  sub_132DD0();
  uint64_t v3 = sub_131784();
  v4(v3);
  if (sub_131B00())
  {
    uint64_t v5 = sub_131CB4();
  }
  else
  {
    sub_131F5C(22968);
    uint64_t v8 = sub_131884();
    v9(v8);
    sub_131B70((void *)(v0 + 23008));
    uint64_t v5 = sub_1319D8();
    if (v22) {
      char v7 = 0;
    }
    else {
      char v7 = 4;
    }
  }
  sub_131C44(v5, v6, v7);
  sub_132AC0();
  uint64_t v10 = sub_131848();
  v11(v10);
  uint64_t v12 = *(void *)(v0 + 23112);
  uint64_t v13 = *(void *)(v0 + 23120);
  if (sub_131B38())
  {
    sub_131EA8();
  }
  else
  {
    uint64_t v12 = v0 + 23128;
    uint64_t v13 = v0 + 23168;
    sub_131F7C();
    uint64_t v14 = sub_131784();
    v15(v14);
    sub_131A58((void *)(v0 + 23168));
    sub_1319A0();
  }
  char v16 = *(unsigned char *)(v0 + 28524);
  uint64_t v17 = *(void **)(v0 + 25976);
  sub_1AC2B0();
  sub_132BC0();
  getMedStatus(from:)();
  swift_release();
  sub_1AABC0();
  if (v16)
  {
    unint64_t v18 = sub_12E014(*(void **)(v0 + 27640), (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
    if (v18 && (sub_C10E8(v18), sub_132690(), v17))
    {
      uint64_t v19 = sub_1AA5DC(v17);
      unint64_t v88 = v20;
      uint64_t v90 = v19;
    }
    else
    {
      unint64_t v88 = 0;
      uint64_t v90 = 0;
    }
  }
  else
  {
    unint64_t v88 = *(void *)(v0 + 27424);
    uint64_t v90 = *(void *)(v0 + 27432);
  }
  sub_132E08(23288);
  sub_132E14(23208);
  sub_1321A4(*(void *)(v0 + 27864));
  uint64_t v21 = *(void *)(v0 + 26184);
  sub_1326F8();
  unint64_t v26 = v25 & 0xFFFF00000000FFFFLL | 0x646567670000;
  if (v22) {
    unint64_t v27 = v26;
  }
  else {
    unint64_t v27 = v23;
  }
  unint64_t v28 = 0xE600000000000000;
  uint64_t v92 = v27;
  uint64_t v93 = *(void *)(v0 + 26040);
  uint64_t v29 = *(void *)(v0 + 25984);
  if (!v22) {
    unint64_t v28 = v24;
  }
  uint64_t v91 = v28;
  sub_132AD8();
  uint64_t v94 = *(void *)(v0 + 25976);
  if (v31) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0xE500000000000000;
  }
  uint64_t v33 = sub_CCD04(v30, v21, &qword_201E20);
  HKActivityRingUIViewRepresentable.updateUIView(_:context:)(v33);
  sub_18608C();
  sub_12E8E8(v12, v29, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v29, 0, 1, v13);
  char v34 = sub_131F98();
  uint64_t v43 = sub_1324B8(v34, v35, v36, v37, v38, v39, v40, v41, 0, 0, v21, v42, v70, v72, SHIBYTE(v72), v74, v76, v78, v80,
          v82,
          v32,
          v29,
          v86,
          v88);
  sub_132EB8(v43, v44, v45, v46, v47, v48, v49, v50, v66, v67, v68, v69, v71, v73, v75, v77, v79, v81, v83,
    v84,
    v85,
    v87,
    v89,
    v90,
    v91,
    v92,
    v93,
    v94);
  *(void *)(v0 + 23312) = sub_1320B4();
  *(void *)(v0 + 23320) = sub_12ED48((unint64_t *)&qword_202590, 255, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  uint64_t v51 = sub_B5B0(v95);
  sub_132F18((uint64_t)v51, v52, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  sub_1324FC();
  sub_2694(&qword_202588);
  uint64_t v53 = sub_47CA4();
  uint64_t v54 = sub_731A8(v53, 1);
  *char v55 = v96;
  sub_72328();
  *(void *)(v0 + 27872) = v54;
  id v56 = v96;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 27880) = v57;
  *uint64_t v57 = v58;
  v57[1] = sub_1148B4;
  uint64_t v59 = sub_131C24();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v59, v60, v61, v62, v63, v64);
}

uint64_t sub_1148B4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 23288;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

void sub_1149A4()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v10 = (void *)v0[3483];
  uint64_t v1 = (void *)v0[3455];
  id v2 = (void *)v0[3452];
  sub_1321E4();
  uint64_t v12 = v3;
  uint64_t v11 = v0[3271];
  uint64_t v9 = v0[3262];
  sub_1326B4(v4);
  sub_1328CC();
  uint64_t v5 = sub_47588();
  sub_131CE4(v5);
  v0[3245] = sub_1AAE20();
  sub_132A04();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2901));
  sub_12E41C(v9, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  sub_5B028(v11, &qword_201E20);
  sub_4783C();
  v6();
  sub_12E41C(v12, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v13, &qword_201E28);
  sub_5B028(v14, &qword_2032A0);
  swift_release();
  sub_130580();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131CA4();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_115060()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  sub_A340();
  uint64_t v3 = sub_470B8();
  v1(v3);
  uint64_t v4 = (void *)sub_1AC7F0();
  os_log_type_t v5 = sub_1ACF50();
  sub_47A70(v5);
  uint64_t v6 = (void (*)(void))v0[3426];
  sub_131CD8();
  if (v7)
  {
    uint64_t v8 = (_WORD *)sub_49780();
    sub_4753C(v8);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v9, v10, "Couldn't create specificMedicationAllMedsLoggedAlready_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  sub_E530();
  v6();
  sub_132608();
  sub_131FF4();
  sub_75790(v0 + 976, v0 + 216);
  sub_9BA4();
  sub_1325E4();

  sub_9BF0((uint64_t)(v0 + 216));
  sub_47814();
  v11();
  sub_12E41C((uint64_t)v1, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v14, &qword_201E28);
  sub_5B028(v15, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_115710()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  void *v2 = *v0;
  *(void *)(v1 + 27928) = v3;
  *(void *)(v1 + 27936) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1157E4()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v1 = *(void *)(v0 + 27936);
  uint64_t v2 = *(void *)(v0 + 27928);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 18808);
  if (v2) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v1 == 0xE000000000000000;
  }
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    uint64_t v4 = *(void *)(v0 + 27424);
    uint64_t v5 = *(void (**)(uint64_t))(v0 + 27384);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_A340();
    uint64_t v6 = sub_47CBC();
    v5(v6);
    uint64_t v7 = sub_1AC7F0();
    os_log_type_t v8 = sub_1ACF50();
    BOOL v9 = sub_29300(v8);
    uint64_t v10 = *(void (**)(void))(v0 + 27896);
    if (v9)
    {
      uint64_t v11 = (_WORD *)sub_131970();
      sub_1320E8(v11);
      sub_132AE4();
      swift_bridgeObjectRelease();
      sub_131958(&def_342E4, v7, (os_log_type_t)v4, "Couldn't get a displayName for this medID, returning GenericErrorFlow");
      sub_497D4();

      sub_13229C();
    }
    else
    {
      sub_132D14();
      swift_bridgeObjectRelease();
      sub_479C8();
    }
    sub_E530();
    v10();
    uint64_t v12 = *(void **)(v0 + 27904);
    uint64_t v71 = *(void *)(v0 + 26728);
    uint64_t v13 = *(void *)(v0 + 26688);
    uint64_t v14 = sub_132110();
    sub_9B48(v14, v0 + 4928);
    sub_75790((void *)(v0 + 4928), (void *)(v0 + 5088));
    sub_9BA4();
    sub_1AB120();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_9BF0(v0 + 5088);
    sub_12E41C((uint64_t)v10, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v13, &qword_201E28);
    sub_5B028(v71, &qword_2032A0);
    sub_130EC4();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_131CA4();
    sub_46EC4();
    __asm { BRAA            X1, X16 }
  }
  swift_retain();
  uint64_t v17 = getMedDosageValue(from:)();
  char v19 = v18;
  swift_release();
  if (v19) {
    goto LABEL_19;
  }
  unint64_t v20 = *(void **)(v0 + 27904);
  uint64_t v21 = *(void (**)(uint64_t))(v0 + 27384);
  id v22 = sub_12991C(*(double *)&v17);
  [v20 setDosage:v22];
  sub_A340();
  uint64_t v23 = sub_132F30();
  v21(v23);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v22;
  id v25 = v22;
  unint64_t v26 = sub_1AC7F0();
  os_log_type_t v27 = sub_1ACF50();
  uint64_t v28 = sub_131A8C();
  *(unsigned char *)(v28 + 16) = 64;
  uint64_t v29 = sub_131A8C();
  sub_13284C(v29);
  uint64_t v30 = sub_131A40();
  *(void *)(v30 + 16) = sub_12EA0C;
  *(void *)(v30 + 24) = v24;
  uint64_t v31 = sub_131A40();
  *(void *)(v31 + 16) = sub_12EA1C;
  *(void *)(v31 + 24) = v30;
  uint64_t v32 = sub_132834();
  sub_731BC(v32, 3);
  *uint64_t v33 = sub_130074;
  v33[1] = v28;
  v33[2] = sub_130074;
  v33[3] = v29;
  v33[4] = sub_12EA24;
  void v33[5] = v31;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v26, v27))
  {
    uint64_t v38 = *(void (**)(uint64_t))(v0 + 27896);
    sub_131CD8();

    swift_release();
    swift_release();
    swift_release();

    uint64_t v39 = sub_132A84();
    v38(v39);
LABEL_19:
    uint64_t v37 = *(void *)(v0 + 27888);
    goto LABEL_20;
  }
  uint64_t v34 = *(void *)(v0 + 27888);
  uint64_t v35 = (uint8_t *)sub_49780();
  uint64_t v76 = sub_B7C18();
  uint64_t v77 = 0;
  *(_WORD *)uint64_t v35 = 258;
  uint64_t v73 = v35 + 2;
  uint64_t v74 = sub_130074;
  uint64_t v75 = v28;
  sub_131764();
  if (v34) {
    goto LABEL_25;
  }
  swift_release();
  uint64_t v74 = sub_130074;
  uint64_t v75 = v29;
  sub_131764();
  swift_release();
  uint64_t v74 = (uint64_t (*)())sub_12EA24;
  uint64_t v75 = v31;
  sub_131764();
  swift_release();
  _os_log_impl(&def_342E4, v26, v27, "Post-disambiguation, re-grab the dosage: (%@) in task", v35, 0xCu);
  sub_2694(&qword_201DE0);
  swift_arrayDestroy();
  sub_A1F0();
  sub_497D4();

  sub_480D4();
  sub_E530();
  v36();
  uint64_t v37 = 0;
LABEL_20:
  swift_retain();
  uint64_t v40 = getMedDosageUnit(from:)();
  uint64_t v42 = v41;
  swift_release();
  if (!v42) {
    goto LABEL_29;
  }
  uint64_t v72 = v37;
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 27384);
  uint64_t v44 = *(void *)(v0 + 27376);
  uint64_t v45 = *(void *)(v0 + 27064);
  uint64_t v46 = *(void *)(v0 + 26736);
  uint64_t v47 = sub_F1384();
  sub_12DFBC(v47, v48, v49);
  sub_A340();
  v43(v45, v44, v46);
  uint64_t v50 = sub_131A40();
  *(void *)(v50 + 16) = v40;
  *(void *)(v50 + 24) = v42;
  uint64_t v51 = sub_1AC7F0();
  os_log_type_t v52 = sub_1ACF50();
  uint64_t v53 = sub_131A8C();
  *(unsigned char *)(v53 + 16) = 32;
  uint64_t v54 = sub_131A8C();
  sub_13284C(v54);
  uint64_t v55 = sub_131A40();
  *(void *)(v55 + 16) = sub_12E9FC;
  *(void *)(v55 + 24) = v50;
  uint64_t v56 = sub_131A40();
  *(void *)(v56 + 16) = sub_130064;
  *(void *)(v56 + 24) = v55;
  uint64_t v57 = sub_132834();
  sub_731BC(v57, 3);
  *uint64_t v58 = sub_130074;
  v58[1] = v53;
  v58[2] = sub_130074;
  v58[3] = v54;
  void v58[4] = sub_13006C;
  v58[5] = v56;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v51, v52))
  {
    uint64_t v62 = *(void (**)(void))(v0 + 27896);

    swift_release();
    swift_release();
    swift_release();
    sub_E530();
    v62();
    uint64_t v37 = v72;
LABEL_29:
    *(void *)(v0 + 27944) = v37;
    if ((*(unsigned char *)(v0 + 27576) & 1) == 0 && *(void *)(v0 + 27592))
    {
      uint64_t v63 = *(void **)(v0 + 27904);
      id v64 = sub_12991C(*(double *)(v0 + 27568));
      [v63 setStrength:v64];

      uint64_t v65 = sub_13226C();
      sub_12DF64(v65, v66, v63);
    }
    uint64_t v67 = *(void *)(v0 + 27904);
    *(void *)(v0 + 27952) = *(void *)(*(void *)(v0 + 25976) + 352);
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 25784;
    *(void *)(v0 + 24) = sub_1166F4;
    *(void *)(v0 + 18960) = swift_continuation_init();
    *(void *)(v0 + 18928) = _NSConcreteStackBlock;
    *(void *)(v0 + 18936) = 0x40000000;
    *(void *)(v0 + 18944) = sub_129964;
    *(void *)(v0 + 18952) = &unk_1F82F0;
    [(id)swift_unknownObjectRetain() handleLogSpecificMedications:v67 completion:v0 + 18928];
    sub_46EC4();
    return _swift_continuation_await(v68);
  }
  uint64_t v59 = (uint8_t *)sub_49780();
  uint64_t v76 = 0;
  uint64_t v77 = sub_E620();
  *(_WORD *)uint64_t v59 = 258;
  uint64_t v73 = v59 + 2;
  uint64_t v74 = sub_130074;
  uint64_t v75 = v53;
  sub_49798((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v74, (uint64_t)&v73, (uint64_t)&v76, (uint64_t)&v77);
  if (!v37)
  {
    swift_release();
    uint64_t v74 = sub_130074;
    uint64_t v75 = v54;
    sub_131764();
    swift_release();
    uint64_t v74 = sub_13006C;
    uint64_t v75 = v56;
    sub_131764();
    uint64_t v70 = *(void (**)(void))(v0 + 27896);
    sub_132B44();
    swift_release();
    _os_log_impl(&def_342E4, v51, v52, "Post-disambiguation, re-grab the dosageUnit: (%s) in task", v59, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_497D4();

    sub_E530();
    v70();
    uint64_t v37 = 0;
    goto LABEL_29;
  }
LABEL_25:
  sub_46EC4();
  return swift_errorRelease();
}

uint64_t sub_1166F4()
{
  sub_A364();
  sub_472B4();
  uint64_t v1 = *v0;
  sub_E53C();
  void *v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1167A8()
{
  sub_471BC();
  uint64_t v244 = v5 | 0x1000000000000000;
  uint64_t v245 = v6;
  sub_4712C();
  uint64_t v243 = v0;
  uint64_t v7 = *(void **)(v0 + 25784);
  *(void *)(v0 + 27960) = v7;
  uint64_t v8 = swift_unknownObjectRelease();
  uint64_t v9 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v7)))(v8);
  uint64_t v239 = v7;
  switch(v9)
  {
    case 'j':
      uint64_t v10 = *(void (**)(void))(v0 + 27448);
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t)))(v0 + 27384);
      uint64_t v12 = *(void *)(v0 + 27376);
      uint64_t v13 = *(void *)(v0 + 27008);
      uint64_t v14 = *(void (**)(uint64_t))(v0 + 26736);
      uint64_t v15 = *(void *)(v0 + 25976);
      sub_131EEC();
      swift_bridgeObjectRelease();
      sub_132A5C();
      swift_bridgeObjectRelease();
      sub_132034();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(v15 + 224);
      uint64_t v17 = *(void *)(v15 + 232);
      v15 += 224;
      uint64_t v18 = *(void *)(v15 + 16);
      uint64_t v19 = *(void *)(v15 + 24);
      uint64_t v20 = *(void *)(v15 + 32);
      uint64_t v21 = *(void *)(v15 + 40);
      uint64_t v22 = *(void *)(v15 + 48);
      uint64_t v23 = *(void *)(v15 + 56);
      unsigned __int8 v24 = *(unsigned char *)(v15 + 64);
      *(void *)uint64_t v15 = 4;
      *(_OWORD *)(v15 + 8) = 0u;
      *(_OWORD *)(v15 + 24) = 0u;
      *(_OWORD *)(v15 + 40) = 0u;
      *(void *)(v15 + 56) = 0;
      *(unsigned char *)(v15 + 64) = -64;
      sub_4610C(v16, v17, v18, v19, v20, v21, v22, v23, v24);
      sub_A340();
      v11(v13, v12, v14);
      id v25 = (void *)sub_1AC7F0();
      os_log_type_t v26 = sub_1ACF50();
      if (sub_A3D0(v26))
      {
        sub_132E48();
        os_log_type_t v27 = (_WORD *)sub_132068();
        *(void *)&v241[0] = 0;
        *(void *)&v242[0] = 0;
        sub_1317FC(v27);
        sub_131ECC();
        swift_bridgeObjectRelease();
        sub_131C64(&def_342E4, v28, v29, "got state .awaitingConfirmationLogAsScheduled inside first .nameSelected turn in SpecificMedLoggingFlow");
        sub_497D4();

        sub_E530();
        v10();
      }
      else
      {
        uint64_t v106 = *(void (**)(void))(v0 + 27896);
        sub_132744();
        swift_bridgeObjectRelease();
        sub_E530();
        v106();
      }
      uint64_t v107 = sub_12E014(v239, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
      if (v107)
      {
        uint64_t v108 = v107;
        swift_retain();
        uint64_t v109 = getLocalizedMedName(from:)();
        uint64_t v111 = v110;
        swift_release();
        uint64_t v112 = *(void *)(v0 + 27936);
        if (v111)
        {
          swift_bridgeObjectRelease();
          uint64_t v112 = v111;
        }
        else
        {
          uint64_t v109 = *(void *)(v0 + 27928);
        }
        uint64_t v235 = *(void *)(v0 + 26728);
        uint64_t v226 = *(void **)(v0 + 27904);
        uint64_t v230 = *(void *)(v0 + 26688);
        uint64_t v223 = *(void *)(v0 + 26432);
        uint64_t v206 = *(void *)(v0 + 25976);
        type metadata accessor for LogMedAsScheduledConfirmationStrategy();
        swift_retain();
        char v207 = getMedStatus(from:)();
        swift_release();
        sub_9B48(v206 + 64, v0 + 10368);
        uint64_t v208 = sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
        uint64_t v209 = sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
        sub_9AD48((uint64_t *)v242);
        uint64_t v210 = sub_BCF28(v109, v112, v207 & 1, v108, (const void *)(v0 + 10368), v208, v209, (uint64_t)v242);
        swift_retain();
        sub_1AB350();
        *(void *)(v0 + 25864) = sub_106D34(v210, (uint64_t)v242, (void (*)(void))type metadata accessor for LogMedAsScheduledConfirmationStrategy, &qword_203000, (void (*)(uint64_t))type metadata accessor for LogMedAsScheduledConfirmationStrategy);
        sub_12A378();
        sub_2694(&qword_202FD8);
        sub_B56C(&qword_202FE8, &qword_202FD8);
        sub_1AB100();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();

        sub_12E41C(v223, (void (*)(void))type metadata accessor for SnippetHeaderModel);
        uint64_t v136 = v230;
        goto LABEL_78;
      }
      uint64_t v234 = (void *)(v0 + 10688);
      id v238 = (void *)(v0 + 11168);
      sub_132CB8();
      uint64_t v43 = *(void **)(v0 + 26736);
      swift_bridgeObjectRelease();
      sub_A340();
      uint64_t v175 = sub_132094();
      v14(v175);
      uint64_t v176 = sub_1AC7F0();
      os_log_type_t v177 = sub_1ACF50();
      sub_131BA4(v177);
      uint64_t v178 = *(void (**)(void))(v0 + 27896);
      goto LABEL_53;
    case 'k':
      sub_132124();
      uint64_t v42 = *(void *)(v0 + 26736);
      uint64_t v43 = *(void **)(v0 + 25976);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_131E6C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v44 = sub_1329B4();
      sub_132238(v44, v45, v46, v47, v48, v49, v50, v51, v52);
      sub_A340();
      uint64_t v53 = sub_132F68();
      v54(v53);
      uint64_t v55 = (void *)sub_1AC7F0();
      os_log_type_t v56 = sub_1ACF50();
      if (sub_A3D0(v56))
      {
        sub_132E48();
        uint64_t v42 = *(void *)(v0 + 26992);
        uint64_t v57 = (_WORD *)sub_132068();
        *(void *)&v241[0] = 0;
        *(void *)&v242[0] = 0;
        sub_1317FC(v57);
        uint64_t v43 = &_swiftEmptyArrayStorage;
        sub_131ECC();
        swift_bridgeObjectRelease();
        sub_131C64(&def_342E4, v58, v59, "got state .awaitingConfirmationLogAsNeeded inside first .nameSelected turn in SpecificMedLoggingFlow");
        sub_497D4();

        sub_E530();
        v4();
      }
      else
      {
        uint64_t v113 = *(void (**)(void))(v0 + 27896);
        sub_132744();
        swift_bridgeObjectRelease();
        sub_E530();
        v113();
      }
      uint64_t v114 = v239;
      if (sub_12E014(v239, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName))
      {
        sub_131E14();
        type metadata accessor for LogMedAsNeededConfirmationStrategy();
        sub_9B48((uint64_t)v1 + 64, v42);
        sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
        sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
        sub_9AD48((uint64_t *)v242);
        uint64_t v115 = sub_132658();
        uint64_t v120 = sub_17AA8C(v115, v116, v117, v118, v119);
        swift_retain();
        sub_1AB350();
        *(void *)(v0 + 25840) = sub_106D34((uint64_t)v120, (uint64_t)v242, (void (*)(void))type metadata accessor for LogMedAsNeededConfirmationStrategy, &qword_206D80, (void (*)(uint64_t))type metadata accessor for LogMedAsNeededConfirmationStrategy);
        sub_12A3B8();
LABEL_37:
        sub_2694(&qword_202FD8);
        sub_B56C(&qword_202FE8, &qword_202FD8);
        sub_132A68();
        sub_1AB100();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();

        sub_12E41C(v224, (void (*)(void))type metadata accessor for SnippetHeaderModel);
        uint64_t v136 = v231;
LABEL_78:
        sub_5B028(v136, &qword_201E28);
        sub_5B028(v235, &qword_2032A0);
        swift_release();
        goto LABEL_79;
      }
      uint64_t v234 = (void *)(v0 + 11968);
      id v238 = (void *)(v0 + 12128);
      sub_1320FC();
      sub_A340();
      uint64_t v179 = sub_132944();
      v1(v179);
      uint64_t v176 = sub_1AC7F0();
      os_log_type_t v180 = sub_1ACF50();
      sub_131BA4(v180);
      uint64_t v178 = *(void (**)(void))(v0 + 27896);
LABEL_53:
      sub_132D08();
      if (!v181) {
        goto LABEL_62;
      }
      uint64_t v182 = (_WORD *)sub_49780();
      *(void *)&v241[0] = 0;
      *(void *)&v242[0] = 0;
      sub_1317FC(v182);
      sub_132B04();
      swift_bridgeObjectRelease();
      uint64_t v183 = "Needed confirmation log as scheduled but intentResponse.matchingMeds was nil.";
      goto LABEL_61;
    case 'l':
      uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 27384);
      uint64_t v61 = *(void *)(v0 + 27376);
      uint64_t v62 = *(void *)(v0 + 26960);
      uint64_t v63 = *(void *)(v0 + 26736);
      sub_A340();
      v60(v62, v61, v63);
      id v64 = (void *)sub_1AC7F0();
      os_log_type_t v65 = sub_1ACF50();
      if (sub_A3D0(v65))
      {
        sub_132E48();
        uint64_t v66 = (_WORD *)sub_132068();
        *(void *)&v241[0] = 0;
        *(void *)&v242[0] = 0;
        sub_1317FC(v66);
        sub_131ECC();
        swift_bridgeObjectRelease();
        sub_131C64(&def_342E4, v67, v68, "SpecificMedLoggingFlow received .statusBothSkipped intent response from post-first turn nameSelected case, creating output.");
        sub_497D4();

        sub_E530();
        v4();
      }
      else
      {
        uint64_t v121 = *(void (**)(uint64_t))(v0 + 27896);
        sub_132744();
        swift_bridgeObjectRelease();
        uint64_t v122 = sub_132A84();
        v121(v122);
      }
      uint64_t v123 = *(void *)(v0 + 26200);
      uint64_t v124 = *(void *)(v0 + 25976);
      sub_1AB090();
      sub_DF6D8(v123, (uint64_t)HKActivityRingUIViewRepresentable.updateUIView(_:context:), 0);
      uint64_t v125 = 1;
      sub_1AB3C0();
      *(void *)(v0 + 28064) = *(void *)(v124 + 336);
      swift_retain();
      unint64_t v126 = sub_12E014(v239, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
      if (v126)
      {
        id v127 = sub_C10E8(v126);
        swift_bridgeObjectRelease();
        if (v127 && (sub_17D4E4(v127), v128))
        {
          sub_1ACE40();
          swift_bridgeObjectRelease();
          uint64_t v125 = 0;
        }
        else
        {
          uint64_t v125 = 1;
        }
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 26552), v125, 1, *(void *)(v0 + 26384));
      uint64_t v184 = (void *)swift_task_alloc();
      *(void *)(v0 + 28072) = v184;
      *uint64_t v184 = v0;
      v184[1] = sub_11B0D8;
      sub_131C08();
      return sub_1A7108();
    case 'm':
      sub_132124();
      uint64_t v69 = *(void *)(v0 + 26736);
      uint64_t v43 = *(void **)(v0 + 25976);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_131E6C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v70 = sub_1329B4();
      sub_132238(v70, v71, v72, v73, v74, v75, v76, v77, v78);
      sub_A340();
      uint64_t v79 = sub_132F68();
      v80(v79);
      uint64_t v81 = (void *)sub_1AC7F0();
      os_log_type_t v82 = sub_1ACF50();
      if (sub_A3D0(v82))
      {
        sub_132E48();
        uint64_t v69 = *(void *)(v0 + 26976);
        uint64_t v83 = (_WORD *)sub_132068();
        *(void *)&v241[0] = 0;
        *(void *)&v242[0] = 0;
        sub_1317FC(v83);
        uint64_t v43 = &_swiftEmptyArrayStorage;
        sub_131ECC();
        swift_bridgeObjectRelease();
        sub_131C64(&def_342E4, v84, v85, "got state .awaitingConfirmationUpdateToStatus in SpecificMedLoggingFlow");
        sub_497D4();

        sub_E530();
        v4();
      }
      else
      {
        uint64_t v129 = *(void (**)(void))(v0 + 27896);
        sub_132744();
        swift_bridgeObjectRelease();
        sub_E530();
        v129();
      }
      uint64_t v114 = v239;
      if (sub_12E014(v239, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName))
      {
        sub_131E14();
        type metadata accessor for MedUpdateLogStatusStrategy();
        sub_9B48((uint64_t)v1 + 64, v69);
        sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
        sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
        sub_9AD48((uint64_t *)v242);
        uint64_t v130 = sub_132658();
        Class v135 = sub_17AA8C(v130, v131, v132, v133, v134);
        swift_retain();
        sub_1AB350();
        *(void *)(v0 + 25816) = sub_106D34((uint64_t)v135, (uint64_t)v242, (void (*)(void))type metadata accessor for MedUpdateLogStatusStrategy, &qword_206D88, (void (*)(uint64_t))type metadata accessor for MedUpdateLogStatusStrategy);
        sub_12A3F8();
        goto LABEL_37;
      }
      uint64_t v234 = (void *)(v0 + 13408);
      id v238 = (void *)(v0 + 13568);
      sub_1320FC();
      sub_A340();
      uint64_t v187 = sub_132944();
      v1(v187);
      uint64_t v176 = sub_1AC7F0();
      os_log_type_t v188 = sub_1ACF50();
      sub_131BA4(v188);
      uint64_t v178 = *(void (**)(void))(v0 + 27896);
      sub_132D08();
      if (v189)
      {
        uint64_t v190 = (_WORD *)sub_49780();
        *(void *)&v241[0] = 0;
        *(void *)&v242[0] = 0;
        sub_1317FC(v190);
        sub_132B04();
        swift_bridgeObjectRelease();
        uint64_t v183 = "Needed confirmation update to status but intentResponse.matchingMeds was nil.";
LABEL_61:
        sub_132284(&def_342E4, v176, (os_log_type_t)v43, v183);
        sub_497D4();
      }
      else
      {
LABEL_62:

        swift_bridgeObjectRelease();
      }
      sub_E530();
      v178();
      sub_132E34();
      uint64_t v229 = *(void *)(v0 + 26728);
      uint64_t v103 = *(void *)(v0 + 26688);
      uint64_t v191 = sub_132110();
      sub_9B48(v191, (uint64_t)v234);
      sub_75790(v234, v238);
      sub_9BA4();
      sub_1AB120();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_9BF0((uint64_t)v238);
      uint64_t v105 = (uint64_t)v43;
      goto LABEL_64;
    case 'n':
    case 'o':
      goto LABEL_8;
    case 'p':
      uint64_t v233 = (const void *)(v0 + 7648);
      uint64_t v237 = v0 + 832;
      uint64_t v228 = (long long *)(v0 + 21288);
      sub_1327CC();
      uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 27384);
      uint64_t v87 = *(void *)(v0 + 27376);
      uint64_t v88 = *(void *)(v0 + 27040);
      uint64_t v89 = *(void *)(v0 + 26736);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_131FD0();
      swift_bridgeObjectRelease();
      sub_132034();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_A340();
      v86(v88, v87, v89);
      uint64_t v90 = sub_1AC7F0();
      os_log_type_t v91 = sub_1ACF60();
      if (sub_47A70(v91))
      {
        uint64_t v92 = *(void (**)(void))(v0 + 27896);
        uint64_t v93 = (_WORD *)sub_132CA0();
        *(void *)&v241[0] = 0;
        *(void *)&v242[0] = 0;
        sub_1317FC(v93);
        sub_1322BC();
        swift_bridgeObjectRelease();
        sub_132284(&def_342E4, v90, (os_log_type_t)v87, "Received gotComplexDosageLoggingError, creating output.");
        sub_497D4();

        sub_E530();
        v92();
      }
      else
      {
        char v137 = *(void (**)(uint64_t))(v0 + 27896);

        swift_bridgeObjectRelease();
        uint64_t v138 = sub_132084();
        v137(v138);
      }
      uint64_t v220 = *(void **)(v0 + 27904);
      uint64_t v222 = *(void *)(v0 + 26688);
      uint64_t v225 = *(void *)(v0 + 26728);
      uint64_t v221 = *(void *)(v0 + 26432);
      uint64_t v139 = *(void *)(v0 + 25976);
      uint64_t v140 = v139 + 24;
      uint64_t v141 = *(void *)(v139 + 16);
      sub_9B48(v139 + 64, (uint64_t)v233);
      sub_E3FC(v140, (uint64_t)v228);
      swift_retain();
      sub_9AD48((uint64_t *)v241);
      uint64_t v142 = sub_AB20C();
      uint64_t v143 = sub_AB238();
      sub_3F810((uint64_t *)v242);
      sub_AB2FC(v141, v233, v228, 0, 0, v241, v142, v143, v237, v242);
      sub_ABC40();
      sub_132B5C();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_ABB40(v237);
      sub_12E41C(v221, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      sub_5B028(v222, &qword_201E28);
      uint64_t v144 = v225;
      goto LABEL_65;
    default:
      if (v9 == 5)
      {
        sub_131934();
        sub_131EEC();
        swift_bridgeObjectRelease();
        sub_131FD0();
        swift_bridgeObjectRelease();
        sub_131E6C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_A340();
        uint64_t v94 = sub_47CBC();
        ((void (*)(uint64_t))v4)(v94);
        uint64_t v95 = sub_1AC7F0();
        os_log_type_t v96 = sub_1ACF50();
        if (sub_29300(v96))
        {
          uint64_t v97 = *(void (**)(void))(v0 + 27896);
          uint64_t v98 = (_WORD *)sub_131970();
          *(void *)&v241[0] = 0;
          *(void *)&v242[0] = 0;
          sub_1317FC(v98);
          sub_1322BC();
          swift_bridgeObjectRelease();
          sub_131958(&def_342E4, v95, (os_log_type_t)v7, "Received failure intent response, creating output.");
          sub_497D4();

          sub_E530();
          v97();
        }
        else
        {
          uint64_t v167 = *(void (**)(uint64_t))(v0 + 27896);
          sub_131DDC();
          swift_bridgeObjectRelease();
          uint64_t v168 = sub_13198C();
          v167(v168);
        }
        sub_132418();
        *(void *)(v0 + 28008) = v95;
        swift_retain();
        swift_retain();
        getLocalizedMedName(from:)();
        uint64_t v170 = v169;
        swift_release();
        if (v170)
        {
          uint64_t v171 = *(void *)(v0 + 26568);
          uint64_t v172 = *(void *)(v0 + 26408);
          uint64_t v173 = *(void *)(v0 + 26392);
          uint64_t v174 = *(void *)(v0 + 26384);
          sub_1ACE40();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v173 + 32))(v171, v172, v174);
        }
        else
        {
          sub_1ACE40();
          swift_bridgeObjectRelease();
        }
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 26568), 0, 1, *(void *)(v0 + 26384));
        sub_132528();
        char v204 = (void *)swift_task_alloc();
        *(void *)(v0 + 28016) = v204;
        *char v204 = v0;
        v204[1] = sub_119D68;
        sub_131C08();
        return sub_1A6434();
      }
      else
      {
        if (v9 != 4)
        {
LABEL_8:
          uint64_t v240 = v7;
          uint64_t v232 = (void *)(v0 + 15328);
          uint64_t v236 = (void *)(v0 + 15968);
          sub_1327CC();
          sub_132CB8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1327EC();
          swift_bridgeObjectRelease();
          sub_132034();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_A340();
          uint64_t v37 = sub_132094();
          v1(v37);
          uint64_t v38 = sub_1AC7F0();
          os_log_type_t v39 = sub_1ACF50();
          if (sub_FD440(v39))
          {
            uint64_t v40 = *(void (**)(void))(v0 + 27896);
            uint64_t v41 = (_WORD *)sub_132CA0();
            *(void *)&v241[0] = 0;
            *(void *)&v242[0] = 0;
            sub_1317FC(v41);
            sub_1322BC();
            swift_bridgeObjectRelease();
            sub_132284(&def_342E4, v38, v2, "Intent response code within .nameSelected was not an expected one || is one we're not handling yet, returning nil output.");
            sub_497D4();

            sub_E530();
            v40();
          }
          else
          {
            uint64_t v99 = *(void (**)(uint64_t, uint64_t))(v0 + 27896);
            uint64_t v100 = *(void *)(v0 + 26936);
            uint64_t v101 = *(void *)(v0 + 26736);

            swift_bridgeObjectRelease();
            v99(v100, v101);
          }
          uint64_t v102 = *(void **)(v0 + 27904);
          uint64_t v229 = *(void *)(v0 + 26728);
          uint64_t v103 = *(void *)(v0 + 26688);
          uint64_t v104 = *(void *)(v0 + 26432);
          sub_9B48(*(void *)(v0 + 25976) + 64, (uint64_t)v232);
          sub_75790(v232, v236);
          sub_9BA4();
          sub_1AB120();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          sub_9BF0((uint64_t)v236);
          uint64_t v105 = v104;
LABEL_64:
          sub_12E41C(v105, (void (*)(void))type metadata accessor for SnippetHeaderModel);
          sub_5B028(v103, &qword_201E28);
          uint64_t v144 = v229;
LABEL_65:
          sub_5B028(v144, &qword_2032A0);
LABEL_79:
          sub_131324();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          sub_E564();
          sub_131C08();
          __asm { BRAA            X1, X16 }
        }
        sub_132954();
        swift_bridgeObjectRelease();
        sub_A340();
        uint64_t v30 = sub_47CBC();
        v3(v30);
        uint64_t v31 = (void *)sub_1AC7F0();
        os_log_type_t v32 = sub_1ACF50();
        if (sub_A3D0(v32))
        {
          uint64_t v33 = (_WORD *)sub_49780();
          *(void *)&v241[0] = 0;
          *(void *)&v242[0] = 0;
          sub_1317FC(v33);
          sub_131ECC();
          swift_bridgeObjectRelease();
          sub_131C64(&def_342E4, v34, v35, "Received successful intent response, creating output.");
          sub_497D4();

          sub_132EA0();
          sub_E530();
          v36();
        }
        else
        {
          uint64_t v145 = *(void (**)(uint64_t))(v0 + 27896);

          swift_bridgeObjectRelease();
          uint64_t v146 = sub_132A84();
          v145(v146);
        }
        uint64_t v147 = *(void *)(v0 + 26616);
        uint64_t v148 = *(unsigned char **)(v0 + 26344);
        uint64_t v149 = *(void *)(v0 + 26320);
        uint64_t v150 = sub_12E014(v7, (SEL *)&selRef_matchingMedsBeforeUpdate, (void (*)(void))&type metadata accessor for MatchedMedName);
        if (v150) {
          uint64_t v151 = (void *)v150;
        }
        else {
          uint64_t v151 = &_swiftEmptyArrayStorage;
        }
        sub_12C9AC((uint64_t)v151);
        swift_bridgeObjectRelease();
        char v152 = v7;
        swift_retain();
        sub_129994(v152, v148);
        uint64_t v153 = *(int *)(v149 + 36);
        *(_DWORD *)(v0 + 28516) = v153;
        Class v154 = &v148[v153];
        uint64_t v155 = *(void *)v154;
        char v156 = v154[8];
        sub_132884(v147);
        if ((v156 & 1) == 0)
        {
          uint64_t v157 = *(void *)(v0 + 26616);
          uint64_t v158 = *(void *)(v0 + 26608);
          sub_2694(&qword_205890);
          uint64_t v159 = swift_allocObject();
          uint64_t v160 = sub_731BC(v159, 1);
          v161[3] = &type metadata for Double;
          v161[4] = &protocol witness table for Double;
          *uint64_t v161 = v155;
          uint64_t v162 = HKActivityRingUIViewRepresentable.updateUIView(_:context:)(v160);
          sub_132548(v162);
          sub_1ACE40();
          swift_bridgeObjectRelease();
          sub_5B028(v157, &qword_201E28);
          sub_132D2C(v158, 0);
          uint64_t v163 = sub_22F80();
          sub_A76E8(v163, v164, &qword_201E28);
        }
        *(void *)(v0 + 27968) = *(void *)(*(void *)(v0 + 25976) + 336);
        swift_retain();
        sub_12E078(v152, (SEL *)&selRef_medName);
        if (v165)
        {
          sub_1ACE40();
          swift_bridgeObjectRelease();
          uint64_t v166 = 0;
        }
        else
        {
          uint64_t v166 = 1;
        }
        uint64_t v192 = *(void *)(v0 + 26592);
        uint64_t v193 = *(void *)(v0 + 26384);
        sub_132D2C(v192, v166);
        uint64_t v194 = sub_132EA0();
        sub_12E8E8(v194, v195, v196);
        sub_A208(v192, 1, v193);
        if (v197)
        {
          uint64_t v198 = *(void *)(v0 + 26584);
          uint64_t v199 = *(void *)(v0 + 26384);
          sub_CCD04(*(void *)(v0 + 26336) + *(int *)(*(void *)(v0 + 26320) + 24), v198, &qword_201E28);
          sub_A208(v198, 1, v199);
          if (v197)
          {
            uint64_t v200 = *(void *)(v0 + 26584);
            uint64_t v201 = *(void *)(v0 + 26336);
            sub_1ACE40();
            sub_12E41C(v201, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
            sub_5B028(v200, &qword_201E28);
          }
          else
          {
            sub_12E41C(*(void *)(v0 + 26336), (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
            uint64_t v213 = sub_13299C();
            v214(v213);
          }
          sub_5B028(*(void *)(v0 + 26592), &qword_201E28);
        }
        else
        {
          sub_12E41C(*(void *)(v0 + 26336), (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
          uint64_t v202 = sub_13299C();
          v203(v202);
        }
        uint64_t v215 = *(void *)(v0 + 26576);
        uint64_t v216 = *(void *)(v0 + 26344);
        uint64_t v217 = *(void *)(v0 + 26320);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 26600), 0, 1, *(void *)(v0 + 26384));
        sub_132D2C(v215, 1);
        uint64_t v218 = v216 + *(int *)(v217 + 40);
        LOBYTE(v216) = *(unsigned char *)(v216 + *(int *)(v217 + 44));
        uint64_t v219 = (void *)swift_task_alloc();
        *(void *)(v0 + 27976) = v219;
        *uint64_t v219 = v0;
        v219[1] = sub_1187B0;
        char v247 = v216;
        uint64_t v246 = v218;
        return sub_1A6A78();
      }
  }
}

uint64_t sub_1187B0()
{
  sub_132494();
  sub_7F418();
  sub_1318C0();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  v3[3498] = v7;
  swift_task_dealloc();
  sub_6FD18();
  if (v0)
  {
    sub_13276C();
    uint64_t v8 = v3[3325];
    swift_release();
    swift_bridgeObjectRelease();
    sub_1327F8();
    swift_bridgeObjectRelease();
    sub_131FD0();
    swift_bridgeObjectRelease();
    sub_131E6C();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_CD4F0();
    sub_5B028(v8, &qword_201E28);
  }
  else
  {
    uint64_t v9 = v3[3325];
    uint64_t v10 = v3[3322];
    swift_release();
    sub_5B028(v10, &qword_201E28);
    sub_5B028(v9, &qword_201E28);
  }
  sub_A4F0();
  sub_132444();
  return _swift_task_switch(v11, v12, v13);
}

#error "118CE0: call analysis failed (funcsize=298)"

uint64_t sub_118E24()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 21888;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

void sub_118F14()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v1 = (void *)v0[3495];
  uint64_t v8 = (void *)v0[3488];
  uint64_t v6 = (void *)v0[3498];
  uint64_t v13 = v0[3336];
  uint64_t v14 = v0[3341];
  uint64_t v12 = v0[3304];
  uint64_t v10 = v0[3327];
  uint64_t v11 = v0[3293];
  uint64_t v9 = v0[3270];
  uint64_t v7 = v0[3261];
  sub_1326B4((uint64_t)(v0 + 2731));
  sub_E3FC((uint64_t)(v0 + 2726), (uint64_t)(v0 + 2741));
  uint64_t v2 = sub_47588();
  sub_131CE4(v2);
  v0[3237] = sub_1AAE20();
  sub_132F0C();
  sub_1AB120();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2726));
  sub_12E41C(v7, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  sub_5B028(v9, &qword_201E20);
  sub_47814();
  v3();
  sub_5B028(v10, &qword_201E28);
  sub_12E41C(v11, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_12E41C(v12, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v13, &qword_201E28);
  sub_5B028(v14, &qword_2032A0);
  swift_release();
  sub_130580();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131CA4();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_119650()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  sub_A340();
  uint64_t v2 = sub_470B8();
  v1(v2);
  uint64_t v3 = (void *)sub_1AC7F0();
  os_log_type_t v4 = sub_1ACF50();
  sub_47A70(v4);
  uint64_t v5 = (void (*)(void))v0[3487];
  sub_131CD8();
  if (v6)
  {
    uint64_t v7 = (_WORD *)sub_49780();
    sub_4753C(v7);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v8, v9, "Couldn't create specificMedicationSuccess_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  sub_E530();
  v5();
  uint64_t v10 = (void *)v0[3495];
  uint64_t v11 = (void *)v0[3488];
  sub_132858();
  uint64_t v12 = v0[3327];
  uint64_t v16 = v0[3293];
  uint64_t v17 = v0[3304];
  uint64_t v13 = sub_13220C();
  sub_9B48(v13, (uint64_t)(v0 + 816));
  sub_75790(v0 + 816, v0 + 836);
  sub_9BA4();
  sub_1AB120();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_9BF0((uint64_t)(v0 + 836));
  sub_5B028(v12, &qword_201E28);
  sub_12E41C(v16, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_12E41C(v17, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v18, &qword_201E28);
  sub_5B028(v19, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_119D68()
{
  sub_47634();
  sub_46F18();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v7 + 28024) = v6;
  *(void *)(v7 + 28032) = v0;
  swift_task_dealloc();
  sub_47BA8();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  sub_CD508();
  sub_CD4F0();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_119EC0()
{
  sub_471BC();
  sub_4712C();
  sub_132640(20808);
  uint64_t v3 = (void *)v0[3503];
  uint64_t v4 = sub_132DB0();
  sub_47E6C(v4, (uint64_t)HKActivityRingUIViewRepresentable.updateUIView(_:context:));
  sub_1AB3C0();
  id v5 = [v3 catId];
  sub_1ACDD0();
  sub_1322FC();
  sub_1324E4();
  sub_E3FC(v2, (uint64_t)(v0 + 2606));
  sub_9B48(v1 + 64, (uint64_t)(v0 + 1176));
  sub_E3FC(v1 + 296, (uint64_t)(v0 + 2941));
  v0[3505] = *(void *)(v1 + 336);
  v0[3506] = *(void *)(v1 + 344);
  swift_retain();
  swift_retain();
  swift_task_alloc();
  sub_250E0();
  v0[3507] = v6;
  *uint64_t v6 = v7;
  v6[1] = sub_11A01C;
  sub_13217C();
  sub_47294();
  return sub_C1180();
}

uint64_t sub_11A01C()
{
  sub_47D74();
  sub_E588();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 20848;
  uint64_t v4 = v1 + 23528;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  swift_release();
  sub_132EE4(v4);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v7, v8, v9);
}

void sub_11A148()
{
  sub_46EFC();
  sub_4712C();
  if (*(void *)(v0 + 20832))
  {
    uint64_t v2 = *(void **)(v0 + 27904);
    uint64_t v23 = *(void **)(v0 + 28024);
    uint64_t v33 = *(void *)(v0 + 26688);
    uint64_t v35 = *(void *)(v0 + 26728);
    uint64_t v30 = *(void *)(v0 + 26432);
    os_log_type_t v27 = *(void **)(v0 + 27960);
    sub_24D80((long long *)(v0 + 20808), v0 + 20768);
    sub_1AAE40();
    sub_E3FC(v0 + 20768, v0 + 21088);
    uint64_t v3 = sub_47588();
    sub_131E78(v3);
    *(void *)(v0 + 25880) = sub_132CD8();
    sub_480D4();
    sub_1AB120();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 20768);
    sub_F139C();
    v4();
    sub_12E41C(v30, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v33, &qword_201E28);
    sub_5B028(v35, &qword_2032A0);
    swift_release();
  }
  else
  {
    sub_132990(8768);
    sub_13264C(8928);
    sub_13246C();
    sub_5B028(v5, &qword_202570);
    sub_A340();
    uint64_t v6 = sub_47A34();
    v1(v6);
    uint64_t v7 = (void *)sub_1AC7F0();
    os_log_type_t v8 = sub_1ACF50();
    if (sub_47A70(v8))
    {
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 27896);
      uint64_t v10 = (_WORD *)sub_1321CC();
      sub_131BC0(v10);
      sub_131D30();
      swift_bridgeObjectRelease();
      sub_131C84(&def_342E4, v11, v12, "Couldn't create output, returning GenericErrorFlow");
      sub_497D4();

      uint64_t v13 = sub_47BF8();
    }
    else
    {
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 27896);
      uint64_t v15 = *(void *)(v0 + 27024);
      uint64_t v16 = *(void *)(v0 + 26736);
      swift_bridgeObjectRelease();

      uint64_t v13 = v15;
      uint64_t v14 = v16;
    }
    v9(v13, v14);
    uint64_t v17 = *(void **)(v0 + 28024);
    uint64_t v18 = *(void **)(v0 + 27904);
    uint64_t v29 = *(void *)(v0 + 26688);
    uint64_t v31 = *(void *)(v0 + 26728);
    uint64_t v28 = *(void *)(v0 + 26432);
    id v25 = *(void **)(v0 + 27960);
    uint64_t v26 = *(void *)(v0 + 26264);
    uint64_t v19 = *(void *)(v0 + 26216);
    uint64_t v24 = *(void *)(v0 + 26208);
    uint64_t v20 = sub_13220C();
    sub_9B48(v20, (uint64_t)v32);
    sub_75790(v32, v34);
    sub_9BA4();
    sub_1AB120();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_9BF0((uint64_t)v34);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v26, v24);
    sub_12E41C(v28, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v29, &qword_201E28);
    sub_5B028(v31, &qword_2032A0);
  }
  sub_1309E4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1320A4();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_11AA0C()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  sub_A340();
  uint64_t v2 = sub_470B8();
  v1(v2);
  uint64_t v3 = (void *)sub_1AC7F0();
  os_log_type_t v4 = sub_1ACF50();
  sub_47A70(v4);
  uint64_t v5 = (void (*)(void))v0[3487];
  uint64_t v6 = (void *)v0[3377];
  sub_131CD8();
  if (v7)
  {
    os_log_type_t v8 = (_WORD *)sub_49780();
    sub_4753C(v8);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v9, v10, "Couldn't create specificMedicationLogFailed_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  sub_E530();
  v5();
  uint64_t v11 = (void *)v0[3495];
  sub_132E34();
  sub_132858();
  uint64_t v12 = sub_132110();
  sub_9B48(v12, (uint64_t)(v0 + 1196));
  sub_75790(v0 + 1196, v0 + 1216);
  sub_9BA4();
  sub_1AB120();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_9BF0((uint64_t)(v0 + 1216));
  sub_12E41C((uint64_t)v5, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v15, &qword_201E28);
  sub_5B028(v16, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_11B0D8()
{
  sub_132494();
  sub_7F418();
  sub_46F18();
  uint64_t v3 = v2;
  sub_E53C();
  *os_log_type_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  v3[3510] = v7;
  v3[3511] = v0;
  swift_task_dealloc();
  sub_47BA8();
  if (v0)
  {
    sub_132B94();
    uint64_t v8 = v3[3319];
    swift_bridgeObjectRelease();
    swift_release();
    sub_1327F8();
    swift_bridgeObjectRelease();
    sub_131FD0();
    swift_bridgeObjectRelease();
    sub_131E6C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_5B028(v8, &qword_201E28);
  }
  else
  {
    sub_5B028(v3[3319], &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  sub_132444();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_11B250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  sub_132D84();
  id v14 = [v13 catId];
  sub_1ACDD0();
  sub_13292C();
  sub_1328E4();
  sub_132DD0();
  uint64_t v15 = sub_131784();
  v16(v15);
  if (sub_131B00())
  {
    uint64_t v17 = sub_131CB4();
  }
  else
  {
    sub_131F5C(19328);
    uint64_t v20 = sub_131884();
    v21(v20);
    sub_131B70((void *)(v12 + 19368));
    uint64_t v17 = sub_1319D8();
    if (v59) {
      char v19 = 0;
    }
    else {
      char v19 = 4;
    }
  }
  sub_131C44(v17, v18, v19);
  sub_132AC0();
  uint64_t v22 = sub_131848();
  v23(v22);
  uint64_t v24 = *(void **)(v12 + 19472);
  if (sub_131B38())
  {
    sub_131EA8();
  }
  else
  {
    uint64_t v24 = (void *)(v12 + 19488);
    sub_131F7C();
    uint64_t v25 = sub_131784();
    v26(v25);
    sub_131A58((void *)(v12 + 19528));
    sub_1319A0();
  }
  os_log_type_t v27 = *(void **)(v12 + 27960);
  sub_1AC2B0();
  unint64_t v28 = sub_12E014(v27, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
  if (v28 && (sub_C10E8(v28), sub_132BE0(), v24) && (sub_17D4E4(v24), v29))
  {
    uint64_t v30 = *(void *)(v12 + 25976);
    uint64_t v31 = *(void *)(v30 + 16);
    swift_retain();
    getMedStatus(from:)();
    swift_release();
    swift_retain();
    getLocalizedMedName(from:)();
    sub_1326A8();
    swift_release();
    if (v31)
    {
      swift_bridgeObjectRelease();
      uint64_t v104 = v31;
    }
    else
    {
      uint64_t v104 = *(void *)(v12 + 27936);
      uint64_t v30 = *(void *)(v12 + 27928);
    }
    uint64_t v114 = v30;
    if (*(unsigned char *)(v12 + 28524))
    {
      unint64_t v53 = sub_12E014(*(void **)(v12 + 27960), (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
      if (v53 && (id v54 = sub_C10E8(v53), swift_bridgeObjectRelease(), v54))
      {
        uint64_t v55 = sub_1AA5DC(v54);
        unint64_t v102 = v56;
        uint64_t v103 = v55;
      }
      else
      {
        unint64_t v102 = 0;
        uint64_t v103 = 0;
      }
    }
    else
    {
      unint64_t v102 = *(void *)(v12 + 27424);
      uint64_t v103 = *(void *)(v12 + 27432);
    }
    uint64_t v110 = (void *)(v12 + 19728);
    uint64_t v112 = *(void **)(v12 + 28080);
    sub_132624();
    uint64_t v57 = *(void *)(v12 + 26432);
    uint64_t v58 = *(void *)(v12 + 26184);
    uint64_t v108 = *(void *)(v12 + 26080);
    sub_1326F8();
    unint64_t v64 = v63 & 0xFFFF00000000FFFFLL | 0x646567670000;
    if (v59) {
      unint64_t v60 = v64;
    }
    uint64_t v107 = v60;
    uint64_t v65 = *(void *)(v12 + 25984);
    uint64_t v109 = *(void *)(v12 + 25976);
    unint64_t v66 = 0xE600000000000000;
    if (!v59) {
      unint64_t v66 = v61;
    }
    uint64_t v105 = v62;
    uint64_t v106 = v66;
    sub_132AD8();
    uint64_t v74 = v73 | 0x64657070690000;
    if (v67) {
      uint64_t v75 = v74;
    }
    else {
      uint64_t v75 = v71;
    }
    if (v67) {
      uint64_t v76 = 0xE700000000000000;
    }
    else {
      uint64_t v76 = v72;
    }
    if (v70) {
      uint64_t v77 = v69;
    }
    else {
      uint64_t v77 = 0x6E656B6154;
    }
    if (v70) {
      uint64_t v78 = v70;
    }
    else {
      uint64_t v78 = 0xE500000000000000;
    }
    uint64_t v79 = sub_CCD04(v68, v58, &qword_201E20);
    HKActivityRingUIViewRepresentable.updateUIView(_:context:)(v79);
    sub_18608C();
    sub_12E8E8(v57, v65, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_47F14();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v80, v81, v82, v105);
    char v83 = sub_132568();
    SpecificMedCompletedLogModel.init(medStatus:givenTimeString:requestedMedName:requestedMedSchedule:dosage:dosageUnit:url:sashBundleID:dontDisplayGranularTime:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:snippetHeaderModel:)(v83, v114, v104, v103, v102, 0, v108, 1, 0, 0, v98, v99, v100, v101, SHIBYTE(v101), v107, v106, v75, v76,
      v77,
      v78,
      v65);
    sub_E3FC(v109 + 296, (uint64_t)v110);
    sub_2E38(v110, *(void *)(v12 + 19752));
    *(void *)(v12 + 19792) = type metadata accessor for WellnessSnippets();
    *(void *)(v12 + 19800) = sub_12ED48((unint64_t *)&qword_202590, 255, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
    uint64_t v84 = sub_B5B0((uint64_t *)(v12 + 19768));
    sub_12E8E8(v108, (uint64_t)v84, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
    sub_FD704();
    swift_storeEnumTagMultiPayload();
    sub_2694(&qword_202588);
    uint64_t v85 = sub_47CA4();
    uint64_t v86 = sub_731A8(v85, 1);
    *uint64_t v87 = v112;
    sub_72328();
    *(void *)(v12 + 28096) = v86;
    id v88 = v112;
    swift_task_alloc();
    sub_250E0();
    *(void *)(v12 + 28104) = v89;
    void *v89 = v90;
    v89[1] = sub_11C310;
    sub_46EC4();
    return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v91, v92, v93, v94, v95, v96);
  }
  else
  {
    uint64_t v116 = *(void (**)(void))(v12 + 27384);
    uint64_t v117 = *(void *)(v12 + 27392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_132360();
    swift_bridgeObjectRelease();
    sub_132034();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_A340();
    sub_132A68();
    v116();
    os_log_type_t v32 = sub_1AC7F0();
    os_log_type_t v33 = sub_1ACF60();
    if (sub_29300(v33))
    {
      uint64_t v34 = *(void (**)(void))(v12 + 27896);
      uint64_t v35 = (_WORD *)sub_131970();
      sub_4753C(v35);
      sub_1323B0();
      swift_bridgeObjectRelease();
      sub_131958(&def_342E4, v32, (os_log_type_t)(v12 + 24), "No loggedTime present nested inside intentResponse, returning GenericErrorFlow");
      sub_497D4();

      sub_E530();
      v34();
    }
    else
    {
      uint64_t v36 = *(void (**)(uint64_t))(v12 + 27896);
      swift_bridgeObjectRelease();

      uint64_t v37 = sub_13198C();
      v36(v37);
    }
    uint64_t v38 = *(void **)(v12 + 27960);
    os_log_type_t v39 = *(void **)(v12 + 27904);
    sub_13281C();
    uint64_t v115 = v40;
    uint64_t v113 = v41;
    uint64_t v111 = *(void *)(v12 + 26152);
    uint64_t v42 = sub_1328BC();
    sub_9B48(v42, v12 + 14688);
    sub_75790((void *)(v12 + 14688), (void *)(v12 + 14848));
    sub_9BA4();
    sub_132E68();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_9BF0(v12 + 14848);
    sub_5B028(v111, &qword_201E20);
    sub_47814();
    v43();
    sub_12E41C(v115, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028((uint64_t)v116, &qword_201E28);
    sub_5B028(v117, &qword_2032A0);
    sub_130E48();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_46EC4();
    return v45(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, a12);
  }
}

uint64_t sub_11C310()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 19768;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

void sub_11C400()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v10 = (void *)v0[3510];
  uint64_t v1 = (void *)v0[3488];
  uint64_t v8 = (void *)v0[3495];
  sub_1321E4();
  uint64_t v12 = v2;
  uint64_t v11 = v0[3269];
  uint64_t v9 = v0[3260];
  sub_1326B4(v3);
  sub_1328CC();
  uint64_t v4 = sub_47588();
  sub_131CE4(v4);
  v0[3224] = sub_1AAE20();
  sub_1AB120();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2461));
  sub_12E41C(v9, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  sub_5B028(v11, &qword_201E20);
  sub_FD4A0();
  v5();
  sub_12E41C(v12, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v13, &qword_201E28);
  sub_5B028(v14, &qword_2032A0);
  swift_release();
  sub_130580();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131CA4();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_11CAF8()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  sub_A340();
  uint64_t v2 = sub_470B8();
  v1(v2);
  uint64_t v3 = (void *)sub_1AC7F0();
  os_log_type_t v4 = sub_1ACF50();
  sub_47A70(v4);
  uint64_t v5 = (void (*)(void))v0[3487];
  sub_131CD8();
  if (v6)
  {
    uint64_t v7 = (_WORD *)sub_49780();
    sub_4753C(v7);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v8, v9, "Couldn't create specificMedicationStatusBothSkipped_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  sub_E530();
  v5();
  uint64_t v10 = (void *)v0[3488];
  uint64_t v17 = v0[3336];
  uint64_t v18 = v0[3341];
  uint64_t v16 = v0[3304];
  uint64_t v15 = (void *)v0[3495];
  uint64_t v11 = sub_13220C();
  sub_9B48(v11, (uint64_t)(v0 + 1876));
  sub_75790(v0 + 1876, v0 + 1896);
  sub_9BA4();
  sub_1AB120();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_9BF0((uint64_t)(v0 + 1896));
  sub_CD2F0();
  v12();
  sub_12E41C(v16, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v17, &qword_201E28);
  sub_5B028(v18, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_11D208()
{
  sub_A364();
  sub_472B4();
  uint64_t v1 = *v0;
  sub_E53C();
  void *v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_11D2BC()
{
  uint64_t v253 = v0;
  int v6 = *(void **)(v0 + 25888);
  *(void *)(v0 + 28144) = v6;
  uint64_t v7 = swift_unknownObjectRelease();
  uint64_t v8 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v6)))(v7);
  if (v8 == 4)
  {
    sub_132954();
    swift_bridgeObjectRelease();
    sub_A340();
    uint64_t v22 = sub_47CBC();
    v4(v22);
    uint64_t v23 = (void *)sub_1AC7F0();
    os_log_type_t v24 = sub_1ACF50();
    BOOL v25 = sub_A3D0(v24);
    uint64_t v26 = *(void (**)(void))(v0 + 28120);
    if (v25)
    {
      uint64_t v27 = *(void *)(v0 + 28112);
      uint64_t v239 = *(void **)(v0 + 26920);
      unint64_t v28 = (_WORD *)sub_49780();
      *(void *)&v250[0] = 0;
      *(void *)&v249[0] = 0;
      sub_131820(v28);
      sub_132C44();
      uint64_t v247 = v27;
      swift_bridgeObjectRelease();
      sub_131C64(&def_342E4, v29, v30, "Received successful intent response, creating output.");
      sub_497D4();

      sub_E530();
      v26();
    }
    else
    {
      sub_132744();
      swift_bridgeObjectRelease();
      sub_E530();
      v26();
      uint64_t v247 = *(void *)(v0 + 28112);
    }
    uint64_t v66 = sub_12E014(v6, (SEL *)&selRef_matchingMedsBeforeUpdate, (void (*)(void))&type metadata accessor for MatchedMedName);
    if (v66) {
      char v67 = (void *)v66;
    }
    else {
      char v67 = &_swiftEmptyArrayStorage;
    }
    sub_12C9AC((uint64_t)v67);
    swift_bridgeObjectRelease();
    id v68 = [v6 medCount];
    if (v68)
    {
      uint64_t v69 = v68;
      sub_132E20(20168);
      uint64_t v71 = (void *)(v0 + v70);
      unsigned __int16 v73 = (void *)(v0 + v72);
      uint64_t v74 = *(void *)(v0 + 26200);
      [v75 doubleValue];

      uint64_t v76 = v6;
      swift_retain();
      uint64_t v77 = (void *)sub_22F80();
      sub_129994(v77, v78);
      sub_1AB070();
      sub_DF6D8(v74, (uint64_t)HKActivityRingUIViewRepresentable.updateUIView(_:context:), 0);
      uint64_t v79 = sub_480D4();
      sub_E3FC(v79, v80);
      sub_2E38(v73, *(void *)(v0 + 20392));
      sub_471EC();
      v81();
      uint64_t v82 = (uint64_t)sub_2E38(v71, *(void *)(v0 + 20352));
      if (sub_1AB040())
      {
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v71);
        uint64_t v83 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v73);
        char v85 = 4;
      }
      else
      {
        sub_131F7C();
        sub_2E38((void *)(v0 + 20288), *(void *)(v0 + 20312));
        sub_471EC();
        v134();
        uint64_t v82 = sub_131B70((void *)(v0 + 20248));
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 20248);
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 20288);
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v71);
        uint64_t v83 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v73);
        if (v82) {
          char v85 = 4;
        }
        else {
          char v85 = 0;
        }
      }
      sub_131C44(v83, v84, v85);
      sub_E3FC(v82, (uint64_t)v239);
      sub_2E38(v239, *(void *)(v0 + 20232));
      sub_471EC();
      v135();
      sub_2E38(v234, *(void *)(v0 + 20192));
      if ((sub_1AB040() & 1) == 0)
      {
        sub_131F7C();
        sub_2E38((void *)(v0 + 20128), *(void *)(v0 + 20152));
        uint64_t v136 = sub_131830();
        v137(v136);
        sub_131A58((void *)(v0 + 20088));
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 20088);
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 20128);
      }
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v234);
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v239);
      uint64_t v138 = *(unsigned __int8 *)(v0 + 27560);
      uint64_t v139 = sub_1AC2B0();
      *(void *)(v0 + 28152) = v140;
      *(void *)(v0 + 28160) = v139;
      if (v138 != 5)
      {
        uint64_t v156 = *(void *)(v0 + 26512);
        uint64_t v157 = *(void *)(v0 + 26384);
        uint64_t v158 = *(void *)(v0 + 26328);
        uint64_t v159 = *(int *)(*(void *)(v0 + 26320) + 36);
        *(_DWORD *)(v0 + 28520) = v159;
        uint64_t v160 = (uint64_t *)(v158 + v159);
        uint64_t v161 = *v160;
        uint64_t v162 = *((unsigned __int8 *)v160 + 8);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v156, 1, 1, v157);
        if ((v162 & 1) == 0)
        {
          uint64_t v162 = *(void *)(v0 + 26512);
          uint64_t v163 = *(void *)(v0 + 26504);
          uint64_t v164 = *(void *)(v0 + 26384);
          sub_2694(&qword_205890);
          uint64_t v165 = swift_allocObject();
          uint64_t v166 = sub_731BC(v165, 1);
          v167[3] = &type metadata for Double;
          v167[4] = &protocol witness table for Double;
          *uint64_t v167 = v161;
          uint64_t v168 = HKActivityRingUIViewRepresentable.updateUIView(_:context:)(v166);
          sub_132548(v168);
          sub_1ACE40();
          swift_bridgeObjectRelease();
          sub_5B028(v162, &qword_201E28);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v163, 0, 1, v164);
          uint64_t v169 = sub_132A74();
          sub_A76E8(v169, v170, v171);
        }
        uint64_t v172 = *(void *)(v0 + 26488);
        uint64_t v173 = *(void *)(v0 + 26384);
        uint64_t v174 = *(void *)(v0 + 26328);
        uint64_t v175 = *(void *)(v0 + 26320);
        sub_132418();
        *(void *)(v0 + 28320) = v162;
        sub_132884(v176);
        swift_retain();
        sub_12E078(v76, (SEL *)&selRef_medSchedule);
        sub_1ACE40();
        swift_bridgeObjectRelease();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v172, 0, 1, v173);
        uint64_t v177 = v174 + *(int *)(v175 + 40);
        LOBYTE(v174) = *(unsigned char *)(v174 + *(int *)(v175 + 44));
        uint64_t v178 = (void *)swift_task_alloc();
        *(void *)(v0 + 28328) = v178;
        *uint64_t v178 = v0;
        v178[1] = sub_1242D4;
        char v256 = v174;
        uint64_t v255 = v177;
        return sub_1A6A78();
      }
      uint64_t v141 = v140;
      uint64_t v142 = *(void (**)(uint64_t))(v0 + 27384);
      sub_A340();
      uint64_t v143 = sub_132A74();
      v142(v143);
      uint64_t v144 = swift_allocObject();
      *(void *)(v144 + 16) = v76;
      uint64_t v244 = v76;
      uint64_t v145 = sub_1AC7F0();
      os_log_type_t v146 = sub_1ACF50();
      uint64_t v147 = sub_131A8C();
      *(unsigned char *)(v147 + 16) = 32;
      uint64_t v148 = sub_131A8C();
      sub_13284C(v148);
      uint64_t v149 = sub_131A40();
      *(void *)(v149 + 16) = sub_12E530;
      *(void *)(v149 + 24) = v144;
      uint64_t v150 = sub_131A40();
      *(void *)(v150 + 16) = sub_130064;
      *(void *)(v150 + 24) = v149;
      uint64_t v151 = sub_132834();
      sub_731BC(v151, 3);
      *char v152 = sub_130074;
      v152[1] = v147;
      v152[2] = sub_130074;
      v152[3] = v148;
      v152[4] = sub_13006C;
      v152[5] = v150;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v145, v146))
      {
        uint64_t v153 = (uint8_t *)sub_49780();
        uint64_t v154 = sub_E620();
        *(_WORD *)uint64_t v153 = 258;
        *(void *)&v250[0] = v154;
        uint64_t v251 = v153 + 2;
        v252[0] = 0;
        *(void *)&v249[0] = sub_130074;
        *((void *)&v249[0] + 1) = v147;
        sub_49798((uint64_t (**)(uint64_t, uint64_t, uint64_t))v249, (uint64_t)&v251, (uint64_t)v252, (uint64_t)v250);
        if (v247)
        {
          sub_131DF4();
          return swift_errorRelease();
        }
        swift_release();
        *(void *)&v249[0] = sub_130074;
        *((void *)&v249[0] + 1) = v148;
        sub_132B74();
        swift_release();
        *(void *)&v249[0] = sub_13006C;
        *((void *)&v249[0] + 1) = v150;
        sub_132B74();
        uint64_t v148 = *(void *)(v0 + 26736);
        swift_release();
        _os_log_impl(&def_342E4, v145, v146, "got .rejectedOverwriteInGroup, starting with %s matchingMeds", v153, 0xCu);
        swift_arrayDestroy();
        sub_A1F0();
        sub_497D4();

        sub_132EAC();
        sub_E530();
        v218();
        uint64_t v247 = 0;
      }
      else
      {
        os_log_type_t v188 = *(void (**)(uint64_t, uint64_t))(v0 + 28120);
        uint64_t v154 = *(void *)(v0 + 26912);
        uint64_t v189 = *(void *)(v0 + 26736);

        swift_release();
        swift_release();
        swift_release();
        v188(v154, v189);
      }
      unint64_t v190 = sub_12E014(v244, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
      if (!v190) {
        goto LABEL_78;
      }
      unint64_t v191 = v190;
      sub_106E7C(v190);
      sub_132690();
      if (v154 == 1)
      {
        sub_132418();
        *(void *)(v0 + 28224) = v191;
        swift_retain();
        unint64_t v196 = sub_12E014(v244, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
        if (v196 && (id v197 = sub_C10E8(v196), swift_bridgeObjectRelease(), v197) && (sub_1AA5DC(v197), v198))
        {
          sub_1ACE40();
          swift_bridgeObjectRelease();
          uint64_t v199 = 0;
        }
        else
        {
          uint64_t v199 = 1;
        }
        sub_132CF0(*(void *)(v0 + 26536), v199);
        uint64_t v205 = (void *)swift_task_alloc();
        *(void *)(v0 + 28232) = v205;
        *uint64_t v205 = v0;
        v205[1] = sub_120DB0;
        goto LABEL_92;
      }
      if (!v154)
      {
LABEL_78:
        uint64_t v192 = *(void *)(v0 + 26544);
        uint64_t v193 = *(void *)(v0 + 26384);
        uint64_t v194 = *(void *)(v0 + 25976);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1327EC();
        swift_bridgeObjectRelease();
        sub_132B50();
        swift_bridgeObjectRelease();
        *(void *)(v0 + 28168) = *(void *)(v194 + 336);
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v192, 1, 1, v193);
        swift_retain();
        uint64_t v195 = (void *)swift_task_alloc();
        *(void *)(v0 + 28176) = v195;
        *uint64_t v195 = v0;
        v195[1] = sub_11FA04;
LABEL_92:
        sub_131DF4();
        return sub_1A5530();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_132A5C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v200 = sub_12E014(v244, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
      if (v200)
      {
        uint64_t v201 = *(void *)(v0 + 25976);
        sub_106E7C(v200);
        sub_132690();
        *(void *)(v0 + 28264) = *(void *)(v201 + 336);
        swift_retain();
        unint64_t v202 = sub_12E014(v244, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
        if (v202 && (sub_C10E8(v202), sub_132BE0(), v141) && (sub_1AA5DC(v141), v203))
        {
          sub_1ACE40();
          swift_bridgeObjectRelease();
          uint64_t v204 = 0;
        }
        else
        {
          uint64_t v204 = 1;
        }
        sub_132CF0(*(void *)(v0 + 26528), v204);
        uint64_t v206 = (void *)swift_task_alloc();
        *(void *)(v0 + 28272) = v206;
        *uint64_t v206 = v0;
        v206[1] = sub_1221EC;
        goto LABEL_92;
      }
      uint64_t v245 = (void *)(v0 + 14368);
      id v238 = (void *)(v0 + 14528);
      sub_1320FC();
      sub_A340();
      uint64_t v208 = sub_132A74();
      ((void (*)(uint64_t))v141)(v208);
      uint64_t v209 = sub_1AC7F0();
      os_log_type_t v210 = sub_1ACF60();
      BOOL v211 = sub_13221C(v210);
      uint64_t v212 = *(void (**)(void))(v0 + 28120);
      if (v211)
      {
        uint64_t v213 = (_WORD *)sub_49780();
        *(void *)&v250[0] = 0;
        *(void *)&v249[0] = 0;
        sub_131820(v213);
        uint64_t v214 = sub_132C64();
        sub_12D1CC(v214, v215, v216, v217);
        swift_bridgeObjectRelease();
        sub_131FDC(&def_342E4, v209, (os_log_type_t)v148, "Couldn't create logMedConfirmationRejected_Dialog, returning GenericErrorFlow");
        sub_497D4();
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      sub_E530();
      v212();
      uint64_t v219 = *(void **)(v0 + 28144);
      uint64_t v220 = *(void **)(v0 + 28128);
      sub_132674();
      uint64_t v227 = *(void *)(v0 + 26328);
      uint64_t v221 = *(void *)(v0 + 26144);
      uint64_t v222 = sub_1328BC();
      sub_9B48(v222, (uint64_t)v238);
      sub_75790(v238, v245);
      sub_9BA4();
      sub_1AB120();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_9BF0((uint64_t)v245);
      sub_5B028(v221, &qword_201E20);
      sub_FD4A0();
      v223();
      sub_12E41C(v227, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
      sub_12E41C(v228, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      uint64_t v182 = v231;
    }
    else
    {
      sub_132E20(17248);
      uint64_t v102 = *(void *)(v0 + 27392);
      uint64_t v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 27384);
      uint64_t v104 = *(void *)(v0 + 27376);
      uint64_t v105 = *(void *)(v0 + 26848);
      uint64_t v106 = *(void *)(v0 + 26736);
      sub_1325FC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_A340();
      v103(v105, v104, v106);
      uint64_t v107 = sub_1AC7F0();
      os_log_type_t v108 = sub_1ACF50();
      sub_131BA4(v108);
      uint64_t v109 = *(void (**)(uint64_t))(v0 + 28120);
      uint64_t v110 = *(void *)(v0 + 26848);
      sub_132D08();
      if (v111)
      {
        uint64_t v112 = (_WORD *)sub_49780();
        *(void *)&v250[0] = 0;
        *(void *)&v249[0] = 0;
        sub_131820(v112);
        uint64_t v113 = sub_132C30();
        sub_12D1CC(v113, v114, v115, v116);
        swift_bridgeObjectRelease();
        sub_132284(&def_342E4, v107, (os_log_type_t)v102, "There were no doseEvents in the chosen schedule, returning GenericErrorFlow");
        sub_497D4();

        sub_47BF8();
        sub_E530();
        v117();
      }
      else
      {

        swift_bridgeObjectRelease();
        uint64_t v179 = sub_13245C();
        v109(v179);
      }
      os_log_type_t v180 = *(void **)(v0 + 28128);
      uint64_t v247 = *(void *)(v0 + 26728);
      uint64_t v181 = sub_132164();
      sub_9B48(v181, (uint64_t)v234);
      sub_75790(v234, v239);
      sub_9BA4();
      sub_1AB120();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_9BF0((uint64_t)v239);
      sub_12E41C(v106, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      uint64_t v182 = v110;
    }
    sub_5B028(v182, &qword_201E28);
    uint64_t v65 = v247;
LABEL_70:
    sub_5B028(v65, &qword_2032A0);
LABEL_71:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_131DF4();
    __asm { BRAA            X1, X16 }
  }
  switch(v8)
  {
    case 5:
      sub_131934();
      sub_131EEC();
      swift_bridgeObjectRelease();
      sub_131FD0();
      swift_bridgeObjectRelease();
      sub_131E6C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_A340();
      uint64_t v31 = sub_47CBC();
      v5(v31);
      os_log_type_t v32 = sub_1AC7F0();
      os_log_type_t v33 = sub_1ACF50();
      BOOL v34 = sub_29300(v33);
      uint64_t v35 = *(void (**)(void))(v0 + 28120);
      if (v34)
      {
        uint64_t v36 = (_WORD *)sub_131970();
        *(void *)&v250[0] = 0;
        *(void *)&v249[0] = 0;
        sub_131820(v36);
        sub_132390();
        swift_bridgeObjectRelease();
        sub_131958(&def_342E4, v32, (os_log_type_t)v6, "Received failure intent response, creating output.");
        sub_497D4();

        sub_13229C();
      }
      else
      {
        int v6 = *(void **)(v0 + 26816);
        sub_132D14();
        swift_bridgeObjectRelease();
        sub_479C8();
      }
      sub_E530();
      v35();
      sub_132418();
      *(void *)(v0 + 28400) = v32;
      swift_retain();
      swift_retain();
      getLocalizedMedName(from:)();
      sub_1329E8();
      if (v6)
      {
        sub_1ACE40();
        swift_bridgeObjectRelease();
        uint64_t v86 = 0;
      }
      else
      {
        uint64_t v86 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 26480), v86, 1, *(void *)(v0 + 26384));
      sub_132528();
      uint64_t v118 = (void *)swift_task_alloc();
      *(void *)(v0 + 28408) = v118;
      *uint64_t v118 = v0;
      v118[1] = sub_126CAC;
      sub_131DF4();
      return sub_1A6434();
    case 110:
      uint64_t v248 = v6;
      uint64_t v37 = *(void **)(v0 + 27392);
      uint64_t v38 = *(void (**)(void))(v0 + 27384);
      os_log_type_t v39 = *(void (**)(uint64_t))(v0 + 27376);
      sub_131EEC();
      swift_bridgeObjectRelease();
      sub_132A5C();
      swift_bridgeObjectRelease();
      sub_131E6C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_A340();
      sub_132A68();
      v38();
      uint64_t v40 = (void *)sub_1AC7F0();
      os_log_type_t v41 = sub_1ACF50();
      BOOL v42 = sub_A3D0(v41);
      uint64_t v43 = *(void (**)(void))(v0 + 28120);
      if (v42)
      {
        uint64_t v44 = (_WORD *)sub_132068();
        *(void *)&v250[0] = 0;
        *(void *)&v249[0] = 0;
        sub_131820(v44);
        uint64_t v37 = &_swiftEmptyArrayStorage;
        sub_132C44();
        swift_bridgeObjectRelease();
        sub_131C64(&def_342E4, v45, v46, "SpecificMedLoggingFlow's .scheduleSelected case received .needsConfirmMixedLogging in intent response, creating confirmation.");
        sub_497D4();
      }
      else
      {
        os_log_type_t v39 = *(void (**)(uint64_t))(v0 + 26736);

        swift_bridgeObjectRelease();
      }
      sub_E530();
      v43();
      sub_131D6C();
      uint64_t v87 = sub_12E014(v6, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
      if (v87)
      {
        uint64_t v88 = v87;
        uint64_t v233 = *(void **)(v0 + 28128);
        uint64_t v242 = *(void *)(v0 + 26728);
        uint64_t v237 = *(void *)(v0 + 26688);
        uint64_t v230 = *(void *)(v0 + 26432);
        type metadata accessor for LogMedScheduleMixedStatusConfirmationStrategy();
        swift_retain();
        char v89 = getMedStatus(from:)();
        swift_release();
        sub_106FB8((uint64_t *)v249);
        uint64_t v90 = sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
        uint64_t v91 = sub_12A118((void (*)(void))type metadata accessor for WellnessLoggingCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
        sub_9AD48((uint64_t *)v250);
        sub_7BC0C(v89 & 1, v88, v249, v90, v91, v250);
        swift_retain();
        sub_1AB350();
        *(void *)(v0 + 25856) = sub_106DD4();
        sub_12A998();
        sub_2694(&qword_206C68);
        sub_B56C(&qword_206C70, &qword_206C68);
        sub_1AB100();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();

        sub_12E41C(v230, (void (*)(void))type metadata accessor for SnippetHeaderModel);
        sub_5B028(v237, &qword_201E28);
        sub_5B028(v242, &qword_2032A0);
        swift_release();
        goto LABEL_71;
      }
      uint64_t v120 = (void *)(v0 + 5248);
      uint64_t v243 = (void *)(v0 + 5408);
      sub_1320FC();
      uint64_t v121 = *(void *)(v0 + 26736);
      sub_A340();
      uint64_t v122 = sub_132944();
      v39(v122);
      uint64_t v123 = sub_1AC7F0();
      os_log_type_t v124 = sub_1ACF50();
      sub_131BA4(v124);
      uint64_t v125 = *(void (**)(uint64_t))(v0 + 28120);
      uint64_t v126 = *(void *)(v0 + 26784);
      sub_132D08();
      if (v127)
      {
        uint64_t v128 = (_WORD *)sub_49780();
        *(void *)&v250[0] = 0;
        *(void *)&v249[0] = 0;
        sub_131820(v128);
        uint64_t v129 = sub_132C30();
        sub_12D1CC(v129, v130, v131, v132);
        swift_bridgeObjectRelease();
        sub_132284(&def_342E4, v123, (os_log_type_t)v37, "Needed confirmation for mixed logging, but intentResponse.matchingMeds was nil.");
        uint64_t v120 = (void *)(v0 + 5248);
        sub_497D4();

        sub_47BF8();
        sub_E530();
        v133();
      }
      else
      {

        swift_bridgeObjectRelease();
        uint64_t v183 = sub_13245C();
        v125(v183);
      }
      uint64_t v184 = *(void **)(v0 + 28128);
      uint64_t v98 = *(void *)(v0 + 26728);
      uint64_t v185 = sub_132164();
      sub_9B48(v185, (uint64_t)v243);
      sub_75790(v243, v120);
      sub_9BA4();
      sub_1AB120();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_9BF0((uint64_t)v120);
      sub_12E41C(v121, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      uint64_t v101 = v126;
LABEL_69:
      sub_5B028(v101, &qword_201E28);
      uint64_t v65 = v98;
      goto LABEL_70;
    case 111:
      sub_13180C();
      uint64_t v47 = *(void *)(v0 + 26832);
      sub_A340();
      uint64_t v48 = sub_470B8();
      v2(v48);
      uint64_t v49 = sub_1AC7F0();
      os_log_type_t v50 = sub_1ACF50();
      BOOL v51 = sub_29300(v50);
      unsigned __int8 v52 = *(void (**)(void))(v0 + 28120);
      if (v51)
      {
        unint64_t v53 = (_WORD *)sub_131970();
        *(void *)&v250[0] = 0;
        *(void *)&v249[0] = 0;
        sub_131820(v53);
        sub_132390();
        swift_bridgeObjectRelease();
        sub_131958(&def_342E4, v49, (os_log_type_t)v47, "SpecificMedLoggingFlow received .allMedsLoggedAlready in intent response, creating output.");
        sub_497D4();

        sub_13229C();
      }
      else
      {
        sub_132D14();
        swift_bridgeObjectRelease();
        sub_479C8();
      }
      sub_E530();
      v52();
      uint64_t v92 = *(void *)(v0 + 25976);
      uint64_t v93 = sub_1AB090();
      sub_132AA4(v93, (uint64_t)HKActivityRingUIViewRepresentable.updateUIView(_:context:));
      sub_1AB3C0();
      *(void *)(v0 + 28360) = *(void *)(v92 + 336);
      swift_retain();
      swift_retain();
      getMedStatus(from:)();
      swift_release();
      uint64_t v94 = (void *)swift_task_alloc();
      *(void *)(v0 + 28368) = v94;
      *uint64_t v94 = v0;
      v94[1] = sub_1257E8;
      sub_132E80();
      sub_131DF4();
      return sub_1A6154();
    default:
      uint64_t v246 = v6;
      if (v8 == 112)
      {
        uint64_t v240 = v0 + 520;
        uint64_t v235 = (const void *)(v0 + 11008);
        uint64_t v232 = (long long *)(v0 + 20448);
        uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 27384);
        uint64_t v10 = *(void *)(v0 + 27376);
        uint64_t v11 = *(void *)(v0 + 26840);
        uint64_t v12 = *(void *)(v0 + 26736);
        sub_1325FC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_A340();
        v9(v11, v10, v12);
        uint64_t v13 = sub_1AC7F0();
        os_log_type_t v14 = sub_1ACF60();
        BOOL v15 = sub_13221C(v14);
        uint64_t v16 = *(void (**)(void))(v0 + 28120);
        if (v15)
        {
          uint64_t v17 = (_WORD *)sub_132068();
          *(void *)&v250[0] = 0;
          *(void *)&v249[0] = 0;
          sub_131820(v17);
          uint64_t v18 = sub_132C64();
          sub_12D1CC(v18, v19, v20, v21);
          swift_bridgeObjectRelease();
          sub_131FDC(&def_342E4, v13, (os_log_type_t)v10, "Received gotComplexDosageLoggingError, creating output.");
          sub_497D4();

          sub_132EA0();
        }
        else
        {

          swift_bridgeObjectRelease();
          sub_132EAC();
        }
        sub_E530();
        v16();
        uint64_t v224 = *(void **)(v0 + 28128);
        uint64_t v229 = *(void *)(v0 + 26728);
        uint64_t v226 = *(void *)(v0 + 26688);
        uint64_t v225 = *(void *)(v0 + 26432);
        uint64_t v60 = *(void *)(v0 + 25976);
        uint64_t v61 = v60 + 24;
        uint64_t v62 = *(void *)(v60 + 16);
        sub_9B48(v60 + 64, (uint64_t)v235);
        sub_E3FC(v61, (uint64_t)v232);
        swift_retain();
        sub_9AD48((uint64_t *)v250);
        uint64_t v63 = sub_AB20C();
        uint64_t v64 = sub_AB238();
        sub_3F810((uint64_t *)v249);
        sub_AB2FC(v62, v235, v232, 0, 0, v250, v63, v64, v240, v249);
        sub_ABC40();
        sub_1AB120();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        sub_ABB40(v240);
        sub_12E41C(v225, (void (*)(void))type metadata accessor for SnippetHeaderModel);
        sub_5B028(v226, &qword_201E28);
        uint64_t v65 = v229;
        goto LABEL_70;
      }
      uint64_t v241 = (void *)(v0 + 4608);
      uint64_t v236 = (void *)(v0 + 4768);
      sub_132CB8();
      sub_131EEC();
      swift_bridgeObjectRelease();
      sub_132A5C();
      swift_bridgeObjectRelease();
      sub_132034();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_A340();
      uint64_t v54 = sub_132094();
      v1(v54);
      uint64_t v55 = sub_1AC7F0();
      os_log_type_t v56 = sub_1ACF50();
      BOOL v57 = sub_FD440(v56);
      uint64_t v58 = *(void (**)(void))(v0 + 28120);
      if (v57)
      {
        char v59 = (_WORD *)sub_49780();
        *(void *)&v250[0] = 0;
        *(void *)&v249[0] = 0;
        sub_131820(v59);
        sub_132390();
        swift_bridgeObjectRelease();
        sub_132284(&def_342E4, v55, v3, "Intent response code within .nameSelected was not an expected one || is one we're not handling yet, returning nil output.");
        sub_497D4();
      }
      else
      {

        swift_bridgeObjectRelease();
        sub_480D4();
      }
      sub_E530();
      v58();
      uint64_t v97 = *(void **)(v0 + 28128);
      uint64_t v98 = *(void *)(v0 + 26728);
      uint64_t v99 = *(void *)(v0 + 26688);
      uint64_t v100 = sub_132110();
      sub_9B48(v100, (uint64_t)v236);
      sub_75790(v236, v241);
      sub_9BA4();
      sub_1AB120();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_9BF0((uint64_t)v241);
      sub_12E41C((uint64_t)v58, (void (*)(void))type metadata accessor for SnippetHeaderModel);
      uint64_t v101 = v99;
      goto LABEL_69;
  }
}

uint64_t sub_11FA04()
{
  sub_47634();
  sub_470A0();
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v2;
  sub_E53C();
  *int v6 = v5;
  *(void *)(v8 + 28184) = v7;
  *(void *)(v8 + 28192) = v1;
  swift_task_dealloc();
  sub_47C98();
  uint64_t v9 = *(void *)(v0 + 26544);
  if (v1)
  {
    swift_release();
    swift_errorRelease();
    sub_5B028(v9, &qword_201E28);
  }
  else
  {
    sub_5B028(v9, &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_11FB54()
{
  sub_471BC();
  sub_4712C();
  sub_132640(18448);
  uint64_t v1 = *(void *)(v0 + 25976);
  id v2 = [*(id *)(v0 + 28184) catId];
  sub_1ACDD0();
  sub_13292C();
  sub_1328E4();
  sub_1AB3C0();
  sub_E3FC(v1 + 24, v0 + 18368);
  sub_132BA8();
  sub_E3FC(v1 + 296, v0 + 18408);
  *(void *)(v0 + 28200) = *(void *)(v1 + 336);
  *(void *)(v0 + 28208) = *(void *)(v1 + 344);
  swift_retain();
  swift_retain();
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 28216) = v3;
  *uint64_t v3 = v4;
  v3[1] = sub_11FCAC;
  sub_47294();
  return sub_C1180();
}

uint64_t sub_11FCAC()
{
  sub_47D74();
  sub_E588();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 18368;
  uint64_t v4 = v1 + 18408;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *int v6 = v5;
  swift_task_dealloc();
  swift_release();
  swift_release();
  sub_132EE4(v4);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v7, v8, v9);
}

void sub_11FDD4()
{
  sub_46EFC();
  sub_4712C();
  if (v0[2309])
  {
    uint64_t v29 = (void *)v0[3523];
    id v2 = (void *)v0[3518];
    uint64_t v26 = (void *)v0[3516];
    sub_132C8C();
    uint64_t v34 = v0[3291];
    uint64_t v36 = v3;
    uint64_t v4 = v0[3277];
    uint64_t v30 = v0[3276];
    uint64_t v32 = v0[3281];
    uint64_t v28 = v0[3268];
    sub_24D80(v5, (uint64_t)(v0 + 2311));
    sub_1AAE40();
    sub_1328CC();
    uint64_t v6 = sub_47588();
    sub_131E78(v6);
    v0[3222] = sub_132CD8();
    sub_1328A0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2311));
    sub_5B028(v28, &qword_201E20);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v32, v30);
    sub_12E41C(v34, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
    sub_12E41C(v36, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028((uint64_t)v38, &qword_201E28);
    sub_5B028((uint64_t)v39, &qword_2032A0);
    swift_release();
  }
  else
  {
    sub_13264C(16608);
    sub_132990(17728);
    sub_13246C();
    sub_5B028(v7, &qword_202570);
    sub_A340();
    uint64_t v8 = sub_47A34();
    v1(v8);
    uint64_t v9 = (void *)sub_1AC7F0();
    os_log_type_t v10 = sub_1ACF50();
    if (sub_47A70(v10))
    {
      uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[3515];
      uint64_t v12 = (_WORD *)sub_1321CC();
      sub_131BC0(v12);
      sub_131D30();
      swift_bridgeObjectRelease();
      sub_131C84(&def_342E4, v13, v14, "Couldn't create output, returning GenericErrorFlow");
      sub_497D4();

      uint64_t v15 = sub_47BF8();
    }
    else
    {
      uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[3515];
      uint64_t v17 = v0[3363];
      uint64_t v18 = v0[3342];

      swift_bridgeObjectRelease();
      uint64_t v15 = v17;
      uint64_t v16 = v18;
    }
    v11(v15, v16);
    uint64_t v19 = (void *)v0[3518];
    uint64_t v20 = (void *)v0[3516];
    uint64_t v35 = v0[3336];
    uint64_t v37 = v0[3341];
    uint64_t v31 = v0[3291];
    uint64_t v33 = v0[3304];
    uint64_t v27 = (void *)v0[3523];
    uint64_t v21 = v0[3268];
    uint64_t v22 = sub_13220C();
    sub_9B48(v22, (uint64_t)v38);
    sub_75790(v38, v39);
    sub_9BA4();
    sub_1AB120();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_9BF0((uint64_t)v39);
    sub_5B028(v21, &qword_201E20);
    sub_CD2F0();
    v23();
    sub_12E41C(v31, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
    sub_12E41C(v33, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v35, &qword_201E28);
    sub_5B028(v37, &qword_2032A0);
  }
  sub_1309E4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1320A4();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_1206C8()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  sub_A340();
  uint64_t v3 = sub_470B8();
  v1(v3);
  uint64_t v4 = (void *)sub_1AC7F0();
  os_log_type_t v5 = sub_1ACF50();
  sub_47A70(v5);
  uint64_t v6 = (void (*)(void))v0[3515];
  uint64_t v7 = v0[3362];
  sub_131CD8();
  if (v8)
  {
    uint64_t v9 = (_WORD *)sub_49780();
    sub_4753C(v9);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v10, v11, "Couldn't create logMedConfirmationRejected_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  sub_E530();
  v6();
  uint64_t v12 = (void *)v0[3518];
  sub_1318D8();
  sub_75790(v0 + 2276, v2);
  sub_9BA4();
  sub_132E68();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_9BF0((uint64_t)v2);
  sub_5B028(v7, &qword_201E20);
  sub_47814();
  v13();
  sub_12E41C(v16, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_12E41C(v17, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v18, &qword_201E28);
  sub_5B028(v19, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_120DB0()
{
  sub_132494();
  sub_7F418();
  sub_46F18();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 28240) = v7;
  swift_task_dealloc();
  sub_47BA8();
  if (v0)
  {
    sub_13276C();
    uint64_t v8 = *(void *)(v3 + 26536);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1327F8();
    swift_bridgeObjectRelease();
    sub_131FD0();
    swift_bridgeObjectRelease();
    sub_131E6C();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_5B028(v8, &qword_201E28);
  }
  else
  {
    sub_5B028(*(void *)(v3 + 26536), &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  sub_132444();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_120F20()
{
  uint64_t v1 = *(void **)(v0 + 28240);
  uint64_t v2 = *(void **)(v0 + 28144);
  sub_1AB3C0();
  id v3 = [v1 catId];
  sub_1ACDD0();

  sub_132EA0();
  sub_1AB380();
  swift_retain();
  char v4 = getMedStatus(from:)();
  swift_release();
  sub_1AABC0();
  unint64_t v5 = sub_12E014(v2, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
  if (v5)
  {
    sub_C10E8(v5);
    sub_132690();
    if (v2) {
      sub_1AA5E8(v2);
    }
  }
  unint64_t v6 = sub_12E014(*(void **)(v0 + 28144), (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
  if (v6 && (sub_C10E8(v6), sub_132690(), v2))
  {
    uint64_t v7 = sub_1AA5DC(v2);
    unint64_t v47 = v8;
    uint64_t v48 = v7;
  }
  else
  {
    unint64_t v47 = 0;
    uint64_t v48 = 0;
  }
  sub_132E14(18768);
  uint64_t v55 = v9;
  uint64_t v53 = *(void *)(v0 + 28152);
  uint64_t v54 = *(void *)(v0 + 28160);
  sub_132624();
  sub_1326F8();
  unint64_t v18 = v17 & 0xFFFF00000000FFFFLL | 0x646567670000;
  uint64_t v19 = *(void *)(v0 + 26184);
  if (v10) {
    unint64_t v20 = v18;
  }
  else {
    unint64_t v20 = v15;
  }
  unint64_t v21 = 0xE600000000000000;
  if (!v10) {
    unint64_t v21 = v16;
  }
  uint64_t v49 = v21;
  uint64_t v50 = v20;
  uint64_t v51 = *(void *)(v0 + 26072);
  if (v14) {
    uint64_t v22 = v13;
  }
  else {
    uint64_t v22 = 0x64657070696B53;
  }
  if (v14) {
    uint64_t v23 = v14;
  }
  else {
    uint64_t v23 = 0xE700000000000000;
  }
  uint64_t v24 = *(void *)(v0 + 25984);
  if (v12) {
    uint64_t v25 = v11;
  }
  else {
    uint64_t v25 = 0x6E656B6154;
  }
  if (v12) {
    uint64_t v26 = v12;
  }
  else {
    uint64_t v26 = 0xE500000000000000;
  }
  uint64_t v52 = *(void *)(v0 + 25976);
  uint64_t v27 = sub_CCD04(*(void *)(v0 + 26144), v19, &qword_201E20);
  HKActivityRingUIViewRepresentable.updateUIView(_:context:)(v27);
  char v28 = sub_18608C();
  uint64_t v29 = sub_1324AC();
  sub_12E8E8(v29, v30, v31);
  sub_132D2C(v24, 0);
  SpecificMedCompletedLogModel.init(medStatus:givenTime:requestedMedName:requestedMedSchedule:dosage:dosageUnit:url:sashBundleID:dontDisplayGranularTime:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:snippetHeaderModel:)(v4 & 1, v48, v47, 0, 1, v51, 0, 0, v19, v54, v53, 0, v28 & 1, v50, v49, v22, v23, v25, v26,
    v24);
  sub_E3FC(v52 + 296, v0 + 18728);
  *(void *)(v0 + 18712) = sub_1320B4();
  *(void *)(v0 + 18720) = sub_12ED48((unint64_t *)&qword_202590, 255, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  uint64_t v32 = sub_B5B0((uint64_t *)(v0 + 18688));
  sub_132F18((uint64_t)v32, v33, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  sub_1324FC();
  sub_2694(&qword_202588);
  uint64_t v34 = sub_47CA4();
  uint64_t v35 = sub_731A8(v34, 1);
  *uint64_t v36 = v55;
  sub_72328();
  *(void *)(v0 + 28248) = v35;
  id v37 = v55;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 28256) = v38;
  *uint64_t v38 = v39;
  v38[1] = sub_121300;
  uint64_t v40 = sub_131C24();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v40, v41, v42, v43, v44, v45);
}

uint64_t sub_121300()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 18688;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *unint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

void sub_1213F0()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v1 = (void *)v0[3518];
  uint64_t v10 = (void *)v0[3516];
  uint64_t v8 = (void *)v0[3530];
  sub_1321E4();
  uint64_t v12 = v0[3291];
  uint64_t v13 = v2;
  uint64_t v11 = v0[3268];
  uint64_t v9 = v0[3259];
  sub_1326B4(v3);
  sub_E3FC((uint64_t)(v0 + 2346), (uint64_t)(v0 + 2331));
  uint64_t v4 = sub_47588();
  sub_131CE4(v4);
  v0[3220] = sub_1AAE20();
  sub_1AB120();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2346));
  sub_12E41C(v9, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  sub_5B028(v11, &qword_201E20);
  sub_FD4A0();
  v5();
  sub_12E41C(v12, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_12E41C(v13, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v14, &qword_201E28);
  sub_5B028(v15, &qword_2032A0);
  swift_release();
  sub_130580();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131CA4();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_121B04()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  sub_A340();
  uint64_t v3 = sub_470B8();
  v1(v3);
  uint64_t v4 = (void *)sub_1AC7F0();
  os_log_type_t v5 = sub_1ACF50();
  sub_47A70(v5);
  uint64_t v6 = (void (*)(void))v0[3515];
  uint64_t v7 = v0[3361];
  sub_131CD8();
  if (v8)
  {
    uint64_t v9 = (_WORD *)sub_49780();
    sub_4753C(v9);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v10, v11, "Couldn't create logMedConfirmationRejected_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  sub_E530();
  v6();
  uint64_t v12 = (void *)v0[3518];
  sub_1318D8();
  sub_75790(v0 + 2116, v2);
  sub_9BA4();
  sub_132E68();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_9BF0((uint64_t)v2);
  sub_5B028(v7, &qword_201E20);
  sub_47814();
  v13();
  sub_12E41C(v16, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_12E41C(v17, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v18, &qword_201E28);
  sub_5B028(v19, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_1221EC()
{
  sub_47634();
  sub_470A0();
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v2;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 28280) = v7;
  *(void *)(v8 + 28288) = v1;
  swift_task_dealloc();
  sub_47C98();
  uint64_t v9 = *(void *)(v0 + 26528);
  if (v1)
  {
    swift_release();
    swift_errorRelease();
    sub_5B028(v9, &qword_201E28);
  }
  else
  {
    sub_5B028(v9, &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_12233C()
{
  sub_471BC();
  sub_4712C();
  id v1 = [*(id *)(v0 + 28280) catId];
  sub_1ACDD0();

  sub_47BF8();
  sub_1AB380();
  sub_1AB3C0();
  uint64_t v2 = sub_13226C();
  sub_E3FC(v2, v3);
  uint64_t v4 = sub_131848();
  v5(v4);
  if (sub_131B38())
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 19608);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 19648);
    char v6 = 4;
  }
  else
  {
    sub_131F7C();
    uint64_t v7 = sub_131784();
    v8(v7);
    sub_131A58((void *)(v0 + 19168));
    sub_1319A0();
    if (v9) {
      char v6 = 0;
    }
    else {
      char v6 = 4;
    }
  }
  uint64_t v10 = *(void *)(v0 + 26128);
  sub_19DAB4(0, 0, v6);
  uint64_t v11 = sub_F1384();
  sub_CCD04(v11, v12, v13);
  uint64_t v14 = sub_1AAB10();
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v10, 1, v14);
  uint64_t v16 = *(void *)(v0 + 26520);
  uint64_t v17 = *(void *)(v0 + 26384);
  if (v15 == 1)
  {
    sub_5B028(*(void *)(v0 + 26128), &qword_201E20);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v16, 1, 1, v17);
    goto LABEL_10;
  }
  sub_73240(*(void *)(v0 + 26520));
  sub_E558();
  v18();
  sub_A208(v16, 1, v17);
  if (v9)
  {
LABEL_10:
    uint64_t v19 = *(void (**)(uint64_t))(v0 + 27384);
    uint64_t v20 = *(void *)(v0 + 27376);
    sub_5B028(*(void *)(v0 + 26520), &qword_201E28);
    sub_A340();
    uint64_t v21 = sub_1324AC();
    v19(v21);
    uint64_t v22 = sub_1AC7F0();
    os_log_type_t v23 = sub_1ACF60();
    if (sub_29300(v23))
    {
      uint64_t v24 = *(void (**)(void))(v0 + 28120);
      uint64_t v25 = (_WORD *)sub_131970();
      sub_4753C(v25);
      sub_1323B0();
      swift_bridgeObjectRelease();
      sub_131958(&def_342E4, v22, (os_log_type_t)v20, "Couldn't create actionAceCommandString while trying to create logMedConfirmationRejected_Dialog, returning GenericErrorFlow");
      sub_497D4();

      sub_E530();
      v24();
    }
    else
    {
      uint64_t v26 = *(void (**)(uint64_t))(v0 + 28120);
      sub_131DDC();
      swift_bridgeObjectRelease();
      uint64_t v27 = sub_13198C();
      v26(v27);
    }
    char v28 = *(void **)(v0 + 28280);
    uint64_t v29 = *(void **)(v0 + 28144);
    sub_13281C();
    uint64_t v58 = *(void *)(v0 + 26328);
    uint64_t v59 = v30;
    uint64_t v56 = v31;
    uint64_t v57 = *(void *)(v0 + 26144);
    sub_132D64();
    sub_75790((void *)(v0 + 15648), (void *)(v0 + 15488));
    sub_9BA4();
    sub_1AB120();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_9BF0(v0 + 15488);
    sub_CD508();
    sub_5B028(v57, &qword_201E20);
    uint64_t v32 = sub_132404();
    v33(v32);
    sub_12E41C(v58, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
    sub_12E41C(v59, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v60, &qword_201E28);
    sub_5B028(v61, &qword_2032A0);
    sub_130124();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_131A10();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v35 = *(void **)(v0 + 28144);
  (*(void (**)(void, void, void))(*(void *)(v0 + 26392) + 32))(*(void *)(v0 + 26400), *(void *)(v0 + 26520), *(void *)(v0 + 26384));
  uint64_t v36 = &_swiftEmptyArrayStorage;
  *(void *)(v0 + 25752) = &_swiftEmptyArrayStorage;
  id v37 = (void *)sub_12E014(v35, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
  if (!v37) {
    id v37 = &_swiftEmptyArrayStorage;
  }
  uint64_t v62 = (uint64_t)v37;
  uint64_t v38 = sub_106E78(v37);
  if (!v38)
  {
LABEL_26:
    *(void *)(v0 + 28296) = v36;
    uint64_t v49 = *(void **)(v0 + 28144);
    uint64_t v50 = *(void *)(v0 + 25976);
    swift_bridgeObjectRelease();
    sub_2E38((void *)(v50 + 144), *(void *)(v50 + 168));
    swift_retain();
    id v51 = v49;
    swift_bridgeObjectRetain();
    uint64_t v52 = (void *)swift_task_alloc();
    *(void *)(v0 + 28304) = v52;
    *uint64_t v52 = v0;
    v52[1] = sub_122E60;
    sub_47F14();
    sub_47294();
    __asm { BR              X8 }
  }
  uint64_t v39 = v38;
  uint64_t result = type metadata accessor for WellnessMedicationDialogObject(0);
  if (v39 >= 1)
  {
    uint64_t v41 = *(void *)(v0 + 26392);
    BOOL v42 = sub_1AA5D0(v62);
    uint64_t v43 = 0;
    uint64_t v44 = (void (**)(uint64_t, void, void))(v41 + 16);
    do
    {
      if (v42) {
        id v45 = *(id *)(v62 + 8 * v43 + 32);
      }
      else {
        id v45 = (id)sub_1AD0A0();
      }
      uint64_t v46 = v45;
      uint64_t v47 = *(void *)(v0 + 26416);
      ++v43;
      (*v44)(v47, *(void *)(v0 + 26400), *(void *)(v0 + 26384));
      id v48 = v46;
      sub_15C928(v48, v47);
      sub_106EDC();
    }
    while (v39 != v43);
    uint64_t v36 = *(void **)(v0 + 25752);
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t sub_122E60()
{
  sub_47D74();
  sub_E588();
  uint64_t v3 = v2;
  sub_1318C0();
  uint64_t v5 = v4;
  sub_E53C();
  *char v6 = v5;
  *char v6 = *v1;
  swift_task_dealloc();
  sub_6FD18();
  if (v0)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v5 + 28312) = v3;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_122F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  uint64_t v13 = *(void **)(v12 + 28312);
  uint64_t v26 = *(void **)(v12 + 28280);
  uint64_t v39 = *(void **)(v12 + 28144);
  unsigned __int8 v32 = *(unsigned char *)(v12 + 28525);
  uint64_t v37 = *(void *)(v12 + 27592);
  uint64_t v34 = *(void *)(v12 + 27576);
  uint64_t v35 = *(void *)(v12 + 27584);
  uint64_t v33 = *(void *)(v12 + 27568);
  uint64_t v31 = *(void *)(v12 + 27560);
  uint64_t v29 = *(void **)(v12 + 28128);
  uint64_t v30 = *(void *)(v12 + 27552);
  uint64_t v27 = *(void *)(v12 + 27536);
  uint64_t v28 = *(void *)(v12 + 27544);
  uint64_t v42 = *(void *)(v12 + 26688);
  uint64_t v43 = *(void *)(v12 + 26728);
  uint64_t v40 = *(void *)(v12 + 26328);
  uint64_t v41 = *(void *)(v12 + 26432);
  uint64_t v38 = *(void *)(v12 + 26144);
  uint64_t v36 = *(void *)(v12 + 26136);
  sub_E3FC(*(void *)(v12 + 25976) + 64, v12 + 18968);
  sub_2E38((void *)(v12 + 18968), *(void *)(v12 + 18992));
  id v14 = v13;
  sub_1AAF40();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v12 + 18968);
  sub_1AB130();

  swift_release();
  sub_4610C(v27, v28, v30, v31, v33, v34, v35, v37, v32);

  sub_47814();
  v15();
  sub_5B028(v36, &qword_201E20);
  sub_5B028(v38, &qword_201E20);
  sub_CD2F0();
  v16();
  sub_12E41C(v40, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_12E41C(v41, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v42, &qword_201E28);
  sub_5B028(v43, &qword_2032A0);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_46EC4();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
}

void sub_123B28()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  sub_A340();
  uint64_t v2 = sub_470B8();
  v1(v2);
  uint64_t v3 = (void *)sub_1AC7F0();
  os_log_type_t v4 = sub_1ACF60();
  sub_47A70(v4);
  uint64_t v5 = *(void (**)(void))(v0 + 28120);
  sub_131CD8();
  if (v6)
  {
    uint64_t v7 = (_WORD *)sub_49780();
    sub_4753C(v7);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v8, v9, "Couldn't create logspecificmedrejectedconfirmationresultset pattern, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  sub_E530();
  v5();
  unsigned __int8 v32 = *(void **)(v0 + 28144);
  unsigned __int8 v25 = *(unsigned char *)(v0 + 28525);
  uint64_t v10 = *(void **)(v0 + 28128);
  uint64_t v28 = *(void *)(v0 + 27584);
  uint64_t v29 = *(void *)(v0 + 27592);
  uint64_t v26 = *(void *)(v0 + 27568);
  uint64_t v27 = *(void *)(v0 + 27576);
  uint64_t v23 = *(void **)(v0 + 28280);
  uint64_t v24 = *(void *)(v0 + 27560);
  uint64_t v11 = *(void *)(v0 + 27552);
  sub_1323D0();
  uint64_t v33 = *(void *)(v0 + 26328);
  uint64_t v34 = v12;
  uint64_t v31 = *(void *)(v0 + 26144);
  uint64_t v13 = sub_132E54(*(void *)(v0 + 26136));
  sub_9B48(v13, v0 + 16288);
  id v14 = (void *)sub_132ED8();
  sub_75790(v14, v15);
  sub_9BA4();
  sub_132D58();
  sub_1AB120();

  uint64_t v16 = sub_1324AC();
  sub_4610C(v16, v17, v11, v24, v26, v27, v28, v29, v25);

  sub_9BF0(v0 + 16128);
  sub_F139C();
  v18();
  sub_5B028(v30, &qword_201E20);
  sub_5B028(v31, &qword_201E20);
  uint64_t v19 = sub_132404();
  v20(v19);
  sub_12E41C(v33, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_12E41C(v34, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v35, &qword_201E28);
  sub_5B028(v36, &qword_2032A0);
  swift_bridgeObjectRelease();
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_1242D4()
{
  sub_132494();
  sub_7F418();
  uint64_t v3 = v2;
  os_log_type_t v4 = (void *)*v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    sub_13276C();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1327F8();
    swift_bridgeObjectRelease();
    sub_131FD0();
    swift_bridgeObjectRelease();
    sub_131E6C();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_CD4F0();
    sub_CD508();
  }
  else
  {
    uint64_t v6 = v4[3312];
    uint64_t v7 = v4[3311];
    v4[3542] = v3;
    swift_release();
    sub_5B028(v7, &qword_201E28);
    sub_5B028(v6, &qword_201E28);
  }
  sub_A4F0();
  sub_132444();
  return _swift_task_switch(v8, v9, v10);
}

#error "124718: call analysis failed (funcsize=242)"

uint64_t sub_124888()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  void *v2 = v1;
  uint64_t v3 = v1 + 19968;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

void sub_124978()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v1 = *(void **)(v0 + 28144);
  uint64_t v8 = *(void **)(v0 + 28128);
  uint64_t v6 = *(void **)(v0 + 28336);
  uint64_t v13 = *(void *)(v0 + 26688);
  uint64_t v14 = *(void *)(v0 + 26728);
  uint64_t v11 = *(void *)(v0 + 26328);
  uint64_t v12 = *(void *)(v0 + 26432);
  uint64_t v10 = *(void *)(v0 + 26512);
  uint64_t v9 = *(void *)(v0 + 26144);
  uint64_t v7 = *(void *)(v0 + 26064);
  sub_1326B4(v0 + 20008);
  sub_E3FC(v0 + 20048, v0 + 19888);
  uint64_t v2 = sub_47588();
  sub_24D80((long long *)(v0 + 19888), v2 + 16);
  sub_9AF04();
  *(void *)(v0 + 25736) = sub_1AAE20();
  sub_132ED8();
  sub_1AB120();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 20048);
  sub_12E41C(v7, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  sub_5B028(v10, &qword_201E28);
  sub_5B028(v9, &qword_201E20);
  sub_CD2F0();
  v3();
  sub_12E41C(v11, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_12E41C(v12, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v13, &qword_201E28);
  sub_5B028(v14, &qword_2032A0);
  swift_release();
  sub_130580();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131CA4();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_1250B4()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  sub_A340();
  uint64_t v2 = sub_470B8();
  v1(v2);
  uint64_t v3 = (void *)sub_1AC7F0();
  os_log_type_t v4 = sub_1ACF50();
  sub_47A70(v4);
  uint64_t v5 = (void (*)(void))v0[3515];
  sub_131CD8();
  if (v6)
  {
    uint64_t v7 = (_WORD *)sub_49780();
    sub_4753C(v7);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v8, v9, "Couldn't create specificMedicationSuccess_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  sub_E530();
  v5();
  uint64_t v10 = (void *)v0[3518];
  uint64_t v11 = (void *)v0[3516];
  sub_132858();
  uint64_t v18 = v0[3291];
  uint64_t v19 = v0[3304];
  uint64_t v17 = v0[3314];
  uint64_t v12 = v0[3268];
  sub_132D64();
  sub_75790(v0 + 1636, v0 + 1616);
  sub_9BA4();
  sub_1AB120();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_9BF0((uint64_t)(v0 + 1616));
  sub_5B028(v17, &qword_201E28);
  sub_5B028(v12, &qword_201E20);
  uint64_t v13 = sub_132404();
  v14(v13);
  sub_12E41C(v18, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_12E41C(v19, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v20, &qword_201E28);
  sub_5B028(v21, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}