uint64_t sub_1257E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  sub_E588();
  sub_1318C0();
  v3 = v2;
  sub_E53C();
  *v4 = v3;
  v5 = *v1;
  sub_E53C();
  *v6 = v5;
  *(void *)(v3 + 28376) = v7;
  swift_task_dealloc();
  sub_6FD18();
  if (v0)
  {
    sub_132F3C();
    swift_bridgeObjectRelease();
    sub_1327EC();
    swift_bridgeObjectRelease();
    sub_132B50();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  else
  {
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_125930()
{
  sub_132D84();
  id v2 = [v1 catId];
  sub_1ACDD0();
  sub_13292C();
  sub_1328E4();
  sub_132DD0();
  uint64_t v3 = sub_131784();
  v4(v3);
  if (sub_131B00())
  {
    uint64_t v5 = sub_131CB4();
  }
  else
  {
    sub_E3FC(*(void *)(v0 + 25976) + 24, v0 + 21008);
    sub_2E38((void *)(v0 + 21008), *(void *)(v0 + 21032));
    sub_471EC();
    v8();
    char v9 = sub_131B70((void *)(v0 + 20968));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 20968);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 21008);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 21048);
    uint64_t v5 = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 21128);
    if (v9) {
      char v7 = 4;
    }
    else {
      char v7 = 0;
    }
  }
  sub_131C44(v5, v6, v7);
  sub_132AC0();
  uint64_t v10 = sub_131848();
  v11(v10);
  v12 = *(void **)(v0 + 20912);
  v13 = *(void **)(v0 + 20920);
  if (sub_131B38())
  {
    sub_131EA8();
  }
  else
  {
    sub_13296C();
    sub_2E38(v13, *(void *)(v0 + 20752));
    uint64_t v14 = sub_131830();
    v15(v14);
    sub_131A58(v12);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v12);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v13);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 20888);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 20928);
  }
  char v16 = *(unsigned char *)(v0 + 28524);
  v17 = *(void **)(v0 + 25976);
  sub_1AC2B0();
  sub_132BC0();
  getMedStatus(from:)();
  swift_release();
  sub_1AABC0();
  if (v16)
  {
    unint64_t v18 = sub_12E014(*(void **)(v0 + 28144), (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
    if (v18 && (sub_C10E8(v18), sub_132690(), v17))
    {
      uint64_t v19 = sub_1AA5DC(v17);
      unint64_t v91 = v20;
      uint64_t v93 = v19;
    }
    else
    {
      unint64_t v91 = 0;
      uint64_t v93 = 0;
    }
  }
  else
  {
    unint64_t v91 = *(void *)(v0 + 27424);
    uint64_t v93 = *(void *)(v0 + 27432);
  }
  sub_132E14(20648);
  sub_132E08(20568);
  sub_1321A4(*(void *)(v0 + 28376));
  uint64_t v21 = *(void *)(v0 + 26184);
  sub_1326F8();
  unint64_t v26 = v25 & 0xFFFF00000000FFFFLL | 0x646567670000;
  if (v22) {
    unint64_t v27 = v26;
  }
  else {
    unint64_t v27 = v23;
  }
  unint64_t v28 = 0xE600000000000000;
  uint64_t v95 = v27;
  uint64_t v96 = *(void *)(v0 + 26008);
  uint64_t v29 = *(void *)(v0 + 25984);
  if (!v22) {
    unint64_t v28 = v24;
  }
  uint64_t v94 = v28;
  sub_132AD8();
  uint64_t v97 = *(void *)(v0 + 25976);
  if (v31) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0xE500000000000000;
  }
  uint64_t v33 = sub_CCD04(v30, v21, &qword_201E20);
  HKActivityRingUIViewRepresentable.updateUIView(_:context:)(v33);
  sub_18608C();
  uint64_t v34 = sub_13226C();
  sub_12E8E8(v34, v35, v36);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v29, 0, 1, (uint64_t)v13);
  char v37 = sub_131F98();
  uint64_t v46 = sub_1324B8(v37, v38, v39, v40, v41, v42, v43, v44, 0, 0, v21, v45, v73, v75, SHIBYTE(v75), v77, v79, v81, v83,
          v85,
          v32,
          v29,
          v89,
          v91);
  sub_132EB8(v46, v47, v48, v49, v50, v51, v52, v53, v69, v70, v71, v72, v74, v76, v78, v80, v82, v84, v86,
    v87,
    v88,
    v90,
    v92,
    v93,
    v94,
    v95,
    v96,
    v97);
  *(void *)(v0 + 20592) = sub_1320B4();
  *(void *)(v0 + 20600) = sub_12ED48((unint64_t *)&qword_202590, 255, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  v54 = sub_B5B0(v98);
  sub_132F18((uint64_t)v54, v55, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  sub_1324FC();
  sub_2694(&qword_202588);
  uint64_t v56 = sub_47CA4();
  uint64_t v57 = sub_731A8(v56, 1);
  void *v58 = v99;
  sub_72328();
  *(void *)(v0 + 28384) = v57;
  id v59 = v99;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 28392) = v60;
  void *v60 = v61;
  v60[1] = sub_125DEC;
  uint64_t v62 = sub_131C24();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v62, v63, v64, v65, v66, v67);
}

uint64_t sub_125DEC()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *id v2 = v1;
  uint64_t v3 = v1 + 20568;
  sub_470E4();
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

void sub_125EDC()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v10 = (void *)v0[3547];
  uint64_t v1 = (void *)v0[3516];
  uint64_t v8 = (void *)v0[3518];
  sub_1321E4();
  uint64_t v13 = v0[3280];
  uint64_t v14 = v2;
  uint64_t v3 = v0[3277];
  uint64_t v11 = v0[3265];
  uint64_t v12 = v0[3276];
  uint64_t v9 = v0[3257];
  sub_1326B4(v4);
  sub_1328CC();
  uint64_t v5 = sub_47588();
  sub_131CE4(v5);
  v0[3225] = sub_132CD8();
  sub_1328A0();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2581));
  sub_12E41C(v9, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  sub_5B028(v11, &qword_201E20);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v13, v12);
  sub_12E41C(v14, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v15, &qword_201E28);
  sub_5B028(v16, &qword_2032A0);
  swift_release();
  sub_130580();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131CA4();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_1265B4()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  sub_A340();
  uint64_t v2 = sub_470B8();
  v1(v2);
  uint64_t v3 = (void *)sub_1AC7F0();
  os_log_type_t v4 = sub_1ACF50();
  sub_47A70(v4);
  uint64_t v5 = (void (*)(void))v0[3515];
  sub_131CD8();
  if (v6)
  {
    uint64_t v7 = (_WORD *)sub_49780();
    sub_4753C(v7);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v8, v9, "Couldn't create specificMedicationAllMedsLoggedAlready_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  sub_E530();
  v5();
  uint64_t v10 = (void *)v0[3518];
  uint64_t v11 = (void *)v0[3516];
  sub_1323D0();
  uint64_t v16 = v12;
  sub_9B48(v0[3247] + 64, (uint64_t)(v0 + 1056));
  sub_75790(v0 + 1056, v0 + 1036);
  sub_9BA4();
  sub_1AB120();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_9BF0((uint64_t)(v0 + 1036));
  sub_F139C();
  v13();
  sub_12E41C(v16, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v17, &qword_201E28);
  sub_5B028(v18, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_126CAC()
{
  sub_47634();
  sub_46F18();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v7 + 28416) = v6;
  *(void *)(v7 + 28424) = v0;
  swift_task_dealloc();
  sub_47BA8();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  sub_CD508();
  sub_CD4F0();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_126E04()
{
  sub_471BC();
  sub_4712C();
  sub_132640(21448);
  uint64_t v2 = (void *)v0[3552];
  uint64_t v3 = sub_132424();
  sub_47E6C(v3, (uint64_t)HKActivityRingUIViewRepresentable.updateUIView(_:context:));
  sub_1AB3C0();
  id v4 = [v2 catId];
  sub_1ACDD0();
  sub_1322FC();
  sub_1324E4();
  sub_1328FC();
  sub_132BA8();
  sub_E3FC(v1 + 296, (uint64_t)(v0 + 2671));
  v0[3554] = *(void *)(v1 + 336);
  v0[3555] = *(void *)(v1 + 344);
  swift_retain();
  swift_retain();
  swift_task_alloc();
  sub_250E0();
  v0[3556] = v5;
  *uint64_t v5 = v6;
  v5[1] = sub_126F58;
  sub_131F3C();
  sub_47294();
  return sub_C1180();
}

uint64_t sub_126F58()
{
  sub_47D74();
  sub_E588();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 21368;
  uint64_t v4 = v1 + 21408;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  swift_release();
  sub_132EE4(v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v4);
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v7, v8, v9);
}

void sub_127084()
{
  sub_46EFC();
  sub_4712C();
  if (v0[2684])
  {
    uint64_t v2 = (void *)v0[3516];
    uint64_t v25 = (void *)v0[3552];
    sub_13237C();
    uint64_t v29 = v0[3279];
    uint64_t v31 = v3;
    uint64_t v4 = v0[3277];
    unint64_t v26 = v5;
    uint64_t v27 = v0[3276];
    sub_24D80(v6, (uint64_t)(v0 + 2746));
    sub_1AAE40();
    sub_E3FC((uint64_t)(v0 + 2746), (uint64_t)(v0 + 2656));
    uint64_t v7 = sub_47588();
    sub_131E78(v7);
    v0[3228] = sub_1AAE20();
    sub_132A04();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2746));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v29, v27);
    sub_12E41C(v31, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028((uint64_t)v33, &qword_201E28);
    sub_5B028((uint64_t)v34, &qword_2032A0);
    swift_release();
  }
  else
  {
    sub_13264C(7328);
    sub_132990(7488);
    sub_13246C();
    sub_5B028(v8, &qword_202570);
    sub_A340();
    uint64_t v9 = sub_47A34();
    v1(v9);
    uint64_t v10 = (void *)sub_1AC7F0();
    os_log_type_t v11 = sub_1ACF50();
    if (sub_47A70(v11))
    {
      uint64_t v12 = (void (*)(void))v0[3515];
      uint64_t v13 = (_WORD *)sub_1321CC();
      sub_131BC0(v13);
      sub_131D30();
      swift_bridgeObjectRelease();
      sub_131C84(&def_342E4, v14, v15, "Couldn't create output, returning GenericErrorFlow");
      sub_497D4();

      sub_E530();
      v12();
    }
    else
    {
      uint64_t v16 = (void (*)(uint64_t))v0[3515];
      swift_bridgeObjectRelease();

      uint64_t v17 = sub_132084();
      v16(v17);
    }
    uint64_t v18 = (void *)v0[3552];
    uint64_t v19 = (void *)v0[3518];
    unint64_t v20 = (void *)v0[3516];
    uint64_t v30 = v0[3336];
    uint64_t v32 = v0[3341];
    uint64_t v28 = v0[3304];
    uint64_t v21 = sub_132E54(v0[3276]);
    sub_9B48(v21, (uint64_t)v33);
    sub_75790(v33, v34);
    sub_9BA4();
    sub_1AB120();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_9BF0((uint64_t)v34);
    sub_FD4A0();
    v22();
    sub_12E41C(v28, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v30, &qword_201E28);
    sub_5B028(v32, &qword_2032A0);
  }
  sub_1309E4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1320A4();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_127910()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  sub_A340();
  uint64_t v4 = sub_470B8();
  v1(v4);
  uint64_t v5 = (void *)sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  sub_47A70(v6);
  uint64_t v7 = (void (*)(void))v0[3515];
  sub_131CD8();
  if (v8)
  {
    uint64_t v9 = (_WORD *)sub_49780();
    sub_4753C(v9);
    uint64_t v3 = &_swiftEmptyArrayStorage;
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v10, v11, "Couldn't create specificMedicationLogFailed_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  sub_E530();
  v7();
  uint64_t v12 = (void *)v0[3518];
  uint64_t v13 = (void *)v0[3516];
  uint64_t v17 = v0[3341];
  uint64_t v14 = sub_132164();
  sub_9B48(v14, (uint64_t)(v0 + 776));
  sub_75790(v0 + 776, v0 + 756);
  sub_9BA4();
  sub_1325E4();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_9BF0((uint64_t)(v0 + 756));
  sub_12E41C((uint64_t)v3, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v2, &qword_201E28);
  sub_5B028(v17, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_127FD8()
{
  sub_47634();
  sub_470A0();
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v2;
  sub_E53C();
  *os_log_type_t v6 = v5;
  *(void *)(v8 + 28472) = v7;
  *(void *)(v8 + 28480) = v1;
  swift_task_dealloc();
  sub_47C98();
  uint64_t v9 = *(void *)(v0 + 26464);
  if (v1)
  {
    swift_release();
    swift_errorRelease();
    sub_5B028(v9, &qword_201E28);
  }
  else
  {
    sub_5B028(v9, &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_128128()
{
  sub_471BC();
  sub_4712C();
  sub_132640(22728);
  uint64_t v2 = (void *)v0[3559];
  uint64_t v3 = sub_132424();
  sub_47E6C(v3, (uint64_t)HKActivityRingUIViewRepresentable.updateUIView(_:context:));
  sub_1AB3C0();
  id v4 = [v2 catId];
  sub_1ACDD0();
  sub_1322FC();
  sub_1324E4();
  sub_1328FC();
  sub_132BA8();
  sub_E3FC(v1 + 296, (uint64_t)(v0 + 2826));
  v0[3561] = *(void *)(v1 + 336);
  v0[3562] = *(void *)(v1 + 344);
  swift_retain();
  swift_retain();
  swift_task_alloc();
  sub_250E0();
  v0[3563] = v5;
  *uint64_t v5 = v6;
  v5[1] = sub_128278;
  sub_131F3C();
  sub_47294();
  return sub_C1180();
}

uint64_t sub_128278()
{
  sub_47D74();
  sub_E588();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 22608;
  uint64_t v4 = v1 + 22648;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  swift_release();
  sub_132EE4(v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v4);
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v7, v8, v9);
}

void sub_1283A0()
{
  sub_46EFC();
  sub_4712C();
  if (v0[2844])
  {
    uint64_t v2 = (void *)v0[3559];
    sub_132C8C();
    uint64_t v23 = v3;
    sub_24D80(v4, (uint64_t)(v0 + 2846));
    sub_1AAE40();
    sub_E3FC((uint64_t)(v0 + 2846), (uint64_t)(v0 + 2811));
    uint64_t v5 = sub_47588();
    sub_131E78(v5);
    v0[3238] = sub_1327B0();
    sub_132794();

    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2846));
    sub_47814();
    v6();
    sub_12E41C(v23, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v24, &qword_201E28);
    sub_5B028(v26, &qword_2032A0);
    swift_release();
  }
  else
  {
    uint64_t v27 = v0 + 396;
    sub_132480();
    sub_5B028(v7, &qword_202570);
    sub_A340();
    uint64_t v8 = sub_47A34();
    v1(v8);
    uint64_t v9 = (void *)sub_1AC7F0();
    os_log_type_t v10 = sub_1ACF50();
    if (sub_47A70(v10))
    {
      uint64_t v11 = (void (*)(void))v0[3426];
      uint64_t v12 = (_WORD *)sub_1321CC();
      sub_131BC0(v12);
      sub_131D30();
      swift_bridgeObjectRelease();
      sub_131C84(&def_342E4, v13, v14, "Couldn't create output, returning GenericErrorFlow");
      sub_497D4();

      sub_E530();
      v11();
    }
    else
    {
      uint64_t v15 = (void (*)(uint64_t))v0[3426];
      swift_bridgeObjectRelease();

      uint64_t v16 = sub_132084();
      v15(v16);
    }
    uint64_t v17 = (void *)v0[3559];
    uint64_t v25 = v0[3341];
    uint64_t v18 = v0[3336];
    uint64_t v19 = v0[3304];
    sub_131FF4();
    sub_75790(v0 + 416, v27);
    sub_9BA4();
    sub_1AB120();

    sub_9BF0((uint64_t)v27);
    sub_47814();
    v20();
    sub_12E41C(v19, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_5B028(v18, &qword_201E28);
    sub_5B028(v25, &qword_2032A0);
  }
  sub_1309E4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1320A4();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_128BAC()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  uint64_t v3 = v0[3342];
  sub_A340();
  uint64_t v4 = sub_470B8();
  v2(v4);
  uint64_t v5 = (void *)sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  sub_47A70(v6);
  uint64_t v7 = (void (*)(void))v0[3426];
  sub_131CD8();
  if (v8)
  {
    uint64_t v9 = (_WORD *)sub_49780();
    sub_4753C(v9);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v10, v11, "Couldn't create logMedConfirmationRejected_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  sub_E530();
  v7();
  sub_131F10();
  sub_75790(v0 + 256, v0 + 236);
  sub_9BA4();
  sub_132B5C();
  sub_9BF0((uint64_t)(v0 + 236));
  sub_12E41C((uint64_t)v2, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v1, &qword_201E28);
  sub_5B028(v3, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

void sub_129234()
{
  sub_46EFC();
  sub_4712C();
  sub_13180C();
  sub_A340();
  uint64_t v3 = sub_470B8();
  v1(v3);
  uint64_t v4 = (void *)sub_1AC7F0();
  os_log_type_t v5 = sub_1ACF60();
  sub_47A70(v5);
  os_log_type_t v6 = (void (*)(void))v0[3515];
  uint64_t v7 = v0[3358];
  sub_131CD8();
  if (v8)
  {
    uint64_t v9 = (_WORD *)sub_49780();
    sub_4753C(v9);
    sub_1317D8();
    swift_bridgeObjectRelease();
    sub_4775C(&def_342E4, v10, v11, "Couldn't create logMedConfirmationRejected_Dialog, returning GenericErrorFlow");
    sub_497D4();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  sub_E530();
  v6();
  uint64_t v12 = (void *)v0[3518];
  sub_1318D8();
  sub_75790(v0 + 1816, v2);
  sub_9BA4();
  sub_132E68();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_9BF0((uint64_t)v2);
  sub_5B028(v7, &qword_201E20);
  sub_47814();
  v13();
  sub_12E41C(v16, (void (*)(void))type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters);
  sub_12E41C(v17, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_5B028(v18, &qword_201E28);
  sub_5B028(v19, &qword_2032A0);
  sub_130124();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_131A10();
  sub_46EC4();
  __asm { BRAA            X1, X16 }
}

id sub_12991C(double a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return [v2 initWithDouble:a1];
}

uint64_t sub_129964(uint64_t a1, void *a2)
{
  return sub_106A74(*(void *)(a1 + 32), (uint64_t)a2);
}

void sub_129994(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = sub_2694(&qword_201E28);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v39 - v8;
  *a2 = getMedStatus(from:)() & 1;
  id v10 = [a1 medCount];
  uint64_t v11 = v10;
  if (v10)
  {
    [v10 doubleValue];
    double v13 = v12;

    BOOL v14 = v13 == 1.0;
  }
  else
  {
    BOOL v14 = 0;
    double v13 = 0.0;
  }
  a2[1] = v14;
  getLocalizedMedName(from:)();
  if (v15)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_1AC1E0();
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v16 = sub_1AC1E0();
    uint64_t v17 = 1;
  }
  BOOL v18 = v11 == 0;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, v17, 1, v16);
  uint64_t v19 = (int *)type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters();
  sub_A76E8((uint64_t)v9, (uint64_t)&a2[v19[6]], &qword_201E28);
  unint64_t v20 = (double *)&a2[v19[7]];
  *unint64_t v20 = v13;
  *((unsigned char *)v20 + 8) = v18;
  a2[v19[8]] = hasDosageEdit(from:)() & 1;
  id v21 = [a1 dosage];
  uint64_t v22 = v21;
  if (v21)
  {
    [v21 doubleValue];
    uint64_t v24 = v23;
  }
  else
  {
    uint64_t v24 = 0;
  }
  uint64_t v25 = &a2[v19[9]];
  *(void *)uint64_t v25 = v24;
  v25[8] = v22 == 0;
  sub_12E078(a1, (SEL *)&selRef_dosageUnit);
  if (v26)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = 1;
  }
  uint64_t v28 = sub_1AC1E0();
  BOOL v29 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, v27, 1, v28);
  sub_A76E8((uint64_t)v7, (uint64_t)&a2[v19[10]], &qword_201E28);
  unint64_t v30 = sub_12E014(a1, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
  if (v30)
  {
    unint64_t v31 = v30;
    if (v30 >> 62) {
      uint64_t v32 = sub_1AD170();
    }
    else {
      uint64_t v32 = *(void *)((char *)&dword_10 + (v30 & 0xFFFFFFFFFFFFFF8));
    }
    BOOL v29 = v32 == 0;
    if (v32
      && ((sub_4AA30(0, (v31 & 0xC000000000000001) == 0, v31), (v31 & 0xC000000000000001) != 0)
        ? (id v33 = (id)sub_1AD0A0())
        : (id v33 = *(id *)(v31 + 32)),
          uint64_t v34 = v33,
          swift_bridgeObjectRelease(),
          sub_12DE34(v34),
          !v35))
    {
      BOOL v29 = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  a2[v19[11]] = v29;
  id v36 = [a1 matchingMeds];
  if (v36)
  {
    char v37 = v36;
    sub_1AC490();
    uint64_t v38 = sub_1ACED0();
    swift_release();
  }
  else
  {
    swift_release();

    uint64_t v38 = 0;
  }
  *(void *)&a2[v19[12]] = v38;
}

BOOL sub_129D2C()
{
  swift_retain();
  uint64_t v0 = getUSOMedNames(from:)();
  swift_release();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRelease();
  return v1 != 0;
}

uint64_t sub_129D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  sub_1AD360();
  if (a2)
  {
    sub_1AD380(1u);
    swift_bridgeObjectRetain();
    sub_1ACE60();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1AD380(0);
  }
  Swift::Int v6 = sub_1AD390();
  uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = a3 + 56;
  if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = ~v7;
  uint64_t v11 = *(void *)(a3 + 48);
  while (1)
  {
    double v12 = (void *)(v11 + 16 * v8);
    uint64_t v13 = v12[1];
    if (v13) {
      break;
    }
    if (!a2) {
      return 1;
    }
LABEL_16:
    unint64_t v8 = (v8 + 1) & v10;
    if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
      return 0;
    }
  }
  if (!a2) {
    goto LABEL_16;
  }
  BOOL v14 = *v12 == a1 && v13 == a2;
  if (!v14 && (sub_1AD2F0() & 1) == 0) {
    goto LABEL_16;
  }
  return 1;
}

uint64_t sub_129EB0()
{
  return sub_1AAEE0();
}

uint64_t sub_129F64()
{
  return sub_1AAEE0();
}

void (*sub_12A018())()
{
  return sub_12ECE4;
}

void (*sub_12A058())()
{
  return sub_12ED34;
}

uint64_t (*sub_12A098())(uint64_t)
{
  return sub_12ED38;
}

uint64_t (*sub_12A0D8())(uint64_t)
{
  return sub_12ED3C;
}

uint64_t sub_12A118(void (*a1)(void), uint64_t (*a2)(uint64_t, void))
{
  uint64_t v5 = sub_1AC250();
  uint64_t v6 = sub_53D4(v5);
  __chkstk_darwin(v6);
  sub_47EB8();
  a1(0);
  sub_48120();
  return a2(v2, 0);
}

uint64_t (*sub_12A198())(uint64_t)
{
  return sub_12ED40;
}

void (*sub_12A1D8())()
{
  return sub_12ED44;
}

uint64_t sub_12A218()
{
  return sub_1ACFC0();
}

uint64_t sub_12A258(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_12A288()
{
  return sub_1ACFC0();
}

uint64_t sub_12A2D0()
{
  return sub_1ACFC0();
}

uint64_t sub_12A310()
{
  return sub_1ACE00();
}

uint64_t sub_12A344(uint64_t a1)
{
  return a1;
}

uint64_t (*sub_12A378())(uint64_t)
{
  return sub_130054;
}

uint64_t (*sub_12A3B8())(uint64_t)
{
  return sub_130058;
}

uint64_t (*sub_12A3F8())(uint64_t)
{
  return sub_13005C;
}

uint64_t sub_12A438()
{
  return sub_1ACFC0();
}

uint64_t sub_12A474(void *a1)
{
  unint64_t v1 = sub_12E014(a1, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
  if (v1)
  {
    if (v1 >> 62) {
      sub_1AD170();
    }
    swift_bridgeObjectRelease();
  }
  sub_2694(&qword_202F50);
  return sub_1ACFC0();
}

uint64_t sub_12A518(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t v7 = sub_2694(&qword_201E10);
  uint64_t v8 = sub_53D4(v7);
  __chkstk_darwin(v8);
  sub_2F014();
  uint64_t v9 = sub_1AC1E0();
  sub_9F5AC();
  uint64_t v55 = v10;
  __chkstk_darwin(v11);
  v54 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_2694(&qword_201E28);
  uint64_t v14 = sub_53D4(v13);
  __chkstk_darwin(v14);
  sub_A314();
  uint64_t v17 = v15 - v16;
  uint64_t v19 = __chkstk_darwin(v18);
  id v21 = (char *)&v52 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v52 - v22;
  unint64_t v24 = *a2;
  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_1AD170();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = *(void *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFFF8));
  }
  uint64_t v26 = (int *)type metadata accessor for WellnessLoggingLogSpecificMedRejectedConfirmationResultSetParameters(0);
  uint64_t v27 = a1 + v26[14];
  *(double *)uint64_t v27 = (double)v25;
  *(unsigned char *)(v27 + 8) = 0;
  unint64_t v28 = sub_12E014(a3, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
  if (!v28) {
    goto LABEL_15;
  }
  unint64_t v29 = v28;
  if (v28 >> 62)
  {
    if (sub_1AD170()) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
  if (!*(void *)((char *)&dword_10 + (v28 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t v33 = 1;
    goto LABEL_16;
  }
LABEL_6:
  uint64_t v53 = a3;
  sub_4AA30(0, (v29 & 0xC000000000000001) == 0, v29);
  if ((v29 & 0xC000000000000001) != 0) {
    id v30 = (id)sub_1AD0A0();
  }
  else {
    id v30 = *(id *)(v29 + 32);
  }
  unint64_t v31 = v30;
  swift_bridgeObjectRelease();
  sub_1AA5DC(v31);
  if (v32)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v33 = 0;
  }
  else
  {
    uint64_t v33 = 1;
  }
  a3 = v53;
LABEL_16:
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, v33, 1, v9);
  sub_9EA0((uint64_t)v23, a1 + v26[12]);
  swift_retain();
  char v34 = getMedStatus(from:)();
  swift_release();
  if ((v34 & 1) == 0) {
    sub_132CC4(0x6B53u);
  }
  sub_1ACE40();
  sub_47F14();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v35, v36, v37, v9);
  sub_9EA0((uint64_t)v21, a1 + v26[15]);
  unint64_t v38 = sub_12E014(a3, (SEL *)&selRef_matchingMeds, (void (*)(void))&type metadata accessor for MatchedMedName);
  if (!v38) {
    goto LABEL_27;
  }
  unint64_t v39 = v38;
  if (!(v38 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v38 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_21;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  if (!sub_1AD170()) {
    goto LABEL_26;
  }
LABEL_21:
  sub_4AA30(0, (v39 & 0xC000000000000001) == 0, v39);
  if ((v39 & 0xC000000000000001) != 0) {
    id v40 = (id)sub_1AD0A0();
  }
  else {
    id v40 = *(id *)(v39 + 32);
  }
  uint64_t v41 = v40;
  swift_bridgeObjectRelease();
  sub_17D4E4(v41);
  if (v42)
  {
    uint64_t v43 = v54;
    sub_1ACE40();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v17, v43, v9);
LABEL_29:
    uint64_t v44 = 0;
    goto LABEL_30;
  }
LABEL_27:
  sub_1AABC0();
  sub_1AABD0();
  uint64_t v44 = 1;
  sub_47F14();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v45, v46, v47, v48);
  sub_C2180(v3);
  uint64_t v50 = v49;
  sub_5B028(v3, &qword_201E10);
  if (v50)
  {
    sub_132F30();
    sub_1ACE40();
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
LABEL_30:
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v17, v44, 1, v9);
  return sub_9EA0(v17, a1 + v26[11]);
}

void (*sub_12A998())()
{
  return sub_130060;
}

void sub_12A9D8()
{
  sub_A638();
  uint64_t v1 = v0;
  uint64_t v97 = sub_1AC800();
  sub_9F5AC();
  uint64_t v96 = v2;
  __chkstk_darwin(v3);
  sub_E594();
  v95.i64[0] = v4;
  sub_A358();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v91 - v7;
  __chkstk_darwin(v6);
  uint64_t v9 = sub_2694(&qword_206C40);
  sub_9F5AC();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_A314();
  uint64_t v15 = v13 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v91 - v17;
  uint64_t v19 = *(void (**)(void))(v11 + 16);
  sub_132D44();
  v19();
  uint64_t v20 = sub_FD704();
  if (v21(v20) != enum case for PromptResult.answered<A>(_:))
  {
    sub_1AC7D0();
    sub_A340();
    sub_E524();
    v47();
    sub_132D44();
    v19();
    uint64_t v48 = sub_1AC7F0();
    os_log_type_t v49 = sub_1ACF60();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)sub_5B2D4();
      uint64_t v94 = sub_E620();
      v101[0] = v94;
      *(_DWORD *)uint64_t v50 = 136315138;
      uint64_t v93 = v50 + 4;
      sub_B56C(&qword_206C48, &qword_206C40);
      uint64_t v51 = sub_1AD2C0();
      uint64_t v99 = sub_4A278(v51, v52, v101);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      uint64_t v53 = *(void (**)(void))(v11 + 8);
      sub_CD2F0();
      v53();
      _os_log_impl(&def_342E4, v48, v49, "processNameDisambiguationResult() received unknown result: %s. Setting flow to .failure state.", v50, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();
    }
    else
    {
      uint64_t v53 = *(void (**)(void))(v11 + 8);
      ((void (*)(uint64_t, uint64_t))v53)(v15, v9);
    }

    sub_E558();
    v54();
    uint64_t v55 = *(void *)(v1 + 224);
    uint64_t v56 = *(void *)(v1 + 232);
    uint64_t v57 = v1 + 224;
    uint64_t v58 = *(void *)(v57 + 16);
    uint64_t v59 = *(void *)(v57 + 24);
    uint64_t v60 = *(void *)(v57 + 32);
    uint64_t v61 = *(void *)(v57 + 40);
    uint64_t v62 = *(void *)(v57 + 48);
    uint64_t v63 = *(void *)(v57 + 56);
    unsigned __int8 v64 = *(unsigned char *)(v57 + 64);
    *(void *)uint64_t v57 = 8;
    *(_OWORD *)(v57 + 8) = 0u;
    *(_OWORD *)(v57 + 24) = 0u;
    *(_OWORD *)(v57 + 40) = 0u;
    *(void *)(v57 + 56) = 0;
    *(unsigned char *)(v57 + 64) = -64;
    sub_4610C(v55, v56, v58, v59, v60, v61, v62, v63, v64);
    uint64_t v65 = sub_FD704();
    ((void (*)(uint64_t))v53)(v65);
    goto LABEL_39;
  }
  uint64_t v94 = (uint64_t)v8;
  uint64_t v22 = sub_FD704();
  v23(v22);
  uint64_t v24 = *(void *)v18;
  uint64_t v25 = *((void *)v18 + 1);
  uint64_t v26 = *((void *)v18 + 2);
  unint64_t v27 = *((void *)v18 + 3);
  double v28 = *((double *)v18 + 4);
  char v29 = v18[40];
  *(void *)v102 = *(void *)v18;
  *(void *)&v102[8] = v25;
  *(void *)&v102[16] = v26;
  unint64_t v103 = v27;
  double v104 = v28;
  char v105 = v29;
  long long v106 = *((_OWORD *)v18 + 3);
  if (v25)
  {
    BOOL v30 = v24 == 0x64656863536C696ELL && v25 == 0xEB00000000656C75;
    if (v30 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      *(void *)v102 = 0;
      *(void *)&v102[8] = 0;
    }
  }
  BOOL v31 = v26 == 0x636964654D6C696ELL && v27 == 0xEF44496E6F697461;
  if (v31 || (sub_1AD2F0() & 1) != 0)
  {
    sub_1AC7D0();
    sub_A340();
    sub_132C78();
    sub_E524();
    v32();
    uint64_t v33 = sub_1AC7F0();
    os_log_type_t v34 = sub_1ACF60();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)sub_292A0();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&def_342E4, v33, v34, "processNameDisambiguationResult() received nilMedicationID. Setting flow to .failure state.", v35, 2u);
      sub_A1F0();
    }

    sub_B7B9C();
    sub_E530();
    v36();
    uint64_t v37 = *(void *)(v0 + 224);
    uint64_t v38 = *(void *)(v0 + 232);
    uint64_t v39 = *(void *)(v0 + 240);
    uint64_t v40 = *(void *)(v0 + 248);
    uint64_t v41 = *(void *)(v0 + 256);
    uint64_t v42 = *(void *)(v0 + 264);
    uint64_t v43 = *(void *)(v0 + 272);
    uint64_t v44 = *(void *)(v0 + 280);
    unsigned __int8 v45 = *(unsigned char *)(v0 + 288);
    *(void *)(v0 + 224) = 8;
    *(_OWORD *)(v0 + 232) = 0u;
    *(_OWORD *)(v0 + 248) = 0u;
    *(_OWORD *)(v0 + 264) = 0u;
    *(void *)(v0 + 280) = 0;
    *(unsigned char *)(v0 + 288) = -64;
    sub_4610C(v37, v38, v39, v40, v41, v42, v43, v44, v45);
    double v28 = v104;
    if (v105) {
      goto LABEL_17;
    }
  }
  else if (v29)
  {
LABEL_17:
    int64x2_t v46 = vdupq_n_s64(1uLL);
LABEL_26:
    *(double *)v46.i64 = v28;
    goto LABEL_27;
  }
  if (v28 != -1.0)
  {
    v46.i64[1] = 0;
    goto LABEL_26;
  }
  double v104 = 0.0;
  char v105 = 1;
  int64x2_t v46 = (int64x2_t)xmmword_1B3890;
LABEL_27:
  uint64_t v66 = *((void *)&v106 + 1);
  uint64_t v67 = v106;
  if (*((void *)&v106 + 1))
  {
    int64x2_t v95 = v46;
    BOOL v68 = (void)v106 == 0x6E657274536C696ELL && *((void *)&v106 + 1) == 0xEF74696E55687467;
    if (v68 || (sub_F1384(), (sub_1AD2F0() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      uint64_t v67 = 0;
      uint64_t v66 = 0;
      long long v106 = 0uLL;
    }
    int64x2_t v46 = v95;
  }
  unint64_t v69 = v103;
  uint64_t v70 = *(void *)(v1 + 224);
  uint64_t v71 = *(void *)(v1 + 232);
  uint64_t v72 = *(void *)(v1 + 240);
  uint64_t v73 = *(void *)(v1 + 248);
  uint64_t v74 = *(void *)(v1 + 256);
  v95.i64[0] = *(void *)(v1 + 264);
  uint64_t v93 = *(uint8_t **)(v1 + 272);
  uint64_t v92 = *(void *)(v1 + 280);
  unsigned __int8 v75 = *(unsigned char *)(v1 + 288);
  *(void *)(v1 + 224) = *(void *)v102;
  *(_OWORD *)(v1 + 232) = *(_OWORD *)&v102[8];
  *(void *)(v1 + 248) = v69;
  *(int64x2_t *)(v1 + 256) = v46;
  *(void *)(v1 + 272) = v67;
  *(void *)(v1 + 280) = v66;
  *(unsigned char *)(v1 + 288) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_4610C(v70, v71, v72, v73, v74, v95.i64[0], (uint64_t)v93, v92, v75);
  sub_1AC7D0();
  sub_A340();
  sub_132C78();
  sub_E524();
  v76();
  uint64_t v77 = sub_1AC7F0();
  os_log_type_t v78 = sub_1ACF50();
  if (os_log_type_enabled(v77, v78))
  {
    uint64_t v79 = swift_slowAlloc();
    v95.i64[0] = swift_slowAlloc();
    uint64_t v100 = v95.i64[0];
    *(_DWORD *)uint64_t v79 = 136315906;
    sub_A340();
    long long v98 = *(_OWORD *)v102;
    sub_2694(&qword_2032A8);
    uint64_t v80 = sub_1ACFC0();
    *(void *)&long long v98 = sub_4A278(v80, v81, &v100);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v79 + 12) = 2080;
    uint64_t v82 = *(void *)&v102[16];
    unint64_t v83 = v103;
    swift_bridgeObjectRetain();
    *(void *)&long long v98 = sub_4A278(v82, v83, &v100);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v79 + 22) = 2080;
    *(double *)&long long v98 = v104;
    BYTE8(v98) = v105;
    sub_2694(qword_201DB8);
    uint64_t v84 = sub_1ACFC0();
    uint64_t v86 = sub_4A278(v84, v85, &v100);
    sub_132BF8(v86);
    swift_bridgeObjectRelease();
    *(_WORD *)(v79 + 32) = 2080;
    long long v98 = v106;
    uint64_t v87 = sub_1ACFC0();
    uint64_t v89 = sub_4A278(v87, v88, &v100);
    sub_132BF8(v89);
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v77, v78, "processNameDisambiguationResult() received selected scheduleID (%s), medicationID (%s), strength (%s), strengthUnit (%s)", (uint8_t *)v79, 0x2Au);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {

    sub_B7B9C();
  }
  sub_4783C();
  v90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_39:
  sub_A56C();
}

void sub_12B344()
{
  sub_A638();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_1AC800();
  sub_9F5AC();
  uint64_t v60 = v5;
  uint64_t v61 = v4;
  __chkstk_darwin(v4);
  sub_A314();
  uint64_t v8 = (void (*)(uint64_t))(v6 - v7);
  __chkstk_darwin(v9);
  uint64_t v59 = (char *)&v57 - v10;
  uint64_t v11 = sub_2694(&qword_206C30);
  sub_9F5AC();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_A314();
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v57 - v16);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v18((char *)&v57 - v16, v3, v11);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v13 + 88))(v17, v11) == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v13 + 96))(v17, v11);
    unint64_t v19 = v17[1];
    uint64_t v20 = v0[31];
    uint64_t v21 = v0[32];
    uint64_t v22 = v0[33];
    uint64_t v57 = (_DWORD *)*v17;
    uint64_t v58 = (_DWORD *)v21;
    uint64_t v24 = v0[34];
    uint64_t v23 = v0[35];
    unsigned __int8 v25 = *((unsigned char *)v1 + 288);
    v1[28] = v57;
    v1[29] = v19;
    *((_OWORD *)v1 + 15) = 0u;
    *((_OWORD *)v1 + 16) = 0u;
    *((_OWORD *)v1 + 17) = 0u;
    *((unsigned char *)v1 + 288) = 64;
    swift_bridgeObjectRetain();
    sub_132A68();
    sub_4610C(v26, v27, v28, v20, (uint64_t)v58, v22, v24, v23, v25);
    sub_1AC7D0();
    sub_A340();
    sub_132F0C();
    sub_E524();
    v29();
    swift_bridgeObjectRetain();
    BOOL v30 = sub_1AC7F0();
    os_log_type_t v31 = sub_1ACF50();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (_DWORD *)swift_slowAlloc();
      v62[0] = sub_E620();
      *uint64_t v32 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_4A278((uint64_t)v57, v19, v62);
      sub_DBB78(v33);
      sub_1ACFE0();
      swift_bridgeObjectRelease_n();
      sub_132C18(&def_342E4, v30, v31, "processScheduleDisambiguationResult() received selected scheduleID (%s)");
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_E558();
    v44();
  }
  else
  {
    sub_1AC7D0();
    sub_A340();
    sub_132E94();
    sub_E524();
    v34();
    uint64_t v35 = sub_47BF8();
    ((void (*)(uint64_t))v18)(v35);
    uint64_t v36 = v8;
    uint64_t v37 = sub_1AC7F0();
    os_log_type_t v38 = sub_1ACF60();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (_DWORD *)sub_5B2D4();
      uint64_t v59 = (char *)sub_E620();
      v62[0] = (uint64_t)v59;
      uint64_t v58 = v39;
      *uint64_t v39 = 136315138;
      uint64_t v57 = v39 + 1;
      sub_B56C(&qword_206C38, &qword_206C30);
      uint64_t v40 = sub_1AD2C0();
      uint64_t v36 = (void (*)(uint64_t))v41;
      uint64_t v42 = sub_4A278(v40, v41, v62);
      sub_DBB78(v42);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      uint64_t v43 = sub_132588();
      v36(v43);
      sub_132C18(&def_342E4, v37, v38, "processScheduleDisambiguationResult() received unknown result: %s. Setting flow to .failure state.");
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();
    }
    else
    {
      uint64_t v45 = sub_132588();
      v8(v45);
    }

    sub_E558();
    v46();
    uint64_t v47 = v1[28];
    uint64_t v48 = v1[29];
    os_log_type_t v49 = v1 + 28;
    uint64_t v50 = v49[2];
    uint64_t v51 = v49[3];
    uint64_t v52 = v49[4];
    uint64_t v53 = v49[5];
    uint64_t v54 = v49[6];
    uint64_t v55 = v49[7];
    unsigned __int8 v56 = *((unsigned char *)v49 + 64);
    *os_log_type_t v49 = 8;
    *(_OWORD *)(v49 + 1) = 0u;
    *(_OWORD *)(v49 + 3) = 0u;
    *(_OWORD *)(v49 + 5) = 0u;
    v49[7] = 0;
    *((unsigned char *)v49 + 64) = -64;
    sub_4610C(v47, v48, v50, v51, v52, v53, v54, v55, v56);
    ((void (*)(uint64_t *, uint64_t))v36)(v17, v11);
  }
  sub_A56C();
}

uint64_t sub_12B810(uint64_t a1)
{
  return sub_12B840(a1, "Received response from PromptForValueFlowAsync for LogConfirmationAsScheduledStrategy: %s", "User rejected confirmation to log as scheduled, switching state", 2);
}

uint64_t sub_12B828(uint64_t a1)
{
  return sub_12B840(a1, "Received response from PromptForValueFlowAsync for LogConfirmationAsNeededStrategy: %s", "User rejected confirmation to log as needed, switching state", 1);
}

uint64_t sub_12B840(uint64_t a1, const char *a2, const char *a3, int a4)
{
  int v110 = a4;
  v109 = a3;
  v113 = a2;
  uint64_t v5 = v4;
  uint64_t v7 = sub_2694(&qword_202F78);
  sub_9F5AC();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_E594();
  v119 = v11;
  sub_A358();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v105 - v13;
  uint64_t v15 = sub_1AC800();
  sub_9F5AC();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  sub_E594();
  uint64_t v114 = v19;
  sub_A358();
  __chkstk_darwin(v20);
  v115 = (char *)&v105 - v21;
  sub_A358();
  __chkstk_darwin(v22);
  v111 = (char *)&v105 - v23;
  sub_A358();
  __chkstk_darwin(v24);
  v112 = (char *)&v105 - v25;
  sub_A358();
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v105 - v27;
  uint64_t v29 = sub_1AC7D0();
  sub_A340();
  uint64_t v116 = v17;
  BOOL v30 = *(void (**)(void, void, void))(v17 + 16);
  uint64_t v121 = v17 + 16;
  uint64_t v122 = v29;
  v120 = v30;
  v30(v28, v29, v15);
  v117 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v118 = a1;
  v117(v14, a1, v7);
  os_log_type_t v31 = sub_1AC7F0();
  os_log_type_t v32 = sub_1ACF50();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = sub_5B2D4();
    uint64_t v107 = v15;
    os_log_type_t v34 = (_DWORD *)v33;
    uint64_t v106 = sub_E620();
    v124[0] = v106;
    uint64_t v108 = v5;
    *os_log_type_t v34 = 136315138;
    char v105 = v34 + 1;
    sub_B56C(&qword_202F80, &qword_202F78);
    uint64_t v35 = sub_1AD2C0();
    uint64_t v123 = sub_4A278(v35, v36, v124);
    uint64_t v5 = v108;
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void (**)(void))(v9 + 8);
    sub_E530();
    v37();
    sub_132C18(&def_342E4, v31, v32, v113);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    uint64_t v37 = *(void (**)(void))(v9 + 8);
    ((void (*)(char *, uint64_t))v37)(v14, v7);
  }

  os_log_type_t v38 = *(void (**)(void))(v116 + 8);
  sub_E530();
  v38();
  uint64_t v39 = v119;
  v117((char *)v119, v118, v7);
  uint64_t v40 = sub_132084();
  if (v41(v40) != enum case for PromptResult.answered<A>(_:))
  {
    sub_E530();
    v37();
    sub_A340();
    sub_E524();
    v69();
    uint64_t v70 = (void *)sub_1AC7F0();
    os_log_type_t v71 = sub_1ACF60();
    if (sub_470C8(v71))
    {
      uint64_t v72 = (_WORD *)sub_292A0();
      sub_1322AC(v72);
      sub_131DBC(&def_342E4, v73, v74, "PromptForValueFlowAsync was unanswered, erroring out");
      sub_A1F0();
    }
    goto LABEL_33;
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 96))(v39, v7);
  unint64_t v42 = *((void *)v39 + 1);
  if (!v42)
  {
LABEL_31:
    sub_A340();
    sub_E524();
    v100();
    uint64_t v70 = (void *)sub_1AC7F0();
    os_log_type_t v101 = sub_1ACF60();
    if (sub_470C8(v101))
    {
      v102 = (_WORD *)sub_292A0();
      sub_1322AC(v102);
      sub_131DBC(&def_342E4, v103, v104, "PromptForValueFlowAsync returned incorrect values, erroring out");
      sub_A1F0();
    }
LABEL_33:

    sub_E530();
    v38();
    uint64_t v59 = sub_132720();
    uint64_t v68 = 8;
LABEL_34:
    *(void *)uint64_t v5 = v68;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(void *)(v5 + 56) = 0;
    *(unsigned char *)(v5 + 64) = -64;
    return sub_4610C(v59, v60, v61, v62, v63, v64, v65, v66, v67);
  }
  uint64_t v43 = *v39;
  if (v43 == 2) {
    goto LABEL_30;
  }
  if (!(v42 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v42 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  uint64_t v99 = sub_1AD170();
  swift_bridgeObjectRelease();
  if (!v99)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
LABEL_9:
  sub_4AA30(0, (v42 & 0xC000000000000001) == 0, v42);
  if ((v42 & 0xC000000000000001) != 0) {
    id v44 = (id)sub_1AD0A0();
  }
  else {
    id v44 = *(id *)(v42 + 32);
  }
  uint64_t v45 = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = sub_12E078(v45, (SEL *)&selRef_medicationID);
  if (!v47)
  {

    goto LABEL_31;
  }
  uint64_t v48 = v47;
  v119 = (unsigned __int8 *)v46;
  uint64_t v49 = v43 & 1;
  sub_A340();
  os_log_type_t v50 = v112;
  sub_E524();
  v51();
  uint64_t v52 = (void *)sub_1AC7F0();
  os_log_type_t v53 = sub_1ACF50();
  if (sub_470C8(v53))
  {
    *(_DWORD *)sub_B7C18() = 67109120;
    LODWORD(v123) = v49;
    sub_1ACFE0();
    sub_132DE8(&def_342E4, v54, v55, "PromptForValueFlowAsync returned: %{BOOL}d");
    sub_A1F0();
  }

  sub_F139C();
  v38();
  if (!v49)
  {
    swift_bridgeObjectRelease();
    sub_A340();
    sub_E524();
    v56();
    uint64_t v57 = sub_1AC7F0();
    os_log_type_t v58 = sub_1ACF60();
    if (sub_470C8(v58))
    {
      *(_WORD *)sub_292A0() = 0;
      sub_13201C(&def_342E4, v57, v50, v109);
      sub_A1F0();
    }

    sub_13226C();
    sub_F139C();
    v38();
    uint64_t v59 = sub_132720();
    uint64_t v68 = 7;
    goto LABEL_34;
  }
  uint64_t v75 = sub_12E078(v45, (SEL *)&selRef_scheduleID);
  uint64_t v77 = v76;
  id v78 = [v45 strength];
  uint64_t v79 = v78;
  uint64_t v80 = v5;
  if (v78)
  {
    [v78 doubleValue];
    uint64_t v82 = v81;
  }
  else
  {
    uint64_t v82 = 0;
  }
  char v83 = v110;
  id v84 = [v45 strengthUnit];
  if (v84)
  {
    unint64_t v85 = v84;
    uint64_t v86 = sub_1ACDD0();
    uint64_t v88 = v87;
  }
  else
  {

    uint64_t v86 = 0;
    uint64_t v88 = 0;
  }
  uint64_t v89 = *(void *)(v80 + 224);
  uint64_t v90 = *(void *)(v80 + 232);
  uint64_t v91 = *(void *)(v80 + 240);
  uint64_t v92 = *(void *)(v80 + 248);
  uint64_t v93 = *(void *)(v80 + 256);
  uint64_t v94 = *(void *)(v80 + 264);
  uint64_t v95 = *(void *)(v80 + 272);
  uint64_t v96 = *(void *)(v80 + 280);
  unsigned __int8 v97 = *(unsigned char *)(v80 + 288);
  *(void *)(v80 + 224) = v75;
  *(void *)(v80 + 232) = v77;
  *(void *)(v80 + 240) = v119;
  *(void *)(v80 + 248) = v48;
  *(void *)(v80 + 256) = v82;
  *(void *)(v80 + 264) = v79 == 0;
  *(void *)(v80 + 272) = v86;
  *(void *)(v80 + 280) = v88;
  *(unsigned char *)(v80 + 288) = v83;
  return sub_4610C(v89, v90, v91, v92, v93, v94, v95, v96, v97);
}

uint64_t sub_12C080(uint64_t a1)
{
  return sub_12B840(a1, "Received response from PromptForValueFlowAsync for LogConfirmationAsNeededStrategy: %s", "User rejected confirmation to update status to skipped, switching state", 3);
}

void sub_12C098()
{
  sub_A638();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = sub_2694(&qword_206C20);
  sub_9F5AC();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_E594();
  v125 = v8;
  sub_A358();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v113 - v10;
  uint64_t v12 = sub_1AC800();
  sub_9F5AC();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_E594();
  uint64_t v121 = v16;
  sub_A358();
  __chkstk_darwin(v17);
  v120 = (char *)&v113 - v18;
  sub_A358();
  __chkstk_darwin(v19);
  uint64_t v116 = (char *)&v113 - v20;
  sub_A358();
  __chkstk_darwin(v21);
  v115 = (char *)&v113 - v22;
  sub_A358();
  __chkstk_darwin(v23);
  v117 = (char *)&v113 - v24;
  sub_A358();
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v113 - v26;
  uint64_t v28 = sub_1AC7D0();
  sub_A340();
  uint64_t v122 = v14;
  uint64_t v29 = *(void (**)(void, void, void))(v14 + 16);
  uint64_t v127 = v14 + 16;
  uint64_t v128 = v28;
  v126 = v29;
  v29(v27, v28, v12);
  uint64_t v123 = *(void (**)(char *, void (*)(void), uint64_t))(v6 + 16);
  v124 = v3;
  v123(v11, v3, v4);
  BOOL v30 = sub_1AC7F0();
  os_log_type_t v31 = sub_1ACF50();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = sub_5B2D4();
    uint64_t v118 = v12;
    uint64_t v33 = (_DWORD *)v32;
    uint64_t v114 = sub_E620();
    v130[0] = v114;
    uint64_t v119 = v1;
    *uint64_t v33 = 136315138;
    v113 = v33 + 1;
    sub_B56C(&qword_206C28, &qword_206C20);
    uint64_t v34 = sub_1AD2C0();
    uint64_t v129 = sub_4A278(v34, v35, v130);
    uint64_t v1 = v119;
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    unint64_t v36 = *(void (**)(void))(v6 + 8);
    sub_E530();
    v36();
    sub_132C18(&def_342E4, v30, v31, "Received response from PromptForValueFlowAsync for LogMedScheduleMixedStatusConfirmationStrategy: %s");
    swift_arrayDestroy();
    sub_A1F0();
    uint64_t v12 = v118;
    sub_A1F0();
  }
  else
  {
    unint64_t v36 = *(void (**)(void))(v6 + 8);
    ((void (*)(char *, uint64_t))v36)(v11, v4);
  }

  uint64_t v37 = *(void (**)(void))(v122 + 8);
  sub_E530();
  v37();
  os_log_type_t v38 = v125;
  v123((char *)v125, v124, v4);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v6 + 88))(v38, v4) != enum case for PromptResult.answered<A>(_:))
  {
    sub_E530();
    v36();
    sub_A340();
    sub_E524();
    v42();
    uint64_t v43 = (void *)sub_1AC7F0();
    os_log_type_t v44 = sub_1ACF60();
    if (sub_470C8(v44))
    {
      uint64_t v45 = (_WORD *)sub_292A0();
      sub_1322AC(v45);
      sub_131DBC(&def_342E4, v46, v47, "PromptForValueFlowAsync was unanswered, erroring out");
      sub_A1F0();
    }

    sub_E530();
    v37();
    goto LABEL_34;
  }
  v124 = v37;
  (*(void (**)(uint64_t *, uint64_t))(v6 + 96))(v38, v4);
  unint64_t v39 = v38[1];
  if (!v39)
  {
LABEL_31:
    sub_A340();
    sub_E524();
    v69();
    uint64_t v70 = (void *)sub_1AC7F0();
    os_log_type_t v71 = sub_1ACF60();
    if (sub_470C8(v71))
    {
      uint64_t v72 = (_WORD *)sub_292A0();
      sub_1322AC(v72);
      sub_131DBC(&def_342E4, v73, v74, "PromptForValueFlowAsync returned incorrect values, erroring out");
      sub_A1F0();
    }

    uint64_t v75 = sub_13226C();
    ((void (*)(uint64_t))v124)(v75);
LABEL_34:
    uint64_t v76 = *(void *)(v1 + 224);
    uint64_t v77 = *(void *)(v1 + 232);
    uint64_t v78 = v1 + 224;
    uint64_t v79 = *(void *)(v78 + 16);
    uint64_t v80 = *(void *)(v78 + 24);
    uint64_t v81 = *(void *)(v78 + 32);
    uint64_t v82 = *(void *)(v78 + 40);
    uint64_t v83 = *(void *)(v78 + 48);
    uint64_t v84 = *(void *)(v78 + 56);
    unsigned __int8 v85 = *(unsigned char *)(v78 + 64);
    *(void *)uint64_t v78 = 8;
    *(_OWORD *)(v78 + 8) = 0u;
    *(_OWORD *)(v78 + 24) = 0u;
    *(_OWORD *)(v78 + 40) = 0u;
    *(void *)(v78 + 56) = 0;
    *(unsigned char *)(v78 + 64) = -64;
    sub_4610C(v76, v77, v79, v80, v81, v82, v83, v84, v85);
LABEL_35:
    sub_A56C();
    return;
  }
  uint64_t v40 = *v38;
  unint64_t v41 = (void (*)(char *, void (*)(void), uint64_t))v38[3];
  if (*v38 == 2)
  {
    sub_12E0D4(v40, v38[1]);
    goto LABEL_31;
  }
  if (!v41)
  {
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  uint64_t v122 = v38[2];
  uint64_t v123 = v41;
  v125 = (uint64_t *)(v40 & 1);
  sub_A340();
  sub_E524();
  v48();
  uint64_t v49 = (void *)sub_1AC7F0();
  os_log_type_t v50 = sub_1ACF50();
  if (sub_470C8(v50))
  {
    *(_DWORD *)sub_B7C18() = 67109120;
    LODWORD(v129) = v125;
    sub_1ACFE0();
    sub_132DE8(&def_342E4, v51, v52, "PromptForValueFlowAsync returned: %{BOOL}d");
    sub_A1F0();
  }

  sub_132F0C();
  uint64_t v121 = v53;
  sub_E558();
  v54();
  if (v39 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v55 = sub_1AD170();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v55 = *(void *)((char *)&dword_10 + (v39 & 0xFFFFFFFFFFFFFF8));
  }
  uint64_t v118 = v12;
  uint64_t v119 = v1;
  if (!v55)
  {
    uint64_t v57 = &_swiftEmptyArrayStorage;
LABEL_37:
    swift_bridgeObjectRelease();
    if (v125)
    {
      sub_A340();
      sub_E524();
      v95();
      uint64_t v96 = (void *)sub_1AC7F0();
      os_log_type_t v97 = sub_1ACF50();
      BOOL v98 = sub_470C8(v97);
      uint64_t v90 = v119;
      uint64_t v99 = v124;
      if (v98)
      {
        *(_WORD *)sub_292A0() = 0;
        sub_131DBC(&def_342E4, v100, v101, "User wanted to overwrite existing statuses, switching state");
        sub_A1F0();
      }

      sub_E530();
      v99();
      swift_retain();
      char v102 = getMedStatus(from:)();
      swift_release();
      uint64_t v94 = 3;
      if (v102) {
        uint64_t v94 = 4;
      }
    }
    else
    {
      sub_A340();
      sub_E524();
      v86();
      uint64_t v87 = (void *)sub_1AC7F0();
      os_log_type_t v88 = sub_1ACF50();
      BOOL v89 = sub_470C8(v88);
      uint64_t v90 = v119;
      uint64_t v91 = v124;
      if (v89)
      {
        *(_WORD *)sub_292A0() = 0;
        sub_131DBC(&def_342E4, v92, v93, "User didn't want to overwrite existing statuses, switching state");
        sub_A1F0();
      }

      sub_E530();
      v91();
      uint64_t v94 = 5;
    }
    uint64_t v103 = *(void *)(v90 + 224);
    uint64_t v104 = *(void *)(v90 + 232);
    uint64_t v105 = *(void *)(v90 + 240);
    uint64_t v106 = *(void *)(v90 + 248);
    uint64_t v107 = *(void *)(v90 + 256);
    uint64_t v108 = *(void *)(v90 + 264);
    uint64_t v109 = *(void *)(v90 + 272);
    uint64_t v110 = *(void *)(v90 + 280);
    unsigned __int8 v111 = *(unsigned char *)(v90 + 288);
    v112 = v123;
    *(void *)(v90 + 224) = v122;
    *(void *)(v90 + 232) = v112;
    *(void *)(v90 + 240) = v57;
    *(void *)(v90 + 248) = v94;
    *(_OWORD *)(v90 + 256) = 0u;
    *(_OWORD *)(v90 + 272) = 0u;
    *(unsigned char *)(v90 + 288) = 64;
    sub_4610C(v103, v104, v105, v106, v107, v108, v109, v110, v111);
    goto LABEL_35;
  }
  if (v55 >= 1)
  {
    uint64_t v56 = 0;
    uint64_t v57 = &_swiftEmptyArrayStorage;
    do
    {
      if ((v39 & 0xC000000000000001) != 0) {
        id v58 = (id)sub_1AD0A0();
      }
      else {
        id v58 = *(id *)(v39 + 8 * v56 + 32);
      }
      uint64_t v59 = v58;
      uint64_t v60 = sub_12E078(v58, (SEL *)&selRef_medicationID);
      if (v61)
      {
        uint64_t v62 = v60;
        uint64_t v63 = v61;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_497E0(0, v57[2] + 1, 1, (uint64_t)v57);
          uint64_t v57 = v67;
        }
        unint64_t v65 = v57[2];
        unint64_t v64 = v57[3];
        if (v65 >= v64 >> 1)
        {
          sub_497E0(v64 > 1, v65 + 1, 1, (uint64_t)v57);
          uint64_t v57 = v68;
        }
        v57[2] = v65 + 1;
        uint64_t v66 = (char *)&v57[2 * v65];
        *((void *)v66 + 4) = v62;
        *((void *)v66 + 5) = v63;
      }
      ++v56;
    }
    while (v55 != v56);
    goto LABEL_37;
  }
  __break(1u);
}

uint64_t sub_12C9AC(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1AC800();
  sub_9F5AC();
  __chkstk_darwin(v4);
  sub_A314();
  os_log_type_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  sub_1ABE30();
  if (sub_1ABE20())
  {
    sub_1ABE00();
    swift_release();
    sub_1AAF60();
    swift_release();
    if (*((void *)&v23 + 1))
    {
      sub_24D80(&v22, (uint64_t)v25);
      sub_1AC7D0();
      sub_A340();
      sub_E524();
      v9();
      uint64_t v10 = sub_1AC7F0();
      os_log_type_t v11 = sub_1ACF50();
      if (sub_A3D0(v11))
      {
        *(_WORD *)sub_292A0() = 0;
        sub_131958(&def_342E4, v10, v7, "SpecificMedLoggingFlow: Registering corrections flow");
        sub_A1F0();
      }

      uint64_t v12 = sub_132E94();
      v13(v12);
      sub_E3FC(v2 + 360, (uint64_t)v21);
      sub_2E38(v21, v21[3]);
      sub_E49D4(a1, (uint64_t *)&v22);
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v21);
      sub_2E38(v25, v25[3]);
      sub_1AAF50();
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v22);
      return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v25);
    }
  }
  else
  {
    uint64_t v24 = 0;
    long long v22 = 0u;
    long long v23 = 0u;
  }
  sub_5B028((uint64_t)&v22, &qword_202F88);
  sub_1AC7D0();
  sub_A340();
  sub_E524();
  v15();
  uint64_t v16 = sub_1AC7F0();
  os_log_type_t v17 = sub_1ACF60();
  if (sub_470C8(v17))
  {
    uint64_t v18 = (uint8_t *)sub_292A0();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&def_342E4, v16, (os_log_type_t)a1, "SpecificMedLoggingFlow: No corrections client available. Continuing without registering corrections flow.", v18, 2u);
    sub_A1F0();
  }

  uint64_t v19 = sub_13226C();
  return v20(v19);
}

uint64_t sub_12CC50()
{
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 24);
  sub_E4B8(v0 + 64);
  sub_4610C(*(void *)(v0 + 224), *(void *)(v0 + 232), *(void *)(v0 + 240), *(void *)(v0 + 248), *(void *)(v0 + 256), *(void *)(v0 + 264), *(void *)(v0 + 272), *(void *)(v0 + 280), *(unsigned char *)(v0 + 288));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 296);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 360);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 400);
  return v0;
}

uint64_t sub_12CCD4()
{
  sub_12CC50();

  return _swift_deallocClassInstance(v0, 440, 7);
}

uint64_t type metadata accessor for SpecificMedLoggingFlow()
{
  return self;
}

uint64_t sub_12CD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  int v9 = a9 >> 6;
  if (v9 != 1)
  {
    if (v9) {
      return result;
    }
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_12CDA0(uint64_t a1)
{
  return sub_4610C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
}

uint64_t sub_12CDDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 64);
  sub_12CD2C(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  return a1;
}

uint64_t sub_12CE78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 64);
  sub_12CD2C(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  unsigned __int8 v20 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  sub_4610C(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

void *sub_12CF30(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t sub_12CF38(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  unsigned __int8 v12 = *(unsigned char *)(a1 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 64) = v3;
  sub_4610C(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t sub_12CFA0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 65))
    {
      int v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *(void *)(a1 + 40) >> 1;
      if (v2 > 0x80000000) {
        int v3 = ~v2;
      }
      else {
        int v3 = -1;
      }
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

double sub_12CFE8(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 56) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 64) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 2 * -a2;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      *(unsigned char *)(a1 + 64) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_12D050(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 64) >> 6;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t sub_12D06C(uint64_t result)
{
  *(unsigned char *)(result + 64) &= 0x3Fu;
  return result;
}

uint64_t sub_12D07C(uint64_t result, unsigned int a2)
{
  if (a2 < 3)
  {
    char v2 = *(unsigned char *)(result + 64) & 7 | ((_BYTE)a2 << 6);
    *(void *)(result + 40) &= 1uLL;
    *(unsigned char *)(result + 64) = v2;
  }
  else
  {
    *(void *)double result = a2 - 3;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(void *)(result + 56) = 0;
    *(unsigned char *)(result + 64) = -64;
  }
  return result;
}

void type metadata accessor for State()
{
}

uint64_t sub_12D0D4()
{
  return sub_107354();
}

uint64_t sub_12D0F8()
{
  unsigned int v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unsigned int v1 = v0;
  v1[1] = sub_E230;
  return sub_1073DC();
}

uint64_t sub_12D194()
{
  type metadata accessor for SpecificMedLoggingFlow();

  return sub_1AAFB0();
}

uint64_t sub_12D1CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v8 = swift_bridgeObjectRetain() + 40;
    do
    {
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 8);
      swift_retain();
      v9(a2, a3, a4);
      swift_release();
      v8 += 16;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_12D264(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_132A44();
    double result = (void *)sub_132A20();
    __break(1u);
  }
  else if (a1)
  {
    sub_2694(&qword_206DA0);
    double result = (void *)sub_1ACF10();
    result[2] = a1;
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_12D2E4(uint64_t a1)
{
  return sub_12D314(a1, (void (*)(void))&type metadata accessor for MatchedMedName);
}

uint64_t sub_12D2FC(uint64_t a1)
{
  return sub_12D314(a1, (void (*)(void))type metadata accessor for WellnessMedicationDialogObject);
}

uint64_t sub_12D314(uint64_t a1, void (*a2)(void))
{
  if (a1 < 0)
  {
    sub_132A44();
    uint64_t result = sub_132A20();
    __break(1u);
  }
  else if (a1)
  {
    a2(0);
    uint64_t result = sub_1ACF10();
    *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8)) = a1;
  }
  else
  {
    return (uint64_t)&_swiftEmptyArrayStorage;
  }
  return result;
}

void sub_12D39C()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_498A4(0, *(void *)(v1 + 16) + 1, 1, v1);
    *uint64_t v0 = v3;
  }
}

uint64_t sub_12D3E8(uint64_t result)
{
  if (result + 1 > *(void *)((char *)&dword_18 + (*v1 & 0xFFFFFFFFFFFFFF8)) >> 1) {
    return sub_1ACF00();
  }
  return result;
}

void sub_12D414(uint64_t a1)
{
  unint64_t v2 = *(void *)(*v1 + 24);
  if (a1 + 1 > (uint64_t)(v2 >> 1))
  {
    sub_498A4(v2 > 1, a1 + 1, 1, *v1);
    *uint64_t v1 = v3;
  }
}

uint64_t sub_12D454(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  sub_1AD360();
  if (a3)
  {
    sub_1AD380(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1ACE60();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1AD380(0);
    swift_bridgeObjectRetain();
  }
  Swift::Int v8 = sub_1AD390();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    sub_12D8D0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v20;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  uint64_t v11 = ~v9;
  uint64_t v12 = *(void *)(v7 + 48);
  while (1)
  {
    long long v13 = (void *)(v12 + 16 * v10);
    uint64_t v14 = v13[1];
    if (v14) {
      break;
    }
    if (!a3) {
      goto LABEL_18;
    }
LABEL_15:
    unint64_t v10 = (v10 + 1) & v11;
    if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_16;
    }
  }
  if (!a3) {
    goto LABEL_15;
  }
  BOOL v15 = *v13 == a2 && v14 == a3;
  if (!v15 && (sub_1AD2F0() & 1) == 0) {
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
LABEL_18:
  swift_bridgeObjectRelease();
  uint64_t v18 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
  Swift::Int v19 = v18[1];
  *a1 = *v18;
  a1[1] = v19;
  swift_bridgeObjectRetain();
  return 0;
}

unint64_t sub_12D620()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_2694(&qword_206D70);
  uint64_t v3 = sub_1AD050();
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v5 = (void *)(v2 + 56);
    uint64_t v6 = -1;
    if (v4 < 64) {
      uint64_t v6 = ~(-1 << v4);
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v4 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v10 = 0;
    if (!v7) {
      goto LABEL_6;
    }
LABEL_5:
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
    {
      unint64_t result = sub_12D7F4(*(void *)(*(void *)(v2 + 48) + 16 * i), *(void *)(*(void *)(v2 + 48) + 16 * i + 8), v3);
      if (v7) {
        goto LABEL_5;
      }
LABEL_6:
      int64_t v13 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
LABEL_28:
        __break(1u);
        return result;
      }
      if (v13 >= v8) {
        goto LABEL_22;
      }
      unint64_t v14 = v5[v13];
      ++v10;
      if (!v14)
      {
        int64_t v10 = v13 + 1;
        if (v13 + 1 >= v8) {
          goto LABEL_22;
        }
        unint64_t v14 = v5[v10];
        if (!v14)
        {
          int64_t v10 = v13 + 2;
          if (v13 + 2 >= v8) {
            goto LABEL_22;
          }
          unint64_t v14 = v5[v10];
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v8)
            {
LABEL_22:
              swift_release();
              uint64_t v16 = 1 << *(unsigned char *)(v2 + 32);
              if (v16 > 63) {
                sub_12DA88(0, (unint64_t)(v16 + 63) >> 6, (void *)(v2 + 56));
              }
              else {
                *uint64_t v5 = -1 << v16;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v14 = v5[v15];
            if (!v14)
            {
              while (1)
              {
                int64_t v10 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_28;
                }
                if (v10 >= v8) {
                  goto LABEL_22;
                }
                unint64_t v14 = v5[v10];
                ++v15;
                if (v14) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v10 = v15;
          }
        }
      }
LABEL_19:
      unint64_t v7 = (v14 - 1) & v14;
    }
  }
  unint64_t result = swift_release();
  *uint64_t v1 = v3;
  return result;
}

unint64_t sub_12D7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1AD360();
  if (a2)
  {
    sub_1AD380(1u);
    swift_bridgeObjectRetain();
    sub_1ACE60();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1AD380(0);
  }
  sub_1AD390();
  unint64_t result = sub_1AD020();
  *(void *)(a3 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  unint64_t v7 = (void *)(*(void *)(a3 + 48) + 16 * result);
  *unint64_t v7 = a1;
  v7[1] = a2;
  ++*(void *)(a3 + 16);
  return result;
}

Swift::Int sub_12D8D0(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if (a4)
    {
      sub_12D620();
    }
    else
    {
      if (v10 > v9)
      {
        unint64_t result = (Swift::Int)sub_12DAA4();
        goto LABEL_23;
      }
      sub_12DC54();
    }
    uint64_t v11 = *v4;
    sub_1AD360();
    if (a2)
    {
      sub_1AD380(1u);
      swift_bridgeObjectRetain();
      sub_1ACE60();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1AD380(0);
    }
    unint64_t result = sub_1AD390();
    uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
    a3 = result & ~v12;
    uint64_t v13 = v11 + 56;
    if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v14 = ~v12;
      uint64_t v15 = *(void *)(v11 + 48);
      do
      {
        uint64_t v16 = (void *)(v15 + 16 * a3);
        uint64_t v17 = v16[1];
        if (v17)
        {
          if (a2)
          {
            if (*v16 == v8 && v17 == a2) {
              goto LABEL_26;
            }
            unint64_t result = sub_1AD2F0();
            if (result) {
              goto LABEL_26;
            }
          }
        }
        else if (!a2)
        {
          goto LABEL_26;
        }
        a3 = (a3 + 1) & v14;
      }
      while (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
    }
  }
LABEL_23:
  uint64_t v19 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v20 = (Swift::Int *)(*(void *)(v19 + 48) + 16 * a3);
  *uint64_t v20 = v8;
  v20[1] = a2;
  uint64_t v21 = *(void *)(v19 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
    __break(1u);
LABEL_26:
    sub_2694(&qword_2032A8);
    unint64_t result = sub_1AD310();
    __break(1u);
  }
  else
  {
    *(void *)(v19 + 16) = v23;
  }
  return result;
}

uint64_t sub_12DA88(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void *sub_12DAA4()
{
  uint64_t v1 = v0;
  sub_2694(&qword_206D70);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1AD040();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    *(_OWORD *)(*(void *)(v4 + 48) + 16 * i) = *(_OWORD *)(*(void *)(v2 + 48) + 16 * i);
    unint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

unint64_t sub_12DC54()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_2694(&qword_206D70);
  uint64_t v3 = sub_1AD050();
  if (!*(void *)(v2 + 16))
  {
LABEL_23:
    unint64_t result = swift_release();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = v2 + 56;
  uint64_t v6 = -1;
  if (v4 < 64) {
    uint64_t v6 = ~(-1 << v4);
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  unint64_t result = swift_retain();
  int64_t v10 = 0;
  if (!v7) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    unint64_t result = sub_12D7F4(v17, v18, v3);
    if (v7) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8) {
      goto LABEL_22;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_22;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_22;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v10);
        if (!v14) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v7 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_22;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_12DE04(void *a1)
{
  return sub_12E078(a1, (SEL *)&selRef_schedule);
}

uint64_t sub_12DE10(void *a1)
{
  return sub_12E078(a1, (SEL *)&selRef_scheduleID);
}

uint64_t sub_12DE1C(void *a1)
{
  return sub_12E078(a1, (SEL *)&selRef_medicationID);
}

uint64_t sub_12DE28(void *a1)
{
  return sub_12E078(a1, (SEL *)&selRef_strengthUnit);
}

uint64_t sub_12DE34(void *a1)
{
  id v2 = [a1 scheduleID];

  if (v2)
  {
    sub_1ACDD0();
  }
  return sub_B7B9C();
}

void sub_12DEA0(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = sub_1ACDC0();
  [a3 setScheduleID:v4];
}

void sub_12DEF8(uint64_t a1, void *a2)
{
  Class isa = sub_1ACEC0().super.isa;
  swift_bridgeObjectRelease();
  [a2 setMedicationIDs:isa];
}

void sub_12DF64(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = sub_1ACDC0();
  [a3 setStrengthUnit:v4];
}

void sub_12DFBC(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = sub_1ACDC0();
  [a3 setDosageUnit:v4];
}

uint64_t sub_12E014(void *a1, SEL *a2, void (*a3)(void))
{
  id v4 = [a1 *a2];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  a3(0);
  uint64_t v6 = sub_1ACED0();

  return v6;
}

uint64_t sub_12E078(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    sub_1ACDD0();
  }
  return sub_22F80();
}

uint64_t sub_12E0D4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for SpecificMedLoggingFlow.SpecifiedMedicationSuccessParameters()
{
  uint64_t result = qword_206E00;
  if (!qword_206E00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_12E160()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_12E198()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_12E224()
{
  return sub_22F80();
}

uint64_t sub_12E254()
{
  return sub_12A438();
}

uint64_t sub_12E268()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 41, 7);
}

uint64_t sub_12E2A8()
{
  return sub_1ACE00();
}

unsigned char **sub_12E2E0(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return sub_4A1C8(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_12E2EC()
{
  return sub_4A1D8(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_12E2F4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_4A200(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_12E30C()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_12E394()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_12E41C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  sub_E558();
  v3();
  return a1;
}

uint64_t sub_12E470()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_12E4F8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_12E530()
{
  return sub_12A474(*(void **)(v0 + 16));
}

uint64_t sub_12E540()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_12E578()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_12E600()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_12E68C()
{
  return sub_12E75C((uint64_t (*)(_OWORD *))sub_12A218);
}

uint64_t sub_12E6A8()
{
  return sub_12E75C((uint64_t (*)(_OWORD *))sub_12A258);
}

uint64_t sub_12E6C4()
{
  return sub_12E75C((uint64_t (*)(_OWORD *))sub_12A288);
}

uint64_t sub_12E6E0()
{
  return sub_12E75C((uint64_t (*)(_OWORD *))sub_12A2D0);
}

uint64_t sub_12E6FC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 81, 7);
}

uint64_t sub_12E744()
{
  return sub_12E75C((uint64_t (*)(_OWORD *))sub_12A310);
}

uint64_t sub_12E75C(uint64_t (*a1)(_OWORD *))
{
  uint64_t v2 = *(void *)(v1 + 48);
  char v3 = *(unsigned char *)(v1 + 56);
  char v4 = *(unsigned char *)(v1 + 80);
  long long v5 = *(_OWORD *)(v1 + 32);
  v7[0] = *(_OWORD *)(v1 + 16);
  v7[1] = v5;
  uint64_t v8 = v2;
  char v9 = v3;
  long long v10 = *(_OWORD *)(v1 + 64);
  char v11 = v4;
  return a1(v7);
}

uint64_t sub_12E7D8()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_12E860()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_12E8E8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_20688();
  uint64_t v4 = sub_CD4DC();
  v5(v4);
  return a2;
}

uint64_t sub_12E93C()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_12E9C4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_12E9FC()
{
  return sub_12A344(*(void *)(v0 + 16));
}

id sub_12EA0C()
{
  return *(id *)(v0 + 16);
}

uint64_t sub_12EA1C()
{
  return sub_765B4(*(uint64_t (**)(void))(v0 + 16));
}

void sub_12EA24(uint64_t *a1, void **a2, uint64_t a3)
{
  sub_765DC(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_12EA2C()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_12EAB4()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_12EB3C()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_12EBC4()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E230;
  uint64_t v3 = sub_47228();
  return sub_24B08(v3, v4);
}

uint64_t sub_12EC4C()
{
  sub_A364();
  sub_476A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_47218(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_12ECE8(uint64_t a1)
{
  return a1;
}

uint64_t sub_12ED48(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_12ED90(uint64_t a1, long long *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v37 = a13;
  uint64_t v38 = a15;
  uint64_t v21 = sub_B5B0((uint64_t *)&v36);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32))(v21, a5, a13);
  uint64_t v34 = a14;
  uint64_t v35 = a16;
  BOOL v22 = sub_B5B0((uint64_t *)&v33);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a14 - 8) + 32))(v22, a9, a14);
  a11[2] = a1;
  sub_E3FC((uint64_t)a2, (uint64_t)(a11 + 3));
  sub_9B48((uint64_t)a3, (uint64_t)(a11 + 8));
  sub_467AC(a4, (uint64_t)(a11 + 28));
  sub_24D80(&v36, (uint64_t)(a11 + 37));
  a11[42] = a6;
  a11[43] = a7;
  a11[44] = a8;
  sub_24D80(&v33, (uint64_t)(a11 + 50));
  sub_24D80(a2, (uint64_t)v29);
  memcpy(__dst, a3, sizeof(__dst));
  if (*(void *)(a10 + 24))
  {
    sub_E4B8((uint64_t)__dst);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v29);
    sub_24D80((long long *)a10, (uint64_t)&v30);
  }
  else
  {
    os_log_type_t v31 = &type metadata for MedsCorrectionsFlowProvider;
    uint64_t v32 = &off_1F75E0;
    uint64_t v23 = swift_allocObject();
    *(void *)&long long v30 = v23;
    sub_24D80(v29, v23 + 16);
    memcpy((void *)(v23 + 56), __dst, 0xA0uLL);
    sub_5B028(a10, &qword_203048);
  }
  sub_24D80(&v30, (uint64_t)(a11 + 45));
  return a11;
}

uint64_t sub_12EF84()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 96);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 136);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 176);

  return _swift_deallocObject(v0, 216, 7);
}

void *sub_12EFDC(_WORD *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_WORD *)a2;
    uint64_t v7 = a3[6];
    uint64_t v8 = (char *)a1 + v7;
    char v9 = (char *)a2 + v7;
    uint64_t v10 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1, v10))
    {
      uint64_t v11 = sub_2694(&qword_201E28);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0, 1, v10);
    }
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    int64_t v15 = (char *)v4 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)int64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    *((unsigned char *)v4 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v17 = a3[9];
    uint64_t v18 = a3[10];
    int64_t v19 = (char *)v4 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(void *)int64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = (char *)v4 + v18;
    BOOL v22 = (char *)a2 + v18;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v18, 1, v10))
    {
      uint64_t v23 = sub_2694(&qword_201E28);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v21, v22, v10);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v10);
    }
    uint64_t v24 = a3[12];
    *((unsigned char *)v4 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *(void *)((char *)v4 + v24) = *(void *)((char *)a2 + v24);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_12F200(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v6, v5);
  }

  return swift_bridgeObjectRelease();
}

_WORD *sub_12F2E8(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = (char *)a1 + v15;
  uint64_t v18 = (char *)a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  int64_t v19 = (char *)a1 + v16;
  uint64_t v20 = (char *)a2 + v16;
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v16, 1, v9))
  {
    uint64_t v21 = sub_2694(&qword_201E28);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v19, v20, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0, 1, v9);
  }
  uint64_t v22 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *sub_12F4BC(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a3[6];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1AC1E0();
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_2694(&qword_201E28);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = *(void *)v16;
  v15[8] = v16[8];
  *(void *)uint64_t v15 = v17;
  a1[a3[8]] = a2[a3[8]];
  uint64_t v18 = a3[9];
  int64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)int64_t v19 = v21;
  uint64_t v22 = a3[10];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v22], 1, v9);
  int v26 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v9);
  if (!v25)
  {
    uint64_t v27 = *(void *)(v9 - 8);
    if (!v26)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v27 + 24))(v23, v24, v9);
      goto LABEL_13;
    }
    (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v23, v9);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    uint64_t v28 = sub_2694(&qword_201E28);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v23, v24, v9);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0, 1, v9);
LABEL_13:
  a1[a3[11]] = a2[a3[11]];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_WORD *sub_12F7B8(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = (char *)a1 + v15;
  uint64_t v18 = (char *)a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  int64_t v19 = (char *)a1 + v16;
  uint64_t v20 = (char *)a2 + v16;
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v16, 1, v9))
  {
    uint64_t v21 = sub_2694(&qword_201E28);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v19, v20, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0, 1, v9);
  }
  uint64_t v22 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
  return a1;
}

unsigned char *sub_12F988(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a3[6];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1AC1E0();
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_2694(&qword_201E28);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  a1[v15] = a2[v15];
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  int v24 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v19], 1, v9);
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v23, 1, v9);
  if (!v24)
  {
    uint64_t v26 = *(void *)(v9 - 8);
    if (!v25)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v26 + 40))(v22, v23, v9);
      goto LABEL_13;
    }
    (*(void (**)(unsigned char *, uint64_t))(v26 + 8))(v22, v9);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    uint64_t v27 = sub_2694(&qword_201E28);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v22, v23, v9);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v22, 0, 1, v9);
LABEL_13:
  uint64_t v28 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  *(void *)&a1[v28] = *(void *)&a2[v28];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_12FC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_12FC84);
}

uint64_t sub_12FC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2694(&qword_201E28);
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 48));
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    int v12 = v11 - 1;
    if (v12 < 0) {
      int v12 = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_12FD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_12FD38);
}

void sub_12FD38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_2694(&qword_201E28);
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 48)) = a2;
  }
}

void sub_12FDC8()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for CycleTrackingLogModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_12FF04(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x12FFD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void type metadata accessor for ConfirmationStatus()
{
}

unint64_t sub_130008()
{
  unint64_t result = qword_206E58;
  if (!qword_206E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_206E58);
  }
  return result;
}

uint64_t sub_130124()
{
  STACK[0x200] = v0[3348];
  STACK[0x208] = v0[3347];
  STACK[0x210] = v0[3346];
  STACK[0x218] = v0[3345];
  STACK[0x220] = v0[3344];
  STACK[0x228] = v0[3341];
  STACK[0x230] = v0[3340];
  STACK[0x238] = v0[3339];
  STACK[0x240] = v0[3338];
  STACK[0x248] = v0[3337];
  STACK[0x250] = v0[3336];
  STACK[0x258] = v0[3335];
  STACK[0x260] = v0[3334];
  STACK[0x268] = v0[3333];
  STACK[0x270] = v0[3332];
  STACK[0x278] = v0[3331];
  STACK[0x280] = v0[3330];
  STACK[0x288] = v0[3329];
  STACK[0x290] = v0[3328];
  STACK[0x298] = v0[3327];
  STACK[0x2A0] = v0[3326];
  STACK[0x2A8] = v0[3325];
  STACK[0x2B0] = v0[3324];
  STACK[0x2B8] = v0[3323];
  STACK[0x2C0] = v0[3322];
  STACK[0x2C8] = v0[3321];
  STACK[0x2D0] = v0[3320];
  STACK[0x2D8] = v0[3319];
  STACK[0x2E0] = v0[3318];
  STACK[0x2E8] = v0[3317];
  STACK[0x2F0] = v0[3316];
  STACK[0x2F8] = v0[3315];
  STACK[0x300] = v0[3314];
  STACK[0x308] = v0[3313];
  STACK[0x310] = v0[3312];
  STACK[0x318] = v0[3311];
  STACK[0x320] = v0[3310];
  STACK[0x328] = v0[3309];
  STACK[0x330] = v0[3308];
  STACK[0x338] = v0[3307];
  STACK[0x340] = v0[3306];
  STACK[0x348] = v0[3305];
  STACK[0x350] = v0[3304];
  STACK[0x358] = v0[3302];
  STACK[0x360] = v0[3301];
  STACK[0x368] = v0[3300];
  STACK[0x370] = v0[3297];
  STACK[0x378] = v0[3296];
  STACK[0x380] = v0[3294];
  STACK[0x388] = v0[3293];
  STACK[0x390] = v0[3292];
  STACK[0x398] = v0[3291];
  STACK[0x3A0] = v0[3289];
  STACK[0x3A8] = v0[3288];
  STACK[0x3B0] = v0[3287];
  STACK[0x3B8] = v0[3286];
  STACK[0x3C0] = v0[3285];
  STACK[0x3C8] = v0[3284];
  STACK[0x3D0] = v0[3283];
  STACK[0x3D8] = v0[3282];
  STACK[0x3E0] = v0[3281];
  STACK[0x3E8] = v0[3280];
  STACK[0x3F0] = v0[3279];
  STACK[0x3F8] = v0[3278];
  STACK[0x400] = v0[3275];
  STACK[0x408] = v0[3274];
  STACK[0x410] = v0[3273];
  STACK[0x418] = v0[3272];
  STACK[0x420] = v0[3271];
  STACK[0x428] = v0[3270];
  STACK[0x430] = v0[3269];
  STACK[0x438] = v0[3268];
  uint64_t v3 = v0[3266];
  *(void *)(v1 - 256) = v0[3267];
  *(void *)(v1 - 248) = v3;
  uint64_t v4 = v0[3264];
  *(void *)(v1 - 240) = v0[3265];
  *(void *)(v1 - 232) = v4;
  uint64_t v5 = v0[3262];
  *(void *)(v1 - 224) = v0[3263];
  *(void *)(v1 - 216) = v5;
  uint64_t v6 = v0[3260];
  *(void *)(v1 - 208) = v0[3261];
  *(void *)(v1 - 200) = v6;
  uint64_t v7 = v0[3258];
  *(void *)(v1 - 192) = v0[3259];
  *(void *)(v1 - 184) = v7;
  uint64_t v8 = v0[3256];
  *(void *)(v1 - 176) = v0[3257];
  *(void *)(v1 - 168) = v8;
  uint64_t v9 = v0[3254];
  *(void *)(v1 - 160) = v0[3255];
  *(void *)(v1 - 152) = v9;
  uint64_t v10 = v0[3252];
  *(void *)(v1 - 144) = v0[3253];
  *(void *)(v1 - 136) = v10;
  uint64_t v11 = v0[3248];
  *(void *)(v1 - 128) = v0[3251];
  *(void *)(v1 - 120) = v11;
  return swift_task_dealloc();
}

uint64_t sub_130580()
{
  STACK[0x200] = v0[3349];
  STACK[0x208] = v0[3348];
  STACK[0x210] = v0[3347];
  STACK[0x218] = v0[3346];
  STACK[0x220] = v0[3345];
  STACK[0x228] = v0[3344];
  STACK[0x230] = v0[3341];
  STACK[0x238] = v0[3340];
  STACK[0x240] = v0[3339];
  STACK[0x248] = v0[3338];
  STACK[0x250] = v0[3337];
  STACK[0x258] = v0[3336];
  STACK[0x260] = v0[3335];
  STACK[0x268] = v0[3334];
  STACK[0x270] = v0[3333];
  STACK[0x278] = v0[3332];
  STACK[0x280] = v0[3331];
  STACK[0x288] = v0[3330];
  STACK[0x290] = v0[3329];
  STACK[0x298] = v0[3328];
  STACK[0x2A0] = v0[3327];
  STACK[0x2A8] = v0[3326];
  STACK[0x2B0] = v0[3325];
  STACK[0x2B8] = v0[3324];
  STACK[0x2C0] = v0[3323];
  STACK[0x2C8] = v0[3322];
  STACK[0x2D0] = v0[3321];
  STACK[0x2D8] = v0[3320];
  STACK[0x2E0] = v0[3319];
  STACK[0x2E8] = v0[3318];
  STACK[0x2F0] = v0[3317];
  STACK[0x2F8] = v0[3316];
  STACK[0x300] = v0[3315];
  STACK[0x308] = v0[3314];
  STACK[0x310] = v0[3313];
  STACK[0x318] = v0[3312];
  STACK[0x320] = v0[3311];
  STACK[0x328] = v0[3310];
  STACK[0x330] = v0[3309];
  STACK[0x338] = v0[3308];
  STACK[0x340] = v0[3307];
  STACK[0x348] = v0[3306];
  STACK[0x350] = v0[3305];
  STACK[0x358] = v0[3304];
  STACK[0x360] = v0[3302];
  STACK[0x368] = v0[3301];
  STACK[0x370] = v0[3300];
  STACK[0x378] = v0[3297];
  STACK[0x380] = v0[3296];
  STACK[0x388] = v0[3294];
  STACK[0x390] = v0[3293];
  STACK[0x398] = v0[3292];
  STACK[0x3A0] = v0[3291];
  STACK[0x3A8] = v0[3289];
  STACK[0x3B0] = v0[3288];
  STACK[0x3B8] = v0[3287];
  STACK[0x3C0] = v0[3286];
  STACK[0x3C8] = v0[3285];
  STACK[0x3D0] = v0[3284];
  STACK[0x3D8] = v0[3283];
  STACK[0x3E0] = v0[3282];
  STACK[0x3E8] = v0[3281];
  STACK[0x3F0] = v0[3280];
  STACK[0x3F8] = v0[3279];
  STACK[0x400] = v0[3278];
  STACK[0x408] = v0[3275];
  STACK[0x410] = v0[3274];
  STACK[0x418] = v0[3273];
  STACK[0x420] = v0[3272];
  STACK[0x428] = v0[3271];
  STACK[0x430] = v0[3270];
  STACK[0x438] = v0[3269];
  STACK[0x440] = v0[3268];
  STACK[0x448] = v0[3267];
  uint64_t v3 = v0[3265];
  *(void *)(v1 - 256) = v0[3266];
  *(void *)(v1 - 248) = v3;
  uint64_t v4 = v0[3263];
  *(void *)(v1 - 240) = v0[3264];
  *(void *)(v1 - 232) = v4;
  uint64_t v5 = v0[3261];
  *(void *)(v1 - 224) = v0[3262];
  *(void *)(v1 - 216) = v5;
  uint64_t v6 = v0[3259];
  *(void *)(v1 - 208) = v0[3260];
  *(void *)(v1 - 200) = v6;
  uint64_t v7 = v0[3257];
  *(void *)(v1 - 192) = v0[3258];
  *(void *)(v1 - 184) = v7;
  uint64_t v8 = v0[3255];
  *(void *)(v1 - 176) = v0[3256];
  *(void *)(v1 - 168) = v8;
  uint64_t v9 = v0[3253];
  *(void *)(v1 - 160) = v0[3254];
  *(void *)(v1 - 152) = v9;
  uint64_t v10 = v0[3251];
  *(void *)(v1 - 144) = v0[3252];
  *(void *)(v1 - 136) = v10;
  *(void *)(v1 - 128) = v0[3248];
  return swift_task_dealloc();
}

uint64_t sub_1309E4()
{
  STACK[0x200] = v0[3348];
  STACK[0x208] = v0[3347];
  STACK[0x210] = v0[3346];
  STACK[0x218] = v0[3345];
  STACK[0x220] = v0[3344];
  STACK[0x228] = v0[3341];
  STACK[0x230] = v0[3340];
  STACK[0x238] = v0[3339];
  STACK[0x240] = v0[3338];
  STACK[0x248] = v0[3337];
  STACK[0x250] = v0[3336];
  STACK[0x258] = v0[3335];
  STACK[0x260] = v0[3334];
  STACK[0x268] = v0[3333];
  STACK[0x270] = v0[3332];
  STACK[0x278] = v0[3331];
  STACK[0x280] = v0[3330];
  STACK[0x288] = v0[3329];
  STACK[0x290] = v0[3328];
  STACK[0x298] = v0[3327];
  STACK[0x2A0] = v0[3326];
  STACK[0x2A8] = v0[3325];
  STACK[0x2B0] = v0[3324];
  STACK[0x2B8] = v0[3323];
  STACK[0x2C0] = v0[3322];
  STACK[0x2C8] = v0[3321];
  STACK[0x2D0] = v0[3320];
  STACK[0x2D8] = v0[3319];
  STACK[0x2E0] = v0[3318];
  STACK[0x2E8] = v0[3317];
  STACK[0x2F0] = v0[3316];
  STACK[0x2F8] = v0[3315];
  STACK[0x300] = v0[3314];
  STACK[0x308] = v0[3313];
  STACK[0x310] = v0[3312];
  STACK[0x318] = v0[3311];
  STACK[0x320] = v0[3310];
  STACK[0x328] = v0[3309];
  STACK[0x330] = v0[3308];
  STACK[0x338] = v0[3307];
  STACK[0x340] = v0[3306];
  STACK[0x348] = v0[3305];
  STACK[0x350] = v0[3304];
  STACK[0x358] = v0[3302];
  STACK[0x360] = v0[3301];
  STACK[0x368] = v0[3300];
  STACK[0x370] = v0[3297];
  STACK[0x378] = v0[3296];
  STACK[0x380] = v0[3294];
  STACK[0x388] = v0[3293];
  STACK[0x390] = v0[3292];
  STACK[0x398] = v0[3291];
  STACK[0x3A0] = v0[3289];
  STACK[0x3A8] = v0[3288];
  STACK[0x3B0] = v0[3287];
  STACK[0x3B8] = v0[3286];
  STACK[0x3C0] = v0[3285];
  STACK[0x3C8] = v0[3284];
  STACK[0x3D0] = v0[3283];
  STACK[0x3D8] = v0[3282];
  STACK[0x3E0] = v0[3281];
  STACK[0x3E8] = v0[3280];
  STACK[0x3F0] = v0[3279];
  STACK[0x3F8] = v0[3278];
  STACK[0x400] = v0[3275];
  STACK[0x408] = v0[3274];
  STACK[0x410] = v0[3273];
  STACK[0x418] = v0[3272];
  STACK[0x420] = v0[3271];
  STACK[0x428] = v0[3270];
  STACK[0x430] = v0[3269];
  STACK[0x438] = v0[3268];
  STACK[0x440] = v0[3267];
  STACK[0x448] = v0[3266];
  STACK[0x450] = v0[3265];
  STACK[0x458] = v0[3264];
  uint64_t v3 = v0[3262];
  *(void *)(v1 - 256) = v0[3263];
  *(void *)(v1 - 248) = v3;
  uint64_t v4 = v0[3260];
  *(void *)(v1 - 240) = v0[3261];
  *(void *)(v1 - 232) = v4;
  uint64_t v5 = v0[3258];
  *(void *)(v1 - 224) = v0[3259];
  *(void *)(v1 - 216) = v5;
  uint64_t v6 = v0[3256];
  *(void *)(v1 - 208) = v0[3257];
  *(void *)(v1 - 200) = v6;
  uint64_t v7 = v0[3254];
  *(void *)(v1 - 192) = v0[3255];
  *(void *)(v1 - 184) = v7;
  uint64_t v8 = v0[3252];
  *(void *)(v1 - 176) = v0[3253];
  *(void *)(v1 - 168) = v8;
  uint64_t v9 = v0[3248];
  *(void *)(v1 - 160) = v0[3251];
  *(void *)(v1 - 152) = v9;
  return swift_task_dealloc();
}

uint64_t sub_130E48()
{
  uint64_t v3 = v0[3266];
  *(void *)(v1 - 256) = v0[3267];
  *(void *)(v1 - 248) = v3;
  uint64_t v4 = v0[3264];
  *(void *)(v1 - 240) = v0[3265];
  *(void *)(v1 - 232) = v4;
  uint64_t v5 = v0[3262];
  *(void *)(v1 - 224) = v0[3263];
  *(void *)(v1 - 216) = v5;
  uint64_t v6 = v0[3260];
  *(void *)(v1 - 208) = v0[3261];
  *(void *)(v1 - 200) = v6;
  uint64_t v7 = v0[3258];
  *(void *)(v1 - 192) = v0[3259];
  *(void *)(v1 - 184) = v7;
  uint64_t v8 = v0[3256];
  *(void *)(v1 - 176) = v0[3257];
  *(void *)(v1 - 168) = v8;
  uint64_t v9 = v0[3254];
  *(void *)(v1 - 160) = v0[3255];
  *(void *)(v1 - 152) = v9;
  uint64_t v10 = v0[3252];
  *(void *)(v1 - 144) = v0[3253];
  *(void *)(v1 - 136) = v10;
  uint64_t v11 = v0[3248];
  *(void *)(v1 - 128) = v0[3251];
  *(void *)(v1 - 120) = v11;
  return swift_task_dealloc();
}

uint64_t sub_130EC4()
{
  STACK[0x200] = v0[3348];
  STACK[0x208] = v0[3347];
  STACK[0x210] = v0[3346];
  STACK[0x218] = v0[3345];
  STACK[0x220] = v0[3344];
  STACK[0x228] = v0[3341];
  STACK[0x230] = v0[3340];
  STACK[0x238] = v0[3339];
  STACK[0x240] = v0[3338];
  STACK[0x248] = v0[3337];
  STACK[0x250] = v0[3336];
  STACK[0x258] = v0[3335];
  STACK[0x260] = v0[3334];
  STACK[0x268] = v0[3333];
  STACK[0x270] = v0[3332];
  STACK[0x278] = v0[3331];
  STACK[0x280] = v0[3330];
  STACK[0x288] = v0[3329];
  STACK[0x290] = v0[3328];
  STACK[0x298] = v0[3327];
  STACK[0x2A0] = v0[3326];
  STACK[0x2A8] = v0[3325];
  STACK[0x2B0] = v0[3324];
  STACK[0x2B8] = v0[3323];
  STACK[0x2C0] = v0[3322];
  STACK[0x2C8] = v0[3321];
  STACK[0x2D0] = v0[3320];
  STACK[0x2D8] = v0[3319];
  STACK[0x2E0] = v0[3318];
  STACK[0x2E8] = v0[3317];
  STACK[0x2F0] = v0[3316];
  STACK[0x2F8] = v0[3315];
  STACK[0x300] = v0[3314];
  STACK[0x308] = v0[3313];
  STACK[0x310] = v0[3312];
  STACK[0x318] = v0[3311];
  STACK[0x320] = v0[3310];
  STACK[0x328] = v0[3309];
  STACK[0x330] = v0[3308];
  STACK[0x338] = v0[3307];
  STACK[0x340] = v0[3306];
  STACK[0x348] = v0[3305];
  STACK[0x350] = v0[3304];
  STACK[0x358] = v0[3302];
  STACK[0x360] = v0[3301];
  STACK[0x368] = v0[3300];
  STACK[0x370] = v0[3297];
  STACK[0x378] = v0[3296];
  STACK[0x380] = v0[3294];
  STACK[0x388] = v0[3293];
  STACK[0x390] = v0[3292];
  STACK[0x398] = v0[3291];
  STACK[0x3A0] = v0[3289];
  STACK[0x3A8] = v0[3288];
  STACK[0x3B0] = v0[3287];
  STACK[0x3B8] = v0[3286];
  STACK[0x3C0] = v0[3285];
  STACK[0x3C8] = v0[3284];
  STACK[0x3D0] = v0[3283];
  STACK[0x3D8] = v0[3282];
  STACK[0x3E0] = v0[3281];
  STACK[0x3E8] = v0[3280];
  STACK[0x3F0] = v0[3279];
  STACK[0x3F8] = v0[3278];
  STACK[0x400] = v0[3275];
  STACK[0x408] = v0[3274];
  STACK[0x410] = v0[3273];
  STACK[0x418] = v0[3272];
  STACK[0x420] = v0[3271];
  STACK[0x428] = v0[3270];
  STACK[0x430] = v0[3269];
  STACK[0x438] = v0[3268];
  STACK[0x440] = v0[3267];
  STACK[0x448] = v0[3266];
  uint64_t v3 = v0[3264];
  *(void *)(v1 - 256) = v0[3265];
  *(void *)(v1 - 248) = v3;
  uint64_t v4 = v0[3262];
  *(void *)(v1 - 240) = v0[3263];
  *(void *)(v1 - 232) = v4;
  uint64_t v5 = v0[3260];
  *(void *)(v1 - 224) = v0[3261];
  *(void *)(v1 - 216) = v5;
  uint64_t v6 = v0[3258];
  *(void *)(v1 - 208) = v0[3259];
  *(void *)(v1 - 200) = v6;
  uint64_t v7 = v0[3256];
  *(void *)(v1 - 192) = v0[3257];
  *(void *)(v1 - 184) = v7;
  uint64_t v8 = v0[3254];
  *(void *)(v1 - 176) = v0[3255];
  *(void *)(v1 - 168) = v8;
  uint64_t v9 = v0[3252];
  *(void *)(v1 - 160) = v0[3253];
  *(void *)(v1 - 152) = v9;
  uint64_t v10 = v0[3248];
  *(void *)(v1 - 144) = v0[3251];
  *(void *)(v1 - 136) = v10;
  return swift_task_dealloc();
}

uint64_t sub_131324()
{
  uint64_t result = v0[3421];
  STACK[0x200] = v0[3349];
  STACK[0x208] = v0[3348];
  STACK[0x210] = v0[3347];
  STACK[0x218] = v0[3346];
  STACK[0x220] = v0[3345];
  STACK[0x228] = v0[3344];
  STACK[0x230] = v0[3341];
  STACK[0x238] = v0[3340];
  STACK[0x240] = v0[3339];
  STACK[0x248] = v0[3338];
  STACK[0x250] = v0[3337];
  STACK[0x258] = v0[3336];
  STACK[0x260] = v0[3335];
  STACK[0x268] = v0[3334];
  STACK[0x270] = v0[3333];
  STACK[0x278] = v0[3332];
  STACK[0x280] = v0[3331];
  STACK[0x288] = v0[3330];
  STACK[0x290] = v0[3329];
  STACK[0x298] = v0[3328];
  STACK[0x2A0] = v0[3327];
  STACK[0x2A8] = v0[3326];
  STACK[0x2B0] = v0[3325];
  STACK[0x2B8] = v0[3324];
  STACK[0x2C0] = v0[3323];
  STACK[0x2C8] = v0[3322];
  STACK[0x2D0] = v0[3321];
  STACK[0x2D8] = v0[3320];
  STACK[0x2E0] = v0[3319];
  STACK[0x2E8] = v0[3318];
  STACK[0x2F0] = v0[3317];
  STACK[0x2F8] = v0[3316];
  STACK[0x300] = v0[3315];
  STACK[0x308] = v0[3314];
  STACK[0x310] = v0[3313];
  STACK[0x318] = v0[3312];
  STACK[0x320] = v0[3311];
  STACK[0x328] = v0[3310];
  STACK[0x330] = v0[3309];
  STACK[0x338] = v0[3308];
  STACK[0x340] = v0[3307];
  STACK[0x348] = v0[3306];
  STACK[0x350] = v0[3305];
  STACK[0x358] = v0[3304];
  STACK[0x360] = v0[3302];
  STACK[0x368] = v0[3301];
  STACK[0x370] = v0[3300];
  STACK[0x378] = v0[3297];
  STACK[0x380] = v0[3296];
  STACK[0x388] = v0[3294];
  STACK[0x390] = v0[3293];
  STACK[0x398] = v0[3292];
  STACK[0x3A0] = v0[3291];
  STACK[0x3A8] = v0[3289];
  STACK[0x3B0] = v0[3288];
  STACK[0x3B8] = v0[3287];
  STACK[0x3C0] = v0[3286];
  STACK[0x3C8] = v0[3285];
  STACK[0x3D0] = v0[3284];
  STACK[0x3D8] = v0[3283];
  STACK[0x3E0] = v0[3282];
  STACK[0x3E8] = v0[3281];
  STACK[0x3F0] = v0[3280];
  STACK[0x3F8] = v0[3279];
  STACK[0x400] = v0[3278];
  STACK[0x408] = v0[3275];
  STACK[0x410] = v0[3274];
  STACK[0x418] = v0[3273];
  STACK[0x420] = v0[3272];
  STACK[0x428] = v0[3271];
  STACK[0x430] = v0[3270];
  STACK[0x438] = v0[3269];
  STACK[0x440] = v0[3268];
  STACK[0x448] = v0[3267];
  STACK[0x450] = v0[3266];
  STACK[0x458] = v0[3265];
  STACK[0x460] = v0[3264];
  STACK[0x468] = v0[3263];
  STACK[0x470] = v0[3262];
  STACK[0x478] = v0[3261];
  STACK[0x480] = v0[3260];
  STACK[0x488] = v0[3259];
  return result;
}

uint64_t sub_131754()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_131764()
{
  return sub_49798((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 - 120), v0 - 128, v0 - 104, v0 - 96);
}

uint64_t sub_131784()
{
  sub_2E38(v0, v1);
  return v1;
}

_WORD *sub_1317C0(_WORD *result)
{
  *(void *)(v1 - 144) = 0;
  STACK[0x4D8] = 0;
  *uint64_t result = 0;
  *(void *)(v1 - 104) = result + 1;
  return result;
}

uint64_t sub_1317D8()
{
  return sub_12D1CC(v0, v1 - 112, v1 - 104, v1 - 96);
}

_WORD *sub_1317FC(_WORD *result)
{
  *uint64_t result = 0;
  *(void *)(v1 - 104) = result + 1;
  return result;
}

_WORD *sub_131820(_WORD *result)
{
  *uint64_t result = 0;
  *(void *)(v1 - 112) = result + 1;
  return result;
}

uint64_t sub_131830()
{
  return v0;
}

uint64_t sub_131848()
{
  sub_2E38(v0, v1);
  return v1;
}

uint64_t sub_131884()
{
  sub_2E38(v0, v1);
  return v1;
}

uint64_t sub_1318D8()
{
  uint64_t v4 = v0[3341];
  *(void *)(v2 - 128) = v0[3336];
  *(void *)(v2 - 120) = v4;
  uint64_t v5 = v0[3304];
  *(void *)(v2 - 144) = v0[3291];
  *(void *)(v2 - 136) = v5;
  uint64_t v6 = v0[3281];
  *(void *)(v2 - 160) = v0[3276];
  *(void *)(v2 - 152) = v6;
  uint64_t v7 = v0[3247] + 64;
  return sub_9B48(v7, v1);
}

void sub_131958(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t sub_131970()
{
  return sub_49780();
}

uint64_t sub_13198C()
{
  return v0;
}

uint64_t sub_1319A0()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

uint64_t sub_1319D8()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

uint64_t sub_131A10()
{
  return v0 + 8;
}

uint64_t sub_131A20()
{
  return sub_12D1CC(v0, v1 - 104, v1 - 144, (uint64_t)&STACK[0x4D8]);
}

uint64_t sub_131A40()
{
  return swift_allocObject();
}

uint64_t sub_131A58(void *a1)
{
  sub_2E38(a1, v1);
  return sub_1AB030();
}

uint64_t sub_131A8C()
{
  return swift_allocObject();
}

void sub_131AA4()
{
  STACK[0x4C8] = *(void *)(v0 + 27392);
}

uint64_t sub_131ACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned __int8 a9@<W8>)
{
  *(void *)uint64_t v10 = v9;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(void *)(v10 + 56) = 0;
  *(unsigned char *)(v10 + 64) = -64;
  return sub_4610C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_131B00()
{
  sub_2E38(v0, v1);
  return sub_1AB040();
}

uint64_t sub_131B38()
{
  sub_2E38(v0, v1);
  return sub_1AB040();
}

uint64_t sub_131B70(void *a1)
{
  sub_2E38(a1, v1);
  return sub_1AB030();
}

BOOL sub_131BA4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

_WORD *sub_131BC0(_WORD *result)
{
  *(void *)(v1 - 136) = 0;
  *(void *)(v1 - 128) = 0;
  *uint64_t result = 0;
  *(void *)(v1 - 144) = result + 1;
  return result;
}

uint64_t sub_131BD8()
{
  STACK[0x4B0] = v0[3452];
  STACK[0x4C8] = v0[3341];
  STACK[0x4C0] = v0[3336];
  STACK[0x4B8] = v0[3304];
  return 0;
}

uint64_t sub_131C24()
{
  return *(void *)(v0 - 88);
}

uint64_t sub_131C44(uint64_t a1, uint64_t a2, char a3)
{
  return sub_19DAB4(0, 0, a3);
}

void sub_131C64(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void sub_131C84(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_131CA4()
{
  return v0 + 8;
}

uint64_t sub_131CB4()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
}

uint64_t sub_131CE4(uint64_t a1)
{
  sub_24D80(v1, a1 + 16);
  return sub_9AF04();
}

uint64_t sub_131D14()
{
  return *(void *)(v0 + 25976) + 64;
}

uint64_t sub_131D30()
{
  return sub_12D1CC(v0, v1 - 144, v1 - 136, v1 - 128);
}

uint64_t sub_131D50(uint64_t result)
{
  *(void *)(result + 16) = v7;
  *(void *)(result + 24) = v6;
  *(void *)(result + 32) = v5;
  *(void *)(result + 40) = v9;
  *(void *)(result + 48) = v3;
  *(unsigned char *)(result + 56) = v1;
  *(void *)(result + 64) = v8;
  *(void *)(result + 72) = v2;
  *(unsigned char *)(result + 80) = v4;
  return result;
}

uint64_t sub_131D6C()
{
  uint64_t v2 = *(void *)(v0 + 25976);
  uint64_t v3 = *(void *)(v2 + 224);
  uint64_t v4 = *(void *)(v2 + 232);
  v2 += 224;
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 40);
  uint64_t v9 = *(void *)(v2 + 48);
  uint64_t v10 = *(void *)(v2 + 56);
  unsigned __int8 v11 = *(unsigned char *)(v2 + 64);
  *(void *)uint64_t v2 = 6;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(void *)(v2 + 56) = 0;
  *(unsigned char *)(v2 + 64) = -64;
  return sub_4610C(v3, v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_131DBC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 2u);
}

void sub_131DDC()
{
}

uint64_t sub_131E14()
{
  uint64_t v3 = v1[3445];
  *(void *)(v2 - 248) = v1[3449];
  *(void *)(v2 - 240) = v3;
  uint64_t v4 = v1[3443];
  *(void *)(v2 - 200) = v1[3341];
  uint64_t v5 = v1[3336];
  *(void *)(v2 - 216) = v0;
  *(void *)(v2 - 208) = v5;
  uint64_t v6 = v1[3304];
  *(void *)(v2 - 232) = v4;
  *(void *)(v2 - 224) = v6;
  return 0;
}

id sub_131E54(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_131E78(uint64_t a1)
{
  sub_24D80(v1, a1 + 16);
  return sub_9AF04();
}

uint64_t sub_131EA8()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0);
  return 11;
}

uint64_t sub_131ECC()
{
  return sub_12D1CC(v0, v1 - 104, v1 - 184, v1 - 144);
}

uint64_t sub_131EF8()
{
  return *(void *)(v0 + 224);
}

uint64_t sub_131F10()
{
  uint64_t v3 = *(void *)(v1 + 25976) + 64;
  return sub_9B48(v3, v0);
}

uint64_t sub_131F3C()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_131F5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 25976) + 24;
  return sub_E3FC(v3, v1 + a1);
}

uint64_t sub_131F7C()
{
  uint64_t v3 = *(void *)(v0 + 25976) + 24;
  return sub_E3FC(v3, v1);
}

uint64_t sub_131F98()
{
  return *(_DWORD *)(v0 - 116) & 1;
}

void sub_131FDC(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t sub_131FF4()
{
  uint64_t v3 = *(void *)(v1 + 25976) + 64;
  return sub_9B48(v3, v0);
}

void sub_13201C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t sub_132040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  return sub_12CD2C(a1, a2, v12, v14, v9, v11, v13, v10, a9);
}

uint64_t sub_132068()
{
  return sub_49780();
}

uint64_t sub_132084()
{
  return v0;
}

uint64_t sub_132094()
{
  return v0;
}

uint64_t sub_1320A4()
{
  return v0 + 8;
}

uint64_t sub_1320B4()
{
  sub_2E38(v0, v1);
  return type metadata accessor for WellnessSnippets();
}

_WORD *sub_1320E8(_WORD *result)
{
  *(void *)(v1 - 120) = 0;
  *uint64_t result = 0;
  *(void *)(v1 - 104) = result + 1;
  *(void *)(v1 - 96) = 0;
  return result;
}

uint64_t sub_132110()
{
  return *(void *)(v0 + 25976) + 64;
}

uint64_t sub_132124()
{
  uint64_t result = v0[3492];
  uint64_t v3 = v0[3424];
  *(void *)(v1 - 208) = v0[3423];
  *(void *)(v1 - 200) = v3;
  return result;
}

uint64_t sub_132150()
{
  return v0;
}

uint64_t sub_132164()
{
  return *(void *)(v0 + 25976) + 64;
}

uint64_t sub_13217C()
{
  *(unsigned char *)(v0 + 16) = 1;
  return *(void *)(v0 + 24);
}

void sub_1321A4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 112) = a1;
}

uint64_t sub_1321CC()
{
  return sub_49780();
}

void sub_1321E4()
{
  *(void *)(v2 - 136) = *(void *)(v1 + 26688);
  *(void *)(v2 - 128) = v0;
}

uint64_t sub_13220C()
{
  return *(void *)(v0 + 25976) + 64;
}

BOOL sub_13221C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_132238@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned __int8 a9@<W8>)
{
  *(void *)uint64_t v10 = v9;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(void *)(v10 + 56) = 0;
  *(unsigned char *)(v10 + 64) = -64;
  return sub_4610C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_13226C()
{
  return v0;
}

void sub_132284(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t sub_13229C()
{
  return v0;
}

_WORD *sub_1322AC(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_1322BC()
{
  return sub_12D1CC(v0, v1 - 104, v1 - 184, v1 - 144);
}

uint64_t sub_1322DC()
{
  return sub_12D1CC(v0, v1 - 104, v1 - 144, (uint64_t)&STACK[0x4D8]);
}

void sub_1322FC()
{
}

uint64_t sub_132314()
{
  uint64_t v3 = *(void *)(v0 + 25976) + 64;
  uint64_t v4 = *(void *)(v1 - 160);
  return sub_9B48(v3, v4);
}

void sub_132340()
{
  uint64_t v2 = v0[3341];
  *(void *)(v1 - 176) = v0[3336];
  *(void *)(v1 - 168) = v2;
  *(void *)(v1 - 184) = v0[3304];
}

void sub_13237C()
{
  uint64_t v2 = *(void *)(v0 + 26728);
  *(void *)(v1 - 160) = *(void *)(v0 + 26688);
  *(void *)(v1 - 152) = v2;
}

uint64_t sub_132390()
{
  return sub_12D1CC(v0, v1 - 112, v1 - 160, (uint64_t)&STACK[0x4D0]);
}

uint64_t sub_1323B0()
{
  return sub_12D1CC(v0, v1 - 112, v1 - 104, v1 - 96);
}

void sub_1323D0()
{
  uint64_t v2 = *(void *)(v0 + 26728);
  *(void *)(v1 - 128) = *(void *)(v0 + 26688);
  *(void *)(v1 - 120) = v2;
}

uint64_t sub_1323E4()
{
  return *(_DWORD *)(v0 - 116) & 1;
}

uint64_t sub_132404()
{
  return *(void *)(v0 - 152);
}

uint64_t sub_132424()
{
  return sub_1AB090();
}

uint64_t sub_13245C()
{
  return v0;
}

uint64_t sub_1324AC()
{
  return v0;
}

uint64_t sub_1324B8(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unint64_t a24)
{
  uint64_t v26 = *(void *)(v24 - 144);
  return SpecificMedCompletedLogModel.init(medStatus:givenTime:requestedMedName:requestedMedSchedule:dosage:dosageUnit:url:sashBundleID:dontDisplayGranularTime:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:snippetHeaderModel:)(a1, a5, a24, 0, 1, v26, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
           a22);
}

uint64_t sub_1324E4()
{
  return sub_1AB380();
}

uint64_t sub_1324FC()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_132518()
{
  return v0;
}

uint64_t sub_132528()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 1, 1, v1);
}

uint64_t sub_132548(uint64_t a1)
{
  return String.init(format:_:)(1714433573, 0xE400000000000000, a1);
}

uint64_t sub_132568()
{
  return *(_DWORD *)(v0 - 152) & 1;
}

uint64_t sub_132588()
{
  return v0;
}

uint64_t sub_1325A4@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v6 - 176) = a2;
  *(void *)(v6 - 168) = v3;
  uint64_t v7 = *(void *)(v4 + 26208);
  *(void *)(v6 - 192) = v2;
  *(void *)(v6 - 184) = v7;
  sub_24D80(a1, v5);
  return sub_1AAE40();
}

uint64_t sub_1325E4()
{
  return sub_1AB120();
}

void sub_132608()
{
  uint64_t v2 = *(void *)(v0 + 26728);
  *(void *)(v1 - 128) = *(void *)(v0 + 26688);
  *(void *)(v1 - 120) = v2;
}

void sub_132640(uint64_t a1@<X8>)
{
  *(void *)(v2 + 24) = v1 + a1;
}

void sub_13264C(uint64_t a1@<X8>)
{
  *(void *)(v2 - 152) = v1 + a1;
}

uint64_t sub_132658()
{
  return v0;
}

void sub_132674()
{
  STACK[0x4C8] = v0[3341];
  STACK[0x4B0] = v0[3336];
  STACK[0x4A8] = v0[3304];
}

uint64_t sub_132690()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1326B4(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  return sub_1AAE40();
}

uint64_t sub_1326DC()
{
  return v0;
}

uint64_t sub_132704(uint64_t a1)
{
  return sub_12D1CC(a1, v1 - 104, v1 - 144, (uint64_t)&STACK[0x4D8]);
}

uint64_t sub_132720()
{
  return *(void *)(v0 + 224);
}

void sub_132744()
{
}

uint64_t sub_13275C(uint64_t result)
{
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v4;
  *(void *)(result + 32) = v2;
  *(unsigned char *)(result + 40) = v1;
  return result;
}

uint64_t sub_13277C()
{
  return v0;
}

uint64_t sub_132794()
{
  return sub_1AB120();
}

uint64_t sub_1327B0()
{
  return sub_1AAE20();
}

void sub_1327DC()
{
  STACK[0x4C8] = *(void *)(v0 + 27408);
}

uint64_t sub_132804()
{
  return swift_allocObject();
}

void sub_13281C()
{
  uint64_t v2 = *(void *)(v0 + 26728);
  *(void *)(v1 - 128) = *(void *)(v0 + 26688);
  *(void *)(v1 - 120) = v2;
}

uint64_t sub_132834()
{
  return swift_allocObject();
}

uint64_t sub_13284C(uint64_t result)
{
  *(unsigned char *)(result + 16) = 8;
  return result;
}

void sub_132858()
{
  uint64_t v2 = *(void *)(v0 + 26728);
  *(void *)(v1 - 128) = *(void *)(v0 + 26688);
  *(void *)(v1 - 120) = v2;
}

uint64_t sub_132884(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 1, 1, v1);
}

uint64_t sub_1328A0()
{
  return sub_1AB120();
}

uint64_t sub_1328BC()
{
  return *(void *)(v0 + 25976) + 64;
}

uint64_t sub_1328CC()
{
  return sub_E3FC(v1, v0);
}

uint64_t sub_1328E4()
{
  return sub_1AB380();
}

uint64_t sub_1328FC()
{
  return sub_E3FC(v1, v0);
}

id sub_132914(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

void sub_13292C()
{
}

uint64_t sub_132944()
{
  return v0;
}

uint64_t sub_132954()
{
  return *(void *)(v0 + 27424);
}

uint64_t sub_13296C()
{
  uint64_t v3 = *(void *)(v1 + 25976) + 24;
  return sub_E3FC(v3, v1 + v0);
}

void sub_132990(uint64_t a1@<X8>)
{
  *(void *)(v2 - 160) = v1 + a1;
}

uint64_t sub_13299C()
{
  return v0;
}

uint64_t sub_1329B4()
{
  return *(void *)(v0 + 224);
}

uint64_t sub_1329E8()
{
  return swift_release();
}

uint64_t sub_132A04()
{
  return sub_1AB120();
}

uint64_t sub_132A20()
{
  return sub_1AD150();
}

uint64_t sub_132A74()
{
  return v0;
}

uint64_t sub_132A84()
{
  return v0;
}

uint64_t sub_132A94@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_132AA4(uint64_t a1, uint64_t a2)
{
  return sub_DF6D8(v2, a2, 0);
}

uint64_t sub_132AC0()
{
  return sub_E3FC(v1, v0);
}

uint64_t sub_132AE4()
{
  return sub_12D1CC(v0, v1 - 104, v1 - 96, v1 - 120);
}

uint64_t sub_132B04()
{
  return sub_12D1CC(v0, v1 - 104, v1 - 184, v1 - 144);
}

uint64_t sub_132B24()
{
  return sub_12D1CC(v0, v1 - 104, v1 - 144, (uint64_t)&STACK[0x4D8]);
}

uint64_t sub_132B5C()
{
  return sub_1AB120();
}

uint64_t sub_132B74()
{
  return sub_49798((uint64_t (**)(uint64_t, uint64_t, uint64_t))&STACK[0x4D0], v0 - 120, v0 - 112, v0 - 160);
}

uint64_t sub_132BA8()
{
  return sub_9B48(v1 + 64, v0);
}

uint64_t sub_132BC0()
{
  return swift_retain();
}

uint64_t sub_132BE0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_132BF8(uint64_t a1)
{
  *(void *)(v1 - 240) = a1;
  return sub_1ACFE0();
}

void sub_132C18(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_132C30()
{
  return v0;
}

uint64_t sub_132C44()
{
  return sub_12D1CC(v0, v1 - 112, v1 - 160, (uint64_t)&STACK[0x4D0]);
}

uint64_t sub_132C64()
{
  return v0;
}

void sub_132C8C()
{
  uint64_t v2 = *(void *)(v0 + 26728);
  *(void *)(v1 - 160) = *(void *)(v0 + 26688);
  *(void *)(v1 - 152) = v2;
}

uint64_t sub_132CA0()
{
  return sub_49780();
}

uint64_t sub_132CC4(unsigned __int16 a1)
{
  return a1 | 0x64657070690000;
}

uint64_t sub_132CD8()
{
  return sub_1AAE20();
}

uint64_t sub_132CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 26384);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1, v4);
}

void sub_132D14()
{
}

uint64_t sub_132D2C(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1, v2);
}

uint64_t sub_132D58()
{
  return v0;
}

uint64_t sub_132D64()
{
  uint64_t v3 = *(void *)(v0 + 25976) + 64;
  return sub_9B48(v3, v1);
}

uint64_t sub_132D90()
{
  return sub_1AB070();
}

uint64_t sub_132DB0()
{
  return sub_1AB090();
}

uint64_t sub_132DD0()
{
  return sub_E3FC(v1, v0);
}

void sub_132DE8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 8u);
}

void sub_132E08(uint64_t a1@<X8>)
{
  *(void *)(v2 - 128) = v1 + a1;
}

void sub_132E14(uint64_t a1@<X8>)
{
  *(void *)(v2 - 88) = v1 + a1;
}

void sub_132E20(uint64_t a1@<X8>)
{
  STACK[0x4B8] = v2 + a1;
  STACK[0x4C0] = v2 + v1;
}

uint64_t sub_132E54@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 200) = a1;
  return *(void *)(v1 + 25976) + 64;
}

uint64_t sub_132E68()
{
  return sub_1AB120();
}

uint64_t sub_132E80()
{
  return v0 & 1;
}

uint64_t sub_132E94()
{
  return v0;
}

uint64_t sub_132EA0()
{
  return v0;
}

uint64_t sub_132EAC()
{
  return v0;
}

uint64_t sub_132EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v30 = *(void *)(v28 - 136);
  return sub_E3FC(a28 + 296, v30);
}

uint64_t sub_132ED8()
{
  return v0;
}

uint64_t sub_132EE4(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  return sub_E4B8(v1);
}

uint64_t sub_132F0C()
{
  return v0;
}

uint64_t sub_132F18(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return sub_12E8E8(v4, v3, a3);
}

uint64_t sub_132F30()
{
  return v0;
}

uint64_t sub_132F3C()
{
  return swift_release();
}

uint64_t sub_132F68()
{
  return v0;
}

uint64_t type metadata accessor for WellnessLoggingCATPatternsExecutor(uint64_t a1)
{
  return sub_95FB8(a1, (uint64_t *)&unk_206E60);
}

uint64_t sub_132FA4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_132FE4()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_2694(&qword_201E28);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_A620();
  sub_2694(&qword_2027C8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ADCF0;
  os_log_type_t v6 = (uint64_t *)(v5 + 48);
  sub_141A38();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v9;
  sub_9FA8(v2, v0, &qword_201E28);
  uint64_t v10 = sub_1AC1E0();
  sub_982B8(v0);
  if (v11)
  {
    sub_A068(v0, &qword_201E28);
    *(_OWORD *)os_log_type_t v6 = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
  }
  else
  {
    *(void *)(v5 + 72) = v10;
    sub_B5B0(v6);
    sub_141600();
    sub_9884C();
    v12();
  }
  return v5;
}

void sub_1330FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_A638();
  a19 = v24;
  a20 = v25;
  uint64_t v26 = sub_2694(&qword_201E28);
  uint64_t v27 = sub_53D4(v26);
  __chkstk_darwin(v27);
  sub_98778();
  __chkstk_darwin(v28);
  sub_A754();
  __chkstk_darwin(v29);
  sub_141B00();
  __chkstk_darwin(v30);
  uint64_t v32 = (int *)((char *)&a9 - v31);
  sub_2694(&qword_2027C8);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_1B1080;
  *(void *)(v33 + 32) = 0xD000000000000016;
  *(void *)(v33 + 40) = 0x80000000001BACE0;
  sub_9FA8(v21, (uint64_t)v32, &qword_201E28);
  uint64_t v34 = sub_1AC1E0();
  sub_982B8((uint64_t)v32);
  if (v35)
  {
    sub_A068((uint64_t)v32, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v33 + 72) = v34;
    sub_B5B0((uint64_t *)(v33 + 48));
    sub_141600();
    sub_9884C();
    v36();
  }
  sub_98CCC();
  *(void *)(v33 + 80) = 0xD000000000000016;
  *(void *)(v33 + 88) = v37;
  uint64_t v38 = type metadata accessor for WellnessLoggingBloodPressureParameters(0);
  uint64_t v39 = sub_141D34(v38);
  sub_9FA8(v39, v23, &qword_201E28);
  sub_982B8(v23);
  if (v35)
  {
    sub_A068(v23, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v33 + 120) = v34;
    sub_B5B0((uint64_t *)(v33 + 96));
    sub_141600();
    sub_9884C();
    v40();
  }
  sub_141A38();
  *(void *)(v33 + 128) = v41;
  *(void *)(v33 + 136) = v42;
  sub_9FA8(v21 + v32[6], v22, &qword_201E28);
  sub_982B8(v22);
  if (v35)
  {
    sub_A068(v22, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v33 + 168) = v34;
    sub_B5B0((uint64_t *)(v33 + 144));
    sub_141600();
    sub_9884C();
    v43();
  }
  *(void *)(v33 + 176) = 0x696C6F7473616964;
  *(void *)(v33 + 184) = 0xE900000000000063;
  sub_98588();
  if (v45)
  {
    uint64_t v46 = 0;
    *(void *)(v33 + 200) = 0;
    *(void *)(v33 + 208) = 0;
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v47 = *v44;
    uint64_t v46 = &type metadata for Double;
  }
  *(void *)(v33 + 192) = v47;
  *(void *)(v33 + 216) = v46;
  *(void *)(v33 + 224) = 0x6144646567676F6CLL;
  *(void *)(v33 + 232) = 0xEA00000000006574;
  uint64_t v48 = *(void *)(v21 + v32[8]);
  if (v48)
  {
    uint64_t v49 = sub_1AC100();
    uint64_t v50 = v48;
  }
  else
  {
    uint64_t v49 = sub_990E4();
    *(void *)(v33 + 248) = 0;
    *(void *)(v33 + 256) = 0;
  }
  *(void *)(v33 + 240) = v50;
  *(void *)(v33 + 264) = v49;
  *(void *)(v33 + 272) = 0x63696C6F74737973;
  *(void *)(v33 + 280) = 0xE800000000000000;
  sub_98588();
  if (v52)
  {
    uint64_t v53 = 0;
    *(void *)(v33 + 296) = 0;
    *(void *)(v33 + 304) = 0;
    uint64_t v54 = 0;
  }
  else
  {
    uint64_t v54 = *v51;
    uint64_t v53 = &type metadata for Double;
  }
  *(void *)(v33 + 288) = v54;
  *(void *)(v33 + 312) = v53;
  *(void *)(v33 + 320) = 1953066613;
  *(void *)(v33 + 328) = 0xE400000000000000;
  sub_9FA8(v21 + v32[10], v20, &qword_201E28);
  sub_982B8(v20);
  if (v35)
  {
    swift_retain();
    sub_A068(v20, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v33 + 360) = v34;
    sub_B5B0((uint64_t *)(v33 + 336));
    sub_141600();
    sub_984D4();
    v55();
    swift_retain();
  }
  sub_A56C();
}

void sub_1334C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1334F8((uint64_t)type metadata accessor for WellnessLoggingDistanceCyclingParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_1334E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1334F8((uint64_t)type metadata accessor for WellnessLoggingDistanceWalkingRunningParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_1334F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_A638();
  a19 = v24;
  a20 = v25;
  uint64_t v27 = v26;
  uint64_t v28 = sub_2694(&qword_201E28);
  uint64_t v29 = sub_53D4(v28);
  __chkstk_darwin(v29);
  sub_98338();
  __chkstk_darwin(v30);
  sub_A754();
  __chkstk_darwin(v31);
  sub_141B00();
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&a9 - v33;
  sub_2694(&qword_2027C8);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1B1080;
  long long v36 = (uint64_t *)(v35 + 48);
  sub_141CB4(v35, (uint64_t)"actionAceCommandString");
  uint64_t v37 = sub_1AC1E0();
  sub_982B8((uint64_t)v34);
  if (v38)
  {
    sub_A068((uint64_t)v34, &qword_201E28);
    *(_OWORD *)long long v36 = 0u;
    *(_OWORD *)(v35 + 64) = 0u;
  }
  else
  {
    *(void *)(v35 + 72) = v37;
    sub_B5B0(v36);
    sub_141600();
    sub_9884C();
    v39();
  }
  uint64_t v40 = sub_141E6C((uint64_t)"changeAceCommandString");
  uint64_t v41 = ((uint64_t (*)(uint64_t))v27)(v40);
  uint64_t v42 = sub_141D34(v41);
  sub_9FA8(v42, (uint64_t)v23, &qword_201E28);
  sub_982B8((uint64_t)v23);
  if (v38)
  {
    sub_A068((uint64_t)v23, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v35 + 120) = v37;
    sub_B5B0((uint64_t *)(v35 + 96));
    sub_141600();
    sub_9884C();
    v43();
  }
  uint64_t v44 = sub_141B3C();
  sub_9FA8(v44, v22, &qword_201E28);
  sub_982B8(v22);
  if (v38)
  {
    sub_A068(v22, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v35 + 168) = v37;
    sub_B5B0(v23);
    sub_141600();
    sub_9884C();
    v45();
  }
  sub_141B14();
  if (v22)
  {
    uint64_t v46 = sub_1AC100();
    uint64_t v47 = v22;
  }
  else
  {
    uint64_t v47 = 0;
    uint64_t v46 = 0;
    *(void *)(v35 + 200) = 0;
    *(void *)(v35 + 208) = 0;
  }
  *(void *)(v35 + 192) = v47;
  *(void *)(v35 + 216) = v46;
  strcpy((char *)(v35 + 224), "lowConfidence");
  *(_WORD *)(v35 + 238) = -4864;
  *(unsigned char *)(v35 + 240) = *(unsigned char *)(v20 + *(int *)(v27 + 32));
  *(void *)(v35 + 264) = &type metadata for Bool;
  *(void *)(v35 + 272) = 1953066613;
  *(void *)(v35 + 280) = 0xE400000000000000;
  sub_9FA8(v20 + *(int *)(v27 + 36), v21, &qword_201E28);
  sub_982B8(v21);
  if (v38)
  {
    swift_retain();
    sub_A068(v21, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v35 + 312) = v37;
    sub_B5B0((uint64_t *)(v35 + 288));
    sub_141600();
    sub_984D4();
    v48();
    swift_retain();
  }
  sub_141D8C();
  *(void *)(v35 + 320) = v49;
  *(void *)(v35 + 328) = v50;
  sub_98588();
  if (v52)
  {
    uint64_t v53 = 0;
    *(void *)(v35 + 344) = 0;
    *(void *)(v35 + 352) = 0;
    uint64_t v54 = 0;
  }
  else
  {
    uint64_t v54 = *v51;
    uint64_t v53 = &type metadata for Double;
  }
  *(void *)(v35 + 336) = v54;
  *(void *)(v35 + 360) = v53;
  sub_A56C();
}

void sub_133864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1334F8((uint64_t)type metadata accessor for WellnessLoggingDistanceWheelchairParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_13387C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1334F8((uint64_t)type metadata accessor for WellnessLoggingFlightsClimbedParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_133894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_134A0C((uint64_t)type metadata accessor for WellnessLoggingGenericDatatypeParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_1338AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_A638();
  a19 = v24;
  a20 = v25;
  uint64_t v26 = v21;
  uint64_t v27 = sub_2694(&qword_201E28);
  uint64_t v28 = sub_53D4(v27);
  __chkstk_darwin(v28);
  sub_98778();
  __chkstk_darwin(v29);
  sub_141C24();
  __chkstk_darwin(v30);
  sub_141B00();
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&a9 - v32;
  sub_2694(&qword_2027C8);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1B10B0;
  *(void *)(v34 + 32) = 0xD000000000000016;
  *(void *)(v34 + 40) = 0x80000000001BACE0;
  sub_9FA8(v26, (uint64_t)v33, &qword_201E28);
  uint64_t v35 = sub_1AC1E0();
  sub_982B8((uint64_t)v33);
  if (v36)
  {
    sub_A068((uint64_t)v33, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v34 + 72) = v35;
    sub_B5B0((uint64_t *)(v34 + 48));
    sub_141600();
    sub_9884C();
    v37();
  }
  sub_98CCC();
  *(void *)(v34 + 80) = 0xD000000000000016;
  *(void *)(v34 + 88) = v38;
  uint64_t v39 = (int *)type metadata accessor for WellnessLoggingHeightParameters(0);
  sub_9FA8(v26 + v39[5], v23, &qword_201E28);
  sub_982B8(v23);
  if (v36)
  {
    sub_A068(v23, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v34 + 120) = v35;
    sub_B5B0((uint64_t *)(v34 + 96));
    sub_141600();
    sub_9884C();
    v40();
  }
  sub_141A38();
  *(void *)(v34 + 128) = v41;
  *(void *)(v34 + 136) = v42;
  sub_9FA8(v26 + v39[6], v22, &qword_201E28);
  sub_982B8(v22);
  if (v36)
  {
    sub_A068(v22, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v34 + 168) = v35;
    sub_B5B0((uint64_t *)(v34 + 144));
    sub_141600();
    sub_9884C();
    v43();
  }
  *(void *)(v34 + 176) = 0x746867696568;
  *(void *)(v34 + 184) = 0xE600000000000000;
  uint64_t v44 = *(void *)(v26 + v39[7]);
  if (v44)
  {
    uint64_t v45 = sub_1ABF10();
    uint64_t v46 = v44;
  }
  else
  {
    uint64_t v45 = sub_990E4();
    *(void *)(v34 + 200) = 0;
    *(void *)(v34 + 208) = 0;
  }
  *(void *)(v34 + 192) = v46;
  *(void *)(v34 + 216) = v45;
  *(void *)(v34 + 224) = 0x6144646567676F6CLL;
  *(void *)(v34 + 232) = 0xEA00000000006574;
  uint64_t v47 = *(void *)(v26 + v39[8]);
  if (v47)
  {
    uint64_t v48 = sub_1AC100();
    uint64_t v49 = v47;
  }
  else
  {
    uint64_t v48 = sub_990E4();
    *(void *)(v34 + 248) = 0;
    *(void *)(v34 + 256) = 0;
  }
  *(void *)(v34 + 240) = v49;
  *(void *)(v34 + 264) = v48;
  *(void *)(v34 + 272) = 1953066613;
  *(void *)(v34 + 280) = 0xE400000000000000;
  sub_9FA8(v26 + v39[9], v20, &qword_201E28);
  sub_982B8(v20);
  if (v36)
  {
    swift_retain();
    swift_retain();
    sub_A068(v20, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v34 + 312) = v35;
    sub_B5B0((uint64_t *)(v34 + 288));
    sub_141600();
    sub_984D4();
    v50();
    swift_retain();
    swift_retain();
  }
  sub_A56C();
}

uint64_t sub_133C40()
{
  uint64_t v1 = sub_2694(&qword_201E28);
  uint64_t v2 = sub_53D4(v1);
  __chkstk_darwin(v2);
  sub_E548();
  uint64_t v5 = v4 - v3;
  sub_2694(&qword_2027C8);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1AF720;
  uint64_t v7 = (uint64_t *)(v6 + 48);
  sub_98CCC();
  *(void *)(v8 + 32) = 0xD000000000000010;
  *(void *)(v8 + 40) = v9;
  sub_9FA8(v0, v5, &qword_201E28);
  uint64_t v10 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v10) == 1)
  {
    sub_A068(v5, &qword_201E28);
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
  }
  else
  {
    *(void *)(v6 + 72) = v10;
    sub_B5B0(v7);
    sub_A5C0();
    (*(void (**)(void))(v11 + 32))();
  }
  sub_D836C();
  *(void *)(v6 + 80) = v12;
  *(void *)(v6 + 88) = v13;
  char v14 = *(unsigned char *)(v0
                 + *(int *)(type metadata accessor for WellnessLoggingLogMedAsScheduledConfirmationParameters(0) + 20));
  *(void *)(v6 + 120) = &type metadata for Bool;
  *(unsigned char *)(v6 + 96) = v14;
  return v6;
}

void sub_133DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_133DE4((uint64_t)type metadata accessor for WellnessLoggingLogSpecificMedRejectedConfirmationResultSetParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_133DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_133DE4((uint64_t)type metadata accessor for WellnessLoggingLogGenericMedRejectedConfirmationResultSetParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_133DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_A638();
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  uint64_t v27 = sub_2694(&qword_201E28);
  uint64_t v28 = sub_53D4(v27);
  __chkstk_darwin(v28);
  sub_98338();
  __chkstk_darwin(v29);
  sub_141C24();
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&a9 - v31;
  sub_2694(&qword_2027C8);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_1B3A80;
  uint64_t v34 = sub_141EA0(v33, 0xD000000000000020);
  *(unsigned char *)(v34 + 48) = v35;
  *(void *)(v34 + 72) = &type metadata for Bool;
  *(void *)(v34 + 80) = 0x6E69577473726966;
  *(void *)(v34 + 88) = 0xEF657A6953776F64;
  if (*(unsigned char *)(v20 + 16))
  {
    char v36 = 0;
    *(void *)(v33 + 104) = 0;
    *(void *)(v33 + 112) = 0;
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = *(void *)(v20 + 8);
    char v36 = &type metadata for Double;
  }
  *(void *)(v33 + 120) = v36;
  strcpy((char *)(v33 + 128), "isConclusion");
  *(unsigned char *)(v33 + 141) = 0;
  *(_WORD *)(v33 + 142) = -5120;
  *(unsigned char *)(v33 + 144) = *(unsigned char *)(v20 + 17);
  *(void *)(v33 + 168) = &type metadata for Bool;
  strcpy((char *)(v33 + 176), "isFirstWindow");
  *(_WORD *)(v33 + 190) = -4864;
  *(unsigned char *)(v33 + 192) = *(unsigned char *)(v20 + 18);
  *(void *)(v33 + 216) = &type metadata for Bool;
  strcpy((char *)(v33 + 224), "isLastWindow");
  *(unsigned char *)(v33 + 237) = 0;
  *(_WORD *)(v33 + 238) = -5120;
  *(unsigned char *)(v33 + 240) = *(unsigned char *)(v20 + 19);
  *(void *)(v33 + 264) = &type metadata for Bool;
  *(void *)(v33 + 272) = 0xD000000000000016;
  *(void *)(v33 + 96) = v37;
  sub_D836C();
  *(void *)(v33 + 280) = v38;
  *(unsigned char *)(v33 + 288) = *(unsigned char *)(v20 + 20);
  *(void *)(v33 + 312) = v39;
  *(void *)(v33 + 320) = 0x736D657469;
  *(void *)(v33 + 328) = 0xE500000000000000;
  uint64_t v40 = *(void *)(v20 + 24);
  uint64_t v41 = sub_2694(&qword_204E78);
  *(void *)(v33 + 336) = v40;
  *(void *)(v33 + 360) = v41;
  *(void *)(v33 + 368) = 0xD000000000000010;
  sub_98CCC();
  *(void *)(v33 + 376) = v42;
  uint64_t v43 = (int *)v26(0);
  sub_9FA8(v20 + v43[11], (uint64_t)v32, &qword_201E28);
  uint64_t v44 = sub_1AC1E0();
  sub_141EB4((uint64_t)v32);
  if (v45)
  {
    swift_bridgeObjectRetain();
    sub_A068((uint64_t)v32, &qword_201E28);
    *(_OWORD *)(v33 + 384) = 0u;
    *(_OWORD *)(v33 + 400) = 0u;
  }
  else
  {
    *(void *)(v33 + 408) = v44;
    sub_B5B0((uint64_t *)(v33 + 384));
    sub_A5C0();
    (*(void (**)(void))(v46 + 32))();
    swift_bridgeObjectRetain();
  }
  *(void *)(v33 + 416) = 0x656D695464656DLL;
  *(void *)(v33 + 424) = 0xE700000000000000;
  sub_9FA8(v20 + v43[12], v22, &qword_201E28);
  sub_141EB4(v22);
  if (v45)
  {
    sub_A068(v22, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v33 + 456) = v44;
    sub_B5B0((uint64_t *)(v33 + 432));
    sub_A5C0();
    (*(void (**)(void))(v47 + 32))();
  }
  sub_D836C();
  *(void *)(v33 + 464) = v48;
  *(void *)(v33 + 472) = v49;
  sub_98588();
  if (v51)
  {
    char v52 = 0;
    *(void *)(v33 + 488) = 0;
    *(void *)(v33 + 496) = 0;
    uint64_t v53 = 0;
  }
  else
  {
    uint64_t v53 = *v50;
    char v52 = &type metadata for Double;
  }
  *(void *)(v33 + 480) = v53;
  *(void *)(v33 + 504) = v52;
  *(void *)(v33 + 512) = 0xD000000000000011;
  sub_98CCC();
  *(void *)(v33 + 520) = v54;
  sub_98588();
  if (v56)
  {
    uint64_t v57 = 0;
    *(_OWORD *)(v33 + 536) = 0u;
    uint64_t v58 = 0;
  }
  else
  {
    uint64_t v58 = *v55;
    uint64_t v57 = &type metadata for Double;
  }
  *(void *)(v33 + 528) = v58;
  *(void *)(v33 + 552) = v57;
  *(void *)(v33 + 560) = 0xD000000000000018;
  *(void *)(v33 + 568) = 0x80000000001BC760;
  sub_9FA8(v20 + v43[15], v21, &qword_201E28);
  sub_141EB4(v21);
  if (v45)
  {
    sub_A068(v21, &qword_201E28);
    *(_OWORD *)(v33 + 576) = 0u;
    *(_OWORD *)(v33 + 592) = 0u;
  }
  else
  {
    *(void *)(v33 + 600) = v44;
    sub_B5B0((uint64_t *)(v33 + 576));
    sub_A5C0();
    (*(void (**)(void))(v59 + 32))();
  }
  *(void *)(v33 + 608) = 0x6574496C61746F74;
  *(void *)(v33 + 616) = 0xEA0000000000736DLL;
  uint64_t v60 = (uint64_t *)(v20 + v43[16]);
  if (v60[1])
  {
    uint64_t v61 = 0;
    *(_OWORD *)(v33 + 632) = 0u;
    uint64_t v62 = 0;
  }
  else
  {
    uint64_t v62 = *v60;
    uint64_t v61 = &type metadata for Double;
  }
  *(void *)(v33 + 624) = v62;
  *(void *)(v33 + 648) = v61;
  *(void *)(v33 + 656) = 0x6953776F646E6977;
  *(void *)(v33 + 664) = 0xEA0000000000657ALL;
  sub_98588();
  if (v64)
  {
    unint64_t v65 = 0;
    *(_OWORD *)(v33 + 680) = 0u;
    uint64_t v66 = 0;
  }
  else
  {
    uint64_t v66 = *v63;
    unint64_t v65 = &type metadata for Double;
  }
  *(void *)(v33 + 672) = v66;
  *(void *)(v33 + 696) = v65;
  sub_A56C();
}

void sub_134314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_98838();
  a17 = v21;
  a18 = v22;
  uint64_t v23 = v19;
  uint64_t v24 = sub_2694(&qword_201E28);
  uint64_t v25 = sub_53D4(v24);
  __chkstk_darwin(v25);
  sub_98778();
  __chkstk_darwin(v26);
  sub_141C24();
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&a9 - v28;
  sub_2694(&qword_2027C8);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1B10B0;
  sub_98CCC();
  *(void *)(v31 + 32) = 0xD000000000000016;
  *(void *)(v31 + 40) = v32;
  sub_9FA8(v23, (uint64_t)v29, &qword_201E28);
  uint64_t v33 = sub_1AC1E0();
  sub_982B8((uint64_t)v29);
  if (v34)
  {
    sub_A068((uint64_t)v29, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v30 + 72) = v33;
    sub_B5B0((uint64_t *)(v30 + 48));
    sub_141600();
    sub_9884C();
    v35();
  }
  sub_141A38();
  *(void *)(v30 + 80) = v36;
  *(void *)(v30 + 88) = v37;
  uint64_t v38 = (int *)type metadata accessor for WellnessLoggingMenstruationParameters(0);
  sub_9FA8(v23 + v38[5], v20, &qword_201E28);
  sub_982B8(v20);
  if (v34)
  {
    sub_A068(v20, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v30 + 120) = v33;
    sub_B5B0((uint64_t *)(v30 + 96));
    sub_141600();
    sub_9884C();
    v39();
  }
  *(void *)(v30 + 128) = 1702125924;
  *(void *)(v30 + 136) = 0xE400000000000000;
  uint64_t v40 = *(void *)(v23 + v38[6]);
  if (v40)
  {
    uint64_t v41 = sub_1AC100();
    uint64_t v42 = v40;
  }
  else
  {
    uint64_t v41 = sub_990E4();
    *(void *)(v30 + 152) = 0;
    *(void *)(v30 + 160) = 0;
  }
  *(void *)(v30 + 144) = v42;
  *(void *)(v30 + 168) = v41;
  *(void *)(v30 + 176) = 0xD000000000000017;
  sub_98CCC();
  *(void *)(v30 + 184) = v43;
  *(unsigned char *)(v30 + 192) = *(unsigned char *)(v23 + v38[7]);
  *(void *)(v30 + 216) = &type metadata for Bool;
  *(void *)(v30 + 224) = 2003790950;
  *(void *)(v30 + 232) = 0xE400000000000000;
  uint64_t v44 = v23 + v38[8];
  if (*(unsigned char *)(v44 + 8))
  {
    char v45 = 0;
    *(void *)(v30 + 248) = 0;
    *(void *)(v30 + 256) = 0;
    uint64_t v46 = 0;
  }
  else
  {
    uint64_t v46 = *(void *)v44;
    char v45 = &type metadata for Double;
  }
  *(void *)(v30 + 240) = v46;
  *(void *)(v30 + 264) = v45;
  *(void *)(v30 + 272) = 0xD000000000000016;
  *(void *)(v30 + 280) = 0x80000000001BC590;
  sub_9FA8(v23 + v38[9], v18, &qword_201E28);
  sub_982B8(v18);
  if (v34)
  {
    swift_retain();
    sub_A068(v18, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v30 + 312) = v33;
    sub_B5B0((uint64_t *)(v30 + 288));
    sub_141600();
    sub_984D4();
    v47();
    swift_retain();
  }
  sub_987C4();
}

uint64_t sub_134628()
{
  uint64_t v2 = sub_2694(&qword_201E28);
  uint64_t v3 = sub_53D4(v2);
  __chkstk_darwin(v3);
  sub_A620();
  sub_2694(&qword_2027C8);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B08C0;
  *(void *)(v4 + 32) = 0xD000000000000013;
  *(void *)(v4 + 40) = 0x80000000001BC820;
  *(unsigned char *)(v4 + 48) = *v1;
  *(void *)(v4 + 72) = &type metadata for Bool;
  strcpy((char *)(v4 + 80), "isQueryByName");
  *(_WORD *)(v4 + 94) = -4864;
  *(unsigned char *)(v4 + 96) = v1[1];
  uint64_t v5 = (uint64_t *)(v4 + 144);
  sub_141E20();
  *(void *)(v6 + 120) = v8;
  *(void *)(v6 + 128) = v7;
  sub_141ED4();
  *(void *)(v9 + 136) = v10;
  uint64_t v11 = type metadata accessor for WellnessLoggingPhoneMedicationQueryingErrorParameters(0);
  sub_9FA8((uint64_t)&v1[*(int *)(v11 + 24)], v0, &qword_201E28);
  uint64_t v12 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, v12) == 1)
  {
    sub_A068(v0, &qword_201E28);
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
  }
  else
  {
    *(void *)(v4 + 168) = v12;
    sub_B5B0(v5);
    sub_A5C0();
    (*(void (**)(void))(v13 + 32))();
  }
  return v4;
}

void sub_1347C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1334F8((uint64_t)type metadata accessor for WellnessLoggingPushCountParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

uint64_t sub_1347D8()
{
  uint64_t v2 = sub_2694(&qword_201E28);
  uint64_t v3 = sub_53D4(v2);
  __chkstk_darwin(v3);
  sub_A620();
  sub_2694(&qword_2027C8);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = sub_141EA0(v4, 0xD000000000000013);
  *(unsigned char *)(v5 + 48) = v6;
  *(_OWORD *)(v5 + 16) = v7;
  sub_D836C();
  *(void *)(v8 + 80) = v9;
  *(void *)(v8 + 88) = v10;
  *(unsigned char *)(v8 + 96) = v1[1];
  *(void *)(v8 + 120) = v11;
  *(void *)(v8 + 128) = v9 + 9;
  *(void *)(v8 + 72) = v11;
  sub_D836C();
  *(void *)(v12 + 136) = v13;
  *(unsigned char *)(v12 + 144) = v1[2];
  *(void *)(v12 + 168) = v14;
  strcpy((char *)(v12 + 176), "isQueryByName");
  *(_WORD *)(v12 + 190) = -4864;
  *(unsigned char *)(v12 + 192) = v1[3];
  *(void *)(v12 + 216) = v14;
  strcpy((char *)(v12 + 224), "medDoesntExist");
  *(unsigned char *)(v12 + 239) = -18;
  *(unsigned char *)(v12 + 240) = v1[4];
  *(void *)(v12 + 264) = v14;
  *(void *)(v12 + 272) = v15 + 3;
  *(void *)(v12 + 280) = 0x80000000001BC8B0;
  *(unsigned char *)(v12 + 288) = v1[5];
  uint64_t v16 = v12 + 336;
  sub_141E20();
  *(void *)(v17 + 312) = v19;
  *(void *)(v17 + 320) = v18;
  sub_141ED4();
  *(void *)(v20 + 328) = v21;
  uint64_t v22 = type metadata accessor for WellnessLoggingWatchMedicationQueryingErrorParameters(0);
  sub_9FA8((uint64_t)&v1[*(int *)(v22 + 40)], v0, &qword_201E28);
  uint64_t v23 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, v23) == 1)
  {
    sub_A068(v0, &qword_201E28);
    *(_OWORD *)uint64_t v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
  }
  else
  {
    *(void *)(v4 + 360) = v23;
    sub_B5B0((uint64_t *)v16);
    sub_A5C0();
    (*(void (**)(void))(v24 + 32))();
  }
  return v4;
}

void sub_1349F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_134A0C((uint64_t)type metadata accessor for WellnessLoggingWeightParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_134A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_A638();
  a19 = v24;
  a20 = v25;
  uint64_t v27 = v26;
  uint64_t v28 = sub_2694(&qword_201E28);
  uint64_t v29 = sub_53D4(v28);
  __chkstk_darwin(v29);
  sub_98338();
  __chkstk_darwin(v30);
  sub_A754();
  __chkstk_darwin(v31);
  sub_141B00();
  __chkstk_darwin(v32);
  char v34 = (char *)&a9 - v33;
  sub_2694(&qword_2027C8);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1B10B0;
  uint64_t v36 = (uint64_t *)(v35 + 48);
  sub_141CB4(v35, (uint64_t)"actionAceCommandString");
  uint64_t v37 = sub_1AC1E0();
  sub_982B8((uint64_t)v34);
  if (v38)
  {
    sub_A068((uint64_t)v34, &qword_201E28);
    *(_OWORD *)uint64_t v36 = 0u;
    *(_OWORD *)(v35 + 64) = 0u;
  }
  else
  {
    *(void *)(v35 + 72) = v37;
    sub_B5B0(v36);
    sub_141600();
    sub_9884C();
    v39();
  }
  uint64_t v40 = sub_141E6C((uint64_t)"changeAceCommandString");
  uint64_t v41 = ((uint64_t (*)(uint64_t))v27)(v40);
  uint64_t v42 = sub_141D34(v41);
  sub_9FA8(v42, (uint64_t)v23, &qword_201E28);
  sub_982B8((uint64_t)v23);
  if (v38)
  {
    sub_A068((uint64_t)v23, &qword_201E28);
    sub_98AA0();
  }
  else
  {
    *(void *)(v35 + 120) = v37;
    sub_B5B0((uint64_t *)(v35 + 96));
    sub_141600();
    sub_9884C();
    v43();
  }
  uint64_t v44 = sub_141B3C();
  sub_9FA8(v44, v22, &qword_201E28);
  sub_982B8(v22);
  if (v38)
  {
    sub_A068(v22, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v35 + 168) = v37;
    sub_B5B0(v23);
    sub_141600();
    sub_9884C();
    v45();
  }
  sub_141B14();
  if (v22)
  {
    uint64_t v46 = sub_1AC100();
    uint64_t v47 = v22;
  }
  else
  {
    uint64_t v47 = 0;
    uint64_t v46 = 0;
    *(void *)(v35 + 200) = 0;
    *(void *)(v35 + 208) = 0;
  }
  *(void *)(v35 + 192) = v47;
  *(void *)(v35 + 216) = v46;
  *(void *)(v35 + 224) = 1953066613;
  *(void *)(v35 + 232) = 0xE400000000000000;
  sub_9FA8(v20 + *(int *)(v27 + 32), v21, &qword_201E28);
  sub_982B8(v21);
  if (v38)
  {
    swift_retain();
    sub_A068(v21, &qword_201E28);
    sub_9876C();
  }
  else
  {
    *(void *)(v35 + 264) = v37;
    sub_B5B0((uint64_t *)(v35 + 240));
    sub_141600();
    sub_984D4();
    v48();
    swift_retain();
  }
  sub_141D8C();
  *(void *)(v35 + 272) = v49;
  *(void *)(v35 + 280) = v50;
  sub_98588();
  if (v52)
  {
    uint64_t v53 = 0;
    *(void *)(v35 + 296) = 0;
    *(void *)(v35 + 304) = 0;
    uint64_t v54 = 0;
  }
  else
  {
    uint64_t v54 = *v51;
    uint64_t v53 = &type metadata for Double;
  }
  *(void *)(v35 + 288) = v54;
  *(void *)(v35 + 312) = v53;
  sub_A56C();
}

uint64_t sub_134D3C()
{
  sub_A364();
  v0[2] = v1;
  v0[3] = v2;
  uint64_t v3 = sub_2694(&qword_201E28);
  sub_53D4(v3);
  v0[4] = sub_A42C();
  uint64_t v4 = type metadata accessor for WellnessLoggingAskForValueParameters(0);
  sub_53D4(v4);
  v0[5] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_134DDC()
{
  sub_E588();
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = sub_1AC1E0();
  sub_141D60(v2);
  sub_2F2B8(*(unsigned char *)(v3 + 16));
  sub_1ACE40();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, v4);
  sub_9EA0(v1, v2);
  uint64_t v5 = sub_132FE4();
  sub_141E00(v5);
  uint64_t v6 = sub_9826C();
  uint64_t v7 = (void *)sub_141E40(v6);
  *uint64_t v7 = v8;
  v7[1] = sub_134EF0;
  return v10(0xD00000000000001BLL, 0x80000000001BC690, v1);
}

uint64_t sub_134EF0()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 64) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 72) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_134FF8()
{
  sub_47634();
  sub_139388(*(void *)(v0 + 40), (void (*)(void))type metadata accessor for WellnessLoggingAskForValueParameters);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = sub_141BB8();
  return v2(v1);
}

uint64_t sub_13508C()
{
  sub_47634();
  sub_139388(*(void *)(v0 + 40), (void (*)(void))type metadata accessor for WellnessLoggingAskForValueParameters);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_141D7C();
  return v1();
}

uint64_t sub_135120()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessLoggingAskForValueParameters(v3);
  sub_53D4(v4);
  *(void *)(v0 + 40) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_135198()
{
  sub_47634();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 16);
  uint64_t v3 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, v3);
  uint64_t v4 = sub_984E4();
  v2(v4);
  uint64_t v5 = sub_132FE4();
  sub_141E00(v5);
  uint64_t v6 = sub_50774();
  uint64_t v7 = (void *)sub_141E40(v6);
  *uint64_t v7 = v8;
  v7[1] = sub_135278;
  unint64_t v9 = sub_988A0(27);
  return v10(v9);
}

uint64_t sub_135278()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 64) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 72) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_135380()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 40), (void (*)(void))type metadata accessor for WellnessLoggingAskForValueParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_141BB8();
  return v2(v1);
}

uint64_t sub_1353F8()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 40), (void (*)(void))type metadata accessor for WellnessLoggingAskForValueParameters);
  swift_task_dealloc();
  sub_141D7C();
  return v1();
}

uint64_t sub_135470()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessLoggingBloodPressureParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "1355AC: call analysis failed (funcsize=79)"

uint64_t sub_135630()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_135738()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingBloodPressureParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_1357B0()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingBloodPressureParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_135828()
{
  sub_A364();
  uint64_t v4 = sub_141974(v1, v2, v3);
  uint64_t v5 = type metadata accessor for WellnessLoggingDistanceCyclingParameters(v4);
  *(void *)(v0 + 40) = v5;
  sub_53D4(v5);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

#error "1358F0: call analysis failed (funcsize=50)"

uint64_t sub_135978()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_135A80()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingDistanceCyclingParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_135AF8()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingDistanceCyclingParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_135B70()
{
  sub_A364();
  uint64_t v4 = sub_141974(v1, v2, v3);
  uint64_t v5 = type metadata accessor for WellnessLoggingDistanceWalkingRunningParameters(v4);
  *(void *)(v0 + 40) = v5;
  sub_53D4(v5);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

#error "135C38: call analysis failed (funcsize=48)"

uint64_t sub_135CB8()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_135DC0()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingDistanceWalkingRunningParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_135E38()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingDistanceWalkingRunningParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_135EB0()
{
  sub_A364();
  uint64_t v4 = sub_141974(v1, v2, v3);
  uint64_t v5 = type metadata accessor for WellnessLoggingDistanceWheelchairParameters(v4);
  *(void *)(v0 + 40) = v5;
  sub_53D4(v5);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

#error "135F78: call analysis failed (funcsize=48)"

uint64_t sub_135FF8()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_136100()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingDistanceWheelchairParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_136178()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingDistanceWheelchairParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_1361F0()
{
  sub_A364();
  uint64_t v4 = sub_141974(v1, v2, v3);
  uint64_t v5 = type metadata accessor for WellnessLoggingFlightsClimbedParameters(v4);
  *(void *)(v0 + 40) = v5;
  sub_53D4(v5);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

#error "1362B8: call analysis failed (funcsize=48)"

uint64_t sub_136338()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_136440()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingFlightsClimbedParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_1364B8()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingFlightsClimbedParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_136530()
{
  sub_A364();
  *(unsigned char *)(v0 + 80) = v1;
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 24) = v3;
  uint64_t v4 = type metadata accessor for WellnessLoggingGenericDatatypeParameters(0);
  *(void *)(v0 + 32) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 40) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "1365FC: call analysis failed (funcsize=50)"

uint64_t sub_136688()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 64) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 72) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_136790()
{
  sub_A364();
  *(unsigned char *)(v0 + 80) = v1;
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 24) = v3;
  uint64_t v4 = type metadata accessor for WellnessLoggingGenericDatatypeParameters(0);
  *(void *)(v0 + 32) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 40) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "13685C: call analysis failed (funcsize=50)"

uint64_t sub_1368E8()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 64) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 72) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1369F0()
{
  sub_A364();
  uint64_t v1 = *(void **)(v0 + 24);
  sub_139388(*(void *)(v0 + 40), (void (*)(void))type metadata accessor for WellnessLoggingGenericDatatypeParameters);

  swift_task_dealloc();
  uint64_t v2 = sub_141BB8();
  return v3(v2);
}

uint64_t sub_136A70()
{
  sub_A364();
  uint64_t v1 = *(void **)(v0 + 24);
  sub_139388(*(void *)(v0 + 40), (void (*)(void))type metadata accessor for WellnessLoggingGenericDatatypeParameters);

  swift_task_dealloc();
  sub_141D7C();
  return v2();
}

uint64_t sub_136AF0()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessLoggingHeightParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "136BC0: call analysis failed (funcsize=53)"

uint64_t sub_136C48()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_136D50()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingHeightParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_136DC8()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingHeightParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_136E40()
{
  sub_A364();
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = v2;
  *(unsigned char *)(v0 + 88) = v3;
  uint64_t v4 = sub_2694(&qword_201E28);
  sub_53D4(v4);
  *(void *)(v0 + 32) = sub_A42C();
  uint64_t v5 = type metadata accessor for WellnessLoggingLogMedAsScheduledConfirmationParameters(0);
  *(void *)(v0 + 40) = v5;
  sub_53D4(v5);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_136EE8()
{
  sub_98364();
  uint64_t v17 = v1;
  sub_7F418();
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 24);
  char v5 = *(unsigned char *)(v0 + 88);
  uint64_t v6 = sub_1AC1E0();
  uint64_t v7 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v2, 1, 1, v6);
  *(unsigned char *)(v2 + *(int *)(v3 + 20)) = v5;
  if (*(void *)(v4 + 24))
  {
    swift_bridgeObjectRetain();
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v9 = *(void *)(v0 + 32);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v9, v7, 1, v6);
  sub_9EA0(v9, v8);
  uint64_t v10 = sub_133C40();
  sub_984F0(v10);
  uint64_t v11 = sub_9826C();
  uint64_t v12 = (void *)sub_984C8(v11);
  void *v12 = v13;
  v12[1] = sub_13702C;
  sub_50838();
  unint64_t v14 = sub_98354(45);
  return v15(v14);
}

uint64_t sub_13702C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *char v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_137134()
{
  sub_47634();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingLogMedAsScheduledConfirmationParameters);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_1371C8()
{
  sub_47634();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingLogMedAsScheduledConfirmationParameters);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_13725C()
{
  sub_A364();
  uint64_t v9 = sub_141AD4(v1, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = type metadata accessor for WellnessLoggingLogSpecificMedRejectedConfirmationResultSetParameters(v9);
  *(void *)(v0 + 56) = v10;
  sub_53D4(v10);
  *(void *)(v0 + 64) = sub_A42C();
  sub_A4F0();
  return sub_141C10(v11, v12, v13);
}

uint64_t sub_1372CC()
{
  uint64_t v2 = sub_141988();
  sub_14173C(v2, v3, v4, v5, v6, v7, v8, v9, v20, v22, *(__int16 *)v24, v24[2]);
  sub_12A518(v0, v25, v26);
  sub_133DE4((uint64_t)type metadata accessor for WellnessLoggingLogSpecificMedRejectedConfirmationResultSetParameters, v10, v11, v12, v13, v14, v15, v16, v21, v23, (uint64_t)v25, (uint64_t)v26, v27, v29, v30, v31, v32, v33, v34,
    v35);
  *(void *)(v1 + 72) = v17;
  uint64_t v18 = (void *)sub_141E4C();
  *(void *)(v1 + 80) = v18;
  *uint64_t v18 = v1;
  v18[1] = sub_1373CC;
  sub_50838();
  return v28(0xD00000000000003BLL);
}

uint64_t sub_1373CC()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 88) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 96) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1374D4()
{
  sub_47634();
  uint64_t v1 = *(void **)(v0 + 40);
  sub_139388(*(void *)(v0 + 64), (void (*)(void))type metadata accessor for WellnessLoggingLogSpecificMedRejectedConfirmationResultSetParameters);

  swift_release();
  swift_task_dealloc();
  uint64_t v2 = sub_99180();
  return v3(v2);
}

uint64_t sub_137564()
{
  sub_47634();
  uint64_t v1 = (void *)v0[5];
  sub_139388(v0[8], (void (*)(void))type metadata accessor for WellnessLoggingLogSpecificMedRejectedConfirmationResultSetParameters);

  swift_release();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1375FC()
{
  sub_A364();
  uint64_t v9 = sub_141AD4(v1, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = type metadata accessor for WellnessLoggingLogGenericMedRejectedConfirmationResultSetParameters(v9);
  *(void *)(v0 + 56) = v10;
  sub_53D4(v10);
  *(void *)(v0 + 64) = sub_A42C();
  sub_A4F0();
  return sub_141C10(v11, v12, v13);
}

uint64_t sub_13766C()
{
  uint64_t v2 = sub_141988();
  sub_14173C(v2, v3, v4, v5, v6, v7, v8, v9, v20, v22, *(__int16 *)v24, v24[2]);
  sub_45694(v0, v25, v26, v27);
  sub_133DE4((uint64_t)type metadata accessor for WellnessLoggingLogGenericMedRejectedConfirmationResultSetParameters, v10, v11, v12, v13, v14, v15, v16, v21, v23, (uint64_t)v25, v26, (uint64_t)v27, v29, v30, v31, v32, v33, v34,
    v35);
  *(void *)(v1 + 72) = v17;
  uint64_t v18 = (void *)sub_141E4C();
  *(void *)(v1 + 80) = v18;
  *uint64_t v18 = v1;
  v18[1] = sub_13776C;
  sub_50838();
  return v28(0xD00000000000003ALL);
}

uint64_t sub_13776C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 88) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 96) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_137874()
{
  sub_47634();
  uint64_t v1 = *(void **)(v0 + 48);
  sub_139388(*(void *)(v0 + 64), (void (*)(void))type metadata accessor for WellnessLoggingLogGenericMedRejectedConfirmationResultSetParameters);
  swift_release();

  swift_task_dealloc();
  uint64_t v2 = sub_99180();
  return v3(v2);
}

uint64_t sub_137904()
{
  sub_47634();
  uint64_t v1 = (void *)v0[6];
  sub_139388(v0[8], (void (*)(void))type metadata accessor for WellnessLoggingLogGenericMedRejectedConfirmationResultSetParameters);
  swift_release();

  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_13799C()
{
  sub_A364();
  uint64_t v4 = sub_141974(v1, v2, v3);
  uint64_t v5 = type metadata accessor for WellnessLoggingMenstruationParameters(v4);
  *(void *)(v0 + 40) = v5;
  sub_53D4(v5);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

#error "137AB8: call analysis failed (funcsize=70)"

uint64_t sub_137B38()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_137C40()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingMenstruationParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_137CB8()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingMenstruationParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_137D30()
{
  sub_A364();
  *(void *)(v0 + 24) = v1;
  *(void *)(v0 + 32) = v2;
  *(void *)(v0 + 16) = v3;
  *(unsigned char *)(v0 + 97) = v4;
  *(unsigned char *)(v0 + 96) = v5;
  uint64_t v6 = sub_2694(&qword_201E28);
  sub_53D4(v6);
  *(void *)(v0 + 40) = sub_A42C();
  uint64_t v7 = type metadata accessor for WellnessLoggingPhoneMedicationQueryingErrorParameters(0);
  *(void *)(v0 + 48) = v7;
  sub_53D4(v7);
  *(void *)(v0 + 56) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_137DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_132494();
  sub_7F418();
  uint64_t v11 = *(unsigned char **)(v10 + 56);
  uint64_t v12 = *(void *)(v10 + 32);
  char v13 = *(unsigned char *)(v10 + 97);
  char v14 = *(unsigned char *)(v10 + 96);
  uint64_t v15 = sub_1AC1E0();
  sub_141C38(v15);
  *uint64_t v11 = v14;
  v11[1] = v13;
  if (v12) {
    sub_1ACE40();
  }
  sub_141BCC();
  *(void *)(v10 + 64) = sub_134628();
  uint64_t v16 = (void *)sub_50774();
  *(void *)(v10 + 72) = v16;
  *uint64_t v16 = v10;
  v16[1] = sub_137EDC;
  sub_988A0(44);
  sub_132444();
  return v20(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
}

uint64_t sub_137EDC()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *char v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 80) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 88) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_137FE4()
{
  sub_47634();
  sub_141E34();
  sub_139388(v0, (void (*)(void))type metadata accessor for WellnessLoggingPhoneMedicationQueryingErrorParameters);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = sub_141E0C();
  return v2(v1);
}

uint64_t sub_138074()
{
  sub_47634();
  sub_141E34();
  sub_139388(v0, (void (*)(void))type metadata accessor for WellnessLoggingPhoneMedicationQueryingErrorParameters);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

uint64_t sub_13810C()
{
  sub_A364();
  uint64_t v4 = sub_141974(v1, v2, v3);
  uint64_t v5 = type metadata accessor for WellnessLoggingPushCountParameters(v4);
  *(void *)(v0 + 40) = v5;
  sub_53D4(v5);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

#error "1381D4: call analysis failed (funcsize=48)"

uint64_t sub_138254()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_13835C()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingPushCountParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_1383D4()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingPushCountParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

uint64_t sub_13844C()
{
  sub_A364();
  uint64_t v1 = (void *)sub_50774();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1384F8;
  return v3(0xD000000000000014, 0x80000000001BC530, &_swiftEmptyArrayStorage);
}

uint64_t sub_1384F8()
{
  sub_A364();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_A304();
  *uint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t sub_1385EC()
{
  sub_A364();
  *(void *)(v0 + 16) = v1;
  *(unsigned char *)(v0 + 77) = v2;
  *(unsigned char *)(v0 + 76) = v3;
  *(unsigned char *)(v0 + 75) = v4;
  *(unsigned char *)(v0 + 74) = v5;
  *(unsigned char *)(v0 + 73) = v6;
  *(unsigned char *)(v0 + 72) = v7;
  uint64_t v8 = type metadata accessor for WellnessLoggingWatchMedicationQueryingErrorParameters(0);
  *(void *)(v0 + 24) = v8;
  sub_53D4(v8);
  *(void *)(v0 + 32) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_138684()
{
  uint64_t v1 = *(unsigned char **)(v0 + 32);
  char v2 = *(unsigned char *)(v0 + 77);
  char v3 = *(unsigned char *)(v0 + 76);
  char v4 = *(unsigned char *)(v0 + 75);
  char v5 = *(unsigned char *)(v0 + 74);
  char v6 = *(unsigned char *)(v0 + 73);
  char v7 = *(unsigned char *)(v0 + 72);
  uint64_t v8 = (uint64_t)&v1[*(int *)(*(void *)(v0 + 24) + 40)];
  sub_1AC1E0();
  sub_141D60(v8);
  *uint64_t v1 = v7;
  v1[1] = v6;
  v1[2] = v5;
  v1[3] = v4;
  v1[4] = v3;
  v1[5] = v2;
  sub_A068(v8, &qword_201E28);
  sub_141D60(v8);
  *(void *)(v0 + 40) = sub_1347D8();
  uint64_t v9 = (void *)sub_50774();
  *(void *)(v0 + 48) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1387C0;
  unint64_t v10 = sub_988A0(44);
  return v11(v10);
}

uint64_t sub_1387C0()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *char v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *char v7 = v6;
  *(void *)(v4 + 56) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 64) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1388C8()
{
  sub_A364();
  sub_139388(v0[4], (void (*)(void))type metadata accessor for WellnessLoggingWatchMedicationQueryingErrorParameters);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[8];
  return v1(v2);
}

uint64_t sub_13894C()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 32), (void (*)(void))type metadata accessor for WellnessLoggingWatchMedicationQueryingErrorParameters);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1389CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_A364();
  *(void *)(v9 + 24) = v10;
  *(void *)(v9 + 32) = a9;
  *(void *)(v9 + 16) = v11;
  *(unsigned char *)(v9 + 101) = v12;
  *(unsigned char *)(v9 + 100) = v13;
  *(unsigned char *)(v9 + 99) = v14;
  *(unsigned char *)(v9 + 98) = v15;
  *(unsigned char *)(v9 + 97) = v16;
  *(unsigned char *)(v9 + 96) = v17;
  uint64_t v18 = sub_2694(&qword_201E28);
  sub_53D4(v18);
  *(void *)(v9 + 40) = sub_A42C();
  uint64_t v19 = type metadata accessor for WellnessLoggingWatchMedicationQueryingErrorParameters(0);
  *(void *)(v9 + 48) = v19;
  sub_53D4(v19);
  *(void *)(v9 + 56) = sub_A42C();
  sub_A4F0();
  return sub_141C10(v20, v21, v22);
}

uint64_t sub_138A84()
{
  uint64_t v1 = *(unsigned char **)(v0 + 56);
  uint64_t v12 = *(void *)(v0 + 32);
  char v11 = *(unsigned char *)(v0 + 101);
  char v2 = *(unsigned char *)(v0 + 100);
  char v3 = *(unsigned char *)(v0 + 99);
  char v4 = *(unsigned char *)(v0 + 98);
  char v5 = *(unsigned char *)(v0 + 97);
  char v6 = *(unsigned char *)(v0 + 96);
  uint64_t v7 = sub_1AC1E0();
  sub_141C38(v7);
  *uint64_t v1 = v6;
  v1[1] = v5;
  v1[2] = v4;
  v1[3] = v3;
  v1[4] = v2;
  v1[5] = v11;
  if (v12) {
    sub_1ACE40();
  }
  sub_141BCC();
  uint64_t v8 = sub_1347D8();
  *(void *)(v0 + 64) = v8;
  char v13 = (uint64_t (*)(unint64_t, unint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:)
                                                                            + async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_138BE4;
  return v13(0xD00000000000002CLL, 0x80000000001BC840, v8);
}

uint64_t sub_138BE4()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *char v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 80) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 88) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_138CEC()
{
  sub_47634();
  sub_141E34();
  sub_139388(v0, (void (*)(void))type metadata accessor for WellnessLoggingWatchMedicationQueryingErrorParameters);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = sub_141E0C();
  return v2(v1);
}

uint64_t sub_138D7C()
{
  sub_47634();
  sub_141E34();
  sub_139388(v0, (void (*)(void))type metadata accessor for WellnessLoggingWatchMedicationQueryingErrorParameters);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  char v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

uint64_t sub_138E14()
{
  sub_A364();
  uint64_t v3 = sub_98308(v1, v2);
  uint64_t v4 = type metadata accessor for WellnessLoggingWeightParameters(v3);
  *(void *)(v0 + 40) = v4;
  sub_53D4(v4);
  *(void *)(v0 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

#error "138F10: call analysis failed (funcsize=64)"

uint64_t sub_138F9C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1390A4()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingWeightParameters);
  swift_task_dealloc();
  uint64_t v1 = sub_98258();
  return v2(v1);
}

uint64_t sub_13911C()
{
  sub_A364();
  sub_139388(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for WellnessLoggingWeightParameters);
  swift_task_dealloc();
  sub_982F8();
  return v1();
}

void sub_139194()
{
}

void sub_1391E8()
{
  sub_A638();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = sub_1AC250();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_E548();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_2694(&qword_201E20);
  uint64_t v10 = sub_53D4(v9);
  __chkstk_darwin(v10);
  sub_E548();
  sub_9FA8(v3, v12 - v11, &qword_201E20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, v1, v4);
  sub_1AC180();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
  sub_A068(v3, &qword_201E20);
  sub_A56C();
}

uint64_t sub_139340()
{
  return type metadata accessor for WellnessLoggingCATPatternsExecutor(0);
}

uint64_t type metadata accessor for WellnessLoggingGenericDatatypeParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_207800);
}

uint64_t type metadata accessor for WellnessLoggingWeightParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_207760);
}

uint64_t sub_139388(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_A5C0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t type metadata accessor for WellnessLoggingPushCountParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_207378);
}

uint64_t type metadata accessor for WellnessLoggingMenstruationParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_2072D8);
}

uint64_t type metadata accessor for WellnessLoggingHeightParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_207420);
}

uint64_t type metadata accessor for WellnessLoggingFlightsClimbedParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_2074C0);
}

uint64_t type metadata accessor for WellnessLoggingDistanceWheelchairParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_207568);
}

uint64_t type metadata accessor for WellnessLoggingDistanceWalkingRunningParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_207610);
}

uint64_t type metadata accessor for WellnessLoggingDistanceCyclingParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_2076B8);
}

uint64_t type metadata accessor for WellnessLoggingBloodPressureParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_207230);
}

uint64_t type metadata accessor for WellnessLoggingAskForValueParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_2071A0);
}

uint64_t type metadata accessor for WellnessLoggingLogSpecificMedRejectedConfirmationResultSetParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_2070E0);
}

uint64_t type metadata accessor for WellnessLoggingLogMedAsScheduledConfirmationParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_207050);
}

uint64_t type metadata accessor for WellnessLoggingLogGenericMedRejectedConfirmationResultSetParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_206F90);
}

uint64_t sub_13957C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_139590);
}

uint64_t sub_139594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1395A8);
}

uint64_t *sub_1395B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

void *sub_1396DC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_1397B4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_139914(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_1399EC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_139B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_139B60);
}

uint64_t sub_139B60()
{
  sub_98BD4();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v3 + 84) == v1)
  {
    uint64_t v4 = sub_98C00();
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, v5, v6);
  }
  else
  {
    unsigned int v8 = *(unsigned __int8 *)(v0 + *(int *)(v2 + 20));
    if (v8 >= 2) {
      return ((v8 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_139BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_139C08);
}

void sub_139C08()
{
  sub_988D0();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = sub_988BC();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, v6, v7, v8);
  }
  else
  {
    *(unsigned char *)(v1 + *(int *)(v2 + 20)) = v0 + 1;
  }
}

void sub_139C80()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_139D14()
{
  sub_98838();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_A1CC();
  if ((*(_DWORD *)(v5 + 80) & 0x20000) != 0)
  {
    sub_141A6C();
  }
  else
  {
    uint64_t v6 = v4;
    *(unsigned char *)uint64_t v3 = *(unsigned char *)v1;
    *(void *)(v3 + 8) = *(void *)(v1 + 8);
    *(unsigned char *)(v3 + 16) = *(unsigned char *)(v1 + 16);
    *(_DWORD *)(v3 + 17) = *(_DWORD *)(v1 + 17);
    *(void *)(v3 + 24) = *(void *)(v1 + 24);
    sub_141D44();
    swift_bridgeObjectRetain();
    if (sub_986A4())
    {
      uint64_t v7 = sub_2694(&qword_201E28);
      uint64_t v8 = sub_53D4(v7);
      sub_98820(v8, v10, *(void *)(v9 + 64));
    }
    else
    {
      sub_141600();
      uint64_t v11 = sub_985F8();
      v12(v11);
      sub_1416AC();
    }
    if (sub_986A4())
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      uint64_t v14 = sub_53D4(v13);
      sub_98820(v14, v16, *(void *)(v15 + 64));
    }
    else
    {
      sub_141600();
      uint64_t v17 = sub_985F8();
      v18(v17);
      sub_1416AC();
    }
    uint64_t v19 = v6[13];
    uint64_t v20 = v6[14];
    uint64_t v21 = v3 + v19;
    uint64_t v22 = v1 + v19;
    *(void *)uint64_t v21 = *(void *)v22;
    *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
    uint64_t v23 = v3 + v20;
    uint64_t v24 = v1 + v20;
    *(void *)uint64_t v23 = *(void *)v24;
    *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
    if (sub_986A4())
    {
      uint64_t v25 = sub_2694(&qword_201E28);
      uint64_t v26 = sub_53D4(v25);
      sub_98820(v26, v28, *(void *)(v27 + 64));
    }
    else
    {
      sub_141600();
      uint64_t v29 = sub_985F8();
      v30(v29);
      sub_1416AC();
    }
    uint64_t v31 = v6[16];
    uint64_t v32 = v6[17];
    uint64_t v33 = v3 + v31;
    uint64_t v34 = v1 + v31;
    *(void *)uint64_t v33 = *(void *)v34;
    *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
    uint64_t v35 = v3 + v32;
    uint64_t v36 = v1 + v32;
    *(void *)uint64_t v35 = *(void *)v36;
    *(unsigned char *)(v35 + 8) = *(unsigned char *)(v36 + 8);
  }
  sub_987C4();
}

uint64_t sub_139F08(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[11];
  uint64_t v5 = sub_1AC1E0();
  if (!sub_CEAD8(v4))
  {
    sub_A5C0();
    uint64_t v6 = sub_141A94();
    v7(v6);
  }
  if (!sub_141A18(a2[12]))
  {
    sub_A5C0();
    uint64_t v8 = sub_141A94();
    v9(v8);
  }
  uint64_t v10 = a1 + a2[15];
  uint64_t result = sub_CEAD8(v10);
  if (!result)
  {
    sub_A5C0();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    return v13(v10, v5);
  }
  return result;
}

void sub_13A00C()
{
  sub_98838();
  uint64_t v5 = sub_141AA4(v3, v4);
  *(void *)(v5 + 24) = *(void *)(v6 + 24);
  sub_141E80();
  swift_bridgeObjectRetain();
  if (sub_986A4())
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    uint64_t v8 = sub_53D4(v7);
    sub_98820(v8, v10, *(void *)(v9 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v11 = sub_985F8();
    v12(v11);
    sub_1416AC();
  }
  if (sub_986A4())
  {
    uint64_t v13 = sub_2694(&qword_201E28);
    uint64_t v14 = sub_53D4(v13);
    sub_98820(v14, v16, *(void *)(v15 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v17 = sub_985F8();
    v18(v17);
    sub_1416AC();
  }
  uint64_t v19 = *(int *)(v2 + 52);
  uint64_t v20 = *(int *)(v2 + 56);
  uint64_t v21 = v0 + v19;
  uint64_t v22 = v1 + v19;
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  uint64_t v23 = v0 + v20;
  uint64_t v24 = v1 + v20;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  if (sub_986A4())
  {
    uint64_t v25 = sub_2694(&qword_201E28);
    uint64_t v26 = sub_53D4(v25);
    sub_98820(v26, v28, *(void *)(v27 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v29 = sub_985F8();
    v30(v29);
    sub_1416AC();
  }
  sub_1418CC();
  sub_987C4();
}

void sub_13A188()
{
  sub_98838();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  *(unsigned char *)uint64_t v3 = *(unsigned char *)v5;
  uint64_t v6 = *(void *)(v5 + 8);
  *(unsigned char *)(v3 + 16) = *(unsigned char *)(v5 + 16);
  *(void *)(v3 + 8) = v6;
  sub_141B94((unsigned char *)v3, (unsigned char *)v5);
  *(void *)(v4 + 24) = *(void *)(v7 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_141D44();
  int v8 = sub_98610();
  if (v0)
  {
    if (!v8)
    {
      sub_141600();
      uint64_t v9 = sub_985F8();
      v10(v9);
      sub_1416AC();
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_A1CC();
  if (v11)
  {
    uint64_t v12 = sub_98A6C();
    v13(v12);
LABEL_6:
    uint64_t v14 = sub_2694(&qword_201E28);
    uint64_t v15 = sub_53D4(v14);
    sub_98820(v15, v17, *(void *)(v16 + 64));
    goto LABEL_7;
  }
  uint64_t v38 = sub_98D5C();
  v39(v38);
LABEL_7:
  int v18 = sub_1416CC(v2[12]);
  if (v0)
  {
    if (!v18)
    {
      sub_141600();
      uint64_t v19 = sub_985F8();
      v20(v19);
      sub_1416AC();
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  sub_A1CC();
  if (v21)
  {
    uint64_t v22 = sub_98A6C();
    v23(v22);
LABEL_12:
    uint64_t v24 = sub_2694(&qword_201E28);
    uint64_t v25 = sub_53D4(v24);
    sub_98820(v25, v27, *(void *)(v26 + 64));
    goto LABEL_13;
  }
  uint64_t v40 = sub_98D5C();
  v41(v40);
LABEL_13:
  sub_141A50(v2[13]);
  sub_141A50(v2[14]);
  int v28 = sub_1416CC(v2[15]);
  if (!v0)
  {
    sub_A1CC();
    if (!v31)
    {
      uint64_t v42 = sub_98D5C();
      v43(v42);
      goto LABEL_19;
    }
    uint64_t v32 = sub_98A6C();
    v33(v32);
    goto LABEL_18;
  }
  if (v28)
  {
LABEL_18:
    uint64_t v34 = sub_2694(&qword_201E28);
    uint64_t v35 = sub_53D4(v34);
    sub_98820(v35, v37, *(void *)(v36 + 64));
    goto LABEL_19;
  }
  sub_141600();
  uint64_t v29 = sub_985F8();
  v30(v29);
  sub_1416AC();
LABEL_19:
  sub_141A50(v2[16]);
  sub_1419F8(v2[17]);
  sub_987C4();
}

uint64_t sub_13A390(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_141AA4(a1, a2);
  *(void *)(v5 + 24) = *(void *)(v6 + 24);
  sub_141E80();
  if (sub_986A4())
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    uint64_t v8 = sub_53D4(v7);
    sub_98820(v8, v10, *(void *)(v9 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v11 = sub_141714();
    v12(v11);
    sub_1416AC();
  }
  if (sub_986A4())
  {
    uint64_t v13 = sub_2694(&qword_201E28);
    uint64_t v14 = sub_53D4(v13);
    sub_98820(v14, v16, *(void *)(v15 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v17 = sub_141714();
    v18(v17);
    sub_1416AC();
  }
  uint64_t v19 = *(int *)(v4 + 52);
  uint64_t v20 = *(int *)(v4 + 56);
  uint64_t v21 = v2 + v19;
  uint64_t v22 = v3 + v19;
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  uint64_t v23 = v2 + v20;
  uint64_t v24 = v3 + v20;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  if (sub_986A4())
  {
    uint64_t v25 = sub_2694(&qword_201E28);
    uint64_t v26 = sub_53D4(v25);
    sub_98820(v26, v28, *(void *)(v27 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v29 = sub_141714();
    v30(v29);
    sub_1416AC();
  }
  return sub_1418CC();
}

void sub_13A504()
{
  sub_98838();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  *(unsigned char *)uint64_t v5 = *(unsigned char *)v3;
  *(void *)(v5 + 8) = *(void *)(v3 + 8);
  *(unsigned char *)(v5 + 16) = *(unsigned char *)(v3 + 16);
  sub_141B94((unsigned char *)v5, (unsigned char *)v3);
  *(void *)(v6 + 24) = *(void *)(v7 + 24);
  swift_bridgeObjectRelease();
  sub_141D44();
  int v8 = sub_98610();
  if (v0)
  {
    if (!v8)
    {
      sub_141600();
      uint64_t v9 = sub_141714();
      v10(v9);
      sub_1416AC();
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_A1CC();
  if (v11)
  {
    uint64_t v12 = sub_98A6C();
    v13(v12);
LABEL_6:
    uint64_t v14 = sub_2694(&qword_201E28);
    uint64_t v15 = sub_53D4(v14);
    sub_98820(v15, v17, *(void *)(v16 + 64));
    goto LABEL_7;
  }
  uint64_t v44 = sub_98D40();
  v45(v44);
LABEL_7:
  int v18 = sub_1416CC(v2[12]);
  if (v0)
  {
    if (!v18)
    {
      sub_141600();
      uint64_t v19 = sub_141714();
      v20(v19);
      sub_1416AC();
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  sub_A1CC();
  if (v21)
  {
    uint64_t v22 = sub_98A6C();
    v23(v22);
LABEL_12:
    uint64_t v24 = sub_2694(&qword_201E28);
    uint64_t v25 = sub_53D4(v24);
    sub_98820(v25, v27, *(void *)(v26 + 64));
    goto LABEL_13;
  }
  uint64_t v46 = sub_98D40();
  v47(v46);
LABEL_13:
  uint64_t v28 = v2[13];
  uint64_t v29 = v2[14];
  uint64_t v30 = v6 + v28;
  uint64_t v31 = v4 + v28;
  *(void *)uint64_t v30 = *(void *)v31;
  *(unsigned char *)(v30 + 8) = *(unsigned char *)(v31 + 8);
  uint64_t v32 = v6 + v29;
  uint64_t v33 = v4 + v29;
  *(void *)uint64_t v32 = *(void *)v33;
  *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 8);
  int v34 = sub_1416CC(v2[15]);
  if (!v0)
  {
    sub_A1CC();
    if (!v37)
    {
      uint64_t v48 = sub_98D40();
      v49(v48);
      goto LABEL_19;
    }
    uint64_t v38 = sub_98A6C();
    v39(v38);
    goto LABEL_18;
  }
  if (v34)
  {
LABEL_18:
    uint64_t v40 = sub_2694(&qword_201E28);
    uint64_t v41 = sub_53D4(v40);
    sub_98820(v41, v43, *(void *)(v42 + 64));
    goto LABEL_19;
  }
  sub_141600();
  uint64_t v35 = sub_141714();
  v36(v35);
  sub_1416AC();
LABEL_19:
  sub_1418CC();
  sub_987C4();
}

uint64_t sub_13A71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13A730);
}

uint64_t sub_13A734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_2694(&qword_201E28);
    uint64_t v9 = a1 + *(int *)(a3 + 44);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
}

uint64_t sub_13A7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13A7D4);
}

uint64_t sub_13A7D8(uint64_t result, int a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    sub_2694(&qword_201E28);
    uint64_t v5 = sub_141D24(*(int *)(a4 + 44));
    return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, v6, v7, v8);
  }
  return result;
}

void sub_13A854()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_13A918(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(sub_2694(&qword_201E28) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_13AA20(uint64_t a1)
{
  uint64_t v2 = sub_1AC1E0();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v2);
  if (!result)
  {
    sub_A5C0();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
    return v5(a1, v2);
  }
  return result;
}

void *sub_13AAA4(void *a1, const void *a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v4))
  {
    uint64_t v5 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v4);
  }
  return a1;
}

void *sub_13AB6C(void *a1, const void *a2)
{
  uint64_t v4 = sub_1AC1E0();
  int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v4);
  int v6 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v4);
  return a1;
}

void *sub_13ACB4(void *a1, const void *a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v4))
  {
    uint64_t v5 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v4);
  }
  return a1;
}

void *sub_13AD7C(void *a1, const void *a2)
{
  uint64_t v4 = sub_1AC1E0();
  int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v4);
  int v6 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v4);
  return a1;
}

uint64_t sub_13AEC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13AED8);
}

uint64_t sub_13AED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_201E28);

  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, a2, v4);
}

uint64_t sub_13AF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13AF38);
}

uint64_t sub_13AF38()
{
  sub_2694(&qword_201E28);
  uint64_t v0 = sub_988BC();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, v1, v2, v3);
}

void sub_13AF7C()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_13B008(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    int v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v14, 1, v7))
    {
      uint64_t v17 = sub_2694(&qword_201E28);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v15, v16, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v15, 0, 1, v7);
    }
    uint64_t v18 = a3[7];
    uint64_t v19 = a3[8];
    uint64_t v20 = (char *)a1 + v18;
    int v21 = (char *)a2 + v18;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    *(uint64_t *)((char *)a1 + v19) = *(uint64_t *)((char *)a2 + v19);
    uint64_t v22 = a3[9];
    uint64_t v23 = a3[10];
    uint64_t v24 = (char *)a1 + v22;
    uint64_t v25 = (char *)a2 + v22;
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    uint64_t v26 = (char *)a1 + v23;
    uint64_t v27 = (char *)a2 + v23;
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v7))
    {
      uint64_t v28 = sub_2694(&qword_201E28);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v26, v27, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_13B334(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + a2[5];
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  uint64_t v6 = a1 + a2[6];
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v6, v4);
  }
  swift_release();
  uint64_t v7 = a1 + a2[10];
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v4);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v9(v7, v4);
  }
  return result;
}

char *sub_13B4BC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v12], 1, v6))
  {
    uint64_t v15 = sub_2694(&qword_201E28);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v13, v14, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v13, 0, 1, v6);
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = &a1[v16];
  uint64_t v19 = &a2[v16];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1, v6))
  {
    uint64_t v26 = sub_2694(&qword_201E28);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v24, v25, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0, 1, v6);
  }
  return a1;
}

char *sub_13B798(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v18], 1, v6);
  int v22 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v20, 1, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v19, v20, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0, 1, v6);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = sub_2694(&qword_201E28);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v19, v20, v6);
LABEL_19:
  uint64_t v25 = a3[7];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v28 = *(void *)v27;
  v26[8] = v27[8];
  *(void *)uint64_t v26 = v28;
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  uint64_t v29 = a3[9];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  uint64_t v32 = *(void *)v31;
  v30[8] = v31[8];
  *(void *)uint64_t v30 = v32;
  uint64_t v33 = a3[10];
  int v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  int v36 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v33], 1, v6);
  int v37 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v35, 1, v6);
  if (!v36)
  {
    uint64_t v38 = *(void *)(v6 - 8);
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 24))(v34, v35, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v34, v6);
    goto LABEL_24;
  }
  if (v37)
  {
LABEL_24:
    uint64_t v39 = sub_2694(&qword_201E28);
    memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v34, v35, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v34, 0, 1, v6);
  return a1;
}

char *sub_13BC90(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  int v14 = &a2[v12];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v12], 1, v6))
  {
    uint64_t v15 = sub_2694(&qword_201E28);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v13, v14, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v13, 0, 1, v6);
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = &a1[v16];
  uint64_t v19 = &a2[v16];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  int v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  *(void *)int v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1, v6))
  {
    uint64_t v26 = sub_2694(&qword_201E28);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v24, v25, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0, 1, v6);
  }
  return a1;
}

char *sub_13BF68(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v18], 1, v6);
  int v22 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v20, 1, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v19, v20, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0, 1, v6);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = sub_2694(&qword_201E28);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v19, v20, v6);
LABEL_19:
  uint64_t v25 = a3[7];
  uint64_t v26 = a3[8];
  uint64_t v27 = &a1[v25];
  uint64_t v28 = &a2[v25];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)&a1[v26] = *(void *)&a2[v26];
  swift_release();
  uint64_t v29 = a3[9];
  uint64_t v30 = a3[10];
  uint64_t v31 = &a1[v29];
  uint64_t v32 = &a2[v29];
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  uint64_t v33 = &a1[v30];
  int v34 = &a2[v30];
  int v35 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v30], 1, v6);
  int v36 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v34, 1, v6);
  if (!v35)
  {
    uint64_t v37 = *(void *)(v6 - 8);
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v33, v34, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v33, v6);
    goto LABEL_24;
  }
  if (v36)
  {
LABEL_24:
    uint64_t v38 = sub_2694(&qword_201E28);
    memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v33, v34, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v33, 0, 1, v6);
  return a1;
}

uint64_t sub_13C450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13C464);
}

uint64_t sub_13C464()
{
  sub_98BD4();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v2 + 84) != v0) {
    return sub_983B4(*(int *)(v1 + 32));
  }
  uint64_t v3 = sub_98C00();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v3, v4, v5);
}

uint64_t sub_13C4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13C4EC);
}

void sub_13C4EC()
{
  sub_988D0();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = sub_988BC();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, v6, v7, v8);
  }
  else
  {
    *(void *)(v1 + *(int *)(v2 + 32)) = v0;
  }
}

void sub_13C564()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_13C60C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[8];
    uint64_t v16 = a3[9];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = (char *)a1 + v16;
    uint64_t v20 = (char *)a2 + v16;
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v20, 1, v7))
    {
      uint64_t v21 = sub_2694(&qword_201E28);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v19, v20, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_13C890(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v8(v6, v4);
  }
  return result;
}

char *sub_13C9CC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  uint64_t v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v18, 1, v6))
  {
    uint64_t v19 = sub_2694(&qword_201E28);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v17, v18, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v17, 0, 1, v6);
  }
  return a1;
}

char *sub_13CC00(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  a1[a3[7]] = a2[a3[7]];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  char v21 = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v21;
  uint64_t v22 = a3[9];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v22], 1, v6);
  int v26 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v6);
  if (!v25)
  {
    uint64_t v27 = *(void *)(v6 - 8);
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v23, v24, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v23, v6);
    goto LABEL_18;
  }
  if (v26)
  {
LABEL_18:
    uint64_t v28 = sub_2694(&qword_201E28);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v23, v24, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0, 1, v6);
  return a1;
}

char *sub_13CFD0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  int v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)int v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v18, 1, v6))
  {
    uint64_t v19 = sub_2694(&qword_201E28);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v17, v18, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v17, 0, 1, v6);
  }
  return a1;
}

char *sub_13D200(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  int v24 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v21], 1, v6);
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v23, 1, v6);
  if (!v24)
  {
    uint64_t v26 = *(void *)(v6 - 8);
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v22, v23, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v6);
    goto LABEL_18;
  }
  if (v25)
  {
LABEL_18:
    uint64_t v27 = sub_2694(&qword_201E28);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v22, v23, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v22, 0, 1, v6);
  return a1;
}

uint64_t sub_13D5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13D5D8);
}

uint64_t sub_13D5D8()
{
  sub_98BD4();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v2 + 84) != v0) {
    return sub_983B4(*(int *)(v1 + 24));
  }
  uint64_t v3 = sub_98C00();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v3, v4, v5);
}

uint64_t sub_13D64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13D660);
}

void sub_13D660()
{
  sub_988D0();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = sub_988BC();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, v6, v7, v8);
  }
  else
  {
    *(void *)(v1 + *(int *)(v2 + 24)) = v0;
  }
}

void sub_13D6D8()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_13D79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13D7B0);
}

uint64_t sub_13D7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13D7C8);
}

uint64_t *sub_13D7D0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_201E28);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = sub_2694(&qword_201E28);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[6];
    int v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2 + v14, 1, v7))
    {
      uint64_t v17 = sub_2694(&qword_201E28);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v15, v16, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v15, 0, 1, v7);
    }
    uint64_t v18 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v18) = *(uint64_t *)((char *)a2 + v18);
    uint64_t v19 = a3[9];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    swift_retain();
    swift_retain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1, v7))
    {
      uint64_t v22 = sub_2694(&qword_201E28);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v20, v21, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_13DADC(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + a2[5];
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  uint64_t v6 = a1 + a2[6];
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v6, v4);
  }
  swift_release();
  swift_release();
  uint64_t v7 = a1 + a2[9];
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v4);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v9(v7, v4);
  }
  return result;
}

char *sub_13DC70(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v12], 1, v6))
  {
    uint64_t v15 = sub_2694(&qword_201E28);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v13, v14, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v13, 0, 1, v6);
  }
  uint64_t v16 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  uint64_t v17 = a3[9];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  swift_retain();
  swift_retain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1, v6))
  {
    uint64_t v20 = sub_2694(&qword_201E28);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v18, v19, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v18, 0, 1, v6);
  }
  return a1;
}

char *sub_13DF2C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v18], 1, v6);
  int v22 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v20, 1, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v19, v20, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0, 1, v6);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = sub_2694(&qword_201E28);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v19, v20, v6);
LABEL_19:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  uint64_t v25 = a3[9];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v25], 1, v6);
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v6);
  if (!v28)
  {
    uint64_t v30 = *(void *)(v6 - 8);
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v26, v27, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
    goto LABEL_24;
  }
  if (v29)
  {
LABEL_24:
    uint64_t v31 = sub_2694(&qword_201E28);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v26, v27, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0, 1, v6);
  return a1;
}

char *sub_13E408(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  int v14 = &a2[v12];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a2[v12], 1, v6))
  {
    uint64_t v15 = sub_2694(&qword_201E28);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v13, v14, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v13, 0, 1, v6);
  }
  uint64_t v16 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  uint64_t v17 = a3[9];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1, v6))
  {
    uint64_t v20 = sub_2694(&qword_201E28);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v18, v19, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v18, 0, 1, v6);
  }
  return a1;
}

char *sub_13E6B8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AC1E0();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v11], 1, v6);
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_2694(&qword_201E28);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v18], 1, v6);
  int v22 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v20, 1, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v19, v20, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0, 1, v6);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = sub_2694(&qword_201E28);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v19, v20, v6);
LABEL_19:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  uint64_t v25 = a3[9];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)&a1[v25], 1, v6);
  int v29 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v6);
  if (!v28)
  {
    uint64_t v30 = *(void *)(v6 - 8);
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v26, v27, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
    goto LABEL_24;
  }
  if (v29)
  {
LABEL_24:
    uint64_t v31 = sub_2694(&qword_201E28);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v26, v27, v6);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0, 1, v6);
  return a1;
}

uint64_t sub_13EB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13EB98);
}

uint64_t sub_13EB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13EBB0);
}

void sub_13EBB4()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_13EC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13EC64);
}

uint64_t sub_13EC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13EC7C);
}

uint64_t sub_13EC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13EC94);
}

uint64_t sub_13EC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13ECAC);
}

uint64_t sub_13ECB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13ECC4);
}

uint64_t sub_13ECC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13ECDC);
}

uint64_t sub_13ECE0(uint64_t a1, uint64_t a2)
{
  sub_A1CC();
  if ((*(_DWORD *)(v5 + 80) & 0x20000) != 0)
  {
    sub_141A6C();
  }
  else
  {
    uint64_t v6 = v4;
    sub_1AC1E0();
    if (sub_987FC(a2))
    {
      uint64_t v7 = sub_2694(&qword_201E28);
      uint64_t v8 = sub_53D4(v7);
      sub_98EBC(v8, v10, *(void *)(v9 + 64));
    }
    else
    {
      sub_141600();
      sub_14172C();
      v11();
      sub_9837C(a1);
    }
    if (sub_986A4())
    {
      uint64_t v12 = sub_2694(&qword_201E28);
      uint64_t v13 = sub_53D4(v12);
      sub_98820(v13, v15, *(void *)(v14 + 64));
    }
    else
    {
      sub_141600();
      uint64_t v16 = sub_985F8();
      v17(v16);
      sub_1416AC();
    }
    if (sub_986A4())
    {
      uint64_t v18 = sub_2694(&qword_201E28);
      uint64_t v19 = sub_53D4(v18);
      sub_98820(v19, v21, *(void *)(v20 + 64));
    }
    else
    {
      sub_141600();
      uint64_t v22 = sub_985F8();
      v23(v22);
      sub_1416AC();
    }
    sub_141B64();
    if (sub_986A4())
    {
      uint64_t v24 = sub_2694(&qword_201E28);
      uint64_t v25 = sub_53D4(v24);
      sub_98820(v25, v27, *(void *)(v26 + 64));
    }
    else
    {
      sub_141600();
      uint64_t v28 = sub_985F8();
      v29(v28);
      sub_1416AC();
    }
    sub_141C98(*(int *)(v6 + 40));
  }
  return a1;
}

uint64_t sub_13EEA4(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!sub_CEAD8(a1))
  {
    sub_A5C0();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  if (!sub_141A18(a2[5]))
  {
    sub_A5C0();
    uint64_t v6 = sub_141A94();
    v7(v6);
  }
  if (!sub_141A18(a2[6]))
  {
    sub_A5C0();
    uint64_t v8 = sub_141A94();
    v9(v8);
  }
  swift_release();
  uint64_t v10 = a1 + a2[9];
  uint64_t result = sub_CEAD8(v10);
  if (!result)
  {
    sub_A5C0();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    return v13(v10, v4);
  }
  return result;
}

uint64_t sub_13EFDC()
{
  sub_98AD8();
  if (sub_987FC(v1))
  {
    uint64_t v3 = sub_2694(&qword_201E28);
    uint64_t v4 = sub_53D4(v3);
    sub_98EBC(v4, v6, *(void *)(v5 + 64));
  }
  else
  {
    sub_141600();
    sub_14172C();
    v7();
    sub_9837C(v0);
  }
  if (sub_986A4())
  {
    uint64_t v8 = sub_2694(&qword_201E28);
    uint64_t v9 = sub_53D4(v8);
    sub_98820(v9, v11, *(void *)(v10 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v12 = sub_985F8();
    v13(v12);
    sub_1416AC();
  }
  if (sub_986A4())
  {
    uint64_t v14 = sub_2694(&qword_201E28);
    uint64_t v15 = sub_53D4(v14);
    sub_98820(v15, v17, *(void *)(v16 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v18 = sub_985F8();
    v19(v18);
    sub_1416AC();
  }
  sub_141B64();
  if (sub_986A4())
  {
    uint64_t v20 = sub_2694(&qword_201E28);
    uint64_t v21 = sub_53D4(v20);
    sub_98820(v21, v23, *(void *)(v22 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v24 = sub_985F8();
    v25(v24);
    sub_1416AC();
  }
  return sub_141814(*(int *)(v2 + 40));
}

void sub_13F174()
{
  sub_98838();
  uint64_t v4 = sub_98AD8();
  int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, v4);
  int v6 = sub_987FC(v1);
  if (v5)
  {
    if (!v6)
    {
      sub_141600();
      sub_14172C();
      v7();
      sub_9837C(v0);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_A1CC();
  if (v8)
  {
    sub_141908();
    v9();
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    uint64_t v11 = sub_53D4(v10);
    sub_98EBC(v11, v13, *(void *)(v12 + 64));
    goto LABEL_7;
  }
  uint64_t v44 = sub_141C7C();
  v45(v44);
LABEL_7:
  int v14 = sub_1416CC(v2[5]);
  if (v3)
  {
    if (!v14)
    {
      sub_141600();
      uint64_t v15 = sub_985F8();
      v16(v15);
      sub_1416AC();
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  sub_A1CC();
  if (v17)
  {
    uint64_t v18 = sub_98A6C();
    v19(v18);
LABEL_12:
    uint64_t v20 = sub_2694(&qword_201E28);
    uint64_t v21 = sub_53D4(v20);
    sub_98820(v21, v23, *(void *)(v22 + 64));
    goto LABEL_13;
  }
  uint64_t v46 = sub_98D5C();
  v47(v46);
LABEL_13:
  int v24 = sub_1416CC(v2[6]);
  if (v3)
  {
    if (!v24)
    {
      sub_141600();
      uint64_t v25 = sub_985F8();
      v26(v25);
      sub_1416AC();
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  sub_A1CC();
  if (v27)
  {
    uint64_t v28 = sub_98A6C();
    v29(v28);
LABEL_18:
    uint64_t v30 = sub_2694(&qword_201E28);
    uint64_t v31 = sub_53D4(v30);
    sub_98820(v31, v33, *(void *)(v32 + 64));
    goto LABEL_19;
  }
  uint64_t v48 = sub_98D5C();
  v49(v48);
LABEL_19:
  sub_141DC0();
  swift_release();
  *(unsigned char *)(v0 + v2[8]) = *(unsigned char *)(v1 + v2[8]);
  int v34 = sub_1416CC(v2[9]);
  if (!v3)
  {
    sub_A1CC();
    if (!v37)
    {
      uint64_t v50 = sub_98D5C();
      v51(v50);
      goto LABEL_25;
    }
    uint64_t v38 = sub_98A6C();
    v39(v38);
    goto LABEL_24;
  }
  if (v34)
  {
LABEL_24:
    uint64_t v40 = sub_2694(&qword_201E28);
    uint64_t v41 = sub_53D4(v40);
    sub_98820(v41, v43, *(void *)(v42 + 64));
    goto LABEL_25;
  }
  sub_141600();
  uint64_t v35 = sub_985F8();
  v36(v35);
  sub_1416AC();
LABEL_25:
  sub_1419F8(v2[10]);
  sub_987C4();
}

uint64_t sub_13F3E0()
{
  sub_98AD8();
  if (sub_987FC(v1))
  {
    uint64_t v3 = sub_2694(&qword_201E28);
    uint64_t v4 = sub_53D4(v3);
    sub_98EBC(v4, v6, *(void *)(v5 + 64));
  }
  else
  {
    sub_141600();
    sub_984D4();
    v7();
    sub_9837C(v0);
  }
  if (sub_986A4())
  {
    uint64_t v8 = sub_2694(&qword_201E28);
    uint64_t v9 = sub_53D4(v8);
    sub_98820(v9, v11, *(void *)(v10 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v12 = sub_141714();
    v13(v12);
    sub_1416AC();
  }
  if (sub_986A4())
  {
    uint64_t v14 = sub_2694(&qword_201E28);
    uint64_t v15 = sub_53D4(v14);
    sub_98820(v15, v17, *(void *)(v16 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v18 = sub_141714();
    v19(v18);
    sub_1416AC();
  }
  uint64_t v20 = v2[8];
  *(void *)(v0 + v2[7]) = *(void *)(v1 + v2[7]);
  *(unsigned char *)(v0 + v20) = *(unsigned char *)(v1 + v20);
  if (sub_986A4())
  {
    uint64_t v21 = sub_2694(&qword_201E28);
    uint64_t v22 = sub_53D4(v21);
    sub_98820(v22, v24, *(void *)(v23 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v25 = sub_141714();
    v26(v25);
    sub_1416AC();
  }
  return sub_141814(v2[10]);
}

void sub_13F594()
{
  sub_98838();
  uint64_t v4 = sub_98AD8();
  int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, v4);
  int v6 = sub_987FC(v1);
  if (v5)
  {
    if (!v6)
    {
      sub_141600();
      sub_984D4();
      v7();
      sub_9837C(v0);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_A1CC();
  if (v8)
  {
    sub_141908();
    v9();
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    uint64_t v11 = sub_53D4(v10);
    sub_98EBC(v11, v13, *(void *)(v12 + 64));
    goto LABEL_7;
  }
  uint64_t v44 = sub_141C60();
  v45(v44);
LABEL_7:
  int v14 = sub_1416CC(v2[5]);
  if (v3)
  {
    if (!v14)
    {
      sub_141600();
      uint64_t v15 = sub_141714();
      v16(v15);
      sub_1416AC();
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  sub_A1CC();
  if (v17)
  {
    uint64_t v18 = sub_98A6C();
    v19(v18);
LABEL_12:
    uint64_t v20 = sub_2694(&qword_201E28);
    uint64_t v21 = sub_53D4(v20);
    sub_98820(v21, v23, *(void *)(v22 + 64));
    goto LABEL_13;
  }
  uint64_t v46 = sub_98D40();
  v47(v46);
LABEL_13:
  int v24 = sub_1416CC(v2[6]);
  if (v3)
  {
    if (!v24)
    {
      sub_141600();
      uint64_t v25 = sub_141714();
      v26(v25);
      sub_1416AC();
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  sub_A1CC();
  if (v27)
  {
    uint64_t v28 = sub_98A6C();
    v29(v28);
LABEL_18:
    uint64_t v30 = sub_2694(&qword_201E28);
    uint64_t v31 = sub_53D4(v30);
    sub_98820(v31, v33, *(void *)(v32 + 64));
    goto LABEL_19;
  }
  uint64_t v48 = sub_98D40();
  v49(v48);
LABEL_19:
  sub_141DE0();
  *(unsigned char *)(v0 + v2[8]) = *(unsigned char *)(v1 + v2[8]);
  int v34 = sub_98610();
  if (!v3)
  {
    sub_A1CC();
    if (!v37)
    {
      uint64_t v50 = sub_98D40();
      v51(v50);
      goto LABEL_25;
    }
    uint64_t v38 = sub_98A6C();
    v39(v38);
    goto LABEL_24;
  }
  if (v34)
  {
LABEL_24:
    uint64_t v40 = sub_2694(&qword_201E28);
    uint64_t v41 = sub_53D4(v40);
    sub_98820(v41, v43, *(void *)(v42 + 64));
    goto LABEL_25;
  }
  sub_141600();
  uint64_t v35 = sub_141714();
  v36(v35);
  sub_1416AC();
LABEL_25:
  sub_141814(v2[10]);
  sub_987C4();
}

uint64_t sub_13F7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13F810);
}

uint64_t sub_13F814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13F828);
}

void sub_13F82C()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_13F8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13F908);
}

uint64_t sub_13F90C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13F920);
}

uint64_t sub_13F928(uint64_t a1, uint64_t a2)
{
  sub_A1CC();
  if ((*(_DWORD *)(v5 + 80) & 0x20000) != 0)
  {
    sub_141A6C();
  }
  else
  {
    uint64_t v6 = v4;
    sub_1AC1E0();
    if (sub_987FC(a2))
    {
      uint64_t v7 = sub_2694(&qword_201E28);
      uint64_t v8 = sub_53D4(v7);
      sub_98EBC(v8, v10, *(void *)(v9 + 64));
    }
    else
    {
      sub_141600();
      sub_14172C();
      v11();
      sub_9837C(a1);
    }
    if (sub_986A4())
    {
      uint64_t v12 = sub_2694(&qword_201E28);
      uint64_t v13 = sub_53D4(v12);
      sub_98820(v13, v15, *(void *)(v14 + 64));
    }
    else
    {
      sub_141600();
      uint64_t v16 = sub_985F8();
      v17(v16);
      sub_1416AC();
    }
    if (sub_986A4())
    {
      uint64_t v18 = sub_2694(&qword_201E28);
      uint64_t v19 = sub_53D4(v18);
      sub_98820(v19, v21, *(void *)(v20 + 64));
    }
    else
    {
      sub_141600();
      uint64_t v22 = sub_985F8();
      v23(v22);
      sub_1416AC();
    }
    sub_141CDC();
    if (sub_986A4())
    {
      uint64_t v24 = sub_2694(&qword_201E28);
      uint64_t v25 = sub_53D4(v24);
      sub_98820(v25, v27, *(void *)(v26 + 64));
    }
    else
    {
      sub_141600();
      uint64_t v28 = sub_985F8();
      v29(v28);
      sub_1416AC();
    }
    sub_141C98(*(int *)(v6 + 36));
  }
  return a1;
}

uint64_t sub_13FAEC(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_1AC1E0();
  if (!sub_CEAD8(a1))
  {
    sub_A5C0();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  if (!sub_141A18(a2[5]))
  {
    sub_A5C0();
    uint64_t v6 = sub_141A94();
    v7(v6);
  }
  if (!sub_141A18(a2[6]))
  {
    sub_A5C0();
    uint64_t v8 = sub_141A94();
    v9(v8);
  }
  swift_release();
  uint64_t v10 = a1 + a2[8];
  uint64_t result = sub_CEAD8(v10);
  if (!result)
  {
    sub_A5C0();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    return v13(v10, v4);
  }
  return result;
}

uint64_t sub_13FC24()
{
  sub_98AD8();
  if (sub_987FC(v1))
  {
    uint64_t v3 = sub_2694(&qword_201E28);
    uint64_t v4 = sub_53D4(v3);
    sub_98EBC(v4, v6, *(void *)(v5 + 64));
  }
  else
  {
    sub_141600();
    sub_14172C();
    v7();
    sub_9837C(v0);
  }
  if (sub_986A4())
  {
    uint64_t v8 = sub_2694(&qword_201E28);
    uint64_t v9 = sub_53D4(v8);
    sub_98820(v9, v11, *(void *)(v10 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v12 = sub_985F8();
    v13(v12);
    sub_1416AC();
  }
  if (sub_986A4())
  {
    uint64_t v14 = sub_2694(&qword_201E28);
    uint64_t v15 = sub_53D4(v14);
    sub_98820(v15, v17, *(void *)(v16 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v18 = sub_985F8();
    v19(v18);
    sub_1416AC();
  }
  sub_141CDC();
  if (sub_986A4())
  {
    uint64_t v20 = sub_2694(&qword_201E28);
    uint64_t v21 = sub_53D4(v20);
    sub_98820(v21, v23, *(void *)(v22 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v24 = sub_985F8();
    v25(v24);
    sub_1416AC();
  }
  return sub_141814(*(int *)(v2 + 36));
}

void sub_13FDBC()
{
  sub_98838();
  uint64_t v4 = sub_98AD8();
  int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, v4);
  int v6 = sub_987FC(v1);
  if (v5)
  {
    if (!v6)
    {
      sub_141600();
      sub_14172C();
      v7();
      sub_9837C(v0);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_A1CC();
  if (v8)
  {
    sub_141908();
    v9();
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    uint64_t v11 = sub_53D4(v10);
    sub_98EBC(v11, v13, *(void *)(v12 + 64));
    goto LABEL_7;
  }
  uint64_t v44 = sub_141C7C();
  v45(v44);
LABEL_7:
  int v14 = sub_1416CC(v2[5]);
  if (v3)
  {
    if (!v14)
    {
      sub_141600();
      uint64_t v15 = sub_985F8();
      v16(v15);
      sub_1416AC();
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  sub_A1CC();
  if (v17)
  {
    uint64_t v18 = sub_98A6C();
    v19(v18);
LABEL_12:
    uint64_t v20 = sub_2694(&qword_201E28);
    uint64_t v21 = sub_53D4(v20);
    sub_98820(v21, v23, *(void *)(v22 + 64));
    goto LABEL_13;
  }
  uint64_t v46 = sub_98D5C();
  v47(v46);
LABEL_13:
  int v24 = sub_1416CC(v2[6]);
  if (v3)
  {
    if (!v24)
    {
      sub_141600();
      uint64_t v25 = sub_985F8();
      v26(v25);
      sub_1416AC();
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  sub_A1CC();
  if (v27)
  {
    uint64_t v28 = sub_98A6C();
    v29(v28);
LABEL_18:
    uint64_t v30 = sub_2694(&qword_201E28);
    uint64_t v31 = sub_53D4(v30);
    sub_98820(v31, v33, *(void *)(v32 + 64));
    goto LABEL_19;
  }
  uint64_t v48 = sub_98D5C();
  v49(v48);
LABEL_19:
  sub_141DC0();
  swift_release();
  int v34 = sub_1416CC(v2[8]);
  if (!v3)
  {
    sub_A1CC();
    if (!v37)
    {
      uint64_t v50 = sub_98D5C();
      v51(v50);
      goto LABEL_25;
    }
    uint64_t v38 = sub_98A6C();
    v39(v38);
    goto LABEL_24;
  }
  if (v34)
  {
LABEL_24:
    uint64_t v40 = sub_2694(&qword_201E28);
    uint64_t v41 = sub_53D4(v40);
    sub_98820(v41, v43, *(void *)(v42 + 64));
    goto LABEL_25;
  }
  sub_141600();
  uint64_t v35 = sub_985F8();
  v36(v35);
  sub_1416AC();
LABEL_25:
  sub_1419F8(v2[9]);
  sub_987C4();
}

uint64_t sub_14001C()
{
  sub_98AD8();
  if (sub_987FC(v1))
  {
    uint64_t v3 = sub_2694(&qword_201E28);
    uint64_t v4 = sub_53D4(v3);
    sub_98EBC(v4, v6, *(void *)(v5 + 64));
  }
  else
  {
    sub_141600();
    sub_984D4();
    v7();
    sub_9837C(v0);
  }
  if (sub_986A4())
  {
    uint64_t v8 = sub_2694(&qword_201E28);
    uint64_t v9 = sub_53D4(v8);
    sub_98820(v9, v11, *(void *)(v10 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v12 = sub_141714();
    v13(v12);
    sub_1416AC();
  }
  if (sub_986A4())
  {
    uint64_t v14 = sub_2694(&qword_201E28);
    uint64_t v15 = sub_53D4(v14);
    sub_98820(v15, v17, *(void *)(v16 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v18 = sub_141714();
    v19(v18);
    sub_1416AC();
  }
  *(void *)(v0 + *(int *)(v2 + 28)) = *(void *)(v1 + *(int *)(v2 + 28));
  if (sub_986A4())
  {
    uint64_t v20 = sub_2694(&qword_201E28);
    uint64_t v21 = sub_53D4(v20);
    sub_98820(v21, v23, *(void *)(v22 + 64));
  }
  else
  {
    sub_141600();
    uint64_t v24 = sub_141714();
    v25(v24);
    sub_1416AC();
  }
  return sub_141814(*(int *)(v2 + 36));
}

void sub_1401C4()
{
  sub_98838();
  uint64_t v4 = sub_98AD8();
  int v5 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v0, 1, v4);
  int v6 = sub_987FC(v1);
  if (v5)
  {
    if (!v6)
    {
      sub_141600();
      sub_984D4();
      v7();
      sub_9837C(v0);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_A1CC();
  if (v8)
  {
    sub_141908();
    v9();
LABEL_6:
    uint64_t v10 = sub_2694(&qword_201E28);
    uint64_t v11 = sub_53D4(v10);
    sub_98EBC(v11, v13, *(void *)(v12 + 64));
    goto LABEL_7;
  }
  uint64_t v44 = sub_141C60();
  v45(v44);
LABEL_7:
  int v14 = sub_1416CC(v2[5]);
  if (v3)
  {
    if (!v14)
    {
      sub_141600();
      uint64_t v15 = sub_141714();
      v16(v15);
      sub_1416AC();
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  sub_A1CC();
  if (v17)
  {
    uint64_t v18 = sub_98A6C();
    v19(v18);
LABEL_12:
    uint64_t v20 = sub_2694(&qword_201E28);
    uint64_t v21 = sub_53D4(v20);
    sub_98820(v21, v23, *(void *)(v22 + 64));
    goto LABEL_13;
  }
  uint64_t v46 = sub_98D40();
  v47(v46);
LABEL_13:
  int v24 = sub_1416CC(v2[6]);
  if (v3)
  {
    if (!v24)
    {
      sub_141600();
      uint64_t v25 = sub_141714();
      v26(v25);
      sub_1416AC();
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  sub_A1CC();
  if (v27)
  {
    uint64_t v28 = sub_98A6C();
    v29(v28);
LABEL_18:
    uint64_t v30 = sub_2694(&qword_201E28);
    uint64_t v31 = sub_53D4(v30);
    sub_98820(v31, v33, *(void *)(v32 + 64));
    goto LABEL_19;
  }
  uint64_t v48 = sub_98D40();
  v49(v48);
LABEL_19:
  sub_141DE0();
  int v34 = sub_1416CC(v2[8]);
  if (!v3)
  {
    sub_A1CC();
    if (!v37)
    {
      uint64_t v50 = sub_98D40();
      v51(v50);
      goto LABEL_25;
    }
    uint64_t v38 = sub_98A6C();
    v39(v38);
    goto LABEL_24;
  }
  if (v34)
  {
LABEL_24:
    uint64_t v40 = sub_2694(&qword_201E28);
    uint64_t v41 = sub_53D4(v40);
    sub_98820(v41, v43, *(void *)(v42 + 64));
    goto LABEL_25;
  }
  sub_141600();
  uint64_t v35 = sub_141714();
  v36(v35);
  sub_1416AC();
LABEL_25:
  sub_141814(v2[9]);
  sub_987C4();
}

uint64_t sub_14041C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_140430);
}

uint64_t sub_140434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_140448);
}

void sub_14044C()
{
  sub_988D0();
  sub_2694(&qword_201E28);
  sub_A1CC();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = sub_988BC();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, v6, v7, v8);
  }
  else
  {
    *(void *)(v1 + *(int *)(v2 + 28)) = v0;
  }
}

void sub_1404C4()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for WellnessLoggingPhoneMedicationQueryingErrorParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_207960);
}

uint64_t type metadata accessor for WellnessLoggingWatchMedicationQueryingErrorParameters(uint64_t a1)
{
  return sub_95FB8(a1, qword_2078B8);
}

void *sub_1405A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
    uint64_t v5 = *(int *)(a3 + 40);
    uint64_t v6 = (void *)(a1 + v5);
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1, v8))
    {
      uint64_t v9 = sub_2694(&qword_201E28);
      memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t sub_1406D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 40);
  uint64_t v3 = sub_1AC1E0();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v5(v2, v3);
  }
  return result;
}

uint64_t sub_140764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = sub_2694(&qword_201E28);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

unsigned char *sub_140844(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = sub_1AC1E0();
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v5, 1, v7);
  int v9 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1, v7);
  if (!v8)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0, 1, v7);
  return a1;
}

uint64_t sub_1409CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = sub_2694(&qword_201E28);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

unsigned char *sub_140AAC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = &a2[v4];
  uint64_t v6 = &a1[v4];
  a1[5] = a2[5];
  uint64_t v7 = sub_1AC1E0();
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1, v7);
  int v9 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v5, 1, v7);
  if (!v8)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v6, v5, v7);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v6, v7);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v6, v5, *(void *)(*(void *)(v11 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v6, v5, v7);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v6, 0, 1, v7);
  return a1;
}

uint64_t sub_140C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_140C48);
}

uint64_t sub_140C48(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_2694(&qword_201E28);
    uint64_t v11 = (uint64_t)&a1[*(int *)(a3 + 40)];
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v11, a2, v10);
  }
}

uint64_t sub_140CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_140CE8);
}

unsigned char *sub_140CE8(unsigned char *result, char a2, int a3, uint64_t a4)
{
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    sub_2694(&qword_201E28);
    uint64_t v5 = sub_141D24(*(int *)(a4 + 40));
    return (unsigned char *)_s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, v6, v7, v8);
  }
  return result;
}

void sub_140D60()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_140E00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1, v8))
    {
      uint64_t v9 = sub_2694(&qword_201E28);
      memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t sub_140F28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = sub_1AC1E0();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v5(v2, v3);
  }
  return result;
}

_WORD *sub_140FB4(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = sub_2694(&qword_201E28);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

unsigned char *sub_14108C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = sub_1AC1E0();
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v5, 1, v7);
  int v9 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1, v7);
  if (!v8)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0, 1, v7);
  return a1;
}

_WORD *sub_1411F4(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = sub_2694(&qword_201E28);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

unsigned char *sub_1412CC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = sub_1AC1E0();
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v5, 1, v7);
  int v9 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1, v7);
  if (!v8)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v11 = sub_2694(&qword_201E28);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0, 1, v7);
  return a1;
}

uint64_t sub_141434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_141448);
}

uint64_t sub_141448(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_2694(&qword_201E28);
    uint64_t v11 = (uint64_t)&a1[*(int *)(a3 + 24)];
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v11, a2, v10);
  }
}

uint64_t sub_1414D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1414E8);
}

unsigned char *sub_1414E8(unsigned char *result, char a2, int a3, uint64_t a4)
{
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    sub_2694(&qword_201E28);
    uint64_t v5 = sub_141D24(*(int *)(a4 + 24));
    return (unsigned char *)_s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, v6, v7, v8);
  }
  return result;
}

void sub_141560()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_141610(uint64_t a1)
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, a1);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[5], 1, 1, a1);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[6], 1, 1, a1);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[9], 1, 1, a1);
  *(void *)(v1 + v2[7]) = 0;
  *(unsigned char *)(v1 + v2[8]) = v3;
  uint64_t v5 = v1 + v2[10];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  return v1;
}

uint64_t sub_1416AC()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, v0);
}

uint64_t sub_1416CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = v2 + a1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1 + a1, 1, v3);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1, v3);
}

uint64_t sub_141714()
{
  return v0;
}

uint64_t sub_14173C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, char a12)
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v16, 1, 1, a1);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v12 + v17[12], 1, 1, a1);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v12 + v17[15], 1, 1, a1);
  *(unsigned char *)uint64_t v12 = v18;
  *(void *)(v12 + 8) = 0;
  *(unsigned char *)(v12 + 16) = 1;
  *(unsigned char *)(v12 + 17) = v14;
  *(unsigned char *)(v12 + 18) = v13;
  *(unsigned char *)(v12 + 19) = a10;
  *(unsigned char *)(v12 + 20) = a12;
  *(void *)(v12 + 24) = v15;
  uint64_t v20 = v12 + v17[13];
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  uint64_t v21 = v12 + v17[14];
  *(void *)uint64_t v21 = 0;
  *(unsigned char *)(v21 + 8) = 1;
  uint64_t v22 = v12 + v17[16];
  *(void *)uint64_t v22 = 0;
  *(unsigned char *)(v22 + 8) = 1;
  uint64_t v23 = v12 + v17[17];
  *(void *)uint64_t v23 = 0;
  *(unsigned char *)(v23 + 8) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_141814@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  uint64_t v4 = v2 + a1;
  *(void *)uint64_t v3 = *(void *)v4;
  *(unsigned char *)(v3 + 8) = *(unsigned char *)(v4 + 8);
  return v1;
}

uint64_t sub_141834(uint64_t a1)
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, a1);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[5], 1, 1, a1);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[6], 1, 1, a1);
  *(void *)(v1 + v2[7]) = 0;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1 + v2[8], 1, 1, a1);
  uint64_t v4 = v1 + v2[9];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  return v1;
}

uint64_t sub_1418CC()
{
  uint64_t v3 = *(int *)(v2 + 64);
  uint64_t v4 = *(int *)(v2 + 68);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = v1 + v3;
  *(void *)uint64_t v5 = *(void *)v6;
  *(unsigned char *)(v5 + 8) = *(unsigned char *)(v6 + 8);
  uint64_t v7 = v0 + v4;
  uint64_t v8 = v1 + v4;
  *(void *)uint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  return v0;
}

uint64_t sub_141914()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 1, 1, v1);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0 + v2[5], 1, 1, v1);
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0 + v2[6], 1, 1, v1);
  *(void *)(v0 + v2[7]) = 0;
  return result;
}

uint64_t sub_141974(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 88) = a1;
  return 0;
}

uint64_t sub_141988()
{
  return sub_1AC1E0();
}

uint64_t sub_1419D8()
{
  return sub_1AC1E0();
}

uint64_t sub_1419F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  uint64_t v4 = (uint64_t *)(v2 + a1);
  uint64_t v5 = *v4;
  *(unsigned char *)(v3 + 8) = *((unsigned char *)v4 + 8);
  *(void *)uint64_t v3 = v5;
  return v1;
}

uint64_t sub_141A18@<X0>(uint64_t a1@<X8>)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2 + a1, 1, v1);
}

void sub_141A50(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  uint64_t v4 = (uint64_t *)(v2 + a1);
  uint64_t v5 = *v4;
  *(unsigned char *)(v3 + 8) = *((unsigned char *)v4 + 8);
  *(void *)uint64_t v3 = v5;
}

uint64_t sub_141A6C()
{
  *uint64_t v0 = *v1;
  return swift_retain();
}

uint64_t sub_141A94()
{
  return v0;
}

uint64_t sub_141AA4(uint64_t result, uint64_t a2)
{
  *(unsigned char *)uint64_t result = *(unsigned char *)a2;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(result + 17) = *(_DWORD *)(a2 + 17);
  return result;
}

uint64_t sub_141AD4(char a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(v9 + 24);
  *(void *)(v8 + 40) = *(void *)(v9 + 16);
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 24) = a7;
  *(void *)(v8 + 32) = a8;
  *(void *)(v8 + 16) = a6;
  *(unsigned char *)(v8 + 108) = a5;
  *(unsigned char *)(v8 + 107) = a4;
  *(unsigned char *)(v8 + 106) = a3;
  *(unsigned char *)(v8 + 105) = a2;
  *(unsigned char *)(v8 + 104) = a1;
  return 0;
}

void sub_141B14()
{
  *(void *)(v0 + 176) = 0x6144646567676F6CLL;
  *(void *)(v0 + 184) = 0xEA00000000006574;
}

uint64_t sub_141B3C()
{
  *(void *)(v0 + 128) = 0x6570795461746164;
  *(void *)(v0 + 136) = 0xE800000000000000;
  return v1 + *(int *)(v2 + 24);
}

uint64_t sub_141B64()
{
  uint64_t v4 = *(int *)(v2 + 32);
  *(void *)(v0 + *(int *)(v2 + 28)) = *(void *)(v1 + *(int *)(v2 + 28));
  *(unsigned char *)(v0 + v4) = *(unsigned char *)(v1 + v4);
  return swift_retain();
}

unsigned char *sub_141B94(unsigned char *result, unsigned char *a2)
{
  result[17] = a2[17];
  result[18] = a2[18];
  result[19] = a2[19];
  result[20] = a2[20];
  return result;
}

uint64_t sub_141BB8()
{
  return *(void *)(v0 + 72);
}

uint64_t sub_141BCC()
{
  uint64_t v4 = *(void *)(v2 + 40);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v4, v1, 1, v0);
  return sub_9EA0(v4, v3);
}

uint64_t sub_141C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_141C38(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, a1);
}

uint64_t sub_141C60()
{
  return v0;
}

uint64_t sub_141C7C()
{
  return v0;
}

void sub_141C98(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + a1;
  uint64_t v4 = v2 + a1;
  *(void *)uint64_t v3 = *(void *)v4;
  *(unsigned char *)(v3 + 8) = *(unsigned char *)(v4 + 8);
}

uint64_t sub_141CB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = (a2 - 32) | 0x8000000000000000;
  return sub_9FA8(v2, v4, v3);
}

uint64_t sub_141CDC()
{
  *(void *)(v0 + *(int *)(v2 + 28)) = *(void *)(v1 + *(int *)(v2 + 28));
  return swift_retain();
}

uint64_t sub_141D00()
{
  uint64_t v4 = v0 + *(int *)(v2 + 36);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v4, 1, 1, v1);
}

uint64_t sub_141D24@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t sub_141D34(uint64_t a1)
{
  return v1 + *(int *)(a1 + 20);
}

uint64_t sub_141D44()
{
  return sub_1AC1E0();
}

uint64_t sub_141D60(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 1, 1, v1);
}

uint64_t sub_141D7C()
{
  return v0 + 8;
}

uint64_t sub_141DA0()
{
  return sub_1AC1E0();
}

uint64_t sub_141DC0()
{
  *(void *)(v0 + *(int *)(v2 + 28)) = *(void *)(v1 + *(int *)(v2 + 28));
  return swift_retain();
}

uint64_t sub_141DE0()
{
  *(void *)(v0 + *(int *)(v2 + 28)) = *(void *)(v1 + *(int *)(v2 + 28));
  return swift_release();
}

uint64_t sub_141E00(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t sub_141E0C()
{
  return *(void *)(v0 + 88);
}

uint64_t sub_141E40(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t sub_141E4C()
{
  return swift_task_alloc();
}

uint64_t sub_141E6C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 80) = v2;
  *(void *)(v1 + 88) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t sub_141E80()
{
  return sub_1AC1E0();
}

uint64_t sub_141EA0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 32) = a2;
  *(void *)(result + 40) = (v2 - 32) | 0x8000000000000000;
  return result;
}

uint64_t sub_141EB4(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v1);
}

uint64_t sub_141EE8()
{
  uint64_t v1 = sub_1AB4B0();
  sub_52C4();
  uint64_t v41 = v2;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v39 - v7;
  sub_1AC800();
  sub_52C4();
  uint64_t v42 = v10;
  uint64_t v43 = v9;
  __chkstk_darwin(v9);
  sub_E548();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = sub_2694(&qword_203A20);
  __chkstk_darwin(v14 - 8);
  sub_E548();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = sub_1AB510();
  sub_52C4();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  sub_E548();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = sub_1AB4A0();
  sub_C1028(v25, v17);
  swift_bridgeObjectRelease();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v17, 1, v18) == 1)
  {
    sub_BEF88(v17);
    uint64_t v26 = sub_1AC7D0();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v13, v26, v43);
    int v27 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
    v27(v8, v0, v1);
    uint64_t v28 = sub_1AC7F0();
    os_log_type_t v29 = sub_1ACF60();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v45 = v40;
      *(_DWORD *)uint64_t v30 = 136315138;
      uint64_t v39 = v30 + 4;
      v27(v6, (uint64_t)v8, v1);
      uint64_t v31 = sub_1ACE00();
      uint64_t v44 = sub_4A278(v31, v32, &v45);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      uint64_t v33 = sub_142294();
      v34(v33);
      _os_log_impl(&def_342E4, v28, v29, "No user dialog act found in userParse %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v36 = sub_142294();
      v37(v36);
    }

    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v13, v43);
    return 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v24, v17, v18);
    uint64_t v35 = sub_AD7B4();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v24, v18);
  }
  return v35;
}

uint64_t sub_142294()
{
  return v0;
}

uint64_t sub_1422AC(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  *(void *)(v8 + 80) = v18;
  *(void *)(v8 + 88) = v19;
  *(unsigned char *)(v8 + 462) = v16;
  *(void *)(v8 + 64) = v15;
  *(void *)(v8 + 72) = v17;
  *(unsigned char *)(v8 + 461) = v14;
  *(unsigned char *)(v8 + 460) = v12;
  *(void *)(v8 + 48) = v11;
  *(void *)(v8 + 56) = v13;
  *(unsigned char *)(v8 + 459) = a8;
  *(unsigned char *)(v8 + 458) = a6;
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + 40) = a7;
  *(unsigned char *)(v8 + 457) = a4;
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  *(unsigned char *)(v8 + 456) = a1;
  sub_2694(&qword_201E28);
  *(void *)(v8 + 96) = swift_task_alloc();
  *(void *)(v8 + 104) = swift_task_alloc();
  return _swift_task_switch(sub_1423A0, 0, 0);
}

uint64_t sub_1423A0()
{
  int v3 = *(unsigned __int8 *)(v2 + 456);
  if (!(!v1 & v0))
  {
    switch(*(unsigned char *)(v2 + 456))
    {
      case 'Y':
        if (qword_201C20 != -1) {
          swift_once();
        }
        sub_144BA8();
        *(void *)(v2 + 192) = qword_214740;
        swift_retain();
        uint64_t v7 = (void *)swift_task_alloc();
        *(void *)(v2 + 200) = v7;
        *uint64_t v7 = v2;
        v7[1] = sub_14375C;
        sub_144B4C();
        sub_144B6C();
        return sub_D2D74();
      case 'Z':
        if (qword_201C20 != -1) {
          swift_once();
        }
        sub_144BA8();
        *(void *)(v2 + 288) = qword_214740;
        swift_retain();
        uint64_t v11 = (void *)swift_task_alloc();
        *(void *)(v2 + 296) = v11;
        *uint64_t v11 = v2;
        v11[1] = sub_143D5C;
        sub_144B4C();
        sub_144B6C();
        return sub_D4D2C();
      case '[':
      case '\\':
      case '^':
      case '_':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
        goto LABEL_20;
      case ']':
        if (qword_201C28 != -1) {
          swift_once();
        }
        uint64_t v13 = *(void *)(v2 + 104);
        *(void *)(v2 + 304) = qword_214748;
        sub_2F2B8(93);
        swift_retain();
        sub_1ACE40();
        swift_bridgeObjectRelease();
        uint64_t v14 = sub_1AC1E0();
        *(void *)(v2 + 312) = v14;
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v13, 0, 1, v14);
        uint64_t v15 = (void *)swift_task_alloc();
        *(void *)(v2 + 320) = v15;
        *uint64_t v15 = v2;
        v15[1] = sub_143E5C;
        sub_144B9C(*(void *)(v2 + 104));
        sub_144B6C();
        return sub_4F340();
        if (qword_201C20 != -1) {
          swift_once();
        }
        uint64_t v18 = *(void *)(v2 + 64);
        uint64_t v17 = *(void *)(v2 + 72);
        char v19 = *(unsigned char *)(v2 + 462) & 1;
        *(void *)(v2 + 432) = qword_214740;
        swift_retain();
        *(void *)(v2 + 440) = sub_144978(v18, v19, v17, 0x60u);
        uint64_t v20 = (void *)swift_task_alloc();
        *(void *)(v2 + 448) = v20;
        *uint64_t v20 = v2;
        v20[1] = sub_144600;
        sub_144B9C(*(void *)(v2 + 16));
        sub_144B6C();
        return sub_D30B8(v21, v22, v23);
      case 'a':
        if (qword_201C20 != -1) {
          swift_once();
        }
        sub_144BA8();
        *(void *)(v2 + 256) = qword_214740;
        swift_retain();
        uint64_t v25 = (void *)swift_task_alloc();
        *(void *)(v2 + 264) = v25;
        *uint64_t v25 = v2;
        v25[1] = sub_143B5C;
        sub_144B4C();
        sub_144B6C();
        return sub_D5CE0();
      case 'g':
        if (qword_201C20 != -1) {
          swift_once();
        }
        sub_144C20();
        *(void *)(v2 + 208) = qword_214740;
        swift_retain();
        int v27 = (void *)swift_task_alloc();
        *(void *)(v2 + 216) = v27;
        *int v27 = v2;
        v27[1] = sub_14385C;
        sub_144B9C(*(void *)(v2 + 16));
        sub_144BD0();
        return sub_D33F8();
      default:
        JUMPOUT(0);
    }
  }
  switch(v3)
  {
    case 107:
      if (qword_201C20 != -1) {
        swift_once();
      }
      uint64_t v29 = *(void *)(v2 + 48);
      uint64_t v59 = *(void *)(v2 + 56);
      uint64_t v31 = *(void *)(v2 + 32);
      uint64_t v30 = *(void *)(v2 + 40);
      char v61 = *(unsigned char *)(v2 + 461) & 1;
      char v32 = *(unsigned char *)(v2 + 460) & 1;
      char v33 = *(unsigned char *)(v2 + 459) & 1;
      char v34 = *(unsigned char *)(v2 + 458) & 1;
      *(void *)(v2 + 384) = qword_214740;
      swift_retain();
      *(void *)(v2 + 392) = sub_144BF0(v31, v34);
      *(void *)(v2 + 400) = sub_144BF0(v30, v33);
      *(void *)(v2 + 408) = sub_144BF0(v29, v32);
      *(void *)(v2 + 416) = sub_144BF0(v59, v61);
      uint64_t v35 = (void *)swift_task_alloc();
      *(void *)(v2 + 424) = v35;
      *uint64_t v35 = v2;
      v35[1] = sub_144480;
      sub_144B9C(*(void *)(v2 + 16));
      sub_144B6C();
      return sub_D4114(v36, v37, v38, v39, v40, v41);
    case 147:
      if (qword_201C20 != -1) {
        swift_once();
      }
      sub_144BA8();
      *(void *)(v2 + 176) = qword_214740;
      swift_retain();
      uint64_t v43 = (void *)swift_task_alloc();
      *(void *)(v2 + 184) = v43;
      *uint64_t v43 = v2;
      v43[1] = sub_14365C;
      sub_144B4C();
      sub_144B6C();
      return sub_D43A4();
    case 173:
      if (qword_201C20 != -1) {
        swift_once();
      }
      sub_144BA8();
      *(void *)(v2 + 224) = qword_214740;
      swift_retain();
      uint64_t v45 = (void *)swift_task_alloc();
      *(void *)(v2 + 232) = v45;
      *uint64_t v45 = v2;
      v45[1] = sub_14395C;
      sub_144B88();
      sub_144B6C();
      return sub_D59B8(v46, v47, v48, v49, v50, v51);
    case 174:
      if (qword_201C20 != -1) {
        swift_once();
      }
      uint64_t v53 = (uint64_t *)(v2 + 32);
      if ((*(unsigned char *)(v2 + 457) & 1) == 0) {
        uint64_t v53 = (uint64_t *)(v2 + 24);
      }
      uint64_t v54 = *v53;
      *(void *)(v2 + 368) = qword_214740;
      swift_retain();
      uint64_t v55 = (void *)swift_task_alloc();
      *(void *)(v2 + 376) = v55;
      *uint64_t v55 = v2;
      v55[1] = sub_144370;
      uint64_t v56 = sub_144B9C(*(void *)(v2 + 16));
      return sub_D5B34(v56, v54);
    case 184:
      if (qword_201C20 != -1) {
        swift_once();
      }
      sub_144BA8();
      *(void *)(v2 + 128) = qword_214740;
      swift_retain();
      uint64_t v57 = (void *)swift_task_alloc();
      *(void *)(v2 + 136) = v57;
      *uint64_t v57 = v2;
      v57[1] = sub_14335C;
      sub_144B4C();
      sub_144B6C();
      return sub_D707C();
    default:
      if (v3 != 193)
      {
LABEL_20:
        swift_task_dealloc();
        swift_task_dealloc();
        sub_144C0C();
        sub_144B6C();
        __asm { BRAA            X2, X16 }
      }
      if (qword_201C20 != -1) {
        swift_once();
      }
      *(void *)(v2 + 144) = qword_214740;
      swift_retain();
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v2 + 152) = v4;
      *uint64_t v4 = v2;
      v4[1] = sub_14345C;
      sub_144B9C(*(void *)(v2 + 16));
      sub_144BD0();
      return sub_D7420();
  }
}

uint64_t sub_14325C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_144B34();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_14335C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_144B34();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_14345C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_144B34();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_14355C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_144B34();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_14365C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_144B34();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_14375C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_144B34();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_14385C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_144B34();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_14395C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_144B34();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_143A5C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_144B34();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_143B5C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_144B34();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_143C5C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_144B34();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_143D5C()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_144B34();
  sub_47BE4();
  return v9(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_143E5C()
{
  sub_E588();
  uint64_t v4 = v3;
  sub_1318C0();
  uint64_t v6 = v5;
  sub_A304();
  *uint64_t v7 = v6;
  *uint64_t v7 = *v1;
  swift_task_dealloc();
  uint64_t v8 = *(void *)(v2 + 104);
  if (v0)
  {
    swift_release();
    swift_errorRelease();
    sub_74610(v8);
    uint64_t v9 = sub_144720;
  }
  else
  {
    *(void *)(v6 + 328) = v4;
    sub_74610(v8);
    swift_release();
    uint64_t v9 = sub_143FA4;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_143FA4()
{
  char v1 = (void *)v0[41];
  if (!v1)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 1;
    goto LABEL_11;
  }
  id v2 = [v1 dialog];
  sub_7B324();
  unint64_t v3 = sub_1ACED0();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1AD170();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
  }
  else if (*(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_4:
    sub_4AA30(0, (v3 & 0xC000000000000001) == 0, v3);
    if ((v3 & 0xC000000000000001) != 0) {
      id v4 = (id)sub_1AD0A0();
    }
    else {
      id v4 = *(id *)(v3 + 32);
    }
    uint64_t v5 = v4;
    swift_bridgeObjectRelease();
    id v6 = [v5 fullPrint];

    sub_1ACDD0();
    sub_1ACE40();
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  uint64_t v7 = 1;
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v8 = v0[41];
LABEL_11:
  v0[42] = v8;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0[12], v7, 1, v0[39]);
  if (qword_201C20 != -1) {
    swift_once();
  }
  sub_144BA8();
  v0[43] = qword_214740;
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[44] = (uint64_t)v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1441D0;
  sub_144B88();
  return sub_D6BB0();
}

uint64_t sub_1441D0()
{
  sub_47D74();
  sub_E588();
  uint64_t v3 = v2;
  sub_1318C0();
  uint64_t v5 = v4;
  sub_A304();
  *id v6 = v5;
  *id v6 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_release();
  }
  else
  {
    swift_release();
    *(void *)(v5 + 360) = v3;
  }
  sub_47BE4();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1442EC()
{
  uint64_t v1 = *(void *)(v0 + 360);

  sub_74610(*(void *)(v0 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_144370()
{
  sub_47D74();
  sub_E588();
  sub_1318C0();
  uint64_t v3 = v2;
  sub_A304();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_144B34();
  sub_47BE4();
  return v7(v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_144480()
{
  sub_144BB4();
  uint64_t v3 = v2;
  sub_A304();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = sub_144B34();
  return v6(v5);
}

uint64_t sub_144600()
{
  sub_E588();
  sub_144BB4();
  uint64_t v3 = v2;
  sub_A304();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  swift_task_dealloc();
  swift_release();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = sub_144B34();
  return v6(v5);
}

uint64_t sub_144720()
{
  v0[42] = 0;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0[12], 1, 1, v0[39]);
  if (qword_201C20 != -1) {
    swift_once();
  }
  sub_144BA8();
  v0[43] = qword_214740;
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[44] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1441D0;
  sub_144B88();
  return sub_D6BB0();
}

uint64_t sub_144828()
{
  sub_74610(*(void *)(v0 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = sub_144C0C();
  return v2(v1);
}

uint64_t sub_14489C(uint64_t a1)
{
  return sub_1448DC(a1, (void (*)(void))type metadata accessor for WellnessQueryingCATsSimple, &qword_214740);
}

uint64_t sub_1448BC(uint64_t a1)
{
  return sub_1448DC(a1, (void (*)(void))type metadata accessor for WellnessCATsSimple, &qword_214748);
}

uint64_t sub_1448DC(uint64_t a1, void (*a2)(void), uint64_t *a3)
{
  uint64_t v5 = sub_1AC250();
  __chkstk_darwin(v5 - 8);
  a2(0);
  sub_1AC240();
  uint64_t result = sub_1AC210();
  *a3 = result;
  return result;
}

uint64_t sub_144978(uint64_t a1, char a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8 = sub_2694(&qword_201E28);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = (char *)&v18 - v10;
  if ((a2 & 1) == 0)
  {
    sub_A14A8(a3, (uint64_t)&v18 - v10);
    uint64_t v12 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1, v12) == 1)
    {
      sub_74610((uint64_t)v11);
    }
    else
    {
      uint64_t v13 = sub_1AC1D0();
      uint64_t v15 = v14;
      (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
      if (a4 != 205)
      {
        sub_1ABEC0();
        swift_allocObject();
        sub_1ABEB0();
        sub_C0448(v13, v15, a4, *(double *)&a1);
        swift_bridgeObjectRelease();
        sub_1AC050();
        swift_release();
        sub_1AC040();
        swift_release();
        uint64_t v16 = sub_1AC030();
        swift_release();
        return v16;
      }
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

uint64_t sub_144B34()
{
  return v0;
}

uint64_t sub_144B4C()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_144B88()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_144B9C@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_144BF0(uint64_t a1, char a2)
{
  return sub_144978(a1, a2, v2, 0x6Bu);
}

uint64_t sub_144C0C()
{
  return 0;
}

uint64_t destroy for GetActivitySummaryFlow(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 48);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 88);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 128);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 168);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 208);
  swift_unknownObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 256);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for GetActivitySummaryFlow(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 48, a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 88, a2 + 88);
  long long v7 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 152) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 128, a2 + 128);
  long long v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 192) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 168, a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 232) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 208, a2 + 208);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  uint64_t v11 = *(void *)(a2 + 280);
  uint64_t v10 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = v11;
  *(void *)(a1 + 288) = v10;
  uint64_t v12 = **(void (***)(uint64_t, uint64_t, uint64_t))(v11 - 8);
  swift_unknownObjectRetain();
  v12(a1 + 256, a2 + 256, v11);
  uint64_t v13 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v13;
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GetActivitySummaryFlow(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  sub_577C((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  sub_577C((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  sub_577C((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  sub_577C((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
  sub_577C((uint64_t *)(a1 + 168), (uint64_t *)(a2 + 168));
  sub_577C((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  sub_577C((uint64_t *)(a1 + 256), (uint64_t *)(a2 + 256));
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_retain();
  swift_release();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_retain();
  swift_release();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for GetActivitySummaryFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x140uLL);
}

uint64_t assignWithTake for GetActivitySummaryFlow(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 48);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 128);
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 168);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 208);
  long long v6 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v6;
  uint64_t v7 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v7;
  swift_unknownObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 256);
  long long v8 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v8;
  uint64_t v9 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v9;
  swift_release();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_release();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GetActivitySummaryFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 320))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GetActivitySummaryFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 312) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 320) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 320) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GetActivitySummaryFlow()
{
  return &type metadata for GetActivitySummaryFlow;
}

uint64_t sub_145238()
{
  sub_B6F88();
  sub_1324AC();

  return sub_1AAF80();
}

uint64_t sub_145288()
{
  sub_A364();
  v1[197] = v0;
  v1[196] = v2;
  uint64_t v3 = type metadata accessor for UnavailableDataFlow();
  v1[198] = v3;
  sub_53D4(v3);
  v1[199] = sub_A42C();
  uint64_t v4 = sub_1AC250();
  sub_53D4(v4);
  v1[200] = sub_A42C();
  uint64_t v5 = sub_1AC800();
  v1[201] = v5;
  sub_A19C(v5);
  v1[202] = v6;
  v1[203] = sub_A220();
  v1[204] = swift_task_alloc();
  v1[205] = swift_task_alloc();
  v1[206] = swift_task_alloc();
  uint64_t v7 = sub_1AABD0();
  v1[207] = v7;
  sub_A19C(v7);
  v1[208] = v8;
  v1[209] = sub_A42C();
  uint64_t v9 = sub_1AAD30();
  v1[210] = v9;
  sub_A19C(v9);
  v1[211] = v10;
  v1[212] = sub_A42C();
  uint64_t v11 = sub_2694(&qword_201CC8);
  sub_53D4(v11);
  v1[213] = sub_A42C();
  uint64_t v12 = sub_1AAA10();
  v1[214] = v12;
  sub_A19C(v12);
  v1[215] = v13;
  v1[216] = sub_A220();
  v1[217] = swift_task_alloc();
  v1[218] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v14, v15, v16);
}

void sub_14544C()
{
  uint64_t v76 = v0;
  unsigned __int8 v1 = sub_19D5A4(**(_WORD **)(v0 + 1576));
  *(unsigned char *)(v0 + 1233) = v1;
  if (v1 == 205)
  {
    uint64_t v2 = *(void *)(v0 + 1576);
    sub_1AC7D0();
    sub_A340();
    sub_6F904();
    v3();
    sub_14E990(v2, v0 + 80);
    uint64_t v4 = sub_1AC7F0();
    os_log_type_t v5 = sub_1ACF60();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void *)(v0 + 1624);
    uint64_t v8 = *(void *)(v0 + 1616);
    uint64_t v9 = *(void *)(v0 + 1608);
    if (v6)
    {
      uint64_t v72 = *(void *)(v0 + 1608);
      uint64_t v70 = *(void *)(v0 + 1624);
      uint64_t v10 = (uint8_t *)sub_A4B0();
      v75[0] = sub_E620();
      *(_DWORD *)uint64_t v10 = 136315138;
      uint64_t v11 = sub_1771BC(*(_WORD *)(v0 + 80));
      *(void *)(v0 + 1552) = sub_4A278(v11, v12, v75);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      sub_14E9C8(v0 + 80);
      sub_14F5D0();
      _os_log_impl(v13, v14, v15, v16, v10, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v70, v72);
    }
    else
    {
      sub_14E9C8(v0 + 80);

      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    }
    sub_14E990(*(void *)(v0 + 1576), v0 + 400);
    v75[0] = 0;
    v75[1] = 0xE000000000000000;
    sub_1AD080(72);
    v77._countAndFlagsBits = sub_1771BC(*(_WORD *)(v0 + 400));
    sub_1ACE70(v77);
    swift_bridgeObjectRelease();
    v78._object = (void *)0x80000000001BB8F0;
    v78._countAndFlagsBits = 0xD000000000000046;
    sub_1ACE70(v78);
    sub_1AD160();
    sub_6FED4();
    return;
  }
  uint64_t v17 = *(void *)(v0 + 1712);
  uint64_t v18 = *(void *)(v0 + 1704);
  char v19 = *(void **)(v0 + 1576);
  uint64_t v20 = v19[4];
  uint64_t v21 = v19[5];
  sub_2E38(v19 + 1, v20);
  (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v18, 1, v17) != 1)
  {
    uint64_t v22 = *(void *)(v0 + 1744);
    uint64_t v73 = *(void *)(v0 + 1736);
    uint64_t v23 = *(void *)(v0 + 1720);
    uint64_t v24 = *(void *)(v0 + 1712);
    uint64_t v25 = *(void *)(v0 + 1688);
    (*(void (**)(uint64_t, void, uint64_t))(v23 + 32))(v22, *(void *)(v0 + 1704), v24);
    sub_1AAD00();
    sub_1AA9F0();
    char v26 = sub_1AACB0();
    sub_FD4A0();
    v27();
    uint64_t v28 = *(void (**)(void))(v25 + 8);
    sub_47814();
    v28();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v73, v22, v24);
    uint64_t v29 = *(void *)(v0 + 1720);
    if (v26)
    {
      sub_1AAD00();
      sub_1AA9C0();
      char v30 = sub_1AACB0();
      sub_FD4A0();
      v31();
      sub_47814();
      v28();
      char v32 = *(void (**)(void))(v29 + 8);
      sub_47310();
      v32();
      if (v30)
      {
        ((void (*)(void, void))v32)(*(void *)(v0 + 1744), *(void *)(v0 + 1712));
        goto LABEL_11;
      }
      unint64_t v69 = v32;
    }
    else
    {
      unint64_t v69 = *(void (**)(void))(v29 + 8);
      sub_47310();
      v50();
    }
    sub_1AC7D0();
    sub_A340();
    sub_6F904();
    v51();
    sub_E524();
    v52();
    uint64_t v53 = sub_1AC7F0();
    os_log_type_t v54 = sub_1ACF50();
    BOOL v55 = os_log_type_enabled(v53, v54);
    uint64_t v56 = *(void *)(v0 + 1648);
    uint64_t v57 = *(void *)(v0 + 1616);
    if (v55)
    {
      uint64_t v74 = *(void *)(v0 + 1608);
      uint64_t v71 = *(void *)(v0 + 1648);
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      v75[0] = sub_E620();
      *(_DWORD *)uint64_t v58 = 136315138;
      sub_14ECB4(&qword_206728, (void (*)(uint64_t))&type metadata accessor for DateInterval);
      uint64_t v59 = sub_1AD2C0();
      *(void *)(v0 + 1560) = sub_4A278(v59, v60, v75);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      sub_14F5BC();
      char v61 = v69;
      sub_E530();
      v69();
      _os_log_impl(&def_342E4, v53, v54, "Received rings request outside of today. Punching out instead. (dateInteval: %s)", v58, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v71, v74);
    }
    else
    {
      sub_14F5BC();
      uint64_t v63 = v62;
      char v61 = v69;
      sub_E530();
      v69();

      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v63);
    }
    uint64_t v64 = *(void *)(v0 + 1744);
    uint64_t v65 = *(void *)(v0 + 1712);
    sub_E3FC(*(void *)(v0 + 1576) + 48, v0 + 992);
    *(void *)(v0 + 1056) = &type metadata for WellnessCATProvider;
    *(void *)(v0 + 1064) = &off_1F9800;
    uint64_t v66 = sub_14F5A4();
    *(void *)(v0 + 1032) = v66;
    *(_OWORD *)(v66 + 16) = 0u;
    *(_OWORD *)(v66 + 32) = 0u;
    sub_4DD74((uint64_t *)(v0 + 1072));
    *(_WORD *)(v0 + 984) = 231;
    *(unsigned char *)(v0 + 1232) = 0;
    sub_4E104();
    sub_1AB120();
    sub_D0A60(v0 + 984);
    ((void (*)(uint64_t, uint64_t))v61)(v64, v65);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_6FED4();
    __asm { BRAA            X1, X16 }
  }
  sub_2EF0C(*(void *)(v0 + 1704), &qword_201CC8);
LABEL_11:
  char v33 = *(uint8_t **)(v0 + 1640);
  uint64_t v34 = *(void *)(v0 + 1616);
  uint64_t v35 = *(void *)(v0 + 1608);
  id v36 = [objc_allocWithZone((Class)sub_1AC630()) init];
  *(void *)(v0 + 1752) = v36;
  uint64_t v37 = sub_1AC7D0();
  *(void *)(v0 + 1760) = v37;
  sub_A340();
  uint64_t v38 = *(void (**)(uint8_t *, uint64_t, uint64_t))(v34 + 16);
  *(void *)(v0 + 1768) = v38;
  *(void *)(v0 + 1776) = (v34 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v38(v33, v37, v35);
  uint64_t v39 = sub_1AC7F0();
  os_log_type_t v40 = sub_1ACF50();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (_WORD *)sub_292A0();
    sub_29368(v41);
    _os_log_impl(&def_342E4, v39, v40, "Trying to fetch Activity Summary", v33, 2u);
    sub_A1F0();
  }
  uint64_t v42 = *(void *)(v0 + 1640);
  uint64_t v43 = *(void *)(v0 + 1616);
  uint64_t v44 = *(void *)(v0 + 1608);
  uint64_t v45 = *(void *)(v0 + 1576);

  uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
  *(void *)(v0 + 1784) = v46;
  *(void *)(v0 + 1792) = (v43 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v46(v42, v44);
  uint64_t v47 = *(void **)(v45 + 248);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 1544;
  *(void *)(v0 + 24) = sub_145DC0;
  *(void *)(v0 + 1432) = swift_continuation_init();
  *(void *)(v0 + 1400) = _NSConcreteStackBlock;
  *(void *)(v0 + 1408) = 0x40000000;
  *(void *)(v0 + 1416) = sub_6AA8;
  *(void *)(v0 + 1424) = &unk_1F89D8;
  [v47 handleGetAcitivitySummary:v36 completion:v0 + 1400];
  sub_6FED4();
  _swift_continuation_await(v48);
}

uint64_t sub_145DC0()
{
  sub_A364();
  uint64_t v1 = *v0;
  sub_E53C();
  *uint64_t v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_145E94()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, void *))(v0 + 1768);
  uint64_t v2 = *(void *)(v0 + 1760);
  uint64_t v3 = *(void *)(v0 + 1632);
  uint64_t v4 = *(void **)(v0 + 1608);
  uint64_t v5 = *(void **)(v0 + 1544);
  *(void *)(v0 + 1800) = v5;
  sub_A340();
  v1(v3, v2, v4);
  BOOL v6 = v5;
  uint64_t v7 = sub_1AC7F0();
  os_log_type_t v8 = sub_1ACF50();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)sub_A4B0();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    *(void *)(v0 + 1536) = v6;
    uint64_t v4 = v6;
    sub_1ACFE0();
    *uint64_t v10 = v6;

    _os_log_impl(&def_342E4, v7, v8, "Received response: %@", v9, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
  }
  uint64_t v11 = (*(uint64_t (**)(void, void))(v0 + 1784))(*(void *)(v0 + 1632), *(void *)(v0 + 1608));
  uint64_t v12 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v6)))(v11);
  if (v12 != 4)
  {
    if (v12 == 102)
    {
      uint64_t v22 = *(void **)(v0 + 1752);
      char v23 = *(unsigned char *)(v0 + 1233);
      uint64_t v24 = *(unsigned char **)(v0 + 1592);
      uint64_t v25 = *(int **)(v0 + 1584);
      uint64_t v26 = *(void *)(v0 + 1576);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)&v24[v25[5]], 1, 1, *(void *)(v0 + 1712));
      sub_E3FC(v26 + 48, (uint64_t)&v24[v25[6]]);
      sub_9B48(v26 + 88, (uint64_t)&v24[v25[7]]);
      sub_1AB1C0();
      sub_A550();
      uint64_t v27 = sub_1AB1B0();
      uint64_t v28 = (uint64_t *)&v24[v25[8]];
      v28[3] = (uint64_t)v4;
      v28[4] = (uint64_t)&protocol witness table for ResponseFactory;
      *uint64_t v28 = v27;
      type metadata accessor for WellnessCATsSimple();
      sub_1AC240();
      uint64_t v29 = sub_1AC210();
      type metadata accessor for WellnessCATs();
      sub_1AC240();
      uint64_t v30 = sub_1AC1A0();
      *uint64_t v24 = v23;
      *(void *)&v24[v25[9]] = v29;
      *(void *)&v24[v25[10]] = v30;
      sub_14ECB4(&qword_201DF0, (void (*)(uint64_t))type metadata accessor for UnavailableDataFlow);
      sub_A7C4();
      sub_1AB120();

      sub_14EB0C((uint64_t)v24, (void (*)(void))type metadata accessor for UnavailableDataFlow);
    }
    else if (v12 == 101)
    {
      uint64_t v13 = *(void **)(v0 + 1752);
      char v14 = *(unsigned char *)(v0 + 1233);
      uint64_t v15 = *(void *)(v0 + 1576);
      sub_E3FC(v15 + 48, v0 + 728);
      sub_9B48(v15 + 88, v0 + 768);
      sub_1AB1C0();
      sub_A550();
      uint64_t v16 = sub_1AB1B0();
      *(void *)(v0 + 952) = v4;
      *(void *)(v0 + 960) = &protocol witness table for ResponseFactory;
      *(void *)(v0 + 928) = v16;
      type metadata accessor for WellnessCATsSimple();
      sub_1AC240();
      uint64_t v17 = sub_1AC210();
      type metadata accessor for WellnessCATs();
      sub_1AC240();
      uint64_t v18 = sub_1AC1A0();
      *(unsigned char *)(v0 + 720) = v14;
      *(void *)(v0 + 968) = v17;
      *(void *)(v0 + 976) = v18;
      sub_9D40();
      sub_1AB120();

      sub_9D8C(v0 + 720);
    }
    else
    {
      uint64_t v31 = *(void **)(v0 + 1752);
      sub_9B48(*(void *)(v0 + 1576) + 88, v0 + 1240);
      sub_9BA4();
      sub_1AB120();

      sub_9BF0(v0 + 1240);
    }
    sub_14F1D0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_14F4C4();
    __asm { BRAA            X1, X16 }
  }
  char v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 1808) = v19;
  *char v19 = v0;
  v19[1] = sub_1463C4;
  sub_14F4C4();
  return sub_146580();
}

uint64_t sub_1463C4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 1816) = v3;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

void sub_146494()
{
  uint64_t v1 = *(void **)(v0 + 1800);
  uint64_t v2 = *(void **)(v0 + 1752);
  sub_1AB130();
  swift_release();

  sub_14F1D0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_14F4C4();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_146580()
{
  sub_A364();
  *(void *)(v1 + 3216) = v0;
  *(unsigned char *)(v1 + 585) = v2;
  *(void *)(v1 + 3208) = v3;
  uint64_t v4 = sub_2694(&qword_2022D0);
  sub_53D4(v4);
  *(void *)(v1 + 3224) = sub_A42C();
  uint64_t v5 = sub_1AABD0();
  *(void *)(v1 + 3232) = v5;
  sub_A19C(v5);
  *(void *)(v1 + 3240) = v6;
  *(void *)(v1 + 3248) = sub_A42C();
  uint64_t v7 = type metadata accessor for SingleActivitySummaryModel();
  *(void *)(v1 + 3256) = v7;
  sub_53D4(v7);
  *(void *)(v1 + 3264) = sub_A220();
  *(void *)(v1 + 3272) = swift_task_alloc();
  *(void *)(v1 + 3280) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SnippetHeaderModel();
  *(void *)(v1 + 3288) = v8;
  sub_53D4(v8);
  *(void *)(v1 + 3296) = sub_A220();
  *(void *)(v1 + 3304) = swift_task_alloc();
  *(void *)(v1 + 3312) = swift_task_alloc();
  uint64_t v9 = sub_1AC1E0();
  *(void *)(v1 + 3320) = v9;
  sub_A19C(v9);
  *(void *)(v1 + 3328) = v10;
  *(void *)(v1 + 3336) = sub_A220();
  *(void *)(v1 + 3344) = swift_task_alloc();
  *(void *)(v1 + 3352) = swift_task_alloc();
  *(void *)(v1 + 3360) = swift_task_alloc();
  *(void *)(v1 + 3368) = swift_task_alloc();
  *(void *)(v1 + 3376) = swift_task_alloc();
  uint64_t v11 = sub_2694(&qword_201E28);
  sub_53D4(v11);
  *(void *)(v1 + 3384) = sub_A220();
  *(void *)(v1 + 3392) = swift_task_alloc();
  *(void *)(v1 + 3400) = swift_task_alloc();
  *(void *)(v1 + 3408) = swift_task_alloc();
  *(void *)(v1 + 3416) = swift_task_alloc();
  uint64_t v12 = sub_1AB0A0();
  *(void *)(v1 + 3424) = v12;
  sub_A19C(v12);
  *(void *)(v1 + 3432) = v13;
  *(void *)(v1 + 3440) = sub_A220();
  *(void *)(v1 + 3448) = swift_task_alloc();
  uint64_t v14 = sub_1AB3D0();
  *(void *)(v1 + 3456) = v14;
  sub_A19C(v14);
  *(void *)(v1 + 3464) = v15;
  *(void *)(v1 + 3472) = sub_A220();
  *(void *)(v1 + 3480) = swift_task_alloc();
  uint64_t v16 = sub_1AC800();
  *(void *)(v1 + 3488) = v16;
  sub_A19C(v16);
  *(void *)(v1 + 3496) = v17;
  *(void *)(v1 + 3504) = sub_A220();
  *(void *)(v1 + 3512) = swift_task_alloc();
  *(void *)(v1 + 3520) = swift_task_alloc();
  *(void *)(v1 + 3528) = swift_task_alloc();
  *(void *)(v1 + 3536) = swift_task_alloc();
  *(void *)(v1 + 3544) = swift_task_alloc();
  *(void *)(v1 + 3552) = swift_task_alloc();
  *(void *)(v1 + 3560) = swift_task_alloc();
  *(void *)(v1 + 3568) = swift_task_alloc();
  *(void *)(v1 + 3576) = swift_task_alloc();
  *(void *)(v1 + 3584) = swift_task_alloc();
  *(void *)(v1 + 3592) = swift_task_alloc();
  *(void *)(v1 + 3600) = swift_task_alloc();
  uint64_t v18 = sub_2694(&qword_2079C8);
  sub_53D4(v18);
  *(void *)(v1 + 3608) = sub_A220();
  *(void *)(v1 + 3616) = swift_task_alloc();
  *(void *)(v1 + 3624) = swift_task_alloc();
  *(void *)(v1 + 3632) = swift_task_alloc();
  *(void *)(v1 + 3640) = swift_task_alloc();
  *(void *)(v1 + 3648) = swift_task_alloc();
  *(void *)(v1 + 3656) = swift_task_alloc();
  *(void *)(v1 + 3664) = swift_task_alloc();
  *(void *)(v1 + 3672) = swift_task_alloc();
  *(void *)(v1 + 3680) = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v19, v20, v21);
}

uint64_t sub_146938()
{
  id v1 = [*(id *)(v0 + 3208) activeEnergyBurnedGoal];
  if (v1)
  {
    char v2 = v1;
    sub_34214(0, &qword_207A18);
    sub_1AA950();

    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = *(void *)(v0 + 3680);
  uint64_t v5 = *(void *)(v0 + 3672);
  uint64_t v6 = sub_2694(&qword_2079D0);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, v3, 1, v6);
  uint64_t v7 = sub_1324AC();
  sub_A76E8(v7, v8, v9);
  uint64_t v10 = sub_2694(&qword_2079D0);
  double v11 = 0.0;
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1, v10))
  {
    sub_1AA970();
    double v11 = v12;
  }
  uint64_t v13 = *(void **)(v0 + 3208);
  unsigned __int8 v14 = *(unsigned char *)(v0 + 585);
  sub_2EF0C(*(void *)(v0 + 3680), &qword_2079C8);
  [v13 appleExerciseTimeGoal];
  double v16 = v15;
  [v13 appleStandHoursGoal];
  if (sub_14BEFC(v14, v11, v16, v17))
  {
    sub_E3FC(*(void *)(v0 + 3216) + 48, v0 + 344);
    *(void *)(v0 + 408) = &type metadata for WellnessCATProvider;
    *(void *)(v0 + 416) = &off_1F9800;
    uint64_t v18 = sub_14F5A4();
    *(void *)(v0 + 384) = v18;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    sub_4DD74((uint64_t *)(v0 + 424));
    *(_WORD *)(v0 + 336) = 249;
    *(unsigned char *)(v0 + 584) = 0;
    sub_4E104();
    sub_1AAF70();
    sub_D0A60(v0 + 336);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_14F230();
    __asm { BRAA            X2, X16 }
  }
  uint64_t v21 = *(void **)(v0 + 3208);
  *(void *)(v0 + 3096) = 0;
  *(unsigned char *)(v0 + 3104) = 1;
  *(void *)(v0 + 3112) = 0;
  *(unsigned char *)(v0 + 3120) = 1;
  id v22 = [v21 isWheelchairUser];
  if (v22)
  {
    uint64_t v23 = v22;
    unsigned __int8 v24 = [v22 BOOLValue];
  }
  else
  {
    unsigned __int8 v24 = 0;
  }
  *(unsigned char *)(v0 + 586) = v24;
  int v25 = *(unsigned __int8 *)(v0 + 585);
  uint64_t v26 = sub_14EA48(*(void **)(v0 + 3208));
  *(void *)(v0 + 3688) = v26;
  uint64_t v113 = v27;
  *(void *)(v0 + 3696) = v27;
  if (v25)
  {
    uint64_t v28 = (BOOL *)(v0 + 3104);
    if (v25 == 91)
    {
      id v41 = [*(id *)(v0 + 3208) activeEnergyBurned];
      if (v41)
      {
        uint64_t v42 = v41;
        sub_34214(0, &qword_207A18);
        sub_14F47C();

        uint64_t v43 = 0;
      }
      else
      {
        uint64_t v43 = 1;
      }
      uint64_t v47 = *(void *)(v0 + 3664);
      uint64_t v48 = *(void *)(v0 + 3656);
      sub_14F3BC(v48, v43);
      sub_A76E8(v48, v47, &qword_2079C8);
      int v49 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v47, 1, v10);
      uint64_t v50 = *(void *)(v0 + 3664);
      if (v49)
      {
        sub_2EF0C(*(void *)(v0 + 3664), &qword_2079C8);
        double v51 = 0.0;
      }
      else
      {
        sub_1AA970();
        sub_2EF0C(v50, &qword_2079C8);
        double v51 = sub_14F570();
      }
      uint64_t v52 = *(void **)(v0 + 3208);
      *(double *)(v0 + 3096) = v51;
      *uint64_t v28 = v49 != 0;
      id v53 = [v52 activeEnergyBurnedGoal];
      if (v53)
      {
        os_log_type_t v54 = v53;
        sub_34214(0, &qword_207A18);
        sub_14F47C();

        uint64_t v55 = 0;
      }
      else
      {
        uint64_t v55 = 1;
      }
      uint64_t v56 = *(void *)(v0 + 3648);
      uint64_t v57 = *(void *)(v0 + 3640);
      sub_14F3BC(v57, v55);
      sub_A76E8(v57, v56, &qword_2079C8);
      int v58 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v56, 1, v10);
      BOOL v46 = v58 != 0;
      uint64_t v59 = *(void *)(v0 + 3648);
      if (v58)
      {
        sub_2EF0C(*(void *)(v0 + 3648), &qword_2079C8);
        double v60 = 0.0;
      }
      else
      {
        sub_1AA970();
        sub_2EF0C(v59, &qword_2079C8);
        double v60 = sub_14F570();
      }
      *(double *)(v0 + 3112) = v60;
    }
    else
    {
      if (v25 == 90)
      {
        uint64_t v44 = *(void **)(v0 + 3208);
        [v44 appleExerciseTime];
        *(double *)(v0 + 3096) = sub_C0448(v26, v113, 0x5Au, v45);
        *uint64_t v28 = 0;
        [v44 appleExerciseTimeGoal];
        uint64_t v31 = sub_47968();
        unsigned __int8 v34 = 90;
      }
      else
      {
        if (v25 != 4)
        {
LABEL_36:
          uint64_t v61 = *(void *)(v0 + 3496);
          *(void *)(v0 + 3856) = sub_1AC7D0();
          sub_A340();
          uint64_t v62 = *(void (**)(void))(v61 + 16);
          *(void *)(v0 + 3864) = v62;
          *(void *)(v0 + 3872) = (v61 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
          sub_6F904();
          v62();
          uint64_t v63 = sub_1AC7F0();
          os_log_type_t v64 = sub_1ACF50();
          if (os_log_type_enabled(v63, v64))
          {
            uint64_t v65 = (uint8_t *)sub_292A0();
            *(_WORD *)uint64_t v65 = 0;
            _os_log_impl(&def_342E4, v63, v64, "Creating pattern result for single ring query.", v65, 2u);
            sub_A1F0();
          }
          uint64_t v66 = *(void *)(v0 + 3496);

          unsigned __int8 v67 = *(void (**)(void))(v66 + 8);
          *(void *)(v0 + 3880) = v67;
          *(void *)(v0 + 3888) = (v66 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          sub_5B568();
          sub_47310();
          v67();
          *(void *)(v0 + 2432) = &type metadata for WellnessFeatureFlagsKey;
          *(void *)(v0 + 2440) = sub_45E30();
          *(unsigned char *)(v0 + 2408) = 4;
          char v68 = sub_1AB480();
          _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2408);
          if ((v68 & 1) == 0)
          {
            sub_2E38((void *)(*(void *)(v0 + 3216) + 208), *(void *)(*(void *)(v0 + 3216) + 232));
            unsigned __int8 v111 = (char *)&dword_204C10 + dword_204C10;
            swift_bridgeObjectRetain();
            Swift::String v77 = (void *)swift_task_alloc();
            *(void *)(v0 + 3896) = v77;
            *Swift::String v77 = v0;
            v77[1] = sub_149234;
            __asm { BR              X8 }
          }
          sub_A340();
          sub_6F904();
          v62();
          unint64_t v69 = sub_1AC7F0();
          os_log_type_t v70 = sub_1ACF50();
          if (os_log_type_enabled(v69, v70))
          {
            *(_WORD *)sub_292A0() = 0;
            sub_14F414(&def_342E4, v69, v71, "#GetActivitySummaryFlow: Creating smart result for single ring query.");
            sub_A1F0();
          }
          uint64_t v72 = *(void *)(v0 + 3416);
          char v73 = *(unsigned char *)(v0 + 585);

          sub_A7C4();
          sub_47310();
          v67();
          sub_2F2B8(v73);
          sub_1ACE40();
          swift_bridgeObjectRelease();
          sub_14F288(v72);
          uint64_t v74 = (void *)swift_task_alloc();
          *(void *)(v0 + 3912) = v74;
          *uint64_t v74 = v0;
          v74[1] = sub_14984C;
          sub_144B9C(*(void *)(v0 + 3416));
          sub_14F230();
          return sub_4FEC8();
        }
        uint64_t v29 = *(void **)(v0 + 3208);
        [v29 appleStandHours];
        *(double *)(v0 + 3096) = sub_C0448(v26, v113, 4u, v30);
        *uint64_t v28 = 0;
        [v29 appleStandHoursGoal];
        uint64_t v31 = sub_47968();
        unsigned __int8 v34 = 4;
      }
      BOOL v46 = 0;
      *(double *)(v0 + 3112) = sub_C0448(v31, v32, v34, v33);
    }
    *(unsigned char *)(v0 + 3120) = v46;
    goto LABEL_36;
  }
  uint64_t v35 = *(void **)(v0 + 3208);
  [v35 appleExerciseTime];
  *(double *)(v0 + 3704) = sub_C0448(v26, v113, 0, v36);
  [v35 appleExerciseTimeGoal];
  *(double *)(v0 + 3712) = sub_14F460(v37);
  id v38 = [v35 activeEnergyBurned];
  if (v38)
  {
    uint64_t v39 = v38;
    sub_34214(0, &qword_207A18);
    sub_14F47C();

    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = 1;
  }
  uint64_t v78 = *(void *)(v0 + 3632);
  uint64_t v79 = *(void *)(v0 + 3624);
  sub_14F3BC(v79, v40);
  sub_A76E8(v79, v78, &qword_2079C8);
  int v80 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v78, 1, v10);
  uint64_t v81 = *(void *)(v0 + 3632);
  if (v80)
  {
    sub_2EF0C(*(void *)(v0 + 3632), &qword_2079C8);
    double v82 = 0.0;
  }
  else
  {
    sub_1AA970();
    double v84 = v83;
    sub_2EF0C(v81, &qword_2079C8);
    double v82 = sub_C0448(v26, v113, 0, v84);
  }
  *(double *)(v0 + 3720) = v82;
  id v85 = [*(id *)(v0 + 3208) activeEnergyBurnedGoal];
  if (v85)
  {
    uint64_t v86 = v85;
    sub_34214(0, &qword_207A18);
    sub_1AA950();

    uint64_t v87 = 0;
  }
  else
  {
    uint64_t v87 = 1;
  }
  uint64_t v88 = *(void *)(v0 + 3616);
  uint64_t v89 = *(void *)(v0 + 3608);
  sub_14F3BC(v89, v87);
  sub_A76E8(v89, v88, &qword_2079C8);
  int v90 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v88, 1, v10);
  uint64_t v91 = *(void *)(v0 + 3616);
  if (v90)
  {
    sub_2EF0C(*(void *)(v0 + 3616), &qword_2079C8);
    double v92 = 0.0;
  }
  else
  {
    sub_1AA970();
    double v94 = v93;
    sub_2EF0C(v91, &qword_2079C8);
    double v92 = sub_C0448(v26, v113, 0, v94);
  }
  *(double *)(v0 + 3728) = v92;
  uint64_t v95 = *(void **)(v0 + 3208);
  [v95 appleStandHours];
  *(double *)(v0 + 3736) = sub_14F460(v96);
  [v95 appleStandHoursGoal];
  *(double *)(v0 + 3744) = sub_14F460(v97);
  if (v90 | v80) {
    goto LABEL_36;
  }
  uint64_t v98 = *(void *)(v0 + 3496);
  *(void *)(v0 + 3752) = sub_1AC7D0();
  sub_A340();
  *(void *)(v0 + 3760) = *(void *)(v98 + 16);
  *(void *)(v0 + 3768) = (v98 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  sub_6F904();
  v99();
  uint64_t v100 = sub_1AC7F0();
  os_log_type_t v101 = sub_1ACF50();
  if (os_log_type_enabled(v100, v101))
  {
    *(_WORD *)sub_292A0() = 0;
    sub_14F414(&def_342E4, v100, v102, "Creating output result for multiple ring query.");
    sub_A1F0();
  }
  uint64_t v103 = *(void *)(v0 + 3496);

  *(void *)(v0 + 3776) = *(void *)(v103 + 8);
  *(void *)(v0 + 3784) = (v103 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_A7C4();
  sub_FD4A0();
  v104();
  uint64_t v105 = (void *)swift_task_alloc();
  *(void *)(v0 + 3792) = v105;
  *uint64_t v105 = v0;
  v105[1] = sub_14777C;
  sub_14F230();
  return sub_D5F0C(v106, v107, v108, v109);
}

uint64_t sub_14777C()
{
  sub_A364();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 3800) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_147870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  sub_14F18C();
  sub_14F2B0();
  double v51 = *(void **)(v50 + 3800);
  uint64_t v52 = *(void **)(v50 + 3216);
  sub_1AB070();
  sub_E524();
  v53();
  sub_1AB370();
  sub_47310();
  v54();
  id v55 = [v51 catId];
  sub_1ACDD0();

  sub_47BF8();
  sub_1AB380();
  uint64_t v56 = v52 + 6;
  sub_2E38(v52 + 6, v52[9]);
  uint64_t v57 = sub_47BF8();
  v58(v57);
  sub_2E38((void *)(v50 + 2728), *(void *)(v50 + 2752));
  sub_47BF8();
  char v59 = sub_1AB040();
  sub_14E990((uint64_t)v52, v50 + 16);
  if (v59)
  {
    sub_14E9C8(v50 + 16);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v50 + 2728);
LABEL_4:
    swift_task_alloc();
    sub_250E0();
    *(void *)(v50 + 3808) = v63;
    *uint64_t v63 = v64;
    v63[1] = sub_147E84;
    sub_FD5F0();
    return sub_14C234();
  }
  sub_2E38((void *)(v50 + 64), *(void *)(v50 + 88));
  uint64_t v60 = sub_5B568();
  v61(v60);
  sub_2E38((void *)(v50 + 2688), *(void *)(v50 + 2712));
  sub_5B568();
  char v62 = sub_1AB030();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v50 + 2688);
  sub_14E9C8(v50 + 16);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v50 + 2728);
  if (v62) {
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  uint64_t v68 = v52[9];
  uint64_t v67 = v52[10];
  sub_2E38(v56, v68);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v67);
  unint64_t v69 = (void *)sub_1324AC();
  sub_2E38(v69, v70);
  char v71 = sub_1AB050();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v50 + 2648);
  if (v71)
  {
    uint64_t v72 = *(void **)(v50 + 3800);
    uint64_t v73 = *(void *)(v50 + 3216);
    sub_E3FC((uint64_t)v56, v50 + 600);
    *(void *)(v50 + 664) = &type metadata for WellnessCATProvider;
    *(void *)(v50 + 672) = &off_1F9800;
    uint64_t v74 = sub_14F5A4();
    *(void *)(v50 + 640) = v74;
    *(_OWORD *)(v74 + 16) = 0u;
    *(_OWORD *)(v74 + 32) = 0u;
    sub_9B48(v73 + 88, v50 + 680);
    *(_WORD *)(v50 + 592) = 249;
    *(unsigned char *)(v50 + 840) = 0;
    sub_2E38((void *)(v73 + 256), *(void *)(v73 + 280));
    *(void *)(v50 + 3832) = sub_2694(&qword_202588);
    uint64_t v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_1AF530;
    *(void *)(v75 + 32) = v72;
    uint64_t v98 = v75;
    sub_1ACEF0();
    *(void *)(v50 + 3840) = v98;
    id v76 = v72;
    swift_task_alloc();
    sub_250E0();
    *(void *)(v50 + 3848) = v77;
    *Swift::String v77 = v78;
    v77[1] = sub_148950;
    sub_47228();
    sub_FD5F0();
    return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v79, v80, v81, v82, v83);
  }
  else
  {
    id v85 = *(void **)(v50 + 3800);
    uint64_t v86 = *(void *)(v50 + 3480);
    uint64_t v87 = *(void *)(v50 + 3464);
    uint64_t v88 = *(void *)(v50 + 3456);
    sub_9B48(*(void *)(v50 + 3216) + 88, v50 + 1096);
    sub_9BA4();
    uint64_t v97 = sub_1AAF70();

    sub_9BF0(v50 + 1096);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v88);
    sub_14EEF0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_14F4B4();
    sub_FD5F0();
    return v91(v89, v90, v91, v92, v93, v94, v95, v96, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             v97,
             a46,
             a47,
             a48,
             a49,
             a50);
  }
}

uint64_t sub_147E84()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_E53C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_147F78()
{
  sub_6FE58();
  sub_A76E8(v0 + 2152, v0 + 2056, &qword_207A00);
  uint64_t v1 = *(void **)(v0 + 2064);
  if (!v1)
  {
    uint64_t v31 = *(void (**)(uint64_t))(v0 + 3760);
    sub_A340();
    uint64_t v32 = sub_470B8();
    v31(v32);
    double v33 = (void *)sub_1AC7F0();
    os_log_type_t v34 = sub_1ACF50();
    if (sub_29300(v34))
    {
      uint64_t v35 = (_WORD *)sub_292A0();
      sub_29368(v35);
      sub_A7FC(&def_342E4, v36, v37, "Call to getLabels() returned nil, returning GenericErrorFlow");
      sub_A1F0();
    }
    id v38 = *(void **)(v0 + 3800);
    uint64_t v39 = *(void (**)(uint64_t))(v0 + 3776);
    uint64_t v40 = *(void *)(v0 + 3464);
    uint64_t v52 = *(void *)(v0 + 3456);
    uint64_t v54 = *(void *)(v0 + 3480);
    uint64_t v41 = *(void *)(v0 + 3216);

    uint64_t v42 = sub_A7C4();
    v39(v42);
    sub_9B48(v41 + 88, v0 + 1256);
    sub_9BA4();
    sub_1AAF70();

    sub_9BF0(v0 + 1256);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v54, v52);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_14F4FC();
    __asm { BRAA            X2, X16 }
  }
  id v53 = *(void **)(v0 + 3800);
  Swift::Double v2 = *(double *)(v0 + 3744);
  Swift::Double v3 = *(double *)(v0 + 3736);
  Swift::Double v4 = *(double *)(v0 + 3728);
  Swift::Double v5 = *(double *)(v0 + 3720);
  Swift::Double v6 = *(double *)(v0 + 3712);
  Swift::Double v7 = *(double *)(v0 + 3704);
  uint64_t v8 = *(void *)(v0 + 3216);
  uint64_t v9 = *(void *)(v0 + 2056);
  uint64_t v10 = *(void **)(v0 + 2080);
  uint64_t v11 = *(void *)(v0 + 2088);
  uint64_t v50 = *(void **)(v0 + 2096);
  uint64_t v51 = *(void *)(v0 + 2072);
  uint64_t v48 = *(void **)(v0 + 2112);
  uint64_t v49 = *(void *)(v0 + 2104);
  Swift::String standLabel = *(Swift::String *)(v0 + 2120);
  uint64_t v12 = *(void *)(v0 + 2136);
  uint64_t v13 = *(void **)(v0 + 2144);
  *(void *)(v0 + 2392) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 2400) = sub_45E30();
  *(unsigned char *)(v0 + 2368) = 4;
  char v14 = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 2368);
  standUnitLabel._countAndFlagsBits = v12;
  standUnitLabel._object = v13;
  v15._countAndFlagsBits = v51;
  v16._countAndFlagsBits = v9;
  v16._object = v1;
  v15._object = v10;
  v17._countAndFlagsBits = v11;
  v18._countAndFlagsBits = v49;
  v17._object = v50;
  v18._object = v48;
  PhoneRingsModel.init(exerciseGoalValue:exerciseTotalValue:moveGoalValue:moveTotalValue:standGoalValue:standTotalValue:exerciseLabel:exerciseUnitLabel:moveLabel:moveUnitLabel:standLabel:standUnitLabel:isSmartEnabled:)((WellnessFlowPlugin::PhoneRingsModel *)(v0 + 848), v6, v7, v4, v5, v2, v3, v16, v15, v17, v18, standLabel, standUnitLabel, v14 & 1);
  sub_2E38((void *)(v8 + 256), *(void *)(v8 + 280));
  *(void *)(v0 + 2312) = type metadata accessor for WellnessSnippets();
  *(void *)(v0 + 2320) = sub_14ECB4((unint64_t *)&qword_202590, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  uint64_t v19 = sub_B5B0((uint64_t *)(v0 + 2288));
  memcpy(v19, (const void *)(v0 + 848), 0xF1uLL);
  swift_storeEnumTagMultiPayload();
  sub_2694(&qword_202588);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1AF530;
  *(void *)(v20 + 32) = v53;
  uint64_t v55 = v20;
  sub_1ACEF0();
  *(void *)(v0 + 3816) = v55;
  id v21 = v53;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 3824) = v22;
  *id v22 = v23;
  v22[1] = sub_1485B4;
  sub_14F4FC();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v24, v25, v26, v27, v28, v29);
}

uint64_t sub_1485B4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *Swift::Double v2 = v1;
  uint64_t v3 = v1 + 2288;
  uint64_t v4 = *v0;
  sub_E53C();
  *Swift::Double v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1486A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  sub_14F4E0();
  uint64_t v57 = *(void **)(v56 + 3800);
  uint64_t v58 = *(void *)(v56 + 3480);
  uint64_t v59 = *(void *)(v56 + 3464);
  uint64_t v60 = *(void *)(v56 + 3456);
  sub_E3FC(v56 + 2328, v56 + 2248);
  uint64_t v61 = swift_allocObject();
  sub_24D80((long long *)(v56 + 2248), v61 + 16);
  sub_1AB350();
  sub_1AAE40();
  swift_allocObject();
  *(void *)(v56 + 3192) = sub_1AAE30();
  uint64_t v71 = sub_1AAF70();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v56 + 2328);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
  swift_release();
  sub_14F004();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F498();
  return v64(v62, v63, v64, v65, v66, v67, v68, v69, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           v71,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56);
}

uint64_t sub_148950()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_E53C();
  *Swift::Double v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_148A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_14F4E0();
  a63 = v65;
  a64 = v66;
  a62 = v64;
  uint64_t v67 = *(void **)(v64 + 3216);
  sub_E3FC(v64 + 2488, v64 + 2448);
  uint64_t v68 = swift_allocObject();
  sub_24D80((long long *)(v64 + 2448), v68 + 16);
  sub_1AB350();
  sub_1AAE40();
  swift_allocObject();
  uint64_t v69 = sub_1AAE30();
  uint64_t v71 = v67[9];
  uint64_t v70 = v67[10];
  sub_2E38(v67 + 6, v71);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v70 + 16))(&a47, v71, v70);
  uint64_t v72 = sub_14F5A4();
  *(_OWORD *)(v72 + 16) = xmmword_1B04D0;
  *(void *)(v64 + 3128) = v69;
  *(void *)(v72 + 32) = sub_1AAF70();
  sub_4BA60();
  *(void *)(v72 + 40) = sub_1AAF70();
  a52 = v72;
  sub_1ACEF0();
  sub_1AC300();
  swift_allocObject();
  uint64_t v119 = sub_1AC2F0();
  sub_A340();
  uint64_t v73 = sub_14F590();
  v74(v73);
  uint64_t v75 = sub_1AC7F0();
  os_log_type_t v76 = sub_1ACF50();
  if (os_log_type_enabled(v75, v76))
  {
    *(_WORD *)sub_292A0() = 0;
    sub_14F414(&def_342E4, v75, v77, "Preparing SequenceFlow for Output and AppPunchOut.");
    sub_A1F0();
  }
  uint64_t v78 = *(void **)(v64 + 3800);
  uint64_t v79 = *(void (**)(uint64_t))(v64 + 3776);
  uint64_t v125 = *(void *)(v64 + 3480);
  uint64_t v80 = *(void *)(v64 + 3464);
  uint64_t v81 = *(void *)(v64 + 3456);

  uint64_t v82 = sub_A7C4();
  v79(v82);
  *(void *)(v64 + 3136) = v119;
  sub_14ECB4(&qword_203110, (void (*)(uint64_t))&type metadata accessor for SequenceFlow);
  uint64_t v129 = sub_1AAF70();
  swift_release();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v64 + 2488);
  sub_4BAAC(v64 + 592);
  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v125, v81);
  swift_release();
  uint64_t v92 = *(void *)(v64 + 3600);
  uint64_t v93 = *(void *)(v64 + 3592);
  uint64_t v94 = *(void *)(v64 + 3584);
  uint64_t v95 = *(void *)(v64 + 3576);
  uint64_t v96 = *(void *)(v64 + 3568);
  uint64_t v97 = *(void *)(v64 + 3560);
  uint64_t v98 = *(void *)(v64 + 3552);
  uint64_t v99 = *(void *)(v64 + 3544);
  uint64_t v100 = *(void *)(v64 + 3536);
  uint64_t v101 = *(void *)(v64 + 3528);
  uint64_t v102 = *(void *)(v64 + 3520);
  uint64_t v103 = *(void *)(v64 + 3512);
  uint64_t v104 = *(void *)(v64 + 3504);
  uint64_t v105 = *(void *)(v64 + 3480);
  uint64_t v106 = *(void *)(v64 + 3472);
  uint64_t v107 = *(void *)(v64 + 3448);
  uint64_t v108 = *(void *)(v64 + 3440);
  uint64_t v109 = *(void *)(v64 + 3416);
  uint64_t v110 = *(void *)(v64 + 3408);
  uint64_t v111 = *(void *)(v64 + 3400);
  uint64_t v112 = *(void *)(v64 + 3392);
  uint64_t v113 = *(void *)(v64 + 3384);
  uint64_t v114 = *(void *)(v64 + 3376);
  uint64_t v115 = *(void *)(v64 + 3368);
  uint64_t v116 = *(void *)(v64 + 3360);
  uint64_t v117 = *(void *)(v64 + 3352);
  uint64_t v118 = *(void *)(v64 + 3344);
  uint64_t v120 = *(void *)(v64 + 3336);
  uint64_t v121 = *(void *)(v64 + 3312);
  uint64_t v122 = *(void *)(v64 + 3304);
  uint64_t v123 = *(void *)(v64 + 3296);
  uint64_t v124 = *(void *)(v64 + 3280);
  uint64_t v126 = *(void *)(v64 + 3272);
  uint64_t v127 = *(void *)(v64 + 3264);
  uint64_t v128 = *(void *)(v64 + 3248);
  uint64_t v130 = *(void *)(v64 + 3224);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F498();
  return v85(v83, v84, v85, v86, v87, v88, v89, v90, a9, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101,
           v102,
           v103,
           v104,
           v105,
           v106,
           v107,
           v108,
           v109,
           v110,
           v111,
           v112,
           v113,
           v114,
           v115,
           v116,
           v117,
           v118,
           v120,
           v121,
           v122,
           v123,
           v124,
           v126,
           v127,
           v128,
           v129,
           v130,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56);
}

uint64_t sub_148FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  sub_14F18C();
  sub_14F2B0();
  uint64_t v51 = (void (*)(uint64_t))v50[470];
  sub_A340();
  uint64_t v52 = sub_470B8();
  v51(v52);
  id v53 = (void *)sub_1AC7F0();
  os_log_type_t v54 = sub_1ACF60();
  if (sub_29300(v54))
  {
    uint64_t v55 = (_WORD *)sub_292A0();
    sub_29368(v55);
    sub_A7FC(&def_342E4, v56, v57, "Couldn't create dialog for multiple ring query.");
    sub_A1F0();
  }
  uint64_t v58 = (void (*)(uint64_t))v50[472];
  uint64_t v59 = v50[402];

  uint64_t v60 = sub_A7C4();
  v58(v60);
  sub_9B48(v59 + 88, (uint64_t)(v50 + 177));
  sub_9BA4();
  uint64_t v70 = sub_1AAF70();
  sub_9BF0((uint64_t)(v50 + 177));
  sub_14ED90();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A79A4();
  sub_FD5F0();
  return v63(v61, v62, v63, v64, v65, v66, v67, v68, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           v70,
           a47,
           a48,
           a49,
           a50);
}

uint64_t sub_149234()
{
  sub_E588();
  sub_6F4D0();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 3904) = v0;
  }
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_149354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  sub_14F18C();
  sub_14F2B0();
  uint64_t v66 = *(void *)(v50 + 3456);
  uint64_t v51 = *(void *)(v50 + 3216);
  id v52 = *(id *)(v50 + 3904);
  sub_1AB070();
  sub_E524();
  v53();
  sub_1AB370();
  sub_47814();
  v54();
  id v55 = [v52 patternId];
  sub_1ACDD0();

  sub_5B568();
  sub_1AB380();
  sub_2E38((void *)(v51 + 88), *(void *)(v51 + 112));
  *(void *)(v50 + 3144) = sub_1AAF40();
  sub_1AAEF0();
  uint64_t v67 = sub_1AAF70();

  sub_47310();
  v56();
  swift_release();
  sub_14ED90();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A79A4();
  sub_FD5F0();
  return v59(v57, v58, v59, v60, v61, v62, v63, v64, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           v66,
           v67,
           a47,
           a48,
           a49,
           a50);
}

uint64_t sub_149654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  sub_14F18C();
  sub_14F2B0();
  sub_9B48(*(void *)(v50 + 3216) + 88, v50 + 1576);
  sub_9BA4();
  uint64_t v60 = sub_1AAF70();
  sub_9BF0(v50 + 1576);
  sub_14ED90();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A79A4();
  sub_FD5F0();
  return v53(v51, v52, v53, v54, v55, v56, v57, v58, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           v60,
           a47,
           a48,
           a49,
           a50);
}

uint64_t sub_14984C()
{
  sub_E588();
  sub_6F4D0();
  uint64_t v5 = v4;
  sub_E53C();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v2;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v3 + 3416);
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v5 + 3920) = v0;
  }
  sub_2EF0C(v7, &qword_201E28);
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_14997C()
{
  sub_E588();
  v0[491] = v0[490];
  sub_14F2F8();
  sub_1ACE40();
  swift_bridgeObjectRelease();
  sub_14F3F0();
  if (v1)
  {
    sub_14F524();
    sub_1ACE40();
    swift_bridgeObjectRelease();
  }
  sub_14F5FC();
  Swift::Double v2 = (void *)swift_task_alloc();
  v0[492] = (uint64_t)v2;
  *Swift::Double v2 = v0;
  v2[1] = sub_149A68;
  sub_144B9C(v0[426]);
  return sub_4FB34();
}

uint64_t sub_149A68()
{
  sub_E588();
  sub_14F214();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v4 + 3944) = v0;
  }
  sub_14F448();
  sub_14F558();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_149BAC()
{
  uint64_t v141 = v0;
  uint64_t v1 = *(void **)(v0 + 3944);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
LABEL_35:
    uint64_t v118 = *(void (**)(uint64_t))(v0 + 3864);
    sub_A340();
    uint64_t v119 = sub_470B8();
    v118(v119);
    uint64_t v120 = (void *)sub_1AC7F0();
    os_log_type_t v121 = sub_1ACF60();
    if (sub_29300(v121))
    {
      uint64_t v122 = (_WORD *)sub_292A0();
      sub_29368(v122);
      sub_A7FC(&def_342E4, v123, v124, "#GetActivitySummaryFlow: Unable to get the ring unit label");
      sub_A1F0();
    }
    uint64_t v125 = *(void **)(v0 + 3928);
    uint64_t v126 = *(void (**)(uint64_t))(v0 + 3880);
    uint64_t v127 = *(void *)(v0 + 3216);

    uint64_t v128 = sub_A7C4();
    v126(v128);
    sub_9B48(v127 + 88, v0 + 1896);
    sub_9BA4();
    uint64_t v139 = sub_1AAF70();

    sub_9BF0(v0 + 1896);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v129 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v129(v139);
  }
  id v2 = [v1 dialog];
  *(void *)(v0 + 3952) = sub_34214(0, &qword_203810);
  unint64_t v3 = sub_1ACED0();

  if (!(v3 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_4;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  uint64_t v114 = sub_1AD170();
  swift_bridgeObjectRelease();
  if (!v114) {
    goto LABEL_29;
  }
LABEL_4:
  sub_4AA30(0, (v3 & 0xC000000000000001) == 0, v3);
  if ((v3 & 0xC000000000000001) != 0) {
    id v4 = (id)sub_1AD0A0();
  }
  else {
    id v4 = *(id *)(v3 + 32);
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v0 + 3928);
  uint64_t v7 = *(void *)(v0 + 3328);
  swift_bridgeObjectRelease();
  id v8 = [v5 fullPrint];

  sub_1ACDD0();
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(uint64_t))(v7 + 32);
  uint64_t v10 = sub_47968();
  v9(v10);
  if (!v6) {
    goto LABEL_33;
  }
  id v11 = [*(id *)(v0 + 3928) dialog];
  unint64_t v12 = sub_14F388();

  if (v12 >> 62)
  {
    sub_7BBD0();
    sub_1AD170();
    sub_132690();
    if (v8) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
  sub_14F2A4();
  if (!v8)
  {
LABEL_32:
    swift_bridgeObjectRelease();
LABEL_33:
    uint64_t v115 = *(void *)(v0 + 3376);
    uint64_t v116 = *(void *)(v0 + 3328);
    uint64_t v117 = *(void *)(v0 + 3320);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v115, v117);
    goto LABEL_34;
  }
LABEL_9:
  sub_7BBB0();
  uint64_t v13 = (void *)sub_557DC();
  uint64_t v14 = *(void *)(v0 + 3360);
  uint64_t v15 = *(void *)(v0 + 3352);
  uint64_t v16 = *(void *)(v0 + 3320);
  swift_bridgeObjectRelease();
  id v17 = [v13 fullPrint];

  sub_1ACDD0();
  sub_1ACE40();
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t, uint64_t))v9)(v14, v15, v16);
  if (*(unsigned char *)(v0 + 3104) & 1) != 0 || (*(unsigned char *)(v0 + 3120))
  {
    uint64_t v18 = *(void *)(v0 + 3328);
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(void))(v18 + 8);
    sub_47814();
    v19();
    sub_47814();
    v19();
LABEL_34:
    uint64_t v20 = *(void **)(v0 + 3944);
    goto LABEL_35;
  }
  double v21 = *(double *)(v0 + 3096);
  id v22 = *(void (**)(uint64_t))(v0 + 3864);
  uint64_t v138 = *(void *)(v0 + 3376);
  uint64_t v23 = *(void *)(v0 + 3344);
  uint64_t v24 = *(void *)(v0 + 3328);
  uint64_t v25 = *(void *)(v0 + 3320);
  double v26 = *(double *)(v0 + 3112);
  sub_A340();
  uint64_t v27 = sub_470B8();
  v22(v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v138, v25);
  uint64_t v28 = sub_1AC7F0();
  os_log_type_t v29 = sub_1ACF50();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 3880);
  uint64_t v136 = *(void *)(v0 + 3552);
  uint64_t v134 = *(void *)(v0 + 3488);
  uint64_t v32 = *(void *)(v0 + 3328);
  if (v30)
  {
    double v33 = (uint8_t *)swift_slowAlloc();
    v140[0] = sub_E620();
    *(_DWORD *)double v33 = 136315138;
    uint64_t v34 = sub_1AC1D0();
    *(void *)(v0 + 3168) = sub_4A278(v34, v35, v140);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v36 = *(void (**)(void))(v32 + 8);
    sub_47814();
    v36();
    _os_log_impl(&def_342E4, v28, v29, "#GetActivitySummaryFlow: Ring unit label is: %s", v33, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    v31(v136, v134);
  }
  else
  {
    uint64_t v36 = *(void (**)(void))(v32 + 8);
    sub_47814();
    v36();

    v31(v136, v134);
  }
  *(void *)(v0 + 3960) = v36;
  uint64_t v37 = *(void (**)(uint64_t))(v0 + 3864);
  sub_A340();
  uint64_t v38 = sub_470B8();
  v37(v38);
  sub_E524();
  v39();
  uint64_t v40 = sub_1AC7F0();
  os_log_type_t v41 = sub_1ACF50();
  BOOL v42 = os_log_type_enabled(v40, v41);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v0 + 3880);
  uint64_t v44 = *(void *)(v0 + 3544);
  uint64_t v135 = *(void *)(v0 + 3488);
  if (v42)
  {
    double v45 = (uint8_t *)sub_A4B0();
    v140[0] = sub_E620();
    *(_DWORD *)double v45 = 136315138;
    uint64_t v46 = sub_1AC1D0();
    *(void *)(v0 + 3176) = sub_4A278(v46, v47, v140);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_E530();
    v48();
    _os_log_impl(&def_342E4, v40, v41, "#GetActivitySummaryFlow: Ring label is: %s", v45, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    sub_E530();
    v36();
  }

  v43(v44, v135);
  os_log_t log = *(os_log_t *)(v0 + 3856);
  uint64_t v49 = *(void *)(v0 + 3312);
  uint64_t v50 = *(void *)(v0 + 3288);
  uint64_t v131 = *(void *)(v0 + 3280);
  uint64_t v133 = *(void *)(v0 + 3272);
  uint64_t v130 = *(void *)(v0 + 3224);
  char v51 = *(unsigned char *)(v0 + 585);
  sub_E524();
  v52();
  unint64_t v53 = sub_34250(v51);
  unint64_t v55 = v54;
  unint64_t v56 = sub_2F2B8(v51);
  uint64_t v57 = (unint64_t *)(v49 + *(int *)(v50 + 20));
  *uint64_t v57 = v53;
  v57[1] = v55;
  uint64_t v58 = (unint64_t *)(v49 + *(int *)(v50 + 24));
  unint64_t *v58 = v56;
  v58[1] = v59;
  sub_14F5D0();
  double v63 = sub_C0448(v60, v61, v62, v21);
  sub_14F5D0();
  double v67 = sub_C0448(v64, v65, v66, v26);
  swift_bridgeObjectRelease();
  sub_1AC100();
  sub_1AABC0();
  uint64_t v68 = sub_1AC090();
  sub_FD4A0();
  v69();
  uint64_t v70 = sub_1AC1D0();
  uint64_t v72 = v71;
  sub_14EAAC(v49, v130, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v73 = sub_CD1D0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v73, v74, v75, v50);
  SingleActivitySummaryModel.init(totalValue:goalValue:date:unitLabel:snippetHeaderModel:)(v68, v70, v72, v130, v131, v63, v67);
  sub_A340();
  uint64_t v76 = sub_14F590();
  v77(v76);
  sub_14EAAC(v131, v133, (void (*)(void))type metadata accessor for SingleActivitySummaryModel);
  uint64_t v78 = sub_1AC7F0();
  os_log_type_t v79 = sub_1ACF50();
  BOOL v80 = sub_29300(v79);
  uint64_t v81 = *(void (**)(uint64_t, uint64_t))(v0 + 3880);
  uint64_t v82 = *(void *)(v0 + 3536);
  uint64_t v83 = *(void *)(v0 + 3488);
  uint64_t v84 = *(void *)(v0 + 3272);
  if (v80)
  {
    uint64_t v85 = *(void *)(v0 + 3264);
    uint64_t v137 = *(void *)(v0 + 3536);
    uint64_t v86 = (uint8_t *)sub_A4B0();
    v140[0] = sub_E620();
    *(_DWORD *)uint64_t v86 = 136315138;
    sub_14EAAC(v84, v85, (void (*)(void))type metadata accessor for SingleActivitySummaryModel);
    uint64_t v87 = sub_1ACE00();
    *(void *)(v0 + 3184) = sub_4A278(v87, v88, v140);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_14EB0C(v84, (void (*)(void))type metadata accessor for SingleActivitySummaryModel);
    _os_log_impl(&def_342E4, v78, (os_log_type_t)log, "#GetActivitySummaryFlow: snippet model is %s", v86, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    v81(v137, v83);
  }
  else
  {
    sub_14EB0C(*(void *)(v0 + 3272), (void (*)(void))type metadata accessor for SingleActivitySummaryModel);

    v81(v82, v83);
  }
  uint64_t v89 = *(void (**)(uint64_t))(v0 + 3864);
  sub_A340();
  uint64_t v90 = sub_470B8();
  v89(v90);
  uint64_t v91 = sub_47968();
  sub_14EAAC(v91, v92, v93);
  uint64_t v94 = sub_1AC7F0();
  os_log_type_t v95 = sub_1ACF50();
  BOOL v96 = os_log_type_enabled(v94, v95);
  uint64_t v97 = *(void (**)(uint64_t, uint64_t))(v0 + 3880);
  uint64_t v98 = *(void *)(v0 + 3528);
  uint64_t v99 = *(void *)(v0 + 3488);
  uint64_t v100 = *(void *)(v0 + 3304);
  if (v96)
  {
    uint64_t v101 = *(void *)(v0 + 3296);
    uint64_t v102 = (uint8_t *)sub_A4B0();
    v140[0] = sub_E620();
    *(_DWORD *)uint64_t v102 = 136315138;
    sub_14EAAC(v100, v101, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    uint64_t v103 = sub_1ACE00();
    *(void *)(v0 + 3200) = sub_4A278(v103, v104, v140);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_14EB0C(v100, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    _os_log_impl(&def_342E4, v94, v95, "#GetActivitySummaryFlow: snippet header model is %s", v102, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    sub_14EB0C(*(void *)(v0 + 3304), (void (*)(void))type metadata accessor for SnippetHeaderModel);
  }

  v97(v98, v99);
  uint64_t v105 = *(void *)(v0 + 3384);
  uint64_t v106 = *(void *)(v0 + 3320);
  uint64_t v107 = *(uint64_t **)(v0 + 3280);
  sub_2F2B8(*(unsigned char *)(v0 + 585));
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v108 = sub_CD1D0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v108, v109, v110, v106);
  sub_14C1D8(*v107);
  sub_14C1D8(v107[1]);
  sub_E524();
  v111();
  sub_14F3BC(v105, 0);
  uint64_t v112 = (void *)swift_task_alloc();
  *(void *)(v0 + 3968) = v112;
  void *v112 = v0;
  v112[1] = sub_14ABD8;
  sub_144B9C(*(void *)(v0 + 3392));
  return sub_D61FC();
}

uint64_t sub_14ABD8()
{
  sub_E588();
  sub_14F214();
  uint64_t v4 = v3;
  sub_E53C();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v4 + 3976) = v0;
  }
  sub_14F448();
  sub_14F558();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_14AD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void (*a42)(uint64_t, void (*)(uint64_t)),uint64_t a43,uint64_t *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t *a56,uint64_t a57,uint64_t a58)
{
  sub_14F18C();
  a57 = v61;
  a58 = v62;
  sub_14F2B0();
  a56 = v58;
  double v63 = (void *)v58[497];
  v58[498] = (uint64_t)v63;
  uint64_t v64 = (void (*)(uint64_t, uint64_t, uint64_t))v58[483];
  uint64_t v65 = v58[482];
  uint64_t v66 = v58[440];
  uint64_t v67 = v58[436];
  sub_A340();
  v64(v66, v65, v67);
  id v68 = v63;
  uint64_t v69 = sub_1AC7F0();
  uint64_t v70 = (void (*)(uint64_t))sub_1ACF50();
  if (os_log_type_enabled(v69, (os_log_type_t)v70))
  {
    a44 = v58 + 395;
    uint64_t v71 = (uint8_t *)sub_A4B0();
    uint64_t v72 = sub_E620();
    *(_DWORD *)uint64_t v71 = 136315138;
    a46 = v72;
    if (v68)
    {
      id v73 = [v68 dialog];
      unint64_t v74 = sub_1ACED0();

      if (v74 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v75 = sub_1AD170();
        swift_bridgeObjectRelease();
        if (v75) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v75 = *(void *)((char *)&dword_10 + (v74 & 0xFFFFFFFFFFFFFF8));
        if (v75)
        {
LABEL_5:
          sub_4AA30(0, (v74 & 0xC000000000000001) == 0, v74);
          if ((v74 & 0xC000000000000001) != 0) {
            id v76 = (id)sub_1AD0A0();
          }
          else {
            id v76 = *(id *)(v74 + 32);
          }
          uint64_t v77 = v76;
          swift_bridgeObjectRelease();
          id v78 = [v77 fullPrint];

          uint64_t v75 = sub_1ACDD0();
          uint64_t v80 = v79;

LABEL_16:
          a42 = (void (*)(uint64_t, void (*)(uint64_t)))v58[485];
          a43 = v58[486];
          a41 = v58[440];
          uint64_t v60 = (void (*)(uint64_t))v58[436];
          unint64_t v59 = v71 + 4;
          v58[385] = v75;
          v58[386] = v80;
          sub_2694(&qword_2032A8);
          uint64_t v90 = sub_1ACFC0();
          unint64_t v92 = v91;
          swift_bridgeObjectRelease();
          v58[395] = sub_4A278(v90, v92, &a46);
          sub_1ACFE0();
          swift_bridgeObjectRelease();

          _os_log_impl(&def_342E4, v69, (os_log_type_t)v70, "#GetActivitySummaryFlow: dialog is %s", v71, 0xCu);
          swift_arrayDestroy();
          sub_A1F0();
          sub_A1F0();

          a42(a41, v60);
          if (!v68) {
            goto LABEL_17;
          }
          goto LABEL_9;
        }
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v75 = 0;
    }
    uint64_t v80 = 0;
    goto LABEL_16;
  }
  uint64_t v70 = (void (*)(uint64_t))v58[486];
  uint64_t v81 = (void (*)(uint64_t, uint64_t))v58[485];
  uint64_t v82 = v58[440];
  uint64_t v83 = v58[436];

  v81(v82, v83);
  if (!v68)
  {
LABEL_17:
    sub_14F3D4();
    sub_A340();
    uint64_t v93 = sub_470B8();
    v70(v93);
    sub_1AC7F0();
    os_log_type_t v94 = sub_1ACF60();
    if (sub_29300(v94))
    {
      os_log_type_t v95 = (_WORD *)sub_292A0();
      sub_29368(v95);
      sub_A7FC(&def_342E4, v96, v97, "Couldn't create activity summary dialog");
      sub_A1F0();
    }
    sub_14F130();
    uint64_t v98 = sub_47BF8();
    v60(v98);
    sub_9B48((uint64_t)v68 + 88, (uint64_t)v70);
    sub_9BA4();
    uint64_t v108 = sub_1AAF70();

    sub_9BF0((uint64_t)v70);
    sub_14EB0C(a38, (void (*)(void))type metadata accessor for SingleActivitySummaryModel);
    sub_14EB0C(a40, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    uint64_t v99 = sub_14F3A0();
    ((void (*)(uint64_t))v68)(v99);
    sub_14F2BC();
    ((void (*)(void))v68)();
    sub_14EEF0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_14F4B4();
    sub_FD5F0();
    return v102(v100, v101, v102, v103, v104, v105, v106, v107, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             (void (*)(void, void))a42,
             a43,
             a44,
             v108,
             a46,
             a47,
             a48,
             a49,
             a50);
  }
LABEL_9:
  uint64_t v84 = v58[410];
  v58[324] = type metadata accessor for WellnessSnippets();
  v58[325] = sub_14ECB4((unint64_t *)&qword_202590, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  uint64_t v85 = sub_B5B0(v58 + 321);
  sub_14EAAC(v84, (uint64_t)v85, (void (*)(void))type metadata accessor for SingleActivitySummaryModel);
  swift_storeEnumTagMultiPayload();
  v68;
  swift_task_alloc();
  sub_250E0();
  v58[499] = (uint64_t)v86;
  *uint64_t v86 = v87;
  v86[1] = sub_14B374;
  sub_FD5F0();
  return sub_7ADEC();
}

uint64_t sub_14B374()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *id v2 = v1;
  uint64_t v3 = v1 + 2568;
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_14B448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  sub_14F4E0();
  uint64_t v57 = *(void **)(v56 + 3984);
  uint64_t v58 = *(void (**)(void))(v56 + 3960);
  unint64_t v59 = *(void **)(v56 + 3928);
  uint64_t v74 = *(void *)(v56 + 3360);
  uint64_t v75 = *(void *)(v56 + 3376);
  uint64_t v72 = *(void *)(v56 + 3312);
  uint64_t v73 = *(void *)(v56 + 3328);
  uint64_t v70 = *(void **)(v56 + 3944);
  uint64_t v71 = *(void *)(v56 + 3280);
  sub_E3FC(v56 + 2528, v56 + 2608);
  uint64_t v60 = swift_allocObject();
  sub_24D80((long long *)(v56 + 2608), v60 + 16);
  sub_1AB350();
  sub_1AAE40();
  sub_A550();
  *(void *)(v56 + 3152) = sub_1AAE30();
  uint64_t v76 = sub_1AAF70();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v56 + 2528);
  sub_14EB0C(v71, (void (*)(void))type metadata accessor for SingleActivitySummaryModel);
  sub_14EB0C(v72, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_14F2BC();
  v58();
  sub_14F2BC();
  v58();
  swift_release();
  sub_14F004();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F498();
  return v63(v61, v62, v63, v64, v65, v66, v67, v68, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           v70,
           v71,
           v72,
           v73,
           v74,
           v75,
           v76,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56);
}

uint64_t sub_14B758()
{
  sub_E588();
  v0[491] = 0;
  sub_14F2F8();
  sub_1ACE40();
  swift_bridgeObjectRelease();
  sub_14F3F0();
  if (v1)
  {
    sub_14F524();
    sub_1ACE40();
    swift_bridgeObjectRelease();
  }
  sub_14F5FC();
  id v2 = (void *)swift_task_alloc();
  v0[492] = (uint64_t)v2;
  *id v2 = v0;
  v2[1] = sub_149A68;
  sub_144B9C(v0[426]);
  return sub_4FB34();
}

uint64_t sub_14B840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  sub_14F18C();
  sub_14F2B0();
  swift_bridgeObjectRelease();
  char v51 = (void (*)(uint64_t))v50[483];
  sub_A340();
  uint64_t v52 = sub_1324AC();
  v51(v52);
  unint64_t v53 = (void *)sub_1AC7F0();
  os_log_type_t v54 = sub_1ACF60();
  if (sub_29300(v54))
  {
    unint64_t v55 = (_WORD *)sub_292A0();
    sub_29368(v55);
    sub_A7FC(&def_342E4, v56, v57, "#GetActivitySummaryFlow: Unable to get the ring unit label");
    sub_A1F0();
  }
  uint64_t v58 = (void *)v50[491];
  unint64_t v59 = (void (*)(uint64_t))v50[485];
  uint64_t v60 = v50[402];

  uint64_t v61 = sub_A7C4();
  v59(v61);
  sub_9B48(v60 + 88, (uint64_t)(v50 + 237));
  sub_9BA4();
  uint64_t v71 = sub_1AAF70();

  sub_9BF0((uint64_t)(v50 + 237));
  sub_14ED90();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A79A4();
  sub_FD5F0();
  return v64(v62, v63, v64, v65, v66, v67, v68, v69, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           v71,
           a47,
           a48,
           a49,
           a50);
}

uint64_t sub_14BAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void (*a43)(uint64_t, uint64_t),uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_14F18C();
  a57 = v61;
  a58 = v62;
  sub_14F2B0();
  a56 = v58;
  *(void *)(v58 + 3984) = 0;
  uint64_t v63 = *(void (**)(uint64_t))(v58 + 3864);
  sub_A340();
  uint64_t v64 = sub_477D8();
  v63(v64);
  uint64_t v65 = sub_1AC7F0();
  os_log_type_t v66 = sub_1ACF50();
  uint64_t v67 = v66;
  if (os_log_type_enabled(v65, v66))
  {
    uint64_t v60 = (void (*)(uint64_t))(v58 + 3160);
    uint64_t v68 = (uint8_t *)sub_A4B0();
    unint64_t v59 = (void *)sub_E620();
    a46 = v59;
    *(_DWORD *)uint64_t v68 = 136315138;
    a43 = *(void (**)(uint64_t, uint64_t))(v58 + 3880);
    a44 = *(void *)(v58 + 3888);
    a41 = *(void *)(v58 + 3488);
    a42 = *(void *)(v58 + 3520);
    *(_OWORD *)(v58 + 3080) = 0u;
    sub_2694(&qword_2032A8);
    uint64_t v69 = sub_1ACFC0();
    uint64_t v71 = v70;
    swift_bridgeObjectRelease();
    *(void *)(v58 + 3160) = sub_4A278(v69, (unint64_t)v71, (uint64_t *)&a46);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v65, (os_log_type_t)v67, "#GetActivitySummaryFlow: dialog is %s", v68, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    a43(a42, a41);
  }
  else
  {
    uint64_t v67 = *(void *)(v58 + 3880);
    uint64_t v72 = *(void *)(v58 + 3520);
    uint64_t v71 = *(void (**)(void))(v58 + 3488);

    ((void (*)(uint64_t, void (*)(void)))v67)(v72, v71);
  }
  sub_14F3D4();
  sub_A340();
  uint64_t v73 = sub_470B8();
  ((void (*)(uint64_t))v67)(v73);
  sub_1AC7F0();
  os_log_type_t v74 = sub_1ACF60();
  if (sub_29300(v74))
  {
    uint64_t v75 = (_WORD *)sub_292A0();
    sub_29368(v75);
    sub_A7FC(&def_342E4, v76, v77, "Couldn't create activity summary dialog");
    sub_A1F0();
  }
  sub_14F130();
  uint64_t v78 = sub_47BF8();
  v60(v78);
  sub_9B48((uint64_t)v71 + 88, v67);
  sub_9BA4();
  uint64_t v89 = sub_1AAF70();

  sub_9BF0(v67);
  sub_14EB0C(a38, (void (*)(void))type metadata accessor for SingleActivitySummaryModel);
  sub_14EB0C(a40, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v79 = sub_14F3A0();
  ((void (*)(uint64_t))v71)(v79);
  sub_14F2BC();
  v71();
  sub_14EEF0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F4B4();
  sub_FD5F0();
  return v82(v80, v81, v82, v83, v84, v85, v86, v87, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           v89,
           a46,
           a47,
           a48,
           a49,
           a50);
}

uint64_t sub_14BEFC(unsigned __int8 a1, double a2, double a3, double a4)
{
  if (!a1 || a1 == 199)
  {
    BOOL v7 = a2 == 0.0;
    if (a3 == 0.0) {
      BOOL v7 = 1;
    }
    return a4 == 0.0 || v7;
  }
  else
  {
    BOOL v4 = a2 == 0.0;
    BOOL v5 = a4 == 0.0;
    if (a1 != 4) {
      BOOL v5 = 0;
    }
    if (a1 != 91) {
      BOOL v4 = v5;
    }
    if (a1 == 90) {
      return a3 == 0.0;
    }
    else {
      return v4;
    }
  }
}

uint64_t sub_14BF5C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v36 = a4;
  uint64_t v9 = sub_1AABD0();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_2694(&qword_201E28);
  uint64_t v14 = sub_53D4(v13);
  uint64_t v15 = __chkstk_darwin(v14);
  id v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v35 - v18;
  sub_2F2B8(a2);
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v19, 0, 1, v20);
  double v21 = (int *)type metadata accessor for WellnessQueryingRingsParameters(0);
  sub_9EA0((uint64_t)v19, a1 + v21[5]);
  sub_1AC100();
  sub_1AABC0();
  uint64_t v22 = sub_1AC090();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v23 = v21[6];
  swift_release();
  *(void *)(a1 + v23) = v22;
  double v24 = *(double *)a3;
  char v25 = *(unsigned char *)(a3 + 8);
  uint64_t v26 = v36;
  uint64_t v27 = v37;
  if ((v25 & 1) == 0) {
    double v24 = sub_C0448(v36, v37, a2, v24);
  }
  uint64_t v28 = v38;
  uint64_t v29 = a1 + v21[11];
  *(double *)uint64_t v29 = v24;
  *(unsigned char *)(v29 + 8) = v25;
  double v30 = *(double *)v28;
  char v31 = *(unsigned char *)(v28 + 8);
  if ((v31 & 1) == 0) {
    double v30 = sub_C0448(v26, v27, a2, v30);
  }
  uint64_t v32 = a1 + v21[8];
  *(double *)uint64_t v32 = v30;
  *(unsigned char *)(v32 + 8) = v31;
  if (v27)
  {
    sub_1ACE40();
    uint64_t v33 = 0;
  }
  else
  {
    uint64_t v33 = 1;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v17, v33, 1, v20);
  return sub_9EA0((uint64_t)v17, a1 + v21[12]);
}

uint64_t sub_14C1D8(uint64_t result)
{
  double v1 = (double)result;
  if ((double)result >= 9.22337204e18)
  {
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if ((uint64_t)v1 == result) {
    *(double *)&uint64_t result = (double)result;
  }
  else {
    *(double *)&uint64_t result = 0.0;
  }
  return result;
}

uint64_t sub_14C234()
{
  sub_A364();
  *(unsigned char *)(v1 + 608) = v2;
  *(void *)(v1 + 224) = v3;
  *(void *)(v1 + 232) = v0;
  *(void *)(v1 + 208) = v4;
  *(void *)(v1 + 216) = v5;
  uint64_t v6 = sub_1AC800();
  *(void *)(v1 + 240) = v6;
  sub_A19C(v6);
  *(void *)(v1 + 248) = v7;
  *(void *)(v1 + 256) = sub_A220();
  *(void *)(v1 + 264) = swift_task_alloc();
  *(void *)(v1 + 272) = swift_task_alloc();
  *(void *)(v1 + 280) = swift_task_alloc();
  *(void *)(v1 + 288) = swift_task_alloc();
  *(void *)(v1 + 296) = swift_task_alloc();
  *(void *)(v1 + 304) = swift_task_alloc();
  uint64_t v8 = sub_2694(&qword_201E28);
  sub_53D4(v8);
  *(void *)(v1 + 312) = sub_A220();
  *(void *)(v1 + 320) = swift_task_alloc();
  *(void *)(v1 + 328) = swift_task_alloc();
  *(void *)(v1 + 336) = swift_task_alloc();
  *(void *)(v1 + 344) = swift_task_alloc();
  *(void *)(v1 + 352) = swift_task_alloc();
  *(void *)(v1 + 360) = swift_task_alloc();
  *(void *)(v1 + 368) = swift_task_alloc();
  *(void *)(v1 + 376) = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_14C394()
{
  sub_A364();
  sub_14F544();
  sub_1ACE40();
  v0[48] = sub_1AC1E0();
  uint64_t v1 = sub_CD1D0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, v2, v3, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[49] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = sub_14C454;
  sub_144B9C(v0[47]);
  return sub_4EEB4();
}

uint64_t sub_14C454()
{
  uint64_t v2 = *v1;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 400) = v7;
  swift_task_dealloc();
  uint64_t v9 = *(void *)(v2 + 376);
  if (v0) {
    swift_errorRelease();
  }
  sub_2EF0C(v9, &qword_201E28);
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_14C5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  id v19 = [*(id *)(v18 + 400) dialog];
  *(void *)(v18 + 408) = sub_34214(0, &qword_203810);
  unint64_t v20 = sub_1ACED0();

  if (v20 >> 62)
  {
    sub_7BBD0();
    sub_1AD170();
    sub_132690();
    if (v19) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_14F2A4();
    if (v19)
    {
LABEL_3:
      sub_7BBB0();
      double v21 = (void *)sub_557DC();
      uint64_t v22 = *(void *)(v18 + 384);
      uint64_t v23 = *(void *)(v18 + 368);
      swift_bridgeObjectRelease();
      id v24 = [v21 fullPrint];

      uint64_t v25 = sub_1ACDD0();
      uint64_t v27 = v26;

      *(void *)(v18 + 416) = v25;
      *(void *)(v18 + 424) = v27;
      sub_1ACE40();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v23, 0, 1, v22);
      uint64_t v28 = (void *)swift_task_alloc();
      *(void *)(v18 + 432) = v28;
      *uint64_t v28 = v18;
      v28[1] = sub_14C874;
      sub_144B9C(*(void *)(v18 + 368));
      sub_6F544();
      return sub_4EEB4();
    }
  }
  char v31 = *(void **)(v18 + 400);
  swift_bridgeObjectRelease();

  sub_1AC7D0();
  sub_A340();
  sub_14F1A8();
  v32();
  uint64_t v33 = (void *)sub_1AC7F0();
  os_log_type_t v34 = sub_1ACF60();
  if (sub_29300(v34))
  {
    uint64_t v35 = (_WORD *)sub_292A0();
    sub_29368(v35);
    sub_A7FC(&def_342E4, v36, v37, "Couldn't create exercise label by executing cat.");
    sub_A1F0();
  }

  uint64_t v38 = sub_E570();
  v39(v38);
  sub_14EEA0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F114();
  sub_6F544();
  return v41(v40, v41, v42, v43, v44, v45, v46, v47, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_14C874()
{
  sub_A364();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 440) = v5;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = *(void *)(v3 + 368);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_2EF0C(v6, &qword_201E28);
  }
  else
  {
    sub_2EF0C(*(void *)(v3 + 368), &qword_201E28);
  }
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_14C98C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  id v20 = [*(id *)(v19 + 440) dialog];
  unint64_t v21 = sub_14F388();

  if (v21 >> 62)
  {
    sub_7BBD0();
    sub_1AD170();
    sub_132690();
    if (v18) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_14F2A4();
    if (v18)
    {
LABEL_3:
      sub_7BBB0();
      uint64_t v22 = (void *)sub_557DC();
      uint64_t v23 = *(void *)(v19 + 360);
      swift_bridgeObjectRelease();
      id v24 = [v22 fullPrint];

      uint64_t v25 = sub_1ACDD0();
      uint64_t v27 = v26;

      *(void *)(v19 + 448) = v25;
      *(void *)(v19 + 456) = v27;
      sub_1ACE40();
      swift_bridgeObjectRelease();
      sub_14F288(v23);
      uint64_t v28 = (void *)swift_task_alloc();
      *(void *)(v19 + 464) = v28;
      *uint64_t v28 = v19;
      v28[1] = sub_14CC68;
      sub_144B9C(*(void *)(v19 + 360));
      sub_6F544();
      return sub_4EEB4();
    }
  }
  char v31 = *(void **)(v19 + 440);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_1AC7D0();
  sub_A340();
  sub_14F1A8();
  v32();
  uint64_t v33 = (void *)sub_1AC7F0();
  os_log_type_t v34 = sub_1ACF60();
  if (sub_29300(v34))
  {
    uint64_t v35 = (_WORD *)sub_292A0();
    sub_29368(v35);
    sub_A7FC(&def_342E4, v36, v37, "Couldn't create move label by executing cat.");
    sub_A1F0();
  }

  uint64_t v38 = sub_E570();
  v39(v38);
  sub_14EEA0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F114();
  sub_6F544();
  return v41(v40, v41, v42, v43, v44, v45, v46, v47, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_14CC68()
{
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 472) = v5;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = *(void *)(v3 + 360);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_2EF0C(v6, &qword_201E28);
  }
  else
  {
    sub_2EF0C(*(void *)(v3 + 360), &qword_201E28);
  }
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_14CD98()
{
  uint64_t v52 = v1;
  id v2 = [*(id *)(v1 + 472) dialog];
  unint64_t v3 = sub_14F388();

  if (v3 >> 62)
  {
    sub_7BBD0();
    sub_1AD170();
    sub_132690();
    if (v0) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_14F2A4();
    if (v0)
    {
LABEL_3:
      sub_7BBB0();
      uint64_t v4 = (void *)sub_557DC();
      uint64_t v5 = *(void *)(v1 + 304);
      uint64_t v7 = *(void *)(v1 + 240);
      uint64_t v6 = *(void *)(v1 + 248);
      swift_bridgeObjectRelease();
      id v8 = [v4 fullPrint];

      uint64_t v9 = sub_1ACDD0();
      unint64_t v11 = v10;

      *(void *)(v1 + 480) = v9;
      *(void *)(v1 + 488) = v11;
      uint64_t v12 = sub_1AC7D0();
      *(void *)(v1 + 496) = v12;
      sub_A340();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      *(void *)(v1 + 504) = v13;
      *(void *)(v1 + 512) = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v13(v5, v12, v7);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v14 = sub_1AC7F0();
      os_log_type_t v15 = sub_1ACF50();
      BOOL v16 = os_log_type_enabled(v14, v15);
      unint64_t v17 = *(void *)(v1 + 456);
      if (v16)
      {
        uint64_t v48 = *(void *)(v1 + 448);
        uint64_t v49 = v9;
        uint64_t v19 = *(void *)(v1 + 416);
        unint64_t v18 = *(void *)(v1 + 424);
        uint64_t v50 = *(void *)(v1 + 248);
        uint64_t v20 = sub_E620();
        uint64_t v51 = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136315650;
        swift_bridgeObjectRetain();
        *(void *)(v1 + 184) = sub_4A278(v19, v18, &v51);
        sub_1ACFE0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v20 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v1 + 192) = sub_4A278(v48, v17, &v51);
        sub_1ACFE0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v20 + 22) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v1 + 200) = sub_4A278(v49, v11, &v51);
        sub_1ACFE0();
        swift_bridgeObjectRelease_n();
        sub_14F5D0();
        _os_log_impl(v21, v22, v23, v24, (uint8_t *)v20, 0x20u);
        swift_arrayDestroy();
        sub_A1F0();
        sub_A1F0();

        uint64_t v25 = *(void (**)(void))(v50 + 8);
        sub_E530();
        v25();
      }
      else
      {
        uint64_t v26 = *(void *)(v1 + 304);
        uint64_t v27 = *(void *)(v1 + 240);
        uint64_t v28 = *(void *)(v1 + 248);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        uint64_t v25 = *(void (**)(void))(v28 + 8);
        ((void (*)(uint64_t, uint64_t))v25)(v26, v27);
      }
      *(void *)(v1 + 520) = v25;
      uint64_t v29 = *(void *)(v1 + 384);
      uint64_t v30 = *(void *)(v1 + 344);
      sub_14F544();
      sub_1ACE40();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v30, 0, 1, v29);
      sub_1ACE40();
      uint64_t v31 = sub_CD1D0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v31, v32, v33, v29);
      os_log_type_t v34 = (void *)swift_task_alloc();
      *(void *)(v1 + 528) = v34;
      *os_log_type_t v34 = v1;
      v34[1] = sub_14D360;
      sub_144B9C(*(void *)(v1 + 344));
      return sub_500A0();
    }
  }
  uint64_t v36 = *(void **)(v1 + 472);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v37 = *(void *)(v1 + 248);
  uint64_t v38 = (void *)sub_1AC7D0();
  sub_A340();
  uint64_t v39 = (void *)(v37 + 16);
  sub_14F1A8();
  v40();
  sub_1AC7F0();
  os_log_type_t v41 = sub_1ACF60();
  if (sub_29300(v41))
  {
    uint64_t v42 = (_WORD *)sub_292A0();
    sub_29368(v42);
    sub_A7FC(&def_342E4, v43, v44, "Couldn't create stand label by executing cat.");
    sub_A1F0();
  }
  sub_14F5DC();

  uint64_t v45 = sub_14F430();
  v46(v45);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F114();
  return v47();
}

uint64_t sub_14D360()
{
  sub_E588();
  sub_A1B4();
  unint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[67] = v5;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = v3[43];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_14F448();
    sub_2EF0C(v6, &qword_201E28);
  }
  else
  {
    uint64_t v7 = v3[43];
    sub_2EF0C(v3[44], &qword_201E28);
    sub_2EF0C(v7, &qword_201E28);
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_14D4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  id v20 = [*(id *)(v19 + 536) dialog];
  unint64_t v21 = sub_14F388();

  if (v21 >> 62)
  {
    sub_7BBD0();
    sub_1AD170();
    sub_132690();
    if (v18) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_14F2A4();
    if (v18)
    {
LABEL_3:
      sub_7BBB0();
      os_log_t v22 = (void *)sub_557DC();
      uint64_t v23 = *(void *)(v19 + 328);
      swift_bridgeObjectRelease();
      id v24 = [v22 fullPrint];

      uint64_t v25 = sub_1ACDD0();
      uint64_t v27 = v26;

      *(void *)(v19 + 544) = v25;
      *(void *)(v19 + 552) = v27;
      sub_1ACE40();
      sub_14F348();
      sub_14F288(v23);
      uint64_t v28 = (void *)swift_task_alloc();
      *(void *)(v19 + 560) = v28;
      *uint64_t v28 = v19;
      v28[1] = sub_14D794;
      sub_144B9C(*(void *)(v19 + 336));
      sub_6F544();
      return sub_500A0();
    }
  }
  uint64_t v31 = *(void **)(v19 + 536);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v33 = *(void (**)(uint64_t))(v19 + 504);
  uint64_t v32 = *(void **)(v19 + 512);
  os_log_type_t v34 = *(void (**)(uint64_t))(v19 + 240);
  sub_A340();
  uint64_t v35 = sub_477D8();
  v33(v35);
  uint64_t v36 = (void *)sub_1AC7F0();
  os_log_type_t v37 = sub_1ACF60();
  if (sub_29300(v37))
  {
    uint64_t v38 = (_WORD *)sub_292A0();
    sub_29368(v38);
    sub_A7FC(&def_342E4, v39, v40, "Couldn't create exercise unit label by executing unit_Label cat for multiple ring query.");
    sub_A1F0();
  }
  sub_14F320();

  uint64_t v41 = sub_14F1BC();
  v34(v41);
  sub_14EEA0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F114();
  sub_6F544();
  return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_14D794()
{
  sub_E588();
  sub_A1B4();
  unint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[71] = v5;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v8 = v3 + 41;
    uint64_t v6 = v3[41];
    uint64_t v7 = v8[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_2EF0C(v6, &qword_201E28);
    sub_2EF0C(v7, &qword_201E28);
  }
  else
  {
    uint64_t v9 = v3[42];
    sub_2EF0C(v3[41], &qword_201E28);
    sub_2EF0C(v9, &qword_201E28);
  }
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_14D900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  id v20 = [*(id *)(v19 + 568) dialog];
  unint64_t v21 = sub_14F388();

  if (v21 >> 62)
  {
    sub_7BBD0();
    sub_1AD170();
    sub_132690();
    if (v18) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_14F2A4();
    if (v18)
    {
LABEL_3:
      sub_7BBB0();
      os_log_t v22 = (void *)sub_557DC();
      uint64_t v23 = *(void *)(v19 + 312);
      swift_bridgeObjectRelease();
      id v24 = [v22 fullPrint];

      uint64_t v25 = sub_1ACDD0();
      uint64_t v27 = v26;

      *(void *)(v19 + 576) = v25;
      *(void *)(v19 + 584) = v27;
      sub_1ACE40();
      sub_14F348();
      sub_14F288(v23);
      uint64_t v28 = (void *)swift_task_alloc();
      *(void *)(v19 + 592) = v28;
      *uint64_t v28 = v19;
      v28[1] = sub_14DBF0;
      sub_144B9C(*(void *)(v19 + 320));
      sub_6F544();
      return sub_500A0();
    }
  }
  uint64_t v31 = *(void **)(v19 + 568);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v33 = *(void (**)(uint64_t))(v19 + 504);
  uint64_t v32 = *(void (**)(uint64_t))(v19 + 512);
  os_log_type_t v34 = *(void **)(v19 + 240);
  sub_A340();
  uint64_t v35 = sub_477D8();
  v33(v35);
  uint64_t v36 = (void *)sub_1AC7F0();
  os_log_type_t v37 = sub_1ACF60();
  if (sub_29300(v37))
  {
    uint64_t v38 = (_WORD *)sub_292A0();
    sub_29368(v38);
    sub_A7FC(&def_342E4, v39, v40, "Couldn't create move unit label by executing unit_Label cat for multiple ring query.");
    sub_A1F0();
  }
  sub_14F2CC();

  uint64_t v41 = sub_14F1BC();
  v32(v41);
  sub_14EEA0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F114();
  sub_6F544();
  return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_14DBF0()
{
  sub_A1B4();
  unint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  v3[75] = v5;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v8 = v3 + 39;
    uint64_t v6 = v3[39];
    uint64_t v7 = v8[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_2EF0C(v6, &qword_201E28);
    sub_2EF0C(v7, &qword_201E28);
  }
  else
  {
    uint64_t v9 = v3[40];
    sub_2EF0C(v3[39], &qword_201E28);
    sub_2EF0C(v9, &qword_201E28);
  }
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_14DD74()
{
  id v2 = [*(id *)(v1 + 600) dialog];
  unint64_t v3 = sub_14F388();

  if (v3 >> 62)
  {
    sub_7BBD0();
    sub_1AD170();
    sub_132690();
    if (v0) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_14F2A4();
    if (v0)
    {
LABEL_3:
      sub_7BBB0();
      uint64_t v4 = (void *)sub_557DC();
      uint64_t v5 = *(void **)(v1 + 600);
      uint64_t v6 = *(void **)(v1 + 568);
      uint64_t v39 = *(void *)(v1 + 552);
      uint64_t v40 = *(void *)(v1 + 584);
      uint64_t v7 = *(void **)(v1 + 536);
      uint64_t v8 = *(void **)(v1 + 472);
      uint64_t v37 = *(void *)(v1 + 456);
      uint64_t v38 = *(void *)(v1 + 488);
      uint64_t v9 = *(void **)(v1 + 440);
      uint64_t v36 = *(void *)(v1 + 424);
      uint64_t v10 = *(void **)(v1 + 400);
      swift_bridgeObjectRelease();
      id v11 = [v4 fullPrint];

      uint64_t v12 = sub_1ACDD0();
      uint64_t v34 = v13;
      uint64_t v35 = v12;

      uint64_t v32 = *(void *)(v1 + 544);
      uint64_t v33 = *(void *)(v1 + 576);
      uint64_t v30 = *(void *)(v1 + 448);
      uint64_t v31 = *(void *)(v1 + 480);
      uint64_t v29 = *(void *)(v1 + 416);
      goto LABEL_8;
    }
  }
  uint64_t v14 = *(void **)(v1 + 600);
  os_log_type_t v15 = *(void **)(v1 + 424);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  unint64_t v17 = *(void (**)(uint64_t))(v1 + 504);
  BOOL v16 = *(void **)(v1 + 512);
  unint64_t v18 = *(void **)(v1 + 240);
  sub_A340();
  uint64_t v19 = sub_477D8();
  v17(v19);
  id v20 = (void *)sub_1AC7F0();
  os_log_type_t v21 = sub_1ACF60();
  if (sub_29300(v21))
  {
    os_log_t v22 = (_WORD *)sub_292A0();
    sub_29368(v22);
    sub_A7FC(&def_342E4, v23, v24, "Couldn't create stand unit label by executing unit_Label cat for multiple ring query.");
    sub_A1F0();
  }
  sub_14F258();

  uint64_t v25 = sub_14F1BC();
  v17(v25);
  uint64_t v29 = 0;
  uint64_t v36 = 0;
  uint64_t v32 = 0;
  uint64_t v39 = 0;
  uint64_t v30 = 0;
  uint64_t v37 = 0;
  uint64_t v33 = 0;
  uint64_t v40 = 0;
  uint64_t v31 = 0;
  uint64_t v38 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
LABEL_8:
  uint64_t v26 = *(void **)(v1 + 208);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *uint64_t v26 = v29;
  v26[1] = v36;
  v26[2] = v32;
  v26[3] = v39;
  v26[4] = v30;
  v26[5] = v37;
  v26[6] = v33;
  v26[7] = v40;
  v26[8] = v31;
  v26[9] = v38;
  v26[10] = v35;
  v26[11] = v34;
  sub_E564();
  return v27();
}

uint64_t sub_14E100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  sub_1AC7D0();
  sub_A340();
  sub_14F1A8();
  v18();
  uint64_t v19 = (void *)sub_1AC7F0();
  os_log_type_t v20 = sub_1ACF60();
  if (sub_29300(v20))
  {
    os_log_type_t v21 = (_WORD *)sub_292A0();
    sub_29368(v21);
    sub_A7FC(&def_342E4, v22, v23, "Couldn't create exercise label by executing cat.");
    sub_A1F0();
  }

  uint64_t v24 = sub_E570();
  v25(v24);
  sub_14EEA0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F114();
  sub_6F544();
  return v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_14E250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  sub_1AC7D0();
  sub_A340();
  sub_14F1A8();
  v19();
  os_log_type_t v20 = (void *)sub_1AC7F0();
  os_log_type_t v21 = sub_1ACF60();
  if (sub_29300(v21))
  {
    uint64_t v22 = (_WORD *)sub_292A0();
    sub_29368(v22);
    sub_A7FC(&def_342E4, v23, v24, "Couldn't create move label by executing cat.");
    sub_A1F0();
  }

  uint64_t v25 = sub_E570();
  v26(v25);
  sub_14EEA0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F114();
  sub_6F544();
  return v28(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_14E3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  uint64_t v19 = *(void *)(v18 + 248);
  os_log_type_t v20 = (void *)sub_1AC7D0();
  sub_A340();
  os_log_type_t v21 = (void *)(v19 + 16);
  sub_14F1A8();
  v22();
  sub_1AC7F0();
  os_log_type_t v23 = sub_1ACF60();
  if (sub_29300(v23))
  {
    uint64_t v24 = (_WORD *)sub_292A0();
    sub_29368(v24);
    sub_A7FC(&def_342E4, v25, v26, "Couldn't create stand label by executing cat.");
    sub_A1F0();
  }
  sub_14F5DC();

  uint64_t v27 = sub_14F430();
  v28(v27);
  sub_14EEA0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F114();
  sub_6F544();
  return v30(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_14E4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  os_log_type_t v21 = *(void (**)(uint64_t))(v18 + 504);
  os_log_type_t v20 = *(void (**)(uint64_t))(v18 + 512);
  sub_A340();
  uint64_t v22 = sub_470B8();
  v21(v22);
  os_log_type_t v23 = (void *)sub_1AC7F0();
  os_log_type_t v24 = sub_1ACF60();
  if (sub_29300(v24))
  {
    uint64_t v25 = (_WORD *)sub_292A0();
    sub_29368(v25);
    sub_A7FC(&def_342E4, v26, v27, "Couldn't create exercise unit label by executing unit_Label cat for multiple ring query.");
    sub_A1F0();
  }
  sub_14F320();

  uint64_t v28 = sub_14F1BC();
  v20(v28);
  sub_14EEA0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F114();
  sub_6F544();
  return v30(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_14E648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  uint64_t v22 = *(void (**)(uint64_t))(v18 + 504);
  os_log_type_t v21 = *(void **)(v18 + 512);
  sub_A340();
  uint64_t v23 = sub_470B8();
  v22(v23);
  os_log_type_t v24 = (void *)sub_1AC7F0();
  os_log_type_t v25 = sub_1ACF60();
  if (sub_29300(v25))
  {
    uint64_t v26 = (_WORD *)sub_292A0();
    sub_29368(v26);
    sub_A7FC(&def_342E4, v27, v28, "Couldn't create move unit label by executing unit_Label cat for multiple ring query.");
    sub_A1F0();
  }
  sub_14F2CC();

  uint64_t v29 = sub_14F1BC();
  v22(v29);
  sub_14EEA0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F114();
  sub_6F544();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_14E79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  sub_6FE58();
  uint64_t v23 = *(void (**)(uint64_t))(v18 + 504);
  uint64_t v22 = *(void **)(v18 + 512);
  sub_A340();
  uint64_t v24 = sub_470B8();
  v23(v24);
  os_log_type_t v25 = (void *)sub_1AC7F0();
  os_log_type_t v26 = sub_1ACF60();
  if (sub_29300(v26))
  {
    uint64_t v27 = (_WORD *)sub_292A0();
    sub_29368(v27);
    sub_A7FC(&def_342E4, v28, v29, "Couldn't create stand unit label by executing unit_Label cat for multiple ring query.");
    sub_A1F0();
  }
  sub_14F258();

  uint64_t v30 = sub_14F1BC();
  v19(v30);
  sub_14EEA0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_14F114();
  sub_6F544();
  return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_14E8F8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_E230;
  return sub_145288();
}

uint64_t sub_14E990(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_14E9C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_14E9F8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_14EA48(void *a1)
{
  id v1 = [a1 activeEnergyBurnedUnit];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = sub_1ACDD0();

  return v3;
}

uint64_t sub_14EAAC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_20688();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_14EB0C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_14EB64()
{
  sub_A364();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)sub_47218(v0);
  *id v1 = v2;
  v1[1] = sub_E230;
  uint64_t v3 = sub_47228();
  return sub_24B08(v3, v4);
}

uint64_t sub_14EBF0()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_14EC28()
{
  sub_A364();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)sub_47218(v0);
  *id v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_14ECB4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_14ECFC()
{
  sub_A364();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)sub_47218(v0);
  *id v1 = v2;
  v1[1] = sub_E50C;
  uint64_t v3 = sub_47228();
  return sub_C00A4(v3, v4);
}

uint64_t sub_14ED90()
{
  uint64_t v3 = v0[419];
  *(void *)(v1 - 184) = v0[420];
  *(void *)(v1 - 176) = v3;
  uint64_t v4 = v0[417];
  *(void *)(v1 - 168) = v0[418];
  *(void *)(v1 - 160) = v4;
  uint64_t v5 = v0[413];
  *(void *)(v1 - 152) = v0[414];
  *(void *)(v1 - 144) = v5;
  uint64_t v6 = v0[410];
  *(void *)(v1 - 136) = v0[412];
  *(void *)(v1 - 128) = v6;
  uint64_t v7 = v0[408];
  *(void *)(v1 - 120) = v0[409];
  *(void *)(v1 - 112) = v7;
  uint64_t v8 = v0[403];
  *(void *)(v1 - 104) = v0[406];
  *(void *)(v1 - 96) = v8;
  return swift_task_dealloc();
}

uint64_t sub_14EEA0()
{
  return swift_task_dealloc();
}

uint64_t sub_14EEF0()
{
  uint64_t v3 = v0[418];
  *(void *)(v1 - 184) = v0[419];
  *(void *)(v1 - 176) = v3;
  uint64_t v4 = v0[414];
  *(void *)(v1 - 168) = v0[417];
  *(void *)(v1 - 160) = v4;
  uint64_t v5 = v0[412];
  *(void *)(v1 - 152) = v0[413];
  *(void *)(v1 - 144) = v5;
  uint64_t v6 = v0[409];
  *(void *)(v1 - 136) = v0[410];
  *(void *)(v1 - 128) = v6;
  uint64_t v7 = v0[406];
  *(void *)(v1 - 120) = v0[408];
  *(void *)(v1 - 112) = v7;
  *(void *)(v1 - 104) = v0[403];
  return swift_task_dealloc();
}

uint64_t sub_14F004()
{
  uint64_t v3 = v0[417];
  *(void *)(v1 - 208) = v0[418];
  *(void *)(v1 - 200) = v3;
  uint64_t v4 = v0[413];
  *(void *)(v1 - 192) = v0[414];
  *(void *)(v1 - 184) = v4;
  uint64_t v5 = v0[410];
  *(void *)(v1 - 176) = v0[412];
  *(void *)(v1 - 168) = v5;
  uint64_t v6 = v0[408];
  *(void *)(v1 - 160) = v0[409];
  *(void *)(v1 - 152) = v6;
  uint64_t v7 = v0[403];
  *(void *)(v1 - 144) = v0[406];
  *(void *)(v1 - 136) = v7;
  return swift_task_dealloc();
}

uint64_t sub_14F114()
{
  v0[4] = 0u;
  v0[5] = 0u;
  v0[2] = 0u;
  v0[3] = 0u;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return v1 + 8;
}

void sub_14F130()
{
  uint64_t v4 = v1[495];
  uint64_t v5 = v1[493];
  *(void *)(v2 - 112) = v1[422];
  *(void *)(v2 - 104) = v4;
  uint64_t v6 = v1[420];
  *(void *)(v2 - 128) = v1[416];
  *(void *)(v2 - 120) = v6;
  uint64_t v7 = v1[414];
  *(void *)(v2 - 144) = v5;
  *(void *)(v2 - 136) = v7;
  *(void *)(v2 - 152) = v1[410];
}

uint64_t sub_14F1BC()
{
  return v0;
}

uint64_t sub_14F1D0()
{
  return swift_task_dealloc();
}

void sub_14F258()
{
  uint64_t v2 = *(void **)(v0 + 472);
}

uint64_t sub_14F288(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, 0, 1, v1);
}

void sub_14F2CC()
{
  uint64_t v2 = *(void **)(v0 + 472);
}

unint64_t sub_14F2F8()
{
  char v2 = *(unsigned char *)(v0 + 585);
  return sub_2F2B8(v2);
}

void sub_14F320()
{
  char v2 = *(void **)(v0 + 472);
}

uint64_t sub_14F348()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, v0);
  return sub_1ACE40();
}

uint64_t sub_14F388()
{
  return sub_1ACED0();
}

uint64_t sub_14F3A0()
{
  return *(void *)(v0 - 120);
}

uint64_t sub_14F3BC(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1, v2);
}

uint64_t sub_14F3D4()
{
  return *(void *)(v0 + 3856);
}

uint64_t sub_14F3F0()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 0, 1, v1);
}

void sub_14F414(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v4, a4, v5, 2u);
}

uint64_t sub_14F430()
{
  return v0;
}

uint64_t sub_14F448()
{
  return sub_2EF0C(v1, v0);
}

double sub_14F460(double a1)
{
  return sub_C0448(v1, v2, 0, a1);
}

uint64_t sub_14F47C()
{
  return sub_1AA950();
}

uint64_t sub_14F4B4()
{
  return *(void *)(v0 - 96);
}

uint64_t sub_14F524()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_14F544()
{
  return 0x6573696372657865;
}

uint64_t sub_14F558()
{
  return sub_2EF0C(v1, v0);
}

double sub_14F570()
{
  uint64_t v4 = *(void *)(v1 + 24);
  return sub_C0448(v0, v4, 0x5Bu, v3);
}

uint64_t sub_14F590()
{
  return *(void *)(v0 - 192);
}

uint64_t sub_14F5A4()
{
  return swift_allocObject();
}

uint64_t sub_14F5BC()
{
  return v0;
}

void sub_14F5DC()
{
}

uint64_t sub_14F5FC()
{
  uint64_t v3 = *(void *)(v1 + 3400);
  uint64_t v4 = *(void *)(v1 + 3320);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, v0, 1, v4);
}

uint64_t GenericButtonModel.init(label:punchout:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  type metadata accessor for GenericButtonModel();
  sub_1507B4();
  sub_20688();
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 32);

  return v8(a4, a3, v6);
}

uint64_t type metadata accessor for GenericButtonModel()
{
  uint64_t result = qword_207A90;
  if (!qword_207A90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t GenericButtonModel.punchout.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for GenericButtonModel();
  sub_1507B4();
  sub_20688();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);

  return v5(a1, v1, v3);
}

uint64_t GenericButtonModel.punchout.setter(uint64_t a1)
{
  type metadata accessor for GenericButtonModel();
  sub_1507B4();
  sub_20688();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);

  return v5(v1, a1, v3);
}

uint64_t (*GenericButtonModel.punchout.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

BOOL sub_14F7E0(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_14F7F0(uint64_t a1, char a2)
{
}

uint64_t sub_14F818(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74756F68636E7570 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_1AD2F0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_14F8F8()
{
  return 2;
}

Swift::Int sub_14F900(char a1)
{
  return sub_1AD390();
}

uint64_t sub_14F948(char a1)
{
  if (a1) {
    return 0x74756F68636E7570;
  }
  else {
    return 0x6C6562616CLL;
  }
}

BOOL sub_14F97C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_14F7E0(*a1, *a2);
}

Swift::Int sub_14F988()
{
  return sub_14F900(*v0);
}

void sub_14F990(uint64_t a1)
{
  sub_14F7F0(a1, *v1);
}

uint64_t sub_14F998()
{
  return sub_14F948(*v0);
}

uint64_t sub_14F9A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_14F818(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_14F9C8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_14F8F8();
  *a1 = result;
  return result;
}

uint64_t sub_14F9F0(uint64_t a1)
{
  unint64_t v2 = sub_14FBF0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_14FA2C(uint64_t a1)
{
  unint64_t v2 = sub_14FBF0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GenericButtonModel.encode(to:)(void *a1)
{
  uint64_t v3 = sub_2694(&qword_207A20);
  sub_52C4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_E548();
  uint64_t v9 = v8 - v7;
  sub_2E38(a1, a1[3]);
  sub_14FBF0();
  sub_1AD3B0();
  sub_1AD280();
  if (!v1)
  {
    type metadata accessor for GenericButtonModel();
    sub_1AAB10();
    sub_14FF50(&qword_205780, (void (*)(uint64_t))&type metadata accessor for URL);
    sub_1AD2B0();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t sub_14FBF0()
{
  unint64_t result = qword_207A28;
  if (!qword_207A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_207A28);
  }
  return result;
}

uint64_t GenericButtonModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = sub_1AAB10();
  sub_52C4();
  uint64_t v19 = v4;
  __chkstk_darwin(v5);
  sub_E548();
  uint64_t v8 = v7 - v6;
  sub_2694(&qword_207A30);
  sub_52C4();
  __chkstk_darwin(v9);
  sub_E548();
  uint64_t v10 = type metadata accessor for GenericButtonModel();
  sub_20688();
  __chkstk_darwin(v11);
  sub_E548();
  uint64_t v14 = (uint64_t *)(v13 - v12);
  sub_2E38(a1, a1[3]);
  sub_14FBF0();
  sub_1AD3A0();
  if (v2) {
    return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
  }
  *uint64_t v14 = sub_1AD1F0();
  v14[1] = v15;
  sub_14FF50(&qword_205790, (void (*)(uint64_t))&type metadata accessor for URL);
  sub_1AD220();
  uint64_t v16 = sub_1507D0();
  v17(v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))((char *)v14 + *(int *)(v10 + 20), v8, v21);
  sub_24F7C((uint64_t)v14, a2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
  return sub_24FE0((uint64_t)v14);
}

uint64_t sub_14FEC0()
{
  return sub_14FF50(&qword_202290, (void (*)(uint64_t))type metadata accessor for GenericButtonModel);
}

uint64_t sub_14FF08()
{
  return sub_14FF50(&qword_202160, (void (*)(uint64_t))type metadata accessor for GenericButtonModel);
}

uint64_t sub_14FF50(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_14FF98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GenericButtonModel.init(from:)(a1, a2);
}

uint64_t sub_14FFB0(void *a1)
{
  return GenericButtonModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for GenericButtonModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_1AAB10();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for GenericButtonModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_1AAB10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for GenericButtonModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_1AAB10();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for GenericButtonModel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1AAB10();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for GenericButtonModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_1AAB10();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for GenericButtonModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1AAB10();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericButtonModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_150378);
}

uint64_t sub_150378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1AAB10();
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for GenericButtonModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_150414);
}

uint64_t sub_150414(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1AAB10();
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_150494()
{
  uint64_t result = sub_1AAB10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GenericButtonModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for GenericButtonModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x150680);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1506A8(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GenericButtonModel.CodingKeys()
{
  return &type metadata for GenericButtonModel.CodingKeys;
}

unint64_t sub_1506C8()
{
  unint64_t result = qword_207AC8;
  if (!qword_207AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_207AC8);
  }
  return result;
}

unint64_t sub_150718()
{
  unint64_t result = qword_207AD0;
  if (!qword_207AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_207AD0);
  }
  return result;
}

unint64_t sub_150768()
{
  unint64_t result = qword_207AD8[0];
  if (!qword_207AD8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_207AD8);
  }
  return result;
}

uint64_t sub_1507B4()
{
  return sub_1AAB10();
}

uint64_t sub_1507D0()
{
  return v0;
}

uint64_t destroy for MedLaunchHealthAppFlow(uint64_t a1)
{
  uint64_t v2 = a1 + 88;
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 48);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 128);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 168);

  return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 208);
}

uint64_t initializeWithCopy for MedLaunchHealthAppFlow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a2 + 8;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  BOOL v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 48, a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 88, a2 + 88);
  long long v10 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 152) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 128, a2 + 128);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 192) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 168, a2 + 168);
  long long v12 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 232) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 208, a2 + 208);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  return a1;
}

uint64_t assignWithCopy for MedLaunchHealthAppFlow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  sub_577C((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  sub_577C((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  sub_577C((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  sub_577C((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
  sub_577C((uint64_t *)(a1 + 168), (uint64_t *)(a2 + 168));
  sub_577C((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  return a1;
}

uint64_t assignWithTake for MedLaunchHealthAppFlow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 48);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 128);
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 168);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 208);
  long long v6 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v6;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  return a1;
}

uint64_t getEnumTagSinglePayload for MedLaunchHealthAppFlow(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 249))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedLaunchHealthAppFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 248) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 249) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 249) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedLaunchHealthAppFlow()
{
  return &type metadata for MedLaunchHealthAppFlow;
}

uint64_t sub_150CC8()
{
  sub_B6C50();

  return sub_1AAF80();
}

uint64_t sub_150D1C()
{
  sub_A364();
  v1[212] = v0;
  v1[211] = v2;
  v1[213] = sub_2694(&qword_207AF8);
  v1[214] = sub_A220();
  v1[215] = swift_task_alloc();
  uint64_t v3 = sub_1AABD0();
  v1[216] = v3;
  sub_A19C(v3);
  v1[217] = v4;
  v1[218] = swift_task_alloc();
  v1[219] = sub_1AC3D0();
  v1[220] = swift_task_alloc();
  uint64_t v5 = sub_1AC800();
  v1[221] = v5;
  sub_A19C(v5);
  v1[222] = v6;
  v1[223] = sub_A220();
  v1[224] = swift_task_alloc();
  v1[225] = swift_task_alloc();
  v1[226] = swift_task_alloc();
  v1[227] = swift_task_alloc();
  v1[228] = swift_task_alloc();
  v1[229] = swift_task_alloc();
  v1[230] = swift_task_alloc();
  v1[231] = swift_task_alloc();
  sub_2694(&qword_201E20);
  v1[232] = swift_task_alloc();
  uint64_t v7 = sub_1AAB10();
  v1[233] = v7;
  sub_A19C(v7);
  v1[234] = v8;
  v1[235] = sub_A220();
  v1[236] = swift_task_alloc();
  v1[237] = swift_task_alloc();
  uint64_t v9 = sub_1AB0A0();
  v1[238] = v9;
  sub_A19C(v9);
  v1[239] = v10;
  v1[240] = sub_A220();
  v1[241] = swift_task_alloc();
  uint64_t v11 = sub_1AB3D0();
  v1[242] = v11;
  sub_A19C(v11);
  v1[243] = v12;
  v1[244] = sub_A220();
  v1[245] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v13, v14, v15);
}

void sub_150F9C()
{
  sub_6FF30();
  unint64_t v1 = *(void **)(v0 + 1696);
  uint64_t v2 = v1 + 1;
  sub_2E38(v1 + 1, v1[4]);
  sub_471EC();
  v3();
  isSpecificMedRequest(from:deviceState:)();
  char v5 = v4;
  *(unsigned char *)(v0 + 265) = v4 & 1;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 1392);
  getLocalizedMedName(from:)();
  *(void *)(v0 + 1968) = v6;
  uint64_t v7 = (void *)getUSOMedNames(from:)();
  if (v7)
  {
    if (v7[2])
    {
      uint64_t v8 = v0 + 16;
      uint64_t v9 = v7[4];
      uint64_t v10 = v7[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    uint64_t v8 = v0 + 16;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v0 + 16;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
LABEL_7:
  char v74 = v5 ^ 1;
  *(void *)(v0 + 1984) = v10;
  *(void *)(v0 + 1976) = v9;
  uint64_t v11 = *(void *)(v0 + 1696);
  sub_2E38(v1 + 1, v1[4]);
  sub_471EC();
  v12();
  sub_2E38((void *)(v0 + 1232), *(void *)(v0 + 1256));
  char v13 = sub_1AB040();
  sub_15393C(v11, v8);
  if (v13)
  {
    sub_B6CCC(v8);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 1232);
  }
  else
  {
    sub_2E38((void *)(v0 + 24), *(void *)(v0 + 48));
    sub_471EC();
    v14();
    sub_2E38((void *)(v0 + 1352), *(void *)(v0 + 1376));
    char v15 = sub_1AB030();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 1352);
    sub_B6CCC(v8);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 1232);
    if ((v15 & 1) == 0)
    {
      uint64_t v26 = v1[4];
      uint64_t v27 = v1[5];
      sub_2E38(v2, v26);
      sub_471EC();
      v28();
      sub_2E38((void *)(v0 + 1272), *(void *)(v0 + 1296));
      char v29 = sub_1AB050();
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 1272);
      if (v29)
      {
        uint64_t v30 = *(void *)(v0 + 1928);
        uint64_t v31 = *(void *)(v0 + 1912);
        uint64_t v32 = *(void *)(v0 + 1904);
        uint64_t v33 = *(void *)(v0 + 1696);
        sub_1AB090();
        sub_55624();
        v34();
        sub_1AB370();
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
        if (*(unsigned char *)(v33 + 248))
        {
          uint64_t v35 = *(void *)(v0 + 1744);
          uint64_t v36 = **(void **)(v0 + 1696);
          sub_1AABC0();
          if (isLoggingTimeframeToday(from:todayDate:)(v36, v35)) {
            char v37 = 1;
          }
          else {
            char v37 = isLoggingTimeframeNone(from:)();
          }
          *(unsigned char *)(v0 + 266) = v37 & 1;
          uint64_t v54 = *(void *)(v0 + 1696);
          (*(void (**)(void, void))(*(void *)(v0 + 1736) + 8))(*(void *)(v0 + 1744), *(void *)(v0 + 1728));
          *(unsigned char *)(v0 + 267) = isQueryAboutStatusOrSchedule(from:)() & 1;
          *(unsigned char *)(v0 + 2072) = isQueryAboutDetails(from:)() & 1;
          sub_2E38((void *)(v54 + 128), *(void *)(v54 + 152));
          sub_153C50((uint64_t)&dword_207850);
          unint64_t v55 = (void *)swift_task_alloc();
          *(void *)(v0 + 2040) = v55;
          *unint64_t v55 = v0;
          v55[1] = sub_152664;
          sub_153CD8((uint64_t)v55, v56, v57, v58, v59, v60, v61, v62, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74);
          sub_6FED4();
          __asm { BR              X8 }
        }
        uint64_t v50 = *(void *)(v0 + 1696);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2E38((void *)(v50 + 128), *(void *)(v50 + 152));
        uint64_t v51 = (void *)swift_task_alloc();
        *(void *)(v0 + 2024) = v51;
        *uint64_t v51 = v0;
        v51[1] = sub_1521E0;
        sub_153C04();
        __asm { BR              X7 }
      }
      uint64_t v38 = *(void *)(v0 + 1784);
      uint64_t v39 = *(void *)(v0 + 1776);
      uint64_t v40 = *(void *)(v0 + 1768);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v41 = sub_1AC7D0();
      sub_A340();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v38, v41, v40);
      sub_1AC7F0();
      os_log_type_t v42 = sub_1ACF50();
      if (sub_29300(v42))
      {
        uint64_t v43 = (_WORD *)sub_292A0();
        sub_29368(v43);
        sub_A7FC(&def_342E4, v44, v45, "Incorrect device state, this shouldn't get executed.");
        sub_ABE94();
      }
      sub_153C70();
      uint64_t v46 = sub_4BB78();
      v47(v46);
      sub_9B48(v27 + 48, v0 + 432);
      sub_9BA4();
      sub_1AAF70();
      sub_153B50();
      sub_1AB130();
      swift_release();
      sub_153A94();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_E564();
      sub_153C04();
      __asm { BRAA            X1, X16 }
    }
  }
  sub_E3FC(*(void *)(v0 + 1696) + 128, v0 + 1312);
  sub_2E38((void *)(v0 + 1312), *(void *)(v0 + 1336));
  sub_153C50((uint64_t)&dword_207848);
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 1992) = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_151738;
  sub_153CD8((uint64_t)v16, v17, v18, v19, v20, v21, v22, v23, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74);
  sub_153C04();
  __asm { BR              X5 }
}

uint64_t sub_151738()
{
  sub_A364();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *char v4 = v3;
  *char v4 = *v1;
  *(void *)(v3 + 2000) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_151840()
{
  unint64_t v1 = *(void **)(v0 + 2000);
  uint64_t v2 = *(void *)(v0 + 1968);
  char v13 = *(unsigned char *)(v0 + 265);
  uint64_t v3 = *(void *)(v0 + 1928);
  uint64_t v4 = *(void *)(v0 + 1912);
  uint64_t v5 = *(void *)(v0 + 1904);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 1312);
  sub_1AB090();
  sub_55624();
  v6();
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  id v7 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  *(void *)(v0 + 2008) = sub_153AEC();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 2016) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1519E4;
  uint64_t v9 = *(void *)(v0 + 1984);
  uint64_t v10 = *(void *)(v0 + 1976);
  uint64_t v11 = *(void *)(v0 + 1856);
  return sub_153204(v11, (v13 & 1) == 0, v10, v9, v2 != 0);
}

uint64_t sub_1519E4()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_E53C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_151ACC()
{
  uint64_t v46 = v0;
  uint64_t v1 = v0[233];
  uint64_t v2 = v0[232];
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1, v1) == 1)
  {
    sub_24ED0(v2, &qword_201E20);
    sub_1AC7D0();
    sub_A340();
    uint64_t v3 = sub_153B9C();
    v4(v3);
    uint64_t v5 = sub_1AC7F0();
    os_log_type_t v6 = sub_1ACF50();
    if (os_log_type_enabled(v5, v6))
    {
      *(_WORD *)sub_292A0() = 0;
      sub_471F8(&def_342E4, v7, v8, "Phone medication querying error's punchout URL construction failed, starting GenericErrorFlow.");
      swift_slowDealloc();
    }
    uint64_t v44 = v0[245];
    uint64_t v9 = v0[243];
    uint64_t v40 = (void *)v0[250];
    uint64_t v42 = v0[242];
    uint64_t v10 = v0[229];
    uint64_t v11 = v0[222];
    uint64_t v12 = v0[221];

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    sub_153BD4();
    sub_9BA4();
    sub_1AAF70();
    sub_153B50();
    sub_1AB130();
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v44, v42);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v0[234] + 32))(v0[237], v2, v1);
    sub_1AC7D0();
    sub_A340();
    uint64_t v13 = sub_153B9C();
    v14(v13);
    char v15 = (void *)sub_1AC7F0();
    os_log_type_t v16 = sub_1ACF50();
    if (sub_29300(v16))
    {
      uint64_t v17 = (_WORD *)sub_292A0();
      sub_29368(v17);
      sub_A7FC(&def_342E4, v18, v19, "Creating sequence flow.");
      sub_ABE94();
    }
    uint64_t v38 = (void *)v0[250];
    uint64_t v39 = v0[243];
    uint64_t v41 = v0[242];
    uint64_t v43 = v0[245];
    uint64_t v20 = v0[234];
    uint64_t v35 = v0[251];
    uint64_t v36 = v0[233];
    uint64_t v21 = v0[230];
    uint64_t v22 = v0[222];
    uint64_t v23 = v0[221];
    uint64_t v24 = v0[220];
    uint64_t v37 = v0[237];
    uint64_t v25 = (void *)v0[212];

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    uint64_t v26 = v25[4];
    uint64_t v27 = v25[5];
    sub_2E38(v25 + 1, v26);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v27 + 16))(v45, v26, v27);
    sub_2694(&qword_202588);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1B04D0;
    v0[209] = v35;
    sub_1AAEF0();
    *(void *)(v28 + 32) = sub_1AAF70();
    sub_2E38(v25 + 1, v25[4]);
    uint64_t v29 = sub_153AC8();
    v30(v29);
    sub_55624();
    v31();
    sub_1AC3C0();
    sub_1539D0(&qword_203100, (void (*)(uint64_t))&type metadata accessor for AppPunchOutFlow);
    uint64_t v32 = sub_1AAF70();
    sub_153974(v24);
    *(void *)(v28 + 40) = v32;
    v45[5] = v28;
    sub_1ACEF0();
    sub_1AC300();
    swift_allocObject();
    v0[210] = sub_1AC2F0();
    sub_1539D0(&qword_203110, (void (*)(uint64_t))&type metadata accessor for SequenceFlow);
    sub_1AB120();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v37, v36);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v43, v41);
    swift_release();
  }
  sub_153A18();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v33();
}

uint64_t sub_152038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_6FF4C();
  sub_6FF30();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v22 + 1312);
  sub_1AC7D0();
  sub_ABE34();
  uint64_t v23 = sub_292B8();
  v24(v23);
  sub_1AC7F0();
  os_log_type_t v25 = sub_1ACF50();
  if (sub_29300(v25))
  {
    uint64_t v26 = (_WORD *)sub_292A0();
    sub_29368(v26);
    sub_A7FC(&def_342E4, v27, v28, "Phone medication querying error pattern failed, starting GenericErrorFlow.");
    sub_ABE94();
  }
  sub_153C70();
  uint64_t v29 = sub_4BB78();
  v30(v29);
  sub_153BD4();
  sub_9BA4();
  sub_1AAF70();
  sub_153B50();
  sub_1AB130();
  swift_release();
  sub_153A18();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_6FED4();
  return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t sub_1521E0(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  sub_E53C();
  *os_log_type_t v6 = v5;
  uint64_t v7 = *v2;
  sub_E53C();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v5 + 2032) = a1;
  }
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1522DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_6FF4C();
  sub_6FF30();
  uint64_t v23 = (void *)v22[254];
  uint64_t v24 = v22[244];
  uint64_t v25 = v22[243];
  uint64_t v26 = v22[212];
  uint64_t v37 = v22[211];
  uint64_t v38 = v22[242];
  id v27 = [v23 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_2E38((void *)(v26 + 48), *(void *)(v26 + 72));
  v22[206] = sub_1AAF40();
  sub_1AAEF0();
  sub_1AAF70();
  swift_release();
  sub_1AB130();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v38);
  sub_153A18();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_6FED4();
  return v29(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16, a17, v37, v38,
           a20,
           a21,
           a22);
}

#error "152588: call analysis failed (funcsize=103)"

uint64_t sub_152664()
{
  sub_A364();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 2048) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_15276C()
{
  uint64_t v11 = *(void *)(v0 + 1968);
  char v12 = *(unsigned char *)(v0 + 265);
  uint64_t v1 = *(void *)(v0 + 1704);
  id v2 = [*(id *)(v0 + 2048) patternId];
  sub_1ACDD0();

  sub_1AB380();
  *(void *)(v0 + 2056) = sub_153AEC();
  *(_DWORD *)(v0 + 268) = *(_DWORD *)(v1 + 48);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 2064) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1528C0;
  char v4 = *(unsigned char *)(v0 + 2072);
  char v5 = *(unsigned char *)(v0 + 267);
  char v6 = *(unsigned char *)(v0 + 266);
  uint64_t v7 = *(void *)(v0 + 1984);
  uint64_t v8 = *(void *)(v0 + 1976);
  uint64_t v9 = *(void *)(v0 + 1720);
  return sub_153514(v9, (v12 & 1) == 0, v8, v7, v11 != 0, v6, v5, v4);
}

uint64_t sub_1528C0()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *id v2 = v1;
  uint64_t v3 = *v0;
  sub_E53C();
  *char v4 = v3;
  *(unsigned char *)(v6 + 2073) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1529AC()
{
  uint64_t v62 = v0;
  char v1 = *(unsigned char *)(v0 + 2073);
  uint64_t v2 = *(void *)(v0 + 1864);
  uint64_t v3 = *(void *)(v0 + 1720);
  uint64_t v4 = *(void *)(v0 + 1712);
  uint64_t v5 = *(void *)(v0 + 1704);
  *(unsigned char *)(v3 + *(int *)(v0 + 268)) = v1;
  uint64_t v6 = *(int *)(v5 + 48);
  sub_45DC8(v3, v4);
  *(unsigned char *)(v4 + v6) = v1;
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1, v2) == 1)
  {
    char v7 = *(unsigned char *)(v0 + 2073);
    sub_24ED0(*(void *)(v0 + 1712), &qword_201E20);
    sub_1AC7D0();
    if (v7)
    {
      sub_A340();
      sub_153C90();
      v8();
      uint64_t v9 = sub_1AC7F0();
      os_log_type_t v10 = sub_1ACF50();
      if (os_log_type_enabled(v9, v10))
      {
        *(_WORD *)sub_292A0() = 0;
        sub_471F8(&def_342E4, v11, v12, "Punchout was expected but URL construction failed, returning GenericErrorFlow.");
        swift_slowDealloc();
      }
      uint64_t v13 = *(void *)(v0 + 1944);
      uint64_t v58 = *(void *)(v0 + 1936);
      uint64_t v60 = *(void *)(v0 + 1952);
      uint64_t v14 = *(void *)(v0 + 1792);
      uint64_t v15 = *(void *)(v0 + 1776);
      uint64_t v16 = *(void *)(v0 + 1768);
      uint64_t v54 = *(void **)(v0 + 2048);
      uint64_t v56 = *(void *)(v0 + 1720);

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      sub_153BD4();
      sub_9BA4();
      sub_1AAF70();
      sub_153B50();
      sub_1AB130();
      swift_release();

      swift_release();
      uint64_t v17 = v56;
    }
    else
    {
      sub_A340();
      sub_153C90();
      v39();
      uint64_t v40 = (void *)sub_1AC7F0();
      os_log_type_t v41 = sub_1ACF50();
      if (sub_29300(v41))
      {
        uint64_t v42 = (_WORD *)sub_292A0();
        sub_29368(v42);
        sub_A7FC(&def_342E4, v43, v44, "Punchout not required, producing response flow.");
        sub_ABE94();
      }
      uint64_t v45 = *(void **)(v0 + 2048);
      uint64_t v13 = *(void *)(v0 + 1944);
      uint64_t v58 = *(void *)(v0 + 1936);
      uint64_t v60 = *(void *)(v0 + 1952);
      uint64_t v46 = *(void *)(v0 + 1720);

      uint64_t v47 = sub_153C38();
      v48(v47);
      sub_1AB130();
      swift_release();

      uint64_t v17 = v46;
    }
    sub_24ED0(v17, &qword_207AF8);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v60, v58);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 1872) + 32))(*(void *)(v0 + 1880), *(void *)(v0 + 1712), *(void *)(v0 + 1864));
    sub_1AC7D0();
    sub_ABE34();
    uint64_t v18 = sub_292B8();
    v19(v18);
    uint64_t v20 = (void *)sub_1AC7F0();
    os_log_type_t v21 = sub_1ACF50();
    if (sub_29300(v21))
    {
      uint64_t v22 = (_WORD *)sub_292A0();
      sub_29368(v22);
      sub_A7FC(&def_342E4, v23, v24, "Punchout is required, creating sequence flow.");
      sub_ABE94();
    }
    uint64_t v53 = *(void **)(v0 + 2048);
    uint64_t v55 = *(void *)(v0 + 1944);
    uint64_t v57 = *(void *)(v0 + 1936);
    uint64_t v59 = *(void *)(v0 + 1952);
    uint64_t v51 = *(void *)(v0 + 2056);
    uint64_t v25 = *(void *)(v0 + 1808);
    uint64_t v26 = *(void *)(v0 + 1776);
    uint64_t v27 = *(void *)(v0 + 1768);
    uint64_t v28 = *(void *)(v0 + 1760);
    uint64_t v29 = *(void **)(v0 + 1696);
    uint64_t v52 = *(void *)(v0 + 1720);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    uint64_t v30 = v29[4];
    uint64_t v31 = v29[5];
    sub_2E38(v29 + 1, v30);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v31 + 16))(v61, v30, v31);
    sub_2694(&qword_202588);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_1B04D0;
    *(void *)(v0 + 1664) = v51;
    sub_1AAEF0();
    *(void *)(v32 + 32) = sub_1AAF70();
    sub_2E38(v29 + 1, v29[4]);
    uint64_t v33 = sub_153AC8();
    v34(v33);
    sub_55624();
    v35();
    sub_1AC3C0();
    sub_1539D0(&qword_203100, (void (*)(uint64_t))&type metadata accessor for AppPunchOutFlow);
    uint64_t v36 = sub_1AAF70();
    sub_153974(v28);
    *(void *)(v32 + 40) = v36;
    v61[5] = v32;
    sub_1ACEF0();
    sub_1AC300();
    swift_allocObject();
    *(void *)(v0 + 1656) = sub_1AC2F0();
    sub_1539D0(&qword_203110, (void (*)(uint64_t))&type metadata accessor for SequenceFlow);
    sub_1AB120();
    swift_release();

    uint64_t v37 = sub_153C38();
    v38(v37);
    sub_24ED0(v52, &qword_207AF8);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v59, v57);
    swift_release();
  }
  sub_153A94();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v49();
}

#error "153128: call analysis failed (funcsize=103)"

uint64_t sub_153204(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v6 + 73) = a5;
  *(void *)(v6 + 32) = a4;
  *(void *)(v6 + 40) = v5;
  *(unsigned char *)(v6 + 72) = a2;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a3;
  return _swift_task_switch(sub_153230, 0, 0);
}

uint64_t sub_153230()
{
  sub_E588();
  if ((*(unsigned char *)(v0 + 72) & 1) == 0 && *(unsigned char *)(v0 + 73) == 1 && *(void *)(v0 + 32))
  {
    sub_153B68();
    char v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v1;
    *char v1 = v0;
    v1[1] = sub_153370;
    uint64_t v2 = sub_153B34();
    return v3(v2);
  }
  else
  {
    sub_1AAB00();
    sub_E564();
    return v5();
  }
}

uint64_t sub_153370()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_153440()
{
  sub_E588();
  sub_153C20();
  sub_1AD080(112);
  v5._object = (void *)0x80000000001BC930;
  v5._countAndFlagsBits = 0xD00000000000006ELL;
  sub_1ACE70(v5);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v1;
  v6._object = v0;
  sub_1ACE70(v6);
  swift_bridgeObjectRelease();
  sub_1AAB00();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_E564();
  return v2();
}

uint64_t sub_153514(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7, char a8)
{
  *(unsigned char *)(v9 + 76) = a8;
  *(unsigned char *)(v9 + 75) = a7;
  *(unsigned char *)(v9 + 74) = a6;
  *(unsigned char *)(v9 + 73) = a5;
  *(void *)(v9 + 32) = a4;
  *(void *)(v9 + 40) = v8;
  *(unsigned char *)(v9 + 72) = a2;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a3;
  return _swift_task_switch(sub_15354C, 0, 0);
}

uint64_t sub_15354C()
{
  sub_E588();
  if (*(unsigned char *)(v0 + 72))
  {
    if (*(unsigned char *)(v0 + 74) == 1 && *(unsigned char *)(v0 + 75) != 0) {
      goto LABEL_16;
    }
LABEL_17:
    uint64_t v8 = *(void *)(v0 + 16);
    uint64_t v9 = sub_1AAB10();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, 1, 1, v9);
    uint64_t v7 = 0;
    goto LABEL_18;
  }
  int v2 = *(unsigned __int8 *)(v0 + 74);
  if (v2 != 1 || ((*(unsigned char *)(v0 + 75) | *(unsigned char *)(v0 + 76)) & 1) == 0)
  {
    if (*(unsigned char *)(v0 + 73) & 1) != 0 || ((v2 ^ 1)) {
      goto LABEL_17;
    }
LABEL_16:
    sub_1AAB00();
    uint64_t v7 = 1;
LABEL_18:
    os_log_type_t v10 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v10(v7);
  }
  if (!*(void *)(v0 + 32)) {
    goto LABEL_16;
  }
  sub_153B68();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1536F4;
  uint64_t v4 = sub_153B34();
  return v5(v4);
}

uint64_t sub_1536F4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *int v2 = v1;
  *int v2 = *v0;
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1537C4()
{
  sub_E588();
  sub_153C20();
  sub_1AD080(70);
  v6._object = (void *)0x80000000001BB850;
  v6._countAndFlagsBits = 0xD000000000000044;
  sub_1ACE70(v6);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v1;
  v7._object = v0;
  sub_1ACE70(v7);
  swift_bridgeObjectRelease();
  sub_1AAB00();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 8);
  return v3(1);
}

uint64_t sub_1538A4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_E230;
  return sub_150D1C();
}

uint64_t sub_15393C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_153974(uint64_t a1)
{
  uint64_t v2 = sub_1AC3D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1539D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_153A18()
{
  return swift_task_dealloc();
}

uint64_t sub_153A94()
{
  return *(void *)(v0 + 1960);
}

uint64_t sub_153AC8()
{
  return v0;
}

uint64_t sub_153AEC()
{
  sub_2E38(v0, *(void *)(v1 + 72));
  return sub_1AAF40();
}

uint64_t sub_153B34()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_153B50()
{
  return sub_9BF0(v0);
}

uint64_t sub_153B68()
{
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = v1[30];
  sub_2E38(v1 + 26, v1[29]);
  return v2 + 8;
}

uint64_t sub_153B9C()
{
  return v0;
}

uint64_t sub_153BB8()
{
  return v0;
}

uint64_t sub_153BD4()
{
  return sub_9B48(v1, v0);
}

uint64_t sub_153BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return a19;
}

uint64_t sub_153C38()
{
  return v0;
}

uint64_t sub_153C50@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 24) = v1 + a1;
  return swift_bridgeObjectRetain();
}

void sub_153C70()
{
}

void sub_153CA4()
{
}

uint64_t sub_153CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  return a18 & 1;
}

void sub_153CEC(char a1, void *a2)
{
  uint64_t v5 = sub_2694(&qword_201E20);
  uint64_t v6 = sub_53D4(v5);
  __chkstk_darwin(v6);
  sub_155008(v7, v75);
  __chkstk_darwin(v8);
  sub_1552C0();
  sub_52C4();
  __chkstk_darwin(v9);
  sub_155070();
  __chkstk_darwin(v10);
  uint64_t v11 = sub_2694(&qword_201CC8);
  uint64_t v12 = sub_53D4(v11);
  __chkstk_darwin(v12);
  sub_15508C();
  uint64_t v13 = sub_1AAA10();
  sub_52C4();
  __chkstk_darwin(v14);
  sub_98794();
  uint64_t v16 = __chkstk_darwin(v15);
  Class v24 = sub_15517C(v16, v17, v18, v19, v20, v21, v22, v23, v76);
  if (v24)
  {
    Class v78 = v24;
    if (sub_72484(a1, (uint64_t)&off_1F43E8)) {
      goto LABEL_9;
    }
    if (sub_72484(a1, (uint64_t)&off_1F4410))
    {
      sub_15526C();
LABEL_9:
      sub_1AAB00();
      sub_A56C();

      return;
    }
    id v28 = [objc_allocWithZone((Class)HealthAppDataTypeDetailLinkBuilder) init];
    uint64_t v29 = self;
    id v30 = v28;
    id v31 = [v29 externalSourceAssistantService];
    uint64_t v32 = (void (*)(uint64_t))sub_1ACDD0();
    uint64_t v34 = v33;

    sub_154E44((uint64_t)v32, v34, v30);
    uint64_t v77 = v30;

    sub_26EFC((uint64_t)a2, v2, &qword_201CC8);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1, v13) == 1)
    {
      sub_24ED0(v2, &qword_201CC8);
      sub_1AC7D0();
      sub_DBAF0();
      uint64_t v35 = sub_154F74();
      v36(v35);
      uint64_t v37 = v78;
      uint64_t v38 = sub_1AC7F0();
      os_log_type_t v39 = sub_1ACF50();
      if (os_log_type_enabled(v38, v39))
      {
        swift_slowAlloc();
        uint64_t v40 = (void *)sub_B7C18();
        sub_155130(5.7779e-34);
        sub_155028();
        *uint64_t v40 = v78;

        sub_155280(&def_342E4, v41, v42, "Building a deeplink for %@ and no interval");
        sub_2694(&qword_201DE0);
        swift_arrayDestroy();
        sub_A1F0();
        sub_A1F0();
      }
      else
      {

        uint64_t v38 = v37;
      }

      uint64_t v62 = sub_1551A0();
      v63(v62);
      id v64 = [v77 URLForDataTypeDetailWithObjectType:v37];
      if (v64)
      {
        uint64_t v65 = v64;
        sub_1AAAF0();
      }
      uint64_t v70 = sub_1AAB10();
      uint64_t v71 = sub_1551F4(v70);
    }
    else
    {
      uint64_t v43 = sub_154FC4();
      v44(v43);
      sub_1AC7D0();
      sub_DBAF0();
      uint64_t v45 = sub_154F9C();
      v46(v45);
      uint64_t v47 = sub_154FE8();
      v48(v47);
      uint64_t v49 = v78;
      uint64_t v50 = sub_1AC7F0();
      os_log_type_t v51 = sub_1ACF50();
      uint64_t v52 = (Class *)v51;
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v53 = swift_slowAlloc();
        sub_B7C18();
        v79[0] = sub_1552A0();
        sub_1550C4(5.778e-34);
        sub_1551D0();
        *uint64_t v52 = v78;

        *(_WORD *)(v53 + 12) = 2080;
        sub_154F10(&qword_206728, (void (*)(uint64_t))&type metadata accessor for DateInterval);
        uint64_t v54 = sub_1AD2C0();
        uint64_t v56 = sub_4A278(v54, v55, v79);
        sub_1550EC(v56);
        swift_bridgeObjectRelease();
        uint64_t v57 = sub_154F58();
        v32(v57);
        sub_155158(&def_342E4, v58, v59, "Building a deeplink for %@ and interval: %s");
        sub_2694(&qword_201DE0);
        swift_arrayDestroy();
        sub_A1F0();
        sub_15524C();
        sub_A1F0();
        sub_A1F0();

        uint64_t v60 = sub_1550A8();
      }
      else
      {

        uint64_t v66 = sub_154F58();
        v32(v66);

        uint64_t v60 = sub_1552E0();
      }
      v61(v60);
      uint64_t v67 = (objc_class *)v77;
      Class isa = sub_1AA9A0().super.isa;
      uint64_t v69 = (objc_class *)[v77 URLForDataTypeDetailWithObjectType:v49 dateInterval:isa];

      if (v69)
      {
        sub_1AAAF0();

        uint64_t v67 = v49;
        uint64_t v49 = v69;
      }

      uint64_t v73 = sub_1551B8();
      v32(v73);
      uint64_t v74 = sub_1AAB10();
      uint64_t v71 = sub_155220(v74);
    }
    sub_154EA8(v71, v72);
    sub_A56C();
  }
  else
  {
    sub_155114();
    sub_A56C();
    sub_1AAB00();
  }
}

uint64_t sub_15431C(uint64_t a1, uint64_t a2)
{
  return sub_154428(a1, a2, (uint64_t (*)(void))sub_1950F4);
}

uint64_t sub_154334(uint64_t a1, uint64_t a2)
{
  return sub_154428(a1, a2, (uint64_t (*)(void))sub_2F2B8);
}

uint64_t sub_15434C(uint64_t a1, uint64_t a2)
{
  return sub_154428(a1, a2, (uint64_t (*)(void))sub_19DEE8);
}

uint64_t sub_154364(uint64_t a1, uint64_t a2)
{
  return sub_154428(a1, a2, (uint64_t (*)(void))sub_481F0);
}

uint64_t sub_15437C(__int16 a1, __int16 a2)
{
  uint64_t v3 = sub_1771BC(a1);
  uint64_t v5 = v4;
  if (v3 == sub_1771BC(a2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_155054();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1543F8(uint64_t a1, uint64_t a2)
{
  return sub_154428(a1, a2, (uint64_t (*)(void))sub_15A300);
}

uint64_t sub_154410(uint64_t a1, uint64_t a2)
{
  return sub_154428(a1, a2, (uint64_t (*)(void))sub_A05A0);
}

uint64_t sub_154428(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3();
  uint64_t v7 = v6;
  if (v5 == ((uint64_t (*)(uint64_t))a3)(a2) && v7 == v8) {
    char v10 = 1;
  }
  else {
    char v10 = sub_155054();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_1544B0(char a1, char a2)
{
  if (*(void *)&aFirst_2[8 * a1] == *(void *)&aFirst_2[8 * a2] && qword_1B4218[a1] == qword_1B4218[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = sub_155054();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_15452C(uint64_t a1, uint64_t a2)
{
  return sub_1545BC(a1, a2, (void (*)(void))&type metadata accessor for UsoEntity_common_MeasurementUnitType.DefinedValues, &qword_207B18, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_MeasurementUnitType.DefinedValues);
}

uint64_t sub_154574(uint64_t a1, uint64_t a2)
{
  return sub_1545BC(a1, a2, (void (*)(void))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues, &qword_207B20, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_ListPosition.DefinedValues);
}

uint64_t sub_1545BC(uint64_t a1, uint64_t a2, void (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  a3(0);
  sub_154F10(a4, a5);
  sub_1ACEA0();
  sub_1ACEA0();
  if (v12 == v10 && v13 == v11) {
    char v8 = 1;
  }
  else {
    char v8 = sub_155054();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_15468C(uint64_t a1, uint64_t a2)
{
  return sub_1545BC(a1, a2, (void (*)(void))&type metadata accessor for UsoEntity_common_Decimal.DefinedValues, &qword_207B10, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_Decimal.DefinedValues);
}

void sub_1546D4(char a1, void *a2)
{
  uint64_t v5 = sub_2694(&qword_201E20);
  uint64_t v6 = sub_53D4(v5);
  __chkstk_darwin(v6);
  sub_155008(v7, v75);
  __chkstk_darwin(v8);
  sub_1552C0();
  sub_52C4();
  __chkstk_darwin(v9);
  sub_155070();
  __chkstk_darwin(v10);
  uint64_t v11 = sub_2694(&qword_201E10);
  uint64_t v12 = sub_53D4(v11);
  __chkstk_darwin(v12);
  sub_15508C();
  uint64_t v13 = sub_1AABD0();
  sub_52C4();
  __chkstk_darwin(v14);
  sub_98794();
  uint64_t v16 = __chkstk_darwin(v15);
  Class v24 = sub_15517C(v16, v17, v18, v19, v20, v21, v22, v23, v76);
  if (v24)
  {
    Class v78 = v24;
    if (sub_72484(a1, (uint64_t)&off_1F4768)) {
      goto LABEL_9;
    }
    if (sub_72484(a1, (uint64_t)&off_1F4790))
    {
      sub_15526C();
LABEL_9:
      sub_1AAB00();
      sub_A56C();

      return;
    }
    id v28 = [objc_allocWithZone((Class)HealthAppDataTypeDetailLinkBuilder) init];
    uint64_t v29 = self;
    id v30 = v28;
    id v31 = [v29 externalSourceAssistantService];
    uint64_t v32 = (void (*)(uint64_t))sub_1ACDD0();
    uint64_t v34 = v33;

    sub_154E44((uint64_t)v32, v34, v30);
    uint64_t v77 = v30;

    sub_26EFC((uint64_t)a2, v2, &qword_201E10);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v2, 1, v13) == 1)
    {
      sub_24ED0(v2, &qword_201E10);
      sub_1AC7D0();
      sub_DBAF0();
      uint64_t v35 = sub_154F74();
      v36(v35);
      uint64_t v37 = v78;
      uint64_t v38 = sub_1AC7F0();
      os_log_type_t v39 = sub_1ACF50();
      if (os_log_type_enabled(v38, v39))
      {
        swift_slowAlloc();
        uint64_t v40 = (void *)sub_B7C18();
        sub_155130(5.7779e-34);
        sub_155028();
        *uint64_t v40 = v78;

        sub_155280(&def_342E4, v41, v42, "Building a deeplink for %@ and no interval");
        sub_2694(&qword_201DE0);
        swift_arrayDestroy();
        sub_A1F0();
        sub_A1F0();
      }
      else
      {

        uint64_t v38 = v37;
      }

      uint64_t v62 = sub_1551A0();
      v63(v62);
      id v64 = [v77 URLForDataTypeDetailWithObjectType:v37];
      if (v64)
      {
        uint64_t v65 = v64;
        sub_1AAAF0();
      }
      uint64_t v70 = sub_1AAB10();
      uint64_t v71 = sub_1551F4(v70);
    }
    else
    {
      uint64_t v43 = sub_154FC4();
      v44(v43);
      sub_1AC7D0();
      sub_DBAF0();
      uint64_t v45 = sub_154F9C();
      v46(v45);
      uint64_t v47 = sub_154FE8();
      v48(v47);
      uint64_t v49 = v78;
      uint64_t v50 = sub_1AC7F0();
      os_log_type_t v51 = sub_1ACF50();
      uint64_t v52 = (Class *)v51;
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v53 = swift_slowAlloc();
        sub_B7C18();
        v79[0] = sub_1552A0();
        sub_1550C4(5.778e-34);
        sub_1551D0();
        *uint64_t v52 = v78;

        *(_WORD *)(v53 + 12) = 2080;
        sub_154F10(&qword_206570, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v54 = sub_1AD2C0();
        uint64_t v56 = sub_4A278(v54, v55, v79);
        sub_1550EC(v56);
        swift_bridgeObjectRelease();
        uint64_t v57 = sub_154F58();
        v32(v57);
        sub_155158(&def_342E4, v58, v59, "Building a deeplink for %@ and date: %s");
        sub_2694(&qword_201DE0);
        swift_arrayDestroy();
        sub_A1F0();
        sub_15524C();
        sub_A1F0();
        sub_A1F0();

        uint64_t v60 = sub_1550A8();
      }
      else
      {

        uint64_t v66 = sub_154F58();
        v32(v66);

        uint64_t v60 = sub_1552E0();
      }
      v61(v60);
      uint64_t v67 = (objc_class *)v77;
      Class isa = sub_1AAB60().super.isa;
      uint64_t v69 = (objc_class *)[v77 URLForDataTypeDetailWithObjectType:v49 date:isa];

      if (v69)
      {
        sub_1AAAF0();

        uint64_t v67 = v49;
        uint64_t v49 = v69;
      }

      uint64_t v73 = sub_1551B8();
      v32(v73);
      uint64_t v74 = sub_1AAB10();
      uint64_t v71 = sub_155220(v74);
    }
    sub_154EA8(v71, v72);
    sub_A56C();
  }
  else
  {
    sub_155114();
    sub_A56C();
    sub_1AAB00();
  }
}

uint64_t sub_154D04@<X0>(uint64_t a1@<X8>)
{
  id v2 = [objc_allocWithZone((Class)HealthAppAuthorizationManagementLinkBuilder) init];
  char v3 = self;
  id v4 = v2;
  id v5 = [v3 externalSourceAssistantService];
  uint64_t v6 = sub_1ACDD0();
  uint64_t v8 = v7;

  sub_154E44(v6, v8, v4);
  NSString v9 = sub_1ACDC0();
  id v10 = [v4 URLForAuthorizationManagementFromLocation:2 bundleIdentifier:v9];

  if (v10)
  {
    sub_1AAAF0();

    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 1;
  }

  uint64_t v12 = sub_1AAB10();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, v11, 1, v12);
}

void sub_154E44(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = sub_1ACDC0();
  swift_bridgeObjectRelease();
  [a3 setSource:v4];
}

uint64_t sub_154EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_201E20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_154F10(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_154F58()
{
  return v0;
}

uint64_t sub_154F74()
{
  return v0;
}

uint64_t sub_154F9C()
{
  return v0;
}

uint64_t sub_154FC4()
{
  return *(void *)(v0 - 144);
}

uint64_t sub_154FE8()
{
  return v0;
}

void sub_155008(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_155028()
{
  return sub_1ACFE0();
}

uint64_t sub_155054()
{
  return sub_1AD2F0();
}

uint64_t sub_15508C()
{
  return 0;
}

uint64_t sub_1550A8()
{
  return v0;
}

id sub_1550C4(float a1)
{
  *uint64_t v2 = a1;
  *(void *)(v4 - 208) = v1;
  return v3;
}

uint64_t sub_1550EC(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return sub_1ACFE0();
}

unint64_t sub_155114()
{
  return 0xD000000000000018;
}

id sub_155130(float a1)
{
  *uint64_t v2 = a1;
  *(void *)(v3 - 112) = v1;
  return v1;
}

void sub_155158(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v7 = *(NSObject **)(v5 - 208);
  int v8 = *(_DWORD *)(v5 - 196);
  _os_log_impl(a1, v7, (os_log_type_t)v8, a4, v4, 0x16u);
}

Class sub_15517C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v11 - 144) = (char *)&a9 - v9;
  return sub_31C30(v10);
}

uint64_t sub_1551A0()
{
  return v0;
}

uint64_t sub_1551B8()
{
  return v0;
}

uint64_t sub_1551D0()
{
  return sub_1ACFE0();
}

uint64_t sub_1551F4(uint64_t a1)
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v2, v1, 1, a1);
  return v2;
}

uint64_t sub_155220(uint64_t a1)
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v2, v1, 1, a1);
  return v2;
}

uint64_t sub_15524C()
{
  return swift_arrayDestroy();
}

unint64_t sub_15526C()
{
  return 0xD00000000000005CLL;
}

void sub_155280(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1552A0()
{
  *(_DWORD *)(v1 - 196) = v0;
  return swift_slowAlloc();
}

uint64_t sub_1552C0()
{
  return sub_1AC800();
}

uint64_t sub_1552E0()
{
  return v0;
}

uint64_t SnippetHeaderModel.init(categoryLabel:categoryListIconName:categoryIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_1AC1E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a6, a1, v12);
  uint64_t result = type metadata accessor for SnippetHeaderModel();
  uint64_t v14 = (void *)(a6 + *(int *)(result + 20));
  *uint64_t v14 = a2;
  v14[1] = a3;
  uint64_t v15 = (void *)(a6 + *(int *)(result + 24));
  *uint64_t v15 = a4;
  v15[1] = a5;
  return result;
}

uint64_t type metadata accessor for SnippetHeaderModel()
{
  uint64_t result = qword_207B98;
  if (!qword_207B98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1553DC(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x79726F6765746163 && a2 == 0xED00006C6562614CLL;
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000000001BCA00 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000000001BCA20)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1AD2F0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_15553C(char a1)
{
  if (!a1) {
    return 0x79726F6765746163;
  }
  if (a1 == 1) {
    return 0xD000000000000014;
  }
  return 0xD000000000000012;
}

uint64_t sub_1555A4()
{
  return sub_15553C(*v0);
}

uint64_t sub_1555AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1553DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1555D4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = variable initialization expression of LogHealthKitQuantityFlow.taskLogger();
  *a1 = result;
  return result;
}

uint64_t sub_1555FC(uint64_t a1)
{
  unint64_t v2 = sub_155828();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_155638(uint64_t a1)
{
  unint64_t v2 = sub_155828();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SnippetHeaderModel.encode(to:)(void *a1)
{
  uint64_t v4 = sub_2694(&qword_207B28);
  sub_52C4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_2F014();
  sub_2E38(a1, a1[3]);
  sub_155828();
  sub_1AD3B0();
  sub_1AC1E0();
  sub_155CF4(&qword_202BC8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
  sub_1AD2B0();
  if (!v1)
  {
    type metadata accessor for SnippetHeaderModel();
    sub_1AD280();
    sub_1AD280();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

unint64_t sub_155828()
{
  unint64_t result = qword_207B30;
  if (!qword_207B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_207B30);
  }
  return result;
}

uint64_t SnippetHeaderModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v5 = sub_1AC1E0();
  sub_52C4();
  uint64_t v31 = v6;
  __chkstk_darwin(v7);
  uint64_t v32 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_2694(&qword_207B38);
  sub_52C4();
  uint64_t v30 = v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SnippetHeaderModel();
  __chkstk_darwin(v13);
  sub_2F014();
  sub_2E38(a1, a1[3]);
  sub_155828();
  sub_1AD3A0();
  if (v2) {
    return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
  }
  uint64_t v15 = v30;
  uint64_t v14 = v31;
  uint64_t v28 = v13;
  char v36 = 0;
  sub_155CF4(&qword_202BE8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
  sub_1AD220();
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  uint64_t v27 = v3;
  v16(v3, v32, v5);
  char v35 = 1;
  uint64_t v17 = sub_1AD1F0();
  uint64_t v18 = (uint64_t *)(v27 + *(int *)(v28 + 20));
  *uint64_t v18 = v17;
  v18[1] = v19;
  char v34 = 2;
  uint64_t v20 = sub_1AD1F0();
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v33);
  uint64_t v23 = v27;
  Class v24 = (uint64_t *)(v27 + *(int *)(v28 + 24));
  *Class v24 = v20;
  v24[1] = v22;
  sub_155BA4(v23, v29);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
  return sub_155C08(v23);
}

uint64_t sub_155BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_155C08(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SnippetHeaderModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_155C64()
{
  return sub_155CF4(&qword_202BF0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
}

uint64_t sub_155CAC()
{
  return sub_155CF4(&qword_202BD0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
}

uint64_t sub_155CF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_155D3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SnippetHeaderModel.init(from:)(a1, a2);
}

uint64_t sub_155D54(void *a1)
{
  return SnippetHeaderModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SnippetHeaderModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AC1E0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    void *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SnippetHeaderModel(uint64_t a1)
{
  uint64_t v2 = sub_1AC1E0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AC1E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AC1E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AC1E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1AC1E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_15618C);
}

uint64_t sub_15618C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1AC1E0();
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SnippetHeaderModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_156230);
}

void sub_156230(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1AC1E0();
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t sub_1562BC()
{
  uint64_t result = sub_1AC1E0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SnippetHeaderModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x156420);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SnippetHeaderModel.CodingKeys()
{
  return &type metadata for SnippetHeaderModel.CodingKeys;
}

unint64_t sub_15645C()
{
  unint64_t result = qword_207BD8;
  if (!qword_207BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_207BD8);
  }
  return result;
}

unint64_t sub_1564AC()
{
  unint64_t result = qword_207BE0;
  if (!qword_207BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_207BE0);
  }
  return result;
}

unint64_t sub_1564FC()
{
  unint64_t result = qword_207BE8[0];
  if (!qword_207BE8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_207BE8);
  }
  return result;
}

uint64_t sub_156548()
{
  return v0;
}

uint64_t destroy for GetHealthQuantityFlow(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 48);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 88);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 128);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 168);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 208);

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for GetHealthQuantityFlow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 48, a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 88, a2 + 88);
  long long v7 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 152) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 128, a2 + 128);
  long long v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 192) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 168, a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 232) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 208, a2 + 208);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GetHealthQuantityFlow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  sub_577C((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  sub_577C((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  sub_577C((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  sub_577C((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
  sub_577C((uint64_t *)(a1 + 168), (uint64_t *)(a2 + 168));
  sub_577C((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  return a1;
}

void *initializeWithTake for GetHealthQuantityFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x101uLL);
}

uint64_t assignWithTake for GetHealthQuantityFlow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 48);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 128);
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 168);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 208);
  long long v6 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v6;
  uint64_t v7 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v7;
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetHealthQuantityFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 257))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GetHealthQuantityFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 256) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 257) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 257) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GetHealthQuantityFlow()
{
  return &type metadata for GetHealthQuantityFlow;
}

uint64_t sub_156A20()
{
  sub_B70C0();

  return sub_1AAF80();
}

uint64_t sub_156A74()
{
  sub_A364();
  v1[103] = v0;
  v1[102] = v2;
  uint64_t v3 = type metadata accessor for UnavailableDataFlow();
  v1[104] = v3;
  sub_53D4(v3);
  v1[105] = sub_A42C();
  uint64_t v4 = sub_2694(&qword_201CC8);
  sub_53D4(v4);
  v1[106] = sub_A220();
  v1[107] = swift_task_alloc();
  uint64_t v5 = sub_1AC250();
  sub_53D4(v5);
  v1[108] = sub_A42C();
  uint64_t v6 = sub_1AC800();
  v1[109] = v6;
  sub_A19C(v6);
  v1[110] = v7;
  v1[111] = sub_A220();
  v1[112] = swift_task_alloc();
  uint64_t v8 = sub_1AAA10();
  v1[113] = v8;
  sub_A19C(v8);
  v1[114] = v9;
  v1[115] = sub_A42C();
  uint64_t v10 = sub_2694(&qword_201E10);
  sub_53D4(v10);
  v1[116] = sub_A220();
  v1[117] = swift_task_alloc();
  v1[118] = swift_task_alloc();
  v1[119] = swift_task_alloc();
  uint64_t v11 = sub_1AABD0();
  v1[120] = v11;
  sub_A19C(v11);
  v1[121] = v12;
  v1[122] = sub_A220();
  v1[123] = swift_task_alloc();
  v1[124] = swift_task_alloc();
  v1[125] = swift_task_alloc();
  v1[126] = swift_task_alloc();
  v1[127] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_156C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  uint64_t v19 = (void *)v18[103];
  uint64_t v20 = sub_157C7C(*(unsigned __int8 *)v19, v19 + 1);
  v18[128] = v20;
  sub_1AC3B0();
  uint64_t v21 = v19[9];
  uint64_t v22 = v19[10];
  sub_2E38(v19 + 6, v21);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
  sub_2E38(v18 + 88, v18[91]);
  char v23 = sub_1AB050();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v18 + 88));
  if ((v23 & 1) == 0)
  {
LABEL_13:
    uint64_t v46 = v18[112];
    uint64_t v47 = v18[110];
    uint64_t v48 = v18[109];
    uint64_t v49 = sub_1AC7D0();
    v18[129] = v49;
    sub_A340();
    uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16);
    v18[130] = v50;
    v18[131] = (v47 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v50(v46, v49, v48);
    id v51 = v20;
    uint64_t v52 = (void *)sub_1AC7F0();
    os_log_type_t v53 = sub_1ACF50();
    if (sub_A3D0(v53))
    {
      uint64_t v54 = (_DWORD *)sub_A4B0();
      unint64_t v55 = (void *)sub_B7C18();
      _DWORD *v54 = 138412290;
      v18[101] = v51;
      id v56 = v51;
      sub_1ACFE0();
      *unint64_t v55 = v51;

      sub_A27C(&def_342E4, v57, v58, "Executing intent: %@");
      sub_2694(&qword_201DE0);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();
    }
    else
    {

      uint64_t v52 = v51;
    }
    uint64_t v59 = v18[112];
    uint64_t v60 = v18[110];
    uint64_t v61 = v18[109];
    uint64_t v62 = v18[103];

    uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v18[132] = v63;
    v18[133] = (v60 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v63(v59, v61);
    id v64 = *(void **)(v62 + 248);
    v18[2] = v18;
    v18[7] = v18 + 99;
    v18[3] = sub_157264;
    v18[87] = swift_continuation_init();
    v18[83] = _NSConcreteStackBlock;
    v18[84] = 0x40000000;
    v18[85] = sub_6AA8;
    v18[86] = &unk_1F8CD0;
    [v64 handleGetHealthQuantity:v51 completion:v18 + 83];
    sub_6F544();
    return _swift_continuation_await(v65);
  }
  id v24 = [v20 start];
  if (!v24)
  {
    sub_A708(v18[119], v25, v26, v18[120]);
    goto LABEL_9;
  }
  uint64_t v27 = v24;
  uint64_t v28 = v18[121];
  sub_1AABB0();

  uint64_t v29 = *(void (**)(uint64_t))(v28 + 32);
  uint64_t v30 = sub_159974();
  v29(v30);
  sub_159908();
  if (v31)
  {
LABEL_9:
    uint64_t v44 = v18[119];
LABEL_12:
    sub_24ED0(v44, &qword_201E10);
    goto LABEL_13;
  }
  ((void (*)(void, void, void))v29)(v18[127], v18[119], v18[120]);
  id v32 = [v20 end];
  if (!v32)
  {
    sub_A708(v18[118], v33, v34, v18[120]);
    goto LABEL_11;
  }
  char v35 = v32;
  sub_1AABB0();

  uint64_t v36 = sub_159974();
  v29(v36);
  sub_159908();
  if (v31)
  {
LABEL_11:
    uint64_t v45 = v18[118];
    (*(void (**)(void, void))(v18[121] + 8))(v18[127], v18[120]);
    uint64_t v44 = v45;
    goto LABEL_12;
  }
  uint64_t v79 = v18[126];
  uint64_t v80 = v18[127];
  uint64_t v78 = v18[125];
  uint64_t v37 = v18[124];
  uint64_t v38 = v18[121];
  uint64_t v39 = v18[120];
  uint64_t v40 = v18[115];
  uint64_t v41 = v18[114];
  uint64_t v81 = v18[113];
  ((void (*)(void))v29)();
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
  v42(v79, v80, v39);
  v42(v37, v78, v39);
  sub_1AA9D0();
  LOBYTE(v38) = sub_1AC700();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v81);
  if (v38)
  {
    uint64_t v43 = *(void (**)(void))(v18[121] + 8);
    sub_47814();
    v43();
    sub_47814();
    v43();
    goto LABEL_13;
  }
  uint64_t v67 = v18[121];
  sub_1AC330();
  sub_E344C(v18 + 43);
  sub_E3600();
  sub_1AB120();

  sub_FCBA4((uint64_t)(v18 + 43));
  uint64_t v68 = *(void (**)(void))(v67 + 8);
  sub_FD430();
  v68();
  sub_FD430();
  v68();
  sub_159848();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_6F544();
  return v70(v69, v70, v71, v72, v73, v74, v75, v76, a9, a10, a11, v78, v79, v80, v81, a16, a17, a18);
}

uint64_t sub_157264()
{
  sub_A364();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_157334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 1040);
  uint64_t v20 = *(void *)(v18 + 1032);
  uint64_t v21 = *(void *)(v18 + 888);
  uint64_t v22 = *(void *)(v18 + 872);
  char v23 = *(void **)(v18 + 792);
  *(void *)(v18 + 1072) = v23;
  sub_A340();
  v19(v21, v20, v22);
  id v24 = v23;
  uint64_t v25 = (void *)sub_1AC7F0();
  os_log_type_t v26 = sub_1ACF50();
  if (sub_A3D0(v26))
  {
    a15 = (void *)(v18 + 800);
    uint64_t v27 = (_DWORD *)sub_A4B0();
    uint64_t v28 = (void *)sub_B7C18();
    *uint64_t v27 = 138412290;
    *(void *)(v18 + 800) = v24;
    uint64_t v29 = v24;
    sub_1ACFE0();
    *uint64_t v28 = v24;

    sub_A27C(&def_342E4, v30, v31, "Received response: %@");
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
  }
  uint64_t v32 = (*(uint64_t (**)(void, void))(v18 + 1056))(*(void *)(v18 + 888), *(void *)(v18 + 872));
  uint64_t v33 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v24)))(v32);
  if (v33 != 4)
  {
    if (v33 != 102)
    {
      if (v33 == 101)
      {
        uint64_t v36 = *(void **)(v18 + 1024);
        uint64_t v37 = *(char **)(v18 + 824);
        sub_1AC390();
        char v38 = *v37;
        sub_E3FC((uint64_t)(v37 + 48), v18 + 88);
        sub_9B48((uint64_t)(v37 + 88), v18 + 128);
        uint64_t v39 = sub_1AB1C0();
        swift_allocObject();
        uint64_t v40 = sub_1AB1B0();
        *(void *)(v18 + 312) = v39;
        *(void *)(v18 + 320) = &protocol witness table for ResponseFactory;
        *(void *)(v18 + 288) = v40;
        type metadata accessor for WellnessCATsSimple();
        sub_1AC240();
        uint64_t v41 = sub_1AC210();
        type metadata accessor for WellnessCATs();
        sub_1AC240();
        uint64_t v42 = sub_1AC1A0();
        *(unsigned char *)(v18 + 80) = v38;
        *(void *)(v18 + 328) = v41;
        *(void *)(v18 + 336) = v42;
        sub_9D40();
        sub_1AB120();

        sub_9D8C(v18 + 80);
      }
      else
      {
        uint64_t v77 = *(void **)(v18 + 1024);
        uint64_t v78 = *(void *)(v18 + 824);
        sub_1AC340();
        sub_9B48(v78 + 88, v18 + 504);
        sub_9BA4();
        sub_1AB120();

        sub_9BF0(v18 + 504);
      }
LABEL_23:
      sub_159848();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_E564();
      sub_6F544();
      return v93(v92, v93, v94, v95, v96, v97, v98, v99, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
    }
    a15 = v24;
    uint64_t v46 = *(void **)(v18 + 1024);
    sub_A708(*(void *)(v18 + 856), v34, v35, *(void *)(v18 + 904));
    id v47 = [v46 start];
    if (v47)
    {
      uint64_t v50 = v47;
      uint64_t v51 = *(void *)(v18 + 968);
      uint64_t v52 = *(void *)(v18 + 960);
      uint64_t v53 = *(void *)(v18 + 936);
      sub_1AABB0();

      uint64_t v54 = *(void (**)(uint64_t))(v51 + 32);
      uint64_t v55 = sub_15995C();
      v54(v55);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v53, 0, 1, v52);
      sub_1598AC(v53);
      if (!v56)
      {
        uint64_t v57 = *(void **)(v18 + 1024);
        ((void (*)(void, void, void))v54)(*(void *)(v18 + 984), *(void *)(v18 + 936), *(void *)(v18 + 960));
        id v58 = [v57 end];
        if (v58)
        {
          uint64_t v61 = v58;
          uint64_t v62 = *(void *)(v18 + 960);
          uint64_t v63 = *(void *)(v18 + 928);
          sub_1AABB0();

          uint64_t v64 = sub_15995C();
          v54(v64);
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v63, 0, 1, v62);
          sub_1598AC(v63);
          if (!v56)
          {
            uint64_t v65 = *(void *)(v18 + 1008);
            uint64_t v66 = *(void *)(v18 + 992);
            uint64_t v67 = *(void *)(v18 + 984);
            uint64_t v68 = *(void *)(v18 + 976);
            uint64_t v69 = *(void *)(v18 + 968);
            uint64_t v70 = *(void *)(v18 + 960);
            a13 = *(void *)(v18 + 856);
            a14 = *(void *)(v18 + 904);
            uint64_t v71 = *(void *)(v18 + 848);
            ((void (*)(uint64_t, void, uint64_t))v54)(v68, *(void *)(v18 + 928), v70);
            uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16);
            v72(v65, v67, v70);
            v72(v66, v68, v70);
            sub_1AA9D0();
            uint64_t v73 = *(void (**)(void))(v69 + 8);
            sub_FD430();
            v73();
            sub_FD430();
            v73();
            sub_24ED0(a13, &qword_201CC8);
            sub_47F14();
            _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v74, v75, v76, a14);
            sub_159640(v71, a13);
LABEL_22:
            uint64_t v81 = *(void **)(v18 + 1024);
            uint64_t v82 = *(void *)(v18 + 856);
            uint64_t v83 = *(unsigned char **)(v18 + 840);
            uint64_t v84 = *(int **)(v18 + 832);
            uint64_t v85 = *(char **)(v18 + 824);
            sub_1AC320();
            char v86 = *v85;
            sub_26EFC(v82, (uint64_t)&v83[v84[5]], &qword_201CC8);
            sub_E3FC((uint64_t)(v85 + 48), (uint64_t)&v83[v84[6]]);
            sub_9B48((uint64_t)(v85 + 88), (uint64_t)&v83[v84[7]]);
            uint64_t v87 = sub_1AB1C0();
            swift_allocObject();
            uint64_t v88 = sub_1AB1B0();
            uint64_t v89 = (uint64_t *)&v83[v84[8]];
            v89[3] = v87;
            v89[4] = (uint64_t)&protocol witness table for ResponseFactory;
            *uint64_t v89 = v88;
            type metadata accessor for WellnessCATsSimple();
            sub_1AC240();
            uint64_t v90 = sub_1AC210();
            type metadata accessor for WellnessCATs();
            sub_1AC240();
            uint64_t v91 = sub_1AC1A0();
            *uint64_t v83 = v86;
            *(void *)&v83[v84[9]] = v90;
            *(void *)&v83[v84[10]] = v91;
            sub_1595F0();
            sub_1AB120();

            sub_9CE4((uint64_t)v83);
            sub_24ED0(v82, &qword_201CC8);
            goto LABEL_23;
          }
        }
        else
        {
          sub_A708(*(void *)(v18 + 928), v59, v60, *(void *)(v18 + 960));
        }
        uint64_t v80 = *(void *)(v18 + 928);
        (*(void (**)(void, void))(*(void *)(v18 + 968) + 8))(*(void *)(v18 + 984), *(void *)(v18 + 960));
        uint64_t v79 = v80;
LABEL_21:
        sub_24ED0(v79, &qword_201E10);
        goto LABEL_22;
      }
    }
    else
    {
      sub_A708(*(void *)(v18 + 936), v48, v49, *(void *)(v18 + 960));
    }
    uint64_t v79 = *(void *)(v18 + 936);
    goto LABEL_21;
  }
  uint64_t v43 = (void *)swift_task_alloc();
  *(void *)(v18 + 1080) = v43;
  *uint64_t v43 = v18;
  v43[1] = sub_157A90;
  sub_6F544();
  return sub_158438();
}

uint64_t sub_157A90()
{
  sub_A364();
  sub_A1B4();
  *(void *)(v1 + 1088) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_157B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  uint64_t v19 = *(void **)(v18 + 1072);
  uint64_t v20 = *(void **)(v18 + 1024);
  sub_1AC3A0();
  sub_1AB130();
  swift_release();

  sub_159848();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_6F544();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

void *sub_157C7C(int a1, void *a2)
{
  sub_1AAD30();
  sub_52C4();
  uint64_t v105 = v5;
  uint64_t v106 = v4;
  __chkstk_darwin(v4);
  sub_53E0();
  uint64_t v104 = v6;
  uint64_t v7 = sub_2694(&qword_201E10);
  uint64_t v8 = sub_53D4(v7);
  __chkstk_darwin(v8);
  sub_E594();
  uint64_t v103 = v9;
  sub_A358();
  __chkstk_darwin(v10);
  sub_2073C();
  uint64_t v102 = v11;
  sub_A358();
  __chkstk_darwin(v12);
  sub_2073C();
  uint64_t v110 = v13;
  sub_A358();
  __chkstk_darwin(v14);
  uint64_t v109 = (char *)&v100 - v15;
  sub_1AABD0();
  sub_52C4();
  uint64_t v112 = v16;
  uint64_t v113 = v17;
  __chkstk_darwin(v16);
  sub_E594();
  uint64_t v108 = v18;
  sub_A358();
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v100 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v100 - v23;
  uint64_t v25 = sub_2694(&qword_201CC8);
  uint64_t v26 = sub_53D4(v25);
  __chkstk_darwin(v26);
  sub_E594();
  uint64_t v101 = v27;
  sub_A358();
  __chkstk_darwin(v28);
  sub_2073C();
  uint64_t v100 = v29;
  sub_A358();
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v100 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (char *)&v100 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v39 = (char *)&v100 - v38;
  __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v100 - v40;
  id v42 = [objc_allocWithZone((Class)sub_1AC5D0()) init];
  unint64_t v43 = sub_2F2B8(a1);
  id v111 = v42;
  sub_1597E4(v43, v44, v42);
  uint64_t v46 = a2[3];
  uint64_t v45 = a2[4];
  sub_2E38(a2, v46);
  (*(void (**)(uint64_t, uint64_t))(v45 + 32))(v46, v45);
  sub_159240((uint64_t)v39, a1, (uint64_t)v41);
  sub_24ED0((uint64_t)v39, &qword_201CC8);
  if (a1 - 89 <= 0x3E
    && ((1 << (a1 - 89)) & 0x6400000000000113) != 0
    || a1 - 155 <= 0x1D && ((1 << (a1 + 101)) & 0x20040001) != 0)
  {
    sub_26EFC((uint64_t)v41, (uint64_t)v36, &qword_201CC8);
    sub_1AAA10();
    sub_1598AC((uint64_t)v36);
    uint64_t v107 = v41;
    if (v56)
    {
      sub_24ED0((uint64_t)v36, &qword_201CC8);
      uint64_t v50 = (uint64_t)v109;
      sub_55948();
      uint64_t v52 = v112;
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v47, v48, v49, v112);
    }
    else
    {
      uint64_t v50 = (uint64_t)v109;
      sub_1AA9F0();
      sub_D7F74();
      sub_1598CC();
      v51();
      sub_47F14();
      uint64_t v52 = v112;
      sub_1599A0(v53, v54, v55);
      if (!v56)
      {
        uint64_t v59 = v113;
        (*(void (**)(char *, uint64_t, uint64_t))(v113 + 32))(v24, v50, v52);
        goto LABEL_11;
      }
    }
    sub_1AABC0();
    sub_1AAD00();
    sub_1AACA0();
    uint64_t v57 = sub_15998C();
    v58(v57);
    uint64_t v59 = v113;
    (*(void (**)(char *, uint64_t))(v113 + 8))(v22, v52);
    sub_24ED0(v50, &qword_201E10);
LABEL_11:
    uint64_t v60 = v111;
    Class isa = sub_1AAB60().super.isa;
    uint64_t v62 = *(void (**)(void))(v59 + 8);
    sub_47814();
    v62();
    [v60 setStart:isa];

    uint64_t v63 = (uint64_t)v107;
    sub_26EFC((uint64_t)v107, (uint64_t)v33, &qword_201CC8);
    sub_1598AC((uint64_t)v33);
    if (v56)
    {
      sub_24ED0((uint64_t)v33, &qword_201CC8);
      uint64_t v67 = v110;
      sub_55948();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v64, v65, v66, v52);
    }
    else
    {
      uint64_t v67 = v110;
      sub_1AA9C0();
      sub_D7F74();
      sub_1598CC();
      v68();
      sub_47F14();
      sub_1599A0(v69, v70, v71);
      if (!v72)
      {
        uint64_t v73 = v108;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 32))(v108, v67, v52);
LABEL_17:
        v74.super.Class isa = sub_1AAB60().super.isa;
        ((void (*)(uint64_t, uint64_t))v62)(v73, v52);
        goto LABEL_18;
      }
    }
    sub_1AABC0();
    uint64_t v73 = v108;
    sub_9F1D8(v108);
    sub_47814();
    v62();
    sub_24ED0(v67, &qword_201E10);
    goto LABEL_17;
  }
  uint64_t v63 = (uint64_t)v41;
  uint64_t v76 = v100;
  sub_26EFC((uint64_t)v41, v100, &qword_201CC8);
  sub_1AAA10();
  sub_1598AC(v76);
  if (v56)
  {
    sub_24ED0(v76, &qword_201CC8);
    sub_55948();
    uint64_t v84 = v112;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v77, v78, v79, v112);
    Class v80 = 0;
    uint64_t v60 = v111;
    uint64_t v81 = v103;
  }
  else
  {
    uint64_t v82 = v102;
    sub_1AA9F0();
    sub_D7F74();
    sub_1598CC();
    v83();
    sub_47F14();
    uint64_t v84 = v112;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v85, v86, v87, v112);
    int v88 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v82, 1, v84);
    uint64_t v60 = v111;
    uint64_t v89 = v113;
    uint64_t v81 = v103;
    if (v88 == 1)
    {
      Class v80 = 0;
    }
    else
    {
      Class v80 = sub_1AAB60().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v82, v84);
    }
  }
  [v60 setStart:v80];

  uint64_t v90 = v101;
  sub_26EFC(v63, v101, &qword_201CC8);
  sub_1598AC(v90);
  if (v56)
  {
    sub_24ED0(v90, &qword_201CC8);
    sub_55948();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v91, v92, v93, v84);
  }
  else
  {
    sub_1AA9C0();
    sub_D7F74();
    sub_1598CC();
    v94();
    sub_47F14();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v95, v96, v97, v84);
    int v98 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v81, 1, v84);
    if (v98 != 1)
    {
      v74.super.Class isa = sub_1AAB60().super.isa;
      sub_47814();
      v99();
      goto LABEL_18;
    }
  }
  v74.super.Class isa = 0;
LABEL_18:
  [v60 setEnd:v74.super.isa];

  sub_24ED0(v63, &qword_201CC8);
  return v60;
}

uint64_t sub_158438()
{
  sub_A364();
  v1[119] = v0;
  v1[118] = v2;
  v1[117] = v3;
  uint64_t v4 = sub_1AB0A0();
  v1[120] = v4;
  sub_A19C(v4);
  v1[121] = v5;
  v1[122] = sub_A220();
  v1[123] = swift_task_alloc();
  uint64_t v6 = sub_1AB3D0();
  v1[124] = v6;
  sub_A19C(v6);
  v1[125] = v7;
  v1[126] = sub_A42C();
  uint64_t v8 = sub_1AC800();
  v1[127] = v8;
  sub_A19C(v8);
  v1[128] = v9;
  v1[129] = sub_A220();
  v1[130] = swift_task_alloc();
  v1[131] = swift_task_alloc();
  v1[132] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_15855C()
{
  *(void *)(v0 + 704) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 712) = sub_45E30();
  *(unsigned char *)(v0 + 680) = 4;
  char v1 = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 680);
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 1064) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1586CC;
    return sub_C2754();
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 1072) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_158E94;
    return sub_5B6FC();
  }
}

uint64_t sub_1586CC()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_158794()
{
  uint64_t v61 = v0;
  uint64_t v1 = *(void *)(v0 + 1056);
  uint64_t v2 = *(void *)(v0 + 1024);
  uint64_t v3 = *(void *)(v0 + 1016);
  uint64_t v4 = (id *)(v0 + 936);
  uint64_t v5 = *(void **)(v0 + 936);
  uint64_t v6 = sub_1AC7D0();
  sub_A340();
  id v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  uint64_t v59 = v6;
  v58(v1, v6, v3);
  id v7 = v5;
  uint64_t v8 = sub_1AC7F0();
  os_log_type_t v9 = sub_1ACF50();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void **)(v0 + 936);
    uint64_t v11 = (uint8_t *)sub_A4B0();
    uint64_t v12 = (void *)sub_B7C18();
    *(_DWORD *)uint64_t v11 = 138412290;
    *(void *)(v0 + 928) = v10;
    id v13 = v10;
    sub_1ACFE0();
    void *v12 = v10;

    _os_log_impl(&def_342E4, v8, v9, "#GetHealthQuantityFlow: In successResponseFlow intent is %@", v11, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {

    uint64_t v8 = *v4;
  }
  uint64_t v14 = *(void *)(v0 + 1056);
  uint64_t v15 = *(void *)(v0 + 1024);
  uint64_t v16 = *(void *)(v0 + 1016);
  uint64_t v17 = *(void **)(v0 + 944);

  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v18(v14, v16);
  sub_A340();
  uint64_t v19 = sub_159940();
  v20(v19);
  id v21 = v17;
  uint64_t v22 = sub_1AC7F0();
  os_log_type_t v23 = sub_1ACF50();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v25 = *(void **)(v0 + 944);
  if (v24)
  {
    uint64_t v26 = (uint8_t *)sub_A4B0();
    uint64_t v53 = (void *)sub_B7C18();
    *(_DWORD *)uint64_t v26 = 138412290;
    *(void *)(v0 + 920) = v25;
    id v27 = v25;
    sub_1ACFE0();
    *uint64_t v53 = v25;

    _os_log_impl(&def_342E4, v22, v23, "#GetHealthQuantityFlow: In successResponseFlow intent response is %@", v26, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {

    uint64_t v22 = *(NSObject **)(v0 + 944);
  }
  uint64_t v28 = *(void *)(v0 + 1048);
  uint64_t v29 = *(void *)(v0 + 1016);
  uint64_t v30 = *(void *)(v0 + 952);

  v18(v28, v29);
  sub_A340();
  uint64_t v31 = sub_159940();
  v32(v31);
  uint64_t v54 = (char *)(v0 + 16);
  sub_1596A8(v30, v0 + 16);
  uint64_t v33 = sub_1AC7F0();
  os_log_type_t v34 = sub_1ACF50();
  BOOL v35 = sub_A3D0(v34);
  uint64_t v36 = *(void *)(v0 + 1040);
  uint64_t v37 = *(void *)(v0 + 1016);
  if (v35)
  {
    uint64_t v55 = *(void *)(v0 + 1040);
    uint64_t v38 = (uint8_t *)sub_A4B0();
    v60[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 136315138;
    unint64_t v39 = sub_2F2B8(*v54);
    *(void *)(v0 + 912) = sub_4A278(v39, v40, v60);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_1596E0((uint64_t)v54);
    _os_log_impl(&def_342E4, v33, (os_log_type_t)v29, "#GetHealthQuantityFlow: In successResponseFlow identifier is %s", v38, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    v18(v55, v37);
  }
  else
  {
    sub_1596E0((uint64_t)v54);

    v18(v36, v37);
  }
  char v56 = (long long *)(v0 + 720);
  uint64_t v57 = v0 + 600;
  sub_26EFC(v0 + 600, v0 + 720, &qword_202570);
  if (*(void *)(v0 + 744))
  {
    sub_24D80(v56, v0 + 760);
    sub_E3FC(v0 + 760, v0 + 640);
    uint64_t v41 = swift_allocObject();
    sub_24D80((long long *)(v0 + 640), v41 + 16);
    sub_1AB350();
    sub_1AAE40();
    swift_allocObject();
    *(void *)(v0 + 904) = sub_1AAE30();
    uint64_t v42 = sub_1AAF70();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 760);
    sub_24ED0(v57, &qword_202570);
    swift_release();
  }
  else
  {
    uint64_t v43 = *(void *)(v0 + 1032);
    uint64_t v44 = *(void *)(v0 + 1016);
    sub_24ED0((uint64_t)v56, &qword_202570);
    sub_A340();
    v58(v43, v59, v44);
    uint64_t v45 = sub_1AC7F0();
    os_log_type_t v46 = sub_1ACF60();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl(&def_342E4, v45, v46, "#GetHealthQuantityFlow: Invalid responseOutput, triggering error response", v47, 2u);
      sub_A1F0();
    }
    uint64_t v48 = *(void *)(v0 + 1032);
    uint64_t v49 = *(void *)(v0 + 1016);
    uint64_t v50 = *(void *)(v0 + 952);

    v18(v48, v49);
    sub_1AC340();
    sub_9B48(v50 + 88, v0 + 280);
    sub_9BA4();
    uint64_t v42 = sub_1AAF70();
    sub_9BF0(v0 + 280);
    sub_24ED0(v57, &qword_202570);
  }
  sub_1598DC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v51 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v51(v42);
}

uint64_t sub_158E94()
{
  sub_A364();
  sub_A1B4();
  *(void *)(v1 + 1080) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_158F68()
{
  uint64_t v1 = (void *)v0[135];
  if (v1)
  {
    uint64_t v2 = v0[126];
    uint64_t v3 = v0[125];
    uint64_t v14 = v0[124];
    uint64_t v4 = v0[123];
    uint64_t v5 = v0[122];
    uint64_t v6 = v0[121];
    uint64_t v7 = v0[120];
    uint64_t v8 = v0[119];
    sub_1AB070();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v7);
    sub_1AB370();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v7);
    id v9 = [v1 patternId];
    sub_1ACDD0();

    sub_1AB380();
    sub_2E38((void *)(v8 + 88), *(void *)(v8 + 112));
    v0[112] = sub_1AAF40();
    sub_1AAEF0();
    uint64_t v10 = sub_1AAF70();

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v14);
    swift_release();
  }
  else
  {
    uint64_t v11 = v0[119] + 88;
    sub_1AC340();
    sub_9B48(v11, (uint64_t)(v0 + 55));
    sub_9BA4();
    uint64_t v10 = sub_1AAF70();
    sub_9BF0((uint64_t)(v0 + 55));
  }
  sub_1598DC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(uint64_t))v0[1];
  return v12(v10);
}

uint64_t sub_1591A8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24C20;
  return sub_156A74();
}

uint64_t sub_159240@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v42 = a2;
  uint64_t v43 = (char *)a3;
  sub_1AAD30();
  sub_52C4();
  uint64_t v40 = v5;
  uint64_t v41 = v4;
  __chkstk_darwin(v4);
  sub_53E0();
  v38[2] = v6;
  sub_1AABD0();
  sub_52C4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_E594();
  uint64_t v39 = v10;
  sub_A358();
  __chkstk_darwin(v11);
  sub_2073C();
  v38[1] = v12;
  sub_A358();
  uint64_t v14 = __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  uint64_t v15 = sub_2694(&qword_201CC8);
  uint64_t v16 = sub_53D4(v15);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1AAA10();
  sub_52C4();
  uint64_t v21 = v20;
  __chkstk_darwin(v22);
  BOOL v24 = (char *)v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_26EFC(a1, (uint64_t)v18, &qword_201CC8);
  sub_1598AC((uint64_t)v18);
  if (v25)
  {
    sub_24ED0((uint64_t)v18, &qword_201CC8);
    return sub_26EFC(a1, (uint64_t)v43, &qword_201CC8);
  }
  v38[0] = v21;
  id v27 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v27(v24, v18, v19);
  sub_1AA9C0();
  sub_1AAB40();
  double v29 = v28;
  uint64_t v30 = *(void (**)(void))(v8 + 8);
  sub_5B574();
  v30();
  sub_1AA9F0();
  sub_1AAB40();
  double v32 = v31;
  sub_5B574();
  v30();
  double v33 = v29 - v32;
  if (v42 != 103 && v42 != 174 && v42 != 159)
  {
    if (v33 < 86399.0)
    {
      sub_1AA9F0();
      sub_1AAD00();
      sub_1AACA0();
      uint64_t v35 = sub_15998C();
      v36(v35);
      sub_5B574();
      v30();
      sub_1AA9F0();
      sub_9F1D8(v39);
      sub_5B574();
      v30();
      uint64_t v34 = (uint64_t)v43;
      sub_1AA9D0();
      goto LABEL_11;
    }
LABEL_12:
    uint64_t v34 = (uint64_t)v43;
    v27(v43, v24, v19);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v34, 0, 1, v19);
  }
  if (v33 >= 3599.0) {
    goto LABEL_12;
  }
  sub_1AA9F0();
  uint64_t v34 = (uint64_t)v43;
  sub_1AA9E0();
LABEL_11:
  sub_1598CC();
  v37();
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v34, 0, 1, v19);
}

unint64_t sub_1595F0()
{
  unint64_t result = qword_201DF0;
  if (!qword_201DF0)
  {
    type metadata accessor for UnavailableDataFlow();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_201DF0);
  }
  return result;
}

uint64_t sub_159640(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_201CC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1596A8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1596E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_159710()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_159748()
{
  sub_A364();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_24C20;
  return sub_24B08(v3, v0 + 16);
}

void sub_1597E4(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = sub_1ACDC0();
  swift_bridgeObjectRelease();
  [a3 setQuantityIdentifier:v4];
}

uint64_t sub_159848()
{
  return swift_task_dealloc();
}

uint64_t sub_1598AC(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v1);
}

uint64_t sub_1598DC()
{
  return swift_task_dealloc();
}

uint64_t sub_159908()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, v0);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v0);
}

uint64_t sub_159940()
{
  return v0;
}

uint64_t sub_15995C()
{
  return v0;
}

uint64_t sub_159974()
{
  return v0;
}

uint64_t sub_15998C()
{
  return v0;
}

uint64_t sub_1599A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, a3, v4);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v3, 1, v4);
}

uint64_t sub_1599CC()
{
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  uint64_t v1 = v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin12WellnessTime7Builder_calendarIdentifier;
  uint64_t v2 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, v2);
  return v0;
}

uint64_t sub_159A1C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  swift_retain();
  swift_release();

  return swift_retain();
}

uint64_t sub_159A60(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  swift_retain();
  swift_release();

  return swift_retain();
}

uint64_t sub_159AA4(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  swift_retain();
  swift_release();

  return swift_retain();
}

uint64_t sub_159AE8(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  swift_retain();
  swift_release();

  return swift_retain();
}

uint64_t sub_159B2C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_74610(v0 + OBJC_IVAR____TtCC18WellnessFlowPlugin12WellnessTime7Builder_calendarIdentifier);
  return v0;
}

uint64_t sub_159B74()
{
  return sub_15A5DC((void (*)(void))sub_159B2C);
}

uint64_t sub_159B8C()
{
  return 0x7373656E6C6C6577;
}

void *sub_159BB0(void *a1)
{
  uint64_t v3 = sub_2694(&qword_201E28);
  __chkstk_darwin(v3 - 8);
  sub_E548();
  uint64_t v6 = v5 - v4;
  v1[2] = 0;
  v1[3] = a1[2];
  v1[4] = a1[3];
  v1[5] = a1[4];
  v1[6] = a1[5];
  sub_A14A8((uint64_t)a1 + OBJC_IVAR____TtCC18WellnessFlowPlugin12WellnessTime7Builder_calendarIdentifier, v5 - v4);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  sub_A1510(v6, (uint64_t)v1 + OBJC_IVAR____TtC18WellnessFlowPlugin12WellnessTime_calendarIdentifier);
  return v1;
}

void sub_159CA4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_2694(&qword_201E28);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v28 - v11;
  if (a1 != 0xD000000000000014 || (sub_15B194(), !v17))
  {
    if ((sub_731C0() & 1) == 0)
    {
      if (a1 == 0xD000000000000012 && (sub_15B194(), v17) || (sub_731C0() & 1) != 0)
      {
        uint64_t v13 = v3[4];
        if (v13) {
          goto LABEL_5;
        }
      }
      else if (a1 == 0xD000000000000015 && (sub_15B194(), v17) || (sub_731C0() & 1) != 0)
      {
        uint64_t v13 = v3[5];
        if (v13) {
          goto LABEL_5;
        }
      }
      else
      {
        if (a1 != 0xD000000000000013 || (sub_15B194(), !v17))
        {
          if ((sub_731C0() & 1) == 0)
          {
            if (a1 == 0xD000000000000012 && (sub_15B194(), v17) || (sub_731C0() & 1) != 0)
            {
              sub_A14A8((uint64_t)v3 + OBJC_IVAR____TtC18WellnessFlowPlugin12WellnessTime_calendarIdentifier, (uint64_t)v12);
              uint64_t v14 = sub_1AC1E0();
              if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v12, 1, v14) != 1)
              {
                *(void *)(a3 + 24) = v14;
                uint64_t v16 = sub_B5B0((uint64_t *)a3);
                (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v16, v12, v14);
                return;
              }
              uint64_t v15 = (uint64_t)v12;
            }
            else
            {
              BOOL v17 = a1 == 0x53736574756E696DLL && a2 == 0xEF776F4E65636E69;
              if (v17 || (sub_731C0() & 1) != 0)
              {
                uint64_t v18 = sub_199804();
                if ((v19 & 1) == 0)
                {
                  *(void *)(a3 + 24) = &type metadata for Double;
                  *(void *)a3 = v18;
                  return;
                }
                goto LABEL_12;
              }
              BOOL v20 = a1 == 0x6D617266656D6974 && a2 == 0xE900000000000065;
              if (!v20 && (sub_731C0() & 1) == 0)
              {
                if (a1 == 0xD000000000000013 && (sub_15B194(), v17) || (sub_731C0() & 1) != 0)
                {
                  sub_1998BC();
                }
                else if (a1 == 0xD000000000000013 && (sub_15B194(), v17) || (sub_731C0() & 1) != 0)
                {
                  sub_199AA4();
                }
                else if (a1 == 0xD000000000000014 && (sub_15B194(), v17) || (sub_731C0() & 1) != 0)
                {
                  sub_199EC8();
                }
                else if (a1 == 0xD000000000000014 && (sub_15B194(), v17) || (sub_731C0() & 1) != 0)
                {
                  sub_19A0B4();
                }
                else if (a1 == 0xD000000000000013 && (sub_15B194(), v17) || (sub_731C0() & 1) != 0)
                {
                  sub_19A4D0();
                }
                else if (a1 == 0xD000000000000013 && (sub_15B194(), v17) || (sub_731C0() & 1) != 0)
                {
                  sub_19A6BC();
                }
                else
                {
                  if (a1 == 0xD000000000000012 && (sub_15B194(), v17) || (sub_731C0() & 1) != 0)
                  {
                    BOOL v24 = sub_19C12C() < 3u;
                    *(void *)(a3 + 24) = &type metadata for Bool;
                    *(unsigned char *)a3 = v24;
                    return;
                  }
                  if (a1 != 0xD000000000000013 || (sub_15B194(), !v17))
                  {
                    if ((sub_731C0() & 1) == 0)
                    {
                      BOOL v25 = a1 == 0x636E6953656D6974 && a2 == 0xEC000000776F4E65;
                      if (v25 || (sub_731C0() & 1) != 0)
                      {
                        uint64_t v26 = sub_19AAA0();
                        if (v26)
                        {
                          uint64_t v27 = v26;
                          *(void *)(a3 + 24) = sub_1AC160();
                          *(void *)a3 = v27;
                          return;
                        }
                      }
                      goto LABEL_12;
                    }
                  }
                  char v23 = sub_1997D0();
                }
                *(void *)(a3 + 24) = &type metadata for Bool;
                *(unsigned char *)a3 = v23 & 1;
                return;
              }
              sub_199840((uint64_t)v10);
              uint64_t v21 = sub_1AC1E0();
              if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1, v21) != 1)
              {
                *(void *)(a3 + 24) = v21;
                uint64_t v22 = sub_B5B0((uint64_t *)a3);
                (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v22, v10, v21);
                return;
              }
              uint64_t v15 = (uint64_t)v10;
            }
            sub_74610(v15);
            goto LABEL_12;
          }
        }
        uint64_t v13 = v3[6];
        if (v13) {
          goto LABEL_5;
        }
      }
LABEL_12:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return;
    }
  }
  uint64_t v13 = v3[3];
  if (!v13) {
    goto LABEL_12;
  }
LABEL_5:
  *(void *)(a3 + 24) = sub_1AC100();
  *(void *)a3 = v13;

  swift_retain();
}

uint64_t sub_15A2A8(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1F4928;
  v6._object = a2;
  unint64_t v4 = sub_1AD190(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 5) {
    return 5;
  }
  else {
    return v4;
  }
}

uint64_t sub_15A2F8()
{
  return 5;
}

void sub_15A300(char a1)
{
  switch(a1)
  {
    case 2:
    case 3:
      sub_508B4();
      break;
    default:
      return;
  }
}

void sub_15A3A0(char a1)
{
  switch(a1)
  {
    case 2:
    case 3:
      sub_508B4();
      break;
    default:
      return;
  }
}

uint64_t sub_15A440(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1543F8(*a1, *a2);
}

Swift::Int sub_15A44C()
{
  return sub_30324(*v0);
}

uint64_t sub_15A454(uint64_t a1)
{
  return sub_19D7EC(a1, *v1);
}

Swift::Int sub_15A45C(uint64_t a1)
{
  return sub_19D910(a1, *v1);
}

uint64_t sub_15A464@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_15A2A8(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_15A494(void *a1@<X8>)
{
  sub_15A300(*v1);
  *a1 = v3;
  a1[1] = v4;
}

void sub_15A4C0()
{
  sub_15A3A0(*v0);
}

uint64_t sub_15A4C8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_15A2F4();
  *a1 = result;
  return result;
}

void sub_15A4F0(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_15A4FC(uint64_t a1)
{
  unint64_t v2 = sub_15AF54();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_15A538(uint64_t a1)
{
  unint64_t v2 = sub_15AF54();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_15A574()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_74610(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin12WellnessTime_calendarIdentifier);
  return v0;
}

uint64_t sub_15A5C4()
{
  return sub_15A5DC((void (*)(void))sub_15A574);
}

uint64_t sub_15A5DC(void (*a1)(void))
{
  a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return _swift_deallocClassInstance(v1, v2, v3);
}

uint64_t sub_15A638()
{
  return type metadata accessor for WellnessTime(0);
}

uint64_t type metadata accessor for WellnessTime(uint64_t a1)
{
  return sub_95FB8(a1, qword_207C48);
}

void sub_15A660()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_15A704(void *a1)
{
  uint64_t v3 = sub_2694(&qword_207F00);
  sub_52C4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_E548();
  uint64_t v9 = v8 - v7;
  sub_2E38(a1, a1[3]);
  sub_15AF54();
  sub_1AD3B0();
  sub_1AC100();
  sub_15AF0C(&qword_206430, (void (*)(uint64_t))&type metadata accessor for DialogCalendar);
  sub_15B1A4();
  if (!v1)
  {
    sub_15B1A4();
    sub_15B1A4();
    sub_15B1A4();
    sub_1AC1E0();
    sub_15AF0C(&qword_202BC8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    sub_1AD270();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

uint64_t sub_15A914(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_15AA2C(a1);
  return v2;
}

uint64_t sub_15A964()
{
  return type metadata accessor for WellnessTime.Builder(0);
}

uint64_t type metadata accessor for WellnessTime.Builder(uint64_t a1)
{
  return sub_95FB8(a1, qword_207D68);
}

void sub_15A98C()
{
  sub_88EB8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_15AA2C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2694(&qword_201E28);
  __chkstk_darwin(v5 - 8);
  sub_E548();
  uint64_t v8 = v7 - v6;
  sub_2694(&qword_207EF0);
  sub_52C4();
  __chkstk_darwin(v9);
  sub_E548();
  *(void *)(v3 + 16) = 0;
  sub_2E38(a1, a1[3]);
  sub_15AF54();
  sub_1AD3A0();
  if (v2)
  {

    type metadata accessor for WellnessTime(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_1AC100();
    sub_15AF0C(&qword_206440, (void (*)(uint64_t))&type metadata accessor for DialogCalendar);
    sub_15B1E8();
    *(void *)(v3 + 24) = v13;
    sub_15B1E8();
    *(void *)(v3 + 32) = v13;
    sub_1AD1E0();
    *(void *)(v3 + 40) = v13;
    sub_15B1E8();
    *(void *)(v3 + 48) = v13;
    sub_1AC1E0();
    sub_15AF0C(&qword_202BE8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    sub_1AD1E0();
    uint64_t v11 = sub_15B1D0();
    v12(v11);
    sub_A1510(v8, v3 + OBJC_IVAR____TtC18WellnessFlowPlugin12WellnessTime_calendarIdentifier);
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t sub_15ADF0()
{
  return sub_159B8C();
}

void sub_15AE08(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_15AE2C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_15A914(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_15AE58(void *a1)
{
  return sub_15A704(a1);
}

uint64_t sub_15AE7C()
{
  return sub_15AF0C(&qword_207EE0, (void (*)(uint64_t))type metadata accessor for WellnessTime);
}

uint64_t sub_15AEC4()
{
  return sub_15AF0C(&qword_207EE8, (void (*)(uint64_t))type metadata accessor for WellnessTime);
}

uint64_t sub_15AF0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_15AF54()
{
  unint64_t result = qword_207EF8;
  if (!qword_207EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_207EF8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for WellnessTime.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x15B06CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WellnessTime.CodingKeys()
{
  return &type metadata for WellnessTime.CodingKeys;
}

unint64_t sub_15B0A8()
{
  unint64_t result = qword_207F08;
  if (!qword_207F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_207F08);
  }
  return result;
}

unint64_t sub_15B0F8()
{
  unint64_t result = qword_207F10;
  if (!qword_207F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_207F10);
  }
  return result;
}

unint64_t sub_15B148()
{
  unint64_t result = qword_207F18[0];
  if (!qword_207F18[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_207F18);
  }
  return result;
}

uint64_t sub_15B1A4()
{
  return sub_1AD270();
}

uint64_t sub_15B1D0()
{
  return v0;
}

uint64_t sub_15B1E8()
{
  return sub_1AD1E0();
}

ValueMetadata *type metadata accessor for RegionNotSupportedForMedsFlow()
{
  return &type metadata for RegionNotSupportedForMedsFlow;
}

uint64_t sub_15B228()
{
  sub_B6A14();

  return sub_1AAF80();
}

uint64_t sub_15B27C()
{
  sub_A364();
  v1[147] = v0;
  v1[146] = v2;
  uint64_t v3 = sub_1AC800();
  v1[148] = v3;
  sub_A19C(v3);
  v1[149] = v4;
  v1[150] = sub_A220();
  v1[151] = swift_task_alloc();
  v1[152] = swift_task_alloc();
  v1[153] = type metadata accessor for GenericButtonModel();
  v1[154] = swift_task_alloc();
  sub_2694(&qword_201E20);
  v1[155] = sub_A220();
  v1[156] = swift_task_alloc();
  uint64_t v5 = sub_1AAB10();
  v1[157] = v5;
  sub_A19C(v5);
  v1[158] = v6;
  v1[159] = sub_A220();
  v1[160] = swift_task_alloc();
  uint64_t v7 = sub_1AB0A0();
  v1[161] = v7;
  sub_A19C(v7);
  v1[162] = v8;
  v1[163] = sub_A220();
  v1[164] = swift_task_alloc();
  uint64_t v9 = sub_1AB3D0();
  v1[165] = v9;
  sub_A19C(v9);
  v1[166] = v10;
  v1[167] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_15B438()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 1344) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_15B4C8;
  return sub_4FA94();
}

uint64_t sub_15B4C8()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 1352) = v4;
  *(void *)(v2 + 1360) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_15B5AC()
{
  uint64_t v2 = v0[164];
  uint64_t v3 = v0[163];
  uint64_t v4 = v0[162];
  uint64_t v5 = v0[161];
  uint64_t v6 = (void *)v0[147];
  sub_1AB090();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  sub_1AB370();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v7 = (uint64_t *)(v4 + 8);
  v8(v2, v5);
  sub_2E38(v6, v6[3]);
  uint64_t v9 = sub_250B4();
  v10(v9);
  sub_2E38(v0 + 94, v0[97]);
  char v11 = sub_1AB040();
  sub_15C580((uint64_t)v6, (uint64_t)(v0 + 2));
  if (v11)
  {
    sub_15C5B8((uint64_t)(v0 + 2));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 94));
LABEL_4:
    uint64_t v15 = v0[157];
    uint64_t v16 = v0[156];
    uint64_t v17 = sub_C0D54(0x616548206E65704FLL, 0xEB0000000068746CLL, 0x6C6165486E65706FLL, (void *)0xED00007070416874);
    uint64_t v19 = v18;
    sub_1AAB00();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v16, 1, v15) == 1)
    {
      uint64_t v71 = (uint64_t)(v0 + 34);
      uint64_t v20 = v0[156];
      uint64_t v21 = (_WORD *)v0[152];
      swift_bridgeObjectRelease();
      sub_55D28(v20);
      sub_1AC7D0();
      sub_15C878();
      uint64_t v22 = sub_15C844();
      v23(v22);
      BOOL v24 = (void *)sub_1AC7F0();
      os_log_type_t v25 = sub_1ACF50();
      if (sub_470C8(v25))
      {
        uint64_t v21 = (_WORD *)swift_slowAlloc();
        *uint64_t v21 = 0;
        sub_471F8(&def_342E4, v26, v27, "Couldn't create URL for Phone or iPad Medications");
        sub_D2AEC();
      }
      sub_15C860();
      uint64_t v28 = v0[152];
LABEL_13:
      uint64_t v55 = v0[149];
      uint64_t v56 = v0[148];
      uint64_t v57 = v0[147];

      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v28, v56);
      sub_9B48(v57 + 40, v71);
      sub_9BA4();
      sub_1AB120();

      sub_9BF0(v71);
      (*(void (**)(uint64_t, _WORD *))(v1 + 8))(v70, v21);
      sub_15C79C();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_E564();
      return v58();
    }
    char v72 = v0 + 119;
    double v29 = (void *)v0[169];
    uint64_t v30 = sub_15C7CC();
    v31(v30);
    uint64_t v32 = sub_15C824();
    v33(v32);
    *uint64_t v7 = v17;
    v7[1] = v19;
    uint64_t v34 = v29;
    id v35 = [v29 catId];
    uint64_t v36 = sub_1ACDD0();

    sub_1AB380();
    v0[132] = sub_15C8F0();
    v0[133] = sub_24F2C();
    uint64_t v37 = v0 + 129;
    uint64_t v38 = sub_B5B0(v0 + 129);
    sub_24F7C((uint64_t)v7, (uint64_t)v38);
    swift_storeEnumTagMultiPayload();
    sub_2694(&qword_202588);
    uint64_t v39 = (__n128 *)swift_allocObject();
    sub_15C8BC(v39, (__n128)xmmword_1AF530);
    uint64_t v40 = v73;
    v0[171] = v73;
    id v41 = v34;
    int v42 = (void *)swift_task_alloc();
    v0[172] = v42;
    *int v42 = v0;
    uint64_t v43 = sub_15BD54;
    goto LABEL_17;
  }
  sub_2E38(v0 + 2, v0[5]);
  uint64_t v12 = sub_250B4();
  v13(v12);
  sub_2E38(v0 + 99, v0[102]);
  char v14 = sub_1AB030();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 99));
  sub_15C5B8((uint64_t)(v0 + 2));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 94));
  if (v14) {
    goto LABEL_4;
  }
  uint64_t v44 = v0[157];
  uint64_t v45 = v0[155];
  uint64_t v46 = sub_C0D54(0xD000000000000010, 0x80000000001BB6A0, 0xD000000000000012, (void *)0x80000000001BB6C0);
  uint64_t v48 = v47;
  sub_1AAB00();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v45, 1, v44) == 1)
  {
    uint64_t v71 = (uint64_t)(v0 + 74);
    uint64_t v49 = v0[155];
    uint64_t v21 = (_WORD *)v0[151];
    swift_bridgeObjectRelease();
    sub_55D28(v49);
    sub_1AC7D0();
    sub_15C878();
    uint64_t v50 = sub_15C844();
    v51(v50);
    BOOL v24 = (void *)sub_1AC7F0();
    os_log_type_t v52 = sub_1ACF50();
    if (sub_470C8(v52))
    {
      uint64_t v21 = (_WORD *)swift_slowAlloc();
      *uint64_t v21 = 0;
      sub_471F8(&def_342E4, v53, v54, "Couldn't create URL for Watch Medications");
      sub_D2AEC();
    }
    sub_15C860();
    uint64_t v28 = v0[151];
    goto LABEL_13;
  }
  char v72 = v0 + 114;
  uint64_t v60 = (void *)v0[169];
  uint64_t v61 = sub_15C7CC();
  v62(v61);
  uint64_t v63 = sub_15C824();
  v64(v63);
  *uint64_t v7 = v46;
  v7[1] = v48;
  uint64_t v65 = v60;
  id v35 = [v60 catId];
  uint64_t v36 = sub_1ACDD0();

  sub_1AB380();
  v0[107] = sub_15C8F0();
  v0[108] = sub_24F2C();
  uint64_t v37 = v0 + 104;
  uint64_t v66 = sub_B5B0(v0 + 104);
  sub_24F7C((uint64_t)v7, (uint64_t)v66);
  swift_storeEnumTagMultiPayload();
  sub_2694(&qword_202588);
  uint64_t v67 = (__n128 *)swift_allocObject();
  sub_15C8BC(v67, (__n128)xmmword_1AF530);
  uint64_t v40 = v73;
  v0[173] = v73;
  id v68 = v65;
  int v42 = (void *)swift_task_alloc();
  v0[174] = v42;
  *int v42 = v0;
  uint64_t v43 = sub_15BFD4;
LABEL_17:
  v42[1] = v43;
  uint64_t v69 = v0[167];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v72, v37, v40, v69, v35, v36);
}

uint64_t sub_15BD54()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 1032;
  uint64_t v4 = *v0;
  sub_A304();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_15BE3C()
{
  uint64_t v1 = *(void **)(v0 + 1352);
  sub_15C8DC();
  sub_15C7F4();
  uint64_t v2 = swift_allocObject();
  sub_24D80((long long *)(v0 + 872), v2 + 16);
  sub_1AB350();
  sub_1AAE40();
  swift_allocObject();
  *(void *)(v0 + 1160) = sub_1AAE30();
  sub_1AB120();

  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 952);
  uint64_t v3 = sub_24FE0(v27);
  uint64_t v11 = sub_15C8A8(v3, v4, v5, v6, v7, v8, v9, v10, v25, v27, v29, v31);
  uint64_t v13 = v12(v11);
  uint64_t v21 = sub_15C894(v13, v14, v15, v16, v17, v18, v19, v20, v26, v28, v30, v32, v33, v34);
  v22(v21);
  sub_15C75C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v23();
}

uint64_t sub_15BFD4()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 832;
  uint64_t v4 = *v0;
  sub_A304();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_15C0BC()
{
  uint64_t v1 = *(void **)(v0 + 1352);
  sub_15C8DC();
  sub_15C7F4();
  uint64_t v2 = swift_allocObject();
  sub_24D80((long long *)(v0 + 992), v2 + 16);
  sub_1AB350();
  sub_1AAE40();
  swift_allocObject();
  *(void *)(v0 + 1144) = sub_1AAE30();
  sub_1AB120();

  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 912);
  uint64_t v3 = sub_24FE0(v27);
  uint64_t v11 = sub_15C8A8(v3, v4, v5, v6, v7, v8, v9, v10, v25, v27, v29, v31);
  uint64_t v13 = v12(v11);
  uint64_t v21 = sub_15C894(v13, v14, v15, v16, v17, v18, v19, v20, v26, v28, v30, v32, v33, v34);
  v22(v21);
  sub_15C75C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v23();
}

uint64_t sub_15C254()
{
  uint64_t v1 = v0[150];
  uint64_t v2 = v0[149];
  uint64_t v3 = v0[148];
  uint64_t v4 = sub_1AC7D0();
  sub_15C878();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF60();
  if (sub_470C8(v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[144] = v9;
    sub_1ACFE0();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_342E4, v5, (os_log_type_t)v1, "Couldn't execute wellness#regionNotSupportedForMeds pattern. Error: %@", v7, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_D2AEC();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = v0[150];
  uint64_t v11 = v0[149];
  uint64_t v12 = v0[148];
  uint64_t v13 = v0[147];

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  sub_9B48(v13 + 40, (uint64_t)(v0 + 54));
  sub_9BA4();
  sub_1AB120();
  swift_errorRelease();
  sub_9BF0((uint64_t)(v0 + 54));
  sub_15C79C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v14();
}

uint64_t sub_15C4E8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24C20;
  return sub_15B27C();
}

uint64_t sub_15C580(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_15C5B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_15C5E8()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_15C620()
{
  sub_A364();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_24C20;
  return sub_24B08(v3, v0 + 16);
}

uint64_t sub_15C6BC()
{
  sub_A364();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_7F384;
  return sub_C00A4(v3, v0 + 16);
}

uint64_t sub_15C75C()
{
  return swift_task_dealloc();
}

uint64_t sub_15C79C()
{
  return *(void *)(v0 + 1336);
}

uint64_t sub_15C7CC()
{
  return v0;
}

uint64_t sub_15C7F4()
{
  return sub_E3FC(v1, v0);
}

uint64_t sub_15C824()
{
  return v1 + *(int *)(v0 + 20);
}

uint64_t sub_15C844()
{
  return v0;
}

uint64_t sub_15C878()
{
  return swift_beginAccess();
}

uint64_t sub_15C894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return a14;
}

uint64_t sub_15C8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return a12;
}

uint64_t sub_15C8BC(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return sub_1ACEF0();
}

uint64_t sub_15C8F0()
{
  sub_2E38((void *)(v0 + 200), *(void *)(v0 + 224));
  return type metadata accessor for WellnessSnippets();
}

uint64_t sub_15C928(void *a1, uint64_t a2)
{
  uint64_t v91 = a2;
  uint64_t v4 = sub_2694(&qword_201E28);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v89 - v9;
  __chkstk_darwin(v8);
  sub_15D5D0();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v89 - v13;
  __chkstk_darwin(v12);
  uint64_t v90 = (char *)&v89 - v15;
  sub_A358();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v89 - v17;
  sub_A358();
  __chkstk_darwin(v19);
  uint64_t v93 = (char *)&v89 - v20;
  sub_A358();
  __chkstk_darwin(v21);
  uint64_t v89 = (char *)&v89 - v22;
  sub_A358();
  __chkstk_darwin(v23);
  sub_2073C();
  uint64_t v92 = v24;
  sub_A358();
  __chkstk_darwin(v25);
  sub_2073C();
  uint64_t v27 = v26;
  sub_A358();
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v89 - v29;
  uint64_t v31 = sub_12DE04(a1);
  if (v32)
  {
    uint64_t v33 = v31;
    uint64_t v34 = v32;
    sub_15D4B0(a1);
    if (v35)
    {
      uint64_t v36 = v27;
      sub_1ACE40();
      swift_bridgeObjectRelease();
      sub_1AC1E0();
      sub_15D5C4();
      uint64_t v39 = (uint64_t)v18;
    }
    else
    {
      sub_1AC1E0();
      sub_15D5B8();
      uint64_t v39 = (uint64_t)v18;
      uint64_t v36 = v27;
    }
    uint64_t v46 = 1;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v36, v37, 1, v38);
    uint64_t v94 = v33;
    uint64_t v95 = v34;
    swift_bridgeObjectRetain();
    sub_15D544();
    swift_bridgeObjectRelease();
    uint64_t v47 = (uint64_t)v89;
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v48 = sub_1AC1E0();
    sub_CD110(v47);
    sub_12DE10(a1);
    uint64_t v49 = (uint64_t)v93;
    uint64_t v51 = (uint64_t)v92;
    if (v50)
    {
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v46 = 0;
    }
    uint64_t v52 = 1;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v51, v46, 1, v48);
    sub_12DE1C(a1);
    if (v53)
    {
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v52 = 0;
    }
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v49, v52, 1, v48);
    id v54 = [a1 strength];
    uint64_t v55 = v54;
    if (v54)
    {
      [v54 doubleValue];
      uint64_t v57 = v56;

      uint64_t v58 = v57;
    }
    else
    {
      uint64_t v58 = 0;
    }
    sub_12DE28(a1);
    if (v59)
    {
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v60 = 0;
    }
    else
    {
      uint64_t v60 = 1;
    }
    sub_15D514(v39, v60);
    uint64_t v62 = v61;
    uint64_t v63 = (uint64_t)v90;
    sub_15D5A0();
    v64();
    sub_CD110(v63);
    uint64_t v65 = v36;
    uint64_t v66 = v47;
    uint64_t v67 = (uint64_t)v92;
    uint64_t v68 = (uint64_t)v93;
    uint64_t v69 = v58;
    BOOL v70 = v55 == 0;
    uint64_t v71 = v39;
    uint64_t v72 = v63;
  }
  else
  {
    uint64_t v89 = v30;
    uint64_t v92 = v14;
    uint64_t v93 = v10;
    sub_15D4B0(a1);
    if (v40)
    {
      uint64_t v41 = (uint64_t)v89;
      sub_1ACE40();
      swift_bridgeObjectRelease();
      sub_1AC1E0();
      sub_15D5C4();
      uint64_t v39 = (uint64_t)v92;
      uint64_t v44 = (uint64_t)v93;
      uint64_t v45 = (uint64_t)v7;
    }
    else
    {
      sub_1AC1E0();
      sub_15D5B8();
      uint64_t v39 = (uint64_t)v92;
      uint64_t v44 = (uint64_t)v93;
      uint64_t v45 = (uint64_t)v7;
      uint64_t v41 = (uint64_t)v89;
    }
    uint64_t v73 = 1;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v41, v42, 1, v43);
    sub_15D574();
    uint64_t v48 = sub_1AC1E0();
    sub_CD110(v2);
    sub_12DE10(a1);
    if (v74)
    {
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v73 = 0;
    }
    uint64_t v75 = 1;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v39, v73, 1, v48);
    sub_12DE1C(a1);
    if (v76)
    {
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v75 = 0;
    }
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v44, v75, 1, v48);
    id v77 = [a1 strength];
    uint64_t v78 = v77;
    uint64_t v79 = (uint64_t)v90;
    if (v77)
    {
      [v77 doubleValue];
      uint64_t v81 = v80;

      uint64_t v82 = v81;
    }
    else
    {
      uint64_t v82 = 0;
    }
    sub_12DE28(a1);
    if (v83)
    {
      uint64_t v39 = v83;
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v84 = 0;
    }
    else
    {
      uint64_t v84 = 1;
    }
    sub_15D514(v45, v84);
    uint64_t v62 = v85;
    sub_15D5A0();
    v86();
    sub_CD110(v79);
    uint64_t v65 = (uint64_t)v89;
    uint64_t v66 = v2;
    uint64_t v67 = (uint64_t)v92;
    uint64_t v68 = (uint64_t)v93;
    uint64_t v69 = v82;
    BOOL v70 = v78 == 0;
    uint64_t v71 = v45;
    uint64_t v72 = v79;
  }
  uint64_t v87 = sub_9FE98(v65, v66, v67, v68, v69, v70, v71, v72);

  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v39, v48);
  return v87;
}

uint64_t sub_15CEE4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v90 = a3;
  uint64_t v89 = a2;
  uint64_t v5 = sub_2694(&qword_201E28);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v85 - v10;
  __chkstk_darwin(v9);
  sub_15D5D0();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v85 - v14;
  __chkstk_darwin(v13);
  int v88 = (char *)&v85 - v16;
  sub_A358();
  __chkstk_darwin(v17);
  sub_2073C();
  uint64_t v86 = v18;
  sub_A358();
  __chkstk_darwin(v19);
  uint64_t v91 = (char *)&v85 - v20;
  sub_A358();
  __chkstk_darwin(v21);
  uint64_t v87 = (char *)&v85 - v22;
  sub_A358();
  __chkstk_darwin(v23);
  sub_2073C();
  uint64_t v25 = v24;
  sub_A358();
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v85 - v27;
  sub_A358();
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v85 - v30;
  uint64_t v32 = sub_12DE04(a1);
  if (v33)
  {
    uint64_t v34 = v32;
    uint64_t v35 = v33;
    sub_15D4B0(a1);
    if (v36)
    {
      sub_1ACE40();
      swift_bridgeObjectRelease();
      sub_1AC1E0();
      sub_15D5C4();
    }
    else
    {
      sub_1AC1E0();
      sub_15D5B8();
    }
    uint64_t v46 = v86;
    uint64_t v47 = v25;
    uint64_t v48 = 1;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v28, v37, 1, v38);
    uint64_t v92 = v34;
    uint64_t v93 = v35;
    swift_bridgeObjectRetain();
    sub_15D544();
    swift_bridgeObjectRelease();
    uint64_t v49 = (uint64_t)v87;
    sub_1ACE40();
    swift_bridgeObjectRelease();
    sub_1AC1E0();
    sub_70490(v49, 0);
    sub_12DE10(a1);
    if (v50)
    {
      uint64_t v51 = v47;
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v48 = 0;
      uint64_t v52 = (uint64_t)v91;
    }
    else
    {
      uint64_t v52 = (uint64_t)v91;
      uint64_t v51 = v47;
    }
    uint64_t v53 = 1;
    sub_70490(v51, v48);
    sub_12DE1C(a1);
    if (v54)
    {
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v53 = 0;
    }
    sub_70490(v52, v53);
    id v55 = [a1 strength];
    uint64_t v56 = v55;
    if (v55)
    {
      [v55 doubleValue];
      uint64_t v58 = v57;

      uint64_t v59 = v58;
    }
    else
    {
      uint64_t v59 = 0;
    }
    sub_12DE28(a1);
    if (v60)
    {
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v61 = 0;
    }
    else
    {
      uint64_t v61 = 1;
    }
    sub_70490(v46, v61);
    uint64_t v62 = v46;
    uint64_t v63 = (uint64_t)v88;
    sub_1ACE40();
    swift_bridgeObjectRelease();
    sub_70490(v63, 0);
    uint64_t v64 = (uint64_t)v28;
    uint64_t v65 = v49;
    uint64_t v66 = v51;
    uint64_t v67 = (uint64_t)v91;
    uint64_t v68 = v59;
    BOOL v69 = v56 == 0;
    uint64_t v70 = v62;
  }
  else
  {
    uint64_t v91 = v31;
    uint64_t v39 = (uint64_t)v15;
    sub_15D4B0(a1);
    if (v40)
    {
      uint64_t v41 = (uint64_t)v91;
      sub_1ACE40();
      swift_bridgeObjectRelease();
      sub_1AC1E0();
      sub_15D5C4();
      uint64_t v44 = (uint64_t)v8;
      uint64_t v45 = (uint64_t)v11;
    }
    else
    {
      sub_1AC1E0();
      sub_15D5B8();
      uint64_t v44 = (uint64_t)v8;
      uint64_t v45 = (uint64_t)v11;
      uint64_t v41 = (uint64_t)v91;
    }
    uint64_t v71 = 1;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v41, v42, 1, v43);
    sub_15D574();
    uint64_t v72 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, 0, 1, v72);
    sub_12DE10(a1);
    if (v73)
    {
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v71 = 0;
    }
    uint64_t v74 = 1;
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v39, v71, 1, v72);
    sub_12DE1C(a1);
    if (v75)
    {
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v74 = 0;
    }
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v45, v74, 1, v72);
    id v76 = [a1 strength];
    id v77 = v76;
    if (v76)
    {
      [v76 doubleValue];
      uint64_t v79 = v78;

      uint64_t v80 = v79;
    }
    else
    {
      uint64_t v80 = 0;
    }
    sub_12DE28(a1);
    if (v81)
    {
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v82 = 0;
    }
    else
    {
      uint64_t v82 = 1;
    }
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v44, v82, 1, v72);
    uint64_t v63 = (uint64_t)v88;
    sub_1ACE40();
    swift_bridgeObjectRelease();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v63, 0, 1, v72);
    uint64_t v64 = (uint64_t)v91;
    uint64_t v65 = v3;
    uint64_t v66 = v39;
    uint64_t v67 = v45;
    uint64_t v68 = v80;
    BOOL v69 = v77 == 0;
    uint64_t v70 = v44;
  }
  uint64_t v83 = sub_9FE98(v64, v65, v66, v67, v68, v69, v70, v63);

  return v83;
}

uint64_t sub_15D4B0(void *a1)
{
  id v1 = [a1 name];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_1ACDD0();

  return v3;
}

uint64_t sub_15D514(uint64_t a1, uint64_t a2)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, a2, 1, v2);
}

void sub_15D544()
{
  v1._object = (void *)0xE900000000000065;
  v1._countAndFlagsBits = 0x6C75646568635320;
  sub_1ACE70(v1);
}

uint64_t sub_15D574()
{
  return sub_1ACE40();
}

uint64_t sub_15D5E4@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W3>, char a4@<W5>, char a5@<W7>, uint64_t a6@<X8>, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  BOOL v18 = (a2 & 1) == 0;
  BOOL v19 = (a3 & 1) == 0;
  BOOL v54 = (a4 & 1) == 0;
  BOOL v56 = (a5 & 1) == 0;
  uint64_t v20 = sub_2694(&qword_2022C8);
  uint64_t v21 = sub_53D4(v20);
  __chkstk_darwin(v21);
  sub_2F014();
  uint64_t v58 = sub_1AAD90();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a6, 1, 1, v58);
  Model = (int *)type metadata accessor for GenericQueryModel();
  uint64_t v23 = a6 + Model[10];
  uint64_t v51 = v23;
  uint64_t v24 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v23, 1, 1, v24);
  uint64_t v25 = (void *)(a6 + Model[11]);
  *uint64_t v25 = 0;
  v25[1] = 0;
  uint64_t v59 = (void *)(a6 + Model[12]);
  *uint64_t v59 = 0;
  v59[1] = 0;
  uint64_t v60 = (void *)(a6 + Model[13]);
  void *v60 = 0;
  v60[1] = 0;
  uint64_t v61 = (uint64_t *)(a6 + Model[14]);
  *uint64_t v61 = 0;
  v61[1] = 0;
  uint64_t v26 = (void *)(a6 + Model[15]);
  *uint64_t v26 = 0;
  v26[1] = 0;
  uint64_t v27 = (void *)(a6 + Model[17]);
  *uint64_t v27 = 0;
  v27[1] = 0;
  uint64_t v28 = a6 + Model[18];
  uint64_t v50 = v28;
  uint64_t v29 = type metadata accessor for SnippetHeaderModel();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v28, 1, 1, v29);
  if (v18 && (a1 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = a1;
  }
  uint64_t v31 = a6 + Model[5];
  *(void *)uint64_t v31 = v30;
  *(unsigned char *)(v31 + 8) = a2 & 1 | ((a1 & 0x7FFFFFFFFFFFFFFFLL) == 0);
  sub_10223C();
  if ((v19 & v32) != 0) {
    uint64_t v33 = 0;
  }
  uint64_t v34 = a6 + Model[6];
  *(void *)uint64_t v34 = v33;
  *(unsigned char *)(v34 + 8) = (a3 | v32) & 1;
  sub_10223C();
  if ((v54 & v35) != 0) {
    uint64_t v36 = 0;
  }
  uint64_t v37 = a6 + Model[7];
  *(void *)uint64_t v37 = v36;
  *(unsigned char *)(v37 + 8) = (a4 | v35) & 1;
  sub_10223C();
  if ((v56 & v38) != 0) {
    uint64_t v39 = 0;
  }
  uint64_t v40 = a6 + Model[8];
  *(void *)uint64_t v40 = v39;
  *(unsigned char *)(v40 + 8) = (a5 | v38) & 1;
  sub_10223C();
  if ((((a8 & 1) == 0) & v41) != 0) {
    uint64_t v42 = 0;
  }
  uint64_t v43 = Model[16];
  uint64_t v44 = a6 + Model[9];
  *(void *)uint64_t v44 = v42;
  *(unsigned char *)(v44 + 8) = (a8 | v41) & 1;
  uint64_t v45 = (void *)(a6 + v43);
  *uint64_t v45 = a9;
  v45[1] = a10;
  sub_2EEC4(a11, v51, &qword_201E28);
  sub_15E348(a12);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v15, 0, 1, v58);
  sub_2B7FC(v15, a6, &qword_2022C8);
  swift_bridgeObjectRelease();
  *uint64_t v27 = a13;
  v27[1] = a14;
  sub_2EEC4(a15, v50, &qword_2022D0);
  sub_15E510(*(void *)v44, *(unsigned char *)(v44 + 8));
  sub_102248();
  swift_bridgeObjectRelease();
  *uint64_t v26 = v27;
  v26[1] = v15;
  sub_15E510(*(void *)v31, *(unsigned char *)(v31 + 8));
  sub_102248();
  swift_bridgeObjectRelease();
  *uint64_t v25 = v27;
  v25[1] = v15;
  sub_15E510(*(void *)v34, *(unsigned char *)(v34 + 8));
  sub_102248();
  swift_bridgeObjectRelease();
  *uint64_t v59 = v27;
  v59[1] = v15;
  sub_15E510(*(void *)v37, *(unsigned char *)(v37 + 8));
  sub_102248();
  swift_bridgeObjectRelease();
  void *v60 = v27;
  v60[1] = v15;
  uint64_t v46 = sub_15E510(*(void *)v40, *(unsigned char *)(v40 + 8));
  uint64_t v48 = v47;
  sub_2EF0C(a15, &qword_2022D0);
  sub_2EF0C(a12, &qword_201E20);
  sub_2EF0C(a11, &qword_201E28);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v61 = v46;
  v61[1] = v48;
  return result;
}

uint64_t GenericQueryModel.averageValue.getter()
{
  uint64_t Model = type metadata accessor for GenericQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 20));
}

uint64_t type metadata accessor for GenericQueryModel()
{
  uint64_t result = qword_207FC8;
  if (!qword_207FC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void GenericQueryModel.averageValue.setter()
{
  uint64_t v0 = sub_161C38();
  sub_2EFC0(*(int *)(v0 + 20));
}

uint64_t (*GenericQueryModel.averageValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericQueryModel.maxValue.getter()
{
  uint64_t Model = type metadata accessor for GenericQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 24));
}

void GenericQueryModel.maxValue.setter()
{
  uint64_t v0 = sub_161C38();
  sub_2EFC0(*(int *)(v0 + 24));
}

uint64_t (*GenericQueryModel.maxValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericQueryModel.minValue.getter()
{
  uint64_t Model = type metadata accessor for GenericQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 28));
}

void GenericQueryModel.minValue.setter()
{
  uint64_t v0 = sub_161C38();
  sub_2EFC0(*(int *)(v0 + 28));
}

uint64_t (*GenericQueryModel.minValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericQueryModel.mostRecentValue.getter()
{
  uint64_t Model = type metadata accessor for GenericQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 32));
}

void GenericQueryModel.mostRecentValue.setter()
{
  uint64_t v0 = sub_161C38();
  sub_2EFC0(*(int *)(v0 + 32));
}

uint64_t (*GenericQueryModel.mostRecentValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericQueryModel.totalValue.getter()
{
  uint64_t Model = type metadata accessor for GenericQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 36));
}

void GenericQueryModel.totalValue.setter()
{
  uint64_t v0 = sub_161C38();
  sub_2EFC0(*(int *)(v0 + 36));
}

uint64_t (*GenericQueryModel.totalValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for GenericQueryModel();
  return sub_2EF60(v1 + *(int *)(Model + 40), a1, &qword_201E28);
}

uint64_t GenericQueryModel.dateLabel.setter()
{
  uint64_t v2 = sub_161C04();
  return sub_2B7FC(v0, v1 + *(int *)(v2 + 40), &qword_201E28);
}

uint64_t (*GenericQueryModel.dateLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericQueryModel.averageValueString.getter()
{
  return sub_22F80();
}

uint64_t GenericQueryModel.averageValueString.setter()
{
  sub_161C1C();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*GenericQueryModel.averageValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericQueryModel.maxValueString.getter()
{
  return sub_22F80();
}

uint64_t GenericQueryModel.maxValueString.setter()
{
  sub_161C1C();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*GenericQueryModel.maxValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericQueryModel.minValueString.getter()
{
  return sub_22F80();
}

uint64_t GenericQueryModel.minValueString.setter()
{
  sub_161C1C();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*GenericQueryModel.minValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericQueryModel.mostRecentValueString.getter()
{
  return sub_22F80();
}

uint64_t GenericQueryModel.mostRecentValueString.setter()
{
  sub_161C1C();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*GenericQueryModel.mostRecentValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericQueryModel.totalValueString.getter()
{
  return sub_22F80();
}

uint64_t GenericQueryModel.totalValueString.setter()
{
  sub_161C1C();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*GenericQueryModel.totalValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericQueryModel.unit.getter()
{
  return sub_22F80();
}

uint64_t GenericQueryModel.unit.setter()
{
  sub_161C1C();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*GenericQueryModel.unit.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericQueryModel.averageLabelString.getter()
{
  return sub_22F80();
}

uint64_t GenericQueryModel.averageLabelString.setter()
{
  sub_161C1C();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*GenericQueryModel.averageLabelString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t GenericQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for GenericQueryModel();
  return sub_2EF60(v1 + *(int *)(Model + 72), a1, &qword_2022D0);
}

uint64_t GenericQueryModel.snippetHeaderModel.setter()
{
  uint64_t v2 = sub_161C04();
  return sub_2B7FC(v0, v1 + *(int *)(v2 + 72), &qword_2022D0);
}

uint64_t (*GenericQueryModel.snippetHeaderModel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t sub_15E348(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201E20);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AAB10();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2EF60(a1, (uint64_t)v4, &qword_201E20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_2EF0C((uint64_t)v4, &qword_201E20);
    return sub_1AAD80();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_1AAAD0();
    sub_1AAD80();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_15E510(uint64_t a1, char a2)
{
  uint64_t v5 = sub_2694(&qword_2022D0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Model = type metadata accessor for GenericQueryModel();
  sub_2EF60(v2 + *(int *)(Model + 72), (uint64_t)v7, &qword_2022D0);
  uint64_t v9 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1, v9) == 1)
  {
    sub_2EF0C((uint64_t)v7, &qword_2022D0);
    return 0;
  }
  char v11 = a2 & 1;
  uint64_t v12 = &v7[*(int *)(v9 + 24)];
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  swift_bridgeObjectRetain();
  sub_160E24((uint64_t)v7, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  if (v14 == 0xD000000000000021 && v13 == 0x80000000001B9CA0
    || (sub_1AD2F0() & 1) != 0
    || v14 == 0xD000000000000029 && v13 == 0x80000000001B8B90
    || (sub_1AD2F0() & 1) != 0
    || v14 == 0xD00000000000002ALL && v13 == 0x80000000001B89F0
    || (sub_1AD2F0() & 1) != 0
    || v14 == 0xD000000000000029 && v13 == 0x80000000001B8A20)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = sub_1AD2F0();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      return sub_15E778(a1, v11);
    }
  }
  return sub_15E890(a1, v11);
}

uint64_t sub_15E778(uint64_t result, char a2)
{
  if (a2) {
    return 0;
  }
  uint64_t v2 = result;
  if (*(double *)&result <= 0.0) {
    return 0;
  }
  double v3 = trunc(*(double *)&result);
  if (*(double *)&result <= -9.22337204e18 || *(double *)&result >= 9.22337204e18 || v3 != *(double *)&result)
  {
    sub_2694(&qword_205890);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1ADCF0;
    *(void *)(v6 + 56) = &type metadata for Double;
    *(void *)(v6 + 64) = &protocol witness table for Double;
    *(void *)(v6 + 32) = v2;
    uint64_t v7 = sub_1ACDE0();
    swift_bridgeObjectRelease();
    return v7;
  }
  if ((~result & 0x7FF0000000000000) != 0) {
    return sub_1AD2C0();
  }
  __break(1u);
  return result;
}

uint64_t sub_15E890(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0 || *(double *)&a1 <= 0.0) {
    return 0;
  }
  id v3 = [objc_allocWithZone((Class)NSNumberFormatter) init];
  [v3 setNumberStyle:1];
  [v3 setMaximumFractionDigits:1];
  id v4 = [objc_allocWithZone((Class)NSNumber) initWithDouble:*(double *)&a1];
  id v5 = [v3 stringFromNumber:v4];

  if (v5)
  {
    uint64_t v6 = sub_1ACDD0();
  }
  else
  {

    return 0;
  }
  return v6;
}

uint64_t sub_15E990(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x5665676172657661 && a2 == 0xEC00000065756C61;
    if (v6 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000;
      if (v7 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000;
        if (v8 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x6563655274736F6DLL && a2 == 0xEF65756C6156746ELL;
          if (v9 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x6C61566C61746F74 && a2 == 0xEA00000000006575;
            if (v10 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL;
              if (v11 || (sub_1AD2F0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else if (a1 == 0xD000000000000012 && a2 == 0x80000000001BAB70 || (sub_1AD2F0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                BOOL v12 = a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453;
                if (v12 || (sub_1AD2F0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 8;
                }
                else
                {
                  BOOL v13 = a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453;
                  if (v13 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else if (a1 == 0xD000000000000015 && a2 == 0x80000000001BC320 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 10;
                  }
                  else if (a1 == 0xD000000000000010 && a2 == 0x80000000001BCBE0 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 11;
                  }
                  else
                  {
                    BOOL v14 = a1 == 1953066613 && a2 == 0xE400000000000000;
                    if (v14 || (sub_1AD2F0() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 12;
                    }
                    else if (a1 == 0xD000000000000012 && a2 == 0x80000000001BC360 || (sub_1AD2F0() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 13;
                    }
                    else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B78B0)
                    {
                      swift_bridgeObjectRelease();
                      return 14;
                    }
                    else
                    {
                      char v15 = sub_1AD2F0();
                      swift_bridgeObjectRelease();
                      if (v15) {
                        return 14;
                      }
                      else {
                        return 15;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_15EF50(char a1)
{
  uint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      return 0x5665676172657661;
    case 2:
      unsigned int v3 = 1450729837;
      return v3 | 0x65756C6100000000;
    case 3:
      unsigned int v3 = 1450076525;
      return v3 | 0x65756C6100000000;
    case 4:
      return 0x6563655274736F6DLL;
    case 5:
      return 0x6C61566C61746F74;
    case 6:
      return 0x6562614C65746164;
    case 7:
    case 13:
    case 14:
      return result;
    case 8:
      unsigned int v4 = 1450729837;
      goto LABEL_12;
    case 9:
      unsigned int v4 = 1450076525;
LABEL_12:
      uint64_t result = v4 | 0x65756C6100000000;
      break;
    case 10:
      uint64_t result = 0xD000000000000015;
      break;
    case 11:
      uint64_t result = 0xD000000000000010;
      break;
    case 12:
      uint64_t result = 1953066613;
      break;
    default:
      uint64_t result = 0x68636E7550707061;
      break;
  }
  return result;
}

uint64_t sub_15F110()
{
  return sub_15EF50(*v0);
}

uint64_t sub_15F118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_15E990(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_15F140(uint64_t a1)
{
  unint64_t v2 = sub_15F590();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_15F17C(uint64_t a1)
{
  unint64_t v2 = sub_15F590();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GenericQueryModel.encode(to:)(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_2694(&qword_207F58);
  sub_52C4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_2F014();
  sub_2E38(a1, a1[3]);
  sub_15F590();
  sub_1AD3B0();
  v32[7] = 0;
  sub_1AAD90();
  sub_15FE4C(&qword_202BC0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  sub_1AD270();
  if (!v2)
  {
    uint64_t Model = (int *)type metadata accessor for GenericQueryModel();
    sub_2EFEC(v4 + Model[5]);
    v32[6] = 1;
    sub_2F078();
    sub_2EFEC(v4 + Model[6]);
    v32[5] = 2;
    sub_2F078();
    sub_2EFEC(v4 + Model[7]);
    v32[4] = 3;
    sub_2F078();
    sub_2EFEC(v4 + Model[8]);
    v32[3] = 4;
    sub_2F078();
    sub_2EFEC(v4 + Model[9]);
    v32[2] = 5;
    sub_2F078();
    v32[1] = 6;
    sub_1AC1E0();
    sub_15FE4C(&qword_202BC8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    sub_1AD270();
    uint64_t v11 = sub_7A494(Model[11]);
    v32[0] = 7;
    sub_2F05C(v11, v12, (uint64_t)v32);
    uint64_t v13 = sub_7A494(Model[12]);
    char v31 = 8;
    sub_2F05C(v13, v14, (uint64_t)&v31);
    uint64_t v15 = sub_7A494(Model[13]);
    char v30 = 9;
    sub_2F05C(v15, v16, (uint64_t)&v30);
    uint64_t v17 = sub_7A494(Model[14]);
    char v29 = 10;
    sub_2F05C(v17, v18, (uint64_t)&v29);
    uint64_t v19 = sub_7A494(Model[15]);
    char v28 = 11;
    sub_2F05C(v19, v20, (uint64_t)&v28);
    uint64_t v21 = sub_7A494(Model[16]);
    char v27 = 12;
    sub_2F05C(v21, v22, (uint64_t)&v27);
    uint64_t v23 = sub_7A494(Model[17]);
    char v26 = 13;
    sub_2F05C(v23, v24, (uint64_t)&v26);
    type metadata accessor for SnippetHeaderModel();
    sub_15FE4C(&qword_202BD0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1AD270();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
}

unint64_t sub_15F590()
{
  unint64_t result = qword_207F60;
  if (!qword_207F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_207F60);
  }
  return result;
}

uint64_t GenericQueryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v74 = a2;
  uint64_t v3 = sub_2694(&qword_2022D0);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_53E0();
  uint64_t v87 = v5;
  uint64_t v6 = sub_2694(&qword_201E28);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_53E0();
  uint64_t v86 = v8;
  uint64_t v9 = sub_2694(&qword_2022C8);
  uint64_t v10 = sub_53D4(v9);
  __chkstk_darwin(v10);
  sub_53E0();
  uint64_t v88 = v11;
  uint64_t v89 = sub_2694(&qword_207F68);
  sub_52C4();
  uint64_t v85 = v12;
  __chkstk_darwin(v13);
  sub_53E0();
  uint64_t v93 = v14;
  uint64_t Model = type metadata accessor for GenericQueryModel();
  uint64_t v16 = (int *)(Model - 8);
  __chkstk_darwin(Model);
  uint64_t v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_1AAD90();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v18, 1, 1, v84);
  sub_7A488(v16[7]);
  uint64_t v83 = v19;
  *(unsigned char *)(v19 + 8) = 1;
  sub_7A488(v16[8]);
  uint64_t v82 = v20;
  *(unsigned char *)(v20 + 8) = 1;
  sub_7A488(v16[9]);
  uint64_t v81 = v21;
  *(unsigned char *)(v21 + 8) = 1;
  sub_7A488(v16[10]);
  uint64_t v80 = v22;
  *(unsigned char *)(v22 + 8) = 1;
  sub_7A488(v16[11]);
  uint64_t v78 = v23;
  *(unsigned char *)(v23 + 8) = 1;
  uint64_t v24 = (uint64_t)&v18[v16[12]];
  uint64_t v25 = sub_1AC1E0();
  uint64_t v77 = v24;
  uint64_t v79 = v25;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v24, 1, 1, v25);
  char v26 = &v18[v16[13]];
  *(void *)char v26 = 0;
  *((void *)v26 + 1) = 0;
  id v76 = v26;
  char v27 = &v18[v16[14]];
  *(void *)char v27 = 0;
  *((void *)v27 + 1) = 0;
  uint64_t v75 = v27;
  char v28 = &v18[v16[15]];
  *(void *)char v28 = 0;
  *((void *)v28 + 1) = 0;
  char v29 = &v18[v16[16]];
  *(void *)char v29 = 0;
  *((void *)v29 + 1) = 0;
  char v30 = &v18[v16[17]];
  *(void *)char v30 = 0;
  *((void *)v30 + 1) = 0;
  char v31 = &v18[v16[18]];
  *(void *)char v31 = 0;
  *((void *)v31 + 1) = 0;
  int v32 = &v18[v16[19]];
  *(void *)int v32 = 0;
  *((void *)v32 + 1) = 0;
  uint64_t v33 = v16[20];
  uint64_t v92 = v18;
  uint64_t v34 = (uint64_t)&v18[v33];
  uint64_t v35 = type metadata accessor for SnippetHeaderModel();
  uint64_t v73 = v34;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v34, 1, 1, v35);
  uint64_t v36 = a1[3];
  uint64_t v91 = a1;
  sub_2E38(a1, v36);
  sub_15F590();
  uint64_t v37 = v90;
  sub_1AD3A0();
  if (v37)
  {
    uint64_t v69 = (uint64_t)v92;
  }
  else
  {
    uint64_t v90 = v28;
    uint64_t v72 = v29;
    uint64_t v38 = v86;
    uint64_t v71 = v30;
    uint64_t v70 = v32;
    uint64_t v39 = v87;
    uint64_t v40 = v85;
    char v108 = 0;
    sub_15FE4C(&qword_202BE0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    uint64_t v41 = v88;
    uint64_t v42 = v93;
    sub_1AD1E0();
    sub_2B7FC(v41, (uint64_t)v92, &qword_2022C8);
    char v107 = 1;
    uint64_t v44 = sub_161C78();
    sub_BCB50(v44, v45);
    char v106 = 2;
    uint64_t v46 = sub_161C78();
    sub_BCB50(v46, v47);
    char v105 = 3;
    uint64_t v48 = sub_161C78();
    sub_BCB50(v48, v49);
    char v104 = 4;
    uint64_t v50 = sub_161C78();
    sub_BCB50(v50, v51);
    char v103 = 5;
    uint64_t v52 = sub_1AD1D0();
    sub_BCB50(v52, v53);
    char v102 = 6;
    sub_15FE4C(&qword_202BE8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    sub_1AD1E0();
    sub_2B7FC(v38, v77, &qword_201E28);
    char v101 = 7;
    uint64_t v54 = sub_1AD1C0();
    id v55 = v76;
    uint64_t v88 = v54;
    uint64_t v86 = v56;
    swift_bridgeObjectRelease();
    uint64_t v57 = v86;
    *id v55 = v88;
    v55[1] = v57;
    char v100 = 8;
    uint64_t v58 = sub_1AD1C0();
    uint64_t v88 = v59;
    uint64_t v60 = v58;
    uint64_t v61 = v75;
    swift_bridgeObjectRelease();
    uint64_t v62 = v88;
    *uint64_t v61 = v60;
    v61[1] = v62;
    char v99 = 9;
    sub_1AD1C0();
    sub_161C6C();
    uint64_t v63 = v90;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v63 = v42;
    *((void *)v63 + 1) = v40;
    char v98 = 10;
    sub_161C50();
    sub_161C6C();
    uint64_t v64 = v72;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v64 = v42;
    *((void *)v64 + 1) = v40;
    char v97 = 11;
    sub_161C50();
    sub_161C6C();
    uint64_t v65 = v71;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v65 = v42;
    *((void *)v65 + 1) = v40;
    char v96 = 12;
    sub_161C50();
    sub_161C6C();
    swift_bridgeObjectRelease();
    *(void *)char v31 = v42;
    *((void *)v31 + 1) = v40;
    char v95 = 13;
    sub_161C50();
    sub_161C6C();
    uint64_t v66 = v70;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v66 = v42;
    *((void *)v66 + 1) = v40;
    char v94 = 14;
    sub_15FE4C(&qword_202BF0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v67 = v89;
    uint64_t v68 = v93;
    sub_1AD1E0();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v68, v67);
    uint64_t v69 = (uint64_t)v92;
    sub_2B7FC(v39, v73, &qword_2022D0);
    sub_15FD58(v69, v74);
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v91);
  return sub_160E24(v69, (void (*)(void))type metadata accessor for GenericQueryModel);
}

uint64_t sub_15FD58(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for GenericQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t sub_15FDBC()
{
  return sub_15FE4C(&qword_202270, (void (*)(uint64_t))type metadata accessor for GenericQueryModel);
}

uint64_t sub_15FE04()
{
  return sub_15FE4C(&qword_202120, (void (*)(uint64_t))type metadata accessor for GenericQueryModel);
}

uint64_t sub_15FE4C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_15FE94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GenericQueryModel.init(from:)(a1, a2);
}

uint64_t sub_15FEAC(void *a1)
{
  return GenericQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for GenericQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AAD90();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_2022C8);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = (char *)a1 + v11;
    uint64_t v15 = (char *)a2 + v11;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)a1 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (char *)a1 + v17;
    uint64_t v21 = (char *)a2 + v17;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = a3[10];
    uint64_t v24 = (char *)a1 + v22;
    uint64_t v25 = (char *)a2 + v22;
    v24[8] = v25[8];
    *(void *)uint64_t v24 = *(void *)v25;
    char v26 = (char *)a1 + v23;
    char v27 = (char *)a2 + v23;
    uint64_t v28 = sub_1AC1E0();
    uint64_t v71 = v28;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v28))
    {
      uint64_t v29 = sub_2694(&qword_201E28);
      memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v26, 0, 1, v28);
    }
    uint64_t v30 = a3[11];
    uint64_t v31 = a3[12];
    int v32 = (uint64_t *)((char *)a1 + v30);
    uint64_t v33 = (uint64_t *)((char *)a2 + v30);
    uint64_t v34 = v33[1];
    *int v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = (uint64_t *)((char *)a1 + v31);
    uint64_t v36 = (uint64_t *)((char *)a2 + v31);
    uint64_t v37 = v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = a3[13];
    uint64_t v39 = a3[14];
    uint64_t v40 = (uint64_t *)((char *)a1 + v38);
    uint64_t v41 = (uint64_t *)((char *)a2 + v38);
    uint64_t v42 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v42;
    uint64_t v43 = (uint64_t *)((char *)a1 + v39);
    uint64_t v44 = (uint64_t *)((char *)a2 + v39);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = a3[15];
    uint64_t v47 = a3[16];
    uint64_t v48 = (uint64_t *)((char *)a1 + v46);
    char v49 = (uint64_t *)((char *)a2 + v46);
    uint64_t v50 = v49[1];
    *uint64_t v48 = *v49;
    v48[1] = v50;
    char v51 = (uint64_t *)((char *)a1 + v47);
    uint64_t v52 = (uint64_t *)((char *)a2 + v47);
    uint64_t v53 = v52[1];
    *char v51 = *v52;
    v51[1] = v53;
    uint64_t v54 = a3[17];
    uint64_t v55 = a3[18];
    uint64_t v56 = (uint64_t *)((char *)a1 + v54);
    uint64_t v57 = (uint64_t *)((char *)a2 + v54);
    uint64_t v58 = v57[1];
    uint64_t v59 = (char *)a2 + v55;
    __dst = (char *)a1 + v55;
    *uint64_t v56 = *v57;
    v56[1] = v58;
    uint64_t v60 = type metadata accessor for SnippetHeaderModel();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v59, 1, v60))
    {
      uint64_t v61 = sub_2694(&qword_2022D0);
      memcpy(__dst, v59, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *))(*(void *)(v71 - 8) + 16))(__dst, v59);
      uint64_t v62 = *(int *)(v60 + 20);
      uint64_t v63 = &__dst[v62];
      uint64_t v64 = &v59[v62];
      uint64_t v65 = *((void *)v64 + 1);
      *(void *)uint64_t v63 = *(void *)v64;
      *((void *)v63 + 1) = v65;
      uint64_t v66 = *(int *)(v60 + 24);
      uint64_t v67 = &__dst[v66];
      uint64_t v68 = &v59[v66];
      uint64_t v69 = *((void *)v68 + 1);
      *(void *)uint64_t v67 = *(void *)v68;
      *((void *)v67 + 1) = v69;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dst, 0, 1, v60);
    }
  }
  return a1;
}

uint64_t destroy for GenericQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AAD90();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 40);
  uint64_t v6 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 72);
  uint64_t v8 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v8);
  if (!result)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v7, v6);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  uint64_t v26 = sub_1AC1E0();
  uint64_t v69 = v26;
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1, v26))
  {
    uint64_t v27 = sub_2694(&qword_201E28);
    memcpy(v24, v25, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0, 1, v26);
  }
  uint64_t v28 = a3[11];
  uint64_t v29 = a3[12];
  uint64_t v30 = &a1[v28];
  uint64_t v31 = &a2[v28];
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = v32;
  uint64_t v33 = &a1[v29];
  uint64_t v34 = &a2[v29];
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = v35;
  uint64_t v36 = a3[13];
  uint64_t v37 = a3[14];
  uint64_t v38 = &a1[v36];
  uint64_t v39 = &a2[v36];
  uint64_t v40 = *((void *)v39 + 1);
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = v40;
  uint64_t v41 = &a1[v37];
  uint64_t v42 = &a2[v37];
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  uint64_t v44 = a3[15];
  uint64_t v45 = a3[16];
  uint64_t v46 = &a1[v44];
  uint64_t v47 = &a2[v44];
  uint64_t v48 = *((void *)v47 + 1);
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + 1) = v48;
  char v49 = &a1[v45];
  uint64_t v50 = &a2[v45];
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)char v49 = *(void *)v50;
  *((void *)v49 + 1) = v51;
  uint64_t v52 = a3[17];
  uint64_t v53 = a3[18];
  uint64_t v54 = &a1[v52];
  uint64_t v55 = &a2[v52];
  uint64_t v56 = *((void *)v55 + 1);
  uint64_t v57 = &a2[v53];
  __dst = &a1[v53];
  *(void *)uint64_t v54 = *(void *)v55;
  *((void *)v54 + 1) = v56;
  uint64_t v58 = type metadata accessor for SnippetHeaderModel();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v57, 1, v58))
  {
    uint64_t v59 = sub_2694(&qword_2022D0);
    memcpy(__dst, v57, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *))(*(void *)(v69 - 8) + 16))(__dst, v57);
    uint64_t v60 = *(int *)(v58 + 20);
    uint64_t v61 = &__dst[v60];
    uint64_t v62 = &v57[v60];
    uint64_t v63 = *((void *)v62 + 1);
    *(void *)uint64_t v61 = *(void *)v62;
    *((void *)v61 + 1) = v63;
    uint64_t v64 = *(int *)(v58 + 24);
    uint64_t v65 = &__dst[v64];
    uint64_t v66 = &v57[v64];
    uint64_t v67 = *((void *)v66 + 1);
    *(void *)uint64_t v65 = *(void *)v66;
    *((void *)v65 + 1) = v67;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dst, 0, 1, v58);
  }
  return a1;
}

char *assignWithCopy for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)uint64_t v24 = v26;
  uint64_t v27 = a3[9];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = *(void *)v29;
  v28[8] = v29[8];
  *(void *)uint64_t v28 = v30;
  uint64_t v31 = a3[10];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = sub_1AC1E0();
  int v35 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v34);
  int v36 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1, v34);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v32, 0, 1, v34);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v37 = *(void *)(v34 - 8);
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v34);
LABEL_12:
    uint64_t v38 = sub_2694(&qword_201E28);
    memcpy(v32, v33, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 24))(v32, v33, v34);
LABEL_13:
  uint64_t v39 = a3[11];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + 1) = *((void *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[12];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = a3[13];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + 1) = *((void *)v47 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[14];
  char v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  *(void *)char v49 = *(void *)v50;
  *((void *)v49 + 1) = *((void *)v50 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[15];
  uint64_t v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  *(void *)uint64_t v52 = *(void *)v53;
  *((void *)v52 + 1) = *((void *)v53 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[16];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  *((void *)v55 + 1) = *((void *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = a3[17];
  uint64_t v58 = &a1[v57];
  uint64_t v59 = &a2[v57];
  *(void *)uint64_t v58 = *(void *)v59;
  *((void *)v58 + 1) = *((void *)v59 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = a3[18];
  uint64_t v61 = &a1[v60];
  uint64_t v62 = &a2[v60];
  uint64_t v63 = type metadata accessor for SnippetHeaderModel();
  int v64 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v61, 1, v63);
  int v65 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v62, 1, v63);
  if (!v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 24))(v61, v62, v34);
      uint64_t v74 = *(int *)(v63 + 20);
      uint64_t v75 = &v61[v74];
      id v76 = &v62[v74];
      *(void *)uint64_t v75 = *(void *)v76;
      *((void *)v75 + 1) = *((void *)v76 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v77 = *(int *)(v63 + 24);
      uint64_t v78 = &v61[v77];
      uint64_t v79 = &v62[v77];
      *(void *)uint64_t v78 = *(void *)v79;
      *((void *)v78 + 1) = *((void *)v79 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_160E24((uint64_t)v61, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v65)
  {
LABEL_18:
    uint64_t v72 = sub_2694(&qword_2022D0);
    memcpy(v61, v62, *(void *)(*(void *)(v72 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v61, v62, v34);
  uint64_t v66 = *(int *)(v63 + 20);
  uint64_t v67 = &v61[v66];
  uint64_t v68 = &v62[v66];
  *(void *)uint64_t v67 = *(void *)v68;
  *((void *)v67 + 1) = *((void *)v68 + 1);
  uint64_t v69 = *(int *)(v63 + 24);
  uint64_t v70 = &v61[v69];
  uint64_t v71 = &v62[v69];
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = *((void *)v71 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v61, 0, 1, v63);
  return a1;
}

uint64_t sub_160E24(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

char *initializeWithTake for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  uint64_t v26 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1, v26))
  {
    uint64_t v27 = sub_2694(&qword_201E28);
    memcpy(v24, v25, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0, 1, v26);
  }
  uint64_t v28 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v28] = *(_OWORD *)&a2[v28];
  uint64_t v29 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  uint64_t v30 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  *(_OWORD *)&a1[v30] = *(_OWORD *)&a2[v30];
  uint64_t v31 = a3[17];
  uint64_t v32 = a3[18];
  long long v33 = *(_OWORD *)&a2[v31];
  uint64_t v34 = &a2[v32];
  int v35 = &a1[v32];
  *(_OWORD *)&a1[v31] = v33;
  uint64_t v36 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v34, 1, v36))
  {
    uint64_t v37 = sub_2694(&qword_2022D0);
    memcpy(v35, v34, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v35, v34, v26);
    *(_OWORD *)&v35[*(int *)(v36 + 20)] = *(_OWORD *)&v34[*(int *)(v36 + 20)];
    *(_OWORD *)&v35[*(int *)(v36 + 24)] = *(_OWORD *)&v34[*(int *)(v36 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v35, 0, 1, v36);
  }
  return a1;
}

char *assignWithTake for GenericQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = &a1[v18];
  uint64_t v22 = &a2[v18];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v25 = &a1[v23];
  uint64_t v26 = &a2[v23];
  v25[8] = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  uint64_t v27 = &a1[v24];
  uint64_t v28 = &a2[v24];
  uint64_t v29 = sub_1AC1E0();
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v29);
  int v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1, v29);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0, 1, v29);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v32 = *(void *)(v29 - 8);
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v27, v29);
LABEL_12:
    uint64_t v33 = sub_2694(&qword_201E28);
    memcpy(v27, v28, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 40))(v27, v28, v29);
LABEL_13:
  uint64_t v34 = a3[11];
  int v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v38 = *(void *)v36;
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)int v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[12];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[13];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  uint64_t v48 = *(void *)v46;
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = v48;
  *((void *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = a3[14];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  uint64_t v53 = *(void *)v51;
  uint64_t v52 = *((void *)v51 + 1);
  *(void *)uint64_t v50 = v53;
  *((void *)v50 + 1) = v52;
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[15];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  uint64_t v58 = *(void *)v56;
  uint64_t v57 = *((void *)v56 + 1);
  *(void *)uint64_t v55 = v58;
  *((void *)v55 + 1) = v57;
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[16];
  uint64_t v60 = &a1[v59];
  uint64_t v61 = &a2[v59];
  uint64_t v63 = *(void *)v61;
  uint64_t v62 = *((void *)v61 + 1);
  *(void *)uint64_t v60 = v63;
  *((void *)v60 + 1) = v62;
  swift_bridgeObjectRelease();
  uint64_t v64 = a3[17];
  int v65 = &a1[v64];
  uint64_t v66 = &a2[v64];
  uint64_t v68 = *(void *)v66;
  uint64_t v67 = *((void *)v66 + 1);
  *(void *)int v65 = v68;
  *((void *)v65 + 1) = v67;
  swift_bridgeObjectRelease();
  uint64_t v69 = a3[18];
  uint64_t v70 = &a1[v69];
  uint64_t v71 = &a2[v69];
  uint64_t v72 = type metadata accessor for SnippetHeaderModel();
  int v73 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v70, 1, v72);
  int v74 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v71, 1, v72);
  if (!v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 40))(v70, v71, v29);
      uint64_t v77 = *(int *)(v72 + 20);
      uint64_t v78 = &v70[v77];
      uint64_t v79 = &v71[v77];
      uint64_t v81 = *(void *)v79;
      uint64_t v80 = *((void *)v79 + 1);
      *(void *)uint64_t v78 = v81;
      *((void *)v78 + 1) = v80;
      swift_bridgeObjectRelease();
      uint64_t v82 = *(int *)(v72 + 24);
      uint64_t v83 = &v70[v82];
      uint64_t v84 = &v71[v82];
      uint64_t v86 = *(void *)v84;
      uint64_t v85 = *((void *)v84 + 1);
      *(void *)uint64_t v83 = v86;
      *((void *)v83 + 1) = v85;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_160E24((uint64_t)v70, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v74)
  {
LABEL_18:
    uint64_t v75 = sub_2694(&qword_2022D0);
    memcpy(v70, v71, *(void *)(*(void *)(v75 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v70, v71, v29);
  *(_OWORD *)&v70[*(int *)(v72 + 20)] = *(_OWORD *)&v71[*(int *)(v72 + 20)];
  *(_OWORD *)&v70[*(int *)(v72 + 24)] = *(_OWORD *)&v71[*(int *)(v72 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v70, 0, 1, v72);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1616B0);
}

uint64_t sub_1616B0(uint64_t a1, uint64_t a2, int *a3)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_13:
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
  sub_2694(&qword_201E28);
  sub_52E0();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v12 = a3[10];
LABEL_12:
    uint64_t v9 = a1 + v12;
    goto LABEL_13;
  }
  if (a2 != 2147483646)
  {
    uint64_t v8 = sub_2694(&qword_2022D0);
    uint64_t v12 = a3[18];
    goto LABEL_12;
  }
  unint64_t v13 = *(void *)(a1 + a3[11] + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  int v14 = v13 - 1;
  if (v14 < 0) {
    int v14 = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1617B4);
}

void sub_1617B4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    sub_2694(&qword_201E28);
    sub_52E0();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[10];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(void *)(a1 + a4[11] + 8) = a2;
        return;
      }
      uint64_t v10 = sub_2694(&qword_2022D0);
      uint64_t v14 = a4[18];
    }
    uint64_t v11 = a1 + v14;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, a2, a2, v10);
}

void sub_161894()
{
  sub_2EBF4(319, &qword_202C60, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  if (v0 <= 0x3F)
  {
    sub_2EBF4(319, (unint64_t *)&qword_202C68, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    if (v1 <= 0x3F)
    {
      sub_2EBF4(319, (unint64_t *)&qword_202C70, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

unsigned char *storeEnumTagSinglePayload for GenericQueryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *uint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x161ADCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericQueryModel.CodingKeys()
{
  return &type metadata for GenericQueryModel.CodingKeys;
}

unint64_t sub_161B18()
{
  unint64_t result = qword_208038;
  if (!qword_208038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208038);
  }
  return result;
}

unint64_t sub_161B68()
{
  unint64_t result = qword_208040;
  if (!qword_208040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208040);
  }
  return result;
}

unint64_t sub_161BB8()
{
  unint64_t result = qword_208048;
  if (!qword_208048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208048);
  }
  return result;
}

uint64_t sub_161C04()
{
  return type metadata accessor for GenericQueryModel();
}

uint64_t sub_161C1C()
{
  return type metadata accessor for GenericQueryModel();
}

uint64_t sub_161C38()
{
  return type metadata accessor for GenericQueryModel();
}

uint64_t sub_161C50()
{
  return sub_1AD1C0();
}

uint64_t sub_161C78()
{
  return sub_1AD1D0();
}

uint64_t BloodPressureLogModel.init(url:date:dateLabel:systolic:diastolic:loggedLabel:snippetHeaderModel:unitLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8@<D0>, uint64_t a9@<D1>, uint64_t a10)
{
  uint64_t v70 = a6;
  uint64_t v74 = a5;
  uint64_t v75 = a1;
  uint64_t v67 = a3;
  uint64_t v68 = a4;
  uint64_t v14 = sub_2694(&qword_201E20);
  uint64_t v15 = sub_53D4(v14);
  __chkstk_darwin(v15);
  sub_164A18(v16, v62);
  uint64_t v17 = sub_2694(&qword_2022C8);
  uint64_t v18 = sub_53D4(v17);
  __chkstk_darwin(v18);
  sub_53E0();
  uint64_t v71 = v19;
  uint64_t v20 = sub_2694(&qword_201E28);
  uint64_t v21 = sub_53D4(v20);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v66 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v62 - v24;
  swift_bridgeObjectRelease();
  sub_1AAD90();
  uint64_t v26 = sub_27AC();
  uint64_t v69 = v27;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v26, v28, v29, v27);
  int v30 = (int *)type metadata accessor for BloodPressureLogModel();
  int v31 = (uint64_t *)(a7 + v30[5]);
  *int v31 = 0;
  v31[1] = 0;
  uint64_t v32 = (uint64_t *)(a7 + v30[6]);
  *uint64_t v32 = 0;
  v32[1] = 0;
  uint64_t v33 = (void *)(a7 + v30[7]);
  *uint64_t v33 = 0;
  v33[1] = 0;
  uint64_t v34 = a7 + v30[8];
  uint64_t v64 = type metadata accessor for SnippetHeaderModel();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v34, 1, 1, v64);
  int v35 = (uint64_t *)(a7 + v30[9]);
  *int v35 = 0;
  v35[1] = 0;
  uint64_t v36 = (void *)(a7 + v30[10]);
  *uint64_t v36 = 0;
  v36[1] = 0;
  int v65 = v36;
  uint64_t v72 = a2;
  sub_1AC070();
  uint64_t v37 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1, v37) == 1)
  {
    sub_2EF0C((uint64_t)v25, &qword_201E28);
    uint64_t v38 = 0;
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = sub_1AC1D0();
    uint64_t v42 = v41;
    (*(void (**)(char *, uint64_t))(*(void *)(v37 - 8) + 8))(v25, v37);
    uint64_t v76 = v40;
    uint64_t v77 = v42;
    sub_B4FC();
    uint64_t v38 = sub_1AD000();
    uint64_t v39 = v43;
    swift_bridgeObjectRelease();
  }
  uint64_t v63 = a10;
  swift_bridgeObjectRelease();
  *int v31 = v38;
  v31[1] = v39;
  uint64_t v44 = sub_16259C(a8, 0, a9, 0);
  uint64_t v46 = v45;
  swift_bridgeObjectRelease();
  *uint64_t v32 = v44;
  v32[1] = v46;
  swift_bridgeObjectRelease();
  uint64_t v47 = v68;
  *uint64_t v33 = v67;
  v33[1] = v47;
  sub_2EF0C(v34, &qword_2022D0);
  uint64_t v48 = v74;
  sub_163498(v74, v34, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v34, 0, 1, v64);
  uint64_t v49 = (uint64_t)v66;
  sub_1AC080();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v49, 1, v37) == 1)
  {
    sub_2EF0C(v49, &qword_201E28);
    uint64_t v50 = 0;
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v50 = sub_1AC1D0();
    uint64_t v51 = v52;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(v49, v37);
  }
  swift_bridgeObjectRelease();
  *int v35 = v50;
  v35[1] = v51;
  uint64_t v53 = v65;
  swift_bridgeObjectRelease();
  uint64_t v54 = v63;
  *uint64_t v53 = v70;
  v53[1] = v54;
  uint64_t v55 = sub_1AAB10();
  sub_52E0();
  uint64_t v57 = v56;
  uint64_t v58 = v73;
  uint64_t v59 = v75;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v73, v75, v55);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v58, 0, 1, v55);
  uint64_t v60 = v71;
  sub_162678(v58);
  swift_release();
  sub_163440(v48, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v59, v55);
  sub_2EF0C(v58, &qword_201E20);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v60, 0, 1, v69);
  return sub_5B0E0(v60, a7, &qword_2022C8);
}

uint64_t type metadata accessor for BloodPressureLogModel()
{
  uint64_t result = qword_2080C0;
  if (!qword_2080C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t BloodPressureLogModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_CCD04(v1, a1, &qword_2022C8);
}

uint64_t BloodPressureLogModel.dateLabel.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureLogModel.dateLabel.setter()
{
  sub_1649E4();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureLogModel.dateLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureLogModel.dataLabel.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureLogModel.dataLabel.setter()
{
  sub_1649E4();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureLogModel.dataLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureLogModel.loggedLabel.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureLogModel.loggedLabel.setter()
{
  sub_1649E4();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureLogModel.loggedLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for BloodPressureLogModel();
  return sub_CCD04(v1 + *(int *)(v3 + 32), a1, &qword_2022D0);
}

uint64_t BloodPressureLogModel.snippetHeaderModel.setter()
{
  uint64_t v2 = sub_164A00();
  return sub_5B0E0(v0, v1 + *(int *)(v2 + 32), &qword_2022D0);
}

uint64_t (*BloodPressureLogModel.snippetHeaderModel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureLogModel.timeLabel.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureLogModel.timeLabel.setter()
{
  sub_1649E4();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureLogModel.timeLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t BloodPressureLogModel.unitLabel.getter()
{
  return sub_22F80();
}

uint64_t BloodPressureLogModel.unitLabel.setter()
{
  sub_1649E4();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*BloodPressureLogModel.unitLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t sub_16259C(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v6 = sub_B8E6C(a1, a2 & 1);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v6;
  uint64_t v9 = sub_B8E6C(a3, a4 & 1);
  if (v10)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = 47;
    v14._object = (void *)0xE100000000000000;
    sub_1ACE70(v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = v11;
    v15._object = v12;
    sub_1ACE70(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v8;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_162678(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201E20);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AAB10();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_CCD04(a1, (uint64_t)v4, &qword_201E20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_2EF0C((uint64_t)v4, &qword_201E20);
    return sub_1AAD80();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_1AAAD0();
    sub_1AAD80();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_162840(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL;
    if (v6 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6562614C61746164 && a2 == 0xE90000000000006CLL;
      if (v7 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562;
        if (v8 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B78B0 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v9 = a1 == 0x6562614C656D6974 && a2 == 0xE90000000000006CLL;
          if (v9 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else if (a1 == 0x6562614C74696E75 && a2 == 0xE90000000000006CLL)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else
          {
            char v11 = sub_1AD2F0();
            swift_bridgeObjectRelease();
            if (v11) {
              return 6;
            }
            else {
              return 7;
            }
          }
        }
      }
    }
  }
}

uint64_t sub_162B14(char a1)
{
  uint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unsigned int v3 = 1702125924;
      goto LABEL_8;
    case 2:
      unsigned int v3 = 1635017060;
      goto LABEL_8;
    case 3:
      return 0x614C646567676F6CLL;
    case 4:
      return result;
    case 5:
      unsigned int v3 = 1701669236;
      goto LABEL_8;
    case 6:
      unsigned int v3 = 1953066613;
LABEL_8:
      uint64_t result = v3 | 0x6562614C00000000;
      break;
    default:
      uint64_t result = 0x68636E7550707061;
      break;
  }
  return result;
}

uint64_t sub_162BF0()
{
  return sub_162B14(*v0);
}

uint64_t sub_162BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_162840(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_162C20@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_A0598();
  *a1 = result;
  return result;
}

uint64_t sub_162C48(uint64_t a1)
{
  unint64_t v2 = sub_162F34();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_162C84(uint64_t a1)
{
  unint64_t v2 = sub_162F34();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BloodPressureLogModel.encode(to:)(void *a1)
{
  uint64_t v3 = sub_2694(&qword_208050);
  sub_52C4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_E548();
  uint64_t v9 = v8 - v7;
  sub_2E38(a1, a1[3]);
  sub_162F34();
  sub_1AD3B0();
  v26[1] = 0;
  sub_1AAD90();
  sub_16357C(&qword_202BC0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  sub_1AD270();
  if (!v1)
  {
    uint64_t v10 = (int *)type metadata accessor for BloodPressureLogModel();
    uint64_t v11 = sub_7A494(v10[5]);
    v26[0] = 1;
    sub_2F05C(v11, v12, (uint64_t)v26);
    uint64_t v13 = sub_7A494(v10[6]);
    char v25 = 2;
    sub_2F05C(v13, v14, (uint64_t)&v25);
    uint64_t v15 = sub_7A494(v10[7]);
    char v24 = 3;
    sub_2F05C(v15, v16, (uint64_t)&v24);
    v23[1] = 4;
    type metadata accessor for SnippetHeaderModel();
    sub_16357C(&qword_202BD0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1AD270();
    uint64_t v17 = sub_7A494(v10[9]);
    v23[0] = 5;
    sub_2F05C(v17, v18, (uint64_t)v23);
    uint64_t v19 = sub_7A494(v10[10]);
    char v22 = 6;
    sub_2F05C(v19, v20, (uint64_t)&v22);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t sub_162F34()
{
  unint64_t result = qword_208058;
  if (!qword_208058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208058);
  }
  return result;
}

uint64_t BloodPressureLogModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_2694(&qword_2022D0);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_164A18(v5, v44);
  uint64_t v6 = sub_2694(&qword_2022C8);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_53E0();
  uint64_t v49 = v8;
  sub_2694(&qword_208060);
  sub_52C4();
  __chkstk_darwin(v9);
  sub_E548();
  uint64_t v10 = type metadata accessor for BloodPressureLogModel();
  uint64_t v11 = (int *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_E548();
  uint64_t v14 = v13 - v12;
  sub_1AAD90();
  uint64_t v15 = sub_27AC();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v15, v16, v17, v18);
  uint64_t v19 = (uint64_t *)(v14 + v11[7]);
  *uint64_t v19 = 0;
  v19[1] = 0;
  uint64_t v20 = (uint64_t *)(v14 + v11[8]);
  *uint64_t v20 = 0;
  v20[1] = 0;
  uint64_t v21 = (uint64_t *)(v14 + v11[9]);
  *uint64_t v21 = 0;
  v21[1] = 0;
  uint64_t v46 = v14 + v11[10];
  uint64_t v47 = type metadata accessor for SnippetHeaderModel();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v46, 1, 1, v47);
  char v22 = (uint64_t *)(v14 + v11[11]);
  *char v22 = 0;
  v22[1] = 0;
  uint64_t v53 = v14;
  uint64_t v23 = (uint64_t *)(v14 + v11[12]);
  *uint64_t v23 = 0;
  v23[1] = 0;
  uint64_t v50 = (uint64_t)a1;
  sub_2E38(a1, a1[3]);
  sub_162F34();
  sub_1AD3A0();
  if (v51)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
    uint64_t v43 = type metadata accessor for BloodPressureLogModel;
    uint64_t v42 = v53;
  }
  else
  {
    uint64_t v52 = v20;
    sub_16357C(&qword_202BE0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    sub_1AD1E0();
    sub_5B0E0(v49, v53, &qword_2022C8);
    uint64_t v24 = sub_1AD1C0();
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();
    *uint64_t v19 = v24;
    v19[1] = v26;
    uint64_t v27 = sub_1AD1C0();
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    *uint64_t v52 = v27;
    v52[1] = v29;
    uint64_t v31 = sub_1AD1C0();
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    *uint64_t v21 = v31;
    v21[1] = v33;
    sub_16357C(&qword_202BF0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1AD1E0();
    sub_5B0E0(v48, v46, &qword_2022D0);
    uint64_t v34 = sub_1AD1C0();
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    *char v22 = v34;
    v22[1] = v36;
    uint64_t v37 = sub_1AD1C0();
    uint64_t v39 = v38;
    uint64_t v40 = sub_164A34();
    v41(v40);
    swift_bridgeObjectRelease();
    *uint64_t v23 = v37;
    v23[1] = v39;
    sub_163498(v53, a2, (void (*)(void))type metadata accessor for BloodPressureLogModel);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v50);
    uint64_t v42 = sub_22F80();
  }
  return sub_163440(v42, (void (*)(void))v43);
}

uint64_t sub_163440(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_163498(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_20688();
  uint64_t v4 = sub_CD4DC();
  v5(v4);
  return a2;
}

uint64_t sub_1634EC()
{
  return sub_16357C(&qword_2022A0, (void (*)(uint64_t))type metadata accessor for BloodPressureLogModel);
}

uint64_t sub_163534()
{
  return sub_16357C(&qword_202180, (void (*)(uint64_t))type metadata accessor for BloodPressureLogModel);
}

uint64_t sub_16357C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1635C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return BloodPressureLogModel.init(from:)(a1, a2);
}

uint64_t sub_1635DC(void *a1)
{
  return BloodPressureLogModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for BloodPressureLogModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AAD90();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_2022C8);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (uint64_t *)((char *)a1 + v10);
    uint64_t v13 = (uint64_t *)((char *)a2 + v10);
    uint64_t v14 = v13[1];
    void *v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = (uint64_t *)((char *)a1 + v11);
    uint64_t v16 = (uint64_t *)((char *)a2 + v11);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = a3[7];
    uint64_t v19 = a3[8];
    uint64_t v20 = (uint64_t *)((char *)a1 + v18);
    uint64_t v21 = (uint64_t *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = (char *)a1 + v19;
    uint64_t v24 = (char *)a2 + v19;
    uint64_t v25 = type metadata accessor for SnippetHeaderModel();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v25))
    {
      uint64_t v26 = sub_2694(&qword_2022D0);
      memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      uint64_t v27 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v23, v24, v27);
      uint64_t v28 = *(int *)(v25 + 20);
      uint64_t v29 = &v23[v28];
      int v30 = &v24[v28];
      uint64_t v31 = *((void *)v30 + 1);
      *(void *)uint64_t v29 = *(void *)v30;
      *((void *)v29 + 1) = v31;
      uint64_t v32 = *(int *)(v25 + 24);
      uint64_t v33 = &v23[v32];
      uint64_t v34 = &v24[v32];
      uint64_t v35 = *((void *)v34 + 1);
      *(void *)uint64_t v33 = *(void *)v34;
      *((void *)v33 + 1) = v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0, 1, v25);
    }
    uint64_t v36 = a3[9];
    uint64_t v37 = a3[10];
    uint64_t v38 = (uint64_t *)((char *)a1 + v36);
    uint64_t v39 = (uint64_t *)((char *)a2 + v36);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    uint64_t v41 = (uint64_t *)((char *)a1 + v37);
    uint64_t v42 = (uint64_t *)((char *)a2 + v37);
    uint64_t v43 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for BloodPressureLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AAD90();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 32);
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v6))
  {
    uint64_t v7 = sub_1AC1E0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = v12;
  uint64_t v13 = &a1[v9];
  uint64_t v14 = &a2[v9];
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = v15;
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = &a1[v16];
  uint64_t v19 = &a2[v16];
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = v20;
  uint64_t v21 = &a1[v17];
  uint64_t v22 = &a2[v17];
  uint64_t v23 = type metadata accessor for SnippetHeaderModel();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v23))
  {
    uint64_t v24 = sub_2694(&qword_2022D0);
    memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v25 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v21, v22, v25);
    uint64_t v26 = *(int *)(v23 + 20);
    uint64_t v27 = &v21[v26];
    uint64_t v28 = &v22[v26];
    uint64_t v29 = *((void *)v28 + 1);
    *(void *)uint64_t v27 = *(void *)v28;
    *((void *)v27 + 1) = v29;
    uint64_t v30 = *(int *)(v23 + 24);
    uint64_t v31 = &v21[v30];
    uint64_t v32 = &v22[v30];
    uint64_t v33 = *((void *)v32 + 1);
    *(void *)uint64_t v31 = *(void *)v32;
    *((void *)v31 + 1) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v23);
  }
  uint64_t v34 = a3[9];
  uint64_t v35 = a3[10];
  uint64_t v36 = &a1[v34];
  uint64_t v37 = &a2[v34];
  uint64_t v38 = *((void *)v37 + 1);
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = v38;
  uint64_t v39 = &a1[v35];
  uint64_t v40 = &a2[v35];
  uint64_t v41 = *((void *)v40 + 1);
  *(void *)uint64_t v39 = *(void *)v40;
  *((void *)v39 + 1) = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[6];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = *((void *)v19 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = type metadata accessor for SnippetHeaderModel();
  int v24 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1, v23);
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v23);
  if (!v24)
  {
    if (!v25)
    {
      uint64_t v41 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 24))(v21, v22, v41);
      uint64_t v42 = *(int *)(v23 + 20);
      uint64_t v43 = &v21[v42];
      uint64_t v44 = &v22[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      *((void *)v43 + 1) = *((void *)v44 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v45 = *(int *)(v23 + 24);
      uint64_t v46 = &v21[v45];
      uint64_t v47 = &v22[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      *((void *)v46 + 1) = *((void *)v47 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_163440((uint64_t)v21, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    uint64_t v33 = sub_2694(&qword_2022D0);
    memcpy(v21, v22, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v26 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v21, v22, v26);
  uint64_t v27 = *(int *)(v23 + 20);
  uint64_t v28 = &v21[v27];
  uint64_t v29 = &v22[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  uint64_t v30 = *(int *)(v23 + 24);
  uint64_t v31 = &v21[v30];
  uint64_t v32 = &v22[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v23);
LABEL_13:
  uint64_t v34 = a3[9];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = *((void *)v36 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[10];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = *((void *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  uint64_t v9 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1, v12))
  {
    uint64_t v13 = sub_2694(&qword_2022D0);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v10, v11, v14);
    *(_OWORD *)&v10[*(int *)(v12 + 20)] = *(_OWORD *)&v11[*(int *)(v12 + 20)];
    *(_OWORD *)&v10[*(int *)(v12 + 24)] = *(_OWORD *)&v11[*(int *)(v12 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0, 1, v12);
  }
  uint64_t v15 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)&a1[v15] = *(_OWORD *)&a2[v15];
  return a1;
}

char *assignWithTake for BloodPressureLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = v15;
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v20 = *(void *)v18;
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = v20;
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[7];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v25 = *(void *)v23;
  uint64_t v24 = *((void *)v23 + 1);
  *(void *)uint64_t v22 = v25;
  *((void *)v22 + 1) = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[8];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = type metadata accessor for SnippetHeaderModel();
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v29);
  int v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1, v29);
  if (!v30)
  {
    if (!v31)
    {
      uint64_t v45 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 40))(v27, v28, v45);
      uint64_t v46 = *(int *)(v29 + 20);
      uint64_t v47 = &v27[v46];
      uint64_t v48 = &v28[v46];
      uint64_t v50 = *(void *)v48;
      uint64_t v49 = *((void *)v48 + 1);
      *(void *)uint64_t v47 = v50;
      *((void *)v47 + 1) = v49;
      swift_bridgeObjectRelease();
      uint64_t v51 = *(int *)(v29 + 24);
      uint64_t v52 = &v27[v51];
      uint64_t v53 = &v28[v51];
      uint64_t v55 = *(void *)v53;
      uint64_t v54 = *((void *)v53 + 1);
      *(void *)uint64_t v52 = v55;
      *((void *)v52 + 1) = v54;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_163440((uint64_t)v27, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    uint64_t v33 = sub_2694(&qword_2022D0);
    memcpy(v27, v28, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v32 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v27, v28, v32);
  *(_OWORD *)&v27[*(int *)(v29 + 20)] = *(_OWORD *)&v28[*(int *)(v29 + 20)];
  *(_OWORD *)&v27[*(int *)(v29 + 24)] = *(_OWORD *)&v28[*(int *)(v29 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0, 1, v29);
LABEL_13:
  uint64_t v34 = a3[9];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v38 = *(void *)v36;
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[10];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BloodPressureLogModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_16454C);
}

uint64_t sub_16454C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_10:
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
  if (a2 != 2147483646)
  {
    uint64_t v8 = sub_2694(&qword_2022D0);
    uint64_t v9 = a1 + *(int *)(a3 + 32);
    goto LABEL_10;
  }
  unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  int v11 = v10 - 1;
  if (v11 < 0) {
    int v11 = -1;
  }
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for BloodPressureLogModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_164628);
}

void sub_164628(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
      return;
    }
    uint64_t v10 = sub_2694(&qword_2022D0);
    uint64_t v11 = a1 + *(int *)(a4 + 32);
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, a2, a2, v10);
}

void sub_1646E0()
{
  sub_E29C8(319, &qword_202C60, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  if (v0 <= 0x3F)
  {
    sub_E29C8(319, (unint64_t *)&qword_202C70, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for BloodPressureLogModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1648BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BloodPressureLogModel.CodingKeys()
{
  return &type metadata for BloodPressureLogModel.CodingKeys;
}

unint64_t sub_1648F8()
{
  unint64_t result = qword_208110;
  if (!qword_208110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208110);
  }
  return result;
}

unint64_t sub_164948()
{
  unint64_t result = qword_208118;
  if (!qword_208118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208118);
  }
  return result;
}

unint64_t sub_164998()
{
  unint64_t result = qword_208120[0];
  if (!qword_208120[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_208120);
  }
  return result;
}

uint64_t sub_1649E4()
{
  return type metadata accessor for BloodPressureLogModel();
}

uint64_t sub_164A00()
{
  return type metadata accessor for BloodPressureLogModel();
}

void sub_164A18(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_164A34()
{
  return *(void *)(v0 - 120);
}

void sub_164A48()
{
  qword_214760 = (uint64_t)&off_1F4478;
}

uint64_t sub_164A5C@<X0>(long long *a1@<X0>, long long *a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_1AC250();
  uint64_t v11 = sub_53D4(v10);
  __chkstk_darwin(v11);
  sub_24D80(a1, a5);
  sub_24D80(a2, a5 + 40);
  memcpy((void *)(a5 + 80), a3, 0xA0uLL);
  *(void *)(a5 + 240) = a4;
  *(unsigned char *)(a5 + 248) = 0;
  uint64_t v12 = sub_1AB1C0();
  sub_47658();
  uint64_t v13 = sub_1AB1B0();
  *(void *)(a5 + 280) = v12;
  *(void *)(a5 + 288) = &protocol witness table for ResponseFactory;
  *(void *)(a5 + 256) = v13;
  type metadata accessor for WellnessCATsSimple();
  sub_1AC240();
  *(void *)(a5 + 296) = sub_1AC210();
  type metadata accessor for WellnessQueryingCATsSimple();
  sub_1AC240();
  uint64_t result = sub_1AC210();
  *(void *)(a5 + 304) = result;
  *(unsigned char *)(a5 + 312) = 82;
  return result;
}

uint64_t destroy for GetBloodPressureFlow(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);
  swift_unknownObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 256);
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for GetBloodPressureFlow(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  long long v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 160, a2 + 160);
  long long v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 200, a2 + 200);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  uint64_t v11 = *(void *)(a2 + 280);
  uint64_t v10 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = v11;
  *(void *)(a1 + 288) = v10;
  uint64_t v12 = **(void (***)(uint64_t, uint64_t, uint64_t))(v11 - 8);
  swift_unknownObjectRetain();
  v12(a1 + 256, a2 + 256, v11);
  uint64_t v13 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v13;
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GetBloodPressureFlow(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  sub_577C((uint64_t *)(a1 + 256), (uint64_t *)(a2 + 256));
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_retain();
  swift_release();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  return a1;
}

void *initializeWithTake for GetBloodPressureFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x139uLL);
}

uint64_t assignWithTake for GetBloodPressureFlow(uint64_t a1, uint64_t a2)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 160);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 200);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  uint64_t v7 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v7;
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 256);
  long long v8 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v8;
  uint64_t v9 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v9;
  swift_release();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_release();
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  return a1;
}

uint64_t getEnumTagSinglePayload for GetBloodPressureFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 313))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GetBloodPressureFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 312) = 0;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 313) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 313) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GetBloodPressureFlow()
{
  return &type metadata for GetBloodPressureFlow;
}

uint64_t sub_165160()
{
  sub_B7028();

  return sub_1AAF80();
}

uint64_t sub_1651B4()
{
  sub_A364();
  v1[103] = v0;
  v1[102] = v2;
  uint64_t v3 = type metadata accessor for UnavailableDataFlow();
  v1[104] = v3;
  sub_53D4(v3);
  v1[105] = sub_A42C();
  uint64_t v4 = sub_2694(&qword_201CC8);
  sub_53D4(v4);
  v1[106] = sub_A220();
  v1[107] = swift_task_alloc();
  uint64_t v5 = sub_1AC250();
  sub_53D4(v5);
  v1[108] = sub_A42C();
  uint64_t v6 = sub_1AC800();
  v1[109] = v6;
  sub_A19C(v6);
  v1[110] = v7;
  v1[111] = sub_A220();
  v1[112] = swift_task_alloc();
  uint64_t v8 = sub_1AAA10();
  v1[113] = v8;
  sub_A19C(v8);
  v1[114] = v9;
  v1[115] = sub_A42C();
  uint64_t v10 = sub_2694(&qword_201E10);
  sub_53D4(v10);
  v1[116] = sub_A220();
  v1[117] = swift_task_alloc();
  v1[118] = swift_task_alloc();
  v1[119] = swift_task_alloc();
  uint64_t v11 = sub_1AABD0();
  v1[120] = v11;
  sub_A19C(v11);
  v1[121] = v12;
  v1[122] = sub_A220();
  v1[123] = swift_task_alloc();
  v1[124] = swift_task_alloc();
  v1[125] = swift_task_alloc();
  v1[126] = swift_task_alloc();
  v1[127] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_1653A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  uint64_t v19 = (void *)v18[103];
  sub_1AC3B0();
  uint64_t v20 = sub_16647C();
  v18[128] = v20;
  uint64_t v21 = v19[8];
  uint64_t v22 = v19[9];
  sub_2E38(v19 + 5, v21);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
  uint64_t v23 = (void *)sub_47968();
  sub_2E38(v23, v24);
  char v25 = sub_1AB050();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v18 + 88));
  if ((v25 & 1) == 0)
  {
LABEL_13:
    uint64_t v51 = v18[112];
    uint64_t v52 = v18[110];
    uint64_t v53 = v18[109];
    uint64_t v54 = sub_1AC7D0();
    v18[129] = v54;
    sub_A340();
    uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16);
    v18[130] = v55;
    v18[131] = (v52 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v55(v51, v54, v53);
    uint64_t v56 = v20;
    uint64_t v57 = sub_1AC7F0();
    os_log_type_t v58 = sub_1ACF50();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (_DWORD *)sub_A4B0();
      uint64_t v60 = (void *)swift_slowAlloc();
      *uint64_t v59 = 138412290;
      v18[101] = v56;
      uint64_t v61 = v56;
      sub_1ACFE0();
      void *v60 = v56;

      sub_A27C(&def_342E4, v62, v63, "Created intent: %@");
      sub_2694(&qword_201DE0);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();
    }
    else
    {

      uint64_t v57 = v56;
    }
    uint64_t v64 = v18[110];
    uint64_t v65 = v18[103];

    v18[132] = *(void *)(v64 + 8);
    v18[133] = (v64 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_5B530();
    v66();
    uint64_t v67 = *(void **)(v65 + 240);
    v18[2] = v18;
    v18[7] = v18 + 99;
    v18[3] = sub_1659F4;
    v18[87] = swift_continuation_init();
    v18[83] = _NSConcreteStackBlock;
    v18[84] = 0x40000000;
    v18[85] = sub_6AA8;
    v18[86] = &unk_1F90C8;
    [v67 handleGetBloodPressure:v56 completion:v18 + 83];
    sub_6F544();
    return _swift_continuation_await(v68);
  }
  id v26 = [v20 startDate];
  if (!v26)
  {
    sub_A708(v18[119], v27, v28, v18[120]);
    goto LABEL_9;
  }
  uint64_t v29 = v26;
  uint64_t v30 = v18[121];
  uint64_t v31 = v18[120];
  uint64_t v32 = v18[119];
  sub_1AABB0();

  uint64_t v33 = *(void (**)(void))(v30 + 32);
  sub_FD34C();
  v33();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v32, 0, 1, v31);
  sub_A208(v32, 1, v31);
  if (v34)
  {
LABEL_9:
    uint64_t v48 = v18[119];
LABEL_12:
    sub_5B028(v48, &qword_201E10);
    goto LABEL_13;
  }
  sub_FD34C();
  v33();
  id v35 = [v20 endDate];
  if (!v35)
  {
    sub_A708(v18[118], v36, v37, v18[120]);
    goto LABEL_11;
  }
  uint64_t v38 = v35;
  uint64_t v39 = v18[120];
  uint64_t v40 = v18[118];
  sub_1AABB0();

  sub_FD34C();
  v33();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v40, 0, 1, v39);
  sub_A208(v40, 1, v39);
  if (v34)
  {
LABEL_11:
    uint64_t v49 = v18[118];
    sub_E530();
    v50();
    uint64_t v48 = v49;
    goto LABEL_12;
  }
  uint64_t v82 = v18[126];
  uint64_t v83 = v18[127];
  uint64_t v81 = v18[125];
  uint64_t v41 = v18[124];
  uint64_t v42 = v18[121];
  uint64_t v43 = v18[120];
  uint64_t v44 = v18[115];
  uint64_t v45 = v18[114];
  uint64_t v84 = v18[113];
  sub_FD34C();
  v33();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  v46(v82, v83, v43);
  v46(v41, v81, v43);
  sub_1AA9D0();
  LOBYTE(v42) = sub_1AC700();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v84);
  if (v42)
  {
    uint64_t v47 = *(void (**)(void))(v18[121] + 8);
    sub_47814();
    v47();
    sub_47814();
    v47();
    goto LABEL_13;
  }
  uint64_t v70 = v18[121];
  sub_1AC320();
  sub_E344C(v18 + 43);
  sub_E3600();
  sub_1AB120();

  sub_FCBA4((uint64_t)(v18 + 43));
  uint64_t v71 = *(void (**)(void))(v70 + 8);
  sub_5B530();
  v71();
  sub_5B530();
  v71();
  sub_159848();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_6F544();
  return v73(v72, v73, v74, v75, v76, v77, v78, v79, a9, a10, a11, v81, v82, v83, v84, a16, a17, a18);
}

uint64_t sub_1659F4()
{
  sub_A364();
  uint64_t v1 = *v0;
  sub_E53C();
  *uint64_t v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_165AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 1040);
  uint64_t v20 = *(void *)(v18 + 1032);
  uint64_t v21 = *(void *)(v18 + 888);
  uint64_t v22 = *(void *)(v18 + 872);
  uint64_t v23 = *(void **)(v18 + 792);
  *(void *)(v18 + 1072) = v23;
  sub_A340();
  v19(v21, v20, v22);
  uint64_t v24 = v23;
  char v25 = sub_1AC7F0();
  os_log_type_t v26 = sub_1ACF50();
  if (os_log_type_enabled(v25, v26))
  {
    a15 = (void *)(v18 + 800);
    uint64_t v27 = (_DWORD *)sub_A4B0();
    uint64_t v28 = (void *)swift_slowAlloc();
    *uint64_t v27 = 138412290;
    *(void *)(v18 + 800) = v24;
    uint64_t v29 = v24;
    sub_1ACFE0();
    *uint64_t v28 = v24;

    sub_A27C(&def_342E4, v30, v31, "Received response: %@");
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
  }
  uint64_t v32 = (*(uint64_t (**)(void, void))(v18 + 1056))(*(void *)(v18 + 888), *(void *)(v18 + 872));
  uint64_t v33 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *v24)))(v32);
  if (v33 != 4)
  {
    if (v33 != 102)
    {
      if (v33 == 101)
      {
        char v34 = *(void **)(v18 + 1024);
        uint64_t v35 = *(void *)(v18 + 824);
        sub_1AC390();
        char v36 = *(unsigned char *)(v35 + 312);
        sub_E3FC(v35 + 40, v18 + 88);
        sub_9B48(v35 + 80, v18 + 128);
        uint64_t v37 = sub_1AB1C0();
        sub_47658();
        uint64_t v38 = sub_1AB1B0();
        *(void *)(v18 + 312) = v37;
        *(void *)(v18 + 320) = &protocol witness table for ResponseFactory;
        *(void *)(v18 + 288) = v38;
        type metadata accessor for WellnessCATsSimple();
        sub_1AC240();
        uint64_t v39 = sub_1AC210();
        type metadata accessor for WellnessCATs();
        sub_1AC240();
        uint64_t v40 = sub_1AC1A0();
        *(unsigned char *)(v18 + 80) = v36;
        *(void *)(v18 + 328) = v39;
        *(void *)(v18 + 336) = v40;
        sub_9D40();
        sub_1AB120();

        sub_9D8C(v18 + 80);
      }
      else
      {
        uint64_t v73 = *(void **)(v18 + 1024);
        uint64_t v74 = *(void *)(v18 + 824);
        sub_1AC320();
        sub_9B48(v74 + 80, v18 + 504);
        sub_9BA4();
        sub_1AB120();

        sub_9BF0(v18 + 504);
      }
LABEL_23:
      sub_159848();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_E564();
      sub_6F544();
      return v90(v89, v90, v91, v92, v93, v94, v95, v96, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
    }
    a15 = v24;
    uint64_t v44 = *(void **)(v18 + 1024);
    uint64_t v45 = *(void *)(v18 + 856);
    sub_1AC320();
    sub_FD5BC(v45);
    id v46 = [v44 startDate];
    if (v46)
    {
      uint64_t v49 = v46;
      uint64_t v50 = *(void *)(v18 + 968);
      uint64_t v51 = *(void *)(v18 + 960);
      uint64_t v52 = *(void *)(v18 + 936);
      sub_1AABB0();

      uint64_t v53 = *(void (**)(void))(v50 + 32);
      sub_FD34C();
      v53();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v52, 0, 1, v51);
      sub_A208(v52, 1, v51);
      if (!v54)
      {
        uint64_t v55 = *(void **)(v18 + 1024);
        sub_FD34C();
        v53();
        id v56 = [v55 endDate];
        if (v56)
        {
          uint64_t v59 = v56;
          uint64_t v60 = *(void *)(v18 + 960);
          uint64_t v61 = *(void *)(v18 + 928);
          sub_1AABB0();

          sub_FD34C();
          v53();
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v61, 0, 1, v60);
          sub_A208(v61, 1, v60);
          if (!v54)
          {
            uint64_t v62 = *(void *)(v18 + 1008);
            uint64_t v63 = *(void *)(v18 + 984);
            uint64_t v64 = *(void *)(v18 + 968);
            uint64_t v65 = *(void *)(v18 + 960);
            a13 = *(void *)(v18 + 856);
            a14 = *(void *)(v18 + 904);
            uint64_t v66 = *(void *)(v18 + 848);
            sub_FD34C();
            v53();
            uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16);
            v67(v62, v63, v65);
            uint64_t v68 = sub_4788C();
            ((void (*)(uint64_t))v67)(v68);
            sub_1AA9D0();
            uint64_t v69 = *(void (**)(void))(v64 + 8);
            sub_FD430();
            v69();
            sub_FD430();
            v69();
            sub_5B028(a13, &qword_201CC8);
            sub_47F14();
            _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v70, v71, v72, a14);
            sub_A76E8(v66, a13, &qword_201CC8);
LABEL_22:
            uint64_t v78 = *(void **)(v18 + 1024);
            uint64_t v79 = *(void *)(v18 + 856);
            uint64_t v80 = *(unsigned char **)(v18 + 840);
            uint64_t v81 = *(int **)(v18 + 832);
            uint64_t v82 = *(void *)(v18 + 824);
            char v83 = *(unsigned char *)(v82 + 312);
            sub_CCD04(v79, (uint64_t)&v80[v81[5]], &qword_201CC8);
            sub_E3FC(v82 + 40, (uint64_t)&v80[v81[6]]);
            sub_9B48(v82 + 80, (uint64_t)&v80[v81[7]]);
            uint64_t v84 = sub_1AB1C0();
            sub_47658();
            uint64_t v85 = sub_1AB1B0();
            uint64_t v86 = (uint64_t *)&v80[v81[8]];
            v86[3] = v84;
            v86[4] = (uint64_t)&protocol witness table for ResponseFactory;
            *uint64_t v86 = v85;
            type metadata accessor for WellnessCATsSimple();
            sub_1AC240();
            uint64_t v87 = sub_1AC210();
            type metadata accessor for WellnessCATs();
            sub_1AC240();
            uint64_t v88 = sub_1AC1A0();
            *uint64_t v80 = v83;
            *(void *)&v80[v81[9]] = v87;
            *(void *)&v80[v81[10]] = v88;
            sub_16C0CC(&qword_201DF0, (void (*)(uint64_t))type metadata accessor for UnavailableDataFlow);
            sub_1AB120();

            sub_16C078((uint64_t)v80, (void (*)(void))type metadata accessor for UnavailableDataFlow);
            sub_5B028(v79, &qword_201CC8);
            goto LABEL_23;
          }
        }
        else
        {
          sub_A708(*(void *)(v18 + 928), v57, v58, *(void *)(v18 + 960));
        }
        uint64_t v76 = *(void *)(v18 + 928);
        sub_E530();
        v77();
        uint64_t v75 = v76;
LABEL_21:
        sub_5B028(v75, &qword_201E10);
        goto LABEL_22;
      }
    }
    else
    {
      sub_A708(*(void *)(v18 + 936), v47, v48, *(void *)(v18 + 960));
    }
    uint64_t v75 = *(void *)(v18 + 936);
    goto LABEL_21;
  }
  uint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v18 + 1080) = v41;
  *uint64_t v41 = v18;
  v41[1] = sub_166294;
  sub_6F544();
  return sub_1669E8();
}

uint64_t sub_166294()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 1088) = v3;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_166364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_6F9A0();
  uint64_t v19 = *(void **)(v18 + 1072);
  uint64_t v20 = *(void **)(v18 + 1024);
  sub_1AC350();
  sub_1AB130();
  swift_release();

  sub_159848();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_6F544();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

void *sub_16647C()
{
  sub_1AAD30();
  sub_52C4();
  v49[1] = v2;
  v49[2] = v1;
  __chkstk_darwin(v1);
  v49[0] = (char *)v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2694(&qword_201E10);
  uint64_t v5 = sub_53D4(v4);
  __chkstk_darwin(v5);
  sub_E594();
  uint64_t v55 = v6;
  __chkstk_darwin(v7);
  uint64_t v50 = (uint64_t)v49 - v8;
  uint64_t v9 = sub_1AABD0();
  sub_52C4();
  uint64_t v56 = v10;
  __chkstk_darwin(v11);
  sub_E594();
  uint64_t v54 = v12;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v53 = (char *)v49 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v49 - v16;
  uint64_t v18 = sub_2694(&qword_201CC8);
  uint64_t v19 = sub_53D4(v18);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)v49 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (char *)v49 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)v49 - v29;
  id v51 = [objc_allocWithZone((Class)sub_1AC580()) init];
  uint64_t v32 = *(void *)(v0 + 24);
  uint64_t v31 = *(void *)(v0 + 32);
  sub_2E38((void *)v0, v32);
  (*(void (**)(uint64_t, uint64_t))(v31 + 32))(v32, v31);
  sub_159240((uint64_t)v28, *(unsigned __int8 *)(v0 + 312), (uint64_t)v30);
  sub_5B028((uint64_t)v28, &qword_201CC8);
  uint64_t v52 = v30;
  sub_CCD04((uint64_t)v30, (uint64_t)v25, &qword_201CC8);
  uint64_t v33 = sub_1AAA10();
  sub_A208((uint64_t)v25, 1, v33);
  if (v36)
  {
    sub_5B028((uint64_t)v25, &qword_201CC8);
    uint64_t v34 = v50;
    sub_FD5BC(v50);
  }
  else
  {
    uint64_t v34 = v50;
    sub_1AA9F0();
    sub_E558();
    v35();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v34, 0, 1, v9);
    sub_A208(v34, 1, v9);
    if (!v36)
    {
      uint64_t v39 = v56;
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v17, v34, v9);
      uint64_t v40 = v55;
      goto LABEL_7;
    }
  }
  sub_1AABC0();
  sub_1AAD00();
  sub_1AACA0();
  sub_E558();
  v37();
  uint64_t v39 = v56;
  sub_E530();
  v38();
  sub_5B028(v34, &qword_201E10);
  uint64_t v40 = v55;
LABEL_7:
  uint64_t v41 = v51;
  Class isa = sub_1AAB60().super.isa;
  uint64_t v43 = *(void (**)(void))(v39 + 8);
  sub_C0CEC();
  v43();
  [v41 setStartDate:isa];

  uint64_t v44 = (uint64_t)v52;
  sub_CCD04((uint64_t)v52, (uint64_t)v22, &qword_201CC8);
  sub_A208((uint64_t)v22, 1, v33);
  if (v36)
  {
    sub_5B028((uint64_t)v22, &qword_201CC8);
    sub_FD5BC(v40);
LABEL_12:
    sub_1AABC0();
    sub_9F1D8(v54);
    sub_C0CEC();
    v43();
    sub_5B028(v40, &qword_201E10);
    goto LABEL_13;
  }
  sub_1AA9C0();
  sub_E558();
  v45();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v40, 0, 1, v9);
  sub_A208(v40, 1, v9);
  if (v46) {
    goto LABEL_12;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v54, v40, v9);
LABEL_13:
  Class v47 = sub_1AAB60().super.isa;
  sub_C0CEC();
  v43();
  [v41 setEndDate:v47];

  sub_5B028(v44, &qword_201CC8);
  return v41;
}

uint64_t sub_1669E8()
{
  sub_A364();
  v1[57] = v2;
  v1[58] = v0;
  v1[56] = v3;
  uint64_t v4 = sub_1AB0A0();
  v1[59] = v4;
  sub_A19C(v4);
  v1[60] = v5;
  v1[61] = sub_A220();
  v1[62] = swift_task_alloc();
  uint64_t v6 = sub_1AB3D0();
  v1[63] = v6;
  sub_A19C(v6);
  v1[64] = v7;
  v1[65] = sub_A42C();
  uint64_t v8 = sub_2694(&qword_201E20);
  sub_53D4(v8);
  v1[66] = sub_A42C();
  uint64_t v9 = sub_1AC800();
  v1[67] = v9;
  sub_A19C(v9);
  v1[68] = v10;
  v1[69] = sub_A220();
  v1[70] = swift_task_alloc();
  v1[71] = swift_task_alloc();
  uint64_t v11 = sub_2694(&qword_201E10);
  sub_53D4(v11);
  v1[72] = sub_A220();
  v1[73] = swift_task_alloc();
  v1[74] = swift_task_alloc();
  v1[75] = swift_task_alloc();
  v1[76] = swift_task_alloc();
  v1[77] = swift_task_alloc();
  uint64_t v12 = sub_1AABD0();
  v1[78] = v12;
  sub_A19C(v12);
  v1[79] = v13;
  v1[80] = sub_A220();
  v1[81] = swift_task_alloc();
  v1[82] = swift_task_alloc();
  v1[83] = swift_task_alloc();
  uint64_t v14 = sub_2694(&qword_201CC8);
  sub_53D4(v14);
  v1[84] = sub_A220();
  v1[85] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v15, v16, v17);
}

uint64_t sub_166C04()
{
  uint64_t v114 = v0;
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = (id *)(v0 + 448);
  uint64_t v3 = *(void **)(v0 + 448);
  uint64_t v4 = sub_1AAA10();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, v4);
  uint64_t v5 = &selRef_handleGetHealthQuantity_completion_;
  id v6 = [v3 startDate];
  uint64_t v9 = &selRef_handleGetHealthQuantity_completion_;
  if (!v6)
  {
    sub_A708(*(void *)(v0 + 616), v7, v8, *(void *)(v0 + 624));
    goto LABEL_7;
  }
  uint64_t v10 = v6;
  uint64_t v11 = *(void *)(v0 + 632);
  sub_1AABB0();

  uint64_t v12 = *(void (**)(uint64_t))(v11 + 32);
  uint64_t v13 = sub_16C59C();
  v12(v13);
  uint64_t v14 = sub_16C56C();
  uint64_t v5 = &selRef_handleGetHealthQuantity_completion_;
  sub_A208(v14, v15, v16);
  if (v17)
  {
LABEL_7:
    sub_5B028(*(void *)(v0 + 616), &qword_201E10);
    goto LABEL_11;
  }
  uint64_t v18 = *(void **)(v0 + 448);
  ((void (*)(void, void, void))v12)(*(void *)(v0 + 664), *(void *)(v0 + 616), *(void *)(v0 + 624));
  id v19 = [v18 endDate];
  if (!v19)
  {
    sub_A708(*(void *)(v0 + 608), v20, v21, *(void *)(v0 + 624));
    goto LABEL_9;
  }
  uint64_t v22 = v19;
  sub_1AABB0();

  uint64_t v23 = sub_16C59C();
  v12(v23);
  uint64_t v24 = sub_16C56C();
  sub_A208(v24, v25, v26);
  if (v17)
  {
LABEL_9:
    uint64_t v40 = *(void *)(v0 + 608);
    sub_E530();
    v41();
    sub_5B028(v40, &qword_201E10);
    goto LABEL_10;
  }
  uint64_t v110 = *(void *)(v0 + 680);
  uint64_t v109 = *(void *)(v0 + 672);
  uint64_t v27 = *(void *)(v0 + 664);
  uint64_t v28 = *(void *)(v0 + 656);
  uint64_t v29 = *(void *)(v0 + 648);
  uint64_t v30 = *(void *)(v0 + 640);
  uint64_t v31 = *(void *)(v0 + 632);
  uint64_t v32 = *(void *)(v0 + 624);
  ((void (*)(uint64_t, void, uint64_t))v12)(v29, *(void *)(v0 + 608), v32);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
  v33(v28, v27, v32);
  v33(v30, v29, v32);
  sub_1AA9D0();
  uint64_t v34 = *(void (**)(void))(v31 + 8);
  uint64_t v2 = (id *)(v0 + 448);
  sub_47814();
  v34();
  uint64_t v9 = &selRef_handleGetHealthQuantity_completion_;
  sub_47814();
  v34();
  uint64_t v35 = sub_4788C();
  sub_5B028(v35, v36);
  sub_47F14();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v37, v38, v39, v4);
  sub_A76E8(v109, v110, &qword_201CC8);
LABEL_10:
  uint64_t v5 = &selRef_handleGetHealthQuantity_completion_;
LABEL_11:
  id v42 = [*v2 v5[7]];
  if (v42)
  {
    uint64_t v43 = v42;
    sub_1AABB0();

    uint64_t v44 = 0;
  }
  else
  {
    uint64_t v44 = 1;
  }
  uint64_t v45 = *(void **)(v0 + 448);
  uint64_t v46 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 600), v44, 1, *(void *)(v0 + 624));
  id v47 = [v45 v9[8]];
  if (v47)
  {
    uint64_t v48 = v47;
    sub_1AABB0();

    uint64_t v46 = 0;
  }
  uint64_t v49 = *(void **)(v0 + 456);
  uint64_t v50 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 592), v46, 1, *(void *)(v0 + 624));
  id v51 = [v49 sampleStartDate];
  if (v51)
  {
    uint64_t v52 = v51;
    sub_1AABB0();

    uint64_t v50 = 0;
  }
  uint64_t v53 = *(void **)(v0 + 456);
  uint64_t v54 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 584), v50, 1, *(void *)(v0 + 624));
  id v55 = [v53 sampleEndDate];
  if (v55)
  {
    uint64_t v56 = v55;
    sub_1AABB0();

    uint64_t v54 = 0;
  }
  uint64_t v57 = *(void *)(v0 + 568);
  uint64_t v58 = *(void *)(v0 + 544);
  uint64_t v59 = *(void *)(v0 + 536);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 + 576), v54, 1, *(void *)(v0 + 624));
  type metadata accessor for WellnessTime(0);
  sub_1993BC();
  uint64_t v61 = v60;
  *(void *)(v0 + 688) = v60;
  uint64_t v62 = sub_1AC7D0();
  sub_A340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v57, v62, v59);
  swift_retain_n();
  uint64_t v63 = sub_1AC7F0();
  os_log_type_t v64 = sub_1ACF50();
  BOOL v65 = os_log_type_enabled(v63, v64);
  uint64_t v66 = *(void *)(v0 + 568);
  uint64_t v67 = *(void *)(v0 + 544);
  uint64_t v68 = *(void *)(v0 + 536);
  if (v65)
  {
    uint64_t v108 = *(void *)(v0 + 536);
    uint64_t v107 = *(void *)(v0 + 568);
    uint64_t v69 = (uint8_t *)sub_A4B0();
    uint64_t v113 = sub_E620();
    *(_DWORD *)uint64_t v69 = 136315138;
    *(void *)(v0 + 432) = v61;
    swift_retain();
    uint64_t v70 = sub_1ACE00();
    *(void *)(v0 + 440) = sub_4A278(v70, v71, &v113);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&def_342E4, v63, v64, "Constructed wellness Time:  %s", v69, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v72(v107, v108);
  }
  else
  {
    swift_release_n();

    uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v72(v66, v68);
  }
  sub_153CEC(*(unsigned char *)(*(void *)(v0 + 464) + 312), *(void **)(v0 + 680));
  *(void *)(v0 + 240) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 248) = sub_45E30();
  *(unsigned char *)(v0 + 216) = 4;
  char v73 = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 216);
  if (v73)
  {
    uint64_t v74 = (void *)swift_task_alloc();
    *(void *)(v0 + 696) = v74;
    *uint64_t v74 = v0;
    v74[1] = sub_167524;
    sub_CD2D4();
    return sub_167FC8(v75, v76, v77, v78);
  }
  else if sub_19C12C() < 3u || (sub_1997D0())
  {
    sub_A340();
    uint64_t v81 = sub_16C4B8();
    v82(v81);
    char v83 = (void *)sub_1AC7F0();
    os_log_type_t v84 = sub_1ACF50();
    if (sub_29300(v84))
    {
      uint64_t v85 = (_WORD *)sub_292A0();
      sub_29368(v85);
      sub_A7FC(&def_342E4, v86, v87, "Has time frame, providing detailed result");
      sub_A1F0();
    }
    uint64_t v88 = *(void *)(v0 + 528);
    uint64_t v89 = *(void *)(v0 + 464);
    int8x16_t v111 = *(int8x16_t *)(v0 + 448);

    uint64_t v90 = sub_A7C4();
    ((void (*)(uint64_t))v72)(v90);
    sub_E3FC(v89 + 200, v0 + 256);
    sub_2E38((void *)(v0 + 256), *(void *)(v0 + 280));
    uint64_t v91 = (int8x16_t *)swift_task_alloc();
    *(void *)(v0 + 712) = v91;
    v91[1].i64[0] = v89;
    v91[1].i64[1] = v61;
    v91[2] = vextq_s8(v111, v111, 8uLL);
    v91[3].i64[0] = v88;
    uint64_t v92 = (void *)swift_task_alloc();
    *(void *)(v0 + 720) = v92;
    *uint64_t v92 = v0;
    v92[1] = sub_167740;
    sub_CD2D4();
    return sub_83708();
  }
  else
  {
    sub_A340();
    uint64_t v94 = sub_16C4B8();
    v95(v94);
    uint64_t v96 = (void *)sub_1AC7F0();
    os_log_type_t v97 = sub_1ACF50();
    if (sub_29300(v97))
    {
      char v98 = (_WORD *)sub_292A0();
      sub_29368(v98);
      sub_A7FC(&def_342E4, v99, v100, "Providing Simple Result");
      sub_A1F0();
    }
    uint64_t v112 = *(void *)(v0 + 528);
    uint64_t v102 = *(void *)(v0 + 456);
    uint64_t v101 = *(void *)(v0 + 464);
    uint64_t v103 = *(void *)(v0 + 448);

    sub_A7C4();
    sub_E530();
    ((void (*)(void))v72)();
    sub_E3FC(v101 + 200, v0 + 176);
    sub_2E38((void *)(v0 + 176), *(void *)(v0 + 200));
    char v104 = (void *)swift_task_alloc();
    *(void *)(v0 + 728) = v104;
    v104[2] = v61;
    v104[3] = v102;
    v104[4] = v101;
    v104[5] = v103;
    v104[6] = v112;
    char v105 = (void *)swift_task_alloc();
    *(void *)(v0 + 736) = v105;
    *char v105 = v0;
    v105[1] = sub_167B84;
    sub_CD2D4();
    return sub_83B04();
  }
}

uint64_t sub_167524()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 704) = v3;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

#error "167710: call analysis failed (funcsize=81)"

uint64_t sub_167740()
{
  sub_470A0();
  sub_E53C();
  *uint64_t v3 = v2;
  v2[46] = v1;
  v2[47] = v4;
  v2[48] = v0;
  sub_47C98();
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  sub_47C98();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

#error "167A0C: call analysis failed (funcsize=118)"

#error "167B54: call analysis failed (funcsize=79)"

uint64_t sub_167B84()
{
  sub_470A0();
  sub_E53C();
  *uint64_t v3 = v2;
  v2[49] = v1;
  v2[50] = v4;
  v2[51] = v0;
  sub_47C98();
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  sub_47C98();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

#error "167E50: call analysis failed (funcsize=118)"

#error "167F98: call analysis failed (funcsize=79)"

uint64_t sub_167FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[88] = v4;
  v5[87] = a4;
  v5[86] = a3;
  v5[85] = a2;
  v5[84] = a1;
  sub_2694(&qword_2022D0);
  v5[89] = swift_task_alloc();
  sub_2694(&qword_201E20);
  v5[90] = swift_task_alloc();
  sub_2694(&qword_201E28);
  v5[91] = swift_task_alloc();
  v5[92] = swift_task_alloc();
  v5[93] = type metadata accessor for BloodPressureQueryModel();
  v5[94] = swift_task_alloc();
  v5[95] = swift_task_alloc();
  v5[96] = swift_task_alloc();
  v5[97] = swift_task_alloc();
  v5[98] = swift_task_alloc();
  v5[99] = type metadata accessor for SnippetHeaderModel();
  v5[100] = swift_task_alloc();
  v5[101] = swift_task_alloc();
  v5[102] = swift_task_alloc();
  uint64_t v6 = sub_1AABD0();
  v5[103] = v6;
  v5[104] = *(void *)(v6 - 8);
  v5[105] = swift_task_alloc();
  sub_2694(&qword_201E10);
  v5[106] = swift_task_alloc();
  v5[107] = swift_task_alloc();
  v5[108] = swift_task_alloc();
  v5[109] = swift_task_alloc();
  v5[110] = swift_task_alloc();
  uint64_t v7 = sub_1AC800();
  v5[111] = v7;
  v5[112] = *(void *)(v7 - 8);
  v5[113] = swift_task_alloc();
  v5[114] = swift_task_alloc();
  v5[115] = swift_task_alloc();
  v5[116] = swift_task_alloc();
  v5[117] = swift_task_alloc();
  uint64_t v8 = sub_1AC1E0();
  v5[118] = v8;
  v5[119] = *(void *)(v8 - 8);
  v5[120] = swift_task_alloc();
  return _swift_task_switch(sub_168338, 0, 0);
}

uint64_t sub_168338()
{
  uint64_t v1 = sub_A7254(*(void **)(v0 + 680));
  if (v2)
  {
    uint64_t v3 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0) {
      uint64_t v3 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (v3)
    {
      sub_1ACE40();
      swift_bridgeObjectRelease();
      uint64_t v4 = sub_1AC1D0();
      uint64_t v6 = v5;
      uint64_t v7 = sub_A7C4();
      v8(v7);
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
  }
  sub_1AC7D0();
  sub_A340();
  uint64_t v9 = sub_4788C();
  v10(v9);
  uint64_t v11 = (void *)sub_1AC7F0();
  os_log_type_t v12 = sub_1ACF50();
  if (sub_29300(v12))
  {
    uint64_t v13 = (_WORD *)sub_292A0();
    sub_29368(v13);
    sub_A7FC(&def_342E4, v14, v15, "#GetBloodPressureFlow: intentResponse.unit is empty");
    sub_A1F0();
  }

  sub_FD430();
  v16();
  sub_1ACE40();
  uint64_t v4 = sub_1AC1D0();
  uint64_t v6 = v17;
  uint64_t v18 = sub_A7C4();
  v19(v18);
LABEL_10:
  uint64_t v20 = *(void **)(v0 + 672);
  *(void *)(v0 + 968) = v6;
  *(void *)(v0 + 976) = v4;
  sub_1ABFA0();
  sub_47658();
  sub_1ABF90();
  id v21 = [v20 startDate];
  if (v21)
  {
    uint64_t v22 = v21;
    sub_1AABB0();

    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = 1;
  }
  uint64_t v24 = *(void *)(v0 + 880);
  uint64_t v25 = *(void *)(v0 + 872);
  uint64_t v26 = *(void *)(v0 + 824);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v25, v23, 1, v26);
  sub_A76E8(v25, v24, &qword_201E10);
  LODWORD(v25) = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v24, 1, v26);
  uint64_t v27 = *(void *)(v0 + 880);
  if (v25)
  {
    sub_5B028(*(void *)(v0 + 880), &qword_201E10);
  }
  else
  {
    uint64_t v28 = sub_16C3AC();
    v29(v28);
    sub_5B028(v27, &qword_201E10);
    sub_1AABA0();
    sub_FD430();
    v30();
  }
  uint64_t v31 = *(void **)(v0 + 672);
  sub_1ABF70();
  swift_release();
  id v32 = [v31 endDate];
  if (v32)
  {
    uint64_t v33 = v32;
    sub_1AABB0();

    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v34 = 1;
  }
  uint64_t v35 = *(void *)(v0 + 864);
  uint64_t v36 = *(void *)(v0 + 856);
  uint64_t v37 = *(void *)(v0 + 824);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v36, v34, 1, v37);
  sub_A76E8(v36, v35, &qword_201E10);
  LODWORD(v36) = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v35, 1, v37);
  uint64_t v38 = *(void *)(v0 + 864);
  if (v36)
  {
    sub_5B028(*(void *)(v0 + 864), &qword_201E10);
  }
  else
  {
    uint64_t v39 = sub_16C3AC();
    v40(v39);
    sub_5B028(v38, &qword_201E10);
    sub_1AABA0();
    sub_FD430();
    v41();
  }
  id v42 = *(void **)(v0 + 672);
  sub_1ABF60();
  swift_release();
  uint64_t v43 = sub_1ABF80();
  *(void *)(v0 + 984) = v43;
  swift_release();
  id v44 = [v42 startDate];
  uint64_t v47 = *(void *)(v0 + 848);
  if (v44)
  {
    uint64_t v48 = v44;
    uint64_t v49 = *(void *)(v0 + 824);
    sub_1AABB0();

    uint64_t v50 = sub_A7C4();
    v51(v50);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v47, 0, 1, v49);
    sub_A208(v47, 1, v49);
    if (v52) {
      char v53 = 1;
    }
    else {
      char v53 = 0;
    }
  }
  else
  {
    char v53 = 1;
    sub_A708(*(void *)(v0 + 848), v45, v46, *(void *)(v0 + 824));
  }
  sub_5B028(*(void *)(v0 + 848), &qword_201E10);
  uint64_t v54 = (void *)swift_task_alloc();
  *(void *)(v0 + 992) = v54;
  void *v54 = v0;
  v54[1] = sub_1687F4;
  uint64_t v55 = *(void *)(v0 + 688);
  return sub_7B3B8(v43, v53, v55);
}

uint64_t sub_1687F4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *unint64_t v2 = v1;
  *unint64_t v2 = *v0;
  *(void *)(v1 + 1000) = v3;
  *(void *)(v1 + 1008) = v4;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1688C8()
{
  sub_A364();
  sub_2F2B8(*(unsigned char *)(v0[88] + 312));
  v0[127] = v1;
  unint64_t v2 = (void *)swift_task_alloc();
  v0[128] = v2;
  *unint64_t v2 = v0;
  v2[1] = sub_168970;
  return sub_7A988();
}

uint64_t sub_168970()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *unint64_t v2 = v1;
  v1[72] = v0;
  v1[73] = v3;
  v1[74] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 1032) = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_168A60()
{
  if (!*(void *)(v0 + 1032))
  {
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v1 = *(void *)(v0 + 816);
  uint64_t v2 = *(void *)(v0 + 792);
  uint64_t v3 = *(void *)(v0 + 704);
  sub_1ACE40();
  swift_bridgeObjectRelease();
  char v4 = *(unsigned char *)(v3 + 312);
  unint64_t v5 = sub_34250(v4);
  unint64_t v7 = v6;
  unint64_t v8 = sub_2F2B8(v4);
  uint64_t v9 = (unint64_t *)(v1 + *(int *)(v2 + 20));
  *uint64_t v9 = v5;
  v9[1] = v7;
  uint64_t v10 = (unint64_t *)(v1 + *(int *)(v2 + 24));
  *uint64_t v10 = v8;
  v10[1] = v11;
  if sub_19C12C() < 3u || (sub_1997D0())
  {
    os_log_type_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 1048) = v12;
    void *v12 = v0;
    v12[1] = sub_1691C4;
    sub_16C44C();
    return sub_7A658(v13, v14);
  }
  [*(id *)(v0 + 680) systolic];
  if ((v17 & 0x7FFFFFFFFFFFFFFFLL) == 0
    || ([*(id *)(v0 + 680) diastolic], (v18 & 0x7FFFFFFFFFFFFFFFLL) == 0))
  {
    uint64_t v47 = *(void *)(v0 + 928);
    uint64_t v48 = *(void *)(v0 + 896);
    uint64_t v49 = *(void *)(v0 + 888);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v50 = sub_1AC7D0();
    sub_A340();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v47, v50, v49);
    id v51 = (void *)sub_1AC7F0();
    os_log_type_t v52 = sub_1ACF60();
    if (sub_29300(v52))
    {
      char v53 = (_WORD *)sub_292A0();
      sub_29368(v53);
      sub_A7FC(&def_342E4, v54, v55, "#GetBloodPressureFlow: systolic or diastolic values is/are empty");
      sub_A1F0();
    }
    uint64_t v56 = *(void *)(v0 + 816);
    uint64_t v57 = *(void *)(v0 + 704);

    sub_FD430();
    v58();
    sub_9B48(v57 + 80, v0 + 16);
    sub_9BA4();
    sub_1AAF70();
    swift_release();
    sub_9BF0(v0 + 16);
    sub_16C078(v56, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_16C44C();
    __asm { BRAA            X2, X16 }
  }
  uint64_t v19 = *(void *)(v0 + 1008);
  uint64_t v20 = *(void **)(v0 + 680);
  [v20 systolic];
  uint64_t v21 = sub_16C638();
  uint64_t v23 = sub_16C5B4(v21, v22);
  swift_bridgeObjectRelease();
  [v20 diastolic];
  double v25 = v24;
  uint64_t v26 = sub_A7254(v20);
  uint64_t v28 = sub_C0448(v26, v27, v4, v25);
  swift_bridgeObjectRelease();
  if (!v19)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  uint64_t v62 = *(void *)(v0 + 968);
  uint64_t v63 = *(void *)(v0 + 976);
  uint64_t v29 = *(void *)(v0 + 816);
  uint64_t v61 = *(void *)(v0 + 792);
  uint64_t v30 = *(void *)(v0 + 784);
  uint64_t v31 = *(void *)(v0 + 768);
  uint64_t v32 = *(void *)(v0 + 728);
  uint64_t v33 = *(void *)(v0 + 720);
  uint64_t v34 = *(void *)(v0 + 712);
  uint64_t v35 = *(void *)(v0 + 696);
  sub_1ACE40();
  swift_bridgeObjectRelease();
  sub_16C5E4();
  sub_CCD04(v35, v33, &qword_201E20);
  sub_16C024(v29, v34, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_47F14();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v36, v37, v38, v61);
  BloodPressureQueryModel.init(systolic:diastolic:systolicMin:systolicMax:diastolicMin:diastolicMax:unitLabel:systolicLabel:diastolicLabel:dateLabel:url:headerModel:)(v23, 0, v28, 0, 0, 1, 0, 1, v31, 0, 1, 0, 1, v63, v62, 0, 0, 0, 0,
    v32,
    v33,
    v34);
  sub_16BFC0(v31, v30);
  swift_retain();
  uint64_t v39 = (void *)swift_task_alloc();
  *(void *)(v0 + 1072) = v39;
  *uint64_t v39 = v0;
  v39[1] = sub_169D40;
  sub_16C44C();
  return sub_D3DF0(v40, v41, v42, v43, v44, v45);
}

uint64_t sub_1690A4(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  sub_E53C();
  *unint64_t v6 = v5;
  uint64_t v7 = *v2;
  sub_E53C();
  *unint64_t v8 = v7;
  swift_task_dealloc();
  swift_release();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v5 + 1064) = a1;
  }
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1691C4()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[75] = v0;
  v1[76] = v3;
  v1[77] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *unint64_t v6 = v5;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_169294()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 1056) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_169334;
  return sub_7A658(0x696C6F7473616964, 0xE900000000000063);
}

uint64_t sub_169334()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[78] = v0;
  v1[79] = v3;
  v1[80] = v4;
  sub_470E4();
  uint64_t v5 = *v0;
  sub_E53C();
  *unint64_t v6 = v5;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_169404()
{
  uint64_t v2 = v0[126];
  uint64_t v3 = v0[88];
  uint64_t v4 = (void *)v0[85];
  [v4 systolicMinimum];
  uint64_t v5 = sub_16C638();
  LOBYTE(v3) = *(unsigned char *)(v3 + 312);
  uint64_t v7 = sub_C0448(v5, v6, v3, v1);
  swift_bridgeObjectRelease();
  [v4 systolicMaximum];
  uint64_t v8 = sub_16C638();
  uint64_t v10 = sub_16C5B4(v8, v9);
  swift_bridgeObjectRelease();
  [v4 diastolicMinimum];
  uint64_t v11 = sub_16C638();
  uint64_t v13 = sub_16C5B4(v11, v12);
  swift_bridgeObjectRelease();
  [v4 diastolicMaximum];
  double v15 = v14;
  uint64_t v16 = sub_A7254(v4);
  uint64_t v18 = sub_C0448(v16, v17, v3, v15);
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v47 = v0[79];
    uint64_t v45 = v0[80];
    uint64_t v46 = v0[76];
    uint64_t v44 = v0[77];
    uint64_t v41 = v0[121];
    uint64_t v19 = v0[102];
    uint64_t v40 = v0[99];
    uint64_t v20 = v0[98];
    uint64_t v42 = v0[97];
    uint64_t v43 = v0[122];
    uint64_t v21 = (int *)v0[93];
    uint64_t v22 = v0[92];
    uint64_t v23 = v0[90];
    uint64_t v24 = v0[89];
    uint64_t v25 = v0[87];
    uint64_t v49 = v0[86];
    sub_1ACE40();
    swift_bridgeObjectRelease();
    sub_16C5E4();
    sub_CCD04(v25, v23, &qword_201E20);
    sub_16C024(v19, v24, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_47F14();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v26, v27, v28, v40);
    BloodPressureQueryModel.init(systolic:diastolic:systolicMin:systolicMax:diastolicMin:diastolicMax:unitLabel:systolicLabel:diastolicLabel:dateLabel:url:headerModel:)(0, 1, 0, 1, v7, 0, v10, 0, v42, v13, 0, v18, 0, v43, v41, v46, v44, v47, v45,
      v22,
      v23,
      v24);
    sub_16BFC0(v42, v20);
    uint64_t v29 = v20 + v21[6];
    uint64_t v30 = *(void *)v29;
    uint64_t v31 = *(unsigned __int8 *)(v29 + 8);
    uint64_t v32 = v20 + v21[7];
    uint64_t v33 = *(void *)v32;
    unsigned int v48 = *(unsigned __int8 *)(v32 + 8);
    uint64_t v34 = v20 + v21[9];
    uint64_t v35 = *(void *)v34;
    uint64_t v36 = *(unsigned __int8 *)(v34 + 8);
    uint64_t v37 = *(void *)(v20 + v21[10]);
    swift_retain();
    uint64_t v38 = (void *)swift_task_alloc();
    v0[130] = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_1690A4;
    return sub_D3AA4(v49, v30, v31, v33, v48, v35, v36, v37);
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t sub_169760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36)
{
  sub_CD12C();
  a35 = v42;
  a36 = v43;
  a34 = v36;
  sub_16C5D0();
  sub_16C48C(v36[133]);
  sub_A340();
  uint64_t v44 = sub_16C3E8();
  v45(v44);
  sub_16C024(v38, (uint64_t)v39, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
  uint64_t v46 = (void *)sub_1AC7F0();
  os_log_type_t v47 = sub_1ACF50();
  if (sub_13221C(v47))
  {
    sub_16C31C();
    uint64_t v48 = sub_E620();
    sub_16C678(v48);
    sub_16C6AC(4.8149e-34);
    sub_16C024(v37, v38, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
    uint64_t v49 = sub_1ACE00();
    uint64_t v51 = sub_4A278(v49, v50, &a25);
    sub_16C548(v51);
    swift_bridgeObjectRelease();
    sub_16C078(a14, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
    sub_16C6C0(&def_342E4, v52, v53, "#GetBloodPressureFlow: snippet model is %s");
    sub_6FA28();
    sub_A1F0();
    sub_A1F0();

    uint64_t v39 = *(void (**)(void))(a16 + 8);
    sub_E530();
    v39();
  }
  else
  {
    uint64_t v54 = sub_16C698();
    sub_16C078(v54, (void (*)(void))type metadata accessor for BloodPressureQueryModel);

    uint64_t v55 = sub_16C684();
    ((void (*)(uint64_t))v39)(v55);
  }
  uint64_t v56 = v36[111];
  uint64_t v57 = v36[102];
  uint64_t v58 = v36[101];
  sub_A340();
  sub_16C398();
  v59();
  sub_16C024(v57, v58, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v60 = sub_1AC7F0();
  os_log_type_t v61 = sub_1ACF50();
  os_log_type_enabled(v60, v61);
  sub_16C664();
  if (v62)
  {
    a17 = v57;
    a18 = v56;
    uint64_t v63 = v36[100];
    uint64_t v57 = v36[99];
    a16 = v58;
    sub_A4B0();
    uint64_t v64 = sub_E620();
    sub_16C678(v64);
    sub_16C650(4.8149e-34);
    sub_16C024(v40, v63, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    uint64_t v65 = sub_1ACE00();
    uint64_t v67 = sub_4A278(v65, v66, &a25);
    sub_16C524(v67);
    swift_bridgeObjectRelease();
    sub_16C078(v40, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_16C6E0(&def_342E4, v68, v69, "#GetBloodPressureFlow: snippet header model is %s");
    sub_6FA28();
    sub_A1F0();
    sub_A1F0();

    uint64_t v70 = a17;
    uint64_t v71 = a18;
  }
  else
  {
    sub_16C078(v40, (void (*)(void))type metadata accessor for SnippetHeaderModel);

    uint64_t v71 = sub_16C514();
  }
  ((void (*)(uint64_t, uint64_t))v39)(v71, v70);
  if (a22)
  {
    v36[45] = sub_16C604();
    v36[46] = sub_16C0CC((unint64_t *)&qword_202590, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
    uint64_t v72 = sub_B5B0((uint64_t *)v60);
    sub_16C024(v57, (uint64_t)v72, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
    swift_storeEnumTagMultiPayload();
    a22;
    char v73 = (void *)swift_task_alloc();
    v36[137] = v73;
    *char v73 = v36;
    v73[1] = sub_16A440;
    sub_16C624();
    sub_A5EC();
    return sub_7ADEC();
  }
  else
  {
    uint64_t v76 = v36[111];
    sub_A340();
    sub_16C398();
    v77();
    sub_1AC7F0();
    os_log_type_t v78 = sub_1ACF60();
    if (sub_29300(v78))
    {
      uint64_t v79 = (_WORD *)sub_292A0();
      sub_29368(v79);
      sub_A7FC(&def_342E4, v80, v81, "Couldn't create bloodPressure dialog returning nil");
      sub_A1F0();
    }
    sub_16C2EC();
    sub_E530();
    v82();
    sub_9B48(v41 + 80, v76);
    sub_9BA4();
    uint64_t v91 = sub_1AAF70();
    swift_release();
    sub_9BF0(v76);
    sub_16C078((uint64_t)v39, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
    sub_16C078(0, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_16C25C();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_A79A4();
    sub_A5EC();
    return v85(v83, v84, v85, v86, v87, v88, v89, v90, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v40,
             v39,
             v41,
             0,
             a23,
             v91,
             a25,
             a26,
             a27,
             a28);
  }
}

uint64_t sub_169D40(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  sub_E53C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  sub_E53C();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  swift_release();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v5 + 1080) = a1;
  }
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_169E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36)
{
  sub_CD12C();
  a35 = v42;
  a36 = v43;
  a34 = v36;
  sub_16C5D0();
  sub_16C48C(v36[135]);
  sub_A340();
  uint64_t v44 = sub_16C3E8();
  v45(v44);
  sub_16C024(v38, (uint64_t)v39, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
  uint64_t v46 = (void *)sub_1AC7F0();
  os_log_type_t v47 = sub_1ACF50();
  if (sub_13221C(v47))
  {
    sub_16C31C();
    uint64_t v48 = sub_E620();
    sub_16C678(v48);
    sub_16C6AC(4.8149e-34);
    sub_16C024(v37, v38, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
    uint64_t v49 = sub_1ACE00();
    uint64_t v51 = sub_4A278(v49, v50, &a25);
    sub_16C548(v51);
    swift_bridgeObjectRelease();
    sub_16C078(a14, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
    sub_16C6C0(&def_342E4, v52, v53, "#GetBloodPressureFlow: snippet model is %s");
    sub_6FA28();
    sub_A1F0();
    sub_A1F0();

    uint64_t v39 = *(void (**)(void))(a16 + 8);
    sub_E530();
    v39();
  }
  else
  {
    uint64_t v54 = sub_16C698();
    sub_16C078(v54, (void (*)(void))type metadata accessor for BloodPressureQueryModel);

    uint64_t v55 = sub_16C684();
    ((void (*)(uint64_t))v39)(v55);
  }
  uint64_t v56 = v36[111];
  uint64_t v57 = v36[102];
  uint64_t v58 = v36[101];
  sub_A340();
  sub_16C398();
  v59();
  sub_16C024(v57, v58, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  uint64_t v60 = sub_1AC7F0();
  os_log_type_t v61 = sub_1ACF50();
  os_log_type_enabled(v60, v61);
  sub_16C664();
  if (v62)
  {
    a17 = v57;
    a18 = v56;
    uint64_t v63 = v36[100];
    uint64_t v57 = v36[99];
    a16 = v58;
    sub_A4B0();
    uint64_t v64 = sub_E620();
    sub_16C678(v64);
    sub_16C650(4.8149e-34);
    sub_16C024(v40, v63, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    uint64_t v65 = sub_1ACE00();
    uint64_t v67 = sub_4A278(v65, v66, &a25);
    sub_16C524(v67);
    swift_bridgeObjectRelease();
    sub_16C078(v40, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_16C6E0(&def_342E4, v68, v69, "#GetBloodPressureFlow: snippet header model is %s");
    sub_6FA28();
    sub_A1F0();
    sub_A1F0();

    uint64_t v70 = a17;
    uint64_t v71 = a18;
  }
  else
  {
    sub_16C078(v40, (void (*)(void))type metadata accessor for SnippetHeaderModel);

    uint64_t v71 = sub_16C514();
  }
  ((void (*)(uint64_t, uint64_t))v39)(v71, v70);
  if (a22)
  {
    v36[45] = sub_16C604();
    v36[46] = sub_16C0CC((unint64_t *)&qword_202590, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
    uint64_t v72 = sub_B5B0((uint64_t *)v60);
    sub_16C024(v57, (uint64_t)v72, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
    swift_storeEnumTagMultiPayload();
    a22;
    char v73 = (void *)swift_task_alloc();
    v36[137] = v73;
    *char v73 = v36;
    v73[1] = sub_16A440;
    sub_16C624();
    sub_A5EC();
    return sub_7ADEC();
  }
  else
  {
    uint64_t v76 = v36[111];
    sub_A340();
    sub_16C398();
    v77();
    sub_1AC7F0();
    os_log_type_t v78 = sub_1ACF60();
    if (sub_29300(v78))
    {
      uint64_t v79 = (_WORD *)sub_292A0();
      sub_29368(v79);
      sub_A7FC(&def_342E4, v80, v81, "Couldn't create bloodPressure dialog returning nil");
      sub_A1F0();
    }
    sub_16C2EC();
    sub_E530();
    v82();
    sub_9B48(v41 + 80, v76);
    sub_9BA4();
    uint64_t v91 = sub_1AAF70();
    swift_release();
    sub_9BF0(v76);
    sub_16C078((uint64_t)v39, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
    sub_16C078(0, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_16C25C();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_A79A4();
    sub_A5EC();
    return v85(v83, v84, v85, v86, v87, v88, v89, v90, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v40,
             v39,
             v41,
             0,
             a23,
             v91,
             a25,
             a26,
             a27,
             a28);
  }
}

uint64_t sub_16A440()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 336;
  sub_470E4();
  uint64_t v5 = *(void **)(v4 + 1088);
  uint64_t v6 = *v0;
  sub_E53C();
  *uint64_t v7 = v6;
  swift_task_dealloc();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_16A528()
{
  uint64_t v1 = *(void **)(v0 + 1088);
  uint64_t v2 = *(void *)(v0 + 816);
  uint64_t v3 = *(void *)(v0 + 784);
  sub_E3FC(v0 + 416, v0 + 376);
  uint64_t v4 = swift_allocObject();
  sub_24D80((long long *)(v0 + 376), v4 + 16);
  sub_1AB350();
  sub_1AAE40();
  sub_47658();
  *(void *)(v0 + 664) = sub_1AAE30();
  uint64_t v7 = sub_1AAF70();
  swift_release();

  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 416);
  sub_16C078(v3, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
  sub_16C078(v2, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v7);
}

uint64_t sub_16A7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36)
{
  sub_CD12C();
  a35 = v37;
  a36 = v38;
  a34 = v36;
  uint64_t v84 = v36 + 60;
  v36[136] = 0;
  uint64_t v39 = v36[115];
  uint64_t v40 = v36[112];
  uint64_t v41 = v36[111];
  uint64_t v42 = (uint8_t *)v36[98];
  uint64_t v43 = v36[95];
  uint64_t v44 = sub_1AC7D0();
  sub_A340();
  uint64_t v87 = v44;
  uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
  v86(v39, v44, v41);
  sub_16C024((uint64_t)v42, v43, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
  uint64_t v45 = sub_1AC7F0();
  os_log_type_t v46 = sub_1ACF50();
  if (os_log_type_enabled(v45, v46))
  {
    a15 = v36 + 81;
    a16 = v36[112];
    a17 = v36[111];
    uint64_t v47 = v36[95];
    uint64_t v43 = v36[94];
    a13 = v36[93];
    a14 = v47;
    uint64_t v42 = (uint8_t *)sub_A4B0();
    a25 = sub_E620();
    *(_DWORD *)uint64_t v42 = 136315138;
    sub_16C024(v47, v43, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
    uint64_t v48 = sub_1ACE00();
    v36[81] = sub_4A278(v48, v49, &a25);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_16C078(v47, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
    _os_log_impl(&def_342E4, v45, v46, "#GetBloodPressureFlow: snippet model is %s", v42, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v85 = *(void (**)(void))(a16 + 8);
    sub_E558();
    v50();
  }
  else
  {
    sub_16C078(v36[95], (void (*)(void))type metadata accessor for BloodPressureQueryModel);

    uint64_t v51 = sub_4788C();
    uint64_t v85 = v52;
    v52(v51);
  }
  sub_A340();
  uint64_t v53 = sub_16C46C();
  v54(v53);
  uint64_t v55 = sub_47968();
  sub_16C024(v55, v56, v57);
  uint64_t v58 = sub_1AC7F0();
  os_log_type_t v59 = sub_1ACF50();
  BOOL v60 = sub_13221C(v59);
  uint64_t v61 = v36[114];
  uint64_t v62 = v36[101];
  if (v60)
  {
    a17 = v36[112];
    uint64_t v63 = v36[100];
    uint64_t v84 = (void *)v36[111];
    uint64_t v42 = (uint8_t *)sub_A4B0();
    a16 = v61;
    a25 = sub_E620();
    *(_DWORD *)uint64_t v42 = 136315138;
    sub_16C024(v62, v63, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    sub_47968();
    uint64_t v64 = sub_1ACE00();
    v36[82] = sub_4A278(v64, v65, &a25);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_16C078(v62, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    _os_log_impl(&def_342E4, v58, (os_log_type_t)v43, "#GetBloodPressureFlow: snippet header model is %s", v42, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    sub_16C078(v36[101], (void (*)(void))type metadata accessor for SnippetHeaderModel);

    sub_16C514();
  }
  sub_E530();
  v66();
  uint64_t v67 = v36[111];
  sub_A340();
  uint64_t v68 = sub_16C46C();
  v69(v68);
  sub_1AC7F0();
  os_log_type_t v70 = sub_1ACF60();
  if (sub_29300(v70))
  {
    uint64_t v71 = (_WORD *)sub_292A0();
    sub_29368(v71);
    sub_A7FC(&def_342E4, v72, v73, "Couldn't create bloodPressure dialog returning nil");
    sub_A1F0();
  }
  sub_16C2EC();
  sub_47968();
  sub_E530();
  v74();
  sub_9B48(v62 + 80, v67);
  sub_9BA4();
  uint64_t v88 = sub_1AAF70();
  swift_release();
  sub_9BF0(v67);
  sub_16C078(v43, (void (*)(void))type metadata accessor for BloodPressureQueryModel);
  sub_16C078((uint64_t)v42, (void (*)(void))type metadata accessor for SnippetHeaderModel);
  sub_16C25C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A79A4();
  sub_A5EC();
  return v77(v75, v76, v77, v78, v79, v80, v81, v82, a9, a10, a11, a12, a13, a14, a15, a16, a17, v36 + 82, v84,
           v36 + 63,
           v85,
           v86,
           v87,
           v88,
           a25,
           a26,
           a27,
           a28);
}

uint64_t sub_16ADA0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v105 = a6;
  uint64_t v102 = a5;
  uint64_t v10 = sub_1AAC20();
  uint64_t v98 = *(void *)(v10 - 8);
  uint64_t v99 = v10;
  __chkstk_darwin(v10);
  os_log_type_t v97 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_2694(&qword_201E20);
  __chkstk_darwin(v12 - 8);
  uint64_t v108 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1AABD0();
  uint64_t v101 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v100 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_2694(&qword_201E10);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v103 = (char *)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  char v104 = (char *)&v96 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v96 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v96 - v24;
  uint64_t v26 = sub_2694(&qword_201E28);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v107 = (char *)&v96 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v96 - v29;
  sub_2F2B8(*(unsigned char *)(a2 + 312));
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v106 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v30, 0, 1, v106);
  uint64_t v31 = (int *)type metadata accessor for WellnessQueryingBloodPressure_DetailedResultParameters(0);
  sub_9EA0((uint64_t)v30, a1 + v31[5]);
  uint64_t v32 = v31[16];
  swift_retain();
  swift_release();
  *(void *)(a1 + v32) = a3;
  uint64_t v33 = v102;
  [a4 systolicMinimum];
  double v35 = v34;
  uint64_t v36 = sub_A7254(a4);
  LOBYTE(a2) = *(unsigned char *)(a2 + 312);
  double v38 = sub_C0448(v36, v37, a2, v35);
  swift_bridgeObjectRelease();
  uint64_t v39 = a1 + v31[15];
  *(double *)uint64_t v39 = v38;
  *(unsigned char *)(v39 + 8) = 0;
  [a4 systolicMaximum];
  double v41 = v40;
  uint64_t v42 = sub_A7254(a4);
  double v44 = sub_C0448(v42, v43, a2, v41);
  swift_bridgeObjectRelease();
  uint64_t v45 = a1 + v31[14];
  *(double *)uint64_t v45 = v44;
  *(unsigned char *)(v45 + 8) = 0;
  [a4 diastolicMinimum];
  double v47 = v46;
  uint64_t v48 = sub_A7254(a4);
  double v50 = sub_C0448(v48, v49, a2, v47);
  swift_bridgeObjectRelease();
  uint64_t v51 = a1 + v31[7];
  *(double *)uint64_t v51 = v50;
  *(unsigned char *)(v51 + 8) = 0;
  [a4 diastolicMaximum];
  double v53 = v52;
  uint64_t v54 = sub_A7254(a4);
  double v56 = sub_C0448(v54, v55, a2, v53);
  swift_bridgeObjectRelease();
  uint64_t v57 = a1 + v31[6];
  *(double *)uint64_t v57 = v56;
  *(unsigned char *)(v57 + 8) = 0;
  sub_1ABFA0();
  swift_allocObject();
  sub_1ABF90();
  id v58 = [v33 startDate];
  if (v58)
  {
    os_log_type_t v59 = v58;
    sub_1AABB0();

    uint64_t v60 = 0;
  }
  else
  {
    uint64_t v60 = 1;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, v60, 1, v14);
  sub_A76E8((uint64_t)v23, (uint64_t)v25, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1, v14))
  {
    sub_5B028((uint64_t)v25, &qword_201E10);
  }
  else
  {
    uint64_t v61 = v100;
    uint64_t v62 = v101;
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v100, v25, v14);
    sub_5B028((uint64_t)v25, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v14);
  }
  uint64_t v63 = (uint64_t)v108;
  sub_1ABF70();
  swift_release();
  id v64 = [v33 endDate];
  uint64_t v65 = (uint64_t)v103;
  if (v64)
  {
    unint64_t v66 = v64;
    sub_1AABB0();

    uint64_t v67 = 0;
  }
  else
  {
    uint64_t v67 = 1;
  }
  uint64_t v68 = (uint64_t)v104;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v65, v67, 1, v14);
  sub_A76E8(v65, v68, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v68, 1, v14))
  {
    sub_5B028(v68, &qword_201E10);
  }
  else
  {
    uint64_t v69 = v100;
    uint64_t v70 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v100, v68, v14);
    sub_5B028(v68, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v14);
  }
  uint64_t v71 = (uint64_t)v107;
  sub_1ABF60();
  swift_release();
  uint64_t v72 = sub_1ABF80();
  swift_release();
  uint64_t v73 = v31[13];
  swift_release();
  *(void *)(a1 + v73) = v72;
  sub_CCD04(v105, v63, &qword_201E20);
  uint64_t v74 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v63, 1, v74) == 1)
  {
    sub_5B028(v63, &qword_201E20);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v71, 1, 1, v106);
  }
  else
  {
    id v75 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v76);
    uint64_t v78 = v77;
    [v75 setPunchOutUri:v77];

    id v79 = v75;
    uint64_t v80 = v97;
    sub_1AAC10();
    uint64_t v81 = sub_1AABE0();
    uint64_t v83 = v82;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v80, v99);
    sub_1949C4(v81, v83, v79);

    id v84 = [v79 dictionary];
    if (v84)
    {
      uint64_t v85 = v84;
      uint64_t v86 = self;
      id v109 = 0;
      id v87 = [v86 dataWithPropertyList:v85 format:200 options:0 error:&v109];
      id v88 = v109;
      if (v87)
      {
        uint64_t v89 = sub_1AAB30();
        unint64_t v91 = v90;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v89, v91);
        swift_bridgeObjectRelease();
        uint64_t v92 = v71;
        uint64_t v93 = 0;
      }
      else
      {
        uint64_t v94 = v88;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v92 = v71;
        uint64_t v93 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v92, v93, 1, v106);
    }
    else
    {
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v71, 1, 1, v106);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 - 8) + 8))(v63, v74);
  }
  return sub_9EA0(v71, a1);
}

uint64_t sub_16B6BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v96 = a6;
  id v93 = a5;
  uint64_t v99 = a4;
  uint64_t v9 = sub_1AAC20();
  uint64_t v89 = *(void *)(v9 - 8);
  uint64_t v90 = v9;
  __chkstk_darwin(v9);
  id v88 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2694(&qword_201E20);
  __chkstk_darwin(v11 - 8);
  uint64_t v97 = (uint64_t)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_2694(&qword_201E28);
  __chkstk_darwin(v13 - 8);
  uint64_t v98 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1AABD0();
  uint64_t v92 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v91 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_2694(&qword_201E10);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v94 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v87 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v87 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v87 - v26;
  uint64_t v28 = (int *)type metadata accessor for WellnessQueryingBloodPressure_SimpleResultParameters(0);
  uint64_t v29 = v28[9];
  swift_retain();
  swift_release();
  *(void *)(a1 + v29) = a2;
  [a3 systolic];
  double v31 = v30;
  uint64_t v32 = sub_A7254(a3);
  unsigned __int8 v33 = *(unsigned char *)(v99 + 312);
  double v35 = sub_C0448(v32, v34, v33, v31);
  swift_bridgeObjectRelease();
  uint64_t v36 = a1 + v28[8];
  *(double *)uint64_t v36 = v35;
  *(unsigned char *)(v36 + 8) = 0;
  [a3 diastolic];
  double v38 = v37;
  uint64_t v39 = sub_A7254(a3);
  double v41 = sub_C0448(v39, v40, v33, v38);
  swift_bridgeObjectRelease();
  uint64_t v95 = v28;
  uint64_t v42 = v28[7];
  uint64_t v99 = a1;
  uint64_t v43 = a1 + v42;
  *(double *)uint64_t v43 = v41;
  *(unsigned char *)(v43 + 8) = 0;
  sub_1ABFA0();
  swift_allocObject();
  sub_1ABF90();
  id v44 = v93;
  id v45 = [v93 startDate];
  if (v45)
  {
    double v46 = v45;
    sub_1AABB0();

    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v47 = 1;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v25, v47, 1, v15);
  sub_A76E8((uint64_t)v25, (uint64_t)v27, &qword_201E10);
  int v48 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v15);
  uint64_t v49 = (uint64_t)v98;
  uint64_t v50 = (uint64_t)v94;
  if (v48)
  {
    sub_5B028((uint64_t)v27, &qword_201E10);
  }
  else
  {
    uint64_t v51 = v91;
    uint64_t v52 = v92;
    (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v91, v27, v15);
    sub_5B028((uint64_t)v27, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v15);
  }
  sub_1ABF70();
  swift_release();
  id v53 = [v44 endDate];
  if (v53)
  {
    uint64_t v54 = v53;
    sub_1AABB0();

    uint64_t v55 = 0;
  }
  else
  {
    uint64_t v55 = 1;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v50, v55, 1, v15);
  sub_A76E8(v50, (uint64_t)v22, &qword_201E10);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v15))
  {
    sub_5B028((uint64_t)v22, &qword_201E10);
  }
  else
  {
    double v56 = v91;
    uint64_t v57 = v92;
    (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v91, v22, v15);
    sub_5B028((uint64_t)v22, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v15);
  }
  sub_1ABF60();
  swift_release();
  uint64_t v58 = sub_1ABF80();
  swift_release();
  uint64_t v59 = v95[6];
  uint64_t v60 = v99;
  swift_release();
  *(void *)(v60 + v59) = v58;
  uint64_t v61 = v97;
  sub_CCD04(v96, v97, &qword_201E20);
  uint64_t v62 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v61, 1, v62) == 1)
  {
    sub_5B028(v61, &qword_201E20);
    uint64_t v63 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v49, 1, 1, v63);
  }
  else
  {
    id v64 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v65);
    uint64_t v67 = v66;
    [v64 setPunchOutUri:v66];

    id v68 = v64;
    uint64_t v69 = v88;
    sub_1AAC10();
    uint64_t v70 = sub_1AABE0();
    uint64_t v72 = v71;
    (*(void (**)(char *, uint64_t))(v89 + 8))(v69, v90);
    sub_1949C4(v70, v72, v68);

    id v73 = [v68 dictionary];
    if (v73)
    {
      uint64_t v74 = v73;
      id v75 = self;
      id v100 = 0;
      id v76 = [v75 dataWithPropertyList:v74 format:200 options:0 error:&v100];
      id v77 = v100;
      if (v76)
      {
        uint64_t v78 = sub_1AAB30();
        unint64_t v80 = v79;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v78, v80);
        swift_bridgeObjectRelease();
        uint64_t v81 = sub_1AC1E0();
        uint64_t v82 = v49;
        uint64_t v83 = 0;
      }
      else
      {
        uint64_t v85 = v77;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v81 = sub_1AC1E0();
        uint64_t v82 = v49;
        uint64_t v83 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v82, v83, 1, v81);
    }
    else
    {
      uint64_t v84 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v49, 1, 1, v84);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v61, v62);
  }
  return sub_9EA0(v49, v99);
}

uint64_t sub_16BF08()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_E230;
  return sub_1651B4();
}

uint64_t sub_16BFA0(uint64_t a1)
{
  return sub_16B6BC(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_16BFB0(uint64_t a1)
{
  return sub_16ADA0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_16BFC0(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for BloodPressureQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 32))(a2, a1, Model);
  return a2;
}

uint64_t sub_16C024(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_20688();
  uint64_t v4 = sub_CD4DC();
  v5(v4);
  return a2;
}

uint64_t sub_16C078(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  sub_E558();
  v3();
  return a1;
}

uint64_t sub_16C0CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_16C114()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_16C14C()
{
  sub_A364();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_E230;
  return sub_24B08(v3, v0 + 16);
}

uint64_t sub_16C1EC()
{
  return swift_task_dealloc();
}

uint64_t sub_16C25C()
{
  *(void *)(v1 - 96) = *(void *)(v0 + 712);
  return swift_task_dealloc();
}

void sub_16C2EC()
{
}

uint64_t sub_16C31C()
{
  return swift_slowAlloc();
}

id sub_16C360@<X0>(void *a1@<X8>)
{
  return a1;
}

uint64_t sub_16C3AC()
{
  return *(void *)(v0 + 840);
}

uint64_t sub_16C3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return a19;
}

uint64_t sub_16C3E8()
{
  uint64_t result = v1;
  *(void *)(v3 - 96) = *(void *)(v2 + 16);
  *(void *)(v3 - 88) = v0;
  return result;
}

uint64_t sub_16C408()
{
  sub_2E38((void *)(v0 + 80), *(void *)(v0 + 104));
  return sub_1AAF40();
}

uint64_t sub_16C46C()
{
  return v0;
}

uint64_t sub_16C48C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 1088) = a1;
  return sub_1AC7D0();
}

uint64_t sub_16C4B8()
{
  return v0;
}

uint64_t sub_16C4D4()
{
  uint64_t v3 = *(void *)(v1 + 464) + 80;
  return sub_9B48(v3, v0);
}

uint64_t sub_16C4FC()
{
  return v0;
}

uint64_t sub_16C514()
{
  return v0;
}

uint64_t sub_16C524(uint64_t a1)
{
  *(void *)(v1 + 656) = a1;
  return sub_1ACFE0();
}

uint64_t sub_16C548(uint64_t a1)
{
  *(void *)(v1 + 648) = a1;
  return sub_1ACFE0();
}

uint64_t sub_16C56C()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, v0);
  return v1;
}

uint64_t sub_16C59C()
{
  return v0;
}

double sub_16C5B4(uint64_t a1, uint64_t a2)
{
  return sub_C0448(a1, a2, v2, v4);
}

uint64_t sub_16C5E4()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 0, 1, v1);
}

uint64_t sub_16C604()
{
  return type metadata accessor for WellnessSnippets();
}

uint64_t sub_16C624()
{
  return v0;
}

uint64_t sub_16C638()
{
  return sub_A7254(v0);
}

void sub_16C650(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_16C678(uint64_t result)
{
  *(void *)(v1 - 80) = result;
  return result;
}

uint64_t sub_16C684()
{
  return v0;
}

uint64_t sub_16C698()
{
  return *(void *)(v0 + 760);
}

void sub_16C6AC(float a1)
{
  *uint64_t v1 = a1;
}

void sub_16C6C0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void sub_16C6E0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

BOOL LogHealthKitQuantityFlow.on(input:)(uint64_t a1)
{
  sub_E510();
  uint64_t v3 = v2;
  sub_1AB4B0();
  sub_52C4();
  uint64_t v71 = v5;
  uint64_t v72 = v4;
  __chkstk_darwin(v4);
  sub_53E0();
  uint64_t v70 = v6;
  sub_1AB420();
  sub_52C4();
  uint64_t v75 = v8;
  uint64_t v76 = v7;
  __chkstk_darwin(v7);
  sub_53E0();
  uint64_t v74 = v9;
  sub_1AB450();
  sub_52C4();
  uint64_t v68 = v11;
  uint64_t v69 = v10;
  __chkstk_darwin(v10);
  sub_53E0();
  uint64_t v67 = v12;
  sub_1AB3F0();
  sub_52C4();
  __chkstk_darwin(v13);
  sub_E548();
  uint64_t v14 = sub_1AC800();
  sub_52C4();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_E594();
  uint64_t v78 = v18;
  sub_A358();
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v60 - v20;
  uint64_t v22 = sub_1AC7D0();
  sub_A340();
  uint64_t v77 = v16;
  uint64_t v23 = *(void (**)(void, void, void))(v16 + 16);
  uint64_t v66 = v22;
  uint64_t v65 = v16 + 16;
  id v64 = v23;
  v23(v21, v22, v14);
  sub_559E4();
  sub_E524();
  v24();
  uint64_t v25 = sub_1AC7F0();
  os_log_type_t v26 = sub_1ACF60();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v63 = v3;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v73 = v14;
    uint64_t v29 = v28;
    uint64_t v61 = swift_slowAlloc();
    v80[0] = v61;
    *(_DWORD *)uint64_t v29 = 136315394;
    uint64_t v30 = sub_1AD3E0();
    uint64_t v62 = a1;
    uint64_t v79 = sub_4A278(v30, v31, v80);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    sub_1709AC((unint64_t *)&qword_202010, 255, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v32 = sub_1AD2C0();
    uint64_t v79 = sub_4A278(v32, v33, v80);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v34 = sub_170F10();
    v35(v34);
    _os_log_impl(&def_342E4, v25, v26, "%s received input:%s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    uint64_t v14 = v73;
    sub_A1F0();
  }
  else
  {
    uint64_t v36 = sub_170F10();
    v37(v36);
  }

  double v38 = *(void (**)(void))(v77 + 8);
  sub_E530();
  v38();
  uint64_t v39 = v74;
  sub_1AB3E0();
  uint64_t v41 = v75;
  uint64_t v40 = v76;
  int v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 88))(v39, v76);
  int v43 = enum case for Parse.uso(_:);
  uint64_t v44 = v78;
  if (v42 == enum case for Parse.uso(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v41 + 96))(v39, v40);
    uint64_t v46 = v67;
    uint64_t v45 = v68;
    uint64_t v47 = v69;
    sub_5572C();
    v48();
    sub_1AB440();
    sub_141EE8();
    swift_release();
    sub_E558();
    v49();
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
    sub_A340();
    sub_E524();
    v50();
    uint64_t v51 = sub_1AC7F0();
    os_log_type_t v52 = sub_1ACF60();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v73 = v14;
      id v53 = (uint8_t *)sub_A4B0();
      uint64_t v79 = sub_E620();
      *(_DWORD *)id v53 = 136315138;
      uint64_t v54 = sub_1AD3E0();
      uint64_t v56 = sub_4A278(v54, v55, &v79);
      sub_5B5E4(v56);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v51, v52, "%s rejecting unsupported input", v53, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      uint64_t v57 = v78;
      uint64_t v58 = v73;
    }
    else
    {

      uint64_t v57 = v44;
      uint64_t v58 = v14;
    }
    ((void (*)(uint64_t, uint64_t))v38)(v57, v58);
  }
  return v42 == v43;
}

uint64_t LogHealthKitQuantityFlow.execute(completion:)()
{
  type metadata accessor for LogHealthKitQuantityFlow();
  sub_1709AC(&qword_203510, v0, (void (*)(uint64_t))type metadata accessor for LogHealthKitQuantityFlow);
  return sub_1AAF80();
}

uint64_t LogHealthKitQuantityFlow.execute()()
{
  sub_A364();
  v1[202] = v0;
  v1[201] = v2;
  sub_E510();
  v1[203] = v3;
  uint64_t v4 = sub_1AC250();
  sub_53D4(v4);
  v1[204] = sub_A42C();
  uint64_t v5 = sub_1AAD30();
  v1[205] = v5;
  sub_A19C(v5);
  v1[206] = v6;
  v1[207] = sub_A42C();
  uint64_t v7 = sub_2694(&qword_201CC8);
  sub_53D4(v7);
  v1[208] = sub_A220();
  v1[209] = swift_task_alloc();
  uint64_t v8 = sub_2694(&qword_201E10);
  sub_53D4(v8);
  v1[210] = sub_A220();
  v1[211] = swift_task_alloc();
  uint64_t v9 = sub_1AABD0();
  v1[212] = v9;
  sub_A19C(v9);
  v1[213] = v10;
  v1[214] = sub_A220();
  v1[215] = swift_task_alloc();
  uint64_t v11 = sub_1AC800();
  v1[216] = v11;
  sub_A19C(v11);
  v1[217] = v12;
  v1[218] = sub_A220();
  v1[219] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_16CF38()
{
  uint64_t v81 = v0;
  uint64_t v1 = *(void *)(v0 + 1736);
  *(unsigned char *)(v0 + 1832) = *(unsigned char *)(*(void *)(v0 + 1616) + 336);
  sub_1AC3B0();
  sub_1AC7D0();
  sub_A340();
  uint64_t v2 = *(void (**)(void))(v1 + 16);
  sub_FD3F0();
  v2();
  swift_retain_n();
  uint64_t v3 = sub_1AC7F0();
  os_log_type_t v4 = sub_1ACF50();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v78 = *(void *)(v0 + 1736);
    uint64_t v5 = *(void *)(v0 + 1616);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v80 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v7 = sub_1AD3E0();
    *(void *)(v0 + 1592) = sub_4A278(v7, v8, &v80);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    unint64_t v9 = sub_2F2B8(*(unsigned char *)(v5 + 16));
    *(void *)(v0 + 1600) = sub_4A278(v9, v10, &v80);
    sub_1ACFE0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v3, v4, "Executing %s for datatype: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v11 = *(void (**)(void))(v78 + 8);
    sub_E530();
    v11();
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 1752);
    uint64_t v13 = *(void *)(v0 + 1736);
    uint64_t v14 = *(void *)(v0 + 1728);

    swift_release_n();
    uint64_t v11 = *(void (**)(void))(v13 + 8);
    ((void (*)(uint64_t, uint64_t))v11)(v12, v14);
  }
  char v15 = *(unsigned char *)(*(void *)(v0 + 1616) + 16);
  *(unsigned char *)(v0 + 1833) = v15;
  uint64_t v16 = sub_25294();
  char v17 = sub_72484(v15, (uint64_t)v16);
  swift_bridgeObjectRelease();
  if (v17)
  {
    uint64_t v18 = v0 + 312;
    sub_A340();
    sub_FD3F0();
    v2();
    swift_retain_n();
    uint64_t v19 = sub_1AC7F0();
    os_log_type_t v20 = sub_1ACF50();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = *(void *)(v0 + 1744);
    uint64_t v23 = *(void *)(v0 + 1728);
    if (v21)
    {
      uint64_t v79 = *(void *)(v0 + 1744);
      uint64_t v24 = (uint8_t *)sub_A4B0();
      uint64_t v80 = sub_E620();
      *(_DWORD *)uint64_t v24 = 136315138;
      unint64_t v25 = sub_2F2B8(v15);
      *(void *)(v0 + 1584) = sub_4A278(v25, v26, &v80);
      uint64_t v18 = v0 + 312;
      sub_1ACFE0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v19, v20, "Manual logging is not supported for %s. Returning UnsupportedLoggingFlow.", v24, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      uint64_t v27 = v79;
    }
    else
    {

      swift_release_n();
      uint64_t v27 = v22;
    }
    ((void (*)(uint64_t, uint64_t))v11)(v27, v23);
    uint64_t v33 = *(void *)(v0 + 1616);
    sub_1AC330();
    sub_9DE0(v33 + 24, v18);
    sub_9DE0(v33 + 64, v0 + 352);
    sub_9B48(v33 + 104, v0 + 392);
    uint64_t v34 = sub_1AB1C0();
    sub_47658();
    uint64_t v35 = sub_1AB1B0();
    *(void *)(v0 + 576) = v34;
    *(void *)(v0 + 584) = &protocol witness table for ResponseFactory;
    *(void *)(v0 + 552) = v35;
    type metadata accessor for WellnessLoggingCATsSimple();
    sub_170E78();
    uint64_t v36 = sub_1AC210();
    type metadata accessor for WellnessCATs();
    sub_170E78();
    uint64_t v37 = sub_1AC1A0();
    *(void *)(v0 + 592) = v36;
    *(void *)(v0 + 600) = v37;
    sub_2503C();
    sub_1AB120();
    sub_24EA0(v18);
    goto LABEL_11;
  }
  uint64_t v28 = *(void *)(v0 + 1672);
  uint64_t v29 = *(void **)(v0 + 1616);
  uint64_t v30 = v29[6];
  uint64_t v31 = v29[7];
  sub_2E38(v29 + 3, v30);
  (*(void (**)(uint64_t, uint64_t))(v31 + 32))(v30, v31);
  uint64_t v32 = sub_1AAA10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v28, 1, v32) == 1)
  {
    sub_6F194(*(void *)(v0 + 1672), &qword_201CC8);
    sub_170EF0();
LABEL_16:
    sub_6F194(*(void *)(v0 + 1688), &qword_201E10);
    goto LABEL_17;
  }
  sub_1AA9F0();
  sub_A5C0();
  sub_E558();
  v40();
  sub_170E18();
  if (v41) {
    goto LABEL_16;
  }
  uint64_t v50 = *(void *)(v0 + 1656);
  uint64_t v51 = *(void *)(v0 + 1648);
  uint64_t v52 = *(void *)(v0 + 1640);
  sub_5572C();
  v53();
  sub_1AAD00();
  char v54 = sub_1AACB0();
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
  if ((v54 & 1) == 0)
  {
    uint64_t v64 = *(void *)(v0 + 1616);
    sub_1AC330();
    sub_9DE0((uint64_t)(v29 + 3), v0 + 608);
    sub_9DE0(v64 + 64, v0 + 648);
    sub_9B48(v64 + 104, v0 + 688);
    uint64_t v65 = sub_1AB1C0();
    sub_47658();
    uint64_t v66 = sub_1AB1B0();
    *(void *)(v0 + 872) = v65;
    *(void *)(v0 + 880) = &protocol witness table for ResponseFactory;
    *(void *)(v0 + 848) = v66;
    type metadata accessor for WellnessLoggingCATsSimple();
    sub_170E78();
    uint64_t v67 = sub_1AC210();
    type metadata accessor for WellnessCATs();
    sub_170E78();
    uint64_t v68 = sub_1AC1A0();
    *(void *)(v0 + 888) = v67;
    *(void *)(v0 + 896) = v68;
    sub_2503C();
    sub_1AB120();
    sub_24EA0(v0 + 608);
    uint64_t v69 = sub_170EB8();
    v70(v69);
    goto LABEL_11;
  }
  uint64_t v55 = sub_170EB8();
  v56(v55);
LABEL_17:
  uint64_t v42 = *(void *)(v0 + 1664);
  uint64_t v43 = v29[6];
  uint64_t v44 = v29[7];
  sub_2E38(v29 + 3, v43);
  (*(void (**)(uint64_t, uint64_t))(v44 + 32))(v43, v44);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v42, 1, v32) != 1)
  {
    sub_1AA9C0();
    sub_A5C0();
    sub_E558();
    v45();
    sub_170E18();
    if (v41) {
      goto LABEL_21;
    }
    uint64_t v57 = *(void *)(v0 + 1656);
    uint64_t v58 = *(void *)(v0 + 1648);
    uint64_t v59 = *(void *)(v0 + 1640);
    sub_5572C();
    v60();
    sub_1AAD00();
    char v61 = sub_1AACB0();
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
    if (v61)
    {
      uint64_t v62 = sub_A418();
      v63(v62);
      goto LABEL_22;
    }
    uint64_t v71 = *(void *)(v0 + 1616);
    sub_1AC330();
    sub_9DE0((uint64_t)(v29 + 3), v0 + 16);
    sub_9DE0(v71 + 64, v0 + 56);
    sub_9B48(v71 + 104, v0 + 96);
    uint64_t v72 = sub_1AB1C0();
    sub_47658();
    uint64_t v73 = sub_1AB1B0();
    *(void *)(v0 + 280) = v72;
    *(void *)(v0 + 288) = &protocol witness table for ResponseFactory;
    *(void *)(v0 + 256) = v73;
    type metadata accessor for WellnessLoggingCATsSimple();
    sub_170E78();
    uint64_t v74 = sub_1AC210();
    type metadata accessor for WellnessCATs();
    sub_170E78();
    uint64_t v75 = sub_1AC1A0();
    *(void *)(v0 + 296) = v74;
    *(void *)(v0 + 304) = v75;
    sub_2503C();
    sub_1AB120();
    sub_24EA0(v0 + 16);
    uint64_t v76 = sub_A418();
    v77(v76);
LABEL_11:
    sub_170DC0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    return v38();
  }
  sub_6F194(*(void *)(v0 + 1664), &qword_201CC8);
  sub_170EF0();
LABEL_21:
  sub_6F194(*(void *)(v0 + 1680), &qword_201E10);
LABEL_22:
  uint64_t v46 = sub_1AC500();
  *(void *)(v0 + 1760) = v46;
  sub_2694(&qword_203090);
  uint64_t v47 = swift_allocObject();
  *(void *)(v0 + 1768) = v47;
  *(_OWORD *)(v47 + 16) = xmmword_1ADCF0;
  *(void *)(v47 + 32) = sub_2F2B8(v15);
  *(void *)(v47 + 40) = v48;
  uint64_t v49 = (void *)swift_task_alloc();
  *(void *)(v0 + 1776) = v49;
  *uint64_t v49 = v0;
  v49[1] = sub_16D95C;
  return HealthKitPersistor.isLoggingAuthorized(for:)(v47, v46);
}

uint64_t sub_16D95C()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  *uint64_t v2 = v1;
  os_log_type_t v4 = *(void **)(v3 + 1760);
  uint64_t v5 = *v0;
  sub_A304();
  *uint64_t v6 = v5;
  *(unsigned char *)(v8 + 1834) = v7;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_16DA58()
{
  if ((*(unsigned char *)(v0 + 1834) & 1) == 0)
  {
    char v15 = *(unsigned char *)(v0 + 1833);
    uint64_t v16 = *(void *)(v0 + 1616);
    sub_1AC390();
    sub_9DE0(v16 + 64, v0 + 912);
    sub_9B48(v16 + 104, v0 + 952);
    uint64_t v17 = sub_1AB1C0();
    sub_47658();
    uint64_t v18 = sub_1AB1B0();
    *(void *)(v0 + 1136) = v17;
    *(void *)(v0 + 1144) = &protocol witness table for ResponseFactory;
    *(void *)(v0 + 1112) = v18;
    type metadata accessor for WellnessCATsSimple();
    sub_1AC240();
    uint64_t v19 = sub_1AC210();
    type metadata accessor for WellnessCATs();
    sub_1AC240();
    uint64_t v20 = sub_1AC1A0();
    *(unsigned char *)(v0 + 904) = v15;
    *(void *)(v0 + 1152) = v19;
    *(void *)(v0 + 1160) = v20;
    sub_9D40();
    sub_1AB120();
    sub_9D8C(v0 + 904);
LABEL_7:
    sub_170DC0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_170DF8();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v1 = *(void **)(v0 + 1616);
  uint64_t v2 = v1[41];
  *(void *)(v0 + 1784) = v2;
  uint64_t v3 = v1 + 39;
  switch(v2)
  {
    case 1:
      uint64_t v4 = v1[6];
      uint64_t v5 = v1[7];
      sub_2E38(v1 + 3, v4);
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 64))(v4, v5);
      if (v7)
      {
        uint64_t v35 = v1[39];
        uint64_t v36 = v1[40];
        uint64_t v37 = v1[41];
        *uint64_t v3 = 0;
        v1[40] = 0;
        v1[41] = 2;
        sub_170994(v35, v36, v37);
        swift_task_alloc();
        sub_250E0();
        *(void *)(v0 + 1824) = v38;
        *double v38 = v39;
        uint64_t v40 = sub_16E440;
      }
      else
      {
        uint64_t v8 = v6;
        uint64_t v9 = *(void **)(v0 + 1616);
        uint64_t v10 = v9[6];
        uint64_t v11 = v9[7];
        sub_2E38(v9 + 3, v10);
        char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 48))(v10, v11);
        if (v12 == 61)
        {
          uint64_t v13 = 0;
          uint64_t v14 = 0;
        }
        else
        {
          uint64_t v13 = sub_48170(v12);
        }
        uint64_t v41 = v1[39];
        uint64_t v42 = v1[40];
        uint64_t v43 = v1[41];
        v1[39] = v8;
        v1[40] = v13;
        v1[41] = v14;
        sub_170994(v41, v42, v43);
        swift_task_alloc();
        sub_250E0();
        *(void *)(v0 + 1816) = v38;
        *double v38 = v44;
        uint64_t v40 = sub_16E268;
      }
      v38[1] = v40;
      sub_170DF8();
      return LogHealthKitQuantityFlow.execute()();
    case 2:
      char v27 = *(unsigned char *)(v0 + 1833);
      sub_9B48((uint64_t)(v1 + 13), v0 + 1328);
      uint64_t v28 = sub_1AB1C0();
      sub_47658();
      uint64_t v29 = sub_1AB1B0();
      type metadata accessor for LogQuantityPromptStrategy();
      uint64_t v30 = swift_allocObject();
      *(void *)(v0 + 1512) = v28;
      *(void *)(v0 + 1520) = &protocol witness table for ResponseFactory;
      *(void *)(v0 + 1488) = v29;
      *(unsigned char *)(v30 + 16) = v27;
      memcpy((void *)(v30 + 24), (const void *)(v0 + 1328), 0xA0uLL);
      sub_24D80((long long *)(v0 + 1488), v30 + 184);
      swift_retain();
      sub_1AB350();
      sub_2694(&qword_208170);
      sub_47658();
      sub_1709AC(&qword_208178, 255, (void (*)(uint64_t))type metadata accessor for LogQuantityPromptStrategy);
      uint64_t v31 = sub_1AAE80();
      uint64_t v32 = v1[39];
      uint64_t v33 = v1[40];
      uint64_t v34 = v1[41];
      *uint64_t v3 = 0;
      v1[40] = 0;
      v1[41] = 3;
      sub_170994(v32, v33, v34);
      sub_1AC380();
      *(void *)(v0 + 1576) = v31;
      sub_B56C(qword_208180, &qword_208170);
      swift_retain();
      sub_1AB100();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_7;
    case 3:
      sub_1AB0F0();
      goto LABEL_7;
    case 4:
      sub_1AC320();
      sub_9B48((uint64_t)(v1 + 13), v0 + 1168);
      sub_9BA4();
      sub_1AB120();
      sub_9BF0(v0 + 1168);
      goto LABEL_7;
    default:
      *(void *)(v0 + 1792) = v1[40];
      *(void *)(v0 + 1800) = v1[39];
      swift_bridgeObjectRetain();
      swift_task_alloc();
      sub_250E0();
      *(void *)(v0 + 1808) = v23;
      *uint64_t v23 = v24;
      v23[1] = sub_16E044;
      sub_170DF8();
      return sub_16E618();
  }
}

uint64_t sub_16E044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  sub_470A0();
  uint64_t v14 = v12[225];
  uint64_t v15 = v12[224];
  uint64_t v16 = v12[223];
  uint64_t v17 = *v13;
  sub_A304();
  *uint64_t v18 = v17;
  swift_task_dealloc();
  sub_170994(v14, v15, v16);
  sub_47C98();
  uint64_t v28 = v12[207];
  sub_47C98();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A79EC();
  sub_46EC4();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, v28, a10, a11, a12);
}

uint64_t sub_16E268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  sub_470A0();
  uint64_t v14 = *v13;
  sub_A304();
  *uint64_t v15 = v14;
  swift_task_dealloc();
  sub_47C98();
  uint64_t v25 = *(void *)(v12 + 1656);
  sub_47C98();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A79EC();
  sub_46EC4();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, v25, a10, a11, a12);
}

uint64_t sub_16E440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  sub_470A0();
  uint64_t v14 = *v13;
  sub_A304();
  *uint64_t v15 = v14;
  swift_task_dealloc();
  sub_47C98();
  uint64_t v25 = *(void *)(v12 + 1656);
  sub_47C98();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_A79EC();
  sub_46EC4();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, v25, a10, a11, a12);
}

uint64_t sub_16E618()
{
  sub_A364();
  v1[94] = v0;
  v1[93] = v2;
  v1[92] = v3;
  v1[91] = v4;
  v1[90] = v5;
  uint64_t v6 = sub_2694(&qword_2082D0);
  sub_53D4(v6);
  v1[95] = sub_A42C();
  uint64_t v7 = sub_1AC250();
  sub_53D4(v7);
  v1[96] = sub_A42C();
  uint64_t v8 = sub_1AC800();
  v1[97] = v8;
  sub_A19C(v8);
  v1[98] = v9;
  v1[99] = sub_A220();
  v1[100] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_16E704()
{
  sub_46EFC();
  sub_4712C();
  uint64_t v1 = *(_DWORD **)(v0 + 800);
  uint64_t v2 = *(void *)(v0 + 784);
  uint64_t v3 = *(void *)(v0 + 776);
  id v4 = sub_16F6E4(*(double *)(v0 + 728), *(void *)(v0 + 736), *(void *)(v0 + 744));
  *(void *)(v0 + 808) = v4;
  uint64_t v5 = sub_1AC7D0();
  *(void *)(v0 + 816) = v5;
  sub_A340();
  uint64_t v6 = *(void (**)(_DWORD *, uint64_t, uint64_t))(v2 + 16);
  *(void *)(v0 + 824) = v6;
  *(void *)(v0 + 832) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v5, v3);
  uint64_t v7 = v4;
  uint64_t v8 = sub_1AC7F0();
  os_log_type_t v9 = sub_1ACF50();
  if (os_log_type_enabled(v8, v9))
  {
    sub_A4B0();
    uint64_t v10 = (void *)sub_A494();
    *uint64_t v1 = 138412290;
    *(void *)(v0 + 712) = v7;
    uint64_t v11 = v7;
    sub_1ACFE0();
    *uint64_t v10 = v7;

    sub_A27C(&def_342E4, v12, v13, "Executing intent: %@");
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {

    uint64_t v8 = v7;
  }
  uint64_t v14 = *(void *)(v0 + 784);
  uint64_t v15 = *(void *)(v0 + 752);

  *(void *)(v0 + 840) = *(void *)(v14 + 8);
  *(void *)(v0 + 848) = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v16 = sub_A418();
  v17(v16);
  uint64_t v18 = *(void **)(v15 + 264);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 696;
  *(void *)(v0 + 24) = sub_16E97C;
  *(void *)(v0 + 640) = swift_continuation_init();
  *(void *)(v0 + 608) = _NSConcreteStackBlock;
  *(void *)(v0 + 616) = 0x40000000;
  *(void *)(v0 + 624) = sub_6AA8;
  *(void *)(v0 + 632) = &unk_1F91C0;
  [v18 handleLogQuantity:v7 completion:v0 + 608];
  sub_46EC4();
  return _swift_continuation_await(v19);
}

uint64_t sub_16E97C()
{
  sub_A364();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_16EA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_46EFC();
  sub_4712C();
  uint64_t v13 = *(void (**)(_DWORD *, uint64_t, uint64_t))(v12 + 824);
  uint64_t v14 = *(void *)(v12 + 816);
  uint64_t v15 = *(_DWORD **)(v12 + 792);
  uint64_t v16 = *(void *)(v12 + 776);
  uint64_t v17 = *(void **)(v12 + 696);
  *(void *)(v12 + 856) = v17;
  sub_A340();
  v13(v15, v14, v16);
  uint64_t v18 = v17;
  uint64_t v19 = sub_1AC7F0();
  os_log_type_t v20 = sub_1ACF50();
  if (os_log_type_enabled(v19, v20))
  {
    a9 = v12 + 704;
    sub_A4B0();
    uint64_t v17 = (void *)sub_A494();
    *uint64_t v15 = 138412290;
    *(void *)(v12 + 704) = v18;
    uint64_t v21 = v18;
    sub_1ACFE0();
    void *v17 = v18;

    sub_A27C(&def_342E4, v22, v23, "Received intent response: %@");
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
  }
  uint64_t v24 = (*(uint64_t (**)(void, void))(v12 + 840))(*(void *)(v12 + 792), *(void *)(v12 + 776));
  uint64_t v25 = (*(uint64_t (**)(uint64_t))((char *)&stru_20.maxprot + (swift_isaMask & *(void *)v18)))(v24);
  if (v25 == 4)
  {
    id v31 = [v18 uuidOfLastSavedSample];
    if (v31)
    {
      uint64_t v32 = v31;
      sub_1AAC00();

      uint64_t v33 = 0;
    }
    else
    {
      uint64_t v33 = 1;
    }
    uint64_t v50 = *(void *)(v12 + 760);
    uint64_t v51 = *(void *)(v12 + 752);
    uint64_t v52 = sub_1AAC20();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v50, v33, 1, v52);
    sub_170374(v50, *(unsigned char *)(v51 + 16), v51 + 24);
    sub_6F194(v50, &qword_2082D0);
    sub_1AC3A0();
    id v53 = (void *)swift_task_alloc();
    *(void *)(v12 + 864) = v53;
    *id v53 = v12;
    v53[1] = sub_16EEF0;
    sub_46EC4();
    return sub_16F794();
  }
  else
  {
    if (v25 == 102)
    {
      sub_170EA0();
      sub_1AC330();
      char v34 = v18[16];
      sub_9DE0((uint64_t)(v18 + 64), v12 + 512);
      uint64_t v35 = sub_1AB1C0();
      sub_47658();
      uint64_t v36 = sub_1AB1B0();
      *(void *)(v12 + 576) = v35;
      *(void *)(v12 + 584) = &protocol witness table for ResponseFactory;
      *(void *)(v12 + 552) = v36;
      type metadata accessor for WellnessLoggingCATsSimple();
      sub_A6A4();
      uint64_t v37 = sub_1AC210();
      type metadata accessor for WellnessCATs();
      sub_A6A4();
      uint64_t v38 = sub_1AC1A0();
      *(unsigned char *)(v12 + 504) = v34;
      *(void *)(v12 + 592) = v37;
      *(void *)(v12 + 600) = v38;
      sub_A7744();
      sub_1AB120();

      sub_A7790(v12 + 504);
    }
    else if (v25 == 101)
    {
      sub_170EA0();
      sub_1AC390();
      char v26 = v18[16];
      sub_9DE0((uint64_t)(v18 + 64), v12 + 88);
      sub_9B48((uint64_t)(v18 + 104), v12 + 128);
      uint64_t v27 = sub_1AB1C0();
      sub_47658();
      uint64_t v28 = sub_1AB1B0();
      *(void *)(v12 + 312) = v27;
      *(void *)(v12 + 320) = &protocol witness table for ResponseFactory;
      *(void *)(v12 + 288) = v28;
      type metadata accessor for WellnessCATsSimple();
      sub_A6A4();
      uint64_t v29 = sub_1AC210();
      type metadata accessor for WellnessCATs();
      sub_A6A4();
      uint64_t v30 = sub_1AC1A0();
      *(unsigned char *)(v12 + 80) = v26;
      *(void *)(v12 + 328) = v29;
      *(void *)(v12 + 336) = v30;
      sub_9D40();
      sub_1AB120();

      sub_9D8C(v12 + 80);
    }
    else
    {
      uint64_t v39 = *(void **)(v12 + 808);
      uint64_t v40 = *(void *)(v12 + 752);
      sub_1AC340();
      sub_9B48(v40 + 104, v12 + 344);
      sub_9BA4();
      sub_1AB120();

      sub_9BF0(v12 + 344);
    }
    sub_170ED0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    sub_46EC4();
    return v42(v41, v42, v43, v44, v45, v46, v47, v48, a9, a10, a11, a12);
  }
}

uint64_t sub_16EEF0()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 872) = v3;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_16EFBC()
{
  uint64_t v1 = *(void **)(v0 + 856);
  uint64_t v2 = *(void **)(v0 + 808);
  sub_1AB130();
  swift_release();

  sub_170ED0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v3();
}

uint64_t sub_16F05C(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2694(&qword_2082E8);
  sub_52C4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_E594();
  uint64_t v79 = v9;
  sub_A358();
  __chkstk_darwin(v10);
  sub_A768();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v66 - v12;
  uint64_t v14 = sub_1AC800();
  sub_52C4();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_E594();
  uint64_t v69 = v18;
  sub_A358();
  __chkstk_darwin(v19);
  uint64_t v72 = (char *)&v66 - v20;
  sub_A358();
  __chkstk_darwin(v21);
  uint64_t v22 = sub_1AC7D0();
  sub_A340();
  uint64_t v82 = v16;
  uint64_t v23 = *(void *)(v16 + 16);
  uint64_t v75 = v16 + 16;
  uint64_t v76 = v22;
  uint64_t v74 = v23;
  sub_FD3F0();
  v24();
  uint64_t v80 = v7;
  uint64_t v81 = v5;
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  uint64_t v78 = a1;
  uint64_t v73 = v25;
  v25((uint64_t)v13, a1, v5);
  char v26 = sub_1AC7F0();
  os_log_type_t v27 = sub_1ACF50();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = sub_A4B0();
    uint64_t v70 = v14;
    uint64_t v29 = (uint8_t *)v28;
    uint64_t v30 = sub_E620();
    uint64_t v71 = v3;
    uint64_t v77 = v30;
    v84[0] = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v68 = v29 + 4;
    sub_B56C(&qword_2082F0, &qword_2082E8);
    uint64_t v31 = v81;
    uint64_t v32 = sub_1AD2C0();
    uint64_t v83 = sub_4A278(v32, v33, v84);
    sub_1ACFE0();
    uint64_t v34 = v31;
    swift_bridgeObjectRelease();
    uint64_t v35 = v80;
    uint64_t v36 = *(void (**)(void))(v80 + 8);
    sub_E530();
    v36();
    os_log_type_t v37 = v27;
    uint64_t v38 = v35;
    _os_log_impl(&def_342E4, v26, v37, "Received response from PromptForValueFlowAsync: %s", v29, 0xCu);
    swift_arrayDestroy();
    uint64_t v3 = v71;
    sub_A1F0();
    uint64_t v14 = v70;
    sub_A1F0();
  }
  else
  {
    uint64_t v38 = v80;
    uint64_t v34 = v81;
    uint64_t v36 = *(void (**)(void))(v80 + 8);
    ((void (*)(char *, uint64_t))v36)(v13, v81);
  }

  uint64_t v77 = *(void *)(v82 + 8);
  sub_E530();
  v39();
  uint64_t v40 = v78;
  uint64_t v41 = v73;
  v73((uint64_t)v2, v78, v34);
  int v42 = (*(uint64_t (**)(uint64_t *, uint64_t))(v38 + 88))(v2, v34);
  uint64_t v43 = v79;
  if (v42 == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v38 + 96))(v2, v34);
    uint64_t v69 = *v2;
    uint64_t v68 = (uint8_t *)v2[1];
    uint64_t v67 = v2[2];
    sub_A340();
    sub_E524();
    v44();
    v41(v43, v40, v34);
    uint64_t v45 = v14;
    uint64_t v46 = sub_1AC7F0();
    os_log_type_t v47 = sub_1ACF50();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = sub_A4B0();
      uint64_t v70 = v45;
      uint64_t v49 = (uint8_t *)v48;
      uint64_t v50 = sub_E620();
      uint64_t v71 = v3;
      uint64_t v83 = v50;
      *(_DWORD *)uint64_t v49 = 136315138;
      sub_B56C(&qword_2082F0, &qword_2082E8);
      uint64_t v51 = sub_1AD2C0();
      uint64_t v53 = sub_4A278(v51, v52, &v83);
      sub_5B5E4(v53);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      sub_E530();
      v36();
      _os_log_impl(&def_342E4, v46, v47, "PromptForValueFlowAsync returned: %s", v49, 0xCu);
      swift_arrayDestroy();
      uint64_t v3 = v71;
      sub_A1F0();
      sub_A1F0();
    }
    else
    {
      sub_E530();
      v36();
    }

    sub_E530();
    v63();
    uint64_t v59 = v3[39];
    uint64_t v60 = v3[40];
    uint64_t v61 = v3[41];
    uint64_t v64 = v68;
    v3[39] = v69;
    v3[40] = v64;
    uint64_t v62 = v67;
  }
  else
  {
    sub_E530();
    v36();
    sub_A340();
    sub_E524();
    v54();
    uint64_t v55 = sub_1AC7F0();
    os_log_type_t v56 = sub_1ACF60();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)sub_292A0();
      *(_WORD *)uint64_t v57 = 0;
      _os_log_impl(&def_342E4, v55, v56, "PromptForValueFlowAsync did not return the needed values, erroring out", v57, 2u);
      sub_A1F0();
    }

    sub_E530();
    v58();
    uint64_t v59 = v3[39];
    uint64_t v60 = v3[40];
    uint64_t v61 = v3[41];
    v3[39] = 0;
    v3[40] = 0;
    uint64_t v62 = 4;
  }
  v3[41] = v62;
  return sub_170994(v59, v60, v61);
}

id sub_16F6E4(double a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_allocWithZone((Class)sub_1AC4E0()) init];
  unint64_t v7 = sub_2F2B8(*(unsigned char *)(v3 + 16));
  sub_1597E4(v7, v8, v6);
  [v6 setValue:a1];
  if (a3) {
    NSString v9 = sub_1ACDC0();
  }
  else {
    NSString v9 = 0;
  }
  [v6 setUnits:v9];

  return v6;
}

uint64_t sub_16F794()
{
  sub_A364();
  v1[81] = v0;
  v1[80] = v2;
  uint64_t v3 = sub_1AB0A0();
  v1[82] = v3;
  sub_A19C(v3);
  v1[83] = v4;
  v1[84] = sub_A220();
  v1[85] = swift_task_alloc();
  uint64_t v5 = sub_1AB3D0();
  v1[86] = v5;
  sub_A19C(v5);
  v1[87] = v6;
  v1[88] = sub_A42C();
  uint64_t v7 = sub_1AC800();
  v1[89] = v7;
  sub_A19C(v7);
  v1[90] = v8;
  v1[91] = sub_A220();
  v1[92] = swift_task_alloc();
  v1[93] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_16F8A8()
{
  sub_A364();
  *(void *)(v0 + 480) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 488) = sub_45E30();
  *(unsigned char *)(v0 + 456) = 4;
  char v1 = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 456);
  if (v1)
  {
    *(unsigned char *)(v0 + 776) = *(unsigned char *)(*(void *)(v0 + 648) + 16);
    swift_task_alloc();
    sub_250E0();
    *(void *)(v0 + 752) = v2;
    *uint64_t v2 = v3;
    v2[1] = sub_16FA00;
    return sub_705D4();
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 760) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_17006C;
    return sub_190340();
  }
}

uint64_t sub_16FA00()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_16FAC8()
{
  uint64_t v42 = v0;
  uint64_t v1 = (id *)(v0 + 640);
  uint64_t v2 = *(void **)(v0 + 640);
  uint64_t v3 = (uint8_t *)sub_1AC7D0();
  sub_A340();
  sub_FD3F0();
  v4();
  id v5 = v2;
  uint64_t v6 = sub_1AC7F0();
  os_log_type_t v7 = sub_1ACF50();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void **)(v0 + 640);
    sub_A4B0();
    uint64_t v9 = (void *)sub_A494();
    *(_DWORD *)uint64_t v3 = 138412290;
    *(void *)(v0 + 632) = v8;
    id v10 = v8;
    sub_1ACFE0();
    *uint64_t v9 = v8;

    _os_log_impl(&def_342E4, v6, v7, "#LogHealthKitQuantityFlow: In successfulResponse intent response is %@", v3, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {

    uint64_t v6 = *v1;
  }
  uint64_t v11 = *(void *)(v0 + 744);
  uint64_t v12 = *(void *)(v0 + 720);
  uint64_t v13 = *(void *)(v0 + 712);

  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v14(v11, v13);
  sub_A340();
  sub_FD3F0();
  v15();
  swift_retain_n();
  uint64_t v16 = sub_1AC7F0();
  os_log_type_t v17 = sub_1ACF50();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v37 = *(void *)(v0 + 712);
    uint64_t v38 = *(void *)(v0 + 736);
    char v18 = *(unsigned char *)(v0 + 776);
    uint64_t v19 = (uint8_t *)sub_A4B0();
    v41[0] = sub_E620();
    *(_DWORD *)uint64_t v19 = 136315138;
    unint64_t v20 = sub_2F2B8(v18);
    *(void *)(v0 + 624) = sub_4A278(v20, v21, v41);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&def_342E4, v16, v17, "#LogHealthKitQuantityFlow: In successfulResponse identifier is %s", v19, 0xCu);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v22 = v14;
    v14(v38, v37);
  }
  else
  {
    uint64_t v23 = *(void *)(v0 + 736);
    uint64_t v24 = *(void *)(v0 + 712);
    swift_release_n();

    uint64_t v22 = v14;
    v14(v23, v24);
  }
  uint64_t v39 = (long long *)(v0 + 336);
  sub_9FA8(v0 + 376, v0 + 336, &qword_202570);
  if (*(void *)(v0 + 360))
  {
    sub_24D80(v39, v0 + 496);
    sub_9DE0(v0 + 496, v0 + 416);
    uint64_t v25 = swift_allocObject();
    sub_24D80((long long *)(v0 + 416), v25 + 16);
    sub_1AB350();
    sub_1AAE40();
    sub_47658();
    *(void *)(v0 + 616) = sub_1AAE30();
    uint64_t v26 = sub_1AAF70();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 496);
    sub_6F194(v0 + 376, &qword_202570);
    swift_release();
  }
  else
  {
    uint64_t v40 = v0 + 16;
    uint64_t v27 = *(void *)(v0 + 712);
    sub_6F194((uint64_t)v39, &qword_202570);
    sub_A340();
    sub_FD3F0();
    v28();
    uint64_t v29 = sub_1AC7F0();
    os_log_type_t v30 = sub_1ACF60();
    if (sub_470C8(v30))
    {
      uint64_t v31 = (uint8_t *)sub_292A0();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&def_342E4, v29, (os_log_type_t)v27, "#LogHealthKitQuantityFlow: Invalid response output", v31, 2u);
      sub_A1F0();
    }
    uint64_t v32 = *(void *)(v0 + 728);
    uint64_t v33 = *(void *)(v0 + 712);
    uint64_t v34 = *(void *)(v0 + 648);

    v22(v32, v33);
    sub_1AC340();
    sub_9B48(v34 + 104, v40);
    sub_9BA4();
    uint64_t v26 = sub_1AAF70();
    sub_9BF0(v40);
    sub_6F194(v0 + 376, &qword_202570);
  }
  sub_170E50();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v35(v26);
}

uint64_t sub_17006C()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 768) = v3;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_170138()
{
  uint64_t v1 = (void *)v0[96];
  if (v1)
  {
    uint64_t v2 = v0[88];
    uint64_t v3 = v0[87];
    uint64_t v15 = v0[86];
    uint64_t v4 = v0[85];
    uint64_t v5 = v0[83];
    uint64_t v6 = v0[82];
    uint64_t v7 = v0[81];
    id v8 = v1;
    sub_1AB070();
    sub_E524();
    v9();
    sub_1AB370();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    id v10 = [v8 patternId];
    sub_1ACDD0();

    sub_1AB380();
    sub_2E38((void *)(v7 + 104), *(void *)(v7 + 128));
    v0[76] = sub_1AAF40();
    sub_1AAEF0();
    uint64_t v11 = sub_1AAF70();

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v15);
    swift_release();
  }
  else
  {
    uint64_t v12 = v0[81] + 104;
    sub_1AC340();
    sub_9B48(v12, (uint64_t)(v0 + 22));
    sub_9BA4();
    uint64_t v11 = sub_1AAF70();
    sub_9BF0((uint64_t)(v0 + 22));
  }
  sub_170E50();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(uint64_t))v0[1];
  return v13(v11);
}

uint64_t sub_170374(uint64_t a1, char a2, uint64_t a3)
{
  sub_1AC800();
  sub_52C4();
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  sub_A768();
  __chkstk_darwin(v6);
  uint64_t v7 = sub_2694(&qword_2082D0);
  uint64_t v8 = sub_53D4(v7);
  __chkstk_darwin(v8);
  sub_E548();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = sub_1AAC20();
  sub_52C4();
  uint64_t v38 = v13;
  __chkstk_darwin(v14);
  sub_E548();
  uint64_t v17 = v16 - v15;
  sub_1ABE30();
  if (sub_1ABE20())
  {
    sub_1ABE00();
    swift_release();
    sub_1AAF60();
    swift_release();
    if (*((void *)&v43 + 1))
    {
      sub_24D80(&v42, (uint64_t)v45);
      sub_9FA8(a1, v11, &qword_2082D0);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v11, 1, v12) == 1)
      {
        sub_6F194(v11, &qword_2082D0);
        sub_1AC7D0();
        sub_A340();
        sub_559E4();
        sub_E524();
        v18();
        uint64_t v19 = (void *)sub_1AC7F0();
        os_log_type_t v20 = sub_1ACF60();
        if (sub_470C8(v20))
        {
          *(_WORD *)sub_292A0() = 0;
          sub_47358(&def_342E4, v21, v22, "LogHealthKitQuantityFlow: No uuidOfLastSavedSample. Continuing without registering corrections flow.");
          sub_A1F0();
        }

        sub_170E90();
        v23();
      }
      else
      {
        sub_5572C();
        v31();
        sub_1AC7D0();
        sub_A340();
        sub_559E4();
        sub_E524();
        v32();
        uint64_t v33 = (void *)sub_1AC7F0();
        os_log_type_t v34 = sub_1ACF50();
        if (sub_470C8(v34))
        {
          *(_WORD *)sub_292A0() = 0;
          sub_47358(&def_342E4, v35, v36, "LogHealthKitQuantityFlow: Registering corrections flow");
          sub_A1F0();
        }

        sub_170E90();
        v37();
        sub_2E38((void *)(v39 + 272), *(void *)(v39 + 296));
        sub_E4ACC(v17, a2, a3, (uint64_t *)&v42);
        sub_2E38(v45, v45[3]);
        sub_1AAF50();
        _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&v42);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v17, v12);
      }
      return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v45);
    }
  }
  else
  {
    uint64_t v44 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
  }
  sub_6F194((uint64_t)&v42, &qword_202F88);
  sub_1AC7D0();
  sub_A340();
  sub_559E4();
  sub_E524();
  v24();
  uint64_t v25 = (void *)sub_1AC7F0();
  os_log_type_t v26 = sub_1ACF60();
  if (sub_470C8(v26))
  {
    *(_WORD *)sub_292A0() = 0;
    sub_47358(&def_342E4, v27, v28, "LogHealthKitQuantityFlow: No corrections client available. Continuing without registering corrections flow.");
    sub_A1F0();
  }

  sub_170E90();
  return v29();
}

uint64_t *LogHealthKitQuantityFlow.deinit()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 3));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 8));
  sub_E4B8((uint64_t)(v0 + 13));
  swift_unknownObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 34));
  sub_170994(v0[39], v0[40], v0[41]);
  return v0;
}

uint64_t LogHealthKitQuantityFlow.__deallocating_deinit()
{
  LogHealthKitQuantityFlow.deinit();

  return _swift_deallocClassInstance(v0, 337, 7);
}

BOOL sub_170814(uint64_t a1)
{
  return LogHealthKitQuantityFlow.on(input:)(a1);
}

uint64_t sub_17083C()
{
  return LogHealthKitQuantityFlow.execute(completion:)();
}

uint64_t sub_170860()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24C20;
  return LogHealthKitQuantityFlow.execute()();
}

uint64_t sub_1708FC()
{
  type metadata accessor for LogHealthKitQuantityFlow();

  return sub_1AAFB0();
}

uint64_t sub_170934(void (*a1)(void))
{
  a1();

  return sub_1AD3E0();
}

uint64_t type metadata accessor for LogHealthKitQuantityFlow()
{
  return self;
}

uint64_t sub_170994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)(a3 - 1) >= 4) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1709AC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t destroy for LogHealthKitQuantityFlow.State(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 16);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s18WellnessFlowPlugin24LogHealthKitQuantityFlowC5StateOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if ((int)v4 - 1 < 0)
  {
    *(void *)(a1 + 16) = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  return a1;
}

void *assignWithCopy for LogHealthKitQuantityFlow.State(void *a1, void *a2)
{
  LODWORD(v4) = -1;
  if (a1[2] >= 0xFFFFFFFFuLL) {
    LODWORD(v5) = -1;
  }
  else {
    uint64_t v5 = a1[2];
  }
  int v6 = v5 - 1;
  if (a2[2] < 0xFFFFFFFFuLL) {
    uint64_t v4 = a2[2];
  }
  int v7 = v4 - 1;
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if ((v7 & 0x80000000) == 0)
  {
LABEL_11:
    long long v8 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v8;
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

__n128 initializeWithTake for LogHealthKitQuantityFlow.State(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for LogHealthKitQuantityFlow.State(void *a1, void *a2)
{
  unint64_t v4 = a1[2];
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if (v5 - 1 < 0)
  {
    unint64_t v6 = a2[2];
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF) {
      uint64_t v7 = a2[2];
    }
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = v6;
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for LogHealthKitQuantityFlow.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFA && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  unsigned int v5 = v4 + 1;
  unsigned int v6 = v4 - 3;
  if (v5 >= 5) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LogHealthKitQuantityFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 4;
    }
  }
  return result;
}

uint64_t sub_170C8C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *sub_170CB0(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    result[1] = 0;
    result[2] = 0;
    *__n128 result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    result[2] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LogHealthKitQuantityFlow.State()
{
  return &type metadata for LogHealthKitQuantityFlow.State;
}

uint64_t sub_170CF0()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_170D28()
{
  sub_A364();
  uint64_t v3 = v2;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v1 + 16) = v4;
  *int v4 = v5;
  v4[1] = sub_24C20;
  return sub_45618(v3, v0 + 16);
}

uint64_t sub_170DC0()
{
  return swift_task_dealloc();
}

uint64_t sub_170E18()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, v0);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v0);
}

uint64_t sub_170E50()
{
  return swift_task_dealloc();
}

uint64_t sub_170E78()
{
  return sub_1AC240();
}

uint64_t sub_170EA0()
{
  return *(unsigned __int8 *)(*(void *)(v0 + 752) + 336);
}

uint64_t sub_170EB8()
{
  return v0;
}

uint64_t sub_170ED0()
{
  return swift_task_dealloc();
}

uint64_t sub_170EF0()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, v0);
}

uint64_t sub_170F10()
{
  return v0;
}

uint64_t sub_170F24(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = sub_1ACE20();
    uint64_t v5 = v4;
    BOOL v6 = v3 == 1667720548 && v4 == 0xE400000000000000;
    if (v6
      || (a1 = v3, (sub_171248() & 1) != 0)
      || (a1 == 6533314 ? (BOOL v7 = v5 == 0xA300000000000000) : (BOOL v7 = 0), v7 || (sub_171248() & 1) != 0))
    {
      a1 = 0x737569736C6563;
      swift_bridgeObjectRelease();
    }
    else
    {
      BOOL v9 = a1 == 1718052196 && v5 == 0xE400000000000000;
      if (!v9 && (sub_171248() & 1) == 0)
      {
        BOOL v10 = a1 == 6729922 && v5 == 0xA300000000000000;
        if (!v10 && (sub_171248() & 1) == 0)
        {
          if (a1 == 107 && v5 == 0xE100000000000000)
          {
            a1 = 0x6E69766C656BLL;
          }
          else
          {
            if ((sub_171248() & 1) == 0) {
              return a1;
            }
            a1 = 0x6E69766C656BLL;
          }
          swift_bridgeObjectRelease();
          return a1;
        }
      }
      a1 = 0x65686E6572686166;
      swift_bridgeObjectRelease();
    }
  }
  return a1;
}

uint64_t sub_1710A4(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return a1;
  }
  uint64_t v4 = 1952802150;
  BOOL v5 = a1 == 29798 && a2 == 0xE200000000000000;
  if (!v5 && (sub_171228() & 1) == 0)
  {
    uint64_t v4 = 0x736568636E69;
    BOOL v6 = a1 == 28265 && a2 == 0xE200000000000000;
    if (!v6 && (sub_171228() & 1) == 0)
    {
      uint64_t v4 = 0x7364726179;
      BOOL v7 = a1 == 25721 && a2 == 0xE200000000000000;
      if (!v7 && (sub_171228() & 1) == 0)
      {
        uint64_t v4 = 0x73656C696DLL;
        BOOL v8 = a1 == 26989 && a2 == 0xE200000000000000;
        if (!v8 && (sub_171228() & 1) == 0)
        {
          uint64_t v4 = 0x73726574656DLL;
          BOOL v10 = a1 == 109 && a2 == 0xE100000000000000;
          if (!v10 && (sub_1AD2F0() & 1) == 0)
          {
            uint64_t v4 = 0x74656D69746E6563;
            BOOL v11 = a1 == 28003 && a2 == 0xE200000000000000;
            if (!v11 && (sub_171228() & 1) == 0)
            {
              swift_bridgeObjectRetain();
              return a1;
            }
          }
        }
      }
    }
  }
  return v4;
}

uint64_t sub_171228()
{
  return sub_1AD2F0();
}

uint64_t sub_171248()
{
  return sub_1AD2F0();
}

uint64_t initializeWithCopy for DateTimeInferenceUtils(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for DateTimeInferenceUtils(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 initializeWithTake for DateTimeInferenceUtils(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DateTimeInferenceUtils(uint64_t a1, uint64_t a2)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DateTimeInferenceUtils(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DateTimeInferenceUtils(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DateTimeInferenceUtils()
{
  return &type metadata for DateTimeInferenceUtils;
}

void sub_1713D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_A638();
  a19 = v22;
  a20 = v23;
  uint64_t v24 = v20;
  uint64_t v144 = v25;
  int v133 = v26;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v31 = sub_2694(&qword_208310);
  uint64_t v32 = sub_53D4(v31);
  __chkstk_darwin(v32);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v33);
  sub_559A0();
  sub_55680(v34);
  uint64_t v132 = sub_1ABBD0();
  sub_52C4();
  uint64_t v131 = v35;
  __chkstk_darwin(v36);
  sub_176E10(v37, v122);
  uint64_t v38 = sub_2694(&qword_201CC8);
  uint64_t v39 = sub_53D4(v38);
  __chkstk_darwin(v39);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v40);
  sub_559A0();
  sub_55680(v41);
  uint64_t v42 = sub_1AABD0();
  sub_52C4();
  uint64_t v145 = v43;
  __chkstk_darwin(v44);
  sub_E594();
  v140 = v45;
  sub_A358();
  __chkstk_darwin(v46);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v47);
  sub_176DFC();
  uint64_t v48 = sub_1AC800();
  sub_52C4();
  uint64_t v50 = v49;
  __chkstk_darwin(v51);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v52);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v53);
  sub_2073C();
  uint64_t v138 = v54;
  sub_A358();
  __chkstk_darwin(v55);
  uint64_t v57 = (char *)&v122 - v56;
  uint64_t v58 = sub_1AC7D0();
  sub_A340();
  uint64_t v139 = v50;
  uint64_t v59 = *(void (**)(void, void, void))(v50 + 16);
  uint64_t v142 = v50 + 16;
  uint64_t v143 = v58;
  uint64_t v141 = v59;
  v59(v57, v58, v48);
  swift_retain_n();
  uint64_t v60 = sub_1AC7F0();
  os_log_type_t v61 = sub_1ACF50();
  BOOL v62 = os_log_type_enabled(v60, v61);
  uint64_t v135 = v24;
  uint64_t v136 = v30;
  if (v62)
  {
    uint64_t v63 = (uint8_t *)sub_5B2D4();
    uint64_t v64 = sub_E620();
    uint64_t v125 = v42;
    uint64_t v137 = (void (*)(void))v64;
    uint64_t v148 = v64;
    *(_DWORD *)uint64_t v63 = 136315138;
    uint64_t v124 = v63 + 4;
    v147[0] = v28;
    sub_1ABDF0();
    sub_176940(&qword_203278, (void (*)(uint64_t))&type metadata accessor for DateTime);
    uint64_t v65 = sub_1AD2C0();
    v147[0] = sub_4A278(v65, v66, &v148);
    sub_1ACFE0();
    sub_176BE4();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v60, v61, "given date before conversion: %s", v63, 0xCu);
    swift_arrayDestroy();
    uint64_t v42 = v125;
    sub_A1F0();
    sub_A1F0();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v137 = *(void (**)(void))(v139 + 8);
  sub_E530();
  v67();
  uint64_t v68 = v128;
  uint64_t v69 = v144;
  sub_171E3C();
  sub_A340();
  sub_E524();
  v70();
  uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v145 + 16);
  v71(v68, v69, v42);
  v71((uint64_t)v140, v21, v42);
  uint64_t v72 = sub_1AC7F0();
  os_log_type_t v73 = sub_1ACF50();
  uint64_t v74 = v68;
  int v75 = v73;
  BOOL v76 = os_log_type_enabled(v72, v73);
  uint64_t v134 = v28;
  if (v76)
  {
    uint64_t v77 = sub_E5BC();
    uint64_t v125 = swift_slowAlloc();
    v147[0] = v125;
    *(_DWORD *)uint64_t v77 = 136315394;
    sub_176940(&qword_206570, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v128 = v21;
    uint64_t v78 = sub_1AD2C0();
    uint64_t v146 = sub_4A278(v78, v79, v147);
    uint64_t v124 = (uint8_t *)v48;
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v80 = *(void (**)(void))(v145 + 8);
    sub_47310();
    v80();
    *(_WORD *)(v77 + 12) = 2080;
    int v123 = v75;
    uint64_t v21 = v128;
    uint64_t v81 = sub_1AD2C0();
    uint64_t v146 = sub_4A278(v81, v82, v147);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    v140 = v80;
    sub_47310();
    v80();
    _os_log_impl(&def_342E4, v72, (os_log_type_t)v123, "now date: %s , given date: %s", (uint8_t *)v77, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    uint64_t v84 = *(void (**)(void))(v145 + 8);
    ((void (*)(uint64_t, uint64_t))v84)(v74, v42);
    uint64_t v85 = sub_177118();
    v140 = v84;
    ((void (*)(uint64_t))v84)(v85);
  }

  uint64_t v83 = v137;
  sub_E530();
  v83();
  uint64_t v86 = v136;
  if ((sub_1AAB70() & 1) == 0)
  {
    sub_A340();
    sub_E524();
    v101();
    uint64_t v102 = (void *)sub_1AC7F0();
    os_log_type_t v103 = sub_1ACF50();
    if (sub_B7B50(v103))
    {
      char v104 = (_WORD *)sub_292A0();
      sub_29368(v104);
      sub_55980(&def_342E4, v105, v106, "using .future strategy");
      uint64_t v83 = v137;
      sub_A1F0();
    }

    sub_E530();
    v83();
    uint64_t v107 = sub_176B5C();
    v108(v107);
    sub_176F08();
    sub_B7ACC();
    v109();
    if (sub_1ABD80())
    {
      uint64_t v110 = v127;
      sub_1ABD30();
      swift_release();
      uint64_t v111 = sub_1ABD20();
      sub_A208(v110, 1, v111);
      if (!v98)
      {
        sub_5B028(v110, &qword_208310);
        sub_E530();
        v112();
        id v100 = &a13;
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v117 = sub_1ABD20();
      uint64_t v110 = v127;
      sub_A708(v127, v118, v119, v117);
    }
    sub_5B028(v110, &qword_208310);
    uint64_t v120 = v130;
    sub_1761CC(v130, v86);
    sub_5B028(v120, &qword_201CC8);
    sub_E530();
    v121();
    goto LABEL_23;
  }
  sub_A340();
  sub_E524();
  v87();
  id v88 = (void *)sub_1AC7F0();
  os_log_type_t v89 = sub_1ACF50();
  if (sub_B7B50(v89))
  {
    uint64_t v90 = (_WORD *)sub_292A0();
    sub_29368(v90);
    sub_55980(&def_342E4, v91, v92, "using .past strategy");
    uint64_t v83 = v137;
    sub_A1F0();
  }

  sub_E530();
  v83();
  uint64_t v93 = sub_176B5C();
  v94(v93);
  sub_176F08();
  sub_B7ACC();
  v95();
  if (!sub_1ABD80())
  {
    uint64_t v113 = sub_1ABD20();
    uint64_t v96 = v126;
    sub_A708(v126, v114, v115, v113);
    goto LABEL_20;
  }
  uint64_t v96 = v126;
  sub_1ABD30();
  swift_release();
  uint64_t v97 = sub_1ABD20();
  sub_A208(v96, 1, v97);
  if (v98)
  {
LABEL_20:
    sub_5B028(v96, &qword_208310);
    uint64_t v116 = v129;
    sub_1761CC(v129, v86);
    sub_5B028(v116, &qword_201CC8);
    ((void (*)(uint64_t, uint64_t))v140)(v21, v42);
    goto LABEL_23;
  }
  sub_5B028(v96, &qword_208310);
  sub_E530();
  v99();
  id v100 = &a12;
LABEL_18:
  sub_159640(*(v100 - 32), v86);
LABEL_23:
  sub_A56C();
}

void sub_171E3C()
{
  sub_A638();
  uint64_t v100 = v0;
  uint64_t v104 = v1;
  uint64_t v94 = v2;
  sub_1AABD0();
  sub_52C4();
  uint64_t v102 = v4;
  uint64_t v103 = v3;
  __chkstk_darwin(v3);
  sub_53E0();
  uint64_t v101 = v5;
  uint64_t v6 = sub_1AAD30();
  sub_52C4();
  uint64_t v98 = v7;
  __chkstk_darwin(v8);
  sub_E594();
  uint64_t v95 = v9;
  sub_A358();
  __chkstk_darwin(v10);
  sub_559A0();
  uint64_t v96 = v11;
  uint64_t v12 = sub_2694(&qword_201E10);
  uint64_t v13 = sub_53D4(v12);
  __chkstk_darwin(v13);
  sub_53E0();
  uint64_t v97 = v14;
  uint64_t v15 = sub_1ABCE0();
  sub_52C4();
  uint64_t v105 = v16;
  __chkstk_darwin(v17);
  sub_53E0();
  uint64_t v88 = v18;
  uint64_t v90 = sub_2694(&qword_208328);
  sub_20688();
  __chkstk_darwin(v19);
  sub_E548();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = sub_2694(&qword_208330);
  uint64_t v24 = sub_53D4(v23);
  __chkstk_darwin(v24);
  os_log_type_t v89 = &v86[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_A358();
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v29 = &v86[-v28];
  __chkstk_darwin(v27);
  sub_559A0();
  uint64_t v91 = v30;
  uint64_t v31 = sub_2694(&qword_208310);
  uint64_t v32 = sub_53D4(v31);
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v35 = &v86[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v33);
  uint64_t v37 = &v86[-v36];
  uint64_t v38 = sub_2694(&qword_204FF0);
  uint64_t v39 = sub_53D4(v38);
  __chkstk_darwin(v39);
  sub_E548();
  uint64_t v42 = v41 - v40;
  uint64_t v43 = sub_2694(&qword_204FF8);
  uint64_t v44 = sub_53D4(v43);
  __chkstk_darwin(v44);
  sub_E548();
  sub_1AAAA0();
  sub_52C4();
  uint64_t v92 = v46;
  uint64_t v93 = v45;
  __chkstk_darwin(v45);
  sub_E548();
  sub_55948();
  uint64_t v99 = v6;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v47, v48, v49, v6);
  uint64_t v50 = sub_1AAD60();
  sub_A708(v42, v51, v52, v50);
  sub_1AAA90();
  if (!sub_1ABD80())
  {
    uint64_t v58 = sub_1ABD20();
    sub_A708((uint64_t)v37, v59, v60, v58);
    goto LABEL_6;
  }
  sub_1ABD30();
  swift_release();
  uint64_t v53 = sub_1ABD20();
  sub_A208((uint64_t)v37, 1, v53);
  if (v72) {
    goto LABEL_6;
  }
  sub_553FC((uint64_t)v37, (uint64_t)v35, &qword_208310);
  sub_A1CC();
  uint64_t v55 = v54;
  sub_177158();
  int v57 = v56();
  if (v57 == enum case for DateTime.DateTimeRange.DefinedDateTimeRange.afternoon(_:)) {
    goto LABEL_26;
  }
  if (v57 != enum case for DateTime.DateTimeRange.DefinedDateTimeRange.evening(_:))
  {
    if (v57 == enum case for DateTime.DateTimeRange.DefinedDateTimeRange.morning(_:)) {
      goto LABEL_26;
    }
    if (v57 == enum case for DateTime.DateTimeRange.DefinedDateTimeRange.night(_:)) {
      goto LABEL_34;
    }
    (*(void (**)(unsigned char *, uint64_t))(v55 + 8))(v35, v53);
LABEL_6:
    if (!sub_1ABDD0() || (uint64_t v61 = sub_1ABCB0(), v63 = v62, swift_release(), (v63 & 1) != 0))
    {
      uint64_t v64 = 0;
    }
    else if (v61 == 12)
    {
      uint64_t v64 = 0;
    }
    else
    {
      uint64_t v64 = v61;
    }
    uint64_t v65 = sub_1ABDD0();
    uint64_t v66 = v91;
    if (v65)
    {
      sub_1ABCF0();
      swift_release();
    }
    else
    {
      sub_55948();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v67, v68, v69, v15);
    }
    (*(void (**)(unsigned char *, void, uint64_t))(v105 + 104))(v29, enum case for DateTime.Time.Meridiem.pm(_:), v15);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v29, 0, 1, v15);
    uint64_t v70 = v22 + *(int *)(v90 + 48);
    sub_553FC(v66, v22, &qword_208330);
    sub_553FC((uint64_t)v29, v70, &qword_208330);
    sub_A208(v22, 1, v15);
    if (v72)
    {
      sub_5B028((uint64_t)v29, &qword_208330);
      sub_5B028(v66, &qword_208330);
      sub_A208(v70, 1, v15);
      if (v72)
      {
        sub_5B028(v22, &qword_208330);
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v71 = v89;
      sub_553FC(v22, (uint64_t)v89, &qword_208330);
      sub_A208(v70, 1, v15);
      if (!v72)
      {
        uint64_t v73 = v105;
        uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 32);
        uint64_t v90 = (uint64_t)v37;
        v74(v88, v70, v15);
        sub_176940(&qword_208338, (void (*)(uint64_t))&type metadata accessor for DateTime.Time.Meridiem);
        int v87 = sub_1ACDB0();
        int v75 = *(void (**)(void))(v73 + 8);
        sub_F139C();
        v75();
        sub_5B028((uint64_t)v29, &qword_208330);
        sub_5B028(v91, &qword_208330);
        uint64_t v37 = (unsigned char *)v90;
        sub_F139C();
        v75();
        sub_5B028(v22, &qword_208330);
        if ((v87 & 1) == 0) {
          goto LABEL_26;
        }
LABEL_25:
        if (__OFADD__(v64, 12))
        {
          __break(1u);
          goto LABEL_39;
        }
        goto LABEL_26;
      }
      sub_5B028((uint64_t)v29, &qword_208330);
      sub_5B028(v66, &qword_208330);
      (*(void (**)(unsigned char *, uint64_t))(v105 + 8))(v71, v15);
    }
    sub_5B028(v22, &qword_208328);
LABEL_26:
    sub_1AAA40();
    sub_5B028((uint64_t)v37, &qword_208310);
    goto LABEL_27;
  }
LABEL_34:
  sub_5B028((uint64_t)v37, &qword_208310);
  sub_1AAA40();
LABEL_27:
  uint64_t v76 = sub_1ABDD0();
  uint64_t v77 = v97;
  if (v76)
  {
    sub_1ABCC0();
    swift_release();
  }
  sub_1AAA70();
  if (sub_1ABDD0())
  {
    sub_1ABCD0();
    swift_release();
  }
  sub_1AAA80();
  uint64_t v78 = v96;
  sub_1AAD00();
  uint64_t v79 = v95;
  sub_1AAD00();
  sub_1AACA0();
  uint64_t v80 = v99;
  uint64_t v81 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
  v81(v79, v99);
  sub_177118();
  sub_1AACD0();
  uint64_t v83 = v102;
  uint64_t v82 = v103;
  sub_E530();
  v84();
  v81(v78, v80);
  sub_A208(v77, 1, v82);
  if (!v72)
  {
    sub_E558();
    v85();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 32))(v94, v77, v82);
    sub_A56C();
    return;
  }
LABEL_39:
  __break(1u);
}

void sub_172774()
{
  sub_A638();
  uint64_t v3 = sub_2694(&qword_208308);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_53E0();
  uint64_t v44 = v5;
  uint64_t v6 = sub_2694(&qword_208310);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_53E0();
  uint64_t v43 = v8;
  uint64_t v9 = sub_2694(&qword_208318);
  uint64_t v10 = sub_53D4(v9);
  __chkstk_darwin(v10);
  sub_53E0();
  uint64_t v45 = v11;
  uint64_t v12 = sub_2694(&qword_208320);
  uint64_t v13 = sub_53D4(v12);
  __chkstk_darwin(v13);
  sub_E548();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = sub_2694(&qword_201CB8);
  uint64_t v18 = sub_53D4(v17);
  __chkstk_darwin(v18);
  sub_176F30();
  uint64_t v19 = sub_1AB880();
  sub_52C4();
  uint64_t v21 = v20;
  __chkstk_darwin(v22);
  sub_98778();
  __chkstk_darwin(v23);
  sub_176DFC();
  sub_1AB770();
  if (sub_1AB7B0())
  {
    uint64_t v24 = sub_1AB640();
    swift_release();
    if (v24)
    {
LABEL_3:
      swift_release();
      goto LABEL_12;
    }
  }
  if (sub_1AB7B0())
  {
    uint64_t v25 = sub_1AB670();
    swift_release();
    if (v25)
    {
      swift_retain();
      uint64_t v26 = sub_1AB610();
      swift_release();
      if (v26)
      {
        sub_1AB870();
        swift_release();
        sub_A208(v2, 1, v19);
        if (!v27)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v1, v2, v19);
          (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v0, enum case for UsoEntity_common_ListPosition.DefinedValues.common_ListPosition_Last(_:), v19);
          char v28 = sub_154574(v1, v0);
          uint64_t v29 = *(void (**)(void))(v21 + 8);
          sub_CD2F0();
          v29();
          if (v28)
          {
            uint64_t v30 = sub_1ABC70();
            sub_A708(v16, v31, v32, v30);
            uint64_t v33 = sub_1ABD90();
            sub_A708(v45, v34, v35, v33);
            uint64_t v36 = sub_1ABD20();
            sub_20688();
            sub_177138();
            v37();
            _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v43, 0, 1, v36);
            uint64_t v38 = sub_1ABDE0();
            sub_20688();
            sub_177138();
            v39();
            _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v44, 0, 1, v38);
            sub_1ABD60();
            sub_47658();
            sub_1ABD50();
            sub_1ABDF0();
            sub_47658();
            sub_1ABC50();
            swift_release();
            swift_release();
            sub_E530();
            v29();
            goto LABEL_12;
          }
          sub_CD2F0();
          v29();
          goto LABEL_3;
        }
      }
      else
      {
        sub_55948();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v40, v41, v42, v19);
      }
      swift_release();
      sub_5B028(v2, &qword_201CB8);
    }
  }
LABEL_12:
  sub_A56C();
}

void sub_172BE4()
{
  sub_A638();
  uint64_t v150 = v1;
  LODWORD(v149) = v2;
  uint64_t v148 = v3;
  uint64_t v138 = v4;
  uint64_t v128 = sub_2694(&qword_201CC8);
  sub_20688();
  __chkstk_darwin(v5);
  sub_20698();
  __chkstk_darwin(v6);
  sub_559A0();
  uint64_t v126 = v7;
  uint64_t v154 = sub_1AC800();
  sub_52C4();
  uint64_t v152 = v8;
  __chkstk_darwin(v9);
  v151 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_A358();
  __chkstk_darwin(v11);
  sub_20698();
  __chkstk_darwin(v12);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v13);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v14);
  sub_559A0();
  sub_206D4(v15);
  uint64_t v131 = sub_2694(&qword_2082F8);
  sub_52C4();
  uint64_t v133 = v16;
  __chkstk_darwin(v17);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v18);
  sub_559A0();
  uint64_t v153 = v19;
  uint64_t v147 = sub_1ABBD0();
  sub_52C4();
  uint64_t v146 = v20;
  __chkstk_darwin(v21);
  sub_53E0();
  sub_177144(v22);
  uint64_t v144 = sub_1ABBE0();
  sub_52C4();
  uint64_t v143 = v23;
  __chkstk_darwin(v24);
  sub_176E10(v25, v125);
  uint64_t v137 = sub_1ABC00();
  sub_52C4();
  uint64_t v136 = v26;
  __chkstk_darwin(v27);
  uint64_t v29 = sub_176E30(v28, v125);
  uint64_t v30 = sub_53D4(v29);
  __chkstk_darwin(v30);
  sub_53E0();
  uint64_t v141 = v31;
  uint64_t v32 = sub_1AAD30();
  uint64_t v33 = sub_53D4(v32);
  __chkstk_darwin(v33);
  sub_176CC8(v34, v125);
  uint64_t v140 = sub_1ABC10();
  sub_52C4();
  uint64_t v139 = v35;
  __chkstk_darwin(v36);
  sub_176CEC(v37, v125);
  uint64_t v38 = sub_1AAD60();
  uint64_t v39 = sub_53D4(v38);
  __chkstk_darwin(v39);
  sub_176F30();
  uint64_t v40 = sub_1AAC70();
  uint64_t v41 = sub_53D4(v40);
  __chkstk_darwin(v41);
  sub_98778();
  uint64_t v43 = __chkstk_darwin(v42);
  __chkstk_darwin(v43);
  sub_176DFC();
  uint64_t v135 = sub_1ABBC0();
  sub_52C4();
  uint64_t v134 = v44;
  __chkstk_darwin(v45);
  sub_E548();
  uint64_t v48 = v47 - v46;
  sub_1ABBB0();
  sub_2E38(v0, v0[3]);
  sub_1AB010();
  uint64_t v49 = (void *)sub_177118();
  sub_2E38(v49, v50);
  sub_1AB010();
  sub_2E38(v0, v0[3]);
  sub_1AB010();
  sub_1AAD50();
  sub_177138();
  v51();
  sub_1AAD00();
  sub_1AABC0();
  sub_1ABC30();
  sub_47658();
  uint64_t v52 = sub_1ABC20();
  uint64_t v53 = (unsigned int *)&enum case for DateTimeResolutionSpec.ExpandToType.range(_:);
  if ((v149 & 1) == 0) {
    uint64_t v53 = (unsigned int *)&enum case for DateTimeResolutionSpec.ExpandToType.pointInTime(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v143 + 104))(v142, *v53, v144);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 16))(v145, v150, v147);
  sub_1ABD20();
  sub_1ABDF0();
  sub_176940(&qword_208300, (void (*)(uint64_t))&type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange);
  sub_1ACD60();
  sub_1ABBF0();
  sub_1ABBA0();
  uint64_t v54 = v133;
  uint64_t v55 = v131;
  sub_E524();
  v56();
  sub_177158();
  int v58 = v57();
  uint64_t v141 = v52;
  if (v58 == enum case for Recommendation.confident<A>(_:))
  {
    uint64_t v150 = v48;
    uint64_t v59 = v132;
    (*(void (**)(uint64_t *, uint64_t))(v54 + 96))(v132, v55);
    uint64_t v60 = *v59;
    uint64_t v61 = sub_1AC7D0();
    sub_A340();
    uint64_t v62 = v152;
    v151 = *(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 16);
    v151(v129, v61, v154);
    sub_176E5C();
    char v63 = sub_1AC7F0();
    os_log_type_t v64 = sub_1ACF50();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)sub_5B2D4();
      uint64_t v157 = sub_E620();
      *(_DWORD *)uint64_t v65 = 136315138;
      v149 = (void (*)(void))(v65 + 4);
      uint64_t v156 = v60;
      sub_176940(&qword_203278, (void (*)(uint64_t))&type metadata accessor for DateTime);
      uint64_t v66 = sub_1AD2C0();
      uint64_t v156 = sub_4A278(v66, v67, &v157);
      sub_1ACFE0();
      sub_176BE4();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v63, v64, "Recommendation: %s", v65, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      uint64_t v68 = *(void (**)(void))(v152 + 8);
    }
    else
    {

      sub_176BE4();
      uint64_t v68 = *(void (**)(void))(v62 + 8);
    }
    sub_E530();
    v68();
    sub_A340();
    uint64_t v86 = sub_177118();
    ((void (*)(uint64_t))v151)(v86);
    swift_retain();
    int v87 = sub_1AC7F0();
    os_log_type_t v88 = sub_1ACF50();
    BOOL v89 = os_log_type_enabled(v87, v88);
    v149 = v68;
    if (v89)
    {
      uint64_t v90 = (uint8_t *)sub_5B2D4();
      uint64_t v91 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v90 = 138412290;
      Class isa = sub_1ABDB0().super.isa;
      sub_176FBC((uint64_t)isa);
      sub_1ACFE0();
      *uint64_t v91 = isa;
      swift_release();
      _os_log_impl(&def_342E4, v87, v88, "Recommended INDateComponentsRange: %@", v90, 0xCu);
      sub_2694(&qword_201DE0);
      swift_arrayDestroy();
      uint64_t v68 = v149;
      sub_A1F0();
      sub_A1F0();
    }
    else
    {

      swift_release();
    }
    uint64_t v102 = v130;
    uint64_t v103 = v154;
    sub_F139C();
    v68();
    sub_A340();
    v151(v102, v61, v103);
    sub_176E5C();
    uint64_t v104 = sub_1AC7F0();
    os_log_type_t v105 = sub_1ACF50();
    if (os_log_type_enabled(v104, v105))
    {
      uint64_t v106 = (uint8_t *)swift_slowAlloc();
      uint64_t v155 = sub_E620();
      *(_DWORD *)uint64_t v106 = 136315138;
      Class v107 = sub_1ABDB0().super.isa;
      id v108 = [(objc_class *)v107 dateInterval];

      if (v108)
      {
        uint64_t v109 = v126;
        sub_1AA9B0();

        uint64_t v110 = 0;
      }
      else
      {
        uint64_t v110 = 1;
        uint64_t v109 = v126;
      }
      uint64_t v111 = sub_1AAA10();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v109, v110, 1, v111);
      uint64_t v112 = sub_1ACFC0();
      unint64_t v114 = v113;
      sub_5B028(v109, &qword_201CC8);
      uint64_t v115 = sub_4A278(v112, v114, &v155);
      sub_177104(v115);
      sub_1ACFE0();
      sub_176BE4();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v104, v105, "Recommended dateInterval: %s", v106, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      sub_F139C();
      v116();
    }
    else
    {

      sub_176BE4();
      sub_F139C();
      v68();
    }
    v117.super.Class isa = sub_1ABDB0().super.isa;
    id v118 = [(objc_class *)v117.super.isa dateInterval];

    if (v118)
    {
      uint64_t v119 = v127;
      sub_1AA9B0();
      swift_release();

      uint64_t v120 = 0;
      sub_176CA4();
    }
    else
    {
      swift_release();
      uint64_t v120 = 1;
      sub_176CA4();
      uint64_t v119 = v127;
    }
    swift_release();
    sub_E558();
    v121();
    sub_B7ACC();
    v122();
    sub_F139C();
    v123();
    uint64_t v124 = sub_1AAA10();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v119, v120, 1, v124);
    sub_159640(v119, (uint64_t)v117.super.isa);
  }
  else
  {
    uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 8);
    uint64_t v69 = v54 + 8;
    v151 = v70;
    sub_CD2F0();
    v71();
    sub_1AC7D0();
    sub_A340();
    sub_176F4C();
    sub_E524();
    v72();
    swift_retain_n();
    uint64_t v73 = sub_1AC7F0();
    os_log_type_t v74 = sub_1ACF60();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v76 = sub_5B2D4();
      uint64_t v133 = v69;
      uint64_t v77 = (_DWORD *)v76;
      uint64_t v157 = sub_E620();
      *uint64_t v77 = 136315138;
      uint64_t v150 = v48;
      uint64_t v78 = sub_1ABD70();
      uint64_t v80 = sub_177070(v78, v79);
      sub_176EC4(v80);
      sub_1771A4();
      swift_bridgeObjectRelease();
      sub_177184(&def_342E4, v81, v82, "Not confident about the inferred DateTime: %s");
      sub_17701C();
      sub_A1F0();
      sub_A1F0();

      swift_release();
      sub_F139C();
      v83();
      sub_E558();
      v84();
      sub_1769AC();
      v85();
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v150, v135);
    }
    else
    {
      sub_1771A4();

      swift_release();
      sub_F139C();
      v93();
      sub_CD2F0();
      v94();
      sub_1769AC();
      v95();
      uint64_t v96 = sub_1770F0();
      v97(v96, v135);
    }
    uint64_t v98 = v138;
    uint64_t v99 = sub_1AAA10();
    sub_A708(v98, v100, v101, v99);
  }
  sub_A56C();
}

void sub_173BDC()
{
  sub_A638();
  uint64_t v1 = v0;
  uint64_t v349 = v2;
  LODWORD(v348) = v3;
  v356 = v4;
  uint64_t v337 = v5;
  uint64_t v326 = sub_2694(&qword_201CC8);
  sub_20688();
  __chkstk_darwin(v6);
  sub_20698();
  __chkstk_darwin(v7);
  sub_559A0();
  sub_55680(v8);
  uint64_t v352 = sub_1AAA10();
  sub_52C4();
  v318 = v9;
  __chkstk_darwin(v10);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v11);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v12);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v13);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v14);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v15);
  sub_559A0();
  sub_206D4(v16);
  uint64_t v17 = sub_2694(&qword_201E10);
  uint64_t v18 = sub_53D4(v17);
  __chkstk_darwin(v18);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v19);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v20);
  sub_559A0();
  sub_55680(v21);
  uint64_t v324 = sub_1ABCE0();
  sub_52C4();
  uint64_t v330 = v22;
  __chkstk_darwin(v23);
  sub_53E0();
  sub_206D4(v24);
  uint64_t v25 = sub_2694(&qword_208310);
  uint64_t v26 = sub_53D4(v25);
  __chkstk_darwin(v26);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v27);
  sub_559A0();
  uint64_t v332 = v28;
  uint64_t v358 = sub_1AC800();
  sub_52C4();
  uint64_t v354 = v29;
  __chkstk_darwin(v30);
  v355 = (char *)v317 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A358();
  __chkstk_darwin(v32);
  sub_20698();
  __chkstk_darwin(v33);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v34);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v35);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v36);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v37);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v38);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v39);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v40);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v41);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v42);
  sub_559A0();
  sub_206D4(v43);
  uint64_t v336 = sub_2694(&qword_2082F8);
  sub_52C4();
  uint64_t v335 = v44;
  __chkstk_darwin(v45);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v46);
  sub_559A0();
  uint64_t v359 = v47;
  uint64_t v347 = sub_1ABBD0();
  sub_52C4();
  uint64_t v346 = v48;
  __chkstk_darwin(v49);
  sub_176CC8(v50, v317[0]);
  uint64_t v344 = sub_1ABBE0();
  sub_52C4();
  uint64_t v343 = v51;
  __chkstk_darwin(v52);
  sub_176CEC(v53, v317[0]);
  uint64_t v338 = sub_1ABC00();
  sub_52C4();
  uint64_t v339 = v54;
  __chkstk_darwin(v55);
  uint64_t v320 = sub_176E30(v56, v317[0]);
  sub_52C4();
  uint64_t v319 = v57;
  __chkstk_darwin(v58);
  sub_E594();
  sub_20698();
  __chkstk_darwin(v59);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v60);
  sub_2073C();
  sub_20698();
  __chkstk_darwin(v61);
  sub_559A0();
  sub_177144(v62);
  uint64_t v323 = sub_1AAD30();
  sub_52C4();
  uint64_t v329 = v63;
  __chkstk_darwin(v64);
  sub_53E0();
  v350 = v65;
  uint64_t v341 = sub_1ABC10();
  sub_52C4();
  __chkstk_darwin(v66);
  sub_53E0();
  uint64_t v340 = v67;
  uint64_t v322 = sub_1AAD60();
  sub_52C4();
  uint64_t v328 = v68;
  __chkstk_darwin(v69);
  sub_E548();
  uint64_t v72 = v71 - v70;
  uint64_t v73 = sub_1AAC70();
  uint64_t v74 = sub_53D4(v73);
  uint64_t v75 = __chkstk_darwin(v74);
  uint64_t v76 = __chkstk_darwin(v75);
  __chkstk_darwin(v76);
  uint64_t v353 = sub_1ABBC0();
  sub_52C4();
  uint64_t v351 = v77;
  __chkstk_darwin(v78);
  sub_E548();
  uint64_t v81 = (char *)(v80 - v79);
  sub_1ABBB0();
  sub_2E38(v0, v0[3]);
  sub_1AB010();
  sub_2E38(v1, v1[3]);
  sub_1AB010();
  sub_2E38(v1, v1[3]);
  sub_1AB010();
  sub_1AAD50();
  sub_177138();
  v82();
  sub_1AAD00();
  sub_1AABC0();
  sub_1ABC30();
  sub_47658();
  uint64_t v83 = sub_1ABC20();
  uint64_t v84 = (unsigned int *)&enum case for DateTimeResolutionSpec.ExpandToType.range(_:);
  if ((v348 & 1) == 0) {
    uint64_t v84 = (unsigned int *)&enum case for DateTimeResolutionSpec.ExpandToType.pointInTime(_:);
  }
  (*(void (**)(void (*)(void), void, uint64_t))(v343 + 104))(v342, *v84, v344);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(v346 + 16))(v345, v349, v347);
  uint64_t v85 = sub_1ABD20();
  uint64_t v86 = sub_1ABDF0();
  sub_176940(&qword_208300, (void (*)(uint64_t))&type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange);
  sub_1ACD60();
  sub_1ABBF0();
  sub_1ABBA0();
  uint64_t v347 = v85;
  int v87 = v334;
  uint64_t v349 = v83;
  v355 = v81;
  uint64_t v88 = v335;
  BOOL v89 = v333;
  uint64_t v90 = v359;
  uint64_t v91 = v336;
  sub_E524();
  v92();
  sub_177158();
  if (v93() != enum case for Recommendation.confident<A>(_:))
  {
    id v108 = *(void (**)(void))(v88 + 8);
    sub_F139C();
    v108();
    sub_1AC7D0();
    sub_A340();
    uint64_t v109 = v354;
    sub_E524();
    v110();
    swift_retain_n();
    uint64_t v111 = sub_1AC7F0();
    os_log_type_t v112 = sub_1ACF60();
    if (os_log_type_enabled(v111, v112))
    {
      unint64_t v113 = (_DWORD *)sub_5B2D4();
      uint64_t v362 = sub_E620();
      v350 = v108;
      _DWORD *v113 = 136315138;
      uint64_t v114 = sub_1ABD70();
      uint64_t v116 = sub_177070(v114, v115);
      sub_176EC4(v116);
      swift_release_n();
      swift_bridgeObjectRelease();
      sub_177184(&def_342E4, v117, v118, "Not confident about the inferred DateTime: %s");
      sub_17701C();
      sub_A1F0();
      sub_A1F0();

      sub_176B44();
      (*(void (**)(void (*)(void), uint64_t))(v109 + 8))(v334, v358);
      sub_F139C();
      v119();
    }
    else
    {
      swift_release_n();

      sub_176B44();
      (*(void (**)(void (*)(void), uint64_t))(v109 + 8))(v87, v358);
      ((void (*)(uint64_t, uint64_t))v108)(v90, v91);
    }
    uint64_t v159 = sub_176988();
    v160(v159);
    sub_E558();
    v161();
    sub_55948();
    goto LABEL_19;
  }
  uint64_t v343 = v86;
  (*(void (**)(uint64_t *, uint64_t))(v88 + 96))(v89, v91);
  uint64_t v94 = *v89;
  uint64_t v95 = sub_1AC7D0();
  sub_A340();
  uint64_t v96 = v354;
  uint64_t v97 = *(_DWORD **)(v354 + 16);
  uint64_t v344 = v95;
  uint64_t v346 = v354 + 16;
  v345 = v97;
  sub_E524();
  v98();
  sub_176E5C();
  uint64_t v99 = sub_1AC7F0();
  os_log_type_t v100 = sub_1ACF50();
  BOOL v101 = os_log_type_enabled(v99, v100);
  uint64_t v348 = v94;
  uint64_t v340 = v72;
  if (v101)
  {
    uint64_t v102 = (uint8_t *)sub_5B2D4();
    uint64_t v362 = sub_E620();
    *(_DWORD *)uint64_t v102 = 136315138;
    v361[0] = v94;
    sub_176940(&qword_203278, (void (*)(uint64_t))&type metadata accessor for DateTime);
    uint64_t v103 = sub_1AD2C0();
    v361[0] = sub_177070(v103, v104);
    sub_177178();
    sub_1ACFE0();
    sub_176BE4();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v99, v100, "Initial Recommendation: %s", v102, 0xCu);
    swift_arrayDestroy();
    os_log_type_t v105 = v357;
    uint64_t v96 = v354;
    sub_A1F0();
    sub_A1F0();

    uint64_t v106 = *(void (**)(void))(v96 + 8);
    sub_E530();
    v106();
    uint64_t v107 = v353;
  }
  else
  {

    sub_176BE4();
    uint64_t v106 = *(void (**)(void))(v96 + 8);
    sub_E530();
    v106();
    uint64_t v107 = v353;
    os_log_type_t v105 = v357;
  }
  uint64_t v120 = sub_1ABDC0();
  if (!v120)
  {
    sub_A340();
    sub_1769BC();
    v166();
    v167 = (void *)sub_1AC7F0();
    os_log_type_t v168 = sub_1ACF60();
    if (sub_B7B50(v168))
    {
      v169 = (_WORD *)sub_292A0();
      sub_29368(v169);
      sub_55980(&def_342E4, v170, v171, "there was no date in resultDateTime, returning nil");
      sub_177178();
      sub_A1F0();
    }

    sub_176B44();
    swift_release();
    sub_E530();
    v106();
    sub_177164();
    sub_E558();
    v172();
    sub_1769AC();
    v173();
    goto LABEL_24;
  }
  uint64_t v341 = v120;
  uint64_t v121 = sub_1ABD80();
  v342 = v106;
  if (!v121)
  {
    sub_55948();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v175, v176, v177, v347);
    goto LABEL_26;
  }
  uint64_t v122 = v332;
  sub_1ABD30();
  swift_release();
  sub_A208(v122, 1, v347);
  if (v123)
  {
LABEL_26:
    sub_A340();
    sub_1769BC();
    v178();
    sub_177178();
    swift_retain();
    v179 = (void *)sub_1AC7F0();
    os_log_type_t v180 = sub_1ACF50();
    if (sub_1770C0(v180))
    {
      v181 = (_DWORD *)sub_5B2D4();
      v182 = (void *)swift_slowAlloc();
      _DWORD *v181 = 138412290;
      Class isa = sub_1ABDB0().super.isa;
      sub_176EEC((uint64_t)isa);
      sub_177178();
      sub_1ACFE0();
      void *v182 = isa;
      swift_release();
      sub_176E74(&def_342E4, v184, v185, "Recommended INDateComponentsRange: %@");
      sub_2694(&qword_201DE0);
      swift_arrayDestroy();
      uint64_t v186 = v353;
      sub_A1F0();
      sub_A1F0();
    }
    else
    {
      uint64_t v186 = v107;

      swift_release();
    }
    uint64_t v187 = v351;
    v188 = (void (*)(void))(v354 + 8);
    v189 = v342;
    sub_B7ACC();
    v189();
    sub_A340();
    sub_1769BC();
    v190();
    sub_176E5C();
    v191 = sub_1AC7F0();
    os_log_type_t v192 = sub_1ACF50();
    if (os_log_type_enabled(v191, v192))
    {
      v356 = v188;
      v193 = (uint8_t *)swift_slowAlloc();
      uint64_t v360 = sub_E620();
      *(_DWORD *)v193 = 136315138;
      Class v194 = sub_1ABDB0().super.isa;
      id v195 = [(objc_class *)v194 dateInterval];

      if (v195)
      {
        uint64_t v196 = v325;
        sub_1AA9B0();

        sub_1770DC();
      }
      else
      {
        sub_1770DC();
        uint64_t v196 = v325;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v196, v197, 1, v352);
      uint64_t v231 = sub_1ACFC0();
      unint64_t v233 = v232;
      sub_5B028(v196, &qword_201CC8);
      uint64_t v234 = sub_4A278(v231, v233, &v360);
      sub_177104(v234);
      sub_1ACFE0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v191, v192, "Recommended dateInterval: %s", v193, 0xCu);
      sub_17701C();
      sub_A1F0();
      sub_A1F0();

      sub_E558();
      v235();
      v200 = v357;
      uint64_t v187 = v351;
      uint64_t v199 = v353;
      uint64_t v198 = v337;
    }
    else
    {

      sub_176BE4();
      sub_B7ACC();
      v189();
      uint64_t v198 = v337;
      v189 = v331;
      uint64_t v199 = v186;
      v200 = v357;
    }
    Class v236 = sub_1ABDB0().super.isa;
    id v237 = [(objc_class *)v236 dateInterval];

    uint64_t v238 = v338;
    uint64_t v239 = v332;
    if (v237)
    {
      sub_1AA9B0();
      swift_release();

      uint64_t v240 = 0;
    }
    else
    {
      swift_release();
      uint64_t v240 = 1;
    }
    uint64_t v241 = v339;
    swift_release();
    sub_176B44();
    sub_177164();
    sub_E558();
    v242();
    (*(void (**)(void (*)(void), uint64_t))(v241 + 8))(v200, v238);
    (*(void (**)(char *, uint64_t))(v187 + 8))(v355, v199);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v189, v240, 1, v352);
    sub_159640((uint64_t)v189, v198);
    uint64_t v243 = v239;
    goto LABEL_44;
  }
  uint64_t v124 = v321;
  sub_553FC(v122, (uint64_t)v321, &qword_208310);
  sub_A1CC();
  uint64_t v126 = v125;
  sub_177158();
  int v128 = v127();
  if (v128 == enum case for DateTime.DateTimeRange.DefinedDateTimeRange.afternoon(_:))
  {
    uint64_t v129 = enum case for DateTime.Time.Meridiem.pm(_:);
    uint64_t v130 = *(void (**)(void))(v330 + 104);
    sub_176BA0(v330 + 104);
    v130();
    sub_1ABD10();
    sub_47658();
    sub_176DBC();
    sub_1ABD00();
    sub_176A14();
    sub_176FD4();
    sub_176D9C();
    sub_177088();
    uint64_t v131 = (void *)sub_1ABDA0();
    swift_release();
    uint64_t v132 = sub_176ACC();
    ((void (*)(uint64_t))v96)(v132);
    uint64_t v133 = sub_176A78();
    ((void (*)(uint64_t))v105)(v133);
    id v134 = [v131 startDate];

    if (v134)
    {
      uint64_t v347 = v96;
      LODWORD(v356) = v129;
      sub_176A9C();

      sub_176E94();
      uint64_t v135 = sub_176AF0((uint64_t)&v345);
      ((void (*)(uint64_t))v124)(v135);
      sub_1769DC();
      if (!v123)
      {
        v334 = v130;
        sub_176B90();
        v124();
        sub_E524();
        v136();
        sub_176F5C();
        sub_A340();
        sub_1769BC();
        v137();
        sub_176C44();
        sub_E524();
        v138();
        sub_176C5C();
        uint64_t v139 = (void *)sub_1AC7F0();
        os_log_type_t v140 = sub_1ACF50();
        if (sub_176D5C(v140))
        {
          sub_E5BC();
          uint64_t v141 = sub_176FF0();
          sub_17700C(v141);
          uint64_t v142 = sub_176A34(4.8151e-34);
          v143(v142);
          sub_177054();
          swift_retain();
          sub_1ABD00();
          sub_176A14();
          sub_176DDC();
          sub_176D7C();
          sub_1770A4();
          sub_1ABDA0();
          sub_176FA0();
          sub_E530();
          v144();
          sub_E530();
          v105();
          id v145 = [(id)v129 description];
          sub_1ACDD0();

          uint64_t v146 = sub_177038();
          sub_176B14(v146);
          sub_176BE4();
          swift_bridgeObjectRelease();
          sub_176F90();
          sub_176940(&qword_206728, (void (*)(uint64_t))&type metadata accessor for DateInterval);
          uint64_t v147 = sub_176D28();
          uint64_t v149 = sub_4A278(v147, v148, v361);
          sub_176C20(v149);
          swift_bridgeObjectRelease();
          sub_E530();
          v150();
          sub_176C80(&def_342E4, v151, v152, "Got a defined value of afternoon, got a new start date (%s) with new Recommendation: %s");
          sub_176BFC();
          sub_A1F0();
          sub_A1F0();
          sub_176D10();
          swift_release();

          sub_176B44();
        }
        else
        {

          sub_176B44();
          sub_E530();
          v299();
          sub_176D10();
          swift_release_n();
        }
        sub_E530();
        v153();
        sub_47310();
        v154();
        sub_1769AC();
        v155();
        uint64_t v156 = sub_176988();
        v157(v156);
        sub_E558();
        v158();
        uint64_t v300 = v332;
        uint64_t v301 = sub_176EA8();
        v302(v301);
        uint64_t v303 = sub_176D48();
        _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v303, v304, v305, v306);
        uint64_t v243 = v300;
        goto LABEL_44;
      }
    }
    else
    {
      sub_176BBC((uint64_t)&v345);
    }
    goto LABEL_51;
  }
  v201 = v327;
  uint64_t v202 = v330;
  if (v128 != enum case for DateTime.DateTimeRange.DefinedDateTimeRange.evening(_:))
  {
    if (v128 == enum case for DateTime.DateTimeRange.DefinedDateTimeRange.morning(_:))
    {
      uint64_t v129 = enum case for DateTime.Time.Meridiem.am(_:);
      v244 = *(void (**)(void))(v330 + 104);
      sub_176BA0(v330 + 104);
      v244();
      sub_1ABD10();
      sub_47658();
      sub_176DBC();
      sub_1ABD00();
      sub_176A14();
      sub_176FD4();
      sub_176D9C();
      sub_177088();
      v245 = (void (**)(void, void, void))sub_1ABDA0();
      swift_release();
      uint64_t v246 = sub_176ACC();
      ((void (*)(uint64_t))v202)(v246);
      uint64_t v247 = sub_176A78();
      ((void (*)(uint64_t))v105)(v247);
      id v248 = [v245 startDate];

      if (v248)
      {
        uint64_t v347 = v202;
        LODWORD(v356) = v129;
        sub_176A9C();

        sub_176E94();
        uint64_t v249 = sub_176AF0((uint64_t)&v333);
        ((void (*)(uint64_t))v201)(v249);
        sub_1769DC();
        if (!v123)
        {
          v334 = v244;
          sub_176B90();
          v201();
          sub_E524();
          v250();
          sub_176F5C();
          sub_A340();
          sub_1769BC();
          v251();
          sub_176C44();
          uint64_t v252 = v352;
          sub_E524();
          v253();
          sub_176C5C();
          v254 = (void *)sub_1AC7F0();
          os_log_type_t v255 = sub_1ACF50();
          if (sub_176D5C(v255))
          {
            sub_E5BC();
            uint64_t v256 = sub_176FF0();
            sub_17700C(v256);
            uint64_t v257 = sub_176A34(4.8151e-34);
            v258(v257);
            sub_177054();
            swift_retain();
            sub_1ABD00();
            sub_176A14();
            sub_176DDC();
            sub_176D7C();
            sub_1770A4();
            sub_1ABDA0();
            sub_176FA0();
            sub_E530();
            v259();
            sub_E530();
            v105();
            id v260 = [(id)v129 description];
            sub_1ACDD0();

            uint64_t v261 = sub_177038();
            sub_176B14(v261);
            sub_176BE4();
            swift_bridgeObjectRelease();
            sub_176F90();
            sub_176940(&qword_206728, (void (*)(uint64_t))&type metadata accessor for DateInterval);
            uint64_t v262 = sub_176D28();
            uint64_t v264 = sub_4A278(v262, v263, v361);
            sub_176C20(v264);
            swift_bridgeObjectRelease();
            sub_E530();
            v265();
            sub_176C80(&def_342E4, v266, v267, "Got a defined value of morning, got a new start date (%s) with new Recommendation: %s");
            sub_176BFC();
            sub_A1F0();
            v245 = v318;
            sub_A1F0();
            sub_176D10();
            swift_release();

            sub_176B44();
            sub_E530();
            v268();
            sub_47310();
            v269();
            sub_1769AC();
            v270();
            uint64_t v271 = sub_176988();
            v272(v271);
            sub_E558();
            v273();
          }
          else
          {

            sub_176B44();
            sub_E530();
            v310();
            sub_176D10();
            swift_release_n();
            sub_E530();
            v311();
            sub_47310();
            v312();
            sub_1769AC();
            v313();
            uint64_t v314 = sub_176988();
            v315(v314);
            sub_E558();
            v316();
            os_log_type_t v105 = (void (*)(void))v252;
          }
          ((void (**)(uint64_t, uint64_t, void (*)(void)))v245)[4](v337, v317[1], v105);
          uint64_t v285 = sub_176D48();
LABEL_54:
          _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v285, v286, v287, v288);
          uint64_t v243 = v332;
LABEL_44:
          sub_5B028(v243, &qword_208310);
          goto LABEL_20;
        }
      }
      else
      {
        sub_176BBC((uint64_t)&v333);
      }
LABEL_51:
      sub_5B028(v129, &qword_201E10);
      sub_A340();
      sub_1769BC();
      v274();
      v275 = (void *)sub_1AC7F0();
      os_log_type_t v276 = sub_1ACF60();
      if (sub_B7B50(v276))
      {
        v277 = (_WORD *)sub_292A0();
        sub_29368(v277);
        sub_55980(&def_342E4, v278, v279, "couldn't create modifiedStartDate, returning nil");
        sub_A1F0();
      }
      sub_176D10();
      swift_release();

      sub_176B44();
      sub_E530();
      v280();
      sub_1769AC();
      v281();
      uint64_t v282 = sub_176988();
      v283(v282);
      sub_177124();
      sub_E558();
      v284();
      uint64_t v285 = sub_176F78();
      goto LABEL_54;
    }
    if (v128 != enum case for DateTime.DateTimeRange.DefinedDateTimeRange.night(_:))
    {
      (*(void (**)(void (*)(void), uint64_t))(v126 + 8))(v321, v347);
      goto LABEL_26;
    }
  }
  sub_5B028(v122, &qword_208310);
  int v203 = enum case for DateTime.Time.Meridiem.pm(_:);
  v204 = *(void (**)(void))(v202 + 104);
  sub_176BA0(v202 + 104);
  v204();
  sub_1ABD10();
  sub_47658();
  sub_176DBC();
  sub_1ABD00();
  sub_176A14();
  sub_176FD4();
  sub_176D9C();
  sub_177088();
  v205 = (_DWORD *)sub_1ABDA0();
  swift_release();
  uint64_t v206 = sub_176ACC();
  ((void (*)(uint64_t))v202)(v206);
  uint64_t v207 = sub_176A78();
  ((void (*)(uint64_t))v105)(v207);
  id v208 = [v205 startDate];

  if (v208)
  {
    uint64_t v347 = v202;
    v356 = v204;
    sub_176A9C();

    sub_176E94();
    uint64_t v209 = sub_176AF0((uint64_t)&v343);
    ((void (*)(uint64_t))v201)(v209);
    sub_1769DC();
    if (!v123)
    {
      LODWORD(v334) = v203;
      sub_176B90();
      v201();
      sub_E524();
      v210();
      sub_176F5C();
      sub_A340();
      sub_1769BC();
      v211();
      sub_176C44();
      sub_E524();
      v212();
      sub_176C5C();
      v213 = (void *)sub_1AC7F0();
      os_log_type_t v214 = sub_1ACF50();
      if (sub_176D5C(v214))
      {
        sub_E5BC();
        uint64_t v215 = sub_176FF0();
        sub_17700C(v215);
        _DWORD *v205 = 136315394;
        v345 = v205 + 1;
        ((void (*)(void (*)(void), void, uint64_t))v356)(v327, v334, v324);
        sub_177054();
        swift_retain();
        sub_1ABD00();
        sub_176A14();
        sub_176DDC();
        sub_176D7C();
        sub_1770A4();
        sub_1ABDA0();
        sub_176FA0();
        sub_E530();
        v216();
        sub_E530();
        v105();
        id v217 = [v204 description];
        sub_1ACDD0();

        uint64_t v218 = sub_177038();
        sub_176B14(v218);
        sub_176BE4();
        swift_bridgeObjectRelease();
        sub_176F90();
        sub_176940(&qword_206728, (void (*)(uint64_t))&type metadata accessor for DateInterval);
        uint64_t v219 = sub_176D28();
        uint64_t v221 = sub_4A278(v219, v220, v361);
        sub_176C20(v221);
        swift_bridgeObjectRelease();
        sub_E530();
        v222();
        sub_176C80(&def_342E4, v223, v224, "Got a defined value of evening/night, got a new start date (%s) with new Recommendation: %s");
        sub_176BFC();
        sub_A1F0();
        sub_A1F0();
        sub_176D10();
        swift_release();

        sub_176B44();
      }
      else
      {

        sub_176B44();
        sub_E530();
        v307();
        sub_176D10();
        swift_release_n();
      }
      sub_E530();
      v225();
      sub_47310();
      v226();
      sub_1769AC();
      v227();
      uint64_t v228 = sub_176988();
      v229(v228);
      sub_E558();
      v230();
      uint64_t v308 = sub_176EA8();
      v309(v308);
      uint64_t v162 = sub_176D48();
      goto LABEL_19;
    }
  }
  else
  {
    sub_176BBC((uint64_t)&v343);
  }
  sub_5B028((uint64_t)v204, &qword_201E10);
  sub_A340();
  sub_1769BC();
  v289();
  v290 = (void *)sub_1AC7F0();
  os_log_type_t v291 = sub_1ACF60();
  if (sub_B7B50(v291))
  {
    v292 = (_WORD *)sub_292A0();
    sub_29368(v292);
    sub_55980(&def_342E4, v293, v294, "couldn't create modifiedStartDate, returning nil");
    sub_A1F0();
  }
  sub_176D10();
  swift_release();

  sub_176B44();
  sub_E530();
  v295();
  sub_1769AC();
  v296();
  uint64_t v297 = sub_176988();
  v298(v297);
  sub_177124();
LABEL_24:
  sub_E558();
  v174();
  uint64_t v162 = sub_176F78();
LABEL_19:
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v162, v163, v164, v165);
LABEL_20:
  sub_A56C();
}

uint64_t sub_1761CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v72 = a2;
  uint64_t v73 = (char *)a1;
  uint64_t v2 = sub_1AC800();
  uint64_t v67 = *(void *)(v2 - 8);
  uint64_t v68 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v59 - v6;
  uint64_t v65 = sub_1AAD10();
  uint64_t v61 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v62 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1AAD30();
  uint64_t v63 = *(void *)(v9 - 8);
  uint64_t v64 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_2694(&qword_201E10);
  __chkstk_darwin(v12 - 8);
  uint64_t v71 = (uint64_t)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1AABD0();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v66 = (char *)&v59 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v59 - v21;
  uint64_t v23 = sub_2694(&qword_201CC8);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1AAA10();
  uint64_t v70 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v69 = (char *)&v59 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_553FC((uint64_t)v73, (uint64_t)v25, &qword_201CC8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1, v26) == 1)
  {
    uint64_t v28 = v72;
    uint64_t v29 = v26;
    sub_5B028((uint64_t)v25, &qword_201CC8);
    uint64_t v30 = sub_1AC7D0();
    swift_beginAccess();
    uint64_t v32 = v67;
    uint64_t v31 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v5, v30, v68);
    uint64_t v33 = sub_1AC7F0();
    os_log_type_t v34 = sub_1ACF60();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&def_342E4, v33, v34, "nil interval passed into getFirstMinuteOfInterval, returning nil", v35, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v31);
    uint64_t v36 = 1;
    uint64_t v26 = v29;
    uint64_t v37 = v28;
  }
  else
  {
    uint64_t v59 = v22;
    uint64_t v60 = v18;
    uint64_t v73 = v7;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v69, v25, v26);
    sub_1AAD00();
    uint64_t v39 = v61;
    uint64_t v38 = v62;
    uint64_t v40 = v65;
    (*(void (**)(char *, void, uint64_t))(v61 + 104))(v62, enum case for Calendar.Component.second(_:), v65);
    uint64_t v41 = v66;
    sub_1AA9F0();
    uint64_t v42 = v15;
    uint64_t v43 = v14;
    uint64_t v44 = v71;
    sub_1AACE0();
    uint64_t v45 = v41;
    uint64_t v46 = *(void (**)(char *, uint64_t))(v42 + 8);
    v46(v45, v43);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v40);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v11, v64);
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v44, 1, v43) == 1)
    {
      uint64_t v48 = v69;
      uint64_t v47 = v70;
      sub_5B028(v71, &qword_201E10);
      uint64_t v49 = sub_1AC7D0();
      swift_beginAccess();
      uint64_t v50 = v67;
      uint64_t v51 = v68;
      uint64_t v52 = (uint64_t)v73;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v73, v49, v68);
      uint64_t v53 = sub_1AC7F0();
      os_log_type_t v54 = sub_1ACF60();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v55 = 0;
        _os_log_impl(&def_342E4, v53, v54, "couldn't create newEnd in getFirstMinuteOfInterval, returning nil", v55, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v52, v51);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v26);
      uint64_t v36 = 1;
      uint64_t v37 = v72;
    }
    else
    {
      uint64_t v56 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v59, v71, v43);
      uint64_t v57 = v69;
      sub_1AA9F0();
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v60, v56, v43);
      uint64_t v37 = v72;
      sub_1AA9D0();
      v46(v56, v43);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v57, v26);
      uint64_t v36 = 0;
    }
  }
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v37, v36, 1, v26);
}

uint64_t sub_176940(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_176988()
{
  return *(void *)(v0 - 208);
}

uint64_t sub_1769DC()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, v0);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v0);
}

uint64_t sub_176A14()
{
  return swift_allocObject();
}

uint64_t sub_176A34(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v2 - 312) = v1 + 1;
  return *(void *)(v2 - 488);
}

uint64_t sub_176A78()
{
  return v0;
}

uint64_t sub_176A9C()
{
  *(void *)(v2 - 480) = v1;
  *(void *)(v2 - 472) = v0;
  return sub_1AABB0();
}

uint64_t sub_176ACC()
{
  return v0;
}

uint64_t sub_176AF0@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t sub_176B14(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return sub_1ACFE0();
}

uint64_t sub_176B44()
{
  return swift_release();
}

uint64_t sub_176B5C()
{
  return *(void *)(v0 - 296);
}

void sub_176BA0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 456) = a1;
}

uint64_t sub_176BBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(a1 - 256);
  uint64_t v4 = *(void *)(v1 - 544);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v3, 1, 1, v4);
}

uint64_t sub_176BE4()
{
  return swift_release_n();
}

uint64_t sub_176BFC()
{
  return swift_arrayDestroy();
}

uint64_t sub_176C20(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return sub_1ACFE0();
}

uint64_t sub_176C5C()
{
  return swift_retain_n();
}

void sub_176C80(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  int v8 = *(_DWORD *)(v6 - 272);
  _os_log_impl(a1, v4, (os_log_type_t)v8, a4, v5, 0x16u);
}

uint64_t sub_176CC8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 312) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_176CEC@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 336) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_176D10()
{
  return swift_release();
}

uint64_t sub_176D28()
{
  return sub_1AD2C0();
}

uint64_t sub_176D48()
{
  return v0;
}

BOOL sub_176D5C(os_log_type_t a1)
{
  *(_DWORD *)(v2 - 272) = a1;
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_176D7C()
{
  return sub_1AAD00();
}

uint64_t sub_176D9C()
{
  return sub_1AAD00();
}

uint64_t sub_176DBC()
{
  return swift_retain();
}

uint64_t sub_176DDC()
{
  return DateTime.init(withDate:time:)(v1, v0);
}

uint64_t sub_176DFC()
{
  return 0;
}

void sub_176E10(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 296) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_176E30@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return sub_1AABD0();
}

uint64_t sub_176E5C()
{
  return swift_retain_n();
}

void sub_176E74(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_176EA8()
{
  return v0;
}

uint64_t sub_176EC4(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return sub_1ACFE0();
}

uint64_t sub_176EEC(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

void sub_176F08()
{
  sub_173BDC();
}

uint64_t sub_176F30()
{
  return 0;
}

uint64_t sub_176F4C()
{
  return v0;
}

uint64_t sub_176F5C()
{
  return sub_1AA9E0();
}

uint64_t sub_176F78()
{
  return *(void *)(v0 - 376);
}

void sub_176F90()
{
  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t sub_176FA0()
{
  return swift_release();
}

uint64_t sub_176FBC(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

uint64_t sub_176FD4()
{
  return DateTime.init(withDate:time:)(v1, v0);
}

uint64_t sub_176FF0()
{
  return swift_slowAlloc();
}

uint64_t sub_17700C(uint64_t result)
{
  *(void *)(v1 - 304) = result;
  *(void *)(v1 - 168) = result;
  return result;
}

uint64_t sub_17701C()
{
  return swift_arrayDestroy();
}

uint64_t sub_177038()
{
  return sub_4A278(v0, v1, (uint64_t *)(v2 - 168));
}

uint64_t sub_177054()
{
  return swift_allocObject();
}

uint64_t sub_177070(uint64_t a1, unint64_t a2)
{
  return sub_4A278(a1, a2, (uint64_t *)(v2 - 144));
}

uint64_t sub_177088()
{
  return sub_1AAD50();
}

uint64_t sub_1770A4()
{
  return sub_1AAD50();
}

BOOL sub_1770C0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1770F0()
{
  return v0;
}

uint64_t sub_177104(uint64_t a1)
{
  *(void *)(v1 - 184) = a1;
  return v1 - 184;
}

uint64_t sub_177118()
{
  return v0;
}

uint64_t sub_177124()
{
  return *(void *)(v0 - 224);
}

uint64_t sub_177144@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 272) = a1;
  return 0;
}

uint64_t sub_177164()
{
  return *(void *)(v0 - 192);
}

void sub_177184(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1771A4()
{
  return swift_release_n();
}

uint64_t sub_1771BC(__int16 a1)
{
  uint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      return 1701733217;
    case 2:
      return 0x7369685F62696661;
    case 3:
      uint64_t v3 = 0x6F686F636C61;
      return v3 & 0xFFFFFFFFFFFFLL | 0x5F6C000000000000;
    case 4:
      return 0x65696772656C6C61;
    case 5:
      uint64_t v4 = 0x746569786E61;
      return v4 & 0xFFFFFFFFFFFFLL | 0x5F79000000000000;
    case 7:
      return 0xD000000000000013;
    case 8:
      return 0x78655F6F69647561;
    case 9:
      return 0x6172676F69647561;
    case 10:
      uint64_t v5 = 0x6C6C79726562;
      return v5 & 0xFFFFFFFFFFFFLL | 0x7569000000000000;
    case 11:
      return 0x6369676F6C6F6962;
    case 12:
      uint64_t v6 = 1953458530;
      return v6 & 0xFFFF0000FFFFFFFFLL | 0x6E6900000000;
    case 13:
      return 0xD000000000000014;
    case 14:
      uint64_t v7 = 1634692194;
      goto LABEL_207;
    case 15:
      return 0xD000000000000015;
    case 16:
      return 0xD000000000000011;
    case 17:
      return 0x6C675F646F6F6C62;
    case 18:
      return 0x72705F646F6F6C62;
    case 19:
      return 0xD000000000000018;
    case 20:
      return 0xD000000000000017;
    case 21:
      uint64_t v8 = 0x5F646F6F6C62;
      return v8 & 0xFFFFFFFFFFFFLL | 0x7974000000000000;
    case 22:
      return 0x5F64657272756C62;
    case 23:
      return 0xD000000000000014;
    case 24:
      return 0xD000000000000013;
    case 25:
      uint64_t v9 = 0x747361657262;
      return v9 & 0xFFFFFFFFFFFFLL | 0x675F000000000000;
    case 26:
      uint64_t v10 = 0x747361657262;
      return v10 & 0xFFFFFFFFFFFFLL | 0x705F000000000000;
    case 27:
      return 0x656E696566666163;
    case 28:
      return 0x6D7569636C6163;
    case 29:
      return 0x6479686F62726163;
    case 30:
      return 0x665F6F6964726163;
    case 31:
      return 0xD000000000000016;
    case 32:
      return 0xD000000000000017;
    case 33:
      return 0x736C6C696863;
    case 34:
      return 0x656469726F6C6863;
    case 35:
      uint64_t v11 = 0x696D6F726863;
      return v11 & 0xFFFFFFFFFFFFLL | 0x6D75000000000000;
    case 36:
      return 0xD000000000000012;
    case 37:
      unsigned int v12 = 1852402787;
      return v12 | 0x6C61636900000000;
    case 39:
      uint64_t v13 = 0x7365676E6F63;
      return v13 & 0xFFFFFFFFFFFFLL | 0x6974000000000000;
    case 40:
      return 0x61706974736E6F63;
    case 41:
      return 0x65636172746E6F63;
    case 42:
      return 0x726570706F63;
    case 43:
      unint64_t v14 = 0x696867756F63;
      return v14 & 0xFFFFFFFFFFFFLL | 0x676E000000000000;
    case 44:
    case 46:
      unsigned int v15 = 1818458467;
      return v15 | 0x5F676E6900000000;
    case 45:
      return 0xD000000000000022;
    case 47:
      return 0x6973736572706564;
    case 48:
      return 0xD000000000000016;
    case 49:
      return 0xD000000000000016;
    case 50:
      uint64_t v16 = 0x687272616964;
      return v16 & 0xFFFFFFFFFFFFLL | 0x6165000000000000;
    case 52:
      return 0xD000000000000013;
    case 53:
    case 54:
      uint64_t v4 = 0x726174656964;
      return v4 & 0xFFFFFFFFFFFFLL | 0x5F79000000000000;
    case 55:
      uint64_t v17 = 0x6E697A7A6964;
      return v17 & 0xFFFFFFFFFFFFLL | 0x7365000000000000;
    case 56:
      return 0x735F656C62756F64;
    case 57:
      return 0x6E696B735F797264;
    case 58:
      return 0xD000000000000011;
    case 59:
      return 0xD000000000000016;
    case 60:
      return 0x6F69746176656C65;
    case 61:
      unsigned int v18 = 1986358373;
      return v18 | 0x6F69746100000000;
    case 62:
      return 0x635F796772656E65;
    case 63:
      return 0xD000000000000011;
    case 64:
      return 0xD00000000000001DLL;
    case 66:
      uint64_t v7 = 1852399974;
      goto LABEL_207;
    case 67:
      return 7627110;
    case 68:
      return 0xD000000000000013;
    case 69:
      return 0xD000000000000013;
    case 70:
      return 0x757461735F746166;
    case 71:
      return 0x65756769746166;
    case 72:
      return 0x5F656C6974726566;
    case 73:
      uint64_t v19 = 1702258022;
      return v19 & 0xFFFF0000FFFFFFFFLL | 0x7200000000;
    case 74:
      uint64_t v19 = 1700948326;
      return v19 & 0xFFFF0000FFFFFFFFLL | 0x7200000000;
    case 75:
      return 0xD000000000000015;
    case 76:
      return 0x5F73746867696C66;
    case 77:
      return 0x6574616C6F66;
    case 78:
      return 0xD000000000000018;
    case 79:
      return 0xD000000000000015;
    case 80:
      uint64_t v3 = 0x6172656E6567;
      return v3 & 0xFFFFFFFFFFFFLL | 0x5F6C000000000000;
    case 81:
      return 0x73656D6F6E6567;
    case 82:
      return 0xD000000000000013;
    case 83:
      return 1919508840;
    case 84:
      return 0x736F6C5F72696168;
    case 85:
      return 0x68736177646E6168;
    case 86:
      return 0x6568636164616568;
    case 87:
      return 0x6E6F687064616568;
    case 88:
      return 0xD000000000000018;
    case 89:
      return 0x745F68746C616568;
    case 90:
      unsigned int v20 = 1918985576;
      return v20 | 0x676E6900000000;
    case 92:
      return 0xD000000000000013;
    case 93:
      return 0xD000000000000016;
    case 94:
      return 0xD000000000000026;
    case 95:
      return 0xD000000000000011;
    case 96:
      return 0x7275627472616568;
    case 97:
      return 0x626F6C676F6D6568;
    case 98:
      uint64_t v16 = 0x685F68676968;
      return v16 & 0xFFFFFFFFFFFFLL | 0x6165000000000000;
    case 99:
      return 0x73616C665F746F68;
    case 100:
      return 0xD000000000000012;
    case 101:
      return 0x617A696E756D6D69;
    case 102:
      return 0x6465625F6E69;
    case 103:
      return 0xD000000000000011;
    case 104:
      return 0x5F72656C61686E69;
    case 106:
      uint64_t v21 = 0x617275736E69;
      return v21 & 0xFFFFFFFFFFFFLL | 0x636E000000000000;
    case 107:
      return 0x656E69646F69;
    case 108:
      return 1852797545;
    case 109:
      return 0xD000000000000014;
    case 111:
      return 0x757365725F62616CLL;
    case 112:
      unsigned int v18 = 1952670060;
      return v18 | 0x6F69746100000000;
    case 113:
      return 0x646F625F6E61656CLL;
    case 114:
    case 115:
      return 0x5F666F5F73736F6CLL;
    case 116:
      return 0x726165685F776F6CLL;
    case 117:
      return 0x61625F7265776F6CLL;
    case 118:
      return 2020505964;
    case 119:
      uint64_t v5 = 0x73656E67616DLL;
      return v5 & 0xFFFFFFFFFFFFLL | 0x7569000000000000;
    case 120:
      uint64_t v17 = 0x6E61676E616DLL;
      return v17 & 0xFFFFFFFFFFFFLL | 0x7365000000000000;
    case 121:
      return 0xD000000000000015;
    case 122:
      uint64_t v13 = 0x61636964656DLL;
      return v13 & 0xFFFFFFFFFFFFLL | 0x6974000000000000;
    case 123:
      return 0xD000000000000022;
    case 124:
      return 0x6C5F79726F6D656DLL;
    case 125:
      return 0xD000000000000016;
    case 126:
    case 128:
      return 0x61757274736E656DLL;
    case 127:
      return 0xD000000000000017;
    case 129:
      return 0xD000000000000017;
    case 130:
      return 0xD000000000000014;
    case 131:
      return 0xD000000000000015;
    case 132:
      return 0x6C7566646E696DLL;
    case 133:
      uint64_t v22 = 0x6462796C6F6DLL;
      return v22 & 0xFFFFFFFFFFFFLL | 0x6E65000000000000;
    case 134:
      return 0x6168635F646F6F6DLL;
    case 135:
      return 0x61657375616ELL;
    case 136:
      uint64_t v6 = 1667328366;
      return v6 & 0xFFFF0000FFFFFFFFLL | 0x6E6900000000;
    case 137:
      return 0x77735F746867696ELL;
    case 138:
      return 0x6C657546656B696ELL;
    case 139:
      return 0xD000000000000016;
    case 140:
      unsigned int v18 = 1819637359;
      return v18 | 0x6F69746100000000;
    case 141:
      return 0xD000000000000012;
    case 142:
      return 0xD000000000000015;
    case 144:
      return 0xD000000000000019;
    case 145:
      uint64_t v10 = 0x6369766C6570;
      return v10 & 0xFFFFFFFFFFFFLL | 0x705F000000000000;
    case 146:
      return 0xD00000000000001ALL;
    case 147:
      return 0xD000000000000022;
    case 148:
      return 0xD000000000000013;
    case 149:
      return 0x726F6870736F6870;
    case 150:
      unsigned int v12 = 1937336432;
      return v12 | 0x6C61636900000000;
    case 151:
      uint64_t v5 = 0x737361746F70;
      return v5 & 0xFFFFFFFFFFFFLL | 0x7569000000000000;
    case 152:
      uint64_t v21 = 0x616E67657270;
      return v21 & 0xFFFFFFFFFFFFLL | 0x636E000000000000;
    case 154:
      return 0xD000000000000015;
    case 156:
      return 0xD000000000000018;
    case 157:
      return 0xD000000000000011;
    case 158:
      unint64_t v23 = 0x6965746F7270;
      return v23 & 0xFFFFFFFFFFFFLL | 0x6E000000000000;
    case 160:
      return 0xD000000000000014;
    case 161:
      return 0xD000000000000012;
    case 162:
      return 0x76616C666F626972;
    case 163:
    case 164:
      unsigned int v15 = 1852732786;
      return v15 | 0x5F676E6900000000;
    case 165:
      return 0xD000000000000015;
    case 166:
      return 0x6F6E5F796E6E7572;
    case 167:
      uint64_t v11 = 0x696E656C6573;
      return v11 & 0xFFFFFFFFFFFFLL | 0x6D75000000000000;
    case 168:
      return 0x615F6C6175786573;
    case 169:
      return 0xD000000000000013;
    case 170:
      return 0xD00000000000001BLL;
    case 172:
      return 7629171;
    case 173:
      return 1852402547;
    case 174:
      return 0x7065656C73;
    case 175:
      return 0x70615F7065656C73;
    case 176:
      return 0x68635F7065656C73;
    case 177:
      uint64_t v22 = 0x5F7065656C73;
      return v22 & 0xFFFFFFFFFFFFLL | 0x6E65000000000000;
    case 178:
      return 0x75715F7065656C73;
    case 179:
      return 0x63735F7065656C73;
    case 180:
      return 0x63735F7065656C73;
    case 181:
      return 0xD000000000000011;
    case 184:
      return 0xD000000000000011;
    case 185:
    case 186:
      return 0x74735F7065656C73;
    case 187:
      return 0xD00000000000001ALL;
    case 188:
      unsigned int v20 = 1919905395;
      return v20 | 0x676E6900000000;
    case 189:
      return 0x6D7569646F73;
    case 190:
      return 0x7268745F65726F73;
    case 191:
      uint64_t v7 = 1953460339;
      goto LABEL_207;
    case 193:
      return 0x70735F7269617473;
    case 194:
      uint64_t v22 = 0x6C5F70657473;
      return v22 & 0xFFFFFFFFFFFFLL | 0x6E65000000000000;
    case 195:
      return 0x737365727473;
    case 196:
      uint64_t v24 = 1634297972;
      goto LABEL_201;
    case 198:
      return 0x75726268746F6F74;
    case 200:
      return 0x7865646E695F7675;
    case 201:
      return 0xD000000000000012;
    case 202:
      uint64_t v3 = 0x616E69676176;
      return v3 & 0xFFFFFFFFFFFFLL | 0x5F6C000000000000;
    case 203:
      return 0xD00000000000001ALL;
    case 204:
      return 0xD000000000000014;
    case 205:
      return 0xD000000000000011;
    case 206:
      uint64_t v24 = 1635019126;
LABEL_201:
      unint64_t v23 = v24 & 0xFFFF0000FFFFFFFFLL | 0x696D00000000;
      return v23 & 0xFFFFFFFFFFFFLL | 0x6E000000000000;
    case 207:
    case 210:
    case 211:
    case 212:
    case 213:
      return sub_17AA70();
    case 208:
    case 209:
      return 0x5F6E696D61746976;
    case 214:
      return 0x78616D5F326F76;
    case 215:
      uint64_t v7 = 1768779638;
LABEL_207:
      unint64_t v14 = v7 & 0xFFFF0000FFFFFFFFLL | 0x697400000000;
      return v14 & 0xFFFFFFFFFFFFLL | 0x676E000000000000;
    case 216:
      return 0xD000000000000013;
    case 217:
      return 0xD000000000000011;
    case 218:
      return 0xD000000000000021;
    case 219:
      return 0xD00000000000001ALL;
    case 220:
      unsigned int v15 = 1802264951;
      return v15 | 0x5F676E6900000000;
    case 221:
      return 0xD000000000000012;
    case 222:
      return 0xD000000000000015;
    case 223:
      uint64_t v19 = 1702125943;
      return v19 & 0xFFFF0000FFFFFFFFLL | 0x7200000000;
    case 224:
      return 0xD000000000000011;
    case 225:
    case 226:
      return 0x6168636C65656877;
    case 227:
      unint64_t v14 = 0x697A65656877;
      return v14 & 0xFFFFFFFFFFFFLL | 0x676E000000000000;
    case 228:
      return 0xD000000000000011;
    case 229:
      return 1668180346;
    case 230:
      return 0x655F657669746361;
    case 231:
      uint64_t v8 = 0x697669746361;
      return v8 & 0xFFFFFFFFFFFFLL | 0x7974000000000000;
    case 232:
      return 0xD000000000000016;
    case 233:
      return 0xD000000000000013;
    case 234:
      return 0x73616D5F79646F62;
    case 236:
      return 0xD000000000000011;
    case 237:
      uint64_t v9 = 0x64656E727562;
      return v9 & 0xFFFFFFFFFFFFLL | 0x675F000000000000;
    case 238:
      return 0x6573696372657865;
    case 240:
      return 0x6573696372657865;
    case 241:
      return 0x61725F7472616568;
    case 242:
      return 0x746867696568;
    case 243:
      return 1702260589;
    case 244:
      unsigned int v25 = 1702260589;
      return v25 | 0x616F675F00000000;
    case 245:
      uint64_t v26 = 1702260589;
      goto LABEL_247;
    case 246:
      return 0xD000000000000011;
    case 247:
      return 0x756F635F68737570;
    case 248:
      return 0x5F676E6974736572;
    case 249:
      uint64_t v22 = 0x675F676E6972;
      return v22 & 0xFFFFFFFFFFFFLL | 0x6E65000000000000;
    case 250:
      unsigned int v25 = 1819045746;
      return v25 | 0x616F675F00000000;
    case 251:
      uint64_t v26 = 1819045746;
LABEL_247:
      unint64_t v27 = v26 & 0xFFFF0000FFFFFFFFLL | 0x725F00000000;
      goto LABEL_262;
    case 252:
      return 7890291;
    case 253:
      return 0x756E696D5F786973;
    case 254:
      return 0x646E617473;
    case 255:
      return 0x6F675F646E617473;
    case 256:
      return 0x69725F646E617473;
    case 257:
      unsigned int v25 = 1885697139;
      return v25 | 0x616F675F00000000;
    case 258:
      return 0x676E696D6D697773;
    case 259:
      return 0xD000000000000011;
    case 260:
      return 0x5F676E696B6C6177;
    case 261:
      return 0x746867696577;
    case 262:
      return 0xD000000000000013;
    case 263:
      unint64_t v27 = 0x6C6379636962;
LABEL_262:
      uint64_t result = v27 & 0xFFFFFFFFFFFFLL | 0x6E69000000000000;
      break;
    case 264:
      uint64_t result = 7239026;
      break;
    case 265:
      uint64_t result = 0x635F737269617473;
      break;
    case 266:
      uint64_t result = 1835628403;
      break;
    case 267:
      uint64_t result = 1802264951;
      break;
    case 268:
      uint64_t result = 0x6168636C65656877;
      break;
    case 269:
      uint64_t result = 0x6E756F4370657473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_178E48(uint64_t a1, void *a2)
{
  sub_2694(&qword_202D00);
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = sub_731BC(v3, 270);
  *(void *)uint64_t v5 = "abdominal_cramps";
  *(void *)(v5 + 8) = 16;
  *(unsigned char *)(v5 + 16) = 2;
  *(void *)(v5 + 24) = "acne";
  *(void *)(v5 + 32) = 4;
  *(unsigned char *)(v5 + 40) = 2;
  *(void *)(v5 + 48) = "afib_history";
  *(void *)(v5 + 56) = 12;
  *(unsigned char *)(v5 + 64) = 2;
  *(void *)(v5 + 72) = "alcohol_log";
  *(void *)(v5 + 80) = 11;
  *(unsigned char *)(v5 + 88) = 2;
  *(void *)(v5 + 96) = "allergies";
  *(void *)(v5 + 104) = 9;
  *(unsigned char *)(v5 + 112) = 2;
  *(void *)(v5 + 120) = "anxiety_risk";
  *(void *)(v5 + 128) = 12;
  *(unsigned char *)(v5 + 136) = 2;
  *(void *)(v5 + 144) = "appetite_changes";
  *(void *)(v5 + 152) = 16;
  *(unsigned char *)(v5 + 160) = 2;
  *(void *)(v5 + 168) = "atrial_fibrillation";
  *(void *)(v5 + 176) = 19;
  *(unsigned char *)(v5 + 184) = 2;
  *(void *)(v5 + 192) = "audio_exposure";
  *(void *)(v5 + 200) = 14;
  *(unsigned char *)(v5 + 208) = 2;
  *(void *)(v5 + 216) = "audiogram";
  *(void *)(v5 + 224) = 9;
  *(unsigned char *)(v5 + 232) = 2;
  *(void *)(v5 + 240) = "beryllium";
  *(void *)(v5 + 248) = 9;
  *(unsigned char *)(v5 + 256) = 2;
  *(void *)(v5 + 264) = "biological_sex";
  *(void *)(v5 + 272) = 14;
  *(unsigned char *)(v5 + 280) = 2;
  *(void *)(v5 + 288) = "biotin";
  *(void *)(v5 + 296) = 6;
  *(unsigned char *)(v5 + 304) = 2;
  *(void *)(v5 + 312) = "bladder_incontinence";
  *(void *)(v5 + 320) = 20;
  *(unsigned char *)(v5 + 328) = 2;
  *(void *)(v5 + 336) = "bloating";
  *(void *)(v5 + 344) = 8;
  *(unsigned char *)(v5 + 352) = 2;
  *(void *)(v5 + 360) = "blood_alcohol_content";
  *(void *)(v5 + 368) = 21;
  *(unsigned char *)(v5 + 376) = 2;
  *(void *)(v5 + 384) = "blood_cholesterol";
  *(void *)(v5 + 392) = 17;
  *(unsigned char *)(v5 + 400) = 2;
  *(void *)(v5 + 408) = "blood_glucose";
  *(void *)(v5 + 416) = 13;
  *(unsigned char *)(v5 + 424) = 2;
  *(void *)(v5 + 432) = "blood_pressure";
  *(void *)(v5 + 440) = 14;
  *(unsigned char *)(v5 + 448) = 2;
  *(void *)(v5 + 456) = "blood_pressure_diastolic";
  *(void *)(v5 + 464) = 24;
  *(unsigned char *)(v5 + 472) = 2;
  *(void *)(v5 + 480) = "blood_pressure_systolic";
  *(void *)(v5 + 488) = 23;
  *(unsigned char *)(v5 + 496) = 2;
  *(void *)(v5 + 504) = "blood_type";
  *(void *)(v5 + 512) = 10;
  *(unsigned char *)(v5 + 520) = 2;
  *(void *)(v5 + 528) = "blurred_vision";
  *(void *)(v5 + 536) = 14;
  *(unsigned char *)(v5 + 544) = 2;
  *(void *)(v5 + 552) = "body_and_muscle_ache";
  *(void *)(v5 + 560) = 20;
  *(unsigned char *)(v5 + 568) = 2;
  *(void *)(v5 + 576) = "body_fat_percentage";
  *(void *)(v5 + 584) = 19;
  *(unsigned char *)(v5 + 592) = 2;
  *(void *)(v5 + 600) = "breast_general";
  *(void *)(v5 + 608) = 14;
  *(unsigned char *)(v5 + 616) = 2;
  *(void *)(v5 + 624) = "breast_pain";
  *(void *)(v5 + 632) = 11;
  *(unsigned char *)(v5 + 640) = 2;
  *(void *)(v5 + 648) = "caffeine";
  *(void *)(v5 + 656) = 8;
  *(unsigned char *)(v5 + 664) = 2;
  *(void *)(v5 + 672) = "calcium";
  *(void *)(v5 + 680) = 7;
  *(unsigned char *)(v5 + 688) = 2;
  *(void *)(v5 + 696) = "carbohydrates";
  *(void *)(v5 + 704) = 13;
  *(unsigned char *)(v5 + 712) = 2;
  *(void *)(v5 + 720) = "cardio_fitness";
  *(void *)(v5 + 728) = 14;
  *(unsigned char *)(v5 + 736) = 2;
  *(void *)(v5 + 744) = "cervical_mucus_quality";
  *(void *)(v5 + 752) = 22;
  *(unsigned char *)(v5 + 760) = 2;
  *(void *)(v5 + 768) = "chest_tightness_or_pain";
  *(void *)(v5 + 776) = 23;
  *(unsigned char *)(v5 + 784) = 2;
  *(void *)(v5 + 792) = "chills";
  *(void *)(v5 + 800) = 6;
  *(unsigned char *)(v5 + 808) = 2;
  *(void *)(v5 + 816) = "chloride";
  *(void *)(v5 + 824) = 8;
  *(unsigned char *)(v5 + 832) = 2;
  *(void *)(v5 + 840) = "chromium";
  *(void *)(v5 + 848) = 8;
  *(unsigned char *)(v5 + 856) = 2;
  *(void *)(v5 + 864) = "clinical_documents";
  *(void *)(v5 + 872) = 18;
  *(unsigned char *)(v5 + 880) = 2;
  *(void *)(v5 + 888) = "clinical_vitals";
  *(void *)(v5 + 896) = 15;
  *(unsigned char *)(v5 + 904) = 2;
  *(void *)(v5 + 912) = "condition_record";
  *(void *)(v5 + 920) = 16;
  *(unsigned char *)(v5 + 928) = 2;
  *(void *)(v5 + 936) = "congestion";
  *(void *)(v5 + 944) = 10;
  *(unsigned char *)(v5 + 952) = 2;
  *(void *)(v5 + 960) = "constipation";
  *(void *)(v5 + 968) = 12;
  *(unsigned char *)(v5 + 976) = 2;
  *(void *)(v5 + 984) = "contraceptives";
  *(void *)(v5 + 992) = 14;
  *(unsigned char *)(v5 + 1000) = 2;
  *(void *)(v5 + 1008) = "copper";
  *(void *)(v5 + 1016) = 6;
  *(unsigned char *)(v5 + 1024) = 2;
  *(void *)(v5 + 1032) = "coughing";
  *(void *)(v5 + 1040) = 8;
  *(unsigned char *)(v5 + 1048) = 2;
  *(void *)(v5 + 1056) = "cycling_cadence";
  *(void *)(v5 + 1064) = 15;
  *(unsigned char *)(v5 + 1072) = 2;
  *(void *)(v5 + 1080) = "cycling_functional_threshold_power";
  *(void *)(v5 + 1088) = 34;
  *(unsigned char *)(v5 + 1096) = 2;
  *(void *)(v5 + 1104) = "cycling_pace";
  *(void *)(v5 + 1112) = 12;
  *(unsigned char *)(v5 + 1120) = 2;
  *(void *)(v5 + 1128) = "depression_risk";
  *(void *)(v5 + 1136) = 15;
  *(unsigned char *)(v5 + 1144) = 2;
  *(void *)(v5 + 1152) = "diagnostic_test_report";
  *(void *)(v5 + 1160) = 22;
  *(unsigned char *)(v5 + 1168) = 2;
  *(void *)(v5 + 1176) = "diagnostic_test_result";
  *(void *)(v5 + 1184) = 22;
  *(unsigned char *)(v5 + 1192) = 2;
  *(void *)(v5 + 1200) = "diarrhea";
  *(void *)(v5 + 1208) = 8;
  *(unsigned char *)(v5 + 1216) = 2;
  *(void *)(v5 + 1224) = "dietary_calories";
  *(void *)(v5 + 1232) = 16;
  *(unsigned char *)(v5 + 1240) = 2;
  *(void *)(v5 + 1248) = "dietary_cholesterol";
  *(void *)(v5 + 1256) = 19;
  *(unsigned char *)(v5 + 1264) = 2;
  *(void *)(v5 + 1272) = "dietary_energy";
  *(void *)(v5 + 1280) = 14;
  *(unsigned char *)(v5 + 1288) = 2;
  *(void *)(v5 + 1296) = "dietary_sugar";
  *(void *)(v5 + 1304) = 13;
  *(unsigned char *)(v5 + 1312) = 2;
  *(void *)(v5 + 1320) = "dizziness";
  *(void *)(v5 + 1328) = 9;
  *(unsigned char *)(v5 + 1336) = 2;
  *(void *)(v5 + 1344) = "double_support";
  *(void *)(v5 + 1352) = 14;
  *(unsigned char *)(v5 + 1360) = 2;
  *(void *)(v5 + 1368) = "dry_skin";
  *(void *)(v5 + 1376) = 8;
  *(unsigned char *)(v5 + 1384) = 2;
  *(void *)(v5 + 1392) = "electrocardiogram";
  *(void *)(v5 + 1400) = 17;
  *(unsigned char *)(v5 + 1408) = 2;
  *(void *)(v5 + 1416) = "electrodermal_activity";
  *(void *)(v5 + 1424) = 22;
  *(unsigned char *)(v5 + 1432) = 2;
  *(void *)(v5 + 1440) = "elevation";
  *(void *)(v5 + 1448) = 9;
  *(unsigned char *)(v5 + 1456) = 2;
  *(void *)(v5 + 1464) = "elevation_gain";
  *(void *)(v5 + 1472) = 14;
  *(unsigned char *)(v5 + 1480) = 2;
  *(void *)(v5 + 1488) = "energy_consumed";
  *(void *)(v5 + 1496) = 15;
  *(unsigned char *)(v5 + 1504) = 2;
  *(void *)(v5 + 1512) = "environment_noise";
  *(void *)(v5 + 1520) = 17;
  *(unsigned char *)(v5 + 1528) = 2;
  *(void *)(v5 + 1536) = "environmental_sound_reduction";
  *(void *)(v5 + 1544) = 29;
  *(unsigned char *)(v5 + 1552) = 2;
  *(void *)(v5 + 1560) = "eye_prescription";
  *(void *)(v5 + 1584) = "fainting";
  *(void *)(v5 + 1608) = "fat";
  *(void *)(v5 + 1632) = "fat_monounsaturated";
  *(void *)(v5 + 1656) = "fat_polyunsaturated";
  *(void *)(v5 + 1680) = "fat_saturated";
  *(void *)(v5 + 1704) = "fatigue";
  *(void *)(v5 + 1728) = "fertile_window";
  *(void *)(v5 + 1752) = "fever";
  *(void *)(v5 + 1776) = "fiber";
  *(void *)(v5 + 1800) = "fitzpatrick_skin_type";
  *(void *)(v5 + 1824) = "flights_climbed";
  *(void *)(v5 + 1848) = "folate";
  *(void *)(v5 + 1872) = "forced_expiratory_volume";
  *(void *)(v5 + 1896) = "forced_vital_capacity";
  *(void *)(v5 + 1920) = "general_symptom";
  *(void *)(v5 + 1944) = "genomes";
  *(void *)(v5 + 1968) = "ground_contact_time";
  *(void *)(v5 + 1992) = "hair";
  *(void *)(v5 + 2256) = "heartbeat_rapid_pounding_or_fluttering";
  *(void *)(v5 + 2424) = "immunizations";
  *(void *)(v5 + 2520) = "insulin_delivery";
  *(void *)(v5 + 2616) = "irregular_heart_beat";
  *(void *)(v5 + 2712) = "lean_body_mass";
  *(void *)(v5 + 2808) = "lower_back_pain";
  *(void *)(v5 + 2904) = "medication_dose_event";
  *(void *)(v5 + 2952) = "medications_that_affect_heart_rate";
  *(void *)(v5 + 2976) = "memory_lapse";
  *(void *)(v5 + 3048) = "menstrual_period_length";
  *(void *)(v5 + 3072) = "menstruation";
  *(void *)(v5 + 3096) = "menstruation_prediction";
  *(void *)(v5 + 3120) = "menstruation_product";
  *(void *)(v5 + 3144) = "menstruation_symptoms";
  *(void *)(v5 + 3168) = "mindful";
  *(void *)(v5 + 3192) = "molybdenum";
  *(void *)(v5 + 3216) = "mood_change";
  *(void *)(v5 + 3240) = "nausea";
  *(void *)(v5 + 3264) = "niacin";
  *(void *)(v5 + 3288) = "night_sweats";
  *(void *)(v5 + 3312) = "nikeFuel";
  *(void *)(v5 + 3336) = "number_of_times_fallen";
  *(void *)(v5 + 3360) = "ovulation";
  *(void *)(v5 + 3384) = "ovulation_estimate";
  *(void *)(v5 + 3408) = "ovulation_test_result";
  *(void *)(v5 + 3432) = "pantothenic_acid";
  *(void *)(v5 + 3456) = "peak_expiratory_flow_rate";
  *(void *)(v5 + 3464) = 25;
  *(void *)(v5 + 3480) = "pelvic_pain";
  *(void *)(v5 + 3504) = "peripheral_perfusion_index";
  *(void *)(v5 + 3576) = "phosphorus";
  *(void *)(v5 + 3672) = "pregnancy_factor";
  *(void *)(v5 + 3768) = "prologned_periods";
  *(void *)(v5 + 3864) = "resting_heart_rate";
  *(void *)(v5 + 3960) = "running_stride_length";
  *(void *)(v5 + 4056) = "shortness_of_breath";
  *(void *)(v5 + 4416) = "sleep_stage_light";
  *(void *)(v5 + 4400) = 16;
  *(unsigned char *)(v5 + 4408) = 2;
  *(void *)(v5 + 4368) = "sleep_stage_core";
  *(void *)(v5 + 4376) = 16;
  *(unsigned char *)(v5 + 4384) = 2;
  *(void *)(v5 + 4392) = "sleep_stage_deep";
  *(unsigned char *)(v5 + 4336) = 2;
  *(void *)(v5 + 4344) = "sleep_stage_awake";
  *(void *)(v5 + 4352) = 17;
  *(unsigned char *)(v5 + 4360) = 2;
  *(void *)(v5 + 4304) = 14;
  *(unsigned char *)(v5 + 4312) = 2;
  *(void *)(v5 + 4320) = "sleep_score";
  *(void *)(v5 + 4328) = 11;
  *(void *)(v5 + 4296) = "sleep_schedule";
  *(void *)(v5 + 4280) = 13;
  *(unsigned char *)(v5 + 4288) = 2;
  *(void *)(v5 + 4088) = 27;
  *(void *)(v5 + 4256) = 9;
  *(unsigned char *)(v5 + 4264) = 2;
  *(void *)(v5 + 4272) = "sleep_quality";
  *(void *)(v5 + 4224) = "sleep_changes";
  *(void *)(v5 + 4232) = 13;
  *(unsigned char *)(v5 + 4240) = 2;
  *(void *)(v5 + 4248) = "sleep_end";
  *(void *)(v5 + 4208) = 11;
  *(unsigned char *)(v5 + 4216) = 2;
  *(void *)(v5 + 4176) = "sleep";
  *(void *)(v5 + 4184) = 5;
  *(unsigned char *)(v5 + 4192) = 2;
  *(void *)(v5 + 4200) = "sleep_apnea";
  *(void *)(v5 + 4152) = "skin";
  *(void *)(v5 + 4160) = 4;
  *(unsigned char *)(v5 + 4168) = 2;
  *(void *)(v5 + 4128) = "sit";
  *(unsigned char *)(v5 + 4120) = 2;
  *(void *)(v5 + 4136) = 3;
  *(unsigned char *)(v5 + 4144) = 2;
  *(void *)(v5 + 1568) = 16;
  *(void *)(v5 + 4104) = "sinus_congestion";
  *(unsigned char *)(v5 + 4096) = 2;
  *(void *)(v5 + 4112) = 16;
  *(unsigned char *)(v5 + 1576) = 2;
  *(void *)(v5 + 4080) = "signed_clinical_data_record";
  *(void *)(v5 + 4064) = 19;
  *(unsigned char *)(v5 + 4072) = 2;
  *(void *)(v5 + 4032) = "sexual_activity";
  *(unsigned char *)(v5 + 4024) = 2;
  *(void *)(v5 + 4040) = 15;
  *(unsigned char *)(v5 + 4048) = 2;
  *(void *)(v5 + 4008) = "selenium";
  *(void *)(v5 + 3992) = 10;
  *(unsigned char *)(v5 + 4000) = 2;
  *(void *)(v5 + 4016) = 8;
  *(void *)(v5 + 1592) = 8;
  *(void *)(v5 + 3984) = "runny_nose";
  *(void *)(v5 + 3968) = 21;
  *(unsigned char *)(v5 + 3976) = 2;
  *(void *)(v5 + 3936) = "running_power";
  *(unsigned char *)(v5 + 3928) = 2;
  *(void *)(v5 + 3944) = 13;
  *(unsigned char *)(v5 + 3952) = 2;
  *(void *)(v5 + 3912) = "running_pace";
  *(void *)(v5 + 3896) = 10;
  *(unsigned char *)(v5 + 3904) = 2;
  *(void *)(v5 + 3920) = 12;
  *(unsigned char *)(v5 + 1600) = 2;
  *(void *)(v5 + 3888) = "riboflavin";
  *(void *)(v5 + 3872) = 18;
  *(unsigned char *)(v5 + 3880) = 2;
  *(void *)(v5 + 3840) = "resting_energy_level";
  *(unsigned char *)(v5 + 3832) = 2;
  *(void *)(v5 + 3848) = 20;
  *(unsigned char *)(v5 + 3856) = 2;
  *(void *)(v5 + 3816) = "respiratory_rate";
  *(void *)(v5 + 3800) = 7;
  *(unsigned char *)(v5 + 3808) = 2;
  *(void *)(v5 + 3824) = 16;
  *(void *)(v5 + 1616) = 3;
  *(void *)(v5 + 3792) = "protein";
  *(void *)(v5 + 3776) = 17;
  *(unsigned char *)(v5 + 3784) = 2;
  *(void *)(v5 + 3744) = "progesterone_test_result";
  *(unsigned char *)(v5 + 3736) = 2;
  *(void *)(v5 + 3752) = 24;
  *(unsigned char *)(v5 + 3760) = 2;
  *(void *)(v5 + 3720) = "procedure_record";
  *(void *)(v5 + 3704) = 21;
  *(unsigned char *)(v5 + 3712) = 2;
  *(void *)(v5 + 3728) = 16;
  *(unsigned char *)(v5 + 1624) = 2;
  *(void *)(v5 + 3696) = "pregnancy_test_result";
  *(void *)(v5 + 3680) = 16;
  *(unsigned char *)(v5 + 3688) = 2;
  *(void *)(v5 + 3648) = "pregnancy";
  *(unsigned char *)(v5 + 3640) = 2;
  *(void *)(v5 + 3656) = 9;
  *(unsigned char *)(v5 + 3664) = 2;
  *(void *)(v5 + 3624) = "potassium";
  *(void *)(v5 + 3608) = 15;
  *(unsigned char *)(v5 + 3616) = 2;
  *(void *)(v5 + 3632) = 9;
  *(void *)(v5 + 1640) = 19;
  *(void *)(v5 + 3600) = "physical_effort";
  *(void *)(v5 + 3584) = 10;
  *(unsigned char *)(v5 + 3592) = 2;
  *(void *)(v5 + 3552) = "persistent_spotting";
  *(unsigned char *)(v5 + 3544) = 2;
  *(void *)(v5 + 3560) = 19;
  *(unsigned char *)(v5 + 3568) = 2;
  *(unsigned char *)(v5 + 3496) = 2;
  *(void *)(v5 + 3528) = "persistent_intermenstrual_bleeding";
  *(void *)(v5 + 3512) = 26;
  *(unsigned char *)(v5 + 3520) = 2;
  *(void *)(v5 + 3536) = 34;
  *(unsigned char *)(v5 + 1648) = 2;
  *(void *)(v5 + 1664) = 19;
  *(unsigned char *)(v5 + 1672) = 2;
  *(unsigned char *)(v5 + 3448) = 2;
  *(unsigned char *)(v5 + 3472) = 2;
  *(void *)(v5 + 3488) = 11;
  *(void *)(v5 + 1688) = 13;
  *(unsigned char *)(v5 + 1696) = 2;
  *(unsigned char *)(v5 + 3400) = 2;
  *(void *)(v5 + 3416) = 21;
  *(unsigned char *)(v5 + 3424) = 2;
  *(void *)(v5 + 3440) = 16;
  *(void *)(v5 + 1712) = 7;
  *(unsigned char *)(v5 + 1720) = 2;
  *(unsigned char *)(v5 + 3352) = 2;
  *(void *)(v5 + 3368) = 9;
  *(unsigned char *)(v5 + 3376) = 2;
  *(void *)(v5 + 3392) = 18;
  *(void *)(v5 + 1736) = 14;
  *(unsigned char *)(v5 + 1744) = 2;
  *(unsigned char *)(v5 + 3304) = 2;
  *(void *)(v5 + 3320) = 8;
  *(unsigned char *)(v5 + 3328) = 2;
  *(void *)(v5 + 3344) = 22;
  *(void *)(v5 + 1760) = 5;
  *(unsigned char *)(v5 + 1768) = 2;
  *(unsigned char *)(v5 + 3256) = 2;
  *(void *)(v5 + 3272) = 6;
  *(unsigned char *)(v5 + 3280) = 2;
  *(void *)(v5 + 3296) = 12;
  *(void *)(v5 + 1784) = 5;
  *(unsigned char *)(v5 + 1792) = 2;
  *(unsigned char *)(v5 + 3208) = 2;
  *(void *)(v5 + 3224) = 11;
  *(unsigned char *)(v5 + 3232) = 2;
  *(void *)(v5 + 3248) = 6;
  *(void *)(v5 + 1808) = 21;
  *(unsigned char *)(v5 + 1816) = 2;
  *(unsigned char *)(v5 + 3160) = 2;
  *(void *)(v5 + 3176) = 7;
  *(unsigned char *)(v5 + 3184) = 2;
  *(void *)(v5 + 3200) = 10;
  *(void *)(v5 + 1832) = 15;
  *(unsigned char *)(v5 + 1840) = 2;
  *(unsigned char *)(v5 + 3112) = 2;
  *(void *)(v5 + 3128) = 20;
  *(unsigned char *)(v5 + 3136) = 2;
  *(void *)(v5 + 3152) = 21;
  *(void *)(v5 + 1856) = 6;
  *(unsigned char *)(v5 + 1864) = 2;
  *(void *)(v5 + 1880) = 24;
  *(void *)(v5 + 3080) = 12;
  *(unsigned char *)(v5 + 3088) = 2;
  *(void *)(v5 + 3104) = 23;
  *(unsigned char *)(v5 + 1888) = 2;
  *(void *)(v5 + 3056) = 23;
  *(unsigned char *)(v5 + 3040) = 2;
  *(unsigned char *)(v5 + 3064) = 2;
  *(void *)(v5 + 3024) = "menstrual_pain";
  *(void *)(v5 + 3008) = 22;
  *(unsigned char *)(v5 + 3016) = 2;
  *(void *)(v5 + 3032) = 14;
  *(void *)(v5 + 3000) = "menstrual_cycle_length";
  *(unsigned char *)(v5 + 2968) = 2;
  *(void *)(v5 + 2984) = 12;
  *(unsigned char *)(v5 + 2992) = 2;
  *(void *)(v5 + 1904) = 21;
  *(void *)(v5 + 2960) = 34;
  *(void *)(v5 + 2936) = 11;
  *(unsigned char *)(v5 + 2944) = 2;
  *(unsigned char *)(v5 + 1912) = 2;
  *(void *)(v5 + 2928) = "medications";
  *(void *)(v5 + 2912) = 21;
  *(unsigned char *)(v5 + 2920) = 2;
  *(void *)(v5 + 2880) = "manganese";
  *(unsigned char *)(v5 + 2872) = 2;
  *(void *)(v5 + 2888) = 9;
  *(unsigned char *)(v5 + 2896) = 2;
  *(void *)(v5 + 2856) = "magnesium";
  *(void *)(v5 + 2840) = 4;
  *(unsigned char *)(v5 + 2848) = 2;
  *(void *)(v5 + 2864) = 9;
  *(void *)(v5 + 1928) = 15;
  *(void *)(v5 + 2832) = "lynx";
  *(void *)(v5 + 2816) = 15;
  *(unsigned char *)(v5 + 2824) = 2;
  *(void *)(v5 + 2784) = "low_heart_rate";
  *(unsigned char *)(v5 + 2776) = 2;
  *(void *)(v5 + 2792) = 14;
  *(unsigned char *)(v5 + 2800) = 2;
  *(void *)(v5 + 2760) = "loss_of_taste";
  *(void *)(v5 + 2744) = 13;
  *(unsigned char *)(v5 + 2752) = 2;
  *(void *)(v5 + 2768) = 13;
  *(unsigned char *)(v5 + 1936) = 2;
  *(void *)(v5 + 2736) = "loss_of_smell";
  *(void *)(v5 + 2720) = 14;
  *(unsigned char *)(v5 + 2728) = 2;
  *(void *)(v5 + 2688) = "lactation";
  *(unsigned char *)(v5 + 2680) = 2;
  *(void *)(v5 + 2696) = 9;
  *(unsigned char *)(v5 + 2704) = 2;
  *(void *)(v5 + 2664) = "lab_results";
  *(void *)(v5 + 2648) = 16;
  *(unsigned char *)(v5 + 2656) = 2;
  *(void *)(v5 + 2672) = 11;
  *(void *)(v5 + 1952) = 7;
  *(void *)(v5 + 2640) = "irregular_period";
  *(void *)(v5 + 2624) = 20;
  *(unsigned char *)(v5 + 2632) = 2;
  *(void *)(v5 + 2592) = "iron";
  *(unsigned char *)(v5 + 2584) = 2;
  *(void *)(v5 + 2600) = 4;
  *(unsigned char *)(v5 + 2608) = 2;
  *(void *)(v5 + 2568) = "iodine";
  *(void *)(v5 + 2552) = 9;
  *(unsigned char *)(v5 + 2560) = 2;
  *(void *)(v5 + 2576) = 6;
  *(unsigned char *)(v5 + 1960) = 2;
  *(void *)(v5 + 2544) = "insurance";
  *(void *)(v5 + 2528) = 16;
  *(unsigned char *)(v5 + 2536) = 2;
  *(void *)(v5 + 2496) = "inhaler_usage";
  *(unsigned char *)(v5 + 2488) = 2;
  *(void *)(v5 + 2504) = 13;
  *(unsigned char *)(v5 + 2512) = 2;
  *(void *)(v5 + 2472) = "infrequent_period";
  *(void *)(v5 + 2456) = 6;
  *(unsigned char *)(v5 + 2464) = 2;
  *(void *)(v5 + 2480) = 17;
  *(void *)(v5 + 1976) = 19;
  *(void *)(v5 + 2448) = "in_bed";
  *(void *)(v5 + 2432) = 13;
  *(unsigned char *)(v5 + 2440) = 2;
  *(void *)(v5 + 2400) = "hypertension_event";
  *(unsigned char *)(v5 + 2392) = 2;
  *(void *)(v5 + 2408) = 18;
  *(unsigned char *)(v5 + 2416) = 2;
  *(void *)(v5 + 2376) = "hot_flashes";
  *(void *)(v5 + 2360) = 15;
  *(unsigned char *)(v5 + 2368) = 2;
  *(void *)(v5 + 2384) = 11;
  *(unsigned char *)(v5 + 1984) = 2;
  *(void *)(v5 + 2352) = "high_heart_rate";
  *(void *)(v5 + 2336) = 10;
  *(unsigned char *)(v5 + 2344) = 2;
  *(void *)(v5 + 2304) = "heartburn";
  *(void *)(v5 + 2312) = 9;
  *(unsigned char *)(v5 + 2320) = 2;
  *(void *)(v5 + 2328) = "hemoglobin";
  *(unsigned char *)(v5 + 2272) = 2;
  *(void *)(v5 + 2280) = "heartbeat_skipped";
  *(void *)(v5 + 2288) = 17;
  *(unsigned char *)(v5 + 2296) = 2;
  *(void *)(v5 + 2264) = 38;
  *(void *)(v5 + 2240) = 22;
  *(unsigned char *)(v5 + 2248) = 2;
  *(void *)(v5 + 2000) = 4;
  *(void *)(v5 + 2232) = "heart_rate_variability";
  *(void *)(v5 + 2216) = 19;
  *(unsigned char *)(v5 + 2224) = 2;
  *(void *)(v5 + 2184) = "heart_rate_range";
  *(void *)(v5 + 2192) = 16;
  *(unsigned char *)(v5 + 2200) = 2;
  *(void *)(v5 + 2208) = "heart_rate_recovery";
  *(unsigned char *)(v5 + 2152) = 2;
  *(void *)(v5 + 2160) = "hearing";
  *(void *)(v5 + 2168) = 7;
  *(unsigned char *)(v5 + 2176) = 2;
  *(void *)(v5 + 2120) = 24;
  *(unsigned char *)(v5 + 2128) = 2;
  *(void *)(v5 + 2136) = "health_trends";
  *(void *)(v5 + 2144) = 13;
  *(unsigned char *)(v5 + 2008) = 2;
  *(void *)(v5 + 2096) = 15;
  *(unsigned char *)(v5 + 2104) = 2;
  *(void *)(v5 + 2112) = "headphone_audio_exposure";
  *(void *)(v5 + 2064) = "headache";
  *(void *)(v5 + 2072) = 8;
  *(unsigned char *)(v5 + 2080) = 2;
  *(void *)(v5 + 2088) = "headphone_audio";
  *(unsigned char *)(v5 + 2032) = 2;
  *(void *)(v5 + 2040) = "handwash";
  *(void *)(v5 + 2048) = 8;
  *(unsigned char *)(v5 + 2056) = 2;
  *(void *)(v5 + 2016) = "hair_loss";
  *(void *)(v5 + 2024) = 9;
  *(void *)(v5 + 4424) = 17;
  *(unsigned char *)(v5 + 4432) = 2;
  *(void *)(v5 + 4440) = "sleep_stage_rem";
  *(void *)(v5 + 4448) = 15;
  *(unsigned char *)(v5 + 4456) = 2;
  *(void *)(v5 + 4464) = "sleep_start";
  *(void *)(v5 + 4472) = 11;
  *(unsigned char *)(v5 + 4480) = 2;
  *(void *)(v5 + 4488) = "sleeping_wrist_temperature";
  *(void *)(v5 + 4496) = 26;
  *(unsigned char *)(v5 + 4504) = 2;
  *(void *)(v5 + 4512) = "snoring";
  *(void *)(v5 + 4520) = 7;
  *(unsigned char *)(v5 + 4528) = 2;
  *(void *)(v5 + 4536) = "sodium";
  *(void *)(v5 + 4544) = 6;
  *(unsigned char *)(v5 + 4552) = 2;
  *(void *)(v5 + 4560) = "sore_throat";
  *(void *)(v5 + 4568) = 11;
  *(unsigned char *)(v5 + 4576) = 2;
  *(void *)(v5 + 4584) = "spotting";
  *(void *)(v5 + 4592) = 8;
  *(unsigned char *)(v5 + 4600) = 2;
  *(void *)(v5 + 4608) = "stair_speed_down";
  *(void *)(v5 + 4616) = 16;
  *(unsigned char *)(v5 + 4624) = 2;
  *(void *)(v5 + 4632) = "stair_speed_up";
  *(void *)(v5 + 4640) = 14;
  *(unsigned char *)(v5 + 4648) = 2;
  *(void *)(v5 + 4656) = "step_length";
  *(void *)(v5 + 4664) = 11;
  *(unsigned char *)(v5 + 4672) = 2;
  *(void *)(v5 + 4680) = "stress";
  *(void *)(v5 + 4688) = 6;
  *(unsigned char *)(v5 + 4696) = 2;
  *(void *)(v5 + 4704) = "thiamin";
  *(void *)(v5 + 4712) = 7;
  *(unsigned char *)(v5 + 4720) = 2;
  *(void *)(v5 + 4728) = "time_in_daylight";
  *(void *)(v5 + 4736) = 16;
  *(unsigned char *)(v5 + 4744) = 2;
  *(void *)(v5 + 4752) = "toothbrushing";
  *(void *)(v5 + 4760) = 13;
  *(unsigned char *)(v5 + 4768) = 2;
  *(void *)(v5 + 4776) = "underwater_depth";
  *(void *)(v5 + 4784) = 16;
  *(unsigned char *)(v5 + 4792) = 2;
  *(void *)(v5 + 4800) = "uv_index";
  *(void *)(v5 + 4808) = 8;
  *(unsigned char *)(v5 + 4816) = 2;
  *(void *)(v5 + 4824) = "vaccination_record";
  *(void *)(v5 + 4832) = 18;
  *(unsigned char *)(v5 + 4840) = 2;
  *(void *)(v5 + 4848) = "vaginal_dryness";
  *(void *)(v5 + 4856) = 15;
  *(unsigned char *)(v5 + 4864) = 2;
  *(void *)(v5 + 4872) = "verifiable_clinical_record";
  *(void *)(v5 + 4880) = 26;
  *(unsigned char *)(v5 + 4888) = 2;
  *(void *)(v5 + 4896) = "vertical_oscillation";
  *(void *)(v5 + 4904) = 20;
  *(unsigned char *)(v5 + 4912) = 2;
  *(void *)(v5 + 4920) = "vital_sign_record";
  *(void *)(v5 + 4928) = 17;
  *(unsigned char *)(v5 + 4936) = 2;
  *(void *)(v5 + 4944) = "vitamin";
  *(void *)(v5 + 4952) = 7;
  *(unsigned char *)(v5 + 4960) = 2;
  *(void *)(v5 + 4968) = "vitamin_a";
  *(void *)(v5 + 4976) = 9;
  *(unsigned char *)(v5 + 4984) = 2;
  *(void *)(v5 + 4992) = "vitamin_b12";
  *(void *)(v5 + 5000) = 11;
  *(unsigned char *)(v5 + 5008) = 2;
  *(void *)(v5 + 5016) = "vitamin_b6";
  *(void *)(v5 + 5024) = 10;
  *(unsigned char *)(v5 + 5032) = 2;
  *(void *)(v5 + 5040) = "vitamin_c";
  *(void *)(v5 + 5048) = 9;
  *(unsigned char *)(v5 + 5056) = 2;
  *(void *)(v5 + 5064) = "vitamin_d";
  *(void *)(v5 + 5072) = 9;
  *(unsigned char *)(v5 + 5080) = 2;
  *(void *)(v5 + 5088) = "vitamin_e";
  *(void *)(v5 + 5096) = 9;
  *(unsigned char *)(v5 + 5104) = 2;
  *(void *)(v5 + 5112) = "vitamin_k";
  *(void *)(v5 + 5120) = 9;
  *(unsigned char *)(v5 + 5128) = 2;
  *(void *)(v5 + 5136) = "vo2_max";
  *(void *)(v5 + 5144) = 7;
  *(unsigned char *)(v5 + 5152) = 2;
  *(void *)(v5 + 5160) = "vomiting";
  *(void *)(v5 + 5168) = 8;
  *(unsigned char *)(v5 + 5176) = 2;
  *(void *)(v5 + 5184) = "waist_circumference";
  *(void *)(v5 + 5192) = 19;
  *(unsigned char *)(v5 + 5200) = 2;
  *(void *)(v5 + 5208) = "walking_asymmetry";
  *(void *)(v5 + 5216) = 17;
  *(unsigned char *)(v5 + 5224) = 2;
  *(void *)(v5 + 5232) = "walking_double_support_percentage";
  *(void *)(v5 + 5240) = 33;
  *(unsigned char *)(v5 + 5248) = 2;
  *(void *)(v5 + 5256) = "walking_heart_rate_average";
  *(void *)(v5 + 5264) = 26;
  *(unsigned char *)(v5 + 5272) = 2;
  *(void *)(v5 + 5280) = "walking_pace";
  *(void *)(v5 + 5288) = 12;
  *(unsigned char *)(v5 + 5296) = 2;
  *(void *)(v5 + 5304) = "walking_steadiness";
  *(void *)(v5 + 5312) = 18;
  *(unsigned char *)(v5 + 5320) = 2;
  *(void *)(v5 + 5328) = "walking_stride_length";
  *(void *)(v5 + 5336) = 21;
  *(unsigned char *)(v5 + 5344) = 2;
  *(void *)(v5 + 5352) = "water";
  *(void *)(v5 + 5360) = 5;
  *(unsigned char *)(v5 + 5368) = 2;
  *(void *)(v5 + 5376) = "water_temperature";
  *(void *)(v5 + 5384) = 17;
  *(unsigned char *)(v5 + 5392) = 2;
  *(void *)(v5 + 5400) = "wheelchair_pace";
  *(void *)(v5 + 5408) = 15;
  *(unsigned char *)(v5 + 5416) = 2;
  *(void *)(v5 + 5424) = "wheelchair_use";
  *(void *)(v5 + 5432) = 14;
  *(unsigned char *)(v5 + 5440) = 2;
  *(void *)(v5 + 5448) = "wheezing";
  *(void *)(v5 + 5456) = 8;
  *(unsigned char *)(v5 + 5464) = 2;
  *(void *)(v5 + 5472) = "wrist_temperature";
  *(void *)(v5 + 5480) = 17;
  *(unsigned char *)(v5 + 5488) = 2;
  *(void *)(v5 + 5496) = "zinc";
  *(void *)(v5 + 5504) = 4;
  *(unsigned char *)(v5 + 5512) = 2;
  *(void *)(v5 + 5520) = "active_energy";
  *(void *)(v5 + 5528) = 13;
  *(unsigned char *)(v5 + 5536) = 2;
  *(void *)(v5 + 5544) = "activity";
  *(void *)(v5 + 5552) = 8;
  *(unsigned char *)(v5 + 5560) = 2;
  *(void *)(v5 + 5568) = "basal_body_temperature";
  *(void *)(v5 + 5576) = 22;
  *(unsigned char *)(v5 + 5584) = 2;
  *(void *)(v5 + 5592) = "basal_energy_burned";
  *(void *)(v5 + 5600) = 19;
  *(unsigned char *)(v5 + 5608) = 2;
  *(void *)(v5 + 5616) = "body_mass_index";
  *(void *)(v5 + 5624) = 15;
  *(unsigned char *)(v5 + 5632) = 2;
  *(void *)(v5 + 5640) = "body_temperature";
  *(void *)(v5 + 5648) = 16;
  *(unsigned char *)(v5 + 5656) = 2;
  *(void *)(v5 + 5664) = "brisk_minute_goal";
  *(void *)(v5 + 5672) = 17;
  *(unsigned char *)(v5 + 5680) = 2;
  *(void *)(v5 + 5688) = "burned_generic";
  *(void *)(v5 + 5696) = 14;
  *(unsigned char *)(v5 + 5704) = 2;
  *(void *)(v5 + 5712) = "exercise_goal";
  *(void *)(v5 + 5720) = 13;
  *(unsigned char *)(v5 + 5728) = 2;
  *(void *)(v5 + 5736) = "exercise_minutes";
  *(void *)(v5 + 5744) = 16;
  *(unsigned char *)(v5 + 5752) = 2;
  *(void *)(v5 + 5760) = "exercise_ring";
  *(void *)(v5 + 5768) = 13;
  *(unsigned char *)(v5 + 5776) = 2;
  *(void *)(v5 + 5784) = "heart_rate";
  *(void *)(v5 + 5792) = 10;
  *(unsigned char *)(v5 + 5800) = 2;
  *(void *)(v5 + 5808) = "height";
  *(void *)(v5 + 5816) = 6;
  *(unsigned char *)(v5 + 5824) = 2;
  *(void *)(v5 + 5832) = "move";
  *(void *)(v5 + 5840) = 4;
  *(unsigned char *)(v5 + 5848) = 2;
  *(void *)(v5 + 5856) = "move_goal";
  *(void *)(v5 + 5864) = 9;
  *(unsigned char *)(v5 + 5872) = 2;
  *(void *)(v5 + 5880) = "move_ring";
  *(void *)(v5 + 5888) = 9;
  *(unsigned char *)(v5 + 5896) = 2;
  *(void *)(v5 + 5904) = "oxygen_saturation";
  *(void *)(v5 + 5912) = 17;
  *(unsigned char *)(v5 + 5920) = 2;
  *(void *)(v5 + 5928) = "push_count";
  *(void *)(v5 + 5936) = 10;
  *(unsigned char *)(v5 + 5944) = 2;
  *(void *)(v5 + 5952) = "resting_energy";
  *(void *)(v5 + 5960) = 14;
  *(unsigned char *)(v5 + 5968) = 2;
  *(void *)(v5 + 5976) = "ring_general";
  *(void *)(v5 + 5984) = 12;
  *(unsigned char *)(v5 + 5992) = 2;
  *(void *)(v5 + 6000) = "roll_goal";
  *(void *)(v5 + 6008) = 9;
  *(unsigned char *)(v5 + 6016) = 2;
  *(void *)(v5 + 6024) = "roll_ring";
  *(void *)(v5 + 6032) = 9;
  *(unsigned char *)(v5 + 6040) = 2;
  *(void *)(v5 + 6048) = "sex";
  *(void *)(v5 + 6056) = 3;
  *(unsigned char *)(v5 + 6064) = 2;
  *(void *)(v5 + 6072) = "six_minute_walk";
  *(void *)(v5 + 6080) = 15;
  *(unsigned char *)(v5 + 6088) = 2;
  *(void *)(v5 + 6096) = "stand";
  *(void *)(v5 + 6104) = 5;
  *(unsigned char *)(v5 + 6112) = 2;
  *(void *)(v5 + 6120) = "stand_goal";
  *(void *)(v5 + 6128) = 10;
  *(unsigned char *)(v5 + 6136) = 2;
  *(void *)(v5 + 6144) = "stand_ring";
  *(void *)(v5 + 6152) = 10;
  *(unsigned char *)(v5 + 6160) = 2;
  *(void *)(v5 + 6168) = "step_goal";
  *(void *)(v5 + 6176) = 9;
  *(unsigned char *)(v5 + 6184) = 2;
  *(void *)(v5 + 6192) = "swimming_stroke";
  *(void *)(v5 + 6200) = 15;
  *(unsigned char *)(v5 + 6208) = 2;
  *(void *)(v5 + 6216) = "walk_run_distance";
  *(void *)(v5 + 6224) = 17;
  *(unsigned char *)(v5 + 6232) = 2;
  *(void *)(v5 + 6240) = "walking_speed";
  *(void *)(v5 + 6248) = 13;
  *(unsigned char *)(v5 + 6256) = 2;
  *(void *)(v5 + 6264) = "weight";
  *(void *)(v5 + 6272) = 6;
  *(unsigned char *)(v5 + 6280) = 2;
  *(void *)(v5 + 6288) = "wheelchair_distance";
  *(void *)(v5 + 6296) = 19;
  *(unsigned char *)(v5 + 6304) = 2;
  *(void *)(v5 + 6312) = "bicycling";
  *(void *)(v5 + 6320) = 9;
  *(unsigned char *)(v5 + 6328) = 2;
  *(void *)(v5 + 6336) = "run";
  *(void *)(v5 + 6344) = 3;
  *(unsigned char *)(v5 + 6352) = 2;
  *(void *)(v5 + 6360) = "stairs_climbing";
  *(void *)(v5 + 6368) = 15;
  *(unsigned char *)(v5 + 6376) = 2;
  *(void *)(v5 + 6384) = "swim";
  *(void *)(v5 + 6392) = 4;
  *(unsigned char *)(v5 + 6400) = 2;
  *(void *)(v5 + 6408) = "walk";
  *(void *)(v5 + 6416) = 4;
  *(unsigned char *)(v5 + 6424) = 2;
  *(void *)(v5 + 6432) = "wheelchair";
  *(void *)(v5 + 6440) = 10;
  *(unsigned char *)(v5 + 6448) = 2;
  *(void *)(v5 + 6456) = "stepCount";
  *(void *)(v5 + 6464) = 9;
  *(unsigned char *)(v5 + 6472) = 2;
  v6._rawValue = (void *)HKActivityRingUIViewRepresentable.updateUIView(_:context:)(v4);
  v11._countAndFlagsBits = a1;
  v11._object = a2;
  unint64_t v7 = sub_1AD190(v6, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v8 = v7 - 128;
  if (v7 < 0x80) {
    return v7;
  }
  uint64_t result = 183;
  unint64_t v7 = 128;
  switch(v8)
  {
    case 0uLL:
      return v7;
    case 1uLL:
      return 129;
    case 2uLL:
      return 130;
    case 3uLL:
      return 131;
    case 4uLL:
      return 132;
    case 5uLL:
      return 133;
    case 6uLL:
      return 134;
    case 7uLL:
      return 135;
    case 8uLL:
      return 136;
    case 9uLL:
      return 137;
    case 0xAuLL:
      return 138;
    case 0xBuLL:
      return 139;
    case 0xCuLL:
      return 140;
    case 0xDuLL:
      return 141;
    case 0xEuLL:
      return 142;
    case 0xFuLL:
      return 143;
    case 0x10uLL:
      return 144;
    case 0x11uLL:
      return 145;
    case 0x12uLL:
      return 146;
    case 0x13uLL:
      return 147;
    case 0x14uLL:
      return 148;
    case 0x15uLL:
      return 149;
    case 0x16uLL:
      return 150;
    case 0x17uLL:
      return 151;
    case 0x18uLL:
      return 152;
    case 0x19uLL:
      return 153;
    case 0x1AuLL:
      return 154;
    case 0x1BuLL:
      return 155;
    case 0x1CuLL:
      return 156;
    case 0x1DuLL:
      return 157;
    case 0x1EuLL:
      return 158;
    case 0x1FuLL:
      return 159;
    case 0x20uLL:
      return 160;
    case 0x21uLL:
      return 161;
    case 0x22uLL:
      return 162;
    case 0x23uLL:
      return 163;
    case 0x24uLL:
      return 164;
    case 0x25uLL:
      return 165;
    case 0x26uLL:
      return 166;
    case 0x27uLL:
      return 167;
    case 0x28uLL:
      return 168;
    case 0x29uLL:
      return 169;
    case 0x2AuLL:
      return 170;
    case 0x2BuLL:
      return 171;
    case 0x2CuLL:
      return 172;
    case 0x2DuLL:
      return 173;
    case 0x2EuLL:
      return 174;
    case 0x2FuLL:
      return 175;
    case 0x30uLL:
      return 176;
    case 0x31uLL:
      return 177;
    case 0x32uLL:
      return 178;
    case 0x33uLL:
      return 179;
    case 0x34uLL:
      return 180;
    case 0x35uLL:
      return 181;
    case 0x36uLL:
      return 182;
    case 0x37uLL:
      return result;
    case 0x38uLL:
      uint64_t result = 184;
      break;
    case 0x39uLL:
      uint64_t result = 185;
      break;
    case 0x3AuLL:
      uint64_t result = 186;
      break;
    case 0x3BuLL:
      uint64_t result = 187;
      break;
    case 0x3CuLL:
      uint64_t result = 188;
      break;
    case 0x3DuLL:
      uint64_t result = 189;
      break;
    case 0x3EuLL:
      uint64_t result = 190;
      break;
    case 0x3FuLL:
      uint64_t result = 191;
      break;
    default:
      uint64_t result = 270;
      break;
  }
  return result;
}

_UNKNOWN **sub_17A77C()
{
  return &off_1F49C0;
}

uint64_t sub_17A788(__int16 *a1, __int16 *a2)
{
  return sub_15437C(*a1, *a2);
}

Swift::Int sub_17A794()
{
  return sub_3033C(*v0);
}

uint64_t sub_17A79C(uint64_t a1)
{
  return sub_19D7AC(a1, *v1);
}

Swift::Int sub_17A7A4(uint64_t a1)
{
  return sub_19D928(a1, *v1);
}

uint64_t sub_17A7AC@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_178E48(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_17A7DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1771BC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_17A808(void *a1@<X8>)
{
  *a1 = &off_1F49C0;
}

_WORD *initializeBufferWithCopyOfBuffer for HealthDataType(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HealthDataType(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFEF3)
  {
    if (a2 + 269 <= 0xFFFEFFFF) {
      int v2 = 2;
    }
    else {
      int v2 = 4;
    }
    if (a2 + 269 < 0xFF0000) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((unsigned char *)a1 + 2)) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 16)) - 270;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10E;
  int v5 = v6 - 270;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HealthDataType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 269 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 269 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFEF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFEF2)
  {
    unsigned int v6 = ((a2 - 65267) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 + 269;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x17A980);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(_WORD *)uint64_t result = a2 + 269;
        break;
    }
  }
  return result;
}

uint64_t sub_17A9A8(unsigned __int16 *a1)
{
  return *a1;
}

_WORD *sub_17A9B0(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HealthDataType()
{
  return &type metadata for HealthDataType;
}

unint64_t sub_17A9CC()
{
  unint64_t result = qword_208340;
  if (!qword_208340)
  {
    sub_B464(&qword_208348);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208340);
  }
  return result;
}

unint64_t sub_17AA24()
{
  unint64_t result = qword_208350;
  if (!qword_208350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208350);
  }
  return result;
}

uint64_t sub_17AA70()
{
  return 0x5F6E696D61746976;
}

void *sub_17AA8C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, long long *a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a1;
  memcpy(v10 + 3, a2, 0xA0uLL);
  v10[23] = a3;
  v10[24] = a4;
  sub_24D80(a5, (uint64_t)(v10 + 25));
  return v10;
}

void *sub_17AB08(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, long long *a5)
{
  v5[2] = a1;
  memcpy(v5 + 3, a2, 0xA0uLL);
  v5[23] = a3;
  v5[24] = a4;
  sub_24D80(a5, (uint64_t)(v5 + 25));
  return v5;
}

uint64_t sub_17AB5C()
{
  sub_A364();
  v1[17] = v2;
  v1[18] = v0;
  sub_E510();
  v1[19] = v3;
  uint64_t v4 = sub_1AB410();
  v1[20] = v4;
  sub_A19C(v4);
  v1[21] = v5;
  v1[22] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_203A20);
  sub_53D4(v6);
  v1[23] = sub_A42C();
  uint64_t v7 = sub_1AB4B0();
  v1[24] = v7;
  sub_A19C(v7);
  v1[25] = v8;
  v1[26] = sub_A42C();
  uint64_t v9 = sub_1AB510();
  v1[27] = v9;
  sub_A19C(v9);
  v1[28] = v10;
  v1[29] = sub_A220();
  v1[30] = swift_task_alloc();
  uint64_t v11 = sub_1AB420();
  v1[31] = v11;
  sub_A19C(v11);
  v1[32] = v12;
  v1[33] = sub_A220();
  v1[34] = swift_task_alloc();
  uint64_t v13 = sub_1AB450();
  v1[35] = v13;
  sub_A19C(v13);
  v1[36] = v14;
  v1[37] = sub_A42C();
  uint64_t v15 = sub_1AB3F0();
  v1[38] = v15;
  sub_A19C(v15);
  v1[39] = v16;
  v1[40] = sub_A42C();
  uint64_t v17 = sub_1AC800();
  v1[41] = v17;
  sub_A19C(v17);
  v1[42] = v18;
  v1[43] = sub_A220();
  v1[44] = swift_task_alloc();
  v1[45] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v19, v20, v21);
}

uint64_t sub_17AD64()
{
  uint64_t v92 = v0;
  uint64_t v88 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 304);
  uint64_t v7 = sub_1AC7C0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v7, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v88, v6);
  uint64_t v8 = sub_1AC7F0();
  os_log_type_t v9 = sub_1ACF50();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v89 = *(void *)(v0 + 360);
    uint64_t v10 = *(void *)(v0 + 320);
    uint64_t v82 = *(void *)(v0 + 336);
    uint64_t v84 = *(void *)(v0 + 328);
    uint64_t v11 = *(void *)(v0 + 304);
    uint64_t v80 = *(void *)(v0 + 312);
    uint64_t v12 = swift_slowAlloc();
    uint64_t v91 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = sub_1AD3E0();
    *(void *)(v0 + 120) = sub_4A278(v13, v14, &v91);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    sub_7F1C0((unint64_t *)&qword_202010, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v15 = sub_1AD2C0();
    *(void *)(v0 + 128) = sub_4A278(v15, v16, &v91);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v10, v11);
    _os_log_impl(&def_342E4, v8, v9, "%s Parsing Input: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
    v17(v89, v84);
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 360);
    uint64_t v19 = *(void *)(v0 + 328);
    uint64_t v20 = *(void *)(v0 + 336);
    sub_7F3F4();
    v21();

    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v17(v18, v19);
  }
  uint64_t v22 = *(void *)(v0 + 256);
  sub_1AB3E0();
  uint64_t v23 = *(unsigned int (**)(uint64_t))(v22 + 88);
  uint64_t v24 = sub_17D6C4();
  if (v23(v24) != enum case for Parse.uso(_:))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 256) + 8))(*(void *)(v0 + 272), *(void *)(v0 + 248));
LABEL_8:
    sub_1AB3E0();
    uint64_t v35 = sub_17D6C4();
    if (v23(v35) != enum case for Parse.directInvocation(_:))
    {
      sub_7F3F4();
      v43();
      sub_1AC7D0();
      sub_15C878();
      sub_E524();
      v44();
      uint64_t v45 = (void *)sub_1AC7F0();
      os_log_type_t v46 = sub_1ACF60();
      if (sub_29300(v46))
      {
        *(_WORD *)swift_slowAlloc() = 0;
        sub_A7FC(&def_342E4, v47, v48, "Received unsupported type of input");
        sub_A1F0();
      }

      uint64_t v49 = sub_14F1BC();
      ((void (*)(uint64_t))v17)(v49);
      goto LABEL_23;
    }
    uint64_t v36 = *(void *)(v0 + 264);
    uint64_t v38 = *(void *)(v0 + 168);
    uint64_t v37 = *(void *)(v0 + 176);
    uint64_t v39 = *(void *)(v0 + 160);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 256) + 96))(v36, *(void *)(v0 + 248));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v37, v36, v39);
    uint64_t v40 = sub_1AB400();
    if (v40)
    {
      sub_19DA50(0xD000000000000012, 0x80000000001B73B0, v40, (_OWORD *)(v0 + 16));
      swift_bridgeObjectRelease();
      if (*(void *)(v0 + 40))
      {
        if (swift_dynamicCast())
        {
          uint64_t v41 = *(void *)(v0 + 144);
          uint64_t v86 = *(unsigned __int8 *)(v0 + 368);
          sub_7F3F4();
          v42();
          uint64_t v87 = *(void *)(v41 + 16);
          swift_bridgeObjectRetain();
          goto LABEL_24;
        }
        goto LABEL_20;
      }
    }
    else
    {
      *(_OWORD *)(v0 + 16) = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    sub_24ED0(v0 + 16, &qword_202BA0);
LABEL_20:
    sub_1AC7D0();
    sub_15C878();
    sub_E524();
    v56();
    uint64_t v57 = (void *)sub_1AC7F0();
    os_log_type_t v58 = sub_1ACF60();
    if (sub_29300(v58))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_A7FC(&def_342E4, v59, v60, "MedUpdateLogStatusStrategy failed to unpack directInvocation, returning nil");
      sub_A1F0();
    }
    uint64_t v62 = *(void *)(v0 + 168);
    uint64_t v61 = *(void *)(v0 + 176);
    uint64_t v63 = *(void *)(v0 + 160);

    uint64_t v64 = sub_14F1BC();
    ((void (*)(uint64_t))v17)(v64);
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
LABEL_23:
    uint64_t v86 = 0;
    uint64_t v87 = 1;
    goto LABEL_24;
  }
  uint64_t v81 = v23;
  uint64_t v83 = v17;
  uint64_t v26 = *(void *)(v0 + 288);
  uint64_t v25 = *(void *)(v0 + 296);
  uint64_t v28 = *(void *)(v0 + 272);
  uint64_t v27 = *(void *)(v0 + 280);
  uint64_t v29 = *(void *)(v0 + 208);
  uint64_t v90 = *(void *)(v0 + 216);
  uint64_t v30 = *(void *)(v0 + 200);
  uint64_t v85 = *(void *)(v0 + 192);
  uint64_t v31 = *(void *)(v0 + 184);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 256) + 96))(v28, *(void *)(v0 + 248));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v25, v28, v27);
  sub_1AB440();
  uint64_t v32 = sub_1AB4A0();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v85);
  sub_C1028(v32, v31);
  swift_bridgeObjectRelease();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v31, 1, v90) == 1)
  {
    uint64_t v33 = *(void *)(v0 + 184);
    sub_7F3F4();
    v34();
    sub_24ED0(v33, &qword_203A20);
    uint64_t v23 = v81;
    uint64_t v17 = v83;
    goto LABEL_8;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 224) + 32))(*(void *)(v0 + 240), *(void *)(v0 + 184), *(void *)(v0 + 216));
  if ((sub_1AB4E0() & 1) == 0)
  {
    uint64_t v67 = *(void *)(v0 + 232);
    uint64_t v68 = *(void *)(v0 + 240);
    uint64_t v69 = *(void *)(v0 + 216);
    uint64_t v70 = *(void *)(v0 + 224);
    char v71 = sub_1AB4F0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v67, v68, v69);
    uint64_t v72 = *(void *)(v0 + 224);
    if (v71)
    {
      uint64_t v73 = *(void (**)(void))(v72 + 8);
      sub_BF118();
      v73();
      sub_BF118();
      v73();
      uint64_t v74 = sub_BF128();
      v75(v74);
    }
    else
    {
      char v76 = sub_1AB500();
      uint64_t v77 = *(void (**)(void))(v72 + 8);
      sub_BF118();
      v77();
      sub_BF118();
      v77();
      uint64_t v78 = sub_BF128();
      v79(v78);
      if ((v76 & 1) == 0)
      {
        uint64_t v87 = *(void *)(*(void *)(v0 + 144) + 16);
        swift_bridgeObjectRetain();
        uint64_t v55 = 2;
        goto LABEL_32;
      }
    }
    uint64_t v87 = *(void *)(*(void *)(v0 + 144) + 16);
    swift_bridgeObjectRetain();
    uint64_t v86 = 0;
    goto LABEL_24;
  }
  uint64_t v51 = *(void *)(v0 + 288);
  uint64_t v50 = *(void *)(v0 + 296);
  uint64_t v52 = *(void *)(v0 + 280);
  uint64_t v53 = *(void *)(v0 + 144);
  sub_7F3F4();
  v54();
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
  uint64_t v87 = *(void *)(v53 + 16);
  swift_bridgeObjectRetain();
  uint64_t v55 = 1;
LABEL_32:
  uint64_t v86 = v55;
LABEL_24:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v65 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v65(v86, v87);
}

uint64_t sub_17B5B8()
{
  sub_E510();
  sub_1AB3F0();
  sub_52C4();
  __chkstk_darwin(v0);
  sub_E548();
  uint64_t v1 = sub_1AC800();
  sub_52C4();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_E548();
  uint64_t v7 = v6 - v5;
  sub_1AC7C0();
  swift_beginAccess();
  uint64_t v22 = v1;
  sub_E524();
  v8();
  sub_E524();
  v9();
  uint64_t v10 = sub_1AC7F0();
  os_log_type_t v11 = sub_1ACF50();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = sub_1AD3E0();
    sub_4A278(v13, v14, &v23);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    sub_7F1C0((unint64_t *)&qword_202010, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v15 = sub_1AD2C0();
    sub_4A278(v15, v16, &v23);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v17 = sub_7F404();
    v18(v17);
    _os_log_impl(&def_342E4, v10, v11, "%s Handling Input: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    uint64_t v19 = sub_7F404();
    v20(v19);
  }

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v22);
  return sub_1AB0B0();
}

uint64_t sub_17B8A0()
{
  sub_A364();
  v1[13] = v2;
  v1[14] = v0;
  v1[12] = v3;
  sub_E510();
  v1[15] = v4;
  uint64_t v5 = sub_1AB0A0();
  v1[16] = v5;
  sub_A19C(v5);
  v1[17] = v6;
  v1[18] = sub_A220();
  v1[19] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v1[20] = v7;
  sub_A19C(v7);
  v1[21] = v8;
  v1[22] = sub_A42C();
  uint64_t v9 = sub_1AC800();
  v1[23] = v9;
  sub_A19C(v9);
  v1[24] = v10;
  v1[25] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_17B9A4()
{
  uint64_t v23 = v0;
  uint64_t v1 = v0;
  uint64_t v4 = v0 + 24;
  uint64_t v3 = v0[24];
  uint64_t v2 = v4[1];
  uint64_t v5 = v1[23];
  uint64_t v6 = sub_1AC7D0();
  sub_15C878();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v5);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = sub_1AC7F0();
  os_log_type_t v8 = sub_1ACF50();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v19 = v1[24];
    uint64_t v20 = v1[23];
    uint64_t v21 = v1[25];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = sub_1AD3E0();
    v1[10] = sub_4A278(v11, v12, &v22);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v1[11] = v13;
    sub_1ACFE0();
    *uint64_t v10 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_342E4, v7, v8, "%s makeErrorResponse called with error: %@", (uint8_t *)v9, 0x16u);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
  }
  else
  {
    uint64_t v15 = v1[24];
    uint64_t v14 = v1[25];
    uint64_t v16 = v1[23];
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  sub_2E38((void *)(v1[14] + 64), *(void *)(v1[14] + 88));
  uint64_t v17 = (void *)swift_task_alloc();
  v1[26] = v17;
  void *v17 = v1;
  v17[1] = sub_17BC88;
  return sub_9D67C();
}

uint64_t sub_17BC88()
{
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 216) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    return v6();
  }
  else
  {
    sub_A4F0();
    return _swift_task_switch(v8, v9, v10);
  }
}

uint64_t sub_17BDC0()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[14];
  sub_1AB090();
  sub_E524();
  v6();
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1AB390();
  id v7 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_E3FC(v5 + 200, (uint64_t)(v0 + 2));
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[6];
  sub_2E38(v0 + 2, v8);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[28] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_17BF58;
  uint64_t v11 = v0[27];
  uint64_t v12 = v0[22];
  uint64_t v13 = v0[12];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v13, v11, v12, v8, v9);
}

uint64_t sub_17BF58()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 232) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_17C038()
{
  sub_A364();
  v1[26] = v2;
  v1[27] = v0;
  uint64_t v3 = sub_1AC800();
  v1[28] = v3;
  sub_A19C(v3);
  v1[29] = v4;
  v1[30] = sub_A42C();
  uint64_t v5 = sub_2694(&qword_202008);
  sub_53D4(v5);
  v1[31] = sub_A42C();
  uint64_t v6 = sub_1AB0A0();
  sub_53D4(v6);
  v1[32] = sub_A42C();
  uint64_t v7 = sub_1AB3D0();
  v1[33] = v7;
  sub_A19C(v7);
  v1[34] = v8;
  v1[35] = sub_A42C();
  uint64_t v9 = sub_2694(&qword_201E28);
  sub_53D4(v9);
  v1[36] = sub_A220();
  v1[37] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_17C168()
{
  uint64_t v1 = v0[27];
  unint64_t v2 = *(void *)(v1 + 16);
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  if (!sub_1AD170()) {
    goto LABEL_8;
  }
LABEL_3:
  sub_4AA30(0, (v2 & 0xC000000000000001) == 0, v2);
  if ((v2 & 0xC000000000000001) != 0) {
    id v4 = (id)sub_1AD0A0();
  }
  else {
    id v4 = *(id *)(v2 + 32);
  }
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  sub_1AA5E8(v5);
  if (v6)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v7 = 1;
LABEL_10:
  uint64_t v8 = v0[37];
  uint64_t v9 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, v7, 1, v9);
  unint64_t v10 = *(void *)(v1 + 16);
  if (!(v10 >> 62))
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_12;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  if (!sub_1AD170()) {
    goto LABEL_17;
  }
LABEL_12:
  sub_4AA30(0, (v10 & 0xC000000000000001) == 0, v10);
  if ((v10 & 0xC000000000000001) != 0) {
    id v12 = (id)sub_1AD0A0();
  }
  else {
    id v12 = *(id *)(v10 + 32);
  }
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  sub_17D4E4(v13);
  if (v14)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v15 = 0;
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v15 = 1;
LABEL_19:
  uint64_t v16 = v0[27];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0[36], v15, 1, v9);
  v0[38] = *(void *)(v16 + 184);
  swift_retain();
  uint64_t v17 = (void *)swift_task_alloc();
  v0[39] = v17;
  void *v17 = v0;
  v17[1] = sub_17C3BC;
  return sub_1A5CB0();
}

uint64_t sub_17C3BC()
{
  sub_E588();
  uint64_t v3 = v2;
  sub_A1B4();
  uint64_t v5 = v4;
  sub_E53C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_E53C();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  else {
    *(void *)(v5 + 320) = v3;
  }
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_17C4D8()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_17C570;
  return sub_7A658(0x6C65636E6163, 0xE600000000000000);
}

uint64_t sub_17C570()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[20] = v0;
  v1[21] = v3;
  v1[22] = v4;
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 336) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_17C644()
{
  sub_A364();
  v0[43] = v0[21];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[44] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_17C6E8;
  return sub_7A658(0x6D7269666E6F63, 0xE700000000000000);
}

uint64_t sub_17C6E8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[23] = v0;
  v1[24] = v3;
  v1[25] = v4;
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 360) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_17C7BC()
{
  unint64_t v1 = *(void *)(v0 + 360);
  unint64_t v3 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v4 = *(void **)(v0 + 320);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 216);
  BOOL v7 = v3 == 0;
  if (!v3) {
    unint64_t v3 = 0xE600000000000000;
  }
  unint64_t v24 = v3;
  if (v7) {
    uint64_t v2 = 0x6C65636E6143;
  }
  uint64_t v23 = v2;
  if (v1) {
    uint64_t v8 = *(void *)(v0 + 192);
  }
  else {
    uint64_t v8 = 0x6D7269666E6F43;
  }
  if (!v1) {
    unint64_t v1 = 0xE700000000000000;
  }
  unint64_t v21 = v1;
  uint64_t v22 = v8;
  *(void *)(v0 + 40) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 48) = sub_45E30();
  *(unsigned char *)(v0 + 16) = 4;
  char v9 = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  sub_1AB080();
  sub_1AB370();
  sub_17D06C();
  uint64_t v10 = sub_1AB190();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, 0, 1, v10);
  sub_1AB3A0();
  sub_1AB3B0();
  sub_1AB390();
  id v11 = [v4 catId];
  sub_1ACDD0();

  sub_1AB380();
  sub_1AB3C0();
  sub_E3FC(v6 + 200, v0 + 56);
  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v13 = *(void *)(v0 + 88);
  sub_2E38((void *)(v0 + 56), v12);
  *(void *)(v0 + 120) = type metadata accessor for WellnessSnippets();
  *(void *)(v0 + 128) = sub_7F1C0((unint64_t *)&qword_202590, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  uint64_t v14 = sub_B5B0((uint64_t *)(v0 + 96));
  *uint64_t v14 = 0xD000000000000031;
  v14[1] = 0x80000000001BAC40;
  v14[2] = v23;
  v14[3] = v24;
  v14[4] = v22;
  v14[5] = v21;
  *((unsigned char *)v14 + 48) = v9 & 1;
  swift_storeEnumTagMultiPayload();
  sub_2694(&qword_202588);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1AF530;
  *(void *)(v15 + 32) = v4;
  uint64_t v25 = v15;
  sub_1ACEF0();
  *(void *)(v0 + 368) = v25;
  id v16 = v4;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 376) = v17;
  void *v17 = v0;
  v17[1] = sub_17CAD0;
  uint64_t v18 = *(void *)(v0 + 280);
  uint64_t v19 = *(void *)(v0 + 208);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v19, v0 + 96, v25, v18, v12, v13);
}

uint64_t sub_17CAD0()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 96;
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_17CBC0()
{
  sub_E588();
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 264);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_24ED0(v2, &qword_201E28);
  sub_24ED0(v1, &qword_201E28);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  sub_7F444();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_7F3CC();
  return v6();
}

uint64_t sub_17CCA4()
{
  sub_E588();
  uint64_t v2 = v0[29];
  uint64_t v1 = v0[30];
  uint64_t v3 = v0[28];
  uint64_t v4 = sub_1AC7D0();
  sub_15C878();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = (void *)sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  if (sub_29300(v6))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_A7FC(&def_342E4, v7, v8, "Couldn't create logMedUpdateToStatusConfirmation_Dialog, returning generic error output.");
    sub_A1F0();
  }

  uint64_t v9 = sub_E570();
  v10(v9);
  sub_17D554();
  v0[48] = swift_allocError();
  id v11 = (void *)swift_task_alloc();
  v0[49] = v11;
  *id v11 = v0;
  v11[1] = sub_17CDFC;
  return sub_17B8A0();
}

uint64_t sub_17CDFC()
{
  sub_A364();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *os_log_type_t v6 = v5;
  *(void *)(v3 + 400) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_17CEE4()
{
  sub_E588();
  uint64_t v1 = *(void *)(v0 + 296);
  sub_24ED0(*(void *)(v0 + 288), &qword_201E28);
  sub_24ED0(v1, &qword_201E28);
  sub_7F444();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_7F3CC();
  return v2();
}

uint64_t sub_17CF90()
{
  uint64_t v1 = *(void *)(v0 + 296);
  sub_24ED0(*(void *)(v0 + 288), &qword_201E28);
  sub_24ED0(v1, &qword_201E28);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v2();
}

uint64_t sub_17D06C()
{
  uint64_t v0 = sub_1AB580();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_E548();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_1AB4D0();
  sub_52C4();
  uint64_t v7 = v6;
  uint64_t v9 = __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - v10;
  sub_1AB4C0();
  sub_1AB570();
  sub_E524();
  v12();
  sub_1AB550();
  sub_1AB180();
  sub_2694(&qword_202000);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1ADCF0;
  sub_E524();
  v13();
  sub_1AB170();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v5);
}

uint64_t sub_17D270()
{
  swift_bridgeObjectRelease();
  sub_E4B8(v0 + 24);
  swift_release();
  swift_release();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 200);
  return v0;
}

uint64_t sub_17D2B0()
{
  sub_17D270();

  return _swift_deallocClassInstance(v0, 240, 7);
}

uint64_t type metadata accessor for MedUpdateLogStatusStrategy()
{
  return self;
}

uint64_t sub_17D30C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_BED5C;
  return sub_17AB5C();
}

uint64_t sub_17D3A4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_E50C;
  return sub_17C038();
}

uint64_t sub_17D43C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_E50C;
  return sub_17B8A0();
}

uint64_t sub_17D4E4(void *a1)
{
  id v2 = [a1 loggedTime];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = sub_1ACDD0();

  return v3;
}

unint64_t sub_17D554()
{
  unint64_t result = qword_208508;
  if (!qword_208508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208508);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MedUpdateLogStatusStrategyError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x17D63CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedUpdateLogStatusStrategyError()
{
  return &type metadata for MedUpdateLogStatusStrategyError;
}

unint64_t sub_17D678()
{
  unint64_t result = qword_208510;
  if (!qword_208510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208510);
  }
  return result;
}

uint64_t sub_17D6C4()
{
  return v0;
}

uint64_t SpecificMedCompletedLogModel.init(medStatus:givenTime:requestedMedName:requestedMedSchedule:dosage:dosageUnit:url:sashBundleID:dontDisplayGranularTime:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:snippetHeaderModel:)@<X0>(char a1@<W0>, uint64_t a2@<X4>, unint64_t a3@<X5>, uint64_t a4@<X6>, char a5@<W7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v24 = sub_2694(&qword_2022C8);
  uint64_t v25 = sub_53D4(v24);
  __chkstk_darwin(v25);
  uint64_t v27 = (int *)sub_181628(v26, v48);
  uint64_t v57 = a6 + v27[8];
  uint64_t v54 = sub_1AAD90();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v57, 1, 1, v54);
  sub_1816B0();
  sub_181654(v28);
  uint64_t v56 = v29;
  uint64_t v53 = v27[14];
  *(unsigned char *)(a6 + v53) = 0;
  uint64_t v52 = v27[15];
  *(unsigned char *)(a6 + v52) = 0;
  uint64_t v30 = (void *)(a6 + v27[16]);
  *uint64_t v30 = 0;
  v30[1] = 0;
  uint64_t v31 = (void *)(a6 + v27[17]);
  *uint64_t v31 = 0;
  v31[1] = 0;
  uint64_t v32 = (void *)(a6 + v27[18]);
  *uint64_t v32 = 0;
  v32[1] = 0;
  uint64_t v33 = a6 + v27[19];
  uint64_t v34 = type metadata accessor for SnippetHeaderModel();
  uint64_t v55 = v33;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v33, 1, 1, v34);
  *(unsigned char *)a6 = a1;
  *(void *)(a6 + 8) = sub_E01C4();
  *(void *)(a6 + 16) = v35;
  sub_181688();
  *(void *)(a6 + 24) = v37;
  *(void *)(a6 + 32) = v36;
  uint64_t v49 = a2;
  *(void *)(a6 + 40) = a2;
  *(void *)(a6 + 48) = a3;
  if (a3) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = a4;
  }
  uint64_t v39 = a6 + v27[9];
  uint64_t v40 = (uint64_t *)(a6 + v27[10]);
  uint64_t v41 = (void *)(a6 + v27[11]);
  *(void *)uint64_t v39 = v38;
  char v42 = (a3 != 0) | a5 & 1;
  *(unsigned char *)(v39 + 8) = v42;
  swift_bridgeObjectRetain();
  *uint64_t v40 = sub_17E5D0(v38, v42);
  v40[1] = v43;
  if (a3)
  {
    swift_bridgeObjectRelease();
    *uint64_t v41 = 0;
    v41[1] = 0;
    uint64_t v44 = v49;
  }
  else
  {
    *uint64_t v41 = a7;
    v41[1] = a8;
    a3 = 0xE900000000000064;
    sub_18169C();
  }
  uint64_t v45 = (void *)(a6 + v27[12]);
  *uint64_t v45 = v44;
  v45[1] = a3;
  sub_17E6E0(a9);
  sub_5B028(a9, &qword_201E20);
  sub_1AABD0();
  sub_20688();
  sub_E558();
  v46();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v58, 0, 1, v54);
  sub_5B0E0(v58, v57, &qword_2022C8);
  swift_bridgeObjectRelease();
  *uint64_t v56 = a10;
  v56[1] = a11;
  *(unsigned char *)(a6 + v53) = a12 & 1;
  *(unsigned char *)(a6 + v52) = a13 & 1;
  swift_bridgeObjectRelease();
  *uint64_t v30 = a14;
  v30[1] = a15;
  swift_bridgeObjectRelease();
  *uint64_t v31 = a16;
  v31[1] = a17;
  swift_bridgeObjectRelease();
  *uint64_t v32 = a18;
  v32[1] = a19;
  return sub_5B0E0(a20, v55, &qword_2022D0);
}

uint64_t type metadata accessor for SpecificMedCompletedLogModel()
{
  uint64_t result = qword_208588;
  if (!qword_208588) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SpecificMedCompletedLogModel.init(medStatus:givenTimeString:requestedMedName:requestedMedSchedule:dosage:dosageUnit:url:sashBundleID:dontDisplayGranularTime:isSmartEnabled:loggedLabel:skippedLabel:takenLabel:snippetHeaderModel:)@<X0>(char a1@<W0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, unint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v26 = sub_2694(&qword_2022C8);
  uint64_t v27 = sub_53D4(v26);
  __chkstk_darwin(v27);
  uint64_t v29 = (int *)sub_181628(v28, v50);
  uint64_t v60 = a7 + v29[8];
  uint64_t v57 = sub_1AAD90();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v60, 1, 1, v57);
  sub_1816B0();
  sub_181654(v30);
  uint64_t v59 = v31;
  uint64_t v56 = v29[14];
  *(unsigned char *)(a7 + v56) = 0;
  uint64_t v55 = v29[15];
  *(unsigned char *)(a7 + v55) = 0;
  uint64_t v32 = (void *)(a7 + v29[16]);
  *uint64_t v32 = 0;
  v32[1] = 0;
  uint64_t v33 = (void *)(a7 + v29[17]);
  *uint64_t v33 = 0;
  v33[1] = 0;
  uint64_t v34 = (void *)(a7 + v29[18]);
  *uint64_t v34 = 0;
  v34[1] = 0;
  uint64_t v35 = a7 + v29[19];
  uint64_t v36 = type metadata accessor for SnippetHeaderModel();
  uint64_t v58 = v35;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v35, 1, 1, v36);
  *(unsigned char *)a7 = a1;
  sub_181688();
  *(void *)(a7 + 8) = v38;
  *(void *)(a7 + 16) = v37;
  *(void *)(a7 + 24) = a2;
  *(void *)(a7 + 32) = a3;
  uint64_t v53 = a4;
  *(void *)(a7 + 40) = a4;
  *(void *)(a7 + 48) = a5;
  unint64_t v39 = a5;
  BOOL v40 = a5 != 0;
  if (a5) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = a6;
  }
  uint64_t v42 = a7 + v29[9];
  uint64_t v43 = (uint64_t *)(a7 + v29[10]);
  uint64_t v44 = (void *)(a7 + v29[11]);
  *(void *)uint64_t v42 = v41;
  char v45 = (v40 | a8) & 1;
  *(unsigned char *)(v42 + 8) = v45;
  swift_bridgeObjectRetain();
  *uint64_t v43 = sub_17E5D0(v41, v45);
  v43[1] = v46;
  if (v39)
  {
    swift_bridgeObjectRelease();
    *uint64_t v44 = 0;
    v44[1] = 0;
    uint64_t v47 = v53;
  }
  else
  {
    *uint64_t v44 = a9;
    v44[1] = a10;
    unint64_t v39 = 0xE900000000000064;
    sub_18169C();
  }
  uint64_t v48 = (void *)(a7 + v29[12]);
  *uint64_t v48 = v47;
  v48[1] = v39;
  sub_17E6E0(a11);
  sub_5B028(a11, &qword_201E20);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v61, 0, 1, v57);
  sub_5B0E0(v61, v60, &qword_2022C8);
  swift_bridgeObjectRelease();
  *uint64_t v59 = a12;
  v59[1] = a13;
  *(unsigned char *)(a7 + v56) = a14 & 1;
  *(unsigned char *)(a7 + v55) = a15 & 1;
  swift_bridgeObjectRelease();
  *uint64_t v32 = a16;
  v32[1] = a17;
  swift_bridgeObjectRelease();
  *uint64_t v33 = a18;
  v33[1] = a19;
  swift_bridgeObjectRelease();
  *uint64_t v34 = a20;
  v34[1] = a21;
  return sub_5B0E0(a22, v58, &qword_2022D0);
}

uint64_t SpecificMedCompletedLogModel.requestedMedName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t SpecificMedCompletedLogModel.requestedMedSchedule.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t SpecificMedCompletedLogModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SpecificMedCompletedLogModel();
  return sub_553FC(v1 + *(int *)(v3 + 32), a1, &qword_2022C8);
}

uint64_t SpecificMedCompletedLogModel.appPunchout.setter()
{
  uint64_t v2 = sub_181590();
  return sub_5B0E0(v0, v1 + *(int *)(v2 + 32), &qword_2022C8);
}

uint64_t (*SpecificMedCompletedLogModel.appPunchout.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SpecificMedCompletedLogModel.dosage.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 36));
}

uint64_t SpecificMedCompletedLogModel.dosage.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for SpecificMedCompletedLogModel();
  uint64_t v6 = v2 + *(int *)(result + 36);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.dosage.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SpecificMedCompletedLogModel.dosageString.getter()
{
  return sub_22F80();
}

uint64_t SpecificMedCompletedLogModel.dosageString.setter()
{
  sub_1815A8();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.dosageString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SpecificMedCompletedLogModel.dosageUnit.getter()
{
  return sub_22F80();
}

uint64_t SpecificMedCompletedLogModel.dosageUnit.setter()
{
  sub_1815A8();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.dosageUnit.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SpecificMedCompletedLogModel.medType.getter()
{
  return sub_22F80();
}

uint64_t SpecificMedCompletedLogModel.medType.setter()
{
  sub_1815A8();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.medType.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SpecificMedCompletedLogModel.sashBundleID.getter()
{
  return sub_22F80();
}

uint64_t SpecificMedCompletedLogModel.sashBundleID.setter()
{
  sub_1815A8();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.sashBundleID.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SpecificMedCompletedLogModel.dontDisplayGranularTime.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 56));
}

uint64_t SpecificMedCompletedLogModel.dontDisplayGranularTime.setter(char a1)
{
  uint64_t result = type metadata accessor for SpecificMedCompletedLogModel();
  *(unsigned char *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.dontDisplayGranularTime.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SpecificMedCompletedLogModel.isSmartEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SpecificMedCompletedLogModel() + 60));
}

uint64_t SpecificMedCompletedLogModel.isSmartEnabled.setter(char a1)
{
  uint64_t result = type metadata accessor for SpecificMedCompletedLogModel();
  *(unsigned char *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.isSmartEnabled.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SpecificMedCompletedLogModel.loggedLabel.getter()
{
  return sub_22F80();
}

uint64_t SpecificMedCompletedLogModel.loggedLabel.setter()
{
  sub_1815A8();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.loggedLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SpecificMedCompletedLogModel.skippedLabel.getter()
{
  return sub_22F80();
}

uint64_t SpecificMedCompletedLogModel.skippedLabel.setter()
{
  sub_1815A8();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.skippedLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SpecificMedCompletedLogModel.takenLabel.getter()
{
  return sub_22F80();
}

uint64_t SpecificMedCompletedLogModel.takenLabel.setter()
{
  sub_1815A8();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SpecificMedCompletedLogModel.takenLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SpecificMedCompletedLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SpecificMedCompletedLogModel();
  return sub_553FC(v1 + *(int *)(v3 + 76), a1, &qword_2022D0);
}

uint64_t SpecificMedCompletedLogModel.snippetHeaderModel.setter()
{
  uint64_t v2 = sub_181590();
  return sub_5B0E0(v0, v1 + *(int *)(v2 + 76), &qword_2022D0);
}

uint64_t (*SpecificMedCompletedLogModel.snippetHeaderModel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t sub_17E5D0(uint64_t result, char a2)
{
  if (a2) {
    return 0;
  }
  uint64_t v2 = result;
  double v3 = trunc(*(double *)&result);
  if (*(double *)&result <= -9.22337204e18 || *(double *)&result >= 9.22337204e18 || v3 != *(double *)&result)
  {
    sub_2694(&qword_205890);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1ADCF0;
    *(void *)(v6 + 56) = &type metadata for Double;
    *(void *)(v6 + 64) = &protocol witness table for Double;
    *(void *)(v6 + 32) = v2;
    uint64_t v7 = sub_1ACDE0();
    swift_bridgeObjectRelease();
    return v7;
  }
  if ((~result & 0x7FF0000000000000) != 0) {
    return sub_1AD2C0();
  }
  __break(1u);
  return result;
}

uint64_t sub_17E6E0(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201E20);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AAB10();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_553FC(a1, (uint64_t)v4, &qword_201E20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_5B028((uint64_t)v4, &qword_201E20);
    return sub_1AAD80();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_1AAAD0();
    sub_1AAD80();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_17E8A8(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x757461745364656DLL && a2 == 0xE900000000000073;
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1701669236 && a2 == 0xE400000000000000;
    if (v6 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x80000000001B7850 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000014 && a2 == 0x80000000001BB3B0 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      BOOL v7 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
      if (v7 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else
      {
        BOOL v8 = a1 == 0x656761736F64 && a2 == 0xE600000000000000;
        if (v8 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else
        {
          BOOL v9 = a1 == 0x7453656761736F64 && a2 == 0xEC000000676E6972;
          if (v9 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else
          {
            BOOL v10 = a1 == 0x6E55656761736F64 && a2 == 0xEA00000000007469;
            if (v10 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 7;
            }
            else
            {
              BOOL v11 = a1 == 0x6570795464656DLL && a2 == 0xE700000000000000;
              if (v11 || (sub_1AD2F0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 8;
              }
              else
              {
                BOOL v12 = a1 == 0x646E754268736173 && a2 == 0xEC0000004449656CLL;
                if (v12 || (sub_1AD2F0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 9;
                }
                else if (a1 == 0xD000000000000017 && a2 == 0x80000000001BC110 || (sub_1AD2F0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 10;
                }
                else
                {
                  BOOL v13 = a1 == 0x457472616D537369 && a2 == 0xEE0064656C62616ELL;
                  if (v13 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 11;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562;
                    if (v14 || (sub_1AD2F0() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 12;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x4C64657070696B73 && a2 == 0xEC0000006C656261;
                      if (v15 || (sub_1AD2F0() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 13;
                      }
                      else
                      {
                        BOOL v16 = a1 == 0x62614C6E656B6174 && a2 == 0xEA00000000006C65;
                        if (v16 || (sub_1AD2F0() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 14;
                        }
                        else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B78B0)
                        {
                          swift_bridgeObjectRelease();
                          return 15;
                        }
                        else
                        {
                          char v17 = sub_1AD2F0();
                          swift_bridgeObjectRelease();
                          if (v17) {
                            return 15;
                          }
                          else {
                            return 16;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

unint64_t sub_17EEC0(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 1701669236;
      break;
    case 2:
      return result;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0x68636E7550707061;
      break;
    case 5:
      unint64_t result = 0x656761736F64;
      break;
    case 6:
      unint64_t result = 0x7453656761736F64;
      break;
    case 7:
      unint64_t result = 0x6E55656761736F64;
      break;
    case 8:
      unint64_t result = 0x6570795464656DLL;
      break;
    case 9:
      unint64_t result = 0x646E754268736173;
      break;
    case 10:
      unint64_t result = 0xD000000000000017;
      break;
    case 11:
      unint64_t result = 0x457472616D537369;
      break;
    case 12:
      unint64_t result = 0x614C646567676F6CLL;
      break;
    case 13:
      unint64_t result = 0x4C64657070696B73;
      break;
    case 14:
      unint64_t result = 0x62614C6E656B6174;
      break;
    case 15:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      unint64_t result = 0x757461745364656DLL;
      break;
  }
  return result;
}

unint64_t sub_17F0D0()
{
  return sub_17EEC0(*v0);
}

uint64_t sub_17F0D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_17E8A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_17F100(uint64_t a1)
{
  unint64_t v2 = sub_17F4A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17F13C(uint64_t a1)
{
  unint64_t v2 = sub_17F4A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SpecificMedCompletedLogModel.encode(to:)(void *a1)
{
  BOOL v3 = v1;
  uint64_t v5 = sub_2694(&qword_208518);
  sub_52C4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_E548();
  uint64_t v11 = v10 - v9;
  sub_2E38(a1, a1[3]);
  sub_17F4A4();
  sub_1AD3B0();
  sub_181608();
  if (!v2)
  {
    sub_1815C4(1);
    sub_22EE8(v3[3], v3[4], 2);
    sub_22EE8(v3[5], v3[6], 3);
    BOOL v12 = (int *)type metadata accessor for SpecificMedCompletedLogModel();
    sub_1AAD90();
    sub_17FCDC(&qword_202BC0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    sub_BCBC0();
    sub_1AD270();
    sub_1AD260();
    sub_7A494(v12[10]);
    sub_1815C4(6);
    uint64_t v13 = sub_7A494(v12[11]);
    sub_22EE8(v13, v14, 7);
    sub_7A494(v12[12]);
    sub_1815C4(8);
    sub_7A494(v12[13]);
    sub_1815C4(9);
    sub_181608();
    sub_181608();
    uint64_t v15 = sub_7A494(v12[16]);
    sub_22EE8(v15, v16, 12);
    uint64_t v17 = sub_7A494(v12[17]);
    sub_22EE8(v17, v18, 13);
    uint64_t v19 = sub_7A494(v12[18]);
    sub_22EE8(v19, v20, 14);
    type metadata accessor for SnippetHeaderModel();
    sub_17FCDC(&qword_202BD0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_BCBC0();
    sub_1AD270();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
}

unint64_t sub_17F4A4()
{
  unint64_t result = qword_208520;
  if (!qword_208520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208520);
  }
  return result;
}

uint64_t SpecificMedCompletedLogModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = sub_2694(&qword_2022D0);
  uint64_t v3 = sub_53D4(v2);
  __chkstk_darwin(v3);
  sub_53E0();
  uint64_t v36 = v4;
  uint64_t v5 = sub_2694(&qword_2022C8);
  uint64_t v6 = sub_53D4(v5);
  __chkstk_darwin(v6);
  sub_53E0();
  uint64_t v38 = v7;
  sub_2694(&qword_208528);
  sub_52C4();
  uint64_t v39 = v8;
  __chkstk_darwin(v8);
  sub_E548();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for SpecificMedCompletedLogModel();
  uint64_t v13 = (int *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_E548();
  uint64_t v16 = v15 - v14;
  *(void *)(v16 + 8) = 0;
  *(void *)(v16 + 16) = 0xE000000000000000;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  uint64_t v48 = v15 - v14 + v13[10];
  uint64_t v37 = sub_1AAD90();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v48, 1, 1, v37);
  uint64_t v17 = v16 + v13[11];
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v18 = (void *)(v16 + v13[12]);
  *uint64_t v18 = 0;
  v18[1] = 0xE000000000000000;
  uint64_t v47 = v18;
  sub_E2D04(v13[13]);
  uint64_t v46 = v19;
  uint64_t v20 = (void *)(v16 + v13[14]);
  *uint64_t v20 = 0;
  v20[1] = 0xE000000000000000;
  char v45 = v20;
  sub_181654(0xD000000000000010);
  uint64_t v21 = v13[16];
  *(unsigned char *)(v16 + v21) = 0;
  uint64_t v22 = v13[17];
  *(unsigned char *)(v16 + v22) = 0;
  sub_E2D04(v13[18]);
  uint64_t v43 = v23;
  uint64_t v44 = v24;
  sub_E2D04(v13[19]);
  uint64_t v42 = v25;
  sub_E2D04(v13[20]);
  uint64_t v41 = v26;
  uint64_t v27 = v16 + v13[21];
  uint64_t v28 = type metadata accessor for SnippetHeaderModel();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v27, 1, 1, v28);
  sub_2E38(a1, a1[3]);
  sub_17F4A4();
  sub_1AD3A0();
  if (v40)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_5B028(v48, &qword_2022C8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_5B028(v27, &qword_2022D0);
  }
  else
  {
    *(unsigned char *)uint64_t v16 = sub_1AD200() & 1;
    *(void *)(v16 + 8) = sub_1816C4(1);
    *(void *)(v16 + 16) = v29;
    *(void *)(v16 + 24) = sub_181664(2);
    *(void *)(v16 + 32) = v30;
    *(void *)(v16 + 40) = sub_181664(3);
    *(void *)(v16 + 48) = v31;
    sub_17FCDC(&qword_202BE0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    sub_1AD1E0();
    sub_5B0E0(v38, v48, &qword_2022C8);
    *(void *)uint64_t v17 = sub_1AD1D0();
    *(unsigned char *)(v17 + 8) = v33 & 1;
    sub_1816C4(6);
    sub_BCB44();
    swift_bridgeObjectRelease();
    *uint64_t v47 = v11;
    v47[1] = v39;
    sub_1815E8(7);
    sub_BCB44();
    swift_bridgeObjectRelease();
    *uint64_t v46 = v11;
    v46[1] = v39;
    sub_1816E4(8);
    sub_BCB44();
    swift_bridgeObjectRelease();
    *char v45 = v11;
    v45[1] = v39;
    sub_1816E4(9);
    sub_BCB44();
    swift_bridgeObjectRelease();
    *uint64_t v44 = v11;
    v44[1] = v39;
    *(unsigned char *)(v16 + v21) = sub_181704(10) & 1;
    *(unsigned char *)(v16 + v22) = sub_181704(11) & 1;
    sub_1815E8(12);
    sub_BCB44();
    swift_bridgeObjectRelease();
    *uint64_t v43 = v11;
    v43[1] = v39;
    sub_1815E8(13);
    sub_BCB44();
    swift_bridgeObjectRelease();
    *uint64_t v42 = v11;
    v42[1] = v39;
    sub_1815E8(14);
    sub_BCB44();
    swift_bridgeObjectRelease();
    *uint64_t v41 = v11;
    v41[1] = v39;
    sub_17FCDC(&qword_202BF0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1AD1E0();
    sub_E558();
    v34();
    sub_5B0E0(v36, v27, &qword_2022D0);
    sub_17FBE8(v16, a2);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
    return sub_180A3C(v16, (void (*)(void))type metadata accessor for SpecificMedCompletedLogModel);
  }
}

uint64_t sub_17FBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpecificMedCompletedLogModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_17FC4C()
{
  return sub_17FCDC(&qword_202248, (void (*)(uint64_t))type metadata accessor for SpecificMedCompletedLogModel);
}

uint64_t sub_17FC94()
{
  return sub_17FCDC(&qword_2020D0, (void (*)(uint64_t))type metadata accessor for SpecificMedCompletedLogModel);
}

uint64_t sub_17FCDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_17FD24@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SpecificMedCompletedLogModel.init(from:)(a1, a2);
}

uint64_t sub_17FD3C(void *a1)
{
  return SpecificMedCompletedLogModel.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for SpecificMedCompletedLogModel(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = a2[4];
    a1[3] = a2[3];
    a1[4] = v8;
    uint64_t v9 = a2[6];
    uint64_t v10 = a3[8];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    a1[5] = a2[5];
    a1[6] = v9;
    uint64_t v13 = sub_1AAD90();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v12, 1, v13))
    {
      uint64_t v14 = sub_2694(&qword_2022C8);
      memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v13);
    }
    uint64_t v16 = a3[9];
    uint64_t v17 = a3[10];
    uint64_t v18 = (char *)v4 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (void *)((char *)v4 + v17);
    uint64_t v21 = (void *)((char *)a2 + v17);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = a3[11];
    uint64_t v24 = a3[12];
    uint64_t v25 = (void *)((char *)v4 + v23);
    uint64_t v26 = (void *)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = (void *)((char *)v4 + v24);
    uint64_t v29 = (void *)((char *)a2 + v24);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = a3[13];
    uint64_t v32 = a3[14];
    char v33 = (void *)((char *)v4 + v31);
    uint64_t v34 = (void *)((char *)a2 + v31);
    uint64_t v35 = v34[1];
    *char v33 = *v34;
    v33[1] = v35;
    *((unsigned char *)v4 + v32) = *((unsigned char *)a2 + v32);
    uint64_t v36 = a3[16];
    *((unsigned char *)v4 + a3[15]) = *((unsigned char *)a2 + a3[15]);
    uint64_t v37 = (void *)((char *)v4 + v36);
    uint64_t v38 = (void *)((char *)a2 + v36);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    uint64_t v40 = a3[17];
    uint64_t v41 = a3[18];
    uint64_t v42 = (void *)((char *)v4 + v40);
    uint64_t v43 = (void *)((char *)a2 + v40);
    uint64_t v44 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v44;
    char v45 = (void *)((char *)v4 + v41);
    uint64_t v46 = (void *)((char *)a2 + v41);
    uint64_t v47 = *v46;
    uint64_t v48 = v46[1];
    uint64_t v49 = a3[19];
    uint64_t v50 = (char *)a2 + v49;
    __dst = (char *)v4 + v49;
    *char v45 = v47;
    v45[1] = v48;
    uint64_t v51 = type metadata accessor for SnippetHeaderModel();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v50, 1, v51))
    {
      uint64_t v52 = sub_2694(&qword_2022D0);
      memcpy(__dst, v50, *(void *)(*(void *)(v52 - 8) + 64));
    }
    else
    {
      uint64_t v53 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(__dst, v50, v53);
      uint64_t v54 = *(int *)(v51 + 20);
      uint64_t v55 = &__dst[v54];
      uint64_t v56 = &v50[v54];
      uint64_t v57 = *((void *)v56 + 1);
      *(void *)uint64_t v55 = *(void *)v56;
      *((void *)v55 + 1) = v57;
      uint64_t v58 = *(int *)(v51 + 24);
      uint64_t v59 = &__dst[v58];
      uint64_t v60 = &v50[v58];
      uint64_t v61 = *((void *)v60 + 1);
      *(void *)uint64_t v59 = *(void *)v60;
      *((void *)v59 + 1) = v61;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dst, 0, 1, v51);
    }
  }
  return v4;
}

uint64_t destroy for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = sub_1AAD90();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 76);
  uint64_t v7 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = sub_1AC1E0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v6, v9);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  uint64_t v12 = sub_1AAD90();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1, v12))
  {
    uint64_t v13 = sub_2694(&qword_2022C8);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0, 1, v12);
  }
  uint64_t v14 = a3[9];
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  uint64_t v18 = (void *)(a1 + v15);
  uint64_t v19 = (void *)(a2 + v15);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[11];
  uint64_t v22 = a3[12];
  uint64_t v23 = (void *)(a1 + v21);
  uint64_t v24 = (void *)(a2 + v21);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = (void *)(a1 + v22);
  uint64_t v27 = (void *)(a2 + v22);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  uint64_t v29 = a3[13];
  uint64_t v30 = a3[14];
  uint64_t v31 = (void *)(a1 + v29);
  uint64_t v32 = (void *)(a2 + v29);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  uint64_t v34 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  uint64_t v37 = v36[1];
  *uint64_t v35 = *v36;
  v35[1] = v37;
  uint64_t v38 = a3[17];
  uint64_t v39 = a3[18];
  uint64_t v40 = (void *)(a1 + v38);
  uint64_t v41 = (void *)(a2 + v38);
  uint64_t v42 = v41[1];
  *uint64_t v40 = *v41;
  v40[1] = v42;
  uint64_t v43 = (void *)(a1 + v39);
  uint64_t v44 = (uint64_t *)(a2 + v39);
  uint64_t v45 = *v44;
  uint64_t v46 = v44[1];
  uint64_t v47 = a3[19];
  uint64_t v48 = (char *)(a2 + v47);
  __dst = (char *)(a1 + v47);
  *uint64_t v43 = v45;
  v43[1] = v46;
  uint64_t v49 = type metadata accessor for SnippetHeaderModel();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v48, 1, v49))
  {
    uint64_t v50 = sub_2694(&qword_2022D0);
    memcpy(__dst, v48, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    uint64_t v51 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))(__dst, v48, v51);
    uint64_t v52 = *(int *)(v49 + 20);
    uint64_t v53 = &__dst[v52];
    uint64_t v54 = &v48[v52];
    uint64_t v55 = *((void *)v54 + 1);
    *(void *)uint64_t v53 = *(void *)v54;
    *((void *)v53 + 1) = v55;
    uint64_t v56 = *(int *)(v49 + 24);
    uint64_t v57 = &__dst[v56];
    uint64_t v58 = &v48[v56];
    uint64_t v59 = *((void *)v58 + 1);
    *(void *)uint64_t v57 = *(void *)v58;
    *((void *)v57 + 1) = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dst, 0, 1, v49);
  }
  return a1;
}

uint64_t assignWithCopy for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[8];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_1AAD90();
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_2694(&qword_2022C8);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[9];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v17 = *v16;
  *(unsigned char *)(v15 + 8) = *((unsigned char *)v16 + 8);
  *(void *)uint64_t v15 = v17;
  uint64_t v18 = a3[10];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[11];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[12];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[13];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  uint64_t v30 = a3[16];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[17];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[18];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (void *)(a2 + v36);
  *uint64_t v37 = *v38;
  v37[1] = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[19];
  uint64_t v40 = (char *)(a1 + v39);
  uint64_t v41 = (char *)(a2 + v39);
  uint64_t v42 = type metadata accessor for SnippetHeaderModel();
  int v43 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v40, 1, v42);
  int v44 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v41, 1, v42);
  if (!v43)
  {
    if (!v44)
    {
      uint64_t v54 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 24))(v40, v41, v54);
      uint64_t v55 = *(int *)(v42 + 20);
      uint64_t v56 = &v40[v55];
      uint64_t v57 = &v41[v55];
      *(void *)uint64_t v56 = *(void *)v57;
      *((void *)v56 + 1) = *((void *)v57 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v58 = *(int *)(v42 + 24);
      uint64_t v59 = &v40[v58];
      uint64_t v60 = &v41[v58];
      *(void *)uint64_t v59 = *(void *)v60;
      *((void *)v59 + 1) = *((void *)v60 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_180A3C((uint64_t)v40, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v44)
  {
LABEL_12:
    uint64_t v52 = sub_2694(&qword_2022D0);
    memcpy(v40, v41, *(void *)(*(void *)(v52 - 8) + 64));
    return a1;
  }
  uint64_t v45 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v40, v41, v45);
  uint64_t v46 = *(int *)(v42 + 20);
  uint64_t v47 = &v40[v46];
  uint64_t v48 = &v41[v46];
  *(void *)uint64_t v47 = *(void *)v48;
  *((void *)v47 + 1) = *((void *)v48 + 1);
  uint64_t v49 = *(int *)(v42 + 24);
  uint64_t v50 = &v40[v49];
  uint64_t v51 = &v41[v49];
  *(void *)uint64_t v50 = *(void *)v51;
  *((void *)v50 + 1) = *((void *)v51 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v40, 0, 1, v42);
  return a1;
}

uint64_t sub_180A3C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  sub_E558();
  v3();
  return a1;
}

uint64_t initializeWithTake for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = a3[8];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[9];
  uint64_t v12 = a3[10];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  uint64_t v15 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  uint64_t v16 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v17 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  uint64_t v19 = a3[18];
  uint64_t v18 = a3[19];
  uint64_t v20 = (char *)(a1 + v18);
  uint64_t v21 = (char *)(a2 + v18);
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  uint64_t v22 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1, v22))
  {
    uint64_t v23 = sub_2694(&qword_2022D0);
    memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v24 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v20, v21, v24);
    *(_OWORD *)&v20[*(int *)(v22 + 20)] = *(_OWORD *)&v21[*(int *)(v22 + 20)];
    *(_OWORD *)&v20[*(int *)(v22 + 24)] = *(_OWORD *)&v21[*(int *)(v22 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v20, 0, 1, v22);
  }
  return a1;
}

uint64_t assignWithTake for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = sub_1AAD90();
  int v13 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1, v12);
  int v14 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1, v12);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)(v12 - 8);
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
LABEL_6:
    uint64_t v16 = sub_2694(&qword_2022C8);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v10, v11, v12);
LABEL_7:
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  uint64_t v21 = (void *)(a1 + v18);
  uint64_t v22 = (uint64_t *)(a2 + v18);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[12];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[13];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (uint64_t *)(a2 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v40) = *(unsigned char *)(a2 + v40);
  uint64_t v41 = a3[16];
  uint64_t v42 = (void *)(a1 + v41);
  int v43 = (uint64_t *)(a2 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  *uint64_t v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[17];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (uint64_t *)(a2 + v46);
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  *uint64_t v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[18];
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = (uint64_t *)(a2 + v51);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  *uint64_t v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[19];
  uint64_t v57 = (char *)(a1 + v56);
  uint64_t v58 = (char *)(a2 + v56);
  uint64_t v59 = type metadata accessor for SnippetHeaderModel();
  int v60 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v57, 1, v59);
  int v61 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v58, 1, v59);
  if (!v60)
  {
    if (!v61)
    {
      uint64_t v65 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 40))(v57, v58, v65);
      uint64_t v66 = *(int *)(v59 + 20);
      uint64_t v67 = &v57[v66];
      uint64_t v68 = &v58[v66];
      uint64_t v70 = *(void *)v68;
      uint64_t v69 = *((void *)v68 + 1);
      *(void *)uint64_t v67 = v70;
      *((void *)v67 + 1) = v69;
      swift_bridgeObjectRelease();
      uint64_t v71 = *(int *)(v59 + 24);
      uint64_t v72 = &v57[v71];
      uint64_t v73 = &v58[v71];
      uint64_t v75 = *(void *)v73;
      uint64_t v74 = *((void *)v73 + 1);
      *(void *)uint64_t v72 = v75;
      *((void *)v72 + 1) = v74;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_180A3C((uint64_t)v57, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v61)
  {
LABEL_12:
    uint64_t v63 = sub_2694(&qword_2022D0);
    memcpy(v57, v58, *(void *)(*(void *)(v63 - 8) + 64));
    return a1;
  }
  uint64_t v62 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 32))(v57, v58, v62);
  *(_OWORD *)&v57[*(int *)(v59 + 20)] = *(_OWORD *)&v58[*(int *)(v59 + 20)];
  *(_OWORD *)&v57[*(int *)(v59 + 24)] = *(_OWORD *)&v58[*(int *)(v59 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v57, 0, 1, v59);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1810E0);
}

uint64_t sub_1810E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_2694(&qword_2022C8);
    sub_52E0();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 32);
    }
    else
    {
      uint64_t v10 = sub_2694(&qword_2022D0);
      uint64_t v11 = *(int *)(a3 + 76);
    }
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SpecificMedCompletedLogModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1811A8);
}

uint64_t sub_1811A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    sub_2694(&qword_2022C8);
    sub_52E0();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 32);
    }
    else
    {
      uint64_t v10 = sub_2694(&qword_2022D0);
      uint64_t v11 = *(int *)(a4 + 76);
    }
    return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_181258()
{
  sub_E29C8(319, &qword_202C60, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  if (v0 <= 0x3F)
  {
    sub_E29C8(319, (unint64_t *)&qword_202C70, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for SpecificMedCompletedLogModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *uint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181468);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpecificMedCompletedLogModel.CodingKeys()
{
  return &type metadata for SpecificMedCompletedLogModel.CodingKeys;
}

unint64_t sub_1814A4()
{
  unint64_t result = qword_2085F8;
  if (!qword_2085F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2085F8);
  }
  return result;
}

unint64_t sub_1814F4()
{
  unint64_t result = qword_208600;
  if (!qword_208600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208600);
  }
  return result;
}

unint64_t sub_181544()
{
  unint64_t result = qword_208608;
  if (!qword_208608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208608);
  }
  return result;
}

uint64_t sub_181590()
{
  return type metadata accessor for SpecificMedCompletedLogModel();
}

uint64_t sub_1815A8()
{
  return type metadata accessor for SpecificMedCompletedLogModel();
}

uint64_t sub_1815C4@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return sub_1AD280();
}

uint64_t sub_1815E8@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return sub_1AD1C0();
}

uint64_t sub_181608()
{
  return sub_1AD290();
}

uint64_t sub_181628@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for SpecificMedCompletedLogModel();
}

void sub_181654(uint64_t a1@<X8>)
{
  *uint64_t v2 = a1;
  v2[1] = (v1 - 32) | 0x8000000000000000;
}

uint64_t sub_181664@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return sub_1AD1C0();
}

uint64_t sub_1816C4@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return sub_1AD1F0();
}

uint64_t sub_1816E4@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return sub_1AD1F0();
}

uint64_t sub_181704@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 65) = a1;
  return sub_1AD200();
}

uint64_t HealthDataLogModel.init(snippetHeaderModel:date:unitLabel:dataValue:url:loggedButtonLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v63 = a8;
  uint64_t v61 = a7;
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v54 = a3;
  int v53 = a6 & 1;
  uint64_t v13 = sub_2694(&qword_2022C8);
  uint64_t v14 = sub_53D4(v13);
  __chkstk_darwin(v14);
  sub_53E0();
  uint64_t v60 = v15;
  uint64_t v16 = sub_2694(&qword_201E28);
  uint64_t v17 = sub_53D4(v16);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v52 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v52 - v20;
  uint64_t v22 = type metadata accessor for SnippetHeaderModel();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a9, 1, 1, v22);
  uint64_t v23 = (int *)type metadata accessor for HealthDataLogModel();
  uint64_t v24 = v23[5];
  *(void *)(a9 + v24) = 0;
  uint64_t v25 = (uint64_t *)(a9 + v23[6]);
  *uint64_t v25 = 0;
  v25[1] = 0;
  uint64_t v26 = (uint64_t *)(a9 + v23[7]);
  *uint64_t v26 = 0;
  v26[1] = 0;
  uint64_t v57 = v26;
  uint64_t v27 = (void *)(a9 + v23[8]);
  *uint64_t v27 = 0;
  v27[1] = 0;
  uint64_t v28 = (uint64_t *)(a9 + v23[9]);
  *uint64_t v28 = 0;
  v28[1] = 0;
  uint64_t v29 = a9 + v23[10];
  uint64_t v58 = sub_1AAD90();
  uint64_t v59 = v29;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v29, 1, 1, v58);
  uint64_t v30 = (void *)(a9 + v23[11]);
  *uint64_t v30 = 0;
  v30[1] = 0;
  uint64_t v62 = a1;
  sub_B8E04(a1, a9);
  *(void *)(a9 + v24) = a2;
  swift_retain();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v32 = v55;
  uint64_t v31 = v56;
  *uint64_t v27 = v54;
  v27[1] = v32;
  uint64_t v33 = sub_B8E6C(v31, v53);
  uint64_t v35 = v34;
  swift_bridgeObjectRelease();
  *uint64_t v28 = v33;
  v28[1] = v35;
  if (!a2) {
    goto LABEL_4;
  }
  swift_retain();
  sub_1AC070();
  swift_release();
  uint64_t v36 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1, v36) == 1)
  {
    sub_2EF0C((uint64_t)v21, &qword_201E28);
LABEL_4:
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    goto LABEL_6;
  }
  uint64_t v39 = sub_1AC1D0();
  uint64_t v41 = v40;
  (*(void (**)(char *, uint64_t))(*(void *)(v36 - 8) + 8))(v21, v36);
  uint64_t v64 = v39;
  uint64_t v65 = v41;
  sub_B4FC();
  uint64_t v37 = sub_1AD000();
  uint64_t v38 = v42;
  swift_bridgeObjectRelease();
LABEL_6:
  swift_bridgeObjectRelease();
  *uint64_t v25 = v37;
  v25[1] = v38;
  uint64_t v43 = *(void *)(a9 + v24);
  if (v43)
  {
    swift_retain();
    uint64_t v44 = (uint64_t)v52;
    sub_1AC080();
    swift_release();
    uint64_t v45 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v44, 1, v45) == 1)
    {
      sub_2EF0C(v44, &qword_201E28);
      uint64_t v46 = 0;
      uint64_t v43 = 0;
    }
    else
    {
      uint64_t v46 = sub_1AC1D0();
      uint64_t v43 = v47;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8))(v44, v45);
    }
  }
  else
  {
    uint64_t v46 = 0;
  }
  uint64_t v48 = v57;
  swift_bridgeObjectRelease();
  *uint64_t v48 = v46;
  v48[1] = v43;
  uint64_t v50 = v60;
  uint64_t v49 = v61;
  sub_18205C(v61);
  swift_release();
  sub_2EF0C(v49, &qword_201E20);
  sub_2EF0C(v62, &qword_2022D0);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v50, 0, 1, v58);
  sub_5B0E0(v50, v59, &qword_2022C8);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v30 = v63;
  v30[1] = a10;
  return result;
}

uint64_t type metadata accessor for HealthDataLogModel()
{
  uint64_t result = qword_208680;
  if (!qword_208680) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t HealthDataLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_553FC(v1, a1, &qword_2022D0);
}

uint64_t HealthDataLogModel.snippetHeaderModel.setter(uint64_t a1)
{
  return sub_5B0E0(a1, v1, &qword_2022D0);
}

uint64_t HealthDataLogModel.date.getter()
{
  type metadata accessor for HealthDataLogModel();

  return swift_retain();
}

uint64_t HealthDataLogModel.date.setter()
{
  uint64_t v2 = *(int *)(sub_1845AC() + 20);
  uint64_t result = swift_release();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*HealthDataLogModel.date.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t HealthDataLogModel.dateLabel.getter()
{
  return sub_22F80();
}

uint64_t HealthDataLogModel.dateLabel.setter()
{
  sub_184590();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*HealthDataLogModel.dateLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t HealthDataLogModel.timeLabel.getter()
{
  return sub_22F80();
}

uint64_t HealthDataLogModel.timeLabel.setter()
{
  sub_184590();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*HealthDataLogModel.timeLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t HealthDataLogModel.unitLabel.getter()
{
  return sub_22F80();
}

uint64_t HealthDataLogModel.unitLabel.setter()
{
  sub_184590();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*HealthDataLogModel.unitLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t HealthDataLogModel.dataLabel.getter()
{
  return sub_22F80();
}

uint64_t HealthDataLogModel.dataLabel.setter()
{
  sub_184590();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*HealthDataLogModel.dataLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t HealthDataLogModel.appPunchout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for HealthDataLogModel();
  return sub_553FC(v1 + *(int *)(v3 + 40), a1, &qword_2022C8);
}

uint64_t HealthDataLogModel.appPunchout.setter()
{
  uint64_t v2 = sub_1845AC();
  return sub_5B0E0(v0, v1 + *(int *)(v2 + 40), &qword_2022C8);
}

uint64_t (*HealthDataLogModel.appPunchout.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t HealthDataLogModel.loggedLabel.getter()
{
  return sub_22F80();
}

uint64_t HealthDataLogModel.loggedLabel.setter()
{
  sub_184590();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*HealthDataLogModel.loggedLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t sub_18205C(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201E20);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AAB10();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_553FC(a1, (uint64_t)v4, &qword_201E20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_2EF0C((uint64_t)v4, &qword_201E20);
    return sub_1AAD80();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_1AAAD0();
    sub_1AAD80();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_182224(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x80000000001B78B0 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = a1 == 1702125924 && a2 == 0xE400000000000000;
    if (v5 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v6 = a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL;
      if (v6 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v7 = a1 == 0x6562614C656D6974 && a2 == 0xE90000000000006CLL;
        if (v7 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v8 = a1 == 0x6562614C74696E75 && a2 == 0xE90000000000006CLL;
          if (v8 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v9 = a1 == 0x6562614C61746164 && a2 == 0xE90000000000006CLL;
            if (v9 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v10 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
              if (v10 || (sub_1AD2F0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else if (a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                char v12 = sub_1AD2F0();
                swift_bridgeObjectRelease();
                if (v12) {
                  return 7;
                }
                else {
                  return 8;
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_182540(char a1)
{
  uint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      return 1702125924;
    case 2:
      unsigned int v3 = 1702125924;
      goto LABEL_7;
    case 3:
      unsigned int v3 = 1701669236;
      goto LABEL_7;
    case 4:
      unsigned int v3 = 1953066613;
      goto LABEL_7;
    case 5:
      unsigned int v3 = 1635017060;
LABEL_7:
      uint64_t result = v3 | 0x6562614C00000000;
      break;
    case 6:
      uint64_t result = 0x68636E7550707061;
      break;
    case 7:
      uint64_t result = 0x614C646567676F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_182630()
{
  return sub_182540(*v0);
}

uint64_t sub_182638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_182224(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_182660(uint64_t a1)
{
  unint64_t v2 = sub_182980();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_18269C(uint64_t a1)
{
  unint64_t v2 = sub_182980();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t HealthDataLogModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2694(&qword_208610);
  sub_52C4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  BOOL v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2E38(a1, a1[3]);
  sub_182980();
  sub_1AD3B0();
  LOBYTE(v24) = 0;
  type metadata accessor for SnippetHeaderModel();
  sub_182FB4(&qword_202BD0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
  sub_1845E4();
  sub_1845C4();
  if (!v2)
  {
    uint64_t v11 = (int *)type metadata accessor for HealthDataLogModel();
    uint64_t v24 = *(void *)(v3 + v11[5]);
    v23[7] = 1;
    sub_1AC100();
    sub_182FB4(&qword_206430, (void (*)(uint64_t))&type metadata accessor for DialogCalendar);
    sub_1845C4();
    uint64_t v12 = sub_7A494(v11[6]);
    sub_E9724(v12, v13, 2);
    uint64_t v14 = sub_7A494(v11[7]);
    sub_E9724(v14, v15, 3);
    uint64_t v16 = sub_7A494(v11[8]);
    sub_E9724(v16, v17, 4);
    uint64_t v18 = sub_7A494(v11[9]);
    sub_E9724(v18, v19, 5);
    LOBYTE(v24) = 6;
    sub_1AAD90();
    sub_182FB4(&qword_202BC0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    sub_1845E4();
    sub_1AD270();
    uint64_t v20 = sub_7A494(v11[11]);
    sub_E9724(v20, v21, 7);
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v5);
}

unint64_t sub_182980()
{
  unint64_t result = qword_208618;
  if (!qword_208618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208618);
  }
  return result;
}

uint64_t HealthDataLogModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v3 = sub_2694(&qword_2022C8);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_53E0();
  uint64_t v52 = v5;
  uint64_t v6 = sub_2694(&qword_2022D0);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_53E0();
  uint64_t v56 = v8;
  uint64_t v57 = sub_2694(&qword_208620);
  sub_52C4();
  uint64_t v55 = v9;
  __chkstk_darwin(v10);
  sub_53E0();
  uint64_t v61 = v11;
  uint64_t v12 = type metadata accessor for HealthDataLogModel();
  uint64_t v13 = (int *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for SnippetHeaderModel();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v15, 1, 1, v54);
  uint64_t v53 = v13[7];
  *(void *)&v15[v53] = 0;
  uint64_t v16 = &v15[v13[8]];
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  uint64_t v17 = &v15[v13[9]];
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  uint64_t v18 = &v15[v13[10]];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  uint64_t v19 = &v15[v13[11]];
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  uint64_t v20 = (uint64_t)&v15[v13[12]];
  uint64_t v21 = sub_1AAD90();
  uint64_t v51 = v20;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v20, 1, 1, v21);
  uint64_t v22 = v13[13];
  uint64_t v59 = v15;
  uint64_t v23 = &v15[v22];
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  uint64_t v24 = a1;
  uint64_t v25 = a1[3];
  uint64_t v58 = v24;
  sub_2E38(v24, v25);
  sub_182980();
  uint64_t v26 = v60;
  sub_1AD3A0();
  if (v26)
  {
    uint64_t v38 = (uint64_t)v58;
    uint64_t v30 = (uint64_t)v59;
  }
  else
  {
    uint64_t v27 = v53;
    uint64_t v60 = v16;
    uint64_t v48 = v18;
    uint64_t v49 = v17;
    uint64_t v46 = v23;
    uint64_t v47 = v19;
    LOBYTE(v63) = 0;
    sub_182FB4(&qword_202BF0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1845E4();
    uint64_t v28 = v56;
    sub_1AD1E0();
    uint64_t v30 = (uint64_t)v59;
    sub_5B0E0(v28, (uint64_t)v59, &qword_2022D0);
    sub_1AC100();
    char v62 = 1;
    sub_182FB4(&qword_206440, (void (*)(uint64_t))&type metadata accessor for DialogCalendar);
    sub_1AD1E0();
    uint64_t v31 = v63;
    swift_release();
    *(void *)(v30 + v27) = v31;
    sub_184558(2);
    sub_1845F0();
    uint64_t v32 = v60;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v32 = v31;
    *((void *)v32 + 1) = v23;
    sub_184558(3);
    sub_1845F0();
    uint64_t v33 = v49;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v33 = v31;
    *((void *)v33 + 1) = v23;
    sub_184558(4);
    sub_1845F0();
    uint64_t v34 = v48;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v34 = v31;
    *((void *)v34 + 1) = v23;
    sub_184558(5);
    sub_1845F0();
    uint64_t v35 = v47;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v35 = v31;
    *((void *)v35 + 1) = v23;
    LOBYTE(v63) = 6;
    sub_182FB4(&qword_202BE0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    sub_1845E4();
    uint64_t v36 = v52;
    sub_1AD1E0();
    sub_5B0E0(v36, v51, &qword_2022C8);
    uint64_t v37 = sub_184558(7);
    uint64_t v38 = (uint64_t)v58;
    uint64_t v39 = v37;
    uint64_t v41 = v40;
    uint64_t v42 = sub_184578();
    v43(v42);
    uint64_t v44 = v46;
    swift_bridgeObjectRelease();
    *uint64_t v44 = v39;
    v44[1] = v41;
    sub_182EC0(v30, v50);
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v38);
  return sub_183ABC(v30, (void (*)(void))type metadata accessor for HealthDataLogModel);
}

uint64_t sub_182EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HealthDataLogModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_182F24()
{
  return sub_182FB4(&qword_202278, (void (*)(uint64_t))type metadata accessor for HealthDataLogModel);
}

uint64_t sub_182F6C()
{
  return sub_182FB4(&qword_202130, (void (*)(uint64_t))type metadata accessor for HealthDataLogModel);
}

uint64_t sub_182FB4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_182FFC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return HealthDataLogModel.init(from:)(a1, a2);
}

uint64_t sub_183014(void *a1)
{
  return HealthDataLogModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for HealthDataLogModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SnippetHeaderModel();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_2022D0);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      uint64_t v10 = sub_1AC1E0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      uint64_t v11 = *(int *)(v7 + 20);
      uint64_t v12 = (uint64_t *)((char *)a1 + v11);
      uint64_t v13 = (uint64_t *)((char *)a2 + v11);
      uint64_t v14 = v13[1];
      void *v12 = *v13;
      v12[1] = v14;
      uint64_t v15 = *(int *)(v7 + 24);
      uint64_t v16 = (uint64_t *)((char *)a1 + v15);
      uint64_t v17 = (uint64_t *)((char *)a2 + v15);
      uint64_t v18 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v19 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    uint64_t v20 = (uint64_t *)((char *)a1 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = a3[7];
    uint64_t v24 = a3[8];
    uint64_t v25 = (uint64_t *)((char *)a1 + v23);
    uint64_t v26 = (uint64_t *)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = (uint64_t *)((char *)a1 + v24);
    uint64_t v29 = (uint64_t *)((char *)a2 + v24);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = a3[9];
    uint64_t v32 = a3[10];
    uint64_t v33 = (uint64_t *)((char *)a1 + v31);
    uint64_t v34 = (uint64_t *)((char *)a2 + v31);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    __dst = (char *)a1 + v32;
    uint64_t v36 = (char *)a2 + v32;
    uint64_t v37 = sub_1AAD90();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v36, 1, v37))
    {
      uint64_t v38 = sub_2694(&qword_2022C8);
      memcpy(__dst, v36, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(__dst, v36, v37);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dst, 0, 1, v37);
    }
    uint64_t v39 = a3[11];
    uint64_t v40 = (uint64_t *)((char *)a1 + v39);
    uint64_t v41 = (uint64_t *)((char *)a2 + v39);
    uint64_t v42 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v42;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for HealthDataLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SnippetHeaderModel();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4))
  {
    uint64_t v5 = sub_1AC1E0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t v7 = sub_1AAD90();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for HealthDataLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022D0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    uint64_t v9 = *(int *)(v6 + 20);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v12;
    uint64_t v13 = *(int *)(v6 + 24);
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)uint64_t v14 = *(void *)v15;
    *((void *)v14 + 1) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v17 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = v20;
  uint64_t v21 = a3[7];
  uint64_t v22 = a3[8];
  uint64_t v23 = &a1[v21];
  uint64_t v24 = &a2[v21];
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = *(void *)v24;
  *((void *)v23 + 1) = v25;
  uint64_t v26 = &a1[v22];
  uint64_t v27 = &a2[v22];
  uint64_t v28 = *((void *)v27 + 1);
  *(void *)uint64_t v26 = *(void *)v27;
  *((void *)v26 + 1) = v28;
  uint64_t v29 = a3[9];
  uint64_t v30 = a3[10];
  uint64_t v31 = &a1[v29];
  uint64_t v32 = &a2[v29];
  uint64_t v33 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = v33;
  __dst = &a1[v30];
  uint64_t v34 = &a2[v30];
  uint64_t v35 = sub_1AAD90();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v34, 1, v35))
  {
    uint64_t v36 = sub_2694(&qword_2022C8);
    memcpy(__dst, v34, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(__dst, v34, v35);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)__dst, 0, 1, v35);
  }
  uint64_t v37 = a3[11];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  uint64_t v40 = *((void *)v39 + 1);
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = v40;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for HealthDataLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      uint64_t v9 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      uint64_t v10 = *(int *)(v6 + 20);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      *(void *)uint64_t v11 = *(void *)v12;
      *((void *)v11 + 1) = *((void *)v12 + 1);
      uint64_t v13 = *(int *)(v6 + 24);
      uint64_t v14 = &a1[v13];
      uint64_t v15 = &a2[v13];
      *(void *)uint64_t v14 = *(void *)v15;
      *((void *)v14 + 1) = *((void *)v15 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    sub_183ABC((uint64_t)a1, (void (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_6:
    uint64_t v16 = sub_2694(&qword_2022D0);
    memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v41 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 24))(a1, a2, v41);
  uint64_t v42 = *(int *)(v6 + 20);
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = *(int *)(v6 + 24);
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + 1) = *((void *)v47 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  uint64_t v17 = a3[6];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = *((void *)v19 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  *((void *)v24 + 1) = *((void *)v25 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[9];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = *((void *)v28 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[10];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  uint64_t v32 = sub_1AAD90();
  int v33 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v30, 1, v32);
  int v34 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v31, 1, v32);
  if (!v33)
  {
    uint64_t v35 = *(void *)(v32 - 8);
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 24))(v30, v31, v32);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v32);
    goto LABEL_12;
  }
  if (v34)
  {
LABEL_12:
    uint64_t v36 = sub_2694(&qword_2022C8);
    memcpy(v30, v31, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v30, 0, 1, v32);
LABEL_13:
  uint64_t v37 = a3[11];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = *((void *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_183ABC(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

char *initializeWithTake for HealthDataLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022D0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
    *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v9 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  uint64_t v11 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = sub_2694(&qword_2022C8);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v14);
  }
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  return a1;
}

char *assignWithTake for HealthDataLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      uint64_t v9 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
      *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    sub_183ABC((uint64_t)a1, (void (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022D0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v45 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 40))(a1, a2, v45);
  uint64_t v46 = *(int *)(v6 + 20);
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  uint64_t v50 = *(void *)v48;
  uint64_t v49 = *((void *)v48 + 1);
  *(void *)uint64_t v47 = v50;
  *((void *)v47 + 1) = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = *(int *)(v6 + 24);
  uint64_t v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  uint64_t v55 = *(void *)v53;
  uint64_t v54 = *((void *)v53 + 1);
  *(void *)uint64_t v52 = v55;
  *((void *)v52 + 1) = v54;
  swift_bridgeObjectRelease();
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = v15;
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v20 = *(void *)v18;
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = v20;
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[8];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v25 = *(void *)v23;
  uint64_t v24 = *((void *)v23 + 1);
  *(void *)uint64_t v22 = v25;
  *((void *)v22 + 1) = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[9];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v30 = *(void *)v28;
  uint64_t v29 = *((void *)v28 + 1);
  *(void *)uint64_t v27 = v30;
  *((void *)v27 + 1) = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[10];
  uint64_t v32 = &a1[v31];
  int v33 = &a2[v31];
  uint64_t v34 = sub_1AAD90();
  int v35 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v32, 1, v34);
  int v36 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v33, 1, v34);
  if (!v35)
  {
    uint64_t v37 = *(void *)(v34 - 8);
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v32, v33, v34);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v34);
    goto LABEL_12;
  }
  if (v36)
  {
LABEL_12:
    uint64_t v38 = sub_2694(&qword_2022C8);
    memcpy(v32, v33, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v32, v33, v34);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v32, 0, 1, v34);
LABEL_13:
  uint64_t v39 = a3[11];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HealthDataLogModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18406C);
}

uint64_t sub_18406C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2694(&qword_2022D0);
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_10:
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
  if (a2 != 2147483646)
  {
    uint64_t v8 = sub_2694(&qword_2022C8);
    uint64_t v9 = a1 + *(int *)(a3 + 40);
    goto LABEL_10;
  }
  unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  int v11 = v10 - 1;
  if (v11 < 0) {
    int v11 = -1;
  }
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for HealthDataLogModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_184144);
}

void sub_184144(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_2694(&qword_2022D0);
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(void *)(a1 + *(int *)(a4 + 20)) = a2;
      return;
    }
    uint64_t v10 = sub_2694(&qword_2022C8);
    uint64_t v11 = a1 + *(int *)(a4 + 40);
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, a2, a2, v10);
}

void sub_1841F8()
{
  sub_184310(319, (unint64_t *)&qword_202C70, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
  if (v0 <= 0x3F)
  {
    sub_184310(319, &qword_202C60, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_184310(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1ACFD0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for HealthDataLogModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x184430);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HealthDataLogModel.CodingKeys()
{
  return &type metadata for HealthDataLogModel.CodingKeys;
}

unint64_t sub_18446C()
{
  unint64_t result = qword_2086D0;
  if (!qword_2086D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2086D0);
  }
  return result;
}

unint64_t sub_1844BC()
{
  unint64_t result = qword_2086D8;
  if (!qword_2086D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2086D8);
  }
  return result;
}

unint64_t sub_18450C()
{
  unint64_t result = qword_2086E0[0];
  if (!qword_2086E0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_2086E0);
  }
  return result;
}

uint64_t sub_184558@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return sub_1AD1C0();
}

uint64_t sub_184578()
{
  return v0;
}

uint64_t sub_184590()
{
  return type metadata accessor for HealthDataLogModel();
}

uint64_t sub_1845AC()
{
  return type metadata accessor for HealthDataLogModel();
}

uint64_t sub_1845C4()
{
  return sub_1AD270();
}

ValueMetadata *type metadata accessor for PunchoutFlow()
{
  return &type metadata for PunchoutFlow;
}

uint64_t sub_18460C()
{
  sub_4BA60();

  return sub_1AAF80();
}

uint64_t sub_184660(uint64_t a1)
{
  v2[111] = v1;
  v2[110] = a1;
  uint64_t v3 = sub_1AC800();
  v2[112] = v3;
  v2[113] = *(void *)(v3 - 8);
  v2[114] = swift_task_alloc();
  return _swift_task_switch(sub_184724, 0, 0);
}

uint64_t sub_184724()
{
  uint64_t v29 = v0;
  uint64_t v1 = v0[111];
  sub_1AC3B0();
  sub_2E38((void *)(v1 + 8), *(void *)(v1 + 32));
  sub_471EC();
  v2();
  sub_2E38(v0 + 86, v0[89]);
  char v3 = sub_1AB040();
  sub_185EF4(v1, (uint64_t)(v0 + 2));
  if (v3)
  {
    sub_4BAAC((uint64_t)(v0 + 2));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 86));
LABEL_4:
    sub_184B64();
    goto LABEL_5;
  }
  sub_2E38(v0 + 3, v0[6]);
  sub_471EC();
  v4();
  sub_2E38(v0 + 96, v0[99]);
  char v5 = sub_1AB030();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 96));
  sub_4BAAC((uint64_t)(v0 + 2));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 86));
  if (v5) {
    goto LABEL_4;
  }
  sub_2E38((void *)(v1 + 8), *(void *)(v1 + 32));
  sub_471EC();
  v8();
  sub_2E38(v0 + 101, v0[104]);
  char v9 = sub_1AB050();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 101));
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = (uint64_t)(v0 + 66);
    uint64_t v11 = v0[114];
    uint64_t v12 = v0[113];
    uint64_t v13 = v0[112];
    uint64_t v14 = v0[111];
    uint64_t v15 = sub_1AC7D0();
    sub_A340();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v15, v13);
    sub_185EF4(v14, (uint64_t)(v0 + 34));
    uint64_t v16 = sub_1AC7F0();
    os_log_type_t v17 = sub_1ACF60();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = v0[114];
    uint64_t v20 = v0[113];
    uint64_t v21 = v0[112];
    if (v18)
    {
      uint64_t v27 = v0[114];
      uint64_t v22 = (uint8_t *)sub_A4B0();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v28 = v26;
      sub_2E38(v0 + 35, v0[38]);
      uint64_t v10 = (uint64_t)(v0 + 66);
      sub_471EC();
      v23();
      sub_2694(&qword_205728);
      uint64_t v24 = sub_1ACE00();
      v0[109] = sub_4A278(v24, v25, &v28);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      sub_4BAAC((uint64_t)(v0 + 34));
      _os_log_impl(&def_342E4, v16, v17, "Failed to execute PunchoutFlow (unsupported device: %s.", v22, 0xCu);
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v27, v21);
    }
    else
    {
      sub_4BAAC((uint64_t)(v0 + 34));

      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    }
    sub_9B48(v0[111] + 88, v10);
    sub_9BA4();
    sub_1AB120();
    sub_9BF0(v10);
    goto LABEL_6;
  }
  sub_1853E4();
LABEL_5:
  sub_1AB130();
  swift_release();
LABEL_6:
  swift_task_dealloc();
  unsigned int v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_184B64()
{
  uint64_t v2 = v0;
  sub_1AC800();
  sub_52C4();
  uint64_t v79 = v4;
  uint64_t v80 = v3;
  __chkstk_darwin(v3);
  sub_A314();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  char v76 = (char *)&v71 - v9;
  uint64_t v75 = sub_1AC3D0();
  sub_20688();
  __chkstk_darwin(v10);
  sub_53E0();
  uint64_t v74 = v11;
  uint64_t v73 = sub_1AC2D0();
  sub_20688();
  __chkstk_darwin(v12);
  sub_53E0();
  uint64_t v72 = v13;
  uint64_t v14 = sub_2694(&qword_201E28);
  uint64_t v15 = sub_53D4(v14);
  __chkstk_darwin(v15);
  os_log_type_t v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_2694(&qword_2030F8);
  uint64_t v19 = sub_53D4(v18);
  __chkstk_darwin(v19);
  sub_A314();
  uint64_t v22 = v20 - v21;
  __chkstk_darwin(v23);
  uint64_t v77 = (uint64_t)&v71 - v24;
  uint64_t v25 = sub_2694(&qword_201E20);
  uint64_t v26 = sub_53D4(v25);
  __chkstk_darwin(v26);
  sub_186050();
  uint64_t v27 = sub_1AAB10();
  sub_52C4();
  uint64_t v29 = v28;
  __chkstk_darwin(v30);
  sub_A314();
  __chkstk_darwin(v31);
  uint64_t v78 = (char *)&v71 - v32;
  __int16 v33 = *(_WORD *)v2;
  sub_19DDB8(*(_WORD *)v2);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v27) == 1)
  {
    sub_5B028(v1, &qword_201E20);
LABEL_5:
    sub_1AC7D0();
    sub_A340();
    uint64_t v35 = v79;
    uint64_t v36 = v80;
    sub_E524();
    v37();
    sub_185EF4(v2, (uint64_t)v83);
    uint64_t v38 = sub_1AC7F0();
    os_log_type_t v39 = sub_1ACF60();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v78 = (char *)v2;
      sub_A4B0();
      uint64_t v82 = sub_5B344();
      *(_DWORD *)uint64_t v35 = 136315138;
      uint64_t v40 = sub_1771BC(v83[0]);
      v81[5] = sub_4A278(v40, v41, &v82);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      sub_4BAAC((uint64_t)v83);
      sub_186034(&def_342E4, v38, v42, "Failed to create deepLink for dataType: %s.");
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v7, v80);
      uint64_t v2 = (uint64_t)v78;
    }
    else
    {
      sub_4BAAC((uint64_t)v83);

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v7, v36);
    }
    sub_9B48(v2 + 88, (uint64_t)v83);
    sub_9BA4();
    uint64_t v43 = sub_1AAF70();
    sub_9BF0((uint64_t)v83);
    return v43;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v78, v1, v27);
  unsigned __int8 v34 = sub_19D5A4(v33);
  if (v34 == 205)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v78, v27);
    goto LABEL_5;
  }
  char v44 = v34;
  uint64_t v45 = sub_2E38((void *)(v2 + 48), *(void *)(v2 + 72));
  sub_18ADDC(*v45);
  sub_2F2B8(v44);
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v46 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v17, 0, 1, v46);
  uint64_t v47 = sub_1AC280();
  uint64_t v71 = v29;
  uint64_t v48 = v77;
  sub_26B1C((uint64_t)v17, v47);
  swift_release();
  swift_release();
  sub_5B028((uint64_t)v17, &qword_201E28);
  uint64_t v49 = (void *)(v2 + 8);
  uint64_t v50 = *(void *)(v2 + 32);
  uint64_t v51 = *(void *)(v2 + 40);
  sub_2E38((void *)(v2 + 8), v50);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v51 + 16))(v83, v50, v51);
  sub_2694(&qword_202588);
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_1B04D0;
  sub_4E000(v48, v22);
  sub_E3FC(v2 + 8, (uint64_t)v81);
  uint64_t v53 = v72;
  sub_1AC2C0();
  sub_D0B0C(&qword_203108, (void (*)(uint64_t))&type metadata accessor for OutputFlow);
  uint64_t v54 = sub_1AAF70();
  sub_185F2C(v53, (void (*)(void))&type metadata accessor for OutputFlow);
  *(void *)(v52 + 32) = v54;
  uint64_t v55 = *(void *)(v2 + 32);
  uint64_t v56 = *(void *)(v2 + 40);
  sub_2E38(v49, v55);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v56 + 16))(v81, v55, v56);
  sub_E524();
  v57();
  uint64_t v58 = v74;
  sub_1AC3C0();
  sub_D0B0C(&qword_203100, (void (*)(uint64_t))&type metadata accessor for AppPunchOutFlow);
  uint64_t v59 = sub_1AAF70();
  sub_185F2C(v58, (void (*)(void))&type metadata accessor for AppPunchOutFlow);
  *(void *)(v52 + 40) = v59;
  v81[0] = v52;
  sub_1ACEF0();
  uint64_t v60 = sub_1AC300();
  swift_allocObject();
  uint64_t v61 = sub_1AC2F0();
  sub_1AC7D0();
  sub_A340();
  uint64_t v63 = v79;
  uint64_t v62 = v80;
  uint64_t v64 = v76;
  sub_E524();
  v65();
  uint64_t v66 = sub_1AC7F0();
  os_log_type_t v67 = sub_1ACF50();
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc();
    uint64_t v75 = v60;
    *(_WORD *)uint64_t v68 = 0;
    _os_log_impl(&def_342E4, v66, v67, "Preparing SequenceFlow for Output and AppPunchOut.", v68, 2u);
    sub_A1F0();
  }

  (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v62);
  v81[0] = v61;
  sub_D0B0C(&qword_203110, (void (*)(uint64_t))&type metadata accessor for SequenceFlow);
  uint64_t v43 = sub_1AAF70();
  sub_5B028(v77, &qword_2030F8);
  sub_E558();
  v69();
  swift_release();
  return v43;
}

uint64_t *sub_1853E4()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_1AC250();
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_186050();
  uint64_t v5 = sub_1AC800();
  sub_52C4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_A314();
  uint64_t v11 = v9 - v10;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v66 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v66 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v66 - v19;
  unsigned __int8 v21 = sub_19D5A4(*(_WORD *)v2);
  if (v21 == 205)
  {
    sub_1AC7D0();
    sub_A340();
    sub_E524();
    v22();
    sub_185EF4(v2, (uint64_t)&v72);
    uint64_t v23 = sub_1AC7F0();
    os_log_type_t v24 = sub_1ACF60();
    if (os_log_type_enabled(v23, v24))
    {
      sub_A4B0();
      v71[0] = sub_5B344();
      uint64_t v68 = (uint8_t *)v7;
      uint64_t v69 = v5;
      *(_DWORD *)uint64_t v1 = 136315138;
      uint64_t v25 = sub_1771BC(v72);
      uint64_t v27 = sub_4A278(v25, v26, v71);
      sub_186020(v27);
      sub_1ACFE0();
      swift_bridgeObjectRelease();
      sub_4BAAC((uint64_t)&v72);
      sub_186034(&def_342E4, v23, v28, "%s does not have a HealthKitIdentifier - cannot launch Watch app.");
      swift_arrayDestroy();
      sub_A1F0();
      sub_A1F0();

      sub_E558();
      v29();
    }
    else
    {
      sub_4BAAC((uint64_t)&v72);

      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
    }
    sub_9B48(v2 + 88, (uint64_t)&v72);
    sub_9BA4();
    sub_1AAF70();
    uint64_t v37 = sub_186080();
    sub_9BF0(v37);
  }
  else
  {
    int v30 = sub_185C00(v21);
    if (v30 == 14)
    {
      sub_1AC7D0();
      sub_A340();
      sub_E524();
      v31();
      sub_185EF4(v2, (uint64_t)&v72);
      uint64_t v32 = sub_1AC7F0();
      os_log_type_t v33 = sub_1ACF60();
      if (os_log_type_enabled(v32, v33))
      {
        sub_A4B0();
        v71[0] = sub_5B344();
        uint64_t v69 = v5;
        *(_DWORD *)uint64_t v1 = 136315138;
        uint64_t v68 = v1 + 4;
        uint64_t v34 = sub_1771BC(v72);
        uint64_t v36 = sub_4A278(v34, v35, v71);
        sub_186020(v36);
        sub_1ACFE0();
        swift_bridgeObjectRelease();
        sub_4BAAC((uint64_t)&v72);
        _os_log_impl(&def_342E4, v32, v33, "Failed to determine watch app for dataType: %s - it's an unsupported datatype on Watch. Returning DataTypePunchoutFlow.", v1, 0xCu);
        swift_arrayDestroy();
        sub_A1F0();
        sub_A1F0();

        (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v69);
      }
      else
      {
        sub_4BAAC((uint64_t)&v72);

        (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v5);
      }
      __int16 v47 = *(_WORD *)v2;
      sub_E3FC(v2 + 8, (uint64_t)v73);
      sub_E3FC(v2 + 48, (uint64_t)v74);
      sub_9B48(v2 + 88, (uint64_t)v75);
      LOWORD(v72) = v47;
      char v76 = 0;
      sub_4E104();
      sub_1AAF70();
      uint64_t v48 = sub_186080();
      sub_D0A60(v48);
    }
    else
    {
      uint64_t v38 = v5;
      LODWORD(v67) = v30;
      char v39 = sub_1AC290();
      sub_1AC7D0();
      if (v39)
      {
        sub_A340();
        sub_18606C();
        v40();
        unint64_t v41 = sub_1AC7F0();
        os_log_type_t v42 = sub_1ACF50();
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v68 = (uint8_t *)v7;
          uint64_t v69 = v38;
          sub_A4B0();
          uint64_t v72 = sub_5B344();
          *(_DWORD *)uint64_t v1 = 136315138;
          uint64_t v66 = v1 + 4;
          uint64_t v43 = sub_1AC2B0();
          v70[0] = sub_4A278(v43, v44, &v72);
          sub_1ACFE0();
          swift_bridgeObjectRelease();
          sub_186034(&def_342E4, v41, v45, "Will punch out to app: %s.");
          swift_arrayDestroy();
          sub_A1F0();
          sub_A1F0();

          sub_E558();
          v46();
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v38);
        }
        uint64_t v58 = *(void *)(v2 + 32);
        uint64_t v57 = *(void *)(v2 + 40);
        sub_2E38((void *)(v2 + 8), v58);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v57 + 24))(v70, v58, v57);
        sub_1AC310();
        sub_185F80();
        sub_1AAF70();
        uint64_t v59 = sub_186080();
        sub_185FCC(v59);
      }
      else
      {
        sub_A340();
        sub_18606C();
        v49();
        sub_185EF4(v2, (uint64_t)&v72);
        uint64_t v50 = sub_1AC7F0();
        os_log_type_t v51 = sub_1ACF60();
        if (os_log_type_enabled(v50, v51))
        {
          uint64_t v68 = (uint8_t *)v7;
          uint64_t v69 = v38;
          uint64_t v52 = (uint8_t *)sub_A4B0();
          v71[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v52 = 136315138;
          os_log_type_t v67 = v52 + 4;
          uint64_t v53 = sub_1771BC(v72);
          uint64_t v55 = sub_4A278(v53, v54, v71);
          sub_186020(v55);
          sub_1ACFE0();
          swift_bridgeObjectRelease();
          sub_4BAAC((uint64_t)&v72);
          _os_log_impl(&def_342E4, v50, v51, "%s doesn't have the appropriate Watch app installed.", v52, 0xCu);
          swift_arrayDestroy();
          sub_A1F0();
          sub_A1F0();

          sub_E558();
          v56();
        }
        else
        {
          sub_4BAAC((uint64_t)&v72);

          (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v38);
        }
        sub_E3FC(v2 + 8, (uint64_t)&v72);
        uint64_t v60 = sub_1AB1C0();
        swift_allocObject();
        uint64_t v61 = sub_1AB1B0();
        v74[2] = v60;
        v74[3] = &protocol witness table for ResponseFactory;
        v73[4] = v61;
        type metadata accessor for WellnessCATsSimple();
        sub_1AC240();
        uint64_t v62 = sub_1AC210();
        type metadata accessor for WellnessCATs();
        sub_1AC240();
        uint64_t v63 = sub_1AC1A0();
        v74[4] = v62;
        v75[0] = v63;
        sub_AD6C4();
        sub_1AAF70();
        uint64_t v64 = sub_186080();
        sub_AD694(v64);
      }
    }
  }
  return &v72;
}

uint64_t sub_185C00(unsigned __int8 a1)
{
  uint64_t v3 = sub_1AC800();
  sub_52C4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 - 69 <= 0x18)
  {
    int v11 = 1 << (a1 - 69);
    if ((v11 & 0x1700000) != 0) {
      return 6;
    }
    if ((v11 & 0x80401) != 0) {
      return 9;
    }
  }
  uint64_t v9 = a1 - 155;
  if (v9 > 0x2C) {
    goto LABEL_11;
  }
  if (((1 << (a1 + 101)) & 0x100020000001) != 0) {
    return 6;
  }
  if (((1 << (a1 + 101)) & 0x100010) != 0) {
    return 2;
  }
  if (v9 == 15) {
    return 0;
  }
LABEL_11:
  if (!a1 || a1 == 4) {
    return 6;
  }
  if (a1 == 60) {
    return 4;
  }
  sub_1AC7D0();
  sub_A340();
  sub_E524();
  v12();
  uint64_t v13 = sub_1AC7F0();
  os_log_type_t v14 = sub_1ACF60();
  if (os_log_type_enabled(v13, v14))
  {
    sub_A4B0();
    uint64_t v19 = sub_5B344();
    *uint64_t v1 = 136315138;
    unint64_t v15 = sub_2F2B8(a1);
    v18[1] = sub_4A278(v15, v16, &v19);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_186034(&def_342E4, v13, v17, "No known watch app for dataType: %s.");
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  return 14;
}

uint64_t sub_185E5C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_4B990;
  return sub_184660(a1);
}

uint64_t sub_185EF4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_185F2C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  sub_E558();
  v3();
  return a1;
}

unint64_t sub_185F80()
{
  unint64_t result = qword_208700;
  if (!qword_208700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208700);
  }
  return result;
}

uint64_t sub_185FCC(uint64_t a1)
{
  return a1;
}

uint64_t sub_186020(uint64_t a1)
{
  *(void *)(v1 + 96) = a1;
  return v1 + 96;
}

void sub_186034(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t sub_186050()
{
  return 0;
}

uint64_t sub_186080()
{
  return v0 + 104;
}

uint64_t sub_18608C()
{
  uint64_t v3 = &type metadata for WellnessFeatureFlagsKey;
  unint64_t v4 = sub_45E30();
  v2[0] = 4;
  char v0 = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v2);
  return v0 & 1;
}

unsigned char *storeEnumTagSinglePayload for WellnessFeatureFlagsKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1861B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WellnessFeatureFlagsKey()
{
  return &type metadata for WellnessFeatureFlagsKey;
}

unint64_t sub_1861EC()
{
  unint64_t result = qword_208708;
  if (!qword_208708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208708);
  }
  return result;
}

const char *sub_186238()
{
  return "SiriWellness";
}

const char *sub_18624C(char a1)
{
  unint64_t result = "wellness_scribe";
  switch(a1)
  {
    case 1:
      unint64_t result = "wellness_medications";
      break;
    case 2:
      unint64_t result = "wellness_serverFallback";
      break;
    case 3:
      unint64_t result = "overrideOnDeviceCheck";
      break;
    case 4:
      unint64_t result = "wellness_smart";
      break;
    default:
      return result;
  }
  return result;
}

const char *sub_1862D8()
{
  return sub_18624C(*v0);
}

ValueMetadata *type metadata accessor for WellnessFeatureFlags()
{
  return &type metadata for WellnessFeatureFlags;
}

uint64_t sub_186308()
{
  return swift_allocObject();
}

uint64_t sub_186318(uint64_t a1)
{
  uint64_t v2 = (int *)type metadata accessor for MainFlow();
  __chkstk_darwin(v2);
  unsigned int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AB420();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v4, a1, v5);
  sub_B13F4((uint64_t *)&v4[v2[5]]);
  unsigned int v6 = (uint64_t *)&v4[v2[6]];
  v6[3] = (uint64_t)&type metadata for WellnessCATProvider;
  v6[4] = (uint64_t)&off_1F9800;
  uint64_t v7 = swift_allocObject();
  *unsigned int v6 = v7;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  sub_B13F8((uint64_t *)&v4[v2[7]]);
  sub_186514();
  uint64_t v8 = sub_1AAF70();
  sub_186564((uint64_t)v4);
  return v8;
}

uint64_t sub_186440()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for WellnessFlowPlugin()
{
  return self;
}

uint64_t sub_186474@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_186308();
  *a1 = result;
  return result;
}

uint64_t sub_1864A8(uint64_t a1)
{
  return sub_186318(a1);
}

uint64_t sub_1864C4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_186514()
{
  unint64_t result = qword_205768;
  if (!qword_205768)
  {
    type metadata accessor for MainFlow();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_205768);
  }
  return result;
}

uint64_t sub_186564(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MainFlow();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for UnsupportedDeviceFlow()
{
  return &type metadata for UnsupportedDeviceFlow;
}

uint64_t sub_1865D0()
{
  sub_B6D74();

  return sub_1AAF80();
}

uint64_t sub_186624()
{
  sub_A364();
  v1[5] = v2;
  v1[6] = v0;
  uint64_t v3 = sub_1AC800();
  v1[7] = v3;
  sub_A19C(v3);
  v1[8] = v4;
  v1[9] = swift_task_alloc();
  uint64_t v5 = sub_1AB0A0();
  v1[10] = v5;
  sub_A19C(v5);
  v1[11] = v6;
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v1[14] = v7;
  sub_A19C(v7);
  v1[15] = v8;
  v1[16] = swift_task_alloc();
  return _swift_task_switch(sub_18673C, 0, 0);
}

uint64_t sub_18673C()
{
  sub_A364();
  sub_2E38((void *)(*(void *)(v0 + 48) + 40), *(void *)(*(void *)(v0 + 48) + 64));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1867D8;
  return sub_9D8FC();
}

uint64_t sub_1867D8(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v8 = sub_1868D8;
  }
  else
  {
    *(void *)(v5 + 144) = a1;
    uint64_t v8 = sub_29690;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_1868D8()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v4 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF60();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&def_342E4, v5, v6, "Failed to get unsupportedDevice pattern result", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[8];
  uint64_t v8 = v0[9];
  uint64_t v10 = v0[7];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  sub_1AB140();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_186A48()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_9A7C;
  return sub_186624();
}

uint64_t GenericButtonSnippet.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _s18WellnessFlowPlugin20GenericButtonSnippetV14_actionHandler33_C4F64AB2145C6C08CB305FFD78E00F710F2UI06ActionH0Vvpfi_0();
  uint64_t v4 = type metadata accessor for GenericButtonSnippet();
  return sub_187418(a1, a2 + *(int *)(v4 + 20), (void (*)(void))type metadata accessor for GenericButtonModel);
}

uint64_t type metadata accessor for GenericButtonSnippet()
{
  uint64_t result = qword_208828;
  if (!qword_208828) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id sub_186B7C()
{
  uint64_t v1 = sub_1AAC20();
  sub_52C4();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_47EB8();
  id v5 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
  type metadata accessor for GenericButtonSnippet();
  uint64_t v6 = type metadata accessor for GenericButtonModel();
  sub_1AAAE0((NSURL *)*(int *)(v6 + 20));
  uint64_t v8 = v7;
  [v5 setPunchOutUri:v7];

  id v9 = v5;
  sub_1AAC10();
  uint64_t v10 = sub_1AABE0();
  uint64_t v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  sub_1949C4(v10, v12, v9);

  return v9;
}

uint64_t GenericButtonSnippet.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  v20[1] = a1;
  v20[0] = sub_1ACC90();
  sub_52C4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_47EB8();
  uint64_t v7 = type metadata accessor for GenericButtonSnippet();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = sub_2694(&qword_201E60);
  sub_52C4();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_187288(v1, (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = swift_allocObject();
  sub_187418((uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, (void (*)(void))type metadata accessor for GenericButtonSnippet);
  v20[4] = v3;
  sub_1ACC00();
  sub_1AC9F0();
  sub_187560();
  sub_1875B4();
  uint64_t v18 = v20[0];
  sub_1ACB90();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v10);
}

uint64_t sub_186EE8()
{
  uint64_t v0 = sub_2694(&qword_208860);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_2694(&qword_208868);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2694(&qword_208870);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1AADD0();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2694(&qword_208878);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1ADCF0;
  uint64_t v14 = sub_1AAE10();
  *(void *)(v13 + 56) = v14;
  *(void *)(v13 + 64) = &protocol witness table for Command;
  unint64_t v15 = sub_B5B0((uint64_t *)(v13 + 32));
  *unint64_t v15 = (uint64_t)sub_186B7C();
  *((unsigned char *)v15 + 8) = 1;
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v15, enum case for Command.aceCommand(_:), v14);
  sub_1AADE0();
  sub_1ACC60();
  uint64_t v16 = sub_1ACD10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v16) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return sub_2EF0C((uint64_t)v8, &qword_208870);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v5, v12, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v5, 0, 1, v9);
    uint64_t v18 = enum case for InteractionType.buttonTapped(_:);
    uint64_t v19 = sub_1ACCB0();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v2, v18, v19);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v2, 0, 1, v19);
    sub_1ACD00();
    sub_2EF0C((uint64_t)v2, &qword_208860);
    sub_2EF0C((uint64_t)v5, &qword_208868);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v8, v16);
  }
}

uint64_t sub_187288(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GenericButtonSnippet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1872EC()
{
  uint64_t v1 = (int *)(type metadata accessor for GenericButtonSnippet() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  sub_1ACC80();
  sub_20688();
  (*(void (**)(uint64_t))(v7 + 8))(v6);
  uint64_t v8 = v6 + v1[7];
  swift_bridgeObjectRelease();
  uint64_t v9 = v8 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
  sub_1AAB10();
  sub_20688();
  (*(void (**)(uint64_t))(v10 + 8))(v9);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_187418(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_20688();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_187478()
{
  type metadata accessor for GenericButtonSnippet();

  return sub_186EE8();
}

uint64_t sub_1874D8@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for GenericButtonSnippet();
  sub_B4FC();
  swift_bridgeObjectRetain();
  uint64_t result = sub_1ACB20();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_187558@<X0>(uint64_t a1@<X8>)
{
  return sub_1874D8(a1);
}

unint64_t sub_187560()
{
  unint64_t result = qword_201E78;
  if (!qword_201E78)
  {
    sub_B464(&qword_201E60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_201E78);
  }
  return result;
}

unint64_t sub_1875B4()
{
  unint64_t result = qword_2087C8;
  if (!qword_2087C8)
  {
    sub_1ACC90();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2087C8);
  }
  return result;
}

uint64_t sub_187604()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for GenericButtonSnippet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1ACC80();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8);
    uint64_t v12 = *((void *)v10 + 1);
    *uint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
    uint64_t v14 = (char *)v9 + v13;
    unint64_t v15 = &v10[v13];
    uint64_t v16 = sub_1AAB10();
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
  }
  return a1;
}

uint64_t destroy for GenericButtonSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1ACC80();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for GenericButtonModel() + 20);
  uint64_t v7 = sub_1AAB10();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t initializeWithCopy for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1ACC80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
  uint64_t v12 = (char *)v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = sub_1AAB10();
  unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1ACC80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
  uint64_t v11 = (char *)v8 + v10;
  uint64_t v12 = (char *)v9 + v10;
  uint64_t v13 = sub_1AAB10();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1ACC80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + v7) = *v9;
  uint64_t v10 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
  uint64_t v11 = v8 + v10;
  uint64_t v12 = (char *)v9 + v10;
  uint64_t v13 = sub_1AAB10();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1ACC80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(type metadata accessor for GenericButtonModel() + 20);
  uint64_t v12 = (char *)v8 + v11;
  uint64_t v13 = (char *)v9 + v11;
  uint64_t v14 = sub_1AAB10();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_187BC4);
}

uint64_t sub_187BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1ACC80();
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for GenericButtonModel();
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for GenericButtonSnippet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_187C54);
}

uint64_t sub_187C54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1ACC80();
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = type metadata accessor for GenericButtonModel();
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, a2, a2, v10);
}

uint64_t sub_187CD8()
{
  uint64_t result = sub_1ACC80();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for GenericButtonModel();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_187DA0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t CycleTrackingLogModel.init(date:loggedLabel:cycleTrackingType:snippetHeaderModel:url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14 = sub_2694(&qword_2022C8);
  uint64_t v15 = sub_53D4(v14);
  __chkstk_darwin(v15);
  sub_55784();
  uint64_t v16 = sub_2694(&qword_201E28);
  uint64_t v17 = sub_53D4(v16);
  __chkstk_darwin(v17);
  sub_18AB74();
  uint64_t v29 = sub_1AAD90();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a8, 1, 1, v29);
  uint64_t v18 = (int *)type metadata accessor for CycleTrackingLogModel();
  uint64_t v19 = (uint64_t *)(a8 + v18[5]);
  *uint64_t v19 = 0;
  v19[1] = 0;
  if (a1)
  {
    sub_1AC070();
    uint64_t v20 = sub_1AC1E0();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, 1, v20) != 1)
    {
      sub_1AC1D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v9, v20);
      sub_B4FC();
      uint64_t v21 = sub_1AD000();
      uint64_t v22 = v23;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_2EF0C(v9, &qword_201E28);
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
LABEL_6:
  swift_bridgeObjectRelease();
  *uint64_t v19 = v21;
  v19[1] = v22;
  os_log_type_t v24 = (void *)(a8 + v18[6]);
  *os_log_type_t v24 = a2;
  v24[1] = a3;
  uint64_t v25 = (void *)(a8 + v18[7]);
  *uint64_t v25 = a4;
  v25[1] = a5;
  sub_553FC(a6, a8 + v18[8], &qword_2022D0);
  sub_553FC(a7, a8 + v18[9], &qword_201E20);
  sub_188290(a7);
  swift_release();
  sub_2EF0C(a7, &qword_201E20);
  sub_2EF0C(a6, &qword_2022D0);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, 0, 1, v29);
  return sub_188458(v8, a8);
}

uint64_t type metadata accessor for CycleTrackingLogModel()
{
  uint64_t result = qword_2088F0;
  if (!qword_2088F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CycleTrackingLogModel.appPunchout.setter(uint64_t a1)
{
  return sub_188458(a1, v1);
}

uint64_t CycleTrackingLogModel.dateLabel.getter()
{
  type metadata accessor for CycleTrackingLogModel();
  sub_2F094();
  return v0;
}

uint64_t CycleTrackingLogModel.dateLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for CycleTrackingLogModel() + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*CycleTrackingLogModel.dateLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t CycleTrackingLogModel.loggedLabel.getter()
{
  type metadata accessor for CycleTrackingLogModel();
  sub_2F094();
  return v0;
}

uint64_t CycleTrackingLogModel.cycleTrackingType.getter()
{
  type metadata accessor for CycleTrackingLogModel();
  sub_2F094();
  return v0;
}

uint64_t CycleTrackingLogModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CycleTrackingLogModel();
  return sub_553FC(v1 + *(int *)(v3 + 32), a1, &qword_2022D0);
}

uint64_t CycleTrackingLogModel.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CycleTrackingLogModel();
  return sub_553FC(v1 + *(int *)(v3 + 36), a1, &qword_201E20);
}

uint64_t sub_188290(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201E20);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AAB10();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_553FC(a1, (uint64_t)v4, &qword_201E20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_2EF0C((uint64_t)v4, &qword_201E20);
    return sub_1AAD80();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_1AAAD0();
    sub_1AAD80();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_188458(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_2022C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1884C0(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL;
    if (v6 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x614C646567676F6CLL && a2 == 0xEB000000006C6562;
      if (v7 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000011 && a2 == 0x80000000001BE060 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B78B0 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else if (a1 == 7107189 && a2 == 0xE300000000000000)
      {
        swift_bridgeObjectRelease();
        return 5;
      }
      else
      {
        char v9 = sub_1AD2F0();
        swift_bridgeObjectRelease();
        if (v9) {
          return 5;
        }
        else {
          return 6;
        }
      }
    }
  }
}

uint64_t sub_18872C()
{
  return 6;
}

unint64_t sub_188734(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6562614C65746164;
      break;
    case 2:
      unint64_t result = 0x614C646567676F6CLL;
      break;
    case 3:
      return result;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 7107189;
      break;
    default:
      unint64_t result = 0x68636E7550707061;
      break;
  }
  return result;
}

unint64_t sub_188810()
{
  return sub_188734(*v0);
}

uint64_t sub_188818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1884C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_188840@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_18872C();
  *a1 = result;
  return result;
}

uint64_t sub_188868(uint64_t a1)
{
  unint64_t v2 = sub_188B90();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1888A4(uint64_t a1)
{
  unint64_t v2 = sub_188B90();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CycleTrackingLogModel.encode(to:)(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_2694(&qword_208880);
  sub_52C4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_2F014();
  sub_2E38(a1, a1[3]);
  sub_188B90();
  sub_1AD3B0();
  v23[1] = 0;
  sub_1AAD90();
  sub_189208(&qword_202BC0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  sub_1AD270();
  if (!v2)
  {
    uint64_t v10 = (int *)type metadata accessor for CycleTrackingLogModel();
    uint64_t v11 = (uint64_t *)(v4 + v10[5]);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    v23[0] = 1;
    sub_2F05C(v12, v13, (uint64_t)v23);
    uint64_t v14 = (uint64_t *)(v4 + v10[6]);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    char v22 = 2;
    sub_2F05C(v15, v16, (uint64_t)&v22);
    uint64_t v17 = (uint64_t *)(v4 + v10[7]);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    char v21 = 3;
    sub_2F05C(v18, v19, (uint64_t)&v21);
    type metadata accessor for SnippetHeaderModel();
    sub_189208(&qword_202BD0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1AD270();
    sub_1AAB10();
    sub_189208(&qword_205780, (void (*)(uint64_t))&type metadata accessor for URL);
    sub_1AD270();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
}

unint64_t sub_188B90()
{
  unint64_t result = qword_208888;
  if (!qword_208888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208888);
  }
  return result;
}

uint64_t CycleTrackingLogModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  v38[0] = a2;
  uint64_t v6 = sub_2694(&qword_201E20);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_55784();
  uint64_t v8 = sub_2694(&qword_2022D0);
  uint64_t v9 = sub_53D4(v8);
  __chkstk_darwin(v9);
  sub_18AB74();
  uint64_t v10 = sub_2694(&qword_2022C8);
  uint64_t v11 = sub_53D4(v10);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2694(&qword_208890);
  sub_52C4();
  v38[1] = v15;
  v38[2] = v14;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for CycleTrackingLogModel();
  sub_20688();
  __chkstk_darwin(v19);
  sub_2F014();
  uint64_t v20 = sub_1AAD90();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v2, 1, 1, v20);
  char v39 = a1;
  uint64_t v40 = (int *)v18;
  char v21 = (uint64_t *)(v2 + *(int *)(v18 + 20));
  *char v21 = 0;
  v21[1] = 0;
  os_log_type_t v42 = v21;
  sub_2E38(a1, a1[3]);
  sub_188B90();
  void v38[3] = (uint64_t)v17;
  uint64_t v22 = v41;
  sub_1AD3A0();
  if (v22)
  {
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v39);
    sub_2EF0C(v2, &qword_2022C8);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v41 = v4;
    char v48 = 0;
    sub_189208(&qword_202BE0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    sub_1AD1E0();
    sub_188458((uint64_t)v13, v2);
    char v47 = 1;
    uint64_t v23 = sub_1AD1C0();
    uint64_t v25 = v24;
    unint64_t v26 = v42;
    swift_bridgeObjectRelease();
    *unint64_t v26 = v23;
    v26[1] = v25;
    char v46 = 2;
    uint64_t v27 = sub_1AD1C0();
    uint64_t v28 = v40;
    uint64_t v29 = (uint64_t *)(v2 + v40[6]);
    *uint64_t v29 = v27;
    v29[1] = v30;
    char v45 = 3;
    uint64_t v31 = sub_1AD1C0();
    uint64_t v32 = (uint64_t *)(v2 + v28[7]);
    *uint64_t v32 = v31;
    v32[1] = v33;
    type metadata accessor for SnippetHeaderModel();
    char v44 = 4;
    sub_189208(&qword_202BF0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    uint64_t v34 = v41;
    sub_18AB50();
    sub_A76E8(v34, v2 + v28[8], &qword_2022D0);
    sub_1AAB10();
    char v43 = 5;
    sub_189208(&qword_205790, (void (*)(uint64_t))&type metadata accessor for URL);
    sub_18AB50();
    uint64_t v35 = sub_18AB38();
    v36(v35);
    sub_A76E8(v3, v2 + v28[9], &qword_201E20);
    sub_189114(v2, v38[0]);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)v39);
    return sub_189E9C(v2, (void (*)(void))type metadata accessor for CycleTrackingLogModel);
  }
}

uint64_t sub_189114(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CycleTrackingLogModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_189178()
{
  return sub_189208(&qword_202298, (void (*)(uint64_t))type metadata accessor for CycleTrackingLogModel);
}

uint64_t sub_1891C0()
{
  return sub_189208(&qword_202170, (void (*)(uint64_t))type metadata accessor for CycleTrackingLogModel);
}

uint64_t sub_189208(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_189250@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CycleTrackingLogModel.init(from:)(a1, a2);
}

uint64_t sub_189268(void *a1)
{
  return CycleTrackingLogModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for CycleTrackingLogModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AAD90();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_2022C8);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (uint64_t *)((char *)a1 + v10);
    uint64_t v13 = (uint64_t *)((char *)a2 + v10);
    uint64_t v14 = v13[1];
    void *v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = (uint64_t *)((char *)a1 + v11);
    uint64_t v16 = (uint64_t *)((char *)a2 + v11);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = a3[7];
    uint64_t v19 = a3[8];
    uint64_t v20 = (uint64_t *)((char *)a1 + v18);
    char v21 = (uint64_t *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = (char *)a1 + v19;
    uint64_t v24 = (char *)a2 + v19;
    uint64_t v25 = type metadata accessor for SnippetHeaderModel();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v25))
    {
      uint64_t v26 = sub_2694(&qword_2022D0);
      memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      uint64_t v27 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v23, v24, v27);
      uint64_t v28 = *(int *)(v25 + 20);
      uint64_t v29 = &v23[v28];
      uint64_t v30 = &v24[v28];
      uint64_t v31 = *((void *)v30 + 1);
      *(void *)uint64_t v29 = *(void *)v30;
      *((void *)v29 + 1) = v31;
      uint64_t v32 = *(int *)(v25 + 24);
      uint64_t v33 = &v23[v32];
      uint64_t v34 = &v24[v32];
      uint64_t v35 = *((void *)v34 + 1);
      *(void *)uint64_t v33 = *(void *)v34;
      *((void *)v33 + 1) = v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0, 1, v25);
    }
    uint64_t v36 = a3[9];
    uint64_t v37 = (char *)a1 + v36;
    uint64_t v38 = (char *)a2 + v36;
    uint64_t v39 = sub_1AAB10();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v38, 1, v39))
    {
      uint64_t v40 = sub_2694(&qword_201E20);
      memcpy(v37, v38, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v37, 0, 1, v39);
    }
  }
  return a1;
}

uint64_t destroy for CycleTrackingLogModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AAD90();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 32);
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v6))
  {
    uint64_t v7 = sub_1AC1E0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = a1 + *(int *)(a2 + 36);
  uint64_t v9 = sub_1AAB10();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, 1, v9);
  if (!result)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
    return v11(v8, v9);
  }
  return result;
}

char *initializeWithCopy for CycleTrackingLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = v12;
  uint64_t v13 = &a1[v9];
  uint64_t v14 = &a2[v9];
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = v15;
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = &a1[v16];
  uint64_t v19 = &a2[v16];
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = v20;
  char v21 = &a1[v17];
  uint64_t v22 = &a2[v17];
  uint64_t v23 = type metadata accessor for SnippetHeaderModel();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v23))
  {
    uint64_t v24 = sub_2694(&qword_2022D0);
    memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v25 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v21, v22, v25);
    uint64_t v26 = *(int *)(v23 + 20);
    uint64_t v27 = &v21[v26];
    uint64_t v28 = &v22[v26];
    uint64_t v29 = *((void *)v28 + 1);
    *(void *)uint64_t v27 = *(void *)v28;
    *((void *)v27 + 1) = v29;
    uint64_t v30 = *(int *)(v23 + 24);
    uint64_t v31 = &v21[v30];
    uint64_t v32 = &v22[v30];
    uint64_t v33 = *((void *)v32 + 1);
    *(void *)uint64_t v31 = *(void *)v32;
    *((void *)v31 + 1) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v23);
  }
  uint64_t v34 = a3[9];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v36, 1, v37))
  {
    uint64_t v38 = sub_2694(&qword_201E20);
    memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v35, 0, 1, v37);
  }
  return a1;
}

char *assignWithCopy for CycleTrackingLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[6];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = *((void *)v19 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  char v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = type metadata accessor for SnippetHeaderModel();
  int v24 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v21, 1, v23);
  int v25 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v23);
  if (v24)
  {
    if (!v25)
    {
      uint64_t v26 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v21, v22, v26);
      uint64_t v27 = *(int *)(v23 + 20);
      uint64_t v28 = &v21[v27];
      uint64_t v29 = &v22[v27];
      *(void *)uint64_t v28 = *(void *)v29;
      *((void *)v28 + 1) = *((void *)v29 + 1);
      uint64_t v30 = *(int *)(v23 + 24);
      uint64_t v31 = &v21[v30];
      uint64_t v32 = &v22[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      *((void *)v31 + 1) = *((void *)v32 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    sub_189E9C((uint64_t)v21, (void (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    uint64_t v33 = sub_2694(&qword_2022D0);
    memcpy(v21, v22, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v43 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 24))(v21, v22, v43);
  uint64_t v44 = *(int *)(v23 + 20);
  char v45 = &v21[v44];
  char v46 = &v22[v44];
  *(void *)char v45 = *(void *)v46;
  *((void *)v45 + 1) = *((void *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = *(int *)(v23 + 24);
  char v48 = &v21[v47];
  uint64_t v49 = &v22[v47];
  *(void *)char v48 = *(void *)v49;
  *((void *)v48 + 1) = *((void *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v34 = a3[9];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = sub_1AAB10();
  int v38 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v35, 1, v37);
  int v39 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v36, 1, v37);
  if (!v38)
  {
    uint64_t v40 = *(void *)(v37 - 8);
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v35, v36, v37);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v35, v37);
    goto LABEL_18;
  }
  if (v39)
  {
LABEL_18:
    uint64_t v41 = sub_2694(&qword_201E20);
    memcpy(v35, v36, *(void *)(*(void *)(v41 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v35, 0, 1, v37);
  return a1;
}

uint64_t sub_189E9C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

char *initializeWithTake for CycleTrackingLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  uint64_t v9 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1, v12))
  {
    uint64_t v13 = sub_2694(&qword_2022D0);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v10, v11, v14);
    *(_OWORD *)&v10[*(int *)(v12 + 20)] = *(_OWORD *)&v11[*(int *)(v12 + 20)];
    *(_OWORD *)&v10[*(int *)(v12 + 24)] = *(_OWORD *)&v11[*(int *)(v12 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v10, 0, 1, v12);
  }
  uint64_t v15 = a3[9];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v17, 1, v18))
  {
    uint64_t v19 = sub_2694(&qword_201E20);
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v16, 0, 1, v18);
  }
  return a1;
}

char *assignWithTake for CycleTrackingLogModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = v15;
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v20 = *(void *)v18;
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = v20;
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[7];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v25 = *(void *)v23;
  uint64_t v24 = *((void *)v23 + 1);
  *(void *)uint64_t v22 = v25;
  *((void *)v22 + 1) = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[8];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = type metadata accessor for SnippetHeaderModel();
  int v30 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v27, 1, v29);
  int v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1, v29);
  if (v30)
  {
    if (!v31)
    {
      uint64_t v32 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v27, v28, v32);
      *(_OWORD *)&v27[*(int *)(v29 + 20)] = *(_OWORD *)&v28[*(int *)(v29 + 20)];
      *(_OWORD *)&v27[*(int *)(v29 + 24)] = *(_OWORD *)&v28[*(int *)(v29 + 24)];
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v27, 0, 1, v29);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    sub_189E9C((uint64_t)v27, (void (*)(void))type metadata accessor for SnippetHeaderModel);
LABEL_12:
    uint64_t v33 = sub_2694(&qword_2022D0);
    memcpy(v27, v28, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v43 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 40))(v27, v28, v43);
  uint64_t v44 = *(int *)(v29 + 20);
  char v45 = &v27[v44];
  char v46 = &v28[v44];
  uint64_t v48 = *(void *)v46;
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)char v45 = v48;
  *((void *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = *(int *)(v29 + 24);
  uint64_t v50 = &v27[v49];
  os_log_type_t v51 = &v28[v49];
  uint64_t v53 = *(void *)v51;
  uint64_t v52 = *((void *)v51 + 1);
  *(void *)uint64_t v50 = v53;
  *((void *)v50 + 1) = v52;
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v34 = a3[9];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = sub_1AAB10();
  int v38 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v35, 1, v37);
  int v39 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v36, 1, v37);
  if (!v38)
  {
    uint64_t v40 = *(void *)(v37 - 8);
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 40))(v35, v36, v37);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v35, v37);
    goto LABEL_18;
  }
  if (v39)
  {
LABEL_18:
    uint64_t v41 = sub_2694(&qword_201E20);
    memcpy(v35, v36, *(void *)(*(void *)(v41 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v35, 0, 1, v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for CycleTrackingLogModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18A5A8);
}

uint64_t sub_18A5A8(uint64_t a1, uint64_t a2, int *a3)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_13:
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
  if (a2 != 2147483646)
  {
    sub_2694(&qword_2022D0);
    sub_52E0();
    if (*(_DWORD *)(v14 + 84) == a2)
    {
      uint64_t v8 = v13;
      uint64_t v15 = a3[8];
    }
    else
    {
      uint64_t v8 = sub_2694(&qword_201E20);
      uint64_t v15 = a3[9];
    }
    uint64_t v9 = a1 + v15;
    goto LABEL_13;
  }
  unint64_t v10 = *(void *)(a1 + a3[5] + 8);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  int v11 = v10 - 1;
  if (v11 < 0) {
    int v11 = -1;
  }
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for CycleTrackingLogModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_18A6AC);
}

void sub_18A6AC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(void *)(a1 + a4[5] + 8) = a2;
      return;
    }
    sub_2694(&qword_2022D0);
    sub_52E0();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[8];
    }
    else
    {
      uint64_t v10 = sub_2694(&qword_201E20);
      uint64_t v14 = a4[9];
    }
    uint64_t v11 = a1 + v14;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, a2, a2, v10);
}

void sub_18A78C()
{
  sub_18A8F0(319, &qword_202C60, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  if (v0 <= 0x3F)
  {
    sub_18A8F0(319, (unint64_t *)&qword_202C70, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F)
    {
      sub_18A8F0(319, (unint64_t *)&unk_205800, (void (*)(uint64_t))&type metadata accessor for URL);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_18A8F0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1ACFD0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for CycleTrackingLogModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AA10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CycleTrackingLogModel.CodingKeys()
{
  return &type metadata for CycleTrackingLogModel.CodingKeys;
}

unint64_t sub_18AA4C()
{
  unint64_t result = qword_208938;
  if (!qword_208938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208938);
  }
  return result;
}

unint64_t sub_18AA9C()
{
  unint64_t result = qword_208940;
  if (!qword_208940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208940);
  }
  return result;
}

unint64_t sub_18AAEC()
{
  unint64_t result = qword_208948[0];
  if (!qword_208948[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_208948);
  }
  return result;
}

uint64_t sub_18AB38()
{
  return v0;
}

uint64_t sub_18AB50()
{
  return sub_1AD1E0();
}

uint64_t destroy for WellnessCATProvider()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for WellnessCATProvider(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for WellnessCATProvider(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for WellnessCATProvider(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_OWORD *assignWithTake for WellnessCATProvider(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for WellnessCATProvider(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 32))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WellnessCATProvider(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WellnessCATProvider()
{
  return &type metadata for WellnessCATProvider;
}

uint64_t sub_18ADDC(uint64_t a1)
{
  uint64_t v2 = sub_1AC250();
  __chkstk_darwin(v2 - 8);
  sub_DBC04();
  if (a1)
  {
    uint64_t v3 = a1;
  }
  else
  {
    type metadata accessor for WellnessCATs();
    sub_1AC240();
    uint64_t v3 = sub_1AC1A0();
  }
  swift_retain();
  return v3;
}

uint64_t sub_18AE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_1AC250();
  __chkstk_darwin(v5 - 8);
  sub_DBC04();
  if (a4)
  {
    uint64_t v6 = a4;
  }
  else
  {
    type metadata accessor for WellnessUnsupportedCATs();
    sub_1AC240();
    uint64_t v6 = sub_1AC1A0();
  }
  swift_retain();
  return v6;
}

uint64_t destroy for InvalidUnitsFlow(uint64_t a1)
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 48);
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for InvalidUnitsFlow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 48, a2 + 48);
  uint64_t v6 = *(void *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v6;
  *(void *)(a1 + 96) = v7;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for InvalidUnitsFlow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  sub_577C((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  sub_577C((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for InvalidUnitsFlow(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

uint64_t assignWithTake for InvalidUnitsFlow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + 48);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InvalidUnitsFlow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 104))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InvalidUnitsFlow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InvalidUnitsFlow()
{
  return &type metadata for InvalidUnitsFlow;
}

uint64_t sub_18B1D4()
{
  sub_A7744();

  return sub_1AAF80();
}

uint64_t sub_18B228()
{
  sub_A364();
  v1[40] = v2;
  v1[41] = v0;
  uint64_t v3 = type metadata accessor for GenericButtonModel();
  v1[42] = v3;
  sub_53D4(v3);
  v1[43] = sub_A42C();
  uint64_t v4 = sub_2694(&qword_201CC8);
  sub_53D4(v4);
  v1[44] = sub_A42C();
  uint64_t v5 = sub_2694(&qword_201E20);
  sub_53D4(v5);
  v1[45] = sub_A42C();
  uint64_t v6 = sub_1AAB10();
  v1[46] = v6;
  sub_A19C(v6);
  v1[47] = v7;
  v1[48] = sub_A42C();
  uint64_t v8 = sub_1AB0A0();
  v1[49] = v8;
  sub_A19C(v8);
  v1[50] = v9;
  v1[51] = swift_task_alloc();
  v1[52] = swift_task_alloc();
  uint64_t v10 = sub_1AB3D0();
  v1[53] = v10;
  sub_A19C(v10);
  v1[54] = v11;
  v1[55] = sub_A42C();
  uint64_t v12 = sub_2694(&qword_201E28);
  sub_53D4(v12);
  v1[56] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_18B3BC()
{
  uint64_t v1 = *(void *)(v0 + 448);
  sub_2F2B8(**(unsigned char **)(v0 + 328));
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 456) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_18B49C;
  return sub_1A5010();
}

uint64_t sub_18B49C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  sub_A304();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v2;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 448);
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v5 + 464) = a1;
  }
  sub_24ED0(v7, &qword_201E28);
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_18B5F4()
{
  uint64_t v1 = (void *)v0[58];
  v0[59] = v1;
  uint64_t v3 = v0[51];
  uint64_t v2 = v0[52];
  uint64_t v4 = v0[49];
  uint64_t v5 = v0[50];
  sub_1AB070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  sub_1AB3C0();
  if (v1)
  {
    id v6 = [v1 catId];
    sub_1ACDD0();
  }
  uint64_t v8 = v0[45];
  uint64_t v7 = v0[46];
  uint64_t v9 = (void *)v0[44];
  uint64_t v10 = (unsigned __int8 *)v0[41];
  sub_1AB380();
  uint64_t v11 = *v10;
  uint64_t v12 = sub_1AAA10();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 1, 1, v12);
  sub_153CEC(v11, v9);
  sub_24ED0((uint64_t)v9, &qword_201CC8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v8, 1, v7) == 1)
  {
    sub_24ED0(v0[45], &qword_201E20);
    goto LABEL_5;
  }
  uint64_t v26 = v0[41];
  (*(void (**)(void, void, void))(v0[47] + 32))(v0[48], v0[45], v0[46]);
  sub_2E38((void *)(v26 + 8), *(void *)(v26 + 32));
  uint64_t v27 = sub_131830();
  v28(v27);
  sub_2E38(v0 + 20, v0[23]);
  char v29 = sub_1AB040();
  sub_18C5DC(v26, (uint64_t)(v0 + 2));
  if (v29)
  {
    sub_A7790((uint64_t)(v0 + 2));
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 20));
    goto LABEL_12;
  }
  sub_2E38(v0 + 3, v0[6]);
  uint64_t v30 = sub_131830();
  v31(v30);
  sub_2E38(v0 + 25, v0[28]);
  uint64_t v11 = sub_1AB030();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 25));
  sub_A7790((uint64_t)(v0 + 2));
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 20));
  if (v11)
  {
LABEL_12:
    uint64_t v32 = v0[47];
    uint64_t v47 = v0[48];
    uint64_t v48 = v1;
    uint64_t v33 = v0[46];
    uint64_t v35 = v0[42];
    uint64_t v34 = (uint64_t *)v0[43];
    uint64_t v36 = v0[41];
    uint64_t v37 = sub_18C614();
    uint64_t v39 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))((char *)v34 + *(int *)(v35 + 20), v47, v33);
    *uint64_t v34 = v37;
    v34[1] = v39;
    sub_E3FC(v36 + 48, (uint64_t)(v0 + 30));
    uint64_t v40 = v0[33];
    uint64_t v41 = v0[34];
    sub_2E38(v0 + 30, v40);
    v0[38] = type metadata accessor for WellnessSnippets();
    v0[39] = sub_24F2C();
    os_log_type_t v42 = sub_B5B0(v0 + 35);
    sub_24F7C((uint64_t)v34, (uint64_t)v42);
    swift_storeEnumTagMultiPayload();
    sub_2694(&qword_202588);
    uint64_t v15 = sub_47CA4();
    *(_OWORD *)(v15 + 16) = xmmword_1AF530;
    if (v48)
    {
      *(void *)(v15 + 32) = v48;
      uint64_t v50 = v15;
      sub_1ACEF0();
      v0[60] = v50;
      id v43 = v48;
      swift_task_alloc();
      sub_250E0();
      v0[61] = v44;
      *uint64_t v44 = v45;
      v44[1] = sub_18BAFC;
      uint64_t v18 = v0[55];
      uint64_t v15 = v0[40];
      uint64_t v16 = v0 + 35;
      uint64_t v17 = v50;
      uint64_t v19 = v40;
      uint64_t v20 = v41;
      return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v15, v16, v17, v18, v19, v20);
    }
LABEL_18:
    __break(1u);
    return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v15, v16, v17, v18, v19, v20);
  }
  (*(void (**)(void, void))(v0[47] + 8))(v0[48], v0[46]);
LABEL_5:
  sub_18C684();
  uint64_t v13 = v0[18];
  uint64_t v14 = v0[19];
  sub_2E38((void *)v11, v13);
  sub_2694(&qword_202588);
  uint64_t v15 = sub_47CA4();
  *(_OWORD *)(v15 + 16) = xmmword_1AF530;
  if (!v1)
  {
    __break(1u);
    goto LABEL_18;
  }
  *(void *)(v15 + 32) = v1;
  uint64_t v49 = v15;
  sub_1ACEF0();
  v0[62] = v49;
  id v21 = v1;
  swift_task_alloc();
  sub_250E0();
  v0[63] = v22;
  *uint64_t v22 = v23;
  v22[1] = sub_18BCF4;
  uint64_t v24 = v0[55];
  uint64_t v25 = v0[40];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v25, v49, v24, v13, v14);
}

uint64_t sub_18BAFC()
{
  sub_A364();
  sub_A1B4();
  uint64_t v2 = v1 + 280;
  uint64_t v3 = *v0;
  sub_A304();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v2);
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_18BBEC()
{
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v1 = *(void *)(v0 + 440);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v5 = *(void *)(v0 + 376);
  uint64_t v4 = *(void *)(v0 + 384);
  uint64_t v6 = *(void *)(v0 + 368);
  uint64_t v7 = *(void *)(v0 + 344);

  sub_24FE0(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 240);
  sub_18C660();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v8();
}

uint64_t sub_18BCF4()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_18BDD8()
{
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v1 = *(void *)(v0 + 440);
  uint64_t v3 = *(void *)(v0 + 424);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 120);
  sub_18C660();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v4();
}

uint64_t sub_18BEB4()
{
  v0[59] = 0;
  uint64_t v2 = v0[51];
  uint64_t v1 = v0[52];
  uint64_t v3 = v0[49];
  uint64_t v4 = v0[50];
  sub_1AB070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  sub_1AB3C0();
  uint64_t v6 = v0[45];
  uint64_t v5 = v0[46];
  uint64_t v7 = (void *)v0[44];
  uint64_t v8 = (unsigned __int8 *)v0[41];
  sub_1AB380();
  uint64_t v9 = *v8;
  uint64_t v10 = sub_1AAA10();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 1, 1, v10);
  sub_153CEC(v9, v7);
  sub_24ED0((uint64_t)v7, &qword_201CC8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v6, 1, v5) != 1)
  {
    uint64_t v11 = (void *)v0[41];
    (*(void (**)(void, void, void))(v0[47] + 32))(v0[48], v0[45], v0[46]);
    uint64_t v12 = v11[4];
    uint64_t v13 = v11[5];
    sub_2E38(v11 + 1, v12);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
    sub_2E38(v0 + 20, v0[23]);
    char v14 = sub_1AB040();
    sub_18C5DC((uint64_t)v11, (uint64_t)(v0 + 2));
    if (v14)
    {
      sub_A7790((uint64_t)(v0 + 2));
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 20));
    }
    else
    {
      uint64_t v15 = v0[6];
      uint64_t v16 = v0[7];
      sub_2E38(v0 + 3, v15);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
      sub_2E38(v0 + 25, v0[28]);
      uint64_t v9 = sub_1AB030();
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 25));
      sub_A7790((uint64_t)(v0 + 2));
      _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 20));
      if ((v9 & 1) == 0)
      {
LABEL_7:
        (*(void (**)(void, void))(v0[47] + 8))(v0[48], v0[46]);
        goto LABEL_8;
      }
    }
    uint64_t v18 = v0[47];
    uint64_t v17 = v0[48];
    uint64_t v19 = v0[46];
    uint64_t v21 = v0[42];
    uint64_t v20 = (uint64_t *)v0[43];
    uint64_t v22 = v0[41];
    uint64_t v23 = sub_18C614();
    uint64_t v25 = v24;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)v20 + *(int *)(v21 + 20), v17, v19);
    *uint64_t v20 = v23;
    v20[1] = v25;
    sub_E3FC(v22 + 48, (uint64_t)(v0 + 30));
    sub_2E38(v0 + 30, v0[33]);
    v0[38] = type metadata accessor for WellnessSnippets();
    v0[39] = sub_24F2C();
    uint64_t v9 = (uint64_t)sub_B5B0(v0 + 35);
    sub_24F7C((uint64_t)v20, v9);
    swift_storeEnumTagMultiPayload();
    sub_2694(&qword_202588);
    sub_47CA4();
    __break(1u);
    goto LABEL_7;
  }
  sub_24ED0(v0[45], &qword_201E20);
LABEL_8:
  sub_18C684();
  sub_2E38((void *)v9, v0[18]);
  sub_2694(&qword_202588);
  uint64_t result = sub_47CA4();
  __break(1u);
  return result;
}

uint64_t sub_18C200()
{
  sub_A364();
  *(void *)(v0 + 104) = v1;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v0 + 112) = v2;
  *uint64_t v2 = v3;
  v2[1] = sub_18C294;
  return sub_18B228();
}

uint64_t sub_18C294()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_18C35C()
{
  sub_E3FC(v0 + 16, v0 + 56);
  uint64_t v1 = swift_allocObject();
  sub_24D80((long long *)(v0 + 56), v1 + 16);
  sub_1AB350();
  sub_1AAE40();
  swift_allocObject();
  *(void *)(v0 + 96) = sub_1AAE30();
  sub_1AB120();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_release();
  sub_E564();
  return v2();
}

uint64_t sub_18C474()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24C20;
  return sub_18C200();
}

uint64_t sub_18C50C()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_18C544()
{
  sub_A364();
  uint64_t v3 = v2;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v5;
  v4[1] = sub_24C20;
  return sub_24B08(v3, v0 + 16);
}

uint64_t sub_18C5DC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_18C614()
{
  return sub_C0D54(0x616548206E65704FLL, 0xEB0000000068746CLL, 0x6C6165486E65706FLL, (void *)0xED00007070416874);
}

uint64_t sub_18C660()
{
  return swift_task_dealloc();
}

uint64_t sub_18C684()
{
  uint64_t v2 = *(void *)(v0 + 328) + 48;
  return sub_E3FC(v2, v0 + 120);
}

uint64_t SleepQueryModel.init(snippetHeaderModel:dateLabel:sleepTypeLabel:dataLabel:avgTimeAsleepLabel:avgTimeInBedLabel:avgTimeAsleep:avgTimeInBed:totalTimeAsleep:totalTimeInBed:url:sleepDuration:avgTimeAsleepData:avgTimeInBedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = sub_2694(&qword_2022C8);
  uint64_t v19 = sub_53D4(v18);
  __chkstk_darwin(v19);
  sub_E548();
  uint64_t v22 = v21 - v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v40 = sub_1AAD90();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a9, 1, 1, v40);
  uint64_t Model = (int *)type metadata accessor for SleepQueryModel();
  uint64_t v39 = a9 + Model[5];
  type metadata accessor for SnippetHeaderModel();
  uint64_t v24 = sub_27AC();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v24, v25, v26, v27);
  uint64_t v28 = (void *)(a9 + Model[6]);
  *uint64_t v28 = 0;
  v28[1] = 0;
  char v29 = (void *)(a9 + Model[7]);
  *char v29 = 0;
  v29[1] = 0;
  uint64_t v30 = (void *)(a9 + Model[8]);
  *uint64_t v30 = 0;
  v30[1] = 0;
  int v31 = (void *)(a9 + Model[9]);
  *int v31 = 0;
  v31[1] = 0;
  uint64_t v32 = (void *)(a9 + Model[10]);
  *uint64_t v32 = 0;
  v32[1] = 0;
  uint64_t v33 = Model[11];
  *(void *)(a9 + v33) = 0;
  uint64_t v34 = Model[12];
  *(void *)(a9 + v34) = 0;
  uint64_t v41 = Model[13];
  *(void *)(a9 + v41) = 0;
  uint64_t v42 = Model[14];
  *(void *)(a9 + v42) = 0;
  uint64_t v35 = (void *)(a9 + Model[15]);
  *uint64_t v35 = 0;
  v35[1] = 0;
  uint64_t v36 = (void *)(a9 + Model[16]);
  *uint64_t v36 = 0;
  v36[1] = 0;
  uint64_t v37 = (void *)(a9 + Model[17]);
  *uint64_t v37 = 0;
  v37[1] = 0;
  sub_18D400(a17);
  sub_2EF0C(a17, &qword_201E20);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v22, 0, 1, v40);
  sub_5B0E0(v22, a9, &qword_2022C8);
  sub_5B0E0(a1, v39, &qword_2022D0);
  swift_bridgeObjectRelease();
  *uint64_t v28 = a2;
  v28[1] = a3;
  swift_bridgeObjectRelease();
  *char v29 = a4;
  v29[1] = a5;
  swift_bridgeObjectRelease();
  *uint64_t v30 = a6;
  v30[1] = a7;
  swift_bridgeObjectRelease();
  *int v31 = a8;
  v31[1] = a10;
  swift_bridgeObjectRelease();
  *uint64_t v32 = a11;
  v32[1] = a12;
  swift_release();
  *(void *)(a9 + v33) = a13;
  swift_release();
  *(void *)(a9 + v34) = a14;
  swift_release();
  *(void *)(a9 + v41) = a15;
  uint64_t result = swift_release();
  *(void *)(a9 + v42) = a16;
  return result;
}

uint64_t type metadata accessor for SleepQueryModel()
{
  uint64_t result = qword_208A00;
  if (!qword_208A00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

Swift::String_optional __swiftcall SleepQueryModel.fetchSleepDuration()()
{
  uint64_t Model = (int *)type metadata accessor for SleepQueryModel();
  if (*(void *)(v0 + Model[11])
    || *(void *)(v0 + Model[12])
    || *(void *)(v0 + Model[13])
    || *(void *)(v0 + Model[14]))
  {
    swift_retain();
    uint64_t v2 = SleepQueryModel.getAbbrHoursMinDialogDuration(duration:)();
    uint64_t v4 = v3;
    swift_release();
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v5 = v2;
  uint64_t v6 = v4;
  result.value._object = v6;
  result.value._countAndFlagsBits = v5;
  return result;
}

uint64_t SleepQueryModel.getAbbrHoursMinDialogDuration(duration:)()
{
  uint64_t v1 = sub_2694(&qword_201E28);
  uint64_t v2 = sub_53D4(v1);
  __chkstk_darwin(v2);
  sub_E548();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = sub_1AC1E0();
  sub_52C4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_2F014();
  sub_1AC110();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v6) == 1)
  {
    sub_2EF0C(v5, &qword_201E28);
    return 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v0, v5, v6);
    uint64_t v10 = sub_1AC1D0();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0, v6);
  }
  return v10;
}

uint64_t SleepQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for SleepQueryModel();
  return sub_553FC(v1 + *(int *)(Model + 20), a1, &qword_2022D0);
}

uint64_t SleepQueryModel.snippetHeaderModel.setter()
{
  uint64_t v2 = sub_19027C();
  return sub_5B0E0(v0, v1 + *(int *)(v2 + 20), &qword_2022D0);
}

uint64_t (*SleepQueryModel.snippetHeaderModel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SleepQueryModel.dateLabel.getter()
{
  return sub_22F80();
}

uint64_t SleepQueryModel.dateLabel.setter()
{
  sub_190294();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SleepQueryModel.dateLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SleepQueryModel.sleepTypeLabel.getter()
{
  return sub_22F80();
}

uint64_t SleepQueryModel.sleepTypeLabel.setter()
{
  sub_190294();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SleepQueryModel.sleepTypeLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SleepQueryModel.dataLabel.getter()
{
  return sub_22F80();
}

uint64_t SleepQueryModel.dataLabel.setter()
{
  sub_190294();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SleepQueryModel.dataLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SleepQueryModel.avgTimeAsleepLabel.getter()
{
  return sub_22F80();
}

uint64_t SleepQueryModel.avgTimeAsleepLabel.setter()
{
  sub_190294();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeAsleepLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SleepQueryModel.avgTimeInBedLabel.getter()
{
  return sub_22F80();
}

uint64_t SleepQueryModel.avgTimeInBedLabel.setter()
{
  sub_190294();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeInBedLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SleepQueryModel.avgTimeAsleep.getter()
{
  type metadata accessor for SleepQueryModel();

  return swift_retain();
}

uint64_t SleepQueryModel.avgTimeAsleep.setter()
{
  uint64_t v2 = *(int *)(sub_19027C() + 44);
  uint64_t result = swift_release();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeAsleep.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SleepQueryModel.avgTimeInBed.getter()
{
  type metadata accessor for SleepQueryModel();

  return swift_retain();
}

uint64_t SleepQueryModel.avgTimeInBed.setter()
{
  uint64_t v2 = *(int *)(sub_19027C() + 48);
  uint64_t result = swift_release();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeInBed.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SleepQueryModel.totalTimeAsleep.getter()
{
  type metadata accessor for SleepQueryModel();

  return swift_retain();
}

uint64_t SleepQueryModel.totalTimeAsleep.setter()
{
  uint64_t v2 = *(int *)(sub_19027C() + 52);
  uint64_t result = swift_release();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*SleepQueryModel.totalTimeAsleep.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SleepQueryModel.totalTimeInBed.getter()
{
  type metadata accessor for SleepQueryModel();

  return swift_retain();
}

uint64_t SleepQueryModel.totalTimeInBed.setter()
{
  uint64_t v2 = *(int *)(sub_19027C() + 56);
  uint64_t result = swift_release();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*SleepQueryModel.totalTimeInBed.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SleepQueryModel.sleepDuration.getter()
{
  return sub_22F80();
}

uint64_t SleepQueryModel.sleepDuration.setter()
{
  sub_190294();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SleepQueryModel.sleepDuration.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SleepQueryModel.avgTimeAsleepData.getter()
{
  return sub_22F80();
}

uint64_t SleepQueryModel.avgTimeAsleepData.setter()
{
  sub_190294();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeAsleepData.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t SleepQueryModel.avgTimeInBedData.getter()
{
  return sub_22F80();
}

uint64_t SleepQueryModel.avgTimeInBedData.setter()
{
  sub_190294();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SleepQueryModel.avgTimeInBedData.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t sub_18D400(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201E20);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AAB10();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_553FC(a1, (uint64_t)v4, &qword_201E20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_2EF0C((uint64_t)v4, &qword_201E20);
    return sub_1AAD80();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_1AAAD0();
    sub_1AAD80();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_18D5C8(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B78B0 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    BOOL v6 = a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL;
    if (v6 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 0x7079547065656C73 && a2 == 0xEE006C6562614C65;
      if (v7 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x6562614C61746164 && a2 == 0xE90000000000006CLL;
        if (v8 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else if (a1 == 0xD000000000000012 && a2 == 0x80000000001BE080 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else if (a1 == 0xD000000000000011 && a2 == 0x80000000001BE0A0 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 6;
        }
        else
        {
          BOOL v9 = a1 == 0x41656D6954677661 && a2 == 0xED00007065656C73;
          if (v9 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 7;
          }
          else
          {
            BOOL v10 = a1 == 0x49656D6954677661 && a2 == 0xEC0000006465426ELL;
            if (v10 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 8;
            }
            else
            {
              BOOL v11 = a1 == 0x6D69546C61746F74 && a2 == 0xEF7065656C734165;
              if (v11 || (sub_1AD2F0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 9;
              }
              else
              {
                BOOL v12 = a1 == 0x6D69546C61746F74 && a2 == 0xEE006465426E4965;
                if (v12 || (sub_1AD2F0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 10;
                }
                else
                {
                  BOOL v13 = a1 == 0x7275447065656C73 && a2 == 0xED00006E6F697461;
                  if (v13 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 11;
                  }
                  else if (a1 == 0xD000000000000011 && a2 == 0x80000000001BE0C0 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 12;
                  }
                  else if (a1 == 0xD000000000000010 && a2 == 0x80000000001BE0E0)
                  {
                    swift_bridgeObjectRelease();
                    return 13;
                  }
                  else
                  {
                    char v14 = sub_1AD2F0();
                    swift_bridgeObjectRelease();
                    if (v14) {
                      return 13;
                    }
                    else {
                      return 14;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_18DB5C()
{
  return 14;
}

uint64_t sub_18DB64(char a1)
{
  uint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      return result;
    case 2:
      unsigned int v3 = 1702125924;
      goto LABEL_6;
    case 3:
      uint64_t result = 0x7079547065656C73;
      break;
    case 4:
      unsigned int v3 = 1635017060;
LABEL_6:
      uint64_t result = v3 | 0x6562614C00000000;
      break;
    case 5:
      uint64_t result = 0xD000000000000012;
      break;
    case 6:
    case 12:
      uint64_t result = 0xD000000000000011;
      break;
    case 7:
      uint64_t result = 0x41656D6954677661;
      break;
    case 8:
      uint64_t result = 0x49656D6954677661;
      break;
    case 9:
    case 10:
      uint64_t result = 0x6D69546C61746F74;
      break;
    case 11:
      uint64_t result = 0x7275447065656C73;
      break;
    case 13:
      uint64_t result = 0xD000000000000010;
      break;
    default:
      uint64_t result = 0x68636E7550707061;
      break;
  }
  return result;
}

uint64_t sub_18DD3C()
{
  return sub_18DB64(*v0);
}

uint64_t sub_18DD44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_18D5C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18DD6C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_18DB5C();
  *a1 = result;
  return result;
}

uint64_t sub_18DD94(uint64_t a1)
{
  unint64_t v2 = sub_18E14C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_18DDD0(uint64_t a1)
{
  unint64_t v2 = sub_18E14C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SleepQueryModel.encode(to:)(void *a1)
{
  uint64_t v4 = sub_2694(&qword_208980);
  sub_52C4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_2F014();
  sub_2E38(a1, a1[3]);
  sub_18E14C();
  sub_1AD3B0();
  sub_1AAD90();
  sub_18E958(&qword_202BC0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  sub_1845E4();
  sub_1AD270();
  if (!v1)
  {
    uint64_t Model = (int *)type metadata accessor for SleepQueryModel();
    type metadata accessor for SnippetHeaderModel();
    sub_18E958(&qword_202BD0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1845E4();
    sub_1AD270();
    uint64_t v9 = sub_7A494(Model[6]);
    sub_E9724(v9, v10, 2);
    uint64_t v11 = sub_7A494(Model[7]);
    sub_E9724(v11, v12, 3);
    uint64_t v13 = sub_7A494(Model[8]);
    sub_E9724(v13, v14, 4);
    uint64_t v15 = sub_7A494(Model[9]);
    sub_E9724(v15, v16, 5);
    uint64_t v17 = sub_7A494(Model[10]);
    sub_E9724(v17, v18, 6);
    sub_190334(Model[11]);
    sub_1AC160();
    sub_18E958(&qword_208990, (void (*)(uint64_t))&type metadata accessor for DialogDuration);
    sub_190250();
    sub_190334(Model[12]);
    sub_190250();
    sub_190334(Model[13]);
    sub_190250();
    sub_190334(Model[14]);
    sub_190250();
    uint64_t v19 = sub_7A494(Model[15]);
    sub_E9724(v19, v20, 11);
    uint64_t v21 = sub_7A494(Model[16]);
    sub_E9724(v21, v22, 12);
    uint64_t v23 = sub_7A494(Model[17]);
    sub_E9724(v23, v24, 13);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

unint64_t sub_18E14C()
{
  unint64_t result = qword_208988;
  if (!qword_208988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208988);
  }
  return result;
}

uint64_t SleepQueryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_2694(&qword_2022D0);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_53E0();
  uint64_t v48 = v5;
  uint64_t v6 = sub_2694(&qword_2022C8);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_53E0();
  uint64_t v49 = v8;
  sub_2694(&qword_208998);
  sub_52C4();
  uint64_t v50 = v9;
  uint64_t v51 = v10;
  __chkstk_darwin(v9);
  sub_53E0();
  uint64_t v53 = v11;
  uint64_t Model = type metadata accessor for SleepQueryModel();
  uint64_t v13 = (int *)(Model - 8);
  __chkstk_darwin(Model);
  sub_E548();
  uint64_t v16 = v15 - v14;
  sub_1AAD90();
  uint64_t v17 = sub_27AC();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v17, v18, v19, v20);
  uint64_t v46 = v16 + v13[7];
  uint64_t v47 = type metadata accessor for SnippetHeaderModel();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v46, 1, 1, v47);
  uint64_t v21 = (uint64_t **)(v16 + v13[8]);
  *uint64_t v21 = 0;
  v21[1] = 0;
  uint64_t v45 = v21;
  uint64_t v22 = (uint64_t **)(v16 + v13[9]);
  *uint64_t v22 = 0;
  v22[1] = 0;
  uint64_t v44 = v22;
  uint64_t v23 = (uint64_t **)(v16 + v13[10]);
  *uint64_t v23 = 0;
  v23[1] = 0;
  uint64_t v24 = (uint64_t **)(v16 + v13[11]);
  *uint64_t v24 = 0;
  v24[1] = 0;
  uint64_t v25 = (uint64_t **)(v16 + v13[12]);
  *uint64_t v25 = 0;
  v25[1] = 0;
  id v43 = (void *)v13[13];
  *(void *)((char *)v43 + v16) = 0;
  uint64_t v42 = (void *)v13[14];
  *(void *)((char *)v42 + v16) = 0;
  uint64_t v41 = v13[15];
  *(void *)(v16 + v41) = 0;
  uint64_t v40 = (void *)v13[16];
  *(void *)((char *)v40 + v16) = 0;
  uint64_t v26 = (uint64_t *)(v16 + v13[17]);
  *uint64_t v26 = 0;
  v26[1] = 0;
  uint64_t v27 = (uint64_t *)(v16 + v13[18]);
  *uint64_t v27 = 0;
  v27[1] = 0;
  uint64_t v28 = (uint64_t *)(v16 + v13[19]);
  *uint64_t v28 = 0;
  v28[1] = 0;
  sub_2E38(a1, a1[3]);
  sub_18E14C();
  sub_1AD3A0();
  if (!v52)
  {
    sub_18E958(&qword_202BE0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    sub_1845E4();
    sub_1AD1E0();
    sub_5B0E0(v49, v16, &qword_2022C8);
    LOBYTE(v54) = 1;
    sub_18E958(&qword_202BF0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1845E4();
    sub_1AD1E0();
    sub_5B0E0(v48, v46, &qword_2022D0);
    sub_1902B0(2);
    sub_190328();
    swift_bridgeObjectRelease();
    *uint64_t v45 = v26;
    v45[1] = (uint64_t *)v25;
    sub_1902B0(3);
    sub_190328();
    swift_bridgeObjectRelease();
    *uint64_t v44 = v26;
    v44[1] = (uint64_t *)v25;
    sub_1902B0(4);
    sub_190328();
    swift_bridgeObjectRelease();
    *uint64_t v23 = v26;
    v23[1] = (uint64_t *)v25;
    sub_1902B0(5);
    sub_190328();
    swift_bridgeObjectRelease();
    *uint64_t v24 = v26;
    v24[1] = (uint64_t *)v25;
    sub_1902B0(6);
    sub_190328();
    swift_bridgeObjectRelease();
    *uint64_t v25 = v26;
    v25[1] = (uint64_t *)v25;
    sub_1AC160();
    sub_18E958(&qword_2089A0, (void (*)(uint64_t))&type metadata accessor for DialogDuration);
    sub_1AD1E0();
    swift_release();
    *id v43 = v54;
    sub_1902F4(8);
    swift_release();
    *uint64_t v42 = v54;
    sub_1902F4(9);
    swift_release();
    *(void *)(v16 + v41) = v54;
    sub_1AD1E0();
    swift_release();
    *uint64_t v40 = v54;
    uint64_t v30 = sub_1902D0(11);
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    *uint64_t v26 = v30;
    v26[1] = v32;
    uint64_t v33 = sub_1902D0(12);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    *uint64_t v27 = v33;
    v27[1] = v35;
    uint64_t v36 = sub_1902D0(13);
    uint64_t v38 = v37;
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v53, v50);
    swift_bridgeObjectRelease();
    *uint64_t v28 = v36;
    v28[1] = v38;
    sub_18E864(v16, a2);
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
  return sub_18F694(v16, (void (*)(void))type metadata accessor for SleepQueryModel);
}

uint64_t sub_18E864(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for SleepQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t sub_18E8C8()
{
  return sub_18E958(&qword_202250, (void (*)(uint64_t))type metadata accessor for SleepQueryModel);
}

uint64_t sub_18E910()
{
  return sub_18E958(&qword_2020E0, (void (*)(uint64_t))type metadata accessor for SleepQueryModel);
}

uint64_t sub_18E958(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18E9A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepQueryModel.init(from:)(a1, a2);
}

uint64_t sub_18E9B8(void *a1)
{
  return SleepQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AAD90();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_2022C8);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for SnippetHeaderModel();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v12, 1, v13))
    {
      uint64_t v14 = sub_2694(&qword_2022D0);
      memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v15 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v11, v12, v15);
      uint64_t v16 = *(int *)(v13 + 20);
      uint64_t v17 = &v11[v16];
      uint64_t v18 = &v12[v16];
      uint64_t v19 = *((void *)v18 + 1);
      *(void *)uint64_t v17 = *(void *)v18;
      *((void *)v17 + 1) = v19;
      uint64_t v20 = *(int *)(v13 + 24);
      uint64_t v21 = &v11[v20];
      uint64_t v22 = &v12[v20];
      uint64_t v23 = *((void *)v22 + 1);
      *(void *)uint64_t v21 = *(void *)v22;
      *((void *)v21 + 1) = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v11, 0, 1, v13);
    }
    uint64_t v24 = a3[6];
    uint64_t v25 = a3[7];
    uint64_t v26 = (uint64_t *)((char *)a1 + v24);
    uint64_t v27 = (uint64_t *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    char v29 = (uint64_t *)((char *)a1 + v25);
    uint64_t v30 = (uint64_t *)((char *)a2 + v25);
    uint64_t v58 = v30[1];
    *char v29 = *v30;
    v29[1] = v58;
    uint64_t v31 = a3[8];
    uint64_t v32 = a3[9];
    uint64_t v33 = (uint64_t *)((char *)a1 + v31);
    uint64_t v34 = (uint64_t *)((char *)a2 + v31);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    uint64_t v36 = (uint64_t *)((char *)a1 + v32);
    uint64_t v37 = (uint64_t *)((char *)a2 + v32);
    uint64_t v57 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v57;
    uint64_t v38 = a3[10];
    uint64_t v39 = a3[11];
    uint64_t v40 = (uint64_t *)((char *)a1 + v38);
    uint64_t v41 = (uint64_t *)((char *)a2 + v38);
    uint64_t v42 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v42;
    *(uint64_t *)((char *)a1 + v39) = *(uint64_t *)((char *)a2 + v39);
    uint64_t v43 = a3[13];
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *(uint64_t *)((char *)a1 + v43) = *(uint64_t *)((char *)a2 + v43);
    uint64_t v44 = a3[15];
    *(uint64_t *)((char *)a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    uint64_t v45 = (uint64_t *)((char *)a1 + v44);
    uint64_t v46 = (uint64_t *)((char *)a2 + v44);
    uint64_t v47 = v46[1];
    *uint64_t v45 = *v46;
    v45[1] = v47;
    uint64_t v48 = a3[16];
    uint64_t v49 = a3[17];
    uint64_t v50 = (uint64_t *)((char *)a1 + v48);
    uint64_t v51 = (uint64_t *)((char *)a2 + v48);
    uint64_t v52 = v51[1];
    *uint64_t v50 = *v51;
    v50[1] = v52;
    uint64_t v53 = (uint64_t *)((char *)a1 + v49);
    uint64_t v54 = (uint64_t *)((char *)a2 + v49);
    uint64_t v55 = v54[1];
    *uint64_t v53 = *v54;
    v53[1] = v55;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SleepQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AAD90();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for SnippetHeaderModel();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v6))
  {
    uint64_t v7 = sub_1AC1E0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for SleepQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_2694(&qword_2022D0);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
    uint64_t v14 = *(int *)(v11 + 20);
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    uint64_t v18 = *(int *)(v11 + 24);
    uint64_t v19 = &v9[v18];
    uint64_t v20 = &v10[v18];
    uint64_t v21 = *((void *)v20 + 1);
    *(void *)uint64_t v19 = *(void *)v20;
    *((void *)v19 + 1) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v22 = a3[6];
  uint64_t v23 = a3[7];
  uint64_t v24 = &a1[v22];
  uint64_t v25 = &a2[v22];
  uint64_t v26 = *((void *)v25 + 1);
  *(void *)uint64_t v24 = *(void *)v25;
  *((void *)v24 + 1) = v26;
  uint64_t v27 = &a1[v23];
  uint64_t v28 = &a2[v23];
  uint64_t v56 = *((void *)v28 + 1);
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = v56;
  uint64_t v29 = a3[8];
  uint64_t v30 = a3[9];
  uint64_t v31 = &a1[v29];
  uint64_t v32 = &a2[v29];
  uint64_t v33 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = v33;
  uint64_t v34 = &a1[v30];
  uint64_t v35 = &a2[v30];
  uint64_t v55 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = v55;
  uint64_t v36 = a3[10];
  uint64_t v37 = a3[11];
  uint64_t v38 = &a1[v36];
  uint64_t v39 = &a2[v36];
  uint64_t v40 = *((void *)v39 + 1);
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = v40;
  *(void *)&a1[v37] = *(void *)&a2[v37];
  uint64_t v41 = a3[13];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  *(void *)&a1[v41] = *(void *)&a2[v41];
  uint64_t v42 = a3[15];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  uint64_t v45 = *((void *)v44 + 1);
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = v45;
  uint64_t v46 = a3[16];
  uint64_t v47 = a3[17];
  uint64_t v48 = &a1[v46];
  uint64_t v49 = &a2[v46];
  uint64_t v50 = *((void *)v49 + 1);
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = v50;
  uint64_t v51 = &a1[v47];
  uint64_t v52 = &a2[v47];
  uint64_t v53 = *((void *)v52 + 1);
  *(void *)uint64_t v51 = *(void *)v52;
  *((void *)v51 + 1) = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for SleepQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = type metadata accessor for SnippetHeaderModel();
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v12, 1, v14);
  int v16 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v14);
  if (!v15)
  {
    if (!v16)
    {
      uint64_t v50 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 24))(v12, v13, v50);
      uint64_t v51 = *(int *)(v14 + 20);
      uint64_t v52 = &v12[v51];
      uint64_t v53 = &v13[v51];
      *(void *)uint64_t v52 = *(void *)v53;
      *((void *)v52 + 1) = *((void *)v53 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v54 = *(int *)(v14 + 24);
      uint64_t v55 = &v12[v54];
      uint64_t v56 = &v13[v54];
      *(void *)uint64_t v55 = *(void *)v56;
      *((void *)v55 + 1) = *((void *)v56 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_18F694((uint64_t)v12, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v24 = sub_2694(&qword_2022D0);
    memcpy(v12, v13, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v17 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v12, v13, v17);
  uint64_t v18 = *(int *)(v14 + 20);
  uint64_t v19 = &v12[v18];
  uint64_t v20 = &v13[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  uint64_t v21 = *(int *)(v14 + 24);
  uint64_t v22 = &v12[v21];
  uint64_t v23 = &v13[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v14);
LABEL_13:
  uint64_t v25 = a3[6];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  *((void *)v26 + 1) = *((void *)v27 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[7];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  *(void *)uint64_t v29 = *(void *)v30;
  *((void *)v29 + 1) = *((void *)v30 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[8];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = *((void *)v33 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[9];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = *((void *)v36 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[10];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = *((void *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  swift_retain();
  swift_release();
  uint64_t v40 = a3[15];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[16];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = *((void *)v45 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[17];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  *(void *)uint64_t v47 = *(void *)v48;
  *((void *)v47 + 1) = *((void *)v48 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_18F694(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

char *initializeWithTake for SleepQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_2694(&qword_2022D0);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = sub_1AC1E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v9, v10, v13);
    *(_OWORD *)&v9[*(int *)(v11 + 20)] = *(_OWORD *)&v10[*(int *)(v11 + 20)];
    *(_OWORD *)&v9[*(int *)(v11 + 24)] = *(_OWORD *)&v10[*(int *)(v11 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v14 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v14] = *(_OWORD *)&a2[v14];
  uint64_t v15 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v15] = *(_OWORD *)&a2[v15];
  uint64_t v16 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  uint64_t v17 = a3[13];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  uint64_t v18 = a3[15];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  *(_OWORD *)&a1[v18] = *(_OWORD *)&a2[v18];
  uint64_t v19 = a3[17];
  *(_OWORD *)&a1[a3[16]] = *(_OWORD *)&a2[a3[16]];
  *(_OWORD *)&a1[v19] = *(_OWORD *)&a2[v19];
  return a1;
}

char *assignWithTake for SleepQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = type metadata accessor for SnippetHeaderModel();
  int v15 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v12, 1, v14);
  int v16 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v13, 1, v14);
  if (!v15)
  {
    if (!v16)
    {
      uint64_t v60 = sub_1AC1E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 40))(v12, v13, v60);
      uint64_t v61 = *(int *)(v14 + 20);
      uint64_t v62 = &v12[v61];
      uint64_t v63 = &v13[v61];
      uint64_t v65 = *(void *)v63;
      uint64_t v64 = *((void *)v63 + 1);
      *(void *)uint64_t v62 = v65;
      *((void *)v62 + 1) = v64;
      swift_bridgeObjectRelease();
      uint64_t v66 = *(int *)(v14 + 24);
      os_log_type_t v67 = &v12[v66];
      uint64_t v68 = &v13[v66];
      uint64_t v70 = *(void *)v68;
      uint64_t v69 = *((void *)v68 + 1);
      *(void *)os_log_type_t v67 = v70;
      *((void *)v67 + 1) = v69;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_18F694((uint64_t)v12, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v18 = sub_2694(&qword_2022D0);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v17 = sub_1AC1E0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v12, v13, v17);
  *(_OWORD *)&v12[*(int *)(v14 + 20)] = *(_OWORD *)&v13[*(int *)(v14 + 20)];
  *(_OWORD *)&v12[*(int *)(v14 + 24)] = *(_OWORD *)&v13[*(int *)(v14 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v12, 0, 1, v14);
LABEL_13:
  uint64_t v19 = a3[6];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v23 = *(void *)v21;
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = v23;
  *((void *)v20 + 1) = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[7];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v28 = *(void *)v26;
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)uint64_t v25 = v28;
  *((void *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[8];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  uint64_t v33 = *(void *)v31;
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[9];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v38 = *(void *)v36;
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[10];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_release();
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_release();
  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  swift_release();
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  swift_release();
  uint64_t v44 = a3[15];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  uint64_t v48 = *(void *)v46;
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = v48;
  *((void *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = a3[16];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  uint64_t v53 = *(void *)v51;
  uint64_t v52 = *((void *)v51 + 1);
  *(void *)uint64_t v50 = v53;
  *((void *)v50 + 1) = v52;
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[17];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  uint64_t v58 = *(void *)v56;
  uint64_t v57 = *((void *)v56 + 1);
  *(void *)uint64_t v55 = v58;
  *((void *)v55 + 1) = v57;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18FD10);
}

uint64_t sub_18FD10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_5:
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
  sub_2694(&qword_2022D0);
  sub_52E0();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  int v14 = v13 - 1;
  if (v14 < 0) {
    int v14 = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_18FDF0);
}

void sub_18FDF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    sub_2694(&qword_2022D0);
    sub_52E0();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, a2, a2, v10);
}

void sub_18FEAC()
{
  sub_E29C8(319, &qword_202C60, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  if (v0 <= 0x3F)
  {
    sub_E29C8(319, (unint64_t *)&qword_202C70, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for SleepQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF3)
  {
    if (a2 + 13 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 13) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 14;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v5 = v6 - 14;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SleepQueryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x190128);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepQueryModel.CodingKeys()
{
  return &type metadata for SleepQueryModel.CodingKeys;
}

unint64_t sub_190164()
{
  unint64_t result = qword_208A68;
  if (!qword_208A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208A68);
  }
  return result;
}

unint64_t sub_1901B4()
{
  unint64_t result = qword_208A70;
  if (!qword_208A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208A70);
  }
  return result;
}

unint64_t sub_190204()
{
  unint64_t result = qword_208A78;
  if (!qword_208A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_208A78);
  }
  return result;
}

uint64_t sub_190250()
{
  return sub_1AD270();
}

uint64_t sub_19027C()
{
  return type metadata accessor for SleepQueryModel();
}

uint64_t sub_190294()
{
  return type metadata accessor for SleepQueryModel();
}

uint64_t sub_1902B0@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return sub_1AD1C0();
}

uint64_t sub_1902D0@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return sub_1AD1C0();
}

uint64_t sub_1902F4@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 89) = a1;
  return sub_1AD1E0();
}

void sub_190334(uint64_t a1@<X8>)
{
  *(void *)(v2 - 72) = *(void *)(v1 + a1);
}

uint64_t sub_190340()
{
  sub_A364();
  *(void *)(v0 + 48) = v1;
  *(void *)(v0 + 56) = v2;
  *(unsigned char *)(v0 + 160) = v3;
  uint64_t v4 = sub_1AC800();
  *(void *)(v0 + 64) = v4;
  *(void *)(v0 + 72) = *(void *)(v4 - 8);
  *(void *)(v0 + 80) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1903F4()
{
  uint64_t v49 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 160);
  unsigned int v2 = v1 - 89;
  BOOL v3 = (v1 - 89) > 0x12;
  if ((v1 - 89) > 0x12) {
    goto LABEL_2;
  }
  if (((1 << v2) & 0x44181) != 0)
  {
LABEL_17:
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_190A40;
    sub_14F4C4();
    return sub_1924F8(v19, v20, v21);
  }
  BOOL v3 = v2 > 0x10;
  if (v1 != 105)
  {
LABEL_2:
    if (!v3)
    {
      switch(*(unsigned char *)(v0 + 160))
      {
        case 0x93:
          uint64_t v24 = (void *)swift_task_alloc();
          *(void *)(v0 + 104) = v24;
          *uint64_t v24 = v0;
          v24[1] = sub_190BF8;
          sub_194C78();
          sub_14F4C4();
          return sub_191484();
        case 0x94:
        case 0x95:
        case 0x98:
        case 0x99:
        case 0x9A:
          goto LABEL_14;
        case 0x96:
          uint64_t v30 = (void *)swift_task_alloc();
          *(void *)(v0 + 112) = v30;
          *uint64_t v30 = v0;
          v30[1] = sub_190CD4;
          sub_194C78();
          sub_14F4C4();
          return sub_191600();
        case 0x97:
          uint64_t v32 = (void *)swift_task_alloc();
          *(void *)(v0 + 120) = v32;
          *uint64_t v32 = v0;
          v32[1] = sub_190DB0;
          sub_194C78();
          sub_14F4C4();
          return sub_19177C();
        case 0x9B:
          uint64_t v34 = (void *)swift_task_alloc();
          *(void *)(v0 + 128) = v34;
          *uint64_t v34 = v0;
          v34[1] = sub_190E8C;
          sub_194C78();
          sub_14F4C4();
          return sub_1918F8();
        default:
          JUMPOUT(0);
      }
    }
    if (v1 != 159)
    {
      switch(v1)
      {
        case 162:
          uint64_t v36 = (void *)swift_task_alloc();
          *(void *)(v0 + 136) = v36;
          *uint64_t v36 = v0;
          v36[1] = sub_190F68;
          sub_194C78();
          sub_14F4C4();
          return sub_191C90();
        case 170:
          uint64_t v38 = (void *)swift_task_alloc();
          *(void *)(v0 + 144) = v38;
          *uint64_t v38 = v0;
          v38[1] = sub_191044;
          sub_194C78();
          sub_14F4C4();
          return sub_1921D8(v39, v40);
        case 173:
          uint64_t v42 = (void *)swift_task_alloc();
          *(void *)(v0 + 152) = v42;
          *uint64_t v42 = v0;
          v42[1] = sub_191120;
          sub_194C78();
          sub_14F4C4();
          return sub_19237C();
      }
      if (v1 != 174 && v1 != 189 && v1 != 184)
      {
LABEL_14:
        uint64_t v5 = *(void *)(v0 + 72);
        uint64_t v4 = *(void *)(v0 + 80);
        uint64_t v6 = *(void *)(v0 + 64);
        uint64_t v7 = sub_1AC7D0();
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
        uint64_t v8 = sub_1AC7F0();
        os_log_type_t v9 = sub_1ACF60();
        BOOL v10 = os_log_type_enabled(v8, v9);
        uint64_t v12 = *(void *)(v0 + 72);
        uint64_t v11 = *(void *)(v0 + 80);
        uint64_t v13 = *(void *)(v0 + 64);
        if (v10)
        {
          char v14 = *(unsigned char *)(v0 + 160);
          uint64_t v47 = *(void *)(v0 + 80);
          uint64_t v46 = *(void *)(v0 + 64);
          int v15 = (uint8_t *)swift_slowAlloc();
          uint64_t v48 = swift_slowAlloc();
          *(_DWORD *)int v15 = 136315138;
          unint64_t v16 = sub_2F2B8(v14);
          *(void *)(v0 + 40) = sub_4A278(v16, v17, &v48);
          sub_1ACFE0();
          swift_bridgeObjectRelease();
          _os_log_impl(&def_342E4, v8, v9, "No pattern implemented for %s", v15, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v47, v46);
        }
        else
        {

          (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
        }
        swift_task_dealloc();
        sub_6FDE8();
        sub_14F4C4();
        __asm { BRAA            X2, X16 }
      }
    }
    goto LABEL_17;
  }
  uint64_t v26 = swift_task_alloc();
  uint64_t v27 = (void *)sub_D83EC(v26);
  *uint64_t v27 = v28;
  v27[1] = sub_190B1C;
  sub_194C78();
  sub_14F4C4();
  return sub_1911FC();
}

uint64_t sub_190A40()
{
  sub_47634();
  sub_194BBC();
  uint64_t v1 = *v0;
  sub_A304();
  *unsigned int v2 = v1;
  swift_task_dealloc();
  sub_47C98();
  swift_task_dealloc();
  uint64_t v3 = sub_194BD8();
  return v4(v3);
}

uint64_t sub_190B1C()
{
  sub_47634();
  sub_194BBC();
  uint64_t v1 = *v0;
  sub_A304();
  *unsigned int v2 = v1;
  swift_task_dealloc();
  sub_47C98();
  swift_task_dealloc();
  uint64_t v3 = sub_194BD8();
  return v4(v3);
}

uint64_t sub_190BF8()
{
  sub_47634();
  sub_194BBC();
  uint64_t v1 = *v0;
  sub_A304();
  *unsigned int v2 = v1;
  swift_task_dealloc();
  sub_47C98();
  swift_task_dealloc();
  uint64_t v3 = sub_194BD8();
  return v4(v3);
}

uint64_t sub_190CD4()
{
  sub_47634();
  sub_194BBC();
  uint64_t v1 = *v0;
  sub_A304();
  *unsigned int v2 = v1;
  swift_task_dealloc();
  sub_47C98();
  swift_task_dealloc();
  uint64_t v3 = sub_194BD8();
  return v4(v3);
}

uint64_t sub_190DB0()
{
  sub_47634();
  sub_194BBC();
  uint64_t v1 = *v0;
  sub_A304();
  *unsigned int v2 = v1;
  swift_task_dealloc();
  sub_47C98();
  swift_task_dealloc();
  uint64_t v3 = sub_194BD8();
  return v4(v3);
}

uint64_t sub_190E8C()
{
  sub_47634();
  sub_194BBC();
  uint64_t v1 = *v0;
  sub_A304();
  *unsigned int v2 = v1;
  swift_task_dealloc();
  sub_47C98();
  swift_task_dealloc();
  uint64_t v3 = sub_194BD8();
  return v4(v3);
}

uint64_t sub_190F68()
{
  sub_47634();
  sub_194BBC();
  uint64_t v1 = *v0;
  sub_A304();
  *unsigned int v2 = v1;
  swift_task_dealloc();
  sub_47C98();
  swift_task_dealloc();
  uint64_t v3 = sub_194BD8();
  return v4(v3);
}

uint64_t sub_191044()
{
  sub_47634();
  sub_194BBC();
  uint64_t v1 = *v0;
  sub_A304();
  *unsigned int v2 = v1;
  swift_task_dealloc();
  sub_47C98();
  swift_task_dealloc();
  uint64_t v3 = sub_194BD8();
  return v4(v3);
}

uint64_t sub_191120()
{
  sub_47634();
  sub_194BBC();
  uint64_t v1 = *v0;
  sub_A304();
  *unsigned int v2 = v1;
  swift_task_dealloc();
  sub_47C98();
  swift_task_dealloc();
  uint64_t v3 = sub_194BD8();
  return v4(v3);
}

uint64_t sub_1911FC()
{
  sub_A364();
  v0[7] = v1;
  v0[8] = v2;
  uint64_t v3 = sub_2694(&qword_201CC8);
  sub_53D4(v3);
  v0[9] = sub_A42C();
  uint64_t v4 = sub_2694(&qword_201E20);
  sub_53D4(v4);
  v0[10] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1912A0()
{
  sub_1950E0();
  sub_E588();
  uint64_t v1 = sub_194C58();
  sub_194C38(v1);
  sub_153CEC(105, v0);
  sub_A068((uint64_t)v0, &qword_201CC8);
  sub_194ED8();
  uint64_t v2 = sub_194C04();
  sub_194BEC(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_D83EC(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_19137C;
  sub_CD28C();
  return sub_138E14();
}

uint64_t sub_19137C()
{
  sub_47D74();
  sub_E588();
  sub_6F4D0();
  uint64_t v3 = v2;
  sub_A304();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  swift_task_dealloc();
  sub_6FD18();
  if (v0)
  {
    swift_errorRelease();
    swift_task_dealloc();
  }
  else
  {
    sub_194EC0();
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_191484()
{
  sub_A364();
  v0[7] = v1;
  v0[8] = v2;
  uint64_t v3 = sub_2694(&qword_201CC8);
  sub_53D4(v3);
  v0[9] = sub_A42C();
  uint64_t v4 = sub_2694(&qword_201E20);
  sub_53D4(v4);
  v0[10] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_191528()
{
  sub_1950E0();
  sub_E588();
  uint64_t v1 = sub_194C58();
  sub_194C38(v1);
  sub_153CEC(147, v0);
  sub_A068((uint64_t)v0, &qword_201CC8);
  sub_194ED8();
  uint64_t v2 = sub_194C04();
  sub_194BEC(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_D83EC(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_19137C;
  sub_194D00();
  sub_CD28C();
  return sub_135828();
}

uint64_t sub_191600()
{
  sub_A364();
  v0[7] = v1;
  v0[8] = v2;
  uint64_t v3 = sub_2694(&qword_201CC8);
  sub_53D4(v3);
  v0[9] = sub_A42C();
  uint64_t v4 = sub_2694(&qword_201E20);
  sub_53D4(v4);
  v0[10] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1916A4()
{
  sub_1950E0();
  sub_E588();
  uint64_t v1 = sub_194C58();
  sub_194C38(v1);
  sub_153CEC(150, v0);
  sub_A068((uint64_t)v0, &qword_201CC8);
  sub_194ED8();
  uint64_t v2 = sub_194C04();
  sub_194BEC(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_D83EC(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_19137C;
  sub_194D00();
  sub_CD28C();
  return sub_135B70();
}

uint64_t sub_19177C()
{
  sub_A364();
  v0[7] = v1;
  v0[8] = v2;
  uint64_t v3 = sub_2694(&qword_201CC8);
  sub_53D4(v3);
  v0[9] = sub_A42C();
  uint64_t v4 = sub_2694(&qword_201E20);
  sub_53D4(v4);
  v0[10] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_191820()
{
  sub_1950E0();
  sub_E588();
  uint64_t v1 = sub_194C58();
  sub_194C38(v1);
  sub_153CEC(151, v0);
  sub_A068((uint64_t)v0, &qword_201CC8);
  sub_194ED8();
  uint64_t v2 = sub_194C04();
  sub_194BEC(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_D83EC(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_19137C;
  sub_194D00();
  sub_CD28C();
  return sub_135EB0();
}

uint64_t sub_1918F8()
{
  sub_A364();
  v0[7] = v1;
  v0[8] = v2;
  uint64_t v3 = sub_2694(&qword_201CC8);
  sub_53D4(v3);
  v0[9] = sub_A42C();
  uint64_t v4 = sub_2694(&qword_201E20);
  sub_53D4(v4);
  v0[10] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_19199C()
{
  sub_1950E0();
  sub_E588();
  uint64_t v1 = sub_194C58();
  sub_194C38(v1);
  sub_153CEC(155, v0);
  sub_A068((uint64_t)v0, &qword_201CC8);
  sub_194ED8();
  uint64_t v2 = sub_194C04();
  sub_194BEC(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_D83EC(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_191A74;
  sub_194D00();
  sub_CD28C();
  return sub_1361F0();
}

uint64_t sub_191A74()
{
  sub_47D74();
  sub_E588();
  sub_6F4D0();
  uint64_t v3 = v2;
  sub_A304();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  swift_task_dealloc();
  sub_6FD18();
  if (v0)
  {
    swift_errorRelease();
    swift_task_dealloc();
  }
  else
  {
    sub_194EC0();
  }
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_191B7C()
{
  sub_47634();
  sub_A068(*(void *)(v0 + 80), &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = sub_194E58();
  return v2(v1);
}

uint64_t sub_191C08()
{
  sub_47634();
  sub_A068(*(void *)(v0 + 80), &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = sub_6FDE8();
  return v2(v1);
}

uint64_t sub_191C90()
{
  sub_A364();
  v0[7] = v1;
  v0[8] = v2;
  uint64_t v3 = sub_2694(&qword_201E28);
  sub_53D4(v3);
  v0[9] = sub_A42C();
  uint64_t v4 = sub_2694(&qword_201CC8);
  sub_53D4(v4);
  v0[10] = sub_A42C();
  uint64_t v5 = sub_2694(&qword_201E20);
  sub_53D4(v5);
  v0[11] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_191D58()
{
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = (void *)v0[7];
  uint64_t v3 = sub_1AAA10();
  uint64_t v4 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v1, 1, 1, v3);
  sub_153CEC(162, v1);
  sub_A068((uint64_t)v1, &qword_201CC8);
  uint64_t v5 = sub_7218C(v2);
  sub_1710A4(v5, v6);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  if (v8)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v4 = 0;
  }
  uint64_t v9 = v0[11];
  uint64_t v11 = v0[8];
  uint64_t v10 = v0[9];
  uint64_t v12 = (void *)v0[7];
  uint64_t v13 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v10, v4, 1, v13);
  sub_1ABEF0();
  sub_47658();
  sub_1ABEE0();
  [v12 doubleValue];
  sub_1AC020();
  swift_release();
  sub_1AC010();
  swift_release();
  uint64_t v14 = sub_1AC000();
  v0[12] = v14;
  swift_release();
  sub_E3FC(v11 + 80, (uint64_t)(v0 + 2));
  sub_2E38(v0 + 2, v0[5]);
  int v15 = (void *)swift_task_alloc();
  v0[13] = v15;
  v15[2] = v14;
  v15[3] = v12;
  v15[4] = v9;
  unint64_t v16 = (void *)swift_task_alloc();
  v0[14] = v16;
  *unint64_t v16 = v0;
  v16[1] = sub_191F6C;
  return sub_136AF0();
}

uint64_t sub_191F6C()
{
  sub_47D74();
  sub_E588();
  sub_6F4D0();
  uint64_t v4 = v3;
  sub_A304();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  swift_task_dealloc();
  sub_6FD18();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v4 + 120) = v0;
  }
  swift_task_dealloc();
  sub_A4F0();
  sub_47BE4();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_19207C()
{
  sub_47D74();
  sub_E588();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 88);
  sub_A068(*(void *)(v0 + 72), &qword_201E28);
  sub_A068(v1, &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_194E58();
  sub_47BE4();
  return v4(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_19212C()
{
  sub_47634();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 88);
  sub_A068(*(void *)(v0 + 72), &qword_201E28);
  sub_A068(v1, &qword_201E20);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = sub_6FDE8();
  return v3(v2);
}

uint64_t sub_1921D8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_7BBF0((uint64_t)sub_1921F0);
}

uint64_t sub_1921F0()
{
  sub_47634();
  uint64_t v1 = *sub_2E38((void *)(v0[3] + 80), *(void *)(v0[3] + 104));
  sub_195074();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[4] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1922AC;
  uint64_t v3 = v0[2];
  return v5(v1, 170, v3);
}

uint64_t sub_1922AC()
{
  sub_A364();
  sub_74670();
  uint64_t v2 = *v1;
  sub_A304();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  uint64_t v4 = sub_194E58();
  return v5(v4);
}

uint64_t sub_19237C()
{
  sub_A364();
  v0[7] = v1;
  v0[8] = v2;
  uint64_t v3 = sub_2694(&qword_201CC8);
  sub_53D4(v3);
  v0[9] = sub_A42C();
  uint64_t v4 = sub_2694(&qword_201E20);
  sub_53D4(v4);
  v0[10] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_192420()
{
  sub_1950E0();
  sub_E588();
  uint64_t v1 = sub_194C58();
  sub_194C38(v1);
  sub_153CEC(173, v0);
  sub_A068((uint64_t)v0, &qword_201CC8);
  sub_194ED8();
  uint64_t v2 = sub_194C04();
  sub_194BEC(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_D83EC(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_19137C;
  sub_194D00();
  sub_CD28C();
  return sub_13810C();
}

uint64_t sub_1924F8(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  *(unsigned char *)(v3 + 40) = a1;
  return sub_7BBF0((uint64_t)sub_192514);
}

uint64_t sub_192514()
{
  sub_47634();
  uint64_t v1 = *sub_2E38((void *)(*(void *)(v0 + 24) + 80), *(void *)(*(void *)(v0 + 24) + 104));
  sub_195074();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1922AC;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 40);
  return v6(v1, v4, v3);
}

void sub_1925D0()
{
  sub_70120();
  uint64_t v3 = v2;
  uint64_t v90 = v4;
  uint64_t v6 = v5;
  unsigned __int8 v8 = v7;
  uint64_t v10 = v9;
  sub_19501C(__stack_chk_guard);
  sub_52C4();
  uint64_t v87 = v12;
  uint64_t v88 = v11;
  __chkstk_darwin(v11);
  sub_53E0();
  uint64_t v86 = v13;
  uint64_t v14 = sub_2694(&qword_201E20);
  uint64_t v15 = sub_53D4(v14);
  __chkstk_darwin(v15);
  uint64_t v89 = sub_194DE8(v16, v83);
  sub_52C4();
  uint64_t v85 = v17;
  __chkstk_darwin(v18);
  sub_53E0();
  uint64_t v84 = v19;
  uint64_t v20 = sub_2694(&qword_201E10);
  uint64_t v21 = sub_53D4(v20);
  __chkstk_darwin(v21);
  sub_194E88();
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v83 - v23;
  uint64_t v25 = sub_2694(&qword_201E28);
  uint64_t v26 = sub_53D4(v25);
  __chkstk_darwin(v26);
  sub_194D9C(v27, v83);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v83 - v30;
  __chkstk_darwin(v29);
  sub_194E68();
  uint64_t v33 = v32;
  sub_1ACE40();
  swift_bridgeObjectRelease();
  sub_1AC1E0();
  uint64_t v34 = sub_1950CC();
  uint64_t v36 = v35;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v34, v37, v38, v35);
  uint64_t v39 = (int *)v3(0);
  sub_9EA0(v0, v10 + v39[6]);
  [v6 doubleValue];
  double v41 = v40;
  uint64_t v42 = sub_7218C(v6);
  sub_C0448(v42, v43, v8, v41);
  sub_70548();
  uint64_t v44 = v39[10];
  uint64_t v93 = v10;
  uint64_t v45 = v10 + v44;
  *(double *)uint64_t v45 = v41;
  *(unsigned char *)(v45 + 8) = 0;
  sub_7218C(v6);
  if (v46)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v33 = 0;
  }
  uint64_t v47 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v31, v33, 1, v36);
  uint64_t v48 = v93;
  sub_9EA0((uint64_t)v31, v93 + v39[9]);
  sub_1AC0E0();
  sub_47658();
  sub_1AC0D0();
  id v49 = [v6 start];
  if (v49)
  {
    uint64_t v50 = v49;
    sub_1AABB0();

    uint64_t v47 = 0;
  }
  uint64_t v51 = v89;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, v47, 1, v89);
  sub_194A28(v1, (uint64_t)v24);
  uint64_t v52 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v51);
  if (v52)
  {
    sub_A068((uint64_t)v24, &qword_201E10);
  }
  else
  {
    uint64_t v53 = v84;
    uint64_t v54 = v85;
    uint64_t v55 = sub_194F30();
    v56(v55);
    sub_A068((uint64_t)v24, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v51);
  }
  uint64_t v57 = v91;
  sub_1AC0C0();
  swift_release();
  sub_1AC0B0();
  sub_FD84C();
  uint64_t v58 = v39[7];
  swift_release();
  *(void *)(v48 + v58) = v52;
  uint64_t v59 = v92;
  sub_45DC8(v90, v92);
  uint64_t v60 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v59, 1, v60) == 1)
  {
    sub_A068(v59, &qword_201E20);
    sub_195034();
  }
  else
  {
    id v61 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v62);
    uint64_t v64 = (void *)v63;
    sub_195094(v63, "setPunchOutUri:");

    id v65 = v61;
    uint64_t v66 = v86;
    sub_1AAC10();
    uint64_t v67 = sub_1AABE0();
    uint64_t v69 = v68;
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v66, v88);
    sub_1949C4(v67, v69, v65);

    id v70 = [v65 dictionary];
    if (v70)
    {
      uint64_t v71 = v70;
      uint64_t v72 = self;
      id v94 = 0;
      id v73 = sub_194CE0(v72, "dataWithPropertyList:format:options:error:");
      id v74 = v94;
      if (v73)
      {
        uint64_t v75 = sub_1AAB30();
        unint64_t v77 = v76;

        sub_1AAB20(0);
        sub_1ACE40();

        unint64_t v78 = v77;
        uint64_t v48 = v93;
        sub_9F08(v75, v78);

        swift_bridgeObjectRelease();
        uint64_t v79 = v57;
        uint64_t v80 = 0;
      }
      else
      {
        uint64_t v81 = v74;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v79 = v57;
        uint64_t v80 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v79, v80, 1, v36);
    }
    else
    {
      sub_195034();
    }
    sub_A5C0();
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v59, v60);
  }
  sub_9EA0(v57, v48);
  sub_700E0();
}

void sub_192BA8()
{
  sub_70120();
  uint64_t v1 = v0;
  sub_19501C(__stack_chk_guard);
  sub_52C4();
  v65[3] = v3;
  v65[4] = v2;
  __chkstk_darwin(v2);
  sub_194CC4(v4, v65[0]);
  uint64_t v5 = sub_2694(&qword_201CC8);
  uint64_t v6 = sub_53D4(v5);
  __chkstk_darwin(v6);
  sub_194EA4(v7, v65[0]);
  uint64_t v8 = sub_2694(&qword_201E20);
  uint64_t v9 = sub_53D4(v8);
  __chkstk_darwin(v9);
  uint64_t v11 = sub_194DBC(v10, v65[0]);
  sub_52C4();
  v65[1] = v12;
  __chkstk_darwin(v13);
  sub_194CA8(v14, v65[0]);
  uint64_t v15 = sub_2694(&qword_201E10);
  uint64_t v16 = sub_53D4(v15);
  __chkstk_darwin(v16);
  sub_98794();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v65 - v18;
  uint64_t v20 = sub_2694(&qword_201E28);
  uint64_t v21 = sub_53D4(v20);
  __chkstk_darwin(v21);
  sub_194D7C(v22, v65[0]);
  __chkstk_darwin(v23);
  sub_15D5D0();
  __chkstk_darwin(v24);
  sub_194E68();
  uint64_t v26 = v25;
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1AC1E0();
  uint64_t v28 = sub_194EF0(v27);
  sub_195054(v28);
  [v1 doubleValue];
  uint64_t v29 = sub_7218C(v1);
  sub_1950AC(v29, v30);
  sub_70548();
  sub_194F4C();
  if (v31)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
  }
  sub_194D34();
  sub_1AC0E0();
  sub_47658();
  uint64_t v32 = sub_1AC0D0();
  id v33 = [v1 start];
  uint64_t v34 = v67;
  if (v33)
  {
    uint64_t v35 = v33;
    sub_1AABB0();
  }
  sub_194FB4();
  uint64_t v36 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1, v11);
  if (v36)
  {
    sub_A068((uint64_t)v19, &qword_201E10);
  }
  else
  {
    uint64_t v37 = sub_194D10();
    v38(v37);
    sub_A068((uint64_t)v19, &qword_201E10);
    sub_1AABA0();
    uint64_t v39 = sub_194F74();
    v40(v39);
  }
  sub_1AC0C0();
  swift_release();
  sub_1AC0B0();
  sub_FD84C();
  uint64_t v41 = *(int *)(v26 + 28);
  uint64_t v42 = v69;
  swift_release();
  *(void *)(v42 + v41) = v36;
  uint64_t v43 = sub_1AAA10();
  sub_194E14(v43);
  sub_A068(v36, &qword_201CC8);
  uint64_t v44 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v34, 1, v44) == 1)
  {
    sub_A068(v34, &qword_201E20);
    sub_194F90();
  }
  else
  {
    id v45 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v46);
    uint64_t v48 = (void *)v47;
    sub_195094(v47, "setPunchOutUri:");

    id v49 = v45;
    uint64_t v50 = v65[2];
    sub_1AAC10();
    sub_1AABE0();
    uint64_t v51 = sub_194C88();
    v52(v51);
    sub_1949C4((uint64_t)v45, v50, v49);

    id v53 = [v49 dictionary];
    uint64_t v32 = v66;
    if (v53)
    {
      uint64_t v54 = v53;
      uint64_t v55 = self;
      id v70 = 0;
      id v56 = sub_194CE0(v55, "dataWithPropertyList:format:options:error:");
      id v57 = v70;
      if (v56)
      {
        uint64_t v58 = sub_1AAB30();
        unint64_t v60 = v59;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v58, v60);
        swift_bridgeObjectRelease();
        uint64_t v61 = v32;
        uint64_t v62 = 0;
      }
      else
      {
        uint64_t v63 = v57;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v61 = v32;
        uint64_t v62 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v61, v62, 1, v68);
    }
    else
    {
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v66, 1, 1, v68);
    }
    sub_A5C0();
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v34, v44);
  }
  sub_9EA0(v32, v69);
  sub_700E0();
}

void sub_1930F0()
{
  sub_70120();
  uint64_t v1 = v0;
  sub_19501C(__stack_chk_guard);
  sub_52C4();
  v65[3] = v3;
  v65[4] = v2;
  __chkstk_darwin(v2);
  sub_194CC4(v4, v65[0]);
  uint64_t v5 = sub_2694(&qword_201CC8);
  uint64_t v6 = sub_53D4(v5);
  __chkstk_darwin(v6);
  sub_194EA4(v7, v65[0]);
  uint64_t v8 = sub_2694(&qword_201E20);
  uint64_t v9 = sub_53D4(v8);
  __chkstk_darwin(v9);
  uint64_t v11 = sub_194DBC(v10, v65[0]);
  sub_52C4();
  v65[1] = v12;
  __chkstk_darwin(v13);
  sub_194CA8(v14, v65[0]);
  uint64_t v15 = sub_2694(&qword_201E10);
  uint64_t v16 = sub_53D4(v15);
  __chkstk_darwin(v16);
  sub_98794();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v65 - v18;
  uint64_t v20 = sub_2694(&qword_201E28);
  uint64_t v21 = sub_53D4(v20);
  __chkstk_darwin(v21);
  sub_194D7C(v22, v65[0]);
  __chkstk_darwin(v23);
  sub_15D5D0();
  __chkstk_darwin(v24);
  sub_194E68();
  uint64_t v26 = v25;
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1AC1E0();
  uint64_t v28 = sub_194EF0(v27);
  sub_195054(v28);
  [v1 doubleValue];
  uint64_t v29 = sub_7218C(v1);
  sub_1950AC(v29, v30);
  sub_70548();
  sub_194F4C();
  if (v31)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
  }
  sub_194D34();
  sub_1AC0E0();
  sub_47658();
  uint64_t v32 = sub_1AC0D0();
  id v33 = [v1 start];
  uint64_t v34 = v67;
  if (v33)
  {
    uint64_t v35 = v33;
    sub_1AABB0();
  }
  sub_194FB4();
  uint64_t v36 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v19, 1, v11);
  if (v36)
  {
    sub_A068((uint64_t)v19, &qword_201E10);
  }
  else
  {
    uint64_t v37 = sub_194D10();
    v38(v37);
    sub_A068((uint64_t)v19, &qword_201E10);
    sub_1AABA0();
    uint64_t v39 = sub_194F74();
    v40(v39);
  }
  sub_1AC0C0();
  swift_release();
  sub_1AC0B0();
  sub_FD84C();
  uint64_t v41 = *(int *)(v26 + 28);
  uint64_t v42 = v69;
  swift_release();
  *(void *)(v42 + v41) = v36;
  uint64_t v43 = sub_1AAA10();
  sub_194E14(v43);
  sub_A068(v36, &qword_201CC8);
  uint64_t v44 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v34, 1, v44) == 1)
  {
    sub_A068(v34, &qword_201E20);
    sub_194F90();
  }
  else
  {
    id v45 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v46);
    uint64_t v48 = (void *)v47;
    sub_195094(v47, "setPunchOutUri:");

    id v49 = v45;
    uint64_t v50 = v65[2];
    sub_1AAC10();
    sub_1AABE0();
    uint64_t v51 = sub_194C88();
    v52(v51);
    sub_1949C4((uint64_t)v45, v50, v49);

    id v53 = [v49 dictionary];
    uint64_t v32 = v66;
    if (v53)
    {
      uint64_t v54 = v53;
      uint64_t v55 = self;
      id v70 = 0;
      id v56 = sub_194CE0(v55, "dataWithPropertyList:format:options:error:");
      id v57 = v70;
      if (v56)
      {
        uint64_t v58 = sub_1AAB30();
        unint64_t v60 = v59;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v58, v60);
        swift_bridgeObjectRelease();
        uint64_t v61 = v32;
        uint64_t v62 = 0;
      }
      else
      {
        uint64_t v63 = v57;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v61 = v32;
        uint64_t v62 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v61, v62, 1, v68);
    }
    else
    {
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v66, 1, 1, v68);
    }
    sub_A5C0();
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v34, v44);
  }
  sub_9EA0(v32, v69);
  sub_700E0();
}

uint64_t sub_193630(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v69 = a4;
  uint64_t v7 = sub_1AAC20();
  uint64_t v67 = *(void *)(v7 - 8);
  uint64_t v68 = v7;
  __chkstk_darwin(v7);
  uint64_t v66 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2694(&qword_201E20);
  __chkstk_darwin(v9 - 8);
  uint64_t v71 = (uint64_t)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1AABD0();
  uint64_t v65 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v64 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_2694(&qword_201E10);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v64 - v17;
  uint64_t v19 = sub_2694(&qword_201E28);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  id v70 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v64 - v22;
  uint64_t v24 = (int *)type metadata accessor for WellnessLoggingHeightParameters(0);
  uint64_t v25 = v24[7];
  swift_retain();
  swift_release();
  uint64_t v72 = a1;
  *(void *)(a1 + v25) = a2;
  sub_7218C(a3);
  if (v26)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v27 = sub_1AC1E0();
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v27 = sub_1AC1E0();
    uint64_t v28 = 1;
  }
  uint64_t v29 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, v28, 1, v27);
  sub_9EA0((uint64_t)v23, v72 + v24[9]);
  sub_1AC0E0();
  swift_allocObject();
  sub_1AC0D0();
  id v30 = [a3 start];
  if (v30)
  {
    uint64_t v31 = v30;
    sub_1AABB0();

    uint64_t v29 = 0;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v16, v29, 1, v11);
  sub_194A28((uint64_t)v16, (uint64_t)v18);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v18, 1, v11))
  {
    sub_A068((uint64_t)v18, &qword_201E10);
  }
  else
  {
    id v33 = v64;
    uint64_t v32 = v65;
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v64, v18, v11);
    sub_A068((uint64_t)v18, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v11);
  }
  uint64_t v34 = (uint64_t)v70;
  sub_1AC0C0();
  swift_release();
  uint64_t v35 = sub_1AC0B0();
  swift_release();
  uint64_t v36 = v24[8];
  uint64_t v37 = v72;
  swift_release();
  *(void *)(v37 + v36) = v35;
  uint64_t v38 = v71;
  sub_45DC8(v69, v71);
  uint64_t v39 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v38, 1, v39) == 1)
  {
    sub_A068(v38, &qword_201E20);
    uint64_t v40 = sub_1AC1E0();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v34, 1, 1, v40);
  }
  else
  {
    id v41 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v42);
    uint64_t v44 = v43;
    [v41 setPunchOutUri:v43];

    id v45 = v41;
    uint64_t v46 = v66;
    sub_1AAC10();
    uint64_t v47 = sub_1AABE0();
    uint64_t v49 = v48;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v46, v68);
    sub_1949C4(v47, v49, v45);

    id v50 = [v45 dictionary];
    if (v50)
    {
      uint64_t v51 = v50;
      uint64_t v52 = self;
      id v73 = 0;
      id v53 = [v52 dataWithPropertyList:v51 format:200 options:0 error:&v73];
      id v54 = v73;
      if (v53)
      {
        uint64_t v55 = sub_1AAB30();
        unint64_t v57 = v56;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v55, v57);
        swift_bridgeObjectRelease();
        uint64_t v58 = sub_1AC1E0();
        uint64_t v59 = v34;
        uint64_t v60 = 0;
      }
      else
      {
        uint64_t v62 = v54;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v58 = sub_1AC1E0();
        uint64_t v59 = v34;
        uint64_t v60 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v59, v60, 1, v58);
    }
    else
    {
      uint64_t v61 = sub_1AC1E0();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v34, 1, 1, v61);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v38, v39);
  }
  return sub_9EA0(v34, v72);
}

void sub_193CF8()
{
  sub_70120();
  uint64_t v90 = v2;
  uint64_t v4 = v3;
  uint64_t v86 = v5;
  uint64_t v7 = v6;
  char v9 = v8;
  uint64_t v11 = v10;
  sub_19501C(__stack_chk_guard);
  sub_52C4();
  uint64_t v83 = v13;
  uint64_t v84 = v12;
  __chkstk_darwin(v12);
  sub_194CC4(v14, v80);
  uint64_t v15 = sub_2694(&qword_201E20);
  uint64_t v16 = sub_53D4(v15);
  __chkstk_darwin(v16);
  uint64_t v85 = sub_194DE8(v17, v80);
  sub_52C4();
  uint64_t v81 = v18;
  __chkstk_darwin(v19);
  sub_194CA8(v20, v80);
  uint64_t v21 = sub_2694(&qword_201E10);
  uint64_t v22 = sub_53D4(v21);
  __chkstk_darwin(v22);
  sub_194E88();
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v80 - v24;
  uint64_t v26 = sub_2694(&qword_201E28);
  uint64_t v27 = sub_53D4(v26);
  __chkstk_darwin(v27);
  sub_194D9C(v28, v80);
  __chkstk_darwin(v29);
  sub_15D5D0();
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v80 - v31;
  sub_2F2B8(v9);
  uint64_t v34 = v33;
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v35 = sub_1AC1E0();
  uint64_t v36 = sub_1950CC();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v36, v37, v38, v35);
  uint64_t v39 = (int *)v4(0);
  sub_9EA0((uint64_t)v32, v11 + v39[6]);
  [v7 doubleValue];
  double v41 = v40;
  uint64_t v42 = sub_7218C(v7);
  uint64_t v44 = v43;
  sub_C0448(v42, v43, v9, v41);
  sub_70548();
  uint64_t v45 = v11 + v39[10];
  *(double *)uint64_t v45 = v41;
  *(unsigned char *)(v45 + 8) = 0;
  sub_1ACE40();
  uint64_t v87 = v35;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 0, 1, v35);
  uint64_t v46 = v39[9];
  uint64_t v90 = v11;
  sub_9EA0(v0, v11 + v46);
  sub_1AC0E0();
  sub_47658();
  sub_1AC0D0();
  id v47 = [v7 start];
  if (v47)
  {
    uint64_t v48 = v47;
    sub_1AABB0();

    uint64_t v34 = 0;
  }
  uint64_t v49 = v85;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, v34, 1, v85);
  sub_194A28(v1, (uint64_t)v25);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1, v49))
  {
    sub_A068((uint64_t)v25, &qword_201E10);
  }
  else
  {
    uint64_t v51 = v80;
    uint64_t v50 = v81;
    uint64_t v52 = sub_194F30();
    v53(v52);
    sub_A068((uint64_t)v25, &qword_201E10);
    sub_1AABA0();
    id v54 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    uint64_t v44 = v50 + 8;
    v54(v51, v49);
  }
  uint64_t v56 = v88;
  uint64_t v55 = v89;
  sub_1AC0C0();
  swift_release();
  sub_1AC0B0();
  sub_FD84C();
  uint64_t v57 = v39[7];
  uint64_t v58 = v90;
  swift_release();
  *(void *)(v58 + v57) = v44;
  sub_45DC8(v86, v55);
  uint64_t v59 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v55, 1, v59) == 1)
  {
    sub_A068(v55, &qword_201E20);
    sub_194FF0();
  }
  else
  {
    id v60 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v61);
    uint64_t v63 = (void *)v62;
    sub_195094(v62, "setPunchOutUri:");

    id v64 = v60;
    uint64_t v65 = v82;
    sub_1AAC10();
    sub_1AABE0();
    uint64_t v66 = sub_194C88();
    v67(v66);
    sub_1949C4((uint64_t)v60, v65, v64);

    id v68 = [v64 dictionary];
    if (v68)
    {
      uint64_t v69 = v68;
      id v70 = self;
      id v91 = 0;
      id v71 = sub_194CE0(v70, "dataWithPropertyList:format:options:error:");
      id v72 = v91;
      if (v71)
      {
        uint64_t v73 = sub_1AAB30();
        unint64_t v75 = v74;

        sub_1AAB20(0);
        sub_1ACE40();

        sub_9F08(v73, v75);
        swift_bridgeObjectRelease();
        uint64_t v76 = v56;
        uint64_t v77 = 0;
      }
      else
      {
        unint64_t v78 = v72;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v76 = v56;
        uint64_t v77 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v76, v77, 1, v87);
    }
    else
    {
      sub_194FF0();
    }
    sub_A5C0();
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v55, v59);
  }
  sub_9EA0(v56, v58);
  sub_700E0();
}

uint64_t sub_194294(uint64_t a1, char a2, void *a3, uint64_t a4)
{
  uint64_t v78 = a4;
  uint64_t v7 = sub_1AAC20();
  uint64_t v75 = *(void *)(v7 - 8);
  uint64_t v76 = v7;
  __chkstk_darwin(v7);
  unint64_t v74 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2694(&qword_201E20);
  __chkstk_darwin(v9 - 8);
  uint64_t v80 = (uint64_t)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_1AABD0();
  uint64_t v73 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  id v72 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_2694(&qword_201E10);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v71 - v16;
  uint64_t v18 = sub_2694(&qword_201E28);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v79 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v71 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v71 - v24;
  sub_2F2B8(a2);
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v26 = 1;
  uint64_t v27 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v25, 0, 1, v27);
  uint64_t v28 = (int *)type metadata accessor for WellnessLoggingWeightParameters(0);
  sub_9EA0((uint64_t)v25, a1 + v28[6]);
  [a3 doubleValue];
  double v30 = v29;
  uint64_t v31 = sub_7218C(a3);
  double v33 = sub_C0448(v31, v32, a2, v30);
  swift_bridgeObjectRelease();
  uint64_t v34 = v28[9];
  uint64_t v81 = a1;
  uint64_t v35 = a1 + v34;
  *(double *)uint64_t v35 = v33;
  *(unsigned char *)(v35 + 8) = 0;
  sub_7218C(a3);
  if (v36)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v26 = 0;
  }
  uint64_t v37 = 1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, v26, 1, v27);
  uint64_t v38 = v81;
  sub_9EA0((uint64_t)v23, v81 + v28[8]);
  sub_1AC0E0();
  swift_allocObject();
  sub_1AC0D0();
  id v39 = [a3 start];
  if (v39)
  {
    double v40 = v39;
    sub_1AABB0();

    uint64_t v37 = 0;
  }
  uint64_t v41 = v77;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v15, v37, 1, v77);
  sub_194A28((uint64_t)v15, (uint64_t)v17);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v17, 1, v41))
  {
    sub_A068((uint64_t)v17, &qword_201E10);
  }
  else
  {
    uint64_t v42 = v72;
    uint64_t v43 = v73;
    (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v72, v17, v41);
    sub_A068((uint64_t)v17, &qword_201E10);
    sub_1AABA0();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v41);
  }
  uint64_t v44 = (uint64_t)v79;
  sub_1AC0C0();
  swift_release();
  uint64_t v45 = sub_1AC0B0();
  swift_release();
  uint64_t v46 = v28[7];
  swift_release();
  *(void *)(v38 + v46) = v45;
  uint64_t v47 = v80;
  sub_45DC8(v78, v80);
  uint64_t v48 = sub_1AAB10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v47, 1, v48) == 1)
  {
    sub_A068(v47, &qword_201E20);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v44, 1, 1, v27);
  }
  else
  {
    id v49 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
    sub_1AAAE0(v50);
    uint64_t v52 = v51;
    [v49 setPunchOutUri:v51];

    id v53 = v49;
    id v54 = v74;
    sub_1AAC10();
    uint64_t v55 = sub_1AABE0();
    uint64_t v57 = v56;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v54, v76);
    sub_1949C4(v55, v57, v53);

    id v58 = [v53 dictionary];
    if (v58)
    {
      uint64_t v59 = v58;
      id v60 = self;
      id v82 = 0;
      id v61 = [v60 dataWithPropertyList:v59 format:200 options:0 error:&v82];
      id v62 = v82;
      if (v61)
      {
        uint64_t v63 = sub_1AAB30();
        unint64_t v65 = v64;

        sub_1AAB20(0);
        sub_1ACE40();

        unint64_t v66 = v65;
        uint64_t v38 = v81;
        sub_9F08(v63, v66);

        swift_bridgeObjectRelease();
        uint64_t v67 = v44;
        uint64_t v68 = 0;
      }
      else
      {
        uint64_t v69 = v62;
        sub_1AAAB0();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v67 = v44;
        uint64_t v68 = 1;
      }
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v67, v68, 1, v27);
    }
    else
    {
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v44, 1, 1, v27);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v47, v48);
  }
  return sub_9EA0(v44, v38);
}

void sub_1949C4(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = sub_1ACDC0();
  swift_bridgeObjectRelease();
  [a3 setAceId:v4];
}

uint64_t sub_194A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_201E10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_194A90()
{
  sub_195010();
  return sub_194294(v0, v1, v2, v3);
}

void sub_194AA0()
{
}

void sub_194AD0()
{
}

void sub_194B00()
{
}

void sub_194B30()
{
}

uint64_t sub_194B6C(uint64_t a1)
{
  return sub_193630(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

void sub_194B78()
{
}

uint64_t sub_194BD8()
{
  return v0;
}

uint64_t sub_194BEC(uint64_t result)
{
  *(void *)(v2 + 88) = result;
  *(unsigned char *)(result + 16) = v4;
  *(void *)(result + 24) = v3;
  *(void *)(result + 32) = v1;
  return result;
}

uint64_t sub_194C04()
{
  sub_2E38(v0, *(void *)(v1 + 40));
  return swift_task_alloc();
}

uint64_t sub_194C38(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 1, 1, a1);
}

uint64_t sub_194C58()
{
  return sub_1AAA10();
}

uint64_t sub_194C78()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_194C88()
{
  return v0;
}

void sub_194CA8(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_194CC4(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

id sub_194CE0(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2, 200, 0, v3 - 112);
}

uint64_t sub_194D00()
{
  return 0;
}

uint64_t sub_194D10()
{
  return *(void *)(v0 - 208);
}

uint64_t sub_194D34()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, v2, 1, *(void *)(v3 - 136));
  uint64_t v4 = *(void *)(v3 - 128) + *(int *)(v1 + 32);
  return sub_9EA0(v0, v4);
}

void sub_194D7C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_194D9C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_194DBC@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return sub_1AABD0();
}

uint64_t sub_194DE8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return sub_1AABD0();
}

void sub_194E14(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 - 168);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v2, 1, 1, a1);
  int v3 = *(_DWORD *)(v1 - 156);
  sub_153CEC(v3, v2);
}

uint64_t sub_194E58()
{
  return v0;
}

unint64_t sub_194E68()
{
  return sub_2F2B8(v0);
}

void sub_194EA4(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_194EC0()
{
  *(void *)(v1 + 104) = v0;
  return swift_task_dealloc();
}

uint64_t sub_194ED8()
{
  return sub_E3FC(v1 + 80, v0);
}

uint64_t sub_194EF0(uint64_t a1)
{
  *(void *)(v2 - 136) = a1;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, 0, 1, a1);
  return type metadata accessor for WellnessLoggingGenericDatatypeParameters(0);
}

uint64_t sub_194F30()
{
  return v0;
}

uint64_t sub_194F4C()
{
  uint64_t v6 = *(int *)(v1 + 36);
  *(void *)(v3 - 128) = v2;
  uint64_t v7 = v2 + v6;
  *(void *)uint64_t v7 = v5;
  *(unsigned char *)(v7 + 8) = 0;
  return sub_7218C(v0);
}

uint64_t sub_194F74()
{
  return v0;
}

uint64_t sub_194F90()
{
  uint64_t v2 = *(void *)(v0 - 152);
  uint64_t v3 = *(void *)(v0 - 136);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v2, 1, 1, v3);
}

uint64_t sub_194FB4()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v1, v0, 1, v3);
  return sub_194A28(v1, v2);
}

uint64_t sub_194FF0()
{
  uint64_t v3 = *(void *)(v1 - 152);
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 1, 1, v3);
}

uint64_t sub_19501C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 104) = a1;
  return sub_1AAC20();
}

uint64_t sub_195034()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0, 1, 1, v1);
}

uint64_t sub_195054(uint64_t a1)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  return sub_9EA0(v1, v4);
}

id sub_195074()
{
  return v0;
}

id sub_195094(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

double sub_1950AC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(v3 - 156) = v2;
  return sub_C0448(a1, a2, v2, v5);
}

uint64_t sub_1950CC()
{
  return v0;
}

uint64_t sub_1950F4(char a1)
{
  return *(void *)&aCheckexicreate_0[8 * a1];
}

uint64_t sub_195114(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1F3958;
  v6._object = a2;
  unint64_t v4 = sub_1AD190(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 9) {
    return 9;
  }
  else {
    return v4;
  }
}

_UNKNOWN **sub_195160()
{
  return &off_1F4C38;
}

uint64_t sub_19516C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_15431C(*a1, *a2);
}

Swift::Int sub_195178()
{
  return sub_3038C(*v0);
}

uint64_t sub_195180(uint64_t a1)
{
  return sub_19D764(a1, *v1);
}

Swift::Int sub_195188(uint64_t a1)
{
  return sub_19D9A4(a1, *v1);
}

uint64_t sub_195190@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_195114(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_1951C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1950F4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1951EC(void *a1@<X8>)
{
  *a1 = &off_1F4C38;
}

uint64_t getEnumTagSinglePayload for Verb(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for Verb(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x195350);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Verb()
{
  return &type metadata for Verb;
}

unint64_t sub_19538C()
{
  unint64_t result = qword_208AD0;
  if (!qword_208AD0)
  {
    sub_B464(&qword_208AD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208AD0);
  }
  return result;
}

unint64_t sub_1953E4()
{
  unint64_t result = qword_208AE0;
  if (!qword_208AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208AE0);
  }
  return result;
}

char *sub_195430(char *a1, char *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    unsigned int v4 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    uint64_t v10 = sub_1AAA10();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v9, 1, v10))
    {
      uint64_t v11 = sub_2694(&qword_201CC8);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v8, 0, 1, v10);
    }
    uint64_t v13 = a3[6];
    long long v14 = *(_OWORD *)&a2[v13 + 24];
    *(_OWORD *)&v4[v13 + 24] = v14;
    (**(void (***)(void))(v14 - 8))();
    uint64_t v15 = a3[7];
    uint64_t v16 = &v4[v15];
    uint64_t v17 = &a2[v15];
    long long v18 = *(_OWORD *)&a2[v15 + 24];
    *(_OWORD *)&v4[v15 + 24] = v18;
    (**(void (***)(char *, char *))(v18 - 8))(&v4[v15], &a2[v15]);
    long long v19 = *((_OWORD *)v17 + 4);
    *((_OWORD *)v16 + 4) = v19;
    (**(void (***)(uint64_t, uint64_t))(v19 - 8))((uint64_t)(v16 + 40), (uint64_t)(v17 + 40));
    long long v20 = *(_OWORD *)(v17 + 104);
    *(_OWORD *)(v16 + 104) = v20;
    (**(void (***)(uint64_t, uint64_t))(v20 - 8))((uint64_t)(v16 + 80), (uint64_t)(v17 + 80));
    long long v21 = *((_OWORD *)v17 + 9);
    *((_OWORD *)v16 + 9) = v21;
    (**(void (***)(uint64_t, uint64_t))(v21 - 8))((uint64_t)(v16 + 120), (uint64_t)(v17 + 120));
    uint64_t v22 = a3[8];
    long long v23 = *(_OWORD *)&a2[v22 + 24];
    *(_OWORD *)&v4[v22 + 24] = v23;
    (**(void (***)(void))(v23 - 8))();
    uint64_t v24 = a3[10];
    *(void *)&v4[a3[9]] = *(void *)&a2[a3[9]];
    *(void *)&v4[v24] = *(void *)&a2[v24];
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_195764(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_1AAA10();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + a2[6]);
  uint64_t v6 = a1 + a2[7];
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v6);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v6 + 40);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v6 + 80);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v6 + 120);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(a1 + a2[8]);
  swift_release();

  return swift_release();
}

unsigned char *sub_19584C(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1AAA10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_2694(&qword_201CC8);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[6];
  long long v12 = *(_OWORD *)&a2[v11 + 24];
  *(_OWORD *)&a1[v11 + 24] = v12;
  (**(void (***)(void))(v12 - 8))();
  uint64_t v13 = a3[7];
  long long v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  long long v16 = *(_OWORD *)&a2[v13 + 24];
  *(_OWORD *)&a1[v13 + 24] = v16;
  (**(void (***)(unsigned char *, unsigned char *))(v16 - 8))(&a1[v13], &a2[v13]);
  long long v17 = v15[4];
  v14[4] = v17;
  (**(void (***)(uint64_t, uint64_t))(v17 - 8))((uint64_t)v14 + 40, (uint64_t)v15 + 40);
  long long v18 = *(_OWORD *)((char *)v15 + 104);
  *(_OWORD *)((char *)v14 + 104) = v18;
  (**(void (***)(uint64_t, uint64_t))(v18 - 8))((uint64_t)(v14 + 5), (uint64_t)(v15 + 5));
  long long v19 = v15[9];
  v14[9] = v19;
  (**(void (***)(uint64_t, uint64_t))(v19 - 8))((uint64_t)v14 + 120, (uint64_t)v15 + 120);
  uint64_t v20 = a3[8];
  long long v21 = *(_OWORD *)&a2[v20 + 24];
  *(_OWORD *)&a1[v20 + 24] = v21;
  (**(void (***)(void))(v21 - 8))();
  uint64_t v22 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v22] = *(void *)&a2[v22];
  swift_retain();
  swift_retain();
  return a1;
}

unsigned char *sub_195B34(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1AAA10();
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_2694(&qword_201CC8);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  sub_577C((uint64_t *)&a1[a3[6]], (uint64_t *)&a2[a3[6]]);
  uint64_t v14 = a3[7];
  uint64_t v15 = (uint64_t *)&a1[v14];
  long long v16 = (uint64_t *)&a2[v14];
  sub_577C((uint64_t *)&a1[v14], (uint64_t *)&a2[v14]);
  sub_577C(v15 + 5, v16 + 5);
  sub_577C(v15 + 10, v16 + 10);
  sub_577C(v15 + 15, v16 + 15);
  sub_577C((uint64_t *)&a1[a3[8]], (uint64_t *)&a2[a3[8]]);
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_retain();
  swift_release();
  return a1;
}

unsigned char *sub_195D38(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1AAA10();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_2694(&qword_201CC8);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  long long v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  *((void *)v13 + 4) = *((void *)v14 + 4);
  memcpy(&a1[v12], &a2[v12], 0xA0uLL);
  uint64_t v16 = a3[8];
  uint64_t v17 = a3[9];
  long long v18 = &a1[v16];
  long long v19 = &a2[v16];
  long long v20 = *(_OWORD *)v19;
  long long v21 = *((_OWORD *)v19 + 1);
  *((void *)v18 + 4) = *((void *)v19 + 4);
  *(_OWORD *)long long v18 = v20;
  *((_OWORD *)v18 + 1) = v21;
  *(void *)&a1[v17] = *(void *)&a2[v17];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  return a1;
}

unsigned char *sub_195E7C(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1AAA10();
  int v10 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_2694(&qword_201CC8);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  uint64_t v14 = a3[6];
  long long v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&a1[v14]);
  long long v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)long long v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  *((void *)v15 + 4) = *((void *)v16 + 4);
  uint64_t v18 = a3[7];
  long long v19 = &a1[v18];
  long long v20 = &a2[v18];
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&a1[v18]);
  long long v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)long long v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v21;
  *((void *)v19 + 4) = *((void *)v20 + 4);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v19 + 40));
  *(_OWORD *)(v19 + 40) = *(_OWORD *)(v20 + 40);
  *(_OWORD *)(v19 + 56) = *(_OWORD *)(v20 + 56);
  *((void *)v19 + 9) = *((void *)v20 + 9);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v19 + 80));
  long long v22 = *((_OWORD *)v20 + 6);
  *((_OWORD *)v19 + 5) = *((_OWORD *)v20 + 5);
  *((_OWORD *)v19 + 6) = v22;
  *((void *)v19 + 14) = *((void *)v20 + 14);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v19 + 120));
  *(_OWORD *)(v19 + 120) = *(_OWORD *)(v20 + 120);
  *(_OWORD *)(v19 + 136) = *(_OWORD *)(v20 + 136);
  *((void *)v19 + 19) = *((void *)v20 + 19);
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)&a1[v23]);
  long long v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  *((void *)v24 + 4) = *((void *)v25 + 4);
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_release();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_release();
  return a1;
}

uint64_t sub_1960D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1960EC);
}

uint64_t sub_1960EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2694(&qword_201CC8);
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 24) + 24);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_196184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_196198);
}

void sub_196198(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_2694(&qword_201CC8);
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  }
}

uint64_t type metadata accessor for UnavailableDataFlow()
{
  uint64_t result = qword_208B40;
  if (!qword_208B40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_196274()
{
  sub_196330();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_196330()
{
  if (!qword_201D38)
  {
    sub_1AAA10();
    unint64_t v0 = sub_1ACFD0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_201D38);
    }
  }
}

uint64_t sub_196388()
{
  type metadata accessor for UnavailableDataFlow();
  sub_197E10(&qword_201DF0, (void (*)(uint64_t))type metadata accessor for UnavailableDataFlow);

  return sub_1AAF80();
}

uint64_t sub_196414()
{
  sub_A364();
  v1[17] = v2;
  v1[18] = v0;
  uint64_t v3 = type metadata accessor for GenericButtonModel();
  v1[19] = v3;
  sub_53D4(v3);
  v1[20] = sub_A42C();
  uint64_t v4 = type metadata accessor for UnavailableDataFlow();
  v1[21] = v4;
  sub_53D4(v4);
  v1[22] = sub_A42C();
  uint64_t v5 = sub_2694(&qword_201E20);
  sub_53D4(v5);
  v1[23] = sub_A42C();
  uint64_t v6 = sub_1AAB10();
  v1[24] = v6;
  sub_A19C(v6);
  v1[25] = v7;
  v1[26] = sub_A42C();
  uint64_t v8 = sub_1AB0A0();
  v1[27] = v8;
  sub_A19C(v8);
  v1[28] = v9;
  v1[29] = sub_A220();
  v1[30] = swift_task_alloc();
  uint64_t v10 = sub_1AB3D0();
  v1[31] = v10;
  sub_A19C(v10);
  v1[32] = v11;
  v1[33] = sub_A42C();
  uint64_t v12 = sub_2694(&qword_201E28);
  sub_53D4(v12);
  v1[34] = sub_A42C();
  uint64_t v13 = sub_1AABD0();
  v1[35] = v13;
  sub_A19C(v13);
  v1[36] = v14;
  v1[37] = sub_A42C();
  uint64_t v15 = sub_2694(&qword_201CC8);
  sub_53D4(v15);
  v1[38] = sub_A220();
  v1[39] = swift_task_alloc();
  uint64_t v16 = sub_1AAA10();
  v1[40] = v16;
  sub_A19C(v16);
  v1[41] = v17;
  v1[42] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v18, v19, v20);
}

uint64_t sub_19662C()
{
  sub_197EB8();
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 320);
  sub_197CF0(*(void *)(v0 + 144) + *(int *)(*(void *)(v0 + 168) + 20), v1);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v2) == 1)
  {
    sub_2EF0C(*(void *)(v0 + 312), &qword_201CC8);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 328);
    uint64_t v4 = *(void *)(v0 + 336);
    uint64_t v14 = *(void *)(v0 + 320);
    uint64_t v6 = *(void *)(v0 + 288);
    (*(void (**)(uint64_t, void))(v5 + 32))(v4, *(void *)(v0 + 312));
    sub_1ABFA0();
    swift_allocObject();
    sub_1ABF90();
    sub_1AA9F0();
    sub_1AABA0();
    uint64_t v7 = *(void (**)(uint64_t))(v6 + 8);
    uint64_t v8 = sub_197EC4();
    v7(v8);
    sub_1ABF70();
    swift_release();
    sub_1AA9C0();
    sub_1AABA0();
    uint64_t v9 = sub_197EC4();
    v7(v9);
    sub_1ABF60();
    swift_release();
    uint64_t v3 = sub_1ABF80();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v14);
  }
  *(void *)(v0 + 344) = v3;
  uint64_t v10 = *(void *)(v0 + 272);
  sub_2F2B8(**(unsigned char **)(v0 + 144));
  sub_1ACE40();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v10, 0, 1, v11);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v12;
  void *v12 = v0;
  v12[1] = sub_196878;
  return sub_4F658();
}

uint64_t sub_196878()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 272);
  uint64_t v6 = *v1;
  sub_A304();
  *uint64_t v7 = v6;
  *(void *)(v9 + 360) = v8;
  *(void *)(v9 + 368) = v0;
  swift_task_dealloc();
  sub_2EF0C(v5, &qword_201E28);
  sub_A4F0();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_196978()
{
  sub_197E9C();
  sub_197EB8();
  uint64_t v1 = (void *)v0[45];
  uint64_t v2 = (void *)v0[38];
  uint64_t v4 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v6 = v0[27];
  uint64_t v5 = v0[28];
  uint64_t v7 = v0[23];
  uint64_t v56 = v0[40];
  uint64_t v57 = v0[24];
  uint64_t v8 = (char *)v0[18];
  sub_1AB070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
  sub_1AB3C0();
  id v9 = [v1 catId];
  sub_1ACDD0();

  sub_1AB380();
  char v10 = *v8;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v2, 1, 1, v56);
  sub_153CEC(v10, v2);
  sub_2EF0C((uint64_t)v2, &qword_201CC8);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v57) == 1)
  {
    sub_2EF0C(v0[23], &qword_201E20);
LABEL_10:
    uint64_t v43 = (void *)v0[45];
    uint64_t v44 = (void *)(v0[18] + *(int *)(v0[21] + 32));
    sub_2E38(v44, v44[3]);
    sub_2694(&qword_202588);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_1AF530;
    *(void *)(v45 + 32) = v43;
    uint64_t v60 = v45;
    sub_1ACEF0();
    v0[49] = v60;
    id v46 = v43;
    swift_task_alloc();
    sub_250E0();
    v0[50] = v47;
    *uint64_t v47 = v48;
    v47[1] = sub_19710C;
    sub_14F4C4();
    return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v49, v50, v51, v52, v53);
  }
  uint64_t v12 = v0[21];
  uint64_t v11 = v0[22];
  uint64_t v13 = v0[18];
  (*(void (**)(void, void, void))(v0[25] + 32))(v0[26], v0[23], v0[24]);
  sub_2E38((void *)(v13 + *(int *)(v12 + 24)), *(void *)(v13 + *(int *)(v12 + 24) + 24));
  uint64_t v14 = sub_250B4();
  v15(v14);
  sub_2E38(v0 + 2, v0[5]);
  char v16 = sub_1AB040();
  sub_197D58(v13, v11, (void (*)(void))type metadata accessor for UnavailableDataFlow);
  uint64_t v17 = v0[22];
  if (v16)
  {
    sub_197DB8(v0[22], (void (*)(void))type metadata accessor for UnavailableDataFlow);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2));
  }
  else
  {
    sub_2E38((void *)(v17 + *(int *)(v12 + 24)), *(void *)(v17 + *(int *)(v12 + 24) + 24));
    uint64_t v18 = sub_250B4();
    v19(v18);
    sub_2E38(v0 + 7, v0[10]);
    char v20 = sub_1AB030();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 7));
    sub_197DB8(v17, (void (*)(void))type metadata accessor for UnavailableDataFlow);
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)(v0 + 2));
    if ((v20 & 1) == 0)
    {
      (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
      goto LABEL_10;
    }
  }
  id v58 = (void *)v0[45];
  uint64_t v22 = v0[25];
  uint64_t v21 = v0[26];
  uint64_t v23 = v0[24];
  uint64_t v24 = (uint64_t *)v0[20];
  uint64_t v25 = v0[21];
  uint64_t v27 = v0[18];
  uint64_t v26 = v0[19];
  uint64_t v28 = sub_C0D54(0x616548206E65704FLL, 0xEB0000000068746CLL, 0x6C6165486E65706FLL, (void *)0xED00007070416874);
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))((char *)v24 + *(int *)(v26 + 20), v21, v23);
  *uint64_t v24 = v28;
  v24[1] = v30;
  sub_2E38((void *)(v27 + *(int *)(v25 + 32)), *(void *)(v27 + *(int *)(v25 + 32) + 24));
  v0[15] = type metadata accessor for WellnessSnippets();
  v0[16] = sub_197E10((unint64_t *)&qword_202590, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  uint64_t v31 = sub_B5B0(v0 + 12);
  sub_197D58((uint64_t)v24, (uint64_t)v31, (void (*)(void))type metadata accessor for GenericButtonModel);
  swift_storeEnumTagMultiPayload();
  sub_2694(&qword_202588);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_1AF530;
  *(void *)(v32 + 32) = v58;
  uint64_t v59 = v32;
  sub_1ACEF0();
  v0[47] = v59;
  id v33 = v58;
  swift_task_alloc();
  sub_250E0();
  v0[48] = v34;
  *uint64_t v34 = v35;
  v34[1] = sub_196F10;
  sub_14F4C4();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v36, v37, v38, v39, v40, v41);
}

uint64_t sub_196F10()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 96;
  uint64_t v4 = *v0;
  sub_A304();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_196FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_197E9C();
  sub_197EB8();
  uint64_t v16 = *(void *)(v14 + 200);
  uint64_t v15 = *(void *)(v14 + 208);
  uint64_t v17 = *(void *)(v14 + 192);
  uint64_t v18 = *(void *)(v14 + 160);

  swift_release();
  sub_197DB8(v18, (void (*)(void))type metadata accessor for GenericButtonModel);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  uint64_t v19 = sub_197E58();
  v20(v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_7F3CC();
  sub_14F4C4();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_19710C()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1971F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_197E9C();
  sub_197EB8();

  swift_release();
  uint64_t v15 = sub_197E58();
  v16(v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_7F3CC();
  sub_14F4C4();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1972C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_197E9C();
  sub_197EB8();
  uint64_t v24 = v14[23];
  uint64_t v25 = v14[22];
  uint64_t v26 = v14[20];
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  sub_14F4C4();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, v24, v25, v26, a12, a13, a14);
}

uint64_t sub_1973B0()
{
  sub_A364();
  v1[42] = v2;
  v1[43] = v0;
  uint64_t v3 = type metadata accessor for UnavailableDataFlow();
  sub_53D4(v3);
  v1[44] = sub_A42C();
  uint64_t v4 = sub_1AC800();
  v1[45] = v4;
  sub_A19C(v4);
  v1[46] = v5;
  v1[47] = sub_A220();
  v1[48] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_197468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_197E9C();
  a21 = v23;
  a22 = v24;
  sub_197EB8();
  a20 = v22;
  uint64_t v25 = v22[48];
  uint64_t v26 = v22[45];
  uint64_t v27 = v22[46];
  uint64_t v29 = v22[43];
  uint64_t v28 = v22[44];
  uint64_t v30 = sub_1AC7D0();
  v22[49] = v30;
  swift_beginAccess();
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  v22[50] = v31;
  v22[51] = (v27 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v31(v25, v30, v26);
  sub_197D58(v29, v28, (void (*)(void))type metadata accessor for UnavailableDataFlow);
  uint64_t v32 = sub_1AC7F0();
  os_log_type_t v33 = sub_1ACF50();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = v22[46];
    uint64_t v47 = v22[45];
    uint64_t v48 = v22[48];
    uint64_t v35 = (char *)v22[44];
    uint64_t v36 = swift_slowAlloc();
    a11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136315394;
    v22[40] = sub_4A278(0xD000000000000013, 0x80000000001B5F40, &a11);
    sub_1ACFE0();
    *(_WORD *)(v36 + 12) = 2080;
    unint64_t v37 = sub_2F2B8(*v35);
    v22[41] = sub_4A278(v37, v38, &a11);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    sub_197DB8((uint64_t)v35, (void (*)(void))type metadata accessor for UnavailableDataFlow);
    _os_log_impl(&def_342E4, v32, v33, "%s for %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v39(v48, v47);
  }
  else
  {
    uint64_t v40 = v22[48];
    uint64_t v41 = v22[45];
    uint64_t v42 = v22[46];
    sub_197DB8(v22[44], (void (*)(void))type metadata accessor for UnavailableDataFlow);

    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v39(v40, v41);
  }
  v22[52] = v39;
  swift_task_alloc();
  sub_250E0();
  v22[53] = v43;
  *uint64_t v43 = v44;
  v43[1] = sub_197728;
  sub_14F4C4();
  return sub_196414();
}

uint64_t sub_197728()
{
  sub_A364();
  sub_A1B4();
  sub_A650();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_A304();
  *uint64_t v5 = v4;
  *(void *)(v6 + 432) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_197800()
{
  sub_197EB8();
  sub_E3FC(v0 + 176, v0 + 216);
  uint64_t v1 = swift_allocObject();
  sub_24D80((long long *)(v0 + 216), v1 + 16);
  sub_1AB350();
  sub_1AAE40();
  swift_allocObject();
  *(void *)(v0 + 312) = sub_1AAE30();
  sub_1AB120();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 176);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v2();
}

uint64_t sub_197938()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v4 = *(void *)(v0 + 360);
  swift_beginAccess();
  v1(v3, v2, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF60();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 304) = v9;
    sub_1ACFE0();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_342E4, v5, v6, "%@", v7, 0xCu);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0 + 416))(*(void *)(v0 + 376), *(void *)(v0 + 360));
  sub_757A0((uint64_t *)(v0 + 16));
  sub_9BA4();
  sub_1AB120();
  sub_9BF0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v10();
}

uint64_t sub_197B88()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24C20;
  return sub_1973B0();
}

uint64_t sub_197C20()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_197C58()
{
  sub_A364();
  uint64_t v3 = v2;
  swift_task_alloc();
  sub_250E0();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v5;
  v4[1] = sub_24C20;
  return sub_9C024(v3, v0 + 16);
}

uint64_t sub_197CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_201CC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_197D58(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_20688();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_197DB8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_197E10(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_197E58()
{
  return *(void *)(v0 + 264);
}

uint64_t sub_197EC4()
{
  return v0;
}

uint64_t sub_197ED8(uint64_t a1)
{
  v1[9] = a1;
  uint64_t v2 = sub_1AC800();
  v1[10] = v2;
  v1[11] = *(void *)(v2 - 8);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  sub_2694(&qword_201CC8);
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_197FD8, 0, 0);
}

uint64_t sub_197FD8()
{
  uint64_t v40 = v0;
  if (isMedicationRequest(from:)())
  {
    __int16 v1 = 122;
  }
  else
  {
    sub_D895C();
    __int16 v1 = v2;
    if (v2 == 270)
    {
      uint64_t v4 = v0[11];
      uint64_t v3 = v0[12];
      uint64_t v5 = v0[10];
      uint64_t v6 = sub_1AC7D0();
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
      uint64_t v7 = sub_1AC7F0();
      os_log_type_t v8 = sub_1ACF60();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&def_342E4, v7, v8, "Unable to log analytics event - nil datatype", v9, 2u);
        swift_slowDealloc();
      }
      uint64_t v11 = v0[11];
      uint64_t v10 = v0[12];
      uint64_t v12 = v0[10];

      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      goto LABEL_15;
    }
  }
  unsigned __int8 v13 = sub_19D5A4(v1);
  if (v13 != 205)
  {
    Class v14 = sub_31C30(v13);
    v0[15] = v14;
    if (v14)
    {
      id v15 = [objc_allocWithZone((Class)HKHealthStore) init];
      v0[16] = v15;
      v0[17] = [objc_allocWithZone((Class)HealthAppScribeAnalyticEventManager) init];
      v0[18] = sub_1ACDC0();
      uint64_t v16 = sub_1ABB60();
      v0[19] = qword_1B6020[(char)sub_195114(v16, v17)];
      uint64_t v18 = v0[14];
      sub_D90F8();
      sub_1988B8(v18);
      sub_520C(v18);
      v0[20] = sub_1ACDC0();
      swift_bridgeObjectRelease();
      id v19 = sub_19865C();
      uint64_t v20 = (void *)HAScribeAnalyticUserActionAssistantService;
      v0[21] = v19;
      v0[22] = v20;
      id v21 = v20;
      uint64_t v22 = (void *)swift_task_alloc();
      v0[23] = v22;
      *uint64_t v22 = v0;
      v22[1] = sub_198460;
      return isSiriAuthorizedToAccessHealthData(store:)(v15);
    }
  }
  uint64_t v23 = v0[13];
  uint64_t v24 = v0[10];
  uint64_t v25 = v0[11];
  uint64_t v26 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v26, v24);
  uint64_t v27 = sub_1AC7F0();
  os_log_type_t v28 = sub_1ACF60();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v30 = v0[13];
  uint64_t v31 = v0[10];
  uint64_t v32 = v0[11];
  if (v29)
  {
    uint64_t v38 = v0[13];
    os_log_type_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v33 = 136315138;
    uint64_t v34 = sub_1771BC(v1);
    v0[8] = sub_4A278(v34, v35, &v39);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_342E4, v27, v28, "Unable to log analytics event - %s cannot be converted to HKObjectType", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v38, v31);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
  }
LABEL_15:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

uint64_t sub_198460(char a1)
{
  *(unsigned char *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_198560, 0, 0);
}

uint64_t sub_198560()
{
  char v1 = *(unsigned char *)(v0 + 192);
  __int16 v2 = *(void **)(v0 + 168);
  uint64_t v3 = *(void **)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v4 = *(void **)(v0 + 160);
  uint64_t v7 = *(void **)(v0 + 136);
  uint64_t v6 = *(void **)(v0 + 144);
  os_log_type_t v8 = *(void **)(v0 + 120);
  uint64_t v9 = *(void **)(v0 + 128);
  BYTE1(v12) = sub_D2C5C();
  LOBYTE(v12) = v1;
  objc_msgSend(v7, "submitEventWithDataType:requestCategory:requestType:requestInterval:hourOfDay:userAction:hasHealthDataAuthorization:isFirstInvocation:", v8, v6, v5, v4, v2, v3, v12);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

id sub_19865C()
{
  uint64_t v0 = sub_1AAD10();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1AAD30();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1AABD0();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AABC0();
  sub_1AAD00();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Calendar.Component.hour(_:), v0);
  uint64_t v12 = sub_1AAD20();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v13 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v12];
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v13;
}

uint64_t sub_1988B8(uint64_t a1)
{
  uint64_t v2 = sub_1AABD0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v24 - v7;
  uint64_t v9 = sub_2694(&qword_201CC8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1AAA10();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_197CF0(a1, (uint64_t)v11);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1, v12) == 1)
  {
    sub_520C((uint64_t)v11);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  sub_1AA9C0();
  sub_1AAB40();
  double v18 = v17;
  id v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v8, v2);
  sub_1AA9F0();
  sub_1AAB40();
  double v21 = v20;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v6, v2);
  double v23 = round((v18 - v21) / 3600.0);
  if ((~*(void *)&v23 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v23 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v23 < 9.22337204e18)
  {
    v24[1] = (uint64_t)v23;
    uint64_t v16 = sub_1AD2C0();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return v16;
  }
LABEL_10:
  __break(1u);
  return result;
}

void __swiftcall WatchRingsSnippet.init(model:)(WellnessFlowPlugin::WatchRingsSnippet *__return_ptr retstr, WellnessFlowPlugin::WatchRingsModel *model)
{
  Swift::Double value = model->exerciseGoalValue.value;
  Swift::Bool is_nil = model->exerciseGoalValue.is_nil;
  Swift::Double v4 = model->exerciseTotalValue.value;
  Swift::Bool v5 = model->exerciseTotalValue.is_nil;
  Swift::Double v6 = model->moveGoalValue.value;
  Swift::Bool v7 = model->moveGoalValue.is_nil;
  Swift::Double v8 = model->moveTotalValue.value;
  Swift::Bool v9 = model->moveTotalValue.is_nil;
  Swift::Double v10 = model->standGoalValue.value;
  Swift::Bool v11 = model->standGoalValue.is_nil;
  Swift::Double v12 = model->standTotalValue.value;
  Swift::Bool v13 = model->standTotalValue.is_nil;
  retstr->model.exerciseGoalValue.Swift::Double value = value;
  retstr->model.exerciseGoalValue.Swift::Bool is_nil = is_nil;
  retstr->model.exerciseTotalValue.Swift::Double value = v4;
  retstr->model.exerciseTotalValue.Swift::Bool is_nil = v5;
  retstr->model.moveGoalValue.Swift::Double value = v6;
  retstr->model.moveGoalValue.Swift::Bool is_nil = v7;
  retstr->model.moveTotalValue.Swift::Double value = v8;
  retstr->model.moveTotalValue.Swift::Bool is_nil = v9;
  retstr->model.standGoalValue.Swift::Double value = v10;
  retstr->model.standGoalValue.Swift::Bool is_nil = v11;
  retstr->model.standTotalValue.Swift::Double value = v12;
  retstr->model.standTotalValue.Swift::Bool is_nil = v13;
}

uint64_t WatchRingsSnippet.body.getter()
{
  uint64_t v0 = sub_2694(&qword_208BC8);
  unint64_t v1 = sub_198D30();

  return SnippetBody.init(content:)(sub_198C90, 0, v0, v1);
}

double sub_198C90@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1ACBC0();
  uint64_t KeyPath = swift_getKeyPath();
  sub_1ACC30();
  sub_1AC840();
  *(void *)a1 = KeyPath;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  double result = *(double *)&v9;
  *(_OWORD *)(a1 + 48) = v9;
  return result;
}

unint64_t sub_198D30()
{
  unint64_t result = qword_208BD0;
  if (!qword_208BD0)
  {
    sub_B464(&qword_208BC8);
    sub_198DAC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208BD0);
  }
  return result;
}

unint64_t sub_198DAC()
{
  unint64_t result = qword_208BD8;
  if (!qword_208BD8)
  {
    sub_B464(&qword_208BE0);
    sub_198E4C();
    sub_B56C(&qword_208BF0, &qword_208BF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208BD8);
  }
  return result;
}

unint64_t sub_198E4C()
{
  unint64_t result = qword_208BE8;
  if (!qword_208BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208BE8);
  }
  return result;
}

uint64_t sub_198E98()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_198EB4()
{
  return WatchRingsSnippet.body.getter();
}

void *initializeWithCopy for WatchRingsModel(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x59uLL);
}

uint64_t getEnumTagSinglePayload for WatchRingsModel(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WatchRingsModel(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 89) = v3;
  return result;
}

ValueMetadata *type metadata accessor for WatchRingsSnippet()
{
  return &type metadata for WatchRingsSnippet;
}

uint64_t sub_198F48()
{
  return sub_B56C(&qword_208C00, &qword_208C08);
}

uint64_t sub_198F84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1AC8B0();
  *a1 = result;
  return result;
}

uint64_t sub_198FB0()
{
  return sub_1AC8C0();
}

uint64_t static UsoEntity_common_MedicationEvent.builder(dateTime:completionStatus:medSchedule:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1ABAC0();
  swift_allocObject();
  uint64_t v6 = sub_1ABAB0();
  if (a1)
  {
    swift_retain();
    sub_1ABA90();
    swift_release();
  }
  if (a2)
  {
    swift_retain();
    sub_1ABAA0();
    swift_release();
  }
  if (a3)
  {
    swift_retain();
    sub_1ABA80();
    swift_release();
  }
  return v6;
}

uint64_t static UsoEntity_common_MedicationEvent.with(dateTime:completionStatus:medSchedule:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static UsoEntity_common_MedicationEvent.builder(dateTime:completionStatus:medSchedule:)(a1, a2, a3);
  sub_1AB760();
  sub_1AB920();
  sub_1AB7D0();
  swift_release();
  swift_release();
  return v4;
}

void *sub_1990F8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1AABD0();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v27 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2694(&qword_201E10) - 8;
  __chkstk_darwin(v8);
  Swift::Bool v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v28 = a2;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v25[2] = v2;
    uint64_t v26 = (void (**)(uint64_t, uint64_t))(v6 + 8);
    uint64_t v14 = *(void *)(v9 + 72);
    v25[1] = a1;
    swift_bridgeObjectRetain();
    uint64_t v15 = &_swiftEmptyArrayStorage;
    uint64_t v16 = (uint64_t)v27;
    do
    {
      sub_9FA8(v13, (uint64_t)v11, &qword_201E10);
      if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v11, 1, v5) == 1)
      {
        sub_6F194((uint64_t)v11, &qword_201E10);
      }
      else
      {
        sub_19B8FC(v16);
        sub_1AAB50();
        uint64_t v18 = v17;
        id v19 = *v26;
        (*v26)(v16, v5);
        v19((uint64_t)v11, v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_49968(0, v15[2] + 1, 1, (uint64_t)v15);
          uint64_t v15 = v22;
        }
        unint64_t v21 = v15[2];
        unint64_t v20 = v15[3];
        if (v21 >= v20 >> 1)
        {
          sub_49968(v20 > 1, v21 + 1, 1, (uint64_t)v15);
          uint64_t v15 = v23;
        }
        v15[2] = v21 + 1;
        v15[v21 + 4] = v18;
      }
      v13 += v14;
      --v12;
    }
    while (v12);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return &_swiftEmptyArrayStorage;
  }
  return v15;
}

void sub_1993BC()
{
  sub_A638();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_2694(&qword_201E10);
  uint64_t v9 = sub_53D4(v8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v32 - v17;
  __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v32 - v19;
  uint64_t v21 = sub_1AABD0();
  uint64_t v33 = v7;
  uint64_t v22 = 0;
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v21) != 1)
  {
    sub_9FA8(v33, (uint64_t)v20, &qword_201E10);
    sub_A208((uint64_t)v20, 1, v21);
    if (v23)
    {
      __break(1u);
      goto LABEL_21;
    }
    sub_1AC100();
    uint64_t v22 = sub_1AC090();
    sub_A5C0();
    sub_19C9A4();
    v24();
  }
  sub_A208(v5, 1, v21);
  if (v23)
  {
    uint64_t v25 = 0;
    goto LABEL_9;
  }
  sub_9FA8(v5, (uint64_t)v18, &qword_201E10);
  sub_A208((uint64_t)v18, 1, v21);
  if (v23)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_1AC100();
  uint64_t v25 = sub_1AC090();
  sub_A5C0();
  sub_19C9A4();
  v26();
LABEL_9:
  sub_A208(v3, 1, v21);
  if (!v23)
  {
    sub_9FA8(v3, (uint64_t)v15, &qword_201E10);
    sub_A208((uint64_t)v15, 1, v21);
    if (!v23)
    {
      sub_1AC100();
      uint64_t v27 = sub_1AC090();
      sub_A5C0();
      sub_19C9A4();
      v28();
      goto LABEL_14;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v27 = 0;
LABEL_14:
  sub_A208(v1, 1, v21);
  if (v23)
  {
    uint64_t v29 = 0;
LABEL_19:
    type metadata accessor for WellnessTime.Builder(0);
    swift_allocObject();
    sub_1599CC();
    sub_159A1C(v22);
    swift_release();
    sub_159A60(v25);
    swift_release();
    sub_159AA4(v27);
    swift_release();
    uint64_t v31 = (void *)sub_159AE8(v29);
    swift_release();
    type metadata accessor for WellnessTime(0);
    swift_allocObject();
    sub_159BB0(v31);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_6F194(v1, &qword_201E10);
    sub_6F194(v3, &qword_201E10);
    sub_6F194(v5, &qword_201E10);
    sub_6F194(v33, &qword_201E10);
    sub_A56C();
    return;
  }
  sub_9FA8(v1, (uint64_t)v12, &qword_201E10);
  sub_A208((uint64_t)v12, 1, v21);
  if (!v23)
  {
    sub_1AC100();
    uint64_t v29 = sub_1AC090();
    sub_A5C0();
    sub_19C9A4();
    v30();
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_1997D0()
{
  unsigned __int8 v0 = sub_19C12C();
  return (v0 > 6u) | (0x38u >> v0) & 1;
}

uint64_t sub_199804()
{
  *(double *)&uint64_t result = COERCE_DOUBLE(sub_19B494());
  if ((v1 & 1) == 0) {
    *(double *)&uint64_t result = fabs(*(double *)&result / 60.0);
  }
  return result;
}

uint64_t sub_199840@<X0>(uint64_t a1@<X8>)
{
  char v2 = sub_19C12C();
  if (v2 == 6)
  {
    uint64_t v3 = 1;
  }
  else
  {
    sub_F14CC(v2);
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v3 = 0;
  }
  uint64_t v4 = sub_1AC1E0();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, v3, 1, v4);
}

void sub_1998BC()
{
  sub_A638();
  uint64_t v6 = sub_2694(&qword_201E10);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_98794();
  __chkstk_darwin(v8);
  uint64_t v9 = sub_19C828();
  sub_52C4();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_19C76C();
  __chkstk_darwin(v13);
  sub_19C74C();
  __chkstk_darwin(v14);
  sub_19C808();
  sub_A208(v4, 1, v9);
  if (v17)
  {
    uint64_t v15 = v4;
LABEL_7:
    sub_6F194(v15, &qword_201E10);
    goto LABEL_8;
  }
  uint64_t v16 = sub_19C72C();
  ((void (*)(uint64_t))v5)(v16);
  sub_19B630(v1);
  sub_A208(v1, 1, v9);
  if (v17)
  {
    sub_7F388();
    v18();
    uint64_t v15 = v1;
    goto LABEL_7;
  }
  sub_19C75C();
  v5();
  uint64_t v19 = sub_19B6A0(v0, v2);
  if ((v20 & 1) != 0 || v19 != 6)
  {
    uint64_t v22 = *(void (**)(void))(v11 + 8);
    sub_7F388();
    v22();
    sub_7F388();
    v22();
  }
  else
  {
    sub_19B8FC(v3);
    sub_19C974();
    uint64_t v21 = *(void (**)(void))(v11 + 8);
    sub_7F388();
    v21();
    sub_7F388();
    v21();
    sub_7F388();
    v21();
  }
LABEL_8:
  sub_A56C();
}

void sub_199AA4()
{
  sub_A638();
  uint64_t v5 = (void (*)(void))sub_1AAD30();
  sub_52C4();
  __chkstk_darwin(v6);
  sub_19C914(v7, v46[0]);
  uint64_t v8 = sub_2694(&qword_204FF0);
  uint64_t v9 = sub_53D4(v8);
  __chkstk_darwin(v9);
  sub_19C788(v10, v46[0]);
  uint64_t v11 = sub_2694(&qword_204FF8);
  uint64_t v12 = sub_53D4(v11);
  __chkstk_darwin(v12);
  sub_19C888(v13, v46[0]);
  sub_52C4();
  v46[2] = v15;
  v46[3] = v14;
  __chkstk_darwin(v14);
  sub_19C930(v16, v46[0]);
  uint64_t v17 = sub_2694(&qword_201E10);
  uint64_t v18 = sub_53D4(v17);
  __chkstk_darwin(v18);
  sub_19C868(v19, v46[0]);
  __chkstk_darwin(v20);
  uint64_t v47 = (char *)v46 - v21;
  sub_A358();
  __chkstk_darwin(v22);
  sub_19C7A4();
  __chkstk_darwin(v23);
  sub_19C848();
  sub_52C4();
  uint64_t v25 = v24;
  __chkstk_darwin(v26);
  sub_DBAB8();
  __chkstk_darwin(v27);
  sub_CEB2C();
  __chkstk_darwin(v28);
  sub_19C7E8();
  sub_5B65C(v3);
  if (v32)
  {
    uint64_t v29 = &qword_201E10;
    uint64_t v30 = v3;
  }
  else
  {
    uint64_t v31 = sub_19C708();
    ((void (*)(uint64_t))v5)(v31);
    sub_19B630(v1);
    sub_5B65C(v1);
    if (v32)
    {
      sub_556DC();
      v33();
      uint64_t v29 = &qword_201E10;
      uint64_t v30 = v1;
    }
    else
    {
      sub_19C7B4();
      v5();
      uint64_t v34 = sub_19B6A0(v4, v0);
      if ((v35 & 1) != 0 || v34 != 6)
      {
        uint64_t v43 = *(void (**)(void))(v25 + 8);
        sub_556DC();
        v43();
        sub_556DC();
        v43();
        goto LABEL_8;
      }
      uint64_t v36 = sub_19C8D4();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v46[5], 1, 1, v36);
      sub_19C8B4();
      sub_1AAA90();
      sub_19AB1C();
      sub_19B8FC(v2);
      uint64_t v37 = (uint64_t)v47;
      sub_19C7C4();
      uint64_t v38 = *(void (**)(void))(v25 + 8);
      sub_556DC();
      v38();
      sub_E558();
      v39();
      uint64_t v40 = v48;
      sub_9FA8(v37, v48, &qword_201E10);
      sub_5B65C(v40);
      if (!v32)
      {
        sub_19BC08(v4, v0);
        sub_6F194(v37, &qword_201E10);
        uint64_t v44 = sub_19C6F4();
        v45(v44);
        sub_556DC();
        v38();
        sub_556DC();
        v38();
        sub_556DC();
        v38();
        goto LABEL_8;
      }
      sub_6F194(v37, &qword_201E10);
      uint64_t v41 = sub_19C6F4();
      v42(v41);
      sub_556DC();
      v38();
      sub_556DC();
      v38();
      uint64_t v30 = sub_F1384();
    }
  }
  sub_6F194(v30, v29);
LABEL_8:
  sub_A56C();
}

void sub_199EC8()
{
  sub_A638();
  uint64_t v6 = sub_2694(&qword_201E10);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_98794();
  __chkstk_darwin(v8);
  uint64_t v9 = sub_19C828();
  sub_52C4();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_19C76C();
  __chkstk_darwin(v13);
  sub_19C74C();
  __chkstk_darwin(v14);
  sub_19C808();
  sub_A208(v4, 1, v9);
  if (v17)
  {
    uint64_t v15 = v4;
LABEL_7:
    sub_6F194(v15, &qword_201E10);
    goto LABEL_8;
  }
  uint64_t v16 = sub_19C72C();
  ((void (*)(uint64_t))v5)(v16);
  sub_19B630(v1);
  sub_A208(v1, 1, v9);
  if (v17)
  {
    sub_7F388();
    v18();
    uint64_t v15 = v1;
    goto LABEL_7;
  }
  sub_19C75C();
  v5();
  uint64_t v19 = sub_19B6A0(v0, v2);
  if ((v20 & 1) != 0 || (unint64_t)(v19 - 31) < 0xFFFFFFFFFFFFFFFCLL)
  {
    uint64_t v22 = *(void (**)(void))(v11 + 8);
    sub_7F388();
    v22();
    sub_7F388();
    v22();
  }
  else
  {
    sub_19B8FC(v3);
    sub_19C974();
    uint64_t v21 = *(void (**)(void))(v11 + 8);
    sub_7F388();
    v21();
    sub_7F388();
    v21();
    sub_7F388();
    v21();
  }
LABEL_8:
  sub_A56C();
}

void sub_19A0B4()
{
  sub_A638();
  uint64_t v56 = v5;
  uint64_t v57 = v6;
  uint64_t v7 = (void (*)(void))sub_1AAD30();
  sub_52C4();
  __chkstk_darwin(v8);
  sub_53E0();
  uint64_t v52 = v9;
  uint64_t v10 = sub_2694(&qword_204FF0);
  uint64_t v11 = sub_53D4(v10);
  __chkstk_darwin(v11);
  sub_53E0();
  uint64_t v50 = v12;
  uint64_t v13 = sub_2694(&qword_204FF8);
  uint64_t v14 = sub_53D4(v13);
  __chkstk_darwin(v14);
  sub_53E0();
  uint64_t v49 = v15;
  sub_1AAAA0();
  sub_52C4();
  uint64_t v54 = v17;
  uint64_t v55 = v16;
  __chkstk_darwin(v16);
  sub_19C788(v18, v48[0]);
  uint64_t v19 = sub_2694(&qword_201E10);
  uint64_t v20 = sub_53D4(v19);
  __chkstk_darwin(v20);
  uint64_t v53 = (uint64_t)v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A358();
  __chkstk_darwin(v22);
  uint64_t v51 = (char *)v48 - v23;
  sub_A358();
  __chkstk_darwin(v24);
  sub_19C7A4();
  __chkstk_darwin(v25);
  sub_19C848();
  sub_52C4();
  uint64_t v27 = v26;
  __chkstk_darwin(v28);
  sub_DBAB8();
  __chkstk_darwin(v29);
  sub_CEB2C();
  __chkstk_darwin(v30);
  sub_19C7E8();
  sub_5B65C(v3);
  if (v34)
  {
    uint64_t v31 = &qword_201E10;
    uint64_t v32 = v3;
LABEL_12:
    sub_6F194(v32, v31);
    goto LABEL_13;
  }
  uint64_t v33 = sub_19C708();
  ((void (*)(uint64_t))v7)(v33);
  sub_19B630(v1);
  sub_5B65C(v1);
  if (v34)
  {
    sub_556DC();
    v35();
    uint64_t v31 = &qword_201E10;
    uint64_t v32 = v1;
    goto LABEL_12;
  }
  sub_19C7B4();
  v7();
  uint64_t v36 = sub_19B6A0(v4, v0);
  if ((v37 & 1) != 0 || (unint64_t)(v36 - 31) < 0xFFFFFFFFFFFFFFFCLL)
  {
    uint64_t v45 = *(void (**)(void))(v27 + 8);
    sub_556DC();
    v45();
    sub_556DC();
    v45();
    goto LABEL_13;
  }
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v49, 1, 1, v48[1]);
  uint64_t v38 = sub_1AAD60();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v50, 1, 1, v38);
  sub_19C694();
  sub_19C8B4();
  sub_1AAA90();
  sub_19AB1C();
  sub_19B8FC(v2);
  uint64_t v39 = (uint64_t)v51;
  sub_19C7C4();
  uint64_t v40 = *(void (**)(void))(v27 + 8);
  sub_556DC();
  v40();
  sub_E558();
  v41();
  uint64_t v42 = v53;
  sub_9FA8(v39, v53, &qword_201E10);
  sub_5B65C(v42);
  if (v34)
  {
    sub_6F194(v39, &qword_201E10);
    uint64_t v43 = sub_19C6F4();
    v44(v43);
    sub_556DC();
    v40();
    sub_556DC();
    v40();
    uint64_t v32 = sub_F1384();
    goto LABEL_12;
  }
  sub_19BC08(v4, v0);
  sub_6F194(v39, &qword_201E10);
  uint64_t v46 = sub_19C6F4();
  v47(v46);
  sub_556DC();
  v40();
  sub_556DC();
  v40();
  sub_556DC();
  v40();
LABEL_13:
  sub_A56C();
}

void sub_19A4D0()
{
  sub_A638();
  uint64_t v6 = sub_2694(&qword_201E10);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_98794();
  __chkstk_darwin(v8);
  uint64_t v9 = sub_19C828();
  sub_52C4();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_19C76C();
  __chkstk_darwin(v13);
  sub_19C74C();
  __chkstk_darwin(v14);
  sub_19C808();
  sub_A208(v4, 1, v9);
  if (v17)
  {
    uint64_t v15 = v4;
LABEL_7:
    sub_6F194(v15, &qword_201E10);
    goto LABEL_8;
  }
  uint64_t v16 = sub_19C72C();
  ((void (*)(uint64_t))v5)(v16);
  sub_19B630(v1);
  sub_A208(v1, 1, v9);
  if (v17)
  {
    sub_7F388();
    v18();
    uint64_t v15 = v1;
    goto LABEL_7;
  }
  sub_19C75C();
  v5();
  uint64_t v19 = sub_19B6A0(v0, v2);
  if ((v20 & 1) != 0 || (v19 & 0xFFFFFFFFFFFFFFFELL) != 0x16C)
  {
    uint64_t v22 = *(void (**)(void))(v11 + 8);
    sub_7F388();
    v22();
    sub_7F388();
    v22();
  }
  else
  {
    sub_19B8FC(v3);
    sub_19C974();
    uint64_t v21 = *(void (**)(void))(v11 + 8);
    sub_7F388();
    v21();
    sub_7F388();
    v21();
    sub_7F388();
    v21();
  }
LABEL_8:
  sub_A56C();
}

void sub_19A6BC()
{
  sub_A638();
  uint64_t v51 = v5;
  uint64_t v52 = v6;
  uint64_t v7 = (void (*)(void))sub_1AAD30();
  sub_52C4();
  __chkstk_darwin(v8);
  sub_19C914(v9, v48[0]);
  uint64_t v10 = sub_2694(&qword_204FF0);
  uint64_t v11 = sub_53D4(v10);
  __chkstk_darwin(v11);
  sub_19C788(v12, v48[0]);
  uint64_t v13 = sub_2694(&qword_204FF8);
  uint64_t v14 = sub_53D4(v13);
  __chkstk_darwin(v14);
  sub_19C888(v15, v48[0]);
  sub_52C4();
  uint64_t v48[2] = v17;
  v48[3] = v16;
  __chkstk_darwin(v16);
  sub_19C930(v18, v48[0]);
  uint64_t v19 = sub_2694(&qword_201E10);
  uint64_t v20 = sub_53D4(v19);
  __chkstk_darwin(v20);
  sub_19C868(v21, v48[0]);
  __chkstk_darwin(v22);
  uint64_t v49 = (char *)v48 - v23;
  sub_A358();
  __chkstk_darwin(v24);
  sub_19C7A4();
  __chkstk_darwin(v25);
  sub_19C848();
  sub_52C4();
  uint64_t v27 = v26;
  __chkstk_darwin(v28);
  sub_DBAB8();
  __chkstk_darwin(v29);
  sub_CEB2C();
  __chkstk_darwin(v30);
  sub_19C7E8();
  sub_5B65C(v3);
  if (v34)
  {
    uint64_t v31 = &qword_201E10;
    uint64_t v32 = v3;
  }
  else
  {
    uint64_t v33 = sub_19C708();
    ((void (*)(uint64_t))v7)(v33);
    sub_19B630(v1);
    sub_5B65C(v1);
    if (v34)
    {
      sub_556DC();
      v35();
      uint64_t v31 = &qword_201E10;
      uint64_t v32 = v1;
    }
    else
    {
      sub_19C7B4();
      v7();
      uint64_t v36 = sub_19B6A0(v4, v0);
      if ((v37 & 1) != 0 || (v36 & 0xFFFFFFFFFFFFFFFELL) != 0x16C)
      {
        uint64_t v45 = *(void (**)(void))(v27 + 8);
        sub_556DC();
        v45();
        sub_556DC();
        v45();
        goto LABEL_8;
      }
      uint64_t v38 = sub_19C8D4();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v48[5], 1, 1, v38);
      sub_19C694();
      sub_1AAA90();
      sub_19AB1C();
      sub_19B8FC(v2);
      uint64_t v39 = (uint64_t)v49;
      sub_19C7C4();
      uint64_t v40 = *(void (**)(void))(v27 + 8);
      sub_556DC();
      v40();
      sub_E558();
      v41();
      uint64_t v42 = v50;
      sub_9FA8(v39, v50, &qword_201E10);
      sub_5B65C(v42);
      if (!v34)
      {
        sub_19BC08(v4, v0);
        sub_6F194(v39, &qword_201E10);
        uint64_t v46 = sub_19C6F4();
        v47(v46);
        sub_556DC();
        v40();
        sub_556DC();
        v40();
        sub_556DC();
        v40();
        goto LABEL_8;
      }
      sub_6F194(v39, &qword_201E10);
      uint64_t v43 = sub_19C6F4();
      v44(v43);
      sub_556DC();
      v40();
      sub_556DC();
      v40();
      uint64_t v32 = sub_F1384();
    }
  }
  sub_6F194(v32, v31);
LABEL_8:
  sub_A56C();
}

uint64_t sub_19AAA0()
{
  sub_1AC150();
  swift_allocObject();
  sub_1AC140();
  sub_19B494();
  sub_1AC130();
  swift_release();
  uint64_t v0 = sub_1AC120();
  swift_release();
  return v0;
}

void sub_19AB1C()
{
  sub_A638();
  uint64_t v2 = v1;
  uint64_t v3 = sub_1AC800();
  sub_52C4();
  uint64_t v60 = v4;
  __chkstk_darwin(v5);
  sub_53E0();
  uint64_t v59 = v6;
  uint64_t v62 = sub_1AAC80();
  sub_52C4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_2694(&qword_201E28);
  uint64_t v13 = sub_53D4(v12);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v57 - v17;
  uint64_t v58 = v0;
  uint64_t v19 = v0 + OBJC_IVAR____TtC18WellnessFlowPlugin12WellnessTime_calendarIdentifier;
  sub_9FA8(v0 + OBJC_IVAR____TtC18WellnessFlowPlugin12WellnessTime_calendarIdentifier, (uint64_t)v57 - v17, &qword_201E28);
  uint64_t v20 = sub_1AC1E0();
  sub_A208((uint64_t)v18, 1, v20);
  if (v26)
  {
    sub_6F194((uint64_t)v18, &qword_201E28);
  }
  else
  {
    v57[0] = v3;
    v57[1] = v2;
    uint64_t v61 = v8;
    uint64_t v21 = sub_1AC1D0();
    uint64_t v23 = v22;
    sub_A5C0();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v24 + 8);
    v25(v18, v20);
    BOOL v26 = v21 == 0x6169726F67657267 && v23 == 0xE90000000000006ELL;
    if (v26)
    {
      swift_bridgeObjectRelease();
      uint64_t v28 = v61;
      goto LABEL_12;
    }
    char v27 = sub_19C678();
    uint64_t v28 = v61;
    if (v27)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      uint64_t v29 = (unsigned int *)&enum case for Calendar.Identifier.gregorian(_:);
LABEL_13:
      uint64_t v30 = v62;
      (*(void (**)(char *, void, uint64_t))(v28 + 104))(v11, *v29, v62);
      sub_1AAC90();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v30);
      goto LABEL_14;
    }
    BOOL v31 = v21 == 0x7473696864647562 && v23 == 0xE800000000000000;
    if (v31 || (sub_19C678() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = (unsigned int *)&enum case for Calendar.Identifier.buddhist(_:);
      goto LABEL_13;
    }
    BOOL v32 = v21 == 0x6573656E696863 && v23 == 0xE700000000000000;
    if (v32 || (sub_19C678() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = (unsigned int *)&enum case for Calendar.Identifier.chinese(_:);
      goto LABEL_13;
    }
    BOOL v33 = v21 == 0x636974706F63 && v23 == 0xE600000000000000;
    if (v33 || (sub_19C678() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = (unsigned int *)&enum case for Calendar.Identifier.coptic(_:);
      goto LABEL_13;
    }
    char v34 = v25;
    if (v21 == 0xD000000000000013 && v23 == 0x80000000001BE120 || (sub_19C678() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = (unsigned int *)&enum case for Calendar.Identifier.ethiopicAmeteMihret(_:);
      goto LABEL_13;
    }
    if (v21 == 0xD000000000000011 && v23 == 0x80000000001BE140 || (sub_19C678() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = (unsigned int *)&enum case for Calendar.Identifier.ethiopicAmeteAlem(_:);
      goto LABEL_13;
    }
    BOOL v35 = v21 == 0x776572626568 && v23 == 0xE600000000000000;
    if (v35 || (sub_19C678() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = (unsigned int *)&enum case for Calendar.Identifier.hebrew(_:);
LABEL_47:
      uint64_t v37 = v61;
      uint64_t v38 = v62;
      (*(void (**)(char *, void, uint64_t))(v61 + 104))(v11, *v36, v62);
      sub_1AAC90();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v38);
      goto LABEL_14;
    }
    BOOL v39 = v21 == 0x313036386F7369 && v23 == 0xE700000000000000;
    if (v39 || (sub_19C678() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = (unsigned int *)&enum case for Calendar.Identifier.iso8601(_:);
      goto LABEL_47;
    }
    BOOL v40 = v21 == 0x6E6169646E69 && v23 == 0xE600000000000000;
    if (v40 || (sub_19C678() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = (unsigned int *)&enum case for Calendar.Identifier.indian(_:);
      goto LABEL_47;
    }
    BOOL v41 = v21 == 0x63696D616C7369 && v23 == 0xE700000000000000;
    if (v41 || (sub_19C964(), (sub_19C678() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = (unsigned int *)&enum case for Calendar.Identifier.islamic(_:);
      goto LABEL_47;
    }
    BOOL v42 = v21 == 0x4363696D616C7369 && v23 == 0xEC0000006C697669;
    if (v42 || (sub_19C964(), (sub_19C678() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = (unsigned int *)&enum case for Calendar.Identifier.islamicCivil(_:);
      goto LABEL_47;
    }
    BOOL v43 = v21 == 0x6573656E6170616ALL && v23 == 0xE800000000000000;
    if (v43 || (sub_19C678() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = (unsigned int *)&enum case for Calendar.Identifier.japanese(_:);
      goto LABEL_47;
    }
    BOOL v44 = v21 == 0x6E616973726570 && v23 == 0xE700000000000000;
    if (v44 || (sub_19C678() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = (unsigned int *)&enum case for Calendar.Identifier.persian(_:);
      goto LABEL_47;
    }
    BOOL v45 = v21 == 0x63696C6275706572 && v23 == 0xEF616E696843664FLL;
    if (v45 || (sub_19C678() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = (unsigned int *)&enum case for Calendar.Identifier.republicOfChina(_:);
      goto LABEL_47;
    }
    BOOL v46 = v21 == 0x5463696D616C7369 && v23 == 0xEE0072616C756261;
    if (v46 || (sub_19C964(), (sub_19C678() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = (unsigned int *)&enum case for Calendar.Identifier.islamicTabular(_:);
      goto LABEL_47;
    }
    if (v21 == 0xD000000000000010 && v23 == 0x80000000001BE160)
    {
      swift_bridgeObjectRelease();
LABEL_100:
      uint64_t v36 = (unsigned int *)&enum case for Calendar.Identifier.islamicUmmAlQura(_:);
      goto LABEL_47;
    }
    char v47 = sub_19C678();
    swift_bridgeObjectRelease();
    if (v47) {
      goto LABEL_100;
    }
    sub_1AC7D0();
    swift_beginAccess();
    uint64_t v48 = sub_F1384();
    v49(v48);
    swift_retain_n();
    uint64_t v50 = sub_1AC7F0();
    os_log_type_t v51 = sub_1ACF60();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      uint64_t v64 = v62;
      *(_DWORD *)uint64_t v52 = 136315138;
      sub_9FA8(v19, (uint64_t)v16, &qword_201E28);
      sub_A208((uint64_t)v16, 1, v20);
      if (v26)
      {
        sub_6F194((uint64_t)v16, &qword_201E28);
        uint64_t v53 = 0;
        unint64_t v55 = 0xE000000000000000;
      }
      else
      {
        uint64_t v53 = sub_1AC1D0();
        unint64_t v55 = v54;
        v34(v16, v20);
      }
      uint64_t v63 = sub_4A278(v53, v55, &v64);
      sub_1ACFE0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_342E4, v50, v51, "Unknown calendar identifier: %s", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    sub_E558();
    v56();
  }
  sub_1AAD00();
LABEL_14:
  sub_A56C();
}

uint64_t sub_19B494()
{
  sub_2694(&qword_208C10);
  uint64_t v1 = *(void *)(sub_2694(&qword_201E10) - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1AF720;
  sub_19C210(v4 + v3);
  sub_19C1A0(v4 + v3 + v2);
  swift_retain();
  uint64_t v5 = sub_1990F8(v4, v0);
  swift_setDeallocating();
  sub_19C280();
  if (v5[2])
  {
    uint64_t v6 = v5[4];
    swift_bridgeObjectRelease();
    return v6 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_19B5C0@<X0>(uint64_t a1@<X8>)
{
  if (!*(void *)(v1 + 24) || (sub_1AC0A0(), (v3 & 1) != 0))
  {
    uint64_t v4 = 1;
  }
  else
  {
    sub_1AAB90();
    uint64_t v4 = 0;
  }
  uint64_t v5 = sub_1AABD0();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, v4, 1, v5);
}

uint64_t sub_19B630@<X0>(uint64_t a1@<X8>)
{
  if (!*(void *)(v1 + 32) || (sub_1AC0A0(), (v3 & 1) != 0))
  {
    uint64_t v4 = 1;
  }
  else
  {
    sub_1AAB90();
    uint64_t v4 = 0;
  }
  uint64_t v5 = sub_1AABD0();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, v4, 1, v5);
}

uint64_t sub_19B6A0(uint64_t a1, uint64_t a2)
{
  v16[0] = a1;
  v16[1] = a2;
  uint64_t v2 = sub_1AAD30();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1AAAA0();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19AB1C();
  sub_2694(&qword_206578);
  uint64_t v10 = sub_1AAD10();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1ADCF0;
  (*(void (**)(unint64_t, void, uint64_t))(v11 + 104))(v13 + v12, enum case for Calendar.Component.day(_:), v10);
  sub_19C368();
  sub_1AACC0();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v14 = sub_1AAA20();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v14;
}

uint64_t sub_19B8FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_2694(&qword_201E10);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  swift_beginAccess();
  uint64_t v9 = *(void **)(v1 + 16);
  if (!v9)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    goto LABEL_12;
  }
  id v10 = v9;
  uint64_t v11 = sub_1AC170();

  sub_19DA50(0xD000000000000010, 0x80000000001BE100, v11, &v17);
  swift_bridgeObjectRelease();
  if (!*((void *)&v18 + 1))
  {
LABEL_12:
    sub_6F194((uint64_t)&v17, &qword_202BA0);
LABEL_13:
    long long v17 = 0u;
    long long v18 = 0u;
    goto LABEL_14;
  }
  sub_2694(&qword_208C18);
  if ((swift_dynamicCast() & 1) == 0 || !v16) {
    goto LABEL_13;
  }
  sub_19DA50(7827310, 0xE300000000000000, v16, &v17);
  swift_bridgeObjectRelease();
  if (!*((void *)&v18 + 1))
  {
LABEL_14:
    sub_6F194((uint64_t)&v17, &qword_202BA0);
LABEL_15:
    long long v17 = 0u;
    long long v18 = 0u;
    goto LABEL_16;
  }
  sub_2694(&qword_208C18);
  if ((swift_dynamicCast() & 1) == 0 || !v16) {
    goto LABEL_15;
  }
  sub_19DA50(1935893875, 0xE400000000000000, v16, &v17);
  swift_bridgeObjectRelease();
  if (!*((void *)&v18 + 1))
  {
LABEL_16:
    sub_6F194((uint64_t)&v17, &qword_202BA0);
    goto LABEL_17;
  }
  if (swift_dynamicCast())
  {
    sub_1AAB90();
    uint64_t v12 = sub_1AABD0();
    uint64_t v13 = (uint64_t)v8;
    uint64_t v14 = 0;
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v12 = sub_1AABD0();
  uint64_t v13 = (uint64_t)v8;
  uint64_t v14 = 1;
LABEL_18:
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v13, v14, 1, v12);
  sub_9FA8((uint64_t)v8, (uint64_t)v6, &qword_201E10);
  sub_1AABD0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v6, 1, v12) == 1)
  {
    sub_1AABC0();
    sub_6F194((uint64_t)v8, &qword_201E10);
    return sub_6F194((uint64_t)v6, &qword_201E10);
  }
  else
  {
    sub_6F194((uint64_t)v8, &qword_201E10);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, v6, v12);
  }
}

uint64_t sub_19BC08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_2694(&qword_208C20);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v35 = sub_2694(&qword_208C28);
  uint64_t v12 = __chkstk_darwin(v35);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v34 = (uint64_t)&v30 - v15;
  uint64_t v16 = sub_1AABD0();
  sub_19C630(&qword_201E30, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t result = sub_1ACDA0();
  if (result)
  {
    uint64_t v18 = *(int *)(v6 + 48);
    uint64_t v33 = v3;
    uint64_t v19 = &v11[v18];
    uint64_t v20 = v11;
    uint64_t v21 = *(void **)(v16 - 8);
    uint64_t v22 = a1;
    uint64_t v23 = a2;
    uint64_t v24 = (void (*)(char *, uint64_t, uint64_t))v21[2];
    uint64_t v31 = v6;
    v24(v20, v22, v16);
    BOOL v32 = v19;
    v24(v19, v23, v16);
    uint64_t v25 = &v9[*(int *)(v6 + 48)];
    v24(v9, (uint64_t)v20, v16);
    v24(v25, (uint64_t)v19, v16);
    BOOL v26 = (void (*)(char *, char *, uint64_t))v21[4];
    v26(v14, v9, v16);
    char v27 = (void (*)(char *, uint64_t))v21[1];
    v27(v25, v16);
    uint64_t v28 = &v9[*(int *)(v31 + 48)];
    v26(v9, v20, v16);
    v26(v28, v32, v16);
    v26(&v14[*(int *)(v35 + 36)], v28, v16);
    v27(v9, v16);
    uint64_t v29 = v34;
    sub_19C300((uint64_t)v14, v34);
    LOBYTE(v20) = sub_19BF44(v33);
    sub_6F194(v29, &qword_208C28);
    return v20 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19BF44(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2694(&qword_208C28);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1AABD0();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19C630(&qword_201E30, (void (*)(uint64_t))&type metadata accessor for Date);
  char v11 = sub_1ACD90();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  sub_9FA8(v2, (uint64_t)v6, &qword_208C28);
  if (v11) {
    char v12 = sub_1ACDA0();
  }
  else {
    char v12 = 0;
  }
  sub_6F194((uint64_t)v6, &qword_208C28);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v12 & 1;
}

uint64_t sub_19C12C()
{
  sub_1998BC();
  if (v0) {
    return 0;
  }
  sub_199EC8();
  if (v2) {
    return 1;
  }
  sub_19A4D0();
  if (v3) {
    return 2;
  }
  sub_199AA4();
  if (v4) {
    return 3;
  }
  sub_19A0B4();
  if (v5) {
    return 4;
  }
  sub_19A6BC();
  if (v6) {
    return 5;
  }
  else {
    return 6;
  }
}

uint64_t sub_19C1A0@<X0>(uint64_t a1@<X8>)
{
  if (!*(void *)(v1 + 40) || (sub_1AC0A0(), (v3 & 1) != 0))
  {
    uint64_t v4 = 1;
  }
  else
  {
    sub_1AAB90();
    uint64_t v4 = 0;
  }
  uint64_t v5 = sub_1AABD0();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, v4, 1, v5);
}

uint64_t sub_19C210@<X0>(uint64_t a1@<X8>)
{
  if (!*(void *)(v1 + 48) || (sub_1AC0A0(), (v3 & 1) != 0))
  {
    uint64_t v4 = 1;
  }
  else
  {
    sub_1AAB90();
    uint64_t v4 = 0;
  }
  uint64_t v5 = sub_1AABD0();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a1, v4, 1, v5);
}

uint64_t sub_19C280()
{
  sub_2694(&qword_201E10);
  swift_arrayDestroy();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_19C300(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2694(&qword_208C28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_19C368()
{
  sub_A638();
  uint64_t v2 = v1;
  uint64_t v3 = sub_1AAD10();
  sub_52C4();
  uint64_t v31 = v4;
  __chkstk_darwin(v5);
  sub_DBAB8();
  __chkstk_darwin(v6);
  uint64_t v35 = (char *)&v26 - v7;
  if (*(void *)(v2 + 16) && (sub_2694(&qword_208C30), v8 = sub_1AD060(), uint64_t v9 = v8, (v30 = *(void *)(v2 + 16)) != 0))
  {
    unint64_t v10 = 0;
    uint64_t v29 = v2 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
    uint64_t v33 = v31 + 16;
    uint64_t v34 = v8 + 56;
    char v11 = (void (**)(uint64_t, uint64_t))(v31 + 8);
    uint64_t v27 = v2;
    uint64_t v28 = (void (**)(uint64_t, char *, uint64_t))(v31 + 32);
    while (v10 < *(void *)(v2 + 16))
    {
      uint64_t v12 = *(void *)(v31 + 72);
      uint64_t v13 = *(void (**)(void))(v31 + 16);
      sub_19C990();
      v13();
      sub_19C630(&qword_208C38, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      uint64_t v14 = sub_1ACD70() & ~(-1 << *(unsigned char *)(v9 + 32));
      sub_19C94C();
      if ((v17 & v16) != 0)
      {
        unint64_t v32 = v10;
        uint64_t v19 = ~v18;
        while (1)
        {
          sub_19C990();
          v13();
          sub_19C630(qword_208C40, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
          char v20 = sub_1ACDB0();
          uint64_t v21 = *v11;
          (*v11)(v0, v3);
          if (v20) {
            break;
          }
          uint64_t v14 = (v14 + 1) & v19;
          sub_19C94C();
          if ((v16 & v17) == 0)
          {
            uint64_t v2 = v27;
            unint64_t v10 = v32;
            goto LABEL_10;
          }
        }
        v21((uint64_t)v35, v3);
        uint64_t v2 = v27;
        unint64_t v10 = v32;
      }
      else
      {
LABEL_10:
        uint64_t v22 = v35;
        *(void *)(v34 + 8 * v15) = v17 | v16;
        (*v28)(*(void *)(v9 + 48) + v14 * v12, v22, v3);
        uint64_t v23 = *(void *)(v9 + 16);
        BOOL v24 = __OFADD__(v23, 1);
        uint64_t v25 = v23 + 1;
        if (v24) {
          goto LABEL_16;
        }
        *(void *)(v9 + 16) = v25;
      }
      if (++v10 == v30) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    sub_A56C();
  }
}

uint64_t sub_19C630(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_19C678()
{
  return sub_1AD2F0();
}

uint64_t sub_19C6F4()
{
  return v0;
}

uint64_t sub_19C708()
{
  *(void *)(v3 - 160) = v2;
  *(void *)(v3 - 152) = v0;
  return v1;
}

uint64_t sub_19C72C()
{
  return v0;
}

void sub_19C788(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_19C7C4()
{
  return sub_1AACD0();
}

uint64_t sub_19C7E8()
{
  return sub_19B5C0(v0);
}

uint64_t sub_19C808()
{
  return sub_19B5C0(v0);
}

uint64_t sub_19C828()
{
  return sub_1AABD0();
}

uint64_t sub_19C848()
{
  return sub_1AABD0();
}

void sub_19C868(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 88) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_19C888@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return sub_1AAAA0();
}

uint64_t sub_19C8B4()
{
  return v0;
}

uint64_t sub_19C8D4()
{
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(*(void *)(v0 - 128), 1, 1, *(void *)(v0 - 152));
  return sub_1AAD60();
}

void sub_19C914(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 96) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_19C930(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 104) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_19C964()
{
  return 0x696D616C7369;
}

uint64_t sub_19C974()
{
  return sub_19BC08(v0, v1);
}

ValueMetadata *type metadata accessor for HealthAppOnboardingRequiredFlow()
{
  return &type metadata for HealthAppOnboardingRequiredFlow;
}

uint64_t sub_19C9C0()
{
  sub_9C44();

  return sub_1AAF80();
}

uint64_t sub_19CA14()
{
  sub_A364();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = sub_1AB0A0();
  v1[4] = v3;
  sub_A19C(v3);
  v1[5] = v4;
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  uint64_t v5 = sub_1AB3D0();
  v1[8] = v5;
  sub_A19C(v5);
  v1[9] = v6;
  v1[10] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_19CAF0()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_19CB80;
  return sub_4F2A0();
}

uint64_t sub_19CB80(uint64_t a1)
{
  sub_A1B4();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_A304();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (v1) {
    swift_errorRelease();
  }
  else {
    *(void *)(v5 + 96) = a1;
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_19CC7C()
{
  uint64_t v1 = (void *)v0[12];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = (void *)v0[3];
  sub_1AB070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  sub_1AB3C0();
  id v7 = [v1 catId];
  sub_1ACDD0();

  sub_1AB380();
  uint64_t v8 = v6[28];
  uint64_t v9 = v6[29];
  sub_2E38(v6 + 25, v8);
  sub_2694(&qword_202588);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1AF530;
  *(void *)(v10 + 32) = v1;
  uint64_t v16 = v10;
  sub_1ACEF0();
  v0[13] = v16;
  id v11 = v1;
  uint64_t v12 = (void *)swift_task_alloc();
  v0[14] = v12;
  void *v12 = v0;
  v12[1] = sub_19CE50;
  uint64_t v13 = v0[10];
  uint64_t v14 = v0[2];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v14, v16, v13, v8, v9);
}

uint64_t sub_19CE50()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_19CF34()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v4();
}

uint64_t sub_19CFD4()
{
  sub_A364();
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v1 + 32) = 0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v2();
}

uint64_t sub_19D050()
{
  sub_A364();
  v1[41] = v2;
  v1[42] = v0;
  uint64_t v3 = sub_1AC800();
  v1[43] = v3;
  sub_A19C(v3);
  v1[44] = v4;
  v1[45] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v1[46] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_19D120;
  return sub_19CA14();
}

uint64_t sub_19D120()
{
  sub_A364();
  sub_A1B4();
  uint64_t v1 = *v0;
  sub_A304();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_19D1E8()
{
  uint64_t v1 = (long long *)(v0 + 216);
  if (*(void *)(v0 + 240))
  {
    sub_24D80(v1, v0 + 176);
    sub_E3FC(v0 + 176, v0 + 256);
    uint64_t v2 = swift_allocObject();
    sub_24D80((long long *)(v0 + 256), v2 + 16);
    sub_1AB350();
    sub_1AAE40();
    swift_allocObject();
    *(void *)(v0 + 320) = sub_1AAE30();
    sub_1AB120();
    _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 176);
    swift_release();
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 352);
    uint64_t v3 = *(void *)(v0 + 360);
    uint64_t v5 = *(void *)(v0 + 344);
    sub_9A660((uint64_t)v1);
    uint64_t v6 = sub_1AC7D0();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
    uint64_t v7 = sub_1AC7F0();
    os_log_type_t v8 = sub_1ACF60();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&def_342E4, v7, v8, "Failed to create output for onboarding required flow", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = *(void *)(v0 + 352);
    uint64_t v10 = *(void *)(v0 + 360);
    uint64_t v13 = *(void *)(v0 + 336);
    uint64_t v12 = *(void *)(v0 + 344);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    sub_9B48(v13 + 40, v0 + 16);
    sub_9BA4();
    sub_1AB120();
    sub_9BF0(v0 + 16);
  }
  swift_task_dealloc();
  sub_E564();
  return v14();
}

uint64_t sub_19D438()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24C20;
  return sub_19D050();
}

uint64_t sub_19D4D0()
{
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_19D508()
{
  sub_A364();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_24C20;
  return sub_24B08(v3, v0 + 16);
}

uint64_t sub_19D5A4(__int16 a1)
{
  sub_19E004();
  uint64_t v2 = sub_1ACD60();
  uint64_t v3 = sub_19DA10(a1, v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_19D608(void *a1)
{
  uint64_t v2 = sub_2694(&qword_201CC8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_2E38(a1, v5);
  __int16 v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
  if (v7 == 270 || (unsigned __int8 v8 = sub_19D5A4(v7), v8 == 205))
  {
    sub_1AAB10();
    uint64_t v9 = sub_27AC();
    return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v9, v10, v11, v12);
  }
  else
  {
    char v14 = v8;
    uint64_t v15 = a1[3];
    uint64_t v16 = a1[4];
    sub_2E38(a1, v15);
    (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
    sub_153CEC(v14, v4);
    return sub_520C((uint64_t)v4);
  }
}

uint64_t sub_19D764(uint64_t a1, uint64_t a2)
{
  return sub_19D81C(a1, a2, (void (*)(uint64_t))sub_1950F4);
}

uint64_t sub_19D77C(uint64_t a1, uint64_t a2)
{
  return sub_19D81C(a1, a2, (void (*)(uint64_t))sub_2F2B8);
}

uint64_t sub_19D794(uint64_t a1, uint64_t a2)
{
  return sub_19D81C(a1, a2, (void (*)(uint64_t))sub_481F0);
}

uint64_t sub_19D7AC(uint64_t a1, __int16 a2)
{
  sub_1771BC(a2);
  sub_19E3E4();

  return swift_bridgeObjectRelease();
}

uint64_t sub_19D7EC(uint64_t a1, uint64_t a2)
{
  return sub_19D81C(a1, a2, (void (*)(uint64_t))sub_15A300);
}

uint64_t sub_19D804(uint64_t a1, uint64_t a2)
{
  return sub_19D81C(a1, a2, (void (*)(uint64_t))sub_A05A0);
}

uint64_t sub_19D81C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  a3(a2);
  sub_19E3E4();

  return swift_bridgeObjectRelease();
}

uint64_t sub_19D860()
{
  sub_1ACE60();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_19D8B4()
{
  return sub_1AD390();
}

Swift::Int sub_19D8F8(uint64_t a1, uint64_t a2)
{
  return sub_19D9BC(a1, a2, (void (*)(uint64_t))sub_A05A0);
}

Swift::Int sub_19D910(uint64_t a1, uint64_t a2)
{
  return sub_19D9BC(a1, a2, (void (*)(uint64_t))sub_15A300);
}

Swift::Int sub_19D928(uint64_t a1, __int16 a2)
{
  return sub_1AD390();
}

Swift::Int sub_19D974(uint64_t a1, uint64_t a2)
{
  return sub_19D9BC(a1, a2, (void (*)(uint64_t))sub_481F0);
}

Swift::Int sub_19D98C(uint64_t a1, uint64_t a2)
{
  return sub_19D9BC(a1, a2, (void (*)(uint64_t))sub_2F2B8);
}

Swift::Int sub_19D9A4(uint64_t a1, uint64_t a2)
{
  return sub_19D9BC(a1, a2, (void (*)(uint64_t))sub_1950F4);
}

Swift::Int sub_19D9BC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  return sub_1AD390();
}

uint64_t sub_19DA10(__int16 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (unint64_t v3 = sub_19E050(a1), (v4 & 1) != 0)) {
    return *(unsigned __int8 *)(*(void *)(a2 + 56) + v3);
  }
  else {
    return 205;
  }
}

double sub_19DA50@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_19E0D8(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    sub_4AC74(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t sub_19DAB4(uint64_t a1, void *a2, char a3)
{
  if (a2) {
    goto LABEL_6;
  }
  unint64_t v7 = sub_19DEE8(a3);
  uint64_t v8 = v6;
  if (v7 == 0xD000000000000010 && v6 == 0x80000000001BE200) {
    goto LABEL_4;
  }
  char v9 = sub_1AD2F0();
  swift_bridgeObjectRelease();
  if (v9) {
    goto LABEL_6;
  }
  if (v7 == 0xD000000000000012 && v8 == 0x80000000001BE2A0)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  char v17 = sub_1AD2F0();
  swift_bridgeObjectRelease();
  if (v17)
  {
LABEL_6:
    switch(a3)
    {
      case 1:
        sub_19E3C8();
        sub_1AD080(70);
        sub_19E3D8();
        v10._countAndFlagsBits = 0xD000000000000044;
        sub_19E3AC(v10, (uint64_t)"nanomedications://NanoMedications.app/medicationRoom?medicationName=");
        if (a2) {
          goto LABEL_21;
        }
        __break(1u);
        goto LABEL_9;
      case 2:
LABEL_9:
        sub_19E3C8();
        sub_1AD080(63);
        sub_19E3D8();
        v11._countAndFlagsBits = 0xD00000000000003DLL;
        sub_19E3AC(v11, (uint64_t)"nanomedications://NanoMedications.app/logDose?medicationName=");
        if (a2) {
          goto LABEL_21;
        }
        __break(1u);
LABEL_11:
        sub_19E3C8();
        sub_1AD080(71);
        sub_19E3D8();
        v12._countAndFlagsBits = 0xD000000000000045;
        sub_19E3AC(v12, (uint64_t)"nanomedications://NanoMedications.app/logDose?scheduleItemIdentifier=");
        if (a2) {
          goto LABEL_21;
        }
        __break(1u);
LABEL_13:
        uint64_t result = sub_1AAB00();
        break;
      case 3:
        goto LABEL_11;
      case 5:
        sub_19E3C8();
        sub_1AD080(112);
        sub_19E3D8();
        v14._countAndFlagsBits = 0xD00000000000006ELL;
        sub_19E3AC(v14, (uint64_t)"x-apple-health://MedicationsHealthAppPlugin.healthplugin/medicationRoom?presentWithAnimation=1&medicationName=");
        if (a2) {
          goto LABEL_21;
        }
        __break(1u);
LABEL_18:
        sub_19E3C8();
        sub_1AD080(113);
        sub_19E3D8();
        v15._countAndFlagsBits = 0xD00000000000006FLL;
        sub_19E3AC(v15, (uint64_t)"x-apple-health://MedicationsHealthAppPlugin.healthplugin/logDose?presentWithAnimation=1&scheduleItemIdentifier=");
        if (!a2)
        {
          __break(1u);
LABEL_20:
          sub_19E3C8();
          sub_1AD080(105);
          sub_19E3D8();
          v16._countAndFlagsBits = 0xD000000000000067;
          sub_19E3AC(v16, (uint64_t)"x-apple-health://MedicationsHealthAppPlugin.healthplugin/logDose?presentWithAnimation=1&medicationName=");
          if (!a2)
          {
            __break(1u);
            JUMPOUT(0x19DD98);
          }
        }
LABEL_21:
        swift_bridgeObjectRetain();
        v23._countAndFlagsBits = a1;
        v23._object = a2;
        sub_1ACE70(v23);
        swift_bridgeObjectRelease();
        sub_1AAB00();
        uint64_t result = swift_bridgeObjectRelease();
        break;
      case 6:
        goto LABEL_20;
      case 7:
        goto LABEL_18;
      default:
        goto LABEL_13;
    }
    return result;
  }
  sub_1AAB10();
  uint64_t v18 = sub_27AC();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v18, v19, v20, v21);
}

uint64_t sub_19DDB8(__int16 a1)
{
  uint64_t v2 = sub_2694(&qword_201CC8);
  __chkstk_darwin(v2 - 8);
  char v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_7235C(a1, (uint64_t)&off_1F4C00))
  {
    uint64_t v5 = sub_1AAA10();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v4, 1, 1, v5);
    char v6 = 42;
LABEL_8:
    sub_153CEC(v6, v4);
    return sub_520C((uint64_t)v4);
  }
  unsigned __int8 v7 = sub_19D5A4(a1);
  if (v7 != 205)
  {
    char v13 = v7;
    uint64_t v14 = sub_1AAA10();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v4, 1, 1, v14);
    char v6 = v13;
    goto LABEL_8;
  }
  sub_1AAB10();
  uint64_t v8 = sub_27AC();

  return _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v8, v9, v10, v11);
}

unint64_t sub_19DEE8(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
    case 5:
      unint64_t result = 0xD000000000000018;
      break;
    case 2:
      unint64_t result = 0xD000000000000020;
      break;
    case 3:
      unint64_t result = 0xD000000000000024;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0xD000000000000020;
      break;
    case 7:
      unint64_t result = 0xD000000000000024;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_19DFCC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_15434C(*a1, *a2);
}

unint64_t sub_19DFD8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_19DEE8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_19E004()
{
  unint64_t result = qword_208C78;
  if (!qword_208C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208C78);
  }
  return result;
}

unint64_t sub_19E050(__int16 a1)
{
  sub_1AD360();
  sub_1771BC(a1);
  sub_1ACE60();
  swift_bridgeObjectRelease();
  Swift::Int v2 = sub_1AD390();

  return sub_19E150(a1, v2);
}

unint64_t sub_19E0D8(uint64_t a1, uint64_t a2)
{
  sub_1AD360();
  sub_1ACE60();
  Swift::Int v4 = sub_1AD390();

  return sub_19E2C8(a1, a2, v4);
}

unint64_t sub_19E150(__int16 a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v7 = sub_1771BC(*(_WORD *)(*(void *)(v2 + 48) + 2 * v5));
    uint64_t v9 = v8;
    if (v7 == sub_1771BC(a1) && v9 == v10)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v12 = sub_1AD2F0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = ~v4;
      unint64_t v5 = (v5 + 1) & v13;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v14 = sub_1771BC(*(_WORD *)(*(void *)(v2 + 48) + 2 * v5));
          uint64_t v16 = v15;
          if (v14 == sub_1771BC(a1) && v16 == v17) {
            break;
          }
          char v19 = sub_1AD2F0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v13;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_19E2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1AD2F0() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1AD2F0() & 1) == 0);
    }
  }
  return v6;
}

void sub_19E3AC(Swift::String a1@<X1:X0>, uint64_t a2@<X8>)
{
  a1._object = (void *)((a2 - 32) | 0x8000000000000000);
  sub_1ACE70(a1);
}

uint64_t sub_19E3E4()
{
  return sub_1ACE60();
}

uint64_t type metadata accessor for WellnessLoggingCATs()
{
  uint64_t result = qword_208C80;
  if (!qword_208C80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_19E450()
{
  return swift_initClassMetadata2();
}

uint64_t sub_19E490(uint64_t a1, uint64_t a2)
{
  return sub_19E4E4(a1, a2);
}

uint64_t sub_19E4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AC250();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2694(&qword_201E20);
  __chkstk_darwin(v8 - 8);
  sub_45DC8(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v10 = sub_1AC180();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  sub_55D28(a1);
  return v10;
}

uint64_t sub_19E64C()
{
  return type metadata accessor for WellnessLoggingCATs();
}

void __swiftcall WatchRingsModel.init(exerciseGoalValue:exerciseTotalValue:moveGoalValue:moveTotalValue:standGoalValue:standTotalValue:)(WellnessFlowPlugin::WatchRingsModel *__return_ptr retstr, Swift::Double exerciseGoalValue, Swift::Double exerciseTotalValue, Swift::Double moveGoalValue, Swift::Double moveTotalValue, Swift::Double standGoalValue, Swift::Double standTotalValue)
{
  retstr->exerciseGoalValue.Swift::Double value = exerciseGoalValue;
  retstr->exerciseGoalValue.Swift::Bool is_nil = 0;
  retstr->exerciseTotalValue.Swift::Double value = exerciseTotalValue;
  retstr->exerciseTotalValue.Swift::Bool is_nil = 0;
  retstr->moveGoalValue.Swift::Double value = moveGoalValue;
  retstr->moveGoalValue.Swift::Bool is_nil = 0;
  retstr->moveTotalValue.Swift::Double value = moveTotalValue;
  retstr->moveTotalValue.Swift::Bool is_nil = 0;
  retstr->standGoalValue.Swift::Double value = standGoalValue;
  retstr->standGoalValue.Swift::Bool is_nil = 0;
  retstr->standTotalValue.Swift::Double value = standTotalValue;
  retstr->standTotalValue.Swift::Bool is_nil = 0;
}

uint64_t sub_19E688(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000000001B75D0 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B75F0 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    BOOL v5 = a1 == 0x6C616F4765766F6DLL && a2 == 0xED000065756C6156;
    if (v5 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v6 = a1 == 0x61746F5465766F6DLL && a2 == 0xEE0065756C61566CLL;
      if (v6 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v7 = a1 == 0x616F47646E617473 && a2 == 0xEE0065756C61566CLL;
        if (v7 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else if (a1 == 0x746F54646E617473 && a2 == 0xEF65756C61566C61)
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else
        {
          char v9 = sub_1AD2F0();
          swift_bridgeObjectRelease();
          if (v9) {
            return 5;
          }
          else {
            return 6;
          }
        }
      }
    }
  }
}

unint64_t sub_19E92C(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x6C616F4765766F6DLL;
      break;
    case 3:
      unint64_t result = 0x61746F5465766F6DLL;
      break;
    case 4:
      unint64_t result = 0x616F47646E617473;
      break;
    case 5:
      unint64_t result = 0x746F54646E617473;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_19EA1C()
{
  return sub_19E92C(*v0);
}

uint64_t sub_19EA24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_19E688(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_19EA4C(uint64_t a1)
{
  unint64_t v2 = sub_19EC6C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_19EA88(uint64_t a1)
{
  unint64_t v2 = sub_19EC6C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WatchRingsModel.encode(to:)(void *a1)
{
  uint64_t v3 = sub_2694(&qword_208CD0);
  sub_52C4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2E38(a1, a1[3]);
  sub_19EC6C();
  sub_1AD3B0();
  v10[15] = 0;
  sub_2F078();
  if (!v1)
  {
    v10[14] = 1;
    sub_2F078();
    v10[13] = 2;
    sub_2F078();
    v10[12] = 3;
    sub_2F078();
    v10[11] = 4;
    sub_2F078();
    v10[10] = 5;
    sub_2F078();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v3);
}

unint64_t sub_19EC6C()
{
  unint64_t result = qword_208CD8;
  if (!qword_208CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208CD8);
  }
  return result;
}

uint64_t WatchRingsModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_2694(&qword_208CE0);
  sub_52C4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2E38(a1, a1[3]);
  sub_19EC6C();
  sub_1AD3A0();
  if (v2) {
    return _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
  }
  char v40 = 0;
  uint64_t v11 = sub_19F17C();
  char v13 = v12;
  char v39 = 1;
  uint64_t v14 = sub_19F17C();
  int v33 = v15;
  uint64_t v34 = v14;
  char v38 = 2;
  uint64_t v16 = sub_19F17C();
  int v31 = v17;
  uint64_t v32 = v16;
  char v37 = 3;
  uint64_t v18 = sub_19F17C();
  int v29 = v19;
  uint64_t v30 = v18;
  char v36 = 4;
  uint64_t v20 = sub_19F17C();
  HIDWORD(v27) = v21;
  uint64_t v28 = v20;
  char v35 = 5;
  uint64_t v22 = sub_19F17C();
  Swift::String v23 = v10;
  char v25 = v24;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v5);
  uint64_t result = _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
  *(void *)a2 = v11;
  *(unsigned char *)(a2 + 8) = v13 & 1;
  *(void *)(a2 + 16) = v34;
  *(unsigned char *)(a2 + 24) = v33 & 1;
  *(void *)(a2 + 32) = v32;
  *(unsigned char *)(a2 + 40) = v31 & 1;
  *(void *)(a2 + 48) = v30;
  *(unsigned char *)(a2 + 56) = v29 & 1;
  *(void *)(a2 + 64) = v28;
  *(unsigned char *)(a2 + 72) = BYTE4(v27) & 1;
  *(void *)(a2 + 80) = v22;
  *(unsigned char *)(a2 + 88) = v25 & 1;
  return result;
}

void *sub_19EF14@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)WatchRingsModel.init(from:)(a1, (uint64_t)v5);
  if (!v2) {
    return memcpy(a2, v5, 0x59uLL);
  }
  return result;
}

uint64_t sub_19EF60(void *a1)
{
  return WatchRingsModel.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for WatchRingsModel()
{
  return &type metadata for WatchRingsModel;
}

unsigned char *storeEnumTagSinglePayload for WatchRingsModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19F054);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WatchRingsModel.CodingKeys()
{
  return &type metadata for WatchRingsModel.CodingKeys;
}

unint64_t sub_19F090()
{
  unint64_t result = qword_208CE8;
  if (!qword_208CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208CE8);
  }
  return result;
}

unint64_t sub_19F0E0()
{
  unint64_t result = qword_208CF0;
  if (!qword_208CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208CF0);
  }
  return result;
}

unint64_t sub_19F130()
{
  unint64_t result = qword_208CF8;
  if (!qword_208CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208CF8);
  }
  return result;
}

uint64_t sub_19F17C()
{
  return sub_1AD1D0();
}

uint64_t sub_19F198@<X0>(char a1@<W1>, char a2@<W3>, char a3@<W5>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = sub_2694(&qword_2022C8);
  uint64_t v15 = sub_53D4(v14);
  __chkstk_darwin(v15);
  sub_E548();
  uint64_t v18 = v17 - v16;
  uint64_t v61 = sub_1AAD90();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(a4, 1, 1, v61);
  uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v20 = a4 + Model[9];
  uint64_t v59 = v20;
  uint64_t v21 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v20, 1, 1, v21);
  uint64_t v22 = (uint64_t *)(a4 + Model[10]);
  *uint64_t v22 = 0;
  v22[1] = 0;
  Swift::String v23 = (uint64_t *)(a4 + Model[11]);
  *Swift::String v23 = 0;
  v23[1] = 0;
  char v24 = (uint64_t *)(a4 + Model[12]);
  *char v24 = 0;
  v24[1] = 0;
  uint64_t v62 = (uint64_t *)(a4 + Model[13]);
  *uint64_t v62 = 0;
  v62[1] = 0;
  char v25 = (void *)(a4 + Model[15]);
  *char v25 = 0;
  v25[1] = 0;
  uint64_t v26 = a4 + Model[16];
  uint64_t v58 = v26;
  uint64_t v27 = type metadata accessor for SnippetHeaderModel();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v26, 1, 1, v27);
  sub_10223C();
  sub_102230();
  char v29 = a1 | v28;
  uint64_t v30 = a4 + Model[5];
  *(void *)uint64_t v30 = v31;
  *(unsigned char *)(v30 + 8) = v29 & 1;
  sub_10223C();
  sub_102230();
  char v33 = a2 | v32;
  uint64_t v34 = a4 + Model[6];
  *(void *)uint64_t v34 = v35;
  *(unsigned char *)(v34 + 8) = v33 & 1;
  sub_10223C();
  sub_102230();
  uint64_t v37 = a4 + Model[7];
  *(void *)uint64_t v37 = v38;
  *(unsigned char *)(v37 + 8) = (a3 | v36) & 1;
  sub_10223C();
  sub_102230();
  uint64_t v39 = Model[14];
  uint64_t v42 = a4 + Model[8];
  *(void *)uint64_t v42 = v43;
  *(unsigned char *)(v42 + 8) = (v41 | v40) & 1;
  BOOL v44 = (void *)(a4 + v39);
  *BOOL v44 = a5;
  v44[1] = a6;
  sub_2EEC4(a7, v59, &qword_201E28);
  sub_19FD2C(a8);
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v18, 0, 1, v61);
  sub_2B7FC(v18, a4, &qword_2022C8);
  swift_bridgeObjectRelease();
  *char v25 = a9;
  v25[1] = a10;
  sub_2EEC4(a11, v58, &qword_2022D0);
  uint64_t v45 = sub_15E778(*(void *)v30, *(unsigned char *)(v30 + 8));
  uint64_t v47 = v46;
  swift_bridgeObjectRelease();
  *uint64_t v22 = v45;
  v22[1] = v47;
  uint64_t v48 = sub_15E778(*(void *)v34, *(unsigned char *)(v34 + 8));
  uint64_t v50 = v49;
  swift_bridgeObjectRelease();
  *Swift::String v23 = v48;
  v23[1] = v50;
  uint64_t v51 = sub_15E778(*(void *)v37, *(unsigned char *)(v37 + 8));
  uint64_t v53 = v52;
  swift_bridgeObjectRelease();
  *char v24 = v51;
  v24[1] = v53;
  uint64_t v54 = sub_15E778(*(void *)v42, *(unsigned char *)(v42 + 8));
  uint64_t v56 = v55;
  sub_2EF0C(a11, &qword_2022D0);
  sub_2EF0C(a8, &qword_201E20);
  sub_2EF0C(a7, &qword_201E28);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v62 = v54;
  v62[1] = v56;
  return result;
}

uint64_t OxygenSaturationQueryModel.averageValue.getter()
{
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 20));
}

uint64_t type metadata accessor for OxygenSaturationQueryModel()
{
  uint64_t result = qword_208D70;
  if (!qword_208D70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void OxygenSaturationQueryModel.averageValue.setter()
{
  uint64_t v0 = sub_1A2F98();
  sub_2EFC0(*(int *)(v0 + 20));
}

uint64_t (*OxygenSaturationQueryModel.averageValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t OxygenSaturationQueryModel.maxValue.getter()
{
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 24));
}

void OxygenSaturationQueryModel.maxValue.setter()
{
  uint64_t v0 = sub_1A2F98();
  sub_2EFC0(*(int *)(v0 + 24));
}

uint64_t (*OxygenSaturationQueryModel.maxValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t OxygenSaturationQueryModel.minValue.getter()
{
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 28));
}

void OxygenSaturationQueryModel.minValue.setter()
{
  uint64_t v0 = sub_1A2F98();
  sub_2EFC0(*(int *)(v0 + 28));
}

uint64_t (*OxygenSaturationQueryModel.minValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t OxygenSaturationQueryModel.mostRecentValue.getter()
{
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  return sub_2EFEC(v0 + *(int *)(Model + 32));
}

void OxygenSaturationQueryModel.mostRecentValue.setter()
{
  uint64_t v0 = sub_1A2F98();
  sub_2EFC0(*(int *)(v0 + 32));
}

uint64_t (*OxygenSaturationQueryModel.mostRecentValue.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t OxygenSaturationQueryModel.dateLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  return sub_2EF60(v1 + *(int *)(Model + 36), a1, &qword_201E28);
}

uint64_t OxygenSaturationQueryModel.dateLabel.setter()
{
  uint64_t v2 = sub_1A2F64();
  return sub_2B7FC(v0, v1 + *(int *)(v2 + 36), &qword_201E28);
}

uint64_t (*OxygenSaturationQueryModel.dateLabel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t OxygenSaturationQueryModel.averageValueString.getter()
{
  return sub_22F80();
}

uint64_t OxygenSaturationQueryModel.averageValueString.setter()
{
  sub_1A2F7C();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.averageValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t OxygenSaturationQueryModel.maxValueString.getter()
{
  return sub_22F80();
}

uint64_t OxygenSaturationQueryModel.maxValueString.setter()
{
  sub_1A2F7C();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.maxValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t OxygenSaturationQueryModel.minValueString.getter()
{
  return sub_22F80();
}

uint64_t OxygenSaturationQueryModel.minValueString.setter()
{
  sub_1A2F7C();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.minValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t OxygenSaturationQueryModel.mostRecentValueString.getter()
{
  return sub_22F80();
}

uint64_t OxygenSaturationQueryModel.mostRecentValueString.setter()
{
  sub_1A2F7C();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.mostRecentValueString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t OxygenSaturationQueryModel.unit.getter()
{
  return sub_22F80();
}

uint64_t OxygenSaturationQueryModel.unit.setter()
{
  sub_1A2F7C();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.unit.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t OxygenSaturationQueryModel.averageLabelString.getter()
{
  return sub_22F80();
}

uint64_t OxygenSaturationQueryModel.averageLabelString.setter()
{
  sub_1A2F7C();
  uint64_t result = sub_7A45C();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*OxygenSaturationQueryModel.averageLabelString.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t OxygenSaturationQueryModel.snippetHeaderModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  return sub_2EF60(v1 + *(int *)(Model + 64), a1, &qword_2022D0);
}

uint64_t OxygenSaturationQueryModel.snippetHeaderModel.setter()
{
  uint64_t v2 = sub_1A2F64();
  return sub_2B7FC(v0, v1 + *(int *)(v2 + 64), &qword_2022D0);
}

uint64_t (*OxygenSaturationQueryModel.snippetHeaderModel.modify())(void)
{
  return HKActivityRingUIViewRepresentable.updateUIView(_:context:);
}

uint64_t sub_19FD2C(uint64_t a1)
{
  uint64_t v2 = sub_2694(&qword_201E20);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1AAB10();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2EF60(a1, (uint64_t)v4, &qword_201E20);
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_2EF0C((uint64_t)v4, &qword_201E20);
    return sub_1AAD80();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_1AAAD0();
    sub_1AAD80();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_19FEF4(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074756FLL;
  if (v3 || (sub_1AD2F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x5665676172657661 && a2 == 0xEC00000065756C61;
    if (v6 || (sub_1AD2F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x65756C615678616DLL && a2 == 0xE800000000000000;
      if (v7 || (sub_1AD2F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x65756C61566E696DLL && a2 == 0xE800000000000000;
        if (v8 || (sub_1AD2F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x6563655274736F6DLL && a2 == 0xEF65756C6156746ELL;
          if (v9 || (sub_1AD2F0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x6562614C65746164 && a2 == 0xE90000000000006CLL;
            if (v10 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else if (a1 == 0xD000000000000012 && a2 == 0x80000000001BAB70 || (sub_1AD2F0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              BOOL v11 = a1 == 0x65756C615678616DLL && a2 == 0xEE00676E69727453;
              if (v11 || (sub_1AD2F0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                BOOL v12 = a1 == 0x65756C61566E696DLL && a2 == 0xEE00676E69727453;
                if (v12 || (sub_1AD2F0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 8;
                }
                else if (a1 == 0xD000000000000015 && a2 == 0x80000000001BC320 || (sub_1AD2F0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 9;
                }
                else
                {
                  BOOL v13 = a1 == 1953066613 && a2 == 0xE400000000000000;
                  if (v13 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 10;
                  }
                  else if (a1 == 0xD000000000000012 && a2 == 0x80000000001BC360 || (sub_1AD2F0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 11;
                  }
                  else if (a1 == 0xD000000000000012 && a2 == 0x80000000001B78B0)
                  {
                    swift_bridgeObjectRelease();
                    return 12;
                  }
                  else
                  {
                    char v14 = sub_1AD2F0();
                    swift_bridgeObjectRelease();
                    if (v14) {
                      return 12;
                    }
                    else {
                      return 13;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1A03F4()
{
  return 13;
}

uint64_t sub_1A03FC(char a1)
{
  uint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      return 0x5665676172657661;
    case 2:
      unsigned int v3 = 1450729837;
      return v3 | 0x65756C6100000000;
    case 3:
      unsigned int v3 = 1450076525;
      return v3 | 0x65756C6100000000;
    case 4:
      return 0x6563655274736F6DLL;
    case 5:
      return 0x6562614C65746164;
    case 6:
    case 11:
    case 12:
      return result;
    case 7:
      unsigned int v4 = 1450729837;
      goto LABEL_11;
    case 8:
      unsigned int v4 = 1450076525;
LABEL_11:
      uint64_t result = v4 | 0x65756C6100000000;
      break;
    case 9:
      uint64_t result = 0xD000000000000015;
      break;
    case 10:
      uint64_t result = 1953066613;
      break;
    default:
      uint64_t result = 0x68636E7550707061;
      break;
  }
  return result;
}

uint64_t sub_1A0588()
{
  return sub_1A03FC(*v0);
}

uint64_t sub_1A0590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_19FEF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A05B8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1A03F4();
  *a1 = result;
  return result;
}

uint64_t sub_1A05E0(uint64_t a1)
{
  unint64_t v2 = sub_1A09F4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1A061C(uint64_t a1)
{
  unint64_t v2 = sub_1A09F4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t OxygenSaturationQueryModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2694(&qword_208D00);
  sub_52C4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_E548();
  uint64_t v11 = v10 - v9;
  sub_2E38(a1, a1[3]);
  sub_1A09F4();
  sub_1AD3B0();
  v31[6] = 0;
  sub_1AAD90();
  sub_1A1238(&qword_202BC0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  sub_1AD270();
  if (!v2)
  {
    uint64_t Model = (int *)type metadata accessor for OxygenSaturationQueryModel();
    sub_2EFEC(v3 + Model[5]);
    v31[5] = 1;
    sub_2F078();
    sub_2EFEC(v3 + Model[6]);
    v31[4] = 2;
    sub_2F078();
    sub_2EFEC(v3 + Model[7]);
    v31[3] = 3;
    sub_2F078();
    sub_2EFEC(v3 + Model[8]);
    v31[2] = 4;
    sub_2F078();
    v31[1] = 5;
    sub_1AC1E0();
    sub_1A1238(&qword_202BC8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    sub_1AD270();
    uint64_t v13 = sub_7A494(Model[10]);
    v31[0] = 6;
    sub_2F05C(v13, v14, (uint64_t)v31);
    uint64_t v15 = sub_7A494(Model[11]);
    char v30 = 7;
    sub_2F05C(v15, v16, (uint64_t)&v30);
    uint64_t v17 = sub_7A494(Model[12]);
    char v29 = 8;
    sub_2F05C(v17, v18, (uint64_t)&v29);
    uint64_t v19 = sub_7A494(Model[13]);
    char v28 = 9;
    sub_2F05C(v19, v20, (uint64_t)&v28);
    uint64_t v21 = sub_7A494(Model[14]);
    char v27 = 10;
    sub_2F05C(v21, v22, (uint64_t)&v27);
    uint64_t v23 = sub_7A494(Model[15]);
    char v26 = 11;
    sub_2F05C(v23, v24, (uint64_t)&v26);
    type metadata accessor for SnippetHeaderModel();
    sub_1A1238(&qword_202BD0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1AD270();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
}

unint64_t sub_1A09F4()
{
  unint64_t result = qword_208D08;
  if (!qword_208D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208D08);
  }
  return result;
}

uint64_t OxygenSaturationQueryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_2694(&qword_2022D0);
  uint64_t v4 = sub_53D4(v3);
  __chkstk_darwin(v4);
  sub_53E0();
  uint64_t v59 = v5;
  uint64_t v6 = sub_2694(&qword_201E28);
  uint64_t v7 = sub_53D4(v6);
  __chkstk_darwin(v7);
  sub_53E0();
  uint64_t v65 = v8;
  uint64_t v9 = sub_2694(&qword_2022C8);
  uint64_t v10 = sub_53D4(v9);
  __chkstk_darwin(v10);
  sub_53E0();
  uint64_t v68 = v11;
  uint64_t v72 = sub_2694(&qword_208D10);
  sub_52C4();
  uint64_t v64 = v12;
  __chkstk_darwin(v13);
  sub_53E0();
  uint64_t v75 = v14;
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  uint64_t v16 = (int *)(Model - 8);
  __chkstk_darwin(Model);
  sub_E548();
  uint64_t v19 = v18 - v17;
  uint64_t v63 = sub_1AAD90();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v19, 1, 1, v63);
  sub_1A2FB0(v16[7]);
  *(unsigned char *)(v20 + 8) = 1;
  sub_1A2FB0(v16[8]);
  *(unsigned char *)(v21 + 8) = 1;
  sub_1A2FB0(v16[9]);
  *(unsigned char *)(v22 + 8) = 1;
  sub_1A2FB0(v16[10]);
  *(unsigned char *)(v23 + 8) = 1;
  uint64_t v61 = v19 + v16[11];
  uint64_t v62 = sub_1AC1E0();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v61, 1, 1, v62);
  uint64_t v24 = (uint64_t *)(v19 + v16[12]);
  *uint64_t v24 = 0;
  v24[1] = 0;
  uint64_t v60 = v24;
  char v25 = (uint64_t *)(v19 + v16[13]);
  *char v25 = 0;
  v25[1] = 0;
  char v26 = (uint64_t *)(v19 + v16[14]);
  *char v26 = 0;
  v26[1] = 0;
  char v27 = (uint64_t *)(v19 + v16[15]);
  *char v27 = 0;
  v27[1] = 0;
  char v28 = (uint64_t *)(v19 + v16[16]);
  *char v28 = 0;
  v28[1] = 0;
  char v29 = (uint64_t *)(v19 + v16[17]);
  *char v29 = 0;
  v29[1] = 0;
  uint64_t v30 = v19 + v16[18];
  uint64_t v31 = type metadata accessor for SnippetHeaderModel();
  uint64_t v57 = v30;
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v30, 1, 1, v31);
  sub_2E38(a1, a1[3]);
  sub_1A09F4();
  sub_1AD3A0();
  if (v73)
  {
    uint64_t v55 = v19;
  }
  else
  {
    uint64_t v56 = v27;
    sub_1A1238(&qword_202BE0, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
    sub_1AD1E0();
    sub_2B7FC(v68, v19, &qword_2022C8);
    uint64_t v33 = sub_7A4A0();
    sub_7A428(v33, v34);
    uint64_t v35 = sub_7A4A0();
    sub_7A428(v35, v36);
    uint64_t v37 = sub_7A4A0();
    sub_7A428(v37, v38);
    uint64_t v39 = sub_7A4A0();
    sub_7A428(v39, v40);
    sub_1A1238(&qword_202BE8, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    sub_1AD1E0();
    sub_2B7FC(v65, v61, &qword_201E28);
    uint64_t v41 = sub_1AD1C0();
    uint64_t v66 = v42;
    uint64_t v69 = v41;
    swift_bridgeObjectRelease();
    uint64_t *v60 = v69;
    v60[1] = v66;
    uint64_t v43 = sub_1AD1C0();
    uint64_t v67 = v44;
    uint64_t v70 = v43;
    swift_bridgeObjectRelease();
    *char v25 = v70;
    v25[1] = v67;
    uint64_t v74 = sub_1AD1C0();
    uint64_t v71 = v45;
    swift_bridgeObjectRelease();
    *char v26 = v74;
    v26[1] = v71;
    uint64_t v46 = sub_1AD1C0();
    uint64_t v48 = v47;
    swift_bridgeObjectRelease();
    *uint64_t v56 = v46;
    v56[1] = v48;
    uint64_t v49 = sub_1AD1C0();
    uint64_t v51 = v50;
    swift_bridgeObjectRelease();
    *char v28 = v49;
    v28[1] = v51;
    uint64_t v52 = sub_1AD1C0();
    uint64_t v54 = v53;
    swift_bridgeObjectRelease();
    *char v29 = v52;
    v29[1] = v54;
    sub_1A1238(&qword_202BF0, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
    sub_1AD1E0();
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v75, v72);
    uint64_t v55 = v19;
    sub_2B7FC(v59, v57, &qword_2022D0);
    sub_1A1144(v19, a2);
  }
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0((uint64_t)a1);
  return sub_1A2150(v55, (void (*)(void))type metadata accessor for OxygenSaturationQueryModel);
}

uint64_t sub_1A1144(uint64_t a1, uint64_t a2)
{
  uint64_t Model = type metadata accessor for OxygenSaturationQueryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Model - 8) + 16))(a2, a1, Model);
  return a2;
}

uint64_t sub_1A11A8()
{
  return sub_1A1238(&qword_2022B0, (void (*)(uint64_t))type metadata accessor for OxygenSaturationQueryModel);
}

uint64_t sub_1A11F0()
{
  return sub_1A1238(&qword_2021A0, (void (*)(uint64_t))type metadata accessor for OxygenSaturationQueryModel);
}

uint64_t sub_1A1238(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A1280@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return OxygenSaturationQueryModel.init(from:)(a1, a2);
}

uint64_t sub_1A1298(void *a1)
{
  return OxygenSaturationQueryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for OxygenSaturationQueryModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1AAD90();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_2694(&qword_2022C8);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = (char *)a1 + v11;
    uint64_t v15 = (char *)a2 + v11;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)a1 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = (char *)a1 + v17;
    uint64_t v21 = (char *)a2 + v17;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = sub_1AC1E0();
    uint64_t v66 = v25;
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v25))
    {
      uint64_t v26 = sub_2694(&qword_201E28);
      memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v23, 0, 1, v25);
    }
    uint64_t v27 = a3[10];
    uint64_t v28 = a3[11];
    char v29 = (uint64_t *)((char *)a1 + v27);
    uint64_t v30 = (uint64_t *)((char *)a2 + v27);
    uint64_t v31 = v30[1];
    *char v29 = *v30;
    v29[1] = v31;
    char v32 = (uint64_t *)((char *)a1 + v28);
    uint64_t v33 = (uint64_t *)((char *)a2 + v28);
    uint64_t v34 = v33[1];
    *char v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = a3[12];
    uint64_t v36 = a3[13];
    uint64_t v37 = (uint64_t *)((char *)a1 + v35);
    char v38 = (uint64_t *)((char *)a2 + v35);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    char v40 = (uint64_t *)((char *)a1 + v36);
    uint64_t v41 = (uint64_t *)((char *)a2 + v36);
    uint64_t v42 = v41[1];
    *char v40 = *v41;
    v40[1] = v42;
    uint64_t v43 = a3[14];
    uint64_t v44 = a3[15];
    uint64_t v45 = (uint64_t *)((char *)a1 + v43);
    uint64_t v46 = (uint64_t *)((char *)a2 + v43);
    uint64_t v47 = v46[1];
    *uint64_t v45 = *v46;
    v45[1] = v47;
    uint64_t v48 = (uint64_t *)((char *)a1 + v44);
    uint64_t v49 = (uint64_t *)((char *)a2 + v44);
    uint64_t v50 = *v49;
    uint64_t v51 = v49[1];
    uint64_t v52 = a3[16];
    uint64_t v53 = (char *)a2 + v52;
    uint64_t v54 = (char *)a1 + v52;
    *uint64_t v48 = v50;
    v48[1] = v51;
    uint64_t v55 = type metadata accessor for SnippetHeaderModel();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v53, 1, v55))
    {
      uint64_t v56 = sub_2694(&qword_2022D0);
      memcpy(v54, v53, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *))(*(void *)(v66 - 8) + 16))(v54, v53);
      uint64_t v57 = *(int *)(v55 + 20);
      uint64_t v58 = &v54[v57];
      uint64_t v59 = &v53[v57];
      uint64_t v60 = *((void *)v59 + 1);
      *(void *)uint64_t v58 = *(void *)v59;
      *((void *)v58 + 1) = v60;
      uint64_t v61 = *(int *)(v55 + 24);
      uint64_t v62 = &v54[v61];
      uint64_t v63 = &v53[v61];
      uint64_t v64 = *((void *)v63 + 1);
      *(void *)uint64_t v62 = *(void *)v63;
      *((void *)v62 + 1) = v64;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v54, 0, 1, v55);
    }
  }
  return a1;
}

uint64_t destroy for OxygenSaturationQueryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1AAD90();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 36);
  uint64_t v6 = sub_1AC1E0();
  if (!_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 64);
  uint64_t v8 = type metadata accessor for SnippetHeaderModel();
  uint64_t result = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v7, 1, v8);
  if (!result)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v7, v6);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for OxygenSaturationQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = sub_1AC1E0();
  uint64_t v64 = v23;
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v23))
  {
    uint64_t v24 = sub_2694(&qword_201E28);
    memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v23);
  }
  uint64_t v25 = a3[10];
  uint64_t v26 = a3[11];
  uint64_t v27 = &a1[v25];
  uint64_t v28 = &a2[v25];
  uint64_t v29 = *((void *)v28 + 1);
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = v29;
  uint64_t v30 = &a1[v26];
  uint64_t v31 = &a2[v26];
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = v32;
  uint64_t v33 = a3[12];
  uint64_t v34 = a3[13];
  uint64_t v35 = &a1[v33];
  uint64_t v36 = &a2[v33];
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = v37;
  char v38 = &a1[v34];
  uint64_t v39 = &a2[v34];
  uint64_t v40 = *((void *)v39 + 1);
  *(void *)char v38 = *(void *)v39;
  *((void *)v38 + 1) = v40;
  uint64_t v41 = a3[14];
  uint64_t v42 = a3[15];
  uint64_t v43 = &a1[v41];
  uint64_t v44 = &a2[v41];
  uint64_t v45 = *((void *)v44 + 1);
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = v45;
  uint64_t v46 = &a1[v42];
  uint64_t v47 = &a2[v42];
  uint64_t v48 = *(void *)v47;
  uint64_t v49 = *((void *)v47 + 1);
  uint64_t v50 = a3[16];
  uint64_t v51 = &a2[v50];
  uint64_t v52 = &a1[v50];
  *(void *)uint64_t v46 = v48;
  *((void *)v46 + 1) = v49;
  uint64_t v53 = type metadata accessor for SnippetHeaderModel();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v51, 1, v53))
  {
    uint64_t v54 = sub_2694(&qword_2022D0);
    memcpy(v52, v51, *(void *)(*(void *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *))(*(void *)(v64 - 8) + 16))(v52, v51);
    uint64_t v55 = *(int *)(v53 + 20);
    uint64_t v56 = &v52[v55];
    uint64_t v57 = &v51[v55];
    uint64_t v58 = *((void *)v57 + 1);
    *(void *)uint64_t v56 = *(void *)v57;
    *((void *)v56 + 1) = v58;
    uint64_t v59 = *(int *)(v53 + 24);
    uint64_t v60 = &v52[v59];
    uint64_t v61 = &v51[v59];
    uint64_t v62 = *((void *)v61 + 1);
    *(void *)uint64_t v60 = *(void *)v61;
    *((void *)v60 + 1) = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v52, 0, 1, v53);
  }
  return a1;
}

char *assignWithCopy for OxygenSaturationQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)uint64_t v24 = v26;
  uint64_t v27 = a3[9];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = sub_1AC1E0();
  int v31 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v28, 1, v30);
  int v32 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v29, 1, v30);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v33 = *(void *)(v30 - 8);
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v30);
LABEL_12:
    uint64_t v34 = sub_2694(&qword_201E28);
    memcpy(v28, v29, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 24))(v28, v29, v30);
LABEL_13:
  uint64_t v35 = a3[10];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = *((void *)v37 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[11];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  *(void *)uint64_t v39 = *(void *)v40;
  *((void *)v39 + 1) = *((void *)v40 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[12];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  *((void *)v42 + 1) = *((void *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[13];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = *((void *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[14];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  *((void *)v48 + 1) = *((void *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = a3[15];
  uint64_t v51 = &a1[v50];
  uint64_t v52 = &a2[v50];
  *(void *)uint64_t v51 = *(void *)v52;
  *((void *)v51 + 1) = *((void *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[16];
  uint64_t v54 = &a1[v53];
  uint64_t v55 = &a2[v53];
  uint64_t v56 = type metadata accessor for SnippetHeaderModel();
  int v57 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v54, 1, v56);
  int v58 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v55, 1, v56);
  if (!v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 24))(v54, v55, v30);
      uint64_t v67 = *(int *)(v56 + 20);
      uint64_t v68 = &v54[v67];
      uint64_t v69 = &v55[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      *((void *)v68 + 1) = *((void *)v69 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v70 = *(int *)(v56 + 24);
      uint64_t v71 = &v54[v70];
      uint64_t v72 = &v55[v70];
      *(void *)uint64_t v71 = *(void *)v72;
      *((void *)v71 + 1) = *((void *)v72 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1A2150((uint64_t)v54, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v58)
  {
LABEL_18:
    uint64_t v65 = sub_2694(&qword_2022D0);
    memcpy(v54, v55, *(void *)(*(void *)(v65 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v54, v55, v30);
  uint64_t v59 = *(int *)(v56 + 20);
  uint64_t v60 = &v54[v59];
  uint64_t v61 = &v55[v59];
  *(void *)uint64_t v60 = *(void *)v61;
  *((void *)v60 + 1) = *((void *)v61 + 1);
  uint64_t v62 = *(int *)(v56 + 24);
  uint64_t v63 = &v54[v62];
  uint64_t v64 = &v55[v62];
  *(void *)uint64_t v63 = *(void *)v64;
  *((void *)v63 + 1) = *((void *)v64 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v54, 0, 1, v56);
  return a1;
}

uint64_t sub_1A2150(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_20688();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

char *initializeWithTake for OxygenSaturationQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  uint64_t v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v22, 1, v23))
  {
    uint64_t v24 = sub_2694(&qword_201E28);
    memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v21, 0, 1, v23);
  }
  uint64_t v25 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v25] = *(_OWORD *)&a2[v25];
  uint64_t v26 = a3[13];
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  *(_OWORD *)&a1[v26] = *(_OWORD *)&a2[v26];
  uint64_t v27 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  uint64_t v28 = a3[16];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = type metadata accessor for SnippetHeaderModel();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v30, 1, v31))
  {
    uint64_t v32 = sub_2694(&qword_2022D0);
    memcpy(v29, v30, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v29, v30, v23);
    *(_OWORD *)&v29[*(int *)(v31 + 20)] = *(_OWORD *)&v30[*(int *)(v31 + 20)];
    *(_OWORD *)&v29[*(int *)(v31 + 24)] = *(_OWORD *)&v30[*(int *)(v31 + 24)];
    _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v29, 0, 1, v31);
  }
  return a1;
}

char *assignWithTake for OxygenSaturationQueryModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1AAD90();
  int v7 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_2694(&qword_2022C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = &a1[v18];
  uint64_t v22 = &a2[v18];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = a3[9];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = sub_1AC1E0();
  int v27 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v24, 1, v26);
  int v28 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v25, 1, v26);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
      _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v29 = *(void *)(v26 - 8);
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v24, v26);
LABEL_12:
    uint64_t v30 = sub_2694(&qword_201E28);
    memcpy(v24, v25, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v24, v25, v26);
LABEL_13:
  uint64_t v31 = a3[10];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v35 = *(void *)v33;
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = v35;
  *((void *)v32 + 1) = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[11];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  uint64_t v40 = *(void *)v38;
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = v40;
  *((void *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[12];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  uint64_t v45 = *(void *)v43;
  uint64_t v44 = *((void *)v43 + 1);
  *(void *)uint64_t v42 = v45;
  *((void *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[13];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  uint64_t v50 = *(void *)v48;
  uint64_t v49 = *((void *)v48 + 1);
  *(void *)uint64_t v47 = v50;
  *((void *)v47 + 1) = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[14];
  uint64_t v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  uint64_t v55 = *(void *)v53;
  uint64_t v54 = *((void *)v53 + 1);
  *(void *)uint64_t v52 = v55;
  *((void *)v52 + 1) = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[15];
  int v57 = &a1[v56];
  int v58 = &a2[v56];
  uint64_t v60 = *(void *)v58;
  uint64_t v59 = *((void *)v58 + 1);
  *(void *)int v57 = v60;
  *((void *)v57 + 1) = v59;
  swift_bridgeObjectRelease();
  uint64_t v61 = a3[16];
  uint64_t v62 = &a1[v61];
  uint64_t v63 = &a2[v61];
  uint64_t v64 = type metadata accessor for SnippetHeaderModel();
  int v65 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v62, 1, v64);
  int v66 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0((uint64_t)v63, 1, v64);
  if (!v65)
  {
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 40))(v62, v63, v26);
      uint64_t v69 = *(int *)(v64 + 20);
      uint64_t v70 = &v62[v69];
      uint64_t v71 = &v63[v69];
      uint64_t v73 = *(void *)v71;
      uint64_t v72 = *((void *)v71 + 1);
      *(void *)uint64_t v70 = v73;
      *((void *)v70 + 1) = v72;
      swift_bridgeObjectRelease();
      uint64_t v74 = *(int *)(v64 + 24);
      uint64_t v75 = &v62[v74];
      uint64_t v76 = &v63[v74];
      uint64_t v78 = *(void *)v76;
      uint64_t v77 = *((void *)v76 + 1);
      *(void *)uint64_t v75 = v78;
      *((void *)v75 + 1) = v77;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1A2150((uint64_t)v62, (void (*)(void))type metadata accessor for SnippetHeaderModel);
    goto LABEL_18;
  }
  if (v66)
  {
LABEL_18:
    uint64_t v67 = sub_2694(&qword_2022D0);
    memcpy(v62, v63, *(void *)(*(void *)(v67 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v62, v63, v26);
  *(_OWORD *)&v62[*(int *)(v64 + 20)] = *(_OWORD *)&v63[*(int *)(v64 + 20)];
  *(_OWORD *)&v62[*(int *)(v64 + 24)] = *(_OWORD *)&v63[*(int *)(v64 + 24)];
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0((uint64_t)v62, 0, 1, v64);
  return a1;
}

uint64_t getEnumTagSinglePayload for OxygenSaturationQueryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A2988);
}

uint64_t sub_1A2988(uint64_t a1, uint64_t a2, int *a3)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_13:
    return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v9, a2, v8);
  }
  sub_2694(&qword_201E28);
  sub_52E0();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v12 = a3[9];
LABEL_12:
    uint64_t v9 = a1 + v12;
    goto LABEL_13;
  }
  if (a2 != 2147483646)
  {
    uint64_t v8 = sub_2694(&qword_2022D0);
    uint64_t v12 = a3[16];
    goto LABEL_12;
  }
  unint64_t v13 = *(void *)(a1 + a3[10] + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  int v14 = v13 - 1;
  if (v14 < 0) {
    int v14 = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for OxygenSaturationQueryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A2A8C);
}

void sub_1A2A8C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  sub_2694(&qword_2022C8);
  sub_52E0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    sub_2694(&qword_201E28);
    sub_52E0();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[9];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(void *)(a1 + a4[10] + 8) = a2;
        return;
      }
      uint64_t v10 = sub_2694(&qword_2022D0);
      uint64_t v14 = a4[16];
    }
    uint64_t v11 = a1 + v14;
  }

  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v11, a2, a2, v10);
}

void sub_1A2B6C()
{
  sub_2EBF4(319, &qword_202C60, (void (*)(uint64_t))&type metadata accessor for AppPunchout);
  if (v0 <= 0x3F)
  {
    sub_2EBF4(319, (unint64_t *)&qword_202C68, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    if (v1 <= 0x3F)
    {
      sub_2EBF4(319, (unint64_t *)&qword_202C70, (void (*)(uint64_t))type metadata accessor for SnippetHeaderModel);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for OxygenSaturationQueryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF4)
  {
    if (a2 + 12 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 12) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 13;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v5 = v6 - 13;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for OxygenSaturationQueryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *uint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A2E3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OxygenSaturationQueryModel.CodingKeys()
{
  return &type metadata for OxygenSaturationQueryModel.CodingKeys;
}

unint64_t sub_1A2E78()
{
  unint64_t result = qword_208DD8;
  if (!qword_208DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208DD8);
  }
  return result;
}

unint64_t sub_1A2EC8()
{
  unint64_t result = qword_208DE0;
  if (!qword_208DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208DE0);
  }
  return result;
}

unint64_t sub_1A2F18()
{
  unint64_t result = qword_208DE8;
  if (!qword_208DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_208DE8);
  }
  return result;
}

uint64_t sub_1A2F64()
{
  return type metadata accessor for OxygenSaturationQueryModel();
}

uint64_t sub_1A2F7C()
{
  return type metadata accessor for OxygenSaturationQueryModel();
}

uint64_t sub_1A2F98()
{
  return type metadata accessor for OxygenSaturationQueryModel();
}

void sub_1A2FB0(uint64_t a1@<X8>)
{
  *(void *)(v1 + a1) = 0;
}

uint64_t type metadata accessor for WellnessLoggingCATsSimple()
{
  uint64_t result = qword_208DF0;
  if (!qword_208DF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1A3004()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1A3044()
{
  sub_A364();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  *(unsigned char *)(v1 + 81) = v3;
  *(unsigned char *)(v1 + 80) = v4;
  *(void *)(v1 + 16) = v5;
  *(void *)(v1 + 24) = v6;
  uint64_t v7 = sub_2694(&qword_201E28);
  sub_53D4(v7);
  *(void *)(v1 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1A30D0()
{
  sub_47D74();
  sub_E588();
  char v3 = *(unsigned char *)(v1 + 80);
  sub_2694(&qword_2027C8);
  uint64_t v4 = sub_1A7894();
  uint64_t v5 = sub_1A78DC(v4);
  *(_OWORD *)(v5 + 16) = xmmword_1B08C0;
  *(void *)(v5 + 32) = 0x63696C6F74737973;
  *(void *)(v5 + 40) = 0xE800000000000000;
  if (v3)
  {
    sub_1A7800();
  }
  else
  {
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v7 = &type metadata for Double;
  }
  char v8 = *(unsigned char *)(v1 + 81);
  v2[6] = v6;
  v2[9] = v7;
  v2[10] = 0x696C6F7473616964;
  v2[11] = 0xE900000000000063;
  if (v8)
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    v2[13] = 0;
    v2[14] = 0;
  }
  else
  {
    uint64_t v9 = *(void *)(v1 + 24);
    uint64_t v10 = &type metadata for Double;
  }
  uint64_t v11 = *(void *)(v1 + 48);
  v2[12] = v9;
  sub_1A7910((uint64_t)v10);
  sub_9FA8(v12, v11, &qword_201E28);
  uint64_t v13 = sub_1AC1E0();
  sub_1A7984(v13);
  if (v14)
  {
    sub_A068(v11, &qword_201E28);
    sub_508E4();
  }
  else
  {
    v2[21] = v0;
    sub_B5B0(v2 + 18);
    sub_A5C0();
    sub_50818();
    v15();
  }
  uint64_t v16 = sub_50774();
  uint64_t v17 = (void *)sub_984C8(v16);
  void *v17 = v18;
  v17[1] = sub_1A3288;
  sub_50838();
  sub_50828(36);
  sub_47BE4();
  return v22(v19, v20, v21, v22, v23, v24, v25, v26);
}

uint64_t sub_1A3288()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_1A339C()
{
  sub_A364();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_982F8();
  return v0();
}

uint64_t sub_1A33FC(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 48) = a1;
  return sub_7BBF0((uint64_t)sub_1A3418);
}

uint64_t sub_1A3418()
{
  sub_47634();
  char v1 = *(unsigned char *)(v0 + 48);
  sub_2694(&qword_2027C8);
  uint64_t v2 = swift_allocObject();
  sub_98CCC();
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 72) = &type metadata for Bool;
  *(unsigned char *)(v3 + 48) = v1;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:)
                                       + async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  *(void *)(v0 + 24) = v2;
  *(_OWORD *)(v2 + 16) = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1A3528;
  uint64_t v7 = sub_1A7928(0xD00000000000003BLL);
  return v9(v7);
}

uint64_t sub_1A3528()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_D7EB0();
    return v11(v10);
  }
}

uint64_t sub_1A3638()
{
  sub_A364();
  *(unsigned char *)(v1 + 80) = v2;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v0;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  uint64_t v6 = sub_2694(&qword_201E28);
  sub_53D4(v6);
  *(void *)(v1 + 48) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1A36C0()
{
  sub_47D74();
  sub_E588();
  uint64_t v2 = *(void *)(v0 + 48);
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_1A7894();
  uint64_t v4 = (__n128 *)sub_1A78DC(v3);
  uint64_t v5 = sub_507D4(v4, (__n128)xmmword_1B08C0);
  sub_50890((uint64_t)v5, v6, &qword_201E28);
  uint64_t v7 = sub_1AC1E0();
  sub_1A7984(v7);
  if (v8)
  {
    sub_A068(v2, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_508CC();
    sub_A5C0();
    sub_50818();
    v9();
  }
  uint64_t v10 = *(void *)(v0 + 24);
  v1[10] = 1702125924;
  v1[11] = 0xE400000000000000;
  if (v10)
  {
    uint64_t v11 = sub_1AC100();
    uint64_t v12 = v10;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
    v1[13] = 0;
    v1[14] = 0;
  }
  char v13 = *(unsigned char *)(v0 + 80);
  v1[12] = v12;
  v1[15] = v11;
  v1[16] = 2003790950;
  v1[17] = 0xE400000000000000;
  if (v13)
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    v1[19] = 0;
    v1[20] = 0;
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 32);
    uint64_t v15 = &type metadata for Double;
  }
  v1[21] = v15;
  v1[18] = v14;
  swift_retain();
  uint64_t v16 = swift_task_alloc();
  uint64_t v17 = (void *)sub_984C8(v16);
  void *v17 = v18;
  v17[1] = sub_1A3288;
  sub_50828(29);
  sub_47BE4();
  return v22(v19, v20, v21, v22, v23, v24, v25, v26);
}

uint64_t sub_1A3880()
{
  sub_A364();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = sub_2694(&qword_201E28);
  sub_53D4(v5);
  *(void *)(v1 + 40) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1A3908()
{
  sub_47D74();
  sub_E588();
  uint64_t v2 = *(void *)(v0 + 40);
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_50908();
  uint64_t v4 = (__n128 *)sub_1A78AC(v3);
  uint64_t v5 = sub_507D4(v4, (__n128)xmmword_1AF720);
  sub_50890((uint64_t)v5, v6, &qword_201E28);
  uint64_t v7 = sub_1AC1E0();
  sub_1A7720(v7);
  if (v8)
  {
    sub_A068(v2, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_508CC();
    sub_A5C0();
    sub_50818();
    v9();
  }
  char v10 = *(unsigned char *)(v0 + 72);
  v1[10] = 2003790950;
  v1[11] = 0xE400000000000000;
  if (v10)
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
    v1[13] = 0;
    v1[14] = 0;
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 24);
    uint64_t v12 = &type metadata for Double;
  }
  v1[15] = v12;
  v1[12] = v11;
  uint64_t v13 = sub_50774();
  uint64_t v14 = (void *)sub_141E40(v13);
  *uint64_t v14 = v15;
  v14[1] = sub_1A3A70;
  sub_50828(35);
  sub_47BE4();
  return v19(v16, v17, v18, v19, v20, v21, v22, v23);
}

uint64_t sub_1A3A70()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_1A3B84()
{
  sub_A364();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_141D7C();
  return v0();
}

uint64_t sub_1A3BE4()
{
  sub_A364();
  *(unsigned char *)(v1 + 64) = v2;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v0;
  uint64_t v4 = sub_2694(&qword_201E28);
  sub_53D4(v4);
  *(void *)(v1 + 32) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1A3C68()
{
  sub_47D74();
  sub_E588();
  sub_508FC();
  sub_2694(&qword_2027C8);
  uint64_t v2 = sub_50908();
  uint64_t v3 = (__n128 *)sub_508F0(v2);
  uint64_t v4 = sub_507D4(v3, (__n128)xmmword_1AF720);
  sub_50890((uint64_t)v4, v5, &qword_201E28);
  uint64_t v6 = sub_1AC1E0();
  sub_507A8(v6);
  if (v7)
  {
    sub_A068(v0, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_508CC();
    sub_A5C0();
    sub_50818();
    v8();
  }
  sub_D836C();
  *(void *)(v1 + 80) = 0xD000000000000019;
  *(void *)(v1 + 88) = v9;
  *(void *)(v1 + 120) = &type metadata for Bool;
  *(unsigned char *)(v1 + 96) = v10;
  uint64_t v11 = sub_50774();
  uint64_t v12 = (void *)sub_50920(v11);
  void *v12 = v13;
  v12[1] = sub_1A3DB0;
  sub_50874(0xD00000000000002BLL);
  sub_47BE4();
  return v17(v14, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t sub_1A3DB0()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_1A3EC4()
{
  sub_A364();
  sub_1A7830(v1, v2, v3, v4);
  uint64_t v5 = sub_2694(&qword_201E28);
  sub_53D4(v5);
  *(void *)(v0 + 40) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1A3F44()
{
  sub_47D74();
  sub_E588();
  char v2 = *(unsigned char *)(v0 + 72);
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_1A7894();
  char v4 = (__n128 *)sub_1A78AC(v3);
  sub_1A77A0(v4, (__n128)xmmword_1B08C0);
  if (v2) {
    sub_1A7800();
  }
  else {
    uint64_t v5 = &type metadata for Double;
  }
  uint64_t v6 = sub_1A774C((uint64_t)v5);
  sub_9FA8(v6, v1, &qword_201E28);
  uint64_t v7 = sub_1AC1E0();
  sub_1A7720(v7);
  if (v8)
  {
    sub_A068(v1, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_1A78B8();
    sub_A5C0();
    sub_50818();
    v9();
  }
  sub_1A7774();
  sub_1A78D0(v10);
  uint64_t v11 = sub_50774();
  uint64_t v12 = (void *)sub_141E40(v11);
  void *v12 = v13;
  v12[1] = sub_1A409C;
  sub_50828(38);
  sub_47BE4();
  return v17(v14, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t sub_1A409C()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *char v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_1A41B0()
{
  sub_A364();
  sub_1A7830(v1, v2, v3, v4);
  uint64_t v5 = sub_2694(&qword_201E28);
  sub_53D4(v5);
  *(void *)(v0 + 40) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1A4230()
{
  sub_47D74();
  sub_E588();
  char v2 = *(unsigned char *)(v0 + 72);
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_1A7894();
  char v4 = (__n128 *)sub_1A78AC(v3);
  sub_1A77A0(v4, (__n128)xmmword_1B08C0);
  if (v2) {
    sub_1A7800();
  }
  else {
    uint64_t v5 = &type metadata for Double;
  }
  uint64_t v6 = sub_1A774C((uint64_t)v5);
  sub_9FA8(v6, v1, &qword_201E28);
  uint64_t v7 = sub_1AC1E0();
  sub_1A7720(v7);
  if (v8)
  {
    sub_A068(v1, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_1A78B8();
    sub_A5C0();
    sub_50818();
    v9();
  }
  sub_1A7774();
  sub_1A78D0(v10);
  uint64_t v11 = sub_50774();
  uint64_t v12 = (void *)sub_141E40(v11);
  void *v12 = v13;
  v12[1] = sub_1A409C;
  sub_50838();
  sub_50828(45);
  sub_47BE4();
  return v17(v14, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t sub_1A4380()
{
  sub_A364();
  sub_1A7830(v1, v2, v3, v4);
  uint64_t v5 = sub_2694(&qword_201E28);
  sub_53D4(v5);
  *(void *)(v0 + 40) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1A4400()
{
  sub_47D74();
  sub_E588();
  char v2 = *(unsigned char *)(v0 + 72);
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_1A7894();
  char v4 = (__n128 *)sub_1A78AC(v3);
  sub_1A77A0(v4, (__n128)xmmword_1B08C0);
  if (v2) {
    sub_1A7800();
  }
  else {
    uint64_t v5 = &type metadata for Double;
  }
  uint64_t v6 = sub_1A774C((uint64_t)v5);
  sub_9FA8(v6, v1, &qword_201E28);
  uint64_t v7 = sub_1AC1E0();
  sub_1A7720(v7);
  if (v8)
  {
    sub_A068(v1, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_1A78B8();
    sub_A5C0();
    sub_50818();
    v9();
  }
  sub_1A7774();
  sub_1A78D0(v10);
  uint64_t v11 = sub_50774();
  uint64_t v12 = (void *)sub_141E40(v11);
  void *v12 = v13;
  v12[1] = sub_1A409C;
  sub_50838();
  sub_50828(41);
  sub_47BE4();
  return v17(v14, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t sub_1A4550()
{
  sub_A364();
  sub_1A7830(v1, v2, v3, v4);
  uint64_t v5 = sub_2694(&qword_201E28);
  sub_53D4(v5);
  *(void *)(v0 + 40) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1A45D0()
{
  sub_47D74();
  sub_E588();
  char v2 = *(unsigned char *)(v0 + 72);
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_1A7894();
  char v4 = (__n128 *)sub_1A78AC(v3);
  sub_1A77A0(v4, (__n128)xmmword_1B08C0);
  if (v2) {
    sub_1A7800();
  }
  else {
    uint64_t v5 = &type metadata for Double;
  }
  uint64_t v6 = sub_1A774C((uint64_t)v5);
  sub_9FA8(v6, v1, &qword_201E28);
  uint64_t v7 = sub_1AC1E0();
  sub_1A7720(v7);
  if (v8)
  {
    sub_A068(v1, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_1A78B8();
    sub_A5C0();
    sub_50818();
    v9();
  }
  sub_1A7774();
  sub_1A78D0(v10);
  uint64_t v11 = sub_50774();
  uint64_t v12 = (void *)sub_141E40(v11);
  void *v12 = v13;
  v12[1] = sub_1A409C;
  sub_50838();
  sub_50828(37);
  sub_47BE4();
  return v17(v14, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t sub_1A4720()
{
  sub_A364();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  *(unsigned char *)(v1 + 88) = v3;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  uint64_t v6 = sub_2694(&qword_201E28);
  sub_53D4(v6);
  *(void *)(v1 + 48) = sub_A220();
  *(void *)(v1 + 56) = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1A47B4()
{
  sub_47D74();
  sub_E588();
  sub_2694(&qword_2027C8);
  uint64_t v1 = sub_1A7894();
  *(void *)(v0 + 64) = v1;
  *(_OWORD *)(v1 + 16) = xmmword_1B08C0;
  *(void *)(v1 + 32) = 0x6570795461746164;
  *(void *)(v1 + 40) = 0xE800000000000000;
  sub_1A78F8(v1, v2, &qword_201E28);
  uint64_t v3 = sub_1AC1E0();
  if (sub_D8238() == 1)
  {
    sub_A068(*(void *)(v0 + 56), &qword_201E28);
    sub_50958();
  }
  else
  {
    sub_1A7940();
    sub_A5C0();
    sub_50848();
    v4();
  }
  char v5 = *(unsigned char *)(v0 + 88);
  *(void *)(v1 + 80) = 0x65756C6176;
  *(void *)(v1 + 88) = 0xE500000000000000;
  if (v5)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    *(void *)(v1 + 104) = 0;
    *(void *)(v1 + 112) = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 24);
    uint64_t v7 = &type metadata for Double;
  }
  uint64_t v8 = *(void *)(v0 + 48);
  *(void *)(v1 + 96) = v6;
  sub_1A7910((uint64_t)v7);
  sub_9FA8(v9, v8, &qword_201E28);
  sub_1A77D8();
  if (v10)
  {
    sub_A068(v8, &qword_201E28);
    sub_50958();
  }
  else
  {
    *(void *)(v1 + 168) = v3;
    sub_B5B0((uint64_t *)(v1 + 144));
    sub_A5C0();
    sub_50848();
    v11();
  }
  uint64_t v12 = (void *)sub_50774();
  *(void *)(v0 + 72) = v12;
  void *v12 = v0;
  v12[1] = sub_1A49BC;
  sub_50828(38);
  sub_47BE4();
  return v16(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1A49BC()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_1A4ADC()
{
  sub_A364();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1A4B50(char a1, char a2)
{
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 49) = a2;
  *(unsigned char *)(v3 + 48) = a1;
  return sub_7BBF0((uint64_t)sub_1A4B70);
}

uint64_t sub_1A4B70()
{
  sub_47634();
  char v1 = *(unsigned char *)(v0 + 49);
  char v2 = *(unsigned char *)(v0 + 48);
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_50908();
  *(void *)(v0 + 24) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_1AF720;
  *(unsigned char *)(sub_1A7810(v3) + 48) = v2;
  sub_1A79B0();
  *(void *)(v4 + 72) = v5;
  *(void *)(v4 + 80) = v6;
  *(void *)(v4 + 88) = 0xEA00000000006465;
  *(void *)(v4 + 120) = v5;
  *(unsigned char *)(v4 + 96) = v1;
  uint64_t v7 = (void *)sub_50774();
  *(void *)(v0 + 32) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1A3528;
  sub_50838();
  return v9(0xD000000000000034);
}

uint64_t sub_1A4C74()
{
  sub_A364();
  char v1 = (void *)sub_50774();
  *(void *)(v0 + 16) = v1;
  *char v1 = v0;
  v1[1] = sub_1384F8;
  return v3(0xD000000000000031, 0x80000000001BE770, &_swiftEmptyArrayStorage);
}

uint64_t sub_1A4D20()
{
  sub_A364();
  char v1 = (void *)sub_50774();
  *(void *)(v0 + 16) = v1;
  *char v1 = v0;
  v1[1] = sub_1A7718;
  return v3(0xD000000000000039, 0x80000000001BE730, &_swiftEmptyArrayStorage);
}

uint64_t sub_1A4DCC()
{
  sub_A364();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = sub_2694(&qword_201E28);
  sub_53D4(v4);
  v1[5] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1A4E50()
{
  sub_98364();
  uint64_t v16 = v1;
  sub_7F418();
  uint64_t v2 = v0[2];
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_50908();
  v0[6] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_1AF720;
  *(void *)(v3 + 32) = 0x746867696568;
  *(void *)(v3 + 40) = 0xE600000000000000;
  uint64_t v4 = 0;
  if (v2)
  {
    uint64_t v4 = sub_1ABF10();
  }
  else
  {
    *(void *)(v3 + 56) = 0;
    *(void *)(v3 + 64) = 0;
  }
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[3];
  *(void *)(v3 + 48) = v2;
  *(void *)(v3 + 72) = v4;
  *(void *)(v3 + 80) = 1953066613;
  *(void *)(v3 + 88) = 0xE400000000000000;
  sub_9FA8(v6, v5, &qword_201E28);
  uint64_t v7 = sub_1AC1E0();
  int v8 = _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v5, 1, v7);
  uint64_t v9 = v0[5];
  if (v8 == 1)
  {
    swift_retain();
    sub_A068(v9, &qword_201E28);
    sub_508E4();
  }
  else
  {
    *(void *)(v3 + 120) = v7;
    sub_B5B0((uint64_t *)(v3 + 96));
    sub_A5C0();
    sub_50818();
    v10();
    swift_retain();
  }
  uint64_t v11 = sub_9826C();
  uint64_t v12 = (void *)sub_141E40(v11);
  void *v12 = v13;
  v12[1] = sub_1A3A70;
  return v15(0xD00000000000001DLL, 0x80000000001BE710, v3);
}

uint64_t sub_1A5010()
{
  sub_A364();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = sub_2694(&qword_201E28);
  sub_53D4(v3);
  v1[4] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1A5090()
{
  sub_47D74();
  sub_E588();
  sub_508FC();
  sub_2694(&qword_2027C8);
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = (__n128 *)sub_508F0(v1);
  uint64_t v3 = sub_507D4(v2, (__n128)xmmword_1ADCF0);
  sub_50890((uint64_t)v3, v4, &qword_201E28);
  uint64_t v5 = sub_1AC1E0();
  sub_507A8(v5);
  if (v6)
  {
    sub_A068(v0, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_508CC();
    sub_A5C0();
    sub_50818();
    v7();
  }
  uint64_t v8 = sub_50774();
  uint64_t v9 = (void *)sub_50920(v8);
  *uint64_t v9 = v10;
  v9[1] = sub_1A3DB0;
  sub_50828(35);
  sub_47BE4();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_1A51C0()
{
  sub_A364();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 80) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = sub_2694(&qword_201E28);
  sub_53D4(v5);
  uint64_t v6 = sub_A220();
  *(void *)(v1 + 48) = sub_1A796C(v6);
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1A524C()
{
  sub_47D74();
  sub_E588();
  uint64_t v2 = *(void *)(v0 + 48);
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_1A7894();
  uint64_t v4 = sub_1A78DC(v3);
  *(_OWORD *)(v4 + 16) = xmmword_1B08C0;
  uint64_t v5 = (uint64_t *)(v4 + 48);
  uint64_t v6 = sub_1A7878(v4);
  sub_1A78F8(v6, v7, &qword_201E28);
  uint64_t v8 = sub_1AC1E0();
  sub_1A77D8();
  if (v9)
  {
    sub_A068(v2, &qword_201E28);
    sub_50958();
  }
  else
  {
    sub_1A7940();
    sub_A5C0();
    sub_50848();
    v10();
  }
  uint64_t v11 = sub_1A7844();
  sub_9FA8(v11, v2, &qword_201E28);
  sub_1A77BC(v2, 1, v8);
  if (v9)
  {
    sub_A068(v2, &qword_201E28);
    sub_50958();
  }
  else
  {
    v1[15] = v8;
    sub_B5B0(v5);
    sub_A5C0();
    sub_50848();
    v12();
  }
  char v13 = *(unsigned char *)(v0 + 80);
  v1[16] = 0x757461745364656DLL;
  v1[17] = 0xE900000000000073;
  sub_1A78D0(v13);
  uint64_t v14 = sub_50774();
  uint64_t v15 = (void *)sub_984C8(v14);
  *uint64_t v15 = v16;
  v15[1] = sub_1A5418;
  sub_50838();
  sub_50828(49);
  sub_47BE4();
  return v20(v17, v18, v19, v20, v21, v22, v23, v24);
}

uint64_t sub_1A5418()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    sub_1A79C4();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_1A5530()
{
  sub_A364();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = sub_2694(&qword_201E28);
  sub_53D4(v5);
  *(void *)(v1 + 40) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1A55B8()
{
  sub_98364();
  uint64_t v20 = v2;
  sub_7F418();
  char v3 = *(unsigned char *)(v0 + 72);
  sub_2694(&qword_2027C8);
  uint64_t v4 = sub_50908();
  uint64_t v5 = sub_1A78AC(v4);
  *(_OWORD *)(v5 + 16) = xmmword_1AF720;
  sub_1A78E8(v5, (uint64_t)"remainingMedCount");
  if (v3) {
    sub_1A7800();
  }
  else {
    uint64_t v6 = *(void *)(v0 + 16);
  }
  uint64_t v7 = *(void *)(v0 + 40);
  v1[6] = v6;
  sub_1A79DC();
  v1[9] = v8;
  v1[10] = v9;
  v1[11] = 0xE700000000000000;
  sub_9FA8(v10, v7, &qword_201E28);
  uint64_t v11 = sub_1AC1E0();
  sub_1A7720(v11);
  if (v12)
  {
    sub_A068(v7, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_1A78B8();
    sub_A5C0();
    sub_50818();
    v13();
  }
  uint64_t v14 = sub_9826C();
  uint64_t v15 = (void *)sub_141E40(v14);
  *uint64_t v15 = v16;
  v15[1] = sub_1A409C;
  uint64_t v17 = sub_D7EC4(0xD000000000000031);
  return v18(v17);
}

uint64_t sub_1A5728(char a1, uint64_t a2, char a3, char a4, char a5)
{
  *(unsigned char *)(v6 + 59) = a5;
  *(unsigned char *)(v6 + 58) = a4;
  *(unsigned char *)(v6 + 57) = a3;
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = v5;
  *(unsigned char *)(v6 + 56) = a1;
  return sub_7BBF0((uint64_t)sub_1A5750);
}

uint64_t sub_1A5750()
{
  sub_E588();
  char v1 = *(unsigned char *)(v0 + 57);
  char v2 = *(unsigned char *)(v0 + 56);
  sub_2694(&qword_2027C8);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 32) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_1B08E0;
  sub_D836C();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v6;
  *(unsigned char *)(v4 + 48) = v2;
  *(void *)(v4 + 72) = &type metadata for Bool;
  *(void *)(v4 + 80) = 0xD000000000000016;
  sub_D836C();
  *(void *)(v7 + 88) = v8;
  if (v1)
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    *(void *)(v3 + 104) = 0;
    *(void *)(v3 + 112) = 0;
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 16);
    uint64_t v10 = &type metadata for Double;
  }
  *(void *)(v3 + 96) = v9;
  *(void *)(v3 + 120) = v10;
  *(void *)(v3 + 128) = 0xD000000000000018;
  sub_D836C();
  *(void *)(v3 + 136) = v11;
  *(unsigned char *)(v3 + 144) = v12;
  *(void *)(v3 + 168) = v13;
  *(void *)(v3 + 176) = 0xD000000000000016;
  sub_D836C();
  *(void *)(v3 + 184) = v14;
  *(void *)(v3 + 216) = v15;
  *(unsigned char *)(v3 + 192) = v16;
  uint64_t v17 = (void *)sub_9826C();
  *(void *)(v0 + 40) = v17;
  void *v17 = v0;
  v17[1] = sub_1A58CC;
  uint64_t v18 = sub_1A7928(0xD00000000000003BLL);
  return v20(v18);
}

uint64_t sub_1A58CC()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_D7EB0();
    return v11(v10);
  }
}

uint64_t sub_1A59DC()
{
  sub_A364();
  swift_bridgeObjectRelease();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1A5A3C()
{
  sub_A364();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 75) = v3;
  *(unsigned char *)(v1 + 74) = v4;
  *(unsigned char *)(v1 + 73) = v5;
  *(unsigned char *)(v1 + 72) = v6;
  *(void *)(v1 + 16) = v7;
  uint64_t v8 = sub_2694(&qword_201E28);
  sub_53D4(v8);
  *(void *)(v1 + 40) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1A5AD0()
{
  sub_47D74();
  sub_E588();
  uint64_t v2 = *(void *)(v0 + 40);
  sub_2694(&qword_2027C8);
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = sub_1A78AC(v3);
  *(_OWORD *)(v4 + 16) = xmmword_1B08D0;
  uint64_t v5 = sub_1A7878(v4);
  sub_50890(v5, v6, &qword_201E28);
  uint64_t v7 = sub_1AC1E0();
  sub_1A7720(v7);
  if (v8)
  {
    sub_A068(v2, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_508CC();
    sub_A5C0();
    sub_50818();
    v9();
  }
  char v10 = *(unsigned char *)(v0 + 73);
  char v11 = *(unsigned char *)(v0 + 72);
  *(void *)(v1 + 80) = 0xD000000000000012;
  *(void *)(v1 + 88) = 0x80000000001BABE0;
  *(unsigned char *)(v1 + 96) = v11;
  *(void *)(v1 + 120) = &type metadata for Bool;
  *(void *)(v1 + 128) = 0xD000000000000016;
  *(void *)(v1 + 136) = 0x80000000001BE580;
  if (v10)
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    *(void *)(v1 + 152) = 0;
    *(void *)(v1 + 160) = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 24);
    uint64_t v13 = &type metadata for Double;
  }
  *(void *)(v1 + 144) = v12;
  *(void *)(v1 + 168) = v13;
  *(void *)(v1 + 176) = 0xD000000000000018;
  sub_D836C();
  *(void *)(v1 + 184) = v14;
  *(unsigned char *)(v1 + 192) = v15;
  *(void *)(v1 + 216) = v16;
  *(void *)(v1 + 224) = 0xD000000000000016;
  sub_D836C();
  *(void *)(v1 + 232) = v17;
  *(void *)(v1 + 264) = v18;
  *(unsigned char *)(v1 + 240) = v19;
  uint64_t v20 = sub_50774();
  uint64_t v21 = (void *)sub_141E40(v20);
  *uint64_t v21 = v22;
  v21[1] = sub_1A409C;
  sub_50874(0xD00000000000003CLL);
  sub_47BE4();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30);
}

uint64_t sub_1A5CB0()
{
  sub_A364();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = sub_2694(&qword_201E28);
  sub_53D4(v4);
  uint64_t v5 = sub_A220();
  v1[6] = sub_1A796C(v5);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1A5D38()
{
  sub_47D74();
  sub_E588();
  uint64_t v2 = *(void *)(v0 + 48);
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_50908();
  uint64_t v4 = sub_1A78DC(v3);
  *(_OWORD *)(v4 + 16) = xmmword_1AF720;
  uint64_t v5 = (uint64_t *)(v4 + 48);
  uint64_t v6 = sub_1A7878(v4);
  sub_1A78F8(v6, v7, &qword_201E28);
  uint64_t v8 = sub_1AC1E0();
  sub_1A77D8();
  if (v9)
  {
    sub_A068(v2, &qword_201E28);
    sub_50958();
  }
  else
  {
    sub_1A7940();
    sub_A5C0();
    sub_50848();
    v10();
  }
  uint64_t v11 = sub_1A7844();
  sub_9FA8(v11, v2, &qword_201E28);
  sub_1A77BC(v2, 1, v8);
  if (v9)
  {
    sub_A068(v2, &qword_201E28);
    sub_50958();
  }
  else
  {
    *(void *)(v1 + 120) = v8;
    sub_B5B0(v5);
    sub_A5C0();
    sub_50848();
    v12();
  }
  uint64_t v13 = sub_50774();
  uint64_t v14 = (void *)sub_984C8(v13);
  *uint64_t v14 = v15;
  v14[1] = sub_1A5418;
  sub_50838();
  sub_50828(55);
  sub_47BE4();
  return v19(v16, v17, v18, v19, v20, v21, v22, v23);
}

uint64_t sub_1A5ED8()
{
  sub_A364();
  uint64_t v1 = (void *)sub_50774();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1A7718;
  return v3(0xD000000000000037, 0x80000000001BE500, &_swiftEmptyArrayStorage);
}

uint64_t sub_1A5F84()
{
  sub_A364();
  sub_1A7830(v1, v2, v3, v4);
  uint64_t v5 = sub_2694(&qword_201E28);
  sub_53D4(v5);
  *(void *)(v0 + 40) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1A6004()
{
  sub_47D74();
  sub_E588();
  char v2 = *(unsigned char *)(v0 + 72);
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_1A7894();
  char v4 = (__n128 *)sub_1A78AC(v3);
  sub_1A77A0(v4, (__n128)xmmword_1B08C0);
  if (v2) {
    sub_1A7800();
  }
  else {
    uint64_t v5 = &type metadata for Double;
  }
  uint64_t v6 = sub_1A774C((uint64_t)v5);
  sub_9FA8(v6, v1, &qword_201E28);
  uint64_t v7 = sub_1AC1E0();
  sub_1A7720(v7);
  if (v8)
  {
    sub_A068(v1, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_1A78B8();
    sub_A5C0();
    sub_50818();
    v9();
  }
  sub_1A7774();
  sub_1A78D0(v10);
  uint64_t v11 = sub_50774();
  uint64_t v12 = (void *)sub_141E40(v11);
  void *v12 = v13;
  v12[1] = sub_1A3A70;
  sub_50838();
  sub_50828(32);
  sub_47BE4();
  return v17(v14, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t sub_1A6154()
{
  sub_A364();
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v0;
  *(unsigned char *)(v1 + 64) = v3;
  uint64_t v4 = sub_2694(&qword_201E28);
  sub_53D4(v4);
  *(void *)(v1 + 32) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1A61D8()
{
  sub_47D74();
  sub_E588();
  sub_508FC();
  char v2 = *(unsigned char *)(v0 + 64);
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_50908();
  uint64_t v4 = sub_508F0(v3);
  *(_OWORD *)(v4 + 16) = xmmword_1AF720;
  *(unsigned char *)(sub_1A7810(v4) + 48) = v2;
  sub_1A79DC();
  v5[9] = v6;
  v5[10] = v7;
  v5[11] = 0xE700000000000000;
  sub_50890((uint64_t)v5, v8, &qword_201E28);
  uint64_t v9 = sub_1AC1E0();
  sub_507A8(v9);
  if (v10)
  {
    sub_A068(v1, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_1A78B8();
    sub_A5C0();
    sub_50818();
    v11();
  }
  uint64_t v12 = sub_50774();
  uint64_t v13 = (void *)sub_50920(v12);
  void *v13 = v14;
  v13[1] = sub_1A6320;
  sub_50838();
  sub_50828(61);
  sub_47BE4();
  return v18(v15, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t sub_1A6320()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_1A6434()
{
  sub_A364();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = sub_2694(&qword_201E28);
  sub_53D4(v4);
  uint64_t v5 = sub_A220();
  v1[6] = sub_1A796C(v5);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1A64BC()
{
  sub_98364();
  uint64_t v23 = v4;
  sub_7F418();
  sub_1A7958();
  sub_2694(&qword_2027C8);
  uint64_t v5 = sub_50908();
  uint64_t v6 = sub_1A78DC(v5);
  *(_OWORD *)(v6 + 16) = xmmword_1AF720;
  uint64_t v7 = sub_1A78E8(v6, (uint64_t)"requestedMedName");
  sub_1A78F8(v7, v8, &qword_201E28);
  uint64_t v9 = sub_1AC1E0();
  sub_1A77D8();
  if (v10)
  {
    sub_A068(v1, &qword_201E28);
    sub_50958();
  }
  else
  {
    sub_1A7940();
    sub_A5C0();
    sub_50848();
    v11();
  }
  uint64_t v12 = *(void *)(v0 + 40);
  sub_D836C();
  v2[10] = v13;
  v2[11] = v14;
  sub_9FA8(v15, v12, &qword_201E28);
  sub_1A77BC(v12, 1, v9);
  if (v10)
  {
    sub_A068(v12, &qword_201E28);
    sub_50958();
  }
  else
  {
    v2[15] = v9;
    sub_B5B0(v2 + 12);
    sub_A5C0();
    sub_50848();
    v16();
  }
  uint64_t v17 = sub_9826C();
  uint64_t v18 = (void *)sub_984C8(v17);
  *uint64_t v18 = v19;
  v18[1] = sub_1A667C;
  uint64_t v20 = sub_D7EC4(v3 + 34);
  return v21(v20);
}

uint64_t sub_1A667C()
{
  sub_47634();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    sub_1A79C4();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = sub_50794();
    return v11(v10);
  }
}

uint64_t sub_1A6794()
{
  sub_A364();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_982F8();
  return v0();
}

uint64_t sub_1A6800()
{
  sub_A364();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 80) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = sub_2694(&qword_201E28);
  sub_53D4(v5);
  uint64_t v6 = sub_A220();
  *(void *)(v1 + 48) = sub_1A796C(v6);
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1A688C()
{
  sub_98364();
  uint64_t v23 = v4;
  sub_7F418();
  sub_1A7958();
  sub_2694(&qword_2027C8);
  uint64_t v5 = sub_1A7894();
  uint64_t v6 = sub_1A78DC(v5);
  *(_OWORD *)(v6 + 16) = xmmword_1B08C0;
  uint64_t v7 = sub_1A78E8(v6, (uint64_t)"requestedMedName");
  sub_1A78F8(v7, v8, &qword_201E28);
  uint64_t v9 = sub_1AC1E0();
  sub_1A77D8();
  if (v10)
  {
    sub_A068(v1, &qword_201E28);
    sub_50958();
  }
  else
  {
    sub_1A7940();
    sub_A5C0();
    sub_50848();
    v11();
  }
  uint64_t v12 = *(void *)(v0 + 40);
  char v13 = *(unsigned char *)(v0 + 80);
  *(void *)(v2 + 80) = v3 + 1;
  *(void *)(v2 + 88) = 0x80000000001BE3F0;
  *(unsigned char *)(v2 + 96) = v13;
  *(void *)(v2 + 120) = &type metadata for Bool;
  *(void *)(v2 + 128) = v3 + 4;
  sub_98CCC();
  *(void *)(v2 + 136) = v14;
  sub_9FA8(v15, v12, &qword_201E28);
  sub_1A77BC(v12, 1, v9);
  if (v10)
  {
    sub_A068(v12, &qword_201E28);
    sub_50958();
  }
  else
  {
    *(void *)(v2 + 168) = v9;
    sub_B5B0((uint64_t *)(v2 + 144));
    sub_A5C0();
    sub_50848();
    v16();
  }
  uint64_t v17 = sub_9826C();
  uint64_t v18 = (void *)sub_984C8(v17);
  *uint64_t v18 = v19;
  v18[1] = sub_1A667C;
  uint64_t v20 = sub_D7EC4(v3 + 32);
  return v21(v20);
}

uint64_t sub_1A6A78()
{
  sub_A364();
  *(unsigned char *)(v1 + 124) = v17;
  *(void *)(v1 + 48) = v16;
  *(void *)(v1 + 56) = v0;
  *(unsigned char *)(v1 + 123) = v2;
  *(unsigned char *)(v1 + 122) = v3;
  *(void *)(v1 + 32) = v4;
  *(void *)(v1 + 40) = v5;
  *(void *)(v1 + 16) = v6;
  *(void *)(v1 + 24) = v7;
  *(unsigned char *)(v1 + 121) = v8;
  *(unsigned char *)(v1 + 120) = v9;
  uint64_t v10 = sub_2694(&qword_201E28);
  sub_53D4(v10);
  *(void *)(v1 + 64) = sub_A220();
  *(void *)(v1 + 72) = swift_task_alloc();
  *(void *)(v1 + 80) = swift_task_alloc();
  *(void *)(v1 + 88) = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_1A6B44()
{
  sub_7F418();
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 121);
  char v4 = *(unsigned char *)(v0 + 120);
  sub_2694(&qword_2027C8);
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 96) = v5;
  uint64_t v6 = sub_1A7810(v5);
  *(_OWORD *)(v6 + 16) = v7;
  *(unsigned char *)(v6 + 48) = v4;
  *(void *)(v6 + 72) = &type metadata for Bool;
  *(void *)(v6 + 80) = 0xD000000000000010;
  sub_98CCC();
  *(void *)(v8 + 88) = v9;
  *(unsigned char *)(v8 + 96) = v3;
  uint64_t v10 = v8 + 144;
  *(void *)(v8 + 120) = &type metadata for Bool;
  *(void *)(v8 + 128) = 0xD000000000000010;
  sub_98CCC();
  *(void *)(v11 + 136) = v12;
  sub_9FA8(v2, v1, &qword_201E28);
  uint64_t v13 = sub_1AC1E0();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v13) == 1)
  {
    sub_A068(*(void *)(v0 + 88), &qword_201E28);
    *(_OWORD *)uint64_t v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
  }
  else
  {
    *(void *)(v5 + 168) = v13;
    sub_B5B0((uint64_t *)v10);
    sub_A5C0();
    (*(void (**)(void))(v14 + 32))();
  }
  uint64_t v15 = *(void *)(v0 + 80);
  sub_D836C();
  *(void *)(v5 + 176) = v16;
  *(void *)(v5 + 184) = v17;
  sub_9FA8(v18, v15, &qword_201E28);
  if (sub_D8238() == 1)
  {
    sub_A068(*(void *)(v0 + 80), &qword_201E28);
    sub_50958();
  }
  else
  {
    *(void *)(v5 + 216) = v13;
    sub_B5B0((uint64_t *)(v5 + 192));
    sub_A5C0();
    sub_50848();
    v19();
  }
  char v20 = *(unsigned char *)(v0 + 122);
  strcpy((char *)(v5 + 224), "totalMedCount");
  *(_WORD *)(v5 + 238) = -4864;
  if (v20)
  {
    uint64_t v22 = 0;
    uint64_t v21 = 0;
    *(void *)(v5 + 248) = 0;
    *(void *)(v5 + 256) = 0;
  }
  else
  {
    uint64_t v21 = *(void *)(v0 + 32);
    uint64_t v22 = &type metadata for Double;
  }
  uint64_t v23 = *(void *)(v0 + 72);
  uint64_t v24 = *(void *)(v0 + 40);
  char v25 = *(unsigned char *)(v0 + 123);
  *(void *)(v5 + 240) = v21;
  *(void *)(v5 + 264) = v22;
  strcpy((char *)(v5 + 272), "hasDosageEdit");
  *(_WORD *)(v5 + 286) = -4864;
  *(unsigned char *)(v5 + 288) = v25;
  *(void *)(v5 + 312) = &type metadata for Bool;
  *(void *)(v5 + 320) = 0x656761736F64;
  *(void *)(v5 + 328) = 0xE600000000000000;
  sub_9FA8(v24, v23, &qword_201E28);
  if (sub_D8238() == 1)
  {
    sub_A068(*(void *)(v0 + 72), &qword_201E28);
    sub_50958();
  }
  else
  {
    *(void *)(v5 + 360) = v13;
    sub_B5B0((uint64_t *)(v5 + 336));
    sub_A5C0();
    sub_50848();
    v26();
  }
  uint64_t v27 = *(void *)(v0 + 64);
  uint64_t v28 = *(void *)(v0 + 48);
  *(void *)(v5 + 368) = 0x6E55656761736F64;
  *(void *)(v5 + 376) = 0xEA00000000007469;
  sub_9FA8(v28, v27, &qword_201E28);
  if (sub_D8238() == 1)
  {
    sub_A068(*(void *)(v0 + 64), &qword_201E28);
    sub_50958();
  }
  else
  {
    *(void *)(v5 + 408) = v13;
    sub_B5B0((uint64_t *)(v5 + 384));
    sub_A5C0();
    sub_50848();
    v29();
  }
  sub_1A79B0();
  *(void *)(v5 + 416) = v30;
  *(void *)(v5 + 424) = 0xEA00000000006465;
  *(void *)(v5 + 456) = &type metadata for Bool;
  *(unsigned char *)(v5 + 432) = v31;
  uint64_t v32 = (void *)sub_50774();
  *(void *)(v0 + 104) = v32;
  *uint64_t v32 = v0;
  v32[1] = sub_1A6F44;
  uint64_t v33 = sub_50874(0xD000000000000030);
  return v34(v33);
}

uint64_t sub_1A6F44()
{
  sub_47D74();
  sub_E588();
  sub_980E8();
  uint64_t v3 = v2;
  sub_E53C();
  *char v4 = v3;
  uint64_t v5 = *v1;
  sub_A304();
  *uint64_t v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_A4F0();
    sub_47BE4();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_50794();
    sub_47BE4();
    return v13(v11, v12, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t sub_1A7078()
{
  sub_47634();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1A7108()
{
  sub_A364();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = sub_2694(&qword_201E28);
  sub_53D4(v3);
  v1[4] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1A7188()
{
  sub_47D74();
  sub_E588();
  sub_508FC();
  sub_2694(&qword_2027C8);
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = sub_508F0(v1);
  *(_OWORD *)(v2 + 16) = xmmword_1ADCF0;
  *(void *)(v2 + 32) = 0x6954646567676F6CLL;
  *(void *)(v2 + 40) = 0xEA0000000000656DLL;
  sub_50890(v2, v3, &qword_201E28);
  uint64_t v4 = sub_1AC1E0();
  sub_507A8(v4);
  if (v5)
  {
    sub_A068(v0, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_508CC();
    sub_A5C0();
    sub_50818();
    v6();
  }
  uint64_t v7 = sub_50774();
  uint64_t v8 = (void *)sub_50920(v7);
  *uint64_t v8 = v9;
  v8[1] = sub_1A6320;
  sub_50838();
  sub_50828(58);
  sub_47BE4();
  return v13(v10, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_1A72D0()
{
  sub_A364();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = sub_2694(&qword_201E28);
  sub_53D4(v5);
  *(void *)(v1 + 40) = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1A7358()
{
  sub_47D74();
  sub_E588();
  char v2 = *(unsigned char *)(v0 + 72);
  sub_2694(&qword_2027C8);
  uint64_t v3 = sub_50908();
  uint64_t v4 = (__n128 *)sub_1A78AC(v3);
  sub_1A77A0(v4, (__n128)xmmword_1AF720);
  if (v2) {
    sub_1A7800();
  }
  else {
    uint64_t v5 = &type metadata for Double;
  }
  uint64_t v6 = sub_1A774C((uint64_t)v5);
  sub_9FA8(v6, v1, &qword_201E28);
  uint64_t v7 = sub_1AC1E0();
  sub_1A7720(v7);
  if (v8)
  {
    sub_A068(v1, &qword_201E28);
    sub_508E4();
  }
  else
  {
    sub_1A78B8();
    sub_A5C0();
    sub_50818();
    v9();
  }
  uint64_t v10 = sub_50774();
  uint64_t v11 = (void *)sub_141E40(v10);
  *uint64_t v11 = v12;
  v11[1] = sub_1A3A70;
  sub_50828(29);
  sub_47BE4();
  return v16(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1A74A0(uint64_t a1, uint64_t a2)
{
  return sub_1A74F4(a1, a2);
}

uint64_t sub_1A74F4(uint64_t a1, uint64_t a2)
{
  sub_1AC250();
  sub_507F8();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_E548();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_2694(&qword_201E20);
  uint64_t v12 = sub_53D4(v11);
  __chkstk_darwin(v12);
  sub_E548();
  sub_9FA8(a1, v14 - v13, &qword_201E20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, a2, v2);
  uint64_t v15 = sub_1AC1F0();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  sub_A068(a1, &qword_201E20);
  return v15;
}

uint64_t sub_1A7630(uint64_t a1, uint64_t a2)
{
  sub_1AC250();
  sub_507F8();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_E548();
  uint64_t v9 = v8 - v7;
  swift_allocObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, a2, v2);
  uint64_t v10 = sub_1AC200();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v2);
  return v10;
}

uint64_t sub_1A770C()
{
  return type metadata accessor for WellnessLoggingCATsSimple();
}

uint64_t sub_1A7720(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, a1);
}

uint64_t sub_1A774C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(void *)(v2 + 24);
  v3[6] = v1;
  v3[9] = a1;
  v3[10] = 1953066613;
  v3[11] = 0xE400000000000000;
  return result;
}

void sub_1A7774()
{
  strcpy((char *)(v0 + 128), "lowConfidence");
  *(_WORD *)(v0 + 142) = -4864;
}

__n128 *sub_1A77A0(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x65756C6176;
  result[2].n128_u64[1] = 0xE500000000000000;
  return result;
}

uint64_t sub_1A77BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(a1, a2, a3);
}

uint64_t sub_1A77D8()
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, v0);
}

void sub_1A7800()
{
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
}

uint64_t sub_1A7810(uint64_t result)
{
  *(void *)(result + 32) = 0x757461745364656DLL;
  *(void *)(result + 40) = 0xE900000000000073;
  return result;
}

uint64_t sub_1A7830(uint64_t result, char a2, uint64_t a3, char a4)
{
  *(void *)(v5 + 24) = a3;
  *(void *)(v5 + 32) = v4;
  *(unsigned char *)(v5 + 73) = a4;
  *(unsigned char *)(v5 + 72) = a2;
  *(void *)(v5 + 16) = result;
  return result;
}

uint64_t sub_1A7844()
{
  uint64_t result = *(void *)(v0 + 24);
  strcpy((char *)(v1 + 80), "medDisplayName");
  *(unsigned char *)(v1 + 95) = -18;
  return result;
}

uint64_t sub_1A7878(uint64_t result)
{
  *(void *)(result + 32) = 0x656D695464656DLL;
  *(void *)(result + 40) = 0xE700000000000000;
  return result;
}

uint64_t sub_1A7894()
{
  return swift_allocObject();
}

uint64_t sub_1A78AC(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t *sub_1A78B8()
{
  *(void *)(v2 + 120) = v1;
  return sub_B5B0(v0);
}

void sub_1A78D0(char a1@<W8>)
{
  *(void *)(v2 + 168) = v1;
  *(unsigned char *)(v2 + 144) = a1;
}

uint64_t sub_1A78DC(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t sub_1A78E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 32) = v2;
  *(void *)(result + 40) = (a2 - 32) | 0x8000000000000000;
  return result;
}

uint64_t sub_1A78F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_9FA8(v3, v4, a3);
}

void sub_1A7910(uint64_t a1@<X8>)
{
  v1[15] = a1;
  v1[16] = 1953066613;
  v1[17] = 0xE400000000000000;
}

uint64_t sub_1A7928@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t *sub_1A7940()
{
  *(void *)(v2 + 72) = v0;
  return sub_B5B0(v1);
}

uint64_t sub_1A796C(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return swift_task_alloc();
}

uint64_t sub_1A7984(uint64_t a1)
{
  return _s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v1, 1, a1);
}

uint64_t sub_1A79C4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A79F0()
{
  sub_A364();
  v1[17] = v2;
  v1[18] = v0;
  sub_E510();
  v1[19] = v3;
  uint64_t v4 = sub_1AB410();
  v1[20] = v4;
  sub_A19C(v4);
  v1[21] = v5;
  v1[22] = sub_A42C();
  uint64_t v6 = sub_2694(&qword_203A20);
  sub_53D4(v6);
  v1[23] = sub_A42C();
  uint64_t v7 = sub_1AB4B0();
  v1[24] = v7;
  sub_A19C(v7);
  v1[25] = v8;
  v1[26] = sub_A42C();
  uint64_t v9 = sub_1AB510();
  v1[27] = v9;
  sub_A19C(v9);
  v1[28] = v10;
  v1[29] = sub_A220();
  v1[30] = swift_task_alloc();
  uint64_t v11 = sub_1AB420();
  v1[31] = v11;
  sub_A19C(v11);
  v1[32] = v12;
  v1[33] = sub_A220();
  v1[34] = swift_task_alloc();
  uint64_t v13 = sub_1AB450();
  v1[35] = v13;
  sub_A19C(v13);
  v1[36] = v14;
  v1[37] = sub_A42C();
  uint64_t v15 = sub_1AB3F0();
  v1[38] = v15;
  sub_A19C(v15);
  v1[39] = v16;
  v1[40] = sub_A42C();
  uint64_t v17 = sub_1AC800();
  v1[41] = v17;
  sub_A19C(v17);
  v1[42] = v18;
  v1[43] = sub_A220();
  v1[44] = swift_task_alloc();
  v1[45] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v19, v20, v21);
}

uint64_t sub_1A7BF8()
{
  uint64_t v88 = v0;
  uint64_t v85 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 304);
  uint64_t v7 = sub_1AC7C0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v7, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v85, v6);
  uint64_t v8 = sub_1AC7F0();
  os_log_type_t v9 = sub_1ACF50();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void *)(v0 + 320);
    uint64_t v80 = *(void *)(v0 + 336);
    uint64_t v11 = *(void *)(v0 + 304);
    uint64_t v78 = *(void *)(v0 + 312);
    uint64_t v12 = swift_slowAlloc();
    uint64_t v87 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = sub_1AD3E0();
    *(void *)(v0 + 120) = sub_4A278(v13, v14, &v87);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    sub_7F1C0((unint64_t *)&qword_202010, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v15 = sub_1AD2C0();
    *(void *)(v0 + 128) = sub_4A278(v15, v16, &v87);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v10, v11);
    _os_log_impl(&def_342E4, v8, v9, "%s Parsing Input: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    uint64_t v17 = *(void (**)(void))(v80 + 8);
    sub_E530();
    v17();
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 360);
    uint64_t v19 = *(void *)(v0 + 328);
    uint64_t v20 = *(void *)(v0 + 336);
    sub_7F3F4();
    v21();

    uint64_t v17 = *(void (**)(void))(v20 + 8);
    ((void (*)(uint64_t, uint64_t))v17)(v18, v19);
  }
  uint64_t v22 = *(void *)(v0 + 256);
  sub_1AB3E0();
  uint64_t v23 = *(unsigned int (**)(uint64_t))(v22 + 88);
  uint64_t v24 = sub_17D6C4();
  if (v23(v24) != enum case for Parse.uso(_:))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 256) + 8))(*(void *)(v0 + 272), *(void *)(v0 + 248));
LABEL_8:
    sub_1AB3E0();
    uint64_t v35 = sub_17D6C4();
    if (v23(v35) != enum case for Parse.directInvocation(_:))
    {
      sub_7F3F4();
      v43();
      sub_1AC7D0();
      sub_ABE34();
      sub_E524();
      v44();
      uint64_t v45 = (void *)sub_1AC7F0();
      os_log_type_t v46 = sub_1ACF60();
      if (sub_29300(v46))
      {
        *(_WORD *)swift_slowAlloc() = 0;
        sub_A7FC(&def_342E4, v47, v48, "Received unsupported type of input");
        sub_A1F0();
      }

      sub_E530();
      v17();
      goto LABEL_23;
    }
    uint64_t v36 = *(void *)(v0 + 264);
    uint64_t v38 = *(void *)(v0 + 168);
    uint64_t v37 = *(void *)(v0 + 176);
    uint64_t v39 = *(void *)(v0 + 160);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 256) + 96))(v36, *(void *)(v0 + 248));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v37, v36, v39);
    uint64_t v40 = sub_1AB400();
    if (v40)
    {
      sub_19DA50(0xD000000000000012, 0x80000000001B73B0, v40, (_OWORD *)(v0 + 16));
      swift_bridgeObjectRelease();
      if (*(void *)(v0 + 40))
      {
        if (swift_dynamicCast())
        {
          uint64_t v41 = *(void *)(v0 + 144);
          uint64_t v83 = *(unsigned __int8 *)(v0 + 368);
          sub_7F3F4();
          v42();
          uint64_t v84 = *(void *)(v41 + 16);
          swift_bridgeObjectRetain();
          goto LABEL_24;
        }
        goto LABEL_20;
      }
    }
    else
    {
      *(_OWORD *)(v0 + 16) = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    sub_24ED0(v0 + 16, &qword_202BA0);
LABEL_20:
    sub_1AC7D0();
    sub_ABE34();
    sub_E524();
    v55();
    uint64_t v56 = (void *)sub_1AC7F0();
    os_log_type_t v57 = sub_1ACF60();
    if (sub_29300(v57))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_A7FC(&def_342E4, v58, v59, "LogMedAsNeededConfirmationStrategy failed to unpack directInvocation, returning nil");
      sub_A1F0();
    }
    uint64_t v61 = *(void *)(v0 + 168);
    uint64_t v60 = *(void *)(v0 + 176);
    uint64_t v62 = *(void *)(v0 + 160);

    sub_E530();
    v17();
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
LABEL_23:
    uint64_t v83 = 0;
    uint64_t v84 = 1;
    goto LABEL_24;
  }
  uint64_t v79 = v23;
  uint64_t v81 = v17;
  uint64_t v26 = *(void *)(v0 + 288);
  uint64_t v25 = *(void *)(v0 + 296);
  uint64_t v28 = *(void *)(v0 + 272);
  uint64_t v27 = *(void *)(v0 + 280);
  uint64_t v29 = *(void *)(v0 + 208);
  uint64_t v86 = *(void *)(v0 + 216);
  uint64_t v30 = *(void *)(v0 + 200);
  uint64_t v82 = *(void *)(v0 + 192);
  uint64_t v31 = *(void *)(v0 + 184);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 256) + 96))(v28, *(void *)(v0 + 248));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v25, v28, v27);
  sub_1AB440();
  uint64_t v32 = sub_1AB4A0();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v82);
  sub_C1028(v32, v31);
  swift_bridgeObjectRelease();
  if (_s18WellnessFlowPlugin16WellnessSnippetsOwet_0(v31, 1, v86) == 1)
  {
    uint64_t v33 = *(void *)(v0 + 184);
    sub_7F3F4();
    v34();
    sub_24ED0(v33, &qword_203A20);
    uint64_t v23 = v79;
    uint64_t v17 = v81;
    goto LABEL_8;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 224) + 32))(*(void *)(v0 + 240), *(void *)(v0 + 184), *(void *)(v0 + 216));
  if ((sub_1AB4E0() & 1) == 0)
  {
    uint64_t v65 = *(void *)(v0 + 232);
    uint64_t v66 = *(void *)(v0 + 240);
    uint64_t v67 = *(void *)(v0 + 216);
    uint64_t v68 = *(void *)(v0 + 224);
    char v69 = sub_1AB4F0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v65, v66, v67);
    uint64_t v70 = *(void *)(v0 + 224);
    if (v69)
    {
      uint64_t v71 = *(void (**)(void))(v70 + 8);
      sub_BF118();
      v71();
      sub_BF118();
      v71();
      uint64_t v72 = sub_BF128();
      v73(v72);
    }
    else
    {
      char v74 = sub_1AB500();
      uint64_t v75 = *(void (**)(void))(v70 + 8);
      sub_BF118();
      v75();
      sub_BF118();
      v75();
      uint64_t v76 = sub_BF128();
      v77(v76);
      if ((v74 & 1) == 0)
      {
        uint64_t v84 = *(void *)(*(void *)(v0 + 144) + 16);
        swift_bridgeObjectRetain();
        uint64_t v54 = 2;
        goto LABEL_32;
      }
    }
    uint64_t v84 = *(void *)(*(void *)(v0 + 144) + 16);
    swift_bridgeObjectRetain();
    uint64_t v83 = 0;
    goto LABEL_24;
  }
  uint64_t v50 = *(void *)(v0 + 288);
  uint64_t v49 = *(void *)(v0 + 296);
  uint64_t v51 = *(void *)(v0 + 280);
  uint64_t v52 = *(void *)(v0 + 144);
  sub_7F3F4();
  v53();
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
  uint64_t v84 = *(void *)(v52 + 16);
  swift_bridgeObjectRetain();
  uint64_t v54 = 1;
LABEL_32:
  uint64_t v83 = v54;
LABEL_24:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v63(v83, v84);
}

uint64_t sub_1A8450()
{
  sub_E510();
  sub_1AB3F0();
  sub_52C4();
  __chkstk_darwin(v0);
  sub_E548();
  uint64_t v1 = sub_1AC800();
  sub_52C4();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_E548();
  uint64_t v7 = v6 - v5;
  sub_1AC7C0();
  swift_beginAccess();
  uint64_t v22 = v1;
  sub_E524();
  v8();
  sub_E524();
  v9();
  uint64_t v10 = sub_1AC7F0();
  os_log_type_t v11 = sub_1ACF50();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = sub_1AD3E0();
    sub_4A278(v13, v14, &v23);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    sub_7F1C0((unint64_t *)&qword_202010, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v15 = sub_1AD2C0();
    sub_4A278(v15, v16, &v23);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    uint64_t v17 = sub_7F404();
    v18(v17);
    _os_log_impl(&def_342E4, v10, v11, "%s Handling Input: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();
  }
  else
  {
    uint64_t v19 = sub_7F404();
    v20(v19);
  }

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v22);
  return sub_1AB0B0();
}

uint64_t sub_1A8738()
{
  sub_A364();
  v1[13] = v2;
  v1[14] = v0;
  v1[12] = v3;
  sub_E510();
  v1[15] = v4;
  uint64_t v5 = sub_1AB0A0();
  v1[16] = v5;
  sub_A19C(v5);
  v1[17] = v6;
  v1[18] = sub_A220();
  v1[19] = swift_task_alloc();
  uint64_t v7 = sub_1AB3D0();
  v1[20] = v7;
  sub_A19C(v7);
  v1[21] = v8;
  v1[22] = sub_A42C();
  uint64_t v9 = sub_1AC800();
  v1[23] = v9;
  sub_A19C(v9);
  v1[24] = v10;
  v1[25] = sub_A42C();
  sub_A4F0();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_1A883C()
{
  uint64_t v23 = v0;
  uint64_t v1 = v0;
  uint64_t v4 = v0 + 24;
  uint64_t v3 = v0[24];
  uint64_t v2 = v4[1];
  uint64_t v5 = v1[23];
  uint64_t v6 = sub_1AC7D0();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v5);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = sub_1AC7F0();
  os_log_type_t v8 = sub_1ACF50();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v19 = v1[24];
    uint64_t v20 = v1[23];
    uint64_t v21 = v1[25];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = sub_1AD3E0();
    v1[10] = sub_4A278(v11, v12, &v22);
    sub_1ACFE0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v1[11] = v13;
    sub_1ACFE0();
    *uint64_t v10 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_342E4, v7, v8, "%s makeErrorResponse called with error: %@", (uint8_t *)v9, 0x16u);
    sub_2694(&qword_201DE0);
    swift_arrayDestroy();
    sub_A1F0();
    swift_arrayDestroy();
    sub_A1F0();
    sub_A1F0();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
  }
  else
  {
    uint64_t v15 = v1[24];
    uint64_t v14 = v1[25];
    uint64_t v16 = v1[23];
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  sub_2E38((void *)(v1[14] + 64), *(void *)(v1[14] + 88));
  uint64_t v17 = (void *)swift_task_alloc();
  v1[26] = v17;
  void *v17 = v1;
  v17[1] = sub_1A8B2C;
  return sub_9D67C();
}

uint64_t sub_1A8B2C()
{
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 216) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_E564();
    return v6();
  }
  else
  {
    sub_A4F0();
    return _swift_task_switch(v8, v9, v10);
  }
}

uint64_t sub_1A8C64()
{
  sub_7F418();
  uint64_t v1 = (void *)v0[27];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[14];
  sub_1AB090();
  sub_E524();
  v6();
  sub_1AB370();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1AB390();
  id v7 = [v1 patternId];
  sub_1ACDD0();

  sub_1AB380();
  sub_E3FC(v5 + 200, (uint64_t)(v0 + 2));
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[6];
  sub_2E38(v0 + 2, v8);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[28] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1A8DF8;
  uint64_t v11 = v0[27];
  uint64_t v12 = v0[22];
  uint64_t v13 = v0[12];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v13, v11, v12, v8, v9);
}

uint64_t sub_1A8DF8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_E53C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 232) = v0;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1A8ED8()
{
  sub_7F418();

  uint64_t v1 = sub_D2AD4();
  v2(v1);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_7F3CC();
  return v3();
}

uint64_t sub_1A8F8C()
{
  sub_A364();
  v1[26] = v2;
  v1[27] = v0;
  uint64_t v3 = sub_1AC800();
  v1[28] = v3;
  sub_A19C(v3);
  v1[29] = v4;
  v1[30] = sub_A42C();
  uint64_t v5 = sub_2694(&qword_202008);
  sub_53D4(v5);
  v1[31] = sub_A42C();
  uint64_t v6 = sub_1AB0A0();
  sub_53D4(v6);
  v1[32] = sub_A42C();
  uint64_t v7 = sub_1AB3D0();
  v1[33] = v7;
  sub_A19C(v7);
  v1[34] = v8;
  v1[35] = sub_A42C();
  uint64_t v9 = sub_1AC1E0();
  v1[36] = v9;
  sub_A19C(v9);
  v1[37] = v10;
  v1[38] = sub_A220();
  v1[39] = swift_task_alloc();
  uint64_t v11 = sub_2694(&qword_201E28);
  sub_53D4(v11);
  v1[40] = sub_A220();
  v1[41] = swift_task_alloc();
  sub_A4F0();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t sub_1A90F8()
{
  sub_E588();
  uint64_t v1 = v0[27];
  unint64_t v2 = *(void *)(v1 + 16);
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  if (!sub_1AD170()) {
    goto LABEL_13;
  }
LABEL_3:
  sub_4AA30(0, (v2 & 0xC000000000000001) == 0, v2);
  if ((v2 & 0xC000000000000001) != 0) {
    id v4 = (id)sub_1AD0A0();
  }
  else {
    id v4 = *(id *)(v2 + 32);
  }
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_1AA5F4(v5, (SEL *)&selRef_completionStatus);
  if (v7)
  {
    if (v6 != 0x6E656B6174 || v7 != 0xE500000000000000) {
      sub_1AD2F0();
    }
    goto LABEL_13;
  }
LABEL_14:
  unint64_t v9 = *(void *)(v1 + 16);
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_16;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  sub_DF6B8();
  if (!sub_1AD170()) {
    goto LABEL_19;
  }
LABEL_16:
  sub_1AA930();
  uint64_t v11 = (void *)sub_1AD0A0();
  swift_bridgeObjectRelease();
  sub_1AA5F4(v11, (SEL *)&selRef_name);
  if (v12)
  {
    sub_1ACE40();
    swift_bridgeObjectRelease();
    uint64_t v13 = 0;
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v13 = 1;
LABEL_21:
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v0[41], v13, 1, v0[36]);
  unint64_t v15 = *(void *)(v1 + 16);
  if (!(v15 >> 62))
  {
    uint64_t v16 = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v16) {
      goto LABEL_23;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  sub_DF6B8();
  if (!sub_1AD170()) {
    goto LABEL_26;
  }
LABEL_23:
  sub_1AA930();
  uint64_t v17 = (void *)sub_1AD0A0();
  swift_bridgeObjectRelease();
  sub_1AA5F4(v17, (SEL *)&selRef_schedule);
  if (v18)
  {
    uint64_t v20 = v0[38];
    uint64_t v19 = v0[39];
    uint64_t v21 = v0[36];
    uint64_t v22 = v0[37];
    sub_1ACE40();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v19, v20, v21);
    goto LABEL_28;
  }
LABEL_27:
  sub_1ACE40();
LABEL_28:
  uint64_t v24 = v0[40];
  uint64_t v25 = v0[36];
  v0[42] = *(void *)(v0[27] + 184);
  sub_E524();
  v26();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v24, 0, 1, v25);
  swift_retain();
  uint64_t v27 = (void *)swift_task_alloc();
  v0[43] = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_1A946C;
  return sub_1A51C0();
}

uint64_t sub_1A946C()
{
  sub_E588();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  sub_E53C();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 320);
  if (v0)
  {
    swift_release();
    swift_errorRelease();
    sub_24ED0(v7, &qword_201E28);
  }
  else
  {
    *(void *)(v5 + 352) = v3;
    sub_24ED0(v7, &qword_201E28);
    swift_release();
  }
  sub_A4F0();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1A95E8()
{
  sub_A364();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 360) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1A9680;
  return sub_7A658(0x6C65636E6163, 0xE600000000000000);
}

uint64_t sub_1A9680()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[20] = v0;
  v1[21] = v3;
  v1[22] = v4;
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 368) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1A9754()
{
  sub_A364();
  v0[47] = v0[21];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[48] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1A97F8;
  return sub_7A658(0x6D7269666E6F63, 0xE700000000000000);
}

uint64_t sub_1A97F8()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  v1[23] = v0;
  v1[24] = v3;
  v1[25] = v4;
  uint64_t v5 = *v0;
  sub_E53C();
  *uint64_t v6 = v5;
  *(void *)(v8 + 392) = v7;
  swift_task_dealloc();
  sub_A4F0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1A98CC()
{
  unint64_t v1 = *(void *)(v0 + 392);
  unint64_t v3 = *(void *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v4 = *(void **)(v0 + 352);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 216);
  BOOL v7 = v3 == 0;
  if (!v3) {
    unint64_t v3 = 0xE600000000000000;
  }
  unint64_t v24 = v3;
  if (v7) {
    uint64_t v2 = 0x6C65636E6143;
  }
  uint64_t v23 = v2;
  if (v1) {
    uint64_t v8 = *(void *)(v0 + 192);
  }
  else {
    uint64_t v8 = 0x6D7269666E6F43;
  }
  if (!v1) {
    unint64_t v1 = 0xE700000000000000;
  }
  unint64_t v21 = v1;
  uint64_t v22 = v8;
  *(void *)(v0 + 40) = &type metadata for WellnessFeatureFlagsKey;
  *(void *)(v0 + 48) = sub_45E30();
  *(unsigned char *)(v0 + 16) = 4;
  char v9 = sub_1AB480();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 16);
  sub_1AB080();
  sub_1AB370();
  sub_1AB3B0();
  sub_1AA1CC();
  uint64_t v10 = sub_1AB190();
  _s18WellnessFlowPlugin16WellnessSnippetsOwst_0(v5, 0, 1, v10);
  sub_1AB3A0();
  sub_1AB390();
  id v11 = [v4 catId];
  sub_1ACDD0();

  sub_1AB380();
  sub_1AB3C0();
  sub_E3FC(v6 + 200, v0 + 56);
  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v13 = *(void *)(v0 + 88);
  sub_2E38((void *)(v0 + 56), v12);
  *(void *)(v0 + 120) = type metadata accessor for WellnessSnippets();
  *(void *)(v0 + 128) = sub_7F1C0((unint64_t *)&qword_202590, (void (*)(uint64_t))type metadata accessor for WellnessSnippets);
  uint64_t v14 = sub_B5B0((uint64_t *)(v0 + 96));
  *uint64_t v14 = 0xD000000000000031;
  v14[1] = 0x80000000001BAC40;
  v14[2] = v23;
  v14[3] = v24;
  v14[4] = v22;
  v14[5] = v21;
  *((unsigned char *)v14 + 48) = v9 & 1;
  swift_storeEnumTagMultiPayload();
  sub_2694(&qword_202588);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1AF530;
  *(void *)(v15 + 32) = v4;
  uint64_t v25 = v15;
  sub_1ACEF0();
  *(void *)(v0 + 400) = v25;
  id v16 = v4;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 408) = v17;
  void *v17 = v0;
  v17[1] = sub_1A9BE0;
  uint64_t v18 = *(void *)(v0 + 280);
  uint64_t v19 = *(void *)(v0 + 208);
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v19, v0 + 96, v25, v18, v12, v13);
}

uint64_t sub_1A9BE0()
{
  sub_A364();
  sub_A1B4();
  sub_E53C();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 96;
  uint64_t v4 = *v0;
  sub_E53C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v3);
  sub_A4F0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1A9CD0()
{
  sub_7F418();
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 264);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = sub_D2AD4();
  v6(v5);
  sub_24ED0(v1, &qword_201E28);
  _s18WellnessFlowPlugin22DateTimeInferenceUtilsVwxx_0(v0 + 56);
  sub_1AA90C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_7F3CC();
  return v7();
}

uint64_t sub_1A9DCC()
{
  sub_E588();
  uint64_t v3 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v4 = v0[28];
  sub_1AC7D0();
  sub_ABE34();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v5 = (void *)sub_1AC7F0();
  os_log_type_t v6 = sub_1ACF50();
  if (sub_29300(v6))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_A7FC(&def_342E4, v7, v8, "Couldn't create logMedAsNeededConfirmation_Dialog, returning generic error output.");
    sub_A1F0();
  }

  uint64_t v9 = sub_E570();
  v10(v9);
  sub_1AA798();
  v0[52] = swift_allocError();
  id v11 = (void *)swift_task_alloc();
  v0[53] = v11;
  *id v11 = v0;
  v11[1] = sub_1A9F20;
  return sub_1A8738();
}

uint64_t sub_1A9F20()
{
  sub_A364();
  sub_A1B4();
  uint64_t v3 = v2;
  sub_E53C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_E53C();
  *os_log_type_t v6 = v5;
  *(void *)(v3 + 432) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_errorRelease();
  }
  sub_A4F0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1AA008()
{
  sub_7F418();
  uint64_t v1 = *(void *)(v0 + 328);
  sub_7F3F4();
  v2();
  sub_24ED0(v1, &qword_201E28);
  sub_1AA90C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_7F3CC();
  return v3();
}

uint64_t sub_1AA0D0()
{
  uint64_t v1 = *(void *)(v0 + 328);
  sub_E530();
  v2();
  sub_24ED0(v1, &qword_201E28);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_E564();
  return v3();
}

uint64_t sub_1AA1CC()
{
  uint64_t v0 = sub_1AB580();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_E548();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_1AB4D0();
  sub_52C4();
  uint64_t v7 = v6;
  uint64_t v9 = __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - v10;
  sub_1AB4C0();
  sub_1AB570();
  sub_E524();
  v12();
  sub_1AB550();
  sub_1AB180();
  sub_2694(&qword_202000);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1ADCF0;
  sub_E524();
  v13();
  sub_1AB170();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v5);
}

uint64_t type metadata accessor for LogMedAsNeededConfirmationStrategy()
{
  return self;
}

uint64_t sub_1AA3F8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_BED5C;
  return sub_1A79F0();
}

uint64_t sub_1AA490()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_E50C;
  return sub_1A8F8C();
}

uint64_t sub_1AA528()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_E50C;
  return sub_1A8738();
}

BOOL sub_1AA5D0(uint64_t a1)
{
  return (a1 & 0xC000000000000001) == 0;
}

uint64_t sub_1AA5DC(void *a1)
{
  return sub_1AA5F4(a1, (SEL *)&selRef_schedule);
}

uint64_t sub_1AA5E8(void *a1)
{
  return sub_1AA5F4(a1, (SEL *)&selRef_name);
}

uint64_t sub_1AA5F4(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = sub_1ACDD0();

  return v4;
}

void (*sub_1AA660(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1AA710(v6, a2, a3);
  return sub_1AA6C8;
}

void sub_1AA6C8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_1AA710(void *a1, uint64_t a2, uint64_t a3))(id *a1)
{
  unint64_t v6 = a3 & 0xC000000000000001;
  sub_4AA30(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6) {
    id v7 = (id)sub_1AD0A0();
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return sub_1AA790;
}

void sub_1AA790(id *a1)
{
}

unint64_t sub_1AA798()
{
  unint64_t result = qword_2090D0;
  if (!qword_2090D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2090D0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LogMedAsNeededConfirmationStrategyError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1AA880);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LogMedAsNeededConfirmationStrategyError()
{
  return &type metadata for LogMedAsNeededConfirmationStrategyError;
}

unint64_t sub_1AA8BC()
{
  unint64_t result = qword_2090D8;
  if (!qword_2090D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2090D8);
  }
  return result;
}

uint64_t sub_1AA90C()
{
  return swift_task_dealloc();
}

uint64_t sub_1AA930()
{
  return sub_4AA30(0, (v0 & 0xC000000000000001) == 0, v0);
}

uint64_t sub_1AA950()
{
  return static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1AA960()
{
  return Measurement.init(value:unit:)();
}

uint64_t sub_1AA970()
{
  return Measurement.value.getter();
}

uint64_t sub_1AA980()
{
  return static Measurement<>.- infix(_:_:)();
}

uint64_t sub_1AA990()
{
  return Measurement<>.converted(to:)();
}

NSDateInterval sub_1AA9A0()
{
  return DateInterval._bridgeToObjectiveC()();
}

uint64_t sub_1AA9B0()
{
  return static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1AA9C0()
{
  return DateInterval.end.getter();
}

uint64_t sub_1AA9D0()
{
  return DateInterval.init(start:end:)();
}

uint64_t sub_1AA9E0()
{
  return DateInterval.init(start:duration:)();
}

uint64_t sub_1AA9F0()
{
  return DateInterval.start.getter();
}

uint64_t sub_1AAA00()
{
  return DateInterval.contains(_:)();
}

uint64_t sub_1AAA10()
{
  return type metadata accessor for DateInterval();
}

uint64_t sub_1AAA20()
{
  return DateComponents.day.getter();
}

uint64_t sub_1AAA30()
{
  return DateComponents.day.setter();
}

uint64_t sub_1AAA40()
{
  return DateComponents.hour.setter();
}

uint64_t sub_1AAA50()
{
  return DateComponents.year.getter();
}

uint64_t sub_1AAA60()
{
  return DateComponents.month.getter();
}

uint64_t sub_1AAA70()
{
  return DateComponents.minute.setter();
}

uint64_t sub_1AAA80()
{
  return DateComponents.second.setter();
}

uint64_t sub_1AAA90()
{
  return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
}

uint64_t sub_1AAAA0()
{
  return type metadata accessor for DateComponents();
}

uint64_t sub_1AAAB0()
{
  return _convertNSErrorToError(_:)();
}

uint64_t sub_1AAAC0()
{
  return static URL.stateOfMind(route:presentWithAnimation:configuration:)();
}

uint64_t sub_1AAAD0()
{
  return URL.absoluteString.getter();
}

void sub_1AAAE0(NSURL *retstr@<X8>)
{
}

uint64_t sub_1AAAF0()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1AAB00()
{
  return URL.init(string:)();
}

uint64_t sub_1AAB10()
{
  return type metadata accessor for URL();
}

uint64_t sub_1AAB20(NSDataBase64EncodingOptions options)
{
  return Data.base64EncodedString(options:)(options)._countAndFlagsBits;
}

uint64_t sub_1AAB30()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1AAB40()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t sub_1AAB50()
{
  return Date.timeIntervalSince(_:)();
}

NSDate sub_1AAB60()
{
  return Date._bridgeToObjectiveC()();
}

uint64_t sub_1AAB70()
{
  return static Date.> infix(_:_:)();
}

uint64_t sub_1AAB80()
{
  return static Date.< infix(_:_:)();
}

uint64_t sub_1AAB90()
{
  return Date.init(timeIntervalSince1970:)();
}

uint64_t sub_1AABA0()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t sub_1AABB0()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1AABC0()
{
  return Date.init()();
}

uint64_t sub_1AABD0()
{
  return type metadata accessor for Date();
}

uint64_t sub_1AABE0()
{
  return UUID.uuidString.getter();
}

NSUUID sub_1AABF0()
{
  return UUID._bridgeToObjectiveC()();
}

uint64_t sub_1AAC00()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1AAC10()
{
  return UUID.init()();
}

uint64_t sub_1AAC20()
{
  return type metadata accessor for UUID();
}

uint64_t sub_1AAC30()
{
  return Locale.Region.init(stringLiteral:)();
}

uint64_t sub_1AAC40()
{
  return type metadata accessor for Locale.Region();
}

uint64_t sub_1AAC50()
{
  return Locale.region.getter();
}

uint64_t sub_1AAC60()
{
  return static Locale.current.getter();
}

uint64_t sub_1AAC70()
{
  return type metadata accessor for Locale();
}

uint64_t sub_1AAC80()
{
  return type metadata accessor for Calendar.Identifier();
}

uint64_t sub_1AAC90()
{
  return Calendar.init(identifier:)();
}

uint64_t sub_1AACA0()
{
  return Calendar.startOfDay(for:)();
}

uint64_t sub_1AACB0()
{
  return Calendar.isDateInToday(_:)();
}

uint64_t sub_1AACC0()
{
  return Calendar.dateComponents(_:from:to:)();
}

uint64_t sub_1AACD0()
{
  return Calendar.date(byAdding:to:wrappingComponents:)();
}

uint64_t sub_1AACE0()
{
  return Calendar.date(byAdding:value:to:wrappingComponents:)();
}

uint64_t sub_1AACF0()
{
  return Calendar.isDate(_:inSameDayAs:)();
}

uint64_t sub_1AAD00()
{
  return static Calendar.current.getter();
}

uint64_t sub_1AAD10()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t sub_1AAD20()
{
  return Calendar.component(_:from:)();
}

uint64_t sub_1AAD30()
{
  return type metadata accessor for Calendar();
}

NSTimeZone sub_1AAD40()
{
  return TimeZone._bridgeToObjectiveC()();
}

uint64_t sub_1AAD50()
{
  return static TimeZone.current.getter();
}

uint64_t sub_1AAD60()
{
  return type metadata accessor for TimeZone();
}

uint64_t sub_1AAD70()
{
  return SnippetPluginModel.snippetHidden(for:idiom:)();
}

uint64_t sub_1AAD80()
{
  return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
}

uint64_t sub_1AAD90()
{
  return type metadata accessor for AppPunchout();
}

uint64_t sub_1AADA0()
{
  return type metadata accessor for SashStandard.Title();
}

uint64_t sub_1AADB0()
{
  return SashStandard.init(title:thumbnail:titleColor:backgroundColor:action:componentName:showOnWatch:)();
}

uint64_t sub_1AADC0()
{
  return type metadata accessor for SashStandard();
}

uint64_t sub_1AADD0()
{
  return type metadata accessor for ActionProperty();
}

uint64_t sub_1AADE0()
{
  return ActionProperty.init(_:)();
}

uint64_t sub_1AADF0()
{
  return type metadata accessor for VisualProperty();
}

uint64_t sub_1AAE00()
{
  return type metadata accessor for Color();
}

uint64_t sub_1AAE10()
{
  return type metadata accessor for Command();
}

uint64_t sub_1AAE20()
{
  return SimpleOutputFlowAsync.__allocating_init(outputPublisher:outputGenerator:)();
}

uint64_t sub_1AAE30()
{
  return SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
}

uint64_t sub_1AAE40()
{
  return type metadata accessor for SimpleOutputFlowAsync();
}

uint64_t sub_1AAE80()
{
  return PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)();
}

uint64_t sub_1AAED0()
{
  return PromptForDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription.getter();
}

uint64_t sub_1AAEE0()
{
  return PromptForDisambiguationFlowAsync.init<A>(items:strategy:outputPublisher:)();
}

uint64_t sub_1AAEF0()
{
  return type metadata accessor for AnyFlow();
}

uint64_t sub_1AAF00()
{
  return static CommonFlowGuard.ensuringDeviceIsAuthenticated.getter();
}

uint64_t sub_1AAF10()
{
  return type metadata accessor for CommonFlowGuard();
}

uint64_t sub_1AAF20()
{
  return PatternFlowProvider.init(outputPublisher:responseGenerator:)();
}

uint64_t sub_1AAF30()
{
  return type metadata accessor for PatternFlowProvider();
}

uint64_t sub_1AAF40()
{
  return dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)();
}

uint64_t sub_1AAF50()
{
  return dispatch thunk of SiriCorrectionsClient.register(flow:)();
}

uint64_t sub_1AAF60()
{
  return dispatch thunk of SiriCorrectionsClientProvider.correctionsClient.getter();
}

uint64_t sub_1AAF70()
{
  return Flow.eraseToAnyFlow()();
}

uint64_t sub_1AAF80()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t sub_1AAF90()
{
  return Flow.flexibleExecutionSupport.getter();
}

uint64_t sub_1AAFB0()
{
  return Flow<>.exitValue.getter();
}

uint64_t sub_1AAFC0()
{
  return type metadata accessor for FlowUnhandledReason();
}

uint64_t sub_1AAFD0()
{
  return FlowPlugin.findFlowFor(parse:)();
}

uint64_t sub_1AAFE0()
{
  return FlowPlugin.makeFlowFrame(parse:)();
}

void sub_1AAFF0(Swift::String refId)
{
}

void sub_1AB000()
{
}

uint64_t sub_1AB010()
{
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t sub_1AB020()
{
  return dispatch thunk of DeviceState.preferencesLanguageCode.getter();
}

uint64_t sub_1AB030()
{
  return dispatch thunk of DeviceState.isPad.getter();
}

uint64_t sub_1AB040()
{
  return dispatch thunk of DeviceState.isPhone.getter();
}

uint64_t sub_1AB050()
{
  return dispatch thunk of DeviceState.isWatch.getter();
}

uint64_t sub_1AB060()
{
  return DeviceState.asInvocationContext.getter();
}

uint64_t sub_1AB070()
{
  return static DialogPhase.completion.getter();
}

uint64_t sub_1AB080()
{
  return static DialogPhase.clarification.getter();
}

uint64_t sub_1AB090()
{
  return static DialogPhase.error.getter();
}

uint64_t sub_1AB0A0()
{
  return type metadata accessor for DialogPhase();
}

uint64_t sub_1AB0B0()
{
  return static ActionForInput.handle()();
}

uint64_t sub_1AB0C0()
{
  return static ActionForInput.ignore()();
}

uint64_t sub_1AB0D0()
{
  return TemplatingText.text.getter();
}

uint64_t sub_1AB0E0()
{
  return type metadata accessor for TemplatingText();
}

uint64_t sub_1AB0F0()
{
  return static ExecuteResponse.ongoing(requireInput:)();
}

uint64_t sub_1AB100()
{
  return static ExecuteResponse.ongoing<A>(next:childCompletion:)();
}

uint64_t sub_1AB110()
{
  return static ExecuteResponse.ongoing<A>(next:)();
}

uint64_t sub_1AB120()
{
  return static ExecuteResponse.complete<A>(next:)();
}

uint64_t sub_1AB130()
{
  return static ExecuteResponse.complete(next:)();
}

uint64_t sub_1AB140()
{
  return static ExecuteResponse.complete()();
}

uint64_t sub_1AB150()
{
  return static ExecuteResponse.unhandled(reason:isComplete:)();
}

uint64_t sub_1AB160()
{
  return static ExecuteResponse.unhandled(reason:)();
}

uint64_t sub_1AB170()
{
  return NLContextUpdate.nluSystemDialogActs.setter();
}

uint64_t sub_1AB180()
{
  return NLContextUpdate.init()();
}

uint64_t sub_1AB190()
{
  return type metadata accessor for NLContextUpdate();
}

uint64_t sub_1AB1A0()
{
  return static PaginationStyle.noPagination()();
}

uint64_t sub_1AB1B0()
{
  return ResponseFactory.init()();
}

uint64_t sub_1AB1C0()
{
  return type metadata accessor for ResponseFactory();
}

uint64_t sub_1AB1D0()
{
  return TemplatingResult.sections.getter();
}

uint64_t sub_1AB1E0()
{
  return type metadata accessor for TemplatingResult();
}

uint64_t sub_1AB1F0()
{
  return TemplatingSection.id.getter();
}

uint64_t sub_1AB200()
{
  return TemplatingSection.content.getter();
}

uint64_t sub_1AB210()
{
  return type metadata accessor for TemplatingSection();
}

uint64_t sub_1AB260()
{
  return ResponseGenerating.makeResponseUpdateOutput(viewId:update:)();
}

uint64_t sub_1AB330()
{
  return type metadata accessor for CorrectionsExitValue();
}

uint64_t sub_1AB340()
{
  return static DisambiguationResult.chosenItem(_:)();
}

uint64_t sub_1AB350()
{
  return static OutputPublisherFactory.makeOutputPublisherAsync()();
}

uint64_t sub_1AB360()
{
  return PaginatedItemContainer.items.getter();
}

uint64_t sub_1AB370()
{
  return OutputGenerationManifest.init(dialogPhase:_:)();
}

uint64_t sub_1AB380()
{
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t sub_1AB390()
{
  return OutputGenerationManifest.canUseServerTTS.setter();
}

uint64_t sub_1AB3A0()
{
  return OutputGenerationManifest.nlContextUpdate.setter();
}

uint64_t sub_1AB3B0()
{
  return OutputGenerationManifest.listenAfterSpeaking.setter();
}

uint64_t sub_1AB3C0()
{
  return OutputGenerationManifest.printSupportingDialogInDisplayModes.setter();
}

uint64_t sub_1AB3D0()
{
  return type metadata accessor for OutputGenerationManifest();
}

uint64_t sub_1AB3E0()
{
  return Input.parse.getter();
}

uint64_t sub_1AB3F0()
{
  return type metadata accessor for Input();
}

uint64_t sub_1AB400()
{
  return Parse.DirectInvocation.userData.getter();
}

uint64_t sub_1AB410()
{
  return type metadata accessor for Parse.DirectInvocation();
}

uint64_t sub_1AB420()
{
  return type metadata accessor for Parse();
}

uint64_t sub_1AB430()
{
  return static Device.current.getter();
}

uint64_t sub_1AB440()
{
  return USOParse.userParse.getter();
}

uint64_t sub_1AB450()
{
  return type metadata accessor for USOParse();
}

uint64_t sub_1AB460()
{
  return AceOutput.init(commands:flowActivity:)();
}

uint64_t sub_1AB470()
{
  return type metadata accessor for AceOutput();
}

uint64_t sub_1AB480()
{
  return isFeatureEnabled(_:)();
}

uint64_t sub_1AB490()
{
  return type metadata accessor for Siri_Nlu_External_UsoGraph();
}

uint64_t sub_1AB4A0()
{
  return Siri_Nlu_External_UserParse.userDialogActs.getter();
}

uint64_t sub_1AB4B0()
{
  return type metadata accessor for Siri_Nlu_External_UserParse();
}

uint64_t sub_1AB4C0()
{
  return Siri_Nlu_External_SystemOffered.init()();
}

uint64_t sub_1AB4D0()
{
  return type metadata accessor for Siri_Nlu_External_SystemOffered();
}

uint64_t sub_1AB4E0()
{
  return Siri_Nlu_External_UserDialogAct.hasAccepted.getter();
}

uint64_t sub_1AB4F0()
{
  return Siri_Nlu_External_UserDialogAct.hasRejected.getter();
}

uint64_t sub_1AB500()
{
  return Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
}

uint64_t sub_1AB510()
{
  return type metadata accessor for Siri_Nlu_External_UserDialogAct();
}

uint64_t sub_1AB520()
{
  return Siri_Nlu_External_SystemPrompted.target.setter();
}

uint64_t sub_1AB530()
{
  return Siri_Nlu_External_SystemPrompted.init()();
}

uint64_t sub_1AB540()
{
  return type metadata accessor for Siri_Nlu_External_SystemPrompted();
}

uint64_t sub_1AB550()
{
  return Siri_Nlu_External_SystemDialogAct.offered.setter();
}

uint64_t sub_1AB560()
{
  return Siri_Nlu_External_SystemDialogAct.prompted.setter();
}

uint64_t sub_1AB570()
{
  return Siri_Nlu_External_SystemDialogAct.init()();
}

uint64_t sub_1AB580()
{
  return type metadata accessor for Siri_Nlu_External_SystemDialogAct();
}

uint64_t sub_1AB590()
{
  return static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
}

uint64_t sub_1AB5A0()
{
  return type metadata accessor for UsoTask_requestLog_common_HealthLog();
}

uint64_t sub_1AB5B0()
{
  return CodeGenBase.entity.getter();
}

uint64_t sub_1AB5C0()
{
  return UsoIdentifier.value.getter();
}

uint64_t sub_1AB5D0()
{
  return UsoIdentifier.namespace.getter();
}

uint64_t sub_1AB5E0()
{
  return type metadata accessor for UsoIdentifier();
}

uint64_t sub_1AB5F0()
{
  return UsoTaskBuilder.toProtobufUsoGraph()();
}

uint64_t sub_1AB600()
{
  return dispatch thunk of CodeGenListEntry.entry.getter();
}

uint64_t sub_1AB610()
{
  return dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
}

uint64_t sub_1AB620()
{
  return dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
}

uint64_t sub_1AB630()
{
  return dispatch thunk of UsoEntity_common_Date.dayOfMonth.getter();
}

uint64_t sub_1AB640()
{
  return dispatch thunk of UsoEntity_common_Date.monthOfYear.getter();
}

uint64_t sub_1AB650()
{
  return dispatch thunk of UsoEntity_common_Date.definedValue.getter();
}

uint64_t sub_1AB660()
{
  return type metadata accessor for UsoEntity_common_Date.DefinedValues();
}

uint64_t sub_1AB670()
{
  return dispatch thunk of UsoEntity_common_Date.year.getter();
}

uint64_t sub_1AB680()
{
  return dispatch thunk of UsoEntity_common_Date.dayOfWeek.getter();
}

uint64_t sub_1AB690()
{
  return dispatch thunk of UsoEntity_common_Time.hour.getter();
}

uint64_t sub_1AB6A0()
{
  return dispatch thunk of UsoEntity_common_Time.minute.getter();
}

uint64_t sub_1AB6B0()
{
  return UsoEntity_common_Number.asDouble.getter();
}

uint64_t sub_1AB6C0()
{
  return dispatch thunk of UsoEntity_common_Person.definedValue.getter();
}

uint64_t sub_1AB6D0()
{
  return type metadata accessor for UsoEntity_common_Person.DefinedValues();
}

uint64_t sub_1AB6E0()
{
  return dispatch thunk of Uso_VerbTemplate_Target.target.getter();
}

uint64_t sub_1AB6F0()
{
  return dispatch thunk of UsoEntity_common_Decimal.definedValue.getter();
}

uint64_t sub_1AB700()
{
  return type metadata accessor for UsoEntity_common_Decimal.DefinedValues();
}

uint64_t sub_1AB710()
{
  return dispatch thunk of UsoEntity_common_Decimal.canonicalString.getter();
}

uint64_t sub_1AB720()
{
  return type metadata accessor for UsoEntity_common_Decimal();
}

uint64_t sub_1AB730()
{
  return dispatch thunk of UsoEntity_common_Integer.integerValue.getter();
}

uint64_t sub_1AB740()
{
  return type metadata accessor for UsoEntity_common_Integer();
}

uint64_t sub_1AB750()
{
  return static UsoTask_CodegenConverter.convert(task:)();
}

uint64_t sub_1AB760()
{
  return static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)();
}

uint64_t sub_1AB770()
{
  return UsoEntity_common_DateTime.toDateTime(recurrencePattern:)();
}

uint64_t sub_1AB780()
{
  return dispatch thunk of UsoEntity_common_DateTime.occurringIn.getter();
}

uint64_t sub_1AB790()
{
  return dispatch thunk of UsoEntity_common_DateTime.definedValue.getter();
}

uint64_t sub_1AB7A0()
{
  return type metadata accessor for UsoEntity_common_DateTime.DefinedValues();
}

uint64_t sub_1AB7B0()
{
  return dispatch thunk of UsoEntity_common_DateTime.date.getter();
}

uint64_t sub_1AB7C0()
{
  return dispatch thunk of UsoEntity_common_DateTime.time.getter();
}

uint64_t sub_1AB7D0()
{
  return static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
}

uint64_t sub_1AB7E0()
{
  return dispatch thunk of UsoEntity_common_HealthLog.valueCategory.getter();
}

uint64_t sub_1AB7F0()
{
  return dispatch thunk of UsoEntity_common_HealthLog.associatedPerson.getter();
}

uint64_t sub_1AB800()
{
  return dispatch thunk of UsoEntity_common_HealthLog.value.getter();
}

uint64_t sub_1AB810()
{
  return dispatch thunk of UsoEntity_common_HealthLog.dateTime.getter();
}

uint64_t sub_1AB820()
{
  return dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
}

uint64_t sub_1AB830()
{
  return dispatch thunk of UsoEntity_common_Medication.name.getter();
}

uint64_t sub_1AB840()
{
  return dispatch thunk of UsoEntity_common_Medication.dosage.getter();
}

uint64_t sub_1AB850()
{
  return dispatch thunk of UsoEntity_common_Measurement.components.getter();
}

uint64_t sub_1AB860()
{
  return dispatch thunk of UsoEntity_common_MonthOfYear.integerValue.getter();
}

uint64_t sub_1AB870()
{
  return dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter();
}

uint64_t sub_1AB880()
{
  return type metadata accessor for UsoEntity_common_ListPosition.DefinedValues();
}

uint64_t sub_1AB890()
{
  return dispatch thunk of UsoEntity_common_DateTimeRange.definedValue.getter();
}

uint64_t sub_1AB8A0()
{
  return type metadata accessor for UsoEntity_common_DateTimeRange.DefinedValues();
}

uint64_t sub_1AB8B0()
{
  return type metadata accessor for UsoTask_create_common_HealthLog();
}

uint64_t sub_1AB8C0()
{
  return type metadata accessor for UsoTask_update_common_HealthLog();
}

uint64_t sub_1AB8D0()
{
  return dispatch thunk of UsoEntity_common_MeasurementUnit.name.getter();
}

uint64_t sub_1AB8E0()
{
  return dispatch thunk of UsoEntity_common_MeasurementUnit.type.getter();
}

uint64_t sub_1AB8F0()
{
  return dispatch thunk of UsoEntity_common_MedicationEvent.completionStatus.getter();
}

uint64_t sub_1AB900()
{
  return dispatch thunk of UsoEntity_common_MedicationEvent.medicationSchedule.getter();
}

uint64_t sub_1AB910()
{
  return dispatch thunk of UsoEntity_common_MedicationEvent.dateTime.getter();
}

uint64_t sub_1AB920()
{
  return type metadata accessor for UsoEntity_common_MedicationEvent();
}

uint64_t sub_1AB930()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
}

uint64_t sub_1AB940()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
}

uint64_t sub_1AB950()
{
  return dispatch thunk of UsoEntity_common_CompletionStatus.definedValue.getter();
}

uint64_t sub_1AB960()
{
  return type metadata accessor for UsoEntity_common_CompletionStatus.DefinedValues();
}

uint64_t sub_1AB970()
{
  return dispatch thunk of UsoEntity_common_MultipliedNumber.value.getter();
}

uint64_t sub_1AB980()
{
  return type metadata accessor for UsoEntity_common_MultipliedNumber();
}

uint64_t sub_1AB990()
{
  return dispatch thunk of UsoEntity_common_RecurringDateTime.recurrenceDateTimes.getter();
}

uint64_t sub_1AB9A0()
{
  return dispatch thunk of UsoEntity_common_MedicationSchedule.medications.getter();
}

uint64_t sub_1AB9B0()
{
  return dispatch thunk of UsoEntity_common_MedicationSchedule.name.getter();
}

uint64_t sub_1AB9C0()
{
  return dispatch thunk of UsoEntity_common_MedicationSchedule.schedule.getter();
}

uint64_t sub_1AB9D0()
{
  return type metadata accessor for UsoEntity_common_MeasurementCategory();
}

uint64_t sub_1AB9E0()
{
  return dispatch thunk of UsoEntity_common_MeasurementUnitType.definedValue.getter();
}

uint64_t sub_1AB9F0()
{
  return type metadata accessor for UsoEntity_common_MeasurementUnitType.DefinedValues();
}

uint64_t sub_1ABA00()
{
  return dispatch thunk of UsoEntity_common_MeasurementComponent.unit.getter();
}

uint64_t sub_1ABA10()
{
  return dispatch thunk of UsoEntity_common_MeasurementComponent.value.getter();
}

uint64_t sub_1ABA20()
{
  return type metadata accessor for UsoEntity_common_MeasurementQualifier.DefinedValues();
}

uint64_t sub_1ABA30()
{
  return type metadata accessor for UsoTask_create_common_MedicationEvent();
}

uint64_t sub_1ABA40()
{
  return type metadata accessor for UsoTask_noVerb_common_MedicationEvent();
}

uint64_t sub_1ABA50()
{
  return type metadata accessor for UsoTask_snooze_common_MedicationEvent();
}

uint64_t sub_1ABA60()
{
  return type metadata accessor for UsoTaskBuilder_create_common_HealthLog();
}

uint64_t sub_1ABA70()
{
  return type metadata accessor for UsoTask_request_common_MedicationEvent();
}

uint64_t sub_1ABA80()
{
  return dispatch thunk of UsoEntityBuilder_common_MedicationEvent.setMedicationSchedule(value:)();
}

uint64_t sub_1ABA90()
{
  return dispatch thunk of UsoEntityBuilder_common_MedicationEvent.setDateTime(value:)();
}

uint64_t sub_1ABAA0()
{
  return dispatch thunk of UsoEntityBuilder_common_MedicationEvent.setCompletionStatus(value:)();
}

uint64_t sub_1ABAB0()
{
  return UsoEntityBuilder_common_MedicationEvent.init()();
}

uint64_t sub_1ABAC0()
{
  return type metadata accessor for UsoEntityBuilder_common_MedicationEvent();
}

uint64_t sub_1ABAD0()
{
  return type metadata accessor for UsoTask_create_common_MedicationSchedule();
}

uint64_t sub_1ABAE0()
{
  return type metadata accessor for UsoTask_delete_common_MedicationSchedule();
}

uint64_t sub_1ABAF0()
{
  return type metadata accessor for UsoTask_noVerb_common_MedicationSchedule();
}

uint64_t sub_1ABB00()
{
  return type metadata accessor for UsoTask_update_common_MedicationSchedule();
}

uint64_t sub_1ABB10()
{
  return type metadata accessor for UsoTask_request_common_MedicationSchedule();
}

uint64_t sub_1ABB20()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceMeasurementUnit.measurementUnit.getter();
}

uint64_t sub_1ABB30()
{
  return type metadata accessor for UsoTask_summarise_common_MedicationSchedule();
}

uint64_t sub_1ABB40()
{
  return type metadata accessor for UsoTask_checkExistence_common_MedicationEvent();
}

uint64_t sub_1ABB50()
{
  return type metadata accessor for UsoTask_checkExistence_common_MedicationSchedule();
}

uint64_t sub_1ABB60()
{
  return UsoTask.verbString.getter();
}

uint64_t sub_1ABB70()
{
  return static UsoTask.createHealthLog(_:measurementNeeded:)();
}

uint64_t sub_1ABB80()
{
  return UsoTask.baseEntityAsString.getter();
}

uint64_t sub_1ABB90()
{
  return type metadata accessor for UsoTask();
}

uint64_t sub_1ABBA0()
{
  return DateTimeResolver.makeRecommendation(value:context:spec:)();
}

uint64_t sub_1ABBB0()
{
  return DateTimeResolver.init()();
}

uint64_t sub_1ABBC0()
{
  return type metadata accessor for DateTimeResolver();
}

uint64_t sub_1ABBD0()
{
  return type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy();
}

uint64_t sub_1ABBE0()
{
  return type metadata accessor for DateTimeResolutionSpec.ExpandToType();
}

uint64_t sub_1ABBF0()
{
  return DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)();
}

uint64_t sub_1ABC00()
{
  return type metadata accessor for DateTimeResolutionSpec();
}

uint64_t sub_1ABC10()
{
  return type metadata accessor for DateTimeResolutionContext.Hemisphere();
}

uint64_t sub_1ABC20()
{
  return DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)();
}

uint64_t sub_1ABC30()
{
  return type metadata accessor for DateTimeResolutionContext();
}

uint64_t sub_1ABC50()
{
  return DateTime.init(withDate:time:definedValue:recurrencePattern:temporalIntent:occurringIn:)();
}

uint64_t sub_1ABC70()
{
  return type metadata accessor for DateTime.DefinedDateTime();
}

uint64_t sub_1ABC80()
{
  return type metadata accessor for DateTime.Date.DefinedDate();
}

uint64_t sub_1ABCA0()
{
  return type metadata accessor for DateTime.Date();
}

uint64_t sub_1ABCB0()
{
  return DateTime.Time.hour.getter();
}

uint64_t sub_1ABCC0()
{
  return DateTime.Time.minute.getter();
}

uint64_t sub_1ABCD0()
{
  return DateTime.Time.second.getter();
}

uint64_t sub_1ABCE0()
{
  return type metadata accessor for DateTime.Time.Meridiem();
}

uint64_t sub_1ABCF0()
{
  return DateTime.Time.meridiem.getter();
}

uint64_t sub_1ABD00()
{
  return DateTime.Time.init(withHour:meridiem:)();
}

uint64_t sub_1ABD10()
{
  return type metadata accessor for DateTime.Time();
}

uint64_t sub_1ABD20()
{
  return type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange();
}

uint64_t sub_1ABD30()
{
  return DateTime.DateTimeRange.definedValue.getter();
}

uint64_t sub_1ABD50()
{
  return DateTime.DateTimeRange.init(at:start:end:duration:interval:definedValue:qualifier:)();
}

uint64_t sub_1ABD60()
{
  return type metadata accessor for DateTime.DateTimeRange();
}

uint64_t sub_1ABD70()
{
  return dispatch thunk of DateTime.description.getter();
}

uint64_t sub_1ABD80()
{
  return DateTime.occurringIn.getter();
}

uint64_t sub_1ABD90()
{
  return type metadata accessor for DateTime.TemporalIntent();
}

uint64_t sub_1ABDA0()
{
  return DateTime.toINDateComponentsRange(calendar:timeZone:)();
}

INDateComponentsRange sub_1ABDB0()
{
  return DateTime.toINDateComponentsRange()();
}

uint64_t sub_1ABDC0()
{
  return DateTime.date.getter();
}

uint64_t sub_1ABDD0()
{
  return DateTime.time.getter();
}

uint64_t sub_1ABDE0()
{
  return type metadata accessor for DateTime.Qualifier();
}

uint64_t sub_1ABDF0()
{
  return type metadata accessor for DateTime();
}

uint64_t sub_1ABE00()
{
  return SiriEnvironment.correctionsClientProvider.getter();
}

uint64_t sub_1ABE10()
{
  return SiriEnvironment.currentRequest.getter();
}

uint64_t sub_1ABE20()
{
  return static SiriEnvironment.forCurrentTask.getter();
}

uint64_t sub_1ABE30()
{
  return type metadata accessor for SiriEnvironment();
}

uint64_t sub_1ABE40()
{
  return static ExecutionLocation.== infix(_:_:)();
}

uint64_t sub_1ABE50()
{
  return static ExecutionLocation.none.getter();
}

uint64_t sub_1ABE60()
{
  return static ExecutionLocation.device.getter();
}

uint64_t sub_1ABE70()
{
  return static ExecutionLocation.unknown.getter();
}

uint64_t sub_1ABE80()
{
  return type metadata accessor for ExecutionLocation();
}

uint64_t sub_1ABE90()
{
  return type metadata accessor for StateOfMindEntryModel.Configuration();
}

uint64_t sub_1ABEA0()
{
  return type metadata accessor for Route();
}

uint64_t sub_1ABEB0()
{
  return DialogTemperature.Builder.init()();
}

uint64_t sub_1ABEC0()
{
  return type metadata accessor for DialogTemperature.Builder();
}

uint64_t sub_1ABED0()
{
  return type metadata accessor for DialogTemperature();
}

uint64_t sub_1ABEE0()
{
  return DialogPersonHeight.Builder.init()();
}

uint64_t sub_1ABEF0()
{
  return type metadata accessor for DialogPersonHeight.Builder();
}

uint64_t sub_1ABF00()
{
  return dispatch thunk of DialogPersonHeight.symbolic.getter();
}

uint64_t sub_1ABF10()
{
  return type metadata accessor for DialogPersonHeight();
}

uint64_t sub_1ABF20()
{
  return dispatch thunk of DialogCalendarRange.isRangeSameDay.getter();
}

uint64_t sub_1ABF30()
{
  return dispatch thunk of DialogCalendarRange.dateRangeAbbreviated.getter();
}

uint64_t sub_1ABF40()
{
  return dispatch thunk of DialogCalendarRange.end.getter();
}

uint64_t sub_1ABF50()
{
  return dispatch thunk of DialogCalendarRange.start.getter();
}

uint64_t sub_1ABF60()
{
  return dispatch thunk of DialogCalendarRange.Builder.withEndSecs(_:)();
}

uint64_t sub_1ABF70()
{
  return dispatch thunk of DialogCalendarRange.Builder.withStartSecs(_:)();
}

uint64_t sub_1ABF80()
{
  return dispatch thunk of DialogCalendarRange.Builder.build()();
}

uint64_t sub_1ABF90()
{
  return DialogCalendarRange.Builder.init()();
}

uint64_t sub_1ABFA0()
{
  return type metadata accessor for DialogCalendarRange.Builder();
}

uint64_t sub_1ABFB0()
{
  return type metadata accessor for DialogCalendarRange();
}

uint64_t sub_1ABFC0()
{
  return dispatch thunk of DialogPreciseTemperature.longSpokenTwoDigits.getter();
}

uint64_t sub_1ABFD0()
{
  return dispatch thunk of DialogPreciseTemperature.mediumSpokenTwoDigits.getter();
}

uint64_t sub_1ABFE0()
{
  return DialogPreciseTemperature.Builder.init()();
}

uint64_t sub_1ABFF0()
{
  return type metadata accessor for DialogPreciseTemperature.Builder();
}

uint64_t sub_1AC000()
{
  return dispatch thunk of DialogAbstractMeasurement.Builder.build()();
}

uint64_t sub_1AC010()
{
  return dispatch thunk of DialogAbstractMeasurement.Builder.withUnits(_:)();
}

uint64_t sub_1AC020()
{
  return dispatch thunk of DialogAbstractMeasurement.Builder.withValue(_:)();
}

uint64_t sub_1AC030()
{
  return dispatch thunk of DialogConvertibleMeasurement.Builder.build()();
}

uint64_t sub_1AC040()
{
  return dispatch thunk of DialogConvertibleMeasurement.Builder.withUnits(_:)();
}

uint64_t sub_1AC050()
{
  return dispatch thunk of DialogConvertibleMeasurement.Builder.withValue(_:)();
}

uint64_t sub_1AC060()
{
  return dispatch thunk of DialogCalendar.isYesterday.getter();
}

uint64_t sub_1AC070()
{
  return dispatch thunk of DialogCalendar.dateDescriptive.getter();
}

uint64_t sub_1AC080()
{
  return dispatch thunk of DialogCalendar.timeDescriptive.getter();
}

uint64_t sub_1AC090()
{
  return static DialogCalendar.make(date:)();
}

uint64_t sub_1AC0A0()
{
  return DialogCalendar.secs.getter();
}

uint64_t sub_1AC0B0()
{
  return dispatch thunk of DialogCalendar.Builder.build()();
}

uint64_t sub_1AC0C0()
{
  return dispatch thunk of DialogCalendar.Builder.withSecs(_:)();
}

uint64_t sub_1AC0D0()
{
  return DialogCalendar.Builder.init()();
}

uint64_t sub_1AC0E0()
{
  return type metadata accessor for DialogCalendar.Builder();
}

uint64_t sub_1AC0F0()
{
  return dispatch thunk of DialogCalendar.isNight.getter();
}

uint64_t sub_1AC100()
{
  return type metadata accessor for DialogCalendar();
}

uint64_t sub_1AC110()
{
  return dispatch thunk of DialogDuration.hoursMinutesAbbreviated.getter();
}

uint64_t sub_1AC120()
{
  return dispatch thunk of DialogDuration.Builder.build()();
}

uint64_t sub_1AC130()
{
  return dispatch thunk of DialogDuration.Builder.withSecs(_:)();
}

uint64_t sub_1AC140()
{
  return DialogDuration.Builder.init()();
}

uint64_t sub_1AC150()
{
  return type metadata accessor for DialogDuration.Builder();
}

uint64_t sub_1AC160()
{
  return type metadata accessor for DialogDuration();
}

uint64_t sub_1AC170()
{
  return dispatch thunk of CATGlobals.toDictionary.getter();
}

uint64_t sub_1AC180()
{
  return CATWrapper.init(templateDir:options:globals:)();
}

uint64_t sub_1AC190()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)();
}

uint64_t sub_1AC1A0()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t sub_1AC1B0()
{
  return CATWrapper.deinit();
}

uint64_t sub_1AC1C0()
{
  return type metadata accessor for SirikitApp();
}

uint64_t sub_1AC1D0()
{
  return SpeakableString.print.getter();
}

uint64_t sub_1AC1E0()
{
  return type metadata accessor for SpeakableString();
}

uint64_t sub_1AC1F0()
{
  return CATWrapperSimple.init(templateDir:options:globals:)();
}

uint64_t sub_1AC200()
{
  return CATWrapperSimple.init(useResponseMode:options:)();
}

uint64_t sub_1AC210()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

uint64_t sub_1AC220()
{
  return CATWrapperSimple.deinit();
}

uint64_t sub_1AC230()
{
  return CATType.toDictionary.getter();
}

uint64_t sub_1AC240()
{
  return static CATOption.defaultMode.getter();
}

uint64_t sub_1AC250()
{
  return type metadata accessor for CATOption();
}

uint64_t sub_1AC260()
{
  return getHealthDataTypeName(from:)();
}

uint64_t sub_1AC270()
{
  return getHealthLogEntity(from:)();
}

uint64_t sub_1AC280()
{
  return HealthApps.sirikitApp.getter();
}

uint64_t sub_1AC290()
{
  return HealthApps.isInstalled.getter();
}

uint64_t sub_1AC2A0()
{
  return HealthApps.isRestricted.getter();
}

uint64_t sub_1AC2B0()
{
  return HealthApps.rawValue.getter();
}

uint64_t sub_1AC2C0()
{
  return OutputFlow.init(templatingResult:snippets:flowConfig:rrEntities:)();
}

uint64_t sub_1AC2D0()
{
  return type metadata accessor for OutputFlow();
}

uint64_t sub_1AC2E0()
{
  return GuardedFlow.init(mainFlow:guards:enforceProtectedHealthApp:)();
}

uint64_t sub_1AC2F0()
{
  return SequenceFlow.init(aceService:flows:)();
}

uint64_t sub_1AC300()
{
  return type metadata accessor for SequenceFlow();
}

uint64_t sub_1AC310()
{
  return LaunchAppFlow.init(aceService:app:)();
}

void sub_1AC320()
{
}

void sub_1AC330()
{
}

void sub_1AC340()
{
}

void sub_1AC350()
{
}

uint64_t sub_1AC360()
{
  return FlowTaskLogger.federatedStats(kind:dataTypeString:)();
}

void sub_1AC370()
{
}

void sub_1AC380()
{
}

void sub_1AC390()
{
}

void sub_1AC3A0()
{
}

void sub_1AC3B0()
{
}

uint64_t sub_1AC3C0()
{
  return AppPunchOutFlow.init(aceService:url:instrumentationTask:)();
}

uint64_t sub_1AC3D0()
{
  return type metadata accessor for AppPunchOutFlow();
}

uint64_t sub_1AC3E0()
{
  return FlowConfigModel.init(deviceState:aceService:aceServiceAsync:sharedContextService:outputPublisher:flowFinder:networkStatusProvider:)();
}

uint64_t sub_1AC3F0()
{
  return isExerciseRequest(in:)();
}

uint64_t sub_1AC400()
{
  return isProbablyWorkout(from:requireWorkoutIdentifier:)();
}

uint64_t sub_1AC410()
{
  return getMeasurementUnit(from:)();
}

uint64_t sub_1AC420()
{
  return getMeasurementUnit(from:)();
}

uint64_t sub_1AC430()
{
  return hasMoodLoggingIdentifier(from:)();
}

uint64_t sub_1AC440()
{
  return CurrentRequest.nlExecutionLocation.getter();
}

uint64_t sub_1AC450()
{
  return CurrentRequest.asrExecutionLocation.getter();
}

uint64_t sub_1AC470()
{
  return PeriodFlow.init(healthLogValueCategoryValue:)();
}

uint64_t sub_1AC480()
{
  return PeriodFlow.init(rawDoubleValue:)();
}

uint64_t sub_1AC490()
{
  return type metadata accessor for MatchedMedName();
}

uint64_t sub_1AC4A0()
{
  return type metadata accessor for UndoMedsIntent();
}

uint64_t sub_1AC4B0()
{
  return type metadata accessor for LogPeriodIntent();
}

uint64_t sub_1AC4C0()
{
  return MedStorageHelper.init(storage:)();
}

uint64_t sub_1AC4D0()
{
  return type metadata accessor for MedStorageHelper();
}

uint64_t sub_1AC4E0()
{
  return type metadata accessor for LogQuantityIntent();
}

uint64_t sub_1AC500()
{
  return HealthKitPersistor.init()();
}

uint64_t sub_1AC510()
{
  return getMeasurementType(for:)();
}

uint64_t sub_1AC520()
{
  return DataProviderFactory.bloodPressureProvider()();
}

uint64_t sub_1AC530()
{
  return DataProviderFactory.init()();
}

uint64_t sub_1AC540()
{
  return UndoMedsIntentHandler.init(storage:)();
}

uint64_t sub_1AC550()
{
  return type metadata accessor for UndoMedsIntentHandler();
}

uint64_t sub_1AC570()
{
  return BloodPressurePersistor.init()();
}

uint64_t sub_1AC580()
{
  return type metadata accessor for GetBloodPressureIntent();
}

uint64_t sub_1AC590()
{
  return type metadata accessor for GetSleepAnalysisIntent();
}

uint64_t sub_1AC5A0()
{
  return type metadata accessor for LogBloodPressureIntent();
}

uint64_t sub_1AC5B0()
{
  return LogPeriodIntentHandler.init(storage:)();
}

uint64_t sub_1AC5C0()
{
  return type metadata accessor for LogPeriodIntentHandler();
}

uint64_t sub_1AC5D0()
{
  return type metadata accessor for GetHealthQuantityIntent();
}

uint64_t sub_1AC5E0()
{
  return LogPeriodIntentResponse.__allocating_init(code:userActivity:)();
}

uint64_t sub_1AC600()
{
  return type metadata accessor for DeleteHealthSampleIntent();
}

uint64_t sub_1AC610()
{
  return LogQuantityIntentHandler.init(storage:)();
}

uint64_t sub_1AC620()
{
  return type metadata accessor for LogQuantityIntentHandler();
}

uint64_t sub_1AC630()
{
  return type metadata accessor for GetAcitivitySummaryIntent();
}

uint64_t sub_1AC640()
{
  return type metadata accessor for LogGenericMedicationsIntent();
}

uint64_t sub_1AC650()
{
  return LogSpecificMedicationsIntent.__allocating_init()();
}

uint64_t sub_1AC660()
{
  return type metadata accessor for LogSpecificMedicationsIntent();
}

uint64_t sub_1AC670()
{
  return isWithinSleepRetentionPolicy(dateInterval:)();
}

uint64_t sub_1AC680()
{
  return GetBloodPressureIntentHandler.init(provider:)();
}

uint64_t sub_1AC690()
{
  return type metadata accessor for GetBloodPressureIntentHandler();
}

uint64_t sub_1AC6A0()
{
  return GetSleepAnalysisIntentHandler.init(store:)();
}

uint64_t sub_1AC6B0()
{
  return type metadata accessor for GetSleepAnalysisIntentHandler();
}

uint64_t sub_1AC6C0()
{
  return LogBloodPressureIntentHandler.init(storage:)();
}

uint64_t sub_1AC6D0()
{
  return type metadata accessor for LogBloodPressureIntentHandler();
}

uint64_t sub_1AC6E0()
{
  return GetHealthQuantityIntentHandler.init(storage:)();
}

uint64_t sub_1AC6F0()
{
  return type metadata accessor for GetHealthQuantityIntentHandler();
}

uint64_t sub_1AC700()
{
  return isWithinGenericRetentionPolicy(dateInterval:)();
}

uint64_t sub_1AC710()
{
  return DeleteHealthSampleIntentHandler.init(storage:)();
}

uint64_t sub_1AC720()
{
  return type metadata accessor for DeleteHealthSampleIntentHandler();
}

uint64_t sub_1AC730()
{
  return GetActivitySummaryIntentHandler.init(store:)();
}

uint64_t sub_1AC740()
{
  return type metadata accessor for GetActivitySummaryIntentHandler();
}

uint64_t sub_1AC750()
{
  return type metadata accessor for GetMenstruationPredictionIntent();
}

uint64_t sub_1AC760()
{
  return LogGenericMedicationsIntentHandler.init(storage:)();
}

uint64_t sub_1AC770()
{
  return type metadata accessor for LogGenericMedicationsIntentHandler();
}

uint64_t sub_1AC780()
{
  return LogSpecificMedicationsIntentHandler.init(storage:)();
}

uint64_t sub_1AC790()
{
  return type metadata accessor for LogSpecificMedicationsIntentHandler();
}

uint64_t sub_1AC7A0()
{
  return GetMenstruationPredictionIntentHandler.init(store:)();
}

uint64_t sub_1AC7B0()
{
  return type metadata accessor for GetMenstruationPredictionIntentHandler();
}

uint64_t sub_1AC7C0()
{
  return Logger.workout.unsafeMutableAddressor();
}

uint64_t sub_1AC7D0()
{
  return Logger.wellness.unsafeMutableAddressor();
}

uint64_t sub_1AC7E0()
{
  return Logger.health.unsafeMutableAddressor();
}

uint64_t sub_1AC7F0()
{
  return Logger.logObject.getter();
}

uint64_t sub_1AC800()
{
  return type metadata accessor for Logger();
}

uint64_t sub_1AC810()
{
  return EdgeInsets.init(_all:)();
}

uint64_t sub_1AC820()
{
  return type metadata accessor for Environment.Content();
}

uint64_t sub_1AC830()
{
  return StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
}

uint64_t sub_1AC840()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t sub_1AC850()
{
  return static DynamicTypeSize.== infix(_:_:)();
}

uint64_t sub_1AC860()
{
  return type metadata accessor for DynamicTypeSize();
}

uint64_t sub_1AC870()
{
  return EnvironmentObject.error()();
}

uint64_t sub_1AC880()
{
  return EnvironmentObject.init()();
}

uint64_t sub_1AC890()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_1AC8A0()
{
  return EnvironmentValues.dynamicTypeSize.setter();
}

uint64_t sub_1AC8B0()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t sub_1AC8C0()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_1AC8D0()
{
  return EnvironmentValues.init()();
}

uint64_t sub_1AC8E0()
{
  return type metadata accessor for EnvironmentValues();
}

uint64_t sub_1AC8F0()
{
  return static VerticalAlignment.lastTextBaseline.getter();
}

uint64_t sub_1AC900()
{
  return static VerticalAlignment.center.getter();
}

uint64_t sub_1AC910()
{
  return static HorizontalAlignment.leading.getter();
}

uint64_t sub_1AC920()
{
  return UIViewRepresentable._resetUIView(_:coordinator:destroy:)();
}

uint64_t sub_1AC930()
{
  return static UIViewRepresentable.dismantleUIView(_:coordinator:)();
}

uint64_t sub_1AC940()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t sub_1AC960()
{
  return static UIViewRepresentable._layoutOptions(_:)();
}

uint64_t sub_1AC970()
{
  return UIViewRepresentable._identifiedViewTree(in:)();
}

uint64_t sub_1AC980()
{
  return UIViewRepresentable._overrideLayoutTraits(_:for:)();
}

uint64_t sub_1AC990()
{
  return UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)();
}

uint64_t sub_1AC9A0()
{
  return static UIViewRepresentable._modifyBridgedViewInputs(_:)();
}

uint64_t sub_1AC9B0()
{
  return UIViewRepresentable.body.getter();
}

uint64_t sub_1AC9D0()
{
  return UIViewRepresentable<>.makeCoordinator()();
}

uint64_t sub_1AC9E0()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_1AC9F0()
{
  return static PrimitiveButtonStyle<>.rfButton.getter();
}

uint64_t sub_1ACA00()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t sub_1ACA10()
{
  return static Edge.Set.all.getter();
}

uint64_t sub_1ACA20()
{
  return static Edge.Set.top.getter();
}

uint64_t sub_1ACA30()
{
  return static Edge.Set.bottom.getter();
}

uint64_t sub_1ACA40()
{
  return static Edge.Set.leading.getter();
}

uint64_t sub_1ACA50()
{
  return static Edge.Set.trailing.getter();
}

uint64_t sub_1ACA60()
{
  return static Font.subheadline.getter();
}

uint64_t sub_1ACA70()
{
  return type metadata accessor for Font.Design();
}

uint64_t sub_1ACA80()
{
  return static Font.Weight.medium.getter();
}

uint64_t sub_1ACA90()
{
  return static Font.Weight.regular.getter();
}

uint64_t sub_1ACAA0()
{
  return static Font.Weight.semibold.getter();
}

uint64_t sub_1ACAB0()
{
  return static Font.system(_:design:weight:)();
}

uint64_t sub_1ACAC0()
{
  return Font.weight(_:)();
}

uint64_t sub_1ACAD0()
{
  return type metadata accessor for Font.TextStyle();
}

uint64_t sub_1ACAE0()
{
  return Font.smallCaps()();
}

uint64_t sub_1ACAF0()
{
  return Text.fontWeight(_:)();
}

uint64_t sub_1ACB00()
{
  return Text.foregroundStyle<A>(_:)();
}

uint64_t sub_1ACB10()
{
  return Text.font(_:)();
}

uint64_t sub_1ACB20()
{
  return Text.init<A>(_:)();
}

uint64_t sub_1ACB30()
{
  return View.eraseToAnyView()();
}

uint64_t sub_1ACB40()
{
  return View.buttonRole(_:)();
}

uint64_t sub_1ACB50()
{
  return View.componentSpacing(top:bottom:)();
}

uint64_t sub_1ACB60()
{
  return View.lastComponentBottomSpacing(_:)();
}

uint64_t sub_1ACB70()
{
  return static View._makeView(view:inputs:)();
}

uint64_t sub_1ACB80()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t sub_1ACB90()
{
  return View.buttonStyle<A>(_:)();
}

uint64_t sub_1ACBA0()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_1ACBB0()
{
  return type metadata accessor for Color.RGBColorSpace();
}

uint64_t sub_1ACBC0()
{
  return static Color.red.getter();
}

uint64_t sub_1ACBD0()
{
  return static Color.gray.getter();
}

uint64_t sub_1ACBE0()
{
  return static Color.black.getter();
}

uint64_t sub_1ACBF0()
{
  return Color.init(_:red:green:blue:opacity:)();
}

uint64_t sub_1ACC00()
{
  return Button.init(action:label:)();
}

uint64_t sub_1ACC10()
{
  return Button<>.init<A>(_:action:)();
}

uint64_t sub_1ACC20()
{
  return static Alignment.center.getter();
}

uint64_t sub_1ACC30()
{
  return static Alignment.trailing.getter();
}

uint64_t sub_1ACC40()
{
  return type metadata accessor for ButtonItemButtonStyle.Role();
}

uint64_t sub_1ACC60()
{
  return ActionHandler.wrappedValue.getter();
}

uint64_t _s18WellnessFlowPlugin20GenericButtonSnippetV14_actionHandler33_C4F64AB2145C6C08CB305FFD78E00F71LL0F2UI06ActionH0Vvpfi_0()
{
  return ActionHandler.init()();
}

uint64_t sub_1ACC80()
{
  return type metadata accessor for ActionHandler();
}

uint64_t sub_1ACC90()
{
  return type metadata accessor for RFButtonStyle();
}

uint64_t sub_1ACCA0()
{
  return ComponentStack.init(content:)();
}

uint64_t sub_1ACCB0()
{
  return type metadata accessor for InteractionType();
}

uint64_t sub_1ACCC0()
{
  return BinaryButtonView.init(primaryButton:secondaryButton:)();
}

uint64_t sub_1ACCD0()
{
  return type metadata accessor for BinaryButtonView();
}

uint64_t sub_1ACCE0()
{
  return SashStandardView.init(model:)();
}

uint64_t sub_1ACCF0()
{
  return type metadata accessor for SashStandardView();
}

uint64_t sub_1ACD00()
{
  return StandardActionHandler.perform(_:interactionType:)();
}

uint64_t sub_1ACD10()
{
  return type metadata accessor for StandardActionHandler();
}

uint64_t sub_1ACD20()
{
  return type metadata accessor for ComponentStackBottomSpacing();
}

uint64_t sub_1ACD30()
{
  return dispatch thunk of Context.perform(directInvocation:payload:)();
}

uint64_t sub_1ACD40()
{
  return type metadata accessor for Context();
}

NSDictionary sub_1ACD50()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_1ACD60()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_1ACD70()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t sub_1ACD80()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t sub_1ACD90()
{
  return dispatch thunk of static Comparable.>= infix(_:_:)();
}

uint64_t sub_1ACDA0()
{
  return dispatch thunk of static Comparable.<= infix(_:_:)();
}

uint64_t sub_1ACDB0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString sub_1ACDC0()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1ACDD0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1ACDE0()
{
  return String.init(format:arguments:)();
}

uint64_t sub_1ACE00()
{
  return String.init<A>(describing:)();
}

uint64_t sub_1ACE10()
{
  return String.init<A>(describing:)();
}

uint64_t sub_1ACE20()
{
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t sub_1ACE30()
{
  return String.uppercased()()._countAndFlagsBits;
}

uint64_t sub_1ACE40()
{
  return String.toSpeakableString.getter();
}

uint64_t sub_1ACE50()
{
  return String.firstLetterCapitalized()()._countAndFlagsBits;
}

uint64_t sub_1ACE60()
{
  return String.hash(into:)();
}

void sub_1ACE70(Swift::String a1)
{
}

Swift::Int sub_1ACE80()
{
  return String.UTF8View._foreignCount()();
}

BOOL sub_1ACE90(Swift::String a1)
{
  return String.hasSuffix(_:)(a1);
}

uint64_t sub_1ACEA0()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_1ACEB0()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray sub_1ACEC0()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_1ACED0()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1ACEE0()
{
  return Array.description.getter();
}

uint64_t sub_1ACEF0()
{
  return specialized Array._endMutation()();
}

uint64_t sub_1ACF00()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_1ACF10()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t sub_1ACF20()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_1ACF30()
{
  return Double._roundSlowPath(_:)();
}

uint64_t sub_1ACF40()
{
  return Double.sign.getter();
}

uint64_t sub_1ACF50()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_1ACF60()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_1ACF70()
{
  return static os_log_type_t.fault.getter();
}

HKCategoryType sub_1ACF80(HKCategoryTypeIdentifier a1)
{
  return HKCategoryType.init(_:)(a1);
}

HKClinicalType sub_1ACF90(HKClinicalTypeIdentifier a1)
{
  return HKClinicalType.init(_:)(a1);
}

NSNumber sub_1ACFA0(Swift::Bool BOOLeanLiteral)
{
  return NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

uint64_t sub_1ACFB0()
{
  return AceObject.serializeToBase64()().value._countAndFlagsBits;
}

uint64_t sub_1ACFC0()
{
  return Optional.description.getter();
}

uint64_t sub_1ACFD0()
{
  return type metadata accessor for Optional();
}

uint64_t sub_1ACFE0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1ACFF0()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t sub_1AD000()
{
  return StringProtocol.capitalized.getter();
}

uint64_t sub_1AD010()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t sub_1AD020()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t sub_1AD030()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_1AD040()
{
  return static _SetStorage.copy(original:)();
}

uint64_t sub_1AD050()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t sub_1AD060()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t sub_1AD070()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

void sub_1AD080(Swift::Int a1)
{
}

uint64_t sub_1AD090()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t sub_1AD0A0()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t sub_1AD0B0()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_1AD0C0()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t sub_1AD0D0()
{
  return type metadata accessor for DecodingError();
}

uint64_t sub_1AD0E0()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t sub_1AD0F0()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_1AD100()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_1AD110()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t sub_1AD120()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_1AD130()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_1AD140()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t sub_1AD150()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_1AD160()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_1AD170()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t sub_1AD180()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int sub_1AD190(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases, string);
}

uint64_t sub_1AD1B0()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t sub_1AD1C0()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_1AD1D0()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_1AD1E0()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1AD1F0()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_1AD200()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_1AD210()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_1AD220()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_1AD230()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t sub_1AD240()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_1AD260()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1AD270()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1AD280()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_1AD290()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_1AD2B0()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_1AD2C0()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_1AD2D0()
{
  return type metadata accessor for FloatingPointRoundingRule();
}

uint64_t sub_1AD2E0()
{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

uint64_t sub_1AD2F0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1AD300()
{
  return _findStringSwitchCaseWithCache(cases:string:cache:)();
}

uint64_t sub_1AD310()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_1AD320()
{
  return Error._getEmbeddedNSError()();
}

uint64_t sub_1AD330()
{
  return Error._code.getter();
}

uint64_t sub_1AD340()
{
  return Error._domain.getter();
}

uint64_t sub_1AD350()
{
  return Error._userInfo.getter();
}

uint64_t sub_1AD360()
{
  return Hasher.init(_seed:)();
}

void sub_1AD370(Swift::UInt a1)
{
}

void sub_1AD380(Swift::UInt8 a1)
{
}

Swift::Int sub_1AD390()
{
  return Hasher._finalize()();
}

uint64_t sub_1AD3A0()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t sub_1AD3B0()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t sub_1AD3E0()
{
  return _typeName(_:qualified:)();
}

uint64_t AFDeviceSupportsSiriUOD()
{
  return _AFDeviceSupportsSiriUOD();
}

double __exp10(double a1)
{
  return ___exp10(a1);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return __swift_stdlib_strtod_clocale();
}

void free(void *a1)
{
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_throwingResume()
{
  return _swift_continuation_throwingResume();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}