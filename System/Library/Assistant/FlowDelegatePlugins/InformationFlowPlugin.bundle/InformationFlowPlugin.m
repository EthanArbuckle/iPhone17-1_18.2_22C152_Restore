void *SiriInformationDataModels.bundleName.unsafeMutableAddressor()
{
  return &static SiriInformationDataModels.bundleName;
}

unint64_t static SiriInformationDataModels.bundleName.getter()
{
  return 0xD000000000000017;
}

uint64_t static VideoSnippetError.__derived_enum_equals(_:_:)()
{
  return 1;
}

void VideoSnippetError.hash(into:)()
{
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriInformationDataModels.CodingKeys()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriInformationDataModels.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SiriInformationDataModels.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t static SportsPersonalizationResult.unambiguous.getter()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance SiriInformationDataModels.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriInformationDataModels.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriInformationDataModels.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int VideoSnippetError.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SiriInformationDataModels.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SiriInformationDataModels.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriInformationDataModels.CodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v19 = v15;
  uint64_t v20 = v16;
  uint64_t v21 = v17;
  uint64_t v22 = v18;
  lazy protocol witness table accessor for type KnowledgeFallbackConfirmationPayload and conformance KnowledgeFallbackConfirmationPayload();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type KnowledgeFallbackConfirmationPayload and conformance KnowledgeFallbackConfirmationPayload()
{
  unint64_t result = lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload and conformance KnowledgeFallbackConfirmationPayload;
  if (!lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload and conformance KnowledgeFallbackConfirmationPayload)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload and conformance KnowledgeFallbackConfirmationPayload);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload and conformance KnowledgeFallbackConfirmationPayload;
  if (!lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload and conformance KnowledgeFallbackConfirmationPayload)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload and conformance KnowledgeFallbackConfirmationPayload);
  }
  return result;
}

uint64_t SiriInformationDataModels.init(from:)(uint64_t a1)
{
  return SiriInformationDataModels.init(from:)(a1, (uint64_t (*)(void))specialized SiriInformationDataModels.init(from:));
}

uint64_t protocol witness for SnippetPluginModel.snippetHidden(for:idiom:) in conformance SiriInformationDataModels()
{
  return SnippetPluginModel.snippetHidden(for:idiom:)();
}

void *protocol witness for Decodable.init(from:) in conformance SiriInformationDataModels@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = specialized SiriInformationDataModels.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriInformationDataModels(void *a1)
{
  return SiriInformationDataModels.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t KnowledgeFallbackConfirmationPayload.yesLabel.getter(uint64_t a1)
{
  return a1;
}

uint64_t KnowledgeFallbackConfirmationPayload.noLabel.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance KnowledgeFallbackConfirmationPayload.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance KnowledgeFallbackConfirmationPayload.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance KnowledgeFallbackConfirmationPayload.CodingKeys()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KnowledgeFallbackConfirmationPayload.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance KnowledgeFallbackConfirmationPayload.CodingKeys()
{
  if (*v0) {
    return 0x6C6562614C6F6ELL;
  }
  else {
    return 0x6C6562614C736579;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance KnowledgeFallbackConfirmationPayload.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized KnowledgeFallbackConfirmationPayload.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance KnowledgeFallbackConfirmationPayload.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance KnowledgeFallbackConfirmationPayload.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance KnowledgeFallbackConfirmationPayload.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t KnowledgeFallbackConfirmationPayload.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a4;
  v12[1] = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<KnowledgeFallbackConfirmationPayload.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t KnowledgeFallbackConfirmationPayload.init(from:)(uint64_t a1)
{
  return SiriInformationDataModels.init(from:)(a1, (uint64_t (*)(void))specialized KnowledgeFallbackConfirmationPayload.init(from:));
}

uint64_t SiriInformationDataModels.init(from:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance KnowledgeFallbackConfirmationPayload@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized KnowledgeFallbackConfirmationPayload.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance KnowledgeFallbackConfirmationPayload(void *a1)
{
  return KnowledgeFallbackConfirmationPayload.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

double variable initialization expression of InformationRoutingFlow.interactionStream@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t default argument 1 of InformationViewFactory.init(deviceState:commonCATs:)()
{
  uint64_t v0 = type metadata accessor for CATOption();
  __chkstk_darwin(v0 - 8);
  type metadata accessor for CommonCATs();
  static CATOption.defaultMode.getter();
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t default argument 1 of InformationRoutingFlow.init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)()
{
  return static PommesResponse.makeDefaultInteractionStream()();
}

id default argument 2 of InformationRoutingFlow.init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)()
{
  return [self isSiriLocationServicesPromptingEnabled];
}

void default argument 3 of InformationRoutingFlow.init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for KnowledgeFallbackHelper;
  *(void *)(a1 + 32) = &protocol witness table for KnowledgeFallbackHelper;
}

uint64_t default argument 2 of TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 2 of TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)((uint64_t (*)(void))&type metadata accessor for PommesEngagement, (uint64_t)&protocol witness table for PommesEngagement, (uint64_t (*)(void))&PommesEngagement.init(), a1);
}

uint64_t default argument 8 of DetailedResultProvider.init(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:informationViewFactory:patternFlowProvider:patternExecutor:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 3 of TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)((uint64_t (*)(void))type metadata accessor for PatternExecutor, (uint64_t)&protocol witness table for PatternExecutor, a1);
}

uint64_t default argument 1 of KnowledgeFallbackConfirmationStrategy.init(sasRecognition:isEnablement:responseGenerator:aceService:)()
{
  return 0;
}

uint64_t default argument 2 of KnowledgeFallbackConfirmationStrategy.init(sasRecognition:isEnablement:responseGenerator:aceService:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResponseFactory();
  swift_allocObject();
  uint64_t result = ResponseFactory.init()();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *a1 = result;
  return result;
}

uint64_t default argument 5 of RenderPegasusFlow.init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)()
{
  uint64_t v0 = type metadata accessor for CATOption();
  __chkstk_darwin(v0 - 8);
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  static Device.current.getter();
  type metadata accessor for CommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v1 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for InformationViewFactory();
  uint64_t v2 = (void *)swift_allocObject();
  id v3 = [self sharedPreferences];
  uint64_t v4 = type metadata accessor for PommesServerFallbackPreferences();
  swift_allocObject();
  uint64_t v5 = PommesServerFallbackPreferences.init(_:)();
  v2[11] = v4;
  v2[12] = &protocol witness table for PommesServerFallbackPreferences;
  v2[8] = v5;
  outlined init with take of PatternFlowProviding(v9, (uint64_t)(v2 + 3));
  v2[2] = v1;
  static Device.current.getter();
  type metadata accessor for PegasusPatternFlowFactory();
  uint64_t v6 = swift_allocObject();
  outlined init with copy of OutputPublisherAsync((uint64_t)v10, v6 + 16);
  outlined init with copy of OutputPublisherAsync((uint64_t)v9, v6 + 56);
  *(void *)(v6 + 96) = v2;
  static PatternFlowProvidingHelper.unwrap(_:with:)((uint64_t)v11, (uint64_t)v10, (uint64_t *)v8);
  outlined destroy of PatternFlowProviding?((uint64_t)v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  outlined init with take of PatternFlowProviding(v8, v6 + 104);
  return v6;
}

uint64_t default argument 7 of RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 2 of TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)((uint64_t (*)(void))&type metadata accessor for PommesSystemAppChecking, (uint64_t)&protocol witness table for PommesSystemAppChecking, (uint64_t (*)(void))&PommesSystemAppChecking.init(), a1);
}

uint64_t variable initialization expression of SearchFlow.nlContextUpdate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of PushOffQueryFlow.nlContextUpdate((uint64_t (*)(void))&type metadata accessor for NLContextUpdate, a1);
}

uint64_t variable initialization expression of SearchFlow.targetedRequest()
{
  return 0;
}

void *default argument 0 of PegasusComponents.init(dialogs:layouts:catDialogs:buttonViews:directExecutions:delayedActions:sayItComponents:disambiguationLists:domainObjectComponents:)()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of ShimOverrideFlow.exitValue@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  type metadata accessor for ShimOverrideFlow.ExitValue(0);

  return swift_storeEnumTagMultiPayload();
}

double default argument 2 of PushOffQueryFlow.init(query:renderComponentFlowFactory:pommesSearchClient:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for PommesSearchClient();
  swift_allocObject();
  uint64_t v3 = PommesSearchClient.init()();
  if (v3)
  {
    *(void *)(a1 + 24) = v2;
    *(void *)(a1 + 32) = &protocol witness table for PommesSearchClient;
    *(void *)a1 = v3;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t static LoggingConstants.defaultTaskName.getter()
{
  return 0x54746E6572727543;
}

uint64_t static LoggingConstants.defaultParameterValue.getter()
{
  return 0x6C7070615F746F6ELL;
}

uint64_t default argument 2 of PegasusFlowEventLogger.logGenericFlowStepEvent(stateType:parameterName:statusReason:statusReasonDescription:taskType:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for SiriKitReliabilityCodes.normal(_:);
  uint64_t v3 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v6 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(a1, v2, v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);

  return v4(a1, 0, 1, v3);
}

uint64_t static LoggingConstants.empty.getter()
{
  return 0;
}

uint64_t variable initialization expression of InformationRootFlow.originalInput@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of PushOffQueryFlow.nlContextUpdate((uint64_t (*)(void))&type metadata accessor for Input, a1);
}

uint64_t variable initialization expression of PushOffQueryFlow.nlContextUpdate@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t default argument 0 of InformationRootFlow.init(flowEntryPoints:)()
{
  if (one-time initialization token for kFlowEntryPoints != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t default argument 0 of SportsIntentDonator.init(donator:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 3 of TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)((uint64_t (*)(void))type metadata accessor for IntentDonator, (uint64_t)&protocol witness table for IntentDonator, a1);
}

uint64_t default argument 3 of TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1(0);
  uint64_t result = swift_allocObject();
  a3[3] = v5;
  a3[4] = a2;
  *a3 = result;
  return result;
}

uint64_t static LoggingConstants.none.getter()
{
  return 1701736302;
}

uint64_t variable initialization expression of KnowledgeConfirmationResponseProvider.knowledgeConfirmationResponse()
{
  return 3;
}

uint64_t variable initialization expression of InformationViewFactory.serverFallbackPreferences@<X0>(uint64_t *a1@<X8>)
{
  id v2 = [self sharedPreferences];
  uint64_t v3 = type metadata accessor for PommesServerFallbackPreferences();
  swift_allocObject();
  uint64_t result = PommesServerFallbackPreferences.init(_:)();
  a1[3] = v3;
  a1[4] = (uint64_t)&protocol witness table for PommesServerFallbackPreferences;
  *a1 = result;
  return result;
}

uint64_t default argument 2 of GenericResultSetParamBuilder.init(parameters:items:itemsFieldName:)()
{
  return 0x736D657469;
}

uint64_t default argument 3 of RenderPegasusFlow.init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)()
{
  type metadata accessor for ExperienceSelector();

  return swift_allocObject();
}

uint64_t default argument 2 of TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  a4[3] = a1(0);
  a4[4] = a2;
  __swift_allocate_boxed_opaque_existential_1(a4);
  return a3();
}

uint64_t default argument 9 of RenderPegasusFlow.init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)()
{
  return type metadata accessor for AppResolutionStrategyHelpers();
}

uint64_t default argument 4 of RenderPegasusFlow.init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)()
{
  uint64_t v0 = type metadata accessor for CATOption();
  __chkstk_darwin(v0 - 8);
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  static Device.current.getter();
  type metadata accessor for CommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v1 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for InformationViewFactory();
  id v2 = (void *)swift_allocObject();
  id v3 = [self sharedPreferences];
  uint64_t v4 = type metadata accessor for PommesServerFallbackPreferences();
  swift_allocObject();
  uint64_t v5 = PommesServerFallbackPreferences.init(_:)();
  v2[11] = v4;
  v2[12] = &protocol witness table for PommesServerFallbackPreferences;
  v2[8] = v5;
  outlined init with take of PatternFlowProviding(&v8, (uint64_t)(v2 + 3));
  v2[2] = v1;
  type metadata accessor for RenderComponentFlowFactory();
  uint64_t v6 = swift_allocObject();
  outlined init with take of PatternFlowProviding(&v9, v6 + 16);
  *(void *)(v6 + 56) = v2;
  return v6;
}

void *default argument 1 of RenderComponentFlowFactory.init(outputPublisher:informationViewFactory:)()
{
  uint64_t v0 = type metadata accessor for CATOption();
  __chkstk_darwin(v0 - 8);
  static Device.current.getter();
  type metadata accessor for CommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v1 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for InformationViewFactory();
  id v2 = (void *)swift_allocObject();
  id v3 = [self sharedPreferences];
  uint64_t v4 = type metadata accessor for PommesServerFallbackPreferences();
  swift_allocObject();
  uint64_t v5 = PommesServerFallbackPreferences.init(_:)();
  v2[11] = v4;
  v2[12] = &protocol witness table for PommesServerFallbackPreferences;
  v2[8] = v5;
  outlined init with take of PatternFlowProviding(&v7, (uint64_t)(v2 + 3));
  v2[2] = v1;
  return v2;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FLOWSchemaFLOWStateType(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void protocol witness for SetAlgebra.init() in conformance NSJSONReadingOptions(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance AFRequestOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t specialized SiriInformationDataModels.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001DLL && a2 == 0x80000000000ADA70)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void *specialized SiriInformationDataModels.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys>);
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriInformationDataModels.CodingKeys>);
  uint64_t v6 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  long long v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v9 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriInformationDataModels.CodingKeys and conformance SiriInformationDataModels.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    goto LABEL_5;
  }
  uint64_t v18 = a1;
  uint64_t v19 = v6;
  uint64_t v10 = v22;
  if (*(void *)(KeyedDecodingContainer.allKeys.getter() + 16) != 1)
  {
    uint64_t v12 = v10;
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v15 = &type metadata for SiriInformationDataModels;
    long long v9 = v8;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, enum case for DecodingError.typeMismatch(_:), v13);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v12);
    a1 = v18;
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v9;
  }
  lazy protocol witness table accessor for type SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys and conformance SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v11 = v19;
  lazy protocol witness table accessor for type KnowledgeFallbackConfirmationPayload and conformance KnowledgeFallbackConfirmationPayload();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
  long long v9 = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return v9;
}

unint64_t lazy protocol witness table accessor for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys);
  }
  return result;
}

uint64_t specialized KnowledgeFallbackConfirmationPayload.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C6562614C736579 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6562614C6F6ELL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized KnowledgeFallbackConfirmationPayload.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<KnowledgeFallbackConfirmationPayload.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type KnowledgeFallbackConfirmationPayload.CodingKeys and conformance KnowledgeFallbackConfirmationPayload.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t outlined init with copy of OutputPublisherAsync(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of PatternFlowProviding?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PatternFlowProviding?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with take of PatternFlowProviding(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

unint64_t lazy protocol witness table accessor for type SiriInformationDataModels and conformance SiriInformationDataModels()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriInformationDataModels and conformance SiriInformationDataModels;
  if (!lazy protocol witness table cache variable for type SiriInformationDataModels and conformance SiriInformationDataModels)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriInformationDataModels and conformance SiriInformationDataModels);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriInformationDataModels and conformance SiriInformationDataModels;
  if (!lazy protocol witness table cache variable for type SiriInformationDataModels and conformance SiriInformationDataModels)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriInformationDataModels and conformance SiriInformationDataModels);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriInformationDataModels and conformance SiriInformationDataModels;
  if (!lazy protocol witness table cache variable for type SiriInformationDataModels and conformance SiriInformationDataModels)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriInformationDataModels and conformance SiriInformationDataModels);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SiriInformationDataModels(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for SiriInformationDataModels()
{
  return &type metadata for SiriInformationDataModels;
}

uint64_t destroy for SiriInformationDataModels()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SiriInformationDataModels(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SiriInformationDataModels(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for SiriInformationDataModels(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriInformationDataModels(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriInformationDataModels(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KnowledgeFallbackConfirmationPayload()
{
  return &type metadata for KnowledgeFallbackConfirmationPayload;
}

void type metadata accessor for FLOWSchemaFLOWInformationPluginEventType(uint64_t a1)
{
}

void type metadata accessor for PatternType(uint64_t a1)
{
}

void type metadata accessor for FLOWSchemaFLOWInformationPluginEventType(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for KnowledgeFallbackConfirmationPayload.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KnowledgeFallbackConfirmationPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x7678);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for KnowledgeFallbackConfirmationPayload.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for KnowledgeFallbackConfirmationPayload.CodingKeys(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

void *type metadata accessor for KnowledgeFallbackConfirmationPayload.CodingKeys()
{
  return &unk_C83D8;
}

void *type metadata accessor for SiriInformationDataModels.CodingKeys()
{
  return &unk_C8468;
}

uint64_t getEnumTagSinglePayload for SiriInformationDataModels.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for SiriInformationDataModels.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x77CCLL);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for SiriInformationDataModels.KnowledgeFallbackConfirmationCodingKeys()
{
  return &unk_C84F8;
}

void InformationRoutingFlow.__allocating_init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)()
{
}

uint64_t Parse.DirectInvocation.get<A>(protoMessage:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = Parse.DirectInvocation.userData.getter();
  if (!v9) {
    goto LABEL_11;
  }
  uint64_t v10 = v9;
  if (!*(void *)(v9 + 16))
  {
    long long v21 = 0u;
    long long v22 = 0u;
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v12 & 1) == 0)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of Any(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v22 + 1))
  {
LABEL_10:
    outlined destroy of Any?((uint64_t)&v21);
    goto LABEL_11;
  }
  if (swift_dynamicCast())
  {
    uint64_t v14 = v24;
    unint64_t v13 = v25;
    uint64_t v23 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    outlined copy of Data._Representation(v24, v25);
    BinaryDecodingOptions.init()();
    uint64_t v15 = 0;
    Message.init(serializedData:extensions:partial:options:)();
    outlined consume of Data._Representation(v14, v13);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, v15, 1, a3);
  }
LABEL_11:
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v17, v18, "Parse.DirectInvocation: No '%s' key found in DI Payload.", v19, 0xCu);
    uint64_t v15 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v15 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, v15, 1, a3);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  int v2 = *a2;
  *int v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      outlined destroy of AnyHashable((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

id SAUIVisualResponseShowNextSnippet.init(from:)(uint64_t a1, unint64_t a2)
{
  unint64_t v16 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [objc_allocWithZone((Class)SAUIVisualResponseSnippet) init];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v7 setModelData:isa];

  id v9 = v7;
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, v3);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setAceId:v11];

  id v12 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  [v12 setVisualResponse:v9];
  UUID.init()();
  UUID.uuidString.getter();
  v10(v6, v3);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 setAceId:v13];
  outlined consume of Data._Representation(a1, v16);

  return v12;
}

void *InformationRoutingFlow.ifFlowFlowHandlerID.unsafeMutableAddressor()
{
  return &static InformationRoutingFlow.ifFlowFlowHandlerID;
}

unint64_t static InformationRoutingFlow.ifFlowFlowHandlerID.getter()
{
  return 0xD000000000000016;
}

unint64_t InformationRoutingFlow.Invocations.rawValue.getter(char a1)
{
  unint64_t result = 0xD00000000000003DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000040;
      break;
    case 2:
      unint64_t result = 0xD00000000000003ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000045;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InformationRoutingFlow.Invocations(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = InformationRoutingFlow.Invocations.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == InformationRoutingFlow.Invocations.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InformationRoutingFlow.Invocations()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  InformationRoutingFlow.Invocations.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InformationRoutingFlow.Invocations()
{
  return specialized RawRepresentable<>.hash(into:)();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InformationRoutingFlow.Invocations()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  InformationRoutingFlow.Invocations.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance InformationRoutingFlow.Invocations@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized InformationRoutingFlow.Invocations.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InformationRoutingFlow.Invocations@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = InformationRoutingFlow.Invocations.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

InformationFlowPlugin::KnowledgeConfirmationResponseProvider (__swiftcall *InformationRoutingFlow.exitValue.modify())(InformationFlowPlugin::KnowledgeConfirmationResponse_optional)
{
  return KnowledgeConfirmationResponseProvider.init(_:);
}

uint64_t SportsPersonalizationEntryPoint.inferenceApi.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + 16, a1);
}

uint64_t InformationRoutingFlow.informationViewFactory.getter()
{
  return swift_retain();
}

uint64_t key path setter for InformationRoutingFlow.state : InformationRoutingFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InformationRoutingFlow.State(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of InformationRoutingFlow.State(a1, (uint64_t)v6, type metadata accessor for InformationRoutingFlow.State);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 192))(v6);
}

uint64_t InformationRoutingFlow.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_state;
  swift_beginAccess();
  return outlined init with copy of InformationRoutingFlow.State(v3, a1, type metadata accessor for InformationRoutingFlow.State);
}

uint64_t InformationRoutingFlow.state.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_state;
  swift_beginAccess();
  outlined assign with take of InformationRoutingFlow.State(a1, v3);
  return swift_endAccess();
}

uint64_t (*InformationRoutingFlow.state.modify())()
{
  return InformationRoutingFlow.state.modify;
}

uint64_t InformationRoutingFlow.isSiriLocationServicesPromptingEnabled.getter()
{
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_isSiriLocationServicesPromptingEnabled);
}

uint64_t InformationRoutingFlow.knowledgeFallbackHelper.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper, a1);
}

uint64_t InformationRoutingFlow.__allocating_init(result:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  uint64_t v10 = specialized InformationRoutingFlow.__allocating_init(result:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(a1, a2, v9, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v10;
}

uint64_t InformationRoutingFlow.__allocating_init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(a4 + 32);
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1(a4, v9);
  __chkstk_darwin(v11);
  NSString v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  uint64_t v15 = specialized InformationRoutingFlow.__allocating_init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(a1, a2, a3, (uint64_t)v13, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1(a4);
  return v15;
}

uint64_t InformationRoutingFlow.execute()(uint64_t a1)
{
  v2[94] = v1;
  v2[93] = a1;
  uint64_t v3 = type metadata accessor for FlowUnhandledReason();
  v2[95] = v3;
  v2[96] = *(void *)(v3 - 8);
  v2[97] = swift_task_alloc();
  type metadata accessor for Input();
  v2[98] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for PluginAction();
  v2[99] = v4;
  v2[100] = *(void *)(v4 - 8);
  v2[101] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USOParse?);
  v2[102] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NLRouterParse.InputCandidate();
  v2[103] = v5;
  v2[104] = *(void *)(v5 - 8);
  v2[105] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  v2[106] = v6;
  v2[107] = *(void *)(v6 - 8);
  v2[108] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Parse();
  v2[109] = v7;
  v2[110] = *(void *)(v7 - 8);
  v2[111] = swift_task_alloc();
  v2[112] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AjaxMetadata?);
  v2[113] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AjaxMetadata();
  v2[114] = v8;
  v2[115] = *(void *)(v8 - 8);
  v2[116] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  v2[117] = v9;
  v2[118] = *(void *)(v9 - 8);
  v2[119] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for PommesEngagement();
  v2[120] = v10;
  v2[121] = *(void *)(v10 - 8);
  v2[122] = swift_task_alloc();
  v2[123] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Parse.DirectInvocation();
  v2[124] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[125] = v12;
  v2[126] = *(void *)(v12 + 64);
  v2[127] = swift_task_alloc();
  v2[128] = swift_task_alloc();
  v2[129] = swift_task_alloc();
  v2[130] = swift_task_alloc();
  v2[131] = swift_task_alloc();
  v2[132] = swift_task_alloc();
  v2[133] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  v2[134] = swift_task_alloc();
  v2[135] = swift_task_alloc();
  type metadata accessor for CATOption();
  v2[136] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Parse.PegasusResult();
  v2[137] = v13;
  v2[138] = *(void *)(v13 - 8);
  v2[139] = swift_task_alloc();
  v2[140] = swift_task_alloc();
  v2[141] = type metadata accessor for InformationRoutingFlow.State(0);
  v2[142] = swift_task_alloc();
  return _swift_task_switch(InformationRoutingFlow.execute(), 0, 0);
}

uint64_t InformationRoutingFlow.execute()()
{
  uint64_t v242 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  v212 = (void *)(v0 + 16);
  v218 = (long long *)(v0 + 56);
  v221 = (long long *)(v0 + 96);
  uint64_t v223 = v0 + 136;
  v209 = (long long *)(v0 + 176);
  uint64_t v210 = v0 + 216;
  uint64_t v230 = v0 + 256;
  v213 = (long long *)(v0 + 376);
  v214 = (long long *)(v0 + 336);
  v211 = (_OWORD *)(v0 + 592);
  uint64_t v227 = v0 + 720;
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  char v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "InformationRoutingFlow.execute", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0 + 296;
  uint64_t v6 = (_OWORD *)(v0 + 496);
  uint64_t v7 = (_OWORD *)(v0 + 528);
  uint64_t v8 = (uint64_t *)(v0 + 672);
  v238 = (void *)v0;
  uint64_t v9 = *(void *)(v0 + 752);

  (*(void (**)(void))(*(void *)v9 + 184))();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(void, void, void))(*(void *)(v0 + 1104) + 32))(*(void *)(v0 + 1120), *(void *)(v0 + 1136), *(void *)(v0 + 1096));
      unint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v27 = 0;
        _os_log_impl(&dword_0, v25, v26, "InformationRoutingFlow: renderPegasus", v27, 2u);
        swift_slowDealloc();
      }
      uint64_t v28 = *(void *)(v0 + 1120);
      uint64_t v29 = *(void *)(v0 + 1112);
      uint64_t v216 = v29;
      uint64_t v30 = *(void *)(v0 + 1104);
      uint64_t v31 = v238[137];
      uint64_t v32 = v238[94];

      type metadata accessor for RenderPegasusFlow();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v29, v28, v31);
      outlined init with copy of OutputPublisherAsync(v32 + 16, v230);
      uint64_t v34 = *(void *)(v32 + 96);
      uint64_t v33 = *(void *)(v32 + 104);
      outlined init with copy of OutputPublisherAsync(v32 + 56, v223);
      swift_retain();
      swift_retain();
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      static Device.current.getter();
      type metadata accessor for CommonCATs();
      static CATOption.defaultMode.getter();
      uint64_t v35 = CATWrapper.__allocating_init(options:globals:)();
      type metadata accessor for InformationViewFactory();
      v36 = (void *)swift_allocObject();
      id v37 = [self sharedPreferences];
      uint64_t v38 = type metadata accessor for PommesServerFallbackPreferences();
      swift_allocObject();
      uint64_t v39 = PommesServerFallbackPreferences.init(_:)();
      v36[11] = v38;
      v36[12] = &protocol witness table for PommesServerFallbackPreferences;
      v36[8] = v39;
      outlined init with take of PatternFlowProviding(v218, (uint64_t)(v36 + 3));
      v36[2] = v35;
      type metadata accessor for RenderComponentFlowFactory();
      uint64_t v40 = swift_allocObject();
      uint64_t v41 = outlined init with take of PatternFlowProviding(v221, v40 + 16);
      *(void *)(v40 + 56) = v36;
      default argument 5 of RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(v41);
      uint64_t v42 = specialized RenderPegasusFlow.__allocating_init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)(v216, v230, v34, v33, v40, v223);
      swift_release();
      uint64_t v10 = v238;
      swift_release();
      v238[92] = v42;
      lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(&lazy protocol witness table cache variable for type RenderPegasusFlow and conformance RenderPegasusFlow, (void (*)(uint64_t))type metadata accessor for RenderPegasusFlow);
      static ExecuteResponse.complete<A>(next:)();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v31);
      goto LABEL_15;
    case 2u:
      uint64_t v10 = (void *)v0;
      v43 = *(uint64_t **)(v0 + 1136);
      uint64_t v44 = *(void *)(v0 + 1080);
      uint64_t v45 = *v43;
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PommesResponse, IdentifiedUser?));
      outlined init with take of Flow?((uint64_t)v43 + *(int *)(v46 + 48), v44, &demangling cache variable for type metadata for IdentifiedUser?);
      v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v49 = 0;
        _os_log_impl(&dword_0, v47, v48, "InformationRoutingFlow: runPommesRequestFlow", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v50 = v238[135];
      uint64_t v51 = v238[134];
      uint64_t v52 = v238[94];

      outlined init with copy of IdentifiedUser?(v50, v51, &demangling cache variable for type metadata for IdentifiedUser?);
      outlined init with copy of OutputPublisherAsync(v52 + 16, (uint64_t)v213);
      type metadata accessor for RunPommesRequestFlow();
      uint64_t v53 = swift_allocObject();
      *(void *)(v53 + 16) = v45;
      outlined init with take of Flow?(v51, v53 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_identifiedUser, &demangling cache variable for type metadata for IdentifiedUser?);
      outlined init with take of PatternFlowProviding(v213, v53 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher);
      uint64_t v54 = v53 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state;
      *(_OWORD *)uint64_t v54 = 0u;
      *(_OWORD *)(v54 + 16) = 0u;
      *(void *)(v54 + 32) = 0;
      *(unsigned char *)(v54 + 40) = 2;
      v238[86] = v53;
      lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy((unint64_t *)&lazy protocol witness table cache variable for type RunPommesRequestFlow and conformance RunPommesRequestFlow, (void (*)(uint64_t))type metadata accessor for RunPommesRequestFlow);
      static ExecuteResponse.complete<A>(next:)();
      outlined destroy of Any?(v50, &demangling cache variable for type metadata for IdentifiedUser?);
      swift_release();
      goto LABEL_84;
    case 3u:
      uint64_t v10 = (void *)v0;
      (*(void (**)(void, void, void))(*(void *)(v0 + 1000) + 32))(*(void *)(v0 + 1040), *(void *)(v0 + 1136), *(void *)(v0 + 992));
      v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v55, v56))
      {
        v57 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v57 = 0;
        _os_log_impl(&dword_0, v55, v56, "InformationRoutingFlow: directInvocation", v57, 2u);
        swift_slowDealloc();
      }
      uint64_t v58 = *(void *)(v0 + 1040);
      uint64_t v59 = *(void *)(v0 + 1000);
      uint64_t v60 = v238[124];

      specialized FlowTrampolining.makeResponse(for:)(v58, (uint64_t)closure #1 in FlowTrampolining.makeResponse(for:)partial apply, (uint64_t)closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)specialized partial apply);
      goto LABEL_70;
    case 4u:
      (*(void (**)(void, void, void))(*(void *)(v0 + 1000) + 32))(*(void *)(v0 + 1032), *(void *)(v0 + 1136), *(void *)(v0 + 992));
      v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v61, v62))
      {
        v63 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v63 = 0;
        _os_log_impl(&dword_0, v61, v62, "InformationRoutingFlow: TapEngagement DI", v63, 2u);
        swift_slowDealloc();
      }
      uint64_t v64 = *(void *)(v0 + 1048);
      uint64_t v65 = *(void *)(v0 + 1032);
      uint64_t v66 = *(void *)(v0 + 1000);
      uint64_t v67 = *(void *)(v0 + 992);
      uint64_t v68 = *(void *)(v0 + 984);
      uint64_t v69 = *(void *)(v0 + 976);
      uint64_t v70 = *(void *)(v0 + 968);
      uint64_t v71 = v238[120];

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v64, v65, v67);
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      PommesEngagement.init()();
      type metadata accessor for PatternExecutor();
      uint64_t v72 = swift_allocObject();
      type metadata accessor for TapEngagementHandlingFlow();
      uint64_t v73 = swift_allocObject();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v69, v68, v71);
      uint64_t v74 = specialized TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)(v64, &v239, v69, v72, v73);
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v68, v71);
      if (v74)
      {
        uint64_t v75 = v238[129];
        uint64_t v76 = v238[125];
        uint64_t v77 = v238[124];
        v238[82] = v74;
        lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(&lazy protocol witness table cache variable for type TapEngagementHandlingFlow and conformance TapEngagementHandlingFlow, (void (*)(uint64_t))type metadata accessor for TapEngagementHandlingFlow);
        Flow.eraseToAnyFlow()();
        static ExecuteResponse.complete(next:)();
        swift_release();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
        uint64_t v10 = v238;
      }
      else
      {
        v153 = Logger.logObject.getter();
        os_log_type_t v154 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v153, v154))
        {
          v155 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v155 = 0;
          _os_log_impl(&dword_0, v153, v154, "InformationRoutingFlow: Failed to build TapEngagement Handling flow.", v155, 2u);
          swift_slowDealloc();
        }
        uint64_t v10 = v238;
        uint64_t v58 = v238[129];
        uint64_t v59 = v238[125];
        uint64_t v60 = v238[124];

        static ExecuteResponse.complete()();
LABEL_70:
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
      }
      goto LABEL_84;
    case 5u:
      (*(void (**)(void, void, void))(*(void *)(v0 + 1000) + 32))(*(void *)(v0 + 1024), *(void *)(v0 + 1136), *(void *)(v0 + 992));
      uint64_t v78 = Parse.DirectInvocation.userData.getter();
      if (v78)
      {
        uint64_t v79 = v78;
        if (*(void *)(v78 + 16)
          && (unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(0x7972657571, 0xE500000000000000), (v81 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v79 + 56) + 32 * v80, (uint64_t)v6);
          swift_bridgeObjectRelease();
          if (*(void *)(v0 + 520))
          {
            outlined init with take of Any(v6, v211);
            outlined init with copy of Any((uint64_t)v211, v0 + 560);
            uint64_t v82 = String.init<A>(describing:)();
            unint64_t v84 = v83;
            swift_bridgeObjectRetain_n();
            v85 = Logger.logObject.getter();
            os_log_type_t v86 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v85, v86))
            {
              v87 = (uint8_t *)swift_slowAlloc();
              *(void *)&long long v239 = swift_slowAlloc();
              *(_DWORD *)v87 = 136315138;
              swift_bridgeObjectRetain();
              *(void *)(v0 + 648) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v84, (uint64_t *)&v239);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_0, v85, v86, "InformationRoutingFlow: WebSearchHandoff DI for query: %s", v87, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_bridgeObjectRelease_n();
            }

            static OutputPublisherFactory.makeOutputPublisherAsync()();
            static Device.current.getter();
            type metadata accessor for CommonCATs();
            static CATOption.defaultMode.getter();
            uint64_t v197 = CATWrapper.__allocating_init(options:globals:)();
            type metadata accessor for InformationViewFactory();
            v198 = (void *)swift_allocObject();
            id v199 = [self sharedPreferences];
            uint64_t v200 = type metadata accessor for PommesServerFallbackPreferences();
            swift_allocObject();
            uint64_t v201 = PommesServerFallbackPreferences.init(_:)();
            v198[11] = v200;
            v198[12] = &protocol witness table for PommesServerFallbackPreferences;
            v198[8] = v201;
            outlined init with take of PatternFlowProviding((long long *)(v0 + 416), (uint64_t)(v198 + 3));
            v198[2] = v197;
            type metadata accessor for RenderComponentFlowFactory();
            uint64_t v202 = swift_allocObject();
            outlined init with take of PatternFlowProviding((long long *)(v0 + 456), v202 + 16);
            *(void *)(v202 + 56) = v198;
            uint64_t v203 = type metadata accessor for PommesSearchClient();
            swift_allocObject();
            uint64_t v204 = PommesSearchClient.init()();
            if (v204)
            {
              *((void *)&v240 + 1) = v203;
              v241 = &protocol witness table for PommesSearchClient;
              *(void *)&long long v239 = v204;
            }
            else
            {
              v241 = 0;
              long long v239 = 0u;
              long long v240 = 0u;
            }
            uint64_t v205 = *(void *)(v0 + 1024);
            uint64_t v206 = *(void *)(v0 + 1000);
            uint64_t v207 = v238[124];
            type metadata accessor for PushOffQueryFlow();
            swift_allocObject();
            uint64_t v208 = specialized PushOffQueryFlow.init(query:renderComponentFlowFactory:pommesSearchClient:)(v82, v84, v202, (uint64_t)&v239);
            swift_release();
            v238[80] = v208;
            lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(&lazy protocol witness table cache variable for type PushOffQueryFlow and conformance PushOffQueryFlow, (void (*)(uint64_t))type metadata accessor for PushOffQueryFlow);
            uint64_t v10 = v238;
            static ExecuteResponse.complete<A>(next:)();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v211);
            (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v205, v207);
LABEL_15:
            swift_release();
            goto LABEL_84;
          }
        }
        else
        {
          *uint64_t v6 = 0u;
          *(_OWORD *)(v0 + 512) = 0u;
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        *uint64_t v6 = 0u;
        *(_OWORD *)(v0 + 512) = 0u;
      }
      outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for Any?);
      v156 = Logger.logObject.getter();
      os_log_type_t v157 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v156, v157))
      {
        v158 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v158 = 0;
        _os_log_impl(&dword_0, v156, v157, "InformationRoutingFlow: WebSearchHandoff DI had no query", v158, 2u);
        swift_slowDealloc();
      }
      uint64_t v159 = *(void *)(v0 + 1024);
      uint64_t v160 = *(void *)(v0 + 1000);
      uint64_t v161 = *(void *)(v0 + 992);
      uint64_t v162 = *(void *)(v0 + 952);
      uint64_t v163 = *(void *)(v0 + 944);
      uint64_t v164 = *(void *)(v0 + 936);
      uint64_t v165 = *(void *)(v0 + 752);

      *(void *)(v0 + 728) = v165;
      type metadata accessor for PerformanceUtil();
      static PerformanceUtil.shared.getter();
      v166 = (void *)swift_task_alloc();
      v166[2] = v0 + 728;
      v166[3] = 0xD000000000000037;
      v166[4] = 0x80000000000ADDC0;
      Date.init()();
      type metadata accessor for ExecuteResponse();
      dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v162, v164);
      uint64_t v10 = (void *)v0;
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v159, v161);
      goto LABEL_84;
    case 6u:
      uint64_t v10 = (void *)v0;
      v88 = *(uint64_t **)(v0 + 1136);
      uint64_t v90 = *v88;
      unint64_t v89 = v88[1];
      swift_bridgeObjectRetain_n();
      v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v91, v92))
      {
        v93 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v239 = swift_slowAlloc();
        *(_DWORD *)v93 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 712) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v89, (uint64_t *)&v239);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v91, v92, "InformationRoutingFlow: knowledge fallback for query: %s", v93, 0xCu);
        swift_arrayDestroy();
        uint64_t v10 = (void *)v0;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      v137 = (void *)(v10[94] + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper);
      uint64_t v138 = v137[3];
      uint64_t v139 = v137[4];
      __swift_project_boxed_opaque_existential_1(v137, v138);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v139 + 8))(v138, v139))
      {
        uint64_t v140 = v137[3];
        uint64_t v141 = v137[4];
        __swift_project_boxed_opaque_existential_1(v137, v140);
        if ((*(uint64_t (**)(uint64_t, uint64_t))(v141 + 24))(v140, v141))
        {
          uint64_t v142 = v10[115];
          uint64_t v143 = v10[114];
          uint64_t v144 = v10[113];
          AjaxMetadata.init(build:)();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v144, 1, v143) == 1)
          {
            uint64_t v145 = v10[113];
            swift_bridgeObjectRelease();
            outlined destroy of Any?(v145, &demangling cache variable for type metadata for AjaxMetadata?);
            v133 = Logger.logObject.getter();
            os_log_type_t v134 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v133, v134))
            {
              v135 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v135 = 0;
              v136 = "Failed to build AjaxMetadata with prescribed tool";
LABEL_53:
              _os_log_impl(&dword_0, v133, v134, v136, v135, 2u);
              swift_slowDealloc();
            }
LABEL_54:

            static ExecuteResponse.complete()();
          }
          else
          {
            uint64_t v185 = v10[116];
            uint64_t v186 = v10[115];
            uint64_t v187 = v10[114];
            uint64_t v188 = v10[113];
            uint64_t v222 = v10[112];
            uint64_t v226 = v10[111];
            uint64_t v189 = v238[110];
            uint64_t v224 = v238[109];
            uint64_t v190 = v238[108];
            uint64_t v191 = v238[107];
            uint64_t v215 = v238[106];
            v192 = (uint64_t *)v238[105];
            uint64_t v193 = v238[104];
            uint64_t v217 = v238[103];
            uint64_t v220 = v238[102];
            uint64_t v233 = v238[100];
            uint64_t v237 = v238[99];
            uint64_t v229 = v238[101];
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v186 + 32))(v185, v188, v187);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v186 + 16))(v190, v185, v187);
            (*(void (**)(uint64_t, void, uint64_t))(v191 + 104))(v190, enum case for NLRoutingDecisionMessage.RoutingDecision.ajax(_:), v215);
            uint64_t *v192 = v90;
            v192[1] = v89;
            (*(void (**)(uint64_t *, void, uint64_t))(v193 + 104))(v192, enum case for NLRouterParse.InputCandidate.text(_:), v217);
            uint64_t v194 = type metadata accessor for USOParse();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v194 - 8) + 56))(v220, 1, 1, v194);
            NLRouterParse.init(nlRoutingDecision:input:usoParse:pommesResponse:)();
            (*(void (**)(uint64_t, void, uint64_t))(v189 + 104))(v222, enum case for Parse.nlRouter(_:), v224);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v189 + 16))(v226, v222, v224);
            Input.init(parse:)();
            PluginAction.init(flowHandlerId:input:)();
            static ExecuteResponse.redirect(nextPluginAction:)();
            (*(void (**)(uint64_t, uint64_t))(v233 + 8))(v229, v237);
            (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v222, v224);
            uint64_t v10 = v238;
            (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v185, v187);
          }
        }
        else
        {
          uint64_t v181 = v10[97];
          uint64_t v182 = v10[96];
          uint64_t v183 = v10[95];
          swift_bridgeObjectRelease();
          static PrescribedTool.generateKnowledgeResponseIntentTool.getter();
          uint64_t v184 = type metadata accessor for PrescribedTool();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v184 - 8) + 56))(v181, 0, 1, v184);
          (*(void (**)(uint64_t, void, uint64_t))(v182 + 104))(v181, enum case for FlowUnhandledReason.needsIntelligenceFlowFallback(_:), v183);
          static ExecuteResponse.unhandled(reason:)();
          (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v181, v183);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        static ExecuteResponse.complete()();
      }
      goto LABEL_84;
    case 7u:
      uint64_t v10 = (void *)v0;
      outlined init with take of PatternFlowProviding(*(long long **)(v0 + 1136), (uint64_t)v212);
      v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v94, v95))
      {
        v96 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v96 = 0;
        _os_log_impl(&dword_0, v94, v95, "InformationRoutingFlow: completeToNextFlow", v96, 2u);
        swift_slowDealloc();
      }

      __swift_project_boxed_opaque_existential_1(v212, *(void *)(v0 + 40));
      static ExecuteResponse.complete<A>(next:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v212);
      goto LABEL_84;
    case 8u:
      uint64_t v10 = (void *)v0;
      v97 = *(uint64_t **)(v0 + 1136);
      uint64_t v98 = *v97;
      uint64_t v99 = v97[1];
      uint64_t v100 = v97[2];
      v101 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v101, v102))
      {
        v103 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v103 = 0;
        _os_log_impl(&dword_0, v101, v102, "InformationRoutingFlow: doWebSearchPunchout", v103, 2u);
        swift_slowDealloc();
      }

      if (v100)
      {
        v238[40] = type metadata accessor for RenderPegasusFlow();
        v238[41] = lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(&lazy protocol witness table cache variable for type RenderPegasusFlow and conformance RenderPegasusFlow, (void (*)(uint64_t))type metadata accessor for RenderPegasusFlow);
        v238[37] = v100;
      }
      else
      {
        *(void *)(v5 + 32) = 0;
        *(_OWORD *)uint64_t v5 = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
      }
      uint64_t v167 = v238[94];
      outlined init with copy of OutputPublisherAsync(v167 + 16, (uint64_t)v214);
      uint64_t v168 = *(void *)(v167 + 96);
      type metadata accessor for WebSearchPunchoutFlow();
      uint64_t v169 = swift_allocObject();
      *(void *)(v169 + 72) = v98;
      *(void *)(v169 + 80) = v99;
      outlined init with take of Flow?(v5, v169 + 88, &demangling cache variable for type metadata for Flow?);
      *(unsigned char *)(v169 + 64) = 0;
      outlined init with take of PatternFlowProviding(v214, v169 + 16);
      *(void *)(v169 + 56) = v168;
      v238[85] = v169;
      lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy((unint64_t *)&lazy protocol witness table cache variable for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow, (void (*)(uint64_t))type metadata accessor for WebSearchPunchoutFlow);
      swift_retain();
      static ExecuteResponse.complete<A>(next:)();
      swift_release();
      goto LABEL_84;
    case 9u:
      (*(void (**)(void, void, void))(*(void *)(v0 + 1000) + 32))(*(void *)(v0 + 1016), *(void *)(v0 + 1136), *(void *)(v0 + 992));
      v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v104, v105))
      {
        v106 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v106 = 0;
        _os_log_impl(&dword_0, v104, v105, "InformationRoutingFlow: knowledgeConfirmation", v106, 2u);
        swift_slowDealloc();
      }

      uint64_t v107 = Parse.DirectInvocation.userData.getter();
      if (!v107)
      {
        *uint64_t v7 = 0u;
        *(_OWORD *)(v0 + 544) = 0u;
        goto LABEL_78;
      }
      uint64_t v108 = v107;
      if (!*(void *)(v107 + 16)
        || (unint64_t v109 = specialized __RawDictionaryStorage.find<A>(_:)(0x7972657571, 0xE500000000000000), (v110 & 1) == 0))
      {
        *uint64_t v7 = 0u;
        *(_OWORD *)(v0 + 544) = 0u;
        swift_bridgeObjectRelease();
        goto LABEL_78;
      }
      outlined init with copy of Any(*(void *)(v108 + 56) + 32 * v109, v0 + 528);
      swift_bridgeObjectRelease();
      if (!*(void *)(v0 + 552))
      {
LABEL_78:
        outlined destroy of Any?(v0 + 528, &demangling cache variable for type metadata for Any?);
        goto LABEL_79;
      }
      if (swift_dynamicCast())
      {
        uint64_t v111 = *(void *)(v0 + 1000);
        uint64_t v231 = v238[124];
        uint64_t v234 = v238[127];
        uint64_t v112 = v238[94];
        uint64_t v113 = v238[78];
        uint64_t v114 = v238[79];
        outlined init with copy of OutputPublisherAsync(v112 + 56, (uint64_t)v209);
        uint64_t v115 = type metadata accessor for ResponseFactory();
        swift_allocObject();
        uint64_t v116 = ResponseFactory.init()();
        type metadata accessor for KnowledgeFallbackConfirmationStrategy();
        uint64_t v117 = swift_allocObject();
        *(void *)(v117 + 56) = v115;
        *(void *)(v117 + 64) = &protocol witness table for ResponseFactory;
        *(void *)(v117 + 32) = v116;
        *(void *)(v117 + 16) = 0;
        *(unsigned char *)(v117 + 24) = 0;
        outlined init with take of PatternFlowProviding(v209, v117 + 72);
        outlined init with copy of OutputPublisherAsync(v112 + 16, v210);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlowAsync<(), KnowledgeConfirmationResponseProvider>);
        swift_allocObject();
        lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(&lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy, (void (*)(uint64_t))type metadata accessor for KnowledgeFallbackConfirmationStrategy);
        v238[88] = PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)();
        v118 = (void *)swift_allocObject();
        v118[2] = v112;
        v118[3] = v113;
        v118[4] = v114;
        lazy protocol witness table accessor for type PromptForConfirmationFlowAsync<(), KnowledgeConfirmationResponseProvider> and conformance PromptForConfirmationFlowAsync<A, B>();
        swift_retain();
        uint64_t v10 = v238;
        static ExecuteResponse.ongoing<A>(next:childCompletion:)();
        swift_release();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v234, v231);
        goto LABEL_84;
      }
LABEL_79:
      v170 = Logger.logObject.getter();
      os_log_type_t v171 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v170, v171))
      {
        v172 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v172 = 0;
        _os_log_impl(&dword_0, v170, v171, "KnowledgeConfirmation DirectInvocation missing query", v172, 2u);
        swift_slowDealloc();
      }
      uint64_t v173 = *(void *)(v0 + 1016);
      uint64_t v174 = *(void *)(v0 + 1000);
      uint64_t v175 = v238[124];
      uint64_t v176 = v238[119];
      uint64_t v177 = v238[118];
      uint64_t v178 = v238[117];
      uint64_t v179 = v238[94];

      v238[90] = v179;
      type metadata accessor for PerformanceUtil();
      static PerformanceUtil.shared.getter();
      v180 = (void *)swift_task_alloc();
      v180[2] = v227;
      v180[3] = 0xD000000000000045;
      v180[4] = 0x80000000000ADD20;
      Date.init()();
      type metadata accessor for ExecuteResponse();
      dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v176, v178);
      uint64_t v10 = v238;
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v173, v175);
LABEL_84:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v195 = (uint64_t (*)(void))v10[1];
      return v195();
    case 0xAu:
      v119 = (void *)v0;
      uint64_t v120 = *(void *)(v0 + 1064);
      uint64_t v121 = *(void *)(v0 + 1056);
      uint64_t v122 = *(void *)(v0 + 1000);
      uint64_t v123 = v238[124];
      v232 = (void (**)(uint64_t, uint64_t, uint64_t))(v238[125] + 32);
      v228 = *v232;
      (*v232)(v238[133], v238[142], v123);
      v225 = *(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 16);
      v225(v121, v120, v123);
      v124 = Logger.logObject.getter();
      os_log_type_t v125 = static os_log_type_t.debug.getter();
      BOOL v126 = os_log_type_enabled(v124, v125);
      uint64_t v127 = v238[132];
      uint64_t v128 = v238[125];
      if (v126)
      {
        uint64_t v235 = v238[124];
        v129 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v239 = swift_slowAlloc();
        *(_DWORD *)v129 = 136315138;
        uint64_t v130 = Parse.DirectInvocation.identifier.getter();
        *uint64_t v8 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v131, (uint64_t *)&v239);
        v119 = v238;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v132 = v235;
        v236 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
        v236(v127, v132);
        _os_log_impl(&dword_0, v124, v125, "rewritting directInvocation to pegasus %s", v129, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v236 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
        v236(v127, v238[124]);
      }

      uint64_t v146 = v119[133];
      uint64_t v147 = v119[131];
      uint64_t v219 = v119[125];
      uint64_t v148 = v119[124];
      uint64_t v149 = v119[94];
      v225(v147, v146, v148);
      type metadata accessor for ShimOverrideFlow(0);
      uint64_t v150 = swift_allocObject();
      *(void *)(v150 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue) = 0;
      type metadata accessor for ShimOverrideFlow.ExitValue(0);
      swift_storeEnumTagMultiPayload();
      v228(v150 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_parse, v147, v148);
      v238[83] = v150;
      v225(v147, v146, v148);
      unint64_t v151 = (*(unsigned __int8 *)(v219 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v219 + 80);
      uint64_t v152 = swift_allocObject();
      *(void *)(v152 + 16) = v149;
      v228(v152 + v151, v147, v148);
      lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(&lazy protocol witness table cache variable for type ShimOverrideFlow and conformance ShimOverrideFlow, (void (*)(uint64_t))type metadata accessor for ShimOverrideFlow);
      swift_retain();
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
      uint64_t v10 = v238;
      swift_release();
      swift_release();
      v236(v146, v148);
      goto LABEL_84;
    case 0xBu:
      v133 = Logger.logObject.getter();
      os_log_type_t v134 = static os_log_type_t.debug.getter();
      uint64_t v10 = (void *)v0;
      if (!os_log_type_enabled(v133, v134)) {
        goto LABEL_54;
      }
      v135 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v135 = 0;
      v136 = "InformationRoutingFlow: complete";
      goto LABEL_53;
    default:
      uint64_t v10 = (void *)v0;
      uint64_t v11 = *(void *)(v0 + 1136);
      uint64_t v12 = *(void **)v11;
      int v13 = *(unsigned __int8 *)(v11 + 8);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        unint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v16 = 0;
        _os_log_impl(&dword_0, v14, v15, "InformationRoutingFlow: renderPommes", v16, 2u);
        swift_slowDealloc();
      }

      if (InformationRoutingFlow.shouldPromptLocation(with:locationGuardFlowResult:)((uint64_t)v12, v13))
      {
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v19 = 0;
          _os_log_impl(&dword_0, v17, v18, "InformationRoutingFlow: location guard flow", v19, 2u);
          swift_slowDealloc();
        }
        uint64_t v20 = *(void *)(v0 + 752);

        specialized InformationRoutingFlow.needsPreciseLocation(with:)();
        type metadata accessor for SiriLocationAccessGuardFlow();
        *((void *)&v240 + 1) = &type metadata for OverrideGuardFlowStrategy;
        v241 = (void *)lazy protocol witness table accessor for type OverrideGuardFlowStrategy and conformance OverrideGuardFlowStrategy();
        *(void *)&long long v239 = v12;
        id v21 = v12;
        uint64_t v22 = SiriLocationAccessGuardFlow.__allocating_init(needsPreciseLocation:strategy:)();
        *(void *)(v0 + 696) = v22;
        uint64_t v23 = (void *)swift_allocObject();
        v23[2] = v20;
        v23[3] = v21;
        v23[4] = v22;
        id v24 = v21;
        swift_retain();
        swift_retain();
        static ExecuteResponse.ongoing<A>(next:childCompletion:)();

        swift_release();
        swift_release();
      }
      else
      {
        InformationRoutingFlow.renderPommesFlow(_:)(v12, *(void *)(v0 + 744));
      }
      goto LABEL_84;
  }
}

uint64_t closure #1 in InformationRoutingFlow.execute()(uint64_t a1, uint64_t a2, void (*a3)(char *, char *, uint64_t))
{
  v43 = a3;
  uint64_t v5 = type metadata accessor for Parse.PegasusResult();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v39 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t v44 = type metadata accessor for InformationRoutingFlow.State(0);
  __chkstk_darwin(v44);
  unint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ShimOverrideFlow.ExitValue(0);
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t *)((char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of InformationRoutingFlow.State(a1, (uint64_t)v19, type metadata accessor for ShimOverrideFlow.ExitValue);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v19;
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.information);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v45 = v20;
      uint64_t v46 = v25;
      *(_DWORD *)id v24 = 136315138;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
      uint64_t v26 = String.init<A>(describing:)();
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v22, v23, "Maps shim failed with error: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v36 = type metadata accessor for Parse.DirectInvocation();
    (*(void (**)(char *, void, uint64_t))(*(void *)(v36 - 8) + 16))(v16, v43, v36);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *))(*(void *)a2 + 192))(v16);
    return swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v14, v19, v5);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v42 = v16;
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.information);
    v43 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v43(v12, v14, v5);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v41 = a2;
      uint64_t v32 = (uint8_t *)v31;
      uint64_t v40 = swift_slowAlloc();
      uint64_t v46 = v40;
      *(_DWORD *)uint64_t v32 = 136315138;
      uint64_t v39 = v32 + 4;
      v43(v9, v12, v5);
      uint64_t v33 = String.init<A>(describing:)();
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v6 + 8);
      v35(v12, v5);
      _os_log_impl(&dword_0, v29, v30, "rewritten pegasus request: %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v41;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v35 = *(void (**)(char *, uint64_t))(v6 + 8);
      v35(v12, v5);
    }

    uint64_t v38 = v42;
    v43(v42, v14, v5);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *))(*(void *)a2 + 192))(v38);
    return ((uint64_t (*)(char *, uint64_t))v35)(v14, v5);
  }
}

uint64_t specialized FlowTrampolining.makeResponse(for:)(uint64_t a1)
{
  return specialized FlowTrampolining.makeResponse(for:)(a1, (uint64_t)partial apply for closure #1 in FlowTrampolining.makeResponse(for:), (uint64_t)partial apply for specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:));
}

uint64_t specialized FlowTrampolining.makeResponse(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a3;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  uint64_t v27 = a1;
  Date.init()();
  uint64_t v21 = (const char **)&v26;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyFlow?);
  uint64_t v20 = a2;
  LOBYTE(v19) = 2;
  uint64_t v17 = "makeResponse(for:)";
  uint64_t v18 = 18;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v7 + 8);
  v10(v9, v6);
  if (v28[2])
  {
    swift_retain();
    static ExecuteResponse.complete(next:)();
    return swift_release_n();
  }
  else
  {
    uint64_t v24 = v3;
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.information);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      v23[1] = 0;
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "Unable to locate flow for direct invocation parse/experience. Returning error flow.", v15, 2u);
      swift_slowDealloc();
    }

    v28[0] = v24;
    uint64_t v16 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v16);
    uint64_t v19 = v28;
    Date.init()();
    uint64_t v21 = &v17;
    uint64_t v22 = type metadata accessor for ExecuteResponse();
    uint64_t v20 = v25;
    LOBYTE(v19) = 2;
    uint64_t v17 = "makeResponse(forErrorMessage:)";
    uint64_t v18 = 30;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v10)(v9, v6);
  }
}

uint64_t closure #2 in InformationRoutingFlow.execute()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryType?);
  __chkstk_darwin(v0 - 8);
  char v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrescribedAjaxTool?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = enum case for PrescribedAjaxTool.generateKnowledgeResponseIntentTool(_:);
  uint64_t v7 = type metadata accessor for PrescribedAjaxTool();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 104))(v5, v6, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  AjaxMetadata.Builder.prescribedAjaxTool.setter();
  uint64_t v9 = enum case for QueryType.implicit(_:);
  uint64_t Type = type metadata accessor for QueryType();
  uint64_t v11 = *(void *)(Type - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v2, v9, Type);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v2, 0, 1, Type);
  return AjaxMetadata.Builder.queryType.setter();
}

uint64_t closure #3 in InformationRoutingFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for InformationRoutingFlow.State(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t *)((char *)&v14 - v11);
  *uint64_t v12 = a3;
  v12[1] = a4;
  swift_storeEnumTagMultiPayload();
  *uint64_t v10 = a3;
  v10[1] = a4;
  v10[2] = 0;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain_n();
  InformationRoutingFlow.knowledgeFallbackConfirmationCompletion(exitValue:yesState:noState:isEnablement:)(a1, (uint64_t)v12, (uint64_t)v10, 0);
  outlined destroy of InformationRoutingFlow.State((uint64_t)v10, type metadata accessor for InformationRoutingFlow.State);
  return outlined destroy of InformationRoutingFlow.State((uint64_t)v12, type metadata accessor for InformationRoutingFlow.State);
}

uint64_t InformationRoutingFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t closure #1 in InformationRoutingFlow.renderGuardFlow(_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationAccessFailureReason?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a1;
  dispatch thunk of SiriLocationAccessGuardFlow.failureReason.getter();
  (*(void (**)(uint64_t, uint64_t, char *))(*(void *)a2 + 272))(v9, a3, v8);
  return outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for LocationAccessFailureReason?);
}

uint64_t InformationRoutingFlow.handleGuardFlowResult(with:pommesResponse:failureReason:)(char a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int v75 = a1 & 1;
  uint64_t v7 = type metadata accessor for LocationAccessFailureReason();
  uint64_t v76 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v66 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LocationAccessFailureReason?, LocationAccessFailureReason?));
  __chkstk_darwin(v70);
  uint64_t v73 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for InformationRoutingFlow.State(0);
  __chkstk_darwin(v72);
  uint64_t v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocationAccessFailureReason?);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v74 = (uint64_t)&v63 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v63 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v63 - v21;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.information);
  uint64_t v71 = a3;
  outlined init with copy of IdentifiedUser?(a3, (uint64_t)v22, &demangling cache variable for type metadata for LocationAccessFailureReason?);
  uint64_t v68 = v24;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v67 = v15;
  if (v27)
  {
    uint64_t v69 = a2;
    uint64_t v64 = v11;
    uint64_t v65 = v4;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315394;
    uint64_t v29 = GuardFlowResult.description.getter();
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    outlined init with copy of IdentifiedUser?((uint64_t)v22, (uint64_t)v20, &demangling cache variable for type metadata for LocationAccessFailureReason?);
    uint64_t v31 = v76;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v20, 1, v7) == 1)
    {
      outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for LocationAccessFailureReason?);
      unint64_t v32 = 0xE400000000000000;
      uint64_t v33 = 1701736302;
    }
    else
    {
      uint64_t v33 = LocationAccessFailureReason.debugDescription.getter();
      unint64_t v32 = v34;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v7);
    }
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v22, &demangling cache variable for type metadata for LocationAccessFailureReason?);
    _os_log_impl(&dword_0, v25, v26, "InformationRoutingFlow: location guard flow completed with %s and failureReason=%s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v11 = v64;
    uint64_t v4 = v65;
    a2 = v69;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v22, &demangling cache variable for type metadata for LocationAccessFailureReason?);
  }
  uint64_t v35 = (uint64_t)v73;
  uint64_t v36 = v74;
  uint64_t v37 = v76;
  if (!v75) {
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, void, uint64_t))(v76 + 104))(v74, enum case for LocationAccessFailureReason.insufficientPrecisionAuthorized(_:), v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v36, 0, 1, v7);
  uint64_t v40 = v35 + *(int *)(v70 + 48);
  outlined init with copy of IdentifiedUser?(v71, v35, &demangling cache variable for type metadata for LocationAccessFailureReason?);
  outlined init with copy of IdentifiedUser?(v36, v40, &demangling cache variable for type metadata for LocationAccessFailureReason?);
  uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  if (v41(v35, 1, v7) != 1)
  {
    uint64_t v69 = a2;
    uint64_t v42 = (uint64_t)v67;
    outlined init with copy of IdentifiedUser?(v35, (uint64_t)v67, &demangling cache variable for type metadata for LocationAccessFailureReason?);
    if (v41(v40, 1, v7) != 1)
    {
      v43 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v66, v40, v7);
      lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(&lazy protocol witness table cache variable for type LocationAccessFailureReason and conformance LocationAccessFailureReason, (void (*)(uint64_t))&type metadata accessor for LocationAccessFailureReason);
      char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v37 + 8);
      v45(v43, v7);
      outlined destroy of Any?(v74, &demangling cache variable for type metadata for LocationAccessFailureReason?);
      v45((char *)v42, v7);
      outlined destroy of Any?(v35, &demangling cache variable for type metadata for LocationAccessFailureReason?);
      a2 = v69;
      if ((v44 & 1) == 0) {
        goto LABEL_22;
      }
      goto LABEL_18;
    }
    outlined destroy of Any?(v36, &demangling cache variable for type metadata for LocationAccessFailureReason?);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v42, v7);
    a2 = v69;
LABEL_16:
    outlined destroy of Any?(v35, &demangling cache variable for type metadata for (LocationAccessFailureReason?, LocationAccessFailureReason?));
    goto LABEL_22;
  }
  outlined destroy of Any?(v36, &demangling cache variable for type metadata for LocationAccessFailureReason?);
  if (v41(v40, 1, v7) != 1) {
    goto LABEL_16;
  }
  outlined destroy of Any?(v35, &demangling cache variable for type metadata for LocationAccessFailureReason?);
LABEL_18:
  if (specialized InformationRoutingFlow.needsPreciseLocation(with:)())
  {
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      os_log_type_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v48 = 0;
      _os_log_impl(&dword_0, v46, v47, "InformationRoutingFlow: Location guard flow was partially successful because location enabled but precise location disabled. Re-run Pommes request.", v48, 2u);
      swift_slowDealloc();
    }

LABEL_10:
    uint64_t v38 = &v11[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PommesResponse, IdentifiedUser?))
                      + 48)];
    *(void *)uint64_t v11 = a2;
    uint64_t v39 = type metadata accessor for IdentifiedUser();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
LABEL_31:
    swift_storeEnumTagMultiPayload();
    uint64_t v58 = *(uint64_t (**)(char *))(*(void *)v4 + 192);
    id v59 = a2;
    return v58(v11);
  }
LABEL_22:
  unint64_t v49 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v50 = v49;
  if (v49 >> 62)
  {
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_24;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  uint64_t result = *(void *)((char *)&dword_10 + (v49 & 0xFFFFFFFFFFFFFF8));
  if (!result) {
    goto LABEL_33;
  }
LABEL_24:
  if ((v50 & 0xC000000000000001) != 0)
  {
    id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((char *)&dword_10 + (v50 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
      return result;
    }
    id v52 = *(id *)(v50 + 32);
  }
  uint64_t v53 = v52;
  swift_bridgeObjectRelease();
  type metadata accessor for GenericExperience();
  uint64_t v54 = swift_dynamicCastClass();

  if (v54)
  {
    v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v57 = 0;
      _os_log_impl(&dword_0, v55, v56, "InformationRoutingFlow: Location guard flow failed with server driven experience. Rendering PommesResponse.", v57, 2u);
      swift_slowDealloc();
    }

    *(void *)uint64_t v11 = a2;
    v11[8] = 1;
    goto LABEL_31;
  }
LABEL_34:
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v60, v61))
  {
    os_log_type_t v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v62 = 0;
    _os_log_impl(&dword_0, v60, v61, "InformationRoutingFlow: Location denied. Used default GuardFlow error response.", v62, 2u);
    swift_slowDealloc();
  }

  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *))(*(void *)v4 + 192))(v11);
}

uint64_t PommesResponse.isServerDrivenExperience.getter()
{
  unint64_t v0 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t result = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8));
    if (result) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_9;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  if (*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
  {
    id v3 = *(id *)(v1 + 32);
LABEL_6:
    uint64_t v4 = v3;
    swift_bridgeObjectRelease();
    type metadata accessor for GenericExperience();
    uint64_t v5 = (void *)swift_dynamicCastClass();
    if (v5)
    {
LABEL_11:
      BOOL v6 = v5 != 0;

      return v6;
    }

LABEL_10:
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t InformationRoutingFlow.shouldPromptLocation(with:locationGuardFlowResult:)(uint64_t a1, int a2)
{
  int v77 = a2;
  uint64_t v74 = type metadata accessor for PommesSearchReason();
  uint64_t v73 = *(void *)(v74 - 8);
  uint64_t v4 = __chkstk_darwin(v74);
  unint64_t v80 = (char *)v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v79 = (char *)v72 - v6;
  uint64_t v7 = type metadata accessor for PommesRenderOptions.PromptType();
  uint64_t v91 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v72 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  v88 = (char *)v72 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v72 - v16;
  int v76 = *(unsigned __int8 *)(v2
                           + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_isSiriLocationServicesPromptingEnabled);
  v72[1] = a1;
  unint64_t v18 = dispatch thunk of PommesResponse.experiences.getter();
  uint64_t v19 = v18;
  if (v18 >> 62) {
    goto LABEL_52;
  }
  uint64_t v20 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v20; uint64_t v20 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v21 = v13;
    uint64_t v22 = 0;
    unint64_t v86 = v19 & 0xC000000000000001;
    uint64_t v75 = v19 + 32;
    unsigned int v85 = enum case for PommesRenderOptions.PromptType.shareDeviceLocation(_:);
    v93 = (char **)(v91 + 104);
    uint64_t v98 = v91 + 16;
    unsigned int v84 = enum case for PommesRenderOptions.PromptType.sharePreciseDeviceLocation(_:);
    uint64_t v90 = (void (**)(char *, uint64_t))(v91 + 8);
    uint64_t v99 = (v91 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    os_log_type_t v92 = v17;
    uint64_t v81 = v19;
    os_log_type_t v95 = v10;
    v96 = v21;
    uint64_t v83 = v20;
    while (1)
    {
      if (v86) {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v25 = *(id *)(v75 + 8 * (void)v22);
      }
      uint64_t v23 = v25;
      BOOL v26 = __OFADD__(v22, 1);
      uint64_t v13 = v22 + 1;
      if (v26) {
        goto LABEL_50;
      }
      unint64_t v89 = v13;
      BOOL v27 = (void *)dispatch thunk of Experience.renderOptions.getter();
      uint64_t v28 = PommesRenderOptions.promptTypes.getter();

      uint64_t v29 = *v93;
      ((void (*)(char *, void, uint64_t))*v93)(v17, v85, v7);
      uint64_t v10 = *(char **)(v28 + 16);
      v94 = v23;
      if (!v10)
      {
        char v37 = 0;
        uint64_t v24 = (char *)*v90;
        (*v90)(v17, v7);
        goto LABEL_19;
      }
      v87 = v29;
      uint64_t v30 = v91;
      unint64_t v78 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
      unint64_t v31 = v28 + v78;
      unint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v91 + 16);
      uint64_t v33 = v88;
      v32(v88, v28 + v78, v7);
      uint64_t v13 = (char *)lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(&lazy protocol witness table cache variable for type PommesRenderOptions.PromptType and conformance PommesRenderOptions.PromptType, (void (*)(uint64_t))&type metadata accessor for PommesRenderOptions.PromptType);
      swift_bridgeObjectRetain();
      char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v35 = *(char **)(v30 + 8);
      uint64_t v36 = v33;
      v97 = v35;
      ((void (*)(char *, uint64_t))v35)(v33, v7);
      if (v34)
      {
        swift_bridgeObjectRelease();
        char v37 = 1;
      }
      else
      {
        if (v10 != (unsigned char *)&dword_0 + 1)
        {
          uint64_t v82 = *(void *)(v91 + 72);
          v32(v33, v31 + v82, v7);
          uint64_t v17 = v92;
          char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = v97;
          ((void (*)(char *, uint64_t))v97)(v36, v7);
          if (v51)
          {
            swift_bridgeObjectRelease();
            char v37 = 1;
          }
          else
          {
            if (v10 != (unsigned char *)&dword_0 + 2)
            {
              unint64_t v55 = v28 + v78 + 2 * v82;
              uint64_t v56 = 2;
              while (1)
              {
                uint64_t v17 = v88;
                v32(v88, v55, v7);
                uint64_t v19 = v56 + 1;
                if (__OFADD__(v56, 1)) {
                  goto LABEL_51;
                }
                char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
                ((void (*)(char *, uint64_t))v97)(v17, v7);
                if (v57) {
                  break;
                }
                ++v56;
                v55 += v82;
                if ((char *)v19 == v10)
                {
                  swift_bridgeObjectRelease();
                  char v37 = 0;
LABEL_42:
                  uint64_t v19 = v81;
                  goto LABEL_17;
                }
              }
              swift_bridgeObjectRelease();
              char v37 = 1;
              goto LABEL_42;
            }
            swift_bridgeObjectRelease();
            char v37 = 0;
          }
          uint64_t v23 = v94;
          goto LABEL_18;
        }
        swift_bridgeObjectRelease();
        char v37 = 0;
      }
LABEL_17:
      uint64_t v17 = v92;
      uint64_t v23 = v94;
      uint64_t v24 = v97;
LABEL_18:
      uint64_t v29 = v87;
      ((void (*)(char *, uint64_t))v24)(v17, v7);
LABEL_19:
      swift_bridgeObjectRelease();
      if (v37)
      {
        swift_bridgeObjectRelease_n();

        int v58 = 1;
        goto LABEL_54;
      }
      uint64_t v38 = (void *)dispatch thunk of Experience.renderOptions.getter();
      uint64_t v39 = PommesRenderOptions.promptTypes.getter();

      uint64_t v40 = v96;
      ((void (*)(char *, void, uint64_t))v29)(v96, v84, v7);
      uint64_t v10 = v95;
      v97 = *(char **)(v39 + 16);
      if (v97) {
        break;
      }
LABEL_5:
      ((void (*)(char *, uint64_t))v24)(v40, v7);
LABEL_6:

      swift_bridgeObjectRelease();
      uint64_t v22 = v89;
      if (v89 == (char *)v83) {
        goto LABEL_53;
      }
    }
    unint64_t v41 = (*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
    uint64_t v42 = v39;
    v43 = v24;
    unint64_t v44 = v42 + v41;
    uint64_t v45 = *(void (**)(char *, unint64_t, uint64_t))(v91 + 16);
    v45(v95, v42 + v41, v7);
    uint64_t v13 = (char *)lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(&lazy protocol witness table cache variable for type PommesRenderOptions.PromptType and conformance PommesRenderOptions.PromptType, (void (*)(uint64_t))&type metadata accessor for PommesRenderOptions.PromptType);
    v87 = (char *)v42;
    swift_bridgeObjectRetain();
    LOBYTE(v42) = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v46 = v10;
    os_log_type_t v47 = v10;
    uint64_t v10 = v43;
    ((void (*)(char *, uint64_t))v43)(v47, v7);
    if (v42)
    {
      swift_bridgeObjectRelease();
LABEL_46:
      id v59 = v94;
      uint64_t v24 = v10;
      goto LABEL_47;
    }
    if (v97 == (unsigned char *)&dword_0 + 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = v81;
      uint64_t v23 = v94;
      uint64_t v24 = v43;
      uint64_t v17 = v92;
      goto LABEL_5;
    }
    uint64_t v48 = *(void *)(v91 + 72);
    v45(v46, v44 + v48, v7);
    char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v24 = v43;
    ((void (*)(char *, uint64_t))v43)(v46, v7);
    if (v49)
    {
      swift_bridgeObjectRelease();
      uint64_t v40 = v96;
      id v59 = v94;
LABEL_47:
      ((void (*)(char *, uint64_t))v24)(v40, v7);
      swift_bridgeObjectRelease_n();

      swift_bridgeObjectRelease();
      int v58 = 1;
      goto LABEL_54;
    }
    unint64_t v50 = v92;
    if (v97 == (unsigned char *)&dword_0 + 2)
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = v81;
      uint64_t v40 = v96;
      uint64_t v23 = v94;
      uint64_t v17 = v50;
      goto LABEL_5;
    }
    id v52 = &v87[2 * v48 + v41];
    uint64_t v19 = 2;
    while (1)
    {
      uint64_t v53 = v95;
      v45(v95, (unint64_t)v52, v7);
      uint64_t v17 = (char *)(v19 + 1);
      if (__OFADD__(v19, 1)) {
        break;
      }
      char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
      ((void (*)(char *, uint64_t))v10)(v53, v7);
      if (v54)
      {
        swift_bridgeObjectRelease();
        uint64_t v40 = v96;
        goto LABEL_46;
      }
      ++v19;
      v52 += v48;
      if (v17 == v97)
      {
        swift_bridgeObjectRelease();
        uint64_t v19 = v81;
        uint64_t v17 = v92;
        uint64_t v23 = v94;
        ((void (*)(char *, uint64_t))v10)(v96, v7);
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    swift_bridgeObjectRetain();
  }
LABEL_53:
  swift_bridgeObjectRelease_n();
  int v58 = 0;
LABEL_54:
  dispatch thunk of PommesResponse.searchReason.getter();
  uint64_t v60 = v73;
  uint64_t v61 = v74;
  (*(void (**)(char *, void, uint64_t))(v73 + 104))(v80, enum case for PommesSearchReason.runPommesRequest(_:), v74);
  lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(&lazy protocol witness table cache variable for type PommesSearchReason and conformance PommesSearchReason, (void (*)(uint64_t))&type metadata accessor for PommesSearchReason);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v102 == v100 && v103 == v101)
  {
    swift_bridgeObjectRelease_n();
    int v62 = 0;
  }
  else
  {
    int v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v62 = v63 ^ 1;
  }
  uint64_t v64 = *(void (**)(char *, uint64_t))(v60 + 8);
  v64(v80, v61);
  v64(v79, v61);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v65 = type metadata accessor for Logger();
  __swift_project_value_buffer(v65, (uint64_t)static Logger.information);
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v66, v67))
  {
    BOOL v68 = v77 == 2;
    uint64_t v69 = swift_slowAlloc();
    *(_DWORD *)uint64_t v69 = 67109888;
    LODWORD(v102) = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v69 + 8) = 1024;
    LODWORD(v102) = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v69 + 14) = 1024;
    LODWORD(v102) = v62 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v69 + 20) = 1024;
    LODWORD(v102) = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v66, v67, "InformationRoutingFlow: shouldPromptLocation? enabled=%{BOOL}d && containsPrompt=%{BOOL}d && !isRunPommesRequest=%{BOOL}d && !hasGuardFlowResult=%{BOOL}d", (uint8_t *)v69, 0x1Au);
    swift_slowDealloc();
  }
  int v70 = v77;

  if (v70 == 2) {
    return v76 & v58 & v62;
  }
  else {
    return 0;
  }
}

uint64_t InformationRoutingFlow.renderPommesFlow(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v64 = a2;
  uint64_t v60 = type metadata accessor for InformationRoutingFlow.State(0);
  __chkstk_darwin(v60);
  id v59 = (Swift::String *)((char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v66 = type metadata accessor for PommesSystemAppChecking();
  uint64_t v6 = *(void *)(v66 - 8);
  uint64_t v7 = __chkstk_darwin(v66);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v59 - v10;
  uint64_t v12 = type metadata accessor for CATOption();
  __chkstk_darwin(v12 - 8);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v63 = __swift_project_value_buffer(v13, (uint64_t)static Logger.information);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_0, v14, v15, "InformationRoutingFlow: pommesResponse", v16, 2u);
    swift_slowDealloc();
  }

  uint64_t v17 = v3 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_interactionStream;
  swift_beginAccess();
  outlined init with copy of IdentifiedUser?(v17, (uint64_t)v70, &demangling cache variable for type metadata for CurareInteractionStream?);
  static CurareDonation.donateCurareResponseUsedMarker(from:into:)();
  outlined destroy of Any?((uint64_t)v70, &demangling cache variable for type metadata for CurareInteractionStream?);
  uint64_t v62 = v3 + 16;
  outlined init with copy of OutputPublisherAsync(v3 + 16, (uint64_t)v70);
  uint64_t v18 = *(void *)(v3 + 96);
  uint64_t v19 = *(void *)(v3 + 104);
  uint64_t v61 = v3 + 56;
  outlined init with copy of OutputPublisherAsync(v3 + 56, (uint64_t)v69);
  id v65 = a1;
  swift_retain();
  swift_retain();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  static Device.current.getter();
  type metadata accessor for CommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v20 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for InformationViewFactory();
  uint64_t v21 = (void *)swift_allocObject();
  id v22 = [self sharedPreferences];
  uint64_t v23 = type metadata accessor for PommesServerFallbackPreferences();
  swift_allocObject();
  uint64_t v24 = PommesServerFallbackPreferences.init(_:)();
  v21[11] = v23;
  v21[12] = &protocol witness table for PommesServerFallbackPreferences;
  v21[8] = v24;
  outlined init with take of PatternFlowProviding(&v67, (uint64_t)(v21 + 3));
  v21[2] = v20;
  uint64_t v25 = v3;
  type metadata accessor for RenderComponentFlowFactory();
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = outlined init with take of PatternFlowProviding(&v68, v26 + 16);
  *(void *)(v26 + 56) = v21;
  uint64_t v28 = default argument 5 of RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(v27);
  PommesSystemAppChecking.init()();
  uint64_t v29 = type metadata accessor for AppResolutionStrategyHelpers();
  uint64_t v30 = v66;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v66);
  uint64_t v31 = specialized RenderPegasusFlow.__allocating_init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(v65, (uint64_t)v70, v18, v19, v26, v28, (uint64_t)v69, (uint64_t)v9, v29, (uint64_t)&protocol witness table for AppResolutionStrategyHelpers);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v30);
  unint64_t v32 = (void *)(v25 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper);
  uint64_t v33 = *(void *)(v25 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper + 24);
  uint64_t v34 = *(void *)(v25 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v25 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper), v33);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34) & 1) == 0
    || (specialized InformationRoutingFlow.eligibleForKnowledgeFallback(response:)() & 1) == 0)
  {
    goto LABEL_19;
  }
  v35._countAndFlagsBits = PommesResponse.searchRequestUtterance.getter();
  Swift::String v36 = UtteranceNormalizer.normalize(_:preserveCase:)(v35, 1);
  swift_bridgeObjectRelease();
  uint64_t v37 = v32[3];
  uint64_t v38 = v32[4];
  __swift_project_boxed_opaque_existential_1(v32, v37);
  unsigned __int8 v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 16))(v37, v38);
  if (v39 < 2u)
  {
    unsigned __int8 v40 = v39;
    unint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v43 = 67109120;
      LODWORD(v70[0]) = v40 == 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v41, v42, "Invoking knowledge fallback confirmation. Enablement: %{BOOL}d", v43, 8u);
      swift_slowDealloc();
    }
    BOOL v44 = v40 == 0;

    uint64_t v45 = PommesResponse.asrRecognition.getter();
    outlined init with copy of OutputPublisherAsync(v61, (uint64_t)v70);
    uint64_t v46 = type metadata accessor for ResponseFactory();
    swift_allocObject();
    uint64_t v47 = ResponseFactory.init()();
    type metadata accessor for KnowledgeFallbackConfirmationStrategy();
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 56) = v46;
    *(void *)(v48 + 64) = &protocol witness table for ResponseFactory;
    *(void *)(v48 + 32) = v47;
    *(void *)(v48 + 16) = v45;
    *(unsigned char *)(v48 + 24) = v44;
    outlined init with take of PatternFlowProviding(v70, v48 + 72);
    outlined init with copy of OutputPublisherAsync(v62, (uint64_t)v70);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlowAsync<(), KnowledgeConfirmationResponseProvider>);
    swift_allocObject();
    lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(&lazy protocol witness table cache variable for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy, (void (*)(uint64_t))type metadata accessor for KnowledgeFallbackConfirmationStrategy);
    *(void *)&v70[0] = PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)();
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = v25;
    *(Swift::String *)(v49 + 24) = v36;
    *(void *)(v49 + 40) = v31;
    *(unsigned char *)(v49 + 48) = v44;
    lazy protocol witness table accessor for type PromptForConfirmationFlowAsync<(), KnowledgeConfirmationResponseProvider> and conformance PromptForConfirmationFlowAsync<A, B>();
    swift_retain();
    swift_retain();
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  if (v39 != 2)
  {
    swift_bridgeObjectRelease();
    char v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v54, v55))
    {
      char v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v57 = 0;
      _os_log_impl(&dword_0, v54, v55, "Skipping knowledge fallback", v57, 2u);
      swift_slowDealloc();
    }

LABEL_19:
    *(void *)&v70[0] = v31;
    type metadata accessor for RenderPegasusFlow();
    lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(&lazy protocol witness table cache variable for type RenderPegasusFlow and conformance RenderPegasusFlow, (void (*)(uint64_t))type metadata accessor for RenderPegasusFlow);
    static ExecuteResponse.complete<A>(next:)();
    return swift_release();
  }
  unint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v50, v51))
  {
    id v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v52 = 0;
    _os_log_impl(&dword_0, v50, v51, "Invoking knowledge fallback without confirmation due to user opt-in", v52, 2u);
    swift_slowDealloc();
  }

  uint64_t v53 = v59;
  *id v59 = v36;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(Swift::String *))(*(void *)v25 + 192))(v53);
  static ExecuteResponse.ongoing(requireInput:)();
  return swift_release();
}

uint64_t closure #1 in InformationRoutingFlow.renderPommesFlow(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11 = type metadata accessor for InformationRoutingFlow.State(0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v16 = (uint64_t *)((char *)&v18 - v15);
  *uint64_t v16 = a3;
  v16[1] = a4;
  swift_storeEnumTagMultiPayload();
  *uint64_t v14 = a3;
  v14[1] = a4;
  v14[2] = a5;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain_n();
  swift_retain();
  InformationRoutingFlow.knowledgeFallbackConfirmationCompletion(exitValue:yesState:noState:isEnablement:)(a1, (uint64_t)v16, (uint64_t)v14, a6);
  outlined destroy of InformationRoutingFlow.State((uint64_t)v14, type metadata accessor for InformationRoutingFlow.State);
  return outlined destroy of InformationRoutingFlow.State((uint64_t)v16, type metadata accessor for InformationRoutingFlow.State);
}

uint64_t InformationRoutingFlow.knowledgeFallbackConfirmationCompletion(exitValue:yesState:noState:isEnablement:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for InformationRoutingFlow.State(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<KnowledgeConfirmationResponseProvider>);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  int v17 = (*(uint64_t (**)(unsigned char *, uint64_t))(v14 + 88))(v16, v13);
  if (v17 == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(unsigned char *, uint64_t))(v14 + 96))(v16, v13);
    if (*v16 - 2 >= 2)
    {
      if (!*v16)
      {
        outlined init with copy of InformationRoutingFlow.State(a3, (uint64_t)v12, type metadata accessor for InformationRoutingFlow.State);
        uint64_t result = (*(uint64_t (**)(char *))(*(void *)v5 + 192))(v12);
        if (a4)
        {
          uint64_t v19 = (void *)(v5 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper);
          uint64_t v20 = *(void *)(v5
                          + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper
                          + 24);
          uint64_t v21 = v19[4];
          __swift_project_boxed_opaque_existential_1(v19, v20);
          return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
        }
        return result;
      }
      outlined init with copy of InformationRoutingFlow.State(a2, (uint64_t)v12, type metadata accessor for InformationRoutingFlow.State);
      return (*(uint64_t (**)(char *))(*(void *)v5 + 192))(v12);
    }
LABEL_15:
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *))(*(void *)v5 + 192))(v12);
  }
  if (v17 == enum case for PromptResult.error<A>(_:))
  {
    (*(void (**)(unsigned char *, uint64_t))(v14 + 96))(v16, v13);
    swift_errorRelease();
    goto LABEL_10;
  }
  if (v17 == enum case for PromptResult.cancelled<A>(_:)) {
    goto LABEL_15;
  }
  if (v17 == enum case for PromptResult.unanswered<A>(_:))
  {
LABEL_10:
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.information);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_0, v23, v24, "Knowledge fallback confirmation prompt was unanswered or errored out", v25, 2u);
      swift_slowDealloc();
    }

    goto LABEL_15;
  }
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.information);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl(&dword_0, v27, v28, "Knowledge fallback confirmation prompt got unhandled response type", v29, 2u);
    swift_slowDealloc();
  }

  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *))(*(void *)v5 + 192))(v12);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t InformationRoutingFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();
  outlined destroy of InformationRoutingFlow.State(v0 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_state, type metadata accessor for InformationRoutingFlow.State);
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_interactionStream, &demangling cache variable for type metadata for CurareInteractionStream?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper);
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_utteranceNormalizer;
  uint64_t v2 = type metadata accessor for UtteranceNormalizer();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t InformationRoutingFlow.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();
  outlined destroy of InformationRoutingFlow.State(v0 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_state, type metadata accessor for InformationRoutingFlow.State);
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_interactionStream, &demangling cache variable for type metadata for CurareInteractionStream?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper);
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_utteranceNormalizer;
  uint64_t v2 = type metadata accessor for UtteranceNormalizer();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t protocol witness for Flow.on(input:) in conformance InformationRoutingFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240))() & 1;
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance InformationRoutingFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance InformationRoutingFlow;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance InformationRoutingFlow(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance InformationRoutingFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))();
}

uint64_t protocol witness for Flow.execute() in conformance InformationRoutingFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 248) + **(int **)(**(void **)v1 + 248));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.execute() in conformance InformationRoutingFlow()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance InformationRoutingFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t protocol witness for Flow.flexibleExecutionSupport.getter in conformance InformationRoutingFlow()
{
  return Flow.flexibleExecutionSupport.getter();
}

uint64_t protocol witness for FlowTrampolining.outputPublisher.getter in conformance InformationRoutingFlow@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(*v1 + 16, a1);
}

uint64_t protocol witness for FlowTrampolining.informationViewFactory.getter in conformance InformationRoutingFlow()
{
  return swift_retain();
}

uint64_t protocol witness for FlowEntryPoint.flowFor(input:) in conformance InformationRoutingEntryPoint(uint64_t a1)
{
  uint64_t v2 = specialized InformationRoutingEntryPoint.flowFor(input:)(a1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return protocol witness for FlowEntryPoint.flowFor(input:) in conformance InformationRoutingEntryPoint(v3, v1, v2);
}

uint64_t specialized RenderPegasusFlow.__allocating_init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v60 = a7;
  uint64_t v54 = a6;
  uint64_t v56 = a3;
  uint64_t v57 = a5;
  uint64_t v51 = a9;
  uint64_t v50 = a10;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  int v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for PegasusExperience();
  __chkstk_darwin(v18);
  uint64_t v48 = (uint64_t)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for PommesSystemAppChecking();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v58 = v20;
  uint64_t v59 = v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v49 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v47 - v24;
  (*(void (**)(char *, uint64_t))(v26 + 32))((char *)&v47 - v24, a8);
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  uint64_t v52 = a4;
  uint64_t v61 = a4;
  uint64_t v62 = a1;
  Date.init()();
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v55 = a2;
  outlined init with copy of OutputPublisherAsync(a2, (uint64_t)v64);
  uint64_t v27 = a1;
  id v28 = a1;
  uint64_t v29 = v56;
  swift_retain();
  uint64_t v30 = v57;
  swift_retain();
  static SiriKitEventSender.current.getter();
  type metadata accessor for PegasusFlowEventLogger();
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v27;
  outlined init with copy of OutputPublisherAsync((uint64_t)v63, v31 + 24);
  id v32 = v28;
  uint64_t v33 = PommesResponse.metadataDomainName.getter();
  uint64_t v35 = v34;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
  *(void *)(v31 + 64) = v33;
  *(void *)(v31 + 72) = v35;
  *(_DWORD *)(v31 + 80) = 1;
  uint64_t v36 = outlined init with copy of OutputPublisherAsync(v60, (uint64_t)v63);
  uint64_t v37 = default argument 5 of RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(v36);
  type metadata accessor for RenderPegasusFlow();
  uint64_t v38 = swift_allocObject();
  unsigned __int8 v39 = *(void (**)(char *, char *))(v59 + 16);
  uint64_t v40 = (uint64_t)v49;
  uint64_t v53 = v25;
  unint64_t v41 = v25;
  uint64_t v42 = v58;
  v39(v49, v41);
  uint64_t v43 = specialized RenderPegasusFlow.init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)(v48, v27, (uint64_t)v64, v29, v30, v31, v63, v37, v40, v51, v50, v38);

  swift_release();
  swift_release();
  swift_release();
  swift_retain();
  unint64_t v44 = dispatch thunk of PommesResponse.experiences.getter();
  uint64_t v45 = specialized Sequence.flatMap<A>(_:)(v44);
  swift_bridgeObjectRelease();
  RenderPegasusFlow.addReferenceResolutionEntities(from:)(v45);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v53, v42);
  __swift_destroy_boxed_opaque_existential_1(v60);
  __swift_destroy_boxed_opaque_existential_1(v55);
  return v43;
}

uint64_t specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  outlined init with copy of OutputPublisherAsync(*a1 + 16, (uint64_t)v9);
  uint64_t v6 = *(void *)(v5 + 96);
  type metadata accessor for ErrorFlowFactory();
  uint64_t v7 = swift_allocObject();
  outlined init with take of PatternFlowProviding(v9, v7 + 16);
  *(void *)(v7 + 56) = v6;
  swift_retain();
  ErrorFlowFactory.makeErrorFlow(message:)(a2, a3);
  static ExecuteResponse.complete(next:)();
  swift_release();
  return swift_release();
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  long long v9[2];

  uint64_t v5 = *a1;
  outlined init with copy of OutputPublisherAsync(*a1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_outputPublisher, (uint64_t)v9);
  uint64_t v6 = *(void *)(v5 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_informationViewFactory);
  type metadata accessor for ErrorFlowFactory();
  uint64_t v7 = swift_allocObject();
  outlined init with take of PatternFlowProviding(v9, v7 + 16);
  *(void *)(v7 + 56) = v6;
  swift_retain();
  ErrorFlowFactory.makeErrorFlow(message:)(a2, a3);
  static ExecuteResponse.complete(next:)();
  swift_release();
  return swift_release();
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  long long v9[2];

  uint64_t v5 = *a1;
  outlined init with copy of OutputPublisherAsync(*a1 + 16, (uint64_t)v9);
  uint64_t v6 = *(void *)(v5 + 56);
  type metadata accessor for ErrorFlowFactory();
  uint64_t v7 = swift_allocObject();
  outlined init with take of PatternFlowProviding(v9, v7 + 16);
  *(void *)(v7 + 56) = v6;
  swift_retain();
  ErrorFlowFactory.makeErrorFlow(message:)(a2, a3);
  static ExecuteResponse.complete(next:)();
  swift_release();
  return swift_release();
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  long long v9[2];

  uint64_t v5 = *a1;
  outlined init with copy of OutputPublisherAsync(*a1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_outputPublisher, (uint64_t)v9);
  uint64_t v6 = *(void *)(v5 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_informationViewFactory);
  type metadata accessor for ErrorFlowFactory();
  uint64_t v7 = swift_allocObject();
  outlined init with take of PatternFlowProviding(v9, v7 + 16);
  *(void *)(v7 + 56) = v6;
  swift_retain();
  ErrorFlowFactory.makeErrorFlow(message:)(a2, a3);
  static ExecuteResponse.complete(next:)();
  swift_release();
  return swift_release();
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  long long v9[2];

  uint64_t v5 = *a1;
  outlined init with copy of OutputPublisherAsync(*a1 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_outputPublisher, (uint64_t)v9);
  uint64_t v6 = *(void *)(v5 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_informationViewFactory);
  type metadata accessor for ErrorFlowFactory();
  uint64_t v7 = swift_allocObject();
  outlined init with take of PatternFlowProviding(v9, v7 + 16);
  *(void *)(v7 + 56) = v6;
  swift_retain();
  ErrorFlowFactory.makeErrorFlow(message:)(a2, a3);
  static ExecuteResponse.complete(next:)();
  swift_release();
  return swift_release();
}

uint64_t specialized TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_PegasusQueryContext?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v41 = *(void *)(Context - 8);
  __chkstk_darwin(Context);
  unsigned __int8 v39 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Responseframework_Engagement_Context?);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context();
  uint64_t v17 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v40 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for PommesEngagement();
  uint64_t v48 = v19;
  uint64_t v49 = &protocol witness table for PommesEngagement;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v47);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(boxed_opaque_existential_1, a3, v19);
  uint64_t v45 = type metadata accessor for PatternExecutor();
  uint64_t v46 = &protocol witness table for PatternExecutor;
  *(void *)&long long v44 = a4;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.information);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&dword_0, v23, v24, "TapEngagementHandlingFlow: Received Direct invocation", v25, 2u);
    swift_slowDealloc();
  }

  specialized Parse.DirectInvocation.get<A>(protoMessage:)(0xD000000000000011, 0x80000000000AE240, (uint64_t)v16);
  uint64_t v26 = v42;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v42) == 1)
  {
    outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for Apple_Parsec_Responseframework_Engagement_Context?);
  }
  else
  {
    uint64_t v38 = v22;
    uint64_t v27 = a1;
    id v28 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v29 = v40;
    v28(v40, v16, v26);
    specialized Parse.DirectInvocation.get<A>(protoMessage:)(0x4373757361676570, 0xEE00747865746E6FLL, (uint64_t)v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v11, 1, Context) != 1)
    {
      uint64_t v34 = type metadata accessor for Parse.DirectInvocation();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(v27, v34);
      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
      uint64_t v36 = v39;
      v35(v39, v11, Context);
      v28((char *)(a5 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_engagementContext), v29, v26);
      v35((char *)(a5 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pegasusContext), v36, Context);
      outlined init with take of PatternFlowProviding(v43, a5 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_outputPublisherAsync);
      outlined init with take of PatternFlowProviding(&v47, a5 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pommesEngagement);
      outlined init with take of PatternFlowProviding(&v44, a5 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_patternExecutor);
      return a5;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v29, v26);
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Apple_Parsec_Search_PegasusQueryContext?);
    a1 = v27;
  }
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    id v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v32 = 0;
    _os_log_impl(&dword_0, v30, v31, "TapEngagementHandlingFlow: Unable to retrieve EngagementContext from DI Payload.", v32, 2u);
    swift_slowDealloc();
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  uint64_t v33 = type metadata accessor for Parse.DirectInvocation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(a1, v33);
  type metadata accessor for TapEngagementHandlingFlow();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t specialized InformationRoutingFlow.__allocating_init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v179 = a4;
  int v175 = a3;
  uint64_t v180 = a2;
  uint64_t v177 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v171 = *(void *)(v177 - 8);
  uint64_t v10 = __chkstk_darwin(v177);
  uint64_t v168 = (char *)&v164 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v169 = (void **)((char *)&v164 - v13);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (void **)((char *)&v164 - v15);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v164 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v164 - v20;
  uint64_t v22 = type metadata accessor for CATOption();
  __chkstk_darwin(v22 - 8);
  v172 = (char *)&v164 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = type metadata accessor for InformationRoutingFlow.State(0);
  __chkstk_darwin(v173);
  uint64_t v178 = (void **)((char *)&v164 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = type metadata accessor for Parse.PegasusResult();
  v170 = *(void (**)(uint64_t, uint64_t))(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v164 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Parse();
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  v187[3] = a6;
  v187[4] = a7;
  uint64_t v174 = a7;
  os_log_type_t v31 = (void **)((char *)&v164 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v187);
  uint64_t v33 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32);
  uint64_t v176 = a6;
  v33(boxed_opaque_existential_1, v179, a6);
  uint64_t v179 = a1;
  Input.parse.getter();
  int v34 = (*(uint64_t (**)(void **, uint64_t))(v29 + 88))(v31, v28);
  if (v34 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v35 = v19;
    uint64_t v167 = v16;
    (*(void (**)(void **, uint64_t))(v29 + 96))(v31, v28);
    uint64_t v36 = v171;
    uint64_t v37 = *(void (**)(char *, void **, uint64_t))(v171 + 16);
    uint64_t v38 = v177;
    v37(v21, v31, v177);
    if (Parse.DirectInvocation.identifier.getter() == 0xD00000000000003DLL && v39 == 0x80000000000AD800)
    {
      swift_bridgeObjectRelease();
LABEL_8:
      uint64_t v59 = v178;
      v37((char *)v178, (void **)v21, v38);
      swift_storeEnumTagMultiPayload();
      outlined init with copy of IdentifiedUser?(v180, (uint64_t)v186, &demangling cache variable for type metadata for CurareInteractionStream?);
      outlined init with copy of OutputPublisherAsync((uint64_t)v187, (uint64_t)v184);
      static AceService.currentAsync.getter();
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      static Device.current.getter();
      type metadata accessor for CommonCATs();
      static CATOption.defaultMode.getter();
      uint64_t v60 = CATWrapper.__allocating_init(options:globals:)();
      type metadata accessor for InformationViewFactory();
      uint64_t v61 = (void *)swift_allocObject();
      id v62 = [self sharedPreferences];
      uint64_t v63 = type metadata accessor for PommesServerFallbackPreferences();
      swift_allocObject();
      uint64_t v64 = PommesServerFallbackPreferences.init(_:)();
      v61[11] = v63;
      v61[12] = &protocol witness table for PommesServerFallbackPreferences;
      v61[8] = v64;
      outlined init with take of PatternFlowProviding(v181, (uint64_t)(v61 + 3));
      v61[2] = v60;
      type metadata accessor for ExperienceSelector();
      uint64_t v65 = swift_allocObject();
      type metadata accessor for InformationRoutingFlow(0);
      uint64_t v66 = swift_allocObject();
      uint64_t v67 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v184, v185);
      __chkstk_darwin(v67);
      uint64_t v69 = (char *)&v164 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v70 + 16))(v69);
      uint64_t v56 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)((uint64_t)v59, (uint64_t)v183, (uint64_t)v182, (uint64_t)v61, v65, (uint64_t)v186, v175 & 1, (uint64_t)v69, v66, v176, v174);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v184);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v187);
      outlined destroy of Any?(v180, &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v71 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v179, v71);
      uint64_t v72 = *(void (**)(char *, uint64_t))(v36 + 8);
      uint64_t v73 = v177;
      v72(v21, v177);
      v72((char *)v31, v73);
      return v56;
    }
    char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v58) {
      goto LABEL_8;
    }
    uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v166 = (char *)(v36 + 8);
    v170 = v90;
    v90((uint64_t)v21, v38);
    uint64_t v91 = (uint64_t)v35;
    v37(v35, v31, v38);
    if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000040 && v92 == 0x80000000000AD840)
    {
      swift_bridgeObjectRelease();
LABEL_16:
      os_log_type_t v95 = v178;
      v37((char *)v178, (void **)v91, v38);
      swift_storeEnumTagMultiPayload();
      outlined init with copy of IdentifiedUser?(v180, (uint64_t)v186, &demangling cache variable for type metadata for CurareInteractionStream?);
      outlined init with copy of OutputPublisherAsync((uint64_t)v187, (uint64_t)v184);
      static AceService.currentAsync.getter();
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      static Device.current.getter();
      type metadata accessor for CommonCATs();
      static CATOption.defaultMode.getter();
      uint64_t v96 = CATWrapper.__allocating_init(options:globals:)();
      uint64_t v173 = v91;
      uint64_t v97 = v96;
      type metadata accessor for InformationViewFactory();
      uint64_t v98 = swift_allocObject();
      uint64_t v99 = v170;
      uint64_t v100 = (void *)v98;
      id v101 = [self sharedPreferences];
      uint64_t v102 = type metadata accessor for PommesServerFallbackPreferences();
      swift_allocObject();
      uint64_t v103 = PommesServerFallbackPreferences.init(_:)();
      v100[11] = v102;
      v100[12] = &protocol witness table for PommesServerFallbackPreferences;
      v100[8] = v103;
      outlined init with take of PatternFlowProviding(v181, (uint64_t)(v100 + 3));
      v100[2] = v97;
      type metadata accessor for ExperienceSelector();
      uint64_t v104 = swift_allocObject();
      type metadata accessor for InformationRoutingFlow(0);
      uint64_t v105 = swift_allocObject();
      uint64_t v106 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v184, v185);
      __chkstk_darwin(v106);
      uint64_t v108 = (char *)&v164 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v109 + 16))(v108);
      uint64_t v56 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)((uint64_t)v95, (uint64_t)v183, (uint64_t)v182, (uint64_t)v100, v104, (uint64_t)v186, v175 & 1, (uint64_t)v108, v105, v176, v174);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v184);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v187);
      outlined destroy of Any?(v180, &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v110 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v179, v110);
      v99(v173, v38);
      v99((uint64_t)v31, v38);
      return v56;
    }
    char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v94) {
      goto LABEL_16;
    }
    v170((uint64_t)v35, v38);
    uint64_t v112 = v167;
    v37((char *)v167, v31, v38);
    uint64_t v113 = Parse.DirectInvocation.identifier.getter();
    uint64_t v165 = v31;
    if (v113 == 0xD00000000000003ELL && v114 == 0x80000000000AD890)
    {
      swift_bridgeObjectRelease();
LABEL_22:
      v37((char *)v178, v112, v38);
      swift_storeEnumTagMultiPayload();
      uint64_t v116 = v180;
      outlined init with copy of IdentifiedUser?(v180, (uint64_t)v186, &demangling cache variable for type metadata for CurareInteractionStream?);
      outlined init with copy of OutputPublisherAsync((uint64_t)v187, (uint64_t)v184);
      static AceService.currentAsync.getter();
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      static Device.current.getter();
      type metadata accessor for CommonCATs();
      static CATOption.defaultMode.getter();
      uint64_t v117 = CATWrapper.__allocating_init(options:globals:)();
      type metadata accessor for InformationViewFactory();
      v118 = (void *)swift_allocObject();
      id v119 = [self sharedPreferences];
      uint64_t v120 = type metadata accessor for PommesServerFallbackPreferences();
      swift_allocObject();
      uint64_t v121 = PommesServerFallbackPreferences.init(_:)();
      v118[11] = v120;
      v118[12] = &protocol witness table for PommesServerFallbackPreferences;
      v118[8] = v121;
      outlined init with take of PatternFlowProviding(v181, (uint64_t)(v118 + 3));
      v118[2] = v117;
      type metadata accessor for ExperienceSelector();
      uint64_t v122 = swift_allocObject();
      type metadata accessor for InformationRoutingFlow(0);
      uint64_t v123 = swift_allocObject();
      uint64_t v124 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v184, v185);
      __chkstk_darwin(v124);
      BOOL v126 = (char *)&v164 - ((v125 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v127 + 16))(v126);
      uint64_t v56 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)((uint64_t)v178, (uint64_t)v183, (uint64_t)v182, (uint64_t)v118, v122, (uint64_t)v186, v175 & 1, (uint64_t)v126, v123, v176, v174);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v184);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v187);
      outlined destroy of Any?(v116, &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v128 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v128 - 8) + 8))(v179, v128);
      v129 = (void (*)(void **, uint64_t))v170;
      v170((uint64_t)v167, v38);
      v129(v165, v38);
      return v56;
    }
    char v115 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v115) {
      goto LABEL_22;
    }
    v170((uint64_t)v112, v38);
    uint64_t v130 = v169;
    v37((char *)v169, v31, v38);
    if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000045 && v131 == 0x80000000000AD8D0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v132 & 1) == 0)
      {
        uint64_t v148 = v38;
        v170((uint64_t)v130, v38);
        uint64_t v149 = v168;
        (*(void (**)(char *, void **, uint64_t))(v171 + 32))(v168, v31, v148);
        uint64_t v150 = v178;
        v37((char *)v178, (void **)v149, v148);
        swift_storeEnumTagMultiPayload();
        outlined init with copy of IdentifiedUser?(v180, (uint64_t)v186, &demangling cache variable for type metadata for CurareInteractionStream?);
        outlined init with copy of OutputPublisherAsync((uint64_t)v187, (uint64_t)v184);
        static AceService.currentAsync.getter();
        static OutputPublisherFactory.makeOutputPublisherAsync()();
        static Device.current.getter();
        type metadata accessor for CommonCATs();
        static CATOption.defaultMode.getter();
        uint64_t v151 = CATWrapper.__allocating_init(options:globals:)();
        type metadata accessor for InformationViewFactory();
        uint64_t v152 = v148;
        v153 = (void *)swift_allocObject();
        id v154 = [self sharedPreferences];
        uint64_t v155 = type metadata accessor for PommesServerFallbackPreferences();
        swift_allocObject();
        uint64_t v156 = PommesServerFallbackPreferences.init(_:)();
        v153[11] = v155;
        v153[12] = &protocol witness table for PommesServerFallbackPreferences;
        v153[8] = v156;
        outlined init with take of PatternFlowProviding(v181, (uint64_t)(v153 + 3));
        v153[2] = v151;
        type metadata accessor for ExperienceSelector();
        uint64_t v157 = swift_allocObject();
        type metadata accessor for InformationRoutingFlow(0);
        uint64_t v158 = swift_allocObject();
        uint64_t v159 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v184, v185);
        __chkstk_darwin(v159);
        uint64_t v161 = (char *)&v164 - ((v160 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v162 + 16))(v161);
        uint64_t v56 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)((uint64_t)v150, (uint64_t)v183, (uint64_t)v182, (uint64_t)v153, v157, (uint64_t)v186, v175 & 1, (uint64_t)v161, v158, v176, v174);
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v184);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v187);
        outlined destroy of Any?(v180, &demangling cache variable for type metadata for CurareInteractionStream?);
        uint64_t v163 = type metadata accessor for Input();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v163 - 8) + 8))(v179, v163);
        v170((uint64_t)v149, v152);
        return v56;
      }
    }
    v37((char *)v178, v130, v38);
    swift_storeEnumTagMultiPayload();
    uint64_t v133 = v180;
    outlined init with copy of IdentifiedUser?(v180, (uint64_t)v186, &demangling cache variable for type metadata for CurareInteractionStream?);
    outlined init with copy of OutputPublisherAsync((uint64_t)v187, (uint64_t)v184);
    static AceService.currentAsync.getter();
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    static Device.current.getter();
    type metadata accessor for CommonCATs();
    static CATOption.defaultMode.getter();
    uint64_t v134 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for InformationViewFactory();
    v135 = v130;
    v136 = (void *)swift_allocObject();
    id v137 = [self sharedPreferences];
    uint64_t v138 = type metadata accessor for PommesServerFallbackPreferences();
    swift_allocObject();
    uint64_t v139 = PommesServerFallbackPreferences.init(_:)();
    v136[11] = v138;
    v136[12] = &protocol witness table for PommesServerFallbackPreferences;
    v136[8] = v139;
    outlined init with take of PatternFlowProviding(v181, (uint64_t)(v136 + 3));
    v136[2] = v134;
    type metadata accessor for ExperienceSelector();
    uint64_t v140 = swift_allocObject();
    type metadata accessor for InformationRoutingFlow(0);
    uint64_t v141 = swift_allocObject();
    uint64_t v142 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v184, v185);
    __chkstk_darwin(v142);
    uint64_t v144 = (char *)&v164 - ((v143 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v145 + 16))(v144);
    uint64_t v56 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)((uint64_t)v178, (uint64_t)v183, (uint64_t)v182, (uint64_t)v136, v140, (uint64_t)v186, v175 & 1, (uint64_t)v144, v141, v176, v174);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v184);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v187);
    outlined destroy of Any?(v133, &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v146 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v146 - 8) + 8))(v179, v146);
    uint64_t v147 = (void (*)(void **, uint64_t))v170;
    v170((uint64_t)v135, v38);
    v147(v165, v38);
  }
  else
  {
    uint64_t v40 = v170;
    if (v34 == enum case for Parse.pegasusResults(_:))
    {
      (*(void (**)(void **, uint64_t))(v29 + 96))(v31, v28);
      uint64_t v41 = (void (*)(char *, void **, uint64_t))*((void *)v40 + 4);
      v166 = v27;
      uint64_t v42 = v25;
      v41(v27, v31, v25);
      uint64_t v43 = v178;
      (*((void (**)(void **, char *, uint64_t))v40 + 2))(v178, v27, v25);
      swift_storeEnumTagMultiPayload();
      uint64_t v44 = v180;
      outlined init with copy of IdentifiedUser?(v180, (uint64_t)v186, &demangling cache variable for type metadata for CurareInteractionStream?);
      outlined init with copy of OutputPublisherAsync((uint64_t)v187, (uint64_t)v184);
      static AceService.currentAsync.getter();
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      static Device.current.getter();
      type metadata accessor for CommonCATs();
      static CATOption.defaultMode.getter();
      uint64_t v45 = CATWrapper.__allocating_init(options:globals:)();
      type metadata accessor for InformationViewFactory();
      uint64_t v46 = (void *)swift_allocObject();
      id v47 = [self sharedPreferences];
      uint64_t v48 = type metadata accessor for PommesServerFallbackPreferences();
      swift_allocObject();
      uint64_t v49 = PommesServerFallbackPreferences.init(_:)();
      v46[11] = v48;
      v46[12] = &protocol witness table for PommesServerFallbackPreferences;
      v46[8] = v49;
      outlined init with take of PatternFlowProviding(v181, (uint64_t)(v46 + 3));
      v46[2] = v45;
      type metadata accessor for ExperienceSelector();
      uint64_t v50 = swift_allocObject();
      type metadata accessor for InformationRoutingFlow(0);
      uint64_t v51 = swift_allocObject();
      uint64_t v52 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v184, v185);
      __chkstk_darwin(v52);
      uint64_t v54 = (char *)&v164 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v55 + 16))(v54);
      uint64_t v56 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)((uint64_t)v43, (uint64_t)v183, (uint64_t)v182, (uint64_t)v46, v50, (uint64_t)v186, v175 & 1, (uint64_t)v54, v51, v176, v174);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v184);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v187);
      outlined destroy of Any?(v44, &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v57 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v179, v57);
      (*((void (**)(char *, uint64_t))v40 + 1))(v166, v42);
    }
    else if (v34 == enum case for Parse.pommesResponse(_:))
    {
      (*(void (**)(void **, uint64_t))(v29 + 96))(v31, v28);
      uint64_t v74 = *v31;
      uint64_t v75 = v178;
      *uint64_t v178 = *v31;
      *((unsigned char *)v75 + 8) = 2;
      swift_storeEnumTagMultiPayload();
      uint64_t v76 = v180;
      outlined init with copy of IdentifiedUser?(v180, (uint64_t)v186, &demangling cache variable for type metadata for CurareInteractionStream?);
      outlined init with copy of OutputPublisherAsync((uint64_t)v187, (uint64_t)v184);
      id v77 = v74;
      static AceService.currentAsync.getter();
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      static Device.current.getter();
      type metadata accessor for CommonCATs();
      static CATOption.defaultMode.getter();
      uint64_t v78 = CATWrapper.__allocating_init(options:globals:)();
      type metadata accessor for InformationViewFactory();
      uint64_t v79 = (void *)swift_allocObject();
      id v80 = [self sharedPreferences];
      uint64_t v81 = type metadata accessor for PommesServerFallbackPreferences();
      swift_allocObject();
      uint64_t v82 = PommesServerFallbackPreferences.init(_:)();
      v79[11] = v81;
      v79[12] = &protocol witness table for PommesServerFallbackPreferences;
      v79[8] = v82;
      outlined init with take of PatternFlowProviding(v181, (uint64_t)(v79 + 3));
      v79[2] = v78;
      type metadata accessor for ExperienceSelector();
      uint64_t v83 = swift_allocObject();
      type metadata accessor for InformationRoutingFlow(0);
      uint64_t v84 = swift_allocObject();
      uint64_t v85 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v184, v185);
      __chkstk_darwin(v85);
      v87 = (char *)&v164 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v88 + 16))(v87);
      uint64_t v56 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)((uint64_t)v75, (uint64_t)v183, (uint64_t)v182, (uint64_t)v79, v83, (uint64_t)v186, v175 & 1, (uint64_t)v87, v84, v176, v174);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v184);

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v187);
      outlined destroy of Any?(v76, &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v89 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v89 - 8) + 8))(v179, v89);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v187);
      outlined destroy of Any?(v180, &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v93 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v179, v93);
      (*(void (**)(void **, uint64_t))(v29 + 8))(v31, v28);
      return 0;
    }
  }
  return v56;
}

unint64_t specialized InformationRoutingFlow.Invocations.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of InformationRoutingFlow.Invocations.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t type metadata accessor for InformationRoutingFlow.State(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for InformationRoutingFlow.State);
}

uint64_t outlined assign with take of InformationRoutingFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InformationRoutingFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v27 = a7;
  uint64_t v25 = a3;
  uint64_t v26 = a6;
  uint64_t v28 = type metadata accessor for UtteranceNormalizer();
  uint64_t v16 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[3] = a10;
  v29[4] = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(boxed_opaque_existential_1, a8, a10);
  uint64_t v20 = a9 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_interactionStream;
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(void *)(v20 + 32) = 0;
  uint64_t v21 = a1;
  outlined init with copy of InformationRoutingFlow.State(a1, a9 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_state, type metadata accessor for InformationRoutingFlow.State);
  outlined init with copy of OutputPublisherAsync(a2, a9 + 56);
  uint64_t v22 = v25;
  outlined init with copy of OutputPublisherAsync(v25, a9 + 16);
  *(void *)(a9 + 96) = a4;
  *(void *)(a9 + 104) = a5;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  uint64_t v23 = v26;
  outlined assign with copy of CurareInteractionStream?(v26, v20);
  swift_endAccess();
  *(unsigned char *)(a9 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_isSiriLocationServicesPromptingEnabled) = v27;
  outlined init with copy of OutputPublisherAsync((uint64_t)v29, a9 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper);
  UtteranceNormalizer.init(locale:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  outlined destroy of Any?(v23, &demangling cache variable for type metadata for CurareInteractionStream?);
  __swift_destroy_boxed_opaque_existential_1(v22);
  __swift_destroy_boxed_opaque_existential_1(a2);
  outlined destroy of InformationRoutingFlow.State(v21, type metadata accessor for InformationRoutingFlow.State);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a9 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_utteranceNormalizer, v18, v28);
  return a9;
}

uint64_t specialized InformationRoutingFlow.__allocating_init(result:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = a3;
  uint64_t v28 = a6;
  int v29 = a2;
  uint64_t v26 = a1;
  uint64_t v8 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CATOption();
  __chkstk_darwin(v11 - 8);
  uint64_t v12 = type metadata accessor for InformationRoutingFlow.State(0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Parse.PegasusResult();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v14, a1, v15);
  swift_storeEnumTagMultiPayload();
  static AceService.currentAsync.getter();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  static Device.current.getter();
  type metadata accessor for CommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v17 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for InformationViewFactory();
  uint64_t v18 = (void *)swift_allocObject();
  id v19 = [self sharedPreferences];
  uint64_t v20 = type metadata accessor for PommesServerFallbackPreferences();
  swift_allocObject();
  uint64_t v21 = PommesServerFallbackPreferences.init(_:)();
  v18[11] = v20;
  v18[12] = &protocol witness table for PommesServerFallbackPreferences;
  v18[8] = v21;
  outlined init with take of PatternFlowProviding(v30, (uint64_t)(v18 + 3));
  v18[2] = v17;
  type metadata accessor for ExperienceSelector();
  uint64_t v22 = swift_allocObject();
  type metadata accessor for PommesResponse();
  static PommesResponse.makeDefaultInteractionStream()();
  type metadata accessor for InformationRoutingFlow(0);
  uint64_t v23 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v27, a5);
  uint64_t v24 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)((uint64_t)v14, (uint64_t)v32, (uint64_t)v31, (uint64_t)v18, v22, (uint64_t)v30, v29, (uint64_t)v10, v23, a5, v28);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v26, v15);
  return v24;
}

uint64_t partial apply for specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)()
{
  return specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_12BB0()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #3 in InformationRoutingFlow.execute()(uint64_t a1)
{
  return closure #3 in InformationRoutingFlow.execute()(a1, v1[2], v1[3], v1[4]);
}

unint64_t lazy protocol witness table accessor for type PromptForConfirmationFlowAsync<(), KnowledgeConfirmationResponseProvider> and conformance PromptForConfirmationFlowAsync<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptForConfirmationFlowAsync<(), KnowledgeConfirmationResponseProvider> and conformance PromptForConfirmationFlowAsync<A, B>;
  if (!lazy protocol witness table cache variable for type PromptForConfirmationFlowAsync<(), KnowledgeConfirmationResponseProvider> and conformance PromptForConfirmationFlowAsync<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PromptForConfirmationFlowAsync<(), KnowledgeConfirmationResponseProvider>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptForConfirmationFlowAsync<(), KnowledgeConfirmationResponseProvider> and conformance PromptForConfirmationFlowAsync<A, B>);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t specialized InformationRoutingFlow.needsPreciseLocation(with:)()
{
  uint64_t v0 = type metadata accessor for PommesRenderOptions.PromptType();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  unint64_t v4 = (unint64_t)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v26 - v5;
  unint64_t v7 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v8 = v7;
  if (v7 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9) {
      goto LABEL_3;
    }
LABEL_29:
    swift_bridgeObjectRelease_n();
    return 0;
  }
  uint64_t v9 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_29;
  }
LABEL_3:
  unint64_t v39 = v4;
  unint64_t v4 = 0;
  unint64_t v33 = v8 & 0xC000000000000001;
  unint64_t v27 = v8 + 32;
  unsigned int v32 = enum case for PommesRenderOptions.PromptType.sharePreciseDeviceLocation(_:);
  uint64_t v37 = v6;
  uint64_t v38 = v1 + 16;
  uint64_t v40 = (void (**)(char *, uint64_t))(v1 + 8);
  uint64_t v30 = (v1 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  os_log_type_t v31 = (void (**)(char *, void, uint64_t))(v1 + 104);
  uint64_t v28 = v9;
  unint64_t v29 = v8;
  uint64_t v26 = v1;
  while (1)
  {
    if (v33) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(v27 + 8 * v4);
    }
    id v12 = v11;
    if (__OFADD__(v4++, 1)) {
      goto LABEL_27;
    }
    uint64_t v14 = (void *)dispatch thunk of Experience.renderOptions.getter();
    uint64_t v15 = PommesRenderOptions.promptTypes.getter();

    (*v31)(v6, v32, v0);
    uint64_t v41 = *(void *)(v15 + 16);
    if (v41) {
      break;
    }
    uint64_t v10 = *v40;
LABEL_5:
    v10(v6, v0);

    swift_bridgeObjectRelease();
    if (v4 == v9) {
      goto LABEL_29;
    }
  }
  unint64_t v34 = v4;
  id v35 = v12;
  unint64_t v16 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v17 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1 + 16);
  unint64_t v18 = v39;
  v17(v39, v15 + v16, v0);
  lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(&lazy protocol witness table cache variable for type PommesRenderOptions.PromptType and conformance PommesRenderOptions.PromptType, (void (*)(uint64_t))&type metadata accessor for PommesRenderOptions.PromptType);
  uint64_t v36 = v15;
  swift_bridgeObjectRetain();
  char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10((char *)v18, v0);
  if (v19) {
    goto LABEL_24;
  }
  if (v41 == 1)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    uint64_t v9 = v28;
    unint64_t v8 = v29;
    unint64_t v4 = v34;
    id v12 = v35;
    goto LABEL_5;
  }
  uint64_t v1 = *(void *)(v1 + 72);
  unint64_t v20 = v39;
  v17(v39, v15 + v16 + v1, v0);
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  v10((char *)v20, v0);
  if ((v21 & 1) == 0)
  {
    if (v41 != 2)
    {
      unint64_t v4 = v36 + v16 + 2 * v1;
      uint64_t v6 = (unsigned char *)(&dword_0 + 2);
      while (1)
      {
        unint64_t v22 = v39;
        v17(v39, v4, v0);
        unint64_t v8 = (unint64_t)(v6 + 1);
        if (__OFADD__(v6, 1)) {
          break;
        }
        char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
        v10((char *)v22, v0);
        if (v23)
        {
          swift_bridgeObjectRelease();
          uint64_t v24 = v37;
          goto LABEL_25;
        }
        ++v6;
        v4 += v1;
        if (v8 == v41)
        {
          swift_bridgeObjectRelease();
          uint64_t v9 = v28;
          unint64_t v8 = v29;
          uint64_t v6 = v37;
          uint64_t v1 = v26;
          unint64_t v4 = v34;
          id v12 = v35;
          goto LABEL_5;
        }
      }
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    swift_bridgeObjectRelease();
    uint64_t v1 = v26;
    goto LABEL_17;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  uint64_t v24 = v6;
LABEL_25:
  v10(v24, v0);
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease();
  return 1;
}

uint64_t specialized RenderPegasusFlow.init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v53 = a8;
  uint64_t v54 = a7;
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v50 = a1;
  uint64_t v56 = a11;
  uint64_t v57 = a3;
  uint64_t v55 = a10;
  uint64_t v47 = a9;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for ActivityType();
  uint64_t v18 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  unint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Date();
  __chkstk_darwin(v21 - 8);
  uint64_t v22 = type metadata accessor for PerformanceUtil.Ticket();
  uint64_t v51 = *(void *)(v22 - 8);
  uint64_t v52 = v22;
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v49 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v44 = (char *)&v44 - v25;
  uint64_t v26 = type metadata accessor for PommesSystemAppChecking();
  uint64_t v59 = v26;
  uint64_t v60 = &protocol witness table for PommesSystemAppChecking;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v58);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(boxed_opaque_existential_1, v47, v26);
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_rrEntities) = &_swiftEmptyArrayStorage;
  outlined init with copy of InformationRoutingFlow.State(a1, a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_experience, (uint64_t (*)(void))type metadata accessor for PegasusExperience);
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_pommesResponse) = a2;
  outlined init with copy of OutputPublisherAsync(v57, a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_outputPublisher);
  uint64_t v28 = v46;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_informationViewFactory) = v45;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_renderComponentFlowFactory) = v28;
  uint64_t v47 = OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_flowTaskLogger;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_flowTaskLogger) = a6;
  id v29 = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v30 = v48;
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, enum case for ActivityType.start(_:), v48);
  uint64_t v31 = enum case for SiriKitReliabilityCodes.normal(_:);
  uint64_t v32 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v33 = *(void *)(v32 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 104))(v17, v31, v32);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v17, 0, 1, v32);
  (*(void (**)(char *, uint64_t, unint64_t, char *, unint64_t, unint64_t, uint64_t, unint64_t))(*(void *)a6 + 120))(v20, 0x6C7070615F746F6ELL, 0xEE00656C62616369, v17, 0xD000000000000018, 0x80000000000AE1E0, 0x54746E6572727543, 0xEB000000006B7361);
  outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v30);
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  unint64_t v34 = v44;
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  Date.init()();
  id v35 = v49;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v36 = *(void (**)(uint64_t))(**(void **)(a12 + v47) + 152);
  uint64_t v37 = swift_retain();
  v36(v37);
  swift_release();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v57);
  outlined destroy of InformationRoutingFlow.State(v50, (uint64_t (*)(void))type metadata accessor for PegasusExperience);
  uint64_t v38 = v52;
  unint64_t v39 = *(void (**)(char *, uint64_t))(v51 + 8);
  v39(v35, v52);
  v39(v34, v38);
  uint64_t v40 = v54;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_pegasusPatternFlowFactory) = v53;
  outlined init with take of PatternFlowProviding(v40, a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_aceServiceInvoker);
  outlined init with take of PatternFlowProviding(&v58, a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_appChecking);
  uint64_t v41 = (void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_responseProducerType);
  uint64_t v42 = v56;
  *uint64_t v41 = v55;
  v41[1] = v42;
  return a12;
}

uint64_t specialized InformationRoutingFlow.eligibleForKnowledgeFallback(response:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v34 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v34 - v14;
  if ((PommesResponse.isLowConfidenceKnowledgeResult.getter() & 1) == 0) {
    return 0;
  }
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.nlRoutingDecision.getter();
  swift_release();
  dispatch thunk of NLRoutingDecisionProvider.genAIFallbackSuppressReason.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
    return 1;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v15, v2, v3);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v17(v13, v15, v3);
  int v18 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v13, v3);
  if (v18 == enum case for NLRoutingDecisionMessage.GenAIFallbackSuppressReason.genAINotAvailable(_:))
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.information);
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v20, v21)) {
      goto LABEL_15;
    }
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    uint64_t v23 = "Suppressing knowledge fallback because GenAI is not available";
  }
  else
  {
    if (v18 != enum case for NLRoutingDecisionMessage.GenAIFallbackSuppressReason.userAgentCorrection(_:))
    {
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.information);
      v17(v10, v15, v3);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      int v28 = v27;
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v29 = swift_slowAlloc();
        int v36 = v28;
        uint64_t v30 = (uint8_t *)v29;
        uint64_t v37 = swift_slowAlloc();
        uint64_t v39 = v37;
        id v35 = v30;
        *(_DWORD *)uint64_t v30 = 136315138;
        unint64_t v34 = v30 + 4;
        v17(v7, v10, v3);
        uint64_t v31 = String.init<A>(describing:)();
        uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v33 = *(void (**)(char *, uint64_t))(v4 + 8);
        v33(v10, v3);
        _os_log_impl(&dword_0, v26, (os_log_type_t)v36, "Unknown knowledge fallback suppress reason: %s", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v33 = *(void (**)(char *, uint64_t))(v4 + 8);
        v33(v10, v3);
      }
      v33(v15, v3);
      v33(v13, v3);
      return 0;
    }
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.information);
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v20, v21)) {
      goto LABEL_15;
    }
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    uint64_t v23 = "Suppressing knowledge fallback because user specified an agent correction";
  }
  _os_log_impl(&dword_0, v20, v21, v23, v22, 2u);
  swift_slowDealloc();
LABEL_15:

  (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
  return 0;
}

uint64_t sub_13DA0()
{
  uint64_t v1 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in InformationRoutingFlow.execute()(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Parse.DirectInvocation() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void (*)(char *, char *, uint64_t))(v1
                                                    + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));

  return closure #1 in InformationRoutingFlow.execute()(a1, v4, v5);
}

uint64_t outlined init with take of Flow?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type OverrideGuardFlowStrategy and conformance OverrideGuardFlowStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type OverrideGuardFlowStrategy and conformance OverrideGuardFlowStrategy;
  if (!lazy protocol witness table cache variable for type OverrideGuardFlowStrategy and conformance OverrideGuardFlowStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OverrideGuardFlowStrategy and conformance OverrideGuardFlowStrategy);
  }
  return result;
}

uint64_t sub_13F98()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in InformationRoutingFlow.renderGuardFlow(_:)(unsigned __int8 *a1)
{
  return closure #1 in InformationRoutingFlow.renderGuardFlow(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t type metadata accessor for InformationRoutingFlow(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for InformationRoutingFlow);
}

uint64_t type metadata accessor for InformationRoutingFlow.State(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized InformationRoutingEntryPoint.flowFor(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v11[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  type metadata accessor for PommesResponse();
  static PommesResponse.makeDefaultInteractionStream()();
  int v6 = [self isSiriLocationServicesPromptingEnabled];
  uint64_t v7 = specialized InformationRoutingFlow.__allocating_init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)((uint64_t)v4, (uint64_t)v11, v6);
  if (!v7) {
    return 0;
  }
  v11[0] = v7;
  type metadata accessor for InformationRoutingFlow(0);
  lazy protocol witness table accessor for type KnowledgeFallbackConfirmationStrategy and conformance KnowledgeFallbackConfirmationStrategy(&lazy protocol witness table cache variable for type InformationRoutingFlow and conformance InformationRoutingFlow, (void (*)(uint64_t))type metadata accessor for InformationRoutingFlow);
  uint64_t v8 = Flow.eraseToAnyFlow()();
  swift_release();
  return v8;
}

unint64_t lazy protocol witness table accessor for type InformationRoutingFlow.Invocations and conformance InformationRoutingFlow.Invocations()
{
  unint64_t result = lazy protocol witness table cache variable for type InformationRoutingFlow.Invocations and conformance InformationRoutingFlow.Invocations;
  if (!lazy protocol witness table cache variable for type InformationRoutingFlow.Invocations and conformance InformationRoutingFlow.Invocations)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InformationRoutingFlow.Invocations and conformance InformationRoutingFlow.Invocations);
  }
  return result;
}

uint64_t sub_1420C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 160))();
}

uint64_t sub_14250(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 168))();
}

uint64_t sub_14294(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 184))();
}

uint64_t ObjC metadata update function for InformationRoutingFlow()
{
  return type metadata accessor for InformationRoutingFlow(0);
}

uint64_t type metadata completion function for InformationRoutingFlow()
{
  uint64_t result = type metadata accessor for InformationRoutingFlow.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UtteranceNormalizer();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for InformationRoutingFlow.State(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *(char **)a2;
    *(void *)a1 = *(void *)a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = *(char **)a2;
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        uint64_t v8 = v7;
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v11 = type metadata accessor for Parse.PegasusResult();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v12 = *(char **)a2;
        *(void *)a1 = *(void *)a2;
        uint64_t v13 = v12;
        uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PommesResponse, IdentifiedUser?))
                     + 48);
        uint64_t v15 = &a1[v14];
        uint64_t v16 = &a2[v14];
        uint64_t v17 = type metadata accessor for IdentifiedUser();
        uint64_t v18 = *(void *)(v17 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        {
          uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
      case 4u:
      case 5u:
      case 9u:
      case 0xAu:
        uint64_t v23 = type metadata accessor for Parse.DirectInvocation();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(a1, a2, v23);
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        uint64_t v20 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v20;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        long long v21 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v21;
        (**(void (***)(void *, const void *))(v21 - 8))(a1, a2);
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        uint64_t v22 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v22;
        *((void *)a1 + 2) = *((void *)a2 + 2);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for InformationRoutingFlow.State(id *a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      id v6 = *a1;

      return;
    case 1u:
      uint64_t v2 = type metadata accessor for Parse.PegasusResult();
      goto LABEL_3;
    case 2u:

      uint64_t v7 = (id *)((char *)a1
                + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PommesResponse, IdentifiedUser?))
                         + 48));
      uint64_t v8 = type metadata accessor for IdentifiedUser();
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
        return;
      }
      uint64_t v3 = *(void (**)(id *, uint64_t))(v9 + 8);
      int v5 = v7;
      uint64_t v4 = v8;
LABEL_4:
      v3(v5, v4);
      return;
    case 3u:
    case 4u:
    case 5u:
    case 9u:
    case 0xAu:
      uint64_t v2 = type metadata accessor for Parse.DirectInvocation();
LABEL_3:
      uint64_t v3 = *(void (**)(id *, uint64_t))(*(void *)(v2 - 8) + 8);
      uint64_t v4 = v2;
      int v5 = a1;
      goto LABEL_4;
    case 6u:
      swift_bridgeObjectRelease();
      return;
    case 7u:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      return;
    case 8u:
      swift_bridgeObjectRelease();
      swift_release();
      return;
    default:
      return;
  }
}

char *initializeWithCopy for InformationRoutingFlow.State(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      id v6 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      id v7 = v6;
      goto LABEL_12;
    case 1u:
      uint64_t v8 = type metadata accessor for Parse.PegasusResult();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      goto LABEL_12;
    case 2u:
      uint64_t v9 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v10 = v9;
      uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PommesResponse, IdentifiedUser?))
                   + 48);
      uint64_t v12 = &a1[v11];
      uint64_t v13 = &a2[v11];
      uint64_t v14 = type metadata accessor for IdentifiedUser();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      goto LABEL_12;
    case 3u:
    case 4u:
    case 5u:
    case 9u:
    case 0xAu:
      uint64_t v20 = type metadata accessor for Parse.DirectInvocation();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
      goto LABEL_12;
    case 6u:
      uint64_t v17 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v17;
      swift_bridgeObjectRetain();
      goto LABEL_12;
    case 7u:
      long long v18 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v18;
      (**(void (***)(void *, const void *))(v18 - 8))(a1, a2);
      goto LABEL_12;
    case 8u:
      uint64_t v19 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v19;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_retain();
LABEL_12:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithCopy for InformationRoutingFlow.State(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of InformationRoutingFlow.State((uint64_t)a1, type metadata accessor for InformationRoutingFlow.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        id v6 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        id v7 = v6;
        goto LABEL_13;
      case 1u:
        uint64_t v8 = type metadata accessor for Parse.PegasusResult();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_13;
      case 2u:
        uint64_t v9 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v10 = v9;
        uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PommesResponse, IdentifiedUser?))
                     + 48);
        uint64_t v12 = &a1[v11];
        uint64_t v13 = &a2[v11];
        uint64_t v14 = type metadata accessor for IdentifiedUser();
        uint64_t v15 = *(void *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        goto LABEL_13;
      case 3u:
      case 4u:
      case 5u:
      case 9u:
      case 0xAu:
        uint64_t v18 = type metadata accessor for Parse.DirectInvocation();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        goto LABEL_13;
      case 6u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_13;
      case 7u:
        uint64_t v17 = *((void *)a2 + 3);
        *((void *)a1 + 3) = v17;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        (**(void (***)(void *, const void *))(v17 - 8))(a1, a2);
        goto LABEL_13;
      case 8u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        *((void *)a1 + 2) = *((void *)a2 + 2);
        swift_bridgeObjectRetain();
        swift_retain();
LABEL_13:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for InformationRoutingFlow.State(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = type metadata accessor for Parse.PegasusResult();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      goto LABEL_8;
    case 2u:
      *a1 = *a2;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PommesResponse, IdentifiedUser?))
                  + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for IdentifiedUser();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      goto LABEL_8;
    case 3u:
    case 4u:
    case 5u:
    case 9u:
    case 0xAu:
      uint64_t v13 = type metadata accessor for Parse.DirectInvocation();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithTake for InformationRoutingFlow.State(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of InformationRoutingFlow.State((uint64_t)a1, type metadata accessor for InformationRoutingFlow.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v6 = type metadata accessor for Parse.PegasusResult();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        goto LABEL_9;
      case 2u:
        *a1 = *a2;
        uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PommesResponse, IdentifiedUser?))
                    + 48);
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v10 = type metadata accessor for IdentifiedUser();
        uint64_t v11 = *(void *)(v10 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
        {
          uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
        }
        goto LABEL_9;
      case 3u:
      case 4u:
      case 5u:
      case 9u:
      case 0xAu:
        uint64_t v13 = type metadata accessor for Parse.DirectInvocation();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InformationRoutingFlow.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for InformationRoutingFlow.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for InformationRoutingFlow.State()
{
  return swift_storeEnumTagMultiPayload();
}

void type metadata completion function for InformationRoutingFlow.State()
{
  uint64_t v6 = "\t";
  uint64_t v0 = type metadata accessor for Parse.PegasusResult();
  if (v1 <= 0x3F)
  {
    uint64_t v7 = *(void *)(v0 - 8) + 64;
    type metadata accessor for IdentifiedUser?();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v8 = &v5;
      uint64_t v3 = type metadata accessor for Parse.DirectInvocation();
      if (v4 <= 0x3F)
      {
        uint64_t v9 = *(void *)(v3 - 8) + 64;
        uint64_t v10 = v9;
        uint64_t v11 = v9;
        uint64_t v12 = &unk_AB290;
        uint64_t v13 = "(";
        uint64_t v14 = &unk_AB2A8;
        uint64_t v15 = v9;
        uint64_t v16 = v9;
        swift_initEnumMetadataMultiPayload();
      }
    }
  }
}

void type metadata accessor for IdentifiedUser?()
{
  if (!lazy cache variable for type metadata for IdentifiedUser?)
  {
    type metadata accessor for IdentifiedUser();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IdentifiedUser?);
    }
  }
}

uint64_t getEnumTagSinglePayload for InformationRoutingFlow.Invocations(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for InformationRoutingFlow.Invocations(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x15DD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for InformationRoutingFlow.Invocations(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for InformationRoutingFlow.Invocations()
{
  return &type metadata for InformationRoutingFlow.Invocations;
}

ValueMetadata *type metadata accessor for InformationRoutingEntryPoint()
{
  return &type metadata for InformationRoutingEntryPoint;
}

uint64_t protocol witness for FlowEntryPoint.flowFor(input:) in conformance InformationRoutingEntryPoint(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t partial apply for closure #1 in FlowTrampolining.makeResponse(for:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in FlowTrampolining.makeResponse(for:)(a1);
}

uint64_t outlined init with copy of IdentifiedUser?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_15ED4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t partial apply for closure #1 in InformationRoutingFlow.renderPommesFlow(_:)(uint64_t a1)
{
  return closure #1 in InformationRoutingFlow.renderPommesFlow(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48));
}

uint64_t partial apply for closure #1 in RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)()
{
  return closure #1 in RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t outlined init with copy of InformationRoutingFlow.State(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of InformationRoutingFlow.State(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined assign with copy of CurareInteractionStream?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurareInteractionStream?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in FlowTrampolining.makeResponse(for:)partial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in FlowTrampolining.makeResponse(for:)(a1);
}

uint64_t closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)specialized partial apply()
{
  return partial apply for specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)();
}

uint64_t static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v89 = a5;
  uint64_t v95 = a3;
  uint64_t v101 = a1;
  uint64_t v7 = type metadata accessor for SportsResolverMetrics();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v94 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsResolverMetrics?);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v90 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v93 = (char *)&v80 - v13;
  uint64_t v88 = a4;
  uint64_t v99 = type metadata accessor for SportsPersonalizationSelection();
  uint64_t v97 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v96 = (char *)&v80 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v98 = (uint64_t)&v80 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v80 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v83 = (char *)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  os_log_type_t v27 = (char *)&v80 - v26;
  uint64_t v87 = type metadata accessor for SportsResolverConfig();
  uint64_t v86 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v100 = (char *)&v80 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of IdentifiedUser?(a2, (uint64_t)v22, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  unsigned int v32 = v31(v22, 1, v29);
  uint64_t v91 = v7;
  uint64_t v92 = v8;
  uint64_t v85 = v18;
  uint64_t v84 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v31;
  if (v32 == 1)
  {
    uint64_t v33 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?;
    uint64_t v34 = (uint64_t)v22;
LABEL_8:
    outlined destroy of Any?(v34, v33);
    goto LABEL_10;
  }
  uint64_t v35 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v29);
  uint64_t v36 = *(void *)(v35 + 16);
  uint64_t v37 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  uint64_t v38 = *(void *)(v37 - 8);
  if (v36)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v27, v35+ ((*(unsigned __int8 *)(*(void *)(v37 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v37 - 8) + 80)), v37);
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v39 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v27, v39, 1, v37);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v27, 1, v37) == 1)
  {
    uint64_t v33 = &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?;
    uint64_t v34 = (uint64_t)v27;
    goto LABEL_8;
  }
  Apple_Parsec_Siri_Context_ResultEntity.name.getter();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v37);
LABEL_10:
  uint64_t v40 = (uint64_t)v100;
  uint64_t v42 = v96;
  uint64_t v41 = v97;
  SportsResolverConfig.init(intentTypeName:bundleId:)();
  uint64_t v43 = a2;
  uint64_t v44 = v98;
  outlined init with copy of IdentifiedUser?(v43, v98, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v45 = v99;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v42, v101, v99);
  uint64_t v46 = v41;
  uint64_t v47 = Logger.logObject.getter();
  int v48 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v47, (os_log_type_t)v48))
  {
    int v82 = v48;
    uint64_t v49 = swift_slowAlloc();
    uint64_t v81 = swift_slowAlloc();
    v103[0] = v81;
    *(_DWORD *)uint64_t v49 = 136315394;
    uint64_t v50 = (uint64_t)v85;
    outlined init with copy of IdentifiedUser?(v44, (uint64_t)v85, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    if (v84(v50, 1, v29) == 1)
    {
      outlined destroy of Any?(v50, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
      unint64_t v51 = 0xE700000000000000;
      uint64_t v53 = v92;
      uint64_t v52 = (uint64_t)v93;
      uint64_t v54 = 0x6E776F6E6B6E75;
    }
    else
    {
      uint64_t v59 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v50, v29);
      uint64_t v60 = *(void *)(v59 + 16);
      uint64_t v61 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
      uint64_t v62 = *(void *)(v61 - 8);
      uint64_t v54 = 0x6E776F6E6B6E75;
      if (v60)
      {
        uint64_t v63 = (uint64_t)v83;
        (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v61 - 8) + 16))(v83, v59+ ((*(unsigned __int8 *)(*(void *)(v61 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v61 - 8) + 80)), v61);
        uint64_t v64 = 0;
      }
      else
      {
        uint64_t v64 = 1;
        uint64_t v63 = (uint64_t)v83;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v63, v64, 1, v61);
      swift_bridgeObjectRelease();
      int v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v63, 1, v61);
      uint64_t v53 = v92;
      uint64_t v52 = (uint64_t)v93;
      if (v65 == 1)
      {
        outlined destroy of Any?(v63, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
        unint64_t v51 = 0xE700000000000000;
      }
      else
      {
        uint64_t v54 = Apple_Parsec_Siri_Context_ResultEntity.name.getter();
        unint64_t v51 = v66;
        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v63, v61);
      }
    }
    uint64_t v67 = v98;
    uint64_t v102 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v51, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Any?(v67, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    *(_WORD *)(v49 + 12) = 2080;
    uint64_t v68 = v99;
    uint64_t v58 = v89;
    uint64_t v69 = v96;
    uint64_t v70 = SportsPersonalizationSelection<A>.debugDescription.getter(v99, v89);
    uint64_t v102 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v69, v68);
    _os_log_impl(&dword_0, v47, (os_log_type_t)v82, "Logging sports personalization metrics: intent=%s selection=%s", (uint8_t *)v49, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v56 = v94;
    uint64_t v40 = (uint64_t)v100;
    uint64_t v57 = (uint64_t)v90;
    uint64_t v55 = v91;
  }
  else
  {

    outlined destroy of Any?(v44, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v42, v45);
    uint64_t v55 = v91;
    uint64_t v53 = v92;
    uint64_t v52 = (uint64_t)v93;
    uint64_t v56 = v94;
    uint64_t v58 = v89;
    uint64_t v57 = (uint64_t)v90;
  }
  closure #1 in static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(v101, v40, v88, v58, v52);
  outlined init with copy of IdentifiedUser?(v52, v57, &demangling cache variable for type metadata for SportsResolverMetrics?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v57, 1, v55) == 1)
  {
    outlined destroy of Any?(v52, &demangling cache variable for type metadata for SportsResolverMetrics?);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v40, v87);
    return outlined destroy of Any?(v57, &demangling cache variable for type metadata for SportsResolverMetrics?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v56, v57, v55);
    SportsResolverMetrics.logSportsMetric()();
    if (v73)
    {
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = (uint8_t *)swift_slowAlloc();
        v103[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v76 = 136315138;
        swift_getErrorValue();
        uint64_t v77 = Error.localizedDescription.getter();
        uint64_t v102 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl(&dword_0, v74, v75, "Logging sports metrics failed with: %s", v76, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v94, v55);
        uint64_t v79 = (uint64_t)v93;
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v55);
        uint64_t v79 = v52;
      }
      outlined destroy of Any?(v79, &demangling cache variable for type metadata for SportsResolverMetrics?);
      return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v100, v87);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v55);
      outlined destroy of Any?(v52, &demangling cache variable for type metadata for SportsResolverMetrics?);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v86 + 8))(v40, v87);
    }
  }
}

uint64_t closure #1 in static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v9 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SportsResolverConfig();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for SportsPersonalizationSelection();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v24 - v17;
  (*(void (**)(char *, uint64_t))(v19 + 16))((char *)&v24 - v17, a1);
  int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v18, 2, a3);
  if (v20)
  {
    if (v20 == 1)
    {
      uint64_t v21 = type metadata accessor for SportsResolverMetrics();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a5, 1, 1, v21);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
    SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v18, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
    (*(void (**)(uint64_t))(v25 + 8))(a3);
    SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a3);
  }
  uint64_t v23 = type metadata accessor for SportsResolverMetrics();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a5, 0, 1, v23);
}

ValueMetadata *type metadata accessor for SportsPersonalizationMetrics()
{
  return &type metadata for SportsPersonalizationMetrics;
}

uint64_t PushOffQueryFlow.__allocating_init(query:renderComponentFlowFactory:pommesSearchClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  uint64_t v8 = specialized PushOffQueryFlow.init(query:renderComponentFlowFactory:pommesSearchClient:)(a1, a2, a3, a4);
  swift_release();
  return v8;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

BOOL static Features.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void Features.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

_UNKNOWN **static PushOffQueryError.allCases.getter()
{
  return &outlined read-only object #0 of static PushOffQueryError.allCases.getter;
}

Swift::Int Features.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PushOffQueryError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for Error._domain.getter in conformance PushOffQueryError()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance PushOffQueryError()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance PushOffQueryError()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance PushOffQueryError()
{
  return Error._getEmbeddedNSError()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance PushOffQueryError(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance PushOffQueryError;
}

void one-time initialization function for defaultPegasusBundleIdentifiers()
{
  static PushOffQueryFlow.defaultPegasusBundleIdentifiers = (uint64_t)&outlined read-only object #0 of one-time initialization function for defaultPegasusBundleIdentifiers;
}

{
  static SearchFlow.defaultPegasusBundleIdentifiers = (uint64_t)&outlined read-only object #0 of one-time initialization function for defaultPegasusBundleIdentifiers;
}

uint64_t *PushOffQueryFlow.defaultPegasusBundleIdentifiers.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultPegasusBundleIdentifiers != -1) {
    swift_once();
  }
  return &static PushOffQueryFlow.defaultPegasusBundleIdentifiers;
}

uint64_t static PushOffQueryFlow.defaultPegasusBundleIdentifiers.getter()
{
  if (one-time initialization token for defaultPegasusBundleIdentifiers != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

void *PushOffQueryFlow.userCanceledCatId.unsafeMutableAddressor()
{
  return &static PushOffQueryFlow.userCanceledCatId;
}

unint64_t static SearchFlow.userCanceledCatId.getter()
{
  return 0xD000000000000010;
}

void *PushOffQueryFlow.noMoreItemsCatId.unsafeMutableAddressor()
{
  return &static PushOffQueryFlow.noMoreItemsCatId;
}

unint64_t static SearchFlow.noMoreItemsCatId.getter()
{
  return 0xD000000000000012;
}

uint64_t key path setter for PushOffQueryFlow.nlContextUpdate : PushOffQueryFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of IdentifiedUser?(a1, (uint64_t)v6, &demangling cache variable for type metadata for NLContextUpdate?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 152))(v6);
}

uint64_t PushOffQueryFlow.nlContextUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_nlContextUpdate;
  swift_beginAccess();
  return outlined init with copy of IdentifiedUser?(v3, a1, &demangling cache variable for type metadata for NLContextUpdate?);
}

uint64_t PushOffQueryFlow.nlContextUpdate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_nlContextUpdate;
  swift_beginAccess();
  outlined assign with take of NLContextUpdate?(a1, v3);
  return swift_endAccess();
}

uint64_t (*PushOffQueryFlow.nlContextUpdate.modify())()
{
  return InformationRoutingFlow.state.modify;
}

uint64_t PushOffQueryFlow.targetedRequest.getter()
{
  return swift_retain();
}

uint64_t PushOffQueryFlow.targetedRequest.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_targetedRequest);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*PushOffQueryFlow.targetedRequest.modify())()
{
  return PushOffQueryFlow.targetedRequest.modify;
}

uint64_t PushOffQueryFlow.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_outputPublisher, a1);
}

uint64_t PushOffQueryFlow.informationViewFactory.getter()
{
  return swift_retain();
}

void key path setter for PushOffQueryFlow.state : PushOffQueryFlow(uint64_t a1, void *a2)
{
  int v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *a2 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
  char v5 = *(unsigned char *)(a1 + 16);
  swift_beginAccess();
  unsigned int v6 = *(void **)v4;
  uint64_t v7 = *(void **)(v4 + 8);
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = v3;
  char v8 = *(unsigned char *)(v4 + 16);
  *(unsigned char *)(v4 + 16) = v5;
  outlined copy of PushOffQueryFlow.State(v2, v3, v5);
  outlined copy of PushOffQueryFlow.State(v2, v3, v5);
  outlined consume of PushOffQueryFlow.State(v6, v7, v8);
  PushOffQueryFlow.state.didset();
  outlined consume of PushOffQueryFlow.State(v2, v3, v5);
}

void PushOffQueryFlow.state.didset()
{
  uint64_t v1 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  swift_retain_n();
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v10 = v5;
    uint64_t v6 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
    swift_beginAccess();
    outlined copy of PushOffQueryFlow.State(*(id *)v6, *(id *)(v6 + 8), *(unsigned char *)(v6 + 16));
    uint64_t v7 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, oslog, v3, "#PushOffQueryFlow transitioning to state %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
}

id PushOffQueryFlow.state.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
  swift_beginAccess();
  id v2 = *(id *)v1;
  outlined copy of PushOffQueryFlow.State(*(id *)v1, *(id *)(v1 + 8), *(unsigned char *)(v1 + 16));
  return v2;
}

uint64_t PushOffQueryFlow.init(query:renderComponentFlowFactory:pommesSearchClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = specialized PushOffQueryFlow.init(query:renderComponentFlowFactory:pommesSearchClient:)(a1, a2, a3, a4);
  swift_release();
  return v4;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PushOffQueryFlow.State(uint64_t a1, uint64_t a2)
{
  return specialized static PushOffQueryFlow.State.== infix(_:_:)(*(void **)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

void PushOffQueryFlow.setState(_:)(void *a1, void *a2, char a3)
{
  uint64_t v7 = v3 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
  swift_beginAccess();
  unint64_t v8 = *(void **)v7;
  uint64_t v9 = *(void **)(v7 + 8);
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = a2;
  char v10 = *(unsigned char *)(v7 + 16);
  *(unsigned char *)(v7 + 16) = a3;
  outlined copy of PushOffQueryFlow.State(a1, a2, a3);
  outlined copy of PushOffQueryFlow.State(a1, a2, a3);
  outlined consume of PushOffQueryFlow.State(v8, v9, v10);
  PushOffQueryFlow.state.didset();
  outlined consume of PushOffQueryFlow.State(a1, a2, a3);
}

uint64_t PushOffQueryFlow.on(input:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Parse();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (void **)&v36[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Input();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = &v36[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.information);
  BOOL v12 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v42 = a1;
  v12(v10, a1, v7);
  swift_retain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  int v15 = v14;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v39 = v6;
    uint64_t v17 = v16;
    uint64_t v38 = swift_slowAlloc();
    uint64_t v43 = v38;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v41 = v3;
    uint64_t v18 = *v1;
    int v37 = v15;
    uint64_t v44 = (*(uint64_t (**)(void))(v18 + 192))();
    uint64_t v45 = v19;
    char v46 = v20;
    uint64_t v40 = v4;
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v23 = Input.description.getter();
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v43);
    uint64_t v4 = v40;
    uint64_t v3 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl(&dword_0, v13, (os_log_type_t)v37, "#PushOffQueryFlow entering on(input:) with state: %s, input: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v39;
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  }

  uint64_t v25 = (*(uint64_t (**)(void))(*v1 + 192))();
  if (v27 != 3 || v25 | v26)
  {
    outlined consume of PushOffQueryFlow.State((void *)v25, (id)v26, v27);
    return 0;
  }
  Input.parse.getter();
  if ((*(unsigned int (**)(void **, uint64_t))(v4 + 88))(v6, v3) != enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v4 + 8))(v6, v3);
    return 0;
  }
  (*(void (**)(void **, uint64_t))(v4 + 96))(v6, v3);
  uint64_t v28 = *v6;
  uint64_t v29 = (uint64_t)v1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
  uint64_t v30 = 1;
  swift_beginAccess();
  uint64_t v31 = *(void **)v29;
  unsigned int v32 = *(void **)(v29 + 8);
  *(void *)uint64_t v29 = v28;
  *(void *)(v29 + 8) = 0;
  char v33 = *(unsigned char *)(v29 + 16);
  *(unsigned char *)(v29 + 16) = 1;
  id v34 = v28;
  outlined consume of PushOffQueryFlow.State(v31, v32, v33);
  PushOffQueryFlow.state.didset();

  return v30;
}

uint64_t PushOffQueryFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 160) = v1;
  return _swift_task_switch(PushOffQueryFlow.execute(), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 232) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = PushOffQueryFlow.execute();
  }
  else
  {
    *(void *)(v4 + 240) = a1;
    uint64_t v5 = PushOffQueryFlow.execute();
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t PushOffQueryFlow.execute()()
{
  uint64_t v38 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 168) = __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 160);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v0 + 104) = (*(uint64_t (**)(void))(*(void *)v6 + 192))();
    *(void *)(v0 + 112) = v8;
    *(unsigned char *)(v0 + 120) = v9;
    uint64_t v10 = String.init<A>(describing:)();
    *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v37);
    uint64_t v1 = (void *)(v0 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v3, v4, "#PushOffQueryFlow entering execute with state: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  *(void *)(v0 + 176) = v6;
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(v0 + 160) + 192))();
  *(void *)(v0 + 184) = v12;
  *(void *)(v0 + 192) = v13;
  os_log_type_t v14 = (void *)v12;
  switch(v15)
  {
    case 1:
      char v27 = *(int **)(**(void **)(v0 + 160) + 256);
      uint64_t v36 = (uint64_t (*)(uint64_t, void *))((char *)v27 + *v27);
      uint64_t v28 = (void *)swift_task_alloc();
      *(void *)(v0 + 216) = v28;
      *uint64_t v28 = v0;
      v28[1] = PushOffQueryFlow.execute();
      uint64_t v29 = *(void *)(v0 + 152);
      return v36(v29, v14);
    case 2:
      goto LABEL_18;
    case 3:
      static ExecuteResponse.ongoing(requireInput:)();
      goto LABEL_19;
    default:
      uint64_t v16 = v13;
      uint64_t v17 = *(void *)(v0 + 160);
      uint64_t v18 = OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
      *(void *)(v0 + 200) = OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
      uint64_t v19 = v17 + v18;
      swift_beginAccess();
      char v20 = *(void **)v19;
      uint64_t v21 = *(void **)(v19 + 8);
      *(void *)uint64_t v19 = 0;
      *(void *)(v19 + 8) = 0;
      char v22 = *(unsigned char *)(v19 + 16);
      *(unsigned char *)(v19 + 16) = 3;
      outlined consume of PushOffQueryFlow.State(v20, v21, v22);
      PushOffQueryFlow.state.didset();
      uint64_t v23 = (void *)PushOffQueryFlow.buildPommesSearchRequest(query:)((uint64_t)v14, (uint64_t)v16);
      *(void *)(v0 + 208) = v23;
      outlined consume of PushOffQueryFlow.State(v14, v16, 0);
      if (!v23) {
        goto LABEL_17;
      }
      outlined init with copy of IdentifiedUser?(*(void *)(v0 + 160) + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_pommesSearchClient, (uint64_t)v1, &demangling cache variable for type metadata for PommesXPCSearching?);
      uint64_t v24 = *(void *)(v0 + 40);
      if (v24)
      {
        uint64_t v25 = *(void *)(v0 + 48);
        __swift_project_boxed_opaque_existential_1(v1, *(void *)(v0 + 40));
        unint64_t v26 = (void *)swift_task_alloc();
        *(void *)(v0 + 224) = v26;
        *unint64_t v26 = v0;
        v26[1] = PushOffQueryFlow.execute();
        return dispatch thunk of PommesXPCSearching.searchInfiEntity(request:)(v23, v24, v25);
      }
      else
      {

        outlined destroy of Any?((uint64_t)v1, &demangling cache variable for type metadata for PommesXPCSearching?);
LABEL_17:
        uint64_t v30 = *(void *)(v0 + 160) + *(void *)(v0 + 200);
        uint64_t v31 = *(void **)v30;
        unsigned int v32 = *(void **)(v30 + 8);
        *(void *)uint64_t v30 = 0;
        *(void *)(v30 + 8) = 0;
        char v33 = *(unsigned char *)(v30 + 16);
        *(unsigned char *)(v30 + 16) = 2;
        outlined consume of PushOffQueryFlow.State(v31, v32, v33);
        PushOffQueryFlow.state.didset();
LABEL_18:
        static ExecuteResponse.complete()();
LABEL_19:
        id v34 = *(uint64_t (**)(void))(v0 + 8);
        return v34();
      }
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(PushOffQueryFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of PushOffQueryFlow.State(*(void **)(v0 + 184), *(id *)(v0 + 192), 1);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  char v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v1 = (void *)v0[30];
  uint64_t v2 = v0[20];
  uint64_t v3 = v2 + v0[25];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  os_log_type_t v4 = *(void **)v3;
  BOOL v5 = *(void **)(v3 + 8);
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = 0;
  uint64_t v6 = *(unsigned char *)(v3 + 16);
  *(unsigned char *)(v3 + 16) = 1;
  uint64_t v7 = v1;
  outlined consume of PushOffQueryFlow.State(v4, v5, v6);
  PushOffQueryFlow.state.didset();

  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 256) + **(int **)(*(void *)v2 + 256));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[31] = v8;
  *uint64_t v8 = v0;
  v8[1] = PushOffQueryFlow.execute();
  char v9 = v0[30];
  uint64_t v10 = v0[19];
  return v12(v10, v9);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(PushOffQueryFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 208);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v13 = v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    os_log_type_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v1, v2, "#PushOffQueryFlow requestInfiEntityResolution call has an error %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = *(void *)(v0 + 160) + *(void *)(v0 + 200);
  uint64_t v7 = *(void **)v6;
  uint64_t v8 = *(void **)(v6 + 8);
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  char v9 = *(unsigned char *)(v6 + 16);
  *(unsigned char *)(v6 + 16) = 2;
  outlined consume of PushOffQueryFlow.State(v7, v8, v9);
  PushOffQueryFlow.state.didset();
  static ExecuteResponse.complete()();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t PushOffQueryFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t PushOffQueryFlow.handlePommesResponse(_:)(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return _swift_task_switch(PushOffQueryFlow.handlePommesResponse(_:), 0, 0);
}

uint64_t PushOffQueryFlow.handlePommesResponse(_:)()
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#PushOffQueryFlow going to handlePommesResponse...", v4, 2u);
    swift_slowDealloc();
  }

  if (specialized PushOffQueryFlow.isUserCanceled(pommesResponse:)())
  {
    uint64_t v5 = v0[7] + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
    swift_beginAccess();
    uint64_t v6 = *(void **)v5;
    uint64_t v7 = *(void **)(v5 + 8);
    *(_OWORD *)uint64_t v5 = xmmword_AB360;
    char v8 = *(unsigned char *)(v5 + 16);
    *(unsigned char *)(v5 + 16) = 2;
    outlined consume of PushOffQueryFlow.State(v6, v7, v8);
    PushOffQueryFlow.state.didset();
    static ExecuteResponse.complete()();
LABEL_15:
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  uint64_t v9 = dispatch thunk of PommesResponse.primaryPluginIdentifier()();
  if (v10)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
    if (one-time initialization token for defaultPegasusBundleIdentifiers != -1) {
      swift_once();
    }
    char v13 = specialized Sequence<>.contains(_:)(v11, v12, (void *)static PushOffQueryFlow.defaultPegasusBundleIdentifiers);
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      PushOffQueryFlow.handleClientDrivenExperience(pommesResponse:)(v0[6]);
      goto LABEL_15;
    }
  }
  os_log_type_t v14 = (void *)swift_task_alloc();
  v0[8] = v14;
  *os_log_type_t v14 = v0;
  v14[1] = PushOffQueryFlow.handlePommesResponse(_:);
  uint64_t v15 = v0[6];
  uint64_t v16 = v0[5];
  return PushOffQueryFlow.handleServerDrivenExperience(pommesResponse:)(v16, v15);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  os_log_type_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t PushOffQueryFlow.buildPommesSearchRequest(query:)(uint64_t a1, uint64_t a2)
{
  uint64_t v79 = a2;
  uint64_t v80 = a1;
  uint64_t v3 = type metadata accessor for DeviceRestrictions();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for InputOrigin();
  uint64_t v91 = *(void *)(v7 - 8);
  uint64_t v92 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v88 = (char *)v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v87 = (char *)v70 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v86 = (char *)v70 - v13;
  __chkstk_darwin(v12);
  uint64_t v85 = (char *)v70 - v14;
  uint64_t v15 = type metadata accessor for ResponseMode();
  uint64_t v83 = *(void *)(v15 - 8);
  uint64_t v84 = v15;
  __chkstk_darwin(v15);
  int v82 = (char *)v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioSource?);
  __chkstk_darwin(v20 - 8);
  unint64_t v78 = (char *)v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for MultiUserState();
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for ParseStateXPC();
  uint64_t v77 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  char v27 = (char *)v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v89 = *(void *)(v28 - 8);
  uint64_t v90 = v28;
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v31 = (char *)v70 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v29);
  uint64_t v81 = v19;
  if (v32)
  {
    uint64_t v33 = v32;
  }
  else
  {
    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    uint64_t v33 = SiriEnvironment.currentRequest.getter();
    swift_release();
  }
  uint64_t v34 = CurrentRequest.executionRequestId.getter();
  if (!v35)
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.information);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v50, v51)) {
      goto LABEL_17;
    }
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v52 = 0;
    uint64_t v53 = "#PushOffQueryFlow executionRequestId is not available, cannot construct PommesSearchRequestXPC";
    goto LABEL_16;
  }
  uint64_t v73 = v34;
  uint64_t v74 = v6;
  uint64_t v75 = v4;
  uint64_t v36 = CurrentRequest.resultCandidateId.getter();
  if (!v37)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.information);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v50, v51)) {
      goto LABEL_17;
    }
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v52 = 0;
    uint64_t v53 = "#PushOffQueryFlow resultCandidateId is not available, cannot construct PommesSearchRequestXPC";
LABEL_16:
    _os_log_impl(&dword_0, v50, v51, v53, v52, 2u);
    swift_slowDealloc();
LABEL_17:

    swift_release();
    return 0;
  }
  uint64_t v38 = v37;
  uint64_t v72 = v3;
  v70[0] = v36;
  lazy protocol witness table accessor for type PushOffQueryFlow and conformance PushOffQueryFlow(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserParse);
  uint64_t v39 = v90;
  static Message.with(_:)();
  v70[2] = CurrentRequest.currentDeviceAssistantId.getter();
  v70[1] = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserParse>);
  uint64_t v76 = v33;
  uint64_t v41 = v31;
  uint64_t v42 = v89;
  unint64_t v43 = (*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_AB370;
  uint64_t v45 = *(void (**)(unint64_t, char *, uint64_t))(v42 + 16);
  unint64_t v71 = v41;
  v45(v44 + v43, v41, v39);
  *(void *)char v27 = v70[0];
  *((void *)v27 + 1) = v38;
  *((void *)v27 + 2) = v44;
  v27[24] = 1;
  (*(void (**)(char *, void, uint64_t))(v77 + 104))(v27, enum case for ParseStateXPC.rc(_:), v25);
  type metadata accessor for PommesSearchRequestXPCBuilder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  PommesSearchRequestXPCBuilder.init(domain:assistantId:requestId:parseState:utterance:)();
  dispatch thunk of PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)();
  swift_release();
  dispatch thunk of PommesSearchRequestXPCBuilder.withIsPushOffRequest(_:)();
  swift_release();
  CurrentRequest.multiUserState.getter();
  MultiUserState.isEnabled.getter();
  outlined destroy of MultiUserState((uint64_t)v24);
  dispatch thunk of PommesSearchRequestXPCBuilder.withIsMultiUser(_:)();
  swift_release();
  uint64_t v46 = (uint64_t)v78;
  CurrentRequest.audioSource.getter();
  uint64_t v47 = type metadata accessor for AudioSource();
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47) == 1)
  {
    outlined destroy of Any?(v46, &demangling cache variable for type metadata for AudioSource?);
  }
  else
  {
    AudioSource.aceValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
  }
  uint64_t v57 = v85;
  uint64_t v56 = v86;
  dispatch thunk of PommesSearchRequestXPCBuilder.withAudioSource(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v58 = (uint64_t)v81;
  CurrentRequest.audioDestination.getter();
  uint64_t v59 = type metadata accessor for AudioDestination();
  uint64_t v60 = *(void *)(v59 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59) == 1)
  {
    outlined destroy of Any?(v58, &demangling cache variable for type metadata for AudioDestination?);
  }
  else
  {
    AudioDestination.aceValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v58, v59);
  }
  dispatch thunk of PommesSearchRequestXPCBuilder.withAudioDestination(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v61 = v82;
  CurrentRequest.responseMode.getter();
  ResponseMode.aceValue.getter();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v61, v84);
  dispatch thunk of PommesSearchRequestXPCBuilder.withResponseMode(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v97, v98);
  dispatch thunk of DeviceState.isEyesFree.getter();
  dispatch thunk of PommesSearchRequestXPCBuilder.withIsEyesFree(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v97, v98);
  dispatch thunk of DeviceState.isVoiceTriggerEnabled.getter();
  dispatch thunk of PommesSearchRequestXPCBuilder.withIsVoiceTriggerEnabled(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v97, v98);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  dispatch thunk of PommesSearchRequestXPCBuilder.withIsTextToSpeechEnabled(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v97, v98);
  dispatch thunk of DeviceState.inputOrigin.getter();
  uint64_t v62 = *(void (**)(char *, void, uint64_t))(v91 + 104);
  v62(v56, enum case for InputOrigin.clientGenerated(_:), v92);
  lazy protocol witness table accessor for type PushOffQueryFlow and conformance PushOffQueryFlow(&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin, (void (*)(uint64_t))&type metadata accessor for InputOrigin);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v95 == v93 && v96 == v94) {
    char v63 = 1;
  }
  else {
    char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v64 = v92;
  int v65 = *(void (**)(char *, uint64_t))(v91 + 8);
  v65(v56, v92);
  v65(v57, v64);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
  if ((v63 & 1) == 0)
  {
    static Device.current.getter();
    __swift_project_boxed_opaque_existential_1(v97, v98);
    uint64_t v66 = v92;
    dispatch thunk of DeviceState.inputOrigin.getter();
    v62(v88, enum case for InputOrigin.triggerlessFollowup(_:), v66);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v95 != v93 || v96 != v94) {
      _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v65(v88, v66);
    v65(v87, v66);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
  }
  dispatch thunk of PommesSearchRequestXPCBuilder.withIsTriggerlessFollowup(_:)();
  swift_release();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  uint64_t v67 = v74;
  dispatch thunk of CurrentDevice.restrictions.getter();
  swift_release();
  uint64_t v68 = DeviceRestrictions.aceSet.getter();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v67, v72);
  specialized _copyCollectionToContiguousArray<A>(_:)(v68);
  swift_bridgeObjectRelease();
  dispatch thunk of PommesSearchRequestXPCBuilder.withDeviceRestrictions(_:)();
  swift_release();
  swift_release();
  uint64_t v55 = dispatch thunk of PommesSearchRequestXPCBuilder.build()();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v71, v90);
  return v55;
}

uint64_t closure #1 in PushOffQueryFlow.buildPommesSearchRequest(query:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_Parser();
  __chkstk_darwin(v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>);
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_AB370;
  lazy protocol witness table accessor for type PushOffQueryFlow and conformance PushOffQueryFlow(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
  static Message.with(_:)();
  Siri_Nlu_External_UserParse.userDialogActs.setter();
  lazy protocol witness table accessor for type PushOffQueryFlow and conformance PushOffQueryFlow(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser and conformance Siri_Nlu_External_Parser, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_Parser);
  static Message.with(_:)();
  Siri_Nlu_External_UserParse.parser.setter();
  Siri_Nlu_External_UserParse.probability.setter();
  return Siri_Nlu_External_UserParse.comparableProbability.setter();
}

uint64_t closure #1 in closure #1 in PushOffQueryFlow.buildPommesSearchRequest(query:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v8 - v5;
  Siri_Nlu_External_DelegatedUserDialogAct.init()();
  static PommesSearchRequest.PommesParserId.getter();
  Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.setter();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  Siri_Nlu_External_UserDialogAct.delegated.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
}

uint64_t closure #2 in closure #1 in PushOffQueryFlow.buildPommesSearchRequest(query:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_Parser.AlgorithmType();
  __chkstk_darwin(v4);
  (*(void (**)(char *, void))(v6 + 104))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Siri_Nlu_External_Parser.AlgorithmType.model(_:));
  Siri_Nlu_External_Parser.algorithm.setter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Siri_Nlu_External_Parser.ParserIdentifier.psc(_:), v0);
  return Siri_Nlu_External_Parser.parserID.setter();
}

uint64_t PushOffQueryFlow.handleClientDrivenExperience(pommesResponse:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.information);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_0, v5, v6, "#PushOffQueryFlow in handleClientDrivenExperience", v7, 2u);
    swift_slowDealloc();
  }

  v19[0] = v2;
  type metadata accessor for PushOffQueryFlow();
  lazy protocol witness table accessor for type PushOffQueryFlow and conformance PushOffQueryFlow(&lazy protocol witness table cache variable for type PushOffQueryFlow and conformance PushOffQueryFlow, (void (*)(uint64_t))type metadata accessor for PushOffQueryFlow);
  uint64_t v8 = CompositionSearchFlow.findFlowForPommesResponse(_:)();
  if (v8)
  {
    uint64_t v9 = v8;
    v19[3] = type metadata accessor for AnyFlow();
    v19[4] = &protocol witness table for AnyFlow;
    v19[0] = v9;
    uint64_t v10 = *(void (**)(uint64_t, void *))(*(void *)v2 + 288);
    swift_retain();
    v10(a1, v19);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_0, v12, v13, "#PushOffQueryFlow failed to render a client-driven experience", v14, 2u);
      swift_slowDealloc();
    }

    uint64_t v15 = v2 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
    swift_beginAccess();
    uint64_t v16 = *(void **)v15;
    uint64_t v17 = *(void **)(v15 + 8);
    *(void *)uint64_t v15 = 0;
    *(void *)(v15 + 8) = 0;
    char v18 = *(unsigned char *)(v15 + 16);
    *(unsigned char *)(v15 + 16) = 2;
    outlined consume of PushOffQueryFlow.State(v16, v17, v18);
    PushOffQueryFlow.state.didset();
    return static ExecuteResponse.complete()();
  }
}

uint64_t PushOffQueryFlow.handleClientDrivenExperience(pommesResponse:renderFlow:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v45 = *(void *)(v5 - 8);
  uint64_t v46 = v5;
  __chkstk_darwin(v5);
  uint64_t v44 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Parse();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for Input();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a2[3];
  unint64_t v43 = a2;
  __swift_project_boxed_opaque_existential_1(a2, v15);
  *uint64_t v10 = a1;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for Parse.pommesResponse(_:), v7);
  id v16 = a1;
  Input.init(parse:)();
  LOBYTE(v15) = dispatch thunk of Flow.on(input:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (v15)
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.information);
    char v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_0, v18, v19, "#PushOffQueryFlow pushing render component flow for client-driven experience", v20, 2u);
      swift_slowDealloc();
    }

    uint64_t v21 = v47 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
    swift_beginAccess();
    uint64_t v22 = *(void **)v21;
    uint64_t v23 = *(void **)(v21 + 8);
    *(void *)uint64_t v21 = 0;
    *(void *)(v21 + 8) = 0;
    char v24 = *(unsigned char *)(v21 + 16);
    *(unsigned char *)(v21 + 16) = 3;
    outlined consume of PushOffQueryFlow.State(v22, v23, v24);
    PushOffQueryFlow.state.didset();
    __swift_project_boxed_opaque_existential_1(v43, v43[3]);
    return static ExecuteResponse.complete<A>(next:)();
  }
  else
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.information);
    char v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_0, v27, v28, "#PushOffQueryFlow render flow refused input, returning error flow", v29, 2u);
      swift_slowDealloc();
    }

    uint64_t v30 = v47;
    uint64_t v31 = v47 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
    swift_beginAccess();
    uint64_t v32 = *(void **)v31;
    uint64_t v33 = *(void **)(v31 + 8);
    *(void *)uint64_t v31 = 0;
    *(void *)(v31 + 8) = 0;
    char v34 = *(unsigned char *)(v31 + 16);
    *(unsigned char *)(v31 + 16) = 2;
    outlined consume of PushOffQueryFlow.State(v32, v33, v34);
    PushOffQueryFlow.state.didset();
    uint64_t v49 = v30;
    type metadata accessor for PerformanceUtil();
    uint64_t v35 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v35);
    uint64_t v38 = &v49;
    uint64_t v36 = v44;
    Date.init()();
    uint64_t v40 = v37;
    uint64_t v41 = type metadata accessor for ExecuteResponse();
    uint64_t v39 = partial apply for specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:);
    LOBYTE(v38) = 2;
    v37[0] = "makeResponse(forErrorMessage:)";
    v37[1] = 30;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v36, v46);
  }
}

uint64_t PushOffQueryFlow.handleServerDrivenExperience(pommesResponse:)(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Parse();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  type metadata accessor for Input();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(PushOffQueryFlow.handleServerDrivenExperience(pommesResponse:), 0, 0);
}

uint64_t PushOffQueryFlow.handleServerDrivenExperience(pommesResponse:)()
{
  char v24 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#PushOffQueryFlow in handleServerDrivenExperience", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = (void *)v0[11];
  uint64_t v5 = v0[12];
  uint64_t v7 = v0[9];
  uint64_t v8 = v0[10];
  uint64_t v9 = (void *)v0[7];

  *uint64_t v6 = v9;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v6, enum case for Parse.pommesResponse(_:), v7);
  id v10 = v9;
  Input.init(parse:)();
  type metadata accessor for PommesResponse();
  static PommesResponse.makeDefaultInteractionStream()();
  int v11 = [self isSiriLocationServicesPromptingEnabled];
  uint64_t v12 = specialized InformationRoutingFlow.__allocating_init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(v5, (uint64_t)&v23, v11);
  if (v12)
  {
    v0[5] = v12;
    type metadata accessor for InformationRoutingFlow(0);
    lazy protocol witness table accessor for type PushOffQueryFlow and conformance PushOffQueryFlow(&lazy protocol witness table cache variable for type InformationRoutingFlow and conformance InformationRoutingFlow, (void (*)(uint64_t))type metadata accessor for InformationRoutingFlow);
    static ExecuteResponse.complete<A>(next:)();
    swift_release();
  }
  else
  {
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "#PushOffQueryFlow failed to construct routing flow to render server-driven response", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = v0[8];

    uint64_t v17 = v16 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
    swift_beginAccess();
    char v18 = *(void **)v17;
    os_log_type_t v19 = *(void **)(v17 + 8);
    *(void *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = 0;
    char v20 = *(unsigned char *)(v17 + 16);
    *(unsigned char *)(v17 + 16) = 2;
    outlined consume of PushOffQueryFlow.State(v18, v19, v20);
    PushOffQueryFlow.state.didset();
    static ExecuteResponse.complete()();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t PushOffQueryFlow.deinit()
{
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_nlContextUpdate, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_pommesSearchClient, &demangling cache variable for type metadata for PommesXPCSearching?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_outputPublisher);
  swift_release();
  outlined consume of PushOffQueryFlow.State(*(void **)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state), *(id *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state + 16));
  return v0;
}

uint64_t PushOffQueryFlow.__deallocating_deinit()
{
  PushOffQueryFlow.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t protocol witness for CompositionSearchFlow.nlContextUpdate.getter in conformance PushOffQueryFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for CompositionSearchFlow.nlContextUpdate.setter in conformance PushOffQueryFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t (*protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow(void *a1))()
{
  os_log_type_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 160))();
  return protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow;
}

uint64_t protocol witness for CompositionSearchFlow.targetedRequest.getter in conformance PushOffQueryFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t protocol witness for CompositionSearchFlow.targetedRequest.setter in conformance PushOffQueryFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t (*protocol witness for CompositionSearchFlow.targetedRequest.modify in conformance PushOffQueryFlow(void *a1))()
{
  os_log_type_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 184))();
  return protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow;
}

uint64_t protocol witness for FlowTrampolining.outputPublisher.getter in conformance PushOffQueryFlow@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(*v1 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_outputPublisher, a1);
}

uint64_t protocol witness for FlowTrampolining.informationViewFactory.getter in conformance PushOffQueryFlow()
{
  return swift_retain();
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.getter in conformance PushOffQueryFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.getter();
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.setter in conformance PushOffQueryFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.setter();
}

uint64_t (*protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance PushOffQueryFlow(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SiriEnvironmentLocating<>.siriEnvironment.modify();
  return protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow;
}

void protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t protocol witness for Flow.on(input:) in conformance PushOffQueryFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance PushOffQueryFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))();
}

uint64_t protocol witness for Flow.execute() in conformance PushOffQueryFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 240) + **(int **)(**(void **)v1 + 240));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PushOffQueryFlow(uint64_t a1, uint64_t a2)
{
  uint64_t Flow = type metadata accessor for PushOffQueryFlow();

  return Flow<>.exitValue.getter(Flow, a2);
}

uint64_t specialized InformationRoutingFlow.__allocating_init(input:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(uint64_t a1, uint64_t a2, int a3)
{
  int v154 = a3;
  uint64_t v155 = a2;
  uint64_t v149 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v150 = *(void *)(v149 - 8);
  uint64_t v4 = __chkstk_darwin(v149);
  uint64_t v146 = (char *)&v144 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v147 = (void **)((char *)&v144 - v7);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (void **)((char *)&v144 - v9);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v144 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v144 - v14;
  uint64_t v16 = type metadata accessor for CATOption();
  __chkstk_darwin(v16 - 8);
  uint64_t v152 = (char *)&v144 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = type metadata accessor for InformationRoutingFlow.State(0);
  __chkstk_darwin(v151);
  v153 = (void **)((char *)&v144 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = type metadata accessor for Parse.PegasusResult();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v144 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Parse();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (void **)((char *)&v144 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v164 = &type metadata for KnowledgeFallbackHelper;
  uint64_t v165 = &protocol witness table for KnowledgeFallbackHelper;
  uint64_t v156 = a1;
  Input.parse.getter();
  int v27 = (*(uint64_t (**)(void **, uint64_t))(v24 + 88))(v26, v23);
  if (v27 == enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(void **, uint64_t))(v24 + 96))(v26, v23);
    uint64_t v28 = v150;
    uint64_t v29 = *(void (**)(char *, void **, uint64_t))(v150 + 16);
    uint64_t v148 = v26;
    uint64_t v30 = v149;
    v29(v15, v26, v149);
    if (Parse.DirectInvocation.identifier.getter() == 0xD00000000000003DLL && v31 == 0x80000000000AD800)
    {
      swift_bridgeObjectRelease();
LABEL_8:
      uint64_t v46 = (uint64_t)v153;
      uint64_t v47 = v15;
      uint64_t v48 = v30;
      v29((char *)v153, (void **)v15, v30);
      swift_storeEnumTagMultiPayload();
      uint64_t v49 = v155;
      outlined init with copy of IdentifiedUser?(v155, (uint64_t)v162, &demangling cache variable for type metadata for CurareInteractionStream?);
      outlined init with copy of OutputPublisherAsync((uint64_t)v163, (uint64_t)v160);
      static AceService.currentAsync.getter();
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      static Device.current.getter();
      type metadata accessor for CommonCATs();
      static CATOption.defaultMode.getter();
      uint64_t v50 = v48;
      uint64_t v51 = CATWrapper.__allocating_init(options:globals:)();
      type metadata accessor for InformationViewFactory();
      uint64_t v52 = (void *)swift_allocObject();
      id v53 = [self sharedPreferences];
      uint64_t v54 = type metadata accessor for PommesServerFallbackPreferences();
      swift_allocObject();
      uint64_t v55 = PommesServerFallbackPreferences.init(_:)();
      v52[11] = v54;
      v52[12] = &protocol witness table for PommesServerFallbackPreferences;
      v52[8] = v55;
      outlined init with take of PatternFlowProviding(v157, (uint64_t)(v52 + 3));
      v52[2] = v51;
      type metadata accessor for ExperienceSelector();
      uint64_t v56 = swift_allocObject();
      type metadata accessor for InformationRoutingFlow(0);
      uint64_t v57 = swift_allocObject();
      uint64_t v58 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v160, v161);
      __chkstk_darwin(v58);
      (*(void (**)(void))(v59 + 16))();
      uint64_t v43 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(v46, (uint64_t)v159, (uint64_t)v158, (uint64_t)v52, v56, (uint64_t)v162, v154 & 1, v57);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v163);
      outlined destroy of Any?(v49, &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v60 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v156, v60);
      uint64_t v61 = *(void (**)(char *, uint64_t))(v28 + 8);
      v61(v47, v50);
      v61((char *)v148, v50);
      return v43;
    }
    char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v45) {
      goto LABEL_8;
    }
    uint64_t v77 = v28 + 8;
    uint64_t v76 = *(void (**)(char *, uint64_t))(v28 + 8);
    uint64_t v78 = v30;
    uint64_t v145 = v76;
    v76(v15, v30);
    v29(v13, v148, v30);
    if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000040 && v79 == 0x80000000000AD840)
    {
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v81)
    {
LABEL_16:
      uint64_t v82 = (uint64_t)v153;
      v29((char *)v153, (void **)v13, v30);
      swift_storeEnumTagMultiPayload();
      uint64_t v83 = v155;
      outlined init with copy of IdentifiedUser?(v155, (uint64_t)v162, &demangling cache variable for type metadata for CurareInteractionStream?);
      outlined init with copy of OutputPublisherAsync((uint64_t)v163, (uint64_t)v160);
      static AceService.currentAsync.getter();
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      static Device.current.getter();
      type metadata accessor for CommonCATs();
      static CATOption.defaultMode.getter();
      uint64_t v84 = CATWrapper.__allocating_init(options:globals:)();
      type metadata accessor for InformationViewFactory();
      uint64_t v85 = swift_allocObject();
      uint64_t v86 = v145;
      uint64_t v152 = v13;
      uint64_t v87 = (void *)v85;
      id v88 = [self sharedPreferences];
      uint64_t v89 = type metadata accessor for PommesServerFallbackPreferences();
      swift_allocObject();
      uint64_t v90 = PommesServerFallbackPreferences.init(_:)();
      v87[11] = v89;
      v87[12] = &protocol witness table for PommesServerFallbackPreferences;
      v87[8] = v90;
      outlined init with take of PatternFlowProviding(v157, (uint64_t)(v87 + 3));
      v87[2] = v84;
      type metadata accessor for ExperienceSelector();
      uint64_t v91 = swift_allocObject();
      type metadata accessor for InformationRoutingFlow(0);
      uint64_t v92 = swift_allocObject();
      uint64_t v93 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v160, v161);
      __chkstk_darwin(v93);
      (*(void (**)(void))(v94 + 16))();
      uint64_t v43 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(v82, (uint64_t)v159, (uint64_t)v158, (uint64_t)v87, v91, (uint64_t)v162, v154 & 1, v92);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v163);
      outlined destroy of Any?(v83, &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v95 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v95 - 8) + 8))(v156, v95);
      v86(v152, v30);
      v86((char *)v148, v30);
      return v43;
    }
    uint64_t v144 = v77;
    v145(v13, v30);
    uint64_t v97 = v10;
    v29((char *)v10, v148, v30);
    if (Parse.DirectInvocation.identifier.getter() == 0xD00000000000003ELL && v98 == 0x80000000000AD890)
    {
      swift_bridgeObjectRelease();
LABEL_23:
      uint64_t v100 = (uint64_t)v153;
      v29((char *)v153, v97, v30);
      swift_storeEnumTagMultiPayload();
      uint64_t v101 = v155;
      outlined init with copy of IdentifiedUser?(v155, (uint64_t)v162, &demangling cache variable for type metadata for CurareInteractionStream?);
      outlined init with copy of OutputPublisherAsync((uint64_t)v163, (uint64_t)v160);
      static AceService.currentAsync.getter();
      static OutputPublisherFactory.makeOutputPublisherAsync()();
      static Device.current.getter();
      type metadata accessor for CommonCATs();
      uint64_t v151 = (uint64_t)v97;
      static CATOption.defaultMode.getter();
      uint64_t v102 = CATWrapper.__allocating_init(options:globals:)();
      type metadata accessor for InformationViewFactory();
      uint64_t v103 = (void *)swift_allocObject();
      id v104 = [self sharedPreferences];
      uint64_t v105 = type metadata accessor for PommesServerFallbackPreferences();
      swift_allocObject();
      uint64_t v106 = PommesServerFallbackPreferences.init(_:)();
      v103[11] = v105;
      v103[12] = &protocol witness table for PommesServerFallbackPreferences;
      v103[8] = v106;
      outlined init with take of PatternFlowProviding(v157, (uint64_t)(v103 + 3));
      v103[2] = v102;
      type metadata accessor for ExperienceSelector();
      uint64_t v107 = swift_allocObject();
      type metadata accessor for InformationRoutingFlow(0);
      uint64_t v108 = swift_allocObject();
      uint64_t v109 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v160, v161);
      uint64_t v110 = (void (*)(uint64_t, uint64_t))v145;
      __chkstk_darwin(v109);
      (*(void (**)(void))(v111 + 16))();
      uint64_t v43 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(v100, (uint64_t)v159, (uint64_t)v158, (uint64_t)v103, v107, (uint64_t)v162, v154 & 1, v108);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v163);
      outlined destroy of Any?(v101, &demangling cache variable for type metadata for CurareInteractionStream?);
      uint64_t v112 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v112 - 8) + 8))(v156, v112);
      v110(v151, v30);
      v110((uint64_t)v148, v30);
      return v43;
    }
    char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v99) {
      goto LABEL_23;
    }
    v145((char *)v10, v30);
    uint64_t v113 = v147;
    v29((char *)v147, v148, v78);
    if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000045 && v114 == 0x80000000000AD8D0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v115 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v115 & 1) == 0)
      {
        v129 = v145;
        v145((char *)v113, v78);
        uint64_t v130 = v146;
        (*(void (**)(char *, void **, uint64_t))(v150 + 32))(v146, v148, v78);
        uint64_t v131 = (uint64_t)v153;
        v29((char *)v153, (void **)v130, v78);
        swift_storeEnumTagMultiPayload();
        char v132 = v129;
        uint64_t v133 = v155;
        outlined init with copy of IdentifiedUser?(v155, (uint64_t)v162, &demangling cache variable for type metadata for CurareInteractionStream?);
        outlined init with copy of OutputPublisherAsync((uint64_t)v163, (uint64_t)v160);
        static AceService.currentAsync.getter();
        static OutputPublisherFactory.makeOutputPublisherAsync()();
        static Device.current.getter();
        type metadata accessor for CommonCATs();
        static CATOption.defaultMode.getter();
        uint64_t v134 = CATWrapper.__allocating_init(options:globals:)();
        type metadata accessor for InformationViewFactory();
        v135 = (void *)swift_allocObject();
        id v136 = [self sharedPreferences];
        uint64_t v137 = type metadata accessor for PommesServerFallbackPreferences();
        swift_allocObject();
        uint64_t v138 = PommesServerFallbackPreferences.init(_:)();
        v135[11] = v137;
        v135[12] = &protocol witness table for PommesServerFallbackPreferences;
        v135[8] = v138;
        outlined init with take of PatternFlowProviding(v157, (uint64_t)(v135 + 3));
        v135[2] = v134;
        type metadata accessor for ExperienceSelector();
        uint64_t v139 = swift_allocObject();
        type metadata accessor for InformationRoutingFlow(0);
        uint64_t v140 = swift_allocObject();
        uint64_t v141 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v160, v161);
        __chkstk_darwin(v141);
        (*(void (**)(void))(v142 + 16))();
        uint64_t v43 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(v131, (uint64_t)v159, (uint64_t)v158, (uint64_t)v135, v139, (uint64_t)v162, v154 & 1, v140);
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v163);
        outlined destroy of Any?(v133, &demangling cache variable for type metadata for CurareInteractionStream?);
        uint64_t v143 = type metadata accessor for Input();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v143 - 8) + 8))(v156, v143);
        v132(v130, v78);
        return v43;
      }
    }
    uint64_t v116 = (uint64_t)v153;
    v29((char *)v153, v113, v78);
    swift_storeEnumTagMultiPayload();
    uint64_t v117 = v155;
    outlined init with copy of IdentifiedUser?(v155, (uint64_t)v162, &demangling cache variable for type metadata for CurareInteractionStream?);
    outlined init with copy of OutputPublisherAsync((uint64_t)v163, (uint64_t)v160);
    static AceService.currentAsync.getter();
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    static Device.current.getter();
    type metadata accessor for CommonCATs();
    static CATOption.defaultMode.getter();
    uint64_t v118 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for InformationViewFactory();
    id v119 = (void *)swift_allocObject();
    id v120 = [self sharedPreferences];
    uint64_t v121 = type metadata accessor for PommesServerFallbackPreferences();
    swift_allocObject();
    uint64_t v122 = PommesServerFallbackPreferences.init(_:)();
    v119[11] = v121;
    v119[12] = &protocol witness table for PommesServerFallbackPreferences;
    v119[8] = v122;
    outlined init with take of PatternFlowProviding(v157, (uint64_t)(v119 + 3));
    v119[2] = v118;
    type metadata accessor for ExperienceSelector();
    uint64_t v123 = swift_allocObject();
    type metadata accessor for InformationRoutingFlow(0);
    uint64_t v124 = swift_allocObject();
    uint64_t v125 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v160, v161);
    __chkstk_darwin(v125);
    (*(void (**)(void))(v126 + 16))();
    uint64_t v43 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(v116, (uint64_t)v159, (uint64_t)v158, (uint64_t)v119, v123, (uint64_t)v162, v154 & 1, v124);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v163);
    outlined destroy of Any?(v117, &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v127 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v127 - 8) + 8))(v156, v127);
    uint64_t v128 = (void (*)(void **, uint64_t))v145;
    v145((char *)v113, v78);
    v128(v148, v78);
  }
  else if (v27 == enum case for Parse.pegasusResults(_:))
  {
    (*(void (**)(void **, uint64_t))(v24 + 96))(v26, v23);
    (*(void (**)(char *, void **, uint64_t))(v20 + 32))(v22, v26, v19);
    uint64_t v32 = (uint64_t)v153;
    (*(void (**)(void **, char *, uint64_t))(v20 + 16))(v153, v22, v19);
    swift_storeEnumTagMultiPayload();
    uint64_t v33 = v155;
    outlined init with copy of IdentifiedUser?(v155, (uint64_t)v162, &demangling cache variable for type metadata for CurareInteractionStream?);
    outlined init with copy of OutputPublisherAsync((uint64_t)v163, (uint64_t)v160);
    static AceService.currentAsync.getter();
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    static Device.current.getter();
    type metadata accessor for CommonCATs();
    static CATOption.defaultMode.getter();
    uint64_t v34 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for InformationViewFactory();
    uint64_t v35 = (void *)swift_allocObject();
    id v36 = [self sharedPreferences];
    uint64_t v37 = type metadata accessor for PommesServerFallbackPreferences();
    swift_allocObject();
    uint64_t v38 = PommesServerFallbackPreferences.init(_:)();
    v35[11] = v37;
    v35[12] = &protocol witness table for PommesServerFallbackPreferences;
    v35[8] = v38;
    outlined init with take of PatternFlowProviding(v157, (uint64_t)(v35 + 3));
    v35[2] = v34;
    type metadata accessor for ExperienceSelector();
    uint64_t v39 = swift_allocObject();
    type metadata accessor for InformationRoutingFlow(0);
    uint64_t v40 = swift_allocObject();
    uint64_t v41 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v160, v161);
    __chkstk_darwin(v41);
    (*(void (**)(void))(v42 + 16))();
    uint64_t v43 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(v32, (uint64_t)v159, (uint64_t)v158, (uint64_t)v35, v39, (uint64_t)v162, v154 & 1, v40);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v163);
    outlined destroy of Any?(v33, &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v44 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v156, v44);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }
  else if (v27 == enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v24 + 96))(v26, v23);
    uint64_t v62 = *v26;
    uint64_t v63 = (uint64_t)v153;
    void *v153 = *v26;
    *(unsigned char *)(v63 + 8) = 2;
    swift_storeEnumTagMultiPayload();
    uint64_t v64 = v155;
    outlined init with copy of IdentifiedUser?(v155, (uint64_t)v162, &demangling cache variable for type metadata for CurareInteractionStream?);
    outlined init with copy of OutputPublisherAsync((uint64_t)v163, (uint64_t)v160);
    id v65 = v62;
    static AceService.currentAsync.getter();
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    static Device.current.getter();
    type metadata accessor for CommonCATs();
    static CATOption.defaultMode.getter();
    uint64_t v66 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for InformationViewFactory();
    uint64_t v67 = (void *)swift_allocObject();
    id v68 = [self sharedPreferences];
    uint64_t v69 = type metadata accessor for PommesServerFallbackPreferences();
    swift_allocObject();
    uint64_t v70 = PommesServerFallbackPreferences.init(_:)();
    v67[11] = v69;
    v67[12] = &protocol witness table for PommesServerFallbackPreferences;
    v67[8] = v70;
    outlined init with take of PatternFlowProviding(v157, (uint64_t)(v67 + 3));
    v67[2] = v66;
    type metadata accessor for ExperienceSelector();
    uint64_t v71 = swift_allocObject();
    type metadata accessor for InformationRoutingFlow(0);
    uint64_t v72 = swift_allocObject();
    uint64_t v73 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v160, v161);
    __chkstk_darwin(v73);
    (*(void (**)(void))(v74 + 16))();
    uint64_t v43 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(v63, (uint64_t)v159, (uint64_t)v158, (uint64_t)v67, v71, (uint64_t)v162, v154 & 1, v72);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v163);
    outlined destroy of Any?(v64, &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v75 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v75 - 8) + 8))(v156, v75);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v163);
    outlined destroy of Any?(v155, &demangling cache variable for type metadata for CurareInteractionStream?);
    uint64_t v80 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8))(v156, v80);
    (*(void (**)(void **, uint64_t))(v24 + 8))(v26, v23);
    return 0;
  }
  return v43;
}

uint64_t specialized static PushOffQueryFlow.State.== infix(_:_:)(void *a1, void *a2, char a3, unint64_t a4, unint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      if (a6 != 1) {
        goto LABEL_15;
      }
      type metadata accessor for NSObject();
      outlined copy of PushOffQueryFlow.State(a1, a2, 1);
      outlined copy of PushOffQueryFlow.State((id)a4, (id)a5, 1);
      char v11 = static NSObject.== infix(_:_:)();
      outlined consume of PushOffQueryFlow.State((void *)a4, (id)a5, 1);
      outlined consume of PushOffQueryFlow.State(a1, a2, 1);
      uint64_t result = v11 & 1;
      break;
    case 2:
      if (a6 != 2) {
        goto LABEL_15;
      }
      uint64_t result = a4 == a1;
      break;
    case 3:
      if (a6 != 3 || a5 | a4) {
        goto LABEL_15;
      }
      goto LABEL_14;
    default:
      if (a6)
      {
LABEL_15:
        uint64_t result = 0;
      }
      else if (a1 == (void *)a4 && a2 == (void *)a5)
      {
LABEL_14:
        uint64_t result = 1;
      }
      else
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      break;
  }
  return result;
}

uint64_t specialized PushOffQueryFlow.init(query:renderComponentFlowFactory:pommesSearchClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for CATOption();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = v4 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_nlContextUpdate;
  uint64_t v11 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(void *)(v4 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_targetedRequest) = 0;
  type metadata accessor for ExperienceSelector();
  *(void *)(v4 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_experienceSelector) = swift_allocObject();
  *(void *)(v4 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_renderComponentFlowFactory) = a3;
  outlined init with copy of IdentifiedUser?(a4, v4 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_pommesSearchClient, &demangling cache variable for type metadata for PommesXPCSearching?);
  uint64_t v12 = v4 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_state;
  *(void *)uint64_t v12 = a1;
  *(void *)(v12 + 8) = a2;
  *(unsigned char *)(v12 + 16) = 0;
  swift_retain();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  outlined init with take of PatternFlowProviding(v19, v4 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_outputPublisher);
  static Device.current.getter();
  type metadata accessor for CommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v13 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for InformationViewFactory();
  uint64_t v14 = (void *)swift_allocObject();
  id v15 = [self sharedPreferences];
  uint64_t v16 = type metadata accessor for PommesServerFallbackPreferences();
  swift_allocObject();
  uint64_t v17 = PommesServerFallbackPreferences.init(_:)();
  v14[11] = v16;
  v14[12] = &protocol witness table for PommesServerFallbackPreferences;
  v14[8] = v17;
  outlined init with take of PatternFlowProviding(v19, (uint64_t)(v14 + 3));
  v14[2] = v13;
  outlined destroy of Any?(a4, &demangling cache variable for type metadata for PommesXPCSearching?);
  *(void *)(v4 + OBJC_IVAR____TtC21InformationFlowPlugin16PushOffQueryFlow_informationViewFactory) = v14;
  return v4;
}

uint64_t outlined assign with take of NLContextUpdate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id outlined copy of PushOffQueryFlow.State(id result, id a2, char a3)
{
  if (a3 == 1) {
    return result;
  }
  if (!a3) {
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

void outlined consume of PushOffQueryFlow.State(void *a1, id a2, char a3)
{
  if (a3 == 1)
  {
  }
  else if (!a3)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t type metadata accessor for PushOffQueryFlow()
{
  uint64_t result = type metadata singleton initialization cache for PushOffQueryFlow;
  if (!type metadata singleton initialization cache for PushOffQueryFlow) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized PushOffQueryFlow.isUserCanceled(pommesResponse:)()
{
  unint64_t v0 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t result = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8));
    if (result) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_19;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
      return result;
    }
    id v3 = *(id *)(v1 + 32);
  }
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  type metadata accessor for GenericExperience();
  if (!swift_dynamicCastClass())
  {

    return 0;
  }
  uint64_t v5 = dispatch thunk of Experience.catIds.getter();
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();

    return 0;
  }
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type String and conformance String();
  for (uint64_t i = v5 + 40; ; i += 16)
  {
    swift_bridgeObjectRetain();
    if (StringProtocol.contains<A>(_:)())
    {

      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    char v8 = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    if (v8) {
      break;
    }
    if (!--v6)
    {

      swift_bridgeObjectRelease_n();
      return 0;
    }
  }

LABEL_17:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

unint64_t lazy protocol witness table accessor for type PushOffQueryError and conformance PushOffQueryError()
{
  unint64_t result = lazy protocol witness table cache variable for type PushOffQueryError and conformance PushOffQueryError;
  if (!lazy protocol witness table cache variable for type PushOffQueryError and conformance PushOffQueryError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PushOffQueryError and conformance PushOffQueryError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [PushOffQueryError] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [PushOffQueryError] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PushOffQueryError] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PushOffQueryError]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PushOffQueryError] and conformance [A]);
  }
  return result;
}

uint64_t base witness table accessor for Flow in PushOffQueryFlow()
{
  return lazy protocol witness table accessor for type PushOffQueryFlow and conformance PushOffQueryFlow(&lazy protocol witness table cache variable for type PushOffQueryFlow and conformance PushOffQueryFlow, (void (*)(uint64_t))type metadata accessor for PushOffQueryFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in PushOffQueryFlow()
{
  return lazy protocol witness table accessor for type PushOffQueryFlow and conformance PushOffQueryFlow(&lazy protocol witness table cache variable for type PushOffQueryFlow and conformance PushOffQueryFlow, (void (*)(uint64_t))type metadata accessor for PushOffQueryFlow);
}

uint64_t sub_1D86C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 144))();
}

uint64_t sub_1D8B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_1D900(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1D954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for PushOffQueryError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PushOffQueryError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DB04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PushOffQueryError()
{
  return &type metadata for PushOffQueryError;
}

uint64_t ObjC metadata update function for PushOffQueryFlow()
{
  return type metadata accessor for PushOffQueryFlow();
}

void type metadata completion function for PushOffQueryFlow()
{
  type metadata accessor for NLContextUpdate?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for NLContextUpdate?()
{
  if (!lazy cache variable for type metadata for NLContextUpdate?)
  {
    type metadata accessor for NLContextUpdate();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NLContextUpdate?);
    }
  }
}

void destroy for PushOffQueryFlow.State(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for PushOffQueryFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of PushOffQueryFlow.State(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PushOffQueryFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of PushOffQueryFlow.State(*(id *)a2, v4, v5);
  unsigned int v6 = *(void **)a1;
  BOOL v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of PushOffQueryFlow.State(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PushOffQueryFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  unsigned int v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of PushOffQueryFlow.State(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PushOffQueryFlow.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PushOffQueryFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PushOffQueryFlow.State(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for PushOffQueryFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PushOffQueryFlow.State()
{
  return &type metadata for PushOffQueryFlow.State;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t outlined destroy of MultiUserState(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MultiUserState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type PushOffQueryFlow and conformance PushOffQueryFlow(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t String.base64Encode(encoding:)()
{
  uint64_t v0 = String.data(using:allowLossyConversion:)();
  if (v1 >> 60 == 15) {
    return 0;
  }
  uint64_t v3 = v0;
  unint64_t v4 = v1;
  uint64_t countAndFlagsBits = Data.base64EncodedString(options:)(0)._countAndFlagsBits;
  outlined consume of Data?(v3, v4);
  return countAndFlagsBits;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t String.base64Decode(encoding:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for String.Encoding();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Data.init(base64Encoded:options:)();
  uint64_t v8 = 0;
  if (v7 >> 60 != 15)
  {
    uint64_t v9 = v6;
    unint64_t v10 = v7;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
    uint64_t v8 = String.init(data:encoding:)();
    outlined consume of Data?(v9, v10);
  }
  return v8;
}

uint64_t ErrorFlowFactory.__allocating_init(outputPublisher:informationViewFactory:)(long long *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  outlined init with take of PatternFlowProviding(a1, v4 + 16);
  *(void *)(v4 + 56) = a2;
  return v4;
}

uint64_t ErrorFlowFactory.init(outputPublisher:informationViewFactory:)(long long *a1, uint64_t a2)
{
  outlined init with take of PatternFlowProviding(a1, v2 + 16);
  *(void *)(v2 + 56) = a2;
  return v2;
}

uint64_t RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 280) = v23;
  *(void *)(v9 + 288) = v8;
  *(void *)(v9 + 272) = v22;
  *(_OWORD *)(v9 + 256) = v21;
  *(void *)(v9 + 240) = a7;
  *(void *)(v9 + 248) = a8;
  *(void *)(v9 + 224) = a5;
  *(void *)(v9 + 232) = a6;
  *(void *)(v9 + 208) = a3;
  *(void *)(v9 + 216) = a4;
  *(void *)(v9 + 192) = a1;
  *(void *)(v9 + 200) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  *(void *)(v9 + 296) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_SystemDialogAct?);
  *(void *)(v9 + 304) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  *(void *)(v9 + 312) = v10;
  *(void *)(v9 + 320) = *(void *)(v10 - 8);
  *(void *)(v9 + 328) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for NLContextUpdate();
  *(void *)(v9 + 336) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v9 + 344) = v12;
  *(void *)(v9 + 352) = *(void *)(v12 + 64);
  *(void *)(v9 + 360) = swift_task_alloc();
  *(void *)(v9 + 368) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for UUID();
  *(void *)(v9 + 376) = v13;
  *(void *)(v9 + 384) = *(void *)(v13 - 8);
  *(void *)(v9 + 392) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HintsUI?);
  *(void *)(v9 + 400) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for HintsUI();
  *(void *)(v9 + 408) = v14;
  *(void *)(v9 + 416) = *(void *)(v14 - 8);
  *(void *)(v9 + 424) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for SuggestionContextData();
  *(void *)(v9 + 432) = v15;
  *(void *)(v9 + 440) = *(void *)(v15 - 8);
  *(void *)(v9 + 448) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for Date();
  *(void *)(v9 + 456) = v16;
  *(void *)(v9 + 464) = *(void *)(v16 - 8);
  *(void *)(v9 + 472) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for DialogPhase();
  *(void *)(v9 + 480) = v17;
  *(void *)(v9 + 488) = *(void *)(v17 - 8);
  *(void *)(v9 + 496) = swift_task_alloc();
  uint64_t v18 = type metadata accessor for OSSignpostID();
  *(void *)(v9 + 504) = v18;
  *(void *)(v9 + 512) = *(void *)(v18 - 8);
  *(void *)(v9 + 520) = swift_task_alloc();
  return _swift_task_switch(RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:), 0, 0);
}

void RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)()
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 528) = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "RenderPegasusFlow making flow to render PegasusResult", v4, 2u);
    swift_slowDealloc();
  }

  if (one-time initialization token for informationLog != -1) {
    swift_once();
  }
  uint64_t v5 = *(void *)(v0 + 264);
  id v6 = (id)static Logger.informationLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  if (v5 && (dispatch thunk of PommesResponse.listenAfterSpeaking.getter() & 1) != 0) {
    static DialogPhase.clarification.getter();
  }
  else {
    static DialogPhase.summary.getter();
  }
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v7, v8, "RenderPegasusFlow using server driven experience", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = *(void *)(v0 + 496);
  uint64_t v11 = *(void *)(v0 + 288);
  uint64_t v13 = *(void *)(v0 + 256);
  uint64_t v12 = *(void *)(v0 + 264);
  uint64_t v14 = *(void *)(v0 + 208);
  long long v17 = *(_OWORD *)(v0 + 192);
  long long v18 = *(_OWORD *)(v0 + 240);

  *(void *)(v0 + 536) = type metadata accessor for PerformanceUtil();
  *(void *)(v0 + 544) = static PerformanceUtil.shared.getter();
  uint64_t v15 = swift_task_alloc();
  *(void *)(v0 + 552) = v15;
  *(void *)(v15 + 16) = v11;
  *(_OWORD *)(v15 + 24) = v17;
  *(void *)(v15 + 40) = v14;
  *(_OWORD *)(v15 + 48) = v18;
  *(void *)(v15 + 64) = v13;
  *(void *)(v15 + 72) = v10;
  *(void *)(v15 + 80) = v12;
  Date.init()();
  uint64_t v19 = (char *)&async function pointer to dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)
      + async function pointer to dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:);
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 560) = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([SAUIAddViews], [InformationViewFactory.AceViewCategory : Int]?));
  *uint64_t v16 = v0;
  v16[1] = RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  __asm { BR              X8 }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int8x16_t *v3;
  void *v4;
  int8x16_t v5;
  char *v6;
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 128);
  *(void *)(v0 + 584) = *(void *)(v0 + 136);
  *(void *)(v0 + 144) = v2;
  uint64_t v5 = *(int8x16_t *)(v0 + 216);
  *(void *)(v0 + 592) = static PerformanceUtil.shared.getter();
  os_log_type_t v3 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 600) = v3;
  v3[1] = vextq_s8(v5, v5, 8uLL);
  v3[2].i64[0] = v1;
  Date.init()();
  id v6 = (char *)&async function pointer to dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)
     + async function pointer to dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 608) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SABaseCommand]);
  *uint64_t v4 = v0;
  v4[1] = RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  __asm { BR              X8 }
}

uint64_t RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 472);
  uint64_t v3 = *(void *)(*v0 + 464);
  uint64_t v4 = *(void *)(*v0 + 456);
  swift_task_dealloc();
  swift_release();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v1 + 568) = v5;
  *(void *)(v1 + 576) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v2, v4);
  swift_task_dealloc();
  return _swift_task_switch(RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:), 0, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 568);
  uint64_t v2 = *(void *)(*(void *)v0 + 472);
  uint64_t v3 = *(void *)(*(void *)v0 + 456);
  swift_task_dealloc();
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  return _swift_task_switch(RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:), 0, 0);
}

{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0[19] = &_swiftEmptyArrayStorage;
  uint64_t v1 = specialized RenderComponentFlowFactory.makeProfileSwitchIfNeeded(domainObjects:componentsCount:renderOptions:)(v0[31], v0[73], v0[32]);
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v2 = v1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (v0[19] & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                      + (v0[19] & 0xFFFFFFFFFFFFFF8)) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  DialogPhase.aceValue.getter();
  if (v0[22] >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  SuggestionContextData.init(dialogPhase:hasAdditionalCommands:patternId:)();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[77] = v3;
  *uint64_t v3 = v0;
  v3[1] = RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  uint64_t v4 = v0[56];
  uint64_t v5 = v0[50];
  return static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:)(v5, v4);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:), 0, 0);
}

{
  uint64_t v0;
  _WORD *v1;
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char **p_name;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  id v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  void *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  void (**v99)(uint64_t *, uint64_t);
  void (**v100)(uint64_t, uint64_t);
  uint64_t v101;
  void *v102;
  uint64_t v103;

  uint64_t v4 = v2 + 18;
  uint64_t v5 = v2[51];
  id v6 = v2[52];
  uint64_t v7 = v2[50];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
  {
    outlined destroy of Any?(v7, &demangling cache variable for type metadata for HintsUI?);
  }
  else
  {
    uint64_t v1 = (_WORD *)v2[53];
    uint64_t v0 = v2[36];
    (*(void (**)(_WORD *, uint64_t, uint64_t))(v6 + 32))(v1, v7, v5);
    (*(void (**)(_WORD *, void *, void *))(*(void *)v0 + 120))(v1, v2 + 18, v2 + 22);
    (*(void (**)(_WORD *, uint64_t))(v6 + 8))(v1, v5);
  }
  os_log_type_t v8 = *v4;
  uint64_t v98 = v2 + 22;
  if ((unint64_t)*v4 >> 62)
  {
    if (v8 < 0) {
      uint64_t v0 = *v4;
    }
    else {
      uint64_t v0 = v8 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v9 = *(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
  }
  p_name = (char **)(&stru_CFFF8 + 8);
  uint64_t v102 = v2;
  if (v9)
  {
    if (v9 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v3 = (void *)(v8 & 0xC000000000000001);
      char v99 = (void (**)(uint64_t *, uint64_t))(v2[48] + 8);
      while (1)
      {
        if (v3) {
          uint64_t v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v15 = *(id *)(v8 + 8 * v5 + 32);
        }
        uint64_t v1 = v15;
        uint64_t v16 = (uint64_t *)objc_msgSend(v1, p_name[112]);
        if (v16)
        {
          uint64_t v4 = v16;
          uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          long long v18 = v17;
        }
        else
        {
          uint64_t v0 = 0;
          long long v18 = 0xE000000000000000;
        }
        swift_bridgeObjectRelease();
        uint64_t v19 = HIBYTE(v18) & 0xF;
        if ((v18 & 0x2000000000000000) == 0) {
          uint64_t v19 = v0 & 0xFFFFFFFFFFFFLL;
        }
        if (v19)
        {
          uint64_t v20 = (uint64_t *)objc_msgSend(v1, p_name[112]);
          if (!v20)
          {
            uint64_t v14 = 0;
            goto LABEL_11;
          }
          uint64_t v4 = v20;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v0 = v21;
        }
        else
        {
          uint64_t v4 = (uint64_t *)v2[49];
          uint64_t v11 = v102[47];
          UUID.init()();
          UUID.uuidString.getter();
          uint64_t v0 = v12;
          uint64_t v2 = v102;
          uint64_t v13 = v11;
          p_name = &stru_CFFF8.name;
          (*v99)(v4, v13);
        }
        uint64_t v14 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
LABEL_11:
        ++v5;
        [v1 setAceId:v14];

        if (v9 == v5) {
          goto LABEL_24;
        }
      }
    }
    __break(1u);
    goto LABEL_78;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  uint64_t v22 = *v98;
  if ((unint64_t)*v98 >> 62)
  {
    if (v22 < 0) {
      uint64_t v0 = *v98;
    }
    else {
      uint64_t v0 = v22 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    if (v23) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v23 = *(void *)((char *)&dword_10 + (v22 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v23)
    {
LABEL_26:
      if (v23 < 1)
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      uint64_t v24 = 0;
      uint64_t v100 = (void (**)(uint64_t, uint64_t))(v2[48] + 8);
      do
      {
        if ((v22 & 0xC000000000000001) != 0) {
          uint64_t v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v29 = *(id *)(v22 + 8 * v24 + 32);
        }
        uint64_t v30 = v29;
        uint64_t v31 = objc_msgSend(v29, p_name[112]);
        if (v31)
        {
          uint64_t v32 = v31;
          uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v35 = v34;
        }
        else
        {
          uint64_t v33 = 0;
          uint64_t v35 = 0xE000000000000000;
        }
        swift_bridgeObjectRelease();
        id v36 = HIBYTE(v35) & 0xF;
        if ((v35 & 0x2000000000000000) == 0) {
          id v36 = v33 & 0xFFFFFFFFFFFFLL;
        }
        if (v36)
        {
          uint64_t v37 = objc_msgSend(v30, p_name[112]);
          if (!v37)
          {
            uint64_t v28 = 0;
            goto LABEL_30;
          }
          uint64_t v38 = v37;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        else
        {
          uint64_t v25 = v2[49];
          uint64_t v26 = v102[47];
          UUID.init()();
          UUID.uuidString.getter();
          uint64_t v2 = v102;
          int v27 = v26;
          p_name = &stru_CFFF8.name;
          (*v100)(v25, v27);
        }
        uint64_t v28 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
LABEL_30:
        ++v24;
        [v30 setAceId:v28];
      }
      while (v23 != v24);
    }
  }
  uint64_t v39 = v2[33];
  swift_bridgeObjectRelease();
  NLContextUpdate.init()();
  if (v39)
  {
    uint64_t v40 = (void *)dispatch thunk of PommesResponse.primaryCatIds()();
    uint64_t v41 = specialized static Array<A>.== infix(_:_:)(v40, &outlined read-only object #0 of RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:));
    swift_bridgeObjectRetain();
    swift_arrayDestroy();
    swift_bridgeObjectRelease_n();
    if (v41)
    {
      uint64_t v42 = static SystemDialogActHelper.systemAskedUserToRepeat()();
      uint64_t v43 = v2[39];
      uint64_t v44 = v2[40];
      char v45 = v2[38];
      if (v42)
      {
        swift_getObjectType();
        SIRINLUSystemDialogAct.toNluSystemDialogAct()();
        swift_unknownObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v45, 1, v43) != 1)
        {
          (*(void (**)(void, void, void))(v2[40] + 32))(v2[41], v2[38], v2[39]);
          uint64_t v46 = Logger.logObject.getter();
          uint64_t v47 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v46, v47))
          {
            uint64_t v48 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v48 = 0;
            _os_log_impl(&dword_0, v46, v47, "Got gibberish response from Pegasus; sending ask-to-repeat SDA", v48, 2u);
            swift_slowDealloc();
          }
          uint64_t v50 = v2[40];
          uint64_t v49 = v2[41];
          uint64_t v51 = v2[39];

          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
          uint64_t v52 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
          id v53 = swift_allocObject();
          *(_OWORD *)(v53 + 16) = xmmword_AB370;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v50 + 16))(v53 + v52, v49, v51);
          NLContextUpdate.nluSystemDialogActs.setter();
          (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
          uint64_t v3 = v98;
          goto LABEL_67;
        }
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(v44 + 56))(v2[38], 1, 1, v2[39]);
      }
      outlined destroy of Any?(v2[38], &demangling cache variable for type metadata for Siri_Nlu_External_SystemDialogAct?);
    }
  }
  else
  {
    swift_arrayDestroy();
  }
  uint64_t v54 = Logger.logObject.getter();
  uint64_t v55 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v56 = 0;
    _os_log_impl(&dword_0, v54, v55, "Sending PommesContext as usual", v56, 2u);
    swift_slowDealloc();
  }
  uint64_t v57 = v2[33];

  uint64_t v58 = v2[37];
  uint64_t v3 = v98;
  if (v57)
  {
    PommesResponse.pommesContext.getter();
    uint64_t v59 = type metadata accessor for PommesContext();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v58, 0, 1, v59);
  }
  else
  {
    uint64_t v60 = type metadata accessor for PommesContext();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v58, 1, 1, v60);
  }
  NLContextUpdate.pommesContext.setter();
LABEL_67:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v61 = v2[18];
  swift_bridgeObjectRetain_n();
  uint64_t v0 = Logger.logObject.getter();
  LOBYTE(v5) = static os_log_type_t.debug.getter();
  if (os_log_type_enabled((os_log_t)v0, (os_log_type_t)v5))
  {
    uint64_t v4 = v2 + 21;
    uint64_t v1 = (_WORD *)swift_slowAlloc();
    *(_DWORD *)uint64_t v1 = 134218240;
    if (!(v61 >> 62))
    {
      uint64_t v62 = *(void *)((char *)&dword_10 + (v61 & 0xFFFFFFFFFFFFFF8));
LABEL_70:
      swift_bridgeObjectRelease();
      *uint64_t v4 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v1[6] = 2048;
      swift_beginAccess();
      if (*v3 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v63 = *(void *)((char *)&dword_10 + (*v3 & 0xFFFFFFFFFFFFFF8));
      }
      uint64_t v2 = v102;
      v102[23] = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, (os_log_t)v0, (os_log_type_t)v5, "RenderPegasusFlow creating output with views %ld : commands %ld", (uint8_t *)v1, 0x16u);
      swift_slowDealloc();
      goto LABEL_74;
    }
LABEL_79:
    swift_bridgeObjectRetain();
    uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_70;
  }
  swift_bridgeObjectRelease_n();
LABEL_74:

  uint64_t v92 = v2[63];
  uint64_t v93 = v2[65];
  uint64_t v94 = v2[61];
  uint64_t v95 = v2[60];
  uint64_t v96 = v2[62];
  uint64_t v90 = v2[56];
  uint64_t v91 = v2[64];
  id v88 = v2[55];
  uint64_t v89 = v2[54];
  uint64_t v64 = v2[45];
  id v65 = v2[46];
  uint64_t v87 = v65;
  uint64_t v67 = v2[43];
  uint64_t v66 = v2[44];
  id v68 = v2[42];
  uint64_t v101 = v64;
  uint64_t v84 = v2[35];
  uint64_t v85 = v2[34];
  uint64_t v86 = (void *)v2[33];
  outlined init with copy of OutputPublisherAsync(v2[36] + 16, (uint64_t)(v2 + 2));
  swift_beginAccess();
  uint64_t v97 = v2[18];
  swift_beginAccess();
  char v81 = v2[19];
  uint64_t v82 = v2[22];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v64, v65, v68);
  uint64_t v69 = v67;
  uint64_t v83 = v67;
  uint64_t v70 = (*(unsigned __int8 *)(v67 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
  uint64_t v71 = (v66 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v72 = (v71 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v73 = (v72 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v74 = (v73 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v75 = (v74 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v76 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v69 + 32))(v76 + v70, v101, v68);
  *(void *)(v76 + v71) = v84;
  *(void *)(v76 + v72) = v81;
  *(void *)(v76 + v73) = v97;
  *(void *)(v76 + v74) = v82;
  *(void *)(v76 + v75) = v85;
  *(void *)(v76 + ((v75 + 15) & 0xFFFFFFFFFFFFFFF8)) = v86;
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  uint64_t v77 = v86;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v102[20] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  uint64_t v78 = Flow.eraseToAnyFlow()();
  (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v87, v68);
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v90, v89);
  (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v93, v92);
  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v96, v95);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v79 = (uint64_t (*)(uint64_t))v102[1];
  return v79(v78);
}

uint64_t closure #1 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = v11;
  v8[11] = v12;
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  void v8[2] = a1;
  v8[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
  v8[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogPhase?);
  v8[13] = swift_task_alloc();
  return _swift_task_switch(closure #1 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:), 0, 0);
}

uint64_t closure #1 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  uint64_t v4 = *(void *)(v0[3] + 56);
  uint64_t v5 = type metadata accessor for DialogPhase();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v1, v2, v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v1, 0, 1, v5);
  uint64_t v7 = v0[12];
  if (v3)
  {
    uint64_t v8 = PommesResponse.requestId.getter();
    uint64_t v10 = v9;
    PommesResponse.pommesCandidateId.getter();
  }
  else
  {
    uint64_t v11 = type metadata accessor for PommesCandidateId();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 1, 1, v11);
    uint64_t v10 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v13 = v0[12];
  uint64_t v12 = v0[13];
  uint64_t v14 = (uint64_t *)v0[2];
  uint64_t v15 = (*(uint64_t (**)(void, void, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 152))(v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v12, v8, v10, v13);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  outlined destroy of Any?(v13, (uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
  outlined destroy of Any?(v12, &demangling cache variable for type metadata for DialogPhase?);
  *uint64_t v14 = v15;
  v14[1] = v17;
  swift_task_dealloc();
  swift_task_dealloc();
  long long v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:), 0, 0);
}

uint64_t closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)()
{
  uint64_t v1 = (uint64_t *)v0[2];
  uint64_t *v1 = static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)(v0[3], v0[4], v0[5]);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t closure #3 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a7;
  v8[20] = a8;
  v8[17] = a5;
  v8[18] = a6;
  v8[15] = a3;
  v8[16] = a4;
  v8[13] = a1;
  v8[14] = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
  v8[21] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  v8[22] = v9;
  v8[23] = *(void *)(v9 - 8);
  v8[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v8[25] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for AceOutput();
  v8[26] = v10;
  v8[27] = *(void *)(v10 - 8);
  v8[28] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for NLContextUpdate();
  v8[29] = v11;
  v8[30] = *(void *)(v11 - 8);
  v8[31] = swift_task_alloc();
  return _swift_task_switch(closure #3 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:), 0, 0);
}

uint64_t closure #3 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)()
{
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[30] + 16);
  v33(v0[31], v0[14], v0[29]);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[15];
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134218240;
    v0[11] = *(void *)(v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2048;
    swift_beginAccess();
    uint64_t v6 = NLContextUpdate.rrEntities.getter();
    if (v6)
    {
      uint64_t v7 = v6;
      swift_endAccess();
      uint64_t v8 = *(void *)(v7 + 16);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_endAccess();
      uint64_t v8 = 0;
    }
    v0[12] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v2, v3, "Setting %ld entities on NLContextUpdate (displacing %ld)", (uint8_t *)v5, 0x16u);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  unint64_t v9 = v0[17];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  NLContextUpdate.rrEntities.setter();
  swift_endAccess();
  if (v9 >> 62)
  {
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SABaseCommand);
    swift_bridgeObjectRetain();
    unint64_t v10 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SABaseCommand);
    unint64_t v10 = v0[17];
  }
  uint64_t v12 = v0[30];
  uint64_t v11 = v0[31];
  uint64_t v13 = v0[29];
  uint64_t v14 = v0[24];
  uint64_t v15 = v0[25];
  uint64_t v16 = v0[23];
  uint64_t v29 = v0[22];
  uint64_t v31 = v0[20];
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v10);
  unint64_t v17 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v17);
  v33(v15, v11, v13);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v13);
  AceOutput.init(commands:flowActivity:nlContextUpdate:)();
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  Date.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (taskType: String?, isTerminalStepLogged: Bool));
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v29);
  swift_bridgeObjectRelease();
  static PerformanceUtil.shared.getter();
  uint64_t v18 = v0[21];
  if (v31)
  {
    PommesResponse.requestId.getter();
    PommesResponse.pommesCandidateId.getter();
  }
  else
  {
    uint64_t v19 = type metadata accessor for PommesCandidateId();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  }
  uint64_t v20 = v0[30];
  uint64_t v21 = v0[31];
  uint64_t v22 = v0[27];
  uint64_t v30 = v0[28];
  uint64_t v32 = v0[29];
  uint64_t v23 = v0[26];
  uint64_t v24 = v0[21];
  uint64_t v25 = (uint64_t *)v0[13];
  dispatch thunk of PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of Any?(v24, (uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
  v25[3] = v23;
  v25[4] = (uint64_t)&protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v25);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v30, v23);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v32);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v27 = (uint64_t (*)(void))v0[1];
  return v27();
}

uint64_t RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  return _swift_task_switch(RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:), 0, 0);
}

uint64_t RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)()
{
  uint64_t v20 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "RenderPegasusFlow making flow to render PegasusResult in Navigation", v4, 2u);
    swift_slowDealloc();
  }
  int8x16_t v18 = v0[5];
  uint64_t v6 = v0[6].i64[1];
  uint64_t v5 = v0[7].i64[0];
  uint64_t v7 = v0[6].i64[0];

  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  *(int8x16_t *)(swift_task_alloc() + 16) = vextq_s8(v18, v18, 8uLL);
  Date.init()();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SABaseCommand]);
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc();
  uint64_t v8 = v0[3].i64[1];
  swift_bridgeObjectRetain_n();
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SABaseCommand);
    swift_bridgeObjectRetain();
    uint64_t v12 = Array.description.getter();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    v0[4].i64[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v9, v10, "RenderPegasusFlow creating output with pegasusViews %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  outlined init with copy of OutputPublisherAsync(v0[5].i64[1] + 16, (uint64_t)v0[1].i64);
  *(void *)(swift_allocObject() + 16) = v8;
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  v0[4].i64[0] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  uint64_t v15 = Flow.eraseToAnyFlow()();
  swift_release();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(uint64_t))v0->i64[1];
  return v16(v15);
}

uint64_t closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for Date();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:), 0, 0);
}

uint64_t closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = (uint64_t *)v0[2];
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  *(void *)(swift_task_alloc() + 16) = v4;
  Date.init()();
  v5[3] = type metadata accessor for AceOutput();
  v5[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v5);
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t closure #1 in closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of Any?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  return outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for NLContextUpdate?);
}

id RenderComponentFlowFactory.addSiriSuggestion(_:toPegasusViews:toPegasusCommands:)(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for HintsUI();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = HintsUI.snippet.getter();
  uint64_t p_name = (uint64_t)&stru_CFFF8.name;
  if (!v10) {
    goto LABEL_24;
  }
  id v12 = (id)v10;
  uint64_t v13 = *a2;
  if (!((unint64_t)*a2 >> 62))
  {
    id v14 = *(id *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_4;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    if (one-time initialization token for information == -1)
    {
LABEL_18:
      uint64_t v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.information);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        int v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v27 = 0;
        _os_log_impl(&dword_0, v25, v26, "RenderPegasusFlow adding 1 SiriSuggestion view to Pegasus commands", v27, 2u);
        swift_slowDealloc();
      }

      id v28 = [objc_allocWithZone((Class)SAUIAddViews) init];
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_AB670;
      *(void *)(v29 + 32) = v12;
      unint64_t v39 = v29;
      specialized Array._endMutation()();
      type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAAceView);
      id v12 = v12;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v28 setViews:isa];

      id v14 = v28;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + (*a3 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                     + (*a3 & 0xFFFFFFFFFFFFFF8)) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_23;
    }
LABEL_38:
    swift_once();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  id v14 = (id)_CocoaArrayWrapper.endIndex.getter();
  if (!v14) {
    goto LABEL_17;
  }
LABEL_4:
  if ((v13 & 0xC000000000000001) != 0)
  {
    id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
    id v14 = v15;
    swift_bridgeObjectRelease();
    if (one-time initialization token for information == -1) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
  if (*(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFFF8)))
  {
    id v15 = *(id *)(v13 + 32);
    goto LABEL_7;
  }
  __break(1u);
LABEL_35:
  swift_once();
LABEL_8:
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.information);
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_0, v17, v18, "RenderPegasusFlow adding 1 SiriSuggestion view to Pegasus views", v19, 2u);
    swift_slowDealloc();
  }

  id v12 = v12;
  id result = [v14 views];
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v21 = result;
  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAAceView);
  unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v39 = v22;
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t p_name = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (p_name < 0)
    {
      __break(1u);
      goto LABEL_38;
    }
  }
  specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)v12);
  if (v39)
  {
    v23.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v23.super.Class isa = 0;
  }
  uint64_t p_name = 851968;
  [v14 setViews:v23.super.isa];

LABEL_23:
LABEL_24:
  if (*(void *)(p_name + 3944) != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Logger.information);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 134217984;
    unint64_t v35 = HintsUI.supportingCommands.getter();
    if (v35 >> 62) {
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v36 = *(void *)((char *)&dword_10 + (v35 & 0xFFFFFFFFFFFFFF8));
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    unint64_t v39 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v32, v33, "RenderPegasusFlow adding %ld SiriSuggestion supportingCommands to Pegasus commands", v34, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  unint64_t v37 = HintsUI.supportingCommands.getter();
  return (id)specialized Array.append<A>(contentsOf:)(v37);
}

void closure #1 in RenderComponentFlowFactory.makeProfileSwitchIfNeeded(domainObjects:componentsCount:renderOptions:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v27 = a2;
  uint64_t v28 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent();
  uint64_t v3 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component?);
  uint64_t v6 = __chkstk_darwin(v26);
  v25[2] = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v25 - v8;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoObjectComponent();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_DomainObjectComponent.component.getter();
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14) == 1)
  {
    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component?);
  }
  else
  {
    if ((*(unsigned int (**)(char *, uint64_t))(v15 + 88))(v9, v14) == enum case for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component.videoObjects(_:))
    {
      (*(void (**)(char *, uint64_t))(v15 + 96))(v9, v14);
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
      uint64_t v16 = *(void *)(Apple_Parsec_Siri_V2alpha_VideoObjectComponent.tvOrMovieObject.getter() + 16);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v14);
  }
  uint64_t v17 = v28;
  if (one-time initialization token for videoSnippet != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.videoSnippet);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v17);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    v25[1] = v21 + 4;
    Apple_Parsec_Siri_V2alpha_DomainObjectComponent.component.getter();
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v28);
    _os_log_impl(&dword_0, v19, v20, "Ignoring unsupported domain object component: %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v17);
  }

  uint64_t v16 = 0;
LABEL_12:
  uint64_t v24 = v27;
  void *v27 = v16;
  *((unsigned char *)v24 + 8) = 0;
}

uint64_t ErrorFlowFactory.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return v0;
}

uint64_t ErrorFlowFactory.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    unint64_t v9 = a1 + 7;
    for (uint64_t i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!(*v4 >> 62))
    {
      if (*(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFFF8)) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v5) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v8 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v23 + v7;
    if (!__OFADD__(v23, v7)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFFF8));
  uint64_t v10 = v9 + v7;
  if (__OFADD__(v9, v7)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((char *)&dword_18 + (v11 & 0xFFFFFFFFFFFFFF8)) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v4 = v11;
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v14 = (void *)(v13 + 32 + 8 * v6);
  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAAceView);
  swift_arrayDestroy();
  if (v7)
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_17:
        if (v16 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v17 = (char *)(v14 + 1);
        uint64_t v18 = (char *)(v13 + 32 + 8 * v5);
        if (v14 + 1 != (void *)v18 || v17 >= &v18[8 * v16]) {
          memmove(v17, v18, 8 * v16);
        }
        if (!(v11 >> 62))
        {
          uint64_t v19 = *(void *)(v13 + 16);
          uint64_t v20 = v19 + v7;
          if (!__OFADD__(v19, v7))
          {
LABEL_23:
            *(void *)(v13 + 16) = v20;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v20 = v25 + v7;
        if (!__OFADD__(v25, v7)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = v15 - v5;
      if (!__OFSUB__(v15, v5)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  *uint64_t v14 = v3;

  return specialized Array._endMutation()();
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

uint64_t partial apply for closure #1 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return closure #1 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:), 0, 0);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

id specialized RenderComponentFlowFactory.makeProfileSwitchIfNeeded(domainObjects:componentsCount:renderOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2 || !*(void *)(a2 + 16) || (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(4u), (v18 & 1) == 0))
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.information);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v26, v27)) {
      goto LABEL_14;
    }
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    uint64_t v29 = "Cannot find any domain object made, skipping making ProfileSwitch";
    goto LABEL_13;
  }
  if (*(void *)(*(void *)(a2 + 56) + 8 * v17) != 1)
  {
    if (one-time initialization token for information == -1)
    {
LABEL_25:
      uint64_t v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static Logger.information);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v26, v27)) {
        goto LABEL_14;
      }
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      uint64_t v29 = "More than one domain objects were made, skipping making ProfileSwitch";
LABEL_13:
      _os_log_impl(&dword_0, v26, v27, v29, v28, 2u);
      swift_slowDealloc();
LABEL_14:

      return 0;
    }
LABEL_46:
    swift_once();
    goto LABEL_25;
  }
  if (!a3)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    goto LABEL_28;
  }
  PommesRenderOptions.switchProfile.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
LABEL_28:
    outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.information);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v26, v27)) {
      goto LABEL_14;
    }
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    uint64_t v29 = "No switchProfileBuilderParams is available, skipping making ProfileSwitch";
    goto LABEL_13;
  }
  uint64_t v53 = v7;
  uint64_t v54 = v14;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  uint64_t v19 = a1;
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20)
  {
    uint64_t v52 = v13;
    uint64_t v21 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent() - 8);
    uint64_t v22 = v19 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    uint64_t v23 = *(void *)(v21 + 72);
    v51[1] = v19;
    swift_bridgeObjectRetain();
    uint64_t v24 = (char *)&_swiftEmptyArrayStorage;
    do
    {
      closure #1 in RenderComponentFlowFactory.makeProfileSwitchIfNeeded(domainObjects:componentsCount:renderOptions:)(v22, &v55);
      if ((v56 & 1) == 0)
      {
        uint64_t v32 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
        }
        unint64_t v34 = *((void *)v24 + 2);
        unint64_t v33 = *((void *)v24 + 3);
        unint64_t v35 = v34 + 1;
        if (v34 >= v33 >> 1)
        {
          v51[0] = v34 + 1;
          uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v24);
          unint64_t v35 = v51[0];
          uint64_t v24 = v36;
        }
        *((void *)v24 + 2) = v35;
        *(void *)&v24[8 * v34 + 32] = v32;
      }
      v22 += v23;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    uint64_t v13 = v52;
  }
  else
  {
    uint64_t v24 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v39 = *((void *)v24 + 2);
  uint64_t v40 = v54;
  uint64_t v41 = 0;
  if (v39)
  {
    uint64_t v42 = (uint64_t *)(v24 + 32);
    while (1)
    {
      uint64_t v43 = *v42++;
      BOOL v44 = __OFADD__(v41, v43);
      v41 += v43;
      if (v44) {
        break;
      }
      if (!--v39) {
        goto LABEL_38;
      }
    }
    __break(1u);
    goto LABEL_46;
  }
LABEL_38:
  swift_bridgeObjectRelease();
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v45 = type metadata accessor for Logger();
  __swift_project_value_buffer(v45, (uint64_t)static Logger.information);
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v48 = 134217984;
    uint64_t v55 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v46, v47, "Found %ld tvOrMovieObject in videoObjects", v48, 0xCu);
    swift_slowDealloc();
  }

  if (v41 == 1)
  {
    id v30 = [objc_allocWithZone((Class)SAProfileSwitch) init];
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v9, v6);
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v30 setAceId:v49];

    Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams.userID.getter();
    NSString v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v30 setSharedUserId:v50];

    (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v13);
    return v30;
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v13);
  return 0;
}

uint64_t sub_22B20()
{
  uint64_t v1 = type metadata accessor for NLContextUpdate();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t partial apply for closure #3 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for NLContextUpdate() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = v1 + v6;
  uint64_t v13 = *(void *)(v1 + v7);
  uint64_t v14 = *(void *)(v1 + v8);
  uint64_t v15 = *(void *)(v1 + v9);
  uint64_t v16 = *(void *)(v1 + v10);
  uint64_t v17 = *(void *)(v1 + v11);
  uint64_t v18 = *(void *)(v1 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v19;
  *uint64_t v19 = v3;
  v19[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return closure #3 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)(a1, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t partial apply for closure #1 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(v1 + 16) + 56) + 160))(*(void *)(v1 + 24));
  *a1 = result;
  return result;
}

uint64_t sub_22E00()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)(a1, v4);
}

uint64_t type metadata accessor for SABaseCommand(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t type metadata accessor for RenderComponentFlowFactory()
{
  return self;
}

uint64_t partial apply for closure #1 in closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)()
{
  return closure #1 in closure #2 in RenderComponentFlowFactory.makeRenderComponentNavigationFlow(layouts:)();
}

uint64_t partial apply for closure #1 in closure #3 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 128))();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t closure #1 in ResponseFlowFactory.outputManifest(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v3 - 8);
  char v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  return OutputGenerationManifest.nlContextUpdate.setter();
}

uint64_t ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:) + async function pointer to specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:));
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v10 + 16) = v18;
  *uint64_t v18 = v10;
  v18[1] = ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:)(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  char v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = v14;
  v8[18] = v15;
  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[11] = a3;
  v8[12] = a4;
  v8[9] = a1;
  v8[10] = a2;
  type metadata accessor for DialogPhase();
  v8[19] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for NLContextUpdate();
  v8[20] = v9;
  v8[21] = *(void *)(v9 - 8);
  v8[22] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for OutputGenerationManifest();
  v8[23] = v10;
  v8[24] = *(void *)(v10 - 8);
  v8[25] = swift_task_alloc();
  type metadata accessor for Date();
  v8[26] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for PerformanceUtil.Ticket();
  v8[27] = v11;
  v8[28] = *(void *)(v11 - 8);
  v8[29] = swift_task_alloc();
  return _swift_task_switch(specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:), 0, 0);
}

uint64_t specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:)()
{
  uint64_t v23 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[10];
  if (v4)
  {
    uint64_t v6 = v0[9];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v8 = Dictionary.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v2, v3, "ResponseFlowFactory.makeRenderPatternFlow making default pattern flow for patternId %s : %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v11 = (void *)v0[18];
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v12 = v11[3];
  uint64_t v13 = v11[4];
  __swift_project_boxed_opaque_existential_1(v11, v12);
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 8)
                                                                                              + **(int **)(v13 + 8));
  uint64_t v14 = (void *)swift_task_alloc();
  v0[30] = v14;
  *uint64_t v14 = v0;
  v14[1] = specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  uint64_t v15 = v0[16];
  uint64_t v17 = v0[11];
  uint64_t v16 = v0[12];
  uint64_t v18 = v0[10];
  uint64_t v19 = v0[9];
  return v21(v19, v18, v16, v17, v15, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v12 = v0[29];
  uint64_t v13 = (void *)v0[32];
  uint64_t v16 = v0[28];
  uint64_t v17 = v0[27];
  uint64_t v1 = v0[22];
  uint64_t v14 = v0[24];
  uint64_t v15 = v0[23];
  uint64_t v2 = v0[21];
  unint64_t v10 = v0[25];
  uint64_t v11 = v0[20];
  os_log_type_t v3 = v0[17];
  unint64_t v5 = v0[14];
  BOOL v4 = v0[15];
  uint64_t v6 = v0[13];
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  static PatternFlowProvidingHelper.unwrap(_:with:)(v3, v4, v0 + 2);
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  NLContextUpdate.init()();
  outlined copy of Data?(v6, v5);
  NLContextUpdate.pegasusConversationContext.setter();
  static DialogPhase.completion.getter();
  *(void *)(swift_task_alloc() + 16) = v1;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v11);
  uint64_t v7 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)();

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v10, v15);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v12, v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v7);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[28] + 8))(v0[29], v0[27]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 248) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  }
  else
  {
    *(void *)(v4 + 256) = a1;
    unint64_t v5 = specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  }
  return _swift_task_switch(v5, 0, 0);
}

ValueMetadata *type metadata accessor for ResponseFlowFactory()
{
  return &type metadata for ResponseFlowFactory;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t partial apply for closure #1 in ResponseFlowFactory.outputManifest(for:)(uint64_t a1)
{
  return closure #1 in ResponseFlowFactory.outputManifest(for:)(a1, *(void *)(v1 + 16));
}

uint64_t InformationFlowPlugin.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PatternExecutor.execute(pattern:in:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  return _swift_task_switch(PatternExecutor.execute(pattern:in:with:), 0, 0);
}

uint64_t PatternExecutor.execute(pattern:in:with:)()
{
  uint64_t v1 = v0[11];
  static Device.current.getter();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)(*(void *)v1 + 88)
                                                                            + **(int **)(*(void *)v1 + 88));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[12] = v2;
  *uint64_t v2 = v0;
  v2[1] = PatternExecutor.execute(pattern:in:with:);
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[7];
  return v8(v6, v4, v5, v3, v0 + 2);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PatternExecutor.execute(pattern:in:with:)(uint64_t a1)
{
  uint64_t v4 = *v2 + 16;
  uint64_t v5 = *v2;
  *(void *)(v5 + 104) = v1;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v4);
  if (v1)
  {
    return _swift_task_switch(PatternExecutor.execute(pattern:in:with:), 0, 0);
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v6(a1);
  }
}

uint64_t PatternExecutor.execute(pattern:in:with:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[23] = a4;
  v5[24] = a5;
  v5[21] = a2;
  v5[22] = a3;
  v5[20] = a1;
  return _swift_task_switch(PatternExecutor.execute(pattern:in:with:deviceState:), 0, 0);
}

uint64_t PatternExecutor.execute(pattern:in:with:deviceState:)()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v11 = v0[22];
  uint64_t v3 = self;
  NSString v4 = String._bridgeToObjectiveC()();
  v0[25] = v4;
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[26] = isa;
  swift_bridgeObjectRelease();
  type metadata accessor for CATGlobals();
  outlined init with copy of OutputPublisherAsync(v1, (uint64_t)(v0 + 10));
  static CATGlobals.defaultBuilder(deviceState:)();
  outlined destroy of DeviceState?((uint64_t)(v0 + 10));
  uint64_t v6 = (void *)dispatch thunk of CATGlobals.Builder.build()();
  swift_release();
  dispatch thunk of CATGlobals.toDictionary.getter();

  Class v7 = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[27] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = CATDefaultMode;
  v0[2] = v0;
  v0[7] = v0 + 19;
  v0[3] = PatternExecutor.execute(pattern:in:with:deviceState:);
  uint64_t v9 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned PatternExecutionResult, @unowned NSError?) -> () with result type PatternExecutionResult;
  v0[13] = &block_descriptor;
  v0[14] = v9;
  [v3 execute:v11 patternId:v4 parameters:isa globals:v7 options:v8 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 224) = v1;
  if (v1) {
    uint64_t v2 = PatternExecutor.execute(pattern:in:with:deviceState:);
  }
  else {
    uint64_t v2 = PatternExecutor.execute(pattern:in:with:deviceState:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  uint64_t v1 = *(void **)(v0 + 208);
  uint64_t v2 = *(void **)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 152);

  NSString v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15[2];
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  uint64_t v1 = (void *)v0[27];
  uint64_t v3 = (void *)v0[25];
  uint64_t v2 = (void *)v0[26];
  swift_willThrow();

  if (one-time initialization token for information != -1) {
    swift_once();
  }
  NSString v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  Class v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[21];
  if (v7)
  {
    uint64_t v9 = v0[20];
    unint64_t v10 = swift_slowAlloc();
    v15[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 136315394;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v11 = Error.localizedDescription.getter();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v5, v6, "PatternExecutor: Failed to execute Pattern: %s with error: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    void v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    outlined init with take of Any(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    outlined init with take of Any(v36, v37);
    outlined init with take of Any(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)outlined init with take of Any(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : Any].Iterator._Variant();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned PatternExecutionResult, @unowned NSError?) -> () with result type PatternExecutionResult(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(void **)(*(void *)(v3 + 64) + 40) = a2;
    id v8 = a2;
    return _swift_continuation_throwingResume(v3);
  }
}

uint64_t InformationFlowPlugin.deinit()
{
  return v0;
}

uint64_t InformationFlowPlugin.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t outlined destroy of DeviceState?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceState?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for PatternExecutorProtocol.execute(pattern:in:with:deviceState:) in conformance PatternExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v5 + 88)
                                                                            + **(int **)(**(void **)v5 + 88));
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *unint64_t v12 = v6;
  v12[1] = ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  return v14(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v4 + 80)
                                                                   + **(int **)(**(void **)v4 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return v12(a1, a2, a3, a4);
}

uint64_t type metadata accessor for PatternExecutor()
{
  return self;
}

void *ReadingFlowNL.Nodes.domain.unsafeMutableAddressor()
{
  return &static ReadingFlowNL.Nodes.domain;
}

unint64_t static ReadingFlowNL.Nodes.domain.getter()
{
  return 0xD000000000000018;
}

void *ReadingFlowNL.Nodes.confirmation.unsafeMutableAddressor()
{
  return &static ReadingFlowNL.Nodes.confirmation;
}

unint64_t static ReadingFlowNL.Nodes.confirmation.getter()
{
  return 0xD000000000000024;
}

void *ReadingFlowNL.Values.abort.unsafeMutableAddressor()
{
  return &static ReadingFlowNL.Values.abort;
}

unint64_t static ReadingFlowNL.Values.abort.getter()
{
  return 0xD000000000000031;
}

void *ReadingFlowNL.Values.yes.unsafeMutableAddressor()
{
  return &static ReadingFlowNL.Values.yes;
}

unint64_t static ReadingFlowNL.Values.yes.getter()
{
  return 0xD00000000000002ELL;
}

void *ReadingFlowNL.Values.no.unsafeMutableAddressor()
{
  return &static ReadingFlowNL.Values.no;
}

unint64_t static ReadingFlowNL.Values.no.getter()
{
  return 0xD00000000000002DLL;
}

ValueMetadata *type metadata accessor for ReadingFlowNL()
{
  return &type metadata for ReadingFlowNL;
}

ValueMetadata *type metadata accessor for ReadingFlowNL.Nodes()
{
  return &type metadata for ReadingFlowNL.Nodes;
}

ValueMetadata *type metadata accessor for ReadingFlowNL.Values()
{
  return &type metadata for ReadingFlowNL.Values;
}

uint64_t ShimOverrideFlow.__allocating_init(with:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue) = 0;
  type metadata accessor for ShimOverrideFlow.ExitValue(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v3 = v2 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_parse;
  uint64_t v4 = type metadata accessor for Parse.DirectInvocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v3, a1, v4);
  return v2;
}

Swift::Bool __swiftcall Apple_Parsec_Siri_V2alpha_ExperienceComponent.hasComponent(component:)(Swift::String component)
{
  object = component._object;
  uint64_t countAndFlagsBits = component._countAndFlagsBits;
  uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  uint64_t v27 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoObjectComponent();
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  uint64_t v25 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = countAndFlagsBits;
  v14._object = object;
  Swift::Int v15 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ComponentID.init(rawValue:), v14);
  swift_bridgeObjectRelease();
  if (v15 == 2)
  {
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter();
    uint64_t v21 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v29);
LABEL_9:
    uint64_t v22 = *(void *)(v21 + 16);
    swift_bridgeObjectRelease();
    BOOL v20 = v22 == 0;
    return !v20;
  }
  if (v15 == 1)
  {
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.domainObjectComponent.getter();
    Apple_Parsec_Siri_V2alpha_DomainObjectComponent.geoObjects.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v21 = Apple_Parsec_Siri_V2alpha_GeoObjectComponent.geoObject.getter();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v28);
    goto LABEL_9;
  }
  if (v15) {
    return 0;
  }
  Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
  uint64_t v16 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
  unint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v11);
  swift_bridgeObjectRelease();
  uint64_t v19 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0) {
    uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v20 = v19 == 0;
  return !v20;
}

uint64_t ShimOverrideFlow.parse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_parse;
  uint64_t v4 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t key path setter for ShimOverrideFlow.exitValue : ShimOverrideFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShimOverrideFlow.ExitValue(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ShimOverrideFlow.ExitValue(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 104))(v6);
}

uint64_t ShimOverrideFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue;
  swift_beginAccess();
  return outlined init with copy of ShimOverrideFlow.ExitValue(v3, a1);
}

uint64_t ShimOverrideFlow.exitValue.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue;
  swift_beginAccess();
  outlined assign with take of ShimOverrideFlow.ExitValue(a1, v3);
  return swift_endAccess();
}

uint64_t (*ShimOverrideFlow.exitValue.modify())()
{
  return InformationRoutingFlow.state.modify;
}

uint64_t ShimOverrideFlow.init(with:)(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue) = 0;
  type metadata accessor for ShimOverrideFlow.ExitValue(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_parse;
  uint64_t v4 = type metadata accessor for Parse.DirectInvocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v3, a1, v4);
  return v1;
}

uint64_t type metadata accessor for ShimOverrideFlow.ExitValue(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for ShimOverrideFlow.ExitValue);
}

uint64_t ShimOverrideFlow.__allocating_init()()
{
  uint64_t v1 = type metadata accessor for Parse.DirectInvocation();
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Parse.DirectInvocation.init(identifier:userData:)();
  return (*(uint64_t (**)(char *))(v0 + 120))(v3);
}

uint64_t ShimOverrideFlow.execute()(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  v2[10] = type metadata accessor for ShimOverrideFlow.ExitValue(0);
  v2[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Parse.PegasusResult();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent();
  v2[19] = v5;
  v2[20] = *(void *)(v5 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  v2[22] = v6;
  v2[23] = *(void *)(v6 - 8);
  v2[24] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v2[25] = v7;
  v2[26] = *(void *)(v7 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  v2[30] = v8;
  v2[31] = *(void *)(v8 - 8);
  v2[32] = swift_task_alloc();
  return _swift_task_switch(ShimOverrideFlow.execute(), 0, 0);
}

uint64_t ShimOverrideFlow.execute()()
{
  if (Parse.DirectInvocation.identifier.getter() == 0xD00000000000003ELL && v1 == 0x80000000000AD890)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      unint64_t v17 = *(uint64_t **)(v0 + 88);
      uint64_t v18 = *(void *)(v0 + 72);
      uint64_t v19 = Parse.DirectInvocation.identifier.getter();
      uint64_t v21 = v20;
      lazy protocol witness table accessor for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError();
      uint64_t v22 = swift_allocError();
      *(void *)uint64_t v23 = v19;
      *(void *)(v23 + 8) = v21;
      *(unsigned char *)(v23 + 16) = 0;
      *unint64_t v17 = v22;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *))(*(void *)v18 + 104))(v17);
      goto LABEL_19;
    }
  }
  uint64_t v3 = Parse.DirectInvocation.userData.getter();
  if (!v3)
  {
    uint64_t v10 = *(uint64_t **)(v0 + 88);
    uint64_t v11 = *(void *)(v0 + 72);
    lazy protocol witness table accessor for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError();
    uint64_t v12 = swift_allocError();
    *(_OWORD *)uint64_t v13 = xmmword_AB7C0;
    char v16 = 1;
    goto LABEL_17;
  }
  uint64_t v4 = v3;
  if (!*(void *)(v3 + 16)
    || (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x80000000000AE8D0), (v6 & 1) == 0))
  {
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v5, v0 + 16);
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 40))
  {
LABEL_13:
    outlined destroy of Any?(v0 + 16, &demangling cache variable for type metadata for Any?);
    goto LABEL_14;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:
    uint64_t v10 = *(uint64_t **)(v0 + 88);
    uint64_t v11 = *(void *)(v0 + 72);
    lazy protocol witness table accessor for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError();
    uint64_t v12 = swift_allocError();
    unint64_t v14 = 0xD00000000000002DLL;
    Swift::Int v15 = "did not recieve expected base64Encoded String";
    goto LABEL_15;
  }
  uint64_t v7 = Data.init(base64Encoded:options:)();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (v9 >> 60 == 15)
  {
    uint64_t v10 = *(uint64_t **)(v0 + 88);
    uint64_t v11 = *(void *)(v0 + 72);
    lazy protocol witness table accessor for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError();
    uint64_t v12 = swift_allocError();
    unint64_t v14 = 0xD000000000000022;
    Swift::Int v15 = "did not recieve expected type Data";
LABEL_15:
    *(void *)uint64_t v13 = v14;
    *(void *)(v13 + 8) = (unint64_t)(v15 - 32) | 0x8000000000000000;
    char v16 = 2;
LABEL_17:
    *(unsigned char *)(v13 + 16) = v16;
    *uint64_t v10 = v12;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *))(*(void *)v11 + 104))(v10);
LABEL_19:
    static ExecuteResponse.complete()();
    goto LABEL_20;
  }
  type metadata accessor for GenericExperience();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v28 = objc_msgSend(ObjCClassFromMetadata, "bs_secureDecodedFromData:", isa);

  if (v28)
  {
    getComponent #1 (_:) in ShimOverrideFlow.execute()(0x64657265646E6572, (void *)0xEE00676F6C616944, *(void *)(v0 + 232));
    uint64_t v30 = *(void *)(v0 + 224);
    uint64_t v29 = *(void *)(v0 + 232);
    uint64_t v31 = *(void *)(v0 + 200);
    uint64_t v32 = *(void *)(v0 + 208);
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
    uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v61(v29, v31);
    getComponent #1 (_:) in ShimOverrideFlow.execute()(0xD000000000000016, (void *)0x80000000000AD980, v30);
    uint64_t v38 = *(void *)(v0 + 216);
    uint64_t v37 = *(void *)(v0 + 224);
    uint64_t v39 = *(void *)(v0 + 200);
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter();
    v61(v37, v39);
    getComponent #1 (_:) in ShimOverrideFlow.execute()(0xD000000000000015, (void *)0x80000000000AD960, v38);
    uint64_t v40 = *(void *)(v0 + 248);
    uint64_t v60 = *(void *)(v0 + 256);
    uint64_t v41 = *(void *)(v0 + 216);
    uint64_t v55 = *(void *)(v0 + 240);
    uint64_t v42 = *(void *)(v0 + 200);
    uint64_t v59 = *(void *)(v0 + 192);
    uint64_t v43 = *(void *)(v0 + 168);
    uint64_t v53 = *(void *)(v0 + 184);
    uint64_t v54 = *(void *)(v0 + 176);
    uint64_t v51 = *(void *)(v0 + 160);
    uint64_t v52 = *(void *)(v0 + 152);
    uint64_t v45 = *(void *)(v0 + 128);
    uint64_t v46 = *(void *)(v0 + 136);
    uint64_t v56 = *(void *)(v0 + 120);
    uint64_t v57 = *(void *)(v0 + 144);
    uint64_t v58 = *(void *)(v0 + 112);
    uint64_t v47 = *(void *)(v0 + 104);
    uint64_t v48 = *(void *)(v0 + 88);
    uint64_t v49 = *(void *)(v0 + 96);
    uint64_t v50 = *(void *)(v0 + 72);
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.domainObjectComponent.getter();
    v61(v41, v42);
    BOOL v44 = (void *)swift_task_alloc();
    v44[2] = v60;
    v44[3] = v59;
    v44[4] = v43;
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse);
    static Message.with(_:)();
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v46, v57, v56);
    Parse.PegasusResult.init(pegasusResponse:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v48, v58, v49);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t))(*(void *)v50 + 104))(v48);
    static ExecuteResponse.complete()();
    outlined consume of Data?(v7, v9);

    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v58, v49);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v57, v56);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v43, v52);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v59, v54);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v60, v55);
  }
  else
  {
    long long v33 = *(uint64_t **)(v0 + 88);
    uint64_t v34 = *(void *)(v0 + 72);
    lazy protocol witness table accessor for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError();
    uint64_t v35 = swift_allocError();
    *(void *)uint64_t v36 = 0xD00000000000002FLL;
    *(void *)(v36 + 8) = 0x80000000000AE950;
    *(unsigned char *)(v36 + 16) = 2;
    *long long v33 = v35;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *))(*(void *)v34 + 104))(v33);
    static ExecuteResponse.complete()();
    outlined consume of Data?(v7, v9);
  }
LABEL_20:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t getComponent #1 (_:) in ShimOverrideFlow.execute()@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v66 = a1;
  uint64_t v60 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  uint64_t v62 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v59 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoObjectComponent();
  uint64_t v61 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v57 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent();
  uint64_t v51 = *(void (***)(char *, uint64_t))(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v55 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  uint64_t v9 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v53 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent?);
  __chkstk_darwin(v15 - 8);
  uint64_t v48 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = GenericExperience.components.getter();
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v47 = v17;
  if (v18)
  {
    uint64_t v45 = a3;
    uint64_t v46 = v3;
    uint64_t v44 = v12;
    uint64_t v20 = v12 + 16;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
    unint64_t v21 = v17 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    ++v51;
    uint64_t v52 = (void (**)(char *, uint64_t))(v62 + 8);
    uint64_t v49 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v50 = (void (**)(char *, uint64_t))(v61 + 8);
    uint64_t v22 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v62 = *(void *)(v20 + 56);
    uint64_t v63 = v19;
    uint64_t v61 = v20;
    v19(v14, v21, v11);
    while (1)
    {
      swift_bridgeObjectRetain();
      v26._uint64_t countAndFlagsBits = v66;
      v26._object = a2;
      Swift::Int v27 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of getComponent #1 (_:) in ShimOverrideFlow.execute(), v26);
      swift_bridgeObjectRelease();
      if (v27 == 2) {
        break;
      }
      if (v27 == 1)
      {
        long long v33 = v55;
        Apple_Parsec_Siri_V2alpha_ExperienceComponent.domainObjectComponent.getter();
        uint64_t v34 = v57;
        Apple_Parsec_Siri_V2alpha_DomainObjectComponent.geoObjects.getter();
        (*v51)(v33, v56);
        uint64_t v24 = Apple_Parsec_Siri_V2alpha_GeoObjectComponent.geoObject.getter();
        (*v50)(v34, v58);
LABEL_4:
        uint64_t v25 = *(void *)(v24 + 16);
        swift_bridgeObjectRelease();
        if (v25) {
          goto LABEL_19;
        }
        goto LABEL_14;
      }
      if (!v27)
      {
        id v28 = v53;
        Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
        uint64_t v29 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
        unint64_t v31 = v30;
        (*v49)(v28, v54);
        swift_bridgeObjectRelease();
        if ((v31 & 0x2000000000000000) != 0 ? HIBYTE(v31) & 0xF : v29 & 0xFFFFFFFFFFFFLL)
        {
LABEL_19:
          uint64_t v36 = v44;
          uint64_t v37 = (uint64_t)v48;
          (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v48, v14, v11);
          uint64_t v35 = 0;
          a3 = v45;
          goto LABEL_20;
        }
      }
LABEL_14:
      (*v22)(v14, v11);
      v21 += v62;
      if (!--v18)
      {
        uint64_t v35 = 1;
        a3 = v45;
        uint64_t v36 = v44;
        goto LABEL_18;
      }
      v63(v14, v21, v11);
    }
    uint64_t v23 = v59;
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter();
    uint64_t v24 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
    (*v52)(v23, v60);
    goto LABEL_4;
  }
  uint64_t v35 = 1;
  uint64_t v36 = v12;
LABEL_18:
  uint64_t v37 = (uint64_t)v48;
LABEL_20:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v37, v35, 1, v11);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v37, 1, v11) != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(a3, v37, v11);
  }
  outlined destroy of Any?(v37, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent?);
  uint64_t v64 = 2125678;
  unint64_t v65 = 0xE300000000000000;
  v38._uint64_t countAndFlagsBits = v66;
  v38._object = a2;
  String.append(_:)(v38);
  uint64_t v39 = v64;
  unint64_t v40 = v65;
  lazy protocol witness table accessor for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError();
  swift_allocError();
  *(void *)uint64_t v41 = v39;
  *(void *)(v41 + 8) = v40;
  *(unsigned char *)(v41 + 16) = 1;
  return swift_willThrow();
}

uint64_t ShimOverrideFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  __chkstk_darwin(v0);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction);
  static Message.with(_:)();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.setter();
  uint64_t v1 = (void (*)(unsigned char *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.setter();
  v1(v3, 0);
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.setter();
}

uint64_t closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  __chkstk_darwin(v0);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ServerDrivenExperience and conformance Apple_Parsec_Siri_V2alpha_ServerDrivenExperience, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience);
  static Message.with(_:)();
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.setter();
}

uint64_t closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)()
{
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_AB7D0;
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ExperienceComponent and conformance Apple_Parsec_Siri_V2alpha_ExperienceComponent, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent);
  static Message.with(_:)();
  static Message.with(_:)();
  static Message.with(_:)();
  return Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.components.setter();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t (*a4)(char *))
{
  a3(0);
  __chkstk_darwin();
  uint64_t v7 = (char *)v10 - v6;
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)v10 - v6, a2);
  return a4(v7);
}

uint64_t ShimOverrideFlow.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_parse;
  uint64_t v2 = type metadata accessor for Parse.DirectInvocation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of ShimOverrideFlow.ExitValue(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue);
  return v0;
}

uint64_t ShimOverrideFlow.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_parse;
  uint64_t v2 = type metadata accessor for Parse.DirectInvocation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of ShimOverrideFlow.ExitValue(v0 + OBJC_IVAR____TtC21InformationFlowPlugin16ShimOverrideFlow_exitValue);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t protocol witness for Flow.on(input:) in conformance ShimOverrideFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ShimOverrideFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for Flow.execute() in conformance ShimOverrideFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 136) + **(int **)(**(void **)v1 + 136));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ShimOverrideFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t outlined init with copy of ShimOverrideFlow.ExitValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShimOverrideFlow.ExitValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ShimOverrideFlow.ExitValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShimOverrideFlow.ExitValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError()
{
  unint64_t result = lazy protocol witness table cache variable for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError;
  if (!lazy protocol witness table cache variable for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShimOverrideFlow.ShimError and conformance ShimOverrideFlow.ShimError);
  }
  return result;
}

uint64_t partial apply for closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)()
{
  return closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)();
}

uint64_t type metadata accessor for ShimOverrideFlow(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for ShimOverrideFlow);
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of ShimOverrideFlow.ExitValue(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ShimOverrideFlow.ExitValue(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_271D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))();
}

uint64_t ObjC metadata update function for ShimOverrideFlow()
{
  return type metadata accessor for ShimOverrideFlow(0);
}

uint64_t type metadata completion function for ShimOverrideFlow()
{
  uint64_t result = type metadata accessor for Parse.DirectInvocation();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ShimOverrideFlow.ExitValue(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShimOverrideFlow.ExitValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = *a2;
      swift_errorRetain();
      *a1 = v6;
    }
    else
    {
      uint64_t v8 = type metadata accessor for Parse.PegasusResult();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ShimOverrideFlow.ExitValue(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    return swift_errorRelease();
  }
  else
  {
    uint64_t v3 = type metadata accessor for Parse.PegasusResult();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
}

void *initializeWithCopy for ShimOverrideFlow.ExitValue(void *a1, uint64_t *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = *a2;
    swift_errorRetain();
    *a1 = v4;
  }
  else
  {
    uint64_t v5 = type metadata accessor for Parse.PegasusResult();
    (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for ShimOverrideFlow.ExitValue(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ShimOverrideFlow.ExitValue((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = *a2;
      swift_errorRetain();
      *a1 = v4;
    }
    else
    {
      uint64_t v5 = type metadata accessor for Parse.PegasusResult();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for ShimOverrideFlow.ExitValue(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for Parse.PegasusResult();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for ShimOverrideFlow.ExitValue(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ShimOverrideFlow.ExitValue((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for Parse.PegasusResult();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for ShimOverrideFlow.ExitValue()
{
  uint64_t result = type metadata accessor for Parse.PegasusResult();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t outlined copy of ShimOverrideFlow.ShimError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for ShimOverrideFlow.ShimError(uint64_t a1)
{
  return outlined consume of ShimOverrideFlow.ShimError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of ShimOverrideFlow.ShimError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ShimOverrideFlow.ShimError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ShimOverrideFlow.ShimError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ShimOverrideFlow.ShimError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ShimOverrideFlow.ShimError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of ShimOverrideFlow.ShimError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ShimOverrideFlow.ShimError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of ShimOverrideFlow.ShimError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShimOverrideFlow.ShimError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShimOverrideFlow.ShimError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ShimOverrideFlow.ShimError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for ShimOverrideFlow.ShimError(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ShimOverrideFlow.ShimError()
{
  return &type metadata for ShimOverrideFlow.ShimError;
}

uint64_t partial apply for closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)()
{
  return closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)()
{
  return closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)(a1, *(void *)(v1 + 16), (void (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent, (uint64_t (*)(char *))&Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.setter);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)(a1, *(void *)(v1 + 16), (void (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent, (uint64_t (*)(char *))&Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.setter);
}

uint64_t partial apply for closure #3 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in ShimOverrideFlow.makePegasusResponse(renderedDialog:delayedActionComponent:domainObjectComponent:)(a1, *(void *)(v1 + 16), (void (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent, (uint64_t (*)(char *))&Apple_Parsec_Siri_V2alpha_ExperienceComponent.domainObjectComponent.setter);
}

uint64_t WebSearchPunchoutFlow.__allocating_init(query:renderPegasusFlow:state:outputPublisher:informationViewFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, long long *a5, uint64_t a6)
{
  char v11 = a4 & 1;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 72) = a1;
  *(void *)(v12 + 80) = a2;
  outlined init with take of Flow?(a3, v12 + 88);
  *(unsigned char *)(v12 + 64) = v11;
  outlined init with take of PatternFlowProviding(a5, v12 + 16);
  *(void *)(v12 + 56) = a6;
  return v12;
}

BOOL static WebSearchPunchoutFlow.State.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void WebSearchPunchoutFlow.State.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int WebSearchPunchoutFlow.State.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t WebSearchPunchoutFlow.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + 16, a1);
}

uint64_t WebSearchPunchoutFlow.informationViewFactory.getter()
{
  return swift_retain();
}

uint64_t WebSearchPunchoutFlow.state.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t WebSearchPunchoutFlow.state.setter(char a1)
{
  char v2 = a1 & 1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 64) = v2;
  return result;
}

uint64_t (*InformationViewFactory.serverFallbackPreferences.modify())()
{
  return InformationRoutingFlow.state.modify;
}

uint64_t WebSearchPunchoutFlow.init(query:renderPegasusFlow:state:outputPublisher:informationViewFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, long long *a5, uint64_t a6)
{
  char v9 = a4 & 1;
  *(void *)(v6 + 72) = a1;
  *(void *)(v6 + 80) = a2;
  outlined init with take of Flow?(a3, v6 + 88);
  *(unsigned char *)(v6 + 64) = v9;
  outlined init with take of PatternFlowProviding(a5, v6 + 16);
  *(void *)(v6 + 56) = a6;
  return v6;
}

uint64_t outlined init with take of Flow?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Flow?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t WebSearchPunchoutFlow.on(input:)()
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.information);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unsigned int v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned int v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "WebSearchPunchoutFlow does not expect input", v3, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t WebSearchPunchoutFlow.execute()(uint64_t a1)
{
  v2[18] = a1;
  v2[19] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[20] = v3;
  v2[21] = *(void *)(v3 - 8);
  v2[22] = swift_task_alloc();
  return _swift_task_switch(WebSearchPunchoutFlow.execute(), 0, 0);
}

uint64_t WebSearchPunchoutFlow.execute()()
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 184) = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "WebSearchPunchoutFlow.execute", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 152);

  char v6 = (*(uint64_t (**)(void))(*(void *)v5 + 128))();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  if (v6)
  {
    if (v9)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_0, v7, v8, "WebSearchPunchoutFlow: renderPegasus", v16, 2u);
      swift_slowDealloc();
    }
    uint64_t v17 = *(void *)(v0 + 152);

    outlined init with copy of Flow?(v17 + 88, v0 + 56);
    if (*(void *)(v0 + 80))
    {
      outlined init with take of PatternFlowProviding((long long *)(v0 + 56), v0 + 16);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
      static ExecuteResponse.complete<A>(next:)();
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    }
    else
    {
      uint64_t v19 = *(void *)(v0 + 168);
      uint64_t v18 = *(void *)(v0 + 176);
      uint64_t v20 = *(void *)(v0 + 152);
      uint64_t v21 = *(void *)(v0 + 160);
      outlined destroy of Flow?(v0 + 56);
      *(void *)(v0 + 136) = v20;
      type metadata accessor for PerformanceUtil();
      static PerformanceUtil.shared.getter();
      uint64_t v22 = (void *)swift_task_alloc();
      v22[2] = v0 + 136;
      v22[3] = 0xD000000000000039;
      v22[4] = 0x80000000000AE9C0;
      Date.init()();
      type metadata accessor for ExecuteResponse();
      dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v21);
      swift_task_dealloc();
    }
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_0, v7, v8, "WebSearchPunchoutFlow: doWebSearchPunchout", v10, 2u);
      swift_slowDealloc();
    }
    char v11 = *(void **)(v0 + 152);

    uint64_t v12 = v11[5];
    uint64_t v13 = v11[6];
    __swift_project_boxed_opaque_existential_1(v11 + 2, v12);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_AB670;
    *(void *)(v14 + 32) = WebSearchPunchoutFlow.webSearchCommand(query:)();
    specialized Array._endMutation()();
    *(void *)(v0 + 120) = type metadata accessor for AceOutput();
    *(void *)(v0 + 128) = &protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 96));
    AceOutput.init(commands:flowActivity:)();
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v15;
    *uint64_t v15 = v0;
    v15[1] = WebSearchPunchoutFlow.execute();
    return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 96, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  os_log_type_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v3 = WebSearchPunchoutFlow.execute();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v2 + 96);
    os_log_type_t v3 = WebSearchPunchoutFlow.execute();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  static ExecuteResponse.complete()();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "Failed to execute web search punchout.", v3, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  static ExecuteResponse.complete()();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t WebSearchPunchoutFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

id WebSearchPunchoutFlow.webSearchCommand(query:)()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  os_log_type_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
  WebSearchPunchoutFlow.googleSearchURLForQuery(_:)();
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  char v11 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    URL._bridgeToObjectiveC()(v10);
    char v11 = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setPunchOutUri:v11];

  id v13 = v7;
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 setAceId:v14];

  return v13;
}

uint64_t WebSearchPunchoutFlow.googleSearchURLForQuery(_:)()
{
  uint64_t v0 = type metadata accessor for URLComponents();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  os_log_type_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>);
  type metadata accessor for URLQueryItem();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_AB8F0;
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLComponents.queryItems.setter();
  URLComponents.url.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t WebSearchPunchoutFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of Flow?(v0 + 88);
  return v0;
}

uint64_t WebSearchPunchoutFlow.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of Flow?(v0 + 88);

  return _swift_deallocClassInstance(v0, 128, 7);
}

uint64_t protocol witness for Flow.on(input:) in conformance WebSearchPunchoutFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WebSearchPunchoutFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for Flow.execute() in conformance WebSearchPunchoutFlow(uint64_t a1)
{
  char v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 192) + **(int **)(**(void **)v1 + 192));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance WebSearchPunchoutFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t protocol witness for FlowTrampolining.outputPublisher.getter in conformance WebSearchPunchoutFlow@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(*v1 + 16, a1);
}

uint64_t protocol witness for FlowTrampolining.informationViewFactory.getter in conformance WebSearchPunchoutFlow()
{
  return swift_retain();
}

uint64_t outlined init with copy of Flow?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Flow?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Flow?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Flow?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for WebSearchPunchoutFlow()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow;
  if (!lazy protocol witness table cache variable for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow)
  {
    type metadata accessor for WebSearchPunchoutFlow();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WebSearchPunchoutFlow and conformance WebSearchPunchoutFlow);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WebSearchPunchoutFlow.State and conformance WebSearchPunchoutFlow.State()
{
  unint64_t result = lazy protocol witness table cache variable for type WebSearchPunchoutFlow.State and conformance WebSearchPunchoutFlow.State;
  if (!lazy protocol witness table cache variable for type WebSearchPunchoutFlow.State and conformance WebSearchPunchoutFlow.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WebSearchPunchoutFlow.State and conformance WebSearchPunchoutFlow.State);
  }
  return result;
}

uint64_t sub_290E8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_29138(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 136))(*a1);
}

uint64_t sub_29180(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 160))();
}

uint64_t sub_291C4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 168))();
}

unsigned char *storeEnumTagSinglePayload for WebSearchPunchoutFlow.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x292D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WebSearchPunchoutFlow.State()
{
  return &type metadata for WebSearchPunchoutFlow.State;
}

uint64_t *SearchFlow.defaultPegasusBundleIdentifiers.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultPegasusBundleIdentifiers != -1) {
    swift_once();
  }
  return &static SearchFlow.defaultPegasusBundleIdentifiers;
}

uint64_t static SearchFlow.defaultPegasusBundleIdentifiers.getter()
{
  if (one-time initialization token for defaultPegasusBundleIdentifiers != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

void *SearchFlow.userCanceledCatId.unsafeMutableAddressor()
{
  return &static SearchFlow.userCanceledCatId;
}

void *SearchFlow.noMoreItemsCatId.unsafeMutableAddressor()
{
  return &static SearchFlow.noMoreItemsCatId;
}

void *SearchFlow.notSupportedCatId.unsafeMutableAddressor()
{
  return &static SearchFlow.notSupportedCatId;
}

unint64_t static SearchFlow.notSupportedCatId.getter()
{
  return 0xD000000000000021;
}

uint64_t SearchFlow.nlContextUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_nlContextUpdate;
  swift_beginAccess();
  return outlined init with copy of IdentifiedUser?(v3, a1, &demangling cache variable for type metadata for NLContextUpdate?);
}

uint64_t SearchFlow.nlContextUpdate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_nlContextUpdate;
  swift_beginAccess();
  outlined assign with take of NLContextUpdate?(a1, v3);
  return swift_endAccess();
}

uint64_t (*SearchFlow.nlContextUpdate.modify())()
{
  return InformationRoutingFlow.state.modify;
}

uint64_t SearchFlow.targetedRequest.getter()
{
  return swift_retain();
}

uint64_t SearchFlow.targetedRequest.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_targetedRequest);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*SearchFlow.targetedRequest.modify())()
{
  return PushOffQueryFlow.targetedRequest.modify;
}

uint64_t SearchFlow.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_outputPublisher, a1);
}

uint64_t SearchFlow.informationViewFactory.getter()
{
  return swift_retain();
}

uint64_t key path setter for SearchFlow.state : SearchFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchFlow.State(0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SearchFlow.State(a1, (uint64_t)v6, type metadata accessor for SearchFlow.State);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 208))(v6);
}

void SearchFlow.state.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SearchFlow.State(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.information);
  swift_retain_n();
  v13[0] = (id)Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled((os_log_t)v13[0], v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v14 = v8;
    uint64_t v9 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_state;
    swift_beginAccess();
    outlined init with copy of SearchFlow.State(v9, (uint64_t)v4, type metadata accessor for SearchFlow.State);
    uint64_t v10 = String.init<A>(describing:)();
    v13[1] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, (os_log_t)v13[0], v6, "#InformationSearchFlow transitioning to state %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    id v12 = v13[0];
  }
}

uint64_t SearchFlow.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_state;
  swift_beginAccess();
  return outlined init with copy of SearchFlow.State(v3, a1, type metadata accessor for SearchFlow.State);
}

uint64_t type metadata accessor for SearchFlow.State(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for SearchFlow.State);
}

uint64_t SearchFlow.state.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_state;
  swift_beginAccess();
  outlined assign with copy of SearchFlow.State(a1, v3);
  swift_endAccess();
  SearchFlow.state.didset();
  return outlined destroy of SearchFlow.State(a1, type metadata accessor for SearchFlow.State);
}

uint64_t outlined assign with copy of SearchFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void (*SearchFlow.state.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return SearchFlow.state.modify;
}

void SearchFlow.state.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    SearchFlow.state.didset();
  }
}

uint64_t SearchFlow.exitValue.getter@<X0>(char *a1@<X8>)
{
  Swift::String v26 = a1;
  uint64_t v2 = type metadata accessor for CompositionResolutionError();
  uint64_t v24 = *(void *)(v2 - 8);
  uint64_t v25 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SearchFlow.State(0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = type metadata accessor for RREntity();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void (**)(uint64_t))(*(void *)v1 + 200);
  v16(v13);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v17(v15, v10, v11);
    v17(v26, v15, v11);
  }
  else
  {
    uint64_t v18 = v26;
    uint64_t v19 = outlined destroy of SearchFlow.State((uint64_t)v10, type metadata accessor for SearchFlow.State);
    v16(v19);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v20 = v25;
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
      v21(v4, v8, v25);
      v21(v18, v4, v20);
    }
    else
    {
      outlined destroy of SearchFlow.State((uint64_t)v8, type metadata accessor for SearchFlow.State);
      (*(void (**)(char *, void, uint64_t))(v24 + 104))(v18, enum case for CompositionResolutionError.unknownError(_:), v25);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RREntity, CompositionResolutionError>);
  return swift_storeEnumTagMultiPayload();
}

uint64_t SearchFlow.__allocating_init(parse:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CATOption();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for USOParse();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  static Device.current.getter();
  type metadata accessor for CommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v8 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for InformationViewFactory();
  uint64_t v9 = (void *)swift_allocObject();
  id v10 = [self sharedPreferences];
  uint64_t v11 = type metadata accessor for PommesServerFallbackPreferences();
  swift_allocObject();
  uint64_t v12 = PommesServerFallbackPreferences.init(_:)();
  v9[11] = v11;
  v9[12] = &protocol witness table for PommesServerFallbackPreferences;
  v9[8] = v12;
  outlined init with take of PatternFlowProviding(&v19, (uint64_t)(v9 + 3));
  long long v9[2] = v8;
  type metadata accessor for RenderComponentFlowFactory();
  uint64_t v13 = swift_allocObject();
  outlined init with take of PatternFlowProviding(&v20, v13 + 16);
  *(void *)(v13 + 56) = v9;
  uint64_t v14 = type metadata accessor for PommesSearchClient();
  swift_allocObject();
  uint64_t v15 = PommesSearchClient.init()();
  if (v15)
  {
    *((void *)&v21 + 1) = v14;
    uint64_t v22 = &protocol witness table for PommesSearchClient;
    *(void *)&long long v20 = v15;
  }
  else
  {
    uint64_t v22 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
  }
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, long long *))(v1 + 232))(v7, v13, &v20);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return v16;
}

uint64_t SearchFlow.__allocating_init(parse:renderComponentFlowFactory:pommesSearchClient:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  uint64_t v6 = specialized SearchFlow.init(parse:renderComponentFlowFactory:pommesSearchClient:)(a1, a2, a3);
  swift_release();
  return v6;
}

uint64_t SearchFlow.init(parse:renderComponentFlowFactory:pommesSearchClient:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = specialized SearchFlow.init(parse:renderComponentFlowFactory:pommesSearchClient:)(a1, a2, a3);
  swift_release();
  return v3;
}

uint64_t SearchFlow.setState(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SearchFlow.State(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SearchFlow.State(a1, (uint64_t)v5, type metadata accessor for SearchFlow.State);
  return (*(uint64_t (**)(char *))(*(void *)v1 + 208))(v5);
}

uint64_t SearchFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Parse();
  uint64_t v43 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v42 = (void **)&v34[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for SearchFlow.State(0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v41 = &v34[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  unint64_t v40 = &v34[-v9];
  uint64_t v10 = type metadata accessor for Input();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v34[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.information);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  swift_retain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  int v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v38 = v4;
    uint64_t v19 = v18;
    uint64_t v36 = swift_slowAlloc();
    uint64_t v45 = v36;
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v39 = v6;
    long long v20 = *(void (**)(void))(*(void *)v2 + 200);
    uint64_t v37 = a1;
    int v35 = v17;
    v20();
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v23 = Input.description.getter();
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl(&dword_0, v15, (os_log_type_t)v35, "#InformationSearchFlow entering on with state: %s, input: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v38;
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
  }

  uint64_t v25 = (uint64_t)v41;
  (*(void (**)(void))(*(void *)v2 + 200))();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined destroy of SearchFlow.State(v25, type metadata accessor for SearchFlow.State);
  Swift::Int v27 = v42;
  if (EnumCaseMultiPayload != 4) {
    return 0;
  }
  Input.parse.getter();
  if ((*(unsigned int (**)(void **, uint64_t))(v43 + 88))(v27, v4) != enum case for Parse.pommesResponse(_:))
  {
    (*(void (**)(void **, uint64_t))(v43 + 8))(v27, v4);
    return 0;
  }
  (*(void (**)(void **, uint64_t))(v43 + 96))(v27, v4);
  id v28 = *v27;
  if ((specialized SearchFlow.hasDelayedAction(pommesResponse:)() & 1) == 0)
  {

    return 0;
  }
  uint64_t v29 = v40;
  *unint64_t v40 = v28;
  uint64_t v30 = 1;
  swift_storeEnumTagMultiPayload();
  unint64_t v31 = *(void (**)(void *))(*(void *)v2 + 208);
  id v32 = v28;
  v31(v29);

  return v30;
}

uint64_t SearchFlow.execute()(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = type metadata accessor for USOParse();
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = type metadata accessor for SearchFlow.State(0);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  return _swift_task_switch(SearchFlow.execute(), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 216) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = SearchFlow.execute();
  }
  else
  {
    *(void *)(v4 + 224) = a1;
    uint64_t v5 = SearchFlow.execute();
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t SearchFlow.execute()()
{
  uint64_t v35 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 168) = __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 112);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    (*(void (**)(void))(*(void *)v5 + 200))();
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v3, v4, "#InformationSearchFlow entering execute with state: %s", v6, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = (void *)(v0 + 16);
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 112);

    swift_release_n();
  }
  *(void *)(v0 + 176) = v5;
  (*(void (**)(void))(**(void **)(v0 + 112) + 200))();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v20 = *(void *)(v0 + 112);
      uint64_t v21 = **(void **)(v0 + 152);
      *(void *)(v0 + 240) = v21;
      id v32 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v20 + 272)
                                                     + **(int **)(*(void *)v20 + 272));
      unint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 248) = v22;
      *unint64_t v22 = v0;
      v22[1] = SearchFlow.execute();
      uint64_t v23 = *(void *)(v0 + 104);
      return v32(v23, v21);
    case 2u:
    case 3u:
      uint64_t v9 = *(void *)(v0 + 152);
      static ExecuteResponse.complete()();
      outlined destroy of SearchFlow.State(v9, type metadata accessor for SearchFlow.State);
      goto LABEL_19;
    case 4u:
      static ExecuteResponse.ongoing(requireInput:)();
      goto LABEL_19;
    default:
      uint64_t v10 = *(void *)(v0 + 160);
      uint64_t v11 = *(void *)(v0 + 136);
      uint64_t v12 = *(void *)(v0 + 112);
      (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 128) + 32))(v11, *(void *)(v0 + 152), *(void *)(v0 + 120));
      swift_storeEnumTagMultiPayload();
      uint64_t v13 = *(void (**)(uint64_t))(*(void *)v12 + 208);
      uint64_t v14 = (*(void *)v12 + 208) & 0xFFFFFFFFFFFFLL | 0x45B000000000000;
      *(void *)(v0 + 184) = v13;
      *(void *)(v0 + 192) = v14;
      v13(v10);
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 280))(v11);
      *(void *)(v0 + 200) = v15;
      if (!v15) {
        goto LABEL_18;
      }
      os_log_type_t v16 = (void *)v15;
      outlined init with copy of IdentifiedUser?(*(void *)(v0 + 112) + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_pommesSearchClient, (uint64_t)v1, &demangling cache variable for type metadata for PommesXPCSearching?);
      uint64_t v17 = *(void *)(v0 + 40);
      if (v17)
      {
        uint64_t v18 = *(void *)(v0 + 48);
        __swift_project_boxed_opaque_existential_1(v1, *(void *)(v0 + 40));
        uint64_t v19 = (void *)swift_task_alloc();
        *(void *)(v0 + 208) = v19;
        *uint64_t v19 = v0;
        v19[1] = SearchFlow.execute();
        return dispatch thunk of PommesXPCSearching.searchInfiEntity(request:)(v16, v17, v18);
      }
      else
      {

        outlined destroy of Any?((uint64_t)v1, &demangling cache variable for type metadata for PommesXPCSearching?);
LABEL_18:
        unint64_t v24 = *(void (**)(uint64_t))(v0 + 184);
        uint64_t v25 = *(void *)(v0 + 160);
        uint64_t v33 = *(void *)(v0 + 136);
        uint64_t v27 = *(void *)(v0 + 120);
        uint64_t v26 = *(void *)(v0 + 128);
        uint64_t v28 = enum case for CompositionResolutionError.searchFlowExecutionError(_:);
        uint64_t v29 = type metadata accessor for CompositionResolutionError();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104))(v25, v28, v29);
        swift_storeEnumTagMultiPayload();
        v24(v25);
        static ExecuteResponse.complete()();
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v33, v27);
LABEL_19:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
        return v30();
      }
  }
}

{
  void *v0;
  void *v1;
  void (*v2)(void *);
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = (void *)v0[28];
  uint64_t v2 = (void (*)(void *))v0[23];
  uint64_t v3 = (void *)v0[20];
  os_log_type_t v4 = v0[14];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  *uint64_t v3 = v1;
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = v1;
  v2(v3);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v4 + 272) + **(int **)(*(void *)v4 + 272));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[29] = v6;
  *uint64_t v6 = v0;
  v6[1] = SearchFlow.execute();
  uint64_t v7 = v0[28];
  unint64_t v8 = v0[13];
  return v10(v8, v7);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(SearchFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  os_log_type_t v4 = *(void *)(v0 + 120);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(SearchFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  os_log_type_t v16 = v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    os_log_type_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v1, v2, "#InformationSearchFlow requestInfiEntityResolution call has an error %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = *(void (**)(uint64_t))(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 160);
  uint64_t v14 = *(void *)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 120);
  unint64_t v8 = *(void *)(v0 + 128);
  uint64_t v10 = enum case for CompositionResolutionError.searchFlowExecutionError(_:);
  uint64_t v11 = type metadata accessor for CompositionResolutionError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(v7, v10, v11);
  swift_storeEnumTagMultiPayload();
  v6(v7);
  static ExecuteResponse.complete()();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v14, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t SearchFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t SearchFlow.handlePommesResponse(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  v3[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for RREntity();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = type metadata accessor for SearchFlow.State(0);
  v3[16] = swift_task_alloc();
  return _swift_task_switch(SearchFlow.handlePommesResponse(_:), 0, 0);
}

uint64_t SearchFlow.handlePommesResponse(_:)()
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#InformationSearchFlow going to handlePommesResponse...", v4, 2u);
    swift_slowDealloc();
  }

  if ((specialized SearchFlow.supportedOnDevice(pommesResponse:)() & 1) == 0)
  {
    uint64_t v5 = v0[16];
    uint64_t v6 = v0[5];
    uint64_t v7 = (unsigned int *)&enum case for CompositionResolutionError.featureDisabled(_:);
    goto LABEL_9;
  }
  if (specialized SearchFlow.isUserCanceled(pommesResponse:)())
  {
    uint64_t v5 = v0[16];
    uint64_t v6 = v0[5];
    uint64_t v7 = (unsigned int *)&enum case for CompositionResolutionError.userCanceled(_:);
LABEL_9:
    uint64_t v8 = *v7;
    uint64_t v9 = type metadata accessor for CompositionResolutionError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v5, v8, v9);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t))(*(void *)v6 + 208))(v5);
LABEL_10:
    static ExecuteResponse.complete()();
LABEL_11:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  unint64_t v12 = dispatch thunk of PommesResponse.experiences.getter();
  uint64_t v13 = specialized Sequence.flatMap<A>(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v15 = v0[13];
    uint64_t v16 = v0[8];
    uint64_t v64 = *(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 16);
    unint64_t v17 = v13 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v62 = (void (**)(uint64_t, uint64_t))(v15 + 8);
    uint64_t v63 = *(void *)(v15 + 72);
    uint64_t v18 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    uint64_t v61 = v16;
    uint64_t v19 = (void (**)(char *, char *, uint64_t))(v16 + 32);
    swift_bridgeObjectRetain();
    uint64_t v20 = (char *)&_swiftEmptyArrayStorage;
    do
    {
      unint64_t v21 = (unint64_t)v20;
      uint64_t v22 = v0[14];
      uint64_t v23 = v0[12];
      uint64_t v24 = v0[6];
      uint64_t v25 = v0[7];
      v64(v22, v17, v23);
      Apple_Parsec_Siri_Context_ResultEntity.toRREntity()(v24);
      (*v62)(v22, v23);
      if ((*v18)(v24, 1, v25) == 1)
      {
        outlined destroy of Any?(v0[6], &demangling cache variable for type metadata for RREntity?);
        uint64_t v20 = (char *)v21;
      }
      else
      {
        uint64_t v27 = (char *)v0[10];
        uint64_t v26 = (char *)v0[11];
        uint64_t v28 = v0[7];
        uint64_t v29 = *v19;
        (*v19)(v26, (char *)v0[6], v28);
        v29(v27, v26, v28);
        uint64_t v20 = (char *)v21;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v20 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1, v21, &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>, (uint64_t (*)(void))&type metadata accessor for RREntity, (uint64_t (*)(void))&type metadata accessor for RREntity);
        }
        unint64_t v31 = *((void *)v20 + 2);
        unint64_t v30 = *((void *)v20 + 3);
        if (v31 >= v30 >> 1) {
          uint64_t v20 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, (unint64_t)v20, &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>, (uint64_t (*)(void))&type metadata accessor for RREntity, (uint64_t (*)(void))&type metadata accessor for RREntity);
        }
        id v32 = (char *)v0[10];
        uint64_t v33 = v0[7];
        *((void *)v20 + 2) = v31 + 1;
        v29(&v20[((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(void *)(v61 + 72) * v31], v32, v33);
      }
      v17 += v63;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = (char *)&_swiftEmptyArrayStorage;
  }
  v0[17] = v20;
  swift_bridgeObjectRetain();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 134217984;
    v0[2] = *((void *)v20 + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v34, v35, "#InformationSearchFlow extracted %ld rrEntities", v36, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v37 = dispatch thunk of PommesResponse.primaryPluginIdentifier()();
  if (v38)
  {
    uint64_t v39 = v37;
    uint64_t v40 = v38;
    if (one-time initialization token for defaultPegasusBundleIdentifiers != -1) {
      swift_once();
    }
    char v41 = specialized Sequence<>.contains(_:)(v39, v40, (void *)static SearchFlow.defaultPegasusBundleIdentifiers);
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0)
    {
      unint64_t v45 = *((void *)v20 + 2);
      if (v45 >= 2)
      {
        uint64_t v46 = v0[4];
        swift_bridgeObjectRelease();
        SearchFlow.handleClientDrivenExperience(pommesResponse:)(v46);
        goto LABEL_11;
      }
      goto LABEL_40;
    }
  }
  if ((dispatch thunk of PommesResponse.listenAfterSpeaking.getter() & 1) == 0)
  {
    unint64_t v45 = *((void *)v20 + 2);
LABEL_40:
    if (v45 == 1)
    {
      uint64_t v50 = (char *)v0[16];
      uint64_t v51 = v0[8];
      uint64_t v52 = (char *)v0[9];
      uint64_t v53 = v0[7];
      uint64_t v54 = v0[5];
      uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
      v55(v52, &v20[(*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80)], v53);
      uint64_t v56 = dispatch thunk of ReferenceResolutionClient.siriMentioned(entities:)();
      char v58 = v57;
      swift_bridgeObjectRelease();
      outlined consume of Result<(), Error>(v56, v58 & 1);
      v55(v50, v52, v53);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *))(*(void *)v54 + 208))(v50);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
    }
    else
    {
      uint64_t v47 = v0[16];
      uint64_t v48 = v0[5];
      if (v45)
      {
        swift_bridgeObjectRelease();
        uint64_t v49 = (unsigned int *)&enum case for CompositionResolutionError.invalidState(_:);
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v49 = (unsigned int *)&enum case for CompositionResolutionError.noSearchResult(_:);
      }
      uint64_t v59 = *v49;
      uint64_t v60 = type metadata accessor for CompositionResolutionError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 104))(v47, v59, v60);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t))(*(void *)v48 + 208))(v47);
    }
    goto LABEL_10;
  }
  uint64_t v42 = (void *)swift_task_alloc();
  v0[18] = v42;
  *uint64_t v42 = v0;
  v42[1] = SearchFlow.handlePommesResponse(_:);
  uint64_t v43 = v0[4];
  uint64_t v44 = v0[3];
  return SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:)(v44, v43, (uint64_t)v20);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  os_log_type_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t specialized Sequence.flatMap<A>(_:)(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_33;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    os_log_type_t v3 = &_swiftEmptyArrayStorage;
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v4);
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      uint64_t v8 = dispatch thunk of Experience.associatedEntities.getter();

      uint64_t v9 = *(void *)(v8 + 16);
      int64_t v10 = v3[2];
      int64_t v11 = v10 + v9;
      if (__OFADD__(v10, v9)) {
        goto LABEL_29;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v11 <= v3[3] >> 1)
      {
        if (*(void *)(v8 + 16)) {
          goto LABEL_19;
        }
      }
      else
      {
        if (v10 <= v11) {
          int64_t v13 = v10 + v9;
        }
        else {
          int64_t v13 = v10;
        }
        os_log_type_t v3 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, (unint64_t)v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity);
        if (*(void *)(v8 + 16))
        {
LABEL_19:
          uint64_t v14 = v3[2];
          uint64_t v15 = (v3[3] >> 1) - v14;
          uint64_t v16 = *(void *)(type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity() - 8);
          uint64_t v17 = *(void *)(v16 + 72);
          if (v15 < v9) {
            goto LABEL_31;
          }
          unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
          uint64_t v19 = (char *)v3 + v18 + v17 * v14;
          unint64_t v20 = v8 + v18;
          uint64_t v21 = v17 * v9;
          uint64_t v22 = &v19[v21];
          unint64_t v23 = v20 + v21;
          if (v20 < (unint64_t)v22 && (unint64_t)v19 < v23)
          {
            uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy();
          if (v9)
          {
            uint64_t v25 = v3[2];
            BOOL v26 = __OFADD__(v25, v9);
            uint64_t v27 = v25 + v9;
            if (v26) {
              goto LABEL_32;
            }
            v3[2] = v27;
          }
          goto LABEL_5;
        }
      }
      if (v9) {
        goto LABEL_30;
      }
LABEL_5:
      swift_bridgeObjectRelease();
      ++v4;
      if (v7 == v2) {
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
  }
  os_log_type_t v3 = &_swiftEmptyArrayStorage;
LABEL_35:
  swift_bridgeObjectRelease();
  return (uint64_t)v3;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;

  if (a1 >> 62) {
    goto LABEL_33;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    os_log_type_t v3 = &_swiftEmptyArrayStorage;
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v4);
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      uint64_t v8 = dispatch thunk of Experience.associatedEntities.getter();

      uint64_t v9 = *(void *)(v8 + 16);
      int64_t v10 = v3[2];
      int64_t v11 = v10 + v9;
      if (__OFADD__(v10, v9)) {
        goto LABEL_29;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v11 <= v3[3] >> 1)
      {
        if (*(void *)(v8 + 16)) {
          goto LABEL_19;
        }
      }
      else
      {
        if (v10 <= v11) {
          int64_t v13 = v10 + v9;
        }
        else {
          int64_t v13 = v10;
        }
        os_log_type_t v3 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, (unint64_t)v3);
        if (*(void *)(v8 + 16))
        {
LABEL_19:
          uint64_t v14 = v3[2];
          uint64_t v15 = (v3[3] >> 1) - v14;
          uint64_t v16 = *(void *)(type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity() - 8);
          uint64_t v17 = *(void *)(v16 + 72);
          if (v15 < v9) {
            goto LABEL_31;
          }
          unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
          uint64_t v19 = (char *)v3 + v18 + v17 * v14;
          unint64_t v20 = v8 + v18;
          uint64_t v21 = v17 * v9;
          uint64_t v22 = &v19[v21];
          unint64_t v23 = v20 + v21;
          if (v20 < (unint64_t)v22 && (unint64_t)v19 < v23)
          {
            uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy();
          if (v9)
          {
            uint64_t v25 = v3[2];
            BOOL v26 = __OFADD__(v25, v9);
            uint64_t v27 = v25 + v9;
            if (v26) {
              goto LABEL_32;
            }
            v3[2] = v27;
          }
          goto LABEL_5;
        }
      }
      if (v9) {
        goto LABEL_30;
      }
LABEL_5:
      swift_bridgeObjectRelease();
      ++v4;
      if (v7 == v2) {
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
  }
  os_log_type_t v3 = &_swiftEmptyArrayStorage;
LABEL_35:
  swift_bridgeObjectRelease();
  return (uint64_t)v3;
}

uint64_t Apple_Parsec_Siri_Context_ResultEntity.toRREntity()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  __chkstk_darwin(v1 - 8);
  uint64_t v42 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for Typespb_Domain();
  uint64_t v39 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for GroupIdentifier();
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_Context_ResultEntity.usoEntity.getter();
  uint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type SearchFlow and conformance SearchFlow(&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UsoGraph);
  Message.init(serializedData:extensions:partial:options:)();
  uint64_t v37 = v9;
  uint64_t v38 = v10;
  uint64_t v13 = v41;
  uint64_t v14 = v42;
  uint64_t v21 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
  uint64_t v22 = static UsoConversionUtils.extractFirstEntityFromGraph(graph:)();
  uint64_t v36 = v22;
  if (v22)
  {
    uint64_t v34 = v21;
    os_log_type_t v35 = v12;
    Apple_Parsec_Siri_Context_ResultEntity.groupID.getter();
    Apple_Parsec_Siri_Context_ResultEntity.groupSequenceNumber.getter();
    id v32 = v7;
    GroupIdentifier.init(id:seq:)();
    Apple_Parsec_Siri_Context_ResultEntity.id.getter();
    uint64_t v33 = v23;
    *(void *)&long long v44 = 0;
    *((void *)&v44 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v24._object = (void *)0x80000000000AEAA0;
    v24._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v24);
    Apple_Parsec_Siri_Context_ResultEntity.domain.getter();
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v4, v13);
    uint64_t v25 = v40;
    BOOL v26 = v32;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v14, v32, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v14, 0, 1, v5);
    uint64_t v27 = v43;
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v5);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
    uint64_t v28 = type metadata accessor for RREntity();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 0, 1, v28);
  }
  else
  {
    uint64_t v29 = type metadata accessor for CompositionResolutionError();
    lazy protocol witness table accessor for type SearchFlow and conformance SearchFlow(&lazy protocol witness table cache variable for type CompositionResolutionError and conformance CompositionResolutionError, (void (*)(uint64_t))&type metadata accessor for CompositionResolutionError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v29 - 8) + 104))(v30, enum case for CompositionResolutionError.usoError(_:), v29);
    swift_willThrow();
    swift_release();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v37);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.information);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl(&dword_0, v16, v17, "#InformationSearchFlow failed to convert ContextResultEntity to RREntity", v18, 2u);
      swift_slowDealloc();
    }
    swift_errorRelease();

    uint64_t v19 = type metadata accessor for RREntity();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v43, 1, 1, v19);
  }
}

uint64_t SearchFlow.buildPommesSearchRequest(parse:)(uint64_t a1)
{
  uint64_t v136 = a1;
  uint64_t v2 = type metadata accessor for DeviceRestrictions();
  uint64_t v133 = *(void *)(v2 - 8);
  uint64_t v134 = v2;
  __chkstk_darwin(v2);
  char v132 = (char *)v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for InputOrigin();
  uint64_t v138 = *(void *)(v4 - 8);
  uint64_t v139 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v131 = (char *)v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v130 = (char *)v107 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v129 = (char *)v107 - v10;
  __chkstk_darwin(v9);
  uint64_t v128 = (char *)v107 - v11;
  uint64_t v127 = type metadata accessor for ResponseMode();
  uint64_t v126 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v125 = (char *)v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  __chkstk_darwin(v13 - 8);
  uint64_t v124 = (char *)v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioSource?);
  __chkstk_darwin(v15 - 8);
  uint64_t v123 = (char *)v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for MultiUserState();
  __chkstk_darwin(v17 - 8);
  uint64_t v122 = (char *)v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for ParseStateXPC();
  uint64_t v119 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v121 = (void *)((char *)v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v143 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)v107 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v142 = (char *)v107 - v24;
  uint64_t v140 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v135 = *(void *)(v140 - 8);
  uint64_t v25 = __chkstk_darwin(v140);
  uint64_t v137 = (char *)v107 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)v107 - v27;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v29 - 8);
  uint64_t v31 = (char *)v107 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin(v32 - 8);
  uint64_t v34 = (char *)v107 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for PommesContext();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v141 = (char *)v107 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 176))(v37);
  if (v39)
  {
    uint64_t v40 = v39;
  }
  else
  {
    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    uint64_t v40 = SiriEnvironment.currentRequest.getter();
    swift_release();
  }
  (*(void (**)(void))(*(void *)v1 + 152))();
  uint64_t v41 = type metadata accessor for NLContextUpdate();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v31, 1, v41))
  {
    outlined destroy of Any?((uint64_t)v31, &demangling cache variable for type metadata for NLContextUpdate?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v34, 1, 1, v35);
LABEL_7:
    outlined destroy of Any?((uint64_t)v34, &demangling cache variable for type metadata for PommesContext?);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.information);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      long long v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v45 = 0;
      _os_log_impl(&dword_0, v43, v44, "#InformationSearchFlow PommesContext is not available, cannot construct PommesSearchRequestXPC", v45, 2u);
      swift_slowDealloc();
    }

    swift_release();
    return 0;
  }
  NLContextUpdate.pommesContext.getter();
  outlined destroy of Any?((uint64_t)v31, &demangling cache variable for type metadata for NLContextUpdate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35) == 1) {
    goto LABEL_7;
  }
  uint64_t v48 = v141;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v141, v34, v35);
  uint64_t v49 = PommesContext.domain.getter();
  uint64_t v114 = v35;
  if (!v50)
  {
    uint64_t v72 = v36;
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v73 = type metadata accessor for Logger();
    __swift_project_value_buffer(v73, (uint64_t)static Logger.information);
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v76 = 0;
      _os_log_impl(&dword_0, v74, v75, "#InformationSearchFlow domain is not available, cannot construct PommesSearchRequestXPC", v76, 2u);
      swift_slowDealloc();
    }
    goto LABEL_42;
  }
  uint64_t v51 = v50;
  uint64_t v113 = v49;
  uint64_t v52 = v40;
  uint64_t v53 = CurrentRequest.executionRequestId.getter();
  if (!v54)
  {
    uint64_t v72 = v36;
LABEL_37:
    swift_bridgeObjectRelease();
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v81 = type metadata accessor for Logger();
    __swift_project_value_buffer(v81, (uint64_t)static Logger.information);
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v74, v78)) {
      goto LABEL_42;
    }
    uint64_t v79 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v79 = 0;
    uint64_t v80 = "#InformationSearchFlow utterance is not available, cannot construct PommesSearchRequestXPC";
LABEL_41:
    _os_log_impl(&dword_0, v74, v78, v80, v79, 2u);
    swift_slowDealloc();
LABEL_42:

    swift_release();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v48, v114);
    return 0;
  }
  uint64_t v55 = v53;
  uint64_t v56 = v54;
  uint64_t v57 = CurrentRequest.resultCandidateId.getter();
  if (!v58)
  {
    uint64_t v72 = v36;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)static Logger.information);
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v74, v78)) {
      goto LABEL_42;
    }
    uint64_t v79 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v79 = 0;
    uint64_t v80 = "#InformationSearchFlow resultCandidateId is not available, cannot construct PommesSearchRequestXPC";
    goto LABEL_41;
  }
  uint64_t v111 = v57;
  uint64_t v112 = v58;
  uint64_t v59 = CurrentRequest.utterance.getter();
  if (!v60)
  {
    uint64_t v72 = v36;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  v107[2] = v60;
  v107[3] = v59;
  v107[4] = v55;
  v107[5] = v56;
  v107[6] = v51;
  uint64_t v110 = v36;
  USOParse.userParse.getter();
  uint64_t v61 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  uint64_t v62 = *(void (**)(char *, uint64_t))(v135 + 8);
  uint64_t v109 = v135 + 8;
  uint64_t v108 = v62;
  v62(v28, v140);
  int64_t v63 = *(void *)(v61 + 16);
  if (v63)
  {
    v107[1] = v52;
    uint64_t v148 = (char *)&_swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63, 0);
    uint64_t v118 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v143 + 16);
    unint64_t v64 = (*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80);
    v107[0] = v61;
    unint64_t v117 = v64;
    unint64_t v65 = v61 + v64;
    uint64_t v116 = *(void *)(v143 + 72);
    char v115 = (void (**)(char *, uint64_t))(v143 + 8);
    v143 += 16;
    uint64_t v66 = (void (**)(char *, char *, uint64_t))(v143 + 16);
    do
    {
      uint64_t v67 = v118(v23, v65, v20);
      __chkstk_darwin(v67);
      lazy protocol witness table accessor for type SearchFlow and conformance SearchFlow(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
      static Message.with(_:)();
      (*v115)(v23, v20);
      id v68 = v148;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v68 + 2) + 1, 1);
        id v68 = v148;
      }
      unint64_t v70 = *((void *)v68 + 2);
      unint64_t v69 = *((void *)v68 + 3);
      if (v70 >= v69 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
        id v68 = v148;
      }
      *((void *)v68 + 2) = v70 + 1;
      uint64_t v71 = v116;
      (*v66)(&v68[v117 + v70 * v116], v142, v20);
      uint64_t v148 = v68;
      v65 += v71;
      --v63;
    }
    while (v63);
  }
  uint64_t v82 = swift_bridgeObjectRelease();
  __chkstk_darwin(v82);
  lazy protocol witness table accessor for type SearchFlow and conformance SearchFlow(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserParse);
  uint64_t v83 = v137;
  uint64_t v84 = v140;
  static Message.with(_:)();
  swift_bridgeObjectRelease();
  CurrentRequest.currentDeviceAssistantId.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserParse>);
  uint64_t v85 = v135;
  unint64_t v86 = (*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80);
  uint64_t v87 = swift_allocObject();
  *(_OWORD *)(v87 + 16) = xmmword_AB370;
  (*(void (**)(unint64_t, char *, uint64_t))(v85 + 16))(v87 + v86, v83, v84);
  id v88 = v121;
  uint64_t v89 = v112;
  *uint64_t v121 = v111;
  v88[1] = v89;
  v88[2] = v87;
  *((unsigned char *)v88 + 24) = 1;
  (*(void (**)(uint64_t *, void, uint64_t))(v119 + 104))(v88, enum case for ParseStateXPC.rc(_:), v120);
  type metadata accessor for PommesSearchRequestXPCBuilder();
  swift_allocObject();
  PommesSearchRequestXPCBuilder.init(domain:assistantId:requestId:parseState:utterance:)();
  PommesContext.listenAfterSpeaking.getter();
  dispatch thunk of PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)();
  swift_release();
  uint64_t v90 = (uint64_t)v122;
  CurrentRequest.multiUserState.getter();
  MultiUserState.isEnabled.getter();
  outlined destroy of SearchFlow.State(v90, (uint64_t (*)(void))&type metadata accessor for MultiUserState);
  dispatch thunk of PommesSearchRequestXPCBuilder.withIsMultiUser(_:)();
  swift_release();
  uint64_t v91 = (uint64_t)v123;
  CurrentRequest.audioSource.getter();
  uint64_t v92 = type metadata accessor for AudioSource();
  uint64_t v93 = *(void *)(v92 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92) == 1)
  {
    outlined destroy of Any?(v91, &demangling cache variable for type metadata for AudioSource?);
  }
  else
  {
    AudioSource.aceValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v91, v92);
  }
  uint64_t v94 = v128;
  uint64_t v95 = (uint64_t)v124;
  dispatch thunk of PommesSearchRequestXPCBuilder.withAudioSource(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  CurrentRequest.audioDestination.getter();
  uint64_t v96 = type metadata accessor for AudioDestination();
  uint64_t v97 = *(void *)(v96 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96) == 1)
  {
    outlined destroy of Any?(v95, &demangling cache variable for type metadata for AudioDestination?);
  }
  else
  {
    AudioDestination.aceValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v95, v96);
  }
  dispatch thunk of PommesSearchRequestXPCBuilder.withAudioDestination(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v98 = v125;
  CurrentRequest.responseMode.getter();
  ResponseMode.aceValue.getter();
  (*(void (**)(char *, uint64_t))(v126 + 8))(v98, v127);
  dispatch thunk of PommesSearchRequestXPCBuilder.withResponseMode(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(&v148, v149);
  dispatch thunk of DeviceState.isEyesFree.getter();
  dispatch thunk of PommesSearchRequestXPCBuilder.withIsEyesFree(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(&v148, v149);
  dispatch thunk of DeviceState.isVoiceTriggerEnabled.getter();
  dispatch thunk of PommesSearchRequestXPCBuilder.withIsVoiceTriggerEnabled(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(&v148, v149);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v143 = dispatch thunk of PommesSearchRequestXPCBuilder.withIsTextToSpeechEnabled(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(&v148, v149);
  dispatch thunk of DeviceState.inputOrigin.getter();
  char v99 = *(void (**)(char *, void, uint64_t))(v138 + 104);
  uint64_t v100 = v129;
  v99(v129, enum case for InputOrigin.clientGenerated(_:), v139);
  lazy protocol witness table accessor for type SearchFlow and conformance SearchFlow(&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin, (void (*)(uint64_t))&type metadata accessor for InputOrigin);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v146 == v144 && v147 == v145) {
    char v101 = 1;
  }
  else {
    char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v102 = v139;
  uint64_t v103 = *(void (**)(char *, uint64_t))(v138 + 8);
  v103(v100, v139);
  v103(v94, v102);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
  if ((v101 & 1) == 0)
  {
    static Device.current.getter();
    __swift_project_boxed_opaque_existential_1(&v148, v149);
    uint64_t v104 = v139;
    dispatch thunk of DeviceState.inputOrigin.getter();
    v99(v131, enum case for InputOrigin.triggerlessFollowup(_:), v104);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v146 != v144 || v147 != v145) {
      _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v103(v131, v104);
    v103(v130, v104);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
  }
  dispatch thunk of PommesSearchRequestXPCBuilder.withIsTriggerlessFollowup(_:)();
  swift_release();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  uint64_t v105 = v132;
  dispatch thunk of CurrentDevice.restrictions.getter();
  swift_release();
  uint64_t v106 = DeviceRestrictions.aceSet.getter();
  (*(void (**)(char *, uint64_t))(v133 + 8))(v105, v134);
  specialized _copyCollectionToContiguousArray<A>(_:)(v106);
  swift_bridgeObjectRelease();
  dispatch thunk of PommesSearchRequestXPCBuilder.withDeviceRestrictions(_:)();
  swift_release();
  swift_release();
  uint64_t v46 = dispatch thunk of PommesSearchRequestXPCBuilder.build()();
  swift_release();
  swift_release();
  v108(v137, v140);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v141, v114);
  return v46;
}

uint64_t closure #1 in closure #1 in SearchFlow.buildPommesSearchRequest(parse:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v9 - v5;
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  __chkstk_darwin(v7 - 8);
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
  Siri_Nlu_External_DelegatedUserDialogAct.init()();
  static PommesSearchRequest.PommesParserId.getter();
  Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.setter();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  Siri_Nlu_External_UserDialogAct.delegated.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
}

uint64_t closure #2 in SearchFlow.buildPommesSearchRequest(parse:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_Parser();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  Siri_Nlu_External_UserParse.userDialogActs.setter();
  USOParse.userParse.getter();
  Siri_Nlu_External_UserParse.parser.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  Siri_Nlu_External_UserParse.parser.setter();
  Siri_Nlu_External_UserParse.probability.setter();
  return Siri_Nlu_External_UserParse.comparableProbability.setter();
}

uint64_t SearchFlow.handleClientDrivenExperience(pommesResponse:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SearchFlow.State(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = v1;
  type metadata accessor for SearchFlow(0);
  lazy protocol witness table accessor for type SearchFlow and conformance SearchFlow(&lazy protocol witness table cache variable for type SearchFlow and conformance SearchFlow, (void (*)(uint64_t))type metadata accessor for SearchFlow);
  uint64_t v7 = CompositionSearchFlow.findFlowForPommesResponse(_:)();
  if (v7)
  {
    uint64_t v8 = v7;
    v18[3] = type metadata accessor for AnyFlow();
    v18[4] = &protocol witness table for AnyFlow;
    v18[0] = v8;
    uint64_t v9 = *(void (**)(uint64_t, void *))(*(void *)v1 + 304);
    swift_retain();
    v9(a1, v18);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  else
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.information);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_0, v12, v13, "#InformationSearchFlow failed to render a client-driven experience", v14, 2u);
      swift_slowDealloc();
    }

    uint64_t v15 = enum case for CompositionResolutionError.searchFlowExecutionError(_:);
    uint64_t v16 = type metadata accessor for CompositionResolutionError();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(v6, v15, v16);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *))(*(void *)v2 + 208))(v6);
    return static ExecuteResponse.complete()();
  }
}

uint64_t SearchFlow.handleClientDrivenExperience(pommesResponse:renderFlow:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v41 = *(void *)(v5 - 8);
  uint64_t v42 = v5;
  __chkstk_darwin(v5);
  uint64_t v40 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for SearchFlow.State(0);
  __chkstk_darwin(v43);
  os_log_type_t v44 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Parse();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void **)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for Input();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a2[3];
  uint64_t v39 = a2;
  __swift_project_boxed_opaque_existential_1(a2, v16);
  *uint64_t v11 = a1;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for Parse.pommesResponse(_:), v8);
  id v17 = a1;
  Input.init(parse:)();
  LOBYTE(a2) = dispatch thunk of Flow.on(input:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (a2)
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.information);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_0, v19, v20, "#InformationSearchFlow pushing render component flow for client-driven experience", v21, 2u);
      swift_slowDealloc();
    }

    uint64_t v22 = v44;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *))(*(void *)v45 + 208))(v22);
    __swift_project_boxed_opaque_existential_1(v39, v39[3]);
    return static ExecuteResponse.ongoing<A>(next:)();
  }
  else
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.information);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_0, v25, v26, "#InformationSearchFlow render flow refused input, returning error flow", v27, 2u);
      swift_slowDealloc();
    }

    uint64_t v28 = enum case for CompositionResolutionError.searchFlowExecutionError(_:);
    uint64_t v29 = type metadata accessor for CompositionResolutionError();
    uint64_t v30 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104))(v44, v28, v29);
    swift_storeEnumTagMultiPayload();
    uint64_t v31 = v45;
    (*(void (**)(char *))(*(void *)v45 + 208))(v30);
    uint64_t v47 = v31;
    type metadata accessor for PerformanceUtil();
    uint64_t v32 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v32);
    uint64_t v35 = &v47;
    uint64_t v33 = v40;
    Date.init()();
    uint64_t v37 = v34;
    uint64_t v38 = type metadata accessor for ExecuteResponse();
    uint64_t v36 = partial apply for specialized closure #1 in FlowTrampolining.makeResponse(forErrorMessage:);
    LOBYTE(v35) = 2;
    v34[0] = "makeResponse(forErrorMessage:)";
    v34[1] = 30;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v33, v42);
  }
}

uint64_t SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  v4[16] = type metadata accessor for SearchFlow.State(0);
  v4[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for PerformanceUtil.Ticket();
  v4[18] = v5;
  v4[19] = *(void *)(v5 - 8);
  v4[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  v4[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v4[22] = v6;
  v4[23] = *(void *)(v6 - 8);
  v4[24] = swift_task_alloc();
  v4[25] = type metadata accessor for PegasusExperience();
  v4[26] = swift_task_alloc();
  v4[27] = swift_task_alloc();
  return _swift_task_switch(SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:), 0, 0);
}

uint64_t SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:)()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[23];
  uint64_t v34 = v0[22];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[13];
  v0[28] = type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  uint64_t v7 = swift_task_alloc();
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  Date.init()();
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v34);
  swift_task_dealloc();
  outlined init with copy of SearchFlow.State(v2, v1, (uint64_t (*)(void))type metadata accessor for PegasusExperience);
  if (!swift_getEnumCaseMultiPayload())
  {
    os_log_type_t v20 = (void *)v0[26];
    uint64_t v21 = v0[21];
    uint64_t v22 = v0[15];
    uint64_t v23 = (void *)v0[13];
    v0[29] = *v20;
    v0[30] = v20[1];
    v0[31] = v20[2];
    v0[32] = v20[3];
    uint64_t v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
    uint64_t v25 = v24[24];
    v0[33] = *(void *)((char *)v20 + v24[28]);
    v0[34] = *(void *)((char *)v20 + v24[32]);
    v0[35] = *(void *)((char *)v20 + v24[36]);
    v0[36] = *(void *)((char *)v20 + v24[40]);
    outlined init with take of Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?((uint64_t)v20 + v25, v21);
    Date.init()();
    PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
    uint64_t v26 = *(void *)(v22 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_renderComponentFlowFactory);
    static SiriKitEventSender.current.getter();
    type metadata accessor for PegasusFlowEventLogger();
    uint64_t v27 = swift_allocObject();
    v0[37] = v27;
    *(void *)(v27 + 16) = v23;
    outlined init with copy of OutputPublisherAsync((uint64_t)(v0 + 2), v27 + 24);
    id v28 = v23;
    uint64_t v29 = PommesResponse.metadataDomainName.getter();
    uint64_t v31 = v30;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
    *(void *)(v27 + 64) = v29;
    *(void *)(v27 + 72) = v31;
    *(_DWORD *)(v27 + 80) = 1;
    static AceService.currentAsync.getter();
    uint64_t v33 = *(void *)(*(void *)v26 + 104) + **(int **)(*(void *)v26 + 104);
    uint64_t v32 = (void *)swift_task_alloc();
    v0[38] = v32;
    *uint64_t v32 = v0;
    v32[1] = SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:);
    __asm { BRAA            X9, X16 }
  }
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.information);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "#InformationSearchFlow failed to render a server-driven experience", v11, 2u);
    swift_slowDealloc();
  }
  uint64_t v13 = v0[26];
  uint64_t v12 = v0[27];
  uint64_t v14 = v0[17];
  uint64_t v15 = v0[15];

  uint64_t v16 = enum case for CompositionResolutionError.searchFlowExecutionError(_:);
  uint64_t v17 = type metadata accessor for CompositionResolutionError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v14, v16, v17);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t))(*(void *)v15 + 208))(v14);
  static ExecuteResponse.complete()();
  outlined destroy of SearchFlow.State(v12, (uint64_t (*)(void))type metadata accessor for PegasusExperience);
  outlined destroy of SearchFlow.State(v13, (uint64_t (*)(void))type metadata accessor for PegasusExperience);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#InformationSearchFlow pushing render component flow for server-driven experience", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = (void *)v0[36];
  uint64_t v13 = v0[21];
  uint64_t v14 = v0[27];
  uint64_t v6 = v0[19];
  uint64_t v12 = v0[20];
  uint64_t v8 = v0[17];
  uint64_t v7 = v0[18];
  uint64_t v9 = v0[15];

  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t))(*(void *)v9 + 208))(v8);
  static ExecuteResponse.ongoing(next:)();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v12, v7);
  outlined destroy of Any?(v13, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  outlined destroy of SearchFlow.State(v14, (uint64_t (*)(void))type metadata accessor for PegasusExperience);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:)(uint64_t a1)
{
  uint64_t v2 = *(void *)v1 + 56;
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return _swift_task_switch(SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:), 0, 0);
}

uint64_t SearchFlow.deinit()
{
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_nlContextUpdate, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_pommesSearchClient, &demangling cache variable for type metadata for PommesXPCSearching?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_outputPublisher);
  swift_release();
  outlined destroy of SearchFlow.State(v0 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_state, type metadata accessor for SearchFlow.State);
  return v0;
}

uint64_t SearchFlow.__deallocating_deinit()
{
  SearchFlow.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t protocol witness for CompositionSearchFlow.nlContextUpdate.getter in conformance SearchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for CompositionSearchFlow.nlContextUpdate.setter in conformance SearchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t (*protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance SearchFlow(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 168))();
  return protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow;
}

uint64_t protocol witness for CompositionSearchFlow.targetedRequest.getter in conformance SearchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t protocol witness for CompositionSearchFlow.targetedRequest.setter in conformance SearchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t (*protocol witness for CompositionSearchFlow.targetedRequest.modify in conformance SearchFlow(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 192))();
  return protocol witness for CompositionSearchFlow.nlContextUpdate.modify in conformance PushOffQueryFlow;
}

uint64_t protocol witness for FlowTrampolining.outputPublisher.getter in conformance SearchFlow@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(*v1 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_outputPublisher, a1);
}

uint64_t protocol witness for FlowTrampolining.informationViewFactory.getter in conformance SearchFlow()
{
  return swift_retain();
}

uint64_t protocol witness for Flow.on(input:) in conformance SearchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance SearchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264))();
}

uint64_t protocol witness for Flow.execute() in conformance SearchFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 256) + **(int **)(**(void **)v1 + 256));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance SearchFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224))();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>, (uint64_t (*)(void))&type metadata accessor for RREntity, (uint64_t (*)(void))&type metadata accessor for RREntity);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_DelayedActionComponent>, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_DomainObjectComponent>, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_DisambiguationListComponent>, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListComponent, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ButtonViewComponent>, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ButtonViewComponent, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ButtonViewComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_SayItComponent>, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItComponent, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_DirectExecutionComponent>, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_RenderedDialogComponent>, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_CatDialogComponent>, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_CatDialogComponent, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_CatDialogComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent>, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Searchfoundation_Card>, (uint64_t (*)(void))&type metadata accessor for Searchfoundation_Card, (uint64_t (*)(void))&type metadata accessor for Searchfoundation_Card);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if (a3)
  {
    uint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)>);
  os_log_type_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction))
                  - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (uint64_t v15 = v11 == -1) : (uint64_t v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  id v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction))
                  - 8);
  uint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      os_log_type_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      os_log_type_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 32]) {
          memmove(v13, a4 + 32, 8 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      os_log_type_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      os_log_type_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Searchfoundation_CardSection]>);
      os_log_type_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      os_log_type_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(displayName: String, bundleId: String)>);
      os_log_type_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      os_log_type_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : Any].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate>, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Moviespb_CoverArt>, (uint64_t (*)(void))&type metadata accessor for Moviespb_CoverArt);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Tvpb_CoverArt>, (uint64_t (*)(void))&type metadata accessor for Tvpb_CoverArt);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Searchfoundation_Card>, (uint64_t (*)(void))&type metadata accessor for Searchfoundation_Card);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SportsPersonalizationEntity>, (uint64_t (*)(void))&type metadata accessor for SportsPersonalizationEntity);
  *uint64_t v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    os_log_type_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    os_log_type_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<()>);
    os_log_type_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    os_log_type_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    os_log_type_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    os_log_type_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GenericResultSetItem>);
    os_log_type_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    os_log_type_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>);
    os_log_type_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    os_log_type_t v10 = &_swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized static SearchFlow.State.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v61 = a1;
  uint64_t v62 = a2;
  uint64_t v2 = type metadata accessor for CompositionResolutionError();
  uint64_t v57 = *(void *)(v2 - 8);
  uint64_t v58 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v54 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v53 = (char *)&v51 - v5;
  uint64_t v6 = type metadata accessor for RREntity();
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v52 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v51 = (char *)&v51 - v9;
  uint64_t v10 = type metadata accessor for USOParse();
  uint64_t v59 = *(void *)(v10 - 8);
  uint64_t v60 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = type metadata accessor for SearchFlow.State(0);
  uint64_t v17 = __chkstk_darwin(v16);
  int64_t v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  unint64_t v22 = (char *)&v51 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  unint64_t v25 = (void **)((char *)&v51 - v24);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v51 - v26;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SearchFlow.State, SearchFlow.State));
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  uint64_t v31 = (char *)&v51 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = (void **)&v31[*(int *)(v29 + 56)];
  outlined init with copy of SearchFlow.State(v61, (uint64_t)v31, type metadata accessor for SearchFlow.State);
  outlined init with copy of SearchFlow.State(v62, (uint64_t)v32, type metadata accessor for SearchFlow.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of SearchFlow.State((uint64_t)v31, (uint64_t)v25, type metadata accessor for SearchFlow.State);
      uint64_t v33 = *v25;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v34 = *v32;
        type metadata accessor for NSObject();
        char v35 = static NSObject.== infix(_:_:)();

        goto LABEL_18;
      }

      goto LABEL_16;
    case 2u:
      outlined init with copy of SearchFlow.State((uint64_t)v31, (uint64_t)v22, type metadata accessor for SearchFlow.State);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v36 = v55;
        uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
        uint64_t v38 = v51;
        uint64_t v39 = v22;
        uint64_t v40 = v56;
        v37(v51, v39, v56);
        uint64_t v41 = v52;
        v37(v52, (char *)v32, v40);
        char v42 = static RREntity.== infix(_:_:)();
        goto LABEL_10;
      }
      (*(void (**)(char *, uint64_t))(v55 + 8))(v22, v56);
      goto LABEL_16;
    case 3u:
      outlined init with copy of SearchFlow.State((uint64_t)v31, (uint64_t)v19, type metadata accessor for SearchFlow.State);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        (*(void (**)(char *, uint64_t))(v57 + 8))(v19, v58);
        goto LABEL_16;
      }
      uint64_t v36 = v57;
      uint64_t v40 = v58;
      uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
      uint64_t v38 = v53;
      v43(v53, v19, v58);
      uint64_t v41 = v54;
      v43(v54, (char *)v32, v40);
      char v42 = static CompositionResolutionError.== infix(_:_:)();
LABEL_10:
      char v35 = v42;
      os_log_type_t v44 = *(void (**)(char *, uint64_t))(v36 + 8);
      v44(v41, v40);
      v44(v38, v40);
      goto LABEL_18;
    case 4u:
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_16;
      }
      outlined destroy of SearchFlow.State((uint64_t)v31, type metadata accessor for SearchFlow.State);
      char v35 = 1;
      return v35 & 1;
    default:
      outlined init with copy of SearchFlow.State((uint64_t)v31, (uint64_t)v27, type metadata accessor for SearchFlow.State);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v59 + 8))(v27, v60);
LABEL_16:
        outlined destroy of Any?((uint64_t)v31, &demangling cache variable for type metadata for (SearchFlow.State, SearchFlow.State));
        char v35 = 0;
      }
      else
      {
        uint64_t v45 = v59;
        uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
        uint64_t v47 = v27;
        uint64_t v48 = v60;
        v46(v15, v47, v60);
        v46(v13, (char *)v32, v48);
        char v35 = static USOParse.== infix(_:_:)();
        uint64_t v49 = *(void (**)(char *, uint64_t))(v45 + 8);
        v49(v13, v48);
        v49(v15, v48);
LABEL_18:
        outlined destroy of SearchFlow.State((uint64_t)v31, type metadata accessor for SearchFlow.State);
      }
      return v35 & 1;
  }
}

uint64_t specialized SearchFlow.hasDelayedAction(pommesResponse:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v3 = (char *)v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)v38 - v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DelayedActionComponent?);
  __chkstk_darwin(v6 - 8);
  uint64_t v51 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v50 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  char v42 = (char *)v38 - v11;
  uint64_t v52 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  uint64_t v12 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v16 = v15;
  if (!(v15 >> 62))
  {
    uint64_t result = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFFF8));
    if (result) {
      goto LABEL_3;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_27;
  }
LABEL_3:
  if ((v16 & 0xC000000000000001) != 0)
  {
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
      return result;
    }
    id v18 = *(id *)(v16 + 32);
  }
  int64_t v19 = v18;
  swift_bridgeObjectRelease();
  type metadata accessor for GenericExperience();
  if (!swift_dynamicCastClass())
  {

    return 0;
  }
  uint64_t v20 = GenericExperience.components.getter();
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    v38[1] = v20;
    id v39 = v19;
    uint64_t v41 = v3;
    uint64_t v22 = v12 + 16;
    uint64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
    unint64_t v24 = v20 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v47 = *(void *)(v22 + 56);
    uint64_t v48 = v23;
    int v40 = enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.delayedActionComponent(_:);
    unint64_t v25 = (void (**)(char *, uint64_t, uint64_t))(v43 + 32);
    uint64_t v49 = v22;
    uint64_t v45 = (void (**)(char *, uint64_t))(v22 - 8);
    uint64_t v46 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
    os_log_type_t v44 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
    uint64_t v26 = (char *)&_swiftEmptyArrayStorage;
    v23(v14, v24, v52);
    while (1)
    {
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
      uint64_t v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
      uint64_t v28 = *(void *)(v27 - 8);
      uint64_t v29 = 1;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v5, 1, v27) != 1)
      {
        uint64_t v30 = (uint64_t)v41;
        outlined init with copy of IdentifiedUser?((uint64_t)v5, (uint64_t)v41, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
        int v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 88))(v30, v27);
        if (v31 == v40)
        {
          (*(void (**)(uint64_t, uint64_t))(v28 + 96))(v30, v27);
          (*v25)(v51, v30, v8);
          uint64_t v29 = 0;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v27);
          uint64_t v29 = 1;
        }
      }
      uint64_t v32 = (uint64_t)v51;
      (*v46)(v51, v29, 1, v8);
      outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
      (*v45)(v14, v52);
      if ((*v44)(v32, 1, v8) == 1)
      {
        outlined destroy of Any?(v32, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DelayedActionComponent?);
      }
      else
      {
        uint64_t v33 = *v25;
        uint64_t v34 = v42;
        (*v25)(v42, v32, v8);
        v33(v50, (uint64_t)v34, v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v26 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v26 + 2) + 1, 1, (unint64_t)v26, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_DelayedActionComponent>, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent);
        }
        unint64_t v36 = *((void *)v26 + 2);
        unint64_t v35 = *((void *)v26 + 3);
        if (v36 >= v35 >> 1) {
          uint64_t v26 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, (unint64_t)v26, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_DelayedActionComponent>, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent);
        }
        *((void *)v26 + 2) = v36 + 1;
        v33(&v26[((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v43 + 72) * v36], (uint64_t)v50, v8);
      }
      v24 += v47;
      if (!--v21) {
        break;
      }
      v48(v14, v24, v52);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();

    uint64_t v26 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v37 = *((void *)v26 + 2);
  swift_bridgeObjectRelease();
  return v37 != 0;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Searchfoundation_CardSection]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction))
                   - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    uint64_t v11 = v9 + v10 * a1;
    uint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayName: String, bundleId: String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized SearchFlow.init(parse:renderComponentFlowFactory:pommesSearchClient:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CATOption();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_nlContextUpdate;
  uint64_t v10 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(void *)(v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_targetedRequest) = 0;
  type metadata accessor for ExperienceSelector();
  *(void *)(v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_experienceSelector) = swift_allocObject();
  *(void *)(v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_renderComponentFlowFactory) = a2;
  type metadata accessor for ReferenceResolutionClient();
  swift_retain();
  *(void *)(v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_rrClient) = ReferenceResolutionClient.__allocating_init()();
  outlined init with copy of IdentifiedUser?(a3, v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_pommesSearchClient, &demangling cache variable for type metadata for PommesXPCSearching?);
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  outlined init with take of PatternFlowProviding(v19, v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_outputPublisher);
  static Device.current.getter();
  type metadata accessor for CommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v11 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for InformationViewFactory();
  uint64_t v12 = (void *)swift_allocObject();
  id v13 = [self sharedPreferences];
  uint64_t v14 = type metadata accessor for PommesServerFallbackPreferences();
  swift_allocObject();
  uint64_t v15 = PommesServerFallbackPreferences.init(_:)();
  v12[11] = v14;
  v12[12] = &protocol witness table for PommesServerFallbackPreferences;
  v12[8] = v15;
  outlined init with take of PatternFlowProviding(v19, (uint64_t)(v12 + 3));
  void v12[2] = v11;
  outlined destroy of Any?(a3, &demangling cache variable for type metadata for PommesXPCSearching?);
  *(void *)(v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_informationViewFactory) = v12;
  uint64_t v16 = v4 + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_state;
  uint64_t v17 = type metadata accessor for USOParse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v16, a1, v17);
  type metadata accessor for SearchFlow.State(0);
  swift_storeEnumTagMultiPayload();
  return v4;
}

uint64_t type metadata accessor for SearchFlow(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for SearchFlow);
}

uint64_t specialized SearchFlow.supportedOnDevice(pommesResponse:)()
{
  unint64_t v0 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t result = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8));
    if (result) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return 1;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
      return result;
    }
    id v3 = *(id *)(v1 + 32);
  }
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  type metadata accessor for GenericExperience();
  if (!swift_dynamicCastClass())
  {

    return 1;
  }
  uint64_t v5 = dispatch thunk of Experience.catIds.getter();
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();

    return 1;
  }
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type String and conformance String();
  for (uint64_t i = v5 + 40; ; i += 16)
  {
    swift_bridgeObjectRetain();
    if (StringProtocol.contains<A>(_:)()) {
      break;
    }
    swift_bridgeObjectRelease();
    if (!--v6)
    {

      swift_bridgeObjectRelease_n();
      return 1;
    }
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t specialized SearchFlow.isUserCanceled(pommesResponse:)()
{
  unint64_t v0 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t result = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8));
    if (result) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_17;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
      return result;
    }
    id v3 = *(id *)(v1 + 32);
  }
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  type metadata accessor for GenericExperience();
  if (!swift_dynamicCastClass())
  {

    return 0;
  }
  uint64_t v5 = dispatch thunk of Experience.catIds.getter();
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();

    return 0;
  }
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type String and conformance String();
  for (uint64_t i = v5 + 40; ; i += 16)
  {
    swift_bridgeObjectRetain();
    if (StringProtocol.contains<A>(_:)() & 1) != 0 || (StringProtocol.contains<A>(_:)()) {
      break;
    }
    swift_bridgeObjectRelease();
    if (!--v6)
    {

      swift_bridgeObjectRelease_n();
      return 0;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t outlined consume of Result<(), Error>(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SearchFlow and conformance SearchFlow(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in SearchFlow.buildPommesSearchRequest(parse:)()
{
  return closure #1 in closure #1 in SearchFlow.buildPommesSearchRequest(parse:)();
}

uint64_t partial apply for closure #2 in SearchFlow.buildPommesSearchRequest(parse:)()
{
  return closure #2 in SearchFlow.buildPommesSearchRequest(parse:)();
}

uint64_t outlined destroy of SearchFlow.State(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t base witness table accessor for Flow in SearchFlow()
{
  return lazy protocol witness table accessor for type SearchFlow and conformance SearchFlow(&lazy protocol witness table cache variable for type SearchFlow and conformance SearchFlow, (void (*)(uint64_t))type metadata accessor for SearchFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in SearchFlow()
{
  return lazy protocol witness table accessor for type SearchFlow and conformance SearchFlow(&lazy protocol witness table cache variable for type SearchFlow and conformance SearchFlow, (void (*)(uint64_t))type metadata accessor for SearchFlow);
}

uint64_t sub_330C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 200))();
}

uint64_t ObjC metadata update function for SearchFlow()
{
  return type metadata accessor for SearchFlow(0);
}

void type metadata completion function for SearchFlow()
{
  type metadata accessor for NLContextUpdate?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SearchFlow.State(319);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

char *initializeBufferWithCopyOfBuffer for SearchFlow.State(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for USOParse();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v10 = *a2;
        *(void *)a1 = *a2;
        uint64_t v11 = v10;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v12 = type metadata accessor for RREntity();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v13 = type metadata accessor for CompositionResolutionError();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for SearchFlow.State(void **a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v2 = type metadata accessor for USOParse();
      goto LABEL_8;
    case 1u:
      uint64_t v3 = *a1;

      return;
    case 2u:
      uint64_t v2 = type metadata accessor for RREntity();
      goto LABEL_8;
    case 3u:
      uint64_t v2 = type metadata accessor for CompositionResolutionError();
LABEL_8:
      uint64_t v4 = *(void (**)(void **, uint64_t))(*(void *)(v2 - 8) + 8);
      v4(a1, v2);
      break;
    default:
      return;
  }
}

void **initializeWithCopy for SearchFlow.State(void **a1, void **a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for USOParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_7;
    case 1u:
      uint64_t v7 = *a2;
      *a1 = *a2;
      id v8 = v7;
      goto LABEL_7;
    case 2u:
      uint64_t v9 = type metadata accessor for RREntity();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      goto LABEL_7;
    case 3u:
      uint64_t v10 = type metadata accessor for CompositionResolutionError();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void **assignWithCopy for SearchFlow.State(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of SearchFlow.State((uint64_t)a1, type metadata accessor for SearchFlow.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for USOParse();
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_8;
      case 1u:
        uint64_t v7 = *a2;
        *a1 = *a2;
        id v8 = v7;
        goto LABEL_8;
      case 2u:
        uint64_t v9 = type metadata accessor for RREntity();
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        goto LABEL_8;
      case 3u:
        uint64_t v10 = type metadata accessor for CompositionResolutionError();
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for SearchFlow.State(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v8 = type metadata accessor for CompositionResolutionError();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 2)
  {
    uint64_t v9 = type metadata accessor for RREntity();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for USOParse();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for SearchFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of SearchFlow.State((uint64_t)a1, type metadata accessor for SearchFlow.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v8 = type metadata accessor for CompositionResolutionError();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = type metadata accessor for RREntity();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for USOParse();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for SearchFlow.State()
{
  uint64_t result = type metadata accessor for USOParse();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for RREntity();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for CompositionResolutionError();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in SearchFlow.handleServerDrivenExperience(pommesResponse:rrEntities:)()
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(v0 + 16)
                                                         + OBJC_IVAR____TtC21InformationFlowPlugin10SearchFlow_experienceSelector)
                                           + 88))(*(void *)(v0 + 24));
}

uint64_t outlined init with copy of SearchFlow.State(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PegasusComponents.dialogs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PegasusComponents.layouts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PegasusComponents.catDialogs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PegasusComponents.buttonViews.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PegasusComponents.directExecutions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PegasusComponents.delayedActions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PegasusComponents.sayItComponents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PegasusComponents.disambiguationLists.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PegasusComponents.domainObjectComponents.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL PegasusComponents.isPatternExperience.getter()
{
  return *(void *)(*(void *)(v0 + 32) + 16) != 0;
}

uint64_t PegasusComponents.__allocating_init(dialogs:layouts:catDialogs:buttonViews:directExecutions:delayedActions:sayItComponents:disambiguationLists:domainObjectComponents:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = swift_allocObject();
  PegasusComponents.init(dialogs:layouts:catDialogs:buttonViews:directExecutions:delayedActions:sayItComponents:disambiguationLists:domainObjectComponents:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return v17;
}

void *PegasusComponents.init(dialogs:layouts:catDialogs:buttonViews:directExecutions:delayedActions:sayItComponents:disambiguationLists:domainObjectComponents:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v25 = a8;
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 134220032;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 22) = 2048;
    os_log_type_t type = v18;
    uint64_t v20 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 32) = 2048;
    uint64_t v21 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 42) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 52) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 62) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 72) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 82) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v17, type, "PegasusComponents:\n    dialogs: %ld,\n    layouts: %ld,\n    catDialogs: %ld,\n    buttonViews: %ld,\n    directExecutions: %ld,\n    delayedActions: %ld,\n    sayItComponents: %ld,\n    disambiguationLists: %ld,\n    domainObjectComponents: %ld", (uint8_t *)v19, 0x5Cu);
    a8 = v25;
    swift_slowDealloc();

    uint64_t v22 = a1;
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = a4;
    swift_bridgeObjectRelease();
    uint64_t v20 = a3;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = a1;
    swift_bridgeObjectRelease();
  }
  void v10[2] = v22;
  v10[3] = a2;
  v10[4] = v20;
  v10[5] = v21;
  v10[6] = a5;
  v10[7] = a6;
  v10[8] = a7;
  v10[9] = a8;
  v10[10] = a9;
  return v10;
}

uint64_t PegasusComponents.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PegasusComponents.__deallocating_deinit()
{
  PegasusComponents.deinit();

  return _swift_deallocClassInstance(v0, 88, 7);
}

unint64_t static PegasusComponentsParser.parseAlternateComponents(pegasusResult:)()
{
  uint64_t v46 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience();
  uint64_t v40 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)v39 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1 = type metadata accessor for Date();
  __chkstk_darwin(v1 - 8);
  uint64_t v41 = (char *)v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for PerformanceUtil.Ticket();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin(v3);
  os_log_type_t v44 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Parse.PegasusResult.response.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v17 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.alternateExperiences.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 134217984;
    uint64_t v47 = *(void *)(v17 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v20, v21, "PegasusResult: parseAlternateServerComponents : %ld", v22, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v23 = v44;
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  unint64_t v24 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v47 = (uint64_t)&_swiftEmptyArrayStorage;
  uint64_t v25 = *(void *)(v17 + 16);
  if (v25)
  {
    v39[1] = v19;
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
    unint64_t v27 = v17 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
    uint64_t v28 = *(void *)(v40 + 72);
    uint64_t v29 = (void (**)(char *, uint64_t))(v40 + 8);
    uint64_t v41 = (char *)v17;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v30 = v45;
      uint64_t v31 = v46;
      v26(v45, v27, v46);
      uint64_t v32 = Apple_Parsec_Siri_V2alpha_SingleExperience.components.getter();
      uint64_t v33 = specialized static PegasusComponentsParser.collateComponents(components:)(v32);
      swift_bridgeObjectRelease();
      (*v29)(v30, v31);
      if (v33)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + (v47 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                       + (v47 & 0xFFFFFFFFFFFFFF8)) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v27 += v28;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
    unint64_t v24 = v47;
    uint64_t v23 = v44;
  }
  swift_bridgeObjectRelease();
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    unint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v36 = 134217984;
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v37 = *(void *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFFF8));
    }
    swift_bridgeObjectRelease();
    uint64_t v47 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v34, v35, "PegasusResult: parseAlternateServerComponents found : %ld", v36, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v42 + 8))(v23, v43);
  return v24;
}

void closure #1 in static PegasusComponentsParser.collateComponents(components:)(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7, unint64_t *a8, unint64_t *a9, unint64_t *a10)
{
  uint64_t v193 = a8;
  v198 = a7;
  uint64_t v203 = a6;
  uint64_t v208 = a5;
  uint64_t v227 = a4;
  uint64_t v222 = a3;
  v213 = a2;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent();
  uint64_t v216 = *(void *)(v10 - 8);
  uint64_t v217 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v215 = (char *)&v186 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v214 = (char *)&v186 - v13;
  uint64_t v192 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListComponent();
  uint64_t v191 = *(void *)(v192 - 8);
  uint64_t v14 = __chkstk_darwin(v192);
  uint64_t v190 = (char *)&v186 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v189 = (char *)&v186 - v16;
  uint64_t v197 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ButtonViewComponent();
  uint64_t v196 = *(void *)(v197 - 8);
  uint64_t v17 = __chkstk_darwin(v197);
  v195 = (char *)&v186 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v194 = (char *)&v186 - v19;
  uint64_t v202 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItComponent();
  uint64_t v201 = *(void *)(v202 - 8);
  uint64_t v20 = __chkstk_darwin(v202);
  uint64_t v200 = (char *)&v186 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  id v199 = (char *)&v186 - v22;
  uint64_t v207 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  uint64_t v206 = *(void *)(v207 - 8);
  uint64_t v23 = __chkstk_darwin(v207);
  uint64_t v205 = (char *)&v186 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v204 = (char *)&v186 - v25;
  uint64_t v26 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent();
  uint64_t v211 = *(void *)(v26 - 8);
  uint64_t v212 = v26;
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v210 = (char *)&v186 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v209 = (char *)&v186 - v29;
  uint64_t v30 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = __chkstk_darwin(v30);
  v228 = (char *)&v186 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  os_log_type_t v35 = (char *)&v186 - v34;
  uint64_t v36 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CatDialogComponent();
  v225 = *(uint8_t **)(v36 - 8);
  uint64_t v226 = (char *)v36;
  uint64_t v37 = __chkstk_darwin(v36);
  uint64_t v224 = (char *)&v186 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v223 = (char *)&v186 - v39;
  uint64_t v40 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  uint64_t v220 = *(void *)(v40 - 8);
  uint64_t v221 = v40;
  uint64_t v41 = __chkstk_darwin(v40);
  uint64_t v219 = (char *)&v186 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v218 = (char *)&v186 - v43;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  __chkstk_darwin(v44 - 8);
  uint64_t v46 = (char *)&v186 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
  uint64_t v48 = *(uint64_t (***)(char *, uint64_t))(v47 - 8);
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v187 = (char *)&v186 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __chkstk_darwin(v49);
  uint64_t v188 = (char *)&v186 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  uint64_t v55 = (char *)&v186 - v54;
  __chkstk_darwin(v53);
  uint64_t v57 = (char *)&v186 - v56;
  Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
  uint64_t v58 = v47;
  uint64_t v59 = v48;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v48[6])(v46, 1, v58) == 1)
  {
    outlined destroy of Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?((uint64_t)v46);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.information);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      int64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v63 = 0;
      _os_log_impl(&dword_0, v61, v62, "PegasusResult component missing type", v63, 2u);
      swift_slowDealloc();
    }

    return;
  }
  ((void (*)(char *, char *, uint64_t))v48[4])(v57, v46, v58);
  unint64_t v64 = v48[2];
  ((void (*)(char *, char *, uint64_t))v64)(v55, v57, v58);
  int v65 = v59[11](v55, v58);
  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.renderedDialog(_:))
  {
    v225 = (uint8_t *)v58;
    uint64_t v226 = v57;
    v59[12](v55, v58);
    uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v66(v35, v55, v30);
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v228, v35, v30);
    uint64_t v67 = v227;
    unint64_t v68 = *v227;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v67 = v68;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v68 + 16) + 1, 1, v68);
      *uint64_t v227 = v68;
    }
    unint64_t v71 = *(void *)(v68 + 16);
    unint64_t v70 = *(void *)(v68 + 24);
    if (v71 >= v70 >> 1)
    {
      unint64_t v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1, v68);
      *uint64_t v227 = v68;
    }
    *(void *)(v68 + 16) = v71 + 1;
    v66((char *)(v68+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v71), v228, v30);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v35, v30);
    v59[1](v226, (uint64_t)v225);
    return;
  }
  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.catDialog(_:))
  {
    v59[12](v55, v58);
    uint64_t v73 = v225;
    uint64_t v72 = v226;
    uint64_t v74 = (void (*)(char *, char *, char *))*((void *)v225 + 4);
    os_log_type_t v75 = v223;
    v74(v223, v55, v226);
    (*((void (**)(char *, char *, char *))v73 + 2))(v224, v75, v72);
    uint64_t v76 = v222;
    unint64_t v77 = *v222;
    char v78 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v76 = v77;
    uint64_t v79 = v58;
    if ((v78 & 1) == 0)
    {
      unint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v77 + 16) + 1, 1, v77);
      *uint64_t v76 = v77;
    }
    unint64_t v81 = *(void *)(v77 + 16);
    unint64_t v80 = *(void *)(v77 + 24);
    if (v81 >= v80 >> 1)
    {
      unint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1, v77);
      *uint64_t v76 = v77;
    }
    *(void *)(v77 + 16) = v81 + 1;
    uint64_t v82 = v225;
    unint64_t v83 = v77 + ((v82[80] + 32) & ~(unint64_t)v82[80]) + *((void *)v225 + 9) * v81;
    uint64_t v84 = v226;
    v74((char *)v83, v224, v226);
    (*((void (**)(char *, char *))v82 + 1))(v223, v84);
    v59[1](v57, v79);
    return;
  }
  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.layoutExperience(_:))
  {
    uint64_t v85 = v57;
    unint64_t v86 = v59;
    v59[12](v55, v58);
    uint64_t v88 = v220;
    uint64_t v87 = v221;
    uint64_t v89 = *(void (**)(char *, char *, uint64_t))(v220 + 32);
    uint64_t v90 = v218;
    v89(v218, v55, v221);
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v219, v90, v87);
    uint64_t v91 = v213;
    unint64_t v92 = *v213;
    char v93 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t *v91 = v92;
    uint64_t v94 = v58;
    if ((v93 & 1) == 0)
    {
      unint64_t v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v92 + 16) + 1, 1, v92);
      unint64_t *v91 = v92;
    }
    unint64_t v96 = *(void *)(v92 + 16);
    unint64_t v95 = *(void *)(v92 + 24);
    if (v96 >= v95 >> 1)
    {
      unint64_t v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1, v96 + 1, 1, v92);
      unint64_t *v91 = v92;
    }
    *(void *)(v92 + 16) = v96 + 1;
    uint64_t v97 = v220;
    unint64_t v98 = v92
        + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80))
        + *(void *)(v220 + 72) * v96;
    uint64_t v99 = v221;
    v89((char *)v98, v219, v221);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v218, v99);
LABEL_31:
    v86[1](v85, v94);
    return;
  }
  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.domainObjectComponent(_:))
  {
    uint64_t v85 = v57;
    unint64_t v86 = v59;
    v59[12](v55, v58);
    uint64_t v100 = v55;
    uint64_t v102 = v216;
    uint64_t v101 = v217;
    uint64_t v103 = *(void (**)(char *, char *, uint64_t))(v216 + 32);
    uint64_t v104 = v214;
    v103(v214, v100, v217);
    (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v215, v104, v101);
    unint64_t v105 = *a10;
    char v106 = swift_isUniquelyReferenced_nonNull_native();
    *a10 = v105;
    uint64_t v94 = v58;
    if ((v106 & 1) == 0)
    {
      unint64_t v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v105 + 16) + 1, 1, v105);
      *a10 = v105;
    }
    unint64_t v108 = *(void *)(v105 + 16);
    unint64_t v107 = *(void *)(v105 + 24);
    if (v108 >= v107 >> 1)
    {
      unint64_t v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v107 > 1, v108 + 1, 1, v105);
      *a10 = v105;
    }
    *(void *)(v105 + 16) = v108 + 1;
    uint64_t v109 = v216;
    unint64_t v110 = v105
         + ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80))
         + *(void *)(v216 + 72) * v108;
    uint64_t v111 = v217;
    v103((char *)v110, v215, v217);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v214, v111);
    goto LABEL_31;
  }
  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.directExecutionComponent(_:))
  {
    uint64_t v112 = v57;
    uint64_t v113 = v59;
    v59[12](v55, v58);
    uint64_t v115 = v211;
    uint64_t v114 = v212;
    uint64_t v116 = *(void (**)(char *, char *, uint64_t))(v211 + 32);
    unint64_t v117 = v209;
    v116(v209, v55, v212);
    (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v210, v117, v114);
    uint64_t v118 = v208;
    unint64_t v119 = *v208;
    char v120 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t *v118 = v119;
    uint64_t v121 = v58;
    if ((v120 & 1) == 0)
    {
      unint64_t v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v119 + 16) + 1, 1, v119);
      unint64_t *v118 = v119;
    }
    unint64_t v123 = *(void *)(v119 + 16);
    unint64_t v122 = *(void *)(v119 + 24);
    if (v123 >= v122 >> 1)
    {
      unint64_t v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v122 > 1, v123 + 1, 1, v119);
      unint64_t *v118 = v119;
    }
    *(void *)(v119 + 16) = v123 + 1;
    uint64_t v124 = v211;
    unint64_t v125 = v119
         + ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80))
         + *(void *)(v211 + 72) * v123;
    uint64_t v126 = v212;
    v116((char *)v125, v210, v212);
    (*(void (**)(char *, uint64_t))(v124 + 8))(v209, v126);
LABEL_56:
    v113[1](v112, v121);
    return;
  }
  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.delayedActionComponent(_:))
  {
    uint64_t v112 = v57;
    uint64_t v113 = v59;
    v59[12](v55, v58);
    uint64_t v127 = v206;
    uint64_t v128 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
    v129 = v204;
    uint64_t v130 = v207;
    v128(v204, v55, v207);
    (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v205, v129, v130);
    uint64_t v131 = v203;
    unint64_t v132 = *v203;
    char v133 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v131 = v132;
    uint64_t v121 = v58;
    if ((v133 & 1) == 0)
    {
      unint64_t v132 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v132 + 16) + 1, 1, v132);
      *uint64_t v131 = v132;
    }
    unint64_t v135 = *(void *)(v132 + 16);
    unint64_t v134 = *(void *)(v132 + 24);
    if (v135 >= v134 >> 1)
    {
      unint64_t v132 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v134 > 1, v135 + 1, 1, v132);
      *uint64_t v131 = v132;
    }
    *(void *)(v132 + 16) = v135 + 1;
    uint64_t v136 = v206;
    unint64_t v137 = v132
         + ((*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80))
         + *(void *)(v206 + 72) * v135;
    uint64_t v138 = v207;
    v128((char *)v137, v205, v207);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v204, v138);
    goto LABEL_56;
  }
  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.sayItComponent(_:))
  {
    uint64_t v112 = v57;
    uint64_t v113 = v59;
    v59[12](v55, v58);
    uint64_t v139 = v201;
    uint64_t v140 = *(void (**)(char *, char *, uint64_t))(v201 + 32);
    uint64_t v141 = v199;
    uint64_t v142 = v202;
    v140(v199, v55, v202);
    (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v200, v141, v142);
    uint64_t v143 = v198;
    unint64_t v144 = *v198;
    char v145 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v143 = v144;
    uint64_t v121 = v58;
    if ((v145 & 1) == 0)
    {
      unint64_t v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v144 + 16) + 1, 1, v144);
      *uint64_t v143 = v144;
    }
    unint64_t v147 = *(void *)(v144 + 16);
    unint64_t v146 = *(void *)(v144 + 24);
    if (v147 >= v146 >> 1)
    {
      unint64_t v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v146 > 1, v147 + 1, 1, v144);
      *uint64_t v143 = v144;
    }
    *(void *)(v144 + 16) = v147 + 1;
    uint64_t v148 = v201;
    unint64_t v149 = v144
         + ((*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80))
         + *(void *)(v201 + 72) * v147;
    uint64_t v150 = v202;
    v140((char *)v149, v200, v202);
    (*(void (**)(char *, uint64_t))(v148 + 8))(v199, v150);
    goto LABEL_56;
  }
  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.buttonViewComponent(_:))
  {
    uint64_t v112 = v57;
    uint64_t v113 = v59;
    v59[12](v55, v58);
    uint64_t v151 = v196;
    uint64_t v152 = *(void (**)(char *, char *, uint64_t))(v196 + 32);
    v153 = v194;
    uint64_t v154 = v197;
    v152(v194, v55, v197);
    (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v195, v153, v154);
    uint64_t v155 = v193;
    unint64_t v156 = *v193;
    char v157 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t *v155 = v156;
    uint64_t v121 = v58;
    if ((v157 & 1) == 0)
    {
      unint64_t v156 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v156 + 16) + 1, 1, v156);
      unint64_t *v155 = v156;
    }
    unint64_t v159 = *(void *)(v156 + 16);
    unint64_t v158 = *(void *)(v156 + 24);
    if (v159 >= v158 >> 1)
    {
      unint64_t v156 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v158 > 1, v159 + 1, 1, v156);
      unint64_t *v155 = v156;
    }
    *(void *)(v156 + 16) = v159 + 1;
    uint64_t v160 = v196;
    unint64_t v161 = v156
         + ((*(unsigned __int8 *)(v160 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80))
         + *(void *)(v196 + 72) * v159;
    uint64_t v162 = v197;
    v152((char *)v161, v195, v197);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v194, v162);
    goto LABEL_56;
  }
  if (v65 == enum case for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component.disambiguationListComponent(_:))
  {
    uint64_t v85 = v57;
    unint64_t v86 = v59;
    v59[12](v55, v58);
    uint64_t v163 = v55;
    uint64_t v164 = v191;
    uint64_t v165 = *(void (**)(char *, char *, uint64_t))(v191 + 32);
    v166 = v189;
    uint64_t v167 = v192;
    v165(v189, v163, v192);
    (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v190, v166, v167);
    unint64_t v168 = *a9;
    char v169 = swift_isUniquelyReferenced_nonNull_native();
    *a9 = v168;
    uint64_t v94 = v58;
    if ((v169 & 1) == 0)
    {
      unint64_t v168 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v168 + 16) + 1, 1, v168);
      *a9 = v168;
    }
    unint64_t v171 = *(void *)(v168 + 16);
    unint64_t v170 = *(void *)(v168 + 24);
    if (v171 >= v170 >> 1)
    {
      unint64_t v168 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v170 > 1, v171 + 1, 1, v168);
      *a9 = v168;
    }
    *(void *)(v168 + 16) = v171 + 1;
    uint64_t v172 = v191;
    unint64_t v173 = v168
         + ((*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80))
         + *(void *)(v191 + 72) * v171;
    uint64_t v174 = v192;
    v165((char *)v173, v190, v192);
    (*(void (**)(char *, uint64_t))(v172 + 8))(v189, v174);
    goto LABEL_31;
  }
  v228 = (char *)v59;
  uint64_t v175 = v58;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v176 = type metadata accessor for Logger();
  __swift_project_value_buffer(v176, (uint64_t)static Logger.information);
  uint64_t v177 = v188;
  ((void (*)(char *, char *, uint64_t))v64)(v188, v57, v58);
  uint64_t v178 = Logger.logObject.getter();
  os_log_type_t v179 = static os_log_type_t.error.getter();
  uint64_t v180 = v57;
  if (os_log_type_enabled(v178, v179))
  {
    uint64_t v181 = swift_slowAlloc();
    uint64_t v226 = v57;
    uint64_t v182 = (uint8_t *)v181;
    uint64_t v230 = swift_slowAlloc();
    uint64_t v227 = (unint64_t *)v55;
    *(_DWORD *)uint64_t v182 = 136315138;
    v225 = v182 + 4;
    ((void (*)(char *, char *, uint64_t))v64)(v187, v177, v175);
    uint64_t v183 = String.init<A>(describing:)();
    uint64_t v229 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v183, v184, &v230);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v185 = (void (*)(char *, uint64_t))*((void *)v228 + 1);
    v185(v177, v175);
    _os_log_impl(&dword_0, v178, v179, "PegasusResult unknown component %s", v182, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v185(v226, v175);
    uint64_t v55 = (char *)v227;
  }
  else
  {

    uint64_t v185 = (void (*)(char *, uint64_t))*((void *)v228 + 1);
    v185(v177, v175);
    v185(v180, v175);
  }
  v185(v55, v175);
}

uint64_t specialized static PegasusComponentsParser.parseLegacyComponents(pegasusResult:)()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v0 - 8);
  uint64_t v28 = v0;
  __chkstk_darwin(v0);
  uint64_t v26 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  uint64_t v2 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v9 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.information);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = v6;
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_0, v13, v14, "PegasusResult: parseLegacyServerComponents", v15, 2u);
    uint64_t v6 = v23;
    swift_slowDealloc();
  }

  Parse.PegasusResult.response.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v24);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.components.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v25);
  type metadata accessor for PerformanceUtil();
  uint64_t v16 = static PerformanceUtil.shared.getter();
  __chkstk_darwin(v16);
  uint64_t v17 = v26;
  Date.init()();
  uint64_t v21 = &v19;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PegasusComponents?);
  uint64_t v20 = partial apply for closure #1 in static PegasusComponentsParser.parseLegacyComponents(pegasusResult:);
  char v19 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v28);
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t specialized static PegasusComponentsParser.collateComponents(components:)(uint64_t a1)
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    uint64_t v29 = *(void **)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v3, v4, "PegasusResult: sorting pegasus components : %ld", v5, 0xCu);
    swift_slowDealloc();

    uint64_t v6 = *(void *)(a1 + 16);
    if (v6) {
      goto LABEL_5;
    }
    return 0;
  }

  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return 0;
  }
LABEL_5:
  uint64_t v28 = &_swiftEmptyArrayStorage;
  uint64_t v29 = &_swiftEmptyArrayStorage;
  uint64_t v26 = &_swiftEmptyArrayStorage;
  uint64_t v27 = &_swiftEmptyArrayStorage;
  uint64_t v24 = &_swiftEmptyArrayStorage;
  uint64_t v25 = &_swiftEmptyArrayStorage;
  uint64_t v22 = &_swiftEmptyArrayStorage;
  uint64_t v23 = &_swiftEmptyArrayStorage;
  uint64_t v21 = &_swiftEmptyArrayStorage;
  uint64_t v7 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent() - 8);
  uint64_t v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  uint64_t v9 = *(void *)(v7 + 72);
  swift_bridgeObjectRetain();
  do
  {
    closure #1 in static PegasusComponentsParser.collateComponents(components:)(v8, (unint64_t *)&v28, (unint64_t *)&v27, (unint64_t *)&v29, (unint64_t *)&v25, (unint64_t *)&v24, (unint64_t *)&v23, (unint64_t *)&v26, (unint64_t *)&v22, (unint64_t *)&v21);
    v8 += v9;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t)v28;
  uint64_t v10 = (uint64_t)v29;
  uint64_t v13 = (uint64_t)v26;
  uint64_t v12 = (uint64_t)v27;
  uint64_t v15 = (uint64_t)v24;
  uint64_t v14 = (uint64_t)v25;
  uint64_t v17 = (uint64_t)v22;
  uint64_t v16 = (uint64_t)v23;
  uint64_t v18 = (uint64_t)v21;
  type metadata accessor for PegasusComponents();
  uint64_t v19 = swift_allocObject();
  PegasusComponents.init(dialogs:layouts:catDialogs:buttonViews:directExecutions:delayedActions:sayItComponents:disambiguationLists:domainObjectComponents:)(v10, v11, v12, v13, v14, v15, v16, v17, v18);
  return v19;
}

uint64_t specialized static PegasusComponentsParser.parsePrimaryComponents(pegasusResult:)()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v34 = *(void *)(v0 - 8);
  uint64_t v35 = v0;
  __chkstk_darwin(v0);
  uint64_t v33 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v30 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v28 = *(void *)(v9 - 8);
  uint64_t v29 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience();
  uint64_t v31 = *(void *)(v12 - 8);
  uint64_t v32 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.information);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = v6;
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_0, v16, v17, "PegasusResult: parsePrimaryServerComponents", v18, 2u);
    uint64_t v6 = v27;
    swift_slowDealloc();
  }

  Parse.PegasusResult.response.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v29);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v6);
  Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  type metadata accessor for PerformanceUtil();
  uint64_t v19 = static PerformanceUtil.shared.getter();
  __chkstk_darwin(v19);
  uint64_t v20 = v33;
  Date.init()();
  uint64_t v24 = &v22;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PegasusComponents?);
  uint64_t v23 = partial apply for closure #1 in static PegasusComponentsParser.parsePrimaryComponents(pegasusResult:);
  char v22 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v20, v35);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
  return v36;
}

uint64_t specialized static PegasusComponentsParser.parsePegasusRenderOptions(response:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.information);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "PegasusResult: parsePegasusRenderOptions", v11, 2u);
    swift_slowDealloc();
  }

  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  char v12 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.isImmersiveExperience.getter();
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if ((v12 & 1) == 0) {
    return 0;
  }
  __chkstk_darwin(v13);
  *((unsigned char *)&v16 - 16) = 1;
  id v14 = objc_allocWithZone((Class)type metadata accessor for PommesRenderOptions());
  return PommesRenderOptions.init(_:)();
}

uint64_t type metadata accessor for PegasusComponents()
{
  return self;
}

ValueMetadata *type metadata accessor for PegasusComponentsParser()
{
  return &type metadata for PegasusComponentsParser;
}

uint64_t partial apply for closure #1 in static PegasusComponentsParser.parsePegasusRenderOptions(response:)()
{
  return PommesRenderOptions.Builder.isImmersiveExperience.setter();
}

uint64_t partial apply for closure #1 in static PegasusComponentsParser.parsePrimaryComponents(pegasusResult:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = Apple_Parsec_Siri_V2alpha_SingleExperience.components.getter();
  uint64_t v3 = specialized static PegasusComponentsParser.collateComponents(components:)(v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t outlined destroy of Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in static PegasusComponentsParser.parseLegacyComponents(pegasusResult:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized static PegasusComponentsParser.collateComponents(components:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t PegasusFlowEventLogger.__allocating_init(pommesResponse:domainName:eventType:eventSending:)(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  outlined init with copy of OutputPublisherAsync(a5, v10 + 24);
  if (a1)
  {
    id v11 = a1;
    a2 = PommesResponse.metadataDomainName.getter();
    uint64_t v13 = v12;

    __swift_destroy_boxed_opaque_existential_1(a5);
    swift_bridgeObjectRelease();
    a3 = v13;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a5);
  }
  *(void *)(v10 + 64) = a2;
  *(void *)(v10 + 72) = a3;
  *(_DWORD *)(v10 + 80) = a4;
  return v10;
}

void *PegasusFlowEventLogger.pommesResponse.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

uint64_t PegasusFlowEventLogger.eventSending.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + 24, a1);
}

uint64_t PegasusFlowEventLogger.metadataDomainName.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PegasusFlowEventLogger.eventType.getter()
{
  return *(unsigned int *)(v0 + 80);
}

uint64_t PegasusFlowEventLogger.init(pommesResponse:domainName:eventType:eventSending:)(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6 = v5;
  *(void *)(v6 + 16) = a1;
  outlined init with copy of OutputPublisherAsync(a5, v6 + 24);
  if (a1)
  {
    id v12 = a1;
    a2 = PommesResponse.metadataDomainName.getter();
    uint64_t v14 = v13;

    __swift_destroy_boxed_opaque_existential_1(a5);
    swift_bridgeObjectRelease();
    a3 = v14;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a5);
  }
  *(void *)(v6 + 64) = a2;
  *(void *)(v6 + 72) = a3;
  *(_DWORD *)(v6 + 80) = a4;
  return v6;
}

uint64_t PegasusFlowEventLogger.__allocating_init()()
{
  static SiriKitEventSender.current.getter();
  return (*(uint64_t (**)(void, uint64_t, unint64_t, void, unsigned char *))(v0 + 112))(0, 0x54746E6572727543, 0xEB000000006B7361, 0, v2);
}

uint64_t PegasusFlowEventLogger.__allocating_init(eventType:)(uint64_t a1)
{
  static SiriKitEventSender.current.getter();
  return (*(uint64_t (**)(void, uint64_t, unint64_t, uint64_t, unsigned char *))(v1 + 112))(0, 0x54746E6572727543, 0xEB000000006B7361, a1, v4);
}

uint64_t PegasusFlowEventLogger.logGenericFlowStepEvent(stateType:parameterName:statusReason:statusReasonDescription:taskType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v31 = a5;
  uint64_t v32 = a8;
  uint64_t v29 = a2;
  uint64_t v30 = a7;
  uint64_t v28 = a4;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ActivityType();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.information);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = v19;
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_0, v21, v22, "Logging generic SELF FlowStep event", v23, 2u);
    uint64_t v19 = v27;
    swift_slowDealloc();
  }

  type metadata accessor for SiriKitEvent();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a1, v16);
  outlined init with copy of SiriKitReliabilityCodes?(v28, (uint64_t)v15);
  uint64_t v24 = (void *)swift_allocObject();
  uint64_t v25 = v32;
  v24[2] = v30;
  v24[3] = v25;
  v24[4] = v29;
  v24[5] = a3;
  v24[6] = v31;
  v24[7] = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
  __swift_project_boxed_opaque_existential_1((void *)(v9 + 24), *(void *)(v9 + 48));
  dispatch thunk of SiriKitEventSending.send(_:)();
  return swift_release();
}

uint64_t closure #1 in PegasusFlowEventLogger.logGenericFlowStepEvent(stateType:parameterName:statusReason:statusReasonDescription:taskType:)()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter();
}

Swift::tuple_taskType_String_optional_isTerminalStepLogged_Bool __swiftcall PegasusFlowEventLogger.logFlowEventsFromPommesResponse()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  __chkstk_darwin(v2 - 8);
  uint64_t v35 = &v30[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for ActivityType();
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v38 = v4;
  __chkstk_darwin(v4);
  uint64_t v36 = &v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v39 = type metadata accessor for PerformanceUtil.Ticket();
  uint64_t v6 = *(void *)(v39 - 8);
  __chkstk_darwin(v39 - 8);
  uint64_t v8 = &v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v11 = &v30[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  Date.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (taskType: String?, isTerminalStepLogged: Bool));
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  uint64_t v13 = v6;
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v11, v9);
  uint64_t v14 = v40;
  uint64_t v15 = v41;
  LODWORD(v16) = v42;
  if (v41)
  {
    swift_bridgeObjectRetain();
    Date.init()();
    PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
    (*(void (**)(uint64_t, void *))(*v0 + 144))(v14, v15);
    swift_bridgeObjectRelease();
    static PerformanceUtil.shared.getter();
    dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v8, v39);
  }
  if (v0[2])
  {
    if ((v16 | dispatch thunk of PommesResponse.listenAfterSpeaking.getter())) {
      goto LABEL_12;
    }
  }
  else if (v16)
  {
    goto LABEL_12;
  }
  uint64_t v34 = v13;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  int v31 = v16;
  uint64_t v32 = v14;
  uint64_t v33 = v12;
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.information);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_0, v18, v19, "RenderPegasusFlow FlowTask logging completed", v20, 2u);
    swift_slowDealloc();
  }

  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v21 = v36;
  uint64_t v16 = v37;
  uint64_t v22 = v38;
  (*(void (**)(unsigned char *, void, uint64_t))(v37 + 104))(v36, enum case for ActivityType.completed(_:), v38);
  uint64_t v23 = enum case for SiriKitReliabilityCodes.normal(_:);
  uint64_t v24 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = (uint64_t)v35;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v25 + 104))(v35, v23, v24);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v26, 0, 1, v24);
  (*(void (**)(unsigned char *, uint64_t, unint64_t, uint64_t, void, unint64_t, uint64_t, unint64_t))(*v1 + 120))(v21, 0x6C7070615F746F6ELL, 0xEE00656C62616369, v26, 0, 0xE000000000000000, 0x54746E6572727543, 0xEB000000006B7361);
  outlined destroy of SiriKitReliabilityCodes?(v26);
  (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v21, v22);
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v34 + 8))(v8, v39);
  uint64_t v14 = v32;
  LOBYTE(v16) = v31;
LABEL_12:
  uint64_t v27 = v14;
  uint64_t v28 = v15;
  Swift::Bool v29 = v16;
  result.taskType.value._object = v28;
  result.taskType.value._uint64_t countAndFlagsBits = v27;
  result.isTerminalStepLogged = v29;
  return result;
}

Swift::tuple_taskType_String_optional_isTerminalStepLogged_Bool __swiftcall PegasusFlowEventLogger.logPegasusFlowStepEventFromPommesResponse()()
{
  Swift::Bool v33 = 0;
  uint64_t v1 = (void *)v0[2];
  if (!v1)
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.information);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_0, v22, v23, "Pommes response is nil, no SELF Flow event could be logged from it", v24, 2u);
      swift_slowDealloc();
    }

    goto LABEL_19;
  }
  uint64_t v2 = (uint64_t)v0;
  unint64_t v32 = (unint64_t)&_swiftEmptyArrayStorage;
  id v3 = v1;
  uint64_t v4 = dispatch thunk of PommesResponse.pegasusDomainFlowStepLog.getter();
  unint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for FLOWSchemaFLOWStep);
  uint64_t v28 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*v0 + 160);
  uint64_t v8 = (void *)v28(v4, v6, v7, v7);
  outlined consume of Data?(v4, v6);
  if (!v8)
  {

    swift_bridgeObjectRelease();
LABEL_19:
    uint64_t v18 = 0;
    os_log_type_t v19 = 0;
    Swift::Bool v20 = 0;
    goto LABEL_20;
  }
  id v9 = v8;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                 + (v32 & 0xFFFFFFFFFFFFFF8)) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v25 = v9;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v26 = v3;
  uint64_t v27 = dispatch thunk of PommesResponse.taskStepLogs.getter();
  uint64_t v10 = *(void *)(v27 + 16);
  if (v10)
  {
    id v11 = (unint64_t *)(v27 + 40);
    do
    {
      uint64_t v12 = *(v11 - 1);
      unint64_t v13 = *v11;
      outlined copy of Data?(v12, *v11);
      uint64_t v14 = (void *)v28(v12, v13, v7, v7);
      if (v14)
      {
        uint64_t v15 = v2;
        id v16 = v14;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                       + (v32 & 0xFFFFFFFFFFFFFF8)) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        uint64_t v2 = v15;
      }
      v11 += 2;
      outlined consume of Data?(v12, v13);
      --v10;
    }
    while (v10);
  }
  swift_bridgeObjectRelease();
  uint64_t v30 = 0x54746E6572727543;
  unint64_t v31 = 0xEB000000006B7361;
  unsigned int v29 = 152;
  swift_retain();
  unint64_t v17 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18FLOWSchemaFLOWStepCG_yts5NeverOTg50127_s21InformationFlowPlugin07PegasusB11EventLoggerC03logdb4StepE18FromPommesResponseSSSg8taskType_Sb010isTerminalH6LoggedtyFySo18dE6CXEfU_SSSo0d9FLOWStateV0VSb0hI6Plugin0kimN0CTf1cn_nTf4nnnng_n(v17, &v30, &v29, &v33, v2);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t v18 = v30;
  os_log_type_t v19 = (void *)v31;
  Swift::Bool v20 = v33;
LABEL_20:
  result.taskType.value._object = v19;
  result.taskType.value._uint64_t countAndFlagsBits = v18;
  result.isTerminalStepLogged = v20;
  return result;
}

uint64_t closure #1 in PegasusFlowEventLogger.logPegasusFlowStepEventFromPommesResponse()(id *a1, uint64_t *a2, unsigned int *a3, unsigned char *a4, uint64_t a5)
{
  unint64_t v8 = 0xEB000000006B7361;
  id v9 = *a1;
  uint64_t v10 = 0x54746E6572727543;
  id v11 = [*a1 flowState];
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = [v11 currentTaskName];

    if (v13)
    {
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v8 = v14;
    }
  }
  *a2 = v10;
  a2[1] = v8;
  swift_bridgeObjectRelease();
  id v15 = [v9 flowState];
  if (v15)
  {
    id v16 = v15;
    unsigned int v17 = [v15 flowStateType];

    *a3 = v17;
    BOOL v18 = v17 > 5 || ((1 << v17) & 0x34) == 0;
    if (!v18 || v17 == 128) {
      *a4 = 1;
    }
  }
  else
  {
    *a3 = 152;
  }
  id v19 = [v9 flowState];
  if (v19
    && (Swift::Bool v20 = v19, v21 = [v19 currentTaskType],
                   v20,
                   v21))
  {
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v23;
    uint64_t v33 = v22;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v33 = 0;
  }
  id v24 = objc_msgSend(v9, "flowState", v31, v33);
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = a5;
    id v27 = [v24 flowStateReason];

    if (v27)
    {
      [v27 statusReason];
    }
  }
  else
  {
    uint64_t v26 = a5;
  }
  type metadata accessor for SiriKitEvent();
  uint64_t v28 = (void *)swift_allocObject();
  v28[2] = v9;
  void v28[3] = v34;
  v28[4] = v32;
  swift_bridgeObjectRetain();
  id v29 = v9;
  SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)();
  __swift_project_boxed_opaque_existential_1((void *)(v26 + 24), *(void *)(v26 + 48));
  dispatch thunk of SiriKitEventSending.send(_:)();
  return swift_release();
}

BOOL FLOWSchemaFLOWStateType.isLastTaskStep.getter(unsigned int a1)
{
  BOOL result = 1;
  if (a1 > 5 || ((1 << a1) & 0x34) == 0) {
    return a1 == 128;
  }
  return result;
}

void closure #1 in closure #1 in PegasusFlowEventLogger.logPegasusFlowStepEventFromPommesResponse()(int a1, id a2)
{
  id v3 = [a2 domainContexts];
  if (!v3) {
    goto LABEL_8;
  }
  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for FLOWSchemaFLOWDomainContext);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12)
    {
LABEL_4:
      if ((v4 & 0xC000000000000001) != 0)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8)))
        {
          __break(1u);
          return;
        }
        id v5 = *(id *)(v4 + 32);
      }
    }
  }
  else if (*(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8)))
  {
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
LABEL_8:
  dispatch thunk of SiriKitEvent.SiriKitEventBuilder.domainContext.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of SiriKitEvent.SiriKitEventBuilder.attribute.setter();
  id v6 = [a2 flowState];
  uint64_t v7 = v6;
  if (v6)
  {
    id v8 = [v6 resolvedSlotName];

    if (v8)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
  }
  dispatch thunk of SiriKitEvent.SiriKitEventBuilder.parameterName.setter();
  id v9 = [a2 flowState];
  uint64_t v10 = v9;
  if (v9)
  {
    id v11 = [v9 flowStateReasonDescription];

    if (v11)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
  }
  dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter();
}

Swift::Void __swiftcall PegasusFlowEventLogger.logPegasusContextTier1Event(taskType:)(Swift::String taskType)
{
  uint64_t v2 = v1;
  if (v1[2])
  {
    uint64_t v3 = dispatch thunk of PommesResponse.pegasusDomainUserSensitiveTier1Log.getter();
    unint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v5 = 0xF000000000000000;
  }
  uint64_t v6 = type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for FLOWSchemaFLOWPegasusContextTier1);
  id v15 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*v1 + 160))(v3, v5, v6, v6);
  outlined consume of Data?(v3, v5);
  if (v15)
  {
    id v7 = [objc_allocWithZone((Class)FLOWSchemaFLOWClientEvent) init];
    if (v7)
    {
      id v8 = v7;
      [v7 setPegasusContextTier1:v15];
      type metadata accessor for SiriKitEvent();
      swift_bridgeObjectRetain();
      id v9 = v8;
      SiriKitEvent.__allocating_init(taskType:tierOneFlowEvent:_:)();
      __swift_project_boxed_opaque_existential_1(v2 + 3, v2[6]);
      dispatch thunk of SiriKitEventSending.send(_:)();

      swift_release();
    }
    else
    {
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.information);
      oslog = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(oslog, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl(&dword_0, oslog, v11, "Unable to create FLOWSchemaFLOWClientEvent to log flowEntityContextTier1", v12, 2u);
        swift_slowDealloc();

        id v13 = oslog;
      }
      else
      {

        id v13 = v15;
      }
    }
  }
}

Swift::Void __swiftcall PegasusFlowEventLogger.logInformationPluginPreprocessEvent()()
{
  uint64_t v1 = [objc_allocWithZone((Class)FLOWSchemaFLOWInformationPluginContext) init];
  if (!v1)
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.information);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v8 = 0;
      _os_log_impl(&dword_0, v14, v7, "Unable to create FLOWSchemaFLOWInformationPluginContext to log info plugin domain and type", v8, 2u);
      swift_slowDealloc();
    }
    goto LABEL_15;
  }
  unint64_t v14 = v1;
  NSString v2 = String._bridgeToObjectiveC()();
  [v14 setExecutedPegasusDomain:v2];

  [v14 setEventType:*(unsigned int *)(v0 + 80)];
  id v3 = [objc_allocWithZone((Class)FLOWSchemaFLOWDomainContext) init];
  if (v3)
  {
    unint64_t v4 = v3;
    [v3 setInformationPluginContext:v14];
    type metadata accessor for SiriKitEvent();
    *(void *)(swift_allocObject() + 16) = v4;
    swift_bridgeObjectRetain();
    id v5 = v4;
    SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)();
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 24), *(void *)(v0 + 48));
    dispatch thunk of SiriKitEventSending.send(_:)();

    swift_release();
    return;
  }
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.information);
  os_log_t oslog = (os_log_t)Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(oslog, v10))
  {

LABEL_15:
    uint64_t v12 = v14;
    goto LABEL_16;
  }
  os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)os_log_type_t v11 = 0;
  _os_log_impl(&dword_0, oslog, v10, "Unable to create FLOWSchemaFLOWDomainContext to log info plugin domain and type", v11, 2u);
  swift_slowDealloc();

  uint64_t v12 = oslog;
LABEL_16:
}

id PegasusFlowEventLogger.makeFlowObject<A>(from:ofType:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
LABEL_9:
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.information);
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v10 = 136315138;
      swift_getMetatypeMetadata();
      uint64_t v11 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v8, v9, "No data of type %s included in the pommes response for SELF FlowTask logging", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 0;
  }
  else
  {
    switch(a2 >> 62)
    {
      case 1uLL:
        if ((int)a1 == a1 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_6;
      case 2uLL:
        if (*(void *)(a1 + 16) == *(void *)(a1 + 24)) {
          goto LABEL_9;
        }
LABEL_6:
        outlined copy of Data._Representation(a1, a2);
        goto LABEL_7;
      case 3uLL:
        goto LABEL_4;
      default:
        if ((a2 & 0xFF000000000000) == 0)
        {
LABEL_4:
          outlined consume of Data?(a1, a2);
          goto LABEL_9;
        }
LABEL_7:
        id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v6 = [v4 initWithData:isa];

        outlined consume of Data?(a1, a2);
        break;
    }
  }
  return v6;
}

uint64_t PegasusFlowEventLogger.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PegasusFlowEventLogger.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 84, 7);
}

BOOL FLOWSchemaFLOWStateType.isFirstTaskStep.getter(int a1)
{
  return a1 == 1;
}

uint64_t outlined init with copy of SiriKitReliabilityCodes?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_39388()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t partial apply for closure #1 in PegasusFlowEventLogger.logGenericFlowStepEvent(stateType:parameterName:statusReason:statusReasonDescription:taskType:)()
{
  return closure #1 in PegasusFlowEventLogger.logGenericFlowStepEvent(stateType:parameterName:statusReason:statusReasonDescription:taskType:)();
}

uint64_t partial apply for closure #1 in PegasusFlowEventLogger.logFlowEventsFromPommesResponse()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 136))();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t outlined destroy of SiriKitReliabilityCodes?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18FLOWSchemaFLOWStepCG_yts5NeverOTg50127_s21InformationFlowPlugin07PegasusB11EventLoggerC03logdb4StepE18FromPommesResponseSSSg8taskType_Sb010isTerminalH6LoggedtyFySo18dE6CXEfU_SSSo0d9FLOWStateV0VSb0hI6Plugin0kimN0CTf1cn_nTf4nnnng_n(unint64_t a1, uint64_t *a2, unsigned int *a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v10 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  while (1)
  {
    uint64_t v11 = (unint64_t *)&_swiftEmptyArrayStorage;
    if (!v10) {
      return (uint64_t)v11;
    }
    uint64_t v22 = (unint64_t *)&_swiftEmptyArrayStorage;
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 & ~(v10 >> 63), 0);
    if (v10 < 0) {
      break;
    }
    uint64_t v13 = 0;
    uint64_t v11 = v22;
    while (v10 != v13)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(a1 + 8 * v13 + 32);
      }
      id v15 = v14;
      id v21 = v14;
      closure #1 in PegasusFlowEventLogger.logPegasusFlowStepEventFromPommesResponse()(&v21, a2, a3, a4, a5);
      if (v6)
      {
        swift_release();

        return (uint64_t)v11;
      }
      uint64_t v6 = 0;

      uint64_t v22 = v11;
      unint64_t v17 = v11[2];
      unint64_t v16 = v11[3];
      unint64_t v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v11 = v22;
      }
      ++v13;
      _OWORD v11[2] = v18;
      if (v10 == v13) {
        return (uint64_t)v11;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_3961C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in PegasusFlowEventLogger.logInformationPluginPreprocessEvent()()
{
  id v1 = *(id *)(v0 + 16);
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.domainContext.setter();
}

uint64_t type metadata accessor for PegasusFlowEventLogger()
{
  return self;
}

uint64_t sub_396A8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void partial apply for closure #1 in closure #1 in PegasusFlowEventLogger.logPegasusFlowStepEventFromPommesResponse()(int a1)
{
  closure #1 in closure #1 in PegasusFlowEventLogger.logPegasusFlowStepEventFromPommesResponse()(a1, *(id *)(v1 + 16));
}

uint64_t static GenericResultSetParamBuilder.displayPaginationParams.getter()
{
  return WindowedPaginationParameters.init(windowSize:_:)();
}

uint64_t closure #1 in static ResultParamBuilder.displayPaginationParams.getter()
{
  return WindowedPaginationParameters.isLastWindow.setter();
}

uint64_t ResultParamBuilder.parameters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ResultParamBuilder.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t ResultParamBuilder.init(parameters:content:contentFieldName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  uint64_t v9 = type metadata accessor for ResultParamBuilder();
  uint64_t v10 = (char *)a5 + *(int *)(v9 + 28);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a2, v11);
  uint64_t v13 = (void *)((char *)a5 + *(int *)(v9 + 32));
  void *v13 = a3;
  v13[1] = a4;
  return result;
}

uint64_t type metadata accessor for ResultParamBuilder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ResultParamBuilder.init(parameters:contentFieldName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v20 - v15;
  uint64_t v22 = a1;
  specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, &v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  int v17 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(v16, v17 ^ 1u, 1, a4);
  uint64_t v18 = v22;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  ResultParamBuilder.init(parameters:content:contentFieldName:)(v18, (uint64_t)v14, a2, a3, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
}

uint64_t ResultParamBuilder.patternParameters(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v6 = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(boxed_opaque_existential_1, a1, v6);
  id v8 = (uint64_t *)((char *)v2 + *(int *)(a2 + 32));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v13, v9, v10, isUniquelyReferenced_nonNull_native, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Any?((uint64_t)v15);
  return v5;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          int v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *unint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *specialized _NativeDictionary.updateValue(_:forKey:isUnique:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _OWORD *a5@<X8>)
{
  unint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a4 & 1) == 0)
  {
    if (v19 >= v17 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      uint64_t v20 = *v6;
      if (v18) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    double result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v6;
  if (v18)
  {
LABEL_8:
    outlined init with take of Any((_OWORD *)(v20[7] + 32 * v14), a5);
    uint64_t v21 = (_OWORD *)(v20[7] + 32 * v14);
    return outlined init with take of Any(a1, v21);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a1, v20);
  *a5 = 0u;
  a5[1] = 0u;

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t type metadata instantiation function for ResultParamBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata completion function for ResultParamBuilder()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResultParamBuilder(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  size_t v10 = v9 + 7;
  unint64_t v11 = ((v9 + 7 + ((v7 + 8) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8) + 16;
  int v12 = v7 & 0x100000;
  uint64_t v13 = *a2;
  *a1 = *a2;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    a1 = (uint64_t *)(v13 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    BOOL v16 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
    uint64_t v17 = (const void *)(((unint64_t)a2 + v8 + 8) & ~v8);
    char v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    if (v18(v17, 1, v4))
    {
      memcpy(v16, v17, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v16, v17, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v4);
    }
    uint64_t v19 = (void *)(((unint64_t)v16 + v10) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (void *)(((unint64_t)v17 + v10) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v19 = *v20;
    v19[1] = v20[1];
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ResultParamBuilder(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4)) {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ResultParamBuilder(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  size_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_bridgeObjectRetain();
  if (v9(v8, 1, v4))
  {
    int v10 = *(_DWORD *)(v5 + 84);
    size_t v11 = *(void *)(v5 + 64);
    if (v10) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v11 + 1;
    }
    memcpy(v7, v8, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    unint64_t v14 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v13 = v5 + 56;
    v14(v7, 0, 1, v4);
    int v10 = *(_DWORD *)(v13 + 28);
    size_t v11 = *(void *)(v13 + 8);
  }
  if (v10) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = v11 + 1;
  }
  BOOL v16 = (void *)(((unint64_t)v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  *BOOL v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ResultParamBuilder(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
  int v10 = (void *)(((unint64_t)a2 + v8 + 8) & ~v8);
  size_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  char v18 = (void *)(((unint64_t)v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *char v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for ResultParamBuilder(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    int v13 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v12 = v5 + 56;
    v13(v7, 0, 1, v4);
    int v9 = *(_DWORD *)(v12 + 28);
    size_t v10 = *(void *)(v12 + 8);
  }
  if (v9) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v10 + 1;
  }
  *(_OWORD *)(((unint64_t)v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for ResultParamBuilder(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  int v9 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
  size_t v10 = (void *)(((unint64_t)a2 + v8 + 8) & ~v8);
  size_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  char v18 = (void *)(((unint64_t)v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *char v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResultParamBuilder(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = 7;
  if (!v6) {
    uint64_t v10 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    unint64_t v11 = ((v10 + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    unsigned int v12 = a2 - v8;
    uint64_t v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = v12 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v11);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v11);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x3AAECLL);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v11);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *a1;
        }
        return v8 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  if ((v7 & 0x80000000) != 0)
  {
    unsigned int v21 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)a1 + v9 + 8) & ~v9);
    if (v21 >= 2) {
      return v21 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v20 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v20) = -1;
    }
    return (v20 + 1);
  }
}

void storeEnumTagSinglePayload for ResultParamBuilder(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v12 + ((v11 + 8) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((v12 + ((v11 + 8) & ~v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((v12 + ((v11 + 8) & ~v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v17 = a2 - v10;
    }
    else {
      int v17 = 1;
    }
    if (((v12 + ((v11 + 8) & ~v11) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x3AD90);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v20 = (unsigned char *)((unint64_t)&a1[v11 + 8] & ~v11);
          if (v9 >= a2)
          {
            uint64_t v24 = a2 + 1;
            uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            unint64_t v26 = (unint64_t)&a1[v11 + 8] & ~v11;
            v25(v26, v24);
          }
          else
          {
            if (v12 <= 3) {
              int v21 = ~(-1 << (8 * v12));
            }
            else {
              int v21 = -1;
            }
            if (v12)
            {
              int v22 = v21 & (~v9 + a2);
              if (v12 <= 3) {
                int v23 = v12;
              }
              else {
                int v23 = 4;
              }
              bzero(v20, v12);
              switch(v23)
              {
                case 2:
                  *(_WORD *)uint64_t v20 = v22;
                  break;
                case 3:
                  *(_WORD *)uint64_t v20 = v22;
                  v20[2] = BYTE2(v22);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v20 = v22;
                  break;
                default:
                  *uint64_t v20 = v22;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *(void *)a1 = v19;
        }
      }
      return;
  }
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  int v6 = (void *)(a5[6] + 16 * a1);
  *int v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t one-time initialization function for kFlowEntryPoints()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FlowEntryPoint>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_AB7D0;
  uint64_t v1 = type metadata accessor for SportsPersonalizationEntryPoint();
  uint64_t v2 = swift_allocObject();
  uint64_t v8 = type metadata accessor for SportsResolver();
  BOOL v9 = &protocol witness table for SportsResolver;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v7);
  SportsResolver.init()();
  outlined init with take of PatternFlowProviding(&v7, v2 + 16);
  *(void *)(v2 + 80) = &type metadata for Features;
  *(void *)(v2 + 88) = &protocol witness table for Features;
  *(unsigned char *)(v2 + 56) = 1;
  uint64_t v3 = type metadata accessor for IntentDonator();
  uint64_t v4 = swift_allocObject();
  *(void *)(v2 + 120) = v3;
  *(void *)(v2 + 128) = &protocol witness table for IntentDonator;
  *(void *)(v2 + 96) = v4;
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = &protocol witness table for SportsPersonalizationEntryPoint;
  *(void *)(v0 + 32) = v2;
  uint64_t v5 = type metadata accessor for SuggestionsEntryPoint();
  uint64_t result = swift_allocObject();
  *(void *)(v0 + 96) = v5;
  *(void *)(v0 + 104) = &protocol witness table for SuggestionsEntryPoint;
  *(void *)(v0 + 72) = result;
  *(void *)(v0 + 136) = &type metadata for InformationRoutingEntryPoint;
  *(void *)(v0 + 144) = &protocol witness table for InformationRoutingEntryPoint;
  static InformationRootFlow.kFlowEntryPoints = v0;
  return result;
}

uint64_t InformationRootFlow.__allocating_init(flowEntryPoints:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = v5 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_originalInput;
  uint64_t v7 = type metadata accessor for Input();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  v8((uint64_t)v4, 1, 1, v7);
  swift_beginAccess();
  outlined assign with take of Input?((uint64_t)v4, v6);
  swift_endAccess();
  *(void *)(v5 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_flowEntryPoints) = a1;
  return v5;
}

uint64_t InformationRootFlow.init(flowEntryPoints:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_originalInput;
  uint64_t v7 = type metadata accessor for Input();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  v8((uint64_t)v5, 1, 1, v7);
  swift_beginAccess();
  outlined assign with take of Input?((uint64_t)v5, v6);
  swift_endAccess();
  *(void *)(v1 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_flowEntryPoints) = a1;
  return v1;
}

uint64_t outlined assign with take of Input?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

BOOL InformationRootFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v36 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v37 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v35 = (char *)&v31 - v7;
  __chkstk_darwin(v6);
  BOOL v9 = (char *)&v31 - v8;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  size_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  unsigned int v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = &type metadata for Features;
  uint64_t v40 = (uint64_t (*)())lazy protocol witness table accessor for type Features and conformance Features();
  LOBYTE(aBlock[0]) = 5;
  char v20 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  if (v20)
  {
    type metadata accessor for OS_dispatch_queue();
    (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchQoS.QoSClass.userInitiated(_:), v16);
    uint64_t v21 = static OS_dispatch_queue.global(qos:)();
    uint64_t v32 = v2;
    int v22 = (void *)v21;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    uint64_t v40 = closure #1 in InformationRootFlow.on(input:);
    uint64_t v41 = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v39 = (ValueMetadata *)&block_descriptor_0;
    int v23 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter();
    unsigned __int8 v42 = &_swiftEmptyArrayStorage;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v23);

    uint64_t v2 = v32;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v33);
  }
  uint64_t v24 = v2 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_originalInput;
  swift_beginAccess();
  outlined init with copy of Input?(v24, (uint64_t)v9);
  uint64_t v25 = type metadata accessor for Input();
  uint64_t v26 = *(void *)(v25 - 8);
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v9, 1, v25);
  outlined destroy of Input?((uint64_t)v9);
  if (v27 == 1)
  {
    uint64_t v28 = (uint64_t)v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v35, v36, v25);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v25);
    uint64_t v29 = v37;
    outlined init with take of Input?(v28, v37);
    swift_beginAccess();
    outlined assign with take of Input?(v29, v24);
    swift_endAccess();
  }
  return v27 == 1;
}

unint64_t lazy protocol witness table accessor for type Features and conformance Features()
{
  unint64_t result = lazy protocol witness table cache variable for type Features and conformance Features;
  if (!lazy protocol witness table cache variable for type Features and conformance Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Features and conformance Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Features and conformance Features;
  if (!lazy protocol witness table cache variable for type Features and conformance Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Features and conformance Features);
  }
  return result;
}

uint64_t outlined init with copy of Input?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Input?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of Input?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t InformationRootFlow.execute()(uint64_t a1)
{
  v2[32] = a1;
  v2[33] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v2[34] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Input();
  v2[35] = v3;
  v2[36] = *(void *)(v3 - 8);
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  return _swift_task_switch(InformationRootFlow.execute(), 0, 0);
}

{
  uint64_t v1;
  uint64_t v3;

  *(void *)(*(void *)v1 + 360) = a1;
  swift_task_dealloc();
  return _swift_task_switch(InformationRootFlow.execute(), 0, 0);
}

uint64_t InformationRootFlow.execute()()
{
  uint64_t v46 = v0;
  uint64_t v1 = v0[35];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[33] + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_originalInput;
  swift_beginAccess();
  outlined init with copy of Input?(v4, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of Input?(v0[34]);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.information);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_0, v6, v7, "Information root flow not called as root flow", v8, 2u);
      swift_slowDealloc();
    }

    static ExecuteResponse.complete()();
LABEL_18:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v38 = (uint64_t (*)(void))v0[1];
    return v38();
  }
  (*(void (**)(void, void, void))(v0[36] + 32))(v0[38], v0[34], v0[35]);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v9 = v0[37];
  uint64_t v10 = v0[38];
  uint64_t v11 = v0[35];
  uint64_t v12 = v0[36];
  uint64_t v13 = type metadata accessor for Logger();
  v0[39] = __swift_project_value_buffer(v13, (uint64_t)static Logger.information);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v9, v10, v11);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v18 = v0[36];
  uint64_t v17 = v0[37];
  uint64_t v19 = v0[35];
  if (v16)
  {
    char v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)char v20 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Input and conformance Input, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[31] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int v23 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v23(v17, v19);
    _os_log_impl(&dword_0, v14, v15, "InformationRootFlow executing with input: %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    int v23 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v23(v0[37], v0[35]);
  }

  v0[40] = v23;
  uint64_t v24 = *(void *)(v0[33] + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_flowEntryPoints);
  v0[41] = v24;
  uint64_t v25 = *(void *)(v24 + 16);
  v0[42] = v25;
  if (!v25)
  {
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_0, v32, v33, "InformationRootFlow not sure what to do with this input", v34, 2u);
      swift_slowDealloc();
    }
    uint64_t v35 = (void (*)(uint64_t, uint64_t))v0[40];
    uint64_t v36 = v0[38];
    uint64_t v37 = v0[35];

    static ExecuteResponse.complete()();
    v35(v36, v37);
    goto LABEL_18;
  }
  v0[43] = 0;
  uint64_t v26 = v24 + 32;
  swift_bridgeObjectRetain();
  outlined init with copy of OutputPublisherAsync(v26, (uint64_t)(v0 + 7));
  outlined init with copy of OutputPublisherAsync((uint64_t)(v0 + 7), (uint64_t)(v0 + 12));
  int v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315138;
    outlined init with copy of OutputPublisherAsync((uint64_t)(v0 + 12), (uint64_t)(v0 + 22));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowEntryPoint);
    uint64_t v30 = String.init<A>(describing:)();
    *(void *)(v29 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v45);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
    _os_log_impl(&dword_0, v27, v28, "Offering parse to entry point: %s", (uint8_t *)v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  }

  uint64_t v40 = v0[10];
  uint64_t v41 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v40);
  uint64_t v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 + 8) + **(int **)(v41 + 8));
  unsigned __int8 v42 = (void *)swift_task_alloc();
  v0[44] = v42;
  *unsigned __int8 v42 = v0;
  v42[1] = InformationRootFlow.execute();
  uint64_t v43 = v0[38];
  return v44(v43, v40, v41);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  void *v32;
  uint64_t v33;

  uint64_t v32 = v0;
  uint64_t v1 = (uint64_t)(v0 + 7);
  if (v0[45])
  {
    swift_bridgeObjectRelease();
    outlined init with copy of OutputPublisherAsync((uint64_t)(v0 + 7), (uint64_t)(v0 + 17));
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      unint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136315138;
      outlined init with copy of OutputPublisherAsync((uint64_t)(v0 + 17), (uint64_t)(v0 + 2));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowEntryPoint);
      uint64_t v5 = String.init<A>(describing:)();
      v0[30] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v1 = (uint64_t)(v0 + 7);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 17));
      _os_log_impl(&dword_0, v2, v3, "Using entry point: %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 17));
    }

    os_log_type_t v15 = (void (*)(uint64_t, uint64_t))v0[40];
    BOOL v16 = v0[38];
    uint64_t v17 = v0[35];
    static ExecuteResponse.complete(next:)();
    swift_release();
    v15(v16, v17);
    __swift_destroy_boxed_opaque_existential_1(v1);
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  os_log_type_t v7 = v0[42];
  uint64_t v8 = v0[43] + 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  if (v8 == v7)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_0, v9, v10, "InformationRootFlow not sure what to do with this input", v11, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[40];
    uint64_t v13 = v0[38];
    uint64_t v14 = v0[35];

    static ExecuteResponse.complete()();
    v12(v13, v14);
    goto LABEL_10;
  }
  char v20 = v0[43] + 1;
  v0[43] = v20;
  outlined init with copy of OutputPublisherAsync(v0[41] + 40 * v20 + 32, (uint64_t)(v0 + 7));
  outlined init with copy of OutputPublisherAsync((uint64_t)(v0 + 7), (uint64_t)(v0 + 12));
  uint64_t v21 = Logger.logObject.getter();
  unint64_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    int v23 = swift_slowAlloc();
    unint64_t v31 = swift_slowAlloc();
    *(_DWORD *)int v23 = 136315138;
    outlined init with copy of OutputPublisherAsync((uint64_t)(v0 + 12), (uint64_t)(v0 + 22));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowEntryPoint);
    uint64_t v24 = String.init<A>(describing:)();
    *(void *)(v23 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v31);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
    _os_log_impl(&dword_0, v21, v22, "Offering parse to entry point: %s", (uint8_t *)v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  }

  uint64_t v26 = v0[10];
  int v27 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v26);
  uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 + 8) + **(int **)(v27 + 8));
  os_log_type_t v28 = (void *)swift_task_alloc();
  v0[44] = v28;
  *os_log_type_t v28 = v0;
  v28[1] = InformationRootFlow.execute();
  uint64_t v29 = v0[38];
  return v30(v29, v26, v27);
}

uint64_t InformationRootFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t InformationRootFlow.deinit()
{
  outlined destroy of Input?(v0 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_originalInput);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t InformationRootFlow.__deallocating_deinit()
{
  outlined destroy of Input?(v0 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_originalInput);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t protocol witness for Flow.on(input:) in conformance InformationRootFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance InformationRootFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for Flow.execute() in conformance InformationRootFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 136) + **(int **)(**(void **)v1 + 136));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance InformationRootFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for InformationRootFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t type metadata accessor for InformationRootFlow()
{
  uint64_t result = type metadata singleton initialization cache for InformationRootFlow;
  if (!type metadata singleton initialization cache for InformationRootFlow) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ObjC metadata update function for InformationRootFlow()
{
  return type metadata accessor for InformationRootFlow();
}

void type metadata completion function for InformationRootFlow()
{
  type metadata accessor for Input?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for Input?()
{
  if (!lazy cache variable for type metadata for Input?)
  {
    type metadata accessor for Input();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Input?);
    }
  }
}

void SportsProperty.apply(to:)(void **a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 1:
      uint64_t v4 = *a1;
      NSString v5 = String._bridgeToObjectiveC()();
      uint64_t v6 = "setTeamQId:";
      break;
    case 2:
      uint64_t v4 = *a1;
      NSString v5 = String._bridgeToObjectiveC()();
      uint64_t v6 = "setLeagueName:";
      break;
    case 3:
      uint64_t v4 = *a1;
      NSString v5 = String._bridgeToObjectiveC()();
      uint64_t v6 = "setLeagueQId:";
      break;
    case 4:
      uint64_t v4 = *a1;
      NSString v5 = String._bridgeToObjectiveC()();
      uint64_t v6 = "setSportName:";
      break;
    case 5:
      uint64_t v4 = *a1;
      NSString v5 = String._bridgeToObjectiveC()();
      uint64_t v6 = "setSportQId:";
      break;
    case 6:
      uint64_t v4 = *a1;
      NSString v5 = String._bridgeToObjectiveC()();
      uint64_t v6 = "setAthleteName:";
      break;
    case 7:
      uint64_t v4 = *a1;
      NSString v5 = String._bridgeToObjectiveC()();
      uint64_t v6 = "setAthleteQId:";
      break;
    default:
      uint64_t v4 = *a1;
      NSString v5 = String._bridgeToObjectiveC()();
      uint64_t v6 = "setTeamName:";
      break;
  }
  id v7 = v5;
  [v4 v6];
}

uint64_t specialized Parse.DirectInvocation.get<A>(protoMessage:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Parse.DirectInvocation.get<A>(protoMessage:)(a1, a2, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context, &lazy protocol witness table cache variable for type Apple_Parsec_Responseframework_Engagement_Context and conformance Apple_Parsec_Responseframework_Engagement_Context, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context, a3);
}

{
  return specialized Parse.DirectInvocation.get<A>(protoMessage:)(a1, a2, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Search_PegasusQueryContext, &lazy protocol witness table cache variable for type Apple_Parsec_Search_PegasusQueryContext and conformance Apple_Parsec_Search_PegasusQueryContext, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Search_PegasusQueryContext, a3);
}

uint64_t specialized Parse.DirectInvocation.get<A>(protoMessage:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, unint64_t *a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = Parse.DirectInvocation.userData.getter();
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t v14 = v13;
  if (!*(void *)(v13 + 16))
  {
    long long v29 = 0u;
    long long v30 = 0u;
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v16 & 1) == 0)
  {
    long long v29 = 0u;
    long long v30 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of Any(*(void *)(v14 + 56) + 32 * v15, (uint64_t)&v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v30 + 1))
  {
LABEL_10:
    outlined destroy of Any?((uint64_t)&v29, &demangling cache variable for type metadata for Any?);
    goto LABEL_11;
  }
  if (swift_dynamicCast())
  {
    uint64_t v18 = v32;
    unint64_t v17 = v33;
    uint64_t v19 = a3(0);
    uint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    outlined copy of Data._Representation(v18, v17);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type TapEngagementHandlingFlow and conformance TapEngagementHandlingFlow(a4, a5);
    Message.init(serializedData:extensions:partial:options:)();
    outlined consume of Data._Representation(v18, v17);
    uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
    uint64_t v26 = a6;
    uint64_t v27 = 0;
    uint64_t v28 = v19;
    return v25(v26, v27, 1, v28);
  }
LABEL_11:
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    int v23 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v29 = swift_slowAlloc();
    *(_DWORD *)int v23 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v21, v22, "Parse.DirectInvocation: No '%s' key found in DI Payload.", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v28 = a3(0);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
  uint64_t v26 = a6;
  uint64_t v27 = 1;
  return v25(v26, v27, 1, v28);
}

uint64_t TapEngagementHandlingFlow.__allocating_init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  int v23 = a2;
  uint64_t v7 = swift_allocObject();
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1(a3, v9);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  uint64_t v15 = *(void *)(a4 + 24);
  uint64_t v14 = *(void *)(a4 + 32);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1(a4, v15);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  uint64_t v20 = specialized TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)(a1, v23, (uint64_t)v12, (uint64_t)v18, v7, v9, v15, v8, v14);
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v20;
}

uint64_t TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1(a3, v9);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  uint64_t v15 = *(void *)(a4 + 24);
  uint64_t v14 = *(void *)(a4 + 32);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1(a4, v15);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  uint64_t v20 = specialized TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)(a1, a2, (uint64_t)v12, (uint64_t)v18, v22[1], v9, v15, v8, v14);
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v20;
}

uint64_t TapEngagementHandlingFlow.execute()(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(TapEngagementHandlingFlow.execute(), 0, 0);
}

uint64_t TapEngagementHandlingFlow.execute()()
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "TapEngagementHandlingFlow: Processing Async Request in Execute method", v4, 2u);
    swift_slowDealloc();
  }

  static ExecuteResponse.complete()();
  NSString v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t TapEngagementHandlingFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t TapEngagementHandlingFlow.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_engagementContext;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pegasusContext;
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(Context - 8) + 8))(v3, Context);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_outputPublisherAsync);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pommesEngagement);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_patternExecutor);
  return v0;
}

uint64_t TapEngagementHandlingFlow.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_engagementContext;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pegasusContext;
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(Context - 8) + 8))(v3, Context);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_outputPublisherAsync);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pommesEngagement);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_patternExecutor);
  uint64_t v5 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v6 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v5, v6);
}

uint64_t protocol witness for Flow.on(input:) in conformance TapEngagementHandlingFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance TapEngagementHandlingFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t protocol witness for Flow.execute() in conformance TapEngagementHandlingFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 136) + **(int **)(**(void **)v1 + 136));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance TapEngagementHandlingFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for TapEngagementHandlingFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t specialized TapEngagementHandlingFlow.init(invocation:outputPublisherAsync:pommesEngagement:patternExecutor:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v49 = a5;
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_PegasusQueryContext?);
  __chkstk_darwin(v14 - 8);
  uint64_t v47 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v46 = *(void *)(Context - 8);
  __chkstk_darwin(Context);
  uint64_t v45 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Responseframework_Engagement_Context?);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  int v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = a6;
  uint64_t v57 = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_1, a3, a6);
  uint64_t v53 = a7;
  uint64_t v54 = a9;
  uint64_t v25 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v52);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(v25, a4, a7);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.information);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    long long v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v29 = 0;
    _os_log_impl(&dword_0, v27, v28, "TapEngagementHandlingFlow: Received Direct invocation", v29, 2u);
    swift_slowDealloc();
  }

  uint64_t v30 = v50;
  specialized Parse.DirectInvocation.get<A>(protoMessage:)(0xD000000000000011, 0x80000000000AE240, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context, &lazy protocol witness table cache variable for type Apple_Parsec_Responseframework_Engagement_Context and conformance Apple_Parsec_Responseframework_Engagement_Context, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    uint64_t v31 = &demangling cache variable for type metadata for Apple_Parsec_Responseframework_Engagement_Context?;
  }
  else
  {
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v32(v23, v19, v20);
    uint64_t v19 = v47;
    specialized Parse.DirectInvocation.get<A>(protoMessage:)(0x4373757361676570, 0xEE00747865746E6FLL, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Search_PegasusQueryContext, &lazy protocol witness table cache variable for type Apple_Parsec_Search_PegasusQueryContext and conformance Apple_Parsec_Search_PegasusQueryContext, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Search_PegasusQueryContext, (uint64_t)v47);
    uint64_t v33 = v46;
    uint64_t v34 = Context;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v19, 1, Context) != 1)
    {
      uint64_t v40 = type metadata accessor for Parse.DirectInvocation();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v30, v40);
      uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      unsigned __int8 v42 = v45;
      v41(v45, v19, v34);
      uint64_t v39 = v49;
      v32((char *)(v49 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_engagementContext), v23, v20);
      v41((char *)(v39 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pegasusContext), v42, v34);
      outlined init with take of PatternFlowProviding(v51, v39 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_outputPublisherAsync);
      outlined init with take of PatternFlowProviding(&v55, v39 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_pommesEngagement);
      outlined init with take of PatternFlowProviding(&v52, v39 + OBJC_IVAR____TtC21InformationFlowPlugin25TapEngagementHandlingFlow_patternExecutor);
      return v39;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    uint64_t v31 = &demangling cache variable for type metadata for Apple_Parsec_Search_PegasusQueryContext?;
  }
  outlined destroy of Any?((uint64_t)v19, v31);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl(&dword_0, v35, v36, "TapEngagementHandlingFlow: Unable to retrieve EngagementContext from DI Payload.", v37, 2u);
    swift_slowDealloc();
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  uint64_t v38 = type metadata accessor for Parse.DirectInvocation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v30, v38);
  type metadata accessor for TapEngagementHandlingFlow();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t type metadata accessor for TapEngagementHandlingFlow()
{
  uint64_t result = type metadata singleton initialization cache for TapEngagementHandlingFlow;
  if (!type metadata singleton initialization cache for TapEngagementHandlingFlow) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ObjC metadata update function for TapEngagementHandlingFlow()
{
  return type metadata accessor for TapEngagementHandlingFlow();
}

uint64_t type metadata completion function for TapEngagementHandlingFlow()
{
  uint64_t result = type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TapEngagementHandlingFlow and conformance TapEngagementHandlingFlow(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:) + async function pointer to specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:));
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v10 + 16) = v18;
  *uint64_t v18 = v10;
  v18[1] = ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[63] = v10;
  v8[64] = v11;
  v8[61] = a7;
  v8[62] = a8;
  v8[59] = a5;
  v8[60] = a6;
  v8[57] = a3;
  v8[58] = a4;
  v8[55] = a1;
  v8[56] = a2;
  return _swift_task_switch(specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:), 0, 0);
}

uint64_t specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)()
{
  uint64_t v31 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[56];
  if (v4)
  {
    uint64_t v6 = v0[55];
    uint64_t v7 = swift_slowAlloc();
    *(void *)&long long v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain();
    v0[53] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, (uint64_t *)&v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v8 = Dictionary.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    v0[54] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, (uint64_t *)&v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v2, v3, "DetailedResultFlowFactory.makeDetailedResultFlow called with %s : %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v11 = v0[63];
  uint64_t v12 = v0[61];
  uint64_t v13 = v0[62];
  unint64_t v26 = v0[60];
  uint64_t v14 = v0[57];
  uint64_t v24 = (void *)v0[58];
  uint64_t v25 = v0[59];
  uint64_t v15 = v0[56];
  uint64_t v27 = v0[55];
  static PatternFlowProvidingHelper.unwrap(_:with:)(v0[64], v12, v0 + 33);
  outlined init with copy of OutputPublisherAsync(v12, (uint64_t)(v0 + 38));
  outlined init with copy of OutputPublisherAsync(v11, (uint64_t)(v0 + 43));
  outlined init with copy of OutputPublisherAsync((uint64_t)(v0 + 33), (uint64_t)(v0 + 48));
  uint64_t v16 = type metadata accessor for PatternExecutor();
  uint64_t v17 = swift_allocObject();
  uint64_t v29 = v16;
  uint64_t v30 = &protocol witness table for PatternExecutor;
  *(void *)&long long v28 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v18 = v24;
  outlined copy of Data?(v25, v26);
  swift_retain();
  DetailedResultProvider.init(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:informationViewFactory:patternFlowProvider:patternExecutor:)(v27, v15, v14, (uint64_t)v18, v25, v26, (uint64_t)(v0 + 38), (uint64_t)(v0 + 43), (uint64_t)(v0 + 2), v13, (uint64_t)(v0 + 48), &v28);
  uint64_t v19 = v0[36];
  uint64_t v20 = v0[37];
  __swift_project_boxed_opaque_existential_1(v0 + 33, v19);
  uint64_t v21 = (void *)swift_task_alloc();
  v0[65] = (uint64_t)v21;
  unint64_t v22 = lazy protocol witness table accessor for type DetailedResultProvider and conformance DetailedResultProvider();
  *uint64_t v21 = v0;
  v21[1] = specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  return dispatch thunk of PatternFlowProviding.makeDetailedResultFlow<A>(provider:)(v0 + 2, &type metadata for DetailedResultProvider, v22, v19, v20);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  outlined destroy of DetailedResultProvider(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 264);
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 536);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of DetailedResultProvider(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 264);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 528) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  }
  else
  {
    *(void *)(v4 + 536) = a1;
    unint64_t v5 = specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  }
  return _swift_task_switch(v5, 0, 0);
}

ValueMetadata *type metadata accessor for DetailedResultFlowFactory()
{
  return &type metadata for DetailedResultFlowFactory;
}

unint64_t lazy protocol witness table accessor for type DetailedResultProvider and conformance DetailedResultProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider;
  if (!lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider;
  if (!lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider;
  if (!lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DetailedResultProvider and conformance DetailedResultProvider);
  }
  return result;
}

uint64_t outlined destroy of DetailedResultProvider(uint64_t a1)
{
  return a1;
}

uint64_t static ResultSetFlowFactory.makeResultSetFlow(settings:patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 128) = v11;
  *(_OWORD *)(v8 + 112) = v10;
  *(void *)(v8 + 96) = a7;
  *(void *)(v8 + 104) = a8;
  *(void *)(v8 + 80) = a5;
  *(void *)(v8 + 88) = a6;
  *(void *)(v8 + 64) = a3;
  *(void *)(v8 + 72) = a4;
  *(void *)(v8 + 56) = a2;
  return _swift_task_switch(static ResultSetFlowFactory.makeResultSetFlow(settings:patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:), 0, 0);
}

void static ResultSetFlowFactory.makeResultSetFlow(settings:patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)()
{
  static PatternFlowProvidingHelper.unwrap(_:with:)(v0[16], v0[13], v0 + 2);
  unint64_t v2 = (char *)&async function pointer to specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)
     + async function pointer to specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[17] = (uint64_t)v1;
  void *v1 = v0;
  v1[1] = static ResultSetFlowFactory.makeResultSetFlow(settings:patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  __asm { BR              X8; specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:) }
}

uint64_t static ResultSetFlowFactory.makeResultSetFlow(settings:patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)(uint64_t a1)
{
  uint64_t v4 = *v2 + 16;
  uint64_t v5 = *v2;
  *(void *)(v5 + 144) = v1;
  swift_task_dealloc();
  outlined destroy of PatternFlowProviding?(v4);
  if (v1)
  {
    return _swift_task_switch(static ResultSetFlowFactory.makeResultSetFlow(settings:patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:), 0, 0);
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v6(a1);
  }
}

uint64_t static ResultSetFlowFactory.makeResultSetFlow(settings:patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:) + async function pointer to specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:));
  id v18 = (void *)swift_task_alloc();
  *(void *)(v10 + 16) = v18;
  *id v18 = v10;
  v18[1] = ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[103] = v11;
  v8[102] = v10;
  v8[101] = a8;
  v8[100] = a7;
  v8[99] = a6;
  v8[98] = a5;
  v8[97] = a4;
  v8[96] = a3;
  v8[95] = a2;
  v8[94] = a1;
  return _swift_task_switch(specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:), 0, 0);
}

uint64_t specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)()
{
  uint64_t v39 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 760);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 752);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 736) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v8 = Dictionary.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 744) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v2, v3, "ResultSetFlowFactory.makeRenderPatternFlow called with %s : %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v11 = *(void *)(v0 + 816);
  uint64_t v12 = *(void *)(v0 + 800);
  unint64_t v36 = *(void *)(v0 + 792);
  uint64_t v37 = *(void *)(v0 + 808);
  uint64_t v34 = *(void **)(v0 + 776);
  uint64_t v35 = *(void *)(v0 + 784);
  uint64_t v13 = *(void *)(v0 + 768);
  uint64_t v14 = *(void *)(v0 + 760);
  uint64_t v15 = *(void *)(v0 + 752);
  static PatternFlowProvidingHelper.unwrap(_:with:)(*(void *)(v0 + 824), v12, (uint64_t *)(v0 + 656));
  outlined init with copy of OutputPublisherAsync(v12, v0 + 496);
  outlined init with copy of OutputPublisherAsync(v11, v0 + 536);
  outlined init with copy of OutputPublisherAsync(v0 + 656, v0 + 576);
  uint64_t v16 = type metadata accessor for PatternExecutor();
  uint64_t v17 = swift_allocObject();
  *(void *)(v0 + 640) = v16;
  *(void *)(v0 + 648) = &protocol witness table for PatternExecutor;
  *(void *)(v0 + 616) = v17;
  *(void *)(v0 + 240) = v15;
  *(void *)(v0 + 248) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v18 = v34;
  outlined copy of Data?(v35, v36);
  swift_retain();
  *(void *)(v0 + 16) = specialized GenericResultSetParamBuilder.init(parameters:)(v13);
  *(void *)(v0 + 24) = v19;
  *(void *)(v0 + 32) = v20;
  *(void *)(v0 + 40) = v21;
  *(void *)(v0 + 232) = v18;
  *(void *)(v0 + 128) = v35;
  *(void *)(v0 + 136) = v36;
  outlined init with copy of OutputPublisherAsync(v0 + 496, v0 + 48);
  outlined init with copy of OutputPublisherAsync(v0 + 536, v0 + 88);
  static PatternFlowProvidingHelper.unwrap(_:with:)(v0 + 576, v0 + 496, (uint64_t *)(v0 + 696));
  outlined destroy of PatternFlowProviding?(v0 + 576);
  __swift_destroy_boxed_opaque_existential_1(v0 + 536);
  __swift_destroy_boxed_opaque_existential_1(v0 + 496);
  outlined init with take of PatternFlowProviding((long long *)(v0 + 696), v0 + 144);
  *(void *)(v0 + 184) = v37;
  outlined init with take of PatternFlowProviding((long long *)(v0 + 616), v0 + 192);
  long long v22 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 464) = v22;
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 240);
  long long v23 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 400) = v23;
  long long v24 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 432) = v24;
  long long v25 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 320) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 336) = v25;
  long long v26 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 352) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 368) = v26;
  long long v27 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 256) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 272) = v27;
  long long v28 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 304) = v28;
  uint64_t v29 = *(void *)(v0 + 680);
  uint64_t v30 = *(void *)(v0 + 688);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 656), v29);
  uint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 832) = v31;
  unint64_t v32 = lazy protocol witness table accessor for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider();
  *uint64_t v31 = v0;
  v31[1] = specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  return dispatch thunk of PatternFlowProviding.makeResultSetFlow<A>(provider:)(v0 + 256, &type metadata for ContinuationResultSetFlowProvider, v32, v29, v30);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  outlined destroy of ContinuationResultSetFlowProvider(v0 + 256);
  __swift_destroy_boxed_opaque_existential_1(v0 + 656);
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 848);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of ContinuationResultSetFlowProvider(v0 + 256);
  __swift_destroy_boxed_opaque_existential_1(v0 + 656);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 840) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  }
  else
  {
    *(void *)(v4 + 848) = a1;
    unint64_t v5 = specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
  }
  return _swift_task_switch(v5, 0, 0);
}

ValueMetadata *type metadata accessor for ResultSetFlowFactory()
{
  return &type metadata for ResultSetFlowFactory;
}

unint64_t lazy protocol witness table accessor for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider;
  if (!lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider;
  if (!lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider;
  if (!lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider);
  }
  return result;
}

uint64_t outlined destroy of ContinuationResultSetFlowProvider(uint64_t a1)
{
  return a1;
}

uint64_t InformationFlowPlugin.findFlowForX(parse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  __chkstk_darwin(v3 - 8);
  uint64_t v37 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for USOParse();
  uint64_t v5 = *(void *)(v36 - 8);
  uint64_t v6 = __chkstk_darwin(v36);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v32 - v9;
  uint64_t v11 = type metadata accessor for Parse();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.information);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v39 = v11;
  if (v18)
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v35 = v5;
    v41[0] = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v21 = _typeName(_:qualified:)();
    uint64_t v34 = v10;
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v41);
    uint64_t v33 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x80000000000AF150, v41);
    uint64_t v8 = v33;
    unint64_t v10 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v16, v17, "%s %s called", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    uint64_t v5 = v35;
    swift_slowDealloc();
    uint64_t v11 = v39;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v14, v11) == enum case for Parse.uso(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
    long long v23 = v14;
    uint64_t v24 = v36;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v23, v36);
    type metadata accessor for SearchFlow(0);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v24);
    v41[0] = SearchFlow.__allocating_init(parse:)((uint64_t)v8);
    lazy protocol witness table accessor for type InformationRootFlow and conformance InformationRootFlow(&lazy protocol witness table cache variable for type SearchFlow and conformance SearchFlow, 255, (void (*)(uint64_t))type metadata accessor for SearchFlow);
    Flow.eraseToAnyFlow()();
    swift_release();
    static FlowSearchResult.flow(_:)();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v24);
  }
  else
  {
    if (one-time initialization token for kFlowEntryPoints != -1) {
      swift_once();
    }
    uint64_t v26 = static InformationRootFlow.kFlowEntryPoints;
    type metadata accessor for InformationRootFlow();
    uint64_t v27 = swift_allocObject();
    uint64_t v28 = v27 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_originalInput;
    uint64_t v29 = type metadata accessor for Input();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56);
    v30(v28, 1, 1, v29);
    uint64_t v31 = (uint64_t)v37;
    v30((uint64_t)v37, 1, 1, v29);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    outlined assign with take of Input?(v31, v28);
    swift_endAccess();
    *(void *)(v27 + OBJC_IVAR____TtC21InformationFlowPlugin19InformationRootFlow_flowEntryPoints) = v26;
    v41[0] = v27;
    lazy protocol witness table accessor for type InformationRootFlow and conformance InformationRootFlow(&lazy protocol witness table cache variable for type InformationRootFlow and conformance InformationRootFlow, 255, (void (*)(uint64_t))type metadata accessor for InformationRootFlow);
    Flow.eraseToAnyFlow()();
    swift_release();
    static FlowSearchResult.flow(_:)();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v39);
  }
}

uint64_t protocol witness for FlowPluginExtended.findFlowForX(parse:) in conformance InformationFlowPlugin()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t protocol witness for FlowPlugin.init() in conformance InformationFlowPlugin@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 80))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for FlowPlugin.makeFlowFrame(parse:) in conformance InformationFlowPlugin()
{
  return FlowPlugin.makeFlowFrame(parse:)();
}

uint64_t protocol witness for FlowPlugin.makeFlowFor(parse:) in conformance InformationFlowPlugin()
{
  return FlowPlugin.makeFlowFor(parse:)();
}

uint64_t protocol witness for FlowPlugin.findFlowFor(parse:) in conformance InformationFlowPlugin()
{
  return FlowPlugin.findFlowFor(parse:)();
}

uint64_t base witness table accessor for FlowPlugin in InformationFlowPlugin(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type InformationRootFlow and conformance InformationRootFlow(&lazy protocol witness table cache variable for type InformationFlowPlugin and conformance InformationFlowPlugin, a2, (void (*)(uint64_t))type metadata accessor for InformationFlowPlugin);
}

uint64_t lazy protocol witness table accessor for type InformationRootFlow and conformance InformationRootFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for InformationFlowPlugin()
{
  return self;
}

uint64_t SuggestionsEntryPoint.flowFor(input:)(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams();
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  v2[20] = v4;
  v2[21] = *(void *)(v4 - 8);
  v2[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  v2[23] = v5;
  v2[24] = *(void *)(v5 - 8);
  v2[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v2[26] = v6;
  v2[27] = *(void *)(v6 - 8);
  v2[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  v2[29] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
  v2[30] = v7;
  v2[31] = *(void *)(v7 - 8);
  v2[32] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Parse();
  v2[33] = v8;
  v2[34] = *(void *)(v8 - 8);
  v2[35] = swift_task_alloc();
  return _swift_task_switch(SuggestionsEntryPoint.flowFor(input:), 0, 0);
}

uint64_t SuggestionsEntryPoint.flowFor(input:)()
{
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 264);
  Input.parse.getter();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  unint64_t v5 = *(void *)(v0 + 272);
  uint64_t v6 = *(void ***)(v0 + 280);
  uint64_t v7 = *(void *)(v0 + 264);
  if (v4 != enum case for Parse.pommesResponse(_:))
  {
LABEL_25:
    (*(void (**)(void **, uint64_t))(v5 + 8))(v6, v7);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.information);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_0, v41, v42, "Received a non-POMMES Response, not donating to Siri Suggestions.", v43, 2u);
      swift_slowDealloc();
    }
    goto LABEL_62;
  }
  (*(void (**)(void, uint64_t))(v5 + 96))(*(void *)(v0 + 280), v7);
  uint64_t v8 = *v6;
  *(void *)(v0 + 288) = *v6;
  *(void *)(v0 + 296) = PommesResponse.requestId.getter();
  *(void *)(v0 + 304) = v9;
  if (!v9)
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.information);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v41, v45)) {
      goto LABEL_61;
    }
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v46 = 0;
    uint64_t v47 = "No requestId on POMMES Response, not donating to Siri Suggestions.";
    goto LABEL_60;
  }
  unint64_t v10 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v11 = v10;
  if (!(v10 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_5;
    }
LABEL_56:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_57:
    if (one-time initialization token for information == -1)
    {
LABEL_58:
      uint64_t v81 = type metadata accessor for Logger();
      __swift_project_value_buffer(v81, (uint64_t)static Logger.information);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v41, v45))
      {
LABEL_61:

LABEL_62:
        goto LABEL_63;
      }
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      uint64_t v47 = "No experiences found on POMMES Response, not donating to Siri Suggestions.";
LABEL_60:
      _os_log_impl(&dword_0, v41, v45, v47, v46, 2u);
      swift_slowDealloc();
      goto LABEL_61;
    }
LABEL_68:
    swift_once();
    goto LABEL_58;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_56;
  }
LABEL_5:
  if ((v11 & 0xC000000000000001) != 0)
  {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
      goto LABEL_68;
    }
    id v12 = *(id *)(v11 + 32);
  }
  uint64_t v13 = v12;
  *(void *)(v0 + 312) = v12;
  swift_bridgeObjectRelease();
  type metadata accessor for GenericExperience();
  uint64_t v14 = swift_dynamicCastClass();
  if (!v14)
  {
    swift_bridgeObjectRelease();

    goto LABEL_57;
  }
  uint64_t v6 = (void **)v14;
  uint64_t v15 = *(void *)(v0 + 240);
  uint64_t v16 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 232);
  dispatch thunk of GenericExperience.serverSuggestions.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v15) == 1)
  {
    outlined destroy of Any?(*(void *)(v0 + 232), &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
    *(void *)(v0 + 40) = &type metadata for Features;
    *(void *)(v0 + 48) = lazy protocol witness table accessor for type Features and conformance Features();
    *(unsigned char *)(v0 + 16) = 2;
    char v18 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    if ((v18 & 1) == 0)
    {

      swift_bridgeObjectRelease();
LABEL_63:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v82 = *(uint64_t (**)(void))(v0 + 8);
      return v82(0);
    }
    uint64_t v19 = GenericExperience.components.getter();
    *(void *)(v0 + 352) = v19;
    uint64_t v20 = *(void *)(v19 + 16);
    *(void *)(v0 + 360) = v20;
    if (!v20)
    {
LABEL_54:
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      goto LABEL_63;
    }
    *(_DWORD *)(v0 + 440) = *(_DWORD *)(*(void *)(v0 + 216) + 80);
    *(_DWORD *)(v0 + 444) = enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showMapPoints(_:);
    *(void *)(v0 + 368) = 0;
    unint64_t v5 = *(void *)(v19 + 16);
    if (v5)
    {
      unint64_t v5 = 0;
      while (1)
      {
        uint64_t v21 = *(void *)(v0 + 200);
        uint64_t v22 = *(void *)(v0 + 184);
        uint64_t v23 = *(void *)(v0 + 192);
        (*(void (**)(void, unint64_t, void))(*(void *)(v0 + 216) + 16))(*(void *)(v0 + 224), v19+ ((*(unsigned __int8 *)(v0 + 440) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 440))+ *(void *)(*(void *)(v0 + 216) + 72) * v5, *(void *)(v0 + 208));
        Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter();
        uint64_t v24 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
        *(void *)(v0 + 376) = v24;
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
        uint64_t v25 = *(void *)(v24 + 16);
        *(void *)(v0 + 384) = v25;
        if (v25)
        {
          uint64_t v26 = 0;
          uint64_t v27 = *(void *)(v0 + 168);
          int v28 = *(_DWORD *)(v27 + 80);
          *(_DWORD *)(v0 + 448) = v28;
          uint64_t v29 = *(void *)(v27 + 72);
          *(void *)(v0 + 392) = v29;
          uint64_t v30 = *(void (**)(void, unint64_t, void))(v27 + 16);
          *(void *)(v0 + 400) = v30;
          while (1)
          {
            *(void *)(v0 + 408) = v26;
            uint64_t v31 = *(void *)(v0 + 152);
            v30(*(void *)(v0 + 176), *(void *)(v0 + 376)+ ((v28 + 32) & ~(unint64_t)v28)+ v29 * v26, *(void *)(v0 + 160));
            Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
            uint64_t v32 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
            uint64_t v33 = *(void *)(v32 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
            {
              (*(void (**)(void, void))(*(void *)(v0 + 168) + 8))(*(void *)(v0 + 176), *(void *)(v0 + 160));
            }
            else
            {
              int v34 = *(_DWORD *)(v0 + 444);
              uint64_t v35 = *(void *)(v0 + 144);
              outlined init with copy of Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?(*(void *)(v0 + 152), v35);
              if ((*(unsigned int (**)(uint64_t, uint64_t))(v33 + 88))(v35, v32) == v34)
              {
                uint64_t v70 = *(void *)(v0 + 136);
                uint64_t v69 = *(void *)(v0 + 144);
                uint64_t v71 = *(void *)(v0 + 120);
                uint64_t v72 = *(void *)(v0 + 128);
                (*(void (**)(uint64_t, uint64_t))(v33 + 96))(v69, v32);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 32))(v70, v69, v71);
                if (one-time initialization token for information != -1) {
                  swift_once();
                }
                uint64_t v73 = type metadata accessor for Logger();
                *(void *)(v0 + 416) = __swift_project_value_buffer(v73, (uint64_t)static Logger.information);
                uint64_t v74 = Logger.logObject.getter();
                os_log_type_t v75 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v74, v75))
                {
                  uint64_t v76 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v76 = 0;
                  _os_log_impl(&dword_0, v74, v75, "Donating Geo Intent to Siri Suggestions", v76, 2u);
                  swift_slowDealloc();
                }
                uint64_t v77 = *(void *)(v0 + 304);

                uint64_t v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)
                                                                        + async function pointer to specialized static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:));
                char v78 = (void *)swift_task_alloc();
                *(void *)(v0 + 424) = v78;
                *char v78 = v0;
                v78[1] = SuggestionsEntryPoint.flowFor(input:);
                uint64_t v79 = *(void *)(v0 + 296);
                uint64_t v80 = *(void *)(v0 + 136);
                return v84(v80, v79, v77);
              }
              uint64_t v36 = *(void *)(v0 + 144);
              (*(void (**)(void, void))(*(void *)(v0 + 168) + 8))(*(void *)(v0 + 176), *(void *)(v0 + 160));
              (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v32);
            }
            uint64_t v37 = *(void *)(v0 + 384);
            uint64_t v38 = *(void *)(v0 + 408) + 1;
            outlined destroy of Any?(*(void *)(v0 + 152), &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
            if (v38 == v37) {
              break;
            }
            uint64_t v30 = *(void (**)(void, unint64_t, void))(v0 + 400);
            uint64_t v26 = *(void *)(v0 + 408) + 1;
            uint64_t v29 = *(void *)(v0 + 392);
            LOBYTE(v28) = *(unsigned char *)(v0 + 448);
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v6 = *(void ***)(v0 + 360);
        uint64_t v39 = *(void *)(v0 + 368) + 1;
        (*(void (**)(void, void))(*(void *)(v0 + 216) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 208));
        if ((void **)v39 == v6) {
          break;
        }
        unint64_t v5 = *(void *)(v0 + 368) + 1;
        *(void *)(v0 + 368) = v5;
        uint64_t v19 = *(void *)(v0 + 352);
        if (v5 >= *(void *)(v19 + 16)) {
          goto LABEL_24;
        }
      }
      uint64_t v13 = *(void **)(v0 + 312);
      goto LABEL_54;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v49 = *(void *)(v0 + 248);
  uint64_t v48 = *(void *)(v0 + 256);
  uint64_t v51 = *(void *)(v0 + 232);
  uint64_t v50 = *(void *)(v0 + 240);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v48, v51, v50);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v52 = type metadata accessor for Logger();
  __swift_project_value_buffer(v52, (uint64_t)static Logger.information);
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    long long v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v55 = 0;
    _os_log_impl(&dword_0, v53, v54, "Suggestions found on POMMES Response, trying donation to Siri Suggestions.", v55, 2u);
    swift_slowDealloc();
  }

  static AceService.currentAsync.getter();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), *(void *)(v0 + 80));
  uint64_t started = dispatch thunk of AceServiceInvokerAsync.currentStartRequestId()();
  uint64_t v58 = v57;
  *(void *)(v0 + 320) = v57;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  if (!v58)
  {
    int64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v63, v64))
    {
      int v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v65 = 0;
      _os_log_impl(&dword_0, v63, v64, "No root requestId found, not donating to Siri Suggestions.", v65, 2u);
      swift_slowDealloc();
    }
    uint64_t v67 = *(void *)(v0 + 248);
    uint64_t v66 = *(void *)(v0 + 256);
    uint64_t v68 = *(void *)(v0 + 240);

    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
    goto LABEL_63;
  }
  uint64_t v59 = *(void *)(v0 + 112);
  *(void *)(v0 + 328) = started;
  unint64_t v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v59 + 96)
                                                          + **(int **)(*(void *)v59 + 96));
  uint64_t v60 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v60;
  *uint64_t v60 = v0;
  v60[1] = SuggestionsEntryPoint.flowFor(input:);
  uint64_t v61 = *(void *)(v0 + 256);
  return v83(v61, started, v58);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void *)(*v0 + 320);
  uint64_t v3 = *(void *)(*v0 + 112);
  int v4 = *v0;
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 88)
                                                         + **(int **)(*(void *)v3 + 88));
  unint64_t v5 = (void *)swift_task_alloc();
  v1[43] = v5;
  *unint64_t v5 = v4;
  v5[1] = SuggestionsEntryPoint.flowFor(input:);
  uint64_t v6 = v1[41];
  uint64_t v7 = v1[32];
  return v9(v7, v6, v2);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(SuggestionsEntryPoint.flowFor(input:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  int v4 = *(void *)(v0 + 240);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5(0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 432) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = SuggestionsEntryPoint.flowFor(input:);
  }
  else
  {
    uint64_t v2 = SuggestionsEntryPoint.flowFor(input:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void, unint64_t, void);
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t (*v27)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;

  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  (*(void (**)(void, void))(*(void *)(v0 + 128) + 8))(*(void *)(v0 + 136), *(void *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  while (1)
  {
    while (1)
    {
      int v4 = *(void *)(v0 + 384);
      unint64_t v5 = *(void *)(v0 + 408) + 1;
      outlined destroy of Any?(*(void *)(v0 + 152), &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
      if (v5 == v4)
      {
        while (1)
        {
          swift_bridgeObjectRelease();
          uint64_t v6 = *(void *)(v0 + 360);
          uint64_t v7 = *(void *)(v0 + 368) + 1;
          (*(void (**)(void, void))(*(void *)(v0 + 216) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 208));
          if (v7 == v6) {
            break;
          }
          uint64_t v8 = *(void *)(v0 + 368) + 1;
          *(void *)(v0 + 368) = v8;
          uint64_t v9 = *(void *)(v0 + 352);
          if (v8 >= *(void *)(v9 + 16))
          {
            __break(1u);
            goto LABEL_23;
          }
          unint64_t v10 = *(void *)(v0 + 200);
          unint64_t v11 = *(void *)(v0 + 184);
          id v12 = *(void *)(v0 + 192);
          (*(void (**)(void, unint64_t, void))(*(void *)(v0 + 216) + 16))(*(void *)(v0 + 224), v9+ ((*(unsigned __int8 *)(v0 + 440) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 440))+ *(void *)(*(void *)(v0 + 216) + 72) * v8, *(void *)(v0 + 208));
          Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter();
          uint64_t v13 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
          *(void *)(v0 + 376) = v13;
          (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
          uint64_t v14 = *(void *)(v13 + 16);
          *(void *)(v0 + 384) = v14;
          if (v14)
          {
            uint64_t v16 = 0;
            uint64_t v19 = *(void *)(v0 + 168);
            char v18 = *(_DWORD *)(v19 + 80);
            *(_DWORD *)(v0 + 448) = v18;
            uint64_t v17 = *(void *)(v19 + 72);
            *(void *)(v0 + 392) = v17;
            uint64_t v15 = *(void (**)(void, unint64_t, void))(v19 + 16);
            *(void *)(v0 + 400) = v15;
            goto LABEL_10;
          }
        }
        uint64_t v26 = *(void **)(v0 + 312);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
        return v27(0);
      }
      uint64_t v15 = *(void (**)(void, unint64_t, void))(v0 + 400);
      uint64_t v16 = *(void *)(v0 + 408) + 1;
      uint64_t v17 = *(void *)(v0 + 392);
      LOBYTE(v18) = *(unsigned char *)(v0 + 448);
LABEL_10:
      *(void *)(v0 + 408) = v16;
      uint64_t v20 = *(void *)(v0 + 152);
      v15(*(void *)(v0 + 176), *(void *)(v0 + 376) + ((v18 + 32) & ~(unint64_t)v18) + v17 * v16, *(void *)(v0 + 160));
      Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
      uint64_t v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) != 1) {
        break;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 168) + 8))(*(void *)(v0 + 176), *(void *)(v0 + 160));
    }
    uint64_t v23 = *(_DWORD *)(v0 + 444);
    uint64_t v24 = *(void *)(v0 + 144);
    outlined init with copy of Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?(*(void *)(v0 + 152), v24);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v22 + 88))(v24, v21) == v23) {
      break;
    }
    uint64_t v25 = *(void *)(v0 + 144);
    (*(void (**)(void, void))(*(void *)(v0 + 168) + 8))(*(void *)(v0 + 176), *(void *)(v0 + 160));
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v25, v21);
  }
  uint64_t v30 = *(void *)(v0 + 136);
  uint64_t v29 = *(void *)(v0 + 144);
  uint64_t v31 = *(void *)(v0 + 120);
  uint64_t v32 = *(void *)(v0 + 128);
  (*(void (**)(uint64_t, uint64_t))(v22 + 96))(v29, v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v30, v29, v31);
  if (one-time initialization token for information != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v33 = type metadata accessor for Logger();
  *(void *)(v0 + 416) = __swift_project_value_buffer(v33, (uint64_t)static Logger.information);
  int v34 = Logger.logObject.getter();
  uint64_t v35 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl(&dword_0, v34, v35, "Donating Geo Intent to Siri Suggestions", v36, 2u);
    swift_slowDealloc();
  }
  uint64_t v37 = *(void *)(v0 + 304);

  uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)
                                                          + async function pointer to specialized static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:));
  uint64_t v38 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v38;
  *uint64_t v38 = v0;
  v38[1] = SuggestionsEntryPoint.flowFor(input:);
  uint64_t v39 = *(void *)(v0 + 296);
  uint64_t v40 = *(void *)(v0 + 136);
  return v41(v40, v39, v37);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t (*v15)(void);
  void *v17;
  uint64_t v18;

  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  unint64_t v5 = *(void *)(v0 + 168);
  int v4 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 160);
  (*(void (**)(void, void))(*(void *)(v0 + 128) + 8))(*(void *)(v0 + 136), *(void *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of Any?(v7, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = *(void **)(v0 + 312);
    uint64_t v17 = *(void **)(v0 + 288);
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    id v12 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v11 = 138412290;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 96) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v12 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v8, v9, "Received error donating to Siri Suggestions: %@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v14 = *(void **)(v0 + 288);

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15(0);
}

uint64_t SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate();
  v3[13] = v5;
  v3[14] = *(void *)(v5 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SuggestionIntent();
  v3[19] = v6;
  v3[20] = *(void *)(v6 - 8);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  return _swift_task_switch(SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:), 0, 0);
}

uint64_t SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:)()
{
  Apple_Parsec_Siri_V2alpha_ServerSuggestion.currentIntent.getter();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:)
                                                         + async function pointer to specialized static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[24] = v1;
  void *v1 = v0;
  v1[1] = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  return v6(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  uint64_t v4 = *(void *)(*v1 + 160);
  uint64_t v5 = *(void *)(*v1 + 152);
  *(void *)(v2 + 200) = v0;
  swift_task_dealloc();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(void *)(v2 + 208) = v6;
  v6(v3, v5);
  if (v0) {
    uint64_t v7 = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
  }
  else {
    uint64_t v7 = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
  }
  return _swift_task_switch(v7, 0, 0);
}

{
  void *v0;
  uint64_t result;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  void (**v38)(void, void);
  void (**v39)(char *, uint64_t, uint64_t);
  void (**v40)(uint64_t, void, uint64_t);
  unsigned int v41;
  void (**v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  void (**v44)(uint64_t, void, uint64_t);
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;

  uint64_t result = Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter();
  uint64_t v2 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v53 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v48 = *(void *)(result + 16);
  if (v48)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v0[14];
    uint64_t v41 = enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.unspecified(_:);
    uint64_t v40 = (void (**)(uint64_t, void, uint64_t))(v0[20] + 104);
    uint64_t v43 = v4;
    uint64_t v38 = (void (**)(void, void))(v4 + 8);
    uint64_t v39 = (void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v46 = result;
    while (v3 < *(void *)(result + 16))
    {
      uint64_t v5 = (void (*)(uint64_t, uint64_t))v0[26];
      uint64_t v6 = v0[21];
      uint64_t v7 = v0[22];
      uint64_t v8 = v0[19];
      uint64_t v9 = *(void *)(v43 + 72);
      uint64_t v50 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      (*(void (**)(void, unint64_t, void))(v43 + 16))(v0[18], result + v50 + v9 * v3, v0[13]);
      Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.intent.getter();
      (*v40)(v6, v41, v8);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      unint64_t v10 = v0[2];
      unint64_t v11 = v0[3];
      v5(v6, v8);
      v5(v7, v8);
      if (v10 == v11)
      {
        id v12 = *v39;
        (*v39)((char *)v0[17], v0[18], v0[13]);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1);
          uint64_t v2 = v53;
        }
        uint64_t v14 = *((void *)v2 + 2);
        uint64_t v13 = *((void *)v2 + 3);
        if (v14 >= v13 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
          uint64_t v2 = v53;
        }
        uint64_t v15 = v0[17];
        uint64_t v16 = v0[13];
        *((void *)v2 + 2) = v14 + 1;
        v12(&v2[v50 + v14 * v9], v15, v16);
        uint64_t v53 = v2;
      }
      else
      {
        (*v38)(v0[18], v0[13]);
      }
      ++v3;
      uint64_t result = v46;
      if (v48 == v3) {
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_35;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  if (*((void *)v2 + 2))
  {
    (*(void (**)(void, void, void))(v0[10] + 16))(v0[12], v0[6], v0[9]);
    Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.setter();
    uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SuggestionsIntentDonator.donateRelatedQuestionsSuggestions(_:requestID:)
                                                            + async function pointer to specialized static SuggestionsIntentDonator.donateRelatedQuestionsSuggestions(_:requestID:));
    uint64_t v17 = (void *)swift_task_alloc();
    v0[27] = v17;
    *uint64_t v17 = v0;
    v17[1] = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
    char v18 = v0[12];
LABEL_28:
    uint64_t v35 = v0[7];
    uint64_t v36 = v0[8];
    return v51(v18, v35, v36);
  }
  swift_release();
  uint64_t result = Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter();
  os_log_type_t v54 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v49 = *(void *)(result + 16);
  if (v49)
  {
    uint64_t v19 = 0;
    uint64_t v20 = v0[14];
    os_log_type_t v45 = enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.unspecified(_:);
    uint64_t v44 = (void (**)(uint64_t, void, uint64_t))(v0[20] + 104);
    os_log_type_t v42 = (void (**)(char *, uint64_t, uint64_t))(v20 + 32);
    uint64_t v52 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v47 = result;
    while (v19 < *(void *)(result + 16))
    {
      uint64_t v21 = (void (*)(uint64_t, uint64_t))v0[26];
      uint64_t v23 = v0[21];
      uint64_t v22 = v0[22];
      uint64_t v24 = v0[19];
      uint64_t v25 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
      uint64_t v26 = *(void *)(v20 + 72);
      (*(void (**)(void, unint64_t, void))(v20 + 16))(v0[16], result + v25 + v26 * v19, v0[13]);
      Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.intent.getter();
      (*v44)(v23, v45, v24);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent);
      uint64_t v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      v21(v23, v24);
      v21(v22, v24);
      if (v27)
      {
        (*(void (**)(void, void))(v20 + 8))(v0[16], v0[13]);
      }
      else
      {
        int v28 = *v42;
        (*v42)((char *)v0[15], v0[16], v0[13]);
        uint64_t v29 = v52;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v52 + 2) + 1, 1);
          uint64_t v29 = v54;
        }
        uint64_t v31 = *((void *)v29 + 2);
        uint64_t v30 = *((void *)v29 + 3);
        if (v31 >= v30 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
          uint64_t v29 = v54;
        }
        uint64_t v32 = v0[15];
        uint64_t v33 = v0[13];
        *((void *)v29 + 2) = v31 + 1;
        v28(&v29[v25 + v31 * v26], v32, v33);
        uint64_t v52 = v29;
        os_log_type_t v54 = v29;
      }
      ++v19;
      uint64_t result = v47;
      if (v49 == v19) {
        goto LABEL_26;
      }
    }
LABEL_35:
    __break(1u);
    return result;
  }
  uint64_t v52 = (char *)&_swiftEmptyArrayStorage;
LABEL_26:
  swift_bridgeObjectRelease();
  if (*((void *)v52 + 2))
  {
    (*(void (**)(void, void, void))(v0[10] + 16))(v0[11], v0[6], v0[9]);
    Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.setter();
    uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:)
                                                            + async function pointer to specialized static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:));
    int v34 = (void *)swift_task_alloc();
    v0[29] = v34;
    *int v34 = v0;
    v34[1] = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
    char v18 = v0[11];
    goto LABEL_28;
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = (uint64_t (*)(void))v0[1];
  return v37();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v46)(void);
  void (**v47)(void, void);
  uint64_t v48;
  void (**v49)(char *, uint64_t, uint64_t);
  void (**v50)(uint64_t, void, uint64_t);
  void (**v51)(char *, uint64_t, uint64_t);
  unsigned int v52;
  void (**v53)(uint64_t, void, uint64_t);
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;

  if (one-time initialization token for information != -1) {
    goto LABEL_40;
  }
  while (1)
  {
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 138412290;
      swift_errorRetain();
      uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
      v0[5] = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v5 = v6;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v2, v3, "Unable to submit engagement to Siri Suggestions: %@", v4, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v7 = Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter();
    uint64_t v8 = v7;
    uint64_t v9 = (char *)&_swiftEmptyArrayStorage;
    os_log_type_t v62 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v57 = *(void *)(v7 + 16);
    if (v57)
    {
      unint64_t v10 = 0;
      unint64_t v11 = v0[14];
      uint64_t v52 = enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.unspecified(_:);
      uint64_t v50 = (void (**)(uint64_t, void, uint64_t))(v0[20] + 104);
      uint64_t v47 = (void (**)(void, void))(v11 + 8);
      uint64_t v48 = v7;
      os_log_type_t v54 = v11;
      uint64_t v49 = (void (**)(char *, uint64_t, uint64_t))(v11 + 32);
      while (v10 < *(void *)(v8 + 16))
      {
        id v12 = (void (*)(uint64_t, uint64_t))v0[26];
        uint64_t v13 = v0[21];
        uint64_t v14 = v0[22];
        uint64_t v15 = v0[19];
        uint64_t v16 = *(void *)(v54 + 72);
        uint64_t v59 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
        (*(void (**)(void, unint64_t, void))(v54 + 16))(v0[18], v8 + v59 + v16 * v10, v0[13]);
        Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.intent.getter();
        (*v50)(v13, v52, v15);
        lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t v17 = v0[2];
        char v18 = v0[3];
        v12(v13, v15);
        v12(v14, v15);
        if (v17 == v18)
        {
          uint64_t v19 = *v49;
          (*v49)((char *)v0[17], v0[18], v0[13]);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1);
            uint64_t v9 = v62;
          }
          uint64_t v8 = v48;
          uint64_t v21 = *((void *)v9 + 2);
          uint64_t v20 = *((void *)v9 + 3);
          if (v21 >= v20 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
            uint64_t v9 = v62;
          }
          uint64_t v22 = v0[17];
          uint64_t v23 = v0[13];
          *((void *)v9 + 2) = v21 + 1;
          v19(&v9[v59 + v21 * v16], v22, v23);
          os_log_type_t v62 = v9;
        }
        else
        {
          (*v47)(v0[18], v0[13]);
          uint64_t v8 = v48;
        }
        if (v57 == ++v10) {
          goto LABEL_16;
        }
      }
      __break(1u);
      goto LABEL_39;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    if (*((void *)v9 + 2))
    {
      (*(void (**)(void, void, void))(v0[10] + 16))(v0[12], v0[6], v0[9]);
      Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.setter();
      uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SuggestionsIntentDonator.donateRelatedQuestionsSuggestions(_:requestID:)
                                                              + async function pointer to specialized static SuggestionsIntentDonator.donateRelatedQuestionsSuggestions(_:requestID:));
      uint64_t v24 = (void *)swift_task_alloc();
      v0[27] = v24;
      *uint64_t v24 = v0;
      v24[1] = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
      uint64_t v25 = v0[12];
LABEL_32:
      uint64_t v43 = v0[7];
      uint64_t v44 = v0[8];
      return v60(v25, v43, v44);
    }
    swift_release();
    uint64_t v26 = Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter();
    int64_t v63 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v58 = *(void *)(v26 + 16);
    if (!v58) {
      break;
    }
    uint64_t v27 = 0;
    int v28 = v0[14];
    long long v55 = enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.unspecified(_:);
    uint64_t v53 = (void (**)(uint64_t, void, uint64_t))(v0[20] + 104);
    uint64_t v51 = (void (**)(char *, uint64_t, uint64_t))(v28 + 32);
    uint64_t v61 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v56 = v26;
    while (v27 < *(void *)(v26 + 16))
    {
      uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[26];
      uint64_t v31 = v0[21];
      uint64_t v30 = v0[22];
      uint64_t v32 = v0[19];
      uint64_t v33 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
      int v34 = *(void *)(v28 + 72);
      (*(void (**)(void, unint64_t, void))(v28 + 16))(v0[16], v26 + v33 + v34 * v27, v0[13]);
      Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.intent.getter();
      (*v53)(v31, v55, v32);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent);
      uint64_t v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v29(v31, v32);
      v29(v30, v32);
      if (v35)
      {
        (*(void (**)(void, void))(v28 + 8))(v0[16], v0[13]);
      }
      else
      {
        uint64_t v36 = *v51;
        (*v51)((char *)v0[15], v0[16], v0[13]);
        uint64_t v37 = v61;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v61 + 2) + 1, 1);
          uint64_t v37 = v63;
        }
        uint64_t v39 = *((void *)v37 + 2);
        uint64_t v38 = *((void *)v37 + 3);
        if (v39 >= v38 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
          uint64_t v37 = v63;
        }
        uint64_t v40 = v0[15];
        uint64_t v41 = v0[13];
        *((void *)v37 + 2) = v39 + 1;
        v36(&v37[v33 + v39 * v34], v40, v41);
        uint64_t v61 = v37;
        int64_t v63 = v37;
      }
      ++v27;
      uint64_t v26 = v56;
      if (v58 == v27) {
        goto LABEL_30;
      }
    }
LABEL_39:
    __break(1u);
LABEL_40:
    swift_once();
  }
  uint64_t v61 = (char *)&_swiftEmptyArrayStorage;
LABEL_30:
  swift_bridgeObjectRelease();
  if (*((void *)v61 + 2))
  {
    (*(void (**)(void, void, void))(v0[10] + 16))(v0[11], v0[6], v0[9]);
    Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.setter();
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:)
                                                            + async function pointer to specialized static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:));
    os_log_type_t v42 = (void *)swift_task_alloc();
    v0[29] = v42;
    *os_log_type_t v42 = v0;
    v42[1] = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
    uint64_t v25 = v0[11];
    goto LABEL_32;
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v46 = (uint64_t (*)(void))v0[1];
  return v46();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
  }
  else {
    uint64_t v2 = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  uint64_t result;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  void (**v22)(void, void);
  void (**v23)(uint64_t, void, uint64_t);
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  void (**v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;

  (*(void (**)(void, void))(v0[10] + 8))(v0[12], v0[9]);
  uint64_t result = Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter();
  uint64_t v2 = (char *)&_swiftEmptyArrayStorage;
  int v28 = *(void *)(result + 16);
  uint64_t v30 = (char *)&_swiftEmptyArrayStorage;
  if (v28)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v0[14];
    uint64_t v24 = enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.unspecified(_:);
    uint64_t v23 = (void (**)(uint64_t, void, uint64_t))(v0[20] + 104);
    uint64_t v26 = result;
    uint64_t v27 = (void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v25 = v4;
    uint64_t v22 = (void (**)(void, void))(v4 + 8);
    while (v3 < *(void *)(result + 16))
    {
      uint64_t v5 = (void (*)(uint64_t, uint64_t))v0[26];
      uint64_t v7 = v0[21];
      uint64_t v6 = v0[22];
      uint64_t v8 = v0[19];
      uint64_t v9 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
      unint64_t v10 = *(void *)(v25 + 72);
      (*(void (**)(void, unint64_t, void))(v25 + 16))(v0[16], result + v9 + v10 * v3, v0[13]);
      Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.intent.getter();
      (*v23)(v7, v24, v8);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent);
      unint64_t v11 = dispatch thunk of static Equatable.== infix(_:_:)();
      v5(v7, v8);
      v5(v6, v8);
      if (v11)
      {
        (*v22)(v0[16], v0[13]);
      }
      else
      {
        id v12 = *v27;
        (*v27)((char *)v0[15], v0[16], v0[13]);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1);
          uint64_t v2 = v30;
        }
        uint64_t v14 = *((void *)v2 + 2);
        uint64_t v13 = *((void *)v2 + 3);
        if (v14 >= v13 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
          uint64_t v2 = v30;
        }
        uint64_t v15 = v0[15];
        uint64_t v16 = v0[13];
        *((void *)v2 + 2) = v14 + 1;
        v12(&v2[v9 + v14 * v10], v15, v16);
        uint64_t v30 = v2;
      }
      ++v3;
      uint64_t result = v26;
      if (v28 == v3) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    if (*((void *)v2 + 2))
    {
      (*(void (**)(void, void, void))(v0[10] + 16))(v0[11], v0[6], v0[9]);
      Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.setter();
      uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:)
                                                              + async function pointer to specialized static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:));
      uint64_t v17 = (void *)swift_task_alloc();
      v0[29] = v17;
      *uint64_t v17 = v0;
      v17[1] = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
      char v18 = v0[11];
      uint64_t v19 = v0[7];
      uint64_t v20 = v0[8];
      return v29(v18, v19, v20);
    }
    else
    {
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v21 = (uint64_t (*)(void))v0[1];
      return v21();
    }
  }
  return result;
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  (*(void (**)(void, void))(v0[10] + 8))(v0[12], v0[9]);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, v3, "Recieved error donating to Siri Suggestions: %@", v4, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
  }
  else {
    uint64_t v2 = SuggestionsEntryPoint.handleServerSuggestion(siriSuggestion:requestId:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, v3, "Recieved error donating to Siri Suggestions: %@", v4, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t SuggestionsEntryPoint.handleAlternateSuggestion(siriSuggestion:requestId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  uint64_t Suggestion = type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion();
  v3[11] = Suggestion;
  v3[12] = *(void *)(Suggestion - 8);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  return _swift_task_switch(SuggestionsEntryPoint.handleAlternateSuggestion(siriSuggestion:requestId:), 0, 0);
}

uint64_t SuggestionsEntryPoint.handleAlternateSuggestion(siriSuggestion:requestId:)()
{
  *(void *)(v0 + 40) = &type metadata for Features;
  unint64_t v1 = lazy protocol witness table accessor for type Features and conformance Features();
  *(unsigned char *)(v0 + 16) = 3;
  *(void *)(v0 + 48) = v1;
  char v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if ((v2 & 1) == 0)
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.information);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v19, v20)) {
      goto LABEL_19;
    }
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    uint64_t v22 = "AlternateQuerySuggestion disabled, not donating suggestion";
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 96);
  Apple_Parsec_Siri_V2alpha_ServerSuggestion.alternateQuerySuggestion.getter();
  uint64_t v6 = Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion.candidates.getter();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(void *)(v0 + 120) = v7;
  *(void *)(v0 + 128) = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v3, v4);
  uint64_t v8 = *(void *)(v6 + 16);
  swift_bridgeObjectRelease();
  if (v8)
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    *(void *)(v0 + 136) = __swift_project_value_buffer(v9, (uint64_t)static Logger.information);
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v12 = 0;
      _os_log_impl(&dword_0, v10, v11, "AlternateQuerySuggestion found on POMMES response, donating.", v12, 2u);
      swift_slowDealloc();
    }

    Apple_Parsec_Siri_V2alpha_ServerSuggestion.alternateQuerySuggestion.getter();
    uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SuggestionsIntentDonator.donateAlternateQuerySuggestion(_:requestID:)
                                                            + async function pointer to specialized static SuggestionsIntentDonator.donateAlternateQuerySuggestion(_:requestID:));
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v13;
    void *v13 = v0;
    v13[1] = SuggestionsEntryPoint.handleAlternateSuggestion(siriSuggestion:requestId:);
    uint64_t v14 = *(void *)(v0 + 104);
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 80);
    return v25(v14, v15, v16);
  }
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.information);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    uint64_t v22 = "AlternateQuerySuggestion not found on POMMES response";
LABEL_18:
    _os_log_impl(&dword_0, v19, v20, v22, v21, 2u);
    swift_slowDealloc();
  }
LABEL_19:

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    char v2 = SuggestionsEntryPoint.handleAlternateSuggestion(siriSuggestion:requestId:);
  }
  else {
    char v2 = SuggestionsEntryPoint.handleAlternateSuggestion(siriSuggestion:requestId:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0 + 120))(*(void *)(v0 + 104), *(void *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  (*(void (**)(void, void))(v0 + 120))(*(void *)(v0 + 104), *(void *)(v0 + 88));
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  char v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 56) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v1, v2, "Recieved error donating alternateQuerySuggestion to Siri Suggestions: %@", v3, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t protocol witness for FlowEntryPoint.flowFor(input:) in conformance SuggestionsEntryPoint(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 80) + **(int **)(**(void **)v1 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.onAsync(input:) in conformance InformationRoutingFlow;
  return v6(a1);
}

uint64_t outlined init with copy of Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(uint64_t (*a1)(void))
{
  return a1();
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_SuggestionIntent();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SuggestionsEntryPoint()
{
  return self;
}

uint64_t SportsIntentDonator.init(donator:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of PatternFlowProviding(a1, a2);
}

void SportsIntentDonator.donateIfNeeded(parse:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  uint64_t v13 = a1;
  Date.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchForSportsIntent?);
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  if (v14)
  {
    id v8 = v14;
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 _setLaunchId:v9];

    uint64_t v10 = v2[3];
    uint64_t v11 = v2[4];
    __swift_project_boxed_opaque_existential_1(v2, v10);
    (*(void (**)(id, uint64_t, uint64_t))(v11 + 8))(v8, v10, v11);
  }
}

uint64_t closure #1 in static SportsIntentDonator.toDonatableIntent(parse:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v30 = *(void *)(v2 - 8);
  uint64_t v31 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v5 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Parse.PegasusResult();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Parse();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (void **)((char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void **, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  int v16 = (*(uint64_t (**)(void **, uint64_t))(v13 + 88))(v15, v12);
  if (v16 == enum case for Parse.pegasusResults(_:))
  {
    (*(void (**)(void **, uint64_t))(v13 + 96))(v15, v12);
    (*(void (**)(char *, void **, uint64_t))(v9 + 32))(v11, v15, v8);
    Parse.PegasusResult.response.getter();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v29);
    uint64_t v17 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v31);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return v17;
  }
  if (v16 != enum case for Parse.pommesResponse(_:))
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.information);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_0, v25, v26, "toDonatableIntent does not have pommesResponse or pegasusResults", v27, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(void **, uint64_t))(v13 + 8))(v15, v12);
    return 0;
  }
  (*(void (**)(void **, uint64_t))(v13 + 96))(v15, v12);
  uint64_t v18 = *v15;
  unint64_t v19 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v20 = v19;
  if (!(v19 >> 62))
  {
    uint64_t result = *(void *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFFF8));
    if (result) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
  {
LABEL_16:

    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_6:
  if ((v20 & 0xC000000000000001) != 0)
  {
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_9;
  }
  if (*(void *)((char *)&dword_10 + (v20 & 0xFFFFFFFFFFFFFF8)))
  {
    id v22 = *(id *)(v20 + 32);
LABEL_9:
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v17 = dispatch thunk of Experience.associatedEntities.getter();

    return v17;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall IntentDonator.donate(intent:)(INIntent intent)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.information);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_0, v6, v7, "Donating sports intent for parse. Will log on background queue...", v8, 2u);
    swift_slowDealloc();
  }

  static TaskPriority.background.getter();
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 0, 1, v9);
  uint64_t v10 = (INIntent *)swift_allocObject();
  v10[2].super.Class isa = 0;
  v10[3].super.Class isa = 0;
  v10[4].super.Class isa = intent.super.isa;
  uint64_t v11 = intent.super.isa;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in IntentDonator.donate(intent:), (uint64_t)v10);
  swift_release();
}

uint64_t closure #1 in IntentDonator.donate(intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a4;
  uint64_t v5 = type metadata accessor for Date();
  v4[10] = v5;
  v4[11] = *(void *)(v5 - 8);
  v4[12] = swift_task_alloc();
  return _swift_task_switch(closure #1 in IntentDonator.donate(intent:), 0, 0);
}

void closure #1 in IntentDonator.donate(intent:)()
{
  id v1 = [objc_allocWithZone((Class)INInteraction) initWithIntent:v0[9] response:0];
  v0[13] = v1;
  type metadata accessor for PerformanceUtil();
  v0[14] = static PerformanceUtil.shared.getter();
  uint64_t v2 = swift_task_alloc();
  v0[15] = v2;
  *(void *)(v2 + 16) = v1;
  Date.init()();
  uint64_t v4 = (char *)&async function pointer to dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)
     + async function pointer to dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[16] = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in IntentDonator.donate(intent:);
  __asm { BR              X0 }
}

uint64_t closure #1 in IntentDonator.donate(intent:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96);
  uint64_t v3 = *(void *)(*(void *)v1 + 88);
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0)
  {
    uint64_t v5 = closure #1 in IntentDonator.donate(intent:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v5 = closure #1 in IntentDonator.donate(intent:);
  }
  return _swift_task_switch(v5, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  uint8_t *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  void *v16;
  uint64_t v17;

  int v16 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[13];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v9 = [v7 intent];
    uint64_t v10 = INIntent.debugDescriptionLite.getter();
    uint64_t v12 = v11;

    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_0, v4, v5, "Sports intent that was successfully donated: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  unint64_t v19 = v0;
  swift_task_dealloc();
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.information);
  uint64_t v3 = v1;
  swift_errorRetain();
  uint64_t v4 = v3;
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[13];
  if (v7)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    swift_getErrorValue();
    uint64_t v10 = Error.localizedDescription.getter();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v12 = [v8 intent];
    uint64_t v13 = INIntent.debugDescriptionLite.getter();
    uint64_t v15 = v14;

    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_0, v5, v6, "Error when donating Sports intent: %s intent: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  int v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t closure #1 in closure #1 in IntentDonator.donate(intent:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a2;
  return _swift_task_switch(closure #1 in closure #1 in IntentDonator.donate(intent:), 0, 0);
}

uint64_t closure #1 in closure #1 in IntentDonator.donate(intent:)()
{
  uint64_t v1 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = closure #1 in closure #1 in IntentDonator.donate(intent:);
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v0[13] = &block_descriptor_1;
  v0[14] = v2;
  [v1 donateInteractionWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 128) = v1;
  if (v1) {
    uint64_t v2 = closure #1 in closure #1 in IntentDonator.donate(intent:);
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in IntentDonator.donate(intent:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(v7);
  }
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

void (**partial apply for closure #1 in SportsIntentDonator.donateIfNeeded(parse:)@<X0>(void (***a1)(char *, unint64_t, uint64_t)@<X8>))(char *, unint64_t, uint64_t)
{
  uint64_t result = specialized static SportsIntentDonator.toDonatableIntent(parse:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t protocol witness for IntentDonating.donate(intent:) in conformance IntentDonator()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t sub_45C7C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in IntentDonator.donate(intent:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return closure #1 in IntentDonator.donate(intent:)(a1, v4, v5, v6);
}

uint64_t initializeWithCopy for SportsIntentDonator(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for SportsIntentDonator(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    long long v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *long long v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *long long v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SportsIntentDonator(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsIntentDonator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsIntentDonator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsIntentDonator()
{
  return &type metadata for SportsIntentDonator;
}

uint64_t type metadata accessor for IntentDonator()
{
  return self;
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  long long v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *long long v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_4636C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in closure #1 in IntentDonator.donate(intent:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  v3[15] = v2;
  return _swift_task_switch(closure #1 in closure #1 in IntentDonator.donate(intent:), 0, 0);
}

void (**specialized static SportsIntentDonator.toDonatableIntent(parse:)(uint64_t a1))(char *, unint64_t, uint64_t)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  uint64_t v3 = *(void (***)(char *, unint64_t, uint64_t))(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = closure #1 in static SportsIntentDonator.toDonatableIntent(parse:)(a1);
  if (v6)
  {
    uint64_t v7 = v6;
    if (*(void *)(v6 + 16))
    {
      v3[2](v5, v6 + ((*((unsigned __int8 *)v3 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v3 + 80)), v2);
      uint64_t v8 = *(void *)(v7 + 16);
      swift_bridgeObjectRelease();
      if (v8 == 1)
      {
        if (one-time initialization token for information != -1) {
          goto LABEL_37;
        }
        while (1)
        {
          uint64_t v9 = type metadata accessor for Logger();
          uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.information);
          uint64_t v11 = specialized static UsoEntity_common_SportsItem.from(resultEntity:logger:)((uint64_t)v5, v10);
          if (!v11) {
            break;
          }
          uint64_t v12 = v11;
          uint64_t v13 = dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter();
          if (!v13)
          {
            ((void (*)(char *, uint64_t))v3[1])(v5, v2);
            swift_release();
            return 0;
          }
          unint64_t v14 = v13;
          uint64_t v38 = v3;
          uint64_t v3 = (void (**)(char *, unint64_t, uint64_t))[objc_allocWithZone((Class)type metadata accessor for SearchForSportsIntent()) init];
          uint64_t v36 = v2;
          uint64_t v37 = v12;
          uint64_t v35 = v5;
          if (v14 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v5 = (char *)_CocoaArrayWrapper.endIndex.getter();
            if (!v5)
            {
LABEL_39:
              swift_release();
              swift_bridgeObjectRelease_n();
              ((void (*)(char *, uint64_t))v38[1])(v35, v36);
              return v3;
            }
          }
          else
          {
            uint64_t v5 = *(char **)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFFF8));
            swift_bridgeObjectRetain();
            if (!v5) {
              goto LABEL_39;
            }
          }
          unint64_t v39 = v14 & 0xC000000000000001;
          for (uint64_t i = 4; ; ++i)
          {
            uint64_t v21 = i - 4;
            if (!v39) {
              break;
            }
            specialized _ArrayBuffer._getElementSlowPath(_:)();
            id v22 = (char *)(i - 3);
            if (__OFADD__(v21, 1)) {
              goto LABEL_36;
            }
LABEL_22:
            dispatch thunk of CodeGenListEntry.entry.getter();
            if (v40)
            {
              uint64_t v2 = v14;
              swift_retain();
              uint64_t v23 = specialized static SportsProperty.from(entity:)();
              uint64_t v25 = v24;
              char v27 = v26;
              swift_release_n();
              switch(v27)
              {
                case 0:
                  NSString v28 = String._bridgeToObjectiveC()();
                  [v3 setTeamName:v28];

                  uint64_t v18 = v23;
                  uint64_t v19 = v25;
                  unsigned __int8 v20 = 0;
                  break;
                case 1:
                  NSString v17 = String._bridgeToObjectiveC()();
                  [v3 setTeamQId:v17];

                  uint64_t v18 = v23;
                  uint64_t v19 = v25;
                  unsigned __int8 v20 = 1;
                  break;
                case 2:
                  NSString v29 = String._bridgeToObjectiveC()();
                  [v3 setLeagueName:v29];

                  uint64_t v18 = v23;
                  uint64_t v19 = v25;
                  unsigned __int8 v20 = 2;
                  break;
                case 3:
                  NSString v30 = String._bridgeToObjectiveC()();
                  [v3 setLeagueQId:v30];

                  uint64_t v18 = v23;
                  uint64_t v19 = v25;
                  unsigned __int8 v20 = 3;
                  break;
                case 4:
                  NSString v31 = String._bridgeToObjectiveC()();
                  [v3 setSportName:v31];

                  uint64_t v18 = v23;
                  uint64_t v19 = v25;
                  unsigned __int8 v20 = 4;
                  break;
                case 5:
                  NSString v32 = String._bridgeToObjectiveC()();
                  [v3 setSportQId:v32];

                  uint64_t v18 = v23;
                  uint64_t v19 = v25;
                  unsigned __int8 v20 = 5;
                  break;
                case 6:
                  NSString v33 = String._bridgeToObjectiveC()();
                  [v3 setAthleteName:v33];

                  uint64_t v18 = v23;
                  uint64_t v19 = v25;
                  unsigned __int8 v20 = 6;
                  break;
                case 7:
                  NSString v34 = String._bridgeToObjectiveC()();
                  [v3 setAthleteQId:v34];

                  uint64_t v18 = v23;
                  uint64_t v19 = v25;
                  unsigned __int8 v20 = 7;
                  break;
                default:
                  swift_release();
                  unint64_t v14 = v2;
                  if (v22 == v5) {
                    goto LABEL_39;
                  }
                  continue;
              }
              outlined consume of SportsProperty?(v18, v19, v20);
              swift_release();
              unint64_t v14 = v2;
              if (v22 == v5) {
                goto LABEL_39;
              }
            }
            else
            {
              swift_release();
              if (v22 == v5) {
                goto LABEL_39;
              }
            }
          }
          swift_retain();
          id v22 = (char *)(i - 3);
          if (!__OFADD__(v21, 1)) {
            goto LABEL_22;
          }
LABEL_36:
          __break(1u);
LABEL_37:
          swift_once();
        }
      }
      ((void (*)(char *, uint64_t))v3[1])(v5, v2);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

uint64_t outlined consume of SportsProperty?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return outlined consume of SportsProperty(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined consume of SportsProperty(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 7u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *AppIntentConstants.weatherBundleIdentifier.unsafeMutableAddressor()
{
  return &static AppIntentConstants.weatherBundleIdentifier;
}

unint64_t static AppIntentConstants.weatherBundleIdentifier.getter()
{
  return 0xD000000000000011;
}

void *AppIntentConstants.clockBundleIdentifier.unsafeMutableAddressor()
{
  return &static AppIntentConstants.clockBundleIdentifier;
}

unint64_t static AppIntentConstants.clockBundleIdentifier.getter()
{
  return 0xD000000000000021;
}

void *AppIntentConstants.WeatherIntent.openWeatherAirQualityIntent.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.openWeatherAirQualityIntent;
}

unint64_t static AppIntentConstants.WeatherIntent.openWeatherAirQualityIntent.getter()
{
  return 0xD00000000000001BLL;
}

const char *AppIntentConstants.WeatherIntent.openMoonIntent.unsafeMutableAddressor()
{
  return "OpenMoonIntent";
}

uint64_t static AppIntentConstants.WeatherIntent.openMoonIntent.getter()
{
  return 0x6E6F6F4D6E65704FLL;
}

void *AppIntentConstants.WeatherIntent.openSunriseSunsetIntent.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.openSunriseSunsetIntent;
}

unint64_t static AppIntentConstants.WeatherIntent.openSunriseSunsetIntent.getter()
{
  return 0xD000000000000017;
}

void *AppIntentConstants.WeatherIntent.openWeatherSpecificConditionIntent.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.openWeatherSpecificConditionIntent;
}

unint64_t static AppIntentConstants.WeatherIntent.openWeatherSpecificConditionIntent.getter()
{
  return 0xD000000000000022;
}

void *AppIntentConstants.WeatherIntent.openWeatherIntent.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.openWeatherIntent;
}

unint64_t static AppIntentConstants.WeatherIntent.openWeatherIntent.getter()
{
  return 0xD000000000000011;
}

const char *AppIntentConstants.WeatherIntent.SpecificCondition.humidity.unsafeMutableAddressor()
{
  return "humidity";
}

uint64_t static AppIntentConstants.WeatherIntent.SpecificCondition.humidity.getter()
{
  return 0x79746964696D7568;
}

const char *AppIntentConstants.WeatherIntent.SpecificCondition.precipitation.unsafeMutableAddressor()
{
  return "precipitation";
}

uint64_t static AppIntentConstants.WeatherIntent.SpecificCondition.precipitation.getter()
{
  return 0x7469706963657270;
}

const char *AppIntentConstants.WeatherIntent.SpecificCondition.pressure.unsafeMutableAddressor()
{
  return "pressure";
}

uint64_t static AppIntentConstants.WeatherIntent.SpecificCondition.pressure.getter()
{
  return 0x6572757373657270;
}

void *AppIntentConstants.WeatherIntent.SpecificCondition.uvi.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.SpecificCondition.uvi;
}

uint64_t static AppIntentConstants.WeatherIntent.SpecificCondition.uvi.getter()
{
  return 6911605;
}

const char *AppIntentConstants.WeatherIntent.SpecificCondition.visibility.unsafeMutableAddressor()
{
  return "visibility";
}

uint64_t static AppIntentConstants.WeatherIntent.SpecificCondition.visibility.getter()
{
  return 0x696C696269736976;
}

const char *AppIntentConstants.WeatherIntent.SpecificCondition.wind.unsafeMutableAddressor()
{
  return "wind";
}

uint64_t static AppIntentConstants.WeatherIntent.SpecificCondition.wind.getter()
{
  return 1684957559;
}

const char *AppIntentConstants.WeatherIntent.SpecificCondition.conditions.unsafeMutableAddressor()
{
  return "conditions";
}

uint64_t static AppIntentConstants.WeatherIntent.SpecificCondition.conditions.getter()
{
  return 0x6F697469646E6F63;
}

const char *AppIntentConstants.WeatherIntent.ParamIdentifier.location.unsafeMutableAddressor()
{
  return "location";
}

uint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.location.getter()
{
  return 0x6E6F697461636F6CLL;
}

void *AppIntentConstants.WeatherIntent.ParamIdentifier.specificCondition.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.ParamIdentifier.specificCondition;
}

unint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.specificCondition.getter()
{
  return 0xD000000000000011;
}

void *AppIntentConstants.WeatherIntent.ParamIdentifier.temperatureKind.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.ParamIdentifier.temperatureKind;
}

uint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.temperatureKind.getter()
{
  return 0x74617265706D6574;
}

const char *AppIntentConstants.WeatherIntent.ParamIdentifier.date.unsafeMutableAddressor()
{
  return "date";
}

uint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.date.getter()
{
  return 1702125924;
}

const char *AppIntentConstants.WeatherIntent.ParamIdentifier.endDate.unsafeMutableAddressor()
{
  return "endDate";
}

uint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.endDate.getter()
{
  return 0x65746144646E65;
}

const char *AppIntentConstants.WeatherIntent.ParamIdentifier.timeZone.unsafeMutableAddressor()
{
  return "timeZone";
}

uint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.timeZone.getter()
{
  return 0x656E6F5A656D6974;
}

void *AppIntentConstants.WeatherIntent.ParamIdentifier.temperatureUnit.unsafeMutableAddressor()
{
  return &static AppIntentConstants.WeatherIntent.ParamIdentifier.temperatureUnit;
}

uint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.temperatureUnit.getter()
{
  return 0x74617265706D6574;
}

const char *AppIntentConstants.WeatherIntent.ParamIdentifier.eventKind.unsafeMutableAddressor()
{
  return "eventKind";
}

uint64_t static AppIntentConstants.WeatherIntent.ParamIdentifier.eventKind.getter()
{
  return 0x6E694B746E657665;
}

void *AppIntentConstants.ClockIntent.openWorldClockCityIntent.unsafeMutableAddressor()
{
  return &static AppIntentConstants.ClockIntent.openWorldClockCityIntent;
}

unint64_t static AppIntentConstants.ClockIntent.openWorldClockCityIntent.getter()
{
  return 0xD000000000000018;
}

const char *AppIntentConstants.ClockIntent.ParamIdentifier.placemark.unsafeMutableAddressor()
{
  return "placemark";
}

uint64_t static AppIntentConstants.ClockIntent.ParamIdentifier.placemark.getter()
{
  return 0x72616D6563616C70;
}

const char *AppIntentConstants.ClockIntent.ParamIdentifier.timeZone.unsafeMutableAddressor()
{
  return "timeZone";
}

ValueMetadata *type metadata accessor for AppIntentConstants()
{
  return &type metadata for AppIntentConstants;
}

ValueMetadata *type metadata accessor for AppIntentConstants.WeatherIntent()
{
  return &type metadata for AppIntentConstants.WeatherIntent;
}

ValueMetadata *type metadata accessor for AppIntentConstants.WeatherIntent.SpecificCondition()
{
  return &type metadata for AppIntentConstants.WeatherIntent.SpecificCondition;
}

ValueMetadata *type metadata accessor for AppIntentConstants.WeatherIntent.ParamIdentifier()
{
  return &type metadata for AppIntentConstants.WeatherIntent.ParamIdentifier;
}

ValueMetadata *type metadata accessor for AppIntentConstants.ClockIntent()
{
  return &type metadata for AppIntentConstants.ClockIntent;
}

ValueMetadata *type metadata accessor for AppIntentConstants.ClockIntent.ParamIdentifier()
{
  return &type metadata for AppIntentConstants.ClockIntent.ParamIdentifier;
}

void static KnowledgeFallbackHelper.shared.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for KnowledgeFallbackHelper;
  *(void *)(a1 + 32) = &protocol witness table for KnowledgeFallbackHelper;
}

uint64_t KnowledgeFallbackHelper.useIFFlow.getter()
{
  uint64_t v3 = &type metadata for Features;
  unint64_t v4 = lazy protocol witness table accessor for type Features and conformance Features();
  v2[0] = 6;
  char v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return v0 & 1;
}

Swift::Void __swiftcall KnowledgeFallbackHelper.recordEnablementDecline()()
{
  uint64_t v0 = type metadata accessor for RequestType();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for GenerativeAssistantSettingsUserDefaults();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for RequestType.knowledgeFallback(_:), v0);
  static GenerativeAssistantSettingsUserDefaults.incrementDecline(for:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t specialized KnowledgeFallbackHelper.isEnabled.getter()
{
  uint64_t v0 = type metadata accessor for GenerativeModelsAvailability.Availability();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v30[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for GenerativeModelsAvailability.Parameters();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for GenerativeModelsAvailability();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[3] = (uint64_t)&type metadata for Features;
  v30[4] = lazy protocol witness table accessor for type Features and conformance Features();
  LOBYTE(v30[0]) = 5;
  char v12 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  if ((v12 & 1) == 0)
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.information);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v14, v15)) {
      goto LABEL_13;
    }
    int v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v16 = 0;
    NSString v17 = "Knowledge fallback feature flag disabled";
LABEL_11:
    _os_log_impl(&dword_0, v14, v15, v17, v16, 2u);
LABEL_12:
    swift_slowDealloc();
LABEL_13:

    return 0;
  }
  if (AFMontaraRestricted())
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.information);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v14, v15)) {
      goto LABEL_13;
    }
    int v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v16 = 0;
    NSString v17 = "Knowledge fallback is restricted on this device.";
    goto LABEL_11;
  }
  GenerativeModelsAvailability.Parameters.init(useCaseIdentifier:)();
  static GenerativeModelsAvailability.current(parameters:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  GenerativeModelsAvailability.availability.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  int v20 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  int v21 = enum case for GenerativeModelsAvailability.Availability.available(_:);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v20 != v21)
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.information);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v14, v27)) {
      goto LABEL_13;
    }
    NSString v28 = (uint8_t *)swift_slowAlloc();
    v30[0] = swift_slowAlloc();
    *(_DWORD *)NSString v28 = 136315138;
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000000000AF400, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v14, v27, "Knowledge fallback not enabled because the Generative Models use case is not available: %s", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_12;
  }
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.information);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&dword_0, v23, v24, "Knowledge fallback is enabled", v25, 2u);
    swift_slowDealloc();
  }

  return 1;
}

uint64_t specialized KnowledgeFallbackHelper.responseType.getter()
{
  uint64_t v0 = type metadata accessor for GenerativeAssistantSettingsIntentHelper.RequestType();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v22[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for GenerativeAssistantSettingsIntentHelper.ResponseType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for GenerativeAssistantSettingsIntentHelper.RequestType.knowledgeFallback(_:), v0);
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentRequest.getter();
  swift_release();
  CurrentRequest.sessionId.getter();
  swift_release();
  static GenerativeAssistantSettingsIntentHelper.responseType(for:isExplicitRequest:sessionId:withTamale:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for GenerativeAssistantSettingsIntentHelper.ResponseType.siriXFallback(_:)) {
    return 3;
  }
  if (v8 == enum case for GenerativeAssistantSettingsIntentHelper.ResponseType.confirmationPrompt(_:)) {
    return 1;
  }
  if (v8 != enum case for GenerativeAssistantSettingsIntentHelper.ResponseType.enablementPrompt(_:))
  {
    if (v8 == enum case for GenerativeAssistantSettingsIntentHelper.ResponseType.passThrough(_:)) {
      return 2;
    }
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.information);
    NSString v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_0, v17, v18, "Unhandled responseType; skipping knowledge fallback", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 3;
  }
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  char v10 = dispatch thunk of CurrentDevice.isCarPlay.getter();
  swift_release();
  if ((v10 & 1) == 0)
  {
    static Device.current.getter();
    __swift_project_boxed_opaque_existential_1(v22, v22[3]);
    char v11 = dispatch thunk of DeviceState.isEyesFree.getter();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    if ((v11 & 1) == 0) {
      return 0;
    }
  }
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.information);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v9 = 2;
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl(&dword_0, v13, v14, "Skipping enablement confirmation for car. Enablement confirmation will be handled in the intent.", v15, 2u);
    swift_slowDealloc();
  }
  else
  {

    return 2;
  }
  return v9;
}

unint64_t lazy protocol witness table accessor for type KnowledgeFallbackResponseType and conformance KnowledgeFallbackResponseType()
{
  unint64_t result = lazy protocol witness table cache variable for type KnowledgeFallbackResponseType and conformance KnowledgeFallbackResponseType;
  if (!lazy protocol witness table cache variable for type KnowledgeFallbackResponseType and conformance KnowledgeFallbackResponseType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KnowledgeFallbackResponseType and conformance KnowledgeFallbackResponseType);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for KnowledgeFallbackResponseType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x47B3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KnowledgeFallbackResponseType()
{
  return &type metadata for KnowledgeFallbackResponseType;
}

ValueMetadata *type metadata accessor for KnowledgeFallbackHelper()
{
  return &type metadata for KnowledgeFallbackHelper;
}

BOOL Parse.isRejection.getter()
{
  uint64_t v1 = type metadata accessor for Parse();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  int v8 = (char *)v23 - v7;
  __chkstk_darwin(v6);
  char v10 = (char *)v23 - v9;
  char v11 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v11((char *)v23 - v9, v0, v1);
  if ((*(unsigned int (**)(char *, uint64_t))(v2 + 88))(v10, v1) == enum case for Parse.NLv4IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v2 + 96))(v10, v1);
    self;
    BOOL v12 = swift_dynamicCastObjCClass() != 0;
    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.information);
    v11(v8, v0, v1);
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      os_log_t v24 = v14;
      NSString v17 = (uint8_t *)v16;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v27 = v25;
      *(_DWORD *)NSString v17 = 136315138;
      v23[1] = v17 + 4;
      v11(v5, (uint64_t)v8, v1);
      uint64_t v18 = String.init<A>(describing:)();
      uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      int v20 = *(void (**)(char *, uint64_t))(v2 + 8);
      v20(v8, v1);
      os_log_t v21 = v24;
      _os_log_impl(&dword_0, v24, v15, "Unexpected parse type: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      int v20 = *(void (**)(char *, uint64_t))(v2 + 8);
      v20(v8, v1);
    }
    v20(v10, v1);
    return 0;
  }
  return v12;
}

uint64_t Parse.isCancel.getter()
{
  uint64_t v1 = type metadata accessor for Parse();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  int v8 = (char *)v23 - v7;
  __chkstk_darwin(v6);
  char v10 = (char *)v23 - v9;
  char v11 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v11((char *)v23 - v9, v0, v1);
  if ((*(unsigned int (**)(char *, uint64_t))(v2 + 88))(v10, v1) == enum case for Parse.NLv4IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v2 + 96))(v10, v1);
    self;
    if (swift_dynamicCastObjCClass())
    {
      swift_unknownObjectRelease();
      return 1;
    }
    else
    {
      self;
      BOOL v12 = swift_dynamicCastObjCClass() != 0;
      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.information);
    v11(v8, v0, v1);
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      os_log_t v24 = v14;
      NSString v17 = (uint8_t *)v16;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v27 = v25;
      *(_DWORD *)NSString v17 = 136315138;
      v23[1] = v17 + 4;
      v11(v5, (uint64_t)v8, v1);
      uint64_t v18 = String.init<A>(describing:)();
      uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      int v20 = *(void (**)(char *, uint64_t))(v2 + 8);
      v20(v8, v1);
      os_log_t v21 = v24;
      _os_log_impl(&dword_0, v24, v15, "Unexpected parse type: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      int v20 = *(void (**)(char *, uint64_t))(v2 + 8);
      v20(v8, v1);
    }
    v20(v10, v1);
    return 0;
  }
  return v12;
}

uint64_t Parse.confirmationResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Parse();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  char v10 = (char *)&v31 - v9;
  __chkstk_darwin(v8);
  BOOL v12 = (char *)&v31 - v11;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v13((char *)&v31 - v11, v1, v3);
  if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v12, v3) == enum case for Parse.NLv4IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v12, v3);
    self;
    if (swift_dynamicCastObjCClass())
    {
      swift_unknownObjectRelease();
      os_log_type_t v14 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
LABEL_14:
      uint64_t v27 = *v14;
      uint64_t v28 = type metadata accessor for ConfirmationResponse();
      uint64_t v29 = *(void *)(v28 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 104))(a1, v27, v28);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(a1, 0, 1, v28);
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
      swift_unknownObjectRelease();
LABEL_13:
      os_log_type_t v14 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
      goto LABEL_14;
    }
    self;
    uint64_t v26 = swift_dynamicCastObjCClass();
    swift_unknownObjectRelease();
    if (v26) {
      goto LABEL_13;
    }
    uint64_t v30 = type metadata accessor for ConfirmationResponse();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(a1, 1, 1, v30);
  }
  else
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.information);
    v13(v10, v1, v3);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      os_log_t v32 = v16;
      unint64_t v19 = (uint8_t *)v18;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v36 = v33;
      uint64_t v34 = a1;
      *(_DWORD *)unint64_t v19 = 136315138;
      NSString v31 = v19 + 4;
      v13(v7, (uint64_t)v10, v3);
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v36);
      a1 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void (**)(char *, uint64_t))(v4 + 8);
      v22(v10, v3);
      os_log_t v23 = v32;
      _os_log_impl(&dword_0, v32, v17, "Unexpected parse type: %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v22 = *(void (**)(char *, uint64_t))(v4 + 8);
      v22(v10, v3);
    }
    uint64_t v24 = type metadata accessor for ConfirmationResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a1, 1, 1, v24);
    return ((uint64_t (*)(char *, uint64_t))v22)(v12, v3);
  }
}

unint64_t static PatternHelper.makeParameters(jsonData:)()
{
  Swift::String v0 = Data.base64EncodedString(options:)(0);
  unint64_t v1 = specialized static PatternHelper.makeParameters(jsonBase64:)(v0._countAndFlagsBits, (unint64_t)v0._object);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t specialized static PatternHelper.makeParameters(jsonBase64:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v10 = (char *)v55 - v9;
  static String.Encoding.utf8.getter();
  uint64_t v11 = Data.init(base64Encoded:options:)();
  if (v12 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_10:
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.information);
    swift_bridgeObjectRetain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      v59[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v27, v28, "Failed to base64 decode json %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
  }
  uint64_t v13 = v11;
  unint64_t v14 = v12;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  uint64_t v15 = String.init(data:encoding:)();
  unint64_t v17 = v16;
  outlined consume of Data?(v13, v14);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v10, v4);
  if (!v17) {
    goto LABEL_10;
  }
  static String.Encoding.utf8.getter();
  uint64_t v19 = String.data(using:allowLossyConversion:)();
  unint64_t v21 = v20;
  v18(v8, v4);
  if (v21 >> 60 != 15)
  {
    os_log_t v32 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v59[0] = 0;
    id v34 = [v32 JSONObjectWithData:isa options:0 error:v59];

    id v35 = v59[0];
    if (v34)
    {
      swift_bridgeObjectRelease();
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if (swift_dynamicCast())
      {
        outlined consume of Data?(v19, v21);
        return v58;
      }
      unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
      uint64_t v47 = v19;
    }
    else
    {
      uint64_t v36 = v35;
      uint64_t v37 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      uint64_t v39 = __swift_project_value_buffer(v38, (uint64_t)static Logger.information);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v57 = v39;
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      BOOL v42 = os_log_type_enabled(v40, v41);
      uint64_t v56 = v19;
      if (v42)
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = (void *)swift_slowAlloc();
        uint64_t v58 = (uint64_t)v37;
        v59[0] = v44;
        *(_DWORD *)uint64_t v43 = 136315138;
        v55[1] = v43 + 4;
        swift_errorRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v45 = String.init<A>(describing:)();
        uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl(&dword_0, v40, v41, "Failed to convert JSON to dictionary %s", v43, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_bridgeObjectRetain();
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        v59[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, (uint64_t *)v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v48, v49, "Failed to convert JSON to dictionary %s", v50, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v51 = v56;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_AB370;
      *(void *)(inited + 32) = 0x726F727265;
      *(void *)(inited + 40) = 0xE500000000000000;
      v59[0] = v37;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v53 = String.init<A>(describing:)();
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = v53;
      *(void *)(inited + 56) = v54;
      unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      swift_errorRelease();
      uint64_t v47 = v51;
    }
    outlined consume of Data?(v47, v21);
    return v30;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.information);
  os_log_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&dword_0, v23, v24, "Failed to encode JSON data using utf8", v25, 2u);
    swift_slowDealloc();
  }

  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
}

id specialized static PatternHelper.bundle(from:with:)(uint64_t a1, void *a2)
{
  unint64_t v30 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Logger?);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v29 - v6;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = Apple_Parsec_Responseframework_PatternModel.patternBundleID.getter();
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v16 = [self bundleWithIdentifier:v15];

    if (v16)
    {
      return v16;
    }
    else
    {
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v22 = __swift_project_value_buffer(v8, (uint64_t)static Logger.information);
      os_log_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
      v23(v11, v22, v8);
      v23(v7, (uint64_t)v11, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
      outlined init with copy of Logger?((uint64_t)v7, (uint64_t)v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
      {
        outlined destroy of Logger?((uint64_t)v5);
      }
      else
      {
        os_log_type_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          *(_DWORD *)uint64_t v26 = 136315650;
          uint64_t v27 = StaticString.description.getter();
          uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v26 + 12) = 2048;
          uint64_t v31 = 47;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v26 + 22) = 2080;
          uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000B2, 0x80000000000AF430, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_0, v24, v25, "FatalError at %s:%lu - %s", (uint8_t *)v26, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v8);
      }
      static SiriKitLifecycle._logCrashToEventBus(_:)();
      id result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v8, (uint64_t)static Logger.information);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl(&dword_0, v18, v19, "No bundle was specified on the PatternModel. Defaulting to the InformationPlugin Bundle.", v20, 2u);
      swift_slowDealloc();
    }

    unint64_t v21 = v30;
    return v21;
  }
  return result;
}

ValueMetadata *type metadata accessor for PatternHelper()
{
  return &type metadata for PatternHelper;
}

uint64_t outlined init with copy of Logger?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Logger?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Logger?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Logger?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id one-time initialization function for bundle()
{
  type metadata accessor for PegasusPatternFlowFactory();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = [self bundleForClass:ObjCClassFromMetadata];
  static PegasusPatternFlowFactory.bundle = (uint64_t)result;
  return result;
}

uint64_t PegasusPatternFlowFactory.__allocating_init(outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  outlined init with copy of OutputPublisherAsync(a1, v8 + 16);
  outlined init with copy of OutputPublisherAsync(a3, v8 + 56);
  *(void *)(v8 + 96) = a2;
  static PatternFlowProvidingHelper.unwrap(_:with:)(a4, a1, (uint64_t *)v10);
  outlined destroy of PatternFlowProviding?(a4);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a1);
  outlined init with take of PatternFlowProviding(v10, v8 + 104);
  return v8;
}

uint64_t PegasusPatternFlowFactory.init(outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  outlined init with copy of OutputPublisherAsync(a1, v4 + 16);
  outlined init with copy of OutputPublisherAsync(a3, v4 + 56);
  *(void *)(v4 + 96) = a2;
  static PatternFlowProvidingHelper.unwrap(_:with:)(a4, a1, (uint64_t *)v10);
  outlined destroy of PatternFlowProviding?(a4);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a1);
  outlined init with take of PatternFlowProviding(v10, v4 + 104);
  return v4;
}

uint64_t PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v22 = a4;
  unint64_t v23 = a3;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v13 - 8);
  NSString v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = 0;
  *((void *)v18 + 4) = v22;
  *((void *)v18 + 5) = a5;
  *((void *)v18 + 6) = v6;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v18[v17], (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  os_log_type_t v19 = (uint64_t *)&v18[(v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8];
  unint64_t v20 = v23;
  *os_log_type_t v19 = a2;
  v19[1] = v20;
  swift_retain();
  swift_retain();
  outlined copy of Data?(a2, v20);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:), (uint64_t)v18);
  return swift_release();
}

uint64_t closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a4;
  v7[3] = a5;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:)
                                        + async function pointer to specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:));
  uint64_t v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  void *v9 = v7;
  v9[1] = closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:);
  return v11(a7);
}

uint64_t closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 40) = a1;
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:), 0, 0);
}

uint64_t closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:)()
{
  (*(void (**)(void))(v0 + 16))(*(void *)(v0 + 40));
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_49C34()
{
  uint64_t v1 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  unint64_t v6 = *(void *)(v0 + v5 + 8);
  if (v6 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v0 + v5), v6);
  }

  return _swift_deallocObject(v0, v5 + 16, v3 | 7);
}

uint64_t partial apply for closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for Apple_Parsec_Responseframework_PatternModel() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  *(_OWORD *)(v4 + 16) = v5;
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:)
                                       + async function pointer to specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:));
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 32) = v6;
  *unint64_t v6 = v4;
  v6[1] = closure #1 in PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:completion:);
  return v8(v3);
}

uint64_t PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:)(uint64_t a1)
{
  long long v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:)
                                       + async function pointer to specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for Flow.onAsync(input:) in conformance InformationRoutingFlow;
  return v5(a1);
}

uint64_t PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[51] = a3;
  v4[52] = v3;
  v4[49] = a1;
  v4[50] = a2;
  uint64_t v5 = type metadata accessor for PerformanceUtil.Ticket();
  v4[53] = v5;
  v4[54] = *(void *)(v5 - 8);
  v4[55] = swift_task_alloc();
  v4[56] = swift_task_alloc();
  v4[57] = swift_task_alloc();
  v4[58] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v4[59] = v6;
  v4[60] = *(void *)(v6 - 8);
  v4[61] = swift_task_alloc();
  return _swift_task_switch(PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:), 0, 0);
}

uint64_t PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:)()
{
  uint64_t v2 = v0[60];
  uint64_t v1 = v0[61];
  uint64_t v3 = v0[59];
  uint64_t v4 = v0[49];
  v0[62] = Apple_Parsec_Responseframework_PatternModel.patternID.getter();
  v0[63] = v5;
  v0[64] = type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  uint64_t v6 = swift_task_alloc();
  *(void *)(v6 + 16) = v4;
  Date.init()();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  LOBYTE(v13) = 2;
  uint64_t v12 = 50;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  v0[65] = v0[45];
  if (one-time initialization token for bundle != -1) {
    swift_once();
  }
  id v7 = specialized static PatternHelper.bundle(from:with:)(v0[49], (void *)static PegasusPatternFlowFactory.bundle);
  v0[66] = v7;
  Date.init()();
  LOBYTE(v12) = 2;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v8 = self;
  NSString v9 = String._bridgeToObjectiveC()();
  v0[67] = v9;
  v0[2] = v0;
  v0[7] = v0 + 46;
  v0[3] = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  uint64_t v10 = swift_continuation_init();
  v0[20] = _NSConcreteStackBlock;
  v0[21] = 0x40000000;
  v0[22] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned PatternExecutionResult, @unowned NSError?) -> () with result type PatternExecutionResult;
  v0[23] = &block_descriptor_2;
  v0[24] = v10;
  objc_msgSend(v8, "load:patternId:completion:", v7, v9, v0 + 20, 50, v12, v13, partial apply for closure #1 in PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:), v6, v14);
  return _swift_continuation_await(v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 544) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }
  else
  {
    uint64_t v2 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  char **p_name;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(unint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  uint64_t v44 = v0;
  uint64_t v1 = *(void **)(v0 + 536);
  uint64_t v2 = *(void **)(v0 + 368);
  *(void *)(v0 + 552) = v2;

  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.information);
  uint64_t v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.debug.getter();
  uint64_t p_name = &stru_CFFF8.name;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    *(void *)(v0 + 376) = [v4 patternType];
    type metadata accessor for PatternType(0);
    NSString v9 = String.init<A>(reflecting:)();
    *(void *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_0, v5, v6, "RenderPegasusFlow found pattern of type %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t p_name = (char **)(&stru_CFFF8 + 8);
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v11 = (int *)objc_msgSend(v4, p_name[148]);
  if (v11 == (int *)((char *)&dword_0 + 1))
  {
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl(&dword_0, v18, v19, "RenderPegasusFlow making a ResultSet Flow", v20, 2u);
      swift_slowDealloc();
    }
    unint64_t v21 = *(void *)(v0 + 416);

    Date.init()();
    LOBYTE(v41) = 2;
    PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();

    outlined init with copy of OutputPublisherAsync(v21 + 104, v0 + 120);
    static PatternFlowProvidingHelper.unwrap(_:with:)(v0 + 120, v21 + 16, (uint64_t *)(v0 + 320));
    BOOL v42 = (char *)&async function pointer to specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)
        + async function pointer to specialized static ResultSetFlowFactory.makeContinuationFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 584) = v22;
    *uint64_t v22 = v0;
    v22[1] = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
    unint64_t v46 = v21 + 56;
    uint64_t v47 = v0 + 320;
LABEL_18:
    __asm { BR              X8; specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:) }
  }
  if (v11 == &dword_4)
  {
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v25 = 0;
      _os_log_impl(&dword_0, v23, v24, "RenderPegasusFlow making a DetailedResult Flow", v25, 2u);
      swift_slowDealloc();
    }
    uint64_t v26 = *(void *)(v0 + 416);

    Date.init()();
    PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
    outlined init with copy of OutputPublisherAsync(v26 + 104, v0 + 240);
    BOOL v42 = (char *)&async function pointer to specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:)
        + async function pointer to specialized static DetailedResultFlowFactory.makeDetailedResultFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:informationViewFactory:deviceState:patternFlowProvider:);
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 608) = v27;
    NSObject *v27 = v0;
    v27[1] = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
    unint64_t v46 = v26 + 56;
    uint64_t v47 = v0 + 240;
    goto LABEL_18;
  }
  if (v11 == (int *)((char *)&dword_0 + 3))
  {
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_0, v12, v13, "RenderPegasusFlow making a SimpleResult Flow", v14, 2u);
      swift_slowDealloc();
    }
    uint64_t v15 = *(void *)(v0 + 416);

    Date.init()();
    PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
    outlined init with copy of OutputPublisherAsync(v15 + 104, v0 + 280);
    uint64_t v16 = type metadata accessor for PatternExecutor();
    *(void *)(v0 + 80) = swift_allocObject();
    *(void *)(v0 + 104) = v16;
    *(void *)(v0 + 112) = &protocol witness table for PatternExecutor;
    BOOL v42 = (char *)&async function pointer to specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:)
        + async function pointer to specialized ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
    unint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 560) = v17;
    *unint64_t v17 = v0;
    v17[1] = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
    unint64_t v46 = v0 + 280;
    uint64_t v47 = v0 + 80;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v28 = Logger.logObject.getter();
  uint64_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    unint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v30 = 0;
    _os_log_impl(&dword_0, v28, v29, "RenderPegasusFlow received unsupported pattern type. Only simple result is supported at the moment.", v30, 2u);
    swift_slowDealloc();
  }
  uint64_t v31 = *(void **)(v0 + 528);
  uint64_t v32 = *(void *)(v0 + 464);
  uint64_t v33 = *(void *)(v0 + 424);
  id v34 = *(void *)(v0 + 432);
  id v35 = *(void *)(v0 + 416);

  outlined init with copy of OutputPublisherAsync(v35 + 16, v0 + 200);
  uint64_t v36 = *(void *)(v35 + 96);
  type metadata accessor for ErrorFlowFactory();
  uint64_t v37 = swift_allocObject();
  outlined init with take of PatternFlowProviding((long long *)(v0 + 200), v37 + 16);
  *(void *)(v37 + 56) = v36;
  swift_retain();
  uint64_t v38 = ErrorFlowFactory.makeErrorFlow(message:)(1701736302, 0xE400000000000000);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v39 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v39(v38 | 0xC000000000000000);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)(uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[72];
  uint64_t v2 = (void *)v0[69];
  uint64_t v3 = (void *)v0[66];
  uint64_t v5 = v0[57];
  uint64_t v4 = v0[58];
  uint64_t v6 = v0[53];
  id v7 = v0[54];
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v8(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v9 = (uint64_t (*)(uint64_t))v0[1];
  return v9(v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void **)(v0 + 552);
  uint64_t v2 = *(void *)(v0 + 456);
  uint64_t v3 = *(void *)(v0 + 464);
  uint64_t v4 = *(void *)(v0 + 424);
  uint64_t v5 = *(void *)(v0 + 432);

  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v2, v4);
  v6(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)(uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[75];
  uint64_t v2 = (void *)v0[69];
  uint64_t v3 = (void *)v0[66];
  uint64_t v4 = v0[58];
  uint64_t v5 = v0[56];
  uint64_t v6 = v0[53];
  id v7 = v0[54];
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();

  swift_release();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v8(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v9 = (uint64_t (*)(uint64_t))v0[1];
  return v9(v1 | 0x4000000000000000);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = (void *)v0[69];
  uint64_t v2 = (void *)v0[66];
  uint64_t v3 = v0[58];
  uint64_t v4 = v0[56];
  uint64_t v5 = v0[53];
  uint64_t v6 = v0[54];
  outlined destroy of PatternFlowProviding?((uint64_t)(v0 + 15));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  id v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)(unint64_t);
  uint64_t v11;

  uint64_t v1 = v0[78];
  uint64_t v2 = (void *)v0[69];
  uint64_t v3 = (void *)v0[66];
  uint64_t v4 = v0[58];
  uint64_t v6 = v0[54];
  uint64_t v5 = v0[55];
  id v7 = v0[53];
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();

  swift_release();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v8(v5, v7);
  v8(v4, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v9 = (uint64_t (*)(unint64_t))v0[1];
  return v9(v1 | 0x8000000000000000);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void **)(v0 + 552);
  uint64_t v2 = *(void *)(v0 + 464);
  uint64_t v4 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v5 = *(void *)(v0 + 424);

  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v3, v5);
  v6(v2, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = (void *)v0[67];
  uint64_t v2 = (void *)v0[66];
  uint64_t v3 = v0[58];
  uint64_t v4 = v0[53];
  uint64_t v5 = v0[54];
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2 + 80;
  uint64_t v6 = *v2 + 280;
  *(void *)(*v2 + 568) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1(v5);
    outlined destroy of PatternFlowProviding?(v6);
    id v7 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }
  else
  {
    *(void *)(v4 + 576) = a1;
    __swift_destroy_boxed_opaque_existential_1(v5);
    outlined destroy of PatternFlowProviding?(v6);
    id v7 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }
  return _swift_task_switch(v7, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2 + 320;
  *(void *)(*v2 + 592) = v1;
  swift_task_dealloc();
  if (v1)
  {
    outlined destroy of PatternFlowProviding?(v5);
    uint64_t v6 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }
  else
  {
    *(void *)(v4 + 600) = a1;
    outlined destroy of PatternFlowProviding?(v5);
    outlined destroy of PatternFlowProviding?(v4 + 120);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }
  return _swift_task_switch(v6, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2 + 240;
  *(void *)(*v2 + 616) = v1;
  swift_task_dealloc();
  if (v1)
  {
    outlined destroy of PatternFlowProviding?(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }
  else
  {
    *(void *)(v4 + 624) = a1;
    outlined destroy of PatternFlowProviding?(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:);
  }
  return _swift_task_switch(v6, 0, 0);
}

Swift::Void __swiftcall PegasusPatternFlowFactory.PatternUseCase.log()()
{
  switch(v0 >> 62)
  {
    case 1uLL:
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.information);
      os_log_t oslog = Logger.logObject.getter();
      os_log_type_t v2 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(oslog, v2))
      {
        uint64_t v3 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v3 = 0;
        uint64_t v4 = "PegasusPatternFlowFactory returning a Result Set Continuation Flow";
        goto LABEL_18;
      }
      break;
    case 2uLL:
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.information);
      os_log_t oslog = Logger.logObject.getter();
      os_log_type_t v2 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(oslog, v2))
      {
        uint64_t v3 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v3 = 0;
        uint64_t v4 = "PegasusPatternFlowFactory returning a Detailed Result Flow";
        goto LABEL_18;
      }
      break;
    case 3uLL:
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static Logger.information);
      os_log_t oslog = Logger.logObject.getter();
      os_log_type_t v2 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(oslog, v2))
      {
        uint64_t v3 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v3 = 0;
        uint64_t v4 = "PegasusPatternFlowFactory returning an Error Flow: Received Unsupported Pattern Type";
        goto LABEL_18;
      }
      break;
    default:
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v1 = type metadata accessor for Logger();
      __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
      os_log_t oslog = Logger.logObject.getter();
      os_log_type_t v2 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(oslog, v2))
      {
        uint64_t v3 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v3 = 0;
        uint64_t v4 = "PegasusPatternFlowFactory returning a SimpleResult Flow";
LABEL_18:
        _os_log_impl(&dword_0, oslog, v2, v4, v3, 2u);
        swift_slowDealloc();
      }
      break;
  }
}

uint64_t PegasusPatternFlowFactory.PatternUseCase.extractFlow()(unint64_t a1)
{
  uint64_t v1 = a1;
  switch(a1 >> 62)
  {
    case 1uLL:
    case 2uLL:
    case 3uLL:
      uint64_t v1 = a1 & 0x3FFFFFFFFFFFFFFFLL;
      break;
    default:
      break;
  }
  swift_retain();
  return v1;
}

uint64_t closure #1 in PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:)@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = Apple_Parsec_Responseframework_PatternModel.patternParameters.getter();
  unint64_t v4 = v3;
  Swift::String v5 = Data.base64EncodedString(options:)(0);
  unint64_t v6 = specialized static PatternHelper.makeParameters(jsonBase64:)(v5._countAndFlagsBits, (unint64_t)v5._object);
  swift_bridgeObjectRelease();
  uint64_t result = outlined consume of Data._Representation(v2, v4);
  *a1 = v6;
  return result;
}

uint64_t PegasusPatternFlowFactory.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  return v0;
}

uint64_t PegasusPatternFlowFactory.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);

  return _swift_deallocClassInstance(v0, 144, 7);
}

uint64_t specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:)(uint64_t a1)
{
  *(void *)(v2 + 96) = v1;
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 104) = v4;
  *unint64_t v4 = v2;
  v4[1] = specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:);
  return PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:)(a1, 0, 0xF000000000000000);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  unint64_t v3 = *v2;
  *(void *)(v3 + 112) = a1;
  *(void *)(v3 + 120) = v1;
  swift_task_dealloc();
  if (v1) {
    unint64_t v4 = specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:);
  }
  else {
    unint64_t v4 = specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:);
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:)()
{
  unint64_t v1 = *(void *)(v0 + 112);
  PegasusPatternFlowFactory.PatternUseCase.log()();
  switch(v1 >> 62)
  {
    case 1uLL:
    case 2uLL:
    case 3uLL:
      uint64_t v2 = *(void *)(v0 + 112) & 0x3FFFFFFFFFFFFFFFLL;
      break;
    default:
      uint64_t v2 = *(void *)(v0 + 112);
      break;
  }
  unint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  unint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  unint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)unint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, v3, "ResponseFlowFactory.makeRenderPatternFlow failed to generate pattern %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = *(void *)(v0 + 96);
  outlined init with copy of OutputPublisherAsync(v7 + 16, v0 + 16);
  uint64_t v8 = *(void *)(v7 + 96);
  type metadata accessor for ErrorFlowFactory();
  uint64_t v9 = swift_allocObject();
  outlined init with take of PatternFlowProviding((long long *)(v0 + 16), v9 + 16);
  *(void *)(v9 + 56) = v8;
  swift_retain();
  uint64_t v10 = ErrorFlowFactory.makeErrorFlow(message:)(1701736302, 0xE400000000000000);
  swift_release();
  swift_errorRelease();
  uint64_t v11 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v11(v10);
}

uint64_t partial apply for closure #1 in PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:)@<X0>(unint64_t *a1@<X8>)
{
  return closure #1 in PegasusPatternFlowFactory.selectPatternFlow(for:pegasusConversationContext:)(a1);
}

uint64_t type metadata accessor for PegasusPatternFlowFactory()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for PegasusPatternFlowFactory.PatternUseCase(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for PegasusPatternFlowFactory.PatternUseCase()
{
  return swift_release();
}

void *assignWithCopy for PegasusPatternFlowFactory.PatternUseCase(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *assignWithTake for PegasusPatternFlowFactory.PatternUseCase(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PegasusPatternFlowFactory.PatternUseCase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PegasusPatternFlowFactory.PatternUseCase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)uint64_t result = a2 - 125;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for PegasusPatternFlowFactory.PatternUseCase(void *a1)
{
  return *a1 >> 62;
}

void *destructiveProjectEnumData for PegasusPatternFlowFactory.PatternUseCase(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *destructiveInjectEnumTag for PegasusPatternFlowFactory.PatternUseCase(uint64_t *result, uint64_t a2)
{
  *uint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for PegasusPatternFlowFactory.PatternUseCase()
{
  return &type metadata for PegasusPatternFlowFactory.PatternUseCase;
}

uint64_t SportsProperty.apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 1:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.teamQId.setter();
      break;
    case 2:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.league.setter();
      break;
    case 3:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.leagueQId.setter();
      break;
    case 4:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.sport.setter();
      break;
    case 5:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.sportQId.setter();
      break;
    case 6:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.athlete.setter();
      break;
    case 7:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.athleteQId.setter();
      break;
    default:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.team.setter();
      break;
  }
  return result;
}

uint64_t static PersonalizationLevel.from(uso:)@<X0>(unint64_t a1@<X8>)
{
  unint64_t v2 = dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter();
  if (v2)
  {
    unint64_t v3 = v2;
    if (v2 >> 62) {
      goto LABEL_25;
    }
    for (uint64_t i = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8)); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v16 = a1;
      unint64_t v5 = 0;
      a1 = v3 & 0xC000000000000001;
      while (1)
      {
        if (a1) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          swift_retain();
        }
        dispatch thunk of CodeGenListEntry.entry.getter();
        if (v17
          && (uint64_t v6 = dispatch thunk of UsoEntity_common_SportsItem.type.getter(), swift_release(), v6)
          && (uint64_t v7 = dispatch thunk of UsoEntity_common_SportsItemType.name.getter(), v9 = v8, swift_release(), v9))
        {
          if (v7 == 0xD000000000000015 && v9 == 0x80000000000AF780)
          {
            swift_bridgeObjectRelease();
            swift_release();
LABEL_23:
            swift_bridgeObjectRelease();
            unint64_t v17 = v5;
            return closure #2 in static PersonalizationLevel.from(uso:)(&v17, v16);
          }
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_release();
          swift_bridgeObjectRelease();
          if (v10) {
            goto LABEL_23;
          }
        }
        else
        {
          swift_release();
        }
        unint64_t v11 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          break;
        }
        ++v5;
        if (v11 == i)
        {
          swift_bridgeObjectRelease();
          a1 = v16;
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_25:
      ;
    }
    swift_bridgeObjectRelease();
LABEL_27:
    uint64_t v15 = type metadata accessor for PersonalizationLevel();
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
  else
  {
    uint64_t v12 = type metadata accessor for PersonalizationLevel();
    uint64_t v13 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    return v13(a1, 1, 1, v12);
  }
}

uint64_t closure #2 in static PersonalizationLevel.from(uso:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *a1;
  uint64_t result = dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter();
  if (!result)
  {
LABEL_26:
    uint64_t v13 = type metadata accessor for PersonalizationLevel();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a2, 1, 1, v13);
  }
  if ((result & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8)))
  {
    swift_retain();
LABEL_6:
    swift_bridgeObjectRelease();
    dispatch thunk of CodeGenListEntry.entry.getter();
    swift_release();
    if (v14)
    {
      uint64_t v5 = dispatch thunk of UsoEntity_common_SportsItem.name.getter();
      uint64_t v7 = v6;
      swift_release();
      if (v7)
      {
        if (v5 == 0xD00000000000001ALL && v7 == 0x80000000000AF7A0
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v8 = (unsigned int *)&enum case for PersonalizationLevel.team(_:);
LABEL_25:
          uint64_t v10 = *v8;
          uint64_t v11 = type metadata accessor for PersonalizationLevel();
          uint64_t v12 = *(void *)(v11 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(a2, v10, v11);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
        }
        if (v5 == 0xD00000000000001CLL && v7 == 0x80000000000AF7C0
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v8 = (unsigned int *)&enum case for PersonalizationLevel.league(_:);
          goto LABEL_25;
        }
        if (v5 == 0xD00000000000001DLL && v7 == 0x80000000000AF7E0
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v8 = (unsigned int *)&enum case for PersonalizationLevel.athlete(_:);
          goto LABEL_25;
        }
        if (v5 == 0xD00000000000001BLL && v7 == 0x80000000000AF800)
        {
          swift_bridgeObjectRelease();
LABEL_24:
          uint64_t v8 = (unsigned int *)&enum case for PersonalizationLevel.sport(_:);
          goto LABEL_25;
        }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          goto LABEL_24;
        }
      }
    }
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t static SportsItem.empty.getter()
{
  return SportsItem.init(sport:league:team:athlete:sportQId:leagueQId:teamQId:athleteQId:)();
}

uint64_t specialized static UsoEntity_common_SportsItem.from(resultEntity:logger:)(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t v2 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v2 - 8);
  os_log_type_t v41 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v40 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v39 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Typespb_Domain();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v38 - v14;
  Apple_Parsec_Siri_Context_ResultEntity.domain.getter();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, enum case for Typespb_Domain.sports(_:), v9);
  lazy protocol witness table accessor for type Typespb_Domain and conformance Typespb_Domain(&lazy protocol witness table cache variable for type Typespb_Domain and conformance Typespb_Domain, (void (*)(uint64_t))&type metadata accessor for Typespb_Domain);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v16 = v43;
  uint64_t v17 = v46;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, v9);
  v18(v15, v9);
  uint64_t v19 = 0;
  if (v16 == v17)
  {
    Apple_Parsec_Siri_Context_ResultEntity.usoEntity.getter();
    uint64_t v45 = 0;
    long long v43 = 0u;
    long long v44 = 0u;
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Typespb_Domain and conformance Typespb_Domain(&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UsoGraph);
    Message.init(serializedData:extensions:partial:options:)();
    uint64_t v20 = v7;
    uint64_t v21 = v40;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v6, 0, 1, v7);
    uint64_t v22 = v39;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v39, v6, v7);
    static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    swift_retain_n();
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v28 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)&v43);
      uint64_t v22 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v24, v25, "Got USO graph for alternative entity: %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    if (static UsoConversionUtils.extractFirstEntityFromGraph(graph:)())
    {
      swift_retain();
      static UsoEntity_CodeGenConverter.convert(entity:)();
      swift_release();
      if (*((void *)&v44 + 1))
      {
        type metadata accessor for UsoEntity_common_SportsItem();
        if (swift_dynamicCast())
        {
          swift_release();
          swift_release();
          uint64_t v19 = v46;
          (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v20);
          return v19;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v43, &demangling cache variable for type metadata for Any?);
      }
      swift_retain_n();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v42 = v20;
        id v35 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v43 = swift_slowAlloc();
        *(_DWORD *)id v35 = 136315138;
        uint64_t v36 = UsoEntity.valueTypeString.getter();
        uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v33, v34, "Entity was not a sports entity but was a %s. Will ignore item", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
        swift_release();

        (*(void (**)(char *, uint64_t))(v21 + 8))(v39, v42);
        return 0;
      }

      swift_release_n();
    }
    else
    {
      unint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl(&dword_0, v30, v31, "Unable to extract sports entity from USO graph", v32, 2u);
        swift_slowDealloc();
        swift_release();

LABEL_3:
        (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v20);
        return 0;
      }
    }
    swift_release();
    goto LABEL_3;
  }
  return v19;
}

uint64_t specialized static SportsProperty.from(entity:)()
{
  if (dispatch thunk of UsoEntity_common_SportsItem.type.getter())
  {
    uint64_t v0 = dispatch thunk of UsoEntity_common_SportsItemType.name.getter();
    uint64_t v2 = v1;
    swift_release();
    uint64_t v3 = dispatch thunk of UsoEntity_common_SportsItem.name.getter();
    if (v2 && v4)
    {
      uint64_t v5 = v3;
      if (v0 == 0x74726F7073 && v2 == 0xE500000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x69715F74726F7073 && v2 == 0xE900000000000064
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x65756761656CLL && v2 == 0xE600000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x715F65756761656CLL && v2 == 0xEA00000000006469
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 1835099508 && v2 == 0xE400000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x6469715F6D616574 && v2 == 0xE800000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x6574656C687461 && v2 == 0xE700000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x5F6574656C687461 && v2 == 0xEB00000000646971)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return v5;
      }
    }
  }
  else
  {
    dispatch thunk of UsoEntity_common_SportsItem.name.getter();
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t outlined copy of SportsProperty(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 7u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for SportsProperty(uint64_t a1)
{
  return outlined consume of SportsProperty(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for SportsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of SportsProperty(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SportsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of SportsProperty(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of SportsProperty(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SportsProperty(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of SportsProperty(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsProperty(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 7) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsProperty(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 249;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsProperty()
{
  return &type metadata for SportsProperty;
}

uint64_t lazy protocol witness table accessor for type Typespb_Domain and conformance Typespb_Domain(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t CommonCATs.genericError()(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t, unint64_t, unint64_t, void *))((char *)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:)
                                                                                   + async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  unsigned int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unsigned int v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v5(a1, 0xD00000000000001FLL, 0x80000000000AF820, &_swiftEmptyArrayStorage);
}

uint64_t CommonCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  outlined init with copy of URL?(a1, (uint64_t)v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v11 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1);
  return v11;
}

uint64_t CommonCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v8 - 8);
  outlined init with copy of URL?(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v10 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1);
  return v10;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CommonCATs.__deallocating_deinit()
{
  uint64_t v0 = CATWrapper.deinit();

  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for CommonCATs()
{
  uint64_t result = type metadata singleton initialization cache for CommonCATs;
  if (!type metadata singleton initialization cache for CommonCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for CommonCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for CommonCATs()
{
  return type metadata accessor for CommonCATs();
}

uint64_t static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return _swift_task_switch(static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:), 0, 0);
}

uint64_t static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:)()
{
  type metadata accessor for SiriSuggestionsBrokerProvider();
  *(void *)(v0 + 112) = static SiriSuggestionsBrokerProvider.instance.getter();
  lazy protocol witness table accessor for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:), v2, v1);
}

{
  uint64_t v1;

  dispatch thunk of SiriSuggestionsBrokerProvider.getBrokerInstance()();
  swift_release();
  return _swift_task_switch(static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:), 0, 0);
}

{
  void *v0;
  long long *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;

  uint64_t v1 = (long long *)(v0 + 7);
  if (v0[10])
  {
    outlined init with take of PatternFlowProviding(v1, (uint64_t)(v0 + 2));
    uint64_t v2 = (void *)swift_task_alloc();
    v0[15] = v2;
    *uint64_t v2 = v0;
    v2[1] = static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:);
    unsigned int v3 = v0[12];
    uint64_t v4 = v0[13];
    return static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:)(v3, (uint64_t)(v0 + 2), v4);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v1, &demangling cache variable for type metadata for SiriSuggestionsBroker?);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.information);
    uint64_t v7 = Logger.logObject.getter();
    uint64_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_0, v7, v8, "SiriSuggestionBroker instance is nil. Returning nil suggestion", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = v0[12];

    uint64_t v11 = type metadata accessor for HintsUI();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(static SiriSuggestionProvider.getSiriSuggestion(suggestionContextData:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t lazy protocol witness table accessor for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider;
  if (!lazy protocol witness table cache variable for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider)
  {
    type metadata accessor for SiriSuggestionsBrokerProvider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider);
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unsigned int v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Decodable & Encodable & Sendable>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  unsigned int v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of IdentifiedUser?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Decodable & Encodable & Sendable));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Decodable & Encodable & Sendable(v17, (_OWORD *)(v3[7] + 48 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 64;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    unsigned int v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  unsigned int v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of IdentifiedUser?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned int v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    BOOL v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    unsigned int v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  unsigned int v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of IdentifiedUser?(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    char v10 = v15[0];
    uint64_t v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  void *i;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<InformationViewFactory.AceViewCategory, Int>);
    unsigned int v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (void *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *((unsigned char *)i - 8);
      uint64_t v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v3[6] + result) = v5;
      *(void *)(v3[7] + 8 * result) = v6;
      uint64_t v9 = v3[2];
      char v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[12] = v4;
  v3[13] = *(void *)(v4 - 8);
  v3[14] = swift_task_alloc();
  return _swift_task_switch(static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:), 0, 0);
}

uint64_t static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:)()
{
  static AceService.currentAsync.getter();
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  dispatch thunk of AceServiceInvokerAsync.currentStartRequestId()();
  uint64_t v2 = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  if (!v2) {
    goto LABEL_4;
  }
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[11];
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    outlined destroy of Any?(v0[11], &demangling cache variable for type metadata for UUID?);
LABEL_4:
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.information);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_0, v7, v8, "SiriSuggestionProvider getSiriSuggestion snippet: unable to get requestId from runtime", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = v0[8];

    uint64_t v11 = type metadata accessor for HintsUI();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  (*(void (**)(void, void, void))(v0[13] + 32))(v0[14], v0[11], v0[12]);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  v0[15] = __swift_project_value_buffer(v14, (uint64_t)static Logger.information);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "SiriSuggestionProvider getSiriSuggestion snippet: calling provided SiriSuggestionsBroker", v17, 2u);
    swift_slowDealloc();
  }
  uint64_t v18 = (void *)v0[9];

  __swift_project_boxed_opaque_existential_1(v18, v18[3]);
  unint64_t v19 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
  v0[16] = v19;
  v0[17] = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v20 = (void *)swift_task_alloc();
  v0[18] = v20;
  *uint64_t v20 = v0;
  v20[1] = static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:);
  uint64_t v21 = v0[14];
  uint64_t v22 = v0[10];
  uint64_t v23 = v0[8];
  return dispatch thunk of SiriSuggestionsBroker.doSiriHints(requestId:applicationSessionId:suggestionContextData:sourceDomainOwner:intentProperties:verb:executionProperties:)(v23, v21, 0, 0, v22, 0, 0, v19);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = static SiriSuggestionProvider.getSiriSuggestion(suggestionBroker:suggestionContextData:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[7] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v1, v2, "SiriSuggestionProvider getSiriSuggestion snippet: error getting suggestions: %@", v3, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[13];
  uint64_t v6 = v0[14];
  os_log_type_t v8 = v0[12];
  uint64_t v9 = v0[8];
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  uint64_t v10 = type metadata accessor for HintsUI();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

ValueMetadata *type metadata accessor for SiriSuggestionProvider()
{
  return &type metadata for SiriSuggestionProvider;
}

_OWORD *outlined init with take of Decodable & Encodable & Sendable(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t KnowledgeFallbackConfirmationStrategy.__allocating_init(sasRecognition:isEnablement:responseGenerator:aceService:)(uint64_t a1, char a2, uint64_t a3, long long *a4)
{
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(a3 + 32);
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1(a3, v9);
  __chkstk_darwin(v11);
  BOOL v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  uint64_t v15 = specialized KnowledgeFallbackConfirmationStrategy.init(sasRecognition:isEnablement:responseGenerator:aceService:)(a1, a2, (uint64_t)v13, a4, v8, v9, v10);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v15;
}

uint64_t KnowledgeFallbackConfirmationStrategy.init(sasRecognition:isEnablement:responseGenerator:aceService:)(uint64_t a1, char a2, uint64_t a3, long long *a4)
{
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(a3 + 32);
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1(a3, v9);
  __chkstk_darwin(v11);
  BOOL v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  uint64_t v15 = specialized KnowledgeFallbackConfirmationStrategy.init(sasRecognition:isEnablement:responseGenerator:aceService:)(a1, a2, (uint64_t)v13, a4, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v15;
}

uint64_t KnowledgeFallbackConfirmationStrategy.actionForInput(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = Input.userCancelled.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  if (v6)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return static ActionForInput.cancel()();
  }
  int v7 = Input.knowledgeConfirmationResponse.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v7 == 2) {
    return static ActionForInput.cancel()();
  }
  if (Input.knowledgeConfirmationResponse.getter() == 3) {
    return static ActionForInput.ignore()();
  }
  else {
    return static ActionForInput.handle()();
  }
}

uint64_t Input.knowledgeConfirmationResponse.getter()
{
  uint64_t v0 = type metadata accessor for Parse.DirectInvocation();
  os_log_type_t v49 = *(uint8_t **)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v48 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  char v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v48 - v7;
  uint64_t v48 = type metadata accessor for USOParse();
  uint64_t v9 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Parse();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  int v16 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v12);
  if (v16 != enum case for Parse.directInvocation(_:))
  {
    if (v16 == enum case for Parse.uso(_:))
    {
      (*(void (**)(char *, uint64_t))(v13 + 96))(v15, v12);
      uint64_t v26 = v48;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v48);
      USOParse.userConfirmationResponse.getter((uint64_t)v8);
      uint64_t v27 = type metadata accessor for ConfirmationResponse();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v8, 1, v27) != 1)
      {
        outlined init with copy of IdentifiedUser?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for ConfirmationResponse?);
        int v35 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v6, v27);
        if (v35 == enum case for ConfirmationResponse.confirmed(_:))
        {
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v26);
          outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for ConfirmationResponse?);
          return 1;
        }
        if (v35 == enum case for ConfirmationResponse.rejected(_:))
        {
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v26);
          outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for ConfirmationResponse?);
          return 2;
        }
        (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v27);
      }
      outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for ConfirmationResponse?);
      uint64_t v29 = USOParse.authorisedAppName.getter();
      uint64_t v31 = v29;
      unint64_t v32 = v30;
      if (v30)
      {
        if (v29 == 6448503 && v30 == 0xE300000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
          || v31 == 0x656C676F6F67 && v32 == 0xE600000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v26);
LABEL_17:
          swift_bridgeObjectRelease();
          return 0;
        }
        if (v31 == 0x74706774616863 && v32 == 0xE700000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v26);
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      __swift_project_value_buffer(v42, (uint64_t)static Logger.information);
      swift_bridgeObjectRetain();
      long long v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136315138;
        uint64_t v51 = v46;
        if (v32)
        {
          unint64_t v47 = v32;
        }
        else
        {
          uint64_t v31 = 0;
          unint64_t v47 = 0xE000000000000000;
        }
        os_log_type_t v49 = v45 + 4;
        swift_bridgeObjectRetain();
        uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v47, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v43, v44, "Received authorise::common_App response with unknown app name: %s", v45, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v48);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v26);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
    return 3;
  }
  (*(void (**)(char *, uint64_t))(v13 + 96))(v15, v12);
  uint64_t v17 = v49;
  (*((void (**)(char *, char *, uint64_t))v49 + 4))(v2, v15, v0);
  uint64_t v18 = Parse.DirectInvocation.identifier.getter();
  uint64_t v20 = v19;
  uint64_t v21 = (void *)static SiriKitDirectInvocationPayloads.reject.getter();
  id v22 = [v21 identifier];

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  if (v23 == v18 && v25 == v20)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    (*((void (**)(char *, uint64_t))v17 + 1))(v2, v0);
    goto LABEL_17;
  }
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v33) {
    goto LABEL_16;
  }
  uint64_t v36 = (void *)static SiriKitDirectInvocationPayloads.confirm.getter();
  id v37 = [v36 identifier];

  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;

  if (v38 == v18 && v40 == v20)
  {
    swift_bridgeObjectRelease_n();
    (*((void (**)(char *, uint64_t))v17 + 1))(v2, v0);
    return 1;
  }
  else
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*((void (**)(char *, uint64_t))v17 + 1))(v2, v0);
    if (v41) {
      return 1;
    }
    else {
      return 3;
    }
  }
}

uint64_t KnowledgeFallbackConfirmationStrategy.parseConfirmationResponse(input:)(uint64_t a1)
{
  v1[3] = a1;
  uint64_t v2 = type metadata accessor for Input();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(KnowledgeFallbackConfirmationStrategy.parseConfirmationResponse(input:), 0, 0);
}

uint64_t KnowledgeFallbackConfirmationStrategy.parseConfirmationResponse(input:)()
{
  uint64_t v19 = v0;
  uint64_t v1 = Input.knowledgeConfirmationResponse.getter();
  if (v1 == 3)
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v3 = v0[5];
    uint64_t v2 = v0[6];
    uint64_t v5 = v0[3];
    uint64_t v4 = v0[4];
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.information);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v11 = v0[5];
    uint64_t v10 = v0[6];
    uint64_t v12 = v0[4];
    if (v9)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type Input and conformance Input, (void (*)(uint64_t))&type metadata accessor for Input);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      _os_log_impl(&dword_0, v7, v8, "Unexpectedly found nil userConfirmationResponse in %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v11 + 8))(v0[6], v0[4]);
    }
  }
  swift_task_dealloc();
  int v16 = (uint64_t (*)(uint64_t))v0[1];
  return v16(v1);
}

uint64_t KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  type metadata accessor for DialogPhase();
  v2[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OutputGenerationManifest();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NLContextUpdate();
  v2[18] = v5;
  v2[19] = *(void *)(v5 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v2[21] = v6;
  v2[22] = *(void *)(v6 - 8);
  v2[23] = swift_task_alloc();
  char v2[24] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v2[25] = v7;
  v2[26] = *(void *)(v7 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  return _swift_task_switch(KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:), 0, 0);
}

uint64_t KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  udaForApp #1 (_:) in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)(0xE700000000000000, v0[28]);
  udaForApp #1 (_:) in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)(0xE300000000000000, v0[27]);
  uint64_t v1 = v0[28];
  uint64_t v67 = 0x656E6F685069;
  uint64_t v2 = v0[27];
  uint64_t v3 = v0;
  uint64_t v5 = v0[23];
  uint64_t v4 = v0[24];
  uint64_t v6 = v0[22];
  uint64_t v7 = v3[21];
  uint64_t v69 = v3[17];
  uint64_t v8 = swift_task_alloc();
  *(void *)(v8 + 16) = v1;
  *(void *)(v8 + 24) = v2;
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemDialogAct);
  static Message.with(_:)();
  swift_task_dealloc();
  *(void *)(swift_task_alloc() + 16) = v1;
  static Message.with(_:)();
  swift_task_dealloc();
  NLContextUpdate.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v9 = *(void *)(v6 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_AC510;
  unint64_t v12 = v11 + v10;
  uint64_t v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16);
  v13(v12, v4, v7);
  v13(v12 + v9, v5, v7);
  NLContextUpdate.nluSystemDialogActs.setter();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.deviceClass.getter();
  swift_release();
  uint64_t v14 = type metadata accessor for DeviceClass();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v69, 1, v14) != 1)
  {
    uint64_t v16 = v3[16];
    outlined init with copy of IdentifiedUser?(v3[17], v16, &demangling cache variable for type metadata for DeviceClass?);
    int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 88))(v16, v14);
    if (v17 != enum case for DeviceClass.iPhone(_:))
    {
      if (v17 == enum case for DeviceClass.iPad(_:))
      {
        uint64_t v18 = (void *)0xE400000000000000;
        uint64_t v67 = 1684099177;
        goto LABEL_9;
      }
      if (v17 == enum case for DeviceClass.mac(_:))
      {
        uint64_t v18 = (void *)0xE300000000000000;
        uint64_t v67 = 6512973;
        goto LABEL_9;
      }
      (*(void (**)(void, uint64_t))(v15 + 8))(v3[16], v14);
    }
  }
  uint64_t v18 = (void *)0xE600000000000000;
LABEL_9:
  uint64_t v19 = v3[8];
  outlined destroy of Any?(v3[17], &demangling cache variable for type metadata for DeviceClass?);
  if (*(unsigned char *)(v19 + 24) == 1)
  {
    _StringGuts.grow(_:)(68);
    v20._uint64_t countAndFlagsBits = 0xD000000000000041;
    v20._object = (void *)0x80000000000AF900;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = v67;
    v21._object = v18;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 46;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    unint64_t v24 = 0;
    unint64_t v23 = 0xE000000000000000;
    unint64_t v25 = 0xD000000000000021;
    unint64_t v26 = 0x80000000000AF8D0;
    unint64_t v63 = 0xD000000000000024;
    unint64_t v64 = 0x80000000000AF950;
    uint64_t v65 = 0x7461684320797254;
  }
  else
  {
    unint64_t v24 = 0xD00000000000002DLL;
    swift_bridgeObjectRelease();
    unint64_t v23 = 0x80000000000AF870;
    unint64_t v63 = 0xD000000000000026;
    unint64_t v64 = 0x80000000000AF8A0;
    uint64_t v65 = 0x7461684320657355;
    unint64_t v25 = 0xD00000000000002DLL;
    unint64_t v26 = 0x80000000000AF870;
  }
  uint64_t v27 = v3[8];
  id v28 = [objc_allocWithZone((Class)DialogExecutionResult) init];
  v3[29] = v28;
  id v29 = [objc_allocWithZone((Class)DialogElement) init];
  v3[30] = v29;
  swift_bridgeObjectRetain();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 setFullPrint:v30];

  swift_bridgeObjectRetain();
  NSString v31 = String._bridgeToObjectiveC()();
  unint64_t v68 = v23;
  swift_bridgeObjectRelease();
  [v29 setFullSpeak:v31];

  swift_bridgeObjectRetain();
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 setSupportingPrint:v32];

  swift_bridgeObjectRetain();
  unint64_t v66 = v25;
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 setSupportingSpeak:v33];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_AB670;
  *(void *)(v34 + 32) = v29;
  specialized Array._endMutation()();
  type metadata accessor for DialogElement();
  id v35 = v29;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v70 = v28;
  [v28 setDialog:isa];

  id v37 = *(void **)(v27 + 16);
  if (v37)
  {
    uint64_t v39 = v3[14];
    uint64_t v38 = v3[15];
    uint64_t v40 = v3[13];
    uint64_t v62 = v3[8];
    id v41 = objc_allocWithZone((Class)SAUIRevealRecognizedSpeech);
    id v42 = v37;
    id v43 = [v41 init];
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    NSString v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v43 setAceId:v44];

    id v45 = v43;
    id v46 = [v42 refId];
    [v45 setRefId:v46];

    id v47 = [v42 aceId];
    [v45 setSpeechRecognizedAceId:v47];

    [v45 setRecognition:v42];
    __swift_project_boxed_opaque_existential_1((void *)(v62 + 72), *(void *)(v62 + 96));
    AceServiceInvokerAsync.submitAndForget(_:)();
  }
  uint64_t v48 = v3[20];
  os_log_type_t v49 = v3;
  uint64_t v50 = (void *)v3[8];
  static DialogPhase.confirmation.getter();
  uint64_t v51 = swift_task_alloc();
  *(void *)(v51 + 16) = v48;
  *(void *)(v51 + 24) = v66;
  *(void *)(v51 + 32) = v26;
  *(void *)(v51 + 40) = v66;
  *(void *)(v51 + 48) = v26;
  *(void *)(v51 + 56) = v24;
  *(void *)(v51 + 64) = v68;
  *(void *)(v51 + 72) = v65;
  *(void *)(v51 + 80) = 0xEB00000000545047;
  strcpy((char *)(v51 + 88), "Search the Web");
  *(unsigned char *)(v51 + 103) = -18;
  *(void *)(v51 + 104) = v63;
  *(void *)(v51 + 112) = v64;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  uint64_t v52 = v50 + 4;
  uint64_t v53 = v50[7];
  uint64_t v54 = v50[8];
  __swift_project_boxed_opaque_existential_1(v52, v53);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v49[5] = &type metadata for SiriInformationDataModels;
  v49[6] = lazy protocol witness table accessor for type SiriInformationDataModels and conformance SiriInformationDataModels();
  uint64_t v55 = swift_allocObject();
  v49[2] = v55;
  *(void *)(v55 + 16) = v65;
  *(void *)(v55 + 24) = 0xEB00000000545047;
  strcpy((char *)(v55 + 32), "Search the Web");
  *(unsigned char *)(v55 + 47) = -18;
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_AB670;
  *(void *)(v56 + 32) = v70;
  uint64_t v71 = v56;
  specialized Array._endMutation()();
  v49[31] = v71;
  id v57 = v70;
  uint64_t v58 = (void *)swift_task_alloc();
  v49[32] = v58;
  *uint64_t v58 = v49;
  v58[1] = KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:);
  uint64_t v59 = v49[12];
  uint64_t v60 = v49[7];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v60, v49 + 2, v71, v59, v53, v54);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *v0 + 16;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v1);
  return _swift_task_switch(KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = *(void **)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v15 = *(void *)(v0 + 192);
  uint64_t v16 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v14 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v18 = *(void *)(v0 + 160);
  uint64_t v19 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 152);
  int v17 = *(void *)(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 96);
  uint64_t v9 = *(void *)(v0 + 80);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(v14, v5);
  v10(v15, v5);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v16, v3);
  v11(v19, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v18, v17);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t udaForApp #1 (_:) in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v25 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v5 = *(void *)(v26 - 8);
  uint64_t v6 = __chkstk_darwin(v26);
  unint64_t v24 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v29 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  uint64_t v10 = *(void *)(v29 - 8);
  uint64_t v11 = __chkstk_darwin(v29);
  unint64_t v23 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - v13;
  Siri_Nlu_External_UserWantedToProceed.init()();
  type metadata accessor for UsoTaskBuilder_authorise_common_App();
  swift_allocObject();
  uint64_t v15 = UsoTaskBuilder_authorise_common_App.init()();
  type metadata accessor for UsoEntityBuilder_common_App();
  swift_allocObject();
  UsoEntityBuilder_common_App.init()();
  dispatch thunk of UsoEntityBuilder_common_App.setName(value:)();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceControl.setReference(value:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_AB670;
  *(void *)(v16 + 32) = v15;
  uint64_t v30 = v16;
  specialized Array._endMutation()();
  uint64_t v17 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v4, 1, 1, v17);
  swift_retain();
  static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
  swift_bridgeObjectRelease();
  outlined destroy of Any?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
  uint64_t v18 = v28;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v29);
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v24, v9, v26);
    Siri_Nlu_External_UserWantedToProceed.reference.setter();
    Siri_Nlu_External_UserDialogAct.init()();
    Swift::String v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    id v28 = v9;
    uint64_t v21 = v29;
    v20(v23, v14, v29);
    Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v28, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v21);
  }
}

uint64_t closure #1 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  __chkstk_darwin(v0);
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type Siri_Nlu_External_SystemGaveOptions and conformance Siri_Nlu_External_SystemGaveOptions, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemGaveOptions);
  static Message.with(_:)();
  return Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
}

uint64_t closure #1 in closure #1 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 72);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_AC510;
  unint64_t v10 = v9 + v8;
  uint64_t v11 = *(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16);
  v11(v10, a2, v5);
  v11(v10 + v7, a3, v5);
  return Siri_Nlu_External_SystemGaveOptions.choices.setter();
}

uint64_t closure #2 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  __chkstk_darwin(v0);
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type Siri_Nlu_External_SystemOffered and conformance Siri_Nlu_External_SystemOffered, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemOffered);
  static Message.with(_:)();
  return Siri_Nlu_External_SystemDialogAct.offered.setter();
}

uint64_t closure #1 in closure #2 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  __chkstk_darwin(v0);
  lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
  static Message.with(_:)();
  return Siri_Nlu_External_SystemOffered.offeredAct.setter();
}

uint64_t closure #1 in closure #1 in closure #2 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  __chkstk_darwin(v0 - 8);
  Siri_Nlu_External_UserDialogAct.wantedToProceed.getter();
  return Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
}

uint64_t closure #3 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter();
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  OutputGenerationManifest.nlContextUpdate.setter();
  swift_bridgeObjectRetain();
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t KnowledgeFallbackConfirmationStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  return v0;
}

uint64_t KnowledgeFallbackConfirmationStrategy.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);

  return _swift_deallocClassInstance(v0, 112, 7);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.actionForInput(_:) in conformance KnowledgeFallbackConfirmationStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance KnowledgeFallbackConfirmationStrategy(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v2 + 128) + **(int **)(*(void *)v2 + 128));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  *uint64_t v5 = v3;
  v5[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance KnowledgeFallbackConfirmationStrategy;
  return v7(a2);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance KnowledgeFallbackConfirmationStrategy(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(unsigned char **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance KnowledgeFallbackConfirmationStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 136) + **(int **)(*(void *)v1 + 136));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return v6(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:) in conformance KnowledgeFallbackConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for KnowledgeFallbackConfirmationStrategy();
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:) in conformance KnowledgeFallbackConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for KnowledgeFallbackConfirmationStrategy();
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse() in conformance KnowledgeFallbackConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse()(a1, a2, a3);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance KnowledgeFallbackConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse()(a1, a2, a3);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:) in conformance KnowledgeFallbackConfirmationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, a3, a4);
}

uint64_t KnowledgeConfirmationResponseProvider.confirmationResponse.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
      goto LABEL_4;
    case 3:
      uint64_t v10 = type metadata accessor for ConfirmationResponse();
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
      uint64_t v9 = v10;
      uint64_t v7 = a2;
      uint64_t v8 = 1;
      break;
    default:
      uint64_t v3 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
LABEL_4:
      uint64_t v4 = *v3;
      uint64_t v5 = type metadata accessor for ConfirmationResponse();
      uint64_t v12 = *(void *)(v5 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(a2, v4, v5);
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
      uint64_t v7 = a2;
      uint64_t v8 = 0;
      uint64_t v9 = v5;
      break;
  }

  return v6(v7, v8, 1, v9);
}

uint64_t KnowledgeConfirmationResponseProvider.knowledgeConfirmationResponse.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

InformationFlowPlugin::KnowledgeConfirmationResponseProvider (__swiftcall *KnowledgeConfirmationResponseProvider.knowledgeConfirmationResponse.modify())(InformationFlowPlugin::KnowledgeConfirmationResponse_optional)
{
  return KnowledgeConfirmationResponseProvider.init(_:);
}

uint64_t protocol witness for ConfirmationResponseProviding.confirmationResponse.getter in conformance KnowledgeConfirmationResponseProvider@<X0>(uint64_t a1@<X8>)
{
  switch(*v1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
      goto LABEL_4;
    case 3:
      uint64_t v10 = type metadata accessor for ConfirmationResponse();
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
      uint64_t v9 = v10;
      uint64_t v7 = a1;
      uint64_t v8 = 1;
      break;
    default:
      uint64_t v3 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
LABEL_4:
      uint64_t v4 = *v3;
      uint64_t v5 = type metadata accessor for ConfirmationResponse();
      uint64_t v12 = *(void *)(v5 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(a1, v4, v5);
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
      uint64_t v7 = a1;
      uint64_t v8 = 0;
      uint64_t v9 = v5;
      break;
  }

  return v6(v7, v8, 1, v9);
}

uint64_t USOParse.authorisedAppName.getter()
{
  uint64_t v1 = type metadata accessor for USOParse();
  uint64_t v65 = *(void *)(v1 - 8);
  uint64_t v66 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v59 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  unint64_t v64 = (char *)&v58 - v4;
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v61 = *(void *)(v5 - 8);
  uint64_t v62 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v8 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v67 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v63 = v0;
  USOParse.userParse.getter();
  uint64_t v21 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if (*(void *)(v21 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v13, v21 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80)), v18);
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = 1;
  }
  uint64_t v23 = v19;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v13, v22, 1, v18);
  swift_bridgeObjectRelease();
  int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v13, 1, v18);
  uint64_t v25 = v67;
  if (v24 == 1)
  {
    outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.information);
    uint64_t v27 = v64;
    uint64_t v28 = v65;
    uint64_t v29 = *(void (**)(char *, uint8_t *, uint64_t))(v65 + 16);
    uint64_t v30 = v66;
    v29(v64, v63, v66);
    NSString v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      NSString v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v67 = (char *)swift_slowAlloc();
      v68[0] = (uint64_t)v67;
      *(_DWORD *)NSString v33 = 136315138;
      unint64_t v63 = v33 + 4;
      v29(v59, (uint8_t *)v27, v30);
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v30);
      _os_log_impl(&dword_0, v31, v32, "Invalid USOParse while looking for user confirmation. Parse has no UDAs: %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v30);
    }

    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v67, v13, v18);
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v60);
  static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v7, v62);
  unint64_t v38 = static UsoConversionUtils.convertGraphToTasks(graph:)();
  unint64_t v39 = v38;
  if (v38 >> 62)
  {
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_21;
    }
  }
  else if (!*(void *)((char *)&dword_10 + (v38 & 0xFFFFFFFFFFFFFF8)))
  {
    goto LABEL_21;
  }
  if ((v39 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((char *)&dword_10 + (v39 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
LABEL_52:
      swift_once();
LABEL_24:
      uint64_t v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.information);
      swift_retain_n();
      id v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v65 = v19;
        id v43 = (uint8_t *)swift_slowAlloc();
        v68[0] = swift_slowAlloc();
        *(_DWORD *)id v43 = 136315138;
        dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter();
        if (!v70 || (uint64_t v44 = dispatch thunk of UsoEntity_common_App.name.getter(), v46 = v45, swift_release(), !v46))
        {
          swift_bridgeObjectRelease();
          uint64_t v44 = 0;
          unint64_t v46 = 0xE000000000000000;
        }
        uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v41, v42, "Parsed confirmation response as authorise_common_App: %s", v43, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v23 = v65;
        uint64_t v25 = v67;
      }
      else
      {

        swift_release_n();
      }
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter();
      swift_release();
      if (!v68[0] || (dispatch thunk of UsoEntity_common_App.name.getter(), uint64_t v55 = v54, swift_release(), !v55))
      {
LABEL_49:
        (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v66);
        swift_release();
        swift_release();
        swift_release();
        return 0;
      }
LABEL_48:
      uint64_t countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v66);
      return countAndFlagsBits;
    }
    swift_retain();
  }
LABEL_21:
  swift_bridgeObjectRelease();
  static UsoTask_CodegenConverter.convert(task:)();
  if (v69)
  {
    type metadata accessor for UsoTask_authorise_common_App();
    if (swift_dynamicCast())
    {
      uint64_t v66 = v18;
      if (one-time initialization token for information == -1) {
        goto LABEL_24;
      }
      goto LABEL_52;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v68, &demangling cache variable for type metadata for Any?);
  }
  static UsoTask_CodegenConverter.convert(task:)();
  if (v69)
  {
    type metadata accessor for UsoTask_open_common_App();
    if (swift_dynamicCast())
    {
      uint64_t v66 = v18;
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.information);
      swift_retain_n();
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v65 = v19;
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        v68[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 136315138;
        dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
        if (!v70 || (uint64_t v51 = dispatch thunk of UsoEntity_common_App.name.getter(), v53 = v52, swift_release(), !v53))
        {
          swift_bridgeObjectRelease();
          uint64_t v51 = 0;
          unint64_t v53 = 0xE000000000000000;
        }
        uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v48, v49, "Parsed confirmation response as open_common_App: %s", v50, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v23 = v65;
        uint64_t v25 = v67;
      }
      else
      {

        swift_release_n();
      }
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
      swift_release();
      if (!v68[0]) {
        goto LABEL_49;
      }
      dispatch thunk of UsoEntity_common_App.name.getter();
      uint64_t v57 = v56;
      swift_release();
      if (!v57) {
        goto LABEL_49;
      }
      goto LABEL_48;
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    outlined destroy of Any?((uint64_t)v68, &demangling cache variable for type metadata for Any?);
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
  return 0;
}

uint64_t specialized KnowledgeFallbackConfirmationStrategy.init(sasRecognition:isEnablement:responseGenerator:aceService:)(uint64_t a1, char a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(a5 + 56) = a6;
  *(void *)(a5 + 64) = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a5 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_1, a3, a6);
  *(void *)(a5 + 16) = a1;
  *(unsigned char *)(a5 + 24) = a2;
  outlined init with take of PatternFlowProviding(a4, a5 + 72);
  return a5;
}

uint64_t partial apply for closure #1 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  return closure #1 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)();
}

uint64_t partial apply for closure #2 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  return closure #2 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)();
}

unint64_t type metadata accessor for DialogElement()
{
  unint64_t result = lazy cache variable for type metadata for DialogElement;
  if (!lazy cache variable for type metadata for DialogElement)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DialogElement);
  }
  return result;
}

uint64_t partial apply for closure #3 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)(uint64_t a1)
{
  return closure #3 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_53274()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t lazy protocol witness table accessor for type KnowledgeConfirmationResponseProvider and conformance KnowledgeConfirmationResponseProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type KnowledgeConfirmationResponseProvider and conformance KnowledgeConfirmationResponseProvider;
  if (!lazy protocol witness table cache variable for type KnowledgeConfirmationResponseProvider and conformance KnowledgeConfirmationResponseProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KnowledgeConfirmationResponseProvider and conformance KnowledgeConfirmationResponseProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type KnowledgeConfirmationResponse and conformance KnowledgeConfirmationResponse()
{
  unint64_t result = lazy protocol witness table cache variable for type KnowledgeConfirmationResponse and conformance KnowledgeConfirmationResponse;
  if (!lazy protocol witness table cache variable for type KnowledgeConfirmationResponse and conformance KnowledgeConfirmationResponse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KnowledgeConfirmationResponse and conformance KnowledgeConfirmationResponse);
  }
  return result;
}

uint64_t type metadata accessor for KnowledgeFallbackConfirmationStrategy()
{
  return self;
}

uint64_t getEnumTagSinglePayload for KnowledgeConfirmationResponseProvider(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  if (*a1 <= 3u) {
    int v6 = 3;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 4;
  if (*a1 < 3u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KnowledgeConfirmationResponseProvider(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x534F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KnowledgeConfirmationResponseProvider()
{
  return &type metadata for KnowledgeConfirmationResponseProvider;
}

unsigned char *storeEnumTagSinglePayload for KnowledgeConfirmationResponse(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x535F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KnowledgeConfirmationResponse()
{
  return &type metadata for KnowledgeConfirmationResponse;
}

uint64_t partial apply for closure #1 in closure #2 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  return closure #1 in closure #2 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)();
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  return closure #1 in closure #1 in closure #2 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)();
}

uint64_t partial apply for closure #1 in closure #1 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)(uint64_t a1)
{
  return closure #1 in closure #1 in KnowledgeFallbackConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t lazy protocol witness table accessor for type Input and conformance Input(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v27 = a5;
  uint64_t v28 = v10;
  uint64_t v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v11);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v22 + 16))(v21, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v15) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a6, 1, 1, a4);
  }
  uint64_t v25 = v28;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v15);
  v30(v19, v13);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v27, v13, a3);
  }
  return result;
}

uint64_t protocol witness for VideoSnippetCoverArt.url.getter in conformance Moviespb_CoverArt()
{
  return Moviespb_CoverArt.url.getter();
}

uint64_t protocol witness for VideoSnippetCoverArt.url.getter in conformance Tvpb_CoverArt()
{
  return Tvpb_CoverArt.url.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_MovieObject.title.getter()
{
  uint64_t v0 = Apple_Parsec_Siri_V2alpha_MovieObject.titles.getter();
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v1 = 0;
  }
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t Apple_Parsec_Siri_V2alpha_MovieObject.contentType.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Apple_Parsec_Siri_V2alpha_MovieObject.sixteenByNineImages.getter()
{
  uint64_t v0 = type metadata accessor for Moviespb_CoverArt.AspectRatio();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  id v37 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v36 = (char *)&v25 - v4;
  uint64_t v5 = type metadata accessor for Moviespb_CoverArt();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v35 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t result = Apple_Parsec_Siri_V2alpha_MovieObject.coverArt.getter();
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  os_log_type_t v42 = (char *)_swiftEmptyArrayStorage;
  uint64_t v34 = *(void *)(result + 16);
  if (v34)
  {
    unint64_t v13 = 0;
    uint64_t v30 = v6 + 16;
    unsigned int v29 = enum case for Moviespb_CoverArt.AspectRatio.sixteenByNine(_:);
    uint64_t v27 = (void (**)(char *, uint64_t))(v1 + 8);
    uint64_t v28 = (void (**)(char *, void, uint64_t))(v1 + 104);
    uint64_t v26 = (void (**)(char *, uint64_t))(v6 + 8);
    os_log_type_t v32 = (void (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v33 = v6;
    uint64_t v31 = result;
    uint64_t v14 = v37;
    while (v13 < *(void *)(result + 16))
    {
      unint64_t v15 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v38 = *(void *)(v6 + 72);
      unint64_t v39 = v15;
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v10, result + v15 + v38 * v13, v5);
      uint64_t v16 = v5;
      uint64_t v17 = v36;
      Moviespb_CoverArt.type.getter();
      (*v28)(v14, v29, v0);
      lazy protocol witness table accessor for type Moviespb_CoverArt.AspectRatio and conformance Moviespb_CoverArt.AspectRatio(&lazy protocol witness table cache variable for type Moviespb_CoverArt.AspectRatio and conformance Moviespb_CoverArt.AspectRatio, (void (*)(uint64_t))&type metadata accessor for Moviespb_CoverArt.AspectRatio);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v19 = v40;
      uint64_t v18 = v41;
      uint64_t v20 = *v27;
      (*v27)(v14, v0);
      v20(v17, v0);
      if (v18 == v19)
      {
        uint64_t v21 = *v32;
        (*v32)(v35, v10, v16);
        uint64_t v22 = v42;
        uint64_t v5 = v16;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1);
          uint64_t v22 = v42;
        }
        uint64_t v6 = v33;
        unint64_t v24 = *((void *)v22 + 2);
        unint64_t v23 = *((void *)v22 + 3);
        if (v24 >= v23 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
          uint64_t v22 = v42;
        }
        *((void *)v22 + 2) = v24 + 1;
        v21(&v22[v39 + v24 * v38], v35, v5);
        os_log_type_t v42 = v22;
      }
      else
      {
        (*v26)(v10, v16);
        uint64_t v5 = v16;
        uint64_t v6 = v33;
      }
      ++v13;
      uint64_t result = v31;
      if (v34 == v13)
      {
        uint64_t v12 = v42;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  return result;
}

uint64_t Apple_Parsec_Siri_V2alpha_TvObject.contentType.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Apple_Parsec_Siri_V2alpha_TvObject.sixteenByNineImages.getter()
{
  uint64_t v0 = type metadata accessor for Tvpb_CoverArt.AspectRatio();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  id v37 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v36 = (char *)&v25 - v4;
  uint64_t v5 = type metadata accessor for Tvpb_CoverArt();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v35 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t result = Apple_Parsec_Siri_V2alpha_TvObject.coverArt.getter();
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  os_log_type_t v42 = (char *)_swiftEmptyArrayStorage;
  uint64_t v34 = *(void *)(result + 16);
  if (v34)
  {
    unint64_t v13 = 0;
    uint64_t v30 = v6 + 16;
    unsigned int v29 = enum case for Tvpb_CoverArt.AspectRatio.sixteenByNine(_:);
    uint64_t v27 = (void (**)(char *, uint64_t))(v1 + 8);
    uint64_t v28 = (void (**)(char *, void, uint64_t))(v1 + 104);
    uint64_t v26 = (void (**)(char *, uint64_t))(v6 + 8);
    os_log_type_t v32 = (void (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v33 = v6;
    uint64_t v31 = result;
    uint64_t v14 = v37;
    while (v13 < *(void *)(result + 16))
    {
      unint64_t v15 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v38 = *(void *)(v6 + 72);
      unint64_t v39 = v15;
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v10, result + v15 + v38 * v13, v5);
      uint64_t v16 = v5;
      uint64_t v17 = v36;
      Tvpb_CoverArt.type.getter();
      (*v28)(v14, v29, v0);
      lazy protocol witness table accessor for type Moviespb_CoverArt.AspectRatio and conformance Moviespb_CoverArt.AspectRatio(&lazy protocol witness table cache variable for type Tvpb_CoverArt.AspectRatio and conformance Tvpb_CoverArt.AspectRatio, (void (*)(uint64_t))&type metadata accessor for Tvpb_CoverArt.AspectRatio);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v19 = v40;
      uint64_t v18 = v41;
      uint64_t v20 = *v27;
      (*v27)(v14, v0);
      v20(v17, v0);
      if (v18 == v19)
      {
        uint64_t v21 = *v32;
        (*v32)(v35, v10, v16);
        uint64_t v22 = v42;
        uint64_t v5 = v16;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1);
          uint64_t v22 = v42;
        }
        uint64_t v6 = v33;
        unint64_t v24 = *((void *)v22 + 2);
        unint64_t v23 = *((void *)v22 + 3);
        if (v24 >= v23 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
          uint64_t v22 = v42;
        }
        *((void *)v22 + 2) = v24 + 1;
        v21(&v22[v39 + v24 * v38], v35, v5);
        os_log_type_t v42 = v22;
      }
      else
      {
        (*v26)(v10, v16);
        uint64_t v5 = v16;
        uint64_t v6 = v33;
      }
      ++v13;
      uint64_t result = v31;
      if (v34 == v13)
      {
        uint64_t v12 = v42;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  return result;
}

void closure #1 in static VideoSnippetUtils.makeDisambiguationList(for:)(uint8_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v130 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v129 = (char *)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MovieObject();
  uint64_t v121 = *(void (***)(char *, uint64_t, void))(v6 - 8);
  *(void *)&long long v122 = v6;
  __chkstk_darwin(v6);
  char v120 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvObject();
  uint64_t v118 = *(void *)(v8 - 8);
  uint64_t v119 = v8;
  __chkstk_darwin(v8);
  unint64_t v117 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v126 = (uint64_t)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v128 = (uint64_t)&v108 - v13;
  uint64_t v127 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v16 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_DynamicURLImageResource?);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Searchfoundation_DynamicURLImageResource();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v23 = (char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v132 = a1;
  static VideoSnippetUtils.makeDynamicURLImageResource(for:)(a1, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for Searchfoundation_DynamicURLImageResource?);
    if (one-time initialization token for videoSnippet != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v4, (uint64_t)static Logger.videoSnippet);
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v24, v25, "Could not generate dynamic URL image resource for object", v26, 2u);
      swift_slowDealloc();
    }

    id v27 = 0;
    goto LABEL_29;
  }
  uint64_t v125 = v4;
  unint64_t v110 = a2;
  uint64_t v123 = v21;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v19, v20);
  id v28 = [objc_allocWithZone((Class)SAUIListItemProtobufMessage) init];
  UUID.init()();
  UUID.uuidString.getter();
  unsigned int v29 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v30 = v16;
  uint64_t v31 = v16;
  uint64_t v32 = v127;
  uint64_t v116 = v14 + 8;
  uint64_t v113 = v29;
  v29(v31, v127);
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v28 setAceId:v33];
  id v131 = v28;

  lazy protocol witness table accessor for type Moviespb_CoverArt.AspectRatio and conformance Moviespb_CoverArt.AspectRatio((unint64_t *)&lazy protocol witness table cache variable for type Searchfoundation_DynamicURLImageResource and conformance Searchfoundation_DynamicURLImageResource, (void (*)(uint64_t))&type metadata accessor for Searchfoundation_DynamicURLImageResource);
  uint64_t v124 = v20;
  uint64_t v34 = v133;
  uint64_t v35 = Message.serializedData(partial:)();
  if (v34)
  {
    swift_errorRelease();
    Class isa = 0;
  }
  else
  {
    uint64_t v38 = v35;
    unint64_t v39 = v36;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v38, v39);
  }
  uint64_t v40 = v128;
  [v131 setDynamicURLImageResourceData:isa];

  Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter();
  uint64_t v41 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object();
  uint64_t v42 = *(void *)(v41 - 8);
  int v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41);
  uint64_t v44 = v30;
  uint64_t v133 = 0;
  uint64_t v109 = v23;
  if (v43 == 1) {
    goto LABEL_17;
  }
  uint64_t v45 = v126;
  outlined init with copy of IdentifiedUser?(v40, v126, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  int v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 88))(v45, v41);
  if (v46 == enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.tv(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v42 + 96))(v45, v41);
    uint64_t v47 = v117;
    uint64_t v48 = v118;
    uint64_t v49 = v119;
    (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v117, v45, v119);
    uint64_t v111 = Apple_Parsec_Siri_V2alpha_TvObject.title.getter();
    unint64_t v112 = v50;
    uint64_t v126 = Apple_Parsec_Siri_V2alpha_TvObject.contentRatingSystem.getter();
    uint64_t v128 = v51;
    uint64_t v114 = Apple_Parsec_Siri_V2alpha_TvObject.contentRatingValue.getter();
    uint64_t v115 = v52;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v49);
    goto LABEL_18;
  }
  if (v46 != enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.movie(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v45, v41);
LABEL_17:
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    uint64_t v126 = 0;
    uint64_t v128 = 0;
    uint64_t v111 = 0;
    unint64_t v112 = 0xE000000000000000;
    goto LABEL_18;
  }
  (*(void (**)(uint64_t, uint64_t))(v42 + 96))(v45, v41);
  v121[4](v120, v45, v122);
  unint64_t v53 = (void *)Apple_Parsec_Siri_V2alpha_MovieObject.titles.getter();
  if (v53[2])
  {
    uint64_t v54 = v53[4];
    unint64_t v55 = v53[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
  }
  uint64_t v111 = v54;
  unint64_t v112 = v55;
  swift_bridgeObjectRelease();
  unint64_t v105 = v120;
  uint64_t v126 = Apple_Parsec_Siri_V2alpha_MovieObject.contentRatingSystem.getter();
  uint64_t v128 = v106;
  uint64_t v114 = Apple_Parsec_Siri_V2alpha_MovieObject.contentRatingValue.getter();
  uint64_t v115 = v107;
  ((void (*)(char *, void))v121[1])(v105, v122);
LABEL_18:
  outlined destroy of Any?(v40, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  id v56 = [objc_allocWithZone((Class)SAStartRequest) init];
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v57 = v32;
  uint64_t v58 = v32;
  uint64_t v59 = v113;
  v113(v44, v58);
  NSString v60 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v56 setAceId:v60];

  [v56 setInputOrigin:SAInputOriginDialogButtonTapValue];
  Apple_Parsec_Siri_V2alpha_TvOrMovieObject.machineUtterance.getter();
  NSString v61 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v56 setUtterance:v61];

  id v62 = [objc_allocWithZone((Class)SASendCommands) init];
  UUID.init()();
  UUID.uuidString.getter();
  v59(v44, v57);
  NSString v63 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v62 setAceId:v63];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v64 = swift_allocObject();
  long long v122 = xmmword_AB670;
  *(_OWORD *)(v64 + 16) = xmmword_AB670;
  *(void *)(v64 + 32) = v56;
  uint64_t v135 = v64;
  specialized Array._endMutation()();
  uint64_t v121 = (void (**)(char *, uint64_t, void))v56;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
  Class v65 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v62 setCommands:v65];

  id v66 = [objc_allocWithZone((Class)SAUIListItem) init];
  UUID.init()();
  UUID.uuidString.getter();
  v59(v44, v57);
  NSString v67 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v66 setAceId:v67];

  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = v122;
  *(void *)(v68 + 32) = v62;
  uint64_t v135 = v68;
  specialized Array._endMutation()();
  id v69 = v62;
  uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class v70 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v66 setCommands:v70];

  [v66 setObject:v131];
  NSString v71 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v66 setTitle:v71];

  Apple_Parsec_Siri_V2alpha_TvOrMovieObject.contentRowDescriptionData.getter();
  NSString v72 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v66 setPrimaryDescriptiveText:v72];

  id v73 = specialized static VideoSnippetUtils.makeContentRatingTemplate(ratingSystem:ratingValue:)(v126, v128, v114, v115);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  [v66 setContentRating:v73];

  if (one-time initialization token for videoSnippet != -1) {
    swift_once();
  }
  uint64_t v74 = v125;
  uint64_t v75 = __swift_project_value_buffer(v125, (uint64_t)static Logger.videoSnippet);
  uint64_t v77 = v129;
  uint64_t v76 = v130;
  (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v129, v75, v74);
  id v27 = v66;
  char v78 = Logger.logObject.getter();
  int v79 = static os_log_type_t.debug.getter();
  BOOL v80 = os_log_type_enabled(v78, (os_log_type_t)v79);
  uint64_t v82 = v123;
  uint64_t v81 = v124;
  if (!v80)
  {

    (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v74);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v109, v81);
LABEL_28:
    a2 = v110;
LABEL_29:
    *a2 = v27;
    return;
  }
  LODWORD(v128) = v79;
  unint64_t v132 = (uint8_t *)v69;
  uint64_t v83 = swift_slowAlloc();
  uint64_t v84 = swift_slowAlloc();
  uint64_t v135 = v84;
  *(_DWORD *)uint64_t v83 = 136315906;
  id v85 = [v27 title];
  if (!v85)
  {

    __break(1u);
    goto LABEL_34;
  }
  unint64_t v86 = v85;
  uint64_t v126 = v84;
  uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v89 = v88;

  id v134 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v89, &v135);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v83 + 12) = 2080;
  id v90 = [v27 primaryDescriptiveText];
  if (!v90)
  {
LABEL_34:

    __break(1u);
    goto LABEL_35;
  }
  uint64_t v91 = v90;
  uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v94 = v93;

  id v134 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v94, &v135);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v83 + 22) = 2080;
  id v134 = [v27 contentRating];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateContentRating?);
  uint64_t v95 = String.init<A>(describing:)();
  id v134 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, &v135);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v83 + 32) = 2048;
  id v97 = [v27 commands];
  if (v97)
  {
    unint64_t v98 = v97;
    unint64_t v99 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v100 = v125;
    uint64_t v102 = v129;
    uint64_t v101 = v130;
    uint64_t v103 = v132;
    if (v99 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v104 = _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v104 = *(void *)((char *)&dword_10 + (v99 & 0xFFFFFFFFFFFFFF8));
    }
    swift_bridgeObjectRelease();
    id v134 = (id)v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_0, v78, (os_log_type_t)v128, "Generated list item for TV or movie object\n    title: %s\n    descriptive text: %s\n    content rating: %s\n    commands: %ld", (uint8_t *)v83, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v100);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v109, v124);
    goto LABEL_28;
  }
LABEL_35:

  __break(1u);
}

uint64_t static VideoSnippetUtils.makeDynamicURLImageResource(for:)@<X0>(uint8_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = specialized Apple_Parsec_Siri_V2alpha_TvOrMovieObject.withSnippetObject<A>(_:)(a1);
  uint64_t v11 = v3;
  if (v3)
  {
    uint64_t v12 = type metadata accessor for Searchfoundation_DynamicURLImageResource();
    __chkstk_darwin(v12);
    lazy protocol witness table accessor for type Moviespb_CoverArt.AspectRatio and conformance Moviespb_CoverArt.AspectRatio((unint64_t *)&lazy protocol witness table cache variable for type Searchfoundation_DynamicURLImageResource and conformance Searchfoundation_DynamicURLImageResource, (void (*)(uint64_t))&type metadata accessor for Searchfoundation_DynamicURLImageResource);
    static Message.with(_:)();

    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a2, 0, 1, v12);
  }
  else
  {
    if (one-time initialization token for videoSnippet != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.videoSnippet);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_0, v5, v6, "Could not create image resource for TV or movie object; canceling dynamic URL image resource",
        v7,
        2u);
      swift_slowDealloc();
    }

    uint64_t v8 = type metadata accessor for Searchfoundation_DynamicURLImageResource();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    return v9(a2, 1, 1, v8);
  }
}

id specialized static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t v8 = a2(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v22 - v17;
  uint64_t v19 = a4(v16);
  if (*(void *)(v19 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v18, v19 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v18, 1, 1, v8);
  }
  swift_bridgeObjectRelease();
  outlined init with copy of IdentifiedUser?((uint64_t)v18, (uint64_t)v15, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
  {
    id v20 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
    id v20 = specialized static VideoSnippetUtils.makeImage<A>(for:)((uint64_t)v11, a5);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  outlined destroy of Any?((uint64_t)v18, a3);
  return v20;
}

uint64_t static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v12[-v7];
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 72))(a2, a3);
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v9 = type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAUIImageResource);
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static VideoSnippetUtils.makeSixteenByNineImage<A>(for:), (uint64_t)v12, (uint64_t)&type metadata for Never, v9, v10, (uint64_t)&v15);
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  return v15;
}

NSObject *specialized Apple_Parsec_Siri_V2alpha_TvOrMovieObject.withSnippetObject<A>(_:)(uint8_t *a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject();
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v41 = v2;
  __chkstk_darwin(v2);
  uint64_t v42 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvObject();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MovieObject();
  uint64_t v38 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  uint64_t v11 = __chkstk_darwin(v37);
  v36[1] = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v36 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v36 - v16;
  unint64_t v39 = a1;
  Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter();
  uint64_t v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    if (one-time initialization token for videoSnippet != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.videoSnippet);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v23 = 0;
      _os_log_impl(&dword_0, v21, v22, "No TV or movie payload in a TV or movie object", v23, 2u);
      swift_slowDealloc();
    }

LABEL_18:
    lazy protocol witness table accessor for type VideoSnippetError and conformance VideoSnippetError();
    swift_allocError();
    swift_willThrow();
    outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
    return v21;
  }
  outlined init with copy of IdentifiedUser?((uint64_t)v17, (uint64_t)v15, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  int v24 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v15, v18);
  if (v24 == enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.tv(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v15, v18);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v15, v4);
    uint64_t v21 = specialized static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for Tvpb_CoverArt, &demangling cache variable for type metadata for Tvpb_CoverArt?, (uint64_t (*)(uint64_t))Apple_Parsec_Siri_V2alpha_TvObject.sixteenByNineImages.getter, (uint64_t (*)(uint64_t))&Tvpb_CoverArt.url.getter);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    if (v24 != enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.movie(_:))
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v18);
      if (one-time initialization token for videoSnippet != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      uint64_t v21 = __swift_project_value_buffer(v26, (uint64_t)static Logger.videoSnippet);
      uint64_t v27 = v40;
      uint64_t v29 = v41;
      id v28 = v42;
      (*(void (**)(char *, uint8_t *, uint64_t))(v40 + 16))(v42, v39, v41);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        uint64_t v45 = v43;
        *(_DWORD *)uint64_t v32 = 136315138;
        unint64_t v39 = v32 + 4;
        Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter();
        uint64_t v33 = String.init<A>(describing:)();
        uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v42, v29);
        _os_log_impl(&dword_0, v30, v31, "Unknown or future payload in a TV or movie object: %s", v32, 0xCu);
        uint64_t v21 = v43;
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
      }

      goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v19 + 96))(v15, v18);
    uint64_t v25 = v38;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v10, v15, v8);
    uint64_t v21 = specialized static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)((uint64_t)v10, (uint64_t (*)(void))&type metadata accessor for Moviespb_CoverArt, (uint64_t *)&demangling cache variable for type metadata for Moviespb_CoverArt?, (uint64_t (*)(uint64_t))Apple_Parsec_Siri_V2alpha_MovieObject.sixteenByNineImages.getter, (uint64_t (*)(uint64_t))&Moviespb_CoverArt.url.getter);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
  }
  outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  return v21;
}

uint64_t specialized Apple_Parsec_Siri_V2alpha_TvOrMovieObject.withSnippetObject<A>(_:)(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2)
{
  void (*v50)(uint64_t *__return_ptr, uint64_t *);
  uint8_t *v51;
  uint64_t v52[3];
  uint64_t v53;
  _UNKNOWN **v54;
  uint64_t v55;
  uint64_t v56;

  unint64_t v50 = a1;
  uint64_t v49 = a2;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject();
  uint64_t v45 = *(void *)(v3 - 8);
  uint64_t v46 = v3;
  __chkstk_darwin(v3);
  uint64_t v47 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvObject();
  uint64_t v48 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MovieObject();
  uint64_t v44 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  uint64_t v11 = __chkstk_darwin(v43);
  uint64_t v42 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v40 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v40 - v16;
  Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter();
  uint64_t v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
  {
    uint64_t v41 = v17;
    outlined init with copy of IdentifiedUser?((uint64_t)v17, (uint64_t)v15, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
    int v24 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v15, v18);
    if (v24 == enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.tv(_:))
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v15, v18);
      uint64_t v25 = v48;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v7, v15, v5);
      unint64_t v53 = v5;
      uint64_t v54 = &protocol witness table for Apple_Parsec_Siri_V2alpha_TvObject;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52);
      (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 16))(boxed_opaque_existential_1, v7, v5);
      v50(&v56, v52);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
    }
    else
    {
      if (v24 != enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.movie(_:))
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v18);
        if (one-time initialization token for videoSnippet != -1) {
          swift_once();
        }
        uint64_t v30 = type metadata accessor for Logger();
        __swift_project_value_buffer(v30, (uint64_t)static Logger.videoSnippet);
        uint64_t v31 = v45;
        uint64_t v32 = v46;
        uint64_t v33 = v47;
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v47, v2, v46);
        unint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v34, v35))
        {
          unint64_t v36 = (uint8_t *)swift_slowAlloc();
          uint64_t v37 = swift_slowAlloc();
          *(_DWORD *)unint64_t v36 = 136315138;
          uint64_t v51 = v36 + 4;
          v52[0] = v37;
          Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter();
          uint64_t v38 = String.init<A>(describing:)();
          unint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v31 + 8))(v47, v32);
          _os_log_impl(&dword_0, v34, v35, "Unknown or future payload in a TV or movie object: %s", v36, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v32);
        }

        uint64_t v17 = v41;
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v19 + 96))(v15, v18);
      uint64_t v27 = v44;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v10, v15, v8);
      unint64_t v53 = v8;
      uint64_t v54 = &protocol witness table for Apple_Parsec_Siri_V2alpha_MovieObject;
      id v28 = __swift_allocate_boxed_opaque_existential_1(v52);
      (*(void (**)(uint64_t *, char *, uint64_t))(v27 + 16))(v28, v10, v8);
      v50(&v56, v52);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v8);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    outlined destroy of Any?((uint64_t)v41, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
    return v56;
  }
  if (one-time initialization token for videoSnippet != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.videoSnippet);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v23 = 0;
    _os_log_impl(&dword_0, v21, v22, "No TV or movie payload in a TV or movie object", v23, 2u);
    swift_slowDealloc();
  }

LABEL_18:
  lazy protocol witness table accessor for type VideoSnippetError and conformance VideoSnippetError();
  swift_allocError();
  swift_willThrow();
  return outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
}

uint64_t closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[2] = a3;
  v6[3] = a4;
  v6[4] = a2;
  v6[5] = a1;
  v6[6] = a5;
  return specialized Apple_Parsec_Siri_V2alpha_TvOrMovieObject.withSnippetObject<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:), (uint64_t)v6);
}

uint64_t closure #1 in closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X5>, void *a6@<X8>)
{
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  uint64_t v13 = __swift_project_boxed_opaque_existential_1(a1, v11);
  uint64_t v14 = Apple_Parsec_Siri_V2alpha_TvOrMovieObject.contentRowDescriptionData.getter();
  id v16 = static VideoSnippetUtils.makeContentButton<A>(for:utsURL:contentRowDescription:index:switchProfileBuilderParams:)((uint64_t)v13, a2, a3, v14, v15, a4, a5, v11, v12);
  uint64_t result = swift_bridgeObjectRelease();
  *a6 = v16;
  return result;
}

id static VideoSnippetUtils.makeContentButton<A>(for:utsURL:contentRowDescription:index:switchProfileBuilderParams:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  id v59 = a7;
  uint64_t v60 = a5;
  uint64_t v47 = a6;
  uint64_t v48 = a2;
  uint64_t v61 = a4;
  unint64_t v49 = a3;
  unint64_t v50 = (void *)type metadata accessor for UUID();
  uint64_t v12 = *(v50 - 1);
  __chkstk_darwin(v50);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v63 = (void *)static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)(a1, a8, a9);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 32))(a8, a9);
  uint64_t v58 = v15;
  uint64_t v62 = v16;
  v17._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 24))(a8, a9);
  uint64_t v64 = 0x3A636D753A6E7275;
  unint64_t v65 = 0xE800000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  uint64_t v19 = v64;
  uint64_t v18 = v65;
  unint64_t v56 = v65;
  uint64_t v57 = v64;
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(a9 + 40);
  uint64_t v54 = a9 + 40;
  unint64_t v55 = v20;
  uint64_t v51 = a1;
  uint64_t v21 = v20(a8, a9);
  uint64_t v23 = v22;
  int v24 = *(uint64_t (**)(uint64_t, uint64_t))(a9 + 64);
  uint64_t v52 = a9 + 64;
  unint64_t v53 = v24;
  uint64_t v25 = v24(a8, a9);
  id v27 = specialized static VideoSnippetUtils.makeContentDetailPage(image:appURL:utsURL:canonicalID:title:contentType:index:)((uint64_t)v63, v15, v62, v48, v49, v19, v18, v21, v23, v25, v26, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v28 = [objc_allocWithZone((Class)SAUIAddViews) init];
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, void *))(v12 + 8))(v14, v50);
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v28 setAceId:v29];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_AB670;
  *(void *)(v30 + 32) = v27;
  uint64_t v64 = v30;
  specialized Array._endMutation()();
  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAAceView);
  unint64_t v50 = v27;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v28 setViews:isa];

  id v59 = specialized static VideoSnippetUtils.makeProfileSwitch(switchProfileBuilderParams:)((uint64_t)v59);
  unint64_t v55 = (uint64_t (*)(uint64_t, uint64_t))v55(a8, a9);
  unint64_t v33 = v32;
  uint64_t v34 = v53(a8, a9);
  unint64_t v36 = v35;
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 56))(a8, a9);
  uint64_t v39 = v38;
  uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 48))(a8, a9);
  uint64_t v46 = v37;
  uint64_t v41 = v63;
  uint64_t v42 = v59;
  id v44 = specialized static VideoSnippetUtils.makeContentButton(image:appURL:canonicalID:addViews:switchProfile:title:contentType:contentRatingValue:contentRatingSystem:contentRowDescription:)((uint64_t)v63, v58, v62, v57, v56, v28, v59, (uint64_t)v55, v33, v34, v36, v46, v39, v40, v43, v61, v60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v44;
}

id closure #1 in static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  id result = static VideoSnippetUtils.makeImage<A>(for:)(a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  *a2 = result;
  return result;
}

id specialized static VideoSnippetUtils.makeImage<A>(for:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  __chkstk_darwin(v3);
  uint64_t v47 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  __chkstk_darwin(v8);
  unint64_t v50 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CharacterSet();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = a2(v12);
  uint64_t v58 = v15;
  static CharacterSet.whitespaces.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v16 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  swift_bridgeObjectRelease();
  uint64_t v19 = swift_bridgeObjectRelease();
  uint64_t v20 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0) {
    uint64_t v20 = v16 & 0xFFFFFFFFFFFFLL;
  }
  if (!v20)
  {
    if (one-time initialization token for videoSnippet != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.videoSnippet);
    NSString v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v29, v30)) {
      goto LABEL_14;
    }
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    unint64_t v32 = "Cover art image URL is empty";
    goto LABEL_13;
  }
  uint64_t v46 = a2;
  uint64_t v57 = a2(v19);
  uint64_t v58 = v21;
  uint64_t v55 = 8222587;
  unint64_t v56 = 0xE300000000000000;
  uint64_t v53 = 3223863;
  unint64_t v54 = 0xE300000000000000;
  uint64_t v57 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v58 = v22;
  uint64_t v55 = 8218747;
  unint64_t v56 = 0xE300000000000000;
  uint64_t v53 = 3158068;
  unint64_t v54 = 0xE300000000000000;
  uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  uint64_t v57 = v23;
  uint64_t v58 = v25;
  uint64_t v55 = 8218235;
  unint64_t v56 = 0xE300000000000000;
  uint64_t v53 = 7496556;
  unint64_t v54 = 0xE300000000000000;
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = v51;
  uint64_t v26 = v52;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v7, 1, v52) != 1)
  {
    uint64_t v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v27 + 32))(v50, v7, v26);
    uint64_t v57 = v46(v35);
    uint64_t v58 = v36;
    uint64_t v55 = 8218235;
    unint64_t v56 = 0xE300000000000000;
    uint64_t v53 = 7496556;
    unint64_t v54 = 0xE300000000000000;
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    id v34 = [objc_allocWithZone((Class)SAUIImageResource) init];
    uint64_t v37 = v47;
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v49);
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v34 setAceId:v38];

    [v34 setScaleFactor:1.0];
    uint64_t v39 = v50;
    URL._bridgeToObjectiveC()(v40);
    uint64_t v42 = v41;
    [v34 setResourceUrl:v41];

    [v34 setPointWidth:711.11];
    [v34 setPointHeight:400.0];
    [v34 setPixelWidth:711.11];
    [v34 setPixelHeight:400.0];
    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v34 setUrlFormatString:v43];

    (*(void (**)(char *, uint64_t))(v27 + 8))(v39, v26);
    return v34;
  }
  outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
  if (one-time initialization token for videoSnippet != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.videoSnippet);
  NSString v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    unint64_t v32 = "Cover art image URL string was not a valid URL";
LABEL_13:
    _os_log_impl(&dword_0, v29, v30, v32, v31, 2u);
    swift_slowDealloc();
  }
LABEL_14:

  return 0;
}

id static VideoSnippetUtils.makeImage<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  __chkstk_darwin(v6);
  uint64_t v47 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v51 = *(void *)(v11 - 8);
  uint64_t v52 = v11;
  __chkstk_darwin(v11);
  unint64_t v50 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CharacterSet();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t v60 = v17(a2, a3);
  uint64_t v61 = v18;
  static CharacterSet.whitespaces.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v19 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0) {
    uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (!v22)
  {
    if (one-time initialization token for videoSnippet != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.videoSnippet);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v31, v32)) {
      goto LABEL_14;
    }
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    id v34 = "Cover art image URL is empty";
    goto LABEL_13;
  }
  uint64_t v60 = v17(v54, v55);
  uint64_t v61 = v23;
  uint64_t v58 = 8222587;
  unint64_t v59 = 0xE300000000000000;
  uint64_t v56 = 3223863;
  unint64_t v57 = 0xE300000000000000;
  uint64_t v60 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v61 = v24;
  uint64_t v58 = 8218747;
  unint64_t v59 = 0xE300000000000000;
  uint64_t v56 = 3158068;
  unint64_t v57 = 0xE300000000000000;
  uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  uint64_t v60 = v25;
  uint64_t v61 = v27;
  uint64_t v58 = 8218235;
  unint64_t v59 = 0xE300000000000000;
  uint64_t v56 = 7496556;
  unint64_t v57 = 0xE300000000000000;
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = v51;
  uint64_t v28 = v52;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v10, 1, v52) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v50, v10, v28);
    uint64_t v60 = v17(v54, v55);
    uint64_t v61 = v37;
    uint64_t v58 = 8218235;
    unint64_t v59 = 0xE300000000000000;
    uint64_t v56 = 7496556;
    unint64_t v57 = 0xE300000000000000;
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    id v36 = [objc_allocWithZone((Class)SAUIImageResource) init];
    NSString v38 = v47;
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v49);
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v36 setAceId:v39];

    [v36 setScaleFactor:1.0];
    uint64_t v40 = v50;
    URL._bridgeToObjectiveC()(v41);
    NSString v43 = v42;
    [v36 setResourceUrl:v42];

    [v36 setPointWidth:711.11];
    [v36 setPointHeight:400.0];
    [v36 setPixelWidth:711.11];
    [v36 setPixelHeight:400.0];
    NSString v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v36 setUrlFormatString:v44];

    (*(void (**)(char *, uint64_t))(v29 + 8))(v40, v28);
    return v36;
  }
  outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
  if (one-time initialization token for videoSnippet != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.videoSnippet);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    id v34 = "Cover art image URL string was not a valid URL";
LABEL_13:
    _os_log_impl(&dword_0, v31, v32, v34, v33, 2u);
    swift_slowDealloc();
  }
LABEL_14:

  return 0;
}

id closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for Searchfoundation_GraphicalFloat();
  __chkstk_darwin(v3);
  lazy protocol witness table accessor for type Moviespb_CoverArt.AspectRatio and conformance Moviespb_CoverArt.AspectRatio(&lazy protocol witness table cache variable for type Searchfoundation_GraphicalFloat and conformance Searchfoundation_GraphicalFloat, (void (*)(uint64_t))&type metadata accessor for Searchfoundation_GraphicalFloat);
  static Message.with(_:)();
  Searchfoundation_DynamicURLImageResource.pixelWidth.setter();
  static Message.with(_:)();
  Searchfoundation_DynamicURLImageResource.pixelHeight.setter();
  id result = [a2 urlFormatString];
  if (result)
  {
    uint64_t v5 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Searchfoundation_DynamicURLImageResource.formatURL.setter();
    return (id)Searchfoundation_DynamicURLImageResource.supportsResizing.setter();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id specialized static VideoSnippetUtils.makeContentRatingTemplate(ratingSystem:ratingValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = 0;
  if (a2 && a4)
  {
    id v10 = [objc_allocWithZone((Class)SASTTemplateContentRating) init];
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v10 setAceId:v11];

    NSString v12 = String._bridgeToObjectiveC()();
    [v10 setValue:v12];

    NSString v13 = String._bridgeToObjectiveC()();
    [v10 setSystem:v13];
  }
  return v10;
}

uint64_t specialized static VideoSnippetUtils.makeDisambiguationList(for:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11)
  {
    if (one-time initialization token for videoSnippet != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v2, (uint64_t)static Logger.videoSnippet);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v32 = 0;
      _os_log_impl(&dword_0, v30, v31, "No TV or movie objects for disambiguation list", v32, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v35 = v8;
  id v36 = v5;
  uint64_t v37 = v3;
  uint64_t v38 = v2;
  uint64_t v40 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject() - 8);
  NSString v13 = (uint8_t *)(a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)));
  uint64_t v14 = *(void *)(v12 + 72);
  swift_bridgeObjectRetain();
  do
  {
    closure #1 in static VideoSnippetUtils.makeDisambiguationList(for:)(v13, &v39);
    if (v39)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                     + (v40 & 0xFFFFFFFFFFFFFF8)) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v13 += v14;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  id v15 = [objc_allocWithZone((Class)SAUIDisambiguationList) init];
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v35);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 setAceId:v16];

  type metadata accessor for SABaseCommand(0, (unint64_t *)&lazy cache variable for type metadata for SAUIListItem);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v15 setItems:isa];

  if (one-time initialization token for videoSnippet != -1) {
    swift_once();
  }
  uint64_t v18 = v38;
  uint64_t v19 = __swift_project_value_buffer(v38, (uint64_t)static Logger.videoSnippet);
  unint64_t v21 = v36;
  uint64_t v20 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, v19, v18);
  uint64_t v22 = v15;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v23, v24))
  {

    uint64_t v23 = v22;
LABEL_21:

    (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v18);
    return (uint64_t)v22;
  }
  uint64_t v25 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)uint64_t v25 = 134217984;
  id v26 = [v22 items];
  if (v26)
  {
    uint64_t v27 = v26;
    unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v29 = *(void *)((char *)&dword_10 + (v28 & 0xFFFFFFFFFFFFFF8));
    }
    swift_bridgeObjectRelease();
    uint64_t v40 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_0, v23, v24, "Generated disambiguation list for TV or movie objects with %ld items", v25, 0xCu);
    swift_slowDealloc();
    goto LABEL_21;
  }

  __break(1u);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

id specialized static VideoSnippetUtils.makeContentDetailPage(image:appURL:utsURL:canonicalID:title:contentType:index:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v39[5] = a6;
  v39[6] = a7;
  uint64_t v41 = a4;
  uint64_t v42 = a1;
  v39[3] = a2;
  v39[4] = a3;
  uint64_t v40 = a12;
  v39[1] = a10;
  void v39[2] = a11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  v39[0] = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)v39 - v16;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v22 = [objc_allocWithZone((Class)SAVCSContentDetailPage) init];
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v22 setAceId:v23];

  NSString v24 = String._bridgeToObjectiveC()();
  [v22 setLoadingText:v24];

  NSString v25 = String._bridgeToObjectiveC()();
  [v22 setContentType:v25];

  URL.init(string:)();
  uint64_t v26 = type metadata accessor for URL();
  uint64_t v27 = *(void *)(v26 - 8);
  unint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  uint64_t v30 = 0;
  if (v28(v17, 1, v26) != 1)
  {
    URL._bridgeToObjectiveC()(v29);
    uint64_t v30 = v31;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v26);
  }
  [v22 setUrl:v30];

  NSString v32 = String._bridgeToObjectiveC()();
  [v22 setUtsId:v32];

  [v22 setResultIndex:v40];
  uint64_t v33 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    uint64_t v33 = v41 & 0xFFFFFFFFFFFFLL;
  }
  if (v33)
  {
    uint64_t v34 = (char *)v39[0];
    URL.init(string:)();
    if (v28(v34, 1, v26) == 1)
    {
      id v36 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v35);
      id v36 = v37;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v34, v26);
    }
    [v22 setUtsSearchUrl:v36];
  }
  if (v42) {
    objc_msgSend(v22, "setImage:");
  }
  return v22;
}

unint64_t specialized Apple_Parsec_Siri_V2alpha_TvOrMovieObject.withSnippetObject<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v84 = a3;
  uint64_t v83 = a2;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject();
  uint64_t v77 = *(void *)(v4 - 8);
  uint64_t v78 = v4;
  __chkstk_darwin(v4);
  uint64_t v76 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvObject();
  uint64_t v81 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v72 - v10;
  uint64_t v75 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MovieObject();
  uint64_t v82 = *(void *)(v75 - 8);
  uint64_t v12 = __chkstk_darwin(v75);
  BOOL v80 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v79 = (uint64_t)&v72 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v72 - v18;
  __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v72 - v20;
  uint64_t v74 = a1;
  Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter();
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) != 1)
  {
    id v73 = v21;
    outlined init with copy of IdentifiedUser?((uint64_t)v21, (uint64_t)v19, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
    int v29 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v19, v22);
    if (v29 == enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.tv(_:))
    {
      (*(void (**)(char *, uint64_t))(v23 + 96))(v19, v22);
      uint64_t v30 = v81;
      (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v11, v19, v6);
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v9, v11, v6);
      BOOL v80 = (char *)specialized static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)((uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for Tvpb_CoverArt, &demangling cache variable for type metadata for Tvpb_CoverArt?, (uint64_t (*)(uint64_t))Apple_Parsec_Siri_V2alpha_TvObject.sixteenByNineImages.getter, (uint64_t (*)(uint64_t))&Tvpb_CoverArt.url.getter);
      uint64_t v79 = Apple_Parsec_Siri_V2alpha_TvObject.url.getter();
      uint64_t v82 = v6;
      uint64_t v32 = v31;
      v33._uint64_t countAndFlagsBits = Apple_Parsec_Siri_V2alpha_TvObject.canonicalID.getter();
      uint64_t v86 = 0x3A636D753A6E7275;
      unint64_t v87 = 0xE800000000000000;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      uint64_t v34 = v87;
      uint64_t v78 = v86;
      uint64_t v35 = Apple_Parsec_Siri_V2alpha_TvObject.title.getter();
      uint64_t v37 = v36;
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v80;
      unint64_t v27 = (unint64_t)specialized static VideoSnippetUtils.makeContentDetailPage(image:appURL:utsURL:canonicalID:title:contentType:index:)((uint64_t)v80, v79, v32, v83, v84, v78, v34, v35, v37, v38, v40, -1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      uint64_t v41 = *(void (**)(char *, uint64_t))(v30 + 8);
      uint64_t v42 = v82;
      v41(v11, v82);
      v41(v9, v42);
    }
    else
    {
      if (v29 != enum case for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object.movie(_:))
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v22);
        if (one-time initialization token for videoSnippet != -1) {
          swift_once();
        }
        uint64_t v57 = type metadata accessor for Logger();
        uint64_t v58 = __swift_project_value_buffer(v57, (uint64_t)static Logger.videoSnippet);
        uint64_t v60 = v76;
        uint64_t v59 = v77;
        uint64_t v61 = v78;
        (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v76, v74, v78);
        unint64_t v27 = v58;
        uint64_t v62 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v64 = (uint8_t *)swift_slowAlloc();
          uint64_t v65 = swift_slowAlloc();
          unint64_t v27 = (unint64_t)v60;
          *(_DWORD *)uint64_t v64 = 136315138;
          id v85 = v64 + 4;
          uint64_t v86 = v65;
          Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter();
          uint64_t v66 = String.init<A>(describing:)();
          uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, &v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v78);
          _os_log_impl(&dword_0, v62, v63, "Unknown or future payload in a TV or movie object: %s", v64, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v61);
        }

        unint64_t v21 = v73;
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v23 + 96))(v19, v22);
      uint64_t v43 = v82;
      uint64_t v44 = v79;
      uint64_t v45 = v75;
      (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v79, v19, v75);
      uint64_t v46 = (uint64_t)v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v80, v44, v45);
      id v47 = specialized static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)(v46, (uint64_t (*)(void))&type metadata accessor for Moviespb_CoverArt, (uint64_t *)&demangling cache variable for type metadata for Moviespb_CoverArt?, (uint64_t (*)(uint64_t))Apple_Parsec_Siri_V2alpha_MovieObject.sixteenByNineImages.getter, (uint64_t (*)(uint64_t))&Moviespb_CoverArt.url.getter);
      uint64_t v48 = Apple_Parsec_Siri_V2alpha_MovieObject.url.getter();
      uint64_t v50 = v49;
      v51._uint64_t countAndFlagsBits = Apple_Parsec_Siri_V2alpha_MovieObject.canonicalID.getter();
      uint64_t v86 = 0x3A636D753A6E7275;
      unint64_t v87 = 0xE800000000000000;
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      uint64_t v53 = v86;
      uint64_t v52 = v87;
      uint64_t v54 = (void *)Apple_Parsec_Siri_V2alpha_MovieObject.titles.getter();
      if (v54[2])
      {
        uint64_t v55 = v54[4];
        uint64_t v56 = v54[5];
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v55 = 0;
        uint64_t v56 = 0xE000000000000000;
      }
      swift_bridgeObjectRelease();
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = (unint64_t)specialized static VideoSnippetUtils.makeContentDetailPage(image:appURL:utsURL:canonicalID:title:contentType:index:)((uint64_t)v47, v48, v50, v83, v84, v53, v52, v55, v56, v68, v69, -1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      Class v70 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
      v70(v79, v45);
      v70((uint64_t)v80, v45);
    }
    outlined destroy of Any?((uint64_t)v73, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
    return v27;
  }
  if (one-time initialization token for videoSnippet != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.videoSnippet);
  NSString v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  unint64_t v27 = v26;
  if (os_log_type_enabled(v25, v26))
  {
    unint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v28 = 0;
    _os_log_impl(&dword_0, v25, (os_log_type_t)v27, "No TV or movie payload in a TV or movie object", v28, 2u);
    swift_slowDealloc();
  }

LABEL_18:
  lazy protocol witness table accessor for type VideoSnippetError and conformance VideoSnippetError();
  swift_allocError();
  swift_willThrow();
  outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object?);
  return v27;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, char *), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Apple_Parsec_Siri_V2alpha_TvOrMovieObject));
  uint64_t v7 = __chkstk_darwin(v6);
  int v29 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (void *)((char *)v24 - v9);
  uint64_t v11 = _swiftEmptyArrayStorage;
  unint64_t v32 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v28 = v12;
  if (v12)
  {
    v24[2] = v4;
    uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject();
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(v13 - 8);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v26 = v15 + 16;
    unint64_t v27 = v16;
    uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
    v24[1] = a1;
    uint64_t v18 = a1 + ((v17 + 32) & ~v17);
    uint64_t v25 = *(void *)(v15 + 72);
    uint64_t v19 = (void (**)(char *, char *, uint64_t))(v15 + 32);
    do
    {
      uint64_t v20 = &v29[*(int *)(v6 + 48)];
      v27(v20, v18, v13);
      unint64_t v21 = (char *)v10 + *(int *)(v6 + 48);
      *uint64_t v10 = v14;
      (*v19)(v21, v20, v13);
      uint64_t v22 = v30(v14, v21);
      outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for (offset: Int, element: Apple_Parsec_Siri_V2alpha_TvOrMovieObject));
      if (v22)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                       + (v32 & 0xFFFFFFFFFFFFFF8)) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v14;
      v18 += v25;
    }
    while (v28 != v14);
    uint64_t v11 = (void *)v32;
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized static VideoSnippetUtils.makeContentCabinet(for:utsURL:switchProfileBuilderParams:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v48[1] = a2;
  v48[2] = a3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v7 - 8);
  uint64_t v51 = v7;
  __chkstk_darwin(v7);
  uint64_t v52 = (char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = specialized Sequence.compactMap<A>(_:)(v16, (uint64_t (*)(uint64_t, char *))partial apply for closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:), (uint64_t)v54);
  swift_bridgeObjectRelease();
  id v18 = [objc_allocWithZone((Class)SAVCSContentCabinet) init];
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v13 + 8);
  v19(v15, v12);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 setAceId:v20];
  id v49 = v18;

  id v21 = [objc_allocWithZone((Class)SAVCSContentShelf) init];
  UUID.init()();
  UUID.uuidString.getter();
  v19(v15, v12);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v21 setAceId:v22];

  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAVCSContentButton);
  uint64_t v53 = v17;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v21 setContentHead:isa];

  URL.init(string:)();
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v25 = *(void *)(v24 - 8);
  unint64_t v27 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v11, 1, v24) != 1)
  {
    URL._bridgeToObjectiveC()(v26);
    unint64_t v27 = v28;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v24);
  }
  [v21 setUrl:v27];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_AB670;
  *(void *)(v29 + 32) = v21;
  uint64_t v58 = v29;
  specialized Array._endMutation()();
  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAVCSContentShelf);
  id v30 = v21;
  Class v31 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v32 = v49;
  [v49 setShelves:v31];

  if (one-time initialization token for videoSnippet != -1) {
    swift_once();
  }
  uint64_t v33 = v51;
  uint64_t v34 = __swift_project_value_buffer(v51, (uint64_t)static Logger.videoSnippet);
  uint64_t v35 = v50;
  uint64_t v36 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v52, v34, v33);
  id v37 = v32;
  swift_bridgeObjectRetain();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v38, v39))
  {

    swift_bridgeObjectRelease_n();
LABEL_13:
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v33);
    return (uint64_t)v37;
  }
  id v49 = v30;
  uint64_t v40 = swift_slowAlloc();
  *(_DWORD *)uint64_t v40 = 134218240;
  id v41 = [v37 shelves];
  if (v41)
  {
    uint64_t v42 = v41;
    unint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v43 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = v52;
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v44 = *(void *)((char *)&dword_10 + (v43 & 0xFFFFFFFFFFFFFF8));
    }
    unint64_t v45 = (unint64_t)v53;
    swift_bridgeObjectRelease();
    uint64_t v58 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v40 + 12) = 2048;
    if (v45 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = v52;
      uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v46 = *(void *)((char *)&dword_10 + (v45 & 0xFFFFFFFFFFFFFF8));
    }
    swift_bridgeObjectRelease();
    uint64_t v58 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v38, v39, "Built content cabinet (%ld shelves, %ld buttons) for TV or movie objects", (uint8_t *)v40, 0x16u);
    swift_slowDealloc();

    goto LABEL_13;
  }

  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void *specialized static VideoSnippetUtils.makeResultSnippets(for:switchProfileBuilderParams:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = Apple_Parsec_Siri_V2alpha_VideoObjectComponent.tvOrMovieObject.getter();
  uint64_t v8 = v7;
  if (!*(void *)(v7 + 16))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for videoSnippet != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.videoSnippet);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "No TV or movie objects in component; cannot build result snippets", v15, 2u);
      swift_slowDealloc();
    }

    return _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, v7 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v3);
  uint64_t v10 = Apple_Parsec_Siri_V2alpha_VideoObjectComponent.relativeUtsSearchURL.getter();
  unint64_t v11 = v9;
  if (*(void *)(v8 + 16) != 1)
  {
    uint64_t v16 = specialized static VideoSnippetUtils.makeContentCabinet(for:utsURL:switchProfileBuilderParams:)(v8, v10, v9, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16)
    {
      if (one-time initialization token for videoSnippet != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.videoSnippet);
      id v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        NSString v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)NSString v20 = 0;
        _os_log_impl(&dword_0, v18, v19, "Built content cabinet for multiple TV or movie objects", v20, 2u);
        swift_slowDealloc();
      }

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_AB670;
      *(void *)(v21 + 32) = v16;
      goto LABEL_20;
    }
    if (one-time initialization token for videoSnippet != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.videoSnippet);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      Class v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v31 = 0;
      _os_log_impl(&dword_0, v29, v30, "Could not construct content cabinet for TV or movie objects", v31, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v22 = specialized Apple_Parsec_Siri_V2alpha_TvOrMovieObject.withSnippetObject<A>(_:)((uint64_t)v6, v10, v11);
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for videoSnippet != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.videoSnippet);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&dword_0, v24, v25, "Built detail page for single TV or movie object", v26, 2u);
    swift_slowDealloc();
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_AB670;
  *(void *)(v21 + 32) = v22;
LABEL_20:
  uint64_t v34 = v21;
  specialized Array._endMutation()();
  uint64_t v27 = v34;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (void *)v27;
}

void *specialized static VideoSnippetUtils.makeVideoSnippets(for:switchProfileBuilderParams:)(uint8_t *a1, uint64_t a2)
{
  uint64_t v68 = a2;
  id v73 = a1;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoObjectComponent.VideoUseCase();
  uint64_t v71 = *(void *)(v2 - 8);
  uint64_t v72 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  Class v70 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v67 = (char *)&v60 - v5;
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoObjectComponent();
  uint64_t v69 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DeviceClass();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  os_log_type_t v19 = (char *)&v60 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v60 - v20;
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.deviceClass.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for DeviceClass?);
    if (one-time initialization token for videoSnippet != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.videoSnippet);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v25 = 0;
      _os_log_impl(&dword_0, v23, v24, "Not generating video snippets for video object component; cannot determine device class",
        v25,
        2u);
      swift_slowDealloc();
    }

    return _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v21, v11, v12);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v19, enum case for DeviceClass.appleTV(_:), v12);
  char v26 = static DeviceClass.== infix(_:_:)();
  uint64_t v27 = v13 + 8;
  uint64_t v66 = *(void (**)(char *, uint64_t))(v13 + 8);
  v66(v19, v12);
  uint64_t v28 = v21;
  if ((v26 & 1) == 0)
  {
    if (one-time initialization token for videoSnippet != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.videoSnippet);
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v42(v16, v21, v12);
    unint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc();
      uint64_t v65 = v13 + 8;
      uint64_t v46 = (uint8_t *)v45;
      uint64_t v75 = (void *)swift_slowAlloc();
      uint64_t v64 = v28;
      *(_DWORD *)uint64_t v46 = 136315138;
      id v73 = v46 + 4;
      v42(v19, v16, v12);
      uint64_t v47 = String.init<A>(describing:)();
      uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)&v75);
      uint64_t v28 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v49 = v66;
      v66(v16, v12);
      _os_log_impl(&dword_0, v43, v44, "Not generating video snippets for video object component on device class: %s", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v49 = v66;
      v66(v16, v12);
    }

    v49(v28, v12);
    return _swiftEmptyArrayStorage;
  }
  if (one-time initialization token for videoSnippet != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.videoSnippet);
  uint64_t v31 = v69;
  uint64_t v32 = (uint64_t)v73;
  (*(void (**)(char *, uint8_t *, uint64_t))(v69 + 16))(v8, v73, v6);
  uint64_t v63 = v30;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v65 = v27;
    uint64_t v36 = (uint8_t *)v35;
    uint64_t v62 = swift_slowAlloc();
    uint64_t v75 = (void *)v62;
    uint64_t v64 = v28;
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v60 = v36 + 4;
    uint64_t v61 = v36;
    Apple_Parsec_Siri_V2alpha_VideoObjectComponent.videoUseCase.getter();
    uint64_t v37 = v72;
    uint64_t v38 = String.init<A>(describing:)();
    uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)&v75);
    uint64_t v28 = v64;
    uint64_t v32 = (uint64_t)v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
    uint64_t v40 = v37;
    _os_log_impl(&dword_0, v33, v34, "Building video snippets for use case: %s", v61, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);

    uint64_t v40 = v72;
  }
  uint64_t v50 = v70;
  Apple_Parsec_Siri_V2alpha_VideoObjectComponent.videoUseCase.getter();
  uint64_t v51 = v71;
  if ((*(unsigned int (**)(char *, uint64_t))(v71 + 88))(v50, v40) != enum case for Apple_Parsec_Siri_V2alpha_VideoObjectComponent.VideoUseCase.disambiguate(_:))
  {
    uint64_t v55 = specialized static VideoSnippetUtils.makeResultSnippets(for:switchProfileBuilderParams:)(v32, v68);
    v66(v28, v12);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v40);
    return v55;
  }
  uint64_t v52 = Apple_Parsec_Siri_V2alpha_VideoObjectComponent.tvOrMovieObject.getter();
  uint64_t v53 = specialized static VideoSnippetUtils.makeDisambiguationList(for:)(v52);
  swift_bridgeObjectRelease();
  if (!v53)
  {
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl(&dword_0, v57, v58, "Could not build disambiguation list for TV or movie objects", v59, 2u);
      swift_slowDealloc();
    }

    v66(v28, v12);
    return _swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_AB670;
  *(void *)(v54 + 32) = v53;
  uint64_t v75 = (void *)v54;
  specialized Array._endMutation()();
  uint64_t v55 = v75;
  v66(v28, v12);
  return v55;
}

_UNKNOWN **associated type witness table accessor for VideoSnippetObject.CoverArtType : VideoSnippetCoverArt in Apple_Parsec_Siri_V2alpha_MovieObject()
{
  return &protocol witness table for Moviespb_CoverArt;
}

_UNKNOWN **associated type witness table accessor for VideoSnippetObject.CoverArtType : VideoSnippetCoverArt in Apple_Parsec_Siri_V2alpha_TvObject()
{
  return &protocol witness table for Tvpb_CoverArt;
}

unint64_t lazy protocol witness table accessor for type VideoSnippetError and conformance VideoSnippetError()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoSnippetError and conformance VideoSnippetError;
  if (!lazy protocol witness table cache variable for type VideoSnippetError and conformance VideoSnippetError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoSnippetError and conformance VideoSnippetError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VideoSnippetError and conformance VideoSnippetError;
  if (!lazy protocol witness table cache variable for type VideoSnippetError and conformance VideoSnippetError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoSnippetError and conformance VideoSnippetError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for VideoSnippetError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x5AACCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoSnippetError()
{
  return &type metadata for VideoSnippetError;
}

ValueMetadata *type metadata accessor for VideoSnippetUtils()
{
  return &type metadata for VideoSnippetUtils;
}

id partial apply for closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)(uint64_t a1)
{
  return closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)(a1, (SEL *)&selRef_pixelWidth);
}

uint64_t lazy protocol witness table accessor for type Moviespb_CoverArt.AspectRatio and conformance Moviespb_CoverArt.AspectRatio(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #2 in closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)(a1, (SEL *)&selRef_pixelHeight);
}

uint64_t partial apply for closure #1 in closure #2 in static VideoSnippetUtils.makeDynamicURLImageResource(for:)(uint64_t a1, SEL *a2)
{
  [*(id *)(v2 + 16) *a2];
  return Searchfoundation_GraphicalFloat.doubleValue.setter();
}

id partial apply for closure #1 in static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static VideoSnippetUtils.makeSixteenByNineImage<A>(for:)(a1, a2);
}

uint64_t partial apply for closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:)(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t partial apply for closure #1 in closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in closure #1 in static VideoSnippetUtils.makeContentButtons(for:utsURL:switchProfileBuilderParams:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 40), *(void **)(v2 + 48), a2);
}

id specialized static VideoSnippetUtils.makeProfileSwitch(switchProfileBuilderParams:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of IdentifiedUser?(a1, (uint64_t)v8, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    id v13 = [objc_allocWithZone((Class)SAProfileSwitch) init];
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v13 setAceId:v14];

    Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams.userID.getter();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v13 setSharedUserId:v15];

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return v13;
}

id specialized static VideoSnippetUtils.makeContentButton(image:appURL:canonicalID:addViews:switchProfile:title:contentType:contentRatingValue:contentRatingSystem:contentRowDescription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v63 = a8;
  uint64_t v54 = a4;
  uint64_t v55 = a5;
  uint64_t v56 = a2;
  uint64_t v57 = a3;
  uint64_t v52 = a17;
  uint64_t v53 = a1;
  uint64_t v60 = a15;
  uint64_t v61 = a13;
  uint64_t v58 = a14;
  uint64_t v59 = a12;
  uint64_t v62 = a10;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  os_log_type_t v25 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_AB670;
  *(void *)(v26 + 32) = a6;
  uint64_t v66 = v26;
  specialized Array._endMutation()();
  if (a7)
  {
    id v27 = a6;
    id v28 = a7;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (v66 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                   + (v66 & 0xFFFFFFFFFFFFFF8)) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  else
  {
    id v29 = a6;
  }
  id v30 = objc_allocWithZone((Class)SAVCSContentButton);
  id v31 = objc_msgSend(v30, "init", v52);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v31 setAceId:v32];

  id v33 = v31;
  NSString v34 = String._bridgeToObjectiveC()();
  [v33 setText:v34];

  NSString v35 = String._bridgeToObjectiveC()();
  [v33 setSecondaryText:v35];

  [v33 setImage:v53];
  id v36 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v36 setCommands:isa];

  uint64_t v38 = v62;
  NSString v39 = String._bridgeToObjectiveC()();
  [v36 setContentType:v39];

  NSString v40 = String._bridgeToObjectiveC()();
  [v36 setCanonicalId:v40];

  URL.init(string:)();
  uint64_t v41 = type metadata accessor for URL();
  uint64_t v42 = *(void *)(v41 - 8);
  os_log_type_t v44 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v21, 1, v41) != 1)
  {
    URL._bridgeToObjectiveC()(v43);
    os_log_type_t v44 = v45;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v41);
  }
  [v36 setUrl:v44];

  id v46 = specialized static VideoSnippetUtils.makeContentRatingTemplate(ratingSystem:ratingValue:)(v58, v60, v59, v61);
  [v36 setContentRating:v46];

  if (one-time initialization token for videoSnippet != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  __swift_project_value_buffer(v47, (uint64_t)static Logger.videoSnippet);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    *(_DWORD *)uint64_t v50 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, a11, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v50 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, a9, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v48, v49, "Built content button for %s “%s”", (uint8_t *)v50, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  return v36;
}

uint64_t static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)
                                                         + async function pointer to specialized static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return v9(a1, a2, a3);
}

uint64_t static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:)
                                                         + async function pointer to specialized static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return v9(a1, a2, a3);
}

uint64_t static SuggestionsIntentDonator.donateRelatedQuestionsSuggestions(_:requestID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SuggestionsIntentDonator.donateRelatedQuestionsSuggestions(_:requestID:)
                                                         + async function pointer to specialized static SuggestionsIntentDonator.donateRelatedQuestionsSuggestions(_:requestID:));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return v9(a1, a2, a3);
}

uint64_t static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:)
                                                         + async function pointer to specialized static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v9(a1, a2, a3);
}

uint64_t static SuggestionsIntentDonator.donateAlternateQuerySuggestion(_:requestID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SuggestionsIntentDonator.donateAlternateQuerySuggestion(_:requestID:)
                                                         + async function pointer to specialized static SuggestionsIntentDonator.donateAlternateQuerySuggestion(_:requestID:));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return v9(a1, a2, a3);
}

uint64_t closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  return _swift_task_switch(closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:), 0, 0);
}

uint64_t closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:)()
{
  type metadata accessor for SiriSuggestionsAPIClients();
  static SiriSuggestionsAPIClients.get()();
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[10] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:);
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  return dispatch thunk of SiriSuggestionsEngagementAPIClient.submitEngagement(for:with:)(v6, v5, v1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:);
  }
  else {
    uint64_t v2 = closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of Any?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[29] = v10;
  v8[30] = v11;
  v8[27] = a7;
  v8[28] = a8;
  v8[25] = a5;
  v8[26] = a6;
  v8[24] = a4;
  return _swift_task_switch(closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:), 0, 0);
}

uint64_t closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:)()
{
  type metadata accessor for SiriSuggestionsAPIClients();
  static SiriSuggestionsAPIClients.get()();
  uint64_t v1 = v0[17];
  __swift_project_boxed_opaque_existential_1(v0 + 14, v1);
  if (one-time initialization token for kOwnerInformation != -1) {
    swift_once();
  }
  uint64_t v3 = v0[29];
  unint64_t v2 = v0[30];
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[28];
  uint64_t v6 = static SuggestionConstants.kOwnerInformation;
  v0[22] = type metadata accessor for DomainOwner();
  v0[23] = lazy protocol witness table accessor for type DomainOwner and conformance DomainOwner(&lazy protocol witness table cache variable for type DomainOwner and conformance DomainOwner, (void (*)(uint64_t))&type metadata accessor for DomainOwner);
  v0[19] = v6;
  swift_retain();
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
  v0[31] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Decodable & Encodable & Sendable)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_AB370;
  *(void *)(inited + 32) = v4;
  *(void *)(inited + 40) = v5;
  *(void *)(inited + 72) = &type metadata for Data;
  *(void *)(inited + 80) = lazy protocol witness table accessor for type Data and conformance Data();
  *(void *)(inited + 88) = lazy protocol witness table accessor for type Data and conformance Data();
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = v2;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v3, v2);
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v0[32] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[33] = v10;
  *uint64_t v10 = v0;
  v10[1] = closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:);
  uint64_t v12 = v0[25];
  uint64_t v11 = v0[26];
  return SiriSuggestionsBaseAPIClient.submitCurrentIntent(for:owner:intentProps:verb:executionParams:)(v12, v11, v0 + 19, v7, 0, 0, v9, v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  unint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v2 + 152);
    uint64_t v3 = closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 152);
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[221] = a7;
  v7[220] = a6;
  v7[219] = a5;
  v7[213] = a4;
  uint64_t v8 = type metadata accessor for PommesLocationInfo();
  v7[222] = v8;
  v7[223] = *(void *)(v8 - 8);
  v7[224] = swift_task_alloc();
  v7[225] = swift_task_alloc();
  v7[226] = swift_task_alloc();
  v7[227] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesLocationInfo, LocationError>);
  v7[228] = swift_task_alloc();
  v7[229] = swift_task_alloc();
  type metadata accessor for IntentType();
  v7[230] = swift_task_alloc();
  return _swift_task_switch(closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), 0, 0);
}

uint64_t closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)()
{
  uint64_t v63 = v0;
  uint64_t v1 = *(void *)(v0 + 1752);
  type metadata accessor for PommesLocationManager();
  unint64_t v2 = (void *)static PommesLocationManager.shared.getter();
  *(void *)(v0 + 1848) = v2;
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 1856) = v3;
  *(void *)(v3 + 16) = v2;
  id v4 = v2;
  swift_retain();
  swift_asyncLet_begin();
  id v5 = specialized static PegasusACEConverters.makeShowMapPoints(params:)(v1);
  *(void *)(v0 + 1864) = v5;
  if (([v5 showDirections] & 1) != 0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    id v6 = [v5 itemDestination];
    if (v6)
    {
      unint64_t v7 = v6;
      id v8 = [v6 label];

      if (v8)
      {
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v11 = v10;

        *(void *)(v0 + 864) = &type metadata for String;
        *(void *)(v0 + 872) = &protocol witness table for String;
        *(void *)(v0 + 880) = &protocol witness table for String;
        *(void *)(v0 + 840) = v9;
        *(void *)(v0 + 848) = v11;
        outlined init with take of Decodable & Encodable & Sendable((long long *)(v0 + 840), (_OWORD *)(v0 + 888));
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v62 = &_swiftEmptyDictionarySingleton;
        uint64_t v13 = *(void *)(v0 + 912);
        uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 888, v13);
        uint64_t v15 = *(void *)(v13 - 8);
        uint64_t v16 = (uint64_t *)swift_task_alloc();
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(v16, v14, v13);
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(*v16, v16[1], 0xD000000000000010, 0x80000000000AFC50, isUniquelyReferenced_nonNull_native, &v62);
        __swift_destroy_boxed_opaque_existential_1(v0 + 888);
        swift_task_dealloc();
        uint64_t v17 = v62;
        swift_bridgeObjectRelease();
        id v18 = [v5 itemDestination];
        if (v18)
        {
          uint64_t v19 = v18;
          id v20 = [v18 location];

          if (v20)
          {
            id v21 = [v20 latitude];

            if (v21)
            {
              [v21 doubleValue];
              *(void *)(v0 + 816) = &type metadata for Double;
              *(void *)(v0 + 824) = &protocol witness table for Double;
              *(void *)(v0 + 832) = &protocol witness table for Double;
              *(void *)(v0 + 792) = v22;
              outlined init with take of Decodable & Encodable & Sendable((long long *)(v0 + 792), (_OWORD *)(v0 + 1320));
              char v60 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v62 = v17;
              uint64_t v23 = *(void *)(v0 + 1344);
              uint64_t v24 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 1320, v23);
              uint64_t v25 = *(void *)(v23 - 8);
              uint64_t v26 = (double *)swift_task_alloc();
              (*(void (**)(double *, uint64_t, uint64_t))(v25 + 16))(v26, v24, v23);
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x74616E6974736564, 0xEE0074614C6E6F69, v60, &v62, *v26);
              __swift_destroy_boxed_opaque_existential_1(v0 + 1320);
              swift_task_dealloc();
              uint64_t v17 = v62;
              swift_bridgeObjectRelease();
            }
          }
        }
        id v27 = [v5 itemDestination];
        if (v27)
        {
          id v28 = v27;
          id v29 = [v27 location];

          if (v29)
          {
            id v30 = [v29 longitude];

            if (v30)
            {
              [v30 doubleValue];
              *(void *)(v0 + 1008) = &type metadata for Double;
              *(void *)(v0 + 1016) = &protocol witness table for Double;
              *(void *)(v0 + 1024) = &protocol witness table for Double;
              *(void *)(v0 + 984) = v31;
              outlined init with take of Decodable & Encodable & Sendable((long long *)(v0 + 984), (_OWORD *)(v0 + 936));
              char v61 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v62 = v17;
              uint64_t v32 = *(void *)(v0 + 960);
              uint64_t v33 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 936, v32);
              uint64_t v34 = *(void *)(v32 - 8);
              NSString v35 = (double *)swift_task_alloc();
              (*(void (**)(double *, uint64_t, uint64_t))(v34 + 16))(v35, v33, v32);
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x74616E6974736564, 0xEF676E6F4C6E6F69, v61, &v62, *v35);
              __swift_destroy_boxed_opaque_existential_1(v0 + 936);
              swift_task_dealloc();
              uint64_t v17 = v62;
              swift_bridgeObjectRelease();
            }
          }
        }
        id v36 = [v5 itemDestination];
        if (v36)
        {
          uint64_t v37 = v36;
          id v38 = [v36 detailType];

          if (v38)
          {
            uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v41 = v40;

            *(void *)(v0 + 1104) = &type metadata for String;
            *(void *)(v0 + 1112) = &protocol witness table for String;
            *(void *)(v0 + 1120) = &protocol witness table for String;
            *(void *)(v0 + 1080) = v39;
            *(void *)(v0 + 1088) = v41;
            outlined init with take of Decodable & Encodable & Sendable((long long *)(v0 + 1080), (_OWORD *)(v0 + 1032));
            char v42 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v62 = v17;
            uint64_t v43 = *(void *)(v0 + 1056);
            uint64_t v44 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 1032, v43);
            uint64_t v45 = *(void *)(v43 - 8);
            id v46 = (uint64_t *)swift_task_alloc();
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(v45 + 16))(v46, v44, v43);
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(*v46, v46[1], 0xD000000000000015, 0x80000000000AFC90, v42, &v62);
            __swift_destroy_boxed_opaque_existential_1(v0 + 1032);
            swift_task_dealloc();
            uint64_t v17 = v62;
            swift_bridgeObjectRelease();
          }
        }
        id v47 = [v5 itemSource];
        if (v47)
        {
          unint64_t v48 = v47;
          id v49 = [v47 detailType];

          if (v49)
          {
            uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v52 = v51;

            *(void *)(v0 + 1200) = &type metadata for String;
            *(void *)(v0 + 1208) = &protocol witness table for String;
            *(void *)(v0 + 1216) = &protocol witness table for String;
            *(void *)(v0 + 1176) = v50;
            *(void *)(v0 + 1184) = v52;
            outlined init with take of Decodable & Encodable & Sendable((long long *)(v0 + 1176), (_OWORD *)(v0 + 1128));
            char v53 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v62 = v17;
            uint64_t v54 = *(void *)(v0 + 1152);
            uint64_t v55 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 1128, v54);
            uint64_t v56 = *(void *)(v54 - 8);
            uint64_t v57 = (uint64_t *)swift_task_alloc();
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(v56 + 16))(v57, v55, v54);
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(*v57, v57[1], 0xD000000000000010, 0x80000000000AFC70, v53, &v62);
            __swift_destroy_boxed_opaque_existential_1(v0 + 1128);
            swift_task_dealloc();
            uint64_t v17 = v62;
            swift_bridgeObjectRelease();
          }
        }
        *(void *)(v0 + 1872) = v17;
        static IntentType.appIntent(_:)();
        type metadata accessor for SuggestionsIntent();
        swift_allocObject();
        *(void *)(v0 + 1880) = SuggestionsIntent.init(intentName:verb:intentProps:)();
        return _swift_asyncLet_get_throwing(v0 + 16, v0 + 1944, closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), v0 + 1616);
      }
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v58 = v0 + 1568;
  }
  else
  {
    swift_bridgeObjectRelease();

    uint64_t v58 = v0 + 656;
  }
  return _swift_asyncLet_finish(v0 + 16, v0 + 1944, closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), v58);
}

{
  return _swift_task_switch(closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(v1 + 1888) = v0;
  if (v0)
  {
    swift_bridgeObjectRelease();
    unint64_t v2 = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }
  else
  {
    unint64_t v2 = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  NSObject *v36;
  os_log_type_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  uint64_t v62 = v0;
  uint64_t v1 = *(void *)(v0 + 1832);
  unint64_t v2 = *(void *)(v0 + 1824);
  PommesLocationManager.cachedLocationInfo()();
  outlined init with copy of Result<PommesLocationInfo, LocationError>(v1, v2);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v11 = *(void *)(v0 + 1872);
    (*(void (**)(void, void, void))(*(void *)(v0 + 1784) + 32))(*(void *)(v0 + 1808), *(void *)(v0 + 1824), *(void *)(v0 + 1776));
    uint64_t v12 = (void *)PommesLocationInfo.location.getter();
    [v12 coordinate];
    uint64_t v14 = v13;

    *(void *)(v0 + 720) = &type metadata for Double;
    *(void *)(v0 + 728) = &protocol witness table for Double;
    *(void *)(v0 + 736) = &protocol witness table for Double;
    *(void *)(v0 + 696) = v14;
    outlined init with take of Decodable & Encodable & Sendable((long long *)(v0 + 696), (_OWORD *)(v0 + 744));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v61 = v11;
    uint64_t v16 = *(void *)(v0 + 768);
    uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 744, v16);
    id v18 = *(void *)(v16 - 8);
    uint64_t v19 = (double *)swift_task_alloc();
    (*(void (**)(double *, uint64_t, uint64_t))(v18 + 16))(v19, v17, v16);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x4C746E6572727563, 0xEA00000000007461, isUniquelyReferenced_nonNull_native, &v61, *v19);
    __swift_destroy_boxed_opaque_existential_1(v0 + 744);
    swift_task_dealloc();
    id v20 = v61;
    swift_bridgeObjectRelease();
    id v21 = (void *)PommesLocationInfo.location.getter();
    [v21 coordinate];
    uint64_t v23 = v22;

    *(void *)(v0 + 1296) = &type metadata for Double;
    *(void *)(v0 + 1304) = &protocol witness table for Double;
    *(void *)(v0 + 1312) = &protocol witness table for Double;
    *(void *)(v0 + 1272) = v23;
    outlined init with take of Decodable & Encodable & Sendable((long long *)(v0 + 1272), (_OWORD *)(v0 + 1224));
    LOBYTE(v21) = swift_isUniquelyReferenced_nonNull_native();
    char v61 = v20;
    uint64_t v24 = *(void *)(v0 + 1248);
    uint64_t v25 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 1224, v24);
    uint64_t v26 = *(void *)(v24 - 8);
    id v27 = (double *)swift_task_alloc();
    (*(void (**)(double *, uint64_t, uint64_t))(v26 + 16))(v27, v25, v24);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x4C746E6572727563, 0xEB00000000676E6FLL, (char)v21, &v61, *v27);
    __swift_destroy_boxed_opaque_existential_1(v0 + 1224);
    swift_task_dealloc();
    id v28 = v61;
    swift_bridgeObjectRelease();
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    id v29 = *(void *)(v0 + 1808);
    id v30 = *(void *)(v0 + 1800);
    uint64_t v31 = *(void *)(v0 + 1792);
    uint64_t v32 = *(void *)(v0 + 1784);
    uint64_t v33 = *(void *)(v0 + 1776);
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.information);
    NSString v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
    v35(v30, v29, v33);
    v35(v31, v29, v33);
    id v36 = Logger.logObject.getter();
    uint64_t v37 = static os_log_type_t.info.getter();
    id v38 = os_log_type_enabled(v36, v37);
    uint64_t v39 = *(void *)(v0 + 1800);
    uint64_t v40 = *(void *)(v0 + 1792);
    uint64_t v41 = *(void *)(v0 + 1784);
    char v42 = *(void *)(v0 + 1776);
    if (v38)
    {
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 134218240;
      uint64_t v44 = (void *)PommesLocationInfo.location.getter();
      [v44 coordinate];
      id v46 = v45;

      *(void *)(v0 + 1656) = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v47 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v47(v39, v42);
      *(_WORD *)(v43 + 12) = 2048;
      unint64_t v48 = (void *)PommesLocationInfo.location.getter();
      [v48 coordinate];
      uint64_t v50 = v49;

      *(void *)(v0 + 1608) = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v47(v40, v42);
      _os_log_impl(&dword_0, v36, v37, "Fetched location (%f, %f)", (uint8_t *)v43, 0x16u);
      swift_slowDealloc();
    }
    else
    {

      id v47 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v47(v40, v42);
      v47(v39, v42);
    }
    v47(*(void *)(v0 + 1808), *(void *)(v0 + 1776));
    goto LABEL_25;
  }
  uint64_t v3 = *(void *)(v0 + 1824);
  id v4 = type metadata accessor for LocationError();
  id v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 88))(v3, v4);
  if (v5 == enum case for LocationError.unavailable(_:))
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    id v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.information);
    unint64_t v7 = Logger.logObject.getter();
    id v8 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v7, v8)) {
      goto LABEL_24;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    uint64_t v10 = "Location unavailable";
LABEL_23:
    _os_log_impl(&dword_0, v7, v8, v10, v9, 2u);
    swift_slowDealloc();
LABEL_24:

    id v28 = *(void *)(v0 + 1872);
LABEL_25:
    *(void *)(v0 + 1896) = v28;
    *(void *)(v0 + 1904) = type metadata accessor for SiriSuggestionsAPIClients();
    static SiriSuggestionsAPIClients.get()();
    char v53 = *(void *)(v0 + 1552);
    uint64_t v54 = *(void *)(v0 + 1560);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 1528), v53);
    uint64_t v55 = (void *)swift_task_alloc();
    *(void *)(v0 + 1912) = v55;
    uint64_t v56 = *(void *)(v54 + 8);
    void *v55 = v0;
    v55[1] = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
    uint64_t v57 = *(void *)(v0 + 1768);
    uint64_t v58 = *(void *)(v0 + 1760);
    return SiriSuggestionsBaseAPIClient.submitExecutionParams(for:executionParams:)(v58, v57, v28, v53, v56);
  }
  if (v5 == enum case for LocationError.locationDisabled(_:))
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)static Logger.information);
    unint64_t v7 = Logger.logObject.getter();
    id v8 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v7, v8)) {
      goto LABEL_24;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    uint64_t v10 = "Location services disabled";
    goto LABEL_23;
  }
  if (v5 == enum case for LocationError.siriLocationDisabled(_:))
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.information);
    unint64_t v7 = Logger.logObject.getter();
    id v8 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v7, v8)) {
      goto LABEL_24;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    uint64_t v10 = "Siri location sharing disabled";
    goto LABEL_23;
  }
  uint64_t v59 = *(void *)(v0 + 1816);
  return _diagnoseUnexpectedEnumCase<A>(type:)(v59, v59);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1920) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    unint64_t v2 = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }
  else {
    unint64_t v2 = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 191));
  static SiriSuggestionsAPIClients.get()();
  uint64_t v1 = v0[184];
  unint64_t v2 = v0[185];
  __swift_project_boxed_opaque_existential_1(v0 + 181, v1);
  if (one-time initialization token for kOwnerMaps != -1) {
    swift_once();
  }
  uint64_t v3 = static SuggestionConstants.kOwnerMaps;
  v0[174] = type metadata accessor for DomainOwner();
  v0[175] = lazy protocol witness table accessor for type DomainOwner and conformance DomainOwner(&lazy protocol witness table cache variable for type DomainOwner and conformance DomainOwner, (void (*)(uint64_t))&type metadata accessor for DomainOwner);
  v0[171] = v3;
  swift_retain();
  id v4 = (void *)swift_task_alloc();
  v0[241] = v4;
  id v5 = *(void *)(v2 + 8);
  *id v4 = v0;
  v4[1] = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  id v6 = v0[235];
  unint64_t v7 = v0[221];
  id v8 = v0[220];
  return SiriSuggestionsBaseAPIClient.submitCurrentIntent(for:intent:owner:)(v8, v7, v6, v0 + 171, v1, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  unint64_t v2 = *v1;
  *(void *)(*v1 + 1936) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v2 + 1368);
    uint64_t v3 = closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 1832);

  swift_release();
  outlined destroy of Any?(v1, &demangling cache variable for type metadata for Result<PommesLocationInfo, LocationError>);
  __swift_destroy_boxed_opaque_existential_1(v0 + 1448);
  return _swift_asyncLet_finish(v0 + 16, v0 + 1944, closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), v0 + 1408);
}

{
  return _swift_task_switch(closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v2;

  swift_release();
  return _swift_asyncLet_finish(v0 + 16, v0 + 1944, closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), v0 + 1712);
}

{
  return _swift_task_switch(closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 1832);

  swift_release();
  outlined destroy of Any?(v1, &demangling cache variable for type metadata for Result<PommesLocationInfo, LocationError>);
  __swift_destroy_boxed_opaque_existential_1(v0 + 1528);
  return _swift_asyncLet_finish(v0 + 16, v0 + 1944, closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), v0 + 1664);
}

{
  return _swift_task_switch(closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 1832);

  swift_release();
  outlined destroy of Any?(v1, &demangling cache variable for type metadata for Result<PommesLocationInfo, LocationError>);
  __swift_destroy_boxed_opaque_existential_1(v0 + 1368);
  __swift_destroy_boxed_opaque_existential_1(v0 + 1448);
  return _swift_asyncLet_finish(v0 + 16, v0 + 1944, closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), v0 + 1488);
}

{
  return _swift_task_switch(closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), 0, 0);
}

uint64_t implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)()
{
  uint64_t v1 = PommesLocationManager.fetchLocation()();
  v0[4] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[5] = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *uint64_t v2 = v0;
  v2[1] = implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  uint64_t v4 = v0[2];
  return Task.value.getter(v4, v1, &type metadata for Bool, v3, &protocol self-conformance witness table for Error);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }
  else {
    uint64_t v2 = implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  id v28 = &type metadata for String;
  id v29 = &protocol witness table for String;
  id v30 = &protocol witness table for String;
  *(void *)&long long v27 = a1;
  *((void *)&v27 + 1) = a2;
  uint64_t v10 = (void *)*a6;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a5 & 1) != 0)
  {
LABEL_7:
    id v18 = (void *)*a6;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (_OWORD *)(v18[7] + 48 * v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      return outlined init with take of Decodable & Encodable & Sendable(&v27, v19);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a5 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_14:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  id v18 = (void *)*a6;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v27, (uint64_t)&type metadata for String);
  __chkstk_darwin(v23);
  uint64_t v25 = (uint64_t *)((char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a4, *v25, v25[1], v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void *a4, double a5)
{
  *(double *)&long long v26 = a5;
  long long v27 = &type metadata for Double;
  id v28 = &protocol witness table for Double;
  id v29 = &protocol witness table for Double;
  uint64_t v9 = (void *)*a4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v15 = v10;
  uint64_t v16 = v9[3];
  if (v16 >= v14 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v17 = (void *)*a4;
    if (v15)
    {
LABEL_8:
      id v18 = (_OWORD *)(v17[7] + 48 * v11);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      return outlined init with take of Decodable & Encodable & Sendable(&v26, v18);
    }
    goto LABEL_11;
  }
  if (v16 >= v14 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v15 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v11 = v20;
  uint64_t v17 = (void *)*a4;
  if (v15) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v22 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v26, (uint64_t)&type metadata for Double);
  __chkstk_darwin(v22);
  uint64_t v24 = (double *)((char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(double *))(v25 + 16))(v24);
  specialized _NativeDictionary._insert(at:key:value:)(v11, a1, a2, v17, *v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  *(double *)&long long v11 = a5;
  uint64_t v12 = &type metadata for Double;
  BOOL v13 = &protocol witness table for Double;
  uint64_t v14 = &protocol witness table for Double;
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a4[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Decodable & Encodable & Sendable(&v11, (_OWORD *)(a4[7] + 48 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  BOOL v13 = &type metadata for String;
  uint64_t v14 = &protocol witness table for String;
  char v15 = &protocol witness table for String;
  *(void *)&long long v12 = a4;
  *((void *)&v12 + 1) = a5;
  a6[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v7 = (void *)(a6[6] + 16 * a1);
  *unint64_t v7 = a2;
  v7[1] = a3;
  uint64_t result = outlined init with take of Decodable & Encodable & Sendable(&v12, (_OWORD *)(a6[7] + 48 * a1));
  uint64_t v9 = a6[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a6[2] = v11;
  }
  return result;
}

uint64_t specialized static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v34 = a5;
  unint64_t v35 = a6;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for PerformanceUtil.Ticket();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v30 - v15;
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v8, 1, 1, v17);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v19 = (v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = 0;
  *(void *)(v21 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v21 + v18, v14, v10);
  uint64_t v22 = (void *)(v21 + v19);
  uint64_t v23 = v31;
  *uint64_t v22 = v30;
  v22[1] = v23;
  uint64_t v24 = (void *)(v21 + v20);
  uint64_t v25 = v33;
  *uint64_t v24 = v32;
  v24[1] = v25;
  long long v26 = (uint64_t *)(v21 + ((v20 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v28 = v34;
  unint64_t v27 = v35;
  *long long v26 = v34;
  v26[1] = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v28, v27);
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:), v21);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
}

uint64_t specialized static SuggestionsIntentDonator.donateAlternateQuerySuggestion(_:requestID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  uint64_t SuggestionCandidate = type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestionCandidate();
  v3[12] = SuggestionCandidate;
  v3[13] = *(void *)(SuggestionCandidate - 8);
  v3[14] = swift_task_alloc();
  uint64_t Suggestion = type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion();
  v3[15] = Suggestion;
  v3[16] = *(void *)(Suggestion - 8);
  v3[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v3[18] = v7;
  v3[19] = *(void *)(v7 - 8);
  v3[20] = swift_task_alloc();
  return _swift_task_switch(specialized static SuggestionsIntentDonator.donateAlternateQuerySuggestion(_:requestID:), 0, 0);
}

uint64_t specialized static SuggestionsIntentDonator.donateAlternateQuerySuggestion(_:requestID:)()
{
  uint64_t v65 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v0[18], (uint64_t)static Logger.information);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  unint64_t v4 = v0[8];
  uint64_t v62 = v0;
  if (v3)
  {
    uint64_t v5 = v0[7];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, (uint64_t *)&v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v1, v2, "Donating alternate query against request id: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = v0[16];
  uint64_t v7 = v0[17];
  uint64_t v9 = v0[15];
  uint64_t v10 = v0[6];
  static Logger.generatorCategory.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v54 = v12;
    log = v11;
    uint64_t v14 = v0[7];
    unint64_t v13 = v0[8];
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446466;
    uint64_t v16 = v0;
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v55 = (uint8_t *)v15;
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v17 = Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion.candidates.getter();
    int64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      uint64_t v19 = v0[13];
      uint64_t v20 = v0[10];
      uint64_t v64 = &_swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
      uint64_t v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 16);
      v19 += 16;
      unint64_t v22 = v17 + ((*(unsigned __int8 *)(v19 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 64));
      uint64_t v58 = *(void *)(v19 + 56);
      uint64_t v59 = v21;
      uint64_t v57 = (void (**)(uint64_t, uint64_t))(v20 + 8);
      uint64_t v23 = (void (**)(uint64_t, uint64_t))(v19 - 8);
      uint64_t v24 = v16;
      do
      {
        uint64_t v25 = v24[14];
        uint64_t v27 = v24[11];
        uint64_t v26 = v24[12];
        uint64_t v28 = v24[9];
        v59(v25, v22, v26);
        Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestionCandidate.utterance.getter();
        uint64_t v29 = Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance.print.getter();
        uint64_t v31 = v30;
        (*v57)(v27, v28);
        (*v23)(v25, v26);
        uint64_t v32 = v64;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1);
          uint64_t v32 = v64;
        }
        unint64_t v34 = v32[2];
        unint64_t v33 = v32[3];
        if (v34 >= v33 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          uint64_t v32 = v64;
        }
        _OWORD v32[2] = v34 + 1;
        unint64_t v35 = (char *)&v32[2 * v34];
        *((void *)v35 + 4) = v29;
        *((void *)v35 + 5) = v31;
        v22 += v58;
        --v18;
        uint64_t v24 = v62;
      }
      while (v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v32 = &_swiftEmptyArrayStorage;
      uint64_t v24 = v0;
    }
    uint64_t v42 = v24[19];
    uint64_t v43 = v24[17];
    uint64_t v60 = v24[18];
    uint64_t v61 = v24[20];
    uint64_t v45 = v24[15];
    uint64_t v44 = v24[16];
    v62[3] = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v46 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    v62[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, &v63);
    uint64_t v0 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    _os_log_impl(&dword_0, log, v54, "Donating alternatives from Information flow plugin for requestID %{public}s:\n%s", v55, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v61, v60);
  }
  else
  {
    uint64_t v37 = v0[19];
    uint64_t v36 = v0[20];
    uint64_t v39 = v0[17];
    uint64_t v38 = v0[18];
    uint64_t v40 = v0[15];
    uint64_t v41 = v0[16];
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
  }
  lazy protocol witness table accessor for type DomainOwner and conformance DomainOwner(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion and conformance Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion);
  uint64_t v49 = Message.serializedData(partial:)();
  unint64_t v51 = v50;
  specialized static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:)(v0[7], v0[8], 0xD000000000000015, 0x80000000000AFAB0, v49, v50);
  outlined consume of Data._Representation(v49, v51);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v52 = (uint64_t (*)(void))v0[1];
  return v52();
}

uint64_t specialized static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Action();
  v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  v3[11] = *(void *)(v5 + 64);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  type metadata accessor for Date();
  v3[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for PerformanceUtil.Ticket();
  v3[16] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[17] = v7;
  v3[18] = *(void *)(v7 + 64);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3[21] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v3[22] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[23] = v9;
  v3[24] = *(void *)(v9 + 64);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SuggestionIntent();
  v3[27] = v10;
  v3[28] = *(void *)(v10 - 8);
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  return _swift_task_switch(specialized static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:), 0, 0);
}

uint64_t specialized static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:)()
{
  uint64_t v101 = v0;
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[28];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.unspecified(_:), v2);
  lazy protocol witness table accessor for type DomainOwner and conformance DomainOwner(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SuggestionIntent and conformance Apple_Parsec_Siri_V2alpha_SuggestionIntent, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_SuggestionIntent);
  char v4 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v98 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v98(v1, v2);
  if (v4)
  {
    if (one-time initialization token for information == -1)
    {
LABEL_3:
      uint64_t v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.information);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v6, v7))
      {
LABEL_17:

        goto LABEL_32;
      }
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_0, v6, v7, "Current intent is unspecified. not logging engagement event", v8, 2u);
LABEL_10:
      swift_slowDealloc();
      goto LABEL_17;
    }
LABEL_36:
    swift_once();
    goto LABEL_3;
  }
  uint64_t v10 = v0[22];
  uint64_t v9 = v0[23];
  uint64_t v11 = v0[21];
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v10) == 1)
  {
    outlined destroy of Any?(v0[21], &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v13 = v0[28];
    uint64_t v12 = v0[29];
    uint64_t v14 = v0[27];
    uint64_t v15 = v0[5];
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.information);
    uint64_t v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    v95(v12, v15, v14);
    swift_bridgeObjectRetain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v6, v17))
    {
      uint64_t v28 = v0[29];
      uint64_t v29 = v0[27];
      swift_bridgeObjectRelease_n();
      v98(v28, v29);
      goto LABEL_17;
    }
    uint64_t v88 = v0[31];
    uint64_t v92 = v0[29];
    uint64_t v89 = v0[27];
    uint64_t v18 = v0[6];
    unint64_t v19 = v0[7];
    uint64_t v20 = swift_slowAlloc();
    v100[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315394;
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    v95(v88, v92, v89);
    uint64_t v21 = String.init<A>(describing:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v98(v92, v89);
    _os_log_impl(&dword_0, v6, v17, "requestId: %s is not a valid UUID. Unable to submit engagement for %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_10;
  }
  unint64_t v87 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0[23] + 32);
  v87(v0[26], v0[21], v0[22]);
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  if (one-time initialization token for mathSuggestionIntents != -1) {
    swift_once();
  }
  uint64_t v23 = static SuggestionConstants.mathSuggestionIntents;
  uint64_t v96 = *(void *)(static SuggestionConstants.mathSuggestionIntents + 16);
  if (v96)
  {
    uint64_t v24 = v0[30];
    uint64_t v25 = v0[27];
    uint64_t v26 = v0[28];
    unint64_t v85 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    unint64_t v94 = *(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 16);
    v94(v24, static SuggestionConstants.mathSuggestionIntents + v85, v25);
    swift_bridgeObjectRetain();
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    v98(v24, v25);
    if (v27)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      uint64_t v37 = 0xD000000000000018;
      uint64_t v36 = 0x80000000000AFBB0;
      goto LABEL_26;
    }
    if (v96 != 1)
    {
      uint64_t v90 = *(void *)(v0[28] + 72);
      unint64_t v30 = v23 + v90 + v85;
      uint64_t v31 = 1;
      while (1)
      {
        v94(v0[30], v30, v0[27]);
        uint64_t v32 = v31 + 1;
        if (__OFADD__(v31, 1)) {
          break;
        }
        uint64_t v33 = v0[30];
        uint64_t v34 = v0[27];
        char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
        v98(v33, v34);
        if (v35) {
          goto LABEL_25;
        }
        ++v31;
        v30 += v90;
        if (v32 == v96) {
          goto LABEL_23;
        }
      }
      __break(1u);
      goto LABEL_36;
    }
LABEL_23:
    swift_bridgeObjectRelease();
  }
  uint64_t v36 = 0x80000000000AFB90;
  uint64_t v37 = 0xD000000000000014;
LABEL_26:
  uint64_t v38 = v0[31];
  uint64_t v40 = v0[27];
  uint64_t v39 = v0[28];
  uint64_t v41 = v0[5];
  v100[0] = v37;
  v100[1] = v36;
  v42._uint64_t countAndFlagsBits = 35;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  v43._uint64_t countAndFlagsBits = 0x614E746E65746E69;
  v43._object = (void *)0xEA0000000000656DLL;
  String.append(_:)(v43);
  v44._uint64_t countAndFlagsBits = 61;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v38, v41, v40);
  v45._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
  Action.init(actionId:params:)();
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v47 = v0[13];
  uint64_t v46 = v0[14];
  uint64_t v49 = v0[9];
  uint64_t v48 = v0[10];
  uint64_t v50 = type metadata accessor for Logger();
  __swift_project_value_buffer(v50, (uint64_t)static Logger.information);
  unint64_t v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16);
  v93(v47, v46, v49);
  unint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.debug.getter();
  BOOL v53 = os_log_type_enabled(v51, v52);
  uint64_t v54 = v0[13];
  uint64_t v55 = v0[9];
  uint64_t v56 = v0[10];
  if (v53)
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    v100[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = 136315138;
    lazy protocol witness table accessor for type DomainOwner and conformance DomainOwner(&lazy protocol witness table cache variable for type Action and conformance Action, (void (*)(uint64_t))&type metadata accessor for Action);
    uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v91 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
    v91(v54, v55);
    _os_log_impl(&dword_0, v51, v52, "Donating %s engagement event to siri suggestions", v57, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v91 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
    v91(v54, v55);
  }

  uint64_t v60 = v0[25];
  uint64_t v99 = v0[26];
  uint64_t v97 = v0[23];
  uint64_t v61 = v0[19];
  uint64_t v62 = v0[20];
  uint64_t v79 = v0[22];
  uint64_t v80 = v61;
  uint64_t v63 = v0[17];
  uint64_t v64 = v0[16];
  uint64_t v65 = v0[14];
  uint64_t v84 = v65;
  uint64_t v78 = v0[12];
  uint64_t v66 = v0[10];
  uint64_t v82 = v0[11];
  uint64_t v83 = v0[18];
  uint64_t v68 = v0[8];
  uint64_t v67 = v0[9];
  uint64_t v81 = v67;
  uint64_t v86 = v62;
  uint64_t v69 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v68, 1, 1, v69);
  uint64_t v70 = v61;
  uint64_t v71 = v64;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v70, v62, v64);
  v93(v78, v65, v67);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(v60, v99, v79);
  unint64_t v72 = (*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  unint64_t v73 = (v83 + *(unsigned __int8 *)(v66 + 80) + v72) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
  unint64_t v74 = (v82 + *(unsigned __int8 *)(v97 + 80) + v73) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
  uint64_t v75 = swift_allocObject();
  *(void *)(v75 + 16) = 0;
  *(void *)(v75 + 24) = 0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v63 + 32))(v75 + v72, v80, v71);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v66 + 32))(v75 + v73, v78, v81);
  v87(v75 + v74, v60, v79);
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v68, (uint64_t)&async function pointer to partial apply for closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:), v75);
  swift_release();
  v91(v84, v81);
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v86, v71);
  (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v99, v79);
LABEL_32:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v76 = (uint64_t (*)(void))v0[1];
  return v76();
}

uint64_t specialized static SuggestionsIntentDonator.donateRelatedQuestionsSuggestions(_:requestID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate();
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
  v3[15] = v6;
  v3[16] = *(void *)(v6 - 8);
  v3[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v3[18] = v7;
  v3[19] = *(void *)(v7 - 8);
  v3[20] = swift_task_alloc();
  return _swift_task_switch(specialized static SuggestionsIntentDonator.donateRelatedQuestionsSuggestions(_:requestID:), 0, 0);
}

uint64_t specialized static SuggestionsIntentDonator.donateRelatedQuestionsSuggestions(_:requestID:)()
{
  uint64_t v65 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v0[18], (uint64_t)static Logger.information);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  unint64_t v4 = v0[8];
  uint64_t v62 = v0;
  if (v3)
  {
    uint64_t v5 = v0[7];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, (uint64_t *)&v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v1, v2, "Donating related questions against request id: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = v0[16];
  uint64_t v7 = v0[17];
  uint64_t v9 = v0[15];
  uint64_t v10 = v0[6];
  static Logger.generatorCategory.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v54 = v12;
    log = v11;
    uint64_t v14 = v0[7];
    unint64_t v13 = v0[8];
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446466;
    uint64_t v16 = v0;
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v55 = (uint8_t *)v15;
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v17 = Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter();
    int64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      uint64_t v19 = v0[13];
      uint64_t v20 = v0[10];
      uint64_t v64 = &_swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
      uint64_t v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 16);
      v19 += 16;
      unint64_t v22 = v17 + ((*(unsigned __int8 *)(v19 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 64));
      uint64_t v58 = *(void *)(v19 + 56);
      unint64_t v59 = v21;
      uint64_t v57 = (void (**)(uint64_t, uint64_t))(v20 + 8);
      uint64_t v23 = (void (**)(uint64_t, uint64_t))(v19 - 8);
      uint64_t v24 = v16;
      do
      {
        uint64_t v25 = v24[14];
        uint64_t v27 = v24[11];
        uint64_t v26 = v24[12];
        uint64_t v28 = v24[9];
        v59(v25, v22, v26);
        Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.utterance.getter();
        uint64_t v29 = Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance.print.getter();
        uint64_t v31 = v30;
        (*v57)(v27, v28);
        (*v23)(v25, v26);
        uint64_t v32 = v64;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1);
          uint64_t v32 = v64;
        }
        unint64_t v34 = v32[2];
        unint64_t v33 = v32[3];
        if (v34 >= v33 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          uint64_t v32 = v64;
        }
        _OWORD v32[2] = v34 + 1;
        char v35 = (char *)&v32[2 * v34];
        *((void *)v35 + 4) = v29;
        *((void *)v35 + 5) = v31;
        v22 += v58;
        --v18;
        uint64_t v24 = v62;
      }
      while (v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v32 = &_swiftEmptyArrayStorage;
      uint64_t v24 = v0;
    }
    uint64_t v42 = v24[19];
    uint64_t v43 = v24[17];
    uint64_t v60 = v24[18];
    uint64_t v61 = v24[20];
    uint64_t v45 = v24[15];
    uint64_t v44 = v24[16];
    v62[3] = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v46 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    v62[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, &v63);
    uint64_t v0 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    _os_log_impl(&dword_0, log, v54, "Donating related questions from Information flow plugin for requestID %{public}s:\n%s", v55, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v61, v60);
  }
  else
  {
    uint64_t v37 = v0[19];
    uint64_t v36 = v0[20];
    uint64_t v39 = v0[17];
    uint64_t v38 = v0[18];
    uint64_t v40 = v0[15];
    uint64_t v41 = v0[16];
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
  }
  lazy protocol witness table accessor for type DomainOwner and conformance DomainOwner(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ServerSuggestion and conformance Apple_Parsec_Siri_V2alpha_ServerSuggestion, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion);
  uint64_t v49 = Message.serializedData(partial:)();
  unint64_t v51 = v50;
  specialized static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:)(v0[7], v0[8], 0xD000000000000017, 0x80000000000AFAF0, v49, v50);
  outlined consume of Data._Representation(v49, v51);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v52 = (uint64_t (*)(void))v0[1];
  return v52();
}

uint64_t specialized static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate();
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
  v3[15] = v6;
  v3[16] = *(void *)(v6 - 8);
  v3[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v3[18] = v7;
  v3[19] = *(void *)(v7 - 8);
  v3[20] = swift_task_alloc();
  return _swift_task_switch(specialized static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:), 0, 0);
}

uint64_t specialized static SuggestionsIntentDonator.donateServerSuggestions(_:requestID:)()
{
  uint64_t v65 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v0[18], (uint64_t)static Logger.information);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  unint64_t v4 = v0[8];
  uint64_t v62 = v0;
  if (v3)
  {
    uint64_t v5 = v0[7];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, (uint64_t *)&v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v1, v2, "Donating Siri Suggestions claim against: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = v0[16];
  uint64_t v7 = v0[17];
  uint64_t v9 = v0[15];
  uint64_t v10 = v0[6];
  static Logger.generatorCategory.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v54 = v12;
    log = v11;
    uint64_t v14 = v0[7];
    unint64_t v13 = v0[8];
    uint64_t v15 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446466;
    uint64_t v16 = v0;
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v55 = (uint8_t *)v15;
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v17 = Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter();
    int64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      uint64_t v19 = v0[13];
      uint64_t v20 = v0[10];
      uint64_t v64 = &_swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
      uint64_t v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 16);
      v19 += 16;
      unint64_t v22 = v17 + ((*(unsigned __int8 *)(v19 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 64));
      uint64_t v58 = *(void *)(v19 + 56);
      unint64_t v59 = v21;
      uint64_t v57 = (void (**)(uint64_t, uint64_t))(v20 + 8);
      uint64_t v23 = (void (**)(uint64_t, uint64_t))(v19 - 8);
      uint64_t v24 = v16;
      do
      {
        uint64_t v25 = v24[14];
        uint64_t v27 = v24[11];
        uint64_t v26 = v24[12];
        uint64_t v28 = v24[9];
        v59(v25, v22, v26);
        Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.utterance.getter();
        uint64_t v29 = Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance.print.getter();
        uint64_t v31 = v30;
        (*v57)(v27, v28);
        (*v23)(v25, v26);
        uint64_t v32 = v64;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1);
          uint64_t v32 = v64;
        }
        unint64_t v34 = v32[2];
        unint64_t v33 = v32[3];
        if (v34 >= v33 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          uint64_t v32 = v64;
        }
        _OWORD v32[2] = v34 + 1;
        char v35 = (char *)&v32[2 * v34];
        *((void *)v35 + 4) = v29;
        *((void *)v35 + 5) = v31;
        v22 += v58;
        --v18;
        uint64_t v24 = v62;
      }
      while (v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v32 = &_swiftEmptyArrayStorage;
      uint64_t v24 = v0;
    }
    uint64_t v42 = v24[19];
    uint64_t v43 = v24[17];
    uint64_t v60 = v24[18];
    uint64_t v61 = v24[20];
    uint64_t v45 = v24[15];
    uint64_t v44 = v24[16];
    v62[3] = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v46 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    v62[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, &v63);
    uint64_t v0 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    _os_log_impl(&dword_0, log, v54, "Donating info server suggesions from Information flow plugin for requestID %{public}s:\n%s", v55, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v61, v60);
  }
  else
  {
    uint64_t v37 = v0[19];
    uint64_t v36 = v0[20];
    uint64_t v39 = v0[17];
    uint64_t v38 = v0[18];
    uint64_t v40 = v0[15];
    uint64_t v41 = v0[16];
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
  }
  lazy protocol witness table accessor for type DomainOwner and conformance DomainOwner(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ServerSuggestion and conformance Apple_Parsec_Siri_V2alpha_ServerSuggestion, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion);
  uint64_t v49 = Message.serializedData(partial:)();
  unint64_t v51 = v50;
  specialized static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:)(v0[7], v0[8], 0xD000000000000017, 0x80000000000AFAD0, v49, v50);
  outlined consume of Data._Representation(v49, v51);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v52 = (uint64_t (*)(void))v0[1];
  return v52();
}

uint64_t specialized static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams();
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = *(void *)(v5 + 64);
  v3[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[10] = swift_task_alloc();
  type metadata accessor for Date();
  v3[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for PerformanceUtil.Ticket();
  v3[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[13] = v7;
  v3[14] = *(void *)(v7 + 64);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  return _swift_task_switch(specialized static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), 0, 0);
}

uint64_t specialized static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)()
{
  uint64_t v31 = v0;
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain_n();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[5];
  if (v4)
  {
    uint64_t v6 = v0[4];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v2, v3, "Donating Siri Suggestions claim against: %s for SiriGeo", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = v0[15];
  uint64_t v8 = v0[16];
  uint64_t v10 = v0[13];
  uint64_t v11 = v0[10];
  uint64_t v27 = v11;
  uint64_t v12 = v0[9];
  uint64_t v23 = v0[12];
  uint64_t v24 = v12;
  uint64_t v25 = v0[8];
  uint64_t v26 = v0[14];
  uint64_t v14 = v0[6];
  uint64_t v13 = v0[7];
  uint64_t v29 = v0[5];
  uint64_t v15 = v0[3];
  uint64_t v28 = v0[4];
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v8, v23);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v15, v14);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v18 = (v26 + *(unsigned __int8 *)(v13 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  *(void *)(v19 + 24) = 0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 32))(v19 + v17, v9, v23);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 32))(v19 + v18, v24, v14);
  uint64_t v20 = (void *)(v19 + ((v25 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v20 = v28;
  v20[1] = v29;
  swift_bridgeObjectRetain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v27, (uint64_t)&async function pointer to partial apply for closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), v19);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

ValueMetadata *type metadata accessor for SuggestionsIntentDonator()
{
  return &type metadata for SuggestionsIntentDonator;
}

uint64_t sub_61C54()
{
  uint64_t v1 = type metadata accessor for PerformanceUtil.Ticket();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8));

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t partial apply for closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for PerformanceUtil.Ticket() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = *(void *)(v0 + v4 + 8);
  uint64_t v9 = *(void *)(v0 + v5);
  uint64_t v10 = *(void *)(v0 + v5 + 8);
  uint64_t v11 = (uint64_t *)(v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v14;
  *uint64_t v14 = v1;
  v14[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  v14[29] = v12;
  v14[30] = v13;
  v14[27] = v9;
  v14[28] = v10;
  v14[25] = v7;
  v14[26] = v8;
  v14[24] = v6;
  return _swift_task_switch(closure #1 in static SuggestionsIntentDonator.donateSuggestions(requestID:payloadKey:data:), 0, 0);
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t sub_61FCC()
{
  uint64_t v17 = type metadata accessor for PerformanceUtil.Ticket();
  uint64_t v1 = *(void *)(v17 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v16 = type metadata accessor for Action();
  uint64_t v5 = *(void *)(v16 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v7 + v8 + v11) & ~v11;
  uint64_t v15 = v12 + *(void *)(v10 + 64);
  uint64_t v13 = v2 | v6 | v11 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);

  return _swift_deallocObject(v0, v15, v13);
}

uint64_t partial apply for closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for PerformanceUtil.Ticket() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for Action() - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID() - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = v0 + v3;
  uint64_t v11 = v0 + v6;
  uint64_t v12 = v0 + (v9 & ~v8);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v13;
  void *v13 = v1;
  v13[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  v13[8] = v11;
  v13[9] = v12;
  v13[7] = v10;
  return _swift_task_switch(closure #1 in static SuggestionsIntentDonator.donateEngagementToSiriSuggestions(currentIntent:requestId:), 0, 0);
}

uint64_t lazy protocol witness table accessor for type DomainOwner and conformance DomainOwner(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_6239C()
{
  uint64_t v1 = type metadata accessor for PerformanceUtil.Ticket();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v11, v10);
}

uint64_t partial apply for closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for PerformanceUtil.Ticket() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams() - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = v1 + v9;
  uint64_t v14 = (uint64_t *)(v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v17;
  *uint64_t v17 = v3;
  v17[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)(a1, v10, v11, v12, v13, v15, v16);
}

uint64_t sub_626A4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  _OWORD v5[2] = a1;
  v5[3] = v4;
  v5[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return _swift_task_switch(implicit closure #1 in closure #1 in static SuggestionsIntentDonator.donateShowMapsPointsToSiriSuggestions(_:requestID:), 0, 0);
}

uint64_t outlined init with copy of Result<PommesLocationInfo, LocationError>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesLocationInfo, LocationError>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ContinuationResultSetFlowProvider.init(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:informationViewFactory:patternFlowProvider:patternExecutor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, long long *a12)
{
  a9[28] = a1;
  a9[29] = a2;
  *a9 = specialized GenericResultSetParamBuilder.init(parameters:)(a3);
  a9[1] = v18;
  a9[2] = v19;
  a9[3] = v20;
  a9[27] = a4;
  a9[14] = a5;
  a9[15] = a6;
  outlined init with copy of OutputPublisherAsync(a7, (uint64_t)(a9 + 4));
  outlined init with copy of OutputPublisherAsync(a8, (uint64_t)(a9 + 9));
  static PatternFlowProvidingHelper.unwrap(_:with:)(a11, a7, (uint64_t *)v22);
  outlined destroy of Any?(a11, &demangling cache variable for type metadata for PatternFlowProviding?);
  __swift_destroy_boxed_opaque_existential_1(a8);
  __swift_destroy_boxed_opaque_existential_1(a7);
  outlined init with take of PatternFlowProviding(v22, (uint64_t)(a9 + 16));
  a9[21] = a10;
  return outlined init with take of PatternFlowProviding(a12, (uint64_t)(a9 + 22));
}

id ContinuationResultSetFlowProvider.bundle.getter()
{
  return *(id *)(v0 + 216);
}

uint64_t ContinuationResultSetFlowProvider.patternId.getter()
{
  uint64_t v1 = *(void *)(v0 + 224);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in ContinuationResultSetFlowProvider.outputManifest.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  NLContextUpdate.init()();
  outlined copy of Data?(*(void *)(a2 + 112), *(void *)(a2 + 120));
  NLContextUpdate.pegasusConversationContext.setter();
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
  return OutputGenerationManifest.nlContextUpdate.setter();
}

uint64_t ContinuationResultSetFlowProvider.makeEmptyResultSetFlow()()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Logger?);
  v0[5] = swift_task_alloc();
  v0[6] = swift_task_alloc();
  uint64_t v1 = type metadata accessor for Logger();
  v0[7] = v1;
  v0[8] = *(void *)(v1 - 8);
  v0[9] = swift_task_alloc();
  return _swift_task_switch(ContinuationResultSetFlowProvider.makeEmptyResultSetFlow(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  void *v15;

  uint64_t v15 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = __swift_project_value_buffer(v4, (uint64_t)static Logger.information);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v2, v6, v4);
  v7(v5, v2, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v5, 0, 1, v4);
  outlined init with copy of Logger?(v5, v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v4) == 1)
  {
    outlined destroy of Any?(v0[5], (uint64_t *)&demangling cache variable for type metadata for Logger?);
  }
  else
  {
    uint64_t v8 = Logger.logObject.getter();
    unint64_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315650;
      uint64_t v11 = StaticString.description.getter();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2048;
      v0[3] = 70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 22) = 2080;
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000093, 0x80000000000AFCB0, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v8, v9, "FatalError at %s:%lu - %s", (uint8_t *)v10, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(void, void))(v0[8] + 8))(v0[5], v0[7]);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t ContinuationResultSetFlowProvider.makeSingleItemFlow()()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Logger?);
  v0[5] = swift_task_alloc();
  v0[6] = swift_task_alloc();
  uint64_t v1 = type metadata accessor for Logger();
  v0[7] = v1;
  v0[8] = *(void *)(v1 - 8);
  v0[9] = swift_task_alloc();
  return _swift_task_switch(ContinuationResultSetFlowProvider.makeSingleItemFlow(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  void *v15;

  uint64_t v15 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = __swift_project_value_buffer(v4, (uint64_t)static Logger.information);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v2, v6, v4);
  v7(v5, v2, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v5, 0, 1, v4);
  outlined init with copy of Logger?(v5, v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v4) == 1)
  {
    outlined destroy of Any?(v0[5], (uint64_t *)&demangling cache variable for type metadata for Logger?);
  }
  else
  {
    uint64_t v8 = Logger.logObject.getter();
    unint64_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315650;
      uint64_t v11 = StaticString.description.getter();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2048;
      v0[3] = 74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 22) = 2080;
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000008FLL, 0x80000000000AFDF0, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v8, v9, "FatalError at %s:%lu - %s", (uint8_t *)v10, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(void, void))(v0[8] + 8))(v0[5], v0[7]);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t ContinuationResultSetFlowProvider.makeAllResultsFlow()()
{
  v1[2] = v0;
  type metadata accessor for DialogPhase();
  v1[3] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for OutputGenerationManifest();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for WindowedPaginationParameters();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  type metadata accessor for Date();
  v1[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for PerformanceUtil.Ticket();
  v1[11] = v4;
  v1[12] = *(void *)(v4 - 8);
  v1[13] = swift_task_alloc();
  return _swift_task_switch(ContinuationResultSetFlowProvider.makeAllResultsFlow(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "ContinuationResultSetFlowProvider.makeAllResultsFlow", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[2];

  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v6 = *(void *)(v5 + 24);
  WindowedPaginationParameters.init(windowSize:_:)();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = ContinuationResultSetFlowProvider.makeAllResultsFlow();
  uint64_t v8 = v0[9];
  return ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)(v6, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v11 = v0[11];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  unint64_t v9 = (void *)v0[16];
  uint64_t v10 = v0[4];
  uint64_t v5 = v0[2];
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  __swift_project_boxed_opaque_existential_1((void *)(v5 + 128), *(void *)(v5 + 152));
  static DialogPhase.completion.getter();
  *(void *)(swift_task_alloc() + 16) = v5;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  uint64_t v6 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v10);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(v6);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t ContinuationResultSetFlowProvider.makeAllResultsFlow()(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[15] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[9];
  uint64_t v6 = v4[8];
  uint64_t v7 = v4[7];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v8 = ContinuationResultSetFlowProvider.makeAllResultsFlow();
  }
  else
  {
    v4[16] = a1;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v8 = ContinuationResultSetFlowProvider.makeAllResultsFlow();
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t v4 = type metadata accessor for Date();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  return _swift_task_switch(ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:), 0, 0);
}

void ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)()
{
  uint64_t v29 = v0 + 2;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "ContinuationResultSetFlowProvider.executePatternForWindow", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[8];
  uint64_t v6 = (uint64_t *)v0[10];

  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = WindowedPaginationParameters.asCATParameters()();
  uint64_t v9 = specialized Dictionary.merging(_:uniquingKeysWith:)(v8, v7);
  uint64_t v10 = *v6;
  uint64_t v11 = v6[1];
  unint64_t v12 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v14 = specialized Dictionary.merging(_:uniquingKeysWith:)(v13, (void (*)(_OWORD *__return_ptr, void *, _OWORD *))closure #1 in variable initialization expression of static GenericResultSetParamBuilder.duplicateHandler, 0, v12);
  uint64_t v15 = specialized GenericResultSetParamBuilder.itemPatternParameters(items:)(v5);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
  v31[0] = (uint64_t)v15;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v33 = v14;
  specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v31, v10, v11, isUniquelyReferenced_nonNull_native, v29);
  uint64_t v17 = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Any?((uint64_t)v29, &demangling cache variable for type metadata for Any?);
  uint64_t v18 = specialized Dictionary.merging(_:uniquingKeysWith:)(v17, v9);
  v0[14] = v18;
  swift_bridgeObjectRetain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v22 = Dictionary.description.getter();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v19, v20, "ContinuationResultSetFlowProvider.executePatternForWindow parameters: %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v25 = v0[10];
  type metadata accessor for PerformanceUtil();
  v0[15] = static PerformanceUtil.shared.getter();
  uint64_t v26 = swift_task_alloc();
  v0[16] = v26;
  *(void *)(v26 + 16) = v25;
  *(void *)(v26 + 24) = v18;
  Date.init()();
  uint64_t v30 = (char *)&async function pointer to dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)
      + async function pointer to dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:);
  uint64_t v27 = (void *)swift_task_alloc();
  v0[17] = v27;
  unint64_t v28 = type metadata accessor for PatternExecutionResult();
  void *v27 = v0;
  v27[1] = ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:);
  uint64_t v40 = v26;
  unint64_t v41 = v28;
  uint64_t v39 = &async function pointer to partial apply for closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:);
  char v38 = 2;
  uint64_t v37 = 58;
  uint64_t v35 = 146;
  uint64_t v36 = "executePatternForWindow(windowItems:paginationParameters:)";
  __asm { BR              X8 }
}

uint64_t ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[12] + 8))(v2[13], v2[11]);
  swift_bridgeObjectRelease();
  swift_release();
  if (v0)
  {
    os_log_type_t v3 = ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:);
  }
  else
  {
    swift_task_dealloc();
    os_log_type_t v3 = ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ContinuationResultSetFlowProvider.makeWindowingConfiguration(promptType:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptFlowProviderType<(), [GenericResultSetItem]>);
  v3[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for PromptType();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  return _swift_task_switch(ContinuationResultSetFlowProvider.makeWindowingConfiguration(promptType:), 0, 0);
}

uint64_t ContinuationResultSetFlowProvider.makeWindowingConfiguration(promptType:)()
{
  unint64_t v28 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "ContinuationResultSetFlowProvider.makeWindowingConfiguration", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[10];
  uint64_t v5 = v0[11];
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[8];
  uint64_t v9 = v0[4];

  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v10(v5, v9, v7);
  static PromptType.continuation.getter();
  lazy protocol witness table accessor for type PromptType and conformance PromptType(&lazy protocol witness table cache variable for type PromptType and conformance PromptType, (void (*)(uint64_t))&type metadata accessor for PromptType);
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v12(v6, v7);
  v12(v5, v7);
  if (v11)
  {
    uint64_t v13 = v0[3];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GenericResultSetItem]);
    lazy protocol witness table accessor for type ContinuationResultSetFlowProvider and conformance ContinuationResultSetFlowProvider();
    static PromptFlowProviderType.continuation<A>(_:)();
    WindowingConfiguration.init(promptFlowProviderType:padding:windowSizeOverride:)();
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WindowingConfiguration<(), [GenericResultSetItem]>);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 0, 1, v14);
  }
  else
  {
    v10(v0[9], v0[4], v0[7]);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = v0[9];
    uint64_t v19 = v0[7];
    if (v17)
    {
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v20 = 136315138;
      lazy protocol witness table accessor for type PromptType and conformance PromptType(&lazy protocol witness table cache variable for type PromptType and conformance PromptType, (void (*)(uint64_t))&type metadata accessor for PromptType);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v12(v18, v19);
      _os_log_impl(&dword_0, v15, v16, "Unsupported promptType '%s'. Will not support windowing.", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v12(v0[9], v0[7]);
    }

    uint64_t v23 = v0[3];
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WindowingConfiguration<(), [GenericResultSetItem]>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t ContinuationResultSetFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  type metadata accessor for DialogPhase();
  v3[5] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OutputGenerationManifest();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(ContinuationResultSetFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:), 0, 0);
}

uint64_t ContinuationResultSetFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:)()
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "ContinuationResultSetFlowProvider.makeFinalWindowFlow", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[9] = v5;
  *uint64_t v5 = v0;
  v5[1] = ContinuationResultSetFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:);
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[2];
  return ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)(v6, v7);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  uint64_t v1 = (void *)v0[10];
  os_log_type_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v8 = v0[6];
  uint64_t v4 = v0[4];
  __swift_project_boxed_opaque_existential_1((void *)(v4 + 128), *(void *)(v4 + 152));
  static DialogPhase.completion.getter();
  *(void *)(swift_task_alloc() + 16) = v4;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  uint64_t v5 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
  return v6(v5);
}

uint64_t ContinuationResultSetFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    return _swift_task_switch(ContinuationResultSetFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:), 0, 0);
  }
}

uint64_t ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)(uint64_t a1, uint64_t a2)
{
  v3[34] = a2;
  v3[35] = v2;
  v3[33] = a1;
  uint64_t v4 = type metadata accessor for ConfirmationResponse();
  v3[36] = v4;
  v3[37] = *(void *)(v4 - 8);
  v3[38] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for WindowedPaginationParameters();
  v3[39] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[40] = v6;
  v3[41] = *(void *)(v6 + 64);
  v3[42] = swift_task_alloc();
  type metadata accessor for DialogPhase();
  v3[43] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v3[44] = v7;
  v3[45] = *(void *)(v7 - 8);
  v3[46] = swift_task_alloc();
  return _swift_task_switch(ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:), 0, 0);
}

uint64_t ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)()
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "ContinuationResultSetFlowProvider.makeWindowFlow", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v31 = *(void *)(v0 + 368);
  uint64_t v32 = *(void *)(v0 + 360);
  uint64_t v33 = *(void *)(v0 + 352);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v7 = *(void *)(v0 + 312);
  uint64_t v6 = *(void *)(v0 + 320);
  uint64_t v34 = *(void *)(v0 + 296);
  uint64_t v8 = *(void *)(v0 + 280);
  uint64_t v35 = *(void *)(v0 + 288);
  uint64_t v36 = *(void *)(v0 + 304);
  uint64_t v9 = *(void *)(v0 + 264);
  uint64_t v30 = *(void *)(v0 + 272);

  static DialogPhase.completion.getter();
  *(void *)(swift_task_alloc() + 16) = v8;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  outlined init with copy of ContinuationResultSetFlowProvider(v8, v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v9, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 264) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  long long v12 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v11 + 208) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v11 + 224) = v12;
  *(_OWORD *)(v11 + 240) = *(_OWORD *)(v0 + 240);
  long long v13 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v11 + 144) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v11 + 160) = v13;
  long long v14 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v11 + 176) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v11 + 192) = v14;
  long long v15 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v11 + 80) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v11 + 96) = v15;
  long long v16 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v11 + 112) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v11 + 128) = v16;
  long long v17 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v11 + 32) = v17;
  long long v18 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v11 + 48) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v11 + 64) = v18;
  *(void *)(v11 + 256) = v30;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v11 + v10, v5, v7);
  uint64_t v19 = type metadata accessor for ResponseFactory();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v20 = ResponseFactory.init()();
  type metadata accessor for RFSimpleYesNoPromptFlowStrategy();
  uint64_t v21 = swift_allocObject();
  unint64_t v22 = (uint64_t *)(v21 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_responseGenerator);
  v22[3] = v19;
  void v22[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *unint64_t v22 = v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v21 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_baseManifest, v31, v33);
  uint64_t v23 = (void *)(v21 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_rejectionOutputProducer);
  *uint64_t v23 = &async function pointer to closure #1 in default argument 2 of RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:);
  v23[1] = 0;
  uint64_t v24 = (void *)(v21
                 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_cancellationOutputProducer);
  *uint64_t v24 = &async function pointer to closure #1 in default argument 3 of RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:);
  v24[1] = 0;
  uint64_t v25 = (void *)(v21
                 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_promptPatternExecutionProducer);
  *uint64_t v25 = &async function pointer to partial apply for closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:);
  v25[1] = v11;
  __swift_project_boxed_opaque_existential_1((void *)(v8 + 128), *(void *)(v8 + 152));
  (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v36, enum case for ConfirmationResponse.confirmed(_:), v35);
  lazy protocol witness table accessor for type PromptType and conformance PromptType(&lazy protocol witness table cache variable for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for RFSimpleYesNoPromptFlowStrategy);
  uint64_t v26 = dispatch thunk of PatternFlowProviding.makeResponseFlowWithContinuationPrompt<A>(strategy:shouldContinueForResponse:)();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v35);
  *(void *)(v0 + 256) = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<WindowingAction<()>>);
  lazy protocol witness table accessor for type AnyValueFlow<WindowingAction<()>> and conformance AnyValueFlow<A>();
  uint64_t v27 = Flow.eraseToAnyValueFlow()();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v28 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v28(v27);
}

uint64_t closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for Date();
  v3[5] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for PerformanceUtil.Ticket();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:), 0, 0);
}

uint64_t closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)()
{
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[9] = v1;
  void *v1 = v0;
  v1[1] = closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:);
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  return ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)(v3, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v5 = v0[11];
  return v4(v5);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:);
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    uint64_t v5 = closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:);
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:), 0, 0);
}

uint64_t closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v1[25];
  uint64_t v3 = v1[26];
  __swift_project_boxed_opaque_existential_1(v1 + 22, v2);
  uint64_t v5 = v1[28];
  uint64_t v4 = v1[29];
  uint64_t v6 = v1[27];
  unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))(*(void *)(v3 + 8)
                                                                                               + **(int **)(v3 + 8));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[5] = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:);
  uint64_t v8 = v0[4];
  return v10(v5, v4, v6, v8, v1 + 9, v2, v3);
}

{
  uint64_t v0;

  **(void **)(v0 + 16) = *(void *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 48) = a1;
    return _swift_task_switch(closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:), 0, 0);
  }
}

uint64_t protocol witness for ResultSetFlowProvider.makeNarrowingPromptFlowIfNeeded() in conformance ContinuationResultSetFlowProvider()
{
  uint64_t v1 = ResultSetFlowProvider.makeNarrowingPromptFlowIfNeeded()();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return protocol witness for ResultSetFlowProvider.makeNarrowingPromptFlowIfNeeded() in conformance ContinuationResultSetFlowProvider(v2, v0, v1);
}

uint64_t protocol witness for ResultSetFlowProvider.makeEmptyResultSetFlow() in conformance ContinuationResultSetFlowProvider()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return ContinuationResultSetFlowProvider.makeEmptyResultSetFlow()();
}

uint64_t protocol witness for ResultSetFlowProvider.makeSingleItemFlow() in conformance ContinuationResultSetFlowProvider()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return ContinuationResultSetFlowProvider.makeSingleItemFlow()();
}

uint64_t protocol witness for ResultSetFlowProvider.makeAllResultsFlow() in conformance ContinuationResultSetFlowProvider()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return ContinuationResultSetFlowProvider.makeAllResultsFlow()();
}

uint64_t protocol witness for ResultSetFlowProvider.makeWindowingConfiguration(promptType:) in conformance ContinuationResultSetFlowProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return ContinuationResultSetFlowProvider.makeWindowingConfiguration(promptType:)(a1, a2);
}

uint64_t protocol witness for ContinuationPromptFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:) in conformance ContinuationResultSetFlowProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return ContinuationResultSetFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:)(a1, v4);
}

uint64_t protocol witness for WindowingFlowProvider.makeWindowFlow(paginationParameters:windowContent:) in conformance ContinuationResultSetFlowProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  return ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)(a1, v4);
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v51 = a1;
  uint64_t v52 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v53 = v8;
  uint64_t v54 = 0;
  uint64_t v55 = v11 & v9;
  uint64_t v56 = a2;
  uint64_t v57 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v49);
  uint64_t v12 = *((void *)&v49 + 1);
  if (!*((void *)&v49 + 1)) {
    goto LABEL_26;
  }
  uint64_t v13 = v49;
  outlined init with take of Any(v50, v48);
  long long v14 = *(void **)a5;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char v20 = v15;
  if (v14[3] >= v19)
  {
    if (a4)
    {
      if (v15) {
        goto LABEL_12;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v20) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v25 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    uint64_t v26 = (uint64_t *)(v25[6] + 16 * v16);
    *uint64_t v26 = v13;
    v26[1] = v12;
    outlined init with take of Any(v48, (_OWORD *)(v25[7] + 32 * v16));
    uint64_t v27 = v25[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v25[2] = v29;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()(&v49);
    for (uint64_t i = *((void *)&v49 + 1); *((void *)&v49 + 1); uint64_t i = *((void *)&v49 + 1))
    {
      uint64_t v33 = v49;
      outlined init with take of Any(v50, v48);
      uint64_t v34 = *(void **)a5;
      unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v33, i);
      uint64_t v37 = v34[2];
      BOOL v38 = (v36 & 1) == 0;
      BOOL v28 = __OFADD__(v37, v38);
      uint64_t v39 = v37 + v38;
      if (v28) {
        goto LABEL_27;
      }
      char v40 = v36;
      if (v34[3] < v39)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, 1);
        unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v33, i);
        if ((v40 & 1) != (v41 & 1)) {
          goto LABEL_29;
        }
      }
      if (v40)
      {
        uint64_t v31 = 32 * v35;
        outlined init with copy of Any(*(void *)(*(void *)a5 + 56) + 32 * v35, (uint64_t)v47);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
        swift_bridgeObjectRelease();
        uint64_t v32 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + v31);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
        outlined init with take of Any(v47, v32);
      }
      else
      {
        uint64_t v42 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v35 >> 6) + 64) |= 1 << v35;
        uint64_t v43 = (uint64_t *)(v42[6] + 16 * v35);
        uint64_t *v43 = v33;
        v43[1] = i;
        outlined init with take of Any(v48, (_OWORD *)(v42[7] + 32 * v35));
        uint64_t v44 = v42[2];
        BOOL v28 = __OFADD__(v44, 1);
        uint64_t v45 = v44 + 1;
        if (v28) {
          goto LABEL_28;
        }
        v42[2] = v45;
      }
      specialized LazyMapSequence.Iterator.next()(&v49);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : Any].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    if ((v20 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v23 = 32 * v16;
    outlined init with copy of Any(*(void *)(*(void *)a5 + 56) + v23, (uint64_t)v47);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
    swift_bridgeObjectRelease();
    uint64_t v24 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    outlined init with take of Any(v47, v24);
    goto LABEL_16;
  }
LABEL_29:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in ContinuationResultSetFlowProvider.outputManifest.getter(uint64_t a1)
{
  return closure #1 in ContinuationResultSetFlowProvider.outputManifest.getter(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with copy of ContinuationResultSetFlowProvider(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_661EC()
{
  uint64_t v1 = type metadata accessor for WindowedPaginationParameters();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  unint64_t v5 = *(void *)(v0 + 136);
  if (v5 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v0 + 128), v5);
  }
  uint64_t v6 = (v3 + 264) & ~v3;
  __swift_destroy_boxed_opaque_existential_1(v0 + 144);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 192);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v6, v1);

  return _swift_deallocObject(v0, v6 + v4, v3 | 7);
}

uint64_t partial apply for closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for WindowedPaginationParameters() - 8);
  uint64_t v3 = v0 + 16;
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 264) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = partial apply for closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:);
  return closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)(v3, v4, v5);
}

uint64_t partial apply for closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t lazy protocol witness table accessor for type PromptType and conformance PromptType(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyValueFlow<WindowingAction<()>> and conformance AnyValueFlow<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyValueFlow<WindowingAction<()>> and conformance AnyValueFlow<A>;
  if (!lazy protocol witness table cache variable for type AnyValueFlow<WindowingAction<()>> and conformance AnyValueFlow<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyValueFlow<WindowingAction<()>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyValueFlow<WindowingAction<()>> and conformance AnyValueFlow<A>);
  }
  return result;
}

uint64_t destroy for ContinuationResultSetFlowProvider(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  unint64_t v2 = *(void *)(a1 + 120);
  if (v2 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(a1 + 112), v2);
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 176);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ContinuationResultSetFlowProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2 + 32;
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(a1 + 32, v6, v8);
  long long v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 96) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 72, a2 + 72);
  uint64_t v11 = (uint64_t *)(a2 + 112);
  unint64_t v12 = *(void *)(a2 + 120);
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v13 = *v11;
    outlined copy of Data._Representation(*v11, *(void *)(a2 + 120));
    *(void *)(a1 + 112) = v13;
    *(void *)(a1 + 120) = v12;
  }
  long long v14 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 152) = v14;
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 128, a2 + 128);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  long long v15 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 200) = v15;
  uint64_t v16 = v15;
  uint64_t v17 = **(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
  swift_retain();
  v17(a1 + 176, a2 + 176, v16);
  BOOL v18 = *(void **)(a2 + 216);
  uint64_t v19 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = v18;
  *(void *)(a1 + 224) = v19;
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  id v20 = v18;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ContinuationResultSetFlowProvider(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 4, a2 + 4);
  __swift_assign_boxed_opaque_existential_1(a1 + 9, a2 + 9);
  uint64_t v4 = a2 + 14;
  unint64_t v5 = a2[15];
  if (a1[15] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      outlined copy of Data._Representation(*v4, a2[15]);
      uint64_t v8 = a1[14];
      unint64_t v9 = a1[15];
      a1[14] = v7;
      a1[15] = v5;
      outlined consume of Data._Representation(v8, v9);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)(a1 + 14));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 7) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  outlined copy of Data._Representation(*v4, a2[15]);
  a1[14] = v6;
  a1[15] = v5;
LABEL_8:
  __swift_assign_boxed_opaque_existential_1(a1 + 16, a2 + 16);
  a1[21] = a2[21];
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 22, a2 + 22);
  long long v10 = (void *)a2[27];
  uint64_t v11 = (void *)a1[27];
  a1[27] = v10;
  id v12 = v10;

  a1[28] = a2[28];
  a1[29] = a2[29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy240_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

uint64_t assignWithTake for ContinuationResultSetFlowProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  long long v6 = (void *)(a2 + 112);
  unint64_t v7 = *(void *)(a1 + 120);
  if (v7 >> 60 != 15)
  {
    unint64_t v8 = *(void *)(a2 + 120);
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = *(void *)(a1 + 112);
      *(void *)(a1 + 112) = *v6;
      *(void *)(a1 + 120) = v8;
      outlined consume of Data._Representation(v9, v7);
      goto LABEL_6;
    }
    outlined destroy of Data(a1 + 112);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)v6;
LABEL_6:
  __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  long long v10 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v10;
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v11;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 176);
  long long v12 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v12;
  uint64_t v13 = *(void *)(a2 + 216);
  long long v14 = *(void **)(a1 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v13;

  uint64_t v15 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContinuationResultSetFlowProvider(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 240)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContinuationResultSetFlowProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 240) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 240) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContinuationResultSetFlowProvider()
{
  return &type metadata for ContinuationResultSetFlowProvider;
}

uint64_t protocol witness for ResultSetFlowProvider.makeNarrowingPromptFlowIfNeeded() in conformance ContinuationResultSetFlowProvider(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t partial apply for closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:)(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return _swift_task_switch(closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:), 0, 0);
}

unint64_t type metadata accessor for PatternExecutionResult()
{
  unint64_t result = lazy cache variable for type metadata for PatternExecutionResult;
  if (!lazy cache variable for type metadata for PatternExecutionResult)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PatternExecutionResult);
  }
  return result;
}

void *InformationViewFactory.__allocating_init(deviceState:commonCATs:)(long long *a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_allocObject();
  id v5 = [self sharedPreferences];
  uint64_t v6 = type metadata accessor for PommesServerFallbackPreferences();
  swift_allocObject();
  uint64_t v7 = PommesServerFallbackPreferences.init(_:)();
  v4[11] = v6;
  v4[12] = &protocol witness table for PommesServerFallbackPreferences;
  v4[8] = v7;
  outlined init with take of PatternFlowProviding(a1, (uint64_t)(v4 + 3));
  v4[2] = a2;
  return v4;
}

void *specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v4 += 16;
      v2[2] = v6 + 1;
      outlined init with take of Any(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t InformationViewFactory.commonCATs.getter()
{
  return swift_retain();
}

uint64_t InformationViewFactory.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + 24, a1);
}

uint64_t InformationViewFactory.serverFallbackPreferences.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of OutputPublisherAsync(v1 + 64, a1);
}

uint64_t InformationViewFactory.serverFallbackPreferences.setter(long long *a1)
{
  uint64_t v3 = v1 + 64;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of PatternFlowProviding(a1, v3);
  return swift_endAccess();
}

void *InformationViewFactory.init(deviceState:commonCATs:)(long long *a1, uint64_t a2)
{
  id v5 = [self sharedPreferences];
  uint64_t v6 = type metadata accessor for PommesServerFallbackPreferences();
  swift_allocObject();
  uint64_t v7 = PommesServerFallbackPreferences.init(_:)();
  v2[11] = v6;
  v2[12] = &protocol witness table for PommesServerFallbackPreferences;
  v2[8] = v7;
  outlined init with take of PatternFlowProviding(a1, (uint64_t)(v2 + 3));
  v2[2] = a2;
  return v2;
}

uint64_t InformationViewFactory.makeAceOutputError()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for TemplatingResult();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for PerformanceUtil.Ticket();
  v2[10] = v5;
  v2[11] = *(void *)(v5 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(InformationViewFactory.makeAceOutputError(), 0, 0);
}

uint64_t InformationViewFactory.makeAceOutputError()()
{
  uint64_t v1 = v0[3];
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v5 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 144) + **(int **)(*(void *)v1 + 144));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[13] = v2;
  *uint64_t v2 = v0;
  v2[1] = InformationViewFactory.makeAceOutputError();
  uint64_t v3 = v0[6];
  return v5(v3);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(InformationViewFactory.makeAceOutputError(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[8];
  uint64_t v11 = v0[7];
  long long v12 = v0[10];
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v7 = v0[3];
  uint64_t v13 = v0[4];
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  static PerformanceUtil.shared.getter();
  long long v8 = swift_task_alloc();
  *(void *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v7;
  Date.init()();
  type metadata accessor for AceOutput();
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v11);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v12);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t closure #1 in InformationViewFactory.makeAceOutputError()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1((void *)(a2 + 24), *(void *)(a2 + 48));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of Any?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  return outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for NLContextUpdate?);
}

uint64_t partial apply for closure #1 in InformationViewFactory.makeAceOutputError()()
{
  return closure #1 in InformationViewFactory.makeAceOutputError()(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t InformationViewFactory.makeErrorRunInformationFlowTemplate()(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Logger?);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = swift_task_alloc();
  type metadata accessor for Date();
  v2[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for PerformanceUtil.Ticket();
  v2[18] = v4;
  v2[19] = *(void *)(v4 - 8);
  v2[20] = swift_task_alloc();
  return _swift_task_switch(InformationViewFactory.makeErrorRunInformationFlowTemplate(), 0, 0);
}

uint64_t InformationViewFactory.makeErrorRunInformationFlowTemplate()()
{
  uint64_t v1 = v0[11];
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v5 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)(v1 + 16) + class metadata base offset for CommonCATs)
                                       + **(int **)(**(void **)(v1 + 16) + class metadata base offset for CommonCATs));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[21] = v2;
  *uint64_t v2 = v0;
  v2[1] = InformationViewFactory.makeErrorRunInformationFlowTemplate();
  uint64_t v3 = v0[10];
  return v5(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = InformationViewFactory.makeErrorRunInformationFlowTemplate();
  }
  else {
    uint64_t v2 = InformationViewFactory.makeErrorRunInformationFlowTemplate();
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  void *v20;

  id v20 = v0;
  (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = __swift_project_value_buffer(v0[14], (uint64_t)static Logger.information);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, v3, "Unable to generate dialog due to error: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  long long v8 = v0[15];
  uint64_t v7 = v0[16];
  long long v10 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v11 = v0[12];
  long long v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v12(v7, v1, v9);
  v12(v10, v7, v9);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v9);
  outlined init with copy of IdentifiedUser?(v10, v11, (uint64_t *)&demangling cache variable for type metadata for Logger?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v9) == 1)
  {
    outlined destroy of Any?(v0[12], (uint64_t *)&demangling cache variable for type metadata for Logger?);
  }
  else
  {
    uint64_t v13 = Logger.logObject.getter();
    long long v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315650;
      uint64_t v16 = StaticString.description.getter();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2048;
      v0[6] = 64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 22) = 2080;
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000040, 0x80000000000B00C0, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v13, v14, "FatalError at %s:%lu - %s", (uint8_t *)v15, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(void, void))(v0[15] + 8))(v0[12], v0[14]);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  return _assertionFailure(_:_:file:line:flags:)();
}

void *InformationViewFactory.makeAceViewsForPegasus(layouts:dialogs:buttons:disambiguationLists:domainObjects:renderOptions:dialogPhase:requestId:pommesCandidateId:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v179 = a7;
  uint64_t v192 = a5;
  uint64_t v191 = a4;
  uint64_t v185 = a3;
  unint64_t v189 = a2;
  uint64_t v195 = a1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogPhase?);
  __chkstk_darwin(v10 - 8);
  uint64_t v180 = &v166[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v178 = type metadata accessor for UUID();
  uint64_t v177 = *(void *)(v178 - 8);
  __chkstk_darwin(v178);
  uint64_t v176 = &v166[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  uint64_t v171 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = &v166[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v203 = type metadata accessor for ResponseMode();
  uint64_t v16 = *(void *)(v203 - 8);
  __chkstk_darwin(v203);
  uint64_t v172 = &v166[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v196 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ResponseMode?, ResponseMode?));
  uint64_t v18 = __chkstk_darwin(v196);
  uint64_t v175 = &v166[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18);
  unint64_t v21 = &v166[-v20];
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  char v169 = &v166[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v187 = &v166[-v26];
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v188 = &v166[-v28];
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v173 = &v166[-v30];
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = &v166[-v32];
  __chkstk_darwin(v31);
  unint64_t v35 = &v166[-v34];
  uint64_t v36 = type metadata accessor for Date();
  __chkstk_darwin(v36 - 8);
  uint64_t v202 = &v166[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v183 = type metadata accessor for PerformanceUtil.Ticket();
  uint64_t v182 = *(void *)(v183 - 8);
  uint64_t v38 = __chkstk_darwin(v183);
  uint64_t v201 = &v166[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v200 = &v166[-v41];
  uint64_t v42 = __chkstk_darwin(v40);
  v198 = &v166[-v43];
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v193 = &v166[-v45];
  __chkstk_darwin(v44);
  id v199 = &v166[-v46];
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v190 = v33;
  uint64_t v47 = type metadata accessor for Logger();
  uint64_t v186 = __swift_project_value_buffer(v47, (uint64_t)static Logger.information);
  unint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    unint64_t v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v50 = 0;
    _os_log_impl(&dword_0, v48, v49, "PegasusViewFactory: makeAceViewsForPegasus", v50, 2u);
    swift_slowDealloc();
  }
  id v197 = a6;

  unint64_t v205 = (unint64_t)_swiftEmptyArrayStorage;
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  type metadata accessor for SiriEnvironment();
  uint64_t v51 = static SiriEnvironment.forCurrentTask.getter();
  uint64_t v184 = v13;
  if (v51)
  {
    SiriEnvironment.currentRequest.getter();
    swift_release();
    CurrentRequest.responseMode.getter();
    swift_release();
    uint64_t v52 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
    uint64_t v53 = v16;
    v52(v35, 0, 1, v203);
  }
  else
  {
    uint64_t v52 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
    uint64_t v53 = v16;
    v52(v35, 1, 1, v203);
  }
  uint64_t v54 = (uint64_t)v190;
  static ResponseMode.displayForward.getter();
  uint64_t v55 = v203;
  uint64_t v174 = v52;
  v52((unsigned char *)v54, 0, 1, v203);
  uint64_t v56 = (uint64_t)&v21[*(int *)(v196 + 48)];
  uint64_t v194 = v35;
  outlined init with copy of IdentifiedUser?((uint64_t)v35, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  outlined init with copy of IdentifiedUser?(v54, v56, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  uint64_t v181 = v53;
  uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  if (v57((uint64_t)v21, 1, v55) != 1)
  {
    uint64_t v62 = v173;
    outlined init with copy of IdentifiedUser?((uint64_t)v21, (uint64_t)v173, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
    if (v57(v56, 1, v203) != 1)
    {
      unint64_t v170 = v57;
      unint64_t v168 = v21;
      uint64_t v63 = v181;
      uint64_t v61 = (uint64_t)v188;
      uint64_t v64 = v203;
      uint64_t v65 = v172;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v181 + 32))(v172, v56, v203);
      lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, (void (*)(uint64_t))&type metadata accessor for ResponseMode);
      int v167 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v66 = *(void (**)(unsigned char *, uint64_t))(v63 + 8);
      v66(v65, v64);
      outlined destroy of Any?((uint64_t)v190, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
      v66(v62, v64);
      outlined destroy of Any?((uint64_t)v168, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
      outlined init with copy of IdentifiedUser?((uint64_t)v194, v61, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
      unint64_t v59 = v187;
      uint64_t v60 = v184;
      if (v167) {
        goto LABEL_18;
      }
LABEL_15:
      static ResponseMode.displayOnly.getter();
      uint64_t v67 = v203;
      v174(v59, 0, 1, v203);
      uint64_t v68 = v175;
      uint64_t v69 = (uint64_t)&v175[*(int *)(v196 + 48)];
      outlined init with copy of IdentifiedUser?(v61, (uint64_t)v175, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
      outlined init with copy of IdentifiedUser?((uint64_t)v59, v69, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
      uint64_t v70 = v67;
      uint64_t v71 = v170;
      if (v170((uint64_t)v68, 1, v70) == 1)
      {
        outlined destroy of Any?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
        outlined destroy of Any?(v61, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
        if (v71(v69, 1, v203) == 1)
        {
          uint64_t v61 = (uint64_t)v68;
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v79 = v169;
        outlined init with copy of IdentifiedUser?((uint64_t)v68, (uint64_t)v169, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
        if (v71(v69, 1, v203) != 1)
        {
          uint64_t v126 = v181;
          uint64_t v127 = v172;
          uint64_t v128 = v203;
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v181 + 32))(v172, v69, v203);
          lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, (void (*)(uint64_t))&type metadata accessor for ResponseMode);
          char v129 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v130 = *(void (**)(unsigned char *, uint64_t))(v126 + 8);
          v130(v127, v128);
          outlined destroy of Any?((uint64_t)v187, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
          outlined destroy of Any?((uint64_t)v188, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
          v130(v79, v128);
          outlined destroy of Any?((uint64_t)v68, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
          uint64_t v72 = v189;
          if ((v129 & 1) == 0) {
            goto LABEL_27;
          }
          goto LABEL_19;
        }
        outlined destroy of Any?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
        outlined destroy of Any?((uint64_t)v188, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
        (*(void (**)(unsigned char *, uint64_t))(v181 + 8))(v79, v203);
      }
      outlined destroy of Any?((uint64_t)v68, &demangling cache variable for type metadata for (ResponseMode?, ResponseMode?));
      uint64_t v72 = v189;
      goto LABEL_27;
    }
    outlined destroy of Any?((uint64_t)v190, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
    (*(void (**)(unsigned char *, uint64_t))(v181 + 8))(v62, v203);
    unint64_t v59 = v187;
    uint64_t v60 = v184;
LABEL_13:
    unint64_t v170 = v57;
    outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for (ResponseMode?, ResponseMode?));
    uint64_t v61 = (uint64_t)v188;
    outlined init with copy of IdentifiedUser?((uint64_t)v194, (uint64_t)v188, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
    goto LABEL_15;
  }
  outlined destroy of Any?(v54, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  unsigned int v58 = v57(v56, 1, v203);
  unint64_t v59 = v187;
  uint64_t v60 = v184;
  if (v58 != 1) {
    goto LABEL_13;
  }
  outlined destroy of Any?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  uint64_t v61 = (uint64_t)v188;
  outlined init with copy of IdentifiedUser?((uint64_t)v194, (uint64_t)v188, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
LABEL_18:
  uint64_t v72 = v189;
  outlined destroy of Any?(v61, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
LABEL_19:
  uint64_t v73 = *(void *)(v72 + 16);
  if (v73)
  {
    unint64_t v74 = *(void (**)(unsigned char *, unint64_t, uint64_t))(v171 + 16);
    unint64_t v75 = v72 + ((*(unsigned __int8 *)(v171 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80));
    uint64_t v76 = (void (**)(unsigned char *, uint64_t))(v171 + 8);
    uint64_t v77 = *(void *)(v171 + 72);
    swift_bridgeObjectRetain();
    do
    {
      v74(v15, v75, v60);
      char v78 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.spokenOnly.getter();
      (*v76)(v15, v60);
      if ((v78 & 1) == 0) {
        break;
      }
      v75 += v77;
      --v73;
    }
    while (v73);
    uint64_t v72 = v189;
    swift_bridgeObjectRelease();
  }
LABEL_27:
  swift_retain();
  uint64_t v80 = v195;
  swift_bridgeObjectRetain();
  unint64_t v81 = (unint64_t)specialized Sequence.compactMap<A>(_:)(v72, v8, v80);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v196 = v81;
  uint64_t v190 = (unsigned char *)(v81 >> 62);
  if (v81 >> 62)
  {
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAAceView);
    swift_bridgeObjectRetain();
    unint64_t v82 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAAceView);
    unint64_t v82 = v81;
  }
  specialized Array.append<A>(contentsOf:)(v82);
  uint64_t v83 = type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v84 = (uint64_t)v197;
  unint64_t v85 = v197;
  swift_retain();
  uint64_t v86 = specialized Sequence.compactMap<A>(_:)(v195, v8, v84);
  swift_release();
  uint64_t v188 = v85;

  unint64_t v87 = swift_bridgeObjectRetain();
  uint64_t v195 = (uint64_t)v86;
  specialized Array.append<A>(contentsOf:)(v87);
  uint64_t v203 = v83;
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  unint64_t v88 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v204 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v89 = v185;
  uint64_t v90 = *(void *)(v185 + 16);
  if (v90)
  {
    uint64_t v91 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ButtonViewComponent() - 8);
    uint64_t v92 = v89 + ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80));
    unint64_t v93 = *(void (**)(uint64_t))(*(void *)v8 + 168);
    uint64_t v94 = *(void *)(v91 + 72);
    swift_retain();
    swift_bridgeObjectRetain();
    do
    {
      v93(v92);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + (v204 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                      + (v204 & 0xFFFFFFFFFFFFFF8)) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v92 += v94;
      --v90;
    }
    while (v90);
    swift_bridgeObjectRelease();
    unint64_t v95 = v204;
    unint64_t v88 = (unint64_t)_swiftEmptyArrayStorage;
  }
  else
  {
    swift_retain();
    unint64_t v95 = (unint64_t)_swiftEmptyArrayStorage;
  }
  swift_release();
  uint64_t v96 = v196;
  unint64_t v189 = v95 >> 62;
  if (v95 >> 62)
  {
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAAceView);
    swift_bridgeObjectRetain();
    unint64_t v97 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAAceView);
    unint64_t v97 = v95;
  }
  specialized Array.append<A>(contentsOf:)(v97);
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v204 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v98 = v191;
  uint64_t v99 = *(void *)(v191 + 16);
  if (v99)
  {
    uint64_t v100 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListComponent() - 8);
    uint64_t v101 = v98 + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
    uint64_t v102 = *(void (**)(uint64_t))(*(void *)v8 + 176);
    uint64_t v103 = *(void *)(v100 + 72);
    swift_retain();
    swift_bridgeObjectRetain();
    do
    {
      v102(v101);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + (v204 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                      + (v204 & 0xFFFFFFFFFFFFFF8)) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v101 += v103;
      --v99;
    }
    while (v99);
    swift_bridgeObjectRelease();
    unint64_t v104 = v204;
    unint64_t v88 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v96 = v196;
  }
  else
  {
    swift_retain();
    unint64_t v104 = (unint64_t)_swiftEmptyArrayStorage;
  }
  swift_release();
  unint64_t v105 = v104 >> 62;
  if (v104 >> 62)
  {
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAAceView);
    swift_bridgeObjectRetain();
    unint64_t v106 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAAceView);
    unint64_t v106 = v104;
  }
  specialized Array.append<A>(contentsOf:)(v106);
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v204 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v107 = v192;
  uint64_t v108 = *(void *)(v192 + 16);
  if (v108)
  {
    uint64_t v202 = (unsigned char *)v104;
    uint64_t v109 = (void *)v95;
    unint64_t v110 = v105;
    uint64_t v111 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent() - 8);
    uint64_t v112 = v107 + ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80));
    uint64_t v113 = *(uint64_t (**)(uint64_t, id))(*(void *)v8 + 184);
    uint64_t v114 = *(void *)(v111 + 72);
    swift_bridgeObjectRetain();
    id v115 = v197;
    do
    {
      unint64_t v116 = v113(v112, v115);
      specialized Array.append<A>(contentsOf:)(v116);
      v112 += v114;
      --v108;
    }
    while (v108);
    swift_bridgeObjectRelease();
    unint64_t v88 = v204;
    uint64_t v96 = v196;
    unint64_t v105 = v110;
    unint64_t v95 = (unint64_t)v109;
    unint64_t v104 = (unint64_t)v202;
  }
  unint64_t v117 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v117);
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  unint64_t v118 = v195;
  if (!(v205 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v205 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_53;
    }
LABEL_100:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v157 = Logger.logObject.getter();
    os_log_type_t v158 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v157, v158))
    {
      unint64_t v159 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v159 = 0;
      _os_log_impl(&dword_0, v157, v158, "PegasusViewFactory: pegasusResult has no views", v159, 2u);
      swift_slowDealloc();
    }

    uint64_t v160 = _swiftEmptyArrayStorage;
    goto LABEL_109;
  }
  swift_bridgeObjectRetain();
  uint64_t v156 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v156) {
    goto LABEL_100;
  }
LABEL_53:
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v119 = Logger.logObject.getter();
  os_log_type_t v120 = static os_log_type_t.debug.getter();
  BOOL v121 = os_log_type_enabled(v119, v120);
  long long v122 = (unsigned char *)(v118 >> 62);
  uint64_t v203 = v88 >> 62;
  if (v121)
  {
    uint64_t v123 = swift_slowAlloc();
    *(_DWORD *)uint64_t v123 = 134219008;
    uint64_t v202 = v122;
    if (v122)
    {
      swift_bridgeObjectRetain();
      uint64_t v124 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v124 = *(void *)((char *)&dword_10 + (v195 & 0xFFFFFFFFFFFFFF8));
    }
    swift_bridgeObjectRelease();
    uint64_t v204 = v124;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v123 + 12) = 2048;
    if (v190)
    {
      swift_bridgeObjectRetain();
      uint64_t v125 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v125 = *(void *)((char *)&dword_10 + (v96 & 0xFFFFFFFFFFFFFF8));
    }
    swift_bridgeObjectRelease();
    uint64_t v204 = v125;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v123 + 22) = 2048;
    if (v189)
    {
      swift_bridgeObjectRetain();
      uint64_t v131 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v131 = *(void *)((char *)&dword_10 + (v95 & 0xFFFFFFFFFFFFFF8));
    }
    swift_bridgeObjectRelease();
    uint64_t v204 = v131;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v123 + 32) = 2048;
    if (v105)
    {
      swift_bridgeObjectRetain();
      uint64_t v132 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v132 = *(void *)((char *)&dword_10 + (v104 & 0xFFFFFFFFFFFFFF8));
    }
    swift_bridgeObjectRelease();
    uint64_t v204 = v132;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v123 + 42) = 2048;
    if (v203)
    {
      swift_bridgeObjectRetain();
      uint64_t v133 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v133 = *(void *)((char *)&dword_10 + (v88 & 0xFFFFFFFFFFFFFF8));
    }
    swift_bridgeObjectRelease();
    uint64_t v204 = v133;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v119, v120, "PegasusViewFactory: pegasusResult generated\n    snippets %ld\n    utteranceViews %ld\n    buttonViews %ld\n    disambiguationListViews %ld\n    domainObjectViews %ld", (uint8_t *)v123, 0x34u);
    swift_slowDealloc();

    unint64_t v118 = v195;
    long long v122 = v202;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(InformationViewFactory.AceViewCategory, Int)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_ACA10;
  *(unsigned char *)(inited + 32) = 0;
  if (v122)
  {
    swift_bridgeObjectRetain();
    uint64_t v135 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v135 = *(void *)((char *)&dword_10 + (v118 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  *(void *)(inited + 40) = v135;
  *(unsigned char *)(inited + 48) = 1;
  uint64_t v136 = (uint64_t)v180;
  if (v190)
  {
    swift_bridgeObjectRetain();
    uint64_t v137 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v137 = *(void *)((char *)&dword_10 + (v96 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  *(void *)(inited + 56) = v137;
  *(unsigned char *)(inited + 64) = 2;
  if (v189)
  {
    swift_bridgeObjectRetain();
    uint64_t v138 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v138 = *(void *)((char *)&dword_10 + (v95 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = v138;
  *(unsigned char *)(inited + 80) = 3;
  if (v105)
  {
    swift_bridgeObjectRetain();
    uint64_t v139 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v139 = *(void *)((char *)&dword_10 + (v104 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  *(void *)(inited + 88) = v139;
  *(unsigned char *)(inited + 96) = 4;
  id v140 = v197;
  if (v203)
  {
    swift_bridgeObjectRetain();
    uint64_t v141 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v141 = *(void *)((char *)&dword_10 + (v88 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  *(void *)(inited + 104) = v141;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  id v142 = [objc_allocWithZone((Class)SAUIAddViews) init];
  uint64_t v143 = v176;
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(unsigned char *, uint64_t))(v177 + 8))(v143, v178);
  NSString v144 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v142 setAceId:v144];

  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAAceView);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v142 setViews:isa];

  outlined init with copy of IdentifiedUser?(v179, v136, &demangling cache variable for type metadata for DialogPhase?);
  uint64_t v146 = type metadata accessor for DialogPhase();
  uint64_t v147 = *(void *)(v146 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v136, 1, v146) == 1)
  {
    outlined destroy of Any?(v136, &demangling cache variable for type metadata for DialogPhase?);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    DialogPhase.aceValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v136, v146);
  }
  NSString v148 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v142 setDialogPhase:v148];

  specialized _arrayForceCast<A, B>(_:)((uint64_t)_swiftEmptyArrayStorage);
  Class v149 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v142 setCoordinationOptions:v149];

  if (!v140) {
    goto LABEL_107;
  }
  uint64_t v150 = v188;
  [v142 setImmersiveExperience:PommesRenderOptions.isImmersiveExperience.getter() & 1];
  unint64_t result = [v142 views];
  if (!result) {
    goto LABEL_114;
  }
  uint64_t v152 = result;
  unint64_t v153 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t result = (void *)swift_bridgeObjectRelease();
  if (v153 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v161 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = (void *)swift_bridgeObjectRelease();
    if (v161) {
      goto LABEL_91;
    }
    goto LABEL_106;
  }
  if (!*(void *)((char *)&dword_10 + (v153 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_106:

LABEL_107:
    swift_bridgeObjectRelease();
    goto LABEL_108;
  }
LABEL_91:
  if ((v153 & 0xC000000000000001) != 0)
  {
    id v154 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_94;
  }
  if (*(void *)((char *)&dword_10 + (v153 & 0xFFFFFFFFFFFFFF8)))
  {
    id v154 = *(id *)(v153 + 32);
LABEL_94:
    uint64_t v155 = v154;
    swift_bridgeObjectRelease();
    [v155 setPreserveResultSpaceIfPossible:PommesRenderOptions.preserveResultSpaceIfPossible.getter() & 1];

LABEL_108:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v162 = swift_allocObject();
    *(_OWORD *)(v162 + 16) = xmmword_AB670;
    *(void *)(v162 + 32) = v142;
    uint64_t v204 = v162;
    specialized Array._endMutation()();
    uint64_t v160 = (void *)v204;
LABEL_109:
    uint64_t v163 = (uint64_t)v194;
    uint64_t v164 = *(void (**)(unsigned char *, uint64_t))(v182 + 8);
    uint64_t v165 = v183;
    v164(v201, v183);
    v164(v200, v165);
    v164(v198, v165);
    v164(v193, v165);
    outlined destroy of Any?(v163, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
    v164(v199, v165);
    return v160;
  }
  __break(1u);
LABEL_114:
  __break(1u);
  return result;
}

uint64_t InformationViewFactory.makeCommandForPegasusNavigation(layouts:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v5, v6, "PegasusViewFactory: makeCommandForPegasusNavigation %ld", v7, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_retain();
  unint64_t CardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n = (unint64_t)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI48Apple_Parsec_Siri_V2alpha_LayoutSnippetComponentVG_So18SACardShowNextCardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n(a1, v2);
  swift_release();
  if (CardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n >> 62)
  {
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SABaseCommand);
    uint64_t v9 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SABaseCommand);
    uint64_t v9 = CardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n;
  }
  swift_bridgeObjectRelease();
  return v9;
}

id InformationViewFactory.makeButtonView(button:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v10 = [objc_allocWithZone((Class)SAUIButton) init];
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setAceId:v11];

  Apple_Parsec_Siri_V2alpha_ButtonViewComponent.text.getter();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setText:v12];

  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  uint64_t v16 = a1;
  Date.init()();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SAClientBoundCommand]);
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v10 setCommands:isa];

  return v10;
}

id InformationViewFactory.makeDisambiguationListView(list:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListItem();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [objc_allocWithZone((Class)SAUIDisambiguationList) init];
  type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams();
  lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationBuilderParams and conformance Apple_Parsec_Siri_V2alpha_LocationBuilderParams, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams);
  static Google_Protobuf_Any.register(messageType:)();
  uint64_t v5 = Apple_Parsec_Siri_V2alpha_DisambiguationListComponent.items.getter();
  unint64_t v18 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v8 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    uint64_t v7 = v1 + 16;
    uint64_t v16 = v8;
    unint64_t v9 = v5 + ((*(unsigned __int8 *)(v7 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 64));
    uint64_t v10 = *(void *)(v7 + 56);
    id v14 = v4;
    uint64_t v15 = v10;
    v13[1] = v5;
    swift_bridgeObjectRetain();
    do
    {
      v16(v3, v9, v0);
      closure #1 in InformationViewFactory.makeDisambiguationListView(list:)((uint64_t)v3, &v17);
      (*(void (**)(char *, uint64_t))(v7 - 8))(v3, v0);
      if (v17)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                       + (v18 & 0xFFFFFFFFFFFFFF8)) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v9 += v15;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    id v4 = v14;
  }
  swift_bridgeObjectRelease();
  type metadata accessor for SABaseCommand(0, (unint64_t *)&lazy cache variable for type metadata for SAUIListItem);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 setItems:isa];

  return v4;
}

void closure #1 in InformationViewFactory.makeDisambiguationListView(list:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v69 = a2;
  uint64_t v68 = type metadata accessor for Date();
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v66 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListItem();
  uint64_t v59 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  unsigned int v58 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams();
  uint64_t v57 = *(void *)(v62 - 8);
  uint64_t v5 = __chkstk_darwin(v62);
  uint64_t v56 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  os_log_t v61 = (os_log_t)((char *)&v55 - v7);
  uint64_t v8 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v8 - 8);
  uint64_t v64 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v55 - v15;
  id v17 = [objc_allocWithZone((Class)SAUIListItem) init];
  Apple_Parsec_Siri_V2alpha_DisambiguationListItem.title.getter();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 setTitle:v18];

  Apple_Parsec_Siri_V2alpha_DisambiguationListItem.selectionText.getter();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v65 = v17;
  [v17 setSelectionText:v19];

  Apple_Parsec_Siri_V2alpha_DisambiguationListItem.object.getter();
  Google_Protobuf_Any.typeURL.getter();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v55 = v16;
  v20(v16, v10);
  uint64_t v21 = static Google_Protobuf_Any.messageType(forTypeURL:)();
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  if (!v21) {
    goto LABEL_4;
  }
  uint64_t v63 = a1;
  Apple_Parsec_Siri_V2alpha_DisambiguationListItem.object.getter();
  Google_Protobuf_Any.value.getter();
  v20(v14, v10);
  uint64_t v75 = 0;
  long long v73 = 0u;
  long long v74 = 0u;
  default argument 3 of Message.init(serializedData:extensions:partial:options:)(v21, v23);
  *((void *)&v77 + 1) = v21;
  uint64_t v78 = v23;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v76);
  uint64_t v24 = v70;
  Message.init(serializedData:extensions:partial:options:)();
  if (v24)
  {
    swift_errorRelease();
    __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v76);
    uint64_t v78 = 0;
    long long v76 = 0u;
    long long v77 = 0u;
    outlined destroy of Any?((uint64_t)&v76, &demangling cache variable for type metadata for Message?);
LABEL_4:
    id v25 = v65;
    goto LABEL_14;
  }
  outlined init with take of PatternFlowProviding(&v76, (uint64_t)v79);
  outlined init with copy of OutputPublisherAsync((uint64_t)v79, (uint64_t)&v76);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Message);
  os_log_t v26 = v61;
  uint64_t v27 = v62;
  if (swift_dynamicCast())
  {
    uint64_t v28 = v57;
    uint64_t v29 = v56;
    (*(void (**)(char *, os_log_t, uint64_t))(v57 + 32))(v56, v26, v27);
    id v30 = specialized static PegasusACEConverters.makeLocation(params:)();
    id v25 = v65;
    [v65 setObject:v30];

    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
  }
  else
  {
    uint64_t v31 = v63;
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.information);
    outlined init with copy of OutputPublisherAsync((uint64_t)v79, (uint64_t)&v73);
    uint64_t v33 = v59;
    uint64_t v34 = v58;
    uint64_t v35 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v31, v60);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    LODWORD(v64) = v37;
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      uint64_t v80 = v62;
      *(_DWORD *)uint64_t v38 = 136315394;
      os_log_t v61 = v36;
      uint64_t v70 = 0;
      __swift_project_boxed_opaque_existential_1(&v73, *((uint64_t *)&v74 + 1));
      Dynamicuint64_t Type = swift_getDynamicType();
      uint64_t v72 = v75;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message.Type);
      uint64_t v39 = String.init<A>(describing:)();
      Dynamicuint64_t Type = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
      *(_WORD *)(v38 + 12) = 2080;
      uint64_t v41 = v20;
      uint64_t v42 = v55;
      Apple_Parsec_Siri_V2alpha_DisambiguationListItem.object.getter();
      uint64_t v43 = Google_Protobuf_Any.typeURL.getter();
      uint64_t v44 = v34;
      unint64_t v46 = v45;
      v41(v42, v10);
      Dynamicuint64_t Type = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v46, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v60);
      os_log_t v47 = v61;
      _os_log_impl(&dword_0, v61, (os_log_type_t)v64, "Unknown or unsupported list item object type: %s (protobuf type url: %s)", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    id v25 = v65;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
LABEL_14:
  type metadata accessor for PerformanceUtil();
  uint64_t v48 = static PerformanceUtil.shared.getter();
  __chkstk_darwin(v48);
  os_log_type_t v49 = v66;
  Date.init()();
  uint64_t v53 = &v51;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SAClientBoundCommand]);
  uint64_t v52 = partial apply for closure #1 in closure #1 in InformationViewFactory.makeDisambiguationListView(list:);
  char v51 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v49, v68);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v25 setCommands:isa];

  *uint64_t v69 = v25;
}

void *InformationViewFactory.makeDomainObjectComponentView(domainObject:renderOptions:)(uint64_t a1, uint64_t a2)
{
  v30[0] = a2;
  uint64_t v32 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent();
  uint64_t v3 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component?);
  uint64_t v9 = __chkstk_darwin(v31);
  v30[1] = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v30 - v11;
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoObjectComponent();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint8_t *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1;
  Apple_Parsec_Siri_V2alpha_DomainObjectComponent.component.getter();
  uint64_t v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v12, 1, v18) == 1)
  {
    outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component?);
  }
  else
  {
    if ((*(unsigned int (**)(char *, uint64_t))(v19 + 88))(v12, v18) == enum case for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component.videoObjects(_:))
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v12, v18);
      (*(void (**)(uint8_t *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
      if (v30[0])
      {
        PommesRenderOptions.switchProfile.getter();
      }
      else
      {
        uint64_t v28 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v8, 1, 1, v28);
      }
      uint64_t v27 = specialized static VideoSnippetUtils.makeVideoSnippets(for:switchProfileBuilderParams:)(v16, (uint64_t)v8);
      outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
      (*(void (**)(uint8_t *, uint64_t))(v14 + 8))(v16, v13);
      return v27;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v12, v18);
  }
  uint64_t v20 = v32;
  if (one-time initialization token for videoSnippet != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.videoSnippet);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v17, v20);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315138;
    Apple_Parsec_Siri_V2alpha_DomainObjectComponent.component.getter();
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v32);
    _os_log_impl(&dword_0, v22, v23, "Ignoring unsupported domain object component: %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v20);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = a2;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  uint64_t v74 = *(void *)(v3 - 8);
  uint64_t v75 = v3;
  __chkstk_darwin(v3);
  long long v73 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet();
  uint64_t v5 = *(void *)(v78 - 8);
  uint64_t v6 = __chkstk_darwin(v78);
  uint64_t v67 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v68 = (char *)&v67 - v9;
  __chkstk_darwin(v8);
  uint64_t v69 = (char *)&v67 - v10;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v71 = *(void *)(v11 - 8);
  uint64_t v72 = v11;
  __chkstk_darwin(v11);
  uint64_t v70 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v79 = (uint64_t)&v67 - v20;
  uint64_t v21 = a1;
  uint64_t v22 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.perResultLayoutDetails.getter();
  uint64_t v23 = *(void *)(v22 + 16);
  uint64_t v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails();
  uint64_t v25 = *(void *)(v24 - 8);
  if (v23)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v15, v22 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)), v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v15, 0, 1, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v15, 1, 1, v24);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v15, 1, v24) == 1)
  {
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
    uint64_t v26 = v5;
    uint64_t v27 = v78;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v79, 1, 1, v78);
  }
  else
  {
    Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v24);
    uint64_t v26 = v5;
    uint64_t v27 = v78;
  }
  uint64_t v28 = v19;
  outlined init with copy of IdentifiedUser?(v79, (uint64_t)v19, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v19, 1, v27) != 1)
  {
    int v39 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v19, v27);
    if (v39 == enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.casinoSnippet(_:))
    {
      type metadata accessor for PerformanceUtil();
      uint64_t v40 = static PerformanceUtil.shared.getter();
      __chkstk_darwin(v40);
      uint64_t v63 = v77;
      uint64_t v41 = v70;
      Date.init()();
      id v65 = &v61;
      uint64_t v66 = type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SACardSnippet);
      uint64_t v64 = partial apply for closure #1 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:);
      LOBYTE(v63) = 2;
      os_log_t v61 = "makeSnippet(layoutSnippet:renderOptions:)";
      uint64_t v62 = 41;
    }
    else if (v39 == enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.mapItemSnippet(_:))
    {
      type metadata accessor for PerformanceUtil();
      uint64_t v46 = static PerformanceUtil.shared.getter();
      __chkstk_darwin(v46);
      uint64_t v41 = v70;
      Date.init()();
      id v65 = (const char **)&v63;
      uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SALocalSearchMapItemSnippet?);
      uint64_t v64 = partial apply for closure #2 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:);
      LOBYTE(v63) = 2;
      os_log_t v61 = "makeSnippet(layoutSnippet:renderOptions:)";
      uint64_t v62 = 41;
    }
    else if (v39 == enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.legacySnippet(_:))
    {
      type metadata accessor for PerformanceUtil();
      uint64_t v47 = static PerformanceUtil.shared.getter();
      __chkstk_darwin(v47);
      uint64_t v41 = v70;
      Date.init()();
      id v65 = (const char **)&v63;
      uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUISnippet?);
      uint64_t v64 = partial apply for closure #3 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:);
      LOBYTE(v63) = 2;
      os_log_t v61 = "makeSnippet(layoutSnippet:renderOptions:)";
      uint64_t v62 = 41;
    }
    else
    {
      if (v39 != enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.personSnippet(_:))
      {
        os_log_type_t v49 = v69;
        (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v69, v28, v27);
        if (one-time initialization token for information != -1) {
          swift_once();
        }
        uint64_t v50 = type metadata accessor for Logger();
        __swift_project_value_buffer(v50, (uint64_t)static Logger.information);
        char v51 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
        uint64_t v52 = v68;
        v51(v68, v49, v27);
        uint64_t v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v55 = (uint8_t *)swift_slowAlloc();
          uint64_t v78 = swift_slowAlloc();
          uint64_t v81 = v78;
          *(_DWORD *)uint64_t v55 = 136315138;
          long long v77 = v55 + 4;
          v51(v67, v52, v27);
          uint64_t v56 = String.init<A>(describing:)();
          uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          unsigned int v58 = *(void (**)(char *, uint64_t))(v26 + 8);
          v58(v52, v27);
          _os_log_impl(&dword_0, v53, v54, "InfoViewFactory unsupported snippet %s", v55, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v58(v69, v27);
        }
        else
        {

          uint64_t v59 = *(void (**)(char *, uint64_t))(v26 + 8);
          v59(v52, v27);
          v59(v49, v27);
        }
        goto LABEL_31;
      }
      type metadata accessor for PerformanceUtil();
      uint64_t v48 = static PerformanceUtil.shared.getter();
      __chkstk_darwin(v48);
      uint64_t v41 = v70;
      Date.init()();
      id v65 = (const char **)&v63;
      uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAABPersonSnippet?);
      uint64_t v64 = partial apply for closure #4 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:);
      LOBYTE(v63) = 2;
      os_log_t v61 = "makeSnippet(layoutSnippet:renderOptions:)";
      uint64_t v62 = 41;
    }
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v41, v72);
    outlined destroy of Any?(v79, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
    uint64_t v45 = v81;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v27);
    return v45;
  }
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.information);
  uint64_t v32 = v73;
  uint64_t v31 = v74;
  uint64_t v33 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v73, v21, v75);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v72 = v30;
    os_log_type_t v37 = (uint8_t *)v36;
    uint64_t v81 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v37 = 136315138;
    uint64_t v78 = v21;
    lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent and conformance Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent);
    Swift::String v38 = Message.textFormatString()();
    uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38._countAndFlagsBits, (unint64_t)v38._object, &v81);
    uint64_t v21 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
    _os_log_impl(&dword_0, v34, v35, "InfoViewFactory missing perResultLayoutDetails snippet %s", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  }

  if ((Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.hasCompactSnippet.getter() & 1) == 0)
  {
LABEL_31:
    outlined destroy of Any?(v79, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
    return 0;
  }
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl(&dword_0, v42, v43, "InfoViewFactory received compact snippet without perResultLayoutDetails", v44, 2u);
    swift_slowDealloc();
  }

  uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v77 + 304))(v21, v76);
  outlined destroy of Any?(v79, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  return v45;
}

char *InformationViewFactory.makeMapSnippet(layoutSnippet:)(uint8_t *a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UIItemType();
  uint64_t v82 = *(void *)(v2 - 8);
  uint64_t v83 = v2;
  __chkstk_darwin(v2);
  uint64_t v81 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v79 = *(void *)(v4 - 8);
  uint64_t v80 = v4;
  __chkstk_darwin(v4);
  uint64_t v78 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams();
  uint64_t v73 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  uint64_t v88 = *(void *)(v90 - 8);
  uint64_t v9 = __chkstk_darwin(v90);
  unint64_t v87 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v91 = (char *)&v72 - v12;
  __chkstk_darwin(v11);
  long long v77 = (char *)&v72 - v13;
  uint64_t v76 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams();
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v74 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemSnippet();
  uint64_t v84 = *(void *)(v21 - 8);
  uint64_t v85 = v21;
  __chkstk_darwin(v21);
  uint64_t v86 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = a1;
  uint64_t v23 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.perResultLayoutDetails.getter();
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails();
  uint64_t v26 = *(void *)(v25 - 8);
  if (v24)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v26 + 16))(v17, v23 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80)), v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v17, 0, 1, v25);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v17, 1, 1, v25);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v17, 1, v25) == 1)
  {
    outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
    uint64_t v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v20, 1, 1, v27);
LABEL_7:
    outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
    uint64_t v30 = v90;
LABEL_8:
    uint64_t v32 = v88;
    uint64_t v31 = v89;
    uint64_t v33 = v91;
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.information);
    os_log_type_t v35 = *(void (**)(char *, uint8_t *, uint64_t))(v32 + 16);
    v35(v33, v31, v30);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      Swift::String v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v90 = swift_slowAlloc();
      v92[0] = v90;
      *(_DWORD *)Swift::String v38 = 136315138;
      uint64_t v89 = v38 + 4;
      v35(v87, (uint8_t *)v33, v30);
      uint64_t v39 = String.init<A>(describing:)();
      v92[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v30);
      _os_log_impl(&dword_0, v36, v37, "InfoViewFactory invalid map snippet %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v30);
    }

    return 0;
  }
  Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v25);
  uint64_t v28 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet();
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v20, 1, v28) == 1) {
    goto LABEL_7;
  }
  int v43 = (*(uint64_t (**)(char *, uint64_t))(v29 + 88))(v20, v28);
  uint64_t v30 = v90;
  if (v43 != enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.mapItemSnippet(_:))
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v28);
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t))(v29 + 96))(v20, v28);
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v86, v20, v85);
  uint64_t v44 = (char *)[objc_allocWithZone((Class)SALocalSearchMapItemSnippet) init];
  uint64_t v45 = Apple_Parsec_Siri_V2alpha_MapItemSnippet.objects.getter();
  uint64_t v46 = *(void *)(v45 + 16);
  if (v46)
  {
    unint64_t v87 = v44;
    v92[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v47 = v8;
    uint64_t v48 = v6;
    uint64_t v49 = v73 + 16;
    uint64_t v91 = *(char **)(v73 + 16);
    unint64_t v50 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
    uint64_t v73 = v45;
    unint64_t v51 = v45 + v50;
    uint64_t v52 = *(void *)(v49 + 56);
    do
    {
      ((void (*)(char *, unint64_t, uint64_t))v91)(v47, v51, v48);
      specialized static PegasusACEConverters.makeLocalSearchMapItem(params:)();
      (*(void (**)(char *, uint64_t))(v49 - 8))(v47, v48);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v51 += v52;
      --v46;
    }
    while (v46);
    swift_bridgeObjectRelease();
    uint64_t v30 = v90;
    uint64_t v44 = v87;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SALocalSearchMapItem);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v44 setItems:isa];

  Apple_Parsec_Siri_V2alpha_MapItemSnippet.responseViewID.getter();
  NSString v54 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v44 setResponseViewId:v54];

  uint64_t v55 = v74;
  Apple_Parsec_Siri_V2alpha_MapItemSnippet.searchRegionCenter.getter();
  id v56 = specialized static PegasusACEConverters.makeLocation(params:)();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v55, v76);
  [v44 setSearchRegionCenter:v56];

  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for NSNumber);
  Class v57 = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
  [v44 setUserCurrentLocation:v57];

  [v44 setSearchAlongRoute:0];
  uint64_t v58 = (uint64_t)v77;
  (*(void (**)(char *, uint8_t *, uint64_t))(v88 + 16))(v77, v89, v30);
  uint64_t v59 = v44;
  char v60 = 0;
  if (AFIsInternalInstall())
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v72 + 104))(v92);
    __swift_project_boxed_opaque_existential_1(v92, v92[3]);
    char v61 = dispatch thunk of PommesServerFallbackDisabling.shouldDisableServerFallbackNL(isDomainDirected:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
    char v60 = v61 ^ 1;
  }
  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAUISash);
  id v62 = SAUISash.init(layoutSnippet:showInternalPommesAttribution:)(v58, v60 & 1);
  [v59 setSash:v62];

  type metadata accessor for PerformanceUtil();
  uint64_t v63 = static PerformanceUtil.shared.getter();
  __chkstk_darwin(v63);
  uint64_t v64 = v78;
  Date.init()();
  uint64_t v70 = &v68;
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SAClientBoundCommand]);
  uint64_t v69 = partial apply for closure #2 in InformationViewFactory.makeMapSnippet(layoutSnippet:);
  char v68 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v64, v80);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class v65 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v59 setProviderCommand:v65];

  uint64_t v41 = v59;
  uint64_t v66 = v81;
  Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.uiItemType.getter();
  Apple_Parsec_Siri_V2alpha_UIItemType.aceValue.getter();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v66, v83);
  NSString v67 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v41 setItemType:v67];

  (*(void (**)(char *, uint64_t))(v84 + 8))(v86, v85);
  return v41;
}

id SAUISash.init(layoutSnippet:showInternalPommesAttribution:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Sash();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.sash.getter();
  uint64_t v8 = Apple_Parsec_Siri_V2alpha_Sash.appName.getter();
  unint64_t v10 = v9;
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  uint64_t v12 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v12 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (v12 && (a2 & 1) != 0)
  {
    uint64_t v17 = v8;
    unint64_t v18 = v10;
    v13._uint64_t countAndFlagsBits = 0x454D4D4F50203A20;
    v13._object = (void *)0xE900000000000053;
    String.append(_:)(v13);
    uint64_t v8 = v17;
    unint64_t v10 = v18;
  }
  Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.sash.getter();
  Apple_Parsec_Siri_V2alpha_Sash.appID.getter();
  v11(v7, v4);
  id v14 = SAUISash.init(appName:appID:)(v8, v10);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
  return v14;
}

uint64_t Apple_Parsec_Siri_V2alpha_UIItemType.aceValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UIItemType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for Apple_Parsec_Siri_V2alpha_UIItemType.UNRECOGNIZED(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    v13[0] = 0;
    v13[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v13, "unrecognized(");
    HIWORD(v13[1]) = -4864;
    v12[1] = v7;
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 41;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    return v13[0];
  }
  else if (v6 == enum case for Apple_Parsec_Siri_V2alpha_UIItemType.unspecified(_:) {
         || v6 == enum case for Apple_Parsec_Siri_V2alpha_UIItemType.conversation(_:)
  }
         || v6 == enum case for Apple_Parsec_Siri_V2alpha_UIItemType.result(_:)
         || v6 == enum case for Apple_Parsec_Siri_V2alpha_UIItemType.floating(_:)
         || v6 == enum case for Apple_Parsec_Siri_V2alpha_UIItemType.hint(_:)
         || v6 == enum case for Apple_Parsec_Siri_V2alpha_UIItemType.announcement(_:))
  {
    return static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v10 = 0x6E676F6365726E75;
    (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v10;
}

id InformationViewFactory.makePersonSnippet(layoutSnippet:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  uint64_t v54 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v53 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  int v6 = (char *)&v46 - v5;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UIItemType();
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v52 = (uint8_t *)v7;
  __chkstk_darwin(v7);
  unint64_t v50 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  __chkstk_darwin(v12 - 8);
  id v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PersonSnippet();
  uint64_t v47 = *(void *)(v15 - 8);
  uint64_t v48 = v15;
  __chkstk_darwin(v15);
  uint64_t v46 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = a1;
  uint64_t v17 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.perResultLayoutDetails.getter();
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails();
  uint64_t v20 = *(void *)(v19 - 8);
  if (v18)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v11, v17 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80)), v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v11, 0, 1, v19);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v11, 1, 1, v19);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v11, 1, v19) == 1)
  {
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
    uint64_t v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v14, 1, 1, v21);
LABEL_7:
    outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
    goto LABEL_8;
  }
  Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v19);
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v14, 1, v22) == 1) {
    goto LABEL_7;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v23 + 88))(v14, v22) == enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.personSnippet(_:))
  {
    (*(void (**)(char *, uint64_t))(v23 + 96))(v14, v22);
    uint64_t v36 = v46;
    uint64_t v35 = v47;
    uint64_t v37 = v48;
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v46, v14, v48);
    id v38 = [objc_allocWithZone((Class)SAABPersonSnippet) init];
    uint64_t v39 = Apple_Parsec_Siri_V2alpha_PersonSnippet.displayProperties.getter();
    uint64_t v40 = v49;
    swift_retain();
    specialized Sequence.compactMap<A>(_:)(v39, v40);
    swift_bridgeObjectRelease();
    swift_release();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v38 setDisplayProperties:isa];

    uint64_t v42 = Apple_Parsec_Siri_V2alpha_PersonSnippet.objects.getter();
    swift_retain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI32Apple_Parsec_Siri_V2alpha_PersonVG_So8SAPersonCs5NeverOTg5047_s21InformationFlowPlugin0A11ViewFactoryC17makej32Snippet06layoutH0So010SAABPersonv5CSg10d6API032f1_g1_h1_i25_LayoutH9ComponentV_tFSo8K25CAI0m1_n1_o1_p1_G0VXEfU0_0nO6Plugin0nrS0CTf1cn_nTf4ng_n(v42, v40);
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAPerson);
    Class v43 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v38 setPersons:v43];

    id v33 = v38;
    uint64_t v44 = v50;
    Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.uiItemType.getter();
    Apple_Parsec_Siri_V2alpha_UIItemType.aceValue.getter();
    (*(void (**)(char *, uint8_t *))(v51 + 8))(v44, v52);
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v33 setItemType:v45];

    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
    return v33;
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v22);
LABEL_8:
  uint64_t v24 = v6;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.information);
  uint64_t v26 = v54;
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
  v27(v24, v55, v2);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    uint64_t v57 = v55;
    *(_DWORD *)uint64_t v30 = 136315138;
    uint64_t v52 = v30 + 4;
    v27(v53, (uint64_t)v24, v2);
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v2);
    _os_log_impl(&dword_0, v28, v29, "InfoViewFactory invalid person snippet %s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v2);
  }

  return 0;
}

uint64_t InformationViewFactory.makePersonDisplayProperty(personProperty:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  int v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v24 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v24 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v12((char *)v24 - v10, a1, v2);
  int v13 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v11, v2);
  if (v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.firstName(_:)
    || v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.fullName(_:)
    || v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.lastName(_:)
    || v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.middleName(_:)
    || v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.nickName(_:)
    || v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.prefix(_:)
    || v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.suffix(_:)
    || v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.me(_:)
    || v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.phones(_:)
    || v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.company(_:)
    || v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.addresses(_:)
    || v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.emails(_:)
    || v13 == enum case for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty.relatedNames(_:))
  {
    return static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.information);
  v12(v9, a1, v2);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    os_log_t v25 = v16;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v28 = v26;
    *(_DWORD *)uint64_t v19 = 136315138;
    v24[1] = v19 + 4;
    v12(v6, (uint64_t)v9, v2);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v3 + 8);
    v22(v9, v2);
    os_log_t v23 = v25;
    _os_log_impl(&dword_0, v25, v17, "Unable to translate an unknown person display property key: %s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v22 = *(void (**)(char *, uint64_t))(v3 + 8);
    v22(v9, v2);
  }
  v22(v11, v2);
  return 0;
}

id InformationViewFactory.makePerson(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [objc_allocWithZone((Class)SAPerson) init];
  uint64_t v10 = Apple_Parsec_Siri_V2alpha_Person.contactIdentifier.getter();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v13)
  {
    Apple_Parsec_Siri_V2alpha_Person.contactIdentifier.getter();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
      id v14 = v9;
      URL._bridgeToObjectiveC()(v15);
      os_log_type_t v17 = v16;
      [v14 setIdentifier:v16];

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  uint64_t v18 = Apple_Parsec_Siri_V2alpha_Person.givenName.getter();
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0) {
    uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    Apple_Parsec_Siri_V2alpha_Person.givenName.getter();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 setFirstName:v22];
  }
  uint64_t v23 = Apple_Parsec_Siri_V2alpha_Person.middleName.getter();
  unint64_t v25 = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0) {
    uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
  }
  if (v26)
  {
    Apple_Parsec_Siri_V2alpha_Person.middleName.getter();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 setMiddleName:v27];
  }
  uint64_t v28 = Apple_Parsec_Siri_V2alpha_Person.familyName.getter();
  unint64_t v30 = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0) {
    uint64_t v31 = v28 & 0xFFFFFFFFFFFFLL;
  }
  if (v31)
  {
    Apple_Parsec_Siri_V2alpha_Person.familyName.getter();
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 setLastName:v32];
  }
  uint64_t v33 = Apple_Parsec_Siri_V2alpha_Person.nickname.getter();
  unint64_t v35 = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = HIBYTE(v35) & 0xF;
  if ((v35 & 0x2000000000000000) == 0) {
    uint64_t v36 = v33 & 0xFFFFFFFFFFFFLL;
  }
  if (v36)
  {
    Apple_Parsec_Siri_V2alpha_Person.nickname.getter();
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 setNickName:v37];
  }
  uint64_t v38 = Apple_Parsec_Siri_V2alpha_Person.fullName.getter();
  unint64_t v40 = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = HIBYTE(v40) & 0xF;
  if ((v40 & 0x2000000000000000) == 0) {
    uint64_t v41 = v38 & 0xFFFFFFFFFFFFLL;
  }
  if (v41)
  {
    Apple_Parsec_Siri_V2alpha_Person.fullName.getter();
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 setFullName:v42];
  }
  uint64_t v43 = *(void *)(Apple_Parsec_Siri_V2alpha_Person.addresses.getter() + 16);
  swift_bridgeObjectRelease();
  if (v43)
  {
    uint64_t v44 = Apple_Parsec_Siri_V2alpha_Person.addresses.getter();
    unint64_t v53 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v45 = *(void *)(v44 + 16);
    if (v45)
    {
      id v52 = v9;
      uint64_t v46 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ContactAddress() - 8);
      unint64_t v47 = v44 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
      uint64_t v48 = *(void (**)(unint64_t))(*(void *)v1 + 232);
      uint64_t v49 = *(void *)(v46 + 72);
      swift_retain();
      do
      {
        v48(v47);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + (v53 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                       + (v53 & 0xFFFFFFFFFFFFFF8)) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v47 += v49;
        --v45;
      }
      while (v45);
      id v9 = v52;
    }
    else
    {
      swift_retain();
    }
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SALocation);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v9 setAddresses:isa];
  }
  return v9;
}

id InformationViewFactory.makeAddress(_:)()
{
  id v0 = [objc_allocWithZone((Class)SALocation) init];
  uint64_t v1 = Apple_Parsec_Siri_V2alpha_ContactAddress.addressLabel.getter();
  unint64_t v3 = v2;
  swift_bridgeObjectRelease();
  uint64_t v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    Apple_Parsec_Siri_V2alpha_ContactAddress.addressLabel.getter();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v0 setLabel:v5];
  }
  uint64_t v6 = Apple_Parsec_Siri_V2alpha_ContactAddress.street.getter();
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v9)
  {
    Apple_Parsec_Siri_V2alpha_ContactAddress.street.getter();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v0 setStreet:v10];
  }
  uint64_t v11 = Apple_Parsec_Siri_V2alpha_ContactAddress.city.getter();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    Apple_Parsec_Siri_V2alpha_ContactAddress.city.getter();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v0 setCity:v15];
  }
  uint64_t v16 = Apple_Parsec_Siri_V2alpha_ContactAddress.state.getter();
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0) {
    uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
  }
  if (v19)
  {
    Apple_Parsec_Siri_V2alpha_ContactAddress.state.getter();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v0 setStateCode:v20];
  }
  uint64_t v21 = Apple_Parsec_Siri_V2alpha_ContactAddress.zipCode.getter();
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (v24)
  {
    Apple_Parsec_Siri_V2alpha_ContactAddress.zipCode.getter();
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v0 setPostalCode:v25];
  }
  uint64_t v26 = Apple_Parsec_Siri_V2alpha_ContactAddress.countryCode.getter();
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0) {
    uint64_t v29 = v26 & 0xFFFFFFFFFFFFLL;
  }
  if (v29)
  {
    Apple_Parsec_Siri_V2alpha_ContactAddress.countryCode.getter();
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v0 setCountryCode:v30];
  }
  return v0;
}

void *InformationViewFactory.makeLegacySnippet(layoutSnippet:)(uint8_t *a1)
{
  uint64_t v74 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UIItemType();
  uint64_t v72 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v73 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  uint64_t v3 = *(void *)(v87 - 8);
  uint64_t v4 = __chkstk_darwin(v87);
  uint64_t v85 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v71 - v7;
  __chkstk_darwin(v6);
  uint64_t v75 = (uint64_t)&v71 - v9;
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet?);
  uint64_t v10 = __chkstk_darwin(v78);
  long long v77 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v79 = (uint64_t)&v71 - v13;
  __chkstk_darwin(v12);
  uint64_t v80 = (char *)&v71 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
  __chkstk_darwin(v15 - 8);
  unint64_t v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  __chkstk_darwin(v18 - 8);
  NSString v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Apple_Parsec_Siri_Legacy_LegacySnippet();
  uint64_t v82 = *(void *)(v21 - 8);
  uint64_t v83 = v21;
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v81 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v84 = (char *)&v71 - v24;
  uint64_t v86 = a1;
  uint64_t v25 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.perResultLayoutDetails.getter();
  uint64_t v26 = *(void *)(v25 + 16);
  uint64_t v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails();
  uint64_t v28 = *(void *)(v27 - 8);
  if (v26)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(v17, v25 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80)), v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v17, 0, 1, v27);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v17, 1, 1, v27);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails();
  uint64_t v29 = v3;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v17, 1, v27) == 1)
  {
    outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails?);
    uint64_t v30 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v20, 1, 1, v30);
    uint64_t v31 = v87;
LABEL_7:
    outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
LABEL_8:
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.information);
    uint64_t v36 = *(void (**)(char *, uint8_t *, uint64_t))(v29 + 16);
    v36(v8, v86, v31);
    NSString v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      unint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v87 = swift_slowAlloc();
      v88[0] = v87;
      *(_DWORD *)unint64_t v39 = 136315138;
      uint64_t v86 = v39 + 4;
      v36(v85, (uint8_t *)v8, v31);
      uint64_t v40 = String.init<A>(describing:)();
      uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v31);
      _os_log_impl(&dword_0, v37, v38, "InfoViewFactory invalid legacy snippet %s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v31);
    }

    return 0;
  }
  Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v27);
  uint64_t v32 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet();
  uint64_t v33 = *(void *)(v32 - 8);
  int v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v20, 1, v32);
  uint64_t v31 = v87;
  if (v34 == 1) {
    goto LABEL_7;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v33 + 88))(v20, v32) != enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.legacySnippet(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v32);
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t))(v33 + 96))(v20, v32);
  uint64_t v45 = v82;
  uint64_t v44 = v83;
  uint64_t v46 = v84;
  (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v84, v20, v83);
  uint64_t v47 = (uint64_t)v80;
  Apple_Parsec_Siri_Legacy_LegacySnippet.snippet.getter();
  uint64_t v48 = type metadata accessor for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet();
  uint64_t v49 = *(void *)(v48 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48) == 1)
  {
LABEL_24:
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.information);
    uint64_t v55 = v81;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v81, v46, v44);
    uint64_t v56 = v46;
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = v45;
      char v60 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      *(_DWORD *)char v60 = 136315138;
      uint64_t v87 = (uint64_t)(v60 + 4);
      v88[0] = v61;
      Apple_Parsec_Siri_Legacy_LegacySnippet.snippet.getter();
      uint64_t v62 = String.init<A>(describing:)();
      uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v64 = *(void (**)(char *, uint64_t))(v59 + 8);
      v64(v81, v44);
      _os_log_impl(&dword_0, v57, v58, "InfoViewFactory unsupported legacy snippet %s", v60, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v64(v84, v44);
    }
    else
    {

      Class v65 = *(void (**)(char *, uint64_t))(v45 + 8);
      v65(v55, v44);
      v65(v56, v44);
    }
    outlined destroy of Any?(v47, &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet?);
    return 0;
  }
  uint64_t v50 = v79;
  outlined init with copy of IdentifiedUser?(v47, v79, &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet?);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v49 + 88))(v50, v48) != enum case for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet.generalKnowledgeSnippet(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v48);
    goto LABEL_24;
  }
  NSString v42 = (void *)(*(uint64_t (**)(char *))(*(void *)v76 + 248))(v46);
  if (v42)
  {
    (*(void (**)(uint64_t, uint8_t *, uint64_t))(v29 + 16))(v75, v86, v31);
    id v51 = v42;
    if (AFIsInternalInstall())
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v76 + 104))(v88);
      __swift_project_boxed_opaque_existential_1(v88, v88[3]);
      char v52 = dispatch thunk of PommesServerFallbackDisabling.shouldDisableServerFallbackNL(isDomainDirected:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);
      char v53 = v52 ^ 1;
    }
    else
    {
      char v53 = 0;
    }
    uint64_t v66 = v72;
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAUISash);
    id v67 = SAUISash.init(layoutSnippet:showInternalPommesAttribution:)(v75, v53 & 1);
    [v51 setSash:v67];

    id v68 = v51;
    uint64_t v69 = v73;
    Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.uiItemType.getter();
    Apple_Parsec_Siri_V2alpha_UIItemType.aceValue.getter();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v69, v74);
    NSString v70 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v68 setItemType:v70];

    uint64_t v45 = v82;
    uint64_t v46 = v84;
    uint64_t v50 = v79;
  }
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v83);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v48);
  outlined destroy of Any?(v47, &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet?);
  return v42;
}

id InformationViewFactory.makeGeneralKnowledgeSnippet(legacySnippet:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_Legacy_LegacySnippet();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  char v53 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v49 - v6;
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_Legacy_AppPunchOut();
  uint64_t v50 = *(void *)(v8 - 8);
  id v51 = (uint8_t *)v8;
  __chkstk_darwin(v8);
  uint64_t v49 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet?);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_Legacy_LegacySnippet.snippet.getter();
  uint64_t v17 = type metadata accessor for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, v17) == 1)
  {
    outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet?);
LABEL_16:
    os_log_type_t v38 = v7;
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.information);
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    unint64_t v41 = v7;
    uint64_t v42 = v2;
    v40(v41, a1, v2);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      uint64_t v55 = v52;
      *(_DWORD *)uint64_t v45 = 136315138;
      id v51 = v45 + 4;
      v40(v53, (uint64_t)v38, v42);
      uint64_t v46 = String.init<A>(describing:)();
      uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v38, v42);
      _os_log_impl(&dword_0, v43, v44, "InfoViewFactory invalid general knowledge snippet %s", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v38, v42);
    }

    return 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v18 + 88))(v12, v17) != enum case for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet.generalKnowledgeSnippet(_:))
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v12, v17);
    goto LABEL_16;
  }
  (*(void (**)(char *, uint64_t))(v18 + 96))(v12, v17);
  uint64_t v19 = v14;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  id v20 = [objc_allocWithZone((Class)SAGKSnippet) init];
  [v20 setCategory:(int)Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.category.getter()];

  uint64_t v21 = Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.title.getter();
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (v24)
  {
    id v25 = v20;
    Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.title.getter();
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v25 setTitle:v26];
  }
  uint64_t v27 = Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.subtitle.getter();
  unint64_t v29 = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = HIBYTE(v29) & 0xF;
  if ((v29 & 0x2000000000000000) == 0) {
    uint64_t v30 = v27 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v31 = v52;
  if (v30)
  {
    id v32 = v20;
    Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.subtitle.getter();
    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v32 setSubtitle:v33];
  }
  uint64_t v34 = Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.pods.getter();
  swift_retain();
  specialized Sequence.compactMap<A>(_:)(v34, v31);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAGKPodView);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v20 setPods:isa];

  if (Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.hasAppPunchOut.getter())
  {
    uint64_t v36 = v49;
    Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.appPunchOut.getter();
    NSString v37 = (void *)(*(uint64_t (**)(char *))(*(void *)v31 + 256))(v36);
    (*(void (**)(char *, uint8_t *))(v50 + 8))(v36, v51);
    [v20 setAppPunchOut:v37];
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v13);
  return v20;
}

id InformationViewFactory.makeGeneralKnowledgeAppPunchOut(legacyAppPunchOut:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = &v55[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  uint64_t v7 = &v55[-v6];
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v55[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v12 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
  [v12 setAppAvailableInStorefront:Apple_Parsec_Siri_Legacy_AppPunchOut.appAvailableStorefront.getter() & 1];
  uint64_t v13 = Apple_Parsec_Siri_Legacy_AppPunchOut.appDisplayName.getter();
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (v16)
  {
    Apple_Parsec_Siri_Legacy_AppPunchOut.appDisplayName.getter();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v12 setAppDisplayName:v17];
  }
  Apple_Parsec_Siri_Legacy_AppPunchOut.appIcon.getter();
  uint64_t v18 = (void *)(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 264))(v11);
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  [v12 setAppIcon:v18];

  uint64_t v19 = Apple_Parsec_Siri_Legacy_AppPunchOut.appIconMap.getter();
  swift_retain();
  specialized _NativeDictionary.mapValues<A>(_:)(v19, v1);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAUIImageResource);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v12 setAppIconMap:isa];

  [v12 setAppInstalled:Apple_Parsec_Siri_Legacy_AppPunchOut.appInstalled.getter() & 1];
  uint64_t v21 = Apple_Parsec_Siri_Legacy_AppPunchOut.appStoreUri.getter();
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (v24)
  {
    Apple_Parsec_Siri_Legacy_AppPunchOut.appStoreUri.getter();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v25 = type metadata accessor for URL();
    uint64_t v26 = *(void *)(v25 - 8);
    unint64_t v28 = 0;
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v26 + 48))(v7, 1, v25) != 1)
    {
      URL._bridgeToObjectiveC()(v27);
      unint64_t v28 = v29;
      (*(void (**)(unsigned char *, uint64_t))(v26 + 8))(v7, v25);
    }
    [v12 setAppStoreUri:v28];
  }
  uint64_t v30 = Apple_Parsec_Siri_Legacy_AppPunchOut.bundleID.getter();
  unint64_t v32 = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = HIBYTE(v32) & 0xF;
  if ((v32 & 0x2000000000000000) == 0) {
    uint64_t v33 = v30 & 0xFFFFFFFFFFFFLL;
  }
  if (v33)
  {
    Apple_Parsec_Siri_Legacy_AppPunchOut.bundleID.getter();
    NSString v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v12 setBundleId:v34];
  }
  uint64_t v35 = Apple_Parsec_Siri_Legacy_AppPunchOut.punchOutName.getter();
  unint64_t v37 = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = HIBYTE(v37) & 0xF;
  if ((v37 & 0x2000000000000000) == 0) {
    uint64_t v38 = v35 & 0xFFFFFFFFFFFFLL;
  }
  if (v38)
  {
    Apple_Parsec_Siri_Legacy_AppPunchOut.punchOutName.getter();
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v12 setPunchOutName:v39];
  }
  uint64_t v40 = Apple_Parsec_Siri_Legacy_AppPunchOut.punchOutUri.getter();
  unint64_t v42 = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = HIBYTE(v42) & 0xF;
  if ((v42 & 0x2000000000000000) == 0) {
    uint64_t v43 = v40 & 0xFFFFFFFFFFFFLL;
  }
  if (v43)
  {
    Apple_Parsec_Siri_Legacy_AppPunchOut.punchOutUri.getter();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v44 = type metadata accessor for URL();
    uint64_t v45 = *(void *)(v44 - 8);
    unint64_t v47 = 0;
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v45 + 48))(v5, 1, v44) != 1)
    {
      URL._bridgeToObjectiveC()(v46);
      unint64_t v47 = v48;
      (*(void (**)(unsigned char *, uint64_t))(v45 + 8))(v5, v44);
    }
    [v12 setPunchOutUri:v47];
  }
  uint64_t v49 = Apple_Parsec_Siri_Legacy_AppPunchOut.subtitle.getter();
  unint64_t v51 = v50;
  swift_bridgeObjectRelease();
  uint64_t v52 = HIBYTE(v51) & 0xF;
  if ((v51 & 0x2000000000000000) == 0) {
    uint64_t v52 = v49 & 0xFFFFFFFFFFFFLL;
  }
  if (v52)
  {
    Apple_Parsec_Siri_Legacy_AppPunchOut.subtitle.getter();
    NSString v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v12 setSubtitle:v53];
  }
  return v12;
}

id InformationViewFactory.makeImageResource(legacyImageResource:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v3 = [objc_allocWithZone((Class)SAUIImageResource) init];
  uint64_t v4 = Apple_Parsec_Siri_Legacy_ImageResource.imageData.getter();
  unint64_t v6 = v5;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v4, v6);
  [v3 setImageData:isa];

  Apple_Parsec_Siri_Legacy_ImageResource.pixelHeight.getter();
  objc_msgSend(v3, "setPixelHeight:");
  Apple_Parsec_Siri_Legacy_ImageResource.pixelWidth.getter();
  objc_msgSend(v3, "setPixelWidth:");
  Apple_Parsec_Siri_Legacy_ImageResource.resourceURL.getter();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v2, 1, v8) != 1)
  {
    URL._bridgeToObjectiveC()(v10);
    uint64_t v11 = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v2, v8);
  }
  [v3 setResourceUrl:v11];

  Apple_Parsec_Siri_Legacy_ImageResource.scaleFactor.getter();
  objc_msgSend(v3, "setScaleFactor:");
  Apple_Parsec_Siri_Legacy_ImageResource.urlFormatString.getter();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 setUrlFormatString:v13];

  Apple_Parsec_Siri_Legacy_ImageResource.userAgent.getter();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 setUserAgent:v14];

  return v3;
}

id InformationViewFactory.makeGeneralKnowledgePodViews(podView:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_Legacy_PodView();
  uint64_t v74 = *(void *)(v2 - 8);
  uint64_t v75 = v2;
  __chkstk_darwin(v2);
  uint64_t v76 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImagePod();
  uint64_t v72 = *(uint8_t **)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v64 - v8;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource();
  uint64_t v65 = *(void *)(v10 - 8);
  uint64_t v66 = v10;
  __chkstk_darwin(v10);
  id v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_Legacy_SummaryPod();
  uint64_t v70 = *(void *)(v13 - 8);
  uint64_t v71 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  id v68 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v69 = (char *)&v64 - v16;
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod?);
  uint64_t v17 = __chkstk_darwin(v73);
  uint64_t v18 = __chkstk_darwin(v17);
  id v20 = (char *)&v64 - v19;
  __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v64 - v21;
  uint64_t v23 = a1;
  Apple_Parsec_Siri_Legacy_PodView.pod.getter();
  uint64_t v24 = type metadata accessor for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  long long v77 = v22;
  if (v26(v22, 1, v24) != 1)
  {
    outlined init with copy of IdentifiedUser?((uint64_t)v77, (uint64_t)v20, &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod?);
    int v36 = (*(uint64_t (**)(char *, uint64_t))(v25 + 88))(v20, v24);
    if (v36 == enum case for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod.imagePod(_:))
    {
      (*(void (**)(char *, uint64_t))(v25 + 96))(v20, v24);
      unint64_t v37 = v72;
      (*((void (**)(char *, char *, uint64_t))v72 + 4))(v9, v20, v4);
      type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAGKImagePod);
      (*((void (**)(char *, char *, uint64_t))v37 + 2))(v7, v9, v4);
      id v38 = SAGKImagePod.init(imagePod:)((uint64_t)v7);
      (*((void (**)(char *, uint64_t))v37 + 1))(v9, v4);
      goto LABEL_10;
    }
    if (v36 == enum case for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod.summaryPod(_:))
    {
      (*(void (**)(char *, uint64_t))(v25 + 96))(v20, v24);
      uint64_t v40 = v69;
      uint64_t v41 = v70;
      uint64_t v42 = v71;
      (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v69, v20, v71);
      if (Apple_Parsec_Siri_Legacy_SummaryPod.hasImageResource.getter())
      {
        Apple_Parsec_Siri_Legacy_SummaryPod.imageResource.getter();
        uint64_t v43 = (void *)(*(uint64_t (**)(char *))(*(void *)v67 + 264))(v12);
        (*(void (**)(char *, uint64_t))(v65 + 8))(v12, v66);
        uint64_t v75 = type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAGKSummaryPod);
        uint64_t v44 = v68;
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v68, v40, v42);
        uint64_t v76 = v43;
        uint64_t v45 = Apple_Parsec_Siri_Legacy_SummaryPod.title.getter();
        unint64_t v47 = v46;
        uint64_t v48 = Apple_Parsec_Siri_Legacy_SummaryPod.text.getter();
        uint64_t v49 = v40;
        unint64_t v51 = v50;
        uint64_t v52 = Apple_Parsec_Siri_Legacy_SummaryPod.caption.getter();
        id v38 = SAGKSummaryPod.init(title:text:caption:imageResource:)(v45, v47, v48, v51, v52, v53, v43);
        uint64_t v54 = *(void (**)(char *, uint64_t))(v41 + 8);
        v54(v44, v42);
      }
      else
      {
        type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAGKSummaryPod);
        uint64_t v55 = v68;
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v68, v40, v42);
        uint64_t v56 = Apple_Parsec_Siri_Legacy_SummaryPod.title.getter();
        unint64_t v58 = v57;
        uint64_t v59 = Apple_Parsec_Siri_Legacy_SummaryPod.text.getter();
        unint64_t v61 = v60;
        uint64_t v62 = Apple_Parsec_Siri_Legacy_SummaryPod.caption.getter();
        id v38 = SAGKSummaryPod.init(title:text:caption:imageResource:)(v56, v58, v59, v61, v62, v63, 0);
        uint64_t v49 = v40;
        uint64_t v54 = *(void (**)(char *, uint64_t))(v41 + 8);
        v54(v55, v42);
      }
      v54(v49, v42);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v24);
  }
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.information);
  uint64_t v28 = v74;
  uint64_t v29 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v76, v23, v75);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    unint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v79 = swift_slowAlloc();
    *(_DWORD *)unint64_t v32 = 136315138;
    uint64_t v33 = v76;
    uint64_t v72 = v32 + 4;
    Apple_Parsec_Siri_Legacy_PodView.pod.getter();
    uint64_t v34 = String.init<A>(describing:)();
    uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v29);
    _os_log_impl(&dword_0, v30, v31, "InfoViewFactory unhandled General Knowledge Pod: %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v76, v29);
  }

  id v38 = 0;
LABEL_10:
  outlined destroy of Any?((uint64_t)v77, &demangling cache variable for type metadata for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod?);
  return v38;
}

void *SAGKSummaryPod.init(summaryPod:imageResource:)(uint64_t a1, void *a2)
{
  uint64_t v4 = Apple_Parsec_Siri_Legacy_SummaryPod.title.getter();
  unint64_t v6 = v5;
  uint64_t v7 = Apple_Parsec_Siri_Legacy_SummaryPod.text.getter();
  unint64_t v9 = v8;
  uint64_t v10 = Apple_Parsec_Siri_Legacy_SummaryPod.caption.getter();
  id v12 = SAGKSummaryPod.init(title:text:caption:imageResource:)(v4, v6, v7, v9, v10, v11, a2);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_Legacy_SummaryPod();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
  return v12;
}

id SAGKImagePod.init(imagePod:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_Legacy_PunchOut();
  __chkstk_darwin(v2 - 8);
  id v38 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource();
  __chkstk_darwin(v4 - 8);
  unint64_t v37 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageLinkedAnswer();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v12 = (char *)v34 - v11;
  id v13 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  uint64_t v14 = Apple_Parsec_Siri_Legacy_ImagePod.images.getter();
  int64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    id v35 = v13;
    uint64_t v36 = a1;
    uint64_t v44 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v16 = v7 + 16;
    uint64_t v18 = *(unsigned __int8 *)(v16 + 64);
    v34[1] = v14;
    uint64_t v19 = v14 + ((v18 + 32) & ~v18);
    id v20 = (void (**)(char *, uint64_t))(v16 - 8);
    uint64_t v39 = *(void *)(v16 + 56);
    uint64_t v40 = v17;
    uint64_t v41 = v16;
    do
    {
      uint64_t v21 = v40;
      v40(v12, (char *)v19, v6);
      v21(v10, v12, v6);
      id v22 = [objc_allocWithZone((Class)SAGKImageLinkedAnswer) init];
      if (Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.hasImageResource.getter())
      {
        type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAUIImageResource);
        uint64_t v23 = (uint64_t)v37;
        Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.imageResource.getter();
        id v24 = SAUIImageResource.init(imageResource:)(v23);
        [v22 setImageResource:v24];
      }
      id v25 = v22;
      if (Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.hasPunchOut.getter())
      {
        type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAUIAppPunchOut);
        uint64_t v26 = (uint64_t)v38;
        Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.punchOut.getter();
        id v25 = SAUIAppPunchOut.init(punchOut:)(v26);
        [v22 setPunchOut:v25];
      }
      uint64_t v27 = *v20;
      (*v20)(v10, v6);
      uint64_t v43 = type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAGKImageLinkedAnswer);
      *(void *)&long long v42 = v22;
      v27(v12, v6);
      uint64_t v28 = v44;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1);
        uint64_t v28 = v44;
      }
      unint64_t v30 = v28[2];
      unint64_t v29 = v28[3];
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        uint64_t v28 = v44;
      }
      v28[2] = v30 + 1;
      outlined init with take of Any(&v42, &v28[4 * v30 + 4]);
      v19 += v39;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    id v13 = v35;
    a1 = v36;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setImages:isa];

  uint64_t v32 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImagePod();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(a1, v32);
  return v13;
}

uint64_t InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:)(uint64_t a1)
{
  swift_retain();
  specialized Sequence.compactMap<A>(_:)(a1, v1);
  swift_release();
  type metadata accessor for Searchfoundation_Card();
  lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(&lazy protocol witness table cache variable for type Searchfoundation_Card and conformance Searchfoundation_Card, (void (*)(uint64_t))&type metadata accessor for Searchfoundation_Card);
  static Message.with(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = a3;
  uint64_t v35 = a2;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v36 = *(void *)(v8 - 8);
  unint64_t v37 = (uint8_t *)v8;
  __chkstk_darwin(v8);
  uint64_t v33 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet();
  uint64_t v13 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  int64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter();
  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16) == 1)
  {
    outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet?);
  }
  else
  {
    if ((*(unsigned int (**)(char *, uint64_t))(v17 + 88))(v12, v16) == enum case for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet.casinoSnippet(_:))
    {
      (*(void (**)(char *, uint64_t))(v17 + 96))(v12, v16);
      uint64_t v18 = v13;
      uint64_t v19 = v34;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v34);
      type metadata accessor for PerformanceUtil();
      uint64_t v20 = static PerformanceUtil.shared.getter();
      __chkstk_darwin(v20);
      uint64_t v21 = v33;
      Date.init()();
      os_log_type_t v31 = &v29;
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_Card?);
      unint64_t v30 = partial apply for closure #1 in closure #1 in InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:);
      char v29 = 2;
      dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
      swift_release();
      (*(void (**)(char *, uint8_t *))(v36 + 8))(v21, v37);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v15, v19);
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v16);
  }
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.information);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  id v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315138;
    unint64_t v37 = v26 + 4;
    lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails and conformance Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails);
    Swift::String v27 = Message.textFormatString()();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27._countAndFlagsBits, (unint64_t)v27._object, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl(&dword_0, v24, v25, "InfoViewFactory non casino snippet %s", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  uint64_t v28 = type metadata accessor for Searchfoundation_Card();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v38, 1, 1, v28);
}

void closure #2 in InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v86 = a3;
  uint64_t v92 = a1;
  uint64_t v4 = type metadata accessor for Searchfoundation_Image();
  __chkstk_darwin(v4 - 8);
  uint64_t v85 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Searchfoundation_Color();
  __chkstk_darwin(v6 - 8);
  uint64_t v83 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_Card?);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v88 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v87 = (char *)&v80 - v11;
  uint64_t v12 = type metadata accessor for Searchfoundation_Card();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v100 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v84 = (char *)&v80 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v96 = (char *)&v80 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v99 = (char *)&v80 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v82 = (char *)&v80 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v95 = (char *)&v80 - v25;
  __chkstk_darwin(v24);
  Swift::String v27 = (char *)&v80 - v26;
  uint64_t v28 = type metadata accessor for Searchfoundation_CardSource();
  unint64_t v94 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  unint64_t v93 = (char *)&v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)(a2 + 16);
  os_log_type_t v31 = _swiftEmptyArrayStorage;
  uint64_t v90 = v13;
  uint64_t v91 = a2;
  uint64_t v89 = v30;
  if (v30)
  {
    uint64_t v81 = v28;
    uint64_t v33 = *(char **)(v13 + 16);
    uint64_t v32 = v13 + 16;
    uint64_t v34 = a2 + ((*(unsigned __int8 *)(v32 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 64));
    unint64_t v97 = *(char **)(v32 + 56);
    uint64_t v98 = (void (*)(char *, uint64_t, uint64_t))v33;
    uint64_t v101 = v32;
    swift_bridgeObjectRetain();
    uint64_t v35 = _swiftEmptyArrayStorage;
    uint64_t v36 = v30;
    do
    {
      v98(v27, v34, v12);
      uint64_t v37 = Searchfoundation_Card.cardSections.getter();
      (*(void (**)(char *, uint64_t))(v32 - 8))(v27, v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
      }
      unint64_t v39 = v35[2];
      unint64_t v38 = v35[3];
      if (v39 >= v38 >> 1) {
        uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v35);
      }
      v35[2] = v39 + 1;
      v35[v39 + 4] = v37;
      v34 += (uint64_t)v97;
      --v36;
    }
    while (v36);
    a2 = v91;
    swift_bridgeObjectRelease();
    uint64_t v30 = v89;
    uint64_t v13 = v90;
    os_log_type_t v31 = _swiftEmptyArrayStorage;
    uint64_t v28 = v81;
  }
  else
  {
    uint64_t v35 = _swiftEmptyArrayStorage;
  }
  specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v35);
  swift_bridgeObjectRelease();
  Searchfoundation_Card.cardSections.setter();
  (*(void (**)(char *, void, uint64_t))(v94 + 104))(v93, enum case for Searchfoundation_CardSource.parsec(_:), v28);
  Searchfoundation_Card.source.setter();
  uint64_t v102 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  uint64_t v101 = v12;
  if (v30)
  {
    long long v42 = *(char **)(v13 + 16);
    uint64_t v41 = (char *)(v13 + 16);
    uint64_t v40 = v42;
    uint64_t v43 = *((void *)v41 + 7);
    unint64_t v94 = (v41[64] + 32) & ~(unint64_t)v41[64];
    uint64_t v44 = a2 + v94;
    unint64_t v93 = v41 - 8;
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v41 + 16);
    unint64_t v46 = v95;
    unint64_t v97 = v42;
    uint64_t v98 = (void (*)(char *, uint64_t, uint64_t))v41;
    ((void (*)(char *, unint64_t, uint64_t))v42)(v95, a2 + v94, v12);
    while (1)
    {
      if (Searchfoundation_Card.hasBackgroundColor.getter())
      {
        unint64_t v47 = *v45;
        (*v45)(v99, v46, v12);
        uint64_t v48 = v102;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1);
          uint64_t v48 = v102;
        }
        unint64_t v50 = v48[2];
        unint64_t v49 = v48[3];
        if (v50 >= v49 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
          uint64_t v48 = v102;
        }
        _OWORD v48[2] = v50 + 1;
        unint64_t v51 = (unint64_t)v48 + v94 + v50 * v43;
        uint64_t v12 = v101;
        v47((char *)v51, v99, v101);
        uint64_t v102 = v48;
        unint64_t v46 = v95;
        uint64_t v40 = v97;
      }
      else
      {
        (*(void (**)(char *, uint64_t))v93)(v46, v12);
      }
      v44 += v43;
      if (!--v30) {
        break;
      }
      ((void (*)(char *, uint64_t, uint64_t))v40)(v46, v44, v12);
    }
    uint64_t v52 = v102;
    uint64_t v13 = v90;
    a2 = v91;
    uint64_t v30 = v89;
    os_log_type_t v31 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v52 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  unint64_t v53 = v96;
  uint64_t v54 = (uint64_t)v87;
  if (v52[2])
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v87, (unint64_t)v52+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v12);
    uint64_t v55 = *(char **)(v13 + 56);
    uint64_t v56 = (char *)v54;
    uint64_t v57 = 0;
  }
  else
  {
    uint64_t v55 = *(char **)(v13 + 56);
    uint64_t v56 = v87;
    uint64_t v57 = 1;
  }
  unint64_t v95 = v55;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v55)(v56, v57, 1, v12);
  swift_release();
  unint64_t v93 = *(char **)(v13 + 48);
  unint64_t v94 = v13 + 48;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v93)(v54, 1, v12) == 1)
  {
    outlined destroy of Any?(v54, &demangling cache variable for type metadata for Searchfoundation_Card?);
  }
  else
  {
    unint64_t v58 = v82;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v82, v54, v12);
    Searchfoundation_Card.backgroundColor.getter();
    Searchfoundation_Card.backgroundColor.setter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v58, v12);
  }
  uint64_t v59 = (uint64_t)v88;
  uint64_t v102 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  if (v30)
  {
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    unint64_t v60 = (char *)(v13 + 16);
    unint64_t v61 = v62;
    uint64_t v63 = *((void *)v60 + 7);
    uint64_t v98 = (void (*)(char *, uint64_t, uint64_t))((v60[64] + 32) & ~(unint64_t)v60[64]);
    uint64_t v99 = v60;
    uint64_t v64 = (char *)v98 + a2;
    unint64_t v97 = v60 - 8;
    uint64_t v65 = v30;
    uint64_t v66 = (void (**)(char *, char *, uint64_t))(v60 + 16);
    v62(v53, v64, v12);
    while (1)
    {
      if (Searchfoundation_Card.hasBackgroundImage.getter())
      {
        uint64_t v67 = *v66;
        (*v66)(v100, v53, v12);
        id v68 = v102;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68[2] + 1, 1);
          id v68 = v102;
        }
        unint64_t v70 = v68[2];
        unint64_t v69 = v68[3];
        if (v70 >= v69 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
          id v68 = v102;
        }
        v68[2] = v70 + 1;
        uint64_t v71 = (char *)v98 + (void)v68 + v70 * v63;
        uint64_t v12 = v101;
        v67(v71, v100, v101);
        uint64_t v102 = v68;
        unint64_t v53 = v96;
      }
      else
      {
        (*(void (**)(char *, uint64_t))v97)(v53, v12);
      }
      v64 += v63;
      if (!--v65) {
        break;
      }
      v61(v53, v64, v12);
    }
    os_log_type_t v31 = v102;
    uint64_t v13 = v90;
    uint64_t v59 = (uint64_t)v88;
    uint64_t v30 = v89;
  }
  swift_bridgeObjectRelease();
  if (v31[2])
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16))(v59, (unint64_t)v31+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v12);
    uint64_t v72 = 0;
  }
  else
  {
    uint64_t v72 = 1;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v95)(v59, v72, 1, v12);
  swift_release();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v93)(v59, 1, v12) == 1)
  {
    outlined destroy of Any?(v59, &demangling cache variable for type metadata for Searchfoundation_Card?);
    uint64_t v73 = v86;
    if (!v86) {
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v74 = v84;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v84, v59, v12);
    Searchfoundation_Card.backgroundImage.getter();
    Searchfoundation_Card.backgroundImage.setter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
    uint64_t v73 = v86;
    if (!v86)
    {
LABEL_46:
      if (v30 != 1)
      {
LABEL_56:
        Searchfoundation_Card.fbr.setter();
        return;
      }
LABEL_47:
      Searchfoundation_Card.fbr.getter();
      goto LABEL_56;
    }
  }
  id v75 = v73;
  if ((PommesRenderOptions.isPhoneCallActive.getter() & 1) == 0)
  {

    if (v30 != 1) {
      goto LABEL_56;
    }
    goto LABEL_47;
  }
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v76 = type metadata accessor for Logger();
  __swift_project_value_buffer(v76, (uint64_t)static Logger.information);
  long long v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v77, v78))
  {
    uint64_t v79 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v79 = 0;
    _os_log_impl(&dword_0, v77, v78, "Skipping FBR; phone call is active", v79, 2u);
    swift_slowDealloc();
  }
}

uint64_t InformationViewFactory.makeCard(casinoSnippet:renderOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v55 = a3;
  uint64_t v5 = type metadata accessor for String.Encoding();
  uint64_t v52 = *(uint8_t **)(v5 - 8);
  uint64_t v53 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for Google_Protobuf_Any();
  __chkstk_darwin(v9 - 8);
  uint64_t v56 = type metadata accessor for Searchfoundation_Card();
  uint64_t v54 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v11 = (char *)v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (Apple_Parsec_Siri_V2alpha_CasinoSnippet.hasCardData.getter())
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.information);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_0, v18, v19, "One card was made with casinoSnippet.", v20, 2u);
      swift_slowDealloc();
    }

    Apple_Parsec_Siri_V2alpha_CasinoSnippet.cardData.getter();
    uint64_t v58 = 0;
    memset(v57, 0, sizeof(v57));
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(&lazy protocol witness table cache variable for type Searchfoundation_Card and conformance Searchfoundation_Card, (void (*)(uint64_t))&type metadata accessor for Searchfoundation_Card);
    uint64_t v21 = v56;
    Message.init(unpackingAny:extensions:options:)();
    if (!a2 || (PommesRenderOptions.isSquawkResponse.getter() & 1) == 0) {
      goto LABEL_24;
    }
    v51[1] = v17;
    Searchfoundation_Card.intentMessageName.setter();
    Searchfoundation_Card.intentResponseMessageName.setter();
    static String.Encoding.utf8.getter();
    uint64_t v30 = String.data(using:allowLossyConversion:)();
    unint64_t v32 = v31;
    uint64_t v33 = (void (*)(char *, uint64_t))*((void *)v52 + 1);
    v33(v7, v53);
    if (v32 >> 60 != 15)
    {
      static String.Encoding.utf8.getter();
      String.data(using:allowLossyConversion:)();
      unint64_t v35 = v34;
      v33(v7, v53);
      if (v35 >> 60 != 15)
      {
        outlined copy of Data._Representation(v30, v32);
        Searchfoundation_Card.intentMessageData.setter();
        Searchfoundation_Card.intentResponseMessageData.setter();
        outlined consume of Data?(v30, v32);
LABEL_24:
        uint64_t v29 = v54;
        uint64_t v28 = v55;
        (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v55, v11, v21);
        uint64_t v27 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v28, v27, 1, v21);
      }
      outlined consume of Data?(v30, v32);
    }
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v38 = 67109120;
      uint64_t v52 = v38 + 4;
      static String.Encoding.utf8.getter();
      uint64_t v39 = String.data(using:allowLossyConversion:)();
      unint64_t v41 = v40;
      v33(v7, v53);
      outlined consume of Data?(v39, v41);
      unint64_t v42 = v41 >> 60;
      uint64_t v21 = v56;
      LODWORD(v57[0]) = v42 < 0xF;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v36, v37, "intentMessageData is non-nil? %{BOOL}d", v38, 8u);
      swift_slowDealloc();
    }

    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 67109120;
      uint64_t v52 = v45 + 4;
      static String.Encoding.utf8.getter();
      uint64_t v46 = String.data(using:allowLossyConversion:)();
      unint64_t v48 = v47;
      v33(v7, v53);
      outlined consume of Data?(v46, v48);
      unint64_t v49 = v48 >> 60;
      uint64_t v21 = v56;
      LODWORD(v57[0]) = v49 < 0xF;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v43, v44, "intentResponseMessageData is non-nil? %{BOOL}d", v45, 8u);
      swift_slowDealloc();
    }

    goto LABEL_24;
  }
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.information);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(void *)&v57[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315138;
    lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_CasinoSnippet and conformance Apple_Parsec_Siri_V2alpha_CasinoSnippet, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet);
    Swift::String v26 = Message.textFormatString()();
    uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26._countAndFlagsBits, (unint64_t)v26._object, (uint64_t *)v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    _os_log_impl(&dword_0, v23, v24, "InfoViewFactory casinoSnippet has no card data %s", v25, 0xCu);
    uint64_t v27 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);

    uint64_t v27 = 1;
  }
  uint64_t v28 = v55;
  uint64_t v21 = v56;
  uint64_t v29 = v54;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v28, v27, 1, v21);
}

uint64_t InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)(void *a1, uint64_t a2, char *a3)
{
  unint64_t v35 = a3;
  id v31 = a1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v33 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_Card?);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Searchfoundation_Card();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  uint64_t v37 = v34;
  uint64_t v38 = a2;
  uint64_t v39 = v35;
  Date.init()();
  uint64_t v28 = &v36;
  uint64_t v29 = (void *)v10;
  uint64_t v27 = partial apply for closure #1 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:);
  char v26 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v9, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1) {
    return outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for Searchfoundation_Card?);
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  uint64_t v19 = *(void *)(Searchfoundation_Card.cardSections.getter() + 16);
  swift_bridgeObjectRelease();
  if (!v19) {
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  uint64_t v20 = static PerformanceUtil.shared.getter();
  __chkstk_darwin(v20);
  unint64_t v35 = v16;
  uint64_t v21 = v33;
  Date.init()();
  uint64_t v28 = &v26;
  uint64_t v29 = &type metadata for Data;
  uint64_t v27 = partial apply for closure #2 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:);
  char v26 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  v17(v21, v4);
  swift_release();
  uint64_t v22 = v40;
  unint64_t v23 = v41;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v22, v23);
  [v31 setCompactSizeCardData:isa];
  uint64_t v25 = v35;

  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v25, v13);
}

uint64_t closure #1 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.compactSnippet.getter();
  (*(void (**)(char *, uint64_t))(*(void *)a1 + 288))(v8, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id InformationViewFactory.makeCompactSnippet(layoutSnippet:renderOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a2;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  uint64_t v34 = *(void *)(v3 - 8);
  uint64_t v35 = v3;
  __chkstk_darwin(v3);
  uint64_t v33 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  uint64_t v38 = a1;
  Date.init()();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SAClientBoundCommand]);
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  id v16 = [objc_allocWithZone((Class)SACardSnippet) init];
  Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.compactSnippet.getter();
  Apple_Parsec_Siri_V2alpha_CasinoSnippet.responseViewID.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v17 = a1;
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v16 setResponseViewId:v18];

  id v19 = v16;
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v20 = v7;
  uint64_t v21 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v32);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 setAceId:v22];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v21, a1, v35);
  id v23 = v19;
  if (AFIsInternalInstall())
  {
    uint64_t v24 = v36;
    (*(void (**)(void *__return_ptr))(*(void *)v36 + 104))(v39);
    __swift_project_boxed_opaque_existential_1(v39, v39[3]);
    char v25 = dispatch thunk of PommesServerFallbackDisabling.shouldDisableServerFallbackNL(isDomainDirected:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    char v26 = v25 ^ 1;
  }
  else
  {
    char v26 = 0;
    uint64_t v24 = v36;
  }
  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAUISash);
  id v27 = SAUISash.init(layoutSnippet:showInternalPommesAttribution:)(v21, v26 & 1);
  [v23 setSash:v27];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v23 setReferencedCommands:isa];

  (*(void (**)(id, uint64_t, uint64_t))(*(void *)v24 + 296))(v23, v17, v37);
  return v23;
}

id InformationViewFactory.makeCasinoSnippet(layoutSnippet:renderOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v87 = a2;
  uint64_t v90 = a1;
  uint64_t v85 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UIItemType();
  uint64_t v84 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v79 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  uint64_t v73 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  id v75 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for UUID();
  uint64_t v71 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  unint64_t v70 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet();
  uint64_t v86 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v88 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails();
  uint64_t v94 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v64 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Searchfoundation_Card();
  uint64_t v77 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  id v68 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v16 = (char *)&v63 - v15;
  uint64_t v17 = type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  uint64_t v100 = a1;
  Date.init()();
  unint64_t v61 = &v99;
  uint64_t v62 = (void *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SAClientBoundCommand]);
  unint64_t v60 = partial apply for closure #1 in InformationViewFactory.makeCompactSnippet(layoutSnippet:renderOptions:);
  char v59 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  NSString v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v16, v11);
  uint64_t v69 = v101[8];
  uint64_t v67 = v17;
  static PerformanceUtil.shared.getter();
  uint64_t v96 = v89;
  uint64_t v97 = v90;
  uint64_t v98 = v87;
  Date.init()();
  uint64_t v78 = v8;
  unint64_t v61 = &v95;
  uint64_t v62 = (void *)v8;
  unint64_t v60 = partial apply for closure #2 in InformationViewFactory.makeCasinoSnippet(layoutSnippet:renderOptions:);
  char v59 = 2;
  uint64_t v76 = v10;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  uint64_t v66 = 0;
  swift_release();
  uint64_t v83 = v11;
  uint64_t v82 = v12 + 8;
  uint64_t v80 = v18;
  v18(v16, v11);
  id v81 = [objc_allocWithZone((Class)SACardSnippet) init];
  uint64_t v19 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.perResultLayoutDetails.getter();
  uint64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    uint64_t v92 = *(void (**)(char *, unint64_t, uint64_t))(v94 + 16);
    unint64_t v21 = v19 + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
    uint64_t v91 = *(void *)(v94 + 72);
    NSString v22 = (void (**)(char *, uint64_t))(v86 + 8);
    v94 += 16;
    id v23 = (void (**)(char *, uint64_t))(v94 - 8);
    uint64_t v63 = v19;
    swift_bridgeObjectRetain();
    uint64_t v24 = v88;
    uint64_t v25 = v65;
    char v26 = v64;
    do
    {
      v92(v26, v21, v25);
      Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.casinoSnippet.getter();
      Apple_Parsec_Siri_V2alpha_CasinoSnippet.responseViewID.getter();
      (*v22)(v24, v93);
      (*v23)(v26, v25);
      swift_bridgeObjectRelease();
      v21 += v91;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease_n();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v28 = v81;
    [v81 setResponseViewId:v27];

    uint64_t v29 = v85;
    uint64_t v30 = v84;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = v85;
    uint64_t v30 = v84;
    id v28 = v81;
  }
  uint64_t v31 = v90;
  char v32 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.hasCompactSnippet.getter();
  uint64_t v33 = v76;
  uint64_t v34 = (uint64_t)v75;
  uint64_t v35 = v68;
  uint64_t v36 = v93;
  uint64_t v37 = v88;
  if (v32)
  {
    Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.compactSnippet.getter();
    Apple_Parsec_Siri_V2alpha_CasinoSnippet.responseViewID.getter();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v37, v36);
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v28 setResponseViewId:v38];
  }
  uint64_t v39 = static PerformanceUtil.shared.getter();
  __chkstk_darwin(v39);
  Date.init()();
  unint64_t v61 = &v59;
  uint64_t v62 = &type metadata for Data;
  unint64_t v60 = partial apply for closure #4 in InformationViewFactory.makeCasinoSnippet(layoutSnippet:renderOptions:);
  char v59 = 2;
  uint64_t v40 = v66;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  if (v40)
  {
    v80(v35, v83);
    swift_release();
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.information);
    Class isa = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(isa, v43))
    {
      os_log_type_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v44 = 0;
      _os_log_impl(&dword_0, isa, v43, "Unable to serialize card for snippet. Results may appear incomplete.", v44, 2u);
      swift_slowDealloc();
    }
    swift_errorRelease();
  }
  else
  {
    v80(v35, v83);
    swift_release();
    uint64_t v45 = v101[5];
    unint64_t v46 = v101[6];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v45, v46);
    [v28 setCardData:isa];
  }

  id v47 = v28;
  unint64_t v48 = v70;
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v48, v72);
  NSString v49 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v47 setAceId:v49];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v34, v31, v74);
  id v50 = v47;
  if (AFIsInternalInstall())
  {
    (*(void (**)(void *__return_ptr))(*(void *)v89 + 104))(v101);
    __swift_project_boxed_opaque_existential_1(v101, v101[3]);
    char v51 = dispatch thunk of PommesServerFallbackDisabling.shouldDisableServerFallbackNL(isDomainDirected:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
    char v52 = v51 ^ 1;
  }
  else
  {
    char v52 = 0;
  }
  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAUISash);
  id v53 = SAUISash.init(layoutSnippet:showInternalPommesAttribution:)(v34, v52 & 1);
  [v50 setSash:v53];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v50 setReferencedCommands:v54];

  if (Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.hasCompactSnippet.getter()) {
    (*(void (**)(id, uint64_t, uint64_t))(*(void *)v89 + 296))(v50, v31, v87);
  }
  id v55 = v50;
  uint64_t v56 = v79;
  Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.uiItemType.getter();
  Apple_Parsec_Siri_V2alpha_UIItemType.aceValue.getter();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v56, v29);
  NSString v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v55 setItemType:v57];

  (*(void (**)(char *, uint64_t))(v77 + 8))(v33, v78);
  return v55;
}

uint64_t closure #2 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Searchfoundation_Card();
  lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(&lazy protocol witness table cache variable for type Searchfoundation_Card and conformance Searchfoundation_Card, (void (*)(uint64_t))&type metadata accessor for Searchfoundation_Card);
  uint64_t result = Message.serializedData(partial:)();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
  }
  return result;
}

uint64_t InformationViewFactory.makeUtteranceView(dialog:layouts:)(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = a2;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v58 = (char *)v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  NSString v57 = (char *)v51 - v7;
  uint64_t v8 = type metadata accessor for ResponseMode();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)v51 - v14;
  __chkstk_darwin(v13);
  char v59 = (char *)v51 - v16;
  id v17 = [objc_allocWithZone((Class)DialogElement) init];
  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.print.getter();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 setFullPrint:v18];

  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.print.getter();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 setSupportingPrint:v19];

  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.redactedPrint.getter();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 setRedactedFullPrint:v20];

  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.redactedPrint.getter();
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 setRedactedSupportingPrint:v21];

  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.speak.getter();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 setFullSpeak:v22];

  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.speak.getter();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 setSupportingSpeak:v23];

  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.redactedSpeak.getter();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 setRedactedFullSpeak:v24];

  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.redactedSpeak.getter();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 setRedactedSupportingSpeak:v25];

  [v17 setSpokenOnly:Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.spokenOnly.getter() & 1];
  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 setId:v26];

  char v27 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.isApprovedForGrading.getter();
  id v55 = v17;
  [v17 setIsApprovedForGrading:v27 & 1];
  type metadata accessor for SiriEnvironment();
  if (static SiriEnvironment.forCurrentTask.getter())
  {
    SiriEnvironment.currentRequest.getter();
    swift_release();
    CurrentRequest.responseMode.getter();
    swift_release();
    uint64_t v28 = v9;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v59, v15, v8);
  }
  else
  {
    uint64_t v28 = v9;
    static ResponseMode.displayForward.getter();
  }
  uint64_t v29 = v57;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.information);
  uint64_t v31 = v28;
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v12, v59, v8);
  char v32 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v32(v29, a1, v3);
  v32(v58, a1, v3);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  int v35 = v34;
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    uint64_t v61 = v54;
    *(_DWORD *)uint64_t v36 = 136315650;
    os_log_t v53 = v33;
    lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, (void (*)(uint64_t))&type metadata accessor for ResponseMode);
    int v52 = v35;
    uint64_t v37 = v8;
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v40 = v58;
    v51[0] = *(void *)(v31 + 8);
    v51[1] = (v31 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    ((void (*)(char *, uint64_t))v51[0])(v12, v37);
    *(_WORD *)(v36 + 12) = 1024;
    uint64_t v41 = v57;
    int v42 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.listenAfterSpeaking.getter() & 1;
    os_log_type_t v43 = *(void (**)(char *, uint64_t))(v4 + 8);
    v43(v41, v3);
    LODWORD(v60) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 18) = 1024;
    LODWORD(v41) = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.spokenOnly.getter() & 1;
    v43(v40, v3);
    os_log_type_t v44 = (void (*)(char *, uint64_t))v51[0];
    LODWORD(v60) = v41;
    uint64_t v8 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v45 = v53;
    _os_log_impl(&dword_0, v53, (os_log_type_t)v52, "Calling makeUtteranceView with responseMode: %s, listenAfterSpeaking: %{BOOL}d, spokenOnly: %{BOOL}d", (uint8_t *)v36, 0x18u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v46 = *(void (**)(char *, uint64_t))(v4 + 8);
    v46(v58, v3);
    v46(v29, v3);
    os_log_type_t v44 = *(void (**)(char *, uint64_t))(v31 + 8);
    v44(v12, v8);
  }
  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.listenAfterSpeaking.getter();
  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.forcePrintDialog.getter();
  Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catCategory.getter();
  id v47 = v55;
  unint64_t v48 = v59;
  uint64_t v49 = static AceOutputHelper.makeUtteranceView(for:canUseServerTTS:listenAfterSpeaking:printSupportingDialogInDisplayModes:forcePrintDialog:containsVisual:responseMode:dialogCategory:)();

  swift_bridgeObjectRelease();
  v44(v48, v8);
  return v49;
}

uint64_t InformationViewFactory.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return v0;
}

uint64_t InformationViewFactory.__deallocating_deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);

  return _swift_deallocClassInstance(v0, 104, 7);
}

id SAUISash.init(appName:appID:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    id v3 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 setTitle:v4];

    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 setApplicationBundleIdentifier:v5];
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

void *SAGKSummaryPod.init(title:text:caption:imageResource:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, void *a7)
{
  id v14 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v15 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v15 = a1 & 0xFFFFFFFFFFFFLL;
  }
  id v16 = v14;
  id v17 = v16;
  if (v15)
  {
    id v18 = v16;
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 setTitle:v19];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v20 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v20)
  {
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v17 setText:v21];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0) {
    uint64_t v22 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (v22)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v17 setCaption:v23];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  [v17 setImageResource:a7];

  return v17;
}

id SAGKImageLinkedAnswer.init(imageLinkedAnswer:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_Legacy_PunchOut();
  __chkstk_darwin(v2 - 8);
  NSString v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  if (Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.hasImageResource.getter())
  {
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAUIImageResource);
    Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.imageResource.getter();
    id v9 = SAUIImageResource.init(imageResource:)((uint64_t)v7);
    [v8 setImageResource:v9];
  }
  if (Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.hasPunchOut.getter())
  {
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAUIAppPunchOut);
    Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.punchOut.getter();
    id v10 = SAUIAppPunchOut.init(punchOut:)((uint64_t)v4);
    [v8 setPunchOut:v10];

    uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageLinkedAnswer();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
  }
  else
  {
    uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageLinkedAnswer();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  }
  return v8;
}

id SAUIImageResource.init(imageResource:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v2 - 8);
  NSString v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  uint64_t v10 = Apple_Parsec_Siri_Legacy_ImageResource.imageData.getter();
  uint64_t v12 = v10;
  unint64_t v13 = v11;
  switch(v11 >> 62)
  {
    case 1uLL:
      outlined consume of Data._Representation(v10, v11);
      if ((int)v12 != v12 >> 32) {
        goto LABEL_8;
      }
      break;
    case 2uLL:
      uint64_t v14 = *(void *)(v10 + 16);
      uint64_t v15 = *(void *)(v10 + 24);
      outlined consume of Data._Representation(v10, v11);
      if (v14 != v15) {
        goto LABEL_8;
      }
      break;
    case 3uLL:
      outlined consume of Data._Representation(v10, v11);
      break;
    default:
      outlined consume of Data._Representation(v10, v11);
      if ((v13 & 0xFF000000000000) != 0)
      {
LABEL_8:
        uint64_t v16 = Apple_Parsec_Siri_Legacy_ImageResource.imageData.getter();
        unint64_t v18 = v17;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        outlined consume of Data._Representation(v16, v18);
        [v9 setImageData:isa];
      }
      break;
  }
  Apple_Parsec_Siri_Legacy_ImageResource.pixelWidth.getter();
  if (v20 > 0.0)
  {
    Apple_Parsec_Siri_Legacy_ImageResource.pixelWidth.getter();
    objc_msgSend(v9, "setPixelWidth:");
  }
  Apple_Parsec_Siri_Legacy_ImageResource.pixelHeight.getter();
  if (v21 > 0.0)
  {
    Apple_Parsec_Siri_Legacy_ImageResource.pixelHeight.getter();
    objc_msgSend(v9, "setPixelHeight:");
  }
  uint64_t v22 = Apple_Parsec_Siri_Legacy_ImageResource.resourceURL.getter();
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0) {
    uint64_t v25 = v22 & 0xFFFFFFFFFFFFLL;
  }
  if (v25)
  {
    Apple_Parsec_Siri_Legacy_ImageResource.resourceURL.getter();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
      URL._bridgeToObjectiveC()(v26);
      uint64_t v28 = v27;
      [v9 setResourceUrl:v27];

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  Apple_Parsec_Siri_Legacy_ImageResource.scaleFactor.getter();
  if (v29 > 0.0)
  {
    Apple_Parsec_Siri_Legacy_ImageResource.scaleFactor.getter();
    objc_msgSend(v9, "setScaleFactor:");
  }
  uint64_t v30 = Apple_Parsec_Siri_Legacy_ImageResource.urlFormatString.getter();
  unint64_t v32 = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = HIBYTE(v32) & 0xF;
  if ((v32 & 0x2000000000000000) == 0) {
    uint64_t v33 = v30 & 0xFFFFFFFFFFFFLL;
  }
  if (v33)
  {
    Apple_Parsec_Siri_Legacy_ImageResource.urlFormatString.getter();
    NSString v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 setUrlFormatString:v34];
  }
  uint64_t v35 = Apple_Parsec_Siri_Legacy_ImageResource.userAgent.getter();
  unint64_t v37 = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = HIBYTE(v37) & 0xF;
  if ((v37 & 0x2000000000000000) == 0) {
    uint64_t v38 = v35 & 0xFFFFFFFFFFFFLL;
  }
  if (v38)
  {
    Apple_Parsec_Siri_Legacy_ImageResource.userAgent.getter();
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 setUserAgent:v39];

    uint64_t v40 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(a1, v40);
  }
  else
  {
    uint64_t v41 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(a1, v41);
  }
  return v9;
}

id SAUIAppPunchOut.init(punchOut:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v46 - v6;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  id v47 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v46 - v12;
  id v14 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  uint64_t v15 = Apple_Parsec_Siri_Legacy_PunchOut.subtitle.getter();
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0) {
    uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    Apple_Parsec_Siri_Legacy_PunchOut.subtitle.getter();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 setSubtitle:v19];
  }
  Apple_Parsec_Siri_Legacy_PunchOut.punchOutUri.getter();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  double v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v20(v7, 1, v8) == 1)
  {
    outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v7, v8);
    URL._bridgeToObjectiveC()(v21);
    unint64_t v23 = v22;
    [v14 setPunchOutUri:v22];

    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }
  uint64_t v24 = Apple_Parsec_Siri_Legacy_PunchOut.bundleID.getter();
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0) {
    uint64_t v27 = v24 & 0xFFFFFFFFFFFFLL;
  }
  if (v27)
  {
    Apple_Parsec_Siri_Legacy_PunchOut.bundleID.getter();
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 setBundleId:v28];
  }
  uint64_t v29 = Apple_Parsec_Siri_Legacy_PunchOut.appDisplayName.getter();
  unint64_t v31 = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000) == 0) {
    uint64_t v32 = v29 & 0xFFFFFFFFFFFFLL;
  }
  if (v32)
  {
    Apple_Parsec_Siri_Legacy_PunchOut.appDisplayName.getter();
    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 setAppDisplayName:v33];
  }
  uint64_t v34 = Apple_Parsec_Siri_Legacy_PunchOut.appStoreUri.getter();
  unint64_t v36 = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = HIBYTE(v36) & 0xF;
  if ((v36 & 0x2000000000000000) == 0) {
    uint64_t v37 = v34 & 0xFFFFFFFFFFFFLL;
  }
  if (v37)
  {
    Apple_Parsec_Siri_Legacy_PunchOut.appStoreUri.getter();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    if (v20(v5, 1, v8) == 1)
    {
      uint64_t v38 = type metadata accessor for Apple_Parsec_Siri_Legacy_PunchOut();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(a1, v38);

      outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      uint64_t v40 = v47;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v47, v5, v8);
      URL._bridgeToObjectiveC()(v41);
      uint64_t v43 = v42;
      [v14 setAppStoreUri:v42];

      uint64_t v44 = type metadata accessor for Apple_Parsec_Siri_Legacy_PunchOut();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(a1, v44);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v40, v8);
    }
  }
  else
  {
    uint64_t v39 = type metadata accessor for Apple_Parsec_Siri_Legacy_PunchOut();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(a1, v39);
  }
  return v14;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1() & 1;
}

{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_CardSection?);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  char v51 = (char *)v45 - v6;
  uint64_t v7 = type metadata accessor for Searchfoundation_CardSection();
  __chkstk_darwin(v7);
  os_log_t v53 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  id v55 = (char *)_swiftEmptyArrayStorage;
  uint64_t v50 = (v10 + 32) & ~v10;
  uint64_t v54 = (uint64_t)_swiftEmptyArrayStorage + v50;
  uint64_t v11 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v45[2] = v9 + 48;
  v45[3] = v9 + 16;
  uint64_t v46 = v9;
  int v52 = (uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 32);
  v45[1] = v10 | 7;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  unint64_t v14 = 0;
LABEL_4:
  unint64_t v16 = *(void *)(a1 + 16);
  if (v14 != v16)
  {
    if (v14 < v16)
    {
      while (1)
      {
        uint64_t v17 = *(void *)(a1 + 32 + 8 * v14);
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRelease();
        if (v17) {
          break;
        }
LABEL_9:
        ++v14;
        unint64_t v18 = *(void *)(a1 + 16);
        if (v14 == v18) {
          goto LABEL_37;
        }
        if (v14 >= v18) {
          goto LABEL_43;
        }
      }
      unint64_t v15 = *(void *)(v17 + 16);
      if (!v15)
      {
        (*v11)(v5, 1, 1, v7);
        uint64_t result = outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for Searchfoundation_CardSection?);
        goto LABEL_9;
      }
      unint64_t v19 = 0;
      ++v14;
      while (1)
      {
        if (v19 >= v15) {
          goto LABEL_44;
        }
        uint64_t v20 = v13;
        uint64_t v21 = v46;
        uint64_t v22 = *(void *)(v46 + 72);
        unint64_t v48 = v19;
        uint64_t v49 = v22;
        (*(void (**)(char *, unint64_t, uint64_t))(v46 + 16))(v5, v17 + v50 + v22 * v19, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v5, 0, 1, v7);
        uint64_t v23 = (uint64_t)v51;
        outlined init with take of Searchfoundation_CardSection?((uint64_t)v5, (uint64_t)v51);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v23, 1, v7) == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v41 = v55;
          uint64_t v13 = v20;
          goto LABEL_38;
        }
        id v47 = *v52;
        uint64_t result = v47(v53, v23, v7);
        if (!v20) {
          break;
        }
        uint64_t v24 = v20;
LABEL_35:
        BOOL v39 = __OFSUB__(v24, 1);
        uint64_t v13 = v24 - 1;
        if (v39) {
          goto LABEL_45;
        }
        unint64_t v19 = v48 + 1;
        uint64_t v40 = v54;
        uint64_t result = v47((char *)v54, (uint64_t)v53, v7);
        uint64_t v54 = v40 + v49;
        unint64_t v15 = *(void *)(v17 + 16);
        if (v19 == v15)
        {
          (*v11)(v5, 1, 1, v7);
          uint64_t result = outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for Searchfoundation_CardSection?);
          goto LABEL_4;
        }
      }
      unint64_t v25 = *((void *)v55 + 3);
      if ((uint64_t)((v25 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_47;
      }
      int64_t v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
      if (v26 <= 1) {
        uint64_t v27 = 1;
      }
      else {
        uint64_t v27 = v26;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Searchfoundation_CardSection>);
      uint64_t v28 = v49;
      uint64_t v29 = v50;
      uint64_t v54 = v27;
      unint64_t v30 = (char *)swift_allocObject();
      uint64_t result = _swift_stdlib_malloc_size(v30);
      if (!v28) {
        goto LABEL_48;
      }
      uint64_t v31 = result - v29;
      if (result - v29 == 0x8000000000000000 && v28 == -1) {
        goto LABEL_49;
      }
      uint64_t v33 = v31 / v28;
      uint64_t v34 = v55;
      *((void *)v30 + 2) = v54;
      *((void *)v30 + 3) = 2 * (v31 / v28);
      unint64_t v35 = &v30[v29];
      uint64_t v36 = *((void *)v34 + 3) >> 1;
      uint64_t v37 = v36 * v28;
      if (!*((void *)v34 + 2))
      {
LABEL_34:
        uint64_t v54 = (uint64_t)&v35[v37];
        id v55 = v30;
        uint64_t v24 = (v33 & 0x7FFFFFFFFFFFFFFFLL) - v36;
        uint64_t result = swift_release();
        goto LABEL_35;
      }
      if (v30 < v34 || v35 >= &v34[v50 + v37])
      {
        uint64_t v54 = v31 / v28;
        uint64_t v38 = v35;
        v45[0] = v37;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (v30 == v55)
        {
LABEL_33:
          *((void *)v55 + 2) = 0;
          goto LABEL_34;
        }
        uint64_t v54 = v31 / v28;
        uint64_t v38 = v35;
        v45[0] = v37;
        swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v37 = v45[0];
      unint64_t v35 = v38;
      uint64_t v33 = v54;
      goto LABEL_33;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_37:
  uint64_t v23 = (uint64_t)v51;
  (*v11)(v51, 1, 1, v7);
  swift_bridgeObjectRelease();
  uint64_t v41 = v55;
LABEL_38:
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of Any?(v23, &demangling cache variable for type metadata for Searchfoundation_CardSection?);
  unint64_t v42 = *((void *)v41 + 3);
  if (v42 < 2) {
    return (uint64_t)v41;
  }
  unint64_t v43 = v42 >> 1;
  BOOL v39 = __OFSUB__(v43, v13);
  uint64_t v44 = v43 - v13;
  if (!v39)
  {
    *((void *)v41 + 2) = v44;
    return (uint64_t)v41;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v7 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent() - 8);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 320);
    uint64_t v10 = *(void *)(v7 + 72);
    swift_bridgeObjectRetain();
    do
    {
      if (v9(v8, a3))
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v8 += v10;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

{
  void *result;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v7 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent() - 8);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 192);
    uint64_t v10 = *(void *)(v7 + 72);
    swift_bridgeObjectRetain();
    do
    {
      if (v9(v8, a3))
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v8 += v10;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI48Apple_Parsec_Siri_V2alpha_LayoutSnippetComponentVG_So18SACardShowNextCardCs5NeverOTg5057_s21InformationFlowPlugin0A11ViewFactoryC31makeCommandFord46Navigation7layoutsSaySo06SABaseG0CGSay0I3API48f1_g1_h1_i1_jkl9VG_tFSo18mnoP8CAKXEfU_0sT6Plugin0swX0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v9)
  {
    int64_t v26 = _swiftEmptyArrayStorage;
    uint64_t v23 = v6;
    uint64_t v24 = a2;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v11 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent() - 8);
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v22 = type metadata accessor for PerformanceUtil();
    uint64_t v21 = *(void *)(v11 + 72);
    do
    {
      uint64_t v13 = static PerformanceUtil.shared.getter();
      __chkstk_darwin(v13);
      Date.init()();
      uint64_t v14 = type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SACardSnippet);
      unint64_t v18 = &v16;
      uint64_t v19 = v14;
      uint64_t v17 = partial apply for closure #1 in closure #1 in InformationViewFactory.makeCommandForPegasusNavigation(layouts:);
      char v16 = 2;
      dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v23);
      unint64_t v15 = v25;
      objc_msgSend(objc_msgSend(objc_allocWithZone((Class)SACardShowNextCard), "init"), "setCardSnippet:", v25);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v12 += v21;
      --v9;
    }
    while (v9);
    return v26;
  }
  return result;
}

void *partial apply for closure #1 in InformationViewFactory.makeButtonView(button:)@<X0>(void *a1@<X8>)
{
  uint64_t result = specialized static CommandFactory.makeCommands(forComponent:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #4 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 16) + 208))(*(void *)(v1 + 24));
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #3 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 16) + 240))(*(void *)(v1 + 24));
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #2 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 16) + 200))(*(void *)(v1 + 24));
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in InformationViewFactory.makeSnippet(layoutSnippet:renderOptions:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v1 + 16) + 312))(*(void *)(v1 + 24), *(void *)(v1 + 32));
  *a1 = result;
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *(void *)(type metadata accessor for Apple_Parsec_Siri_Legacy_PodView() - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 272);
    uint64_t v9 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain();
    do
    {
      if (v8(v7))
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v7 += v9;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t (*v17)(uint64_t);

  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty() - 8);
  uint64_t v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v17 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 216);
  uint64_t v7 = *(void *)(v5 + 72);
  swift_bridgeObjectRetain();
  uint64_t v8 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v10 = v17(v6);
    if (v11)
    {
      uint64_t v12 = v10;
      uint64_t v13 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      }
      unint64_t v15 = v8[2];
      uint64_t v14 = v8[3];
      if (v15 >= v14 >> 1) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v8);
      }
      _OWORD v8[2] = v15 + 1;
      uint64_t v9 = &v8[2 * v15];
      v9[4] = v12;
      v9[5] = v13;
    }
    v6 += v7;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(char *, char *, uint64_t);
  void *v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void v24[2];
  void (**v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unsigned int (**v30)(char *, uint64_t, uint64_t);
  char *v31;

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_Card?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Searchfoundation_Card();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v31 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v28 = (char *)v24 - v12;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v14 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails() - 8);
  unint64_t v15 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  unint64_t v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int64_t v26 = v9;
  char v16 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t v29 = *(void *)(v14 + 72);
  v24[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v17 = _swiftEmptyArrayStorage;
  unint64_t v25 = v16;
  uint64_t v27 = a2;
  do
  {
    closure #1 in InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:)(v15, a2, (uint64_t)v7);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v17;
    }
    if ((*v30)(v7, 1, v8) == 1)
    {
      outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for Searchfoundation_Card?);
    }
    else
    {
      unint64_t v18 = *v16;
      uint64_t v19 = v28;
      (*v16)(v28, v7, v8);
      v18(v31, v19, v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v17 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, (unint64_t)v17);
      }
      uint64_t v21 = v17[2];
      uint64_t v20 = v17[3];
      if (v21 >= v20 >> 1) {
        uint64_t v17 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, (unint64_t)v17);
      }
      v17[2] = v21 + 1;
      uint64_t v22 = (unint64_t)v17
          + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))
          + *(void *)(v26 + 72) * v21;
      char v16 = v25;
      v18((char *)v22, v31, v8);
      a2 = v27;
    }
    v15 += v29;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v17;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI32Apple_Parsec_Siri_V2alpha_PersonVG_So8SAPersonCs5NeverOTg5047_s21InformationFlowPlugin0A11ViewFactoryC17makej32Snippet06layoutH0So010SAABPersonv5CSg10d6API032f1_g1_h1_i25_LayoutH9ComponentV_tFSo8K25CAI0m1_n1_o1_p1_G0VXEfU0_0nO6Plugin0nrS0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v6 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_Person() - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void (**)(uint64_t))(*(void *)a2 + 224);
    uint64_t v9 = *(void *)(v6 + 72);
    do
    {
      v8(v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v7 += v9;
      --v3;
    }
    while (v3);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *partial apply for closure #2 in InformationViewFactory.makeMapSnippet(layoutSnippet:)@<X0>(void *a1@<X8>)
{
  uint64_t result = specialized static CommandFactory.makeCommands(forComponent:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a2;
  uint64_t v39 = type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource();
  uint64_t v3 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v37 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SAUIImageResource>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v6 = 0;
  uint64_t v40 = a1;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v8 = a1 + 64;
  uint64_t v7 = v9;
  uint64_t v10 = 1 << *(unsigned char *)(v8 - 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v7;
  uint64_t v31 = v8;
  int64_t v32 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3;
  uint64_t v34 = v3 + 8;
  uint64_t v35 = v3 + 16;
  uint64_t v33 = result + 64;
  uint64_t v36 = result;
  uint64_t v13 = v37;
  uint64_t v14 = v39;
  if ((v11 & v7) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  int64_t v42 = v6;
  for (unint64_t i = v15 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v19 << 6))
  {
    uint64_t v21 = *(void *)(v40 + 56);
    uint64_t v22 = (uint64_t *)(*(void *)(v40 + 48) + 16 * i);
    uint64_t v23 = v22[1];
    uint64_t v43 = *v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v13, v21 + *(void *)(v3 + 72) * i, v14);
    uint64_t v24 = *(uint64_t (**)(char *))(*(void *)v41 + 264);
    swift_bridgeObjectRetain();
    uint64_t v25 = v24(v13);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v13, v14);
    *(void *)(v33 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = v36;
    int64_t v26 = (void *)(*(void *)(v36 + 48) + 16 * i);
    *int64_t v26 = v43;
    v26[1] = v23;
    *(void *)(*(void *)(result + 56) + 8 * i) = v25;
    uint64_t v27 = *(void *)(result + 16);
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    *(void *)(result + 16) = v29;
    int64_t v6 = v42;
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v17 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_24;
    }
    if (v17 >= v32) {
      return result;
    }
    unint64_t v18 = *(void *)(v31 + 8 * v17);
    int64_t v19 = v6 + 1;
    if (!v18)
    {
      int64_t v19 = v6 + 2;
      if (v6 + 2 >= v32) {
        return result;
      }
      unint64_t v18 = *(void *)(v31 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v6 + 3;
        if (v6 + 3 >= v32) {
          return result;
        }
        unint64_t v18 = *(void *)(v31 + 8 * v19);
        if (!v18) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v12 = (v18 - 1) & v18;
    int64_t v42 = v19;
  }
  uint64_t v20 = v6 + 4;
  if (v6 + 4 >= v32) {
    return result;
  }
  unint64_t v18 = *(void *)(v31 + 8 * v20);
  if (v18)
  {
    int64_t v19 = v6 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v19 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v19 >= v32) {
      return result;
    }
    unint64_t v18 = *(void *)(v31 + 8 * v19);
    ++v20;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void partial apply for closure #2 in InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:)(uint64_t a1)
{
  closure #2 in InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t partial apply for closure #1 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)()
{
  return closure #1 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)(v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #2 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)(a1);
}

uint64_t partial apply for closure #2 in InformationViewFactory.makeCasinoSnippet(layoutSnippet:renderOptions:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.perResultLayoutDetails.getter();
  (*(void (**)(void))(*(void *)v1 + 280))();
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type InformationViewFactory.AceViewCategory and conformance InformationViewFactory.AceViewCategory()
{
  unint64_t result = lazy protocol witness table cache variable for type InformationViewFactory.AceViewCategory and conformance InformationViewFactory.AceViewCategory;
  if (!lazy protocol witness table cache variable for type InformationViewFactory.AceViewCategory and conformance InformationViewFactory.AceViewCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InformationViewFactory.AceViewCategory and conformance InformationViewFactory.AceViewCategory);
  }
  return result;
}

uint64_t sub_779C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 104))();
}

uint64_t sub_77A0C(uint64_t a1, uint64_t a2)
{
  outlined init with copy of OutputPublisherAsync(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 112))(v4);
}

uint64_t type metadata accessor for InformationViewFactory()
{
  return self;
}

uint64_t getEnumTagSinglePayload for InformationViewFactory.AceViewCategory(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for InformationViewFactory.AceViewCategory(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x77BE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InformationViewFactory.AceViewCategory()
{
  return &type metadata for InformationViewFactory.AceViewCategory;
}

uint64_t outlined init with take of Searchfoundation_CardSection?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Searchfoundation_CardSection?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in InformationViewFactory.makeCard(perResultLayoutDetails:renderOptions:)()
{
  return (*(uint64_t (**)(void, void))(**(void **)(v0 + 16) + 288))(*(void *)(v0 + 24), 0);
}

void *partial apply for closure #1 in closure #1 in InformationViewFactory.makeDisambiguationListView(list:)@<X0>(void *a1@<X8>)
{
  uint64_t result = specialized static CommandFactory.makeCommands(forListItem:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in InformationViewFactory.makeCommandForPegasusNavigation(layouts:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v1 + 16) + 312))(*(void *)(v1 + 24), 0);
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #4 in InformationViewFactory.makeCasinoSnippet(layoutSnippet:renderOptions:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #2 in InformationViewFactory.attachCompactCard(cardSnippet:layoutSnippet:renderOptions:)(a1);
}

void *partial apply for closure #1 in InformationViewFactory.makeCompactSnippet(layoutSnippet:renderOptions:)@<X0>(void *a1@<X8>)
{
  return partial apply for closure #2 in InformationViewFactory.makeMapSnippet(layoutSnippet:)(a1);
}

uint64_t SportsPersonalizationSelection<A>.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  BOOL v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, v11);
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 2, v3);
  if (v12)
  {
    if (v12 == 1) {
      return 0x63696C7070616E69;
    }
    else {
      return 0x756769626D616E75;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    unint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v21 = 0xD00000000000001ELL;
    unint64_t v22 = 0x80000000000B0700;
    char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(v3, a2);
    BOOL v15 = (v14 & 1) == 0;
    if (v14) {
      uint64_t v16 = 1702195828;
    }
    else {
      uint64_t v16 = 0x65736C6166;
    }
    if (v15) {
      unint64_t v17 = 0xE500000000000000;
    }
    else {
      unint64_t v17 = 0xE400000000000000;
    }
    unint64_t v18 = v17;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = 41;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    unint64_t v13 = v21;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return v13;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance <A> SportsPersonalizationSelection<A>(uint64_t a1, uint64_t a2)
{
  return SportsPersonalizationSelection<A>.debugDescription.getter(a1, *(void *)(a2 - 8));
}

uint64_t type metadata instantiation function for SportsPersonalizationSelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t type metadata completion function for SportsPersonalizationSelection()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SportsPersonalizationSelection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  unint64_t v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    unint64_t v9 = v10 + v8;
  }
  uint64_t v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          unsigned int v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            uint64_t v18 = 4;
          }
          else
          {
            BOOL v20 = v19 != 0;
            BOOL v13 = v19 >= 0xFF;
            uint64_t v18 = 2;
            if (!v13) {
              uint64_t v18 = v20;
            }
          }
        }
        else
        {
          uint64_t v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for SportsPersonalizationSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 2, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *initializeWithCopy for SportsPersonalizationSelection(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4;
        }
        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *assignWithCopy for SportsPersonalizationSelection(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v5);
  int v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v15 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v15 > 0xFFFE)
        {
          uint64_t v12 = 4;
        }
        else
        {
          BOOL v16 = v15 != 0;
          BOOL v17 = v15 >= 0xFF;
          uint64_t v12 = 2;
          if (!v17) {
            uint64_t v12 = v16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
      uint64_t v13 = v6 + 8;
      v14(a1, v5);
      unsigned int v10 = *(_DWORD *)(v13 + 76);
      size_t v11 = *(void *)(v13 + 56);
      if (v10 <= 1)
      {
        if (v11 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *initializeWithTake for SportsPersonalizationSelection(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4;
        }
        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *assignWithTake for SportsPersonalizationSelection(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v5);
  int v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v15 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v15 > 0xFFFE)
        {
          uint64_t v12 = 4;
        }
        else
        {
          BOOL v16 = v15 != 0;
          BOOL v17 = v15 >= 0xFF;
          uint64_t v12 = 2;
          if (!v17) {
            uint64_t v12 = v16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
      uint64_t v13 = v6 + 8;
      v14(a1, v5);
      unsigned int v10 = *(_DWORD *)(v13 + 76);
      size_t v11 = *(void *)(v13 + 56);
      if (v10 <= 1)
      {
        if (v11 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsPersonalizationSelection(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 2;
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 1)
  {
    unsigned int v6 = 0;
    if (v7 <= 3)
    {
      unsigned int v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        uint64_t v8 = 4;
      }
      else
      {
        BOOL v10 = v9 != 0;
        BOOL v11 = v9 >= 0xFF;
        uint64_t v8 = 2;
        if (!v11) {
          uint64_t v8 = v10;
        }
      }
    }
    else
    {
      uint64_t v8 = 1;
    }
    v7 += v8;
  }
  if (!a2) {
    return 0;
  }
  int v12 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_30;
  }
  char v13 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)((char *)a1 + v7);
      if (!v14) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_30:
      if (v6)
      {
        unsigned int v19 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v19 >= 3) {
          return v19 - 2;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_30;
  }
LABEL_20:
  int v16 = (v14 - 1) << v13;
  if (v7 > 3) {
    int v16 = 0;
  }
  if (v7)
  {
    if (v7 <= 3) {
      int v17 = v7;
    }
    else {
      int v17 = 4;
    }
    switch(v17)
    {
      case 2:
        int v18 = *a1;
        break;
      case 3:
        int v18 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v18 = *(_DWORD *)a1;
        break;
      default:
        int v18 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v18 = 0;
  }
  return v6 + (v18 | v16) + 1;
}

void storeEnumTagSinglePayload for SportsPersonalizationSelection(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 2;
  size_t v9 = *(void *)(v6 + 64);
  if (v7 <= 1)
  {
    unsigned int v8 = 0;
    if (v9 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    v9 += v10;
  }
  BOOL v13 = a3 >= v8;
  unsigned int v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      unsigned int v18 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v18))
      {
        int v15 = 4;
      }
      else if (v18 >= 0x100)
      {
        int v15 = 2;
      }
      else
      {
        int v15 = v18 > 1;
      }
    }
    else
    {
      int v15 = 1;
    }
  }
  else
  {
    int v15 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v16 = ~v8 + a2;
    if (v9 < 4)
    {
      int v17 = (v16 >> (8 * v9)) + 1;
      if (v9)
      {
        int v19 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v15)
    {
      case 1:
        a1[v9] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v17;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v9] = v17;
        return;
      default:
        return;
    }
  }
  switch(v15)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x78ED4);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        BOOL v20 = *(void (**)(void))(v6 + 56);
        v20();
      }
      return;
  }
}

uint64_t getEnumTag for SportsPersonalizationSelection(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 2);
}

uint64_t destructiveInjectEnumTag for SportsPersonalizationSelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 2);
}

uint64_t type metadata accessor for SportsPersonalizationSelection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Features.isEnabled.getter(char a1)
{
  unsigned int v5 = &type metadata for Features;
  unint64_t v6 = lazy protocol witness table accessor for type Features and conformance Features();
  v4[0] = a1;
  char v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2 & 1;
}

const char *Features.domain.getter(char a1)
{
  unint64_t v1 = "SiriInformation";
  if (a1 == 6) {
    unint64_t v1 = "Siri";
  }
  if (a1 == 5) {
    return "GenerativeAssistantTools";
  }
  else {
    return v1;
  }
}

const char *Features.feature.getter(char a1)
{
  uint64_t result = "siri_suggestions";
  switch(a1)
  {
    case 1:
      uint64_t result = "sports_personalization";
      break;
    case 2:
      uint64_t result = "carplay_suggestions";
      break;
    case 3:
      uint64_t result = "alternative_suggestions";
      break;
    case 4:
      uint64_t result = "alternative_suggestions_mac";
      break;
    case 5:
      uint64_t result = "LowConfidenceKnowledgeRouting";
      break;
    case 6:
      uint64_t result = "siri_ifflow";
      break;
    default:
      return result;
  }
  return result;
}

BOOL Features.isDisabled.getter(char a1)
{
  unsigned int v5 = &type metadata for Features;
  unint64_t v6 = lazy protocol witness table accessor for type Features and conformance Features();
  v4[0] = a1;
  char v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return (v2 & 1) == 0;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance Features()
{
  int v1 = *v0;
  char v2 = "GenerativeAssistantTools";
  if (v1 != 5) {
    char v2 = "SiriInformation";
  }
  if (v1 == 6) {
    return "Siri";
  }
  else {
    return v2;
  }
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance Features()
{
  uint64_t result = "siri_suggestions";
  switch(*v0)
  {
    case 1:
      uint64_t result = "sports_personalization";
      break;
    case 2:
      uint64_t result = "carplay_suggestions";
      break;
    case 3:
      uint64_t result = "alternative_suggestions";
      break;
    case 4:
      uint64_t result = "alternative_suggestions_mac";
      break;
    case 5:
      uint64_t result = "LowConfidenceKnowledgeRouting";
      break;
    case 6:
      uint64_t result = "siri_ifflow";
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for FeatureToggle.isEnabled.getter in conformance Features(uint64_t a1)
{
  char v2 = *v1;
  uint64_t v6 = a1;
  unint64_t v7 = lazy protocol witness table accessor for type Features and conformance Features();
  v5[0] = v2;
  char v3 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return v3 & 1;
}

uint64_t getEnumTagSinglePayload for Features(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Features(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x79448);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Features()
{
  return &type metadata for Features;
}

Swift::String *webSearchHandoffInvocationID.unsafeMutableAddressor()
{
  return &webSearchHandoffInvocationID;
}

void *static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.appPunchOut(_:), (uint64_t (*)(char *))specialized static PegasusACEConverters.makeAppPunchOut(params:), "Unexpected type for app punch out %s");
}

uint64_t closure #1 in static PegasusACEConverters.makeAppPunchOut(params:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter();
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v9) {
    return Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter();
  }
  outlined init with copy of IdentifiedUser?(a2, (uint64_t)v5, &demangling cache variable for type metadata for URL?);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, v11) == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    uint64_t v13 = URL.scheme.getter();
    uint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v5, v11);
    if (v15)
    {
      if (v13 == 0xD000000000000013 && v15 == 0x80000000000B0850)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0) {
          return 0;
        }
      }
      return 0x6C7070612E6D6F63;
    }
  }
  return 0;
}

void *static PegasusACEConverters.makeShowLocalSearchResult(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showLocalSearchResult(_:), (uint64_t (*)(char *))specialized static PegasusACEConverters.makeShowLocalSearchResult(params:), "Unexpected type for show local search result %s");
}

void *static PegasusACEConverters.makeShowMapPoints(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showMapPoints(_:), (uint64_t (*)(char *))specialized static PegasusACEConverters.makeShowMapPoints(params:), "Unexpected type for show map points %s");
}

void *static PegasusACEConverters.makeStartRequest(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.startRequest(_:), (uint64_t (*)(char *))specialized static PegasusACEConverters.makeStartRequest(params:));
}

id static PegasusACEConverters.makeShowPlaceDetails(params:)()
{
  id v0 = [objc_allocWithZone((Class)SALocalSearchShowPlaceDetails) init];
  [v0 setItemIndex:Apple_Parsec_Siri_V2alpha_ShowPlaceDetailsBuilderParams.itemIndex.getter()];
  return v0;
}

id static PegasusACEConverters.makeEndNavigation(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_NavigationEndBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.navigationEnd(_:), (Class *)SALocalSearchNavigationEnd_ptr);
}

id static PegasusACEConverters.makeEndNavigation(params:)()
{
  id v0 = objc_allocWithZone((Class)SALocalSearchNavigationEnd);

  return [v0 init];
}

void *static PegasusACEConverters.makeSayIt(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.sayIt(_:), (uint64_t (*)(char *))specialized static PegasusACEConverters.makeSayIt(params:));
}

void *static PegasusACEConverters.makeRecordLocationActivity(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.recordLocationActivity(_:), (uint64_t (*)(char *))specialized static PegasusACEConverters.makeRecordLocationActivity(params:), "Unexpected type for record location activity %s");
}

void *static PegasusACEConverters.makePhoneCall(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.phoneCall(_:), (uint64_t (*)(char *))specialized static PegasusACEConverters.makePhoneCall(params:));
}

id static PegasusACEConverters.makeSwitchProfile(params:)(uint64_t a1)
{
  return static PegasusACEConverters.makeSwitchProfile(params:)(a1, (Class *)SAProfileSwitch_ptr, (void (*)(void))&Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams.userID.getter, (SEL *)&selRef_setSharedUserId_);
}

id static PegasusACEConverters.makeUnlockDevice(params:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeUnlockDevice(params:)(a1, (Class *)SAUIUnlockDevice_ptr, (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceBuilderParams.successCommands.getter, (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceBuilderParams.failureCommands.getter);
}

id static PegasusACEConverters.makeUnlockDeviceWithWatch(params:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeUnlockDevice(params:)(a1, (Class *)SAUIUnlockDeviceWithWatch_ptr, (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceWithWatchBuilderParams.successCommands.getter, (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceWithWatchBuilderParams.failureCommands.getter);
}

id static PegasusACEConverters.makeOpenLink(params:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v0 - 8);
  int v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v3 = [objc_allocWithZone((Class)SAUIOpenLink) init];
  Apple_Parsec_Siri_V2alpha_OpenLinkBuilderParams.ref.getter();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v7 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v4) != 1)
  {
    URL._bridgeToObjectiveC()(v6);
    unint64_t v7 = v8;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v2, v4);
  }
  [v3 setRef:v7];

  return v3;
}

id static PegasusACEConverters.makeSetSiriAuthorizationForApp(params:)(uint64_t a1)
{
  return static PegasusACEConverters.makeSwitchProfile(params:)(a1, (Class *)SASettingSetSiriAuthorizationForApp_ptr, (void (*)(void))&Apple_Parsec_Siri_V2alpha_SetSiriAuthorizationForAppBuilderParams.appBundleID.getter, (SEL *)&selRef_setBundleId_);
}

id static PegasusACEConverters.makeSwitchProfile(params:)(uint64_t a1, Class *a2, void (*a3)(void), SEL *a4)
{
  id v6 = [objc_allocWithZone(*a2) init];
  a3();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, *a4, v7);

  return v6;
}

id static PegasusACEConverters.makeExtendCurrentTTS(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ExtendCurrentTTS, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.extendCurrentTts(_:), (Class *)SAUIExtendCurrentTTS_ptr);
}

id static PegasusACEConverters.makeExtendCurrentTTS(params:)(uint64_t a1)
{
  return static PegasusACEConverters.makeExtendCurrentTTS(params:)(a1, (Class *)SAUIExtendCurrentTTS_ptr);
}

id static PegasusACEConverters.makeCancelCurrentTTS(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_CancelCurrentTTS, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.cancelCurrentTts(_:), (Class *)SAUICancelCurrentTTS_ptr);
}

id static PegasusACEConverters.makeCancelCurrentTTS(params:)(uint64_t a1)
{
  return static PegasusACEConverters.makeExtendCurrentTTS(params:)(a1, (Class *)SAUICancelCurrentTTS_ptr);
}

id static PegasusACEConverters.makeExtendCurrentTTS(params:)(uint64_t a1, Class *a2)
{
  id v2 = objc_allocWithZone(*a2);

  return [v2 init];
}

id specialized static PegasusACEConverters.makeLocation(params:)()
{
  id v0 = [objc_allocWithZone((Class)SALocation) init];
  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.label.getter();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setLabel:v1];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.street.getter();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setStreet:v2];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.thoroughfare.getter();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setThoroughfare:v3];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.subThoroughfare.getter();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setSubThoroughfare:v4];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.city.getter();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setCity:v5];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.stateCode.getter();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setStateCode:v6];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.countryCode.getter();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setCountryCode:v7];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.postalCode.getter();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setPostalCode:v8];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.latitude.getter();
  int v10 = v9;
  id v11 = objc_allocWithZone((Class)NSNumber);
  LODWORD(v12) = v10;
  id v13 = [v11 initWithFloat:v12];
  [v0 setLatitude:v13];

  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.longitude.getter();
  int v15 = v14;
  id v16 = objc_allocWithZone((Class)NSNumber);
  LODWORD(v17) = v15;
  id v18 = [v16 initWithFloat:v17];
  [v0 setLongitude:v18];

  [v0 setRegionType:SARegionTypeAddressValue];
  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.timezoneID.getter();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setTimezoneId:v19];

  return v0;
}

uint64_t specialized static PegasusACEConverters.makeDirectionsType(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  NSString v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  int v9 = (char *)v32 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  double v12 = (char *)v32 - v11;
  __chkstk_darwin(v10);
  int v14 = (char *)v32 - v13;
  int v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v15((char *)v32 - v13, a1, v2);
  int v16 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v14, v2);
  if (v16 == enum case for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType.UNRECOGNIZED(_:)
    || v16 == enum case for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType.unknown(_:))
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.information);
    v15(v12, a1, v2);
    NSString v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v36 = v34;
      *(_DWORD *)unint64_t v21 = 136315138;
      uint64_t v33 = v21 + 4;
      v15(v9, (uint64_t)v12, v2);
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
      _os_log_impl(&dword_0, v19, v20, "Unknown or unrecognized direction type: %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
    }

    return 0;
  }
  if (v16 != enum case for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType.car(_:)
    && v16 != enum case for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType.transit(_:)
    && v16 != enum case for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType.walking(_:)
    && v16 != enum case for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType.cycling(_:))
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.information);
    v15(v6, a1, v2);
    int64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      BOOL v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v36 = v34;
      uint64_t v33 = v28;
      *(_DWORD *)BOOL v28 = 136315138;
      v32[1] = v28 + 4;
      v15(v9, (uint64_t)v6, v2);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void (**)(char *, uint64_t))(v3 + 8);
      v31(v6, v2);
      _os_log_impl(&dword_0, v26, v27, "Unknown (future?) direction type: %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v31 = *(void (**)(char *, uint64_t))(v3 + 8);
      v31(v6, v2);
    }

    v31(v14, v2);
    return 0;
  }
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t specialized static PegasusACEConverters.makeMapItemType(detailType:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  BOOL v7 = v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.UNRECOGNIZED(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.unknown(_:);
  if (v7
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.currentLocation(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.businessItem(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.personItem(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.addressItem(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.homeItem(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType.parkingLocation(_:))
  {
    return static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v8;
}

uint64_t specialized static PegasusACEConverters.makeDirectionRole(role:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role.UNRECOGNIZED(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role.unknown(_:))
  {
    return static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  int v8 = v6;
  if (v6 == enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role.from(_:)) {
    return static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  int v11 = enum case for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role.to(_:);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v8 != v11) {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v9;
}

id specialized static PegasusACEConverters.makeActionableMapItem(params:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role();
  uint64_t v30 = *(void *)(v0 - 8);
  uint64_t v31 = v0;
  __chkstk_darwin(v0);
  uint64_t v29 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [objc_allocWithZone((Class)SALocalSearchActionableMapItem) init];
  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.detailType.getter();
  specialized static PegasusACEConverters.makeMapItemType(detailType:)((uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setDetailType:v11];

  id v12 = v10;
  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.location.getter();
  id v13 = specialized static PegasusACEConverters.makeLocation(params:)();
  int v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v5, v2);
  [v12 setLocation:v13];

  id v15 = v12;
  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.location.getter();
  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.label.getter();
  v14(v5, v2);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 setLabel:v16];

  id v17 = v15;
  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.location.getter();
  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.label.getter();
  v14(v5, v2);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v17 setSpokenName:v18];

  id v19 = v17;
  uint64_t v20 = Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.placeData.getter();
  unint64_t v22 = v21;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v20, v22);
  [v19 setPlaceData2:isa];

  id v24 = v19;
  uint64_t v25 = (uint64_t)v29;
  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.directionRole.getter();
  specialized static PegasusACEConverters.makeDirectionRole(role:)(v25);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v25, v31);
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v24 setDirectionRole:v26];

  return v24;
}

id specialized static PegasusACEConverters.makeMapItemList(params:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [objc_allocWithZone((Class)SALocalSearchMapItemList) init];
  id v5 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_MapItemListBuilderParams.selectedItemIndex.getter()];
  [v4 setSelectedIndex:v5];

  id v6 = v4;
  uint64_t v7 = Apple_Parsec_Siri_V2alpha_MapItemListBuilderParams.domainObjects.getter();
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    id v17 = v6;
    id v19 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v9 = v1 + 16;
    NSString v18 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
    uint64_t v10 = *(unsigned __int8 *)(v1 + 80);
    uint64_t v16 = v7;
    uint64_t v11 = v7 + ((v10 + 32) & ~v10);
    uint64_t v12 = *(void *)(v9 + 56);
    id v13 = (void (**)(char *, uint64_t))(v9 - 8);
    do
    {
      v18(v3, v11, v0);
      specialized static PegasusACEConverters.makeActionableMapItem(params:)();
      (*v13)(v3, v0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v11 += v12;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    id v6 = v17;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SADomainObject);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v6 setDomainObjects:isa];

  return v6;
}

id specialized static PegasusACEConverters.makeShowMapPoints(params:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemListBuilderParams();
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  __chkstk_darwin(v2);
  uint64_t v34 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams();
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v38 = v4;
  __chkstk_darwin(v4);
  id v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType();
  uint64_t v33 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [objc_allocWithZone((Class)SALocalSearchShowMapPoints) init];
  Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.language.getter();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 setLanguage:v15];

  char v16 = Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.hasItemSource.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  if (v16)
  {
    uint64_t v17 = v33;
    char v18 = Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.hasItemDestination.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if (v18)
    {
      [v14 setShowDirections:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.showDirections.getter() & 1];
      Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.directionType.getter();
      specialized static PegasusACEConverters.makeDirectionsType(_:)((uint64_t)v9);
      uint64_t v20 = v19;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v7);
      if (v20)
      {
        NSString v21 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v14 setDirectionsType:v21];
      }
      Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.itemSource.getter();
      id v22 = specialized static PegasusACEConverters.makeActionableMapItem(params:)();
      uint64_t v23 = v38;
      id v24 = *(void (**)(char *, uint64_t))(v37 + 8);
      v24(v6, v38);
      [v14 setItemSource:v22];

      Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.itemDestination.getter();
      id v25 = specialized static PegasusACEConverters.makeActionableMapItem(params:)();
      v24(v6, v23);
      [v14 setItemDestination:v25];

      id v26 = [objc_allocWithZone((Class)SALocalSearchCarRouteOptions) init];
      [v26 setAvoidTolls:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.avoidTolls.getter() & 1];
      [v26 setAvoidHighways:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.avoidHighways.getter() & 1];
      [v14 setCarRouteOptions:v26];
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.hasItemSource.getter())
  {
    Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.itemSource.getter();
    id v27 = specialized static PegasusACEConverters.makeActionableMapItem(params:)();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v38);
    [v14 setItemSource:v27];

    [v14 setShowTraffic:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.showTraffic.getter() & 1];
    [v14 setSuppressNavigation:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.shouldSuppressNavigation.getter() & 1];
    [v14 setSearchAlongRoute:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.isSearchAlongRoute.getter() & 1];
    [v14 setChainResultSet:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.isChainResultSet.getter() & 1];
    Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.regionOfInterestRadiusInMiles.getter();
    id v29 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v28];
    [v14 setRegionOfInterestRadiusInMiles:v29];
  }
  if (Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.hasSearchItems.getter())
  {
    uint64_t v30 = v34;
    Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.searchItems.getter();
    id v31 = specialized static PegasusACEConverters.makeMapItemList(params:)();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v36);
    [v14 setSearchItems:v31];

    [v14 setSearchAlongRoute:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.isSearchAlongRoute.getter() & 1];
    [v14 setItemSource:0];
    [v14 setItemDestination:0];
    [v14 setSuppressNavigation:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.shouldSuppressNavigation.getter() & 1];
    [v14 setChainResultSet:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.isChainResultSet.getter() & 1];
    [v14 setShowDirections:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.showDirections.getter() & 1];
    [v14 setShowTraffic:Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.showTraffic.getter() & 1];
  }
  return v14;
}

id specialized static PegasusACEConverters.makeLocalSearchMapItem(params:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role();
  uint64_t v23 = *(void *)(v0 - 8);
  uint64_t v24 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType();
  uint64_t v3 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [objc_allocWithZone((Class)SALocalSearchMapItem) init];
  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.label.getter();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setLabel:v11];

  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.spokenName.getter();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setSpokenName:v12];

  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.location.getter();
  id v13 = specialized static PegasusACEConverters.makeLocation(params:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  [v10 setLocation:v13];

  uint64_t v14 = Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.placeData.getter();
  unint64_t v16 = v15;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v14, v16);
  [v10 setPlaceData2:isa];

  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.detailType.getter();
  specialized static PegasusACEConverters.makeMapItemType(detailType:)((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v22);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setDetailType:v18];

  Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.directionRole.getter();
  specialized static PegasusACEConverters.makeDirectionRole(role:)((uint64_t)v2);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v2, v24);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setDirectionRole:v19];

  return v10;
}

id specialized static PegasusACEConverters.makeAppPunchOut(params:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v30 - v6;
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  NSString v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.information);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v32 = a1;
    unint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    id v31 = v5;
    uint64_t v35 = v17;
    uint64_t v33 = v7;
    *(_DWORD *)unint64_t v16 = 136315138;
    uint64_t v18 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.punchOutUri.getter();
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v35);
    uint64_t v7 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl(&dword_0, v13, v14, "PegasusViewFactory: makeAppPunchOut %s", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v5 = v31;
    swift_slowDealloc();
    a1 = v32;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  id v20 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
  Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.punchOutUri.getter();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  outlined init with copy of IdentifiedUser?((uint64_t)v7, (uint64_t)v5, &demangling cache variable for type metadata for URL?);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v24 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v5, 1, v21) != 1)
  {
    URL._bridgeToObjectiveC()(v23);
    uint64_t v24 = v25;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v21);
  }
  [v20 setPunchOutUri:v24];

  Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.appDisplayName.getter();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v20 setAppDisplayName:v26];

  closure #1 in static PegasusACEConverters.makeAppPunchOut(params:)(a1, (uint64_t)v7);
  if (v27)
  {
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v28 = 0;
  }
  [v20 setBundleId:v28];

  outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
  return v20;
}

void *specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.appPunchOut(_:), (uint64_t (*)(char *))specialized static PegasusACEConverters.makeAppPunchOut(params:), "Unexpected type for app punch out %s");
}

id specialized static PegasusACEConverters.makeShowLocalSearchResult(params:)(uint64_t a1)
{
  v38[1] = a1;
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v1 - 8);
  uint64_t v40 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v41 = (uint64_t)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v38 - v8;
  __chkstk_darwin(v7);
  uint64_t v42 = (uint64_t)v38 - v10;
  uint64_t v11 = type metadata accessor for Locale();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  os_log_type_t v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TimeZone();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v20 = String._bridgeToObjectiveC()();
  [v19 setDateFormat:v20];

  static TimeZone.current.getter();
  Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  [v19 setTimeZone:isa];

  static Locale.current.getter();
  Class v22 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  [v19 setLocale:v22];

  Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams.extSessionGuidCreatedTimestamp.getter();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v24 = [v19 dateFromString:v23];

  if (v24)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v25 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v9, 0, 1, v25);
  }
  else
  {
    uint64_t v25 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v9, 1, 1, v25);
  }
  uint64_t v26 = v42;
  outlined init with take of Date?((uint64_t)v9, v42);
  id v27 = [objc_allocWithZone((Class)SALocalSearchShowLocalSearchResult) init];
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v3, v40);
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v27 setAceId:v28];

  uint64_t v29 = v41;
  outlined init with copy of IdentifiedUser?(v26, v41, (uint64_t *)&demangling cache variable for type metadata for Date?);
  type metadata accessor for Date();
  uint64_t v30 = *(void *)(v25 - 8);
  Class v31 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v29, 1, v25) != 1)
  {
    Class v31 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v25);
  }
  [v27 setExtSessionGuidCreatedTimestamp:v31];

  Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams.extSessionGuid.getter();
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v27 setExtSessionGuid:v32];

  uint64_t v33 = Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams.placeData.getter();
  unint64_t v35 = v34;
  Class v36 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v33, v35);
  [v27 setRawData:v36];

  outlined destroy of Any?(v26, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return v27;
}

void *specialized static PegasusACEConverters.makeShowLocalSearchResult(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showLocalSearchResult(_:), (uint64_t (*)(char *))specialized static PegasusACEConverters.makeShowLocalSearchResult(params:), "Unexpected type for show local search result %s");
}

void *specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(uint64_t a1, uint64_t (*a2)(void), _DWORD *a3, uint64_t (*a4)(char *), const char *a5)
{
  uint64_t v40 = a5;
  uint64_t v41 = a3;
  uint64_t v38 = a4;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v39 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a2(0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (char *)&v38 - v18;
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
  uint64_t v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1, v20) == 1)
  {
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
LABEL_10:
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.information);
    Class v31 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v31(v12, a1, v7);
    NSString v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      unint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = (_DWORD *)swift_slowAlloc();
      uint64_t v43 = v41;
      *(_DWORD *)unint64_t v34 = 136315138;
      uint64_t v38 = (uint64_t (*)(char *))(v34 + 4);
      v31(v39, (uint64_t)v12, v7);
      uint64_t v35 = String.init<A>(describing:)();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
      _os_log_impl(&dword_0, v32, v33, v40, v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    }

    return 0;
  }
  int v22 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v15, v20);
  if (v22 != *v41)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v15, v20);
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t))(v21 + 96))(v15, v20);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
  NSString v23 = (void *)v38(v19);
  uint64_t v24 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0) {
    uint64_t v27 = v24 & 0xFFFFFFFFFFFFLL;
  }
  if (v27)
  {
    id v28 = v23;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v28 setAceId:v29];
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  return v23;
}

void *specialized static PegasusACEConverters.makeShowMapPoints(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showMapPoints(_:), (uint64_t (*)(char *))specialized static PegasusACEConverters.makeShowMapPoints(params:), "Unexpected type for show map points %s");
}

uint64_t specialized static PegasusACEConverters.makeInputOrigin(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_InputOrigin();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.homeButton(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.remoteButton(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.remoteAppButton(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.assistantSpeechButton(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.assistantTextInput(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.priorRequest(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.voiceTrigger(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.serverGenerated(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.motionGesture(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.raiseToSpeak(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.clientGenerated(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.tapToRefresh(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.backgroundRefresh(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.bluetoothVoiceTrigger(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.bluetoothDoubleTap(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.triggerlessFollowup(_:)
    || v6 == enum case for Apple_Parsec_Siri_V2alpha_InputOrigin.dialogButtonTap(_:))
  {
    return static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

id specialized static PegasusACEConverters.makeStartRequest(params:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_InputOrigin();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [objc_allocWithZone((Class)SAStartRequest) init];
  [v4 setEyesFree:Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams.eyesFree.getter() & 1];
  Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams.utterance.getter();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 setUtterance:v5];

  Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams.inputOrigin.getter();
  specialized static PegasusACEConverters.makeInputOrigin(from:)((uint64_t)v3);
  uint64_t v7 = v6;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v7)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v4 setInputOrigin:v8];
  }
  return v4;
}

void *specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.startRequest(_:), (uint64_t (*)(char *))specialized static PegasusACEConverters.makeStartRequest(params:));
}

id specialized static PegasusACEConverters.makeShowPlaceDetails(cmdBuilder:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowPlaceDetailsBuilderParams();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v2, 1, v7) == 1)
  {
    outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 88))(v2, v7) != enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showPlaceDetails(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v2, v7);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v8 + 96))(v2, v7);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  id v9 = [objc_allocWithZone((Class)SALocalSearchShowPlaceDetails) init];
  [v9 setItemIndex:Apple_Parsec_Siri_V2alpha_ShowPlaceDetailsBuilderParams.itemIndex.getter()];
  uint64_t v10 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v13)
  {
    id v14 = v9;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 setAceId:v15];
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v9;
}

id specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_NavigationEndBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.navigationEnd(_:), (Class *)SALocalSearchNavigationEnd_ptr);
}

id specialized static PegasusACEConverters.makeAudioDescription(audioDescription:)()
{
  id v0 = [objc_allocWithZone((Class)SAUIAudioDescription) init];
  id v1 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.bitsPerChannel.getter()];
  [v0 setBitsPerChannel:v1];

  id v2 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.bytesPerFrame.getter()];
  [v0 setBytesPerFrame:v2];

  id v3 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.bytesPerPacket.getter()];
  [v0 setBytesPerPacket:v3];

  id v4 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.channelsPerFrame.getter()];
  [v0 setChannelsPerFrame:v4];

  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDescription();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType and conformance Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioDescription and conformance Apple_Parsec_Siri_V2alpha_AudioDescription, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDescription);
  Message.textFormatString()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setFormat:v5];

  id v6 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.formatFlags.getter()];
  [v0 setFormatFlags:v6];

  id v7 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.formatID.getter()];
  [v0 setFormatID:v7];

  id v8 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.framesPerPacket.getter()];
  [v0 setFramesPerPacket:v8];

  id v9 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:Apple_Parsec_Siri_V2alpha_AudioDescription.reserved.getter()];
  [v0 setReserved:v9];

  Apple_Parsec_Siri_V2alpha_AudioDescription.sampleRate.getter();
  id v11 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v10];
  [v0 setSampleRate:v11];

  return v0;
}

id specialized static PegasusACEConverters.makeAudioData(audioData:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [objc_allocWithZone((Class)SAUIAudioData) init];
  uint64_t v5 = Apple_Parsec_Siri_V2alpha_AudioData.audioBuffer.getter();
  unint64_t v7 = v6;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v5, v7);
  [v4 setAudioBuffer:isa];

  if (Apple_Parsec_Siri_V2alpha_AudioData.hasDecoderStreamDescription.getter())
  {
    Apple_Parsec_Siri_V2alpha_AudioData.decoderStreamDescription.getter();
    id v9 = specialized static PegasusACEConverters.makeAudioDescription(audioDescription:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    [v4 setDecoderStreamDescription:v9];
  }
  if (Apple_Parsec_Siri_V2alpha_AudioData.hasPlayerStreamDescription.getter())
  {
    Apple_Parsec_Siri_V2alpha_AudioData.playerStreamDescription.getter();
    id v10 = specialized static PegasusACEConverters.makeAudioDescription(audioDescription:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    [v4 setPlayerStreamDescription:v10];
  }
  return v4;
}

id specialized static PegasusACEConverters.makeSayIt(params:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioData();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [objc_allocWithZone((Class)SAUISayIt) init];
  Apple_Parsec_Siri_V2alpha_SayItBuilderParams.message.getter();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 setMessage:v5];

  Apple_Parsec_Siri_V2alpha_SayItBuilderParams.dialogIdentifier.getter();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 setDialogIdentifier:v6];

  id v7 = [objc_allocWithZone((Class)NSNumber) initWithBool:Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasListenAfterSpeaking_p.getter() & 1];
  [v4 setListenAfterSpeaking:v7];

  [v4 setRepeatable:Apple_Parsec_Siri_V2alpha_SayItBuilderParams.isRepeatable.getter() & 1];
  Apple_Parsec_Siri_V2alpha_SayItBuilderParams.audioDataURL.getter();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 setAudioDataUrl:v8];

  [v4 setCanUseServerTTS:1];
  if (Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasAudioData.getter())
  {
    Apple_Parsec_Siri_V2alpha_SayItBuilderParams.audioData.getter();
    id v9 = specialized static PegasusACEConverters.makeAudioData(audioData:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    [v4 setAudioData:v9];
  }
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v4 setCoordinationOptions:isa];

  return v4;
}

void *specialized static PegasusACEConverters.makeSayIt(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.sayIt(_:), (uint64_t (*)(char *))specialized static PegasusACEConverters.makeSayIt(params:));
}

void *specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)(uint64_t a1, uint64_t (*a2)(void), _DWORD *a3, uint64_t (*a4)(char *))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - v12;
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14) == 1)
  {
    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 88))(v9, v14) != *a3)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v14);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v15 + 96))(v9, v14);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
  uint64_t v16 = (void *)a4(v13);
  uint64_t v17 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0) {
    uint64_t v20 = v17 & 0xFFFFFFFFFFFFLL;
  }
  if (v20)
  {
    id v21 = v16;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v21 setAceId:v22];
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v16;
}

id specialized static PegasusACEConverters.makePushOff(params:)()
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.information);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "PegasusACEConverters: In makePushOff static function helper", v3, 2u);
    swift_slowDealloc();
  }

  id v77 = [objc_allocWithZone((Class)SAInitiateHandoffOnCompanion) init];
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    NSString v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v6 = 0;
    _os_log_impl(&dword_0, v4, v5, "PegasusACEConverters: Setting up success callback", v6, 2u);
    swift_slowDealloc();
  }

  id v80 = [objc_allocWithZone((Class)SAResultCallback) init];
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    _os_log_impl(&dword_0, v7, v8, "PegasusACEConverters: successCallback initialized", v9, 2u);
    swift_slowDealloc();
  }

  [v80 setCode:SAResultCallbackAnySuccessCodeValue];
  id v10 = [objc_allocWithZone((Class)SAUIAddViews) init];
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_0, v11, v12, "PegasusACEConverters: successView initialized", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = SAUIDialogPhaseSummaryValue;
  [v10 setDialogPhase:SAUIDialogPhaseSummaryValue];
  id v15 = [objc_allocWithZone((Class)SAUIAssistantUtteranceView) init];
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v18 = 0;
    _os_log_impl(&dword_0, v16, v17, "PegasusACEConverters: successAssistantView initialized", v18, 2u);
    swift_slowDealloc();
  }

  Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.pushOffMessage.getter();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 setText:v19];

  id v20 = v15;
  Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.pushOffMessage.getter();
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v20 setSpeakableText:v21];

  Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.pushOffMessageCatID.getter();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v20 setDialogIdentifier:v22];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_AB670;
  *(void *)(v23 + 32) = v20;
  specialized Array._endMutation()();
  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAAceView);
  uint64_t v76 = v20;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v10 setViews:isa];

  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_AB670;
  *(void *)(v25 + 32) = v10;
  specialized Array._endMutation()();
  id v75 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class v26 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v80 setCommands:v26];

  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    NSString v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v29 = 0;
    _os_log_impl(&dword_0, v27, v28, "PegasusACEConverters: Setting up failure callback", v29, 2u);
    swift_slowDealloc();
  }

  id v30 = [objc_allocWithZone((Class)SAResultCallback) init];
  [v30 setCode:SAResultCallbackAnyErrorCodeValue];
  id v31 = [objc_allocWithZone((Class)SAUIAddViews) init];
  [v31 setDialogPhase:v14];
  id v32 = [objc_allocWithZone((Class)SAUIAssistantUtteranceView) init];
  Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.companionUnavailableMessage.getter();
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v32 setText:v33];

  id v34 = v32;
  Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.companionUnavailableMessage.getter();
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v34 setSpeakableText:v35];

  Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.companionUnavailableMessageCatID.getter();
  NSString v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v34 setDialogIdentifier:v36];

  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_AB670;
  *(void *)(v37 + 32) = v34;
  specialized Array._endMutation()();
  uint64_t v74 = v34;
  Class v38 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v31 setViews:v38];

  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_AB670;
  *(void *)(v39 + 32) = v31;
  specialized Array._endMutation()();
  id v79 = v31;
  Class v40 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v30 setCommands:v40];

  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v43 = 0;
    _os_log_impl(&dword_0, v41, v42, "PegasusACEConverters: Setting callbacks", v43, 2u);
    swift_slowDealloc();
  }

  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_ACC70;
  *(void *)(v44 + 32) = v30;
  *(void *)(v44 + 40) = v80;
  specialized Array._endMutation()();
  type metadata accessor for SABaseCommand(0, (unint64_t *)&lazy cache variable for type metadata for SAResultCallback);
  id v45 = v77;
  id v78 = v30;
  id v81 = v80;
  Class v46 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v45 setCallbacks:v46];

  id v47 = objc_allocWithZone((Class)SKIDirectInvocationPayload);
  NSString v48 = String._bridgeToObjectiveC()();
  id v49 = [v47 initWithIdentifier:v48];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_AB370;
  AnyHashable.init<A>(_:)();
  uint64_t v51 = Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.query.getter();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v51;
  *(void *)(inited + 80) = v52;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  Class v53 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v49 setUserData:v53];

  uint64_t v54 = self;
  id v55 = [objc_allocWithZone((Class)SKIDirectInvocationContext) init];
  id v56 = [v54 runSiriKitExecutorCommandWithContext:v55 payload:v49];

  NSString v57 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [v57 encodeObject:v56 forKey:NSKeyedArchiveRootObjectKey];
  id v58 = [objc_allocWithZone((Class)SASessionHandoffPayload) init];
  id v59 = [v57 encodedData];
  uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v62 = v61;

  Class v63 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v60, v62);
  [v58 setSessionHandoffData:v63];

  [v45 setHandoffPayload:v58];
  type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for NSNumber);
  Class v64 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  [v45 setIsSiriXRequest:v64];

  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v65, v66))
  {
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v67 = 0;
    _os_log_impl(&dword_0, v65, v66, "PegasusACEConverters: returning from makePushOff helper", v67, 2u);
    swift_slowDealloc();
    uint64_t v69 = v75;
    id v68 = v76;
    unint64_t v70 = v74;
    uint64_t v71 = v78;
    uint64_t v72 = v79;
  }
  else
  {
    id v68 = v65;
    uint64_t v69 = v49;
    unint64_t v70 = v57;
    uint64_t v72 = v58;
    uint64_t v71 = v56;
    id v56 = v78;
    id v58 = v79;
    uint64_t v65 = v74;
    id v49 = v75;
    NSString v57 = v76;
  }

  return v45;
}

void specialized static PegasusACEConverters.makePushOff(cmdBuilder:)(uint64_t a1)
{
  uint64_t v63 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  uint64_t v2 = *(void *)(v63 - 8);
  uint64_t v3 = __chkstk_darwin(v63);
  unint64_t v62 = (void (**)(char *, uint64_t))((char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  NSString v6 = (char *)&v58 - v5;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v60 = *(uint8_t **)(v7 - 8);
  __chkstk_darwin(v7);
  id v58 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PushOffBuilderParams();
  uint64_t v13 = *(void (***)(char *, uint64_t))(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v61 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v59 = v7;
  __swift_project_value_buffer(v7, (uint64_t)static Logger.information);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "PegasusACEConverters: In makePushOff static function", v17, 2u);
    swift_slowDealloc();
  }

  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
  uint64_t v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1, v18) == 1)
  {
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    uint64_t v20 = v2;
  }
  else
  {
    if ((*(unsigned int (**)(char *, uint64_t))(v19 + 88))(v11, v18) == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.pushOff(_:))
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v11, v18);
      NSString v21 = v13;
      NSString v22 = v61;
      ((void (*)(char *, char *, uint64_t))v13[4])(v61, v11, v12);
      id v23 = specialized static PegasusACEConverters.makePushOff(params:)();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v24, v25))
      {
        Class v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Class v26 = 0;
        _os_log_impl(&dword_0, v24, v25, "PegasusACEConverters: Was able to get pushOff object from helper", v26, 2u);
        swift_slowDealloc();
      }

      uint64_t v27 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      uint64_t v30 = HIBYTE(v29) & 0xF;
      if ((v29 & 0x2000000000000000) == 0) {
        uint64_t v30 = v27 & 0xFFFFFFFFFFFFLL;
      }
      id v31 = v60;
      if (v30)
      {
        id v32 = v23;
        Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
        NSString v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v32 setAceId:v33];

        uint64_t v34 = v59;
        NSString v35 = v58;
        (*((void (**)(void))v31 + 2))();
        id v36 = v32;
        uint64_t v37 = Logger.logObject.getter();
        Class v38 = v31;
        os_log_type_t v39 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v37, v39))
        {
          unint64_t v62 = v21;
          uint64_t v63 = v12;
          Class v40 = (uint8_t *)swift_slowAlloc();
          uint64_t v65 = (char *)swift_slowAlloc();
          *(_DWORD *)Class v40 = 136315138;
          id v41 = [v36 aceId];
          if (v41)
          {
            os_log_type_t v42 = v41;
            uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v45 = v44;

            uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, (uint64_t *)&v65);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_0, v37, v39, "PegasusACEConverters: pushOff aceID %s", v40, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*((void (**)(char *, uint64_t))v60 + 1))(v58, v59);
            v62[1](v61, v63);
          }
          else
          {

            __break(1u);
          }
          return;
        }

        (*((void (**)(char *, uint64_t))v38 + 1))(v35, v34);
      }
      else
      {
        id v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v55, v56))
        {
          NSString v57 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)NSString v57 = 0;
          _os_log_impl(&dword_0, v55, v56, "PegasusACEConverters: Was unable to get aceID from SiriCommandBuilder", v57, 2u);
          swift_slowDealloc();
        }
      }
      v21[1](v22, v12);
      return;
    }
    uint64_t v20 = v2;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v18);
  }
  Class v46 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  id v47 = v6;
  NSString v48 = v6;
  uint64_t v49 = v63;
  v46(v48, a1, v63);
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    unint64_t v61 = (char *)swift_slowAlloc();
    uint64_t v65 = v61;
    *(_DWORD *)uint64_t v52 = 136315138;
    uint64_t v60 = v52 + 4;
    v46((char *)v62, (uint64_t)v47, v49);
    uint64_t v53 = String.init<A>(describing:)();
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v47, v49);
    _os_log_impl(&dword_0, v50, v51, "PegasusACEConverters: Unexpected type for app punch out %s", v52, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v47, v49);
  }
}

id specialized static PegasusACEConverters.makeRecordLocationActivity(params:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  NSString v6 = (char *)&v16 - v5;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [objc_allocWithZone((Class)SARecordLocationActivity) init];
  Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.location.getter();
  id v12 = specialized static PegasusACEConverters.makeLocation(params:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  [v11 setLocation:v12];

  Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.sourceType.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType.default(_:), v0);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType and conformance Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType and conformance Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v1 + 8);
  v13(v4, v0);
  v13(v6, v0);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 setSourceType:v14];

  return v11;
}

void *specialized static PegasusACEConverters.makeRecordLocationActivity(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.recordLocationActivity(_:), (uint64_t (*)(char *))specialized static PegasusACEConverters.makeRecordLocationActivity(params:), "Unexpected type for record location activity %s");
}

id specialized static PegasusACEConverters.makePhoneCall(params:)()
{
  id v0 = [objc_allocWithZone((Class)SAPhone) init];
  Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.phoneNumber.getter();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setNumber:v1];

  Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.name.getter();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setLabel:v2];

  id v3 = [objc_allocWithZone((Class)SAPersonAttribute) init];
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 setDataType:v4];

  [v3 setTypedData:v0];
  Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.phoneNumber.getter();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 setData:v5];

  Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.name.getter();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 setDisplayText:v6];

  id v7 = [objc_allocWithZone((Class)SAPhoneCall) init];
  [v7 setCallRecipient:v3];

  return v7;
}

void *specialized static PegasusACEConverters.makePhoneCall(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.phoneCall(_:), (uint64_t (*)(char *))specialized static PegasusACEConverters.makePhoneCall(params:));
}

id specialized static PegasusACEConverters.makeSwitchProfile(cmdBuilder:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v0 - 8);
  NSString v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  NSString v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v2, 1, v7) == 1)
  {
    outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 88))(v2, v7) != enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.switchProfile(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v2, v7);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v8 + 96))(v2, v7);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  id v9 = [objc_allocWithZone((Class)SAProfileSwitch) init];
  Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams.userID.getter();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setSharedUserId:v10];

  uint64_t v11 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    id v15 = v9;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v15 setAceId:v16];
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v9;
}

id specialized static PegasusACEConverters.makeUnlockDevice(cmdBuilder:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v0 - 8);
  NSString v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UnlockDeviceBuilderParams();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  NSString v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v2, 1, v7) == 1)
  {
    outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 88))(v2, v7) != enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.unlockDevice(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v2, v7);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v8 + 96))(v2, v7);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  id v9 = specialized static PegasusACEConverters.makeUnlockDevice(params:)((uint64_t)v6, (Class *)SAUIUnlockDevice_ptr, (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceBuilderParams.successCommands.getter, (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceBuilderParams.failureCommands.getter);
  uint64_t v10 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v13)
  {
    id v14 = v9;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 setAceId:v15];
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v9;
}

id specialized static PegasusACEConverters.makeUnlockDevice(params:)(uint64_t a1, Class *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v14 = (char *)v55 - v13;
  id v57 = [objc_allocWithZone(*a2) init];
  uint64_t v15 = a3();
  unint64_t v68 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v17 = &unk_AB000;
  if (v16)
  {
    v55[1] = a1;
    os_log_type_t v56 = a4;
    uint64_t v18 = v9 + 16;
    unint64_t v62 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v9 + 16);
    unint64_t v19 = v15 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v20 = *(void *)(v9 + 72);
    uint64_t v60 = v9;
    *(void *)&long long v61 = v20;
    NSString v21 = (void (**)(char *, uint64_t))(v9 + 8);
    v55[0] = v15;
    swift_bridgeObjectRetain();
    long long v58 = xmmword_AB670;
    uint64_t v59 = v18;
    while (1)
    {
      uint64_t v22 = v62(v14, v19, v8);
      uint64_t v23 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter(v22);
      if (v23)
      {
        uint64_t v24 = (void *)v23;
        uint64_t v64 = &OBJC_PROTOCOL___SAClientBoundCommand;
        if (swift_dynamicCastObjCProtocolConditional()) {
          goto LABEL_10;
        }
        uint64_t v63 = &OBJC_PROTOCOL___SAServerBoundCommand;
        uint64_t v25 = swift_dynamicCastObjCProtocolConditional();
        if (v25)
        {
          uint64_t v26 = v25;
          id v27 = objc_allocWithZone((Class)SASendCommands);
          id v28 = v24;
          id v29 = [v27 init];
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v30 = swift_allocObject();
          *(_OWORD *)(v30 + 16) = v58;
          *(void *)(v30 + 32) = v26;
          uint64_t v65 = v30;
          specialized Array._endMutation()();
          id v31 = v28;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v29 setCommands:isa];

LABEL_10:
          (*v21)(v14, v8);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((char *)&dword_10 + (v68 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                         + (v68 & 0xFFFFFFFFFFFFFF8)) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          goto LABEL_5;
        }
      }
      (*v21)(v14, v8);
LABEL_5:
      v19 += v61;
      if (!--v16)
      {
        swift_bridgeObjectRelease();
        uint64_t v9 = v60;
        a4 = v56;
        uint64_t v17 = (_OWORD *)&unk_AB000;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class v33 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v57 setSuccessCommands:v33];

  uint64_t v34 = a4();
  unint64_t v68 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v35 = *(void *)(v34 + 16);
  if (v35)
  {
    uint64_t v37 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v36 = v9 + 16;
    unint64_t v62 = v37;
    unint64_t v38 = v34 + ((*(unsigned __int8 *)(v36 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 64));
    uint64_t v39 = *(void *)(v36 + 56);
    Class v40 = (void (**)(char *, uint64_t))(v36 - 8);
    *(void *)&long long v58 = v34;
    swift_bridgeObjectRetain();
    long long v61 = v17[103];
    uint64_t v60 = v36;
    while (1)
    {
      uint64_t v41 = v62(v12, v38, v8);
      uint64_t v42 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter(v41);
      if (v42)
      {
        uint64_t v43 = (void *)v42;
        uint64_t v67 = &OBJC_PROTOCOL___SAClientBoundCommand;
        if (swift_dynamicCastObjCProtocolConditional()) {
          goto LABEL_23;
        }
        os_log_type_t v66 = &OBJC_PROTOCOL___SAServerBoundCommand;
        uint64_t v44 = swift_dynamicCastObjCProtocolConditional();
        if (v44)
        {
          uint64_t v45 = v44;
          id v46 = objc_allocWithZone((Class)SASendCommands);
          id v47 = v43;
          id v48 = [v46 init];
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v49 = swift_allocObject();
          *(_OWORD *)(v49 + 16) = v61;
          *(void *)(v49 + 32) = v45;
          uint64_t v65 = v49;
          specialized Array._endMutation()();
          id v50 = v47;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
          Class v51 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v48 setCommands:v51];

LABEL_23:
          (*v40)(v12, v8);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((char *)&dword_10 + (v68 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                         + (v68 & 0xFFFFFFFFFFFFFF8)) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          goto LABEL_18;
        }
      }
      (*v40)(v12, v8);
LABEL_18:
      v38 += v39;
      if (!--v35)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  Class v52 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v53 = v57;
  [v57 setFailureCommands:v52];

  return v53;
}

id specialized static PegasusACEConverters.makeUnlockDeviceWithWatch(cmdBuilder:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v0 - 8);
  NSString v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UnlockDeviceWithWatchBuilderParams();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  NSString v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v2, 1, v7) == 1)
  {
    outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 88))(v2, v7) != enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.unlockDeviceWithWatch(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v2, v7);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v8 + 96))(v2, v7);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  id v9 = specialized static PegasusACEConverters.makeUnlockDevice(params:)((uint64_t)v6, (Class *)SAUIUnlockDeviceWithWatch_ptr, (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceWithWatchBuilderParams.successCommands.getter, (uint64_t (*)(void))&Apple_Parsec_Siri_V2alpha_UnlockDeviceWithWatchBuilderParams.failureCommands.getter);
  uint64_t v10 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v13)
  {
    id v14 = v9;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 setAceId:v15];
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v9;
}

id specialized static PegasusACEConverters.makeOpenLink(cmdBuilder:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v0 - 8);
  NSString v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_OpenLinkBuilderParams();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v11 + 88))(v5, v10) != enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.openLink(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v5, v10);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v11 + 96))(v5, v10);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  id v12 = [objc_allocWithZone((Class)SAUIOpenLink) init];
  Apple_Parsec_Siri_V2alpha_OpenLinkBuilderParams.ref.getter();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v2, 1, v13) != 1)
  {
    URL._bridgeToObjectiveC()(v15);
    uint64_t v16 = v17;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v2, v13);
  }
  [v12 setRef:v16];

  uint64_t v18 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0) {
    uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    id v22 = v12;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v22 setAceId:v23];
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v12;
}

id specialized static PegasusACEConverters.makeSetSiriAuthorizationForApp(cmdBuilder:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v0 - 8);
  NSString v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SetSiriAuthorizationForAppBuilderParams();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v2, 1, v7) == 1)
  {
    outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 88))(v2, v7) != enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.setSiriAuthorizationForApp(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v2, v7);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v8 + 96))(v2, v7);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  id v9 = [objc_allocWithZone((Class)SASettingSetSiriAuthorizationForApp) init];
  Apple_Parsec_Siri_V2alpha_SetSiriAuthorizationForAppBuilderParams.appBundleID.getter();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setBundleId:v10];

  uint64_t v11 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    id v15 = v9;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v15 setAceId:v16];
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v9;
}

id specialized static PegasusACEConverters.makeExtendCurrentTTS(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_ExtendCurrentTTS, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.extendCurrentTts(_:), (Class *)SAUIExtendCurrentTTS_ptr);
}

id specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)(uint64_t a1, uint64_t (*a2)(void), _DWORD *a3, Class *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v24 - v12;
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14) == 1)
  {
    outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 88))(v9, v14) != *a3)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v14);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v15 + 96))(v9, v14);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
  id v16 = [objc_allocWithZone(*a4) init];
  uint64_t v17 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0) {
    uint64_t v20 = v17 & 0xFFFFFFFFFFFFLL;
  }
  if (v20)
  {
    id v21 = v16;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v21 setAceId:v22];
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v16;
}

id specialized static PegasusACEConverters.makeCancelCurrentTTS(cmdBuilder:)(uint64_t a1)
{
  return specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)(a1, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Siri_V2alpha_CancelCurrentTTS, &enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.cancelCurrentTts(_:), (Class *)SAUICancelCurrentTTS_ptr);
}

id specialized static PegasusACEConverters.makeSearchMarketplace(cmdBuilder:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v0 - 8);
  NSString v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SearchMarketplaceParams();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v2, 1, v7) == 1)
  {
    outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    return 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 88))(v2, v7) != enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.searchMarketplace(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v2, v7);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v8 + 96))(v2, v7);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  id v9 = [objc_allocWithZone((Class)SAAppsSearchMarketplace) init];
  Apple_Parsec_Siri_V2alpha_SearchMarketplaceParams.marketplace.getter();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setMarketplace:v10];

  Apple_Parsec_Siri_V2alpha_SearchMarketplaceParams.keyword.getter();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setKeyword:v11];

  uint64_t v12 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (v15)
  {
    id v16 = v9;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v16 setAceId:v17];
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v9;
}

ValueMetadata *type metadata accessor for PegasusACEConverters()
{
  return &type metadata for PegasusACEConverters;
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType and conformance Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t RunPommesRequestFlow.__allocating_init(pommesResponse:identifiedUser:outputPublisher:)(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  outlined init with take of IdentifiedUser?(a2, v6 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_identifiedUser);
  outlined init with take of PatternFlowProviding(a3, v6 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher);
  uint64_t v7 = v6 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(void *)(v7 + 32) = 0;
  *(unsigned char *)(v7 + 40) = 2;
  return v6;
}

id RunPommesRequestFlow.pommesResponse.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t RunPommesRequestFlow.identifiedUser.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of IdentifiedUser?(v1 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_identifiedUser, a1);
}

uint64_t RunPommesRequestFlow.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher, a1);
}

uint64_t RunPommesRequestFlow.init(pommesResponse:identifiedUser:outputPublisher:)(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)(v3 + 16) = a1;
  outlined init with take of IdentifiedUser?(a2, v3 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_identifiedUser);
  outlined init with take of PatternFlowProviding(a3, v3 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher);
  uint64_t v5 = v3 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(void *)(v5 + 32) = 0;
  *(unsigned char *)(v5 + 40) = 2;
  return v3;
}

uint64_t outlined init with take of IdentifiedUser?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of IdentifiedUser?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t RunPommesRequestFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state);
  swift_beginAccess();
  uint64_t result = outlined init with copy of RunPommesRequestFlow.State(v3, (uint64_t)v7);
  if (v8)
  {
    if (v8 == 1)
    {
      *(void *)a1 = *(void *)&v7[0];
    }
    else
    {
      lazy protocol witness table accessor for type RunPommesRequestFlow.InvalidStateError and conformance RunPommesRequestFlow.InvalidStateError();
      uint64_t result = swift_allocError();
      *uint64_t v6 = 0xD00000000000002DLL;
      v6[1] = 0x80000000000B0870;
      *(void *)a1 = result;
    }
    char v5 = 1;
  }
  else
  {
    uint64_t result = outlined init with take of PatternFlowProviding(v7, a1);
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 40) = v5;
  return result;
}

uint64_t outlined init with copy of RunPommesRequestFlow.State(uint64_t *a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type RunPommesRequestFlow.InvalidStateError and conformance RunPommesRequestFlow.InvalidStateError()
{
  unint64_t result = lazy protocol witness table cache variable for type RunPommesRequestFlow.InvalidStateError and conformance RunPommesRequestFlow.InvalidStateError;
  if (!lazy protocol witness table cache variable for type RunPommesRequestFlow.InvalidStateError and conformance RunPommesRequestFlow.InvalidStateError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunPommesRequestFlow.InvalidStateError and conformance RunPommesRequestFlow.InvalidStateError);
  }
  return result;
}

uint64_t RunPommesRequestFlow.execute()(uint64_t a1)
{
  v2[42] = a1;
  v2[43] = v1;
  uint64_t v3 = type metadata accessor for ExternalActivationRequest();
  v2[44] = v3;
  v2[45] = *(void *)(v3 - 8);
  v2[46] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[47] = v4;
  v2[48] = *(void *)(v4 - 8);
  v2[49] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  v2[50] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for IdentifiedUser();
  v2[51] = v5;
  v2[52] = *(void *)(v5 - 8);
  v2[53] = swift_task_alloc();
  return _swift_task_switch(RunPommesRequestFlow.execute(), 0, 0);
}

uint64_t RunPommesRequestFlow.execute()()
{
  id v1 = [objc_allocWithZone((Class)SARDRunPOMMESRequest) init];
  v0[54] = (uint64_t)v1;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setRequestType:v2];

  uint64_t v3 = (void *)PommesResponse.asrRecognition.getter();
  [v1 setRecognition:v3];

  PommesResponse.searchRequestUtterance.getter();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setUtterance:v4];

  PommesResponse.responseVariantResult.getter();
  if (v5)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v6 = 0;
  }
  uint64_t v7 = v0[51];
  uint64_t v8 = v0[52];
  uint64_t v9 = v0[50];
  uint64_t v10 = v0[43];
  [v1 setResponseVariantResult:v6];

  outlined init with copy of IdentifiedUser?(v10 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_identifiedUser, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    outlined destroy of IdentifiedUser?(v0[50]);
    PommesResponse.sharedUserId.getter();
    if (v11)
    {
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v12 = 0;
    }
    [v1 setUserId:v12];
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[52] + 32))(v0[53], v0[50], v0[51]);
    IdentifiedUser.sharedUserId.getter();
    if (v13)
    {
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v14 = 0;
    }
    uint64_t v16 = v0[52];
    uint64_t v15 = v0[53];
    uint64_t v17 = v0[51];
    [v1 setUserId:v14];

    [v1 setUserIdentityClassification:SAUserIdentityClassificationConfidentValue];
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  uint64_t v18 = PommesResponse.encodedNLUserParses.getter();
  if (v19 >> 60 != 15)
  {
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v1 setNlUserParses:isa];

    outlined consume of Data?(v20, v21);
  }
  uint64_t v23 = PommesResponse.encodedNLFallbackParse.getter();
  if (v24 >> 60 != 15)
  {
    uint64_t v25 = v23;
    unint64_t v26 = v24;
    Class v27 = Data._bridgeToObjectiveC()().super.isa;
    [v1 setNlFallbackParse:v27];

    outlined consume of Data?(v25, v26);
  }
  uint64_t v29 = v0[48];
  uint64_t v28 = v0[49];
  uint64_t v30 = v0[47];
  id v31 = [objc_allocWithZone((Class)SAStartLocalRequest) init];
  v0[55] = (uint64_t)v31;
  id v32 = v31;
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v32 setAceId:v33];

  [v32 setRefId:0];
  id v34 = v1;
  id v35 = [v32 aceId];
  [v34 setRefId:v35];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_AB670;
  *(void *)(v36 + 32) = v34;
  uint64_t v55 = v36;
  specialized Array._endMutation()();
  id v37 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class v38 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v32, "setClientBoundCommands:", v38, v55);

  id v39 = [objc_allocWithZone((Class)AFRequestInfo) init];
  v0[56] = (uint64_t)v39;
  [v39 setStartLocalRequest:v32];
  [v39 setActivationEvent:7];
  [v39 setOptions:0];
  id v40 = v39;
  ExternalActivationRequest.init(requestInfo:flowActivity:)();
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  v0[57] = __swift_project_value_buffer(v41, (uint64_t)static Logger.information);
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl(&dword_0, v42, v43, "Publishing ExternalActivationRequest from RunPommesRequestFlow", v44, 2u);
    swift_slowDealloc();
  }
  uint64_t v46 = v0[45];
  uint64_t v45 = v0[46];
  uint64_t v48 = v0[43];
  uint64_t v47 = v0[44];

  uint64_t v49 = (void *)(v48 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher);
  uint64_t v50 = *(void *)(v48 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher + 24);
  uint64_t v51 = v49[4];
  __swift_project_boxed_opaque_existential_1(v49, v50);
  v0[29] = v47;
  v0[30] = (uint64_t)&protocol witness table for ExternalActivationRequest;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 26);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v46 + 16))(boxed_opaque_existential_1, v45, v47);
  id v53 = (void *)swift_task_alloc();
  v0[58] = (uint64_t)v53;
  *id v53 = v0;
  v53[1] = RunPommesRequestFlow.execute();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 26, v50, v51);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  NSString v2 = *v1;
  *(void *)(*v1 + 472) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = RunPommesRequestFlow.execute();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v2 + 208);
    uint64_t v3 = RunPommesRequestFlow.execute();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  NSString v2 = *(void *)(v0 + 360);
  id v1 = *(void *)(v0 + 368);
  NSString v4 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 352);
  *(void *)(v0 + 184) = v3;
  *(void *)(v0 + 192) = &protocol witness table for ExternalActivationRequest;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 160));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 32))(boxed_opaque_existential_1, v1, v3);
  *(unsigned char *)(v0 + 200) = 0;
  outlined init with take of RunPommesRequestFlow.State((long long *)(v0 + 160), (_OWORD *)(v0 + 112));
  NSString v6 = v4 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state;
  swift_beginAccess();
  outlined assign with take of RunPommesRequestFlow.State(v0 + 112, v6);
  swift_endAccess();
  uint64_t v8 = *(void **)(v0 + 440);
  uint64_t v7 = *(void **)(v0 + 448);
  uint64_t v9 = *(void **)(v0 + 432);
  static ExecuteResponse.complete()();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  NSString v14 = v0;
  (*(void (**)(void, void))(*(void *)(v0 + 360) + 8))(*(void *)(v0 + 368), *(void *)(v0 + 352));
  __swift_destroy_boxed_opaque_existential_1(v0 + 208);
  swift_errorRetain();
  swift_errorRetain();
  id v1 = Logger.logObject.getter();
  NSString v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    NSString v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v1, v2, "Unable to publish AceOutput from RunPommesRequestFlow with error: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  NSString v6 = *(void *)(v0 + 344);
  *(void *)(v0 + 16) = *(void *)(v0 + 472);
  *(unsigned char *)(v0 + 56) = 1;
  outlined init with take of RunPommesRequestFlow.State((long long *)(v0 + 16), (_OWORD *)(v0 + 64));
  uint64_t v7 = v6 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state;
  swift_beginAccess();
  outlined assign with take of RunPommesRequestFlow.State(v0 + 64, v7);
  swift_endAccess();
  uint64_t v9 = *(void **)(v0 + 440);
  uint64_t v8 = *(void **)(v0 + 448);
  uint64_t v10 = *(void **)(v0 + 432);
  static ExecuteResponse.complete()();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t outlined destroy of IdentifiedUser?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t RunPommesRequestFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RunPommesRequestFlow.InvalidStateError()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RunPommesRequestFlow.deinit()
{
  outlined destroy of IdentifiedUser?(v0 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_identifiedUser);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher);
  outlined destroy of RunPommesRequestFlow.State(v0 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state);
  return v0;
}

uint64_t RunPommesRequestFlow.__deallocating_deinit()
{
  outlined destroy of IdentifiedUser?((uint64_t)v0 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_identifiedUser);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v0 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_outputPublisher);
  outlined destroy of RunPommesRequestFlow.State((uint64_t)v0 + OBJC_IVAR____TtC21InformationFlowPlugin20RunPommesRequestFlow_state);
  uint64_t v1 = *((unsigned int *)*v0 + 12);
  uint64_t v2 = *((unsigned __int16 *)*v0 + 26);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t protocol witness for Flow.on(input:) in conformance RunPommesRequestFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance RunPommesRequestFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t protocol witness for Flow.execute() in conformance RunPommesRequestFlow(uint64_t a1)
{
  NSString v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 160) + **(int **)(**(void **)v1 + 160));
  NSString v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *NSString v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance RunPommesRequestFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

_OWORD *outlined init with take of RunPommesRequestFlow.State(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(long long *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t outlined assign with take of RunPommesRequestFlow.State(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for RunPommesRequestFlow()
{
  uint64_t result = type metadata singleton initialization cache for RunPommesRequestFlow;
  if (!type metadata singleton initialization cache for RunPommesRequestFlow) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RunPommesRequestFlow and conformance RunPommesRequestFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type RunPommesRequestFlow and conformance RunPommesRequestFlow;
  if (!lazy protocol witness table cache variable for type RunPommesRequestFlow and conformance RunPommesRequestFlow)
  {
    type metadata accessor for RunPommesRequestFlow();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunPommesRequestFlow and conformance RunPommesRequestFlow);
  }
  return result;
}

uint64_t outlined destroy of RunPommesRequestFlow.State(uint64_t a1)
{
  return a1;
}

uint64_t ObjC metadata update function for RunPommesRequestFlow()
{
  return type metadata accessor for RunPommesRequestFlow();
}

void type metadata completion function for RunPommesRequestFlow()
{
  type metadata accessor for IdentifiedUser?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void *initializeBufferWithCopyOfBuffer for RunPommesRequestFlow.InvalidStateError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for RunPommesRequestFlow.InvalidStateError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for RunPommesRequestFlow.InvalidStateError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for RunPommesRequestFlow.InvalidStateError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RunPommesRequestFlow.InvalidStateError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RunPommesRequestFlow.InvalidStateError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for RunPommesRequestFlow.InvalidStateError()
{
  return &unk_C9770;
}

uint64_t destroy for RunPommesRequestFlow.State(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)result + 2;
  }
  if (v1 == 1) {
    return swift_errorRelease();
  }
  if (!v1) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for RunPommesRequestFlow.State(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    uint64_t v5 = *a2;
    swift_errorRetain();
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    long long v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for RunPommesRequestFlow.State(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_errorRelease();
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v7 = *a2;
      swift_errorRetain();
      *(void *)a1 = v7;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v8 = *(_OWORD *)a2;
      long long v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      uint64_t v6 = a2[3];
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RunPommesRequestFlow.State(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_errorRelease();
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for RunPommesRequestFlow.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RunPommesRequestFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for RunPommesRequestFlow.State(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for RunPommesRequestFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

void *type metadata accessor for RunPommesRequestFlow.State()
{
  return &unk_C9808;
}

uint64_t Input.userCancelled.getter()
{
  uint64_t v0 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unsigned int v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for USOParse();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Parse();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v8);
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v11, v0);
    uint64_t v13 = Parse.DirectInvocation.identifier.getter();
    uint64_t v15 = v14;
    uint64_t v16 = (void *)static SiriKitDirectInvocationPayloads.cancel.getter();
    id v17 = [v16 identifier];

    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    if (v13 == v18 && v15 == v20) {
      char v22 = 1;
    }
    else {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  else if (v12 == enum case for Parse.uso(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v8);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
    char v22 = USOParse.userCancelled.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    char v22 = 0;
  }
  return v22 & 1;
}

uint64_t USOParse.userConfirmationResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v2 = type metadata accessor for USOParse();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v43 = v2;
  uint64_t v44 = v3;
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v42 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v40 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v1;
  USOParse.userParse.getter();
  uint64_t v20 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (*(void *)(v20 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v10, v20 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), v15);
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v10, v21, 1, v15);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v10, 1, v15) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v10);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.information);
    uint64_t v23 = v44;
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
    uint64_t v25 = v19;
    uint64_t v26 = v43;
    v24(v7, v25, v43);
    Class v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v47 = v41;
      *(_DWORD *)uint64_t v29 = 136315138;
      id v40 = v29 + 4;
      v24(v42, (uint64_t)v7, v26);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v26);
      _os_log_impl(&dword_0, v27, v28, "Invalid USOParse while looking for user confirmation. Parse has no UDAs: %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v26);
    }

    goto LABEL_16;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v10, v15);
  if (Siri_Nlu_External_UserDialogAct.hasRejected.getter())
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    uint64_t v32 = enum case for ConfirmationResponse.rejected(_:);
    uint64_t v33 = type metadata accessor for ConfirmationResponse();
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = v45;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 104))(v45, v32, v33);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v33);
  }
  char v36 = Siri_Nlu_External_UserDialogAct.hasAccepted.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (v36)
  {
    uint64_t v37 = enum case for ConfirmationResponse.confirmed(_:);
    uint64_t v33 = type metadata accessor for ConfirmationResponse();
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = v45;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 104))(v45, v37, v33);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v33);
  }
LABEL_16:
  uint64_t v39 = type metadata accessor for ConfirmationResponse();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v45, 1, 1, v39);
}

uint64_t Input.userConfirmationResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v1 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for USOParse();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Parse();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  int v13 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v12, v9);
  if (v13 != enum case for Parse.directInvocation(_:))
  {
    if (v13 == enum case for Parse.uso(_:))
    {
      (*(void (**)(char *, uint64_t))(v10 + 96))(v12, v9);
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
      USOParse.userConfirmationResponse.getter(v39);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {
      uint64_t v34 = type metadata accessor for ConfirmationResponse();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v39, 1, 1, v34);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
  }
  (*(void (**)(char *, uint64_t))(v10 + 96))(v12, v9);
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v12, v1);
  uint64_t v14 = Parse.DirectInvocation.identifier.getter();
  uint64_t v16 = v15;
  uint64_t v17 = (void *)static SiriKitDirectInvocationPayloads.reject.getter();
  id v18 = [v17 identifier];

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  if (v19 == v14 && v21 == v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v23)
  {
LABEL_13:
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    swift_bridgeObjectRelease();
    uint64_t v31 = enum case for ConfirmationResponse.rejected(_:);
    uint64_t v32 = type metadata accessor for ConfirmationResponse();
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v29 = v39;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 104))(v39, v31, v32);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
  }
  uint64_t v24 = (void *)static SiriKitDirectInvocationPayloads.confirm.getter();
  id v25 = [v24 identifier];

  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  if (v26 == v14 && v28 == v16)
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    uint64_t v29 = v39;
LABEL_18:
    uint64_t v36 = enum case for ConfirmationResponse.confirmed(_:);
    uint64_t v32 = type metadata accessor for ConfirmationResponse();
    uint64_t v33 = *(void *)(v32 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 104))(v29, v36, v32);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
  }
  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v29 = v39;
  if (v35) {
    goto LABEL_18;
  }
  uint64_t v37 = type metadata accessor for ConfirmationResponse();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v29, 1, 1, v37);
}

uint64_t USOParse.userCancelled.getter()
{
  uint64_t v1 = type metadata accessor for USOParse();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v36 = v1;
  uint64_t v37 = v2;
  uint64_t v3 = __chkstk_darwin(v1);
  char v35 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v33 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v0;
  USOParse.userParse.getter();
  uint64_t v19 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (*(void *)(v19 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v9, v19 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), v14);
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v9, v20, 1, v14);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v9);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.information);
    uint64_t v22 = v37;
    char v23 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
    uint64_t v24 = v18;
    uint64_t v25 = v36;
    v23(v6, v24, v36);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v39 = v34;
      *(_DWORD *)uint64_t v28 = 136315138;
      v33[1] = v28 + 4;
      v23(v35, (uint64_t)v6, v25);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v25);
      _os_log_impl(&dword_0, v26, v27, "Invalid USOParse while looking for user cancellation. Parse has no UDAs: %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v25);
    }

    char v31 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v9, v14);
    char v31 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  return v31 & 1;
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v23[1] = a2;
  void v23[2] = a3;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.information);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_0, v8, v9, "CommandFactory: make direct & delayed commands", v10, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for PerformanceUtil();
  uint64_t v11 = static PerformanceUtil.shared.getter();
  __chkstk_darwin(v11);
  Date.init()();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SABaseCommand]);
  uint64_t v21 = &v19;
  uint64_t v22 = v12;
  uint64_t v20 = partial apply for closure #1 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:);
  char v19 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  int v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v6, v3);
  v23[0] = v25;
  uint64_t v14 = static PerformanceUtil.shared.getter();
  __chkstk_darwin(v14);
  Date.init()();
  uint64_t v21 = &v19;
  uint64_t v22 = v12;
  uint64_t v20 = partial apply for closure #2 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:);
  char v19 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  v13(v6, v3);
  unint64_t v15 = v24;
  uint64_t v16 = static PerformanceUtil.shared.getter();
  __chkstk_darwin(v16);
  Date.init()();
  uint64_t v21 = &v19;
  uint64_t v22 = v12;
  uint64_t v20 = partial apply for closure #3 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:);
  char v19 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  v13(v6, v3);
  unint64_t v17 = v24;
  uint64_t v25 = v23[0];
  specialized Array.append<A>(contentsOf:)(v15, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
  specialized Array.append<A>(contentsOf:)(v17, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
  return v25;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for RREntity() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  }
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (*v2 & 0xFFFFFFFFFFFFFF8));
    uint64_t v7 = v6 + v5;
    if (!__OFADD__(v6, v5)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v17 + v5;
  if (__OFADD__(v17, v5)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v2 = v8;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v7 <= *(void *)((char *)&dword_18 + (v8 & 0xFFFFFFFFFFFFFF8)) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v8 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *unint64_t v2 = v11;
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((char *)&dword_10 + (*v2 & 0xFFFFFFFFFFFFFF8));
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((char *)&dword_10 + (*v2 & 0xFFFFFFFFFFFFFF8)) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

void *static CommandFactory.makeCommands(forComponent:)(uint64_t a1)
{
  return specialized static CommandFactory.makeCommands(forComponent:)(a1, (uint64_t (*)(uint64_t))&Apple_Parsec_Siri_V2alpha_ButtonViewComponent.commands.getter);
}

{
  return specialized static CommandFactory.makeCommands(forComponent:)(a1, (uint64_t (*)(uint64_t))&Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.siriCommandBuilder.getter);
}

void *static CommandFactory.makeCommands(forListItem:)(uint64_t a1)
{
  return specialized static CommandFactory.makeCommands(forComponent:)(a1, (uint64_t (*)(uint64_t))&Apple_Parsec_Siri_V2alpha_DisambiguationListItem.commands.getter);
}

id Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asClientBoundAceCommand.getter()
{
  uint64_t v0 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = (void *)v0;
  uint64_t v2 = swift_dynamicCastObjCProtocolConditional();
  if (!v2)
  {
    uint64_t v4 = swift_dynamicCastObjCProtocolConditional();
    if (v4)
    {
      uint64_t v5 = v4;
      id v6 = objc_allocWithZone((Class)SASendCommands);
      id v7 = v1;
      id v3 = [v6 init];
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_AB670;
      *(void *)(v8 + 32) = v5;
      specialized Array._endMutation()();
      id v9 = v7;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v3 setCommands:isa];

      return v3;
    }

    return 0;
  }
  return (id)v2;
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(uint8_t **)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v83 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v80 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v84 = ((char *)&v74 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  id v81 = (char *)&v74 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v74 - v16;
  __chkstk_darwin(v15);
  char v19 = (char *)&v74 - v18;
  uint64_t v82 = v0;
  Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.information);
    BOOL v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      int64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v23 = 0;
      _os_log_impl(&dword_0, v21, v22, "InfoViewFactory component missing type", v23, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v6, v7);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  id v78 = (uint8_t *)v1;
  id v79 = v2;
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Logger.information);
  os_log_type_t v27 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v27(v17, v19, v7);
  uint64_t v77 = v26;
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v75 = v8;
    char v31 = (uint8_t *)v30;
    uint64_t v76 = swift_slowAlloc();
    uint64_t v86 = v76;
    *(_DWORD *)char v31 = 136315138;
    uint64_t v74 = v31 + 4;
    v27(v81, v17, v7);
    uint64_t v32 = String.init<A>(describing:)();
    uint64_t v33 = v19;
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v35 = v75;
    uint64_t v36 = *(void (**)(char *, uint64_t))(v75 + 8);
    v36(v17, v7);
    _os_log_impl(&dword_0, v28, v29, "Translating command to Ace: %s", v31, 0xCu);
    swift_arrayDestroy();
    uint64_t v37 = v84;
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v38 = v35;
  }
  else
  {
    uint64_t v36 = *(void (**)(char *, uint64_t))(v8 + 8);
    v36(v17, v7);

    uint64_t v38 = v8;
    uint64_t v37 = v84;
    uint64_t v33 = v19;
  }
  v27((char *)v37, v33, v7);
  int v39 = (*(uint64_t (**)(NSObject *, uint64_t))(v38 + 88))(v37, v7);
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.recordLocationActivity(_:))
  {
    type metadata accessor for PerformanceUtil();
    id v40 = v33;
    uint64_t v41 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v41);
    uint64_t v42 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SARecordLocationActivity?);
    uint64_t v71 = partial apply for closure #8 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
LABEL_39:
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
    swift_release();
    (*((void (**)(char *, uint8_t *))v79 + 1))(v42, v78);
    v36(v40, v7);
    uint64_t v24 = v86;
    uint64_t v55 = v37;
LABEL_40:
    v36((char *)v55, v7);
    return v24;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.appPunchOut(_:))
  {
    type metadata accessor for PerformanceUtil();
    id v40 = v33;
    uint64_t v43 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v43);
    uint64_t v42 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUIAppPunchOut?);
    uint64_t v71 = partial apply for closure #1 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_39;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.startRequest(_:))
  {
    type metadata accessor for PerformanceUtil();
    id v40 = v33;
    uint64_t v44 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v44);
    uint64_t v42 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAStartRequest?);
    uint64_t v71 = partial apply for closure #6 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_39;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showMapPoints(_:))
  {
    type metadata accessor for PerformanceUtil();
    id v40 = v33;
    uint64_t v45 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v45);
    uint64_t v42 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SALocalSearchShowMapPoints?);
    uint64_t v71 = partial apply for closure #4 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_39;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.phoneCall(_:))
  {
    type metadata accessor for PerformanceUtil();
    id v40 = v33;
    uint64_t v46 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v46);
    uint64_t v42 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAPhoneCall?);
    uint64_t v71 = partial apply for closure #11 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_39;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.extendCurrentTts(_:))
  {
    type metadata accessor for PerformanceUtil();
    id v40 = v33;
    uint64_t v47 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v47);
    uint64_t v42 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUIExtendCurrentTTS?);
    uint64_t v71 = partial apply for closure #12 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_39;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.setSiriAuthorizationForApp(_:))
  {
    type metadata accessor for PerformanceUtil();
    id v40 = v33;
    uint64_t v48 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v48);
    uint64_t v42 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASettingSetSiriAuthorizationForApp?);
    uint64_t v71 = partial apply for closure #14 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_39;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.sayIt(_:))
  {
    type metadata accessor for PerformanceUtil();
    id v40 = v33;
    uint64_t v49 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v49);
    uint64_t v42 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUISayIt?);
    uint64_t v71 = partial apply for closure #2 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_39;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showPlaceDetails(_:))
  {
    type metadata accessor for PerformanceUtil();
    id v40 = v33;
    uint64_t v50 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v50);
    uint64_t v42 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SALocalSearchShowPlaceDetails?);
    uint64_t v71 = partial apply for closure #3 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_39;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.unlockDevice(_:))
  {
    type metadata accessor for PerformanceUtil();
    id v40 = v33;
    uint64_t v51 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v51);
    uint64_t v42 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUIUnlockDevice?);
    uint64_t v71 = partial apply for closure #15 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_39;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.openLink(_:))
  {
    type metadata accessor for PerformanceUtil();
    id v40 = v33;
    uint64_t v52 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v52);
    uint64_t v42 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUIOpenLink?);
    uint64_t v71 = partial apply for closure #17 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_39;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.navigationEnd(_:))
  {
    type metadata accessor for PerformanceUtil();
    id v40 = v33;
    uint64_t v53 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v53);
    uint64_t v42 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SALocalSearchNavigationEnd?);
    uint64_t v71 = partial apply for closure #7 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_39;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.unlockDeviceWithWatch(_:))
  {
    type metadata accessor for PerformanceUtil();
    id v40 = v33;
    uint64_t v54 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v54);
    uint64_t v42 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUIUnlockDeviceWithWatch?);
    uint64_t v71 = partial apply for closure #16 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_39;
  }
  id v57 = v33;
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.cancelCurrentTts(_:))
  {
    type metadata accessor for PerformanceUtil();
    uint64_t v58 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v58);
    uint64_t v59 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAUICancelCurrentTTS?);
    uint64_t v71 = partial apply for closure #13 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
LABEL_52:
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
    swift_release();
    (*((void (**)(char *, uint8_t *))v79 + 1))(v59, v78);
    v36(v33, v7);
    uint64_t v24 = v86;
    uint64_t v55 = v37;
    goto LABEL_40;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.switchProfile(_:))
  {
    type metadata accessor for PerformanceUtil();
    uint64_t v60 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v60);
    uint64_t v59 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAProfileSwitch?);
    uint64_t v71 = partial apply for closure #10 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_52;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.pushOff(_:))
  {
    type metadata accessor for PerformanceUtil();
    uint64_t v61 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v61);
    uint64_t v59 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAInitiateHandoffOnCompanion?);
    uint64_t v71 = partial apply for closure #9 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_52;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.searchMarketplace(_:))
  {
    type metadata accessor for PerformanceUtil();
    uint64_t v62 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v62);
    uint64_t v59 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAAppsSearchMarketplace?);
    uint64_t v71 = partial apply for closure #18 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_52;
  }
  if (v39 == enum case for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams.showLocalSearchResult(_:))
  {
    type metadata accessor for PerformanceUtil();
    uint64_t v63 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v63);
    uint64_t v59 = v83;
    Date.init()();
    uint64_t v72 = &v70;
    uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SALocalSearchShowLocalSearchResult?);
    uint64_t v71 = partial apply for closure #5 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter;
    char v70 = 2;
    goto LABEL_52;
  }
  v27(v80, v33, v7);
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.error.getter();
  uint64_t v84 = v64;
  LODWORD(v83) = v65;
  if (os_log_type_enabled(v64, v65))
  {
    os_log_type_t v66 = (uint8_t *)swift_slowAlloc();
    uint64_t v82 = swift_slowAlloc();
    uint64_t v86 = v82;
    id v79 = v66;
    *(_DWORD *)os_log_type_t v66 = 136315138;
    id v78 = v66 + 4;
    v27(v81, v80, v7);
    uint64_t v67 = String.init<A>(describing:)();
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v36(v80, v7);
    uint64_t v69 = v84;
    _os_log_impl(&dword_0, v84, (os_log_type_t)v83, "Unknown (future?) command type: %s", v79, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    v36(v80, v7);
  }
  v36(v57, v7);
  v36((char *)v37, v7);
  return 0;
}

uint64_t closure #1 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of IdentifiedUser?(a1, (uint64_t)v10, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  if (result == 1)
  {
    uint64_t v12 = &_swiftEmptyArrayStorage;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    uint64_t v12 = (void *)specialized static CommandFactory.makeCommands(forDirectExecution:)();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  *a2 = v12;
  return result;
}

uint64_t closure #2 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = &_swiftEmptyArrayStorage;
  int64_t v23 = &_swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v20 = a2;
    uint64_t v21 = v2;
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v12 = v7 + 16;
    os_log_type_t v22 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v15 = *(void *)(v12 + 56);
    uint64_t v16 = (void (**)(char *, uint64_t))(v12 - 8);
    uint64_t v19 = a1;
    swift_bridgeObjectRetain();
    do
    {
      v22(v9, v14, v5);
      specialized static CommandFactory.makeCommands(forDelayedAction:viewFactory:)((uint64_t)v9, 0);
      unint64_t v18 = v17;
      (*v16)(v9, v5);
      specialized Array.append<A>(contentsOf:)(v18, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
      v14 += v15;
      --v11;
    }
    while (v11);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v10 = v23;
    a2 = v20;
  }
  *a2 = v10;
  return result;
}

uint64_t closure #3 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItComponent();
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = &_swiftEmptyArrayStorage;
  os_log_type_t v22 = &_swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v19 = a2;
    uint64_t v20 = v2;
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v12 = v7 + 16;
    uint64_t v21 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v15 = *(void *)(v12 + 56);
    uint64_t v16 = (void (**)(char *, uint64_t))(v12 - 8);
    uint64_t v18 = a1;
    swift_bridgeObjectRetain();
    do
    {
      v21(v9, v14, v5);
      unint64_t v17 = specialized static CommandFactory.makeCommands(forSayItComponent:)();
      (*v16)(v9, v5);
      specialized Array.append<A>(contentsOf:)(v17, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
      v14 += v15;
      --v11;
    }
    while (v11);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v10 = v22;
    a2 = v19;
  }
  *a2 = v10;
  return result;
}

uint64_t partial apply for closure #1 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)@<X0>(void *a1@<X8>)
{
  return closure #1 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)(*(void *)(v1 + 16), a1);
}

uint64_t partial apply for closure #2 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)@<X0>(void *a1@<X8>)
{
  return closure #2 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)(*(void *)(v1 + 16), a1);
}

uint64_t partial apply for closure #3 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)@<X0>(void *a1@<X8>)
{
  return closure #3 in static CommandFactory.makeCommands(directExecution:delayedActions:sayItComponents:)(*(void *)(v1 + 16), a1);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SAAceView] and conformance [A](&lazy protocol witness table cache variable for type [SABaseCommand] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [SABaseCommand]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SABaseCommand]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SABaseCommand);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SAAceView] and conformance [A](&lazy protocol witness table cache variable for type [SAAceView] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [SAAceView]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SAAceView]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SAAceView);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized static CommandFactory.makeCommands(forComponent:)(uint64_t a1)
{
  return specialized static CommandFactory.makeCommands(forComponent:)(a1, (uint64_t (*)(uint64_t))&Apple_Parsec_Siri_V2alpha_ButtonViewComponent.commands.getter);
}

{
  return specialized static CommandFactory.makeCommands(forComponent:)(a1, (uint64_t (*)(uint64_t))&Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.siriCommandBuilder.getter);
}

void *specialized static CommandFactory.makeCommands(forListItem:)(uint64_t a1)
{
  return specialized static CommandFactory.makeCommands(forComponent:)(a1, (uint64_t (*)(uint64_t))&Apple_Parsec_Siri_V2alpha_DisambiguationListItem.commands.getter);
}

void *specialized static CommandFactory.makeCommands(forComponent:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2(v5);
  uint64_t v9 = _swiftEmptyArrayStorage;
  unint64_t v35 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v10 = *(void *)(v8 + 16);
  if (v10)
  {
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v11 = v4 + 16;
    uint64_t v12 = v13;
    unint64_t v14 = v8 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v31 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    v28[1] = v8;
    swift_bridgeObjectRetain();
    long long v29 = xmmword_AB670;
    uint64_t v30 = v13;
    while (1)
    {
      v12(v7, v14, v3);
      uint64_t v16 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter();
      if (v16)
      {
        unint64_t v17 = (void *)v16;
        unint64_t v34 = &OBJC_PROTOCOL___SAClientBoundCommand;
        id v18 = (id)swift_dynamicCastObjCProtocolConditional();
        if (v18) {
          goto LABEL_10;
        }
        uint64_t v33 = &OBJC_PROTOCOL___SAServerBoundCommand;
        uint64_t v19 = swift_dynamicCastObjCProtocolConditional();
        if (v19)
        {
          uint64_t v20 = v19;
          id v21 = objc_allocWithZone((Class)SASendCommands);
          id v22 = v17;
          id v18 = [v21 init];
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v23 = swift_allocObject();
          *(_OWORD *)(v23 + 16) = v29;
          *(void *)(v23 + 32) = v20;
          uint64_t v32 = v23;
          specialized Array._endMutation()();
          id v24 = v22;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v18 setCommands:isa];

          uint64_t v12 = v30;
LABEL_10:
          Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
          NSString v26 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v18 setAceId:v26];

          (*v15)(v7, v3);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((char *)&dword_10 + (v35 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                         + (v35 & 0xFFFFFFFFFFFFFF8)) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          goto LABEL_5;
        }
      }
      (*v15)(v7, v3);
LABEL_5:
      v14 += v31;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        uint64_t v9 = (void *)v35;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  return v9;
}

id partial apply for closure #18 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeSearchMarketplace(cmdBuilder:)();
  *a1 = result;
  return result;
}

id partial apply for closure #17 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeOpenLink(cmdBuilder:)();
  *a1 = result;
  return result;
}

id partial apply for closure #16 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeUnlockDeviceWithWatch(cmdBuilder:)();
  *a1 = result;
  return result;
}

id partial apply for closure #15 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeUnlockDevice(cmdBuilder:)();
  *a1 = result;
  return result;
}

id partial apply for closure #14 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeSetSiriAuthorizationForApp(cmdBuilder:)();
  *a1 = result;
  return result;
}

id partial apply for closure #13 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeCancelCurrentTTS(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

id partial apply for closure #12 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeExtendCurrentTTS(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

void *partial apply for closure #11 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makePhoneCall(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

id partial apply for closure #10 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeSwitchProfile(cmdBuilder:)();
  *a1 = result;
  return result;
}

void partial apply for closure #9 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter(void *a1@<X8>)
{
  specialized static PegasusACEConverters.makePushOff(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = v3;
}

void *partial apply for closure #8 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeRecordLocationActivity(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

id partial apply for closure #7 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeEndNavigation(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

void *partial apply for closure #6 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeStartRequest(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

void *partial apply for closure #5 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeShowLocalSearchResult(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

void *partial apply for closure #4 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeShowMapPoints(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

id partial apply for closure #3 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeShowPlaceDetails(cmdBuilder:)();
  *a1 = result;
  return result;
}

void *partial apply for closure #2 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeSayIt(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

void *partial apply for closure #1 in Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter@<X0>(void *a1@<X8>)
{
  id result = specialized static PegasusACEConverters.makeAppPunchOut(cmdBuilder:)(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t specialized static CommandFactory.makeCommands(forDirectExecution:)()
{
  uint64_t v58 = type metadata accessor for UUID();
  uint64_t v54 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  id v57 = (char *)&v53 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = Apple_Parsec_Siri_V2alpha_DirectExecutionComponent.siriCommandBuilder.getter();
  unint64_t v6 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v63 = (uint64_t)&_swiftEmptyArrayStorage;
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7)
  {
    uint64_t v10 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
    uint64_t v8 = v2 + 16;
    uint64_t v9 = v10;
    unint64_t v11 = v5 + ((*(unsigned __int8 *)(v8 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64));
    *(void *)&long long v59 = *(void *)(v8 + 56);
    uint64_t v12 = (void (**)(char *, uint64_t))(v8 - 8);
    uint64_t v53 = v5;
    swift_bridgeObjectRetain();
    long long v55 = xmmword_AB670;
    uint64_t v56 = v10;
    while (1)
    {
      v9(v4, v11, v1);
      uint64_t v13 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter();
      if (v13)
      {
        unint64_t v14 = (void *)v13;
        uint64_t v62 = &OBJC_PROTOCOL___SAClientBoundCommand;
        id v15 = (id)swift_dynamicCastObjCProtocolConditional();
        if (v15) {
          goto LABEL_10;
        }
        uint64_t v61 = &OBJC_PROTOCOL___SAServerBoundCommand;
        uint64_t v16 = swift_dynamicCastObjCProtocolConditional();
        if (v16)
        {
          uint64_t v17 = v16;
          id v18 = objc_allocWithZone((Class)SASendCommands);
          id v19 = v14;
          id v15 = [v18 init];
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v20 = swift_allocObject();
          *(_OWORD *)(v20 + 16) = v55;
          *(void *)(v20 + 32) = v17;
          uint64_t v60 = v20;
          specialized Array._endMutation()();
          id v21 = v19;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v15 setCommands:isa];

          uint64_t v9 = v56;
LABEL_10:
          Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
          NSString v23 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v15 setAceId:v23];

          (*v12)(v4, v1);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((char *)&dword_10 + (v63 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                         + (v63 & 0xFFFFFFFFFFFFFF8)) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          goto LABEL_5;
        }
      }
      (*v12)(v4, v1);
LABEL_5:
      v11 += v59;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        unint64_t v6 = v63;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v24 = result;
    if (result) {
      goto LABEL_16;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    id v39 = [objc_allocWithZone((Class)SAResultCallback) init];
    id v40 = v57;
    UUID.init()();
    UUID.uuidString.getter();
    uint64_t v41 = *(void (**)(char *, uint64_t))(v54 + 8);
    uint64_t v42 = v58;
    v41(v40, v58);
    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v39 setAceId:v43];

    [v39 setCode:SAResultCallbackAnySuccessCodeValue];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    Class v44 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v39 setCommands:v44];

    id v45 = [objc_allocWithZone((Class)SARequestCompleted) init];
    UUID.init()();
    UUID.uuidString.getter();
    v41(v40, v42);
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v45 setAceId:v46];

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v47 = swift_allocObject();
    long long v59 = xmmword_AB670;
    *(_OWORD *)(v47 + 16) = xmmword_AB670;
    *(void *)(v47 + 32) = v39;
    uint64_t v63 = v47;
    specialized Array._endMutation()();
    type metadata accessor for SABaseCommand(0, (unint64_t *)&lazy cache variable for type metadata for SAResultCallback);
    id v48 = v39;
    id v49 = v45;
    Class v50 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v49 setCallbacks:v50];

    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v59;
    *(void *)(v51 + 32) = v49;
    uint64_t v63 = v51;
    specialized Array._endMutation()();
    uint64_t v52 = v63;

    return v52;
  }
  uint64_t v24 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
  uint64_t result = swift_bridgeObjectRetain();
  if (!v24) {
    goto LABEL_34;
  }
LABEL_16:
  if (v24 >= 1)
  {
    uint64_t v26 = 0;
    os_log_type_t v27 = (void (**)(char *, uint64_t))(v54 + 8);
    while (1)
    {
      if ((v6 & 0xC000000000000001) != 0)
      {
        uint64_t v30 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v30 = *(void **)(v6 + 8 * v26 + 32);
        swift_unknownObjectRetain();
      }
      id v31 = [v30 aceId];
      if (v31)
      {
        uint64_t v32 = v31;
        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v35 = v34;
      }
      else
      {
        uint64_t v33 = 0;
        unint64_t v35 = 0xE000000000000000;
      }
      swift_bridgeObjectRelease();
      uint64_t v36 = HIBYTE(v35) & 0xF;
      if ((v35 & 0x2000000000000000) == 0) {
        uint64_t v36 = v33 & 0xFFFFFFFFFFFFLL;
      }
      if (v36)
      {
        id v37 = [v30 aceId];
        if (!v37)
        {
          NSString v29 = 0;
          goto LABEL_20;
        }
        uint64_t v38 = v37;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v28 = v57;
        UUID.init()();
        UUID.uuidString.getter();
        (*v27)(v28, v58);
      }
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
LABEL_20:
      ++v26;
      [v30 setAceId:v29];
      swift_unknownObjectRelease();

      if (v24 == v26) {
        goto LABEL_34;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static CommandFactory.makeCommands(forSayItComponent:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.information);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_0, v5, v6, "SayItComponent is deprecated - we expect a command builder with SayItBuilderParams instead. Translating.", v7, 2u);
    swift_slowDealloc();
  }

  Apple_Parsec_Siri_V2alpha_SayItBuilderParams.init()();
  Apple_Parsec_Siri_V2alpha_SayItComponent.message.getter();
  Apple_Parsec_Siri_V2alpha_SayItBuilderParams.message.setter();
  Apple_Parsec_Siri_V2alpha_SayItComponent.dialogIdentifier.getter();
  Apple_Parsec_Siri_V2alpha_SayItBuilderParams.dialogIdentifier.setter();
  Apple_Parsec_Siri_V2alpha_SayItComponent.hasListenAfterSpeaking_p.getter();
  Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasListenAfterSpeaking_p.setter();
  Apple_Parsec_Siri_V2alpha_SayItComponent.isRepeatable.getter();
  Apple_Parsec_Siri_V2alpha_SayItBuilderParams.isRepeatable.setter();
  id v8 = specialized static PegasusACEConverters.makeSayIt(params:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_AB670;
  *(void *)(v9 + 32) = v8;
  uint64_t v13 = v9;
  specialized Array._endMutation()();
  uint64_t v10 = v13;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v10;
}

void specialized static CommandFactory.makeCommands(forDelayedAction:viewFactory:)(uint64_t a1, unint64_t a2)
{
  unint64_t v196 = a2;
  uint64_t v184 = type metadata accessor for DeviceClass();
  uint64_t v187 = *(void *)(v184 - 8);
  __chkstk_darwin(v184);
  uint64_t v179 = (char *)&v177 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (DeviceClass?, DeviceClass?));
  __chkstk_darwin(v182);
  uint64_t v183 = (char *)&v177 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v180 = (uint64_t)&v177 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v197 = (uint64_t)&v177 - v9;
  __chkstk_darwin(v8);
  uint64_t v186 = (uint64_t)&v177 - v10;
  *(void *)&long long v198 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  uint64_t v11 = *(void *)(v198 - 8);
  uint64_t v12 = __chkstk_darwin(v198);
  uint64_t v181 = (char *)&v177 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v190 = (char *)&v177 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v188 = (char *)&v177 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v177 - v19;
  __chkstk_darwin(v18);
  id v22 = (char *)&v177 - v21;
  uint64_t v195 = (void (**)(void))type metadata accessor for UUID();
  unint64_t v189 = (char *)*(v195 - 1);
  __chkstk_darwin(v195);
  uint64_t v194 = (char *)&v177 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
  __chkstk_darwin(v24 - 8);
  uint64_t v193 = (char *)&v177 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogPhase?);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v177 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for CATOption();
  __chkstk_darwin(v29 - 8);
  uint64_t v30 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v177 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v34 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.hasRenderedDialog.getter();
  unint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  *(void *)&long long v191 = a1;
  v35(v33, a1, v30);
  uint64_t v192 = v11;
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  }
  else
  {
    uint64_t v36 = *(void *)(Apple_Parsec_Siri_V2alpha_DelayedActionComponent.layoutExperiences.getter() + 16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
    if (!v36)
    {
      unint64_t v196 = (unint64_t)&_swiftEmptyArrayStorage;
      uint64_t v50 = v197;
      uint64_t v66 = v198;
      goto LABEL_29;
    }
  }
  if (v196)
  {
    id v37 = (void *)v196;
  }
  else
  {
    static Device.current.getter();
    type metadata accessor for CommonCATs();
    static CATOption.defaultMode.getter();
    uint64_t v38 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for InformationViewFactory();
    id v37 = (void *)swift_allocObject();
    id v39 = [self sharedPreferences];
    uint64_t v40 = type metadata accessor for PommesServerFallbackPreferences();
    swift_allocObject();
    uint64_t v41 = PommesServerFallbackPreferences.init(_:)();
    v37[11] = v40;
    v37[12] = &protocol witness table for PommesServerFallbackPreferences;
    v37[8] = v41;
    outlined init with take of PatternFlowProviding(&v204, (uint64_t)(v37 + 3));
    void v37[2] = v38;
  }
  swift_retain();
  uint64_t v42 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.layoutExperiences.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_RenderedDialogComponent>);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_AB370;
  Apple_Parsec_Siri_V2alpha_DelayedActionComponent.renderedDialog.getter();
  uint64_t v44 = type metadata accessor for DialogPhase();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v28, 1, 1, v44);
  uint64_t v45 = type metadata accessor for PommesCandidateId();
  uint64_t v46 = (uint64_t)v193;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v193, 1, 1, v45);
  uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, void *, void *, void *, void, char *, void, void, uint64_t))(*v37 + 152);
  *(void *)&long long v185 = v37;
  unint64_t v48 = v47(v42, v43, &_swiftEmptyArrayStorage, &_swiftEmptyArrayStorage, &_swiftEmptyArrayStorage, 0, v28, 0, 0, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Any?(v46, (uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
  outlined destroy of Any?((uint64_t)v28, &demangling cache variable for type metadata for DialogPhase?);
  swift_bridgeObjectRelease();
  unint64_t v196 = v48;
  if (v48 >> 62)
  {
    swift_bridgeObjectRetain();
    id v49 = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v50 = v197;
    if (v49) {
      goto LABEL_9;
    }
  }
  else
  {
    id v49 = *(id *)((char *)&dword_10 + (v48 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    uint64_t v50 = v197;
    if (v49)
    {
LABEL_9:
      if ((uint64_t)v49 >= 1)
      {
        uint64_t v51 = 0;
        unint64_t v52 = v196 & 0xC000000000000001;
        uint64_t v53 = (void (**)(char *, void (**)(void)))(v189 + 8);
        while (1)
        {
          if (v52) {
            id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v56 = *(id *)(v196 + 8 * (void)v51 + 32);
          }
          id v57 = v56;
          id v58 = [v57 aceId];
          if (v58)
          {
            long long v59 = v58;
            uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v62 = v61;
          }
          else
          {
            uint64_t v60 = 0;
            unint64_t v62 = 0xE000000000000000;
          }
          swift_bridgeObjectRelease();
          uint64_t v63 = HIBYTE(v62) & 0xF;
          if ((v62 & 0x2000000000000000) == 0) {
            uint64_t v63 = v60 & 0xFFFFFFFFFFFFLL;
          }
          if (v63)
          {
            id v64 = [v57 aceId];
            if (!v64)
            {
              NSString v55 = 0;
              goto LABEL_13;
            }
            os_log_type_t v65 = v64;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          else
          {
            uint64_t v54 = v194;
            UUID.init()();
            UUID.uuidString.getter();
            (*v53)(v54, v195);
          }
          NSString v55 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
LABEL_13:
          uint64_t v51 = (char *)v51 + 1;
          [v57 setAceId:v55];

          uint64_t v50 = v197;
          if (v49 == v51) {
            goto LABEL_28;
          }
        }
      }
      __break(1u);
      goto LABEL_135;
    }
  }
LABEL_28:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v66 = v198;
  uint64_t v11 = v192;
LABEL_29:
  if (!Apple_Parsec_Siri_V2alpha_DelayedActionComponent.delayMilliseconds.getter())
  {
    uint64_t v84 = (void *)Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
    *(void *)&long long v204 = &_swiftEmptyArrayStorage;
    uint64_t v85 = v84[2];
    if (!v85)
    {
      unint64_t v106 = (unint64_t)&_swiftEmptyArrayStorage;
      goto LABEL_59;
    }
    uint64_t v86 = v11 + 16;
    uint64_t v193 = *(char **)(v11 + 16);
    uint64_t v87 = (char *)v84 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v88 = *(void *)(v11 + 72);
    uint64_t v89 = (void (**)(char *, uint64_t))(v86 - 8);
    id v178 = v84;
    swift_bridgeObjectRetain();
    long long v185 = xmmword_AB670;
    while (1)
    {
      uint64_t v90 = v198;
      ((void (*)(char *, char *, void))v193)(v20, v87, v198);
      uint64_t v91 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter();
      if (v91) {
        break;
      }
      (*v89)(v20, v90);
LABEL_46:
      v87 += v88;
      if (!--v85)
      {
        swift_bridgeObjectRelease();
        unint64_t v106 = v204;
LABEL_59:
        swift_bridgeObjectRelease();
        goto LABEL_60;
      }
    }
    uint64_t v92 = (void *)v91;
    uint64_t v202 = &OBJC_PROTOCOL___SAClientBoundCommand;
    id v93 = (id)swift_dynamicCastObjCProtocolConditional();
    if (!v93)
    {
      uint64_t v201 = &OBJC_PROTOCOL___SAServerBoundCommand;
      uint64_t v94 = swift_dynamicCastObjCProtocolConditional();
      if (!v94)
      {

        (*v89)(v20, v198);
LABEL_54:
        uint64_t v50 = v197;
        goto LABEL_46;
      }
      uint64_t v95 = v94;
      id v96 = objc_allocWithZone((Class)SASendCommands);
      id v97 = v92;
      id v93 = [v96 init];
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v98 = swift_allocObject();
      *(_OWORD *)(v98 + 16) = v185;
      *(void *)(v98 + 32) = v95;
      uint64_t v203 = (char *)v98;
      specialized Array._endMutation()();
      id v99 = v97;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v93 setCommands:isa];
    }
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    NSString v101 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v93 setAceId:v101];

    (*v89)(v20, v198);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (v204 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                    + (v204 & 0xFFFFFFFFFFFFFF8)) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    goto LABEL_54;
  }
  id v178 = [objc_allocWithZone((Class)SAUIDelayedActionCommand) init];
  uint64_t v67 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
  *(void *)&long long v204 = &_swiftEmptyArrayStorage;
  uint64_t v68 = *(void *)(v67 + 16);
  if (!v68) {
    goto LABEL_56;
  }
  uint64_t v69 = v11 + 16;
  uint64_t v193 = *(char **)(v11 + 16);
  unint64_t v70 = v67 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v71 = *(void *)(v11 + 72);
  uint64_t v72 = (void (**)(char *, uint64_t))(v69 - 8);
  uint64_t v177 = v67;
  swift_bridgeObjectRetain();
  long long v185 = xmmword_AB670;
  do
  {
    ((void (*)(char *, unint64_t, uint64_t))v193)(v22, v70, v66);
    uint64_t v73 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter();
    if (!v73)
    {
      (*v72)(v22, v66);
      goto LABEL_33;
    }
    uint64_t v74 = (void *)v73;
    uint64_t v200 = &OBJC_PROTOCOL___SAClientBoundCommand;
    id v75 = (id)swift_dynamicCastObjCProtocolConditional();
    if (!v75)
    {
      id v199 = &OBJC_PROTOCOL___SAServerBoundCommand;
      uint64_t v76 = swift_dynamicCastObjCProtocolConditional();
      if (!v76)
      {

        uint64_t v66 = v198;
        (*v72)(v22, v198);
        goto LABEL_33;
      }
      uint64_t v77 = v76;
      id v78 = objc_allocWithZone((Class)SASendCommands);
      id v79 = v74;
      id v75 = [v78 init];
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v80 = swift_allocObject();
      *(_OWORD *)(v80 + 16) = v185;
      *(void *)(v80 + 32) = v77;
      uint64_t v203 = (char *)v80;
      specialized Array._endMutation()();
      id v81 = v79;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAServerBoundCommand);
      Class v82 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v75 setCommands:v82];

      uint64_t v66 = v198;
    }
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
    NSString v83 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v75 setAceId:v83];

    (*v72)(v22, v66);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (v204 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                    + (v204 & 0xFFFFFFFFFFFFFF8)) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v66 = v198;
LABEL_33:
    v70 += v71;
    --v68;
  }
  while (v68);
  swift_bridgeObjectRelease();
  uint64_t v50 = v197;
LABEL_56:
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class v102 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v103 = v178;
  [v178 setCommands:v102];

  id v104 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:Apple_Parsec_Siri_V2alpha_DelayedActionComponent.delayMilliseconds.getter()];
  [v103 setTimerValue:v104];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v105 = swift_allocObject();
  *(_OWORD *)(v105 + 16) = xmmword_AB670;
  *(void *)(v105 + 32) = v103;
  *(void *)&long long v204 = v105;
  specialized Array._endMutation()();
  unint64_t v106 = v204;
LABEL_60:
  uint64_t v20 = (char *)v184;
  uint64_t v107 = (uint64_t)v183;
  uint64_t v108 = v186;
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.deviceClass.getter();
  swift_release();
  uint64_t v109 = v187;
  (*(void (**)(uint64_t, void, char *))(v187 + 104))(v50, enum case for DeviceClass.homePod(_:), v20);
  (*(void (**)(uint64_t, void, uint64_t, char *))(v109 + 56))(v50, 0, 1, v20);
  uint64_t v110 = v107 + *(int *)(v182 + 48);
  outlined init with copy of IdentifiedUser?(v108, v107, &demangling cache variable for type metadata for DeviceClass?);
  outlined init with copy of IdentifiedUser?(v50, v110, &demangling cache variable for type metadata for DeviceClass?);
  uint64_t v111 = *(unsigned int (**)(uint64_t, uint64_t, char *))(v109 + 48);
  unint64_t v112 = v106 >> 62;
  if (v111(v107, 1, v20) == 1)
  {
    outlined destroy of Any?(v50, &demangling cache variable for type metadata for DeviceClass?);
    outlined destroy of Any?(v108, &demangling cache variable for type metadata for DeviceClass?);
    if (v111(v110, 1, v20) == 1)
    {
      outlined destroy of Any?(v107, &demangling cache variable for type metadata for DeviceClass?);
      goto LABEL_81;
    }
LABEL_65:
    outlined destroy of Any?(v107, (uint64_t *)&demangling cache variable for type metadata for (DeviceClass?, DeviceClass?));
    goto LABEL_67;
  }
  uint64_t v113 = v180;
  outlined init with copy of IdentifiedUser?(v107, v180, &demangling cache variable for type metadata for DeviceClass?);
  if (v111(v110, 1, v20) == 1)
  {
    outlined destroy of Any?(v50, &demangling cache variable for type metadata for DeviceClass?);
    outlined destroy of Any?(v186, &demangling cache variable for type metadata for DeviceClass?);
    (*(void (**)(uint64_t, char *))(v187 + 8))(v113, v20);
    goto LABEL_65;
  }
  uint64_t v114 = v187;
  id v115 = v179;
  (*(void (**)(char *, uint64_t, char *))(v187 + 32))(v179, v110, v20);
  lazy protocol witness table accessor for type DeviceClass and conformance DeviceClass();
  LODWORD(v197) = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v116 = *(void (**)(char *, char *))(v114 + 8);
  v116(v115, v20);
  outlined destroy of Any?(v50, &demangling cache variable for type metadata for DeviceClass?);
  outlined destroy of Any?(v186, &demangling cache variable for type metadata for DeviceClass?);
  unint64_t v112 = v106 >> 62;
  v116((char *)v113, v20);
  outlined destroy of Any?(v107, &demangling cache variable for type metadata for DeviceClass?);
  if ((v197 & 1) == 0)
  {
LABEL_67:
    if (v112)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v117 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v117 = *(void *)((char *)&dword_10 + (v106 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain_n();
    }
    unint64_t v118 = v190;
    if (v117)
    {
      if ((v106 & 0xC000000000000001) != 0)
      {
        uint64_t v119 = 0;
        while (1)
        {
          uint64_t v120 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v121 = v119 + 1;
          if (__OFADD__(v119, 1)) {
            break;
          }
          uint64_t v20 = (char *)v120;
          self;
          if (swift_dynamicCastObjCClass())
          {
            swift_bridgeObjectRelease_n();
            swift_unknownObjectRelease();
            goto LABEL_102;
          }
          swift_unknownObjectRelease();
          ++v119;
          if (v121 == v117) {
            goto LABEL_80;
          }
        }
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        swift_bridgeObjectRetain();
        id v49 = (id)_CocoaArrayWrapper.endIndex.getter();
        unint64_t v123 = v196;
        if (!v49) {
          goto LABEL_120;
        }
LABEL_83:
        if ((uint64_t)v49 < 1)
        {
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        uint64_t v124 = 0;
        uint64_t v125 = (void (**)(char *, void (**)(void)))(v189 + 8);
        while (2)
        {
          if ((v106 & 0xC000000000000001) != 0)
          {
            uint64_t v128 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v128 = *(void **)(v106 + 8 * (void)v124 + 32);
            swift_unknownObjectRetain();
          }
          id v129 = [v128 aceId];
          if (v129)
          {
            uint64_t v130 = v129;
            uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v133 = v132;
          }
          else
          {
            uint64_t v131 = 0;
            unint64_t v133 = 0xE000000000000000;
          }
          swift_bridgeObjectRelease();
          uint64_t v134 = HIBYTE(v133) & 0xF;
          if ((v133 & 0x2000000000000000) == 0) {
            uint64_t v134 = v131 & 0xFFFFFFFFFFFFLL;
          }
          if (v134)
          {
            id v135 = [v128 aceId];
            if (v135)
            {
              uint64_t v136 = v135;
              static String._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_86:
              NSString v127 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
            }
            else
            {
              NSString v127 = 0;
            }
            uint64_t v124 = (char *)v124 + 1;
            [v128 setAceId:v127];
            swift_unknownObjectRelease();

            if (v49 == v124) {
              goto LABEL_120;
            }
            continue;
          }
          break;
        }
        uint64_t v126 = v194;
        UUID.init()();
        UUID.uuidString.getter();
        (*v125)(v126, v195);
        goto LABEL_86;
      }
      uint64_t v122 = 0;
      while (1)
      {
        uint64_t v20 = (char *)(v122 + 1);
        if (__OFADD__(v122, 1)) {
          goto LABEL_118;
        }
        self;
        if (swift_dynamicCastObjCClass()) {
          break;
        }
        ++v122;
        if (v20 == (char *)v117) {
          goto LABEL_80;
        }
      }
      swift_bridgeObjectRelease_n();
LABEL_102:
      swift_bridgeObjectRelease();
      uint64_t v137 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
      *(void *)&long long v204 = &_swiftEmptyArrayStorage;
      uint64_t v139 = *(void *)(v137 + 16);
      id v140 = v188;
      if (v139)
      {
        uint64_t v141 = *(void (**)(char *, char *, uint64_t))(v192 + 16);
        unint64_t v142 = (*(unsigned __int8 *)(v192 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v192 + 80);
        uint64_t v187 = v137;
        unint64_t v143 = v137 + v142;
        uint64_t v197 = *(void *)(v192 + 72);
        *(void *)&long long v138 = 136315138;
        long long v191 = v138;
        uint64_t v195 = (void (**)(void))(v192 + 8);
        uint64_t v194 = (char *)((v192 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
        unint64_t v189 = (char *)&type metadata for Any + 8;
        unint64_t v196 = (unint64_t)v141;
        v192 += 16;
        do
        {
          uint64_t v145 = v198;
          v141(v140, (char *)v143, v198);
          uint64_t v146 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.asBaseAceCommand.getter();
          if (v146)
          {
            uint64_t v147 = (void *)v146;
            Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
            NSString v148 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v147 setAceId:v148];

            ((void (*)(char *, uint64_t))*v195)(v140, v145);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((char *)&dword_10 + (v204 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                            + (v204 & 0xFFFFFFFFFFFFFF8)) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {
            if (one-time initialization token for information != -1) {
              swift_once();
            }
            uint64_t v149 = type metadata accessor for Logger();
            __swift_project_value_buffer(v149, (uint64_t)static Logger.information);
            uint64_t v150 = v140;
            uint64_t v151 = v198;
            v141(v118, v150, v198);
            uint64_t v152 = Logger.logObject.getter();
            unint64_t v153 = v141;
            os_log_type_t v154 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v152, v154))
            {
              uint64_t v155 = swift_slowAlloc();
              uint64_t v193 = (char *)swift_slowAlloc();
              uint64_t v203 = v193;
              *(_DWORD *)uint64_t v155 = v191;
              v153(v181, v190, v151);
              unint64_t v118 = v190;
              uint64_t v156 = String.init<A>(describing:)();
              *(void *)(v155 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v156, v157, (uint64_t *)&v203);
              swift_bridgeObjectRelease();
              NSString v144 = *v195;
              ((void (*)(char *, uint64_t))*v195)(v118, v151);
              _os_log_impl(&dword_0, v152, v154, "Unable to generate Ace command from builder: %s", (uint8_t *)v155, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              NSString v144 = *v195;
              ((void (*)(char *, uint64_t))*v195)(v118, v151);
            }

            id v140 = v188;
            v144();
          }
          uint64_t v141 = (void (*)(char *, char *, uint64_t))v196;
          v143 += v197;
          --v139;
        }
        while (v139);
      }
      swift_bridgeObjectRelease();
LABEL_132:
      swift_bridgeObjectRelease();
      return;
    }
LABEL_80:
    swift_bridgeObjectRelease_n();
  }
LABEL_81:
  if (v112) {
    goto LABEL_119;
  }
  id v49 = *(id *)((char *)&dword_10 + (v106 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  unint64_t v123 = v196;
  if (v49) {
    goto LABEL_83;
  }
LABEL_120:
  swift_bridgeObjectRelease();
  id v49 = [objc_allocWithZone((Class)SAResultCallback) init];
  os_log_type_t v158 = v194;
  UUID.init()();
  UUID.uuidString.getter();
  unint64_t v159 = (void (*)(char *, void (**)(void)))*((void *)v189 + 1);
  v159(v158, v195);
  NSString v160 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v49 setAceId:v160];

  [v49 setCode:SAResultCallbackAnySuccessCodeValue];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class v161 = Array._bridgeToObjectiveC()().super.isa;
  [v49 setCommands:v161];

  uint64_t v20 = (char *)(v123 >> 62);
  if (!(v123 >> 62))
  {
    uint64_t v162 = *(void *)((char *)&dword_10 + (v123 & 0xFFFFFFFFFFFFFF8));
    if (v162) {
      goto LABEL_122;
    }
LABEL_131:
    swift_bridgeObjectRelease();
    id v169 = [objc_allocWithZone((Class)SARequestCompleted) init];
    unint64_t v170 = v194;
    UUID.init()();
    UUID.uuidString.getter();
    v159(v170, v195);
    NSString v171 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v169 setAceId:v171];

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v172 = swift_allocObject();
    long long v198 = xmmword_AB670;
    *(_OWORD *)(v172 + 16) = xmmword_AB670;
    *(void *)(v172 + 32) = v49;
    *(void *)&long long v204 = v172;
    specialized Array._endMutation()();
    type metadata accessor for SABaseCommand(0, (unint64_t *)&lazy cache variable for type metadata for SAResultCallback);
    id v173 = v49;
    id v174 = v169;
    Class v175 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v174 setCallbacks:v175];

    uint64_t v176 = swift_allocObject();
    *(_OWORD *)(v176 + 16) = v198;
    *(void *)(v176 + 32) = v174;
    *(void *)&long long v204 = v176;
    specialized Array._endMutation()();

    goto LABEL_132;
  }
  swift_bridgeObjectRetain();
  uint64_t v162 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v162) {
    goto LABEL_131;
  }
LABEL_122:
  BOOL v163 = __OFSUB__(v162, 1);
  unint64_t v164 = v162 - 1;
  if (v163)
  {
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  if ((v123 & 0xC000000000000001) != 0)
  {
LABEL_137:
    swift_bridgeObjectRetain();
    id v165 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
    goto LABEL_127;
  }
  if ((v164 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v164 < *(void *)((char *)&dword_10 + (v123 & 0xFFFFFFFFFFFFFF8)))
  {
    id v165 = *(id *)(v123 + 8 * v164 + 32);
LABEL_127:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v166 = swift_allocObject();
    *(_OWORD *)(v166 + 16) = xmmword_AB670;
    *(void *)(v166 + 32) = v49;
    *(void *)&long long v204 = v166;
    specialized Array._endMutation()();
    type metadata accessor for SABaseCommand(0, (unint64_t *)&lazy cache variable for type metadata for SAResultCallback);
    id v167 = v49;
    Class v168 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v165 setCallbacks:v168];

    if (v20)
    {
      type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SABaseCommand);
      swift_bridgeObjectRetain();
      _bridgeCocoaArray<A>(_:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return;
    }
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for SABaseCommand(0, &lazy cache variable for type metadata for SABaseCommand);

    swift_bridgeObjectRelease();
    goto LABEL_132;
  }
  __break(1u);
}

ValueMetadata *type metadata accessor for CommandFactory()
{
  return &type metadata for CommandFactory;
}

unint64_t lazy protocol witness table accessor for type DeviceClass and conformance DeviceClass()
{
  unint64_t result = lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass;
  if (!lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass)
  {
    type metadata accessor for DeviceClass();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [SAAceView] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, void (*a2)(_OWORD *__return_ptr, void *, _OWORD *), uint64_t a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, a2, a3);
  swift_bridgeObjectRelease();
  if (v4) {
    swift_bridgeObjectRelease();
  }
  return a4;
}

uint64_t closure #1 in variable initialization expression of static GenericResultSetParamBuilder.duplicateHandler@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of Any(a1, a2);
}

uint64_t GenericResultSetParamBuilder.parameters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GenericResultSetParamBuilder.items.getter()
{
  return swift_bridgeObjectRetain();
}

InformationFlowPlugin::GenericResultSetParamBuilder __swiftcall GenericResultSetParamBuilder.init(parameters:items:itemsFieldName:)(Swift::OpaquePointer parameters, Swift::OpaquePointer items, Swift::String itemsFieldName)
{
  uint64_t countAndFlagsBits = itemsFieldName._countAndFlagsBits;
  object = itemsFieldName._object;
  rawValue = parameters._rawValue;
  uint64_t v8 = items._rawValue;
  result.items._rawValue = v8;
  result.parameters._rawValue = rawValue;
  result.itemsFieldName._object = object;
  result.itemsFieldName._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(_OWORD *__return_ptr, void *, _OWORD *), uint64_t a6)
{
  uint64_t v8 = v6;
  uint64_t v50 = a6;
  uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = ~v10;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = -v10;
  uint64_t v43 = a1;
  uint64_t v44 = a1 + 64;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  else {
    uint64_t v14 = -1;
  }
  uint64_t v45 = v11;
  uint64_t v46 = 0;
  uint64_t v47 = v14 & v12;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v41);
  uint64_t v15 = *((void *)&v41 + 1);
  if (!*((void *)&v41 + 1))
  {
LABEL_20:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : Any].Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    uint64_t v21 = v41;
    uint64_t v39 = v41;
    uint64_t v40 = v15;
    outlined init with take of Any(&v42, v38);
    id v22 = *(void **)v8;
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v15);
    uint64_t v25 = v22[2];
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26))
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_26;
    }
    char v28 = v23;
    if (v22[3] < v27) {
      break;
    }
    if (a4)
    {
      if (v23) {
        goto LABEL_16;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v28) {
        goto LABEL_16;
      }
    }
LABEL_6:
    uint64_t v16 = *(void **)v8;
    *(void *)(*(void *)v8 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    uint64_t v17 = (uint64_t *)(v16[6] + 16 * v24);
    *uint64_t v17 = v21;
    v17[1] = v15;
    outlined init with take of Any(v38, (_OWORD *)(v16[7] + 32 * v24));
    uint64_t v18 = v16[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_24;
    }
    v16[2] = v20;
LABEL_8:
    specialized LazyMapSequence.Iterator.next()(&v41);
    uint64_t v15 = *((void *)&v41 + 1);
    a4 = 1;
    if (!*((void *)&v41 + 1)) {
      goto LABEL_20;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, a4 & 1);
  unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v15);
  if ((v28 & 1) != (v30 & 1)) {
    goto LABEL_25;
  }
  unint64_t v24 = v29;
  if ((v28 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_16:
  outlined init with copy of Any(*(void *)(*(void *)v8 + 56) + 32 * v24, (uint64_t)v36);
  a5(v37, v36, v38);
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    swift_bridgeObjectRelease();
    uint64_t v31 = (_OWORD *)(*(void *)(*(void *)v8 + 56) + 32 * v24);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    outlined init with take of Any(v37, v31);
    goto LABEL_8;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  v36[0] = v7;
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    swift_bridgeObjectRelease();
    outlined consume of [String : Any].Iterator._Variant();
    swift_release();
    return swift_errorRelease();
  }
LABEL_26:
  *(void *)&v37[0] = 0;
  *((void *)&v37[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v33._object = (void *)0x80000000000B0E80;
  v33._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v33);
  _print_unlocked<A, B>(_:_:)();
  v34._uint64_t countAndFlagsBits = 39;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static GenericResultSetParamBuilder.fieldName(for:)(uint64_t a1)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x80000000000B0EA0), (v3 & 1) != 0)
    && (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v2, (uint64_t)v15), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v4 = v13;
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.information);
    swift_bridgeObjectRetain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v6, v7))
    {

      swift_bridgeObjectRelease_n();
      return v4;
    }
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v15[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v6, v7, "Found custom item field name set in Parameters %s", v8, 0xCu);
  }
  else
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.information);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    uint64_t v4 = 0x736D657469;
    if (!os_log_type_enabled(v6, v10))
    {

      return v4;
    }
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    v15[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x736D657469, 0xE500000000000000, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v6, v10, "No Custom field name found. Defaulting to %s", v11, 0xCu);
  }
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  return v4;
}

uint64_t specialized GenericResultSetParamBuilder.init(parameters:)(uint64_t a1)
{
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v24 = specialized Dictionary.merging(_:uniquingKeysWith:)(v3, (void (*)(_OWORD *__return_ptr, void *, _OWORD *))closure #1 in variable initialization expression of static GenericResultSetParamBuilder.duplicateHandler, 0, v2);
  uint64_t v4 = specialized static GenericResultSetParamBuilder.fieldName(for:)(a1);
  unint64_t v6 = v5;
  specialized Dictionary._Variant.removeValue(forKey:)(v4, v5, v22);
  if (v23)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      int64_t v7 = *(void *)(v21 + 16);
      if (v7)
      {
        v22[0] = (uint64_t)&_swiftEmptyArrayStorage;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
        uint64_t v8 = 0;
        uint64_t v9 = v22[0];
        do
        {
          uint64_t v10 = *(void *)(v21 + 8 * v8 + 32);
          v22[0] = v9;
          unint64_t v11 = *(void *)(v9 + 16);
          unint64_t v12 = *(void *)(v9 + 24);
          swift_bridgeObjectRetain();
          if (v11 >= v12 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
            uint64_t v9 = v22[0];
          }
          ++v8;
          *(void *)(v9 + 16) = v11 + 1;
          *(void *)(v9 + 8 * v11 + 32) = v10;
        }
        while (v7 != v8);
      }
      swift_bridgeObjectRelease();
      return v4;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v22);
  }
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    v22[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v6, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v17 = Dictionary.description.getter();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v14, v15, "GenericResultSet initialized with empty item list at %s, %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  return 0x736D657469;
}

void *specialized GenericResultSetParamBuilder.itemPatternParameters(items:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v3 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v4 = *v3;
      unint64_t v5 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v5 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v5 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v5 + 1;
      _swiftEmptyArrayStorage[v5 + 4] = v4;
      ++v3;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t specialized GenericResultSetParamBuilder.patternParameters(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = specialized Dictionary.merging(_:uniquingKeysWith:)(v7, (void (*)(_OWORD *__return_ptr, void *, _OWORD *))closure #1 in variable initialization expression of static GenericResultSetParamBuilder.duplicateHandler, 0, v6);
  uint64_t v9 = specialized GenericResultSetParamBuilder.itemPatternParameters(items:)(a1);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
  *(void *)&long long v12 = v9;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(&v12, a2, a3, isUniquelyReferenced_nonNull_native, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Any?((uint64_t)v14);
  return v8;
}

uint64_t destroy for GenericResultSetParamBuilder()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for GenericResultSetParamBuilder(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GenericResultSetParamBuilder(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GenericResultSetParamBuilder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for GenericResultSetParamBuilder()
{
  return &type metadata for GenericResultSetParamBuilder;
}

ValueMetadata *type metadata accessor for GenericResultSetItem()
{
  return &type metadata for GenericResultSetItem;
}

uint64_t specialized static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v83 = a3;
  int v76 = a1;
  uint64_t v4 = type metadata accessor for SportsResolverMetrics();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Class v82 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsResolverMetrics?);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  id v75 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v81 = (uint64_t)&v72 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  unint64_t v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v84 = (uint64_t)&v72 - v16;
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v72 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v72 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v72 - v22;
  uint64_t v24 = type metadata accessor for SportsResolverConfig();
  uint64_t v79 = *(void *)(v24 - 8);
  uint64_t v80 = v24;
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v74 = (char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v85 = (char *)&v72 - v27;
  outlined init with copy of IdentifiedUser?(a2, (uint64_t)v18, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v28 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v29 = *(void *)(v28 - 8);
  char v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  unsigned int v31 = v30(v18, 1, v28);
  uint64_t v77 = v5;
  uint64_t v78 = v4;
  uint64_t v73 = v30;
  if (v31 == 1)
  {
    uint64_t v32 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?;
    uint64_t v33 = (uint64_t)v18;
LABEL_8:
    outlined destroy of Any?(v33, v32);
    goto LABEL_10;
  }
  uint64_t v34 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v28);
  uint64_t v35 = *(void *)(v34 + 16);
  uint64_t v36 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  uint64_t v37 = *(void *)(v36 - 8);
  if (v35)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(v23, v34+ ((*(unsigned __int8 *)(*(void *)(v36 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v36 - 8) + 80)), v36);
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v38 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v23, v38, 1, v36);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v23, 1, v36) == 1)
  {
    uint64_t v32 = &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?;
    uint64_t v33 = (uint64_t)v23;
    goto LABEL_8;
  }
  Apple_Parsec_Siri_Context_ResultEntity.name.getter();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v23, v36);
LABEL_10:
  uint64_t v39 = v84;
  uint64_t v40 = v85;
  SportsResolverConfig.init(intentTypeName:bundleId:)();
  outlined init with copy of IdentifiedUser?(a2, v39, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  long long v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = v39;
    uint64_t v44 = swift_slowAlloc();
    v87[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136315394;
    outlined init with copy of IdentifiedUser?(v43, (uint64_t)v14, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    if (v73(v14, 1, v28) == 1)
    {
      outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
      unint64_t v45 = 0xE700000000000000;
      uint64_t v46 = v79;
      uint64_t v47 = (uint64_t)v75;
      uint64_t v48 = 0x6E776F6E6B6E75;
    }
    else
    {
      uint64_t v55 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v28);
      uint64_t v56 = *(void *)(v55 + 16);
      uint64_t v57 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
      uint64_t v58 = *(void *)(v57 - 8);
      if (v56)
      {
        uint64_t v59 = (uint64_t)v72;
        (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v57 - 8) + 16))(v72, v55+ ((*(unsigned __int8 *)(*(void *)(v57 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v57 - 8) + 80)), v57);
        uint64_t v60 = 0;
        uint64_t v46 = v79;
      }
      else
      {
        uint64_t v60 = 1;
        uint64_t v46 = v79;
        uint64_t v59 = (uint64_t)v72;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v59, v60, 1, v57);
      swift_bridgeObjectRelease();
      uint64_t v48 = 0x6E776F6E6B6E75;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v59, 1, v57) == 1)
      {
        outlined destroy of Any?(v59, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
        unint64_t v45 = 0xE700000000000000;
      }
      else
      {
        uint64_t v48 = Apple_Parsec_Siri_Context_ResultEntity.name.getter();
        unint64_t v45 = v61;
        (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v57);
      }
      uint64_t v47 = (uint64_t)v75;
    }
    uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v45, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Any?(v84, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    *(_WORD *)(v44 + 12) = 2080;
    char v54 = v76;
    uint64_t v62 = specialized SportsPersonalizationSelection<A>.debugDescription.getter(v76);
    uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v41, v42, "Logging sports personalization metrics: intent=%s selection=%s", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v50 = v77;
    uint64_t v49 = v78;
    uint64_t v52 = v81;
    uint64_t v51 = v82;
    uint64_t v40 = v85;
    uint64_t v53 = v80;
  }
  else
  {

    outlined destroy of Any?(v39, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    uint64_t v50 = v77;
    uint64_t v49 = v78;
    uint64_t v52 = v81;
    uint64_t v51 = v82;
    uint64_t v46 = v79;
    uint64_t v53 = v80;
    uint64_t v47 = (uint64_t)v75;
    char v54 = v76;
  }
  if (v54 == 2)
  {
    uint64_t v64 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v74, v40, v53);
    SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)();
    uint64_t v64 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v52, v64, 1, v49);
  outlined init with copy of IdentifiedUser?(v52, v47, &demangling cache variable for type metadata for SportsResolverMetrics?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v47, 1, v49) == 1)
  {
    outlined destroy of Any?(v52, &demangling cache variable for type metadata for SportsResolverMetrics?);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v40, v53);
    return outlined destroy of Any?(v47, &demangling cache variable for type metadata for SportsResolverMetrics?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v51, v47, v49);
    SportsResolverMetrics.logSportsMetric()();
    if (v66)
    {
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v69 = (uint8_t *)swift_slowAlloc();
        v87[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v69 = 136315138;
        swift_getErrorValue();
        uint64_t v70 = Error.localizedDescription.getter();
        uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl(&dword_0, v67, v68, "Logging sports metrics failed with: %s", v69, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v50 + 8))(v82, v49);
        outlined destroy of Any?(v81, &demangling cache variable for type metadata for SportsResolverMetrics?);
        return (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v85, v80);
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v49);
        outlined destroy of Any?(v52, &demangling cache variable for type metadata for SportsResolverMetrics?);
        return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v85, v53);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v49);
      outlined destroy of Any?(v52, &demangling cache variable for type metadata for SportsResolverMetrics?);
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v40, v53);
    }
  }
}

uint64_t specialized SportsPersonalizationSelection<A>.debugDescription.getter(char a1)
{
  if (a1 == 2) {
    return 0x63696C7070616E69;
  }
  if (a1 == 3) {
    return 0x756769626D616E75;
  }
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  if (a1) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD00000000000001ELL;
}

uint64_t SportsPersonalizationEntryPoint.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 40) = type metadata accessor for SportsResolver();
  *(void *)(v0 + 48) = &protocol witness table for SportsResolver;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  SportsResolver.init()();
  *(void *)(v0 + 80) = &type metadata for Features;
  *(void *)(v0 + 88) = &protocol witness table for Features;
  *(unsigned char *)(v0 + 56) = 1;
  uint64_t v1 = type metadata accessor for IntentDonator();
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 120) = v1;
  *(void *)(v0 + 128) = &protocol witness table for IntentDonator;
  *(void *)(v0 + 96) = v2;
  return v0;
}

BOOL SportsPersonalizationAction.wasMutated.getter(char a1)
{
  return a1 == 3;
}

uint64_t SportsPersonalizationAction.asResultMetrics()(char a1)
{
  return 0x1000302u >> (8 * a1);
}

uint64_t SportsPersonalizationAction.SelectionMetric.recommendationFound.getter(char a1)
{
  return a1 & 1;
}

uint64_t protocol witness for SportsPersonalizationResultMetric.recommendationFound.getter in conformance SportsPersonalizationAction.SelectionMetric()
{
  return *v0;
}

uint64_t SportsPersonalizationResult.action.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t static SportsPersonalizationResult.inapplicable.getter()
{
  return 0;
}

uint64_t static SportsPersonalizationResult.ambiguous.getter()
{
  return 0;
}

uint64_t SportsPersonalizationEntryPoint.featureToggle.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + 56, a1);
}

uint64_t SportsPersonalizationEntryPoint.intentDonator.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of IdentifiedUser?(v1 + 96, a1, &demangling cache variable for type metadata for SportsIntentDonator?);
}

uint64_t SportsPersonalizationEntryPoint.init()()
{
  uint64_t v5 = type metadata accessor for SportsResolver();
  Swift::String v6 = &protocol witness table for SportsResolver;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v4);
  SportsResolver.init()();
  outlined init with take of PatternFlowProviding(&v4, v0 + 16);
  *(void *)(v0 + 80) = &type metadata for Features;
  *(void *)(v0 + 88) = &protocol witness table for Features;
  *(unsigned char *)(v0 + 56) = 1;
  uint64_t v1 = type metadata accessor for IntentDonator();
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 120) = v1;
  *(void *)(v0 + 128) = &protocol witness table for IntentDonator;
  *(void *)(v0 + 96) = v2;
  return v0;
}

uint64_t SportsPersonalizationEntryPoint.__allocating_init(inferenceApi:featureToggle:intentDonator:)(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  outlined init with take of PatternFlowProviding(a1, v6 + 16);
  outlined init with take of PatternFlowProviding(a2, v6 + 56);
  outlined init with take of Flow?(a3, v6 + 96, &demangling cache variable for type metadata for SportsIntentDonator?);
  return v6;
}

uint64_t SportsPersonalizationEntryPoint.init(inferenceApi:featureToggle:intentDonator:)(long long *a1, long long *a2, uint64_t a3)
{
  outlined init with take of PatternFlowProviding(a1, v3 + 16);
  outlined init with take of PatternFlowProviding(a2, v3 + 56);
  outlined init with take of Flow?(a3, v3 + 96, &demangling cache variable for type metadata for SportsIntentDonator?);
  return v3;
}

uint64_t SportsPersonalizationEntryPoint.flowFor(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v59 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Parse.PegasusResult();
  uint64_t v60 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Parse();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v58 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (id *)((char *)&v51 - v14);
  Input.parse.getter();
  int v16 = (*(uint64_t (**)(id *, uint64_t))(v11 + 88))(v15, v10);
  if (v16 == enum case for Parse.pegasusResults(_:))
  {
    uint64_t v51 = a1;
    uint64_t v53 = v11;
    uint64_t v54 = v10;
    (*(void (**)(id *, uint64_t))(v11 + 96))(v15, v10);
    uint64_t v17 = *(void (**)(char *, id *, uint64_t))(v60 + 32);
    uint64_t v57 = v7;
    v17(v9, v15, v7);
    type metadata accessor for PerformanceUtil();
    uint64_t v18 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v18);
    uint64_t v52 = v1;
    Date.init()();
    uint64_t v49 = (const char **)&v47;
    uint64_t v50 = &type metadata for SportsPersonalizationResult;
    uint64_t v48 = partial apply for closure #1 in SportsPersonalizationEntryPoint.flowFor(input:);
    LOBYTE(v47) = 2;
    unint64_t v45 = "flowFor(input:)";
    uint64_t v46 = 15;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
    swift_release();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v20 = v59;
    v19(v6, v59);
    uint64_t v21 = v63;
    int v22 = v64;
    uint64_t v23 = static PerformanceUtil.shared.getter();
    uint64_t v55 = &v51;
    __chkstk_darwin(v23);
    uint64_t v56 = v21;
    uint64_t v47 = v21;
    Date.init()();
    uint64_t v49 = &v45;
    uint64_t v50 = (ValueMetadata *)((char *)&type metadata for () + 8);
    uint64_t v48 = partial apply for closure #2 in SportsPersonalizationEntryPoint.flowFor(input:);
    LOBYTE(v47) = 2;
    uint64_t v46 = 15;
    unint64_t v45 = "flowFor(input:)";
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
    swift_release();
    v19(v6, v20);
    if (v22 == 3)
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v9, v57);
      return v56;
    }
    else
    {
      uint64_t v30 = v60;
      uint64_t v31 = v57;
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.information);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.info.getter();
      BOOL v35 = os_log_type_enabled(v33, v34);
      uint64_t v37 = v53;
      uint64_t v36 = v54;
      uint64_t v38 = v52;
      if (v35)
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v39 = 0;
        _os_log_impl(&dword_0, v33, v34, "Donating pegasusResults parse in SportsPersonalizationEntryPoint", v39, 2u);
        swift_slowDealloc();
      }

      outlined init with copy of IdentifiedUser?(v38 + 96, (uint64_t)v61, &demangling cache variable for type metadata for SportsIntentDonator?);
      if (v62)
      {
        uint64_t v40 = (uint64_t)v58;
        Input.parse.getter();
        SportsIntentDonator.donateIfNeeded(parse:)(v40);
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v40, v36);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v31);
        outlined destroy of SportsIntentDonator((uint64_t)v61);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v31);
        outlined destroy of Any?((uint64_t)v61, &demangling cache variable for type metadata for SportsIntentDonator?);
      }
      return v56;
    }
  }
  else
  {
    if (v16 == enum case for Parse.pommesResponse(_:))
    {
      (*(void (**)(id *, uint64_t))(v11 + 96))(v15, v10);

      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.information);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl(&dword_0, v26, v27, "Donating pommesResponse parse in SportsPersonalizationEntryPoint", v28, 2u);
        swift_slowDealloc();
      }

      outlined init with copy of IdentifiedUser?(v2 + 96, (uint64_t)v61, &demangling cache variable for type metadata for SportsIntentDonator?);
      if (v62)
      {
        uint64_t v29 = (uint64_t)v58;
        Input.parse.getter();
        SportsIntentDonator.donateIfNeeded(parse:)(v29);
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v29, v10);
        outlined destroy of SportsIntentDonator((uint64_t)v61);
      }
      else
      {
        outlined destroy of Any?((uint64_t)v61, &demangling cache variable for type metadata for SportsIntentDonator?);
      }
    }
    else
    {
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)static Logger.information);
      os_log_type_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v44 = 0;
        _os_log_impl(&dword_0, v42, v43, "Parse not supported in SportsPersonalizationEntryPoint", v44, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(id *, uint64_t))(v11 + 8))(v15, v10);
    }
    return 0;
  }
}

uint64_t closure #2 in SportsPersonalizationEntryPoint.flowFor(input:)(uint64_t a1, char a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Parse.PegasusResult.response.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.information);
  specialized static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(0x1000302u >> (8 * a2), (uint64_t)v9, v12);
  return outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
}

uint64_t SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)(uint64_t a1)
{
  uint64_t v317 = a1;
  v313 = *(void (**)(char *, uint64_t))v1;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  uint64_t v309 = *(void *)(v2 - 8);
  v310 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v2;
  __chkstk_darwin(v2);
  v307 = (void (*)(char *, uint64_t))((char *)&v251 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  v305 = (void (*)(char *, uint64_t, uint64_t))((char *)&v251 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v306 = (char *)&v251 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsPersonalizationEntity?);
  __chkstk_darwin(v8 - 8);
  uint64_t v308 = (uint64_t)&v251 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v269 = type metadata accessor for PluginAction();
  uint64_t v268 = *(void *)(v269 - 8);
  uint64_t v10 = __chkstk_darwin(v269);
  v263 = (char *)&v251 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v267 = (char *)&v251 - v12;
  uint64_t v272 = type metadata accessor for Input();
  uint64_t v266 = *(void *)(v272 - 8);
  uint64_t v13 = __chkstk_darwin(v272);
  v261 = (char *)&v251 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v265 = (char *)&v251 - v15;
  uint64_t v271 = type metadata accessor for Parse();
  uint64_t v264 = *(void *)(v271 - 8);
  uint64_t v16 = __chkstk_darwin(v271);
  v260 = (char *)&v251 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v262 = (char *)&v251 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v270 = (uint64_t)&v251 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v285 = (uint64_t)&v251 - v22;
  uint64_t v282 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
  uint64_t v281 = *(void *)(v282 - 8);
  __chkstk_darwin(v282);
  v280 = (char *)&v251 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  __chkstk_darwin(v24 - 8);
  v283 = (char *)&v251 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v259 = (uint64_t)&v251 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  v284 = (char *)&v251 - v30;
  __chkstk_darwin(v29);
  uint64_t v292 = (uint64_t)&v251 - v31;
  uint64_t v294 = type metadata accessor for Parse.PegasusResult();
  uint64_t v291 = *(void *)(v294 - 8);
  uint64_t v32 = __chkstk_darwin(v294);
  v273 = (char *)&v251 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  v293 = (char *)&v251 - v35;
  __chkstk_darwin(v34);
  v290 = (char *)&v251 - v36;
  uint64_t v321 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  uint64_t v297 = *(void *)(v321 - 8);
  uint64_t v37 = __chkstk_darwin(v321);
  v277 = (char *)&v251 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v276 = (uint64_t)&v251 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v320 = (char *)&v251 - v42;
  __chkstk_darwin(v41);
  v319 = (char *)&v251 - v43;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
  uint64_t v45 = __chkstk_darwin(v44 - 8);
  uint64_t v287 = (uint64_t)&v251 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  uint64_t v301 = (uint64_t)&v251 - v47;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v49 = __chkstk_darwin(v48 - 8);
  v288 = (char *)&v251 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49);
  uint64_t v296 = (uint64_t)&v251 - v51;
  uint64_t v298 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsItem?);
  uint64_t v52 = __chkstk_darwin(v298);
  v318 = (void (*)(char *, char *, uint64_t))((char *)&v251 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v52);
  v299 = (char *)&v251 - v54;
  uint64_t v322 = type metadata accessor for SportsItem();
  uint64_t v311 = *(void *)(v322 - 8);
  uint64_t v55 = __chkstk_darwin(v322);
  v314 = (char *)&v251 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __chkstk_darwin(v55);
  v274 = (char *)&v251 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  v286 = (char *)&v251 - v60;
  __chkstk_darwin(v59);
  v315 = (char *)&v251 - v61;
  uint64_t v304 = type metadata accessor for Date();
  uint64_t v303 = *(void *)(v304 - 8);
  __chkstk_darwin(v304);
  v302 = (char *)&v251 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v64 = *(void *)(v63 - 8);
  uint64_t v65 = __chkstk_darwin(v63);
  v289 = (char *)&v251 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65);
  os_log_type_t v68 = (char *)&v251 - v67;
  uint64_t v69 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v70 = *(void *)(v69 - 8);
  uint64_t v71 = __chkstk_darwin(v69);
  uint64_t v73 = (char *)&v251 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __chkstk_darwin(v71);
  v279 = (char *)&v251 - v75;
  uint64_t v76 = __chkstk_darwin(v74);
  v278 = (char *)&v251 - v77;
  uint64_t v78 = __chkstk_darwin(v76);
  v275 = (char *)&v251 - v79;
  uint64_t v80 = __chkstk_darwin(v78);
  v295 = (char *)&v251 - v81;
  __chkstk_darwin(v80);
  uint64_t v83 = (char *)&v251 - v82;
  uint64_t v84 = *(void *)(v1 + 80);
  uint64_t v85 = *(void *)(v1 + 88);
  uint64_t v300 = v1;
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 56), v84);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v85 + 8))(v84, v85))
  {
    Parse.PegasusResult.response.getter();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
    uint64_t v86 = *(void (**)(char *, uint64_t))(v64 + 8);
    v255 = v68;
    uint64_t v257 = v64 + 8;
    v256 = v86;
    v86(v68, v63);
    char v87 = specialized static SportsPersonalizationEntryPoint.isSupportedPersonalizationInstruction(instruction:)((uint64_t)v83);
    uint64_t v88 = *(void (**)(char *, uint64_t))(v70 + 8);
    v254 = v83;
    uint64_t v89 = v83;
    uint64_t v258 = v69;
    uint64_t v90 = v70 + 8;
    v316 = v88;
    v88(v89, v69);
    uint64_t v91 = v63;
    if (v87)
    {
      uint64_t v253 = v70;
      uint64_t v252 = v64;
      type metadata accessor for PerformanceUtil();
      uint64_t v92 = static PerformanceUtil.shared.getter();
      __chkstk_darwin(v92);
      id v93 = v302;
      Date.init()();
      v249 = &v247;
      uint64_t v250 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)]?);
      v248 = partial apply for closure #2 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:);
      char v247 = 2;
      dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
      swift_release();
      uint64_t v94 = *(void (**)(char *, uint64_t))(v303 + 8);
      uint64_t v95 = v304;
      v94(v93, v304);
      id v96 = v325;
      if (!v325)
      {
        if (one-time initialization token for information != -1) {
          swift_once();
        }
        uint64_t v127 = type metadata accessor for Logger();
        __swift_project_value_buffer(v127, (uint64_t)static Logger.information);
        unint64_t v106 = Logger.logObject.getter();
        os_log_type_t v128 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v106, v128))
        {
          id v129 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v129 = 0;
          _os_log_impl(&dword_0, v106, v128, "Request doesn't have a supported (SportsEntity -> Instruction) mapping. Not performing sports personalization...", v129, 2u);
          swift_slowDealloc();

          return 0;
        }
LABEL_31:

        return 0;
      }
      v313 = v94;
      uint64_t v251 = v91;
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v312 = v90;
      uint64_t v97 = type metadata accessor for Logger();
      uint64_t v303 = __swift_project_value_buffer(v97, (uint64_t)static Logger.information);
      uint64_t v98 = Logger.logObject.getter();
      os_log_type_t v99 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v98, v99))
      {
        uint64_t v100 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v100 = 0;
        _os_log_impl(&dword_0, v98, v99, "Got a request that is applicable for sports personalization via alternative selection. Will attempt to select an alternative", v100, 2u);
        swift_slowDealloc();
      }

      uint64_t v101 = static PerformanceUtil.shared.getter();
      __chkstk_darwin(v101);
      Date.init()();
      v249 = &v247;
      uint64_t v250 = v298;
      v248 = partial apply for closure #3 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:);
      char v247 = 2;
      uint64_t v102 = (uint64_t)v299;
      dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
      swift_release();
      v313(v93, v95);
      id v103 = (void *)v311;
      id v104 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v311 + 48);
      uint64_t v105 = v322;
      v313 = (void (*)(char *, uint64_t))(v311 + 48);
      v310 = v104;
      if (v104(v102, 1, v322) == 1)
      {
        swift_bridgeObjectRelease();
        outlined destroy of Any?(v102, &demangling cache variable for type metadata for SportsItem?);
        unint64_t v106 = Logger.logObject.getter();
        os_log_type_t v107 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v106, v107))
        {
          uint64_t v108 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v108 = 0;
          _os_log_impl(&dword_0, v106, v107, "Inference was unable to recommend an alternative. Will use original instruction", v108, 2u);
          swift_slowDealloc();

          return 0;
        }
        goto LABEL_31;
      }
      v302 = v96;
      id v135 = (void (*)(char *, uint64_t, uint64_t))v103[4];
      uint64_t v136 = v315;
      v306 = (char *)(v103 + 4);
      v305 = v135;
      v135(v315, v102, v105);
      uint64_t v137 = (void (*)(char *, char *, uint64_t))v103[2];
      long long v138 = v286;
      v137(v286, v136, v105);
      uint64_t v139 = Logger.logObject.getter();
      os_log_type_t v140 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v139, v140))
      {
        uint64_t v141 = (uint8_t *)swift_slowAlloc();
        uint64_t v309 = swift_slowAlloc();
        uint64_t v324 = v309;
        *(_DWORD *)uint64_t v141 = 136315138;
        uint64_t v142 = v253;
        uint64_t v308 = (uint64_t)(v141 + 4);
        v137(v274, v138, v105);
        uint64_t v143 = String.init<A>(describing:)();
        uint64_t v323 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v144, &v324);
        id v103 = (void *)v311;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v307 = (void (*)(char *, uint64_t))v103[1];
        v307(v138, v105);
        _os_log_impl(&dword_0, v139, v140, "Got a recommended alternative entity: %s", v141, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v145 = v320;
      }
      else
      {
        v307 = (void (*)(char *, uint64_t))v103[1];
        v307(v138, v105);

        uint64_t v145 = v320;
        uint64_t v142 = v253;
      }
      uint64_t v146 = *((void *)v302 + 2);
      if (v146)
      {
        uint64_t v147 = (uint64_t)&v302[(*(unsigned __int8 *)(v297 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v297 + 80)];
        uint64_t v309 = v142 + 16;
        uint64_t v304 = (uint64_t)(v103 + 1);
        uint64_t v308 = *(void *)(v297 + 72);
        swift_bridgeObjectRetain();
        uint64_t v148 = v258;
        uint64_t v149 = v319;
        do
        {
          outlined init with copy of IdentifiedUser?(v147, (uint64_t)v149, &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
          uint64_t v150 = *(int *)(v321 + 48);
          uint64_t v151 = &v145[v150];
          uint64_t v152 = &v149[v150];
          uint64_t v153 = type metadata accessor for SportsPersonalizationEntity();
          os_log_type_t v154 = (void (**)(char *, char *, uint64_t))(*(void *)(v153 - 8) + 16);
          (*v154)(v145, v149, v153);
          (*(void (**)(char *, char *, uint64_t))v309)(v151, v152, v148);
          uint64_t v155 = (uint64_t)v318;
          SportsPersonalizationEntity.sportsItem.getter();
          uint64_t v156 = v148;
          uint64_t v157 = v322;
          os_log_type_t v158 = (void (**)(char *, uint64_t))(v154 - 1);
          if (v310(v155, 1, v322) == 1)
          {
            outlined destroy of Any?(v155, &demangling cache variable for type metadata for SportsItem?);
            (*v158)(v145, v153);
            v316(v151, v156);
            uint64_t v148 = v156;
          }
          else
          {
            unint64_t v159 = v314;
            v305(v314, v155, v157);
            (*v158)(v145, v153);
            v316(v151, v156);
            char v160 = static SportsItem.partiallyEqual(lhs:rhs:)();
            v307(v159, v157);
            uint64_t v148 = v156;
            if (v160)
            {
              swift_bridgeObjectRelease();
              outlined init with take of Flow?((uint64_t)v319, v301, &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
              uint64_t v161 = 0;
              goto LABEL_43;
            }
          }
          uint64_t v149 = v319;
          outlined destroy of Any?((uint64_t)v319, &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
          v147 += v308;
          --v146;
          uint64_t v145 = v320;
        }
        while (v146);
        swift_bridgeObjectRelease();
        uint64_t v161 = 1;
LABEL_43:
        uint64_t v142 = v253;
      }
      else
      {
        uint64_t v161 = 1;
        uint64_t v148 = v258;
      }
      uint64_t v162 = v297;
      uint64_t v163 = 1;
      uint64_t v164 = v301;
      uint64_t v165 = v321;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v297 + 56))(v301, v161, 1, v321);
      swift_bridgeObjectRelease();
      uint64_t v166 = v164;
      uint64_t v167 = v287;
      outlined init with copy of IdentifiedUser?(v166, v287, &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
      int v168 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v162 + 48))(v167, 1, v165);
      uint64_t v169 = v296;
      uint64_t v170 = v322;
      uint64_t v171 = (uint64_t)v288;
      if (v168 != 1)
      {
        uint64_t v172 = v276;
        outlined init with take of Flow?(v167, v276, &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
        uint64_t v173 = *(int *)(v165 + 48);
        id v174 = v277;
        Class v175 = &v277[v173];
        uint64_t v176 = v172 + v173;
        uint64_t v177 = type metadata accessor for SportsPersonalizationEntity();
        uint64_t v178 = *(void *)(v177 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v178 + 16))(v174, v172, v177);
        (*(void (**)(char *, uint64_t, uint64_t))(v142 + 16))(v175, v176, v258);
        (*(void (**)(uint64_t, char *, uint64_t))(v142 + 32))(v169, v175, v258);
        (*(void (**)(char *, uint64_t))(v178 + 8))(v174, v177);
        uint64_t v148 = v258;
        outlined destroy of Any?(v172, &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
        uint64_t v163 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56))(v169, v163, 1, v148);
      outlined destroy of Any?(v301, &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
      outlined init with copy of IdentifiedUser?(v169, v171, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v171, 1, v148) == 1)
      {
        outlined destroy of Any?(v171, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
        uint64_t v179 = Logger.logObject.getter();
        os_log_type_t v180 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v179, v180))
        {
          uint64_t v181 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v181 = 0;
          _os_log_impl(&dword_0, v179, v180, "Unable to map the recommended sports item back to an alternative. This is unexpected. Will continue with original instruction", v181, 2u);
          swift_slowDealloc();
        }

        outlined destroy of Any?(v169, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
        v307(v315, v170);
        return 0;
      }
      uint64_t v182 = v295;
      (*(void (**)(char *, uint64_t, uint64_t))(v142 + 32))(v295, v171, v148);
      uint64_t v183 = v275;
      v319 = *(char **)(v142 + 16);
      ((void (*)(char *, char *, uint64_t))v319)(v275, v182, v148);
      uint64_t v184 = Logger.logObject.getter();
      os_log_type_t v185 = static os_log_type_t.debug.getter();
      BOOL v186 = os_log_type_enabled(v184, v185);
      uint64_t v253 = v142 + 16;
      if (v186)
      {
        uint64_t v187 = (uint8_t *)swift_slowAlloc();
        uint64_t v188 = v148;
        uint64_t v324 = swift_slowAlloc();
        *(_DWORD *)uint64_t v187 = 136315138;
        lazy protocol witness table accessor for type InformationRoutingFlow and conformance InformationRoutingFlow(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction);
        uint64_t v189 = Message.debugDescription.getter();
        uint64_t v323 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v189, v190, &v324);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v316(v183, v148);
        _os_log_impl(&dword_0, v184, v185, "Reforming intent to use alternative instruction: %s", v187, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v316(v183, v148);

        uint64_t v188 = v148;
      }
      long long v191 = v254;
      v320 = *(char **)(v291 + 16);
      uint64_t v321 = v291 + 16;
      ((void (*)(char *, uint64_t, uint64_t))v320)(v290, v317, v294);
      uint64_t v192 = v255;
      Parse.PegasusResult.response.getter();
      v318 = *(void (**)(char *, char *, uint64_t))(v252 + 16);
      uint64_t v193 = v289;
      uint64_t v194 = v251;
      v318(v289, v192, v251);
      uint64_t v195 = v188;
      uint64_t v196 = v188;
      uint64_t v197 = v319;
      ((void (*)(char *, char *, uint64_t))v319)(v191, v295, v195);
      long long v198 = (void (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.modify();
      *id v199 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      v198(&v324, 0);
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.setter();
      ((void (*)(char *, char *, uint64_t))v197)(v278, v191, v196);
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.setter();
      uint64_t v200 = v191;
      uint64_t v201 = v196;
      uint64_t v202 = v316;
      v316(v200, v196);
      v256(v192, v194);
      v318(v192, v193, v194);
      Parse.PegasusResult.init(pegasusResponse:)();
      uint64_t v203 = v279;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
      long long v204 = v280;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.clientDrivenExperience.getter();
      v202(v203, v201);
      uint64_t v205 = Apple_Parsec_Siri_V2alpha_ClientDrivenExperience.components.getter();
      (*(void (**)(char *, uint64_t))(v281 + 8))(v204, v282);
      uint64_t v206 = *(void *)(v205 + 16);
      uint64_t v207 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
      uint64_t v208 = *(void *)(v207 - 8);
      if (v206)
      {
        uint64_t v209 = (uint64_t)v283;
        (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v207 - 8) + 16))(v283, v205+ ((*(unsigned __int8 *)(*(void *)(v207 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v207 - 8) + 80)), v207);
        uint64_t v210 = 0;
        uint64_t v211 = (uint64_t)v284;
      }
      else
      {
        uint64_t v210 = 1;
        uint64_t v211 = (uint64_t)v284;
        uint64_t v209 = (uint64_t)v283;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v208 + 56))(v209, v210, 1, v207);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v208 + 48))(v209, 1, v207) == 1)
      {
        outlined destroy of Any?(v209, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
        uint64_t v212 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
        uint64_t v213 = v292;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v212 - 8) + 56))(v292, 1, 1, v212);
      }
      else
      {
        uint64_t v213 = v292;
        Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
        (*(void (**)(uint64_t, uint64_t))(v208 + 8))(v209, v207);
        uint64_t v212 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v212 - 8) + 56))(v213, 0, 1, v212);
      }
      outlined init with copy of IdentifiedUser?(v213, v211, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
      type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
      uint64_t v214 = *(void *)(v212 - 8);
      uint64_t v215 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v214 + 48);
      if (v215(v211, 1, v212) == 1)
      {
        outlined destroy of Any?(v211, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
        uint64_t v216 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent();
        uint64_t v217 = v285;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v216 - 8) + 56))(v285, 1, 1, v216);
LABEL_73:
        long long v240 = v273;
        v241 = v293;
        uint64_t v242 = v294;
        ((void (*)(char *, char *, uint64_t))v320)(v273, v293, v294);
        type metadata accessor for InformationPassthroughFlow(0);
        uint64_t v243 = swift_allocObject();
        uint64_t v244 = v291;
        (*(void (**)(uint64_t, char *, uint64_t))(v291 + 32))(v243+ OBJC_IVAR____TtC21InformationFlowPluginP33_65CFA3A7C2969752B966336CF3E7884326InformationPassthroughFlow_result, v240, v242);
        uint64_t v324 = v243;
        lazy protocol witness table accessor for type InformationRoutingFlow and conformance InformationRoutingFlow(&lazy protocol witness table cache variable for type InformationPassthroughFlow and conformance InformationPassthroughFlow, (void (*)(uint64_t))type metadata accessor for InformationPassthroughFlow);
        uint64_t v109 = Flow.eraseToAnyFlow()();
        swift_release();
        outlined destroy of Any?(v292, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
        v245 = *(void (**)(char *, uint64_t))(v244 + 8);
        v245(v241, v242);
        v256(v289, v251);
        v245(v290, v242);
        v316(v295, v258);
        outlined destroy of Any?(v296, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
        v307(v315, v322);
        outlined destroy of Any?(v217, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
        return v109;
      }
      uint64_t v217 = v285;
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
      v218 = *(void (**)(uint64_t, uint64_t))(v214 + 8);
      v218(v211, v212);
      uint64_t v219 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent();
      uint64_t v220 = *(void *)(v219 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v220 + 48))(v217, 1, v219) == 1) {
        goto LABEL_73;
      }
      uint64_t v221 = v217;
      uint64_t v222 = v270;
      outlined init with copy of IdentifiedUser?(v221, v270, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v220 + 88))(v222, v219) != enum case for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent.videoClientComponent(_:))
      {
        uint64_t v223 = v259;
        outlined init with copy of IdentifiedUser?(v292, v259, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
        if (v215(v223, 1, v212) == 1)
        {
          outlined destroy of Any?(v223, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
LABEL_72:
          (*(void (**)(uint64_t, uint64_t))(v220 + 8))(v222, v219);
          uint64_t v217 = v285;
          goto LABEL_73;
        }
        uint64_t v224 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v226 = v225;
        v218(v223, v212);
        if (v224 == 0xD000000000000029 && v226 == 0x80000000000B1140)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v227 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v227 & 1) == 0) {
            goto LABEL_72;
          }
        }
      }
      (*(void (**)(uint64_t, uint64_t))(v220 + 8))(v222, v219);
      outlined destroy of Any?(v285, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
      v228 = v262;
      ((void (*)(char *, char *, uint64_t))v320)(v262, v293, v294);
      uint64_t v229 = v264;
      uint64_t v230 = v271;
      (*(void (**)(char *, void, uint64_t))(v264 + 104))(v228, enum case for Parse.pegasusResults(_:), v271);
      (*(void (**)(char *, char *, uint64_t))(v229 + 16))(v260, v228, v230);
      uint64_t v231 = v265;
      Input.init(parse:)();
      uint64_t v232 = v266;
      (*(void (**)(char *, char *, uint64_t))(v266 + 16))(v261, v231, v272);
      uint64_t v233 = v267;
      PluginAction.init(flowHandlerId:input:)();
      uint64_t v234 = v268;
      uint64_t v235 = v263;
      uint64_t v236 = v269;
      (*(void (**)(char *, char *, uint64_t))(v268 + 16))(v263, v233, v269);
      type metadata accessor for ReformerFlow(0);
      uint64_t v237 = swift_allocObject();
      (*(void (**)(uint64_t, char *, uint64_t))(v234 + 32))(v237 + OBJC_IVAR____TtC21InformationFlowPluginP33_65CFA3A7C2969752B966336CF3E7884312ReformerFlow_pluginAction, v235, v236);
      uint64_t v324 = v237;
      lazy protocol witness table accessor for type InformationRoutingFlow and conformance InformationRoutingFlow(&lazy protocol witness table cache variable for type ReformerFlow and conformance ReformerFlow, (void (*)(uint64_t))type metadata accessor for ReformerFlow);
      uint64_t v109 = Flow.eraseToAnyFlow()();
      swift_release();
      (*(void (**)(char *, uint64_t))(v234 + 8))(v233, v236);
      (*(void (**)(char *, uint64_t))(v232 + 8))(v231, v272);
      (*(void (**)(char *, uint64_t))(v229 + 8))(v228, v271);
      outlined destroy of Any?(v292, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
      v238 = *(void (**)(char *, uint64_t))(v291 + 8);
      uint64_t v239 = v294;
      v238(v293, v294);
      v256(v289, v251);
      v238(v290, v239);
      v316(v295, v258);
      outlined destroy of Any?(v296, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
      v307(v315, v322);
      return v109;
    }
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v114 = type metadata accessor for Logger();
    __swift_project_value_buffer(v114, (uint64_t)static Logger.information);
    id v115 = Logger.logObject.getter();
    os_log_type_t v116 = static os_log_type_t.debug.getter();
    BOOL v117 = os_log_type_enabled(v115, v116);
    uint64_t v118 = v258;
    uint64_t v119 = v316;
    uint64_t v120 = v255;
    if (v117)
    {
      uint64_t v121 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v121 = 0;
      _os_log_impl(&dword_0, v115, v116, "Primary instruction is unambiguous, not performing any sports personalization...", v121, 2u);
      swift_slowDealloc();
    }

    Parse.PegasusResult.response.getter();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
    v256(v120, v91);
    uint64_t v122 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    v119(v73, v118);
    uint64_t v123 = (uint64_t)v306;
    if (*(void *)(v122 + 16))
    {
      uint64_t v125 = v309;
      uint64_t v124 = v310;
      (*(void (**)(char *, unint64_t, unsigned int (*)(uint64_t, uint64_t, uint64_t)))(v309 + 16))(v306, v122 + ((*(unsigned __int8 *)(v309 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v309 + 80)), v310);
      uint64_t v126 = 0;
    }
    else
    {
      uint64_t v126 = 1;
      uint64_t v125 = v309;
      uint64_t v124 = v310;
    }
    uint64_t v130 = (uint64_t)v307;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int (*)(uint64_t, uint64_t, uint64_t)))(v125 + 56))(v123, v126, 1, v124);
    swift_bridgeObjectRelease();
    uint64_t v131 = v305;
    outlined init with copy of IdentifiedUser?(v123, (uint64_t)v305, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
    if ((*(unsigned int (**)(void, uint64_t, void))(v125 + 48))(v131, 1, v124) == 1)
    {
      uint64_t v132 = type metadata accessor for SportsPersonalizationEntity();
      uint64_t v133 = v308;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v132 - 8) + 56))(v308, 1, 1, v132);
    }
    else
    {
      (*(void (**)(uint64_t, void, unsigned int (*)(uint64_t, uint64_t, uint64_t)))(v125 + 32))(v130, v131, v124);
      uint64_t v133 = v308;
      closure #1 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)(v130, (uint64_t)v313);
      (*(void (**)(uint64_t, unsigned int (*)(uint64_t, uint64_t, uint64_t)))(v125 + 8))(v130, v124);
    }
    outlined destroy of Any?(v123, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
    uint64_t v134 = type metadata accessor for SportsPersonalizationEntity();
    (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v134 - 8) + 48))(v133, 1, v134);
    outlined destroy of Any?(v133, &demangling cache variable for type metadata for SportsPersonalizationEntity?);
    return 0;
  }
  else
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v110 = type metadata accessor for Logger();
    __swift_project_value_buffer(v110, (uint64_t)static Logger.information);
    uint64_t v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v111, v112))
    {
      uint64_t v113 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v113 = 0;
      _os_log_impl(&dword_0, v111, v112, "Sports personalization feature is disabled, will not try to choose an alternative instruction...", v113, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
}

uint64_t closure #1 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  Date.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsPersonalizationEntity?);
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t static SportsPersonalizationEntryPoint.makeSportsEntity(entity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalizationLevel?);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v35 - v8;
  uint64_t v10 = type metadata accessor for SportsItem();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsItem?);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v35 - v18;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.information);
  uint64_t v22 = specialized static UsoEntity_common_SportsItem.from(resultEntity:logger:)(a1, v21);
  if (v22)
  {
    uint64_t v42 = v11;
    uint64_t v43 = v22;
    uint64_t v23 = dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter();
    if (!v23)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v19, 1, 1, v10);
LABEL_29:
      static PersonalizationLevel.from(uso:)((unint64_t)v9);
      outlined init with copy of IdentifiedUser?((uint64_t)v19, (uint64_t)v17, &demangling cache variable for type metadata for SportsItem?);
      outlined init with copy of IdentifiedUser?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for PersonalizationLevel?);
      SportsPersonalizationEntity.init(sportsItem:personalizationLevel:)();
      swift_release();
      outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for PersonalizationLevel?);
      outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for SportsItem?);
      uint64_t v34 = type metadata accessor for SportsPersonalizationEntity();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(a2, 0, 1, v34);
    }
    unint64_t v24 = v23;
    SportsItem.init(sport:league:team:athlete:sportQId:leagueQId:teamQId:athleteQId:)();
    uint64_t v40 = v9;
    uint64_t v41 = a2;
    uint64_t v38 = v19;
    uint64_t v39 = v7;
    uint64_t v36 = v17;
    uint64_t v37 = v10;
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      if (v25) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v25 = *(void *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      if (v25)
      {
LABEL_7:
        if (v25 < 1)
        {
          __break(1u);
          JUMPOUT(0x8F020);
        }
        for (uint64_t i = 0; i != v25; ++i)
        {
          if ((v24 & 0xC000000000000001) != 0) {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            swift_retain();
          }
          dispatch thunk of CodeGenListEntry.entry.getter();
          if (v44)
          {
            swift_retain();
            specialized static SportsProperty.from(entity:)();
            char v28 = v27;
            swift_release_n();
            switch(v28)
            {
              case 0:
                SportsItem.team.setter();
                break;
              case 1:
                SportsItem.teamQId.setter();
                break;
              case 2:
                SportsItem.league.setter();
                break;
              case 3:
                SportsItem.leagueQId.setter();
                break;
              case 4:
                SportsItem.sport.setter();
                break;
              case 5:
                SportsItem.sportQId.setter();
                break;
              case 6:
                SportsItem.athlete.setter();
                break;
              case 7:
                SportsItem.athleteQId.setter();
                break;
              default:
                break;
            }
          }
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v32 = v42;
    uint64_t v33 = v37;
    uint64_t v19 = v38;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v38, v13, v37);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v19, 0, 1, v33);
    uint64_t v9 = v40;
    a2 = v41;
    uint64_t v7 = v39;
    uint64_t v17 = v36;
    goto LABEL_29;
  }
  uint64_t v29 = type metadata accessor for SportsPersonalizationEntity();
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56);

  return v30(a2, 1, 1, v29);
}

uint64_t closure #2 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Parse.PegasusResult.response.getter();
  uint64_t v6 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v7 = static SportsPersonalizationEntryPoint.makeEntityInstructionMapping(alternatives:)(v6);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v7;
  return result;
}

void *static SportsPersonalizationEntryPoint.makeEntityInstructionMapping(alternatives:)(uint64_t a1)
{
  uint64_t v80 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  uint64_t v2 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v61 = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v75 = (uint64_t)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v81 = (uint64_t)v53 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsPersonalizationEntity?);
  __chkstk_darwin(v8 - 8);
  uint64_t v74 = (uint64_t)v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for SportsPersonalizationEntity();
  uint64_t v10 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v60 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v73 = (uint64_t)v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v59 = (uint64_t)v53 - v19;
  uint64_t v77 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v20 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v22 = (char *)v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23)
  {
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    uint64_t v24 = v20 + 16;
    uint64_t v78 = v25;
    uint64_t v26 = a1 + ((*(unsigned __int8 *)(v24 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 64));
    uint64_t v62 = v2 + 16;
    uint64_t v69 = *(void *)(v24 + 56);
    uint64_t v70 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
    os_log_type_t v68 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
    uint64_t v57 = (void (**)(char *, uint64_t, uint64_t))(v2 + 32);
    uint64_t v63 = v2;
    uint64_t v56 = (void (**)(uint64_t, uint64_t))(v2 + 8);
    uint64_t v55 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    uint64_t v67 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    uint64_t v54 = (void (**)(char *, uint64_t, uint64_t))(v10 + 32);
    uint64_t v65 = (void (**)(char *, uint64_t))(v24 - 8);
    uint64_t v66 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
    uint64_t v58 = v16;
    uint64_t v64 = (unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    v53[1] = a1;
    swift_bridgeObjectRetain();
    uint64_t v76 = _swiftEmptyArrayStorage;
    v53[0] = v23;
    uint64_t v27 = v23;
    uint64_t v71 = v24;
    uint64_t v72 = v15;
    uint64_t v28 = v77;
    do
    {
      v78(v22, v26, v28);
      uint64_t v29 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      if (*(void *)(v29 + 16))
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v63 + 16))(v81, v29 + ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80)), v80);
        uint64_t v30 = 0;
      }
      else
      {
        uint64_t v30 = 1;
      }
      uint64_t v31 = v80;
      uint64_t v32 = v81;
      (*v70)(v81, v30, 1, v80);
      swift_bridgeObjectRelease();
      uint64_t v33 = v75;
      outlined init with copy of IdentifiedUser?(v32, v75, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
      if ((*v68)(v33, 1, v31) == 1)
      {
        uint64_t v34 = v74;
        (*v55)(v74, 1, 1, v79);
      }
      else
      {
        uint64_t v35 = (uint64_t)v61;
        uint64_t v36 = v80;
        (*v57)(v61, v33, v80);
        uint64_t v34 = v74;
        static SportsPersonalizationEntryPoint.makeSportsEntity(entity:)(v35, v74);
        (*v56)(v35, v36);
      }
      outlined destroy of Any?(v81, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
      if ((*v67)(v34, 1, v79) == 1)
      {
        outlined destroy of Any?(v34, &demangling cache variable for type metadata for SportsPersonalizationEntity?);
        uint64_t v37 = 1;
        uint64_t v38 = v72;
        uint64_t v28 = v77;
      }
      else
      {
        uint64_t v39 = *v54;
        uint64_t v40 = v60;
        uint64_t v41 = v79;
        (*v54)(v60, v34, v79);
        uint64_t v38 = v72;
        uint64_t v42 = &v14[*(int *)(v72 + 48)];
        v39(v14, (uint64_t)v40, v41);
        uint64_t v28 = v77;
        v78(v42, (uint64_t)v22, v77);
        uint64_t v37 = 0;
      }
      (*v66)(v14, v37, 1, v38);
      (*v65)(v22, v28);
      if ((*v64)(v14, 1, v38) == 1)
      {
        outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
      }
      else
      {
        uint64_t v43 = v59;
        outlined init with take of Flow?((uint64_t)v14, v59, &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
        outlined init with take of Flow?(v43, v73, &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
        unint64_t v44 = (unint64_t)v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, v44);
        }
        unint64_t v46 = *(void *)(v44 + 16);
        unint64_t v45 = *(void *)(v44 + 24);
        if (v46 >= v45 >> 1) {
          unint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1, v44);
        }
        *(void *)(v44 + 16) = v46 + 1;
        unint64_t v47 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
        uint64_t v76 = (void *)v44;
        outlined init with take of Flow?(v73, v44 + v47 + *(void *)(v58 + 72) * v46, &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
      }
      v26 += v69;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    uint64_t v23 = v53[0];
    uint64_t result = v76;
  }
  else
  {
    uint64_t result = _swiftEmptyArrayStorage;
  }
  if (result[2] != v23)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.information);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl(&dword_0, v50, v51, "One or more alternative instruction did not have a single sports entity. Will ignore alternatives...", v52, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return result;
}

uint64_t closure #3 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  uint64_t v7 = *(void *)(v41 - 8);
  uint64_t v8 = __chkstk_darwin(v41);
  uint64_t v40 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v39 = (char *)v35 - v10;
  uint64_t v45 = type metadata accessor for SportsPersonalizationEntity();
  uint64_t v11 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v42 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of OutputPublisherAsync(a1 + 16, (uint64_t)v46);
  uint64_t v13 = v47;
  uint64_t v14 = v48;
  uint64_t v15 = __swift_project_boxed_opaque_existential_1(v46, v47);
  int64_t v16 = *(void *)(a2 + 16);
  if (v16)
  {
    v35[1] = v15;
    v35[2] = v14;
    v35[3] = v13;
    v35[4] = a3;
    v35[5] = v3;
    uint64_t v49 = (char *)_swiftEmptyArrayStorage;
    int64_t v44 = v16;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
    uint64_t v17 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v18 = *(void *)(v7 + 72);
    uint64_t v36 = (void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    uint64_t v37 = v18;
    uint64_t v19 = (void (**)(void, void, void))(v11 + 32);
    uint64_t v20 = v42;
    uint64_t v38 = v11;
    uint64_t v21 = (uint64_t)v39;
    do
    {
      uint64_t v22 = v19;
      outlined init with copy of IdentifiedUser?(v17, v21, &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
      uint64_t v23 = v40;
      uint64_t v24 = *(int *)(v41 + 48);
      uint64_t v25 = v45;
      uint64_t v26 = &v40[v24];
      uint64_t v43 = (void (*)(char *, char *, uint64_t))(v21 + v24);
      (*v36)(v40, v21, v45);
      uint64_t v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
      uint64_t v28 = *(void *)(v27 - 8);
      (*(void (**)(char *, void, uint64_t))(v28 + 16))(v26, v43, v27);
      uint64_t v29 = v23;
      uint64_t v19 = v22;
      uint64_t v43 = (void (*)(char *, char *, uint64_t))*v22;
      v43(v20, v29, v25);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v27);
      outlined destroy of Any?(v21, &demangling cache variable for type metadata for (SportsPersonalizationEntity, Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
      uint64_t v30 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v30 + 2) + 1, 1);
        uint64_t v30 = v49;
      }
      unint64_t v32 = *((void *)v30 + 2);
      unint64_t v31 = *((void *)v30 + 3);
      uint64_t v33 = v38;
      uint64_t v20 = v42;
      if (v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        uint64_t v30 = v49;
      }
      *((void *)v30 + 2) = v32 + 1;
      v43(&v30[((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v33 + 72) * v32], v20, v45);
      uint64_t v49 = v30;
      v17 += v37;
      --v44;
    }
    while (v44);
  }
  dispatch thunk of SportsInferenceQuerying.makeRecommendation(entities:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
}

uint64_t SportsPersonalizationEntryPoint.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  outlined destroy of Any?(v0 + 96, &demangling cache variable for type metadata for SportsIntentDonator?);
  return v0;
}

uint64_t SportsPersonalizationEntryPoint.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  outlined destroy of Any?(v0 + 96, &demangling cache variable for type metadata for SportsIntentDonator?);

  return _swift_deallocClassInstance(v0, 136, 7);
}

uint64_t protocol witness for FlowEntryPoint.flowFor(input:) in conformance SportsPersonalizationEntryPoint()
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)v0 + 120))();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return protocol witness for FlowEntryPoint.flowFor(input:) in conformance InformationRoutingEntryPoint(v3, v1, v2);
}

uint64_t ReformerFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(ReformerFlow.execute(), 0, 0);
}

uint64_t ReformerFlow.execute()()
{
  uint64_t v10 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    type metadata accessor for PluginAction();
    lazy protocol witness table accessor for type InformationRoutingFlow and conformance InformationRoutingFlow(&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, (void (*)(uint64_t))&type metadata accessor for PluginAction);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, v2, v3, "Redirecting parse: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  static ExecuteResponse.redirect(nextPluginAction:)();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t ReformerFlow.__deallocating_deinit()
{
  return ReformerFlow.__deallocating_deinit(&OBJC_IVAR____TtC21InformationFlowPluginP33_65CFA3A7C2969752B966336CF3E7884312ReformerFlow_pluginAction, (uint64_t (*)(void))&type metadata accessor for PluginAction);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ReformerFlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Flow.execute(completion:) in conformance ReformerFlow(a1, a2, a3, a4, (void (*)(void))type metadata accessor for ReformerFlow);
}

uint64_t protocol witness for Flow.execute() in conformance ReformerFlow(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  v5[3] = a1;
  v5[4] = v4;
  return _swift_task_switch(ReformerFlow.execute(), 0, 0);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ReformerFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ReformerFlow(0);

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t InformationPassthroughFlow.__deallocating_deinit()
{
  return ReformerFlow.__deallocating_deinit(&OBJC_IVAR____TtC21InformationFlowPluginP33_65CFA3A7C2969752B966336CF3E7884326InformationPassthroughFlow_result, (uint64_t (*)(void))&type metadata accessor for Parse.PegasusResult);
}

uint64_t ReformerFlow.__deallocating_deinit(void *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = v2 + *a1;
  uint64_t v4 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = *(unsigned int *)(*(void *)v2 + 48);
  uint64_t v6 = *(unsigned __int16 *)(*(void *)v2 + 52);

  return _swift_deallocClassInstance(v2, v5, v6);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance InformationPassthroughFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance InformationPassthroughFlow;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance InformationPassthroughFlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Flow.execute(completion:) in conformance ReformerFlow(a1, a2, a3, a4, (void (*)(void))type metadata accessor for InformationPassthroughFlow);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ReformerFlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t protocol witness for Flow.execute() in conformance InformationPassthroughFlow(uint64_t a1)
{
  v2[3] = a1;
  uint64_t v3 = type metadata accessor for Parse.PegasusResult();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = *v1;
  v2[6] = v4;
  v2[7] = v5;
  return _swift_task_switch(protocol witness for Flow.execute() in conformance InformationPassthroughFlow, 0, 0);
}

uint64_t protocol witness for Flow.execute() in conformance InformationPassthroughFlow()
{
  uint64_t v1 = v0[6];
  (*(void (**)(uint64_t, uint64_t, void))(v0[5] + 16))(v1, v0[7]+ OBJC_IVAR____TtC21InformationFlowPluginP33_65CFA3A7C2969752B966336CF3E7884326InformationPassthroughFlow_result, v0[4]);
  int v2 = [self isSiriLocationServicesPromptingEnabled];
  v0[2] = specialized InformationRoutingFlow.__allocating_init(result:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(v1, v2);
  type metadata accessor for InformationRoutingFlow(0);
  lazy protocol witness table accessor for type InformationRoutingFlow and conformance InformationRoutingFlow(&lazy protocol witness table cache variable for type InformationRoutingFlow and conformance InformationRoutingFlow, (void (*)(uint64_t))type metadata accessor for InformationRoutingFlow);
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance InformationPassthroughFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for InformationPassthroughFlow(0);

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t partial apply for closure #1 in SportsPersonalizationEntryPoint.flowFor(input:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)(*(void *)(v1 + 24));
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t partial apply for closure #2 in SportsPersonalizationEntryPoint.flowFor(input:)()
{
  return closure #2 in SportsPersonalizationEntryPoint.flowFor(input:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t outlined destroy of SportsIntentDonator(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type SportsInactionReason and conformance SportsInactionReason()
{
  unint64_t result = lazy protocol witness table cache variable for type SportsInactionReason and conformance SportsInactionReason;
  if (!lazy protocol witness table cache variable for type SportsInactionReason and conformance SportsInactionReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SportsInactionReason and conformance SportsInactionReason);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SportsInactionReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x9089CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsInactionReason()
{
  return &type metadata for SportsInactionReason;
}

uint64_t getEnumTagSinglePayload for SportsPersonalizationAction(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD)
  {
    unsigned int v2 = a2 + 3;
    if (a2 + 3 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 3;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x90980);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 3;
  unsigned int v9 = v7 - 3;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for SportsPersonalizationAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFD) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v7 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x90A68);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for SportsPersonalizationAction(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 3) {
    return v1 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for SportsPersonalizationAction(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsPersonalizationAction()
{
  return &type metadata for SportsPersonalizationAction;
}

uint64_t getEnumTagSinglePayload for SportsPersonalizationAction.SelectionMetric(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SportsPersonalizationAction.SelectionMetric(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x90C30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsPersonalizationAction.SelectionMetric()
{
  return &type metadata for SportsPersonalizationAction.SelectionMetric;
}

uint64_t initializeBufferWithCopyOfBuffer for SportsPersonalizationResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for SportsPersonalizationResult()
{
  return swift_release();
}

uint64_t assignWithCopy for SportsPersonalizationResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for SportsPersonalizationResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsPersonalizationResult(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 9)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsPersonalizationResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsPersonalizationResult()
{
  return &type metadata for SportsPersonalizationResult;
}

uint64_t type metadata accessor for SportsPersonalizationEntryPoint()
{
  return self;
}

uint64_t ObjC metadata update function for ReformerFlow()
{
  return type metadata accessor for ReformerFlow(0);
}

uint64_t type metadata accessor for ReformerFlow(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for ReformerFlow);
}

uint64_t type metadata completion function for ReformerFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ReformerFlow(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for PluginAction);
}

uint64_t ObjC metadata update function for InformationPassthroughFlow()
{
  return type metadata accessor for InformationPassthroughFlow(0);
}

uint64_t type metadata accessor for InformationPassthroughFlow(uint64_t a1)
{
  return type metadata accessor for InformationRoutingFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for InformationPassthroughFlow);
}

uint64_t type metadata completion function for InformationPassthroughFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ReformerFlow(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for Parse.PegasusResult);
}

uint64_t type metadata completion function for ReformerFlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t specialized InformationRoutingFlow.__allocating_init(result:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(uint64_t a1, int a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for InformationRoutingFlow.State(0);
  __chkstk_darwin(v5);
  BOOL v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Parse.PegasusResult();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  swift_storeEnumTagMultiPayload();
  static AceService.currentAsync.getter();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  static Device.current.getter();
  type metadata accessor for CommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v10 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for InformationViewFactory();
  uint64_t v11 = (void *)swift_allocObject();
  id v12 = [self sharedPreferences];
  uint64_t v13 = type metadata accessor for PommesServerFallbackPreferences();
  swift_allocObject();
  uint64_t v14 = PommesServerFallbackPreferences.init(_:)();
  v11[11] = v13;
  v11[12] = &protocol witness table for PommesServerFallbackPreferences;
  v11[8] = v14;
  outlined init with take of PatternFlowProviding(v20, (uint64_t)(v11 + 3));
  _OWORD v11[2] = v10;
  type metadata accessor for ExperienceSelector();
  uint64_t v15 = swift_allocObject();
  type metadata accessor for PommesResponse();
  static PommesResponse.makeDefaultInteractionStream()();
  type metadata accessor for InformationRoutingFlow(0);
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)((uint64_t)v7, (uint64_t)v22, (uint64_t)v21, (uint64_t)v11, v15, (uint64_t)v20, a2, v16);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v17;
}

uint64_t specialized InformationRoutingFlow.init(state:aceService:outputPublisher:informationViewFactory:experienceSelector:interactionStream:isSiriLocationServicesPromptingEnabled:knowledgeFallbackHelper:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  HIDWORD(v20) = a7;
  uint64_t v21 = type metadata accessor for UtteranceNormalizer();
  uint64_t v15 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = &type metadata for KnowledgeFallbackHelper;
  uint64_t v24 = &protocol witness table for KnowledgeFallbackHelper;
  uint64_t v18 = a8 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_interactionStream;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(void *)(v18 + 32) = 0;
  outlined init with copy of InformationRoutingFlow.State(a1, a8 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_state);
  outlined init with copy of OutputPublisherAsync(a2, a8 + 56);
  outlined init with copy of OutputPublisherAsync(a3, a8 + 16);
  *(void *)(a8 + 96) = a4;
  *(void *)(a8 + 104) = a5;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  outlined assign with copy of CurareInteractionStream?(a6, v18);
  swift_endAccess();
  *(unsigned char *)(a8 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_isSiriLocationServicesPromptingEnabled) = BYTE4(v20);
  outlined init with copy of OutputPublisherAsync((uint64_t)v22, a8 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_knowledgeFallbackHelper);
  UtteranceNormalizer.init(locale:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  outlined destroy of Any?(a6, &demangling cache variable for type metadata for CurareInteractionStream?);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  outlined destroy of InformationRoutingFlow.State(a1);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a8 + OBJC_IVAR____TtC21InformationFlowPlugin22InformationRoutingFlow_utteranceNormalizer, v17, v21);
  return a8;
}

uint64_t outlined init with copy of InformationRoutingFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InformationRoutingFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of InformationRoutingFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InformationRoutingFlow.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type InformationRoutingFlow and conformance InformationRoutingFlow(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized static SportsPersonalizationEntryPoint.isSupportedPersonalizationInstruction(instruction:)(uint64_t a1)
{
  uint64_t v53 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  uint64_t v50 = *(void (***)(char *, uint64_t))(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CatDialogComponent();
  uint64_t v49 = *(void (***)(char *, uint64_t))(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v55 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v54 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (void (**)(char *, uint64_t))((char *)&v44 - v7);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v57 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    uint64_t v45 = v14;
    uint64_t v46 = v13;
    uint64_t v47 = a1;
    uint64_t v48 = v8;
    os_log_type_t v51 = (void (*)(char *, void (**)(char *, uint64_t), uint64_t))v4;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
    uint64_t v18 = v10 + 16;
    uint64_t v19 = v20;
    unint64_t v21 = v16 + ((*(unsigned __int8 *)(v18 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 64));
    uint64_t v22 = (void (**)(char *, uint64_t))(v18 - 8);
    uint64_t v23 = *(void *)(v18 + 56);
    uint64_t v44 = v16;
    swift_bridgeObjectRetain();
    while (1)
    {
      v19(v12, v21, v9);
      if (Apple_Parsec_Siri_Context_ResultEntity.name.getter() == 0x6769626D61736944 && v24 == 0xEE006E6F69746175) {
        break;
      }
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*v22)(v12, v9);
      if (v25) {
        goto LABEL_10;
      }
      v21 += v23;
      if (!--v17)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v26 = 0;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    (*v22)(v12, v9);
LABEL_10:
    swift_bridgeObjectRelease_n();
    uint64_t v26 = 1;
LABEL_11:
    uint64_t v4 = (uint64_t)v51;
    uint64_t v8 = v48;
    uint64_t v14 = v45;
    uint64_t v13 = v46;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = 0;
  }
  uint64_t v27 = v57;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter();
  uint64_t v28 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.components.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v27, v13);
  uint64_t v29 = *(char **)(v28 + 16);
  if (v29)
  {
    LODWORD(v45) = v26;
    uint64_t v30 = *(void (**)(char *, void (**)(char *, uint64_t), uint64_t))(v58 + 16);
    unint64_t v31 = v28 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
    uint64_t v48 = v50 + 1;
    ++v49;
    uint64_t v50 = (void (**)(char *, uint64_t))(v58 + 8);
    os_log_type_t v51 = v30;
    v58 += 16;
    uint64_t v32 = *(void *)(v58 + 56);
    uint64_t v46 = v28;
    uint64_t v47 = v32;
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v57 = v29;
      uint64_t v33 = v51;
      v51((char *)v8, (void (**)(char *, uint64_t))v31, v4);
      uint64_t v34 = v55;
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.catDialog.getter();
      Apple_Parsec_Siri_V2alpha_CatDialogComponent.catID.getter();
      (*v49)(v34, v56);
      Swift::String v35 = String.lowercased()();
      swift_bridgeObjectRelease();
      Swift::String v60 = v35;
      strcpy(v59, "disambiguation");
      v59[15] = -18;
      lazy protocol witness table accessor for type String and conformance String();
      char v36 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = v54;
      v33(v54, v8, v4);
      if (v36) {
        break;
      }
      uint64_t v38 = v52;
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
      Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
      (*v48)(v38, v53);
      Swift::String v39 = String.lowercased()();
      swift_bridgeObjectRelease();
      Swift::String v60 = v39;
      strcpy(v59, "disambiguation");
      v59[15] = -18;
      char v40 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      uint64_t v41 = *v50;
      (*v50)(v37, v4);
      v41((char *)v8, v4);
      if (v40) {
        goto LABEL_20;
      }
      v31 += v47;
      uint64_t v29 = v57 - 1;
      if (v57 == (unsigned char *)&dword_0 + 1)
      {
        swift_bridgeObjectRelease_n();
        return v45;
      }
    }
    uint64_t v42 = *v50;
    (*v50)(v37, v4);
    v42((char *)v8, v4);
LABEL_20:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v26;
}

uint64_t partial apply for closure #2 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)@<X0>(void *a1@<X8>)
{
  return closure #2 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)(a1);
}

uint64_t partial apply for closure #3 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)@<X0>(uint64_t a1@<X8>)
{
  return closure #3 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in closure #1 in SportsPersonalizationEntryPoint.makePersonalizedSportsExperience(result:)@<X0>(uint64_t a1@<X8>)
{
  return static SportsPersonalizationEntryPoint.makeSportsEntity(entity:)(*(void *)(v1 + 16), a1);
}

uint64_t protocol witness for SiriLocationAccessGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:) in conformance OverrideGuardFlowStrategy.DefaultGuardFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return SiriLocationAccessGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for SiriLocationAccessGuardFlowStrategy.makeErrorResponse(error:) in conformance OverrideGuardFlowStrategy.DefaultGuardFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return SiriLocationAccessGuardFlowStrategy.makeErrorResponse(error:)(a1, a2, a3, a4);
}

uint64_t OverrideGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = a4;
  *(unsigned char *)(v4 + 56) = a3;
  *(void *)(v4 + 16) = a1;
  return _swift_task_switch(OverrideGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:), 0, 0);
}

uint64_t OverrideGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:)()
{
  unint64_t v1 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v6 = v1;
  if (!(v1 >> 62))
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
    if (v7) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v6 & 0xC000000000000001) != 0)
  {
    id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
      return SiriLocationAccessGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:)(v7, v2, v3, v4, v5);
    }
    id v8 = *(id *)(v6 + 32);
  }
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  type metadata accessor for GenericExperience();
  uint64_t v10 = swift_dynamicCastClass();

  if (!v10)
  {
LABEL_12:
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 40) = v14;
    unint64_t v5 = lazy protocol witness table accessor for type OverrideGuardFlowStrategy.DefaultGuardFlowStrategy and conformance OverrideGuardFlowStrategy.DefaultGuardFlowStrategy();
    *uint64_t v14 = v0;
    v14[1] = OverrideGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:);
    uint64_t v3 = *(unsigned __int8 *)(v0 + 56);
    uint64_t v7 = *(void *)(v0 + 16);
    uint64_t v2 = *(void *)(v0 + 24);
    uint64_t v4 = &type metadata for OverrideGuardFlowStrategy.DefaultGuardFlowStrategy;
    return SiriLocationAccessGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:)(v7, v2, v3, v4, v5);
  }
  uint64_t v11 = *(void *)(v0 + 16);
  *(void *)(v11 + 32) = 0;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  id v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(OverrideGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type OverrideGuardFlowStrategy.DefaultGuardFlowStrategy and conformance OverrideGuardFlowStrategy.DefaultGuardFlowStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type OverrideGuardFlowStrategy.DefaultGuardFlowStrategy and conformance OverrideGuardFlowStrategy.DefaultGuardFlowStrategy;
  if (!lazy protocol witness table cache variable for type OverrideGuardFlowStrategy.DefaultGuardFlowStrategy and conformance OverrideGuardFlowStrategy.DefaultGuardFlowStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OverrideGuardFlowStrategy.DefaultGuardFlowStrategy and conformance OverrideGuardFlowStrategy.DefaultGuardFlowStrategy);
  }
  return result;
}

uint64_t OverrideGuardFlowStrategy.makeErrorResponse(error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(OverrideGuardFlowStrategy.makeErrorResponse(error:), 0, 0);
}

uint64_t OverrideGuardFlowStrategy.makeErrorResponse(error:)()
{
  unint64_t v1 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v5 = v1;
  if (!(v1 >> 62))
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
    if (v6) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v5 & 0xC000000000000001) != 0)
  {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8)))
    {
      __break(1u);
      return SiriLocationAccessGuardFlowStrategy.makeErrorResponse(error:)(v6, v2, v3, v4);
    }
    id v7 = *(id *)(v5 + 32);
  }
  id v8 = v7;
  swift_bridgeObjectRelease();
  type metadata accessor for GenericExperience();
  uint64_t v9 = swift_dynamicCastClass();

  if (!v9)
  {
LABEL_12:
    uint64_t v13 = (void *)swift_task_alloc();
    v0[5] = v13;
    unint64_t v4 = lazy protocol witness table accessor for type OverrideGuardFlowStrategy.DefaultGuardFlowStrategy and conformance OverrideGuardFlowStrategy.DefaultGuardFlowStrategy();
    void *v13 = v0;
    v13[1] = OverrideGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:);
    uint64_t v6 = v0[2];
    uint64_t v2 = v0[3];
    uint64_t v3 = &type metadata for OverrideGuardFlowStrategy.DefaultGuardFlowStrategy;
    return SiriLocationAccessGuardFlowStrategy.makeErrorResponse(error:)(v6, v2, v3, v4);
  }
  uint64_t v10 = v0[2];
  *(void *)(v10 + 32) = 0;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t protocol witness for SiriLocationAccessGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:) in conformance OverrideGuardFlowStrategy(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *(void *)uint64_t v9 = v4;
  *(unsigned char *)(v9 + 56) = a3;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = v8;
  *(void *)(v9 + 8) = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  *(void *)(v9 + 16) = a1;
  return _swift_task_switch(OverrideGuardFlowStrategy.makeFailureResponse(deviceState:requestingPreciseLocation:), 0, 0);
}

uint64_t protocol witness for SiriLocationAccessGuardFlowStrategy.makeErrorResponse(error:) in conformance OverrideGuardFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[3] = a2;
  v7[4] = v6;
  v7[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  long long v7[2] = a1;
  return _swift_task_switch(OverrideGuardFlowStrategy.makeErrorResponse(error:), 0, 0);
}

void **initializeBufferWithCopyOfBuffer for OverrideGuardFlowStrategy(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void **assignWithCopy for OverrideGuardFlowStrategy(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void **assignWithTake for OverrideGuardFlowStrategy(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for OverrideGuardFlowStrategy(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OverrideGuardFlowStrategy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OverrideGuardFlowStrategy()
{
  return &type metadata for OverrideGuardFlowStrategy;
}

ValueMetadata *type metadata accessor for OverrideGuardFlowStrategy.DefaultGuardFlowStrategy()
{
  return &type metadata for OverrideGuardFlowStrategy.DefaultGuardFlowStrategy;
}

uint64_t RenderPegasusFlow.__allocating_init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = specialized RenderPegasusFlow.__allocating_init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)(a1, a2, a3, a4, a5, a7);
  swift_release();
  swift_release();
  return v7;
}

uint64_t RenderPegasusFlow.__allocating_init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v16 = *(void *)(a8 + 24);
  uint64_t v15 = *(void *)(a8 + 32);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(a8, v16);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = specialized RenderPegasusFlow.__allocating_init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(a1, a2, a3, v23, v24, v25, v26, (uint64_t)v19, a9, a10, v10, v16, v15);
  __swift_destroy_boxed_opaque_existential_1(a8);
  return v21;
}

uint64_t protocol witness for static AppResolutionUnsuccessfulResponseProducing.makeAppNotFoundOnDeviceResponse(appNameSearchTerm:) in conformance AppResolutionStrategyHelpers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return static AppResolutionStrategyHelpers.makeAppNotFoundOnDeviceResponse(appNameSearchTerm:)(a1, a2, a3);
}

uint64_t RenderPegasusFlow.outputPublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(v1 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_outputPublisher, a1);
}

uint64_t RenderPegasusFlow.informationViewFactory.getter()
{
  return swift_retain();
}

uint64_t closure #1 in RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a2);
}

uint64_t RenderPegasusFlow.__allocating_init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t v26 = a1;
  uint64_t v27 = a3;
  uint64_t v25 = a10;
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = *(void *)(a9 + 24);
  uint64_t v17 = *(void *)(a9 + 32);
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1(a9, v16);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v21 + 16))(v20);
  uint64_t v22 = specialized RenderPegasusFlow.init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)(v26, a2, v27, a4, a5, a6, v28, v29, (uint64_t)v20, v25, a11, v15, v16, v17);
  swift_release();
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(a9);
  return v22;
}

uint64_t RenderPegasusFlow.init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v26 = a3;
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v24 = a1;
  uint64_t v16 = *(void *)(a9 + 24);
  uint64_t v15 = *(void *)(a9 + 32);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(a9, v16);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = specialized RenderPegasusFlow.init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)(v24, a2, v26, a4, a5, a6, v27, v28, (uint64_t)v19, a10, a11, v25, v16, v15);
  swift_release();
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(a9);
  return v21;
}

uint64_t RenderPegasusFlow.addReferenceResolutionEntities(from:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RREntity();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v44 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v43 = (char *)v38 - v13;
  uint64_t v14 = *(void *)(a1 + 16);
  _OWORD v38[2] = v4;
  if (v14)
  {
    uint64_t v15 = *(void *)(type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity() - 8);
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v17 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    uint64_t v41 = v10;
    uint64_t v18 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v19 = *(void *)(v15 + 72);
    v38[1] = a1;
    swift_bridgeObjectRetain();
    uint64_t v20 = &_swiftEmptyArrayStorage;
    uint64_t v42 = v9;
    Swift::String v39 = v17;
    uint64_t v40 = v19;
    do
    {
      uint64_t v21 = v3;
      closure #1 in RenderPegasusFlow.addReferenceResolutionEntities(from:)((uint64_t)v8);
      if (v3)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if ((*v17)(v8, 1, v9) == 1)
      {
        outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for RREntity?);
      }
      else
      {
        uint64_t v22 = *v18;
        uint64_t v23 = v43;
        (*v18)(v43, v8, v9);
        v22(v44, v23, v9);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v20 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, (unint64_t)v20);
        }
        unint64_t v25 = v20[2];
        unint64_t v24 = v20[3];
        uint64_t v26 = (uint64_t)v20;
        uint64_t v3 = v21;
        if (v25 >= v24 >> 1) {
          uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, (unint64_t)v20);
        }
        uint64_t v17 = v39;
        *(void *)(v26 + 16) = v25 + 1;
        uint64_t v20 = (void *)v26;
        unint64_t v27 = v26
            + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))
            + *(void *)(v41 + 72) * v25;
        uint64_t v9 = v42;
        v22((char *)v27, v44, v42);
        uint64_t v19 = v40;
      }
      v16 += v19;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = &_swiftEmptyArrayStorage;
  }
  uint64_t v29 = (uint64_t)v20;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.information);
  swift_bridgeObjectRetain_n();
  unint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315138;
    uint64_t v44 = (char *)(v33 + 4);
    v45[0] = v34;
    swift_bridgeObjectRetain();
    uint64_t v35 = Array.description.getter();
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    void v45[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v31, v32, "Adding RR entities: %s", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  specialized Array.append<A>(contentsOf:)(v29);
  return swift_endAccess();
}

uint64_t closure #1 in RenderPegasusFlow.addReferenceResolutionEntities(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  __chkstk_darwin(v1 - 8);
  uint64_t v47 = (char *)v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Typespb_Domain();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v42 = v3;
  uint64_t v43 = v4;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for GroupIdentifier();
  uint64_t v44 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v46 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_Context_ResultEntity.usoEntity.getter();
  uint64_t v50 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type RenderPegasusFlow and conformance RenderPegasusFlow(&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UsoGraph);
  uint64_t v14 = v51;
  uint64_t result = Message.init(serializedData:extensions:partial:options:)();
  if (!v14)
  {
    uint64_t v51 = v7;
    uint64_t v16 = v47;
    uint64_t v17 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    uint64_t v18 = static UsoConversionUtils.extractFirstEntityFromGraph(graph:)();
    if (v18)
    {
      v40[3] = v18;
      Apple_Parsec_Siri_Context_ResultEntity.groupID.getter();
      v40[4] = v17;
      uint64_t v41 = v11;
      Apple_Parsec_Siri_Context_ResultEntity.groupSequenceNumber.getter();
      v40[0] = v9;
      GroupIdentifier.init(id:seq:)();
      uint64_t v19 = Apple_Parsec_Siri_Context_ResultEntity.id.getter();
      v40[1] = v20;
      _OWORD v40[2] = v19;
      *(void *)&long long v48 = 0;
      *((void *)&v48 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      v21._object = (void *)0x80000000000AEAA0;
      v21._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v21);
      Apple_Parsec_Siri_Context_ResultEntity.domain.getter();
      uint64_t v22 = v42;
      _print_unlocked<A, B>(_:_:)();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v22);
      uint64_t v23 = v44;
      unint64_t v24 = v13;
      unint64_t v25 = v16;
      uint64_t v26 = v16;
      uint64_t v27 = v40[0];
      uint64_t v28 = v51;
      (*(void (**)(char *, void, uint64_t))(v44 + 16))(v26, v40[0], v51);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v28);
      uint64_t v29 = v45;
      RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v27, v28);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v24, v41);
      uint64_t v30 = type metadata accessor for RREntity();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 0, 1, v30);
    }
    else
    {
      uint64_t v31 = v11;
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.information);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      BOOL v35 = os_log_type_enabled(v33, v34);
      uint64_t v36 = v45;
      uint64_t v37 = v46;
      if (v35)
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl(&dword_0, v33, v34, "Unable to extract entity from USO graph for RR donation", v38, 2u);
        swift_slowDealloc();
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v31);
      uint64_t v39 = type metadata accessor for RREntity();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v36, 1, 1, v39);
    }
  }
  return result;
}

uint64_t RenderPegasusFlow.on(input:)()
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.information);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "RenderPegasusFlow does not expect input", v3, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t RenderPegasusFlow.execute()(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for PommesContext();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel();
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ExecuteResponse();
  v2[16] = v5;
  v2[17] = *(void *)(v5 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Parse.DirectInvocation();
  v2[20] = v6;
  v2[21] = *(void *)(v6 - 8);
  v2[22] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v2[23] = v7;
  char v2[24] = *(void *)(v7 - 8);
  v2[25] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for PerformanceUtil.Ticket();
  v2[26] = v8;
  v2[27] = *(void *)(v8 - 8);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  v2[31] = swift_task_alloc();
  v2[32] = type metadata accessor for PegasusExperience();
  v2[33] = swift_task_alloc();
  return _swift_task_switch(RenderPegasusFlow.execute(), 0, 0);
}

{
  uint64_t v1;
  uint64_t v3;

  *(void *)(*(void *)v1 + 368) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(RenderPegasusFlow.execute(), 0, 0);
}

{
  uint64_t v1;
  uint64_t v3;

  *(void *)(*(void *)v1 + 408) = a1;
  swift_task_dealloc();
  return _swift_task_switch(RenderPegasusFlow.execute(), 0, 0);
}

uint64_t RenderPegasusFlow.execute()()
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[34] = __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "RenderPegasusFlow.execute", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[33];
  uint64_t v6 = v0[7];

  outlined init with copy of PegasusExperience(v6 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_experience, v5);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v15 = v0[7];
      (*(void (**)(void, void, void))(v0[12] + 32))(v0[13], v0[33], v0[11]);
      Date.init()();
      PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
      uint64_t v16 = *(void *)(v15 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_pommesResponse);
      if (v16)
      {
        uint64_t v18 = v0[9];
        uint64_t v17 = v0[10];
        uint64_t v19 = v0[8];
        PommesResponse.pommesContext.getter();
        uint64_t v16 = PommesContext.exportPegasusConversationContext()();
        unint64_t v21 = v20;
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      }
      else
      {
        unint64_t v21 = 0xF000000000000000;
      }
      v0[47] = v16;
      v0[48] = v21;
      v0[49] = type metadata accessor for PerformanceUtil();
      static PerformanceUtil.shared.getter();
      dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
      swift_release();
      Date.init()();
      PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
      uint64_t v52 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:)
                                            + async function pointer to specialized PegasusPatternFlowFactory.makeRenderPatternFlow(patternModel:pegasusConversationContext:));
      uint64_t v33 = (void *)swift_task_alloc();
      v0[50] = v33;
      *uint64_t v33 = v0;
      v33[1] = RenderPegasusFlow.execute();
      uint64_t v34 = v0[13];
      uint64_t result = v52(v34);
      break;
    case 2u:
      uint64_t v22 = v0[22];
      uint64_t v23 = v0[7];
      (*(void (**)(uint64_t, void, void))(v0[21] + 32))(v22, v0[33], v0[20]);
      specialized FlowTrampolining.makeResponse(for:)(v22);
      type metadata accessor for PerformanceUtil();
      static PerformanceUtil.shared.getter();
      uint64_t v24 = v0[15];
      if (*(void *)(v23 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_pommesResponse))
      {
        PommesResponse.requestId.getter();
        PommesResponse.pommesCandidateId.getter();
      }
      else
      {
        uint64_t v35 = type metadata accessor for PommesCandidateId();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v24, 1, 1, v35);
      }
      uint64_t v37 = v0[21];
      uint64_t v36 = v0[22];
      uint64_t v38 = v0[20];
      uint64_t v39 = v0[17];
      uint64_t v49 = v0[16];
      uint64_t v50 = v0[19];
      uint64_t v40 = v0[15];
      uint64_t v41 = v0[6];
      dispatch thunk of PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:)();
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of Any?(v40, (uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v41, v50, v49);
      goto LABEL_25;
    case 3u:
      unint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl(&dword_0, v25, v26, "RenderPegasusFlow no valid pegasus experience. Sending error flow.", v27, 2u);
        swift_slowDealloc();
      }
      uint64_t v29 = v0[24];
      uint64_t v28 = v0[25];
      uint64_t v51 = v0[23];
      uint64_t v30 = v0[7];

      v0[5] = v30;
      type metadata accessor for PerformanceUtil();
      static PerformanceUtil.shared.getter();
      uint64_t v31 = (void *)swift_task_alloc();
      v31[2] = v0 + 5;
      uint64_t v31[3] = 0xD00000000000002DLL;
      v31[4] = 0x80000000000B11E0;
      Date.init()();
      dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v51);
      swift_task_dealloc();
      static PerformanceUtil.shared.getter();
      uint64_t v32 = v0[14];
      if (*(void *)(v30 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_pommesResponse))
      {
        PommesResponse.requestId.getter();
        PommesResponse.pommesCandidateId.getter();
      }
      else
      {
        uint64_t v42 = type metadata accessor for PommesCandidateId();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v32, 1, 1, v42);
      }
      uint64_t v44 = v0[17];
      uint64_t v43 = v0[18];
      uint64_t v45 = v0[16];
      uint64_t v46 = v0[14];
      uint64_t v47 = v0[6];
      dispatch thunk of PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:)();
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of Any?(v46, (uint64_t *)&demangling cache variable for type metadata for PommesCandidateId?);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v47, v43, v45);
LABEL_25:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      long long v48 = (uint64_t (*)(void))v0[1];
      uint64_t result = v48();
      break;
    default:
      uint64_t v7 = (void *)v0[33];
      uint64_t v8 = v0[31];
      v0[35] = *v7;
      v0[36] = v7[1];
      v0[37] = v7[2];
      uint64_t v9 = v7[3];
      v0[38] = v9;
      uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
      uint64_t v11 = v10[24];
      v0[39] = *(void *)((char *)v7 + v10[28]);
      uint64_t v12 = *(void *)((char *)v7 + v10[32]);
      v0[40] = v12;
      v0[41] = *(void *)((char *)v7 + v10[36]);
      v0[42] = *(void *)((char *)v7 + v10[40]);
      outlined init with take of Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?((uint64_t)v7 + v11, v8);
      Date.init()();
      PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
      uint64_t v13 = (void *)swift_task_alloc();
      v0[43] = v13;
      void *v13 = v0;
      v13[1] = RenderPegasusFlow.execute();
      uint64_t result = RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:)(v9, v12);
      break;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned char *)(v0 + 416) != 1)
  {
    uint64_t v5 = *(void *)(v0 + 56);
    uint64_t v6 = *(void *)(v5 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_renderComponentFlowFactory);
    uint64_t v7 = (void *)(v5 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_rrEntities);
    swift_beginAccess();
    *(void *)(v0 + 352) = *v7;
    uint64_t v11 = *(void *)(*(void *)v6 + 104) + **(int **)(*(void *)v6 + 104);
    swift_bridgeObjectRetain();
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v8;
    *uint64_t v8 = v0;
    v8[1] = RenderPegasusFlow.execute();
    __asm { BRAA            X9, X16 }
  }
  uint64_t v10 = *(void **)(v0 + 336);
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v13 = *(void *)(v0 + 248);
  os_log_type_t v2 = *(void *)(v0 + 216);
  uint64_t v9 = *(void *)(v0 + 208);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  static ExecuteResponse.complete()();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v9);
  outlined destroy of Any?(v13, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "RenderPegasusFlow pushing render component flow", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void *)v0[42];
  uint64_t v6 = v0[30];
  uint64_t v5 = v0[31];
  uint64_t v7 = v0[26];
  uint64_t v8 = v0[27];

  static ExecuteResponse.complete(next:)();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  outlined destroy of Any?(v5, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "RenderPegasusFlow pushing render pattern flow", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[47];
  uint64_t v4 = v0[48];
  uint64_t v6 = v0[28];
  uint64_t v7 = v0[26];
  uint64_t v8 = v0[27];
  uint64_t v9 = v0[12];
  uint64_t v15 = v0[13];
  uint64_t v13 = v0[29];
  uint64_t v14 = v0[11];

  static ExecuteResponse.complete(next:)();
  swift_release();
  outlined consume of Data?(v5, v4);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v10(v6, v7);
  v10(v13, v7);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t RenderPegasusFlow.execute()(char a1)
{
  *(unsigned char *)(*(void *)v1 + 416) = a1;
  swift_task_dealloc();
  return _swift_task_switch(RenderPegasusFlow.execute(), 0, 0);
}

uint64_t RenderPegasusFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:)(uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  uint64_t v4 = type metadata accessor for PommesAppStatus();
  v3[16] = v4;
  v3[17] = *(void *)(v4 - 8);
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DisambiguationListItem?);
  v3[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListComponent();
  v3[21] = v5;
  v3[22] = *(void *)(v5 - 8);
  v3[23] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams();
  v3[24] = v6;
  v3[25] = *(void *)(v6 - 8);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  v3[31] = v7;
  unsigned char v3[32] = *(void *)(v7 - 8);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  v3[36] = v8;
  v3[37] = *(void *)(v8 - 8);
  v3[38] = swift_task_alloc();
  return _swift_task_switch(RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:), 0, 0);
}

uint64_t RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:)()
{
  uint64_t v145 = v0;
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  char v1 = dispatch thunk of CurrentDevice.isCarPlay.getter();
  swift_release();
  if ((v1 & 1) == 0) {
    goto LABEL_67;
  }
  uint64_t v2 = v0[13];
  unint64_t v3 = *(void *)(v2 + 16);
  uint64_t v125 = v0;
  if (v3)
  {
    uint64_t v4 = v0[37];
    uint64_t v5 = *(void (**)(void, unint64_t, void))(v4 + 16);
    v4 += 16;
    os_log_type_t v128 = v5;
    uint64_t v126 = v2 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
    uint64_t v124 = *(void *)(v4 + 56);
    uint64_t v137 = (void (**)(uint64_t, uint64_t))(v0[25] + 8);
    uint64_t v120 = v0[32];
    uint64_t v132 = (void **)(v120 + 8);
    uint64_t v6 = (void (**)(uint64_t, uint64_t))(v4 - 8);
    swift_bridgeObjectRetain();
    unint64_t v7 = 0;
    os_log_type_t v116 = (void (**)(uint64_t, uint64_t))(v4 - 8);
    unint64_t v118 = v3;
    while (1)
    {
      v128(v0[38], v126 + v7 * v124, v0[36]);
      swift_bridgeObjectRetain();
      uint64_t v8 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
      uint64_t v9 = (void (*)(uint64_t, uint64_t))v8;
      uint64_t v10 = *(void *)(v8 + 16);
      if (v10) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_12:
      (*v6)(v0[38], v0[36]);
      swift_bridgeObjectRelease();
      if (++v7 == v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    unint64_t v122 = v7;
    unint64_t v11 = 0;
    unint64_t v12 = v8 + ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80));
    uint64_t v130 = *(void *)(v120 + 72);
    uint64_t v139 = *(void (**)(void, unint64_t, void))(v120 + 16);
    while (1)
    {
      uint64_t v13 = v0[30];
      uint64_t v14 = v0[24];
      v139(v0[35], v12, v0[31]);
      swift_bridgeObjectRetain();
      Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
      uint64_t v15 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter();
      unint64_t v17 = v16;
      uint64_t v18 = *v137;
      (*v137)(v13, v14);
      swift_bridgeObjectRelease();
      uint64_t v19 = HIBYTE(v17) & 0xF;
      if ((v17 & 0x2000000000000000) == 0) {
        uint64_t v19 = v15 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v20 = v0[35];
      uint64_t v21 = v0[31];
      if (v19) {
        break;
      }
      ((void (*)(void, void))*v132)(v0[35], v0[31]);
      swift_bridgeObjectRelease();
      ++v11;
      v12 += v130;
      uint64_t v0 = v125;
      if (v10 == v11)
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = v116;
        unint64_t v3 = v118;
        unint64_t v7 = v122;
        goto LABEL_12;
      }
    }
    uint64_t v73 = v125;
    uint64_t v74 = v125[29];
    uint64_t v75 = v125[24];
    uint64_t v129 = v125[28];
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
    Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.appDisplayName.getter();
    v18(v74, v75);
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
    Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter();
    v18(v129, v75);
    uint64_t v76 = (void (*)(uint64_t, uint64_t))*v132;
    ((void (*)(uint64_t, uint64_t))*v132)(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11 >= *((void *)v9 + 2))
    {
      __break(1u);
    }
    else
    {
      uint64_t v9 = v76;
      uint64_t v77 = v125[27];
      uint64_t v78 = v125[24];
      v139(v125[34], v12, v125[31]);
      Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
      uint64_t v79 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter();
      unint64_t v81 = v80;
      v18(v77, v78);
      swift_bridgeObjectRelease();
      uint64_t v82 = HIBYTE(v81) & 0xF;
      if ((v81 & 0x2000000000000000) == 0) {
        uint64_t v82 = v79 & 0xFFFFFFFFFFFFLL;
      }
      if (!v82) {
        goto LABEL_72;
      }
      uint64_t v141 = v125[38];
      uint64_t v135 = v125[36];
      uint64_t v83 = v125[34];
      uint64_t v84 = v125[31];
      uint64_t v85 = v125[28];
      uint64_t v86 = v125[29];
      uint64_t v87 = v125[24];
      uint64_t v73 = (void *)v125[13];
      Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
      Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.appDisplayName.getter();
      v18(v86, v87);
      Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
      Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter();
      v18(v85, v87);
      v9(v83, v84);
      swift_bridgeObjectRelease();
      (*v116)(v141, v135);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v122 < v118)
      {
        uint64_t result = closure #1 in RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:)(&v143);
        unint64_t v89 = v144;
        if (v144)
        {
          uint64_t v142 = v143;
          swift_bridgeObjectRelease();
          uint64_t v0 = v125;
LABEL_53:
          v0[39] = v89;
          uint64_t v91 = v0[18];
          uint64_t v92 = v0[19];
          uint64_t v93 = v0[16];
          uint64_t v94 = v0[17];
          __swift_project_boxed_opaque_existential_1((void *)(v0[15] + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_appChecking), *(void *)(v0[15] + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_appChecking + 24));
          uint64_t v0 = v125;
          dispatch thunk of PommesAppChecking.appStatus(bundleID:)();
          char v95 = PommesAppStatus.isHidden.getter();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 16))(v91, v92, v93);
          uint64_t v97 = v125[17];
          uint64_t v96 = v125[18];
          uint64_t v98 = v125[16];
          if (v95)
          {
            os_log_type_t v99 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
            v99(v125[18], v125[16]);
LABEL_56:
            v125[40] = v99;
            if (one-time initialization token for information != -1) {
              swift_once();
            }
            uint64_t v101 = type metadata accessor for Logger();
            v125[41] = __swift_project_value_buffer(v101, (uint64_t)static Logger.information);
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            uint64_t v102 = Logger.logObject.getter();
            os_log_type_t v103 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v102, v103))
            {
              id v104 = (uint8_t *)swift_slowAlloc();
              uint64_t v143 = swift_slowAlloc();
              *(_DWORD *)id v104 = 136315138;
              swift_bridgeObjectRetain();
              v125[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v142, v89, &v143);
              uint64_t v0 = v125;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_0, v102, v103, "RenderPegasusFlow: app punchout app is restricted for %s, publishing no app found response on CarPlay", v104, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }

            uint64_t v105 = v0[15];
            outlined init with copy of OutputPublisherAsync(v105 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_outputPublisher, (uint64_t)(v0 + 2));
            long long v106 = *(_OWORD *)(v0 + 5);
            *((_OWORD *)v0 + 21) = v106;
            v0[44] = __swift_project_boxed_opaque_existential_1(v0 + 2, v106);
            uint64_t v107 = v105 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_responseProducerType;
            uint64_t v108 = *(void *)(v105 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_responseProducerType);
            uint64_t v109 = *(void *)(v107 + 8);
            swift_bridgeObjectRelease();
            uint64_t v136 = (uint64_t (*)(void *, uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v109 + 8)
                                                                                                 + **(int **)(v109 + 8));
            uint64_t v110 = (void *)swift_task_alloc();
            v0[45] = v110;
            *uint64_t v110 = v0;
            v110[1] = RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:);
            return v136(v0 + 7, v142, v89, v108, v109);
          }
          char v100 = PommesAppStatus.isLocked.getter();
          os_log_type_t v99 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
          v99(v96, v98);
          if (v100) {
            goto LABEL_56;
          }
          v99(v125[19], v125[16]);
          swift_bridgeObjectRelease();
          goto LABEL_66;
        }
LABEL_73:
        __break(1u);
        return result;
      }
    }
    __break(1u);
LABEL_72:
    uint64_t result = ((uint64_t (*)(void, void))v9)(v73[34], v73[31]);
    __break(1u);
    goto LABEL_73;
  }
LABEL_14:
  uint64_t v22 = v0[14];
  uint64_t v23 = *(void *)(v22 + 16);
  if (v23)
  {
    uint64_t v24 = v0[22];
    uint64_t v123 = *(void (**)(void, uint64_t, void))(v24 + 16);
    uint64_t v121 = v22 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
    unint64_t v25 = (void (**)(uint64_t, uint64_t))(v0[25] + 8);
    uint64_t v112 = v0[32];
    uint64_t v127 = (void (**)(uint64_t, uint64_t))(v112 + 8);
    uint64_t v117 = *(void *)(v24 + 72);
    uint64_t v119 = (void (**)(uint64_t, uint64_t))(v24 + 8);
    swift_bridgeObjectRetain();
    uint64_t v26 = 0;
    uint64_t v114 = v23;
    id v115 = _swiftEmptyArrayStorage;
    do
    {
      v123(v0[23], v121 + v26 * v117, v0[21]);
      uint64_t v29 = Apple_Parsec_Siri_V2alpha_DisambiguationListComponent.items.getter();
      uint64_t v30 = *(void *)(v29 + 16);
      uint64_t v31 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListItem();
      uint64_t v32 = *(void *)(v31 - 8);
      if (v30)
      {
        (*(void (**)(void, unint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v0[20], v29+ ((*(unsigned __int8 *)(*(void *)(v31 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v31 - 8) + 80)), v31);
        uint64_t v33 = 0;
      }
      else
      {
        uint64_t v33 = 1;
      }
      uint64_t v34 = v0[20];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v34, v33, 1, v31);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v34, 1, v31) == 1)
      {
        uint64_t v27 = v0[23];
        uint64_t v28 = v0[21];
        outlined destroy of Any?(v0[20], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DisambiguationListItem?);
        (*v119)(v27, v28);
      }
      else
      {
        uint64_t v35 = v0[20];
        uint64_t v36 = Apple_Parsec_Siri_V2alpha_DisambiguationListItem.commands.getter();
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v35, v31);
        uint64_t v37 = *(void *)(v36 + 16);
        if (v37)
        {
          uint64_t v113 = v26;
          unint64_t v38 = v36 + ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80));
          uint64_t v131 = *(void (**)(void, unint64_t, void))(v112 + 16);
          uint64_t v133 = *(void *)(v112 + 72);
          swift_bridgeObjectRetain();
          uint64_t v39 = _swiftEmptyArrayStorage;
          do
          {
            uint64_t v40 = v0[26];
            uint64_t v41 = v0[24];
            v131(v0[33], v38, v0[31]);
            Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
            uint64_t v42 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter();
            unint64_t v44 = v43;
            uint64_t v45 = *v25;
            (*v25)(v40, v41);
            swift_bridgeObjectRelease();
            uint64_t v46 = HIBYTE(v44) & 0xF;
            if ((v44 & 0x2000000000000000) == 0) {
              uint64_t v46 = v42 & 0xFFFFFFFFFFFFLL;
            }
            uint64_t v47 = v0[33];
            if (v46)
            {
              os_log_type_t v140 = v39;
              uint64_t v49 = v0[28];
              uint64_t v48 = v0[29];
              uint64_t v50 = v25;
              uint64_t v51 = v0[24];
              uint64_t v52 = v0[31];
              Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
              uint64_t v138 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.appDisplayName.getter();
              uint64_t v134 = v53;
              v45(v48, v51);
              Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
              uint64_t v54 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter();
              uint64_t v56 = v55;
              uint64_t v57 = v49;
              uint64_t v39 = v140;
              uint64_t v58 = v51;
              unint64_t v25 = v50;
              v45(v57, v58);
              (*v127)(v47, v52);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v140[2] + 1, 1, v140);
              }
              unint64_t v60 = v39[2];
              unint64_t v59 = v39[3];
              uint64_t v0 = v125;
              if (v60 >= v59 >> 1) {
                uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v59 > 1), v60 + 1, 1, v39);
              }
              void v39[2] = v60 + 1;
              uint64_t v61 = &v39[4 * v60];
              v61[4] = v138;
              v61[5] = v134;
              v61[6] = v54;
              v61[7] = v56;
            }
            else
            {
              (*v127)(v0[33], v0[31]);
            }
            v38 += v133;
            --v37;
          }
          while (v37);
          swift_bridgeObjectRelease_n();
          uint64_t v26 = v113;
          uint64_t v23 = v114;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v39 = _swiftEmptyArrayStorage;
        }
        uint64_t v62 = v0[23];
        uint64_t v63 = v0[21];
        if (v39[2])
        {
          uint64_t v64 = v26;
          uint64_t v66 = v39[4];
          uint64_t v65 = v39[5];
          uint64_t v67 = v39[6];
          uint64_t v68 = v39[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          (*v119)(v62, v63);
          if (swift_isUniquelyReferenced_nonNull_native()) {
            uint64_t v69 = v115;
          }
          else {
            uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v115[2] + 1, 1, v115);
          }
          unint64_t v71 = v69[2];
          unint64_t v70 = v69[3];
          if (v71 >= v70 >> 1) {
            uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v70 > 1), v71 + 1, 1, v69);
          }
          v69[2] = v71 + 1;
          id v115 = v69;
          uint64_t v72 = &v69[4 * v71];
          v72[4] = v66;
          v72[5] = v65;
          v72[6] = v67;
          v72[7] = v68;
          uint64_t v26 = v64;
          uint64_t v23 = v114;
        }
        else
        {
          swift_bridgeObjectRelease();
          (*v119)(v62, v63);
        }
      }
      ++v26;
    }
    while (v26 != v23);
    swift_bridgeObjectRelease();
    uint64_t v90 = v115;
    if (v115[2]) {
      goto LABEL_52;
    }
  }
  else
  {
    uint64_t v90 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
LABEL_52:
      unint64_t v89 = v90[5];
      uint64_t v142 = v90[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_53;
    }
  }
LABEL_66:
  swift_bridgeObjectRelease();
LABEL_67:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v111 = (uint64_t (*)(void))v0[1];
  return v111(0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = (void *)*v1;
  v2[46] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v3 = (void *)swift_task_alloc();
    v2[47] = v3;
    *unint64_t v3 = v2;
    v3[1] = RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:);
    uint64_t v4 = v2[43];
    uint64_t v5 = v2[42];
    return dispatch thunk of OutputPublisherAsync.publish(output:)(v2 + 7, v5, v4);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)v1 + 56;
  *(void *)(*(void *)v1 + 384) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v2);
  if (v0) {
    unint64_t v3 = RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:);
  }
  else {
    unint64_t v3 = RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  (*(void (**)(void, void))(v0 + 320))(*(void *)(v0 + 152), *(void *)(v0 + 128));
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v1(1);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v10;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  char v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  unint64_t v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[40];
  uint64_t v5 = v0[19];
  uint64_t v6 = v0[16];
  if (v3)
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v7 = 0;
    _os_log_impl(&dword_0, v1, v2, "RenderPegasusFlow: app not found publish failed", v7, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(1);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v10;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  char v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  unint64_t v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[40];
  uint64_t v5 = v0[19];
  uint64_t v6 = v0[16];
  if (v3)
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v7 = 0;
    _os_log_impl(&dword_0, v1, v2, "RenderPegasusFlow: app not found publish failed", v7, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(1);
}

uint64_t closure #1 in RenderPegasusFlow.publishNoAppFoundOnCarPlayIfAppRestricted(delayedActions:disambiguationList:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams();
  uint64_t v65 = *(void (***)(char *, uint64_t))(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  unint64_t v59 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v7 = (char *)&v55 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v55 - v9;
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v55 - v11;
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v55 - v18;
  uint64_t v20 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
  uint64_t v21 = v20;
  uint64_t v64 = *(void **)(v20 + 16);
  if (v64)
  {
    uint64_t v56 = v17;
    uint64_t v57 = v10;
    uint64_t v58 = v7;
    uint64_t v66 = v2;
    uint64_t v22 = 0;
    uint64_t v24 = *(void (**)(void))(v14 + 16);
    uint64_t v23 = v14 + 16;
    unint64_t v25 = v20 + ((*(unsigned __int8 *)(v23 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 64));
    uint64_t v26 = *(void *)(v23 + 56);
    unint64_t v60 = a1;
    uint64_t v61 = v26;
    ++v65;
    uint64_t v62 = v24;
    uint64_t v63 = (void (**)(char *, uint64_t))(v23 - 8);
    while (1)
    {
      uint64_t v27 = v23;
      ((void (*)(char *, unint64_t, uint64_t))v62)(v19, v25, v13);
      swift_bridgeObjectRetain();
      uint64_t v28 = (void *)v21;
      Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
      uint64_t v29 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter();
      unint64_t v31 = v30;
      uint64_t v32 = *v65;
      (*v65)(v12, v66);
      swift_bridgeObjectRelease();
      uint64_t v33 = HIBYTE(v31) & 0xF;
      if ((v31 & 0x2000000000000000) == 0) {
        uint64_t v33 = v29 & 0xFFFFFFFFFFFFLL;
      }
      if (v33) {
        break;
      }
      (*v63)(v19, v13);
      swift_bridgeObjectRelease();
      uint64_t v22 = (void *)((char *)v22 + 1);
      v25 += v61;
      uint64_t v21 = (uint64_t)v28;
      uint64_t v23 = v27;
      if (v64 == v22) {
        goto LABEL_10;
      }
    }
    uint64_t v39 = v57;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
    Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.appDisplayName.getter();
    uint64_t v61 = v40;
    v32(v39, v66);
    uint64_t v41 = v58;
    Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
    Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter();
    v32(v41, v66);
    uint64_t v42 = *v63;
    (*v63)(v19, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v64 == v22)
    {
LABEL_10:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
LABEL_16:
      a1 = v60;
      goto LABEL_17;
    }
    uint64_t v64 = v28;
    if ((unint64_t)v22 >= v28[2])
    {
      __break(1u);
    }
    else
    {
      uint64_t v28 = v42;
      unint64_t v25 = (unint64_t)v56;
      v62();
      unint64_t v43 = v59;
      Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
      uint64_t v44 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter();
      unint64_t v46 = v45;
      uint64_t v47 = v43;
      uint64_t v48 = v66;
      v32(v47, v66);
      swift_bridgeObjectRelease();
      uint64_t v49 = HIBYTE(v46) & 0xF;
      if ((v46 & 0x2000000000000000) == 0) {
        uint64_t v49 = v44 & 0xFFFFFFFFFFFFLL;
      }
      if (v49)
      {
        uint64_t v50 = v57;
        Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
        uint64_t v35 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.appDisplayName.getter();
        uint64_t v36 = v51;
        v32(v50, v48);
        uint64_t v52 = v58;
        Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
        uint64_t v37 = Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter();
        unint64_t v53 = v25;
        uint64_t v38 = v54;
        v32(v52, v48);
        ((void (*)(unint64_t, uint64_t))v28)(v53, v13);
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
    uint64_t result = ((uint64_t (*)(unint64_t, uint64_t))v28)(v25, v13);
    __break(1u);
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
LABEL_17:
    *a1 = v35;
    a1[1] = v36;
    a1[2] = v37;
    a1[3] = v38;
  }
  return result;
}

uint64_t RenderPegasusFlow.deinit()
{
  outlined destroy of PegasusExperience(v0 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_experience);

  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_outputPublisher);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_aceServiceInvoker);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_appChecking);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RenderPegasusFlow.__deallocating_deinit()
{
  RenderPegasusFlow.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t protocol witness for Flow.on(input:) in conformance RenderPegasusFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance RenderPegasusFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))();
}

uint64_t protocol witness for Flow.execute() in conformance RenderPegasusFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 248) + **(int **)(**(void **)v1 + 248));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance RenderPegasusFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t protocol witness for FlowTrampolining.outputPublisher.getter in conformance RenderPegasusFlow@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of OutputPublisherAsync(*v1 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_outputPublisher, a1);
}

uint64_t protocol witness for FlowTrampolining.informationViewFactory.getter in conformance RenderPegasusFlow()
{
  return swift_retain();
}

uint64_t specialized RenderPegasusFlow.__allocating_init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v47 = a7;
  uint64_t v43 = a6;
  uint64_t v45 = a5;
  uint64_t v44 = a3;
  uint64_t v46 = a2;
  uint64_t v41 = a9;
  uint64_t v40 = a10;
  uint64_t v39 = a11;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for PegasusExperience();
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53[3] = a12;
  v53[4] = a13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v53);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(boxed_opaque_existential_1, a8, a12);
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  uint64_t v42 = a4;
  uint64_t v48 = a4;
  uint64_t v49 = a1;
  Date.init()();
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  outlined init with copy of OutputPublisherAsync(v46, (uint64_t)v52);
  id v24 = a1;
  uint64_t v25 = v44;
  swift_retain();
  uint64_t v26 = v45;
  swift_retain();
  static SiriKitEventSender.current.getter();
  type metadata accessor for PegasusFlowEventLogger();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a1;
  outlined init with copy of OutputPublisherAsync((uint64_t)v51, v27 + 24);
  id v28 = v24;
  uint64_t v29 = PommesResponse.metadataDomainName.getter();
  uint64_t v31 = v30;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  *(void *)(v27 + 64) = v29;
  *(void *)(v27 + 72) = v31;
  *(_DWORD *)(v27 + 80) = 1;
  outlined init with copy of OutputPublisherAsync(v47, (uint64_t)v51);
  uint64_t v32 = outlined init with copy of OutputPublisherAsync((uint64_t)v53, (uint64_t)v50);
  uint64_t v33 = default argument 5 of RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(v32);
  uint64_t v34 = (*(uint64_t (**)(char *, void *, void *, uint64_t, uint64_t, uint64_t, void *, uint64_t, unsigned char *, uint64_t, uint64_t))(v39 + 224))(v22, a1, v52, v25, v26, v27, v51, v33, v50, v41, v40);
  swift_retain();
  unint64_t v35 = dispatch thunk of PommesResponse.experiences.getter();
  uint64_t v36 = specialized Sequence.flatMap<A>(_:)(v35);
  swift_bridgeObjectRelease();
  RenderPegasusFlow.addReferenceResolutionEntities(from:)(v36);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  __swift_destroy_boxed_opaque_existential_1(v47);
  __swift_destroy_boxed_opaque_existential_1(v46);
  return v34;
}

uint64_t specialized RenderPegasusFlow.init(experience:pommesResponse:outputPublisher:informationViewFactory:renderComponentFlowFactory:flowTaskLogger:aceServiceInvoker:pegasusPatternFlowFactory:appChecking:responseProducerType:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v56 = a8;
  uint64_t v57 = a7;
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v53 = a1;
  uint64_t v59 = a11;
  uint64_t v60 = a3;
  uint64_t v58 = a10;
  uint64_t v51 = a9;
  uint64_t v46 = a14;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for ActivityType();
  uint64_t v20 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Date();
  __chkstk_darwin(v23 - 8);
  uint64_t v24 = type metadata accessor for PerformanceUtil.Ticket();
  uint64_t v54 = *(void *)(v24 - 8);
  uint64_t v55 = v24;
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v52 = (char *)&v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v47 = (char *)&v45 - v27;
  uint64_t v62 = a13;
  uint64_t v63 = v46;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v61);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32))(boxed_opaque_existential_1, v51, a13);
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_rrEntities) = _swiftEmptyArrayStorage;
  outlined init with copy of PegasusExperience(a1, a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_experience);
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_pommesResponse) = a2;
  outlined init with copy of OutputPublisherAsync(v60, a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_outputPublisher);
  uint64_t v29 = v49;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_informationViewFactory) = v48;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_renderComponentFlowFactory) = v29;
  uint64_t v51 = OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_flowTaskLogger;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_flowTaskLogger) = a6;
  id v30 = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v31 = v50;
  (*(void (**)(char *, void, uint64_t))(v20 + 104))(v22, enum case for ActivityType.start(_:), v50);
  uint64_t v32 = enum case for SiriKitReliabilityCodes.normal(_:);
  uint64_t v33 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v34 = *(void *)(v33 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 104))(v19, v32, v33);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v19, 0, 1, v33);
  (*(void (**)(char *, uint64_t, unint64_t, char *, unint64_t, unint64_t, uint64_t, unint64_t))(*(void *)a6 + 120))(v22, 0x6C7070615F746F6ELL, 0xEE00656C62616369, v19, 0xD000000000000018, 0x80000000000AE1E0, 0x54746E6572727543, 0xEB000000006B7361);
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v31);
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  unint64_t v35 = v47;
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  Date.init()();
  uint64_t v36 = v52;
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v37 = *(void (**)(uint64_t))(**(void **)(a12 + v51) + 152);
  uint64_t v38 = swift_retain();
  v37(v38);
  swift_release();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v60);
  outlined destroy of PegasusExperience(v53);
  uint64_t v39 = v55;
  uint64_t v40 = *(void (**)(char *, uint64_t))(v54 + 8);
  v40(v36, v55);
  v40(v35, v39);
  uint64_t v41 = v57;
  *(void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_pegasusPatternFlowFactory) = v56;
  outlined init with take of PatternFlowProviding(v41, a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_aceServiceInvoker);
  outlined init with take of PatternFlowProviding(&v61, a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_appChecking);
  uint64_t v42 = (void *)(a12 + OBJC_IVAR____TtC21InformationFlowPlugin17RenderPegasusFlow_responseProducerType);
  uint64_t v43 = v59;
  *uint64_t v42 = v58;
  v42[1] = v43;
  return a12;
}

uint64_t specialized RenderPegasusFlow.__allocating_init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v26 = a6;
  uint64_t v29 = a5;
  uint64_t v28 = a3;
  uint64_t v27 = a1;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PegasusExperience();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  uint64_t v30 = a4;
  uint64_t v31 = a1;
  Date.init()();
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  outlined init with copy of OutputPublisherAsync(a2, (uint64_t)v34);
  static SiriKitEventSender.current.getter();
  type metadata accessor for PegasusFlowEventLogger();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = 0;
  outlined init with take of PatternFlowProviding(v33, v18 + 24);
  *(void *)(v18 + 64) = 0x54746E6572727543;
  *(void *)(v18 + 72) = 0xEB000000006B7361;
  *(_DWORD *)(v18 + 80) = 2;
  uint64_t v19 = v26;
  uint64_t v20 = outlined init with copy of OutputPublisherAsync(v26, (uint64_t)v33);
  uint64_t v21 = default argument 5 of RenderPegasusFlow.init(pommesResponse:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:appChecking:responseProducerType:)(v20);
  v32[3] = type metadata accessor for PommesSystemAppChecking();
  v32[4] = (uint64_t)&protocol witness table for PommesSystemAppChecking;
  __swift_allocate_boxed_opaque_existential_1(v32);
  PommesSystemAppChecking.init()();
  uint64_t v22 = type metadata accessor for AppResolutionStrategyHelpers();
  uint64_t v23 = (*(uint64_t (**)(char *, void, unsigned char *, uint64_t, uint64_t, uint64_t, long long *, uint64_t, uint64_t *, uint64_t, _UNKNOWN **))(v7 + 224))(v17, 0, v34, v28, v29, v18, v33, v21, v32, v22, &protocol witness table for AppResolutionStrategyHelpers);
  __swift_destroy_boxed_opaque_existential_1(v19);
  __swift_destroy_boxed_opaque_existential_1(a2);
  uint64_t v24 = type metadata accessor for Parse.PegasusResult();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v27, v24);
  return v23;
}

uint64_t outlined init with copy of PegasusExperience(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PegasusExperience();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for RenderPegasusFlow()
{
  uint64_t result = type metadata singleton initialization cache for RenderPegasusFlow;
  if (!type metadata singleton initialization cache for RenderPegasusFlow) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined destroy of PegasusExperience(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PegasusExperience();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_98464(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 176))();
}

uint64_t sub_984A8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 184))();
}

uint64_t ObjC metadata update function for RenderPegasusFlow()
{
  return type metadata accessor for RenderPegasusFlow();
}

uint64_t type metadata completion function for RenderPegasusFlow()
{
  uint64_t result = type metadata accessor for PegasusExperience();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type RenderPegasusFlow and conformance RenderPegasusFlow(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s21InformationFlowPlugin013RenderPegasusB0C14pommesResponse15outputPublisher22informationViewFactory18experienceSelector015renderComponentbL0014pegasusPatternbL017aceServiceInvoker11appChecking20responseProducerTypeAC04SiriA6Search06PommesG0C_07SiriKitB006OutputI5Async_pAA0akL0CAA010ExperienceN0CAA0dpbL0CAA0erbL0CAP03AcetU5Async_pAM09PommesAppW0_pAA025AppResolutionUnsuccessfulG9Producing_pXptcfcAA0E10ExperienceOyXEfU_TA_0()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 88))(*(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in RenderPegasusFlow.init(pegasusResult:outputPublisher:informationViewFactory:experienceSelector:renderComponentFlowFactory:pegasusPatternFlowFactory:aceServiceInvoker:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 80))(*(void *)(v0 + 24));
}

ValueMetadata *type metadata accessor for ParsecAlias()
{
  return &type metadata for ParsecAlias;
}

uint64_t ErrorFlowFactory.makeErrorFlow(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a2;
  uint64_t v23 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ActivityType();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  __chkstk_darwin(v9 - 8);
  uint64_t v25 = type metadata accessor for PerformanceUtil.Ticket();
  uint64_t v10 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.information);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_0, v14, v15, "InformationFlowPlugin: making error flow", v16, 2u);
    swift_slowDealloc();
  }

  static SiriKitEventSender.current.getter();
  type metadata accessor for PegasusFlowEventLogger();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = 0;
  outlined init with take of PatternFlowProviding(v28, inited + 24);
  *(void *)(inited + 64) = 0x54746E6572727543;
  *(void *)(inited + 72) = 0xEB000000006B7361;
  *(_DWORD *)(inited + 80) = 0;
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for ActivityType.failed(_:), v5);
  uint64_t v18 = enum case for SiriKitReliabilityCodes.genericError(_:);
  uint64_t v19 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v4, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v4, 0, 1, v19);
  PegasusFlowEventLogger.logGenericFlowStepEvent(stateType:parameterName:statusReason:statusReasonDescription:taskType:)((uint64_t)v8, 0x6C7070615F746F6ELL, 0xEE00656C62616369, (uint64_t)v4, v23, v24, 0x54746E6572727543, 0xEB000000006B7361);
  outlined destroy of SiriKitReliabilityCodes?((uint64_t)v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  outlined init with copy of OutputPublisherAsync(v26 + 16, (uint64_t)v27);
  type metadata accessor for SimpleOutputFlowAsync();
  swift_allocObject();
  swift_retain();
  v27[0] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  uint64_t v21 = Flow.eraseToAnyFlow()();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v25);
  swift_release();
  return v21;
}

uint64_t closure #1 in ErrorFlowFactory.makeErrorFlow(message:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for AceOutput();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  type metadata accessor for Date();
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for PerformanceUtil.Ticket();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  return _swift_task_switch(closure #1 in ErrorFlowFactory.makeErrorFlow(message:), 0, 0);
}

uint64_t closure #1 in ErrorFlowFactory.makeErrorFlow(message:)()
{
  uint64_t v1 = v0[3];
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v5 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)(v1 + 56) + 136)
                                       + **(int **)(**(void **)(v1 + 56) + 136));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[11] = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in ErrorFlowFactory.makeErrorFlow(message:);
  uint64_t v3 = v0[6];
  return v5(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in ErrorFlowFactory.makeErrorFlow(message:);
  }
  else {
    uint64_t v2 = closure #1 in ErrorFlowFactory.makeErrorFlow(message:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = v0[4];
  uint64_t v7 = (uint64_t *)v0[2];
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  v7[3] = v6;
  v7[4] = (uint64_t)&protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 32))(boxed_opaque_existential_1, v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t partial apply for closure #1 in ErrorFlowFactory.makeErrorFlow(message:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return closure #1 in ErrorFlowFactory.makeErrorFlow(message:)(a1, v1);
}

uint64_t type metadata accessor for ErrorFlowFactory()
{
  return self;
}

uint64_t FlowTrampolining.makeResponse(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  uint64_t v16 = a1;
  Date.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyFlow?);
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  if (v17)
  {
    swift_retain();
    static ExecuteResponse.complete(next:)();
    return swift_release_n();
  }
  else
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.information);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_0, v12, v13, "Unable to locate flow for direct invocation parse/experience. Returning error flow.", v14, 2u);
      swift_slowDealloc();
    }

    return FlowTrampolining.makeResponse(forErrorMessage:)(0xD000000000000038, 0x80000000000ADF60, a2, a3);
  }
}

uint64_t FlowTrampolining.makeResponse(forErrorMessage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v14[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = v4;
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  Date.init()();
  type metadata accessor for ExecuteResponse();
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a5 + 8))(v12, a4, a5);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  type metadata accessor for ErrorFlowFactory();
  uint64_t v10 = swift_allocObject();
  outlined init with take of PatternFlowProviding(v12, v10 + 16);
  *(void *)(v10 + 56) = v9;
  ErrorFlowFactory.makeErrorFlow(message:)(a2, a3);
  static ExecuteResponse.complete(next:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in FlowTrampolining.makeResponse(for:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static FlowLocator.findFlow(forInvocation:)();
  *a1 = result;
  return result;
}

uint64_t _s21InformationFlowPlugin0B12TrampoliningPAAE12makeResponse3for07SiriKitB007ExecuteF0VAF5ParseO16DirectInvocationV_tFAF03AnyB0CSgyXEfU_TA_0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static FlowLocator.findFlow(forInvocation:)();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)()
{
  return closure #1 in FlowTrampolining.makeResponse(forErrorMessage:)(v0[4], v0[5], v0[6], v0[2], v0[3]);
}

uint64_t Logger.information.unsafeMutableAddressor()
{
  return Logger.information.unsafeMutableAddressor(&one-time initialization token for information, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static Logger.information);
}

char **LogConst.Signpost.renderPegasusResult.unsafeMutableAddressor()
{
  return &static LogConst.Signpost.renderPegasusResult;
}

uint64_t static Logger.begin(_:)()
{
  if (one-time initialization token for informationLog != -1) {
    swift_once();
  }
  id v0 = (id)static Logger.informationLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();

  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t static Logger.end(_:_:)()
{
  static os_signpost_type_t.end.getter();
  if (one-time initialization token for informationLog != -1) {
    swift_once();
  }

  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t Logger.videoSnippet.unsafeMutableAddressor()
{
  return Logger.information.unsafeMutableAddressor(&one-time initialization token for videoSnippet, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static Logger.videoSnippet);
}

uint64_t Logger.logAndCrash(_:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v35 = a6;
  int v36 = a5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Logger?);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = &v29[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  uint64_t v17 = &v29[-v16];
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v19 + 16))(v17, v7, v18);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
  outlined init with copy of Logger?((uint64_t)v17, (uint64_t)v15);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18) == 1)
  {
    outlined destroy of Logger?((uint64_t)v15);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    int v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v33 = a3;
      uint64_t v24 = v23;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v38 = v32;
      *(_DWORD *)uint64_t v24 = 136315650;
      uint64_t v34 = a4;
      uint64_t v25 = StaticString.description.getter();
      os_log_t v31 = v20;
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v38);
      int v30 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2048;
      uint64_t v37 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_t v27 = v31;
      _os_log_impl(&dword_0, v31, (os_log_type_t)v30, "FatalError at %s:%lu - %s", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v15, v18);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t one-time initialization function for informationLog()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Logger.informationLog = result;
  return result;
}

void *LogConst.subsystem.unsafeMutableAddressor()
{
  return &static LogConst.subsystem;
}

void *LogConst.Category.informationPlugin.unsafeMutableAddressor()
{
  return &static LogConst.Category.informationPlugin;
}

uint64_t one-time initialization function for information()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.information);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.information);
  if (one-time initialization token for informationLog != -1) {
    swift_once();
  }
  id v1 = (id)static Logger.informationLog;
  return Logger.init(_:)();
}

uint64_t static Logger.information.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.information.getter(&one-time initialization token for information, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static Logger.information, a1);
}

uint64_t one-time initialization function for videoSnippet()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.videoSnippet);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.videoSnippet);
  type metadata accessor for OS_os_log();
  OS_os_log.init(subsystem:category:)();
  return Logger.init(_:)();
}

void *LogConst.Category.videoSnippet.unsafeMutableAddressor()
{
  return &static LogConst.Category.videoSnippet;
}

uint64_t static Logger.videoSnippet.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.information.getter(&one-time initialization token for videoSnippet, (uint64_t (*)(void))&type metadata accessor for Logger, (uint64_t)static Logger.videoSnippet, a1);
}

uint64_t static Logger.generateSignpostID()()
{
  if (one-time initialization token for informationLog != -1) {
    swift_once();
  }
  id v0 = (id)static Logger.informationLog;

  return OSSignpostID.init(log:)();
}

uint64_t Logger.event(_:)()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  if (one-time initialization token for informationLog != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t one-time initialization function for information(uint64_t a1)
{
  return one-time initialization function for information(a1, static Signposter.information, &one-time initialization token for information, (uint64_t)static Logger.information);
}

uint64_t Signposter.information.unsafeMutableAddressor()
{
  return Logger.information.unsafeMutableAddressor(&one-time initialization token for information, (uint64_t (*)(void))&type metadata accessor for OSSignposter, (uint64_t)static Signposter.information);
}

uint64_t static Signposter.information.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.information.getter(&one-time initialization token for information, (uint64_t (*)(void))&type metadata accessor for OSSignposter, (uint64_t)static Signposter.information, a1);
}

uint64_t one-time initialization function for videoSnippet(uint64_t a1)
{
  return one-time initialization function for information(a1, static Signposter.videoSnippet, &one-time initialization token for videoSnippet, (uint64_t)static Logger.videoSnippet);
}

uint64_t one-time initialization function for information(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v11, a2);
  __swift_project_value_buffer(v11, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v12 = __swift_project_value_buffer(v7, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  return OSSignposter.init(logger:)();
}

uint64_t Signposter.videoSnippet.unsafeMutableAddressor()
{
  return Logger.information.unsafeMutableAddressor(&one-time initialization token for videoSnippet, (uint64_t (*)(void))&type metadata accessor for OSSignposter, (uint64_t)static Signposter.videoSnippet);
}

uint64_t Logger.information.unsafeMutableAddressor(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = a2(0);

  return __swift_project_value_buffer(v5, a3);
}

uint64_t static Signposter.videoSnippet.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.information.getter(&one-time initialization token for videoSnippet, (uint64_t (*)(void))&type metadata accessor for OSSignposter, (uint64_t)static Signposter.videoSnippet, a1);
}

uint64_t static Logger.information.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = __swift_project_value_buffer(v7, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

uint64_t OSSignposter.withIntervalSignpost<A>(_:id:around:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 72) = v7;
  *(void *)(v8 + 48) = a5;
  *(void *)(v8 + 56) = a6;
  *(unsigned char *)(v8 + 128) = a4;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = a3;
  *(void *)(v8 + 24) = a1;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  *(void *)(v8 + 80) = v9;
  *(void *)(v8 + 88) = *(void *)(v9 - 8);
  *(void *)(v8 + 96) = swift_task_alloc();
  return _swift_task_switch(OSSignposter.withIntervalSignpost<A>(_:id:around:), 0, 0);
}

uint64_t OSSignposter.withIntervalSignpost<A>(_:id:around:)()
{
  uint64_t v1 = OSSignposter.logHandle.getter();
  os_signpost_type_t v2 = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v4 = *(const char **)(v0 + 32);
  if (*(unsigned char *)(v0 + 128))
  {
    if ((unint64_t)v4 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v4 >> 11 == 27)
      {
LABEL_16:
        __break(1u);
        return result;
      }
      if (v4 >> 16 <= 0x10)
      {
        uint64_t v4 = (const char *)(v0 + 16);
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  if (v4)
  {
LABEL_10:
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v6 = *(void (**)(uint64_t, void, uint64_t))(v8 + 16);
    v6(v7, *(void *)(v0 + 48), v9);
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    os_signpost_id_t v11 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v1, v2, v11, v4, "", v10, 2u);
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    goto LABEL_11;
  }
  __break(1u);
LABEL_5:
  uint64_t v5 = *(void *)(v0 + 88);

  uint64_t v6 = *(void (**)(uint64_t, void, uint64_t))(v5 + 16);
LABEL_11:
  uint64_t v12 = *(int **)(v0 + 56);
  v6(*(void *)(v0 + 96), *(void *)(v0 + 48), *(void *)(v0 + 80));
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  *(void *)(v0 + 104) = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v15 = (uint64_t (*)(uint64_t))((char *)v12 + *v12);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v13;
  void *v13 = v0;
  v13[1] = OSSignposter.withIntervalSignpost<A>(_:id:around:);
  uint64_t v14 = *(void *)(v0 + 24);
  return v15(v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    os_signpost_type_t v2 = OSSignposter.withIntervalSignpost<A>(_:id:around:);
  }
  else {
    os_signpost_type_t v2 = OSSignposter.withIntervalSignpost<A>(_:id:around:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A>() in OSSignposter.withIntervalSignpost<A>(_:id:around:)(*(void *)(v0 + 72), *(const char **)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 128));
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A>() in OSSignposter.withIntervalSignpost<A>(_:id:around:)(*(void *)(v0 + 72), *(const char **)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 128));
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t OSSignposter.beginIntervalTelemetryEnabled(_:id:)(const char *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_signpost_id_t v11 = OSSignposter.logHandle.getter();
  int v12 = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {

    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
LABEL_11:
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    return OSSignpostIntervalState.init(id:isOpen:)();
  }
  HIDWORD(v18) = v12;
  if ((a3 & 1) == 0)
  {
    if (a1)
    {
      uint64_t v14 = a4;
LABEL_10:
      uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
      v15(v10, v14, v7);
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      os_signpost_id_t v17 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_0, v11, BYTE4(v18), v17, a1, "enableTelemetry=YES", v16, 2u);
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v15(v10, v14, v7);
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_13;
  }
  if ((unint64_t)a1 >> 32)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a1 >> 11 != 27)
  {
    if (a1 >> 16 <= 0x10)
    {
      uint64_t v14 = a4;
      a1 = &v19;
      goto LABEL_10;
    }
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

void OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:)(const char *a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v9 = a1;
  if ((a3 & 1) == 0)
  {
    if (a1) {
      goto LABEL_8;
    }
    __break(1u);
  }
  if ((unint64_t)a1 >> 32)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (a1 >> 11 == 27)
  {
LABEL_13:
    __break(1u);
    return;
  }
  if (a1 >> 16 > 0x10)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v9 = &v11;
LABEL_8:
  uint64_t v10 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v10 = 0;
  closure #1 in OSSignposter.withIntervalSignpost<A>(_:id:_:around:)(v10, 2u, v5, a4, v9, "enableTelemetry=YES", a5);
  if (!v6) {
    swift_slowDealloc();
  }
}

uint64_t OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = v7;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 48) = a6;
  *(unsigned char *)(v8 + 96) = a4;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 16) = a1;
  return _swift_task_switch(OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:), 0, 0);
}

uint64_t OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int **)(v2 + 48);
  *(void *)(v2 + 72) = OSSignposter.beginIntervalTelemetryEnabled(_:id:)(*(const char **)(v2 + 24), a2, *(unsigned char *)(v2 + 96), *(void *)(v2 + 40));
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 80) = v4;
  *uint64_t v4 = v2;
  v4[1] = OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:);
  uint64_t v5 = *(void *)(v2 + 16);
  return v7(v5);
}

uint64_t OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:)()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:);
  }
  else {
    uint64_t v2 = OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A>() in OSSignposter.withIntervalSignpost<A>(_:id:around:)(*(void *)(v0 + 64), *(const char **)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 96));
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A>() in OSSignposter.withIntervalSignpost<A>(_:id:around:)(*(void *)(v0 + 64), *(const char **)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 96));
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t $defer #1 <A>() in OSSignposter.withIntervalSignpost<A>(_:id:around:)(uint64_t a1, const char *a2, uint64_t a3, char a4)
{
  unint64_t v26 = a2;
  uint64_t v5 = type metadata accessor for OSSignpostError();
  uint64_t v25 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  int v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v14 = &v23[-v13];
  uint64_t v15 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v24 = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  if ((a4 & 1) == 0)
  {
    os_signpost_id_t v17 = v26;
    if (!v26)
    {
      __break(1u);
LABEL_5:

      return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v14, v8);
    }
    goto LABEL_10;
  }
  if ((unint64_t)v26 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v26 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v26 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  os_signpost_id_t v17 = &v27;
LABEL_10:
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  uint64_t v18 = v25;
  if ((*(unsigned int (**)(unsigned char *, uint64_t))(v25 + 88))(v7, v5) == enum case for OSSignpostError.doubleEnd(_:))
  {
    char v19 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v7, v5);
    char v19 = "";
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 16))(v12, v14, v8);
  uint64_t v20 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v20 = 0;
  os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_0, v15, (os_signpost_type_t)v24, v21, v17, v19, v20, 2u);
  swift_slowDealloc();

  int v22 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
  v22(v14, v8);
  return ((uint64_t (*)(unsigned char *, uint64_t))v22)(v12, v8);
}

unint64_t static LogConst.subsystem.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t static LogConst.Category.informationPlugin.getter()
{
  return 0xD000000000000015;
}

unint64_t static LogConst.Category.videoSnippet.getter()
{
  return 0xD000000000000011;
}

const char *static LogConst.Signpost.renderPegasusResult.getter()
{
  return "renderPegasusResult";
}

char **LogConst.Signpost.attemptResolveParseSearchResult.unsafeMutableAddressor()
{
  return &static LogConst.Signpost.attemptResolveParseSearchResult;
}

const char *static LogConst.Signpost.attemptResolveParseSearchResult.getter()
{
  return "attemptResolveParse";
}

char **LogConst.Signpost.selectSportsAlternative.unsafeMutableAddressor()
{
  return &static LogConst.Signpost.selectSportsAlternative;
}

const char *static LogConst.Signpost.selectSportsAlternative.getter()
{
  return "selectSportsAlternative";
}

void closure #1 in OSSignposter.withIntervalSignpost<A>(_:id:_:around:)(uint8_t *a1, uint32_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, void (*a7)(void))
{
  uint64_t v11 = OSSignposter.logHandle.getter();
  os_signpost_type_t v12 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  uint64_t v16 = a5;
  _os_signpost_emit_with_name_impl(&dword_0, v11, v12, v13, a5, a6, a1, a2);
  a7();
  if (!v18)
  {
    os_signpost_type_t v14 = static os_signpost_type_t.end.getter();
    os_signpost_id_t v15 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v11, v14, v15, v16, a6, a1, a2);
  }
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

ValueMetadata *type metadata accessor for Signposter()
{
  return &type metadata for Signposter;
}

ValueMetadata *type metadata accessor for LogConst()
{
  return &type metadata for LogConst;
}

ValueMetadata *type metadata accessor for LogConst.Category()
{
  return &type metadata for LogConst.Category;
}

ValueMetadata *type metadata accessor for LogConst.Signpost()
{
  return &type metadata for LogConst.Signpost;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t RFSimpleYesNoPromptFlowStrategy.__allocating_init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v14 = swift_allocObject();
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(a2, v16);
  __chkstk_darwin(v17);
  char v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = specialized RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)(a1, (uint64_t)v19, a3, a4, a5, a6, v23, v24, v14, v16, v15);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v21;
}

uint64_t closure #1 in default argument 2 of RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(closure #1 in default argument 2 of RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:), 0, 0);
}

uint64_t closure #1 in default argument 2 of RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v1 + 32) = 0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in default argument 3 of RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(closure #1 in default argument 3 of RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:), 0, 0);
}

uint64_t RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(a2, v16);
  __chkstk_darwin(v17);
  char v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = specialized RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)(a1, (uint64_t)v19, a3, a4, a5, a6, v23, v24, v8, v16, v15);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v21;
}

uint64_t RFSimpleYesNoPromptFlowStrategy.populate(manifest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v42 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v40 - v7;
  uint64_t v9 = type metadata accessor for NLContextUpdate();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v40 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v41 = (char *)&v40 - v13;
  uint64_t v14 = type metadata accessor for DialogPhase();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v21 = type metadata accessor for OutputGenerationManifest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(a2, a1, v21);
  OutputGenerationManifest.dialogPhase.getter();
  static DialogPhase.clarification.getter();
  lazy protocol witness table accessor for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy(&lazy protocol witness table cache variable for type DialogPhase and conformance DialogPhase, (void (*)(uint64_t))&type metadata accessor for DialogPhase);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)();
  int v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v18, v14);
  v22(v20, v14);
  if ((a1 & 1) == 0)
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.information);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      unint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v26 = 0;
      _os_log_impl(&dword_0, v24, v25, "A non clarification dialog phase was inputed into a RFSimpleYesNoPromptFlowStrategy. This could cause unwanted behavior in the UI layer.", v26, 2u);
      swift_slowDealloc();
    }
  }
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.nlContextUpdate.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of NLContextUpdate?((uint64_t)v8);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.information);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      int v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v30 = 0;
      _os_log_impl(&dword_0, v28, v29, "OutputGenerationManifest does not include an NL context update. Will send a standard Reader domain prompt offer.", v30, 2u);
      swift_slowDealloc();
    }

    uint64_t v31 = (uint64_t)v40;
    NLContextUpdate.init()();
    uint64_t v32 = v42;
    RFSimpleYesNoPromptFlowStrategy.attachNLV3ReaderPrompt(to:)(v31, v42);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v31, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v32, 0, 1, v9);
    return OutputGenerationManifest.nlContextUpdate.setter();
  }
  else
  {
    uint64_t v34 = (uint64_t)v41;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v41, v8, v9);
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.information);
    int v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl(&dword_0, v36, v37, "Attaching NL Context to existing context update provided by domain.", v38, 2u);
      swift_slowDealloc();
    }

    uint64_t v39 = v42;
    RFSimpleYesNoPromptFlowStrategy.attachNLV3ReaderPrompt(to:)(v34, v42);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v39, 0, 1, v9);
    OutputGenerationManifest.nlContextUpdate.setter();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v34, v9);
  }
}

void RFSimpleYesNoPromptFlowStrategy.attachNLV3ReaderPrompt(to:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  NLContextUpdate.weightedPromptAbortValues.setter();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.information);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_0, oslog, v6, "#RF Built Reader Prompt hints.", v7, 2u);
    swift_slowDealloc();
  }
}

uint64_t RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  type metadata accessor for Date();
  v2[4] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for PerformanceUtil.Ticket();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OutputGenerationManifest();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  return _swift_task_switch(RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse(), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 120) = a1;
  *(void *)(v3 + 128) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse();
  }
  else {
    uint64_t v4 = RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse();
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse()()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[3];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_baseManifest, v3);
  RFSimpleYesNoPromptFlowStrategy.populate(manifest:)(v2, v1);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[12] = v6;
  v0[13] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v2, v3);
  Date.init()();
  PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
  uint64_t v9 = (uint64_t (*)(void))(*(void *)(v5
                                     + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_promptPatternExecutionProducer)
                         + **(int **)(v5
                                    + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_promptPatternExecutionProducer));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse();
  return v9();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = v0[3];
  type metadata accessor for PerformanceUtil();
  static PerformanceUtil.shared.getter();
  dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
  swift_release();
  uint64_t v2 = (void *)(v1 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_responseGenerator);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_responseGenerator + 24);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_responseGenerator + 32);
  __swift_project_boxed_opaque_existential_1(v2, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[17] = v5;
  *uint64_t v5 = v0;
  v5[1] = RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse();
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[11];
  uint64_t v8 = v0[2];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v8, v6, v7, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse();
  }
  else {
    uint64_t v2 = RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse();
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[12];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[8];
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 64);
  (*(void (**)(void, void))(*(void *)(v0 + 48) + 8))(*(void *)(v0 + 56), *(void *)(v0 + 40));
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t RFSimpleYesNoPromptFlowStrategy.actionForInput(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v60 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v55 - v6;
  uint64_t v8 = type metadata accessor for Parse();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v55 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v55 - v16;
  Input.parse.getter();
  int v18 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v17, v8);
  if (v18 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v56 = v5;
    uint64_t v57 = a1;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v17, v8);
    (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
    uint64_t v58 = v12;
    uint64_t v59 = v2;
    v19(v7, v12, v2);
    uint64_t v20 = Parse.DirectInvocation.identifier.getter();
    uint64_t v22 = v21;
    uint64_t v23 = (void *)static SiriKitDirectInvocationPayloads.cancel.getter();
    id v24 = [v23 identifier];

    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    uint64_t v28 = v9;
    if (v20 == v25 && v22 == v27)
    {
      swift_bridgeObjectRelease_n();
LABEL_9:
      static ActionForInput.cancel()();
      uint64_t v31 = v59;
      uint64_t v32 = *(void (**)(char *, uint64_t))(v60 + 8);
      v32(v7, v59);
      v32(v58, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v8);
    }
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_9;
    }
    uint64_t v55 = *(void (**)(char *, uint64_t))(v60 + 8);
    v55(v7, v59);
    uint64_t v34 = v58;
    uint64_t v35 = Parse.DirectInvocation.identifier.getter();
    uint64_t v37 = v36;
    uint64_t v38 = (void *)static SiriKitDirectInvocationPayloads.confirm.getter();
    id v39 = [v38 identifier];

    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;

    if (v35 == v40 && v37 == v42)
    {
      uint64_t v29 = v8;
LABEL_16:
      uint64_t v43 = v59;
      uint64_t v44 = v55;
      swift_bridgeObjectRelease_n();
      v44(v34, v43);
LABEL_27:
      (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v29);
      return static ActionForInput.handle()();
    }
    char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v45)
    {
      uint64_t v29 = v8;
      v55(v34, v59);
      goto LABEL_27;
    }
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v56, v34, v59);
    uint64_t v46 = Parse.DirectInvocation.identifier.getter();
    uint64_t v48 = v47;
    uint64_t v49 = (void *)static SiriKitDirectInvocationPayloads.reject.getter();
    id v50 = [v49 identifier];

    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v53 = v52;

    if (v46 == v51 && v48 == v53)
    {
      uint64_t v29 = v8;
      uint64_t v34 = v56;
      goto LABEL_16;
    }
    uint64_t v29 = v8;
    char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v54)
    {
      v55(v56, v59);
      goto LABEL_27;
    }
    v55(v56, v59);
    goto LABEL_30;
  }
  uint64_t v29 = v8;
  if (v18 == enum case for Parse.NLv4IntentOnly(_:))
  {
    uint64_t v28 = v9;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v15, v17, v8);
    (*(void (**)(char *, uint64_t))(v9 + 96))(v15, v8);
    self;
    if (swift_dynamicCastObjCClass())
    {
      static ActionForInput.cancel()();
      swift_unknownObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v8);
    }
    self;
    if (swift_dynamicCastObjCClass() || (self, swift_dynamicCastObjCClass()))
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
      swift_unknownObjectRelease();
      return static ActionForInput.handle()();
    }
    swift_unknownObjectRelease();
    goto LABEL_30;
  }
  uint64_t v28 = v9;
  if (v18 != enum case for Parse.pegasusResults(_:))
  {
LABEL_30:
    static ActionForInput.ignore()();
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v29);
  }
  static ActionForInput.handle()();
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v29);
}

uint64_t RFSimpleYesNoPromptFlowStrategy.parseConfirmationResponse(input:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Parse.PegasusResult();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Parse.DirectInvocation();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v3[12] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Parse();
  v3[13] = v6;
  v3[14] = *(void *)(v6 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  return _swift_task_switch(RFSimpleYesNoPromptFlowStrategy.parseConfirmationResponse(input:), 0, 0);
}

uint64_t RFSimpleYesNoPromptFlowStrategy.parseConfirmationResponse(input:)()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  Input.parse.getter();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  if (v4 != enum case for Parse.directInvocation(_:))
  {
    if (v4 != enum case for Parse.NLv4IntentOnly(_:))
    {
      if (v4 == enum case for Parse.pegasusResults(_:))
      {
        uint64_t v35 = v0[14];
        uint64_t v34 = v0[15];
        uint64_t v36 = v0[13];
        uint64_t v38 = v0[6];
        uint64_t v37 = v0[7];
        uint64_t v39 = v0[5];
        uint64_t v40 = v0[2];
        (*(void (**)(uint64_t, void, uint64_t))(v35 + 16))(v34, v0[18], v36);
        (*(void (**)(uint64_t, uint64_t))(v35 + 96))(v34, v36);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v37, v34, v39);
        RFSimpleYesNoPromptFlowStrategy.parsePegasusResponse(pegasusResult:)(v40);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
        goto LABEL_27;
      }
      goto LABEL_22;
    }
    uint64_t v19 = v0[17];
    uint64_t v20 = v0[13];
    uint64_t v21 = v0[14];
    (*(void (**)(uint64_t, void, uint64_t))(v21 + 16))(v19, v0[18], v20);
    (*(void (**)(uint64_t, uint64_t))(v21 + 96))(v19, v20);
    self;
    if (swift_dynamicCastObjCClass())
    {
      uint64_t v22 = v0[12];
      uint64_t v23 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
    }
    else
    {
      self;
      if (!swift_dynamicCastObjCClass())
      {
        swift_unknownObjectRelease();
        goto LABEL_22;
      }
      uint64_t v22 = v0[12];
      uint64_t v23 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
    }
    uint64_t v54 = *v23;
    uint64_t v55 = type metadata accessor for ConfirmationResponse();
    uint64_t v56 = *(void *)(v55 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 104))(v22, v54, v55);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v22, 0, 1, v55);
    SimpleConfirmationResponseProvider.init(_:)();
    swift_unknownObjectRelease();
    goto LABEL_27;
  }
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[13];
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[11];
  uint64_t v9 = v0[8];
  uint64_t v10 = v0[9];
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 16))(v5, v0[18], v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 96))(v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v5, v9);
  uint64_t v11 = Parse.DirectInvocation.identifier.getter();
  uint64_t v13 = v12;
  uint64_t v14 = (void *)static SiriKitDirectInvocationPayloads.confirm.getter();
  id v15 = [v14 identifier];

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  if (v11 == v16 && v13 == v18)
  {
    swift_bridgeObjectRelease_n();
LABEL_9:
    uint64_t v25 = v0[16];
    uint64_t v27 = v0[11];
    uint64_t v26 = v0[12];
    uint64_t v28 = v0[8];
    uint64_t v29 = v0[9];
    uint64_t v30 = enum case for ConfirmationResponse.confirmed(_:);
    uint64_t v31 = type metadata accessor for ConfirmationResponse();
    uint64_t v32 = *(void *)(v31 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 104))(v26, v30, v31);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v26, 0, 1, v31);
    SimpleConfirmationResponseProvider.init(_:)();
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v33(v27, v28);
    v33(v25, v28);
    goto LABEL_27;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v24) {
    goto LABEL_9;
  }
  uint64_t v41 = v0[16];
  uint64_t v42 = v0[10];
  uint64_t v43 = v0[8];
  uint64_t v44 = v0[9];
  char v45 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v45(v0[11], v43);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v42, v41, v43);
  uint64_t v46 = Parse.DirectInvocation.identifier.getter();
  uint64_t v48 = v47;
  uint64_t v49 = (void *)static SiriKitDirectInvocationPayloads.reject.getter();
  id v50 = [v49 identifier];

  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v53 = v52;

  if (v46 == v51 && v48 == v53)
  {
    swift_bridgeObjectRelease_n();
LABEL_19:
    uint64_t v58 = v0[12];
    uint64_t v59 = v0[10];
    uint64_t v60 = v0[8];
    uint64_t v61 = enum case for ConfirmationResponse.rejected(_:);
    uint64_t v62 = type metadata accessor for ConfirmationResponse();
    uint64_t v63 = *(void *)(v62 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 104))(v58, v61, v62);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v63 + 56))(v58, 0, 1, v62);
    SimpleConfirmationResponseProvider.init(_:)();
    v45(v59, v60);
    goto LABEL_27;
  }
  char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v57) {
    goto LABEL_19;
  }
  v45(v0[10], v0[8]);
LABEL_22:
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v64 = type metadata accessor for Logger();
  __swift_project_value_buffer(v64, (uint64_t)static Logger.information);
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v65, v66))
  {
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v67 = 0;
    _os_log_impl(&dword_0, v65, v66, "Unable to parse a confirmation response from the given parse", v67, 2u);
    swift_slowDealloc();
  }
  uint64_t v68 = v0[12];

  uint64_t v69 = type metadata accessor for ConfirmationResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v68, 1, 1, v69);
  SimpleConfirmationResponseProvider.init(_:)();
LABEL_27:
  (*(void (**)(void, void))(v0[14] + 8))(v0[18], v0[13]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v70 = (uint64_t (*)(void))v0[1];
  return v70();
}

uint64_t RFSimpleYesNoPromptFlowStrategy.parsePegasusResponse(pegasusResult:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  __chkstk_darwin(v1 - 8);
  uint64_t v55 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v3 - 8);
  uint64_t v52 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v50 = *(void *)(v52 - 8);
  uint64_t v4 = __chkstk_darwin(v52);
  uint64_t v51 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v50 - v6;
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerUnderstanding();
  uint64_t v53 = *(void *)(v16 - 8);
  uint64_t v54 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Parse.PegasusResult.response.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverUnderstanding.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  char v57 = v18;
  uint64_t v19 = Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter();
  uint64_t v21 = v19;
  unint64_t v22 = v20;
  uint64_t v23 = v7;
  switch(v20 >> 62)
  {
    case 1uLL:
      outlined consume of Data._Representation(v19, v20);
      uint64_t v26 = (int)v21;
      uint64_t v27 = v21 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v26 = *(void *)(v19 + 16);
      uint64_t v27 = *(void *)(v19 + 24);
      outlined consume of Data._Representation(v19, v20);
LABEL_6:
      BOOL v28 = v26 == v27;
      char v24 = v51;
      uint64_t v25 = v52;
      if (!v28) {
        goto LABEL_7;
      }
      goto LABEL_9;
    case 3uLL:
      outlined consume of Data._Representation(v19, v20);
      char v24 = v51;
      uint64_t v25 = v52;
      goto LABEL_9;
    default:
      outlined consume of Data._Representation(v19, v20);
      char v24 = v51;
      uint64_t v25 = v52;
      if ((v22 & 0xFF000000000000) != 0) {
LABEL_7:
      }
        uint64_t v29 = Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter();
      else {
LABEL_9:
      }
        uint64_t v29 = Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogAct.getter();
      uint64_t v31 = v29;
      unint64_t v32 = v30;
      uint64_t v60 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      outlined copy of Data._Representation(v29, v30);
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
      Message.init(serializedData:extensions:partial:options:)();
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v23, v24, v25);
      if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter() & 1) == 0)
      {
        if (Siri_Nlu_External_UserDialogAct.hasRejected.getter())
        {
          if (one-time initialization token for information != -1) {
            swift_once();
          }
          uint64_t v38 = type metadata accessor for Logger();
          __swift_project_value_buffer(v38, (uint64_t)static Logger.information);
          uint64_t v39 = Logger.logObject.getter();
          os_log_type_t v40 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v39, v40)) {
            goto LABEL_31;
          }
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v41 = 0;
          uint64_t v42 = "Received User Rejected From Pegasus";
        }
        else if (Siri_Nlu_External_UserDialogAct.hasCancelled.getter())
        {
          if (one-time initialization token for information != -1) {
            swift_once();
          }
          uint64_t v43 = type metadata accessor for Logger();
          __swift_project_value_buffer(v43, (uint64_t)static Logger.information);
          uint64_t v39 = Logger.logObject.getter();
          os_log_type_t v40 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v39, v40)) {
            goto LABEL_31;
          }
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v41 = 0;
          uint64_t v42 = "Received User Cancelled From Pegasus";
        }
        else
        {
          if (one-time initialization token for information != -1) {
            swift_once();
          }
          uint64_t v44 = type metadata accessor for Logger();
          __swift_project_value_buffer(v44, (uint64_t)static Logger.information);
          uint64_t v39 = Logger.logObject.getter();
          os_log_type_t v40 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v39, v40)) {
            goto LABEL_31;
          }
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v41 = 0;
          uint64_t v42 = "Received other unsupported UDA From Pegasus";
        }
        _os_log_impl(&dword_0, v39, v40, v42, v41, 2u);
        swift_slowDealloc();
LABEL_31:

        uint64_t v37 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
        goto LABEL_32;
      }
      if (one-time initialization token for information != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.information);
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl(&dword_0, v34, v35, "Received User Accepted UDA From Pegasus", v36, 2u);
        swift_slowDealloc();
      }

      uint64_t v37 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
LABEL_32:
      uint64_t v45 = *v37;
      uint64_t v46 = type metadata accessor for ConfirmationResponse();
      uint64_t v47 = *(void *)(v46 - 8);
      uint64_t v48 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 104))(v55, v45, v46);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v48, 0, 1, v46);
      SimpleConfirmationResponseProvider.init(_:)();
      outlined consume of Data._Representation(v31, v32);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v23, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v57, v54);
  }
}

uint64_t RFSimpleYesNoPromptFlowStrategy.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_baseManifest;
  uint64_t v2 = type metadata accessor for OutputGenerationManifest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_responseGenerator);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t RFSimpleYesNoPromptFlowStrategy.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_baseManifest;
  uint64_t v2 = type metadata accessor for OutputGenerationManifest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_responseGenerator);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t protocol witness for YesNoPromptFlowStrategy.makePromptForYesNoResponse() in conformance RFSimpleYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return RFSimpleYesNoPromptFlowStrategy.makePromptForYesNoResponse()(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.actionForInput(_:) in conformance RFSimpleYesNoPromptFlowStrategy@<X0>(uint64_t a1@<X8>)
{
  return RFSimpleYesNoPromptFlowStrategy.actionForInput(_:)(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance RFSimpleYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return RFSimpleYesNoPromptFlowStrategy.parseConfirmationResponse(input:)(a1, a2);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance RFSimpleYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t v6 = lazy protocol witness table accessor for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy(&lazy protocol witness table cache variable for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for RFSimpleYesNoPromptFlowStrategy);
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return YesNoPromptFlowStrategy.makePromptForConfirmation(itemToConfirm:)(a1, v4, v6);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:) in conformance RFSimpleYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t v6 = lazy protocol witness table accessor for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy(&lazy protocol witness table cache variable for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for RFSimpleYesNoPromptFlowStrategy);
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return YesNoPromptFlowStrategy.makeRepromptOnEmptyParse(itemToConfirm:)(a1, v4, v6);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:) in conformance RFSimpleYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t v6 = lazy protocol witness table accessor for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy(&lazy protocol witness table cache variable for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for RFSimpleYesNoPromptFlowStrategy);
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return YesNoPromptFlowStrategy.makeRepromptOnLowConfidence(itemToConfirm:)(a1, v4, v6);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse() in conformance RFSimpleYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance RFSimpleYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:) in conformance RFSimpleYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = partial apply for closure #2 in RenderComponentFlowFactory.makeRenderComponentFlow(layouts:dialogs:buttons:delayedActions:directExecution:sayItComponents:disambiguationLists:domainObjectComponents:renderOptions:pommesResponse:eventlogger:aceServiceInvoker:rrEntities:);
  return PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, v9, a4);
}

uint64_t specialized RFSimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v19 = (uint64_t *)(a9 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_responseGenerator);
  v19[3] = a10;
  v19[4] = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(boxed_opaque_existential_1, a2, a10);
  uint64_t v21 = a9 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_baseManifest;
  uint64_t v22 = type metadata accessor for OutputGenerationManifest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v21, a1, v22);
  uint64_t v23 = (void *)(a9 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_rejectionOutputProducer);
  *uint64_t v23 = a3;
  v23[1] = a4;
  char v24 = (void *)(a9
                 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_cancellationOutputProducer);
  *char v24 = a5;
  v24[1] = a6;
  uint64_t v25 = (void *)(a9
                 + OBJC_IVAR____TtC21InformationFlowPlugin31RFSimpleYesNoPromptFlowStrategy_promptPatternExecutionProducer);
  *uint64_t v25 = a7;
  v25[1] = a8;
  return a9;
}

uint64_t base witness table accessor for PromptForConfirmationFlowStrategyAsync in RFSimpleYesNoPromptFlowStrategy()
{
  return lazy protocol witness table accessor for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy(&lazy protocol witness table cache variable for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for RFSimpleYesNoPromptFlowStrategy);
}

uint64_t type metadata accessor for RFSimpleYesNoPromptFlowStrategy()
{
  uint64_t result = type metadata singleton initialization cache for RFSimpleYesNoPromptFlowStrategy;
  if (!type metadata singleton initialization cache for RFSimpleYesNoPromptFlowStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *associated type witness table accessor for PromptForConfirmationFlowStrategyAsync.AnswerType : ConfirmationResponseProviding in RFSimpleYesNoPromptFlowStrategy()
{
  return &protocol witness table for SimpleConfirmationResponseProvider;
}

uint64_t ObjC metadata update function for RFSimpleYesNoPromptFlowStrategy()
{
  return type metadata accessor for RFSimpleYesNoPromptFlowStrategy();
}

uint64_t type metadata completion function for RFSimpleYesNoPromptFlowStrategy()
{
  uint64_t result = type metadata accessor for OutputGenerationManifest();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type RFSimpleYesNoPromptFlowStrategy and conformance RFSimpleYesNoPromptFlowStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of NLContextUpdate?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *SuggestionConstants.serverSuggestionId.unsafeMutableAddressor()
{
  return &static SuggestionConstants.serverSuggestionId;
}

uint64_t *SuggestionConstants.mathSuggestionIntents.unsafeMutableAddressor()
{
  if (one-time initialization token for mathSuggestionIntents != -1) {
    swift_once();
  }
  return &static SuggestionConstants.mathSuggestionIntents;
}

void *SuggestionConstants.serverSuggestionIdMath.unsafeMutableAddressor()
{
  return &static SuggestionConstants.serverSuggestionIdMath;
}

const char *SuggestionConstants.serverIntentName.unsafeMutableAddressor()
{
  return "intentName";
}

uint64_t *SuggestionConstants.kOwnerInformation.unsafeMutableAddressor()
{
  if (one-time initialization token for kOwnerInformation != -1) {
    swift_once();
  }
  return &static SuggestionConstants.kOwnerInformation;
}

void *SuggestionConstants.alternateQueryPayloadKey.unsafeMutableAddressor()
{
  return &static SuggestionConstants.alternateQueryPayloadKey;
}

void *SuggestionConstants.relatedQuestionsPayloadKey.unsafeMutableAddressor()
{
  return &static SuggestionConstants.relatedQuestionsPayloadKey;
}

void *SuggestionConstants.serverPayloadKey.unsafeMutableAddressor()
{
  return &static SuggestionConstants.serverPayloadKey;
}

uint64_t *SuggestionConstants.kOwnerMaps.unsafeMutableAddressor()
{
  if (one-time initialization token for kOwnerMaps != -1) {
    swift_once();
  }
  return &static SuggestionConstants.kOwnerMaps;
}

unint64_t static SuggestionConstants.serverPayloadKey.getter()
{
  return 0xD000000000000017;
}

unint64_t static SuggestionConstants.alternateQueryPayloadKey.getter()
{
  return 0xD000000000000015;
}

void *SuggestionConstants.alternateSuggestionId.unsafeMutableAddressor()
{
  return &static SuggestionConstants.alternateSuggestionId;
}

unint64_t static SuggestionConstants.alternateSuggestionId.getter()
{
  return 0xD000000000000013;
}

unint64_t static SuggestionConstants.relatedQuestionsPayloadKey.getter()
{
  return 0xD000000000000017;
}

void *SuggestionConstants.relatedQuestionsSuggestionId.unsafeMutableAddressor()
{
  return &static SuggestionConstants.relatedQuestionsSuggestionId;
}

unint64_t static SuggestionConstants.relatedQuestionsSuggestionId.getter()
{
  return 0xD000000000000010;
}

unint64_t static SuggestionConstants.serverSuggestionId.getter()
{
  return 0xD000000000000014;
}

unint64_t static SuggestionConstants.serverSuggestionIdMath.getter()
{
  return 0xD000000000000018;
}

uint64_t static SuggestionConstants.serverIntentName.getter()
{
  return 0x614E746E65746E69;
}

void *SuggestionConstants.serverExampleUtterance.unsafeMutableAddressor()
{
  return &static SuggestionConstants.serverExampleUtterance;
}

unint64_t static SuggestionConstants.serverExampleUtterance.getter()
{
  return 0xD000000000000010;
}

uint64_t one-time initialization function for kOwnerInformation(uint64_t a1)
{
  return one-time initialization function for kOwnerInformation(a1, 0x74616D726F666E49, 0xEB000000006E6F69, &static SuggestionConstants.kOwnerInformation);
}

uint64_t static SuggestionConstants.kOwnerInformation.getter()
{
  return static SuggestionConstants.kOwnerInformation.getter(&one-time initialization token for kOwnerInformation);
}

uint64_t one-time initialization function for kOwnerMaps(uint64_t a1)
{
  return one-time initialization function for kOwnerInformation(a1, 0x6F654769726953, 0xE700000000000000, &static SuggestionConstants.kOwnerMaps);
}

uint64_t one-time initialization function for kOwnerInformation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  type metadata accessor for DomainOwner();
  swift_allocObject();
  uint64_t result = DomainOwner.init(_:)();
  *a4 = result;
  return result;
}

uint64_t static SuggestionConstants.kOwnerMaps.getter()
{
  return static SuggestionConstants.kOwnerInformation.getter(&one-time initialization token for kOwnerMaps);
}

uint64_t static SuggestionConstants.kOwnerInformation.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t one-time initialization function for mathSuggestionIntents()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_SuggestionIntent>);
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SuggestionIntent();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_AD540;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.mathResult(_:), v0);
  v6(v5 + v2, enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.mathDecimalToFraction(_:), v0);
  v6(v5 + 2 * v2, enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.mathTipCalculation(_:), v0);
  v6(v5 + 3 * v2, enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.mathPythagoreanTheorem(_:), v0);
  v6(v5 + 4 * v2, enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.mathArithmetic(_:), v0);
  uint64_t result = ((uint64_t (*)(unint64_t, void, uint64_t))v6)(v5 + 5 * v2, enum case for Apple_Parsec_Siri_V2alpha_SuggestionIntent.kgSimpleMathConcept(_:), v0);
  static SuggestionConstants.mathSuggestionIntents = v4;
  return result;
}

uint64_t static SuggestionConstants.mathSuggestionIntents.getter()
{
  return static SuggestionConstants.mathSuggestionIntents.getter(&one-time initialization token for mathSuggestionIntents);
}

uint64_t one-time initialization function for t41Locales()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale>);
  type metadata accessor for Locale();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_AD550;
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  Locale.init(identifier:)();
  uint64_t result = Locale.init(identifier:)();
  static SuggestionConstants.t41Locales = v0;
  return result;
}

uint64_t *SuggestionConstants.t41Locales.unsafeMutableAddressor()
{
  if (one-time initialization token for t41Locales != -1) {
    swift_once();
  }
  return &static SuggestionConstants.t41Locales;
}

uint64_t static SuggestionConstants.t41Locales.getter()
{
  return static SuggestionConstants.mathSuggestionIntents.getter(&one-time initialization token for t41Locales);
}

uint64_t static SuggestionConstants.mathSuggestionIntents.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for SuggestionConstants()
{
  return &type metadata for SuggestionConstants;
}

uint64_t ExperienceSelector.selectPegasusExperience(pegasusResult:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.information);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_0, v10, v11, "ExperienceSelector will select a PegasusExperience.", v12, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for PerformanceUtil();
  uint64_t v13 = static PerformanceUtil.shared.getter();
  __chkstk_darwin(v13);
  Date.init()();
  uint64_t v29 = &v27;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PegasusComponents?);
  BOOL v28 = partial apply for closure #1 in ExperienceSelector.selectPegasusExperience(pegasusResult:);
  char v27 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v14 = v35;
  if (v35)
  {
    Parse.PegasusResult.response.getter();
    uint64_t v32 = specialized static PegasusComponentsParser.parsePegasusRenderOptions(response:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v34);
    id v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
    uint64_t v16 = (char *)a1 + v15[24];
    *a1 = v14[3];
    a1[1] = v14[2];
    uint64_t v33 = v14[5];
    a1[2] = v33;
    uint64_t v34 = v14[7];
    a1[3] = v34;
    uint64_t v17 = v14[6];
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent();
    uint64_t v20 = *(void *)(v19 - 8);
    if (v18)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v16, v17+ ((*(unsigned __int8 *)(*(void *)(v19 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v19 - 8) + 80)), v19);
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v16, v21, 1, v19);
    uint64_t v22 = v15[32];
    uint64_t v23 = v15[36];
    uint64_t v24 = v15[40];
    *(void *)((char *)a1 + v15[28]) = v14[8];
    *(void *)((char *)a1 + v22) = v14[9];
    uint64_t v25 = v14[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)((char *)a1 + v23) = v25;
    *(void *)((char *)a1 + v24) = v32;
    type metadata accessor for PegasusExperience();
  }
  else
  {
    type metadata accessor for PegasusExperience();
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t ExperienceSelector.selectPommesExperience(pommesResponse:)@<X0>(char *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v14 = v13;
  if (v13 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_3:
    if ((v14 & 0xC000000000000001) != 0)
    {
      id v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      type metadata accessor for PhoneCallExperience();
      if (swift_dynamicCastClass())
      {
        uint64_t v64 = a1;
        uint64_t v17 = v16;
        PhoneCallExperience.makeDirectInvocation()((uint64_t)v8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
        {
          uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          v30(v12, v8, v9);
          if (one-time initialization token for information != -1) {
            swift_once();
          }
          uint64_t v31 = type metadata accessor for Logger();
          __swift_project_value_buffer(v31, (uint64_t)static Logger.information);
          uint64_t v32 = Logger.logObject.getter();
          os_log_type_t v33 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v32, v33))
          {
            uint64_t v34 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v34 = 0;
            _os_log_impl(&dword_0, v32, v33, "Found phone call experience. Continuing with phone call direct invocation.", v34, 2u);
            swift_slowDealloc();
          }

          v30(v64, v12, v9);
          type metadata accessor for PegasusExperience();
          return swift_storeEnumTagMultiPayload();
        }

        outlined destroy of Parse.DirectInvocation?((uint64_t)v8);
        a1 = v64;
      }
      type metadata accessor for GenericExperience();
      if (swift_dynamicCastClass())
      {
        type metadata accessor for PerformanceUtil();
        uint64_t v18 = v16;
        uint64_t v19 = static PerformanceUtil.shared.getter();
        __chkstk_darwin(v19);
        Date.init()();
        char v57 = &v55;
        uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PegasusComponents?);
        uint64_t v56 = partial apply for closure #1 in ExperienceSelector.selectPommesExperience(pommesResponse:);
        char v55 = 2;
        dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        uint64_t v20 = v65;
        if (v65)
        {
          uint64_t v62 = v18;
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
          uint64_t v22 = a1;
          uint64_t v23 = (int *)v21;
          uint64_t v24 = &v22[*(int *)(v21 + 96)];
          *(void *)uint64_t v22 = v20[3];
          *((void *)v22 + 1) = v20[2];
          uint64_t v61 = v20[5];
          *((void *)v22 + 2) = v61;
          uint64_t v63 = v20[7];
          uint64_t v64 = v22;
          *((void *)v22 + 3) = v63;
          uint64_t v25 = v20[6];
          uint64_t v26 = *(void *)(v25 + 16);
          uint64_t v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent();
          uint64_t v28 = *(void *)(v27 - 8);
          if (v26)
          {
            (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v24, v25+ ((*(unsigned __int8 *)(*(void *)(v27 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v27 - 8) + 80)), v27);
            uint64_t v29 = 0;
          }
          else
          {
            uint64_t v29 = 1;
          }
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v24, v29, 1, v27);
          uint64_t v44 = v23[28];
          uint64_t v45 = v23[32];
          uint64_t v46 = v23[36];
          uint64_t v60 = v23[40];
          uint64_t v47 = v64;
          *(void *)&v64[v44] = v20[8];
          *(void *)((char *)v47 + v45) = v20[9];
          *(void *)((char *)v47 + v46) = v20[10];
          uint64_t v48 = v62;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v49 = dispatch thunk of Experience.renderOptions.getter();
          swift_release();

          *(void *)((char *)v47 + v60) = v49;
          type metadata accessor for PegasusExperience();
          return swift_storeEnumTagMultiPayload();
        }
        if (one-time initialization token for information != -1) {
          swift_once();
        }
        uint64_t v40 = type metadata accessor for Logger();
        __swift_project_value_buffer(v40, (uint64_t)static Logger.information);
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v41))
        {
          uint64_t v42 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v42 = 0;
          _os_log_impl(&dword_0, v36, v41, "ExperienceSelector no valid pegasus experience.", v42, 2u);
          swift_slowDealloc();
          uint64_t v43 = v18;
        }
        else
        {
          uint64_t v43 = v36;
          uint64_t v36 = v18;
        }
      }
      else
      {
        if (one-time initialization token for information != -1) {
          swift_once();
        }
        uint64_t v35 = type metadata accessor for Logger();
        __swift_project_value_buffer(v35, (uint64_t)static Logger.information);
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v38 = 0;
          _os_log_impl(&dword_0, v36, v37, "ExperienceSelector top experience not generic.", v38, 2u);
          swift_slowDealloc();
          uint64_t v39 = v16;
        }
        else
        {
          uint64_t v39 = v36;
          uint64_t v36 = v16;
        }
      }
      type metadata accessor for PegasusExperience();
      return swift_storeEnumTagMultiPayload();
    }
    if (*(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFFF8)))
    {
      id v15 = *(id *)(v14 + 32);
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_43;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for information != -1) {
LABEL_43:
  }
    swift_once();
  uint64_t v51 = type metadata accessor for Logger();
  __swift_project_value_buffer(v51, (uint64_t)static Logger.information);
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl(&dword_0, v52, v53, "ExperienceSelector found no experiences.", v54, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for PegasusExperience();

  return swift_storeEnumTagMultiPayload();
}

uint64_t PhoneCallExperience.makeDirectInvocation()@<X0>(uint64_t a1@<X8>)
{
  if (PhoneCallExperience.makeDirectInvocationPayload()())
  {
    Parse.DirectInvocation.init(identifier:userData:)();
    uint64_t v2 = type metadata accessor for Parse.DirectInvocation();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
    uint64_t v4 = v2;
    uint64_t v5 = a1;
    uint64_t v6 = 0;
  }
  else
  {
    if (one-time initialization token for information != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.information);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_0, v8, v9, "Unable to make direct invocation payload", v10, 2u);
      swift_slowDealloc();
    }

    uint64_t v11 = type metadata accessor for Parse.DirectInvocation();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v4 = v11;
    uint64_t v5 = a1;
    uint64_t v6 = 1;
  }

  return v3(v5, v6, 1, v4);
}

uint64_t ExperienceSelector.selectPegasusComponents(pegasusResult:)()
{
  v23[0] = type metadata accessor for Date();
  uint64_t v0 = *(void *)(v23[0] - 8);
  __chkstk_darwin(v23[0]);
  uint64_t v2 = (char *)v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.information);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_0, v4, v5, "ExperienceSelector will select PegasusComponents.", v6, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for PerformanceUtil();
  uint64_t v7 = static PerformanceUtil.shared.getter();
  __chkstk_darwin(v7);
  Date.init()();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PegasusComponents?);
  uint64_t v21 = &v19;
  uint64_t v22 = v8;
  uint64_t v20 = partial apply for closure #1 in ExperienceSelector.selectPegasusComponents(pegasusResult:);
  char v19 = 2;
  dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
  swift_release();
  os_log_type_t v9 = *(void (**)(char *, void))(v0 + 8);
  v9(v2, v23[0]);
  uint64_t v10 = v24;
  if (v24)
  {
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      unint64_t v14 = "ExperienceSelector: found primary experience.";
LABEL_11:
      _os_log_impl(&dword_0, v11, v12, v14, v13, 2u);
LABEL_12:
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v15 = static PerformanceUtil.shared.getter();
    __chkstk_darwin(v15);
    Date.init()();
    uint64_t v21 = &v19;
    uint64_t v22 = v8;
    uint64_t v20 = partial apply for closure #2 in ExperienceSelector.selectPegasusComponents(pegasusResult:);
    char v19 = 2;
    dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
    swift_release();
    v9(v2, v23[0]);
    uint64_t v10 = v23[1];
    uint64_t v11 = Logger.logObject.getter();
    if (!v10)
    {
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v11, v17))
      {
        uint64_t v10 = 0;
        goto LABEL_13;
      }
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_0, v11, v17, "ExperienceSelector did not find a valid PegasusComponents.", v18, 2u);
      uint64_t v10 = 0;
      goto LABEL_12;
    }
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      unint64_t v14 = "ExperienceSelector: found legacy experience.";
      goto LABEL_11;
    }
  }
LABEL_13:

  return v10;
}

uint64_t partial apply for closure #1 in ExperienceSelector.selectPegasusExperience(pegasusResult:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 16) + 96))(*(void *)(v1 + 24));
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for PegasusExperience()
{
  uint64_t result = type metadata singleton initialization cache for PegasusExperience;
  if (!type metadata singleton initialization cache for PegasusExperience) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *PhoneCallExperience.directInvocationIdentifier.unsafeMutableAddressor()
{
  return &static PhoneCallExperience.directInvocationIdentifier;
}

unint64_t static PhoneCallExperience.directInvocationIdentifier.getter()
{
  return 0xD000000000000034;
}

unint64_t PhoneCallExperience.makeDirectInvocationPayload()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  __chkstk_darwin(v0 - 8);
  uint64_t v61 = (char *)&v58 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v60 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v58 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v58 - v9;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.information);
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_0, v13, v14, "Creating INStartCallIntent", v15, 2u);
    swift_slowDealloc();
  }

  PhoneCallExperience.phoneCall.getter();
  uint64_t v16 = Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.phoneNumber.getter();
  unint64_t v18 = v17;
  char v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v20 = v2;
  v19(v10, v2);
  swift_bridgeObjectRelease();
  uint64_t v21 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0) {
    uint64_t v21 = v16 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v58 = v12;
  if (v21)
  {
    PhoneCallExperience.phoneCall.getter();
    Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.phoneNumber.getter();
    v19(v8, v2);
    id v22 = objc_allocWithZone((Class)INPersonHandle);
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v24 = objc_msgSend(v22, "initWithValue:type:", v23, 2, v58);
  }
  else
  {
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_0, v25, v26, "Phone number unknown", v27, 2u);
      swift_slowDealloc();
    }

    id v28 = objc_allocWithZone((Class)INPersonHandle);
    NSString v23 = String._bridgeToObjectiveC()();
    id v24 = objc_msgSend(v28, "initWithValue:type:", v23, 0, v58);
    uint64_t v20 = v2;
  }

  uint64_t v29 = type metadata accessor for PersonNameComponents();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = v61;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v61, 1, 1, v29);
  id v59 = v24;
  uint64_t v32 = v60;
  PhoneCallExperience.phoneCall.getter();
  Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.name.getter();
  v19(v32, v20);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v31, 1, v29) != 1)
  {
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v29);
  }
  id v34 = objc_allocWithZone((Class)INPerson);
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v36 = v59;
  id v37 = [v34 initWithPersonHandle:v59 nameComponents:isa displayName:v35 image:0 contactIdentifier:0 customIdentifier:0];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_AB670;
  *(void *)(v38 + 32) = v37;
  uint64_t v62 = v38;
  specialized Array._endMutation()();
  id v39 = objc_allocWithZone((Class)INStartCallIntent);
  type metadata accessor for INPerson();
  id v40 = v37;
  Class v41 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v42 = [v39 initWithCallRecordFilter:0 callRecordToCallBack:0 audioRoute:0 destinationType:1 preferredCallProvider:1 contacts:v41 ttyType:0 callCapability:1];

  id v43 = [v42 backingStore];
  id v44 = [v43 data];

  if (v44)
  {
    uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v47 = v46;

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_AB7D0;
    *(void *)(inited + 32) = 0x6449707061;
    *(void *)(inited + 40) = 0xE500000000000000;
    *(void *)(inited + 48) = 0xD000000000000015;
    *(void *)(inited + 56) = 0x80000000000B19A0;
    *(void *)(inited + 72) = &type metadata for String;
    strcpy((char *)(inited + 80), "intentTypeName");
    *(unsigned char *)(inited + 95) = -18;
    id v49 = [v42 typeName];
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v52 = v51;

    *(void *)(inited + 96) = v50;
    *(void *)(inited + 104) = v52;
    *(void *)(inited + 120) = &type metadata for String;
    *(void *)(inited + 128) = 0x6144746E65746E69;
    *(void *)(inited + 168) = &type metadata for Data;
    *(void *)(inited + 136) = 0xEA00000000006174;
    *(void *)(inited + 144) = v45;
    *(void *)(inited + 152) = v47;
    outlined copy of Data._Representation(v45, v47);
    unint64_t v53 = specialized Dictionary.init(dictionaryLiteral:)(inited);

    outlined consume of Data._Representation(v45, v47);
  }
  else
  {
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl(&dword_0, v54, v55, "Unable to serialize INStartCallIntent", v56, 2u);
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  return v53;
}

uint64_t partial apply for closure #1 in ExperienceSelector.selectPommesExperience(pommesResponse:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = GenericExperience.components.getter();
  uint64_t v3 = specialized static PegasusComponentsParser.collateComponents(components:)(v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t outlined destroy of Parse.DirectInvocation?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in ExperienceSelector.selectPegasusComponents(pegasusResult:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized static PegasusComponentsParser.parsePrimaryComponents(pegasusResult:)();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #2 in ExperienceSelector.selectPegasusComponents(pegasusResult:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized static PegasusComponentsParser.parseLegacyComponents(pegasusResult:)();
  *a1 = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PegasusExperience(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v19 = type metadata accessor for Parse.DirectInvocation();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v20 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = a2[3];
      a1[2] = a2[2];
      a1[3] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
      uint64_t v11 = v10[24];
      uint64_t v12 = (char *)a1 + v11;
      unint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      *(uint64_t *)((char *)a1 + v10[28]) = *(uint64_t *)((char *)a2 + v10[28]);
      *(uint64_t *)((char *)a1 + v10[32]) = *(uint64_t *)((char *)a2 + v10[32]);
      *(uint64_t *)((char *)a1 + v10[36]) = *(uint64_t *)((char *)a2 + v10[36]);
      uint64_t v21 = v10[40];
      id v22 = *(void **)((char *)a2 + v21);
      *(uint64_t *)((char *)a1 + v21) = (uint64_t)v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v23 = v22;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void destroy for PegasusExperience(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for Parse.DirectInvocation();
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      if (!EnumCaseMultiPayload)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
        uint64_t v4 = a1 + *(int *)(v3 + 96);
        uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent();
        uint64_t v6 = *(void *)(v5 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v7 = *(void **)(a1 + *(int *)(v3 + 160));
      }
      return;
    }
    uint64_t v8 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel();
  }
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);

  v9(a1, v8);
}

void *initializeWithCopy for PegasusExperience(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v16 = type metadata accessor for Parse.DirectInvocation();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      uint64_t v17 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
      goto LABEL_11;
    case 0:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
      uint64_t v10 = v9[24];
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      *(void *)((char *)a1 + v9[28]) = *(void *)((char *)a2 + v9[28]);
      *(void *)((char *)a1 + v9[32]) = *(void *)((char *)a2 + v9[32]);
      *(void *)((char *)a1 + v9[36]) = *(void *)((char *)a2 + v9[36]);
      uint64_t v18 = v9[40];
      uint64_t v19 = *(void **)((char *)a2 + v18);
      *(void *)((char *)a1 + v18) = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v20 = v19;
      goto LABEL_11;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithCopy for PegasusExperience(void *a1, void *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  outlined destroy of PegasusExperience((uint64_t)a1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v14 = type metadata accessor for Parse.DirectInvocation();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      uint64_t v15 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
      goto LABEL_12;
    case 0:
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
      uint64_t v8 = v7[24];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *(void *)((char *)a1 + v7[28]) = *(void *)((char *)a2 + v7[28]);
      *(void *)((char *)a1 + v7[32]) = *(void *)((char *)a2 + v7[32]);
      *(void *)((char *)a1 + v7[36]) = *(void *)((char *)a2 + v7[36]);
      uint64_t v16 = v7[40];
      uint64_t v17 = *(void **)((char *)a2 + v16);
      *(void *)((char *)a1 + v16) = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v18 = v17;
      goto LABEL_12;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *initializeWithTake for PegasusExperience(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v15 = type metadata accessor for Parse.DirectInvocation();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      uint64_t v16 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v16 - 8) + 32))(a1, a2, v16);
      goto LABEL_11;
    case 0:
      long long v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
      uint64_t v9 = v8[24];
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(void *)((char *)a1 + v8[28]) = *(void *)((char *)a2 + v8[28]);
      *(void *)((char *)a1 + v8[32]) = *(void *)((char *)a2 + v8[32]);
      *(void *)((char *)a1 + v8[36]) = *(void *)((char *)a2 + v8[36]);
      *(void *)((char *)a1 + v8[40]) = *(void *)((char *)a2 + v8[40]);
      goto LABEL_11;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for PegasusExperience(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  outlined destroy of PegasusExperience((uint64_t)a1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v15 = type metadata accessor for Parse.DirectInvocation();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      uint64_t v16 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v16 - 8) + 32))(a1, a2, v16);
      goto LABEL_12;
    case 0:
      long long v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent], [Apple_Parsec_Siri_V2alpha_RenderedDialogComponent], [Apple_Parsec_Siri_V2alpha_ButtonViewComponent], [Apple_Parsec_Siri_V2alpha_DelayedActionComponent], Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?, [Apple_Parsec_Siri_V2alpha_SayItComponent], [Apple_Parsec_Siri_V2alpha_DisambiguationListComponent], [Apple_Parsec_Siri_V2alpha_DomainObjectComponent], PommesRenderOptions?));
      uint64_t v9 = v8[24];
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(void *)((char *)a1 + v8[28]) = *(void *)((char *)a2 + v8[28]);
      *(void *)((char *)a1 + v8[32]) = *(void *)((char *)a2 + v8[32]);
      *(void *)((char *)a1 + v8[36]) = *(void *)((char *)a2 + v8[36]);
      *(void *)((char *)a1 + v8[40]) = *(void *)((char *)a2 + v8[40]);
      goto LABEL_12;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void type metadata completion function for PegasusExperience()
{
  type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    uint64_t v6 = &v5;
    uint64_t v1 = type metadata accessor for Apple_Parsec_Responseframework_PatternModel();
    if (v2 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v1 - 8) + 64;
      uint64_t v3 = type metadata accessor for Parse.DirectInvocation();
      if (v4 <= 0x3F)
      {
        uint64_t v8 = *(void *)(v3 - 8) + 64;
        swift_initEnumMetadataMultiPayload();
      }
    }
  }
}

void type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?()
{
  if (!lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent?);
    }
  }
}

uint64_t type metadata accessor for ExperienceSelector()
{
  return self;
}

unint64_t type metadata accessor for INPerson()
{
  unint64_t result = lazy cache variable for type metadata for INPerson;
  if (!lazy cache variable for type metadata for INPerson)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  }
  return result;
}

uint64_t DetailedResultProvider.init(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:informationViewFactory:patternFlowProvider:patternExecutor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, long long *a12)
{
  *(void *)(a9 + 232) = a1;
  *(void *)(a9 + 240) = a2;
  uint64_t v25 = a3;
  specialized Dictionary._Variant.removeValue(forKey:)(0x64656C6961746564, 0xEC00000074786554, v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  int v18 = swift_dynamicCast();
  uint64_t v19 = v23;
  uint64_t v20 = v24;
  if (!v18)
  {
    uint64_t v20 = 0;
    uint64_t v19 = 0;
  }
  *(void *)a9 = v25;
  *(void *)(a9 + 8) = v19;
  *(void *)(a9 + 16) = v20;
  strcpy((char *)(a9 + 24), "detailedText");
  *(unsigned char *)(a9 + 37) = 0;
  *(_WORD *)(a9 + 38) = -5120;
  *(void *)(a9 + 224) = a4;
  *(void *)(a9 + 120) = a5;
  *(void *)(a9 + 128) = a6;
  outlined init with copy of OutputPublisherAsync(a7, a9 + 40);
  outlined init with copy of OutputPublisherAsync(a8, a9 + 80);
  static PatternFlowProvidingHelper.unwrap(_:with:)(a11, a7, (uint64_t *)v22);
  outlined destroy of Any?(a11, &demangling cache variable for type metadata for PatternFlowProviding?);
  __swift_destroy_boxed_opaque_existential_1(a8);
  __swift_destroy_boxed_opaque_existential_1(a7);
  outlined init with take of PatternFlowProviding(v22, a9 + 136);
  *(void *)(a9 + 176) = a10;
  return outlined init with take of PatternFlowProviding(a12, a9 + 184);
}

const char *DetailedResultProvider.contentFieldName.unsafeMutableAddressor()
{
  return "detailedText";
}

uint64_t static DetailedResultProvider.contentFieldName.getter()
{
  return 0x64656C6961746564;
}

id DetailedResultProvider.bundle.getter()
{
  return *(id *)(v0 + 224);
}

void DetailedResultProvider.bundle.setter(uint64_t a1)
{
  *(void *)(v1 + 224) = a1;
}

InformationFlowPlugin::KnowledgeConfirmationResponseProvider (__swiftcall *DetailedResultProvider.bundle.modify())(InformationFlowPlugin::KnowledgeConfirmationResponse_optional)
{
  return KnowledgeConfirmationResponseProvider.init(_:);
}

uint64_t DetailedResultProvider.patternId.getter()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DetailedResultProvider.patternId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 232) = a1;
  *(void *)(v2 + 240) = a2;
  return result;
}

InformationFlowPlugin::KnowledgeConfirmationResponseProvider (__swiftcall *DetailedResultProvider.patternId.modify())(InformationFlowPlugin::KnowledgeConfirmationResponse_optional)
{
  return KnowledgeConfirmationResponseProvider.init(_:);
}

uint64_t DetailedResultProvider.content.getter()
{
  if (*(void *)(v0 + 16)) {
    uint64_t v1 = *(void *)(v0 + 8);
  }
  else {
    uint64_t v1 = 0;
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in DetailedResultProvider.outputManifest.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for PommesContext.Source();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  NLContextUpdate.init()();
  uint64_t v14 = *(void *)(a2 + 120);
  unint64_t v13 = *(void *)(a2 + 128);
  *uint64_t v6 = v14;
  v6[1] = v13;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for PommesContext.Source.pegasusResponse(_:), v3);
  outlined copy of Data?(v14, v13);
  PommesContext.init(source:domain:listenAfterSpeaking:)();
  uint64_t v15 = type metadata accessor for PommesContext();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 0, 1, v15);
  NLContextUpdate.pommesContext.setter();
  uint64_t v16 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v12, 0, 1, v16);
  return OutputGenerationManifest.nlContextUpdate.setter();
}

uint64_t DetailedResultProvider.makeSingleWindowFlow()()
{
  v1[39] = v0;
  type metadata accessor for DialogPhase();
  v1[40] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for OutputGenerationManifest();
  v1[41] = v2;
  v1[42] = *(void *)(v2 - 8);
  v1[43] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for WindowedPaginationParameters();
  v1[44] = v3;
  v1[45] = *(void *)(v3 - 8);
  v1[46] = swift_task_alloc();
  return _swift_task_switch(DetailedResultProvider.makeSingleWindowFlow(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v23 = v0;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "DetailedResultFlowProvider.makeSingleWindowFlow", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 312);

  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(*(void *)(v0 + 312) + 8);
    WindowedPaginationParameters.init(windowSize:_:)();
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v8;
    *uint64_t v8 = v0;
    v8[1] = DetailedResultProvider.makeSingleWindowFlow();
    uint64_t v9 = *(void *)(v0 + 368);
    return DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)(v7, v6, v9);
  }
  else
  {
    outlined init with copy of DetailedResultProvider(*(void *)(v0 + 312), v0 + 16);
    uint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      id v22 = swift_slowAlloc();
      *(_DWORD *)unint64_t v13 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v14 = Dictionary.description.getter();
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of DetailedResultProvider(v0 + 16);
      _os_log_impl(&dword_0, v11, v12, "DetailedResultFlowProvider.makeSingleWindow: No content to display from provided parameters %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      outlined destroy of DetailedResultProvider(v0 + 16);
    }

    uint64_t v17 = *(void *)(v0 + 312);
    outlined init with copy of OutputPublisherAsync(v17 + 40, v0 + 264);
    uint64_t v18 = *(void *)(v17 + 176);
    type metadata accessor for ErrorFlowFactory();
    uint64_t v19 = swift_allocObject();
    outlined init with take of PatternFlowProviding((long long *)(v0 + 264), v19 + 16);
    *(void *)(v19 + 56) = v18;
    swift_retain();
    uint64_t v20 = ErrorFlowFactory.makeErrorFlow(message:)(1701736302, 0xE400000000000000);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v21(v20);
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  uint64_t v1 = (void *)v0[49];
  uint64_t v3 = v0[42];
  uint64_t v2 = v0[43];
  uint64_t v8 = v0[41];
  uint64_t v4 = v0[39];
  __swift_project_boxed_opaque_existential_1((void *)(v4 + 136), *(void *)(v4 + 160));
  static DialogPhase.completion.getter();
  *(void *)(swift_task_alloc() + 16) = v4;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  uint64_t v5 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
  return v6(v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t DetailedResultProvider.makeSingleWindowFlow()(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[48] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[46];
  uint64_t v6 = v4[45];
  uint64_t v7 = v4[44];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v8 = DetailedResultProvider.makeSingleWindowFlow();
  }
  else
  {
    v4[49] = a1;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v8 = DetailedResultProvider.makeSingleWindowFlow();
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  uint64_t v5 = type metadata accessor for Date();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  return _swift_task_switch(DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:), 0, 0);
}

void DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)()
{
  uint64_t v25 = v0 + 2;
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "DetailedResultFlowProvider.executePatternForWindow", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[8];
  uint64_t v6 = (uint64_t *)v0[11];
  uint64_t v7 = v0[9];

  uint64_t v24 = WindowedPaginationParameters.asCATParameters()();
  uint64_t v8 = *v6;
  uint64_t v9 = v6[3];
  uint64_t v10 = v6[4];
  id v28 = &type metadata for String;
  *(void *)&long long v27 = v5;
  *((void *)&v27 + 1) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v29 = v8;
  specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(&v27, v9, v10, isUniquelyReferenced_nonNull_native, v25);
  uint64_t v12 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Any?((uint64_t)v25, &demangling cache variable for type metadata for Any?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = specialized Dictionary.merging(_:uniquingKeysWith:)(v12, v24);
  v0[15] = v13;
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v17 = Dictionary.description.getter();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v14, v15, "DetailedResultFlowProvider.executePatternForWindow parameters: %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v20 = v0[11];
  type metadata accessor for PerformanceUtil();
  v0[16] = static PerformanceUtil.shared.getter();
  uint64_t v21 = swift_task_alloc();
  v0[17] = v21;
  *(void *)(v21 + 16) = v20;
  *(void *)(v21 + 24) = v13;
  Date.init()();
  os_log_type_t v26 = (char *)&async function pointer to dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)
      + async function pointer to dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:);
  id v22 = (void *)swift_task_alloc();
  v0[18] = v22;
  unint64_t v23 = type metadata accessor for PatternExecutionResult();
  *id v22 = v0;
  v22[1] = DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:);
  uint64_t v36 = v21;
  unint64_t v37 = v23;
  NSString v35 = &async function pointer to partial apply for closure #2 in DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:);
  char v34 = 2;
  uint64_t v33 = 60;
  uint64_t v31 = 116;
  uint64_t v32 = "executePatternForWindow(windowContent:paginationParameters:)";
  __asm { BR              X8 }
}

uint64_t DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[13] + 8))(v2[14], v2[12]);
  swift_bridgeObjectRelease();
  swift_release();
  if (v0)
  {
    os_log_type_t v3 = DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:);
  }
  else
  {
    swift_task_dealloc();
    os_log_type_t v3 = DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t DetailedResultProvider.makeWindowingFlowProvider()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(DetailedResultProvider.makeWindowingFlowProvider(), 0, 0);
}

uint64_t DetailedResultProvider.makeWindowingFlowProvider()()
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "DetailedResultFlowProvider.makeWindowingFlowProvider", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];

  outlined init with copy of DetailedResultProvider(v5, v6);
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t DetailedResultProvider.makeWindowFlow(paginationParameters:windowContent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[35] = a3;
  v4[36] = v3;
  v4[33] = a1;
  v4[34] = a2;
  uint64_t v5 = type metadata accessor for ConfirmationResponse();
  v4[37] = v5;
  v4[38] = *(void *)(v5 - 8);
  v4[39] = swift_task_alloc();
  type metadata accessor for DialogPhase();
  unsigned char v4[40] = swift_task_alloc();
  type metadata accessor for OutputGenerationManifest();
  v4[41] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for WindowedPaginationParameters();
  v4[42] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[43] = v7;
  v4[44] = *(void *)(v7 + 64);
  v4[45] = swift_task_alloc();
  return _swift_task_switch(DetailedResultProvider.makeWindowFlow(paginationParameters:windowContent:), 0, 0);
}

uint64_t DetailedResultProvider.makeWindowFlow(paginationParameters:windowContent:)()
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "DetailedResultFlowProvider.makeWindowFlow", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 336);
  uint64_t v7 = *(void *)(v0 + 344);
  uint64_t v27 = *(void *)(v0 + 312);
  uint64_t v8 = *(void *)(v0 + 288);
  uint64_t v25 = *(void *)(v0 + 304);
  uint64_t v26 = *(void *)(v0 + 296);
  uint64_t v9 = *(void *)(v0 + 280);
  uint64_t v24 = *(void *)(v0 + 272);
  uint64_t v10 = *(void *)(v0 + 264);

  outlined init with copy of DetailedResultProvider(v8, v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v10, v6);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 280) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  long long v13 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v12 + 208) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v12 + 224) = v13;
  *(_OWORD *)(v12 + 240) = *(_OWORD *)(v0 + 240);
  uint64_t v14 = *(void *)(v0 + 256);
  long long v15 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v12 + 144) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v12 + 160) = v15;
  long long v16 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v12 + 176) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v12 + 192) = v16;
  long long v17 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v12 + 80) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v12 + 96) = v17;
  long long v18 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v12 + 112) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v12 + 128) = v18;
  long long v19 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v12 + 32) = v19;
  long long v20 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v12 + 48) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v12 + 64) = v20;
  *(void *)(v12 + 256) = v14;
  *(void *)(v12 + 264) = v24;
  *(void *)(v12 + 272) = v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v12 + v11, v5, v6);
  swift_bridgeObjectRetain();
  static DialogPhase.clarification.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  ResponseFactory.init()();
  type metadata accessor for SimpleYesNoPromptFlowStrategy();
  swift_allocObject();
  SimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)();
  __swift_project_boxed_opaque_existential_1((void *)(v8 + 136), *(void *)(v8 + 160));
  (*(void (**)(uint64_t, void, uint64_t))(v25 + 104))(v27, enum case for ConfirmationResponse.confirmed(_:), v26);
  uint64_t v21 = dispatch thunk of PatternFlowProviding.makeResponseFlowWithContinuationPrompt<A>(strategy:shouldContinueForResponse:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v22 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v22(v21);
}

uint64_t closure #1 in DetailedResultProvider.makeWindowFlow(paginationParameters:windowContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = ResponseFlowFactory.makeSimpleFlow(patternId:parameters:bundle:pegasusConversationContext:outputPublisherAsync:deviceState:patternFlowProvider:patternExecutor:);
  return DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)(a2, a3, a4);
}

uint64_t DetailedResultProvider.makeFinalWindowFlow(paginationParameters:windowContent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for DialogPhase();
  v4[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  return _swift_task_switch(DetailedResultProvider.makeFinalWindowFlow(paginationParameters:windowContent:), 0, 0);
}

uint64_t DetailedResultProvider.makeFinalWindowFlow(paginationParameters:windowContent:)()
{
  if (one-time initialization token for information != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.information);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "DetailedResultFlowProvider.makeFinalWindowFlow", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[10] = v5;
  *uint64_t v5 = v0;
  v5[1] = DetailedResultProvider.makeFinalWindowFlow(paginationParameters:windowContent:);
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[2];
  uint64_t v8 = v0[3];
  return DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)(v8, v6, v7);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  uint64_t v1 = (void *)v0[11];
  os_log_type_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v8 = v0[7];
  uint64_t v4 = v0[5];
  __swift_project_boxed_opaque_existential_1((void *)(v4 + 136), *(void *)(v4 + 160));
  static DialogPhase.completion.getter();
  *(void *)(swift_task_alloc() + 16) = v4;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  uint64_t v5 = dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
  return v6(v5);
}

uint64_t DetailedResultProvider.makeFinalWindowFlow(paginationParameters:windowContent:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    return _swift_task_switch(DetailedResultProvider.makeFinalWindowFlow(paginationParameters:windowContent:), 0, 0);
  }
}

uint64_t closure #2 in DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(closure #2 in DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:), 0, 0);
}

uint64_t closure #2 in DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v1[26];
  uint64_t v3 = v1[27];
  __swift_project_boxed_opaque_existential_1(v1 + 23, v2);
  uint64_t v5 = v1[29];
  uint64_t v4 = v1[30];
  uint64_t v6 = v1[28];
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))(*(void *)(v3 + 8)
                                                                                               + **(int **)(v3 + 8));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[5] = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #2 in ContinuationResultSetFlowProvider.executePatternForWindow(windowItems:paginationParameters:);
  uint64_t v8 = v0[4];
  return v10(v5, v4, v6, v8, v1 + 10, v2, v3);
}

uint64_t protocol witness for DetailedResultFlowProvider.makeSingleWindowFlow() in conformance DetailedResultProvider()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return DetailedResultProvider.makeSingleWindowFlow()();
}

uint64_t protocol witness for DetailedResultFlowProvider.makeWindowingFlowProvider() in conformance DetailedResultProvider(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[2] = a1;
  v4[3] = v1;
  v4[1] = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  return _swift_task_switch(DetailedResultProvider.makeWindowingFlowProvider(), 0, 0);
}

uint64_t protocol witness for ContinuationPromptFlowProvider.makeFinalWindowFlow(paginationParameters:windowContent:) in conformance DetailedResultProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return DetailedResultProvider.makeFinalWindowFlow(paginationParameters:windowContent:)(a1, v4, v5);
}

uint64_t protocol witness for WindowingFlowProvider.makeWindowFlow(paginationParameters:windowContent:) in conformance DetailedResultProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = protocol witness for PatternExecutorProtocol.execute(pattern:in:with:) in conformance PatternExecutor;
  return DetailedResultProvider.makeWindowFlow(paginationParameters:windowContent:)(a1, v4, v5);
}

uint64_t closure #1 in default argument 0 of SimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)()
{
  return OutputGenerationManifest.listenAfterSpeaking.setter();
}

uint64_t outlined init with copy of DetailedResultProvider(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in DetailedResultProvider.outputManifest.getter(uint64_t a1)
{
  return closure #1 in DetailedResultProvider.outputManifest.getter(a1, *(void *)(v1 + 16));
}

uint64_t sub_A4C8C()
{
  uint64_t v1 = type metadata accessor for WindowedPaginationParameters();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  unint64_t v5 = *(void *)(v0 + 144);
  if (v5 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v0 + 136), v5);
  }
  uint64_t v6 = (v3 + 280) & ~v3;
  __swift_destroy_boxed_opaque_existential_1(v0 + 152);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 200);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v6, v1);

  return _swift_deallocObject(v0, v6 + v4, v3 | 7);
}

uint64_t partial apply for closure #1 in DetailedResultProvider.makeWindowFlow(paginationParameters:windowContent:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for WindowedPaginationParameters() - 8);
  uint64_t v3 = v0 + 16;
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 272);
  uint64_t v6 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 280) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = partial apply for closure #1 in ContinuationResultSetFlowProvider.makeWindowFlow(paginationParameters:windowContent:);
  return closure #1 in DetailedResultProvider.makeWindowFlow(paginationParameters:windowContent:)(v3, v4, v5, v6);
}

uint64_t destroy for DetailedResultProvider(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  unint64_t v2 = *(void *)(a1 + 128);
  if (v2 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(a1 + 120), v2);
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + 136);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 184);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DetailedResultProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = a2 + 40;
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(a1 + 40, v6, v8);
  long long v10 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 80, a2 + 80);
  uint64_t v11 = (uint64_t *)(a2 + 120);
  unint64_t v12 = *(void *)(a2 + 128);
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v13 = *v11;
    outlined copy of Data._Representation(*v11, *(void *)(a2 + 128));
    *(void *)(a1 + 120) = v13;
    *(void *)(a1 + 128) = v12;
  }
  long long v14 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 160) = v14;
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 136, a2 + 136);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  long long v15 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 208) = v15;
  uint64_t v16 = v15;
  long long v17 = **(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
  swift_retain();
  v17(a1 + 184, a2 + 184, v16);
  long long v18 = *(void **)(a2 + 224);
  uint64_t v19 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = v18;
  *(void *)(a1 + 232) = v19;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  id v20 = v18;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DetailedResultProvider(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 5, a2 + 5);
  __swift_assign_boxed_opaque_existential_1(a1 + 10, a2 + 10);
  uint64_t v4 = a2 + 15;
  unint64_t v5 = a2[16];
  if (a1[16] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      outlined copy of Data._Representation(*v4, a2[16]);
      uint64_t v8 = a1[15];
      unint64_t v9 = a1[16];
      a1[15] = v7;
      a1[16] = v5;
      outlined consume of Data._Representation(v8, v9);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)(a1 + 15));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 15) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  outlined copy of Data._Representation(*v4, a2[16]);
  a1[15] = v6;
  a1[16] = v5;
LABEL_8:
  __swift_assign_boxed_opaque_existential_1(a1 + 17, a2 + 17);
  a1[22] = a2[22];
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 23, a2 + 23);
  long long v10 = (void *)a2[28];
  uint64_t v11 = (void *)a1[28];
  a1[28] = v10;
  id v12 = v10;

  a1[29] = a2[29];
  a1[30] = a2[30];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy248_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for DetailedResultProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  long long v7 = (void *)(a2 + 120);
  unint64_t v8 = *(void *)(a1 + 128);
  if (v8 >> 60 != 15)
  {
    unint64_t v9 = *(void *)(a2 + 128);
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *(void *)(a1 + 120);
      *(void *)(a1 + 120) = *v7;
      *(void *)(a1 + 128) = v9;
      outlined consume of Data._Representation(v10, v8);
      goto LABEL_6;
    }
    outlined destroy of Data(a1 + 120);
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)v7;
LABEL_6:
  __swift_destroy_boxed_opaque_existential_1(a1 + 136);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  uint64_t v11 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v11;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 184);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  uint64_t v12 = *(void *)(a2 + 224);
  long long v13 = *(void **)(a1 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v12;

  uint64_t v14 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DetailedResultProvider(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 248)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DetailedResultProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 248) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 248) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DetailedResultProvider()
{
  return &type metadata for DetailedResultProvider;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  long long v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              long long v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      long long v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *long long v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *long long v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  long long *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  long long v38[3];

  long long v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Decodable & Encodable & Sendable>);
  unint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v34 = v2;
  NSString v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    int64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      int64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        uint64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          long long v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            int64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = (long long *)(*(void *)(v5 + 56) + 48 * v17);
    if (v37)
    {
      outlined init with take of Decodable & Encodable & Sendable(v25, v38);
    }
    else
    {
      outlined init with copy of Decodable & Encodable & Sendable((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    char v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v29 = 0;
      BOOL v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          char v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    long long v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *long long v15 = v24;
    v15[1] = v23;
    uint64_t result = (uint64_t)outlined init with take of Decodable & Encodable & Sendable(v38, (_OWORD *)(*(void *)(v7 + 56) + 48 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  long long v3 = v34;
  unint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  int64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *long long v3 = v7;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  long long v26[3];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Decodable & Encodable & Sendable>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    outlined init with copy of Decodable & Encodable & Sendable(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Decodable & Encodable & Sendable(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #2 in DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:)(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = protocol witness for Flow.execute() in conformance InformationRoutingFlow;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return _swift_task_switch(closure #2 in DetailedResultProvider.executePatternForWindow(windowContent:paginationParameters:), 0, 0);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  outlined init with copy of Any((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;

  return swift_bridgeObjectRetain();
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  uint64_t *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (key: String, value: Any)?((uint64_t)&v23, (uint64_t)v22);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for (key: String, value: Any));
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t outlined init with take of (key: String, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Decodable & Encodable & Sendable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

const char *LoggingConstants.defaultTaskName.unsafeMutableAddressor()
{
  return "CurrentTask";
}

const char *LoggingConstants.defaultParameterValue.unsafeMutableAddressor()
{
  return "not_applicable";
}

void *LoggingConstants.empty.unsafeMutableAddressor()
{
  return &static LoggingConstants.empty;
}

const char *LoggingConstants.none.unsafeMutableAddressor()
{
  return "none";
}

ValueMetadata *type metadata accessor for LoggingConstants()
{
  return &type metadata for LoggingConstants;
}

uint64_t static PatternFlowProvidingHelper.unwrap(_:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  outlined init with copy of PatternFlowProviding?(a1, (uint64_t)&v9);
  if (v10)
  {
    outlined init with take of PatternFlowProviding(&v9, (uint64_t)v12);
    return outlined init with take of PatternFlowProviding(v12, (uint64_t)a3);
  }
  else
  {
    outlined destroy of PatternFlowProviding?((uint64_t)&v9);
    outlined init with copy of OutputPublisherAsync(a2, (uint64_t)v12);
    uint64_t v6 = type metadata accessor for ResponseFactory();
    swift_allocObject();
    uint64_t v7 = ResponseFactory.init()();
    uint64_t v10 = v6;
    uint64_t v11 = &protocol witness table for ResponseFactory;
    *(void *)&long long v9 = v7;
    uint64_t v8 = type metadata accessor for PatternFlowProvider();
    swift_allocObject();
    uint64_t result = PatternFlowProvider.init(outputPublisher:responseGenerator:)();
    a3[3] = v8;
    a3[4] = (uint64_t)&protocol witness table for PatternFlowProvider;
    *a3 = result;
  }
  return result;
}

uint64_t outlined init with copy of PatternFlowProviding?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PatternFlowProviding?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for PatternFlowProvidingHelper()
{
  return &type metadata for PatternFlowProvidingHelper;
}

uint64_t static CharacterSet.whitespaces.getter()
{
  return static CharacterSet.whitespaces.getter();
}

uint64_t type metadata accessor for CharacterSet()
{
  return type metadata accessor for CharacterSet();
}

uint64_t URLQueryItem.init(name:value:)()
{
  return URLQueryItem.init(name:value:)();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return type metadata accessor for URLQueryItem();
}

uint64_t URLComponents.queryItems.setter()
{
  return URLComponents.queryItems.setter();
}

uint64_t URLComponents.url.getter()
{
  return URLComponents.url.getter();
}

uint64_t URLComponents.host.setter()
{
  return URLComponents.host.setter();
}

uint64_t URLComponents.path.setter()
{
  return URLComponents.path.setter();
}

uint64_t URLComponents.scheme.setter()
{
  return URLComponents.scheme.setter();
}

uint64_t URLComponents.init()()
{
  return URLComponents.init()();
}

uint64_t type metadata accessor for URLComponents()
{
  return type metadata accessor for URLComponents();
}

NSPersonNameComponents __swiftcall PersonNameComponents._bridgeToObjectiveC()()
{
  uint64_t v0 = (objc_class *)PersonNameComponents._bridgeToObjectiveC()();
  result._private = v1;
  result.super.Class isa = v0;
  return result;
}

uint64_t type metadata accessor for PersonNameComponents()
{
  return type metadata accessor for PersonNameComponents();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.scheme.getter()
{
  return URL.scheme.getter();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(base64Encoded:options:)()
{
  return Data.init(base64Encoded:options:)();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t Locale.init(identifier:)()
{
  return Locale.init(identifier:)();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)Locale._bridgeToObjectiveC()();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

NSTimeZone __swiftcall TimeZone._bridgeToObjectiveC()()
{
  return (NSTimeZone)TimeZone._bridgeToObjectiveC()();
}

uint64_t static TimeZone.current.getter()
{
  return static TimeZone.current.getter();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t type metadata accessor for Apple_Parsec_Search_PegasusQueryContext()
{
  return type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet()
{
  return type metadata accessor for Apple_Parsec_Siri_Legacy_LegacySnippet.OneOf_Snippet();
}

uint64_t Apple_Parsec_Siri_Legacy_LegacySnippet.snippet.getter()
{
  return Apple_Parsec_Siri_Legacy_LegacySnippet.snippet.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Legacy_LegacySnippet()
{
  return type metadata accessor for Apple_Parsec_Siri_Legacy_LegacySnippet();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter()
{
  return Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter()
{
  return Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter()
{
  return Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.uniqueID.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.setter()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.setter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.modify()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.modify();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverUnderstanding.getter()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverUnderstanding.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.clientDrivenExperience.getter()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.clientDrivenExperience.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.setter()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.setter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.setter()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.setter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.setter()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.setter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.modify()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.modify();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.setter()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.setter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
}

uint64_t Apple_Parsec_Siri_V2alpha_SetSiriAuthorizationForAppBuilderParams.appBundleID.getter()
{
  return Apple_Parsec_Siri_V2alpha_SetSiriAuthorizationForAppBuilderParams.appBundleID.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SetSiriAuthorizationForAppBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_SetSiriAuthorizationForAppBuilderParams();
}

uint64_t type metadata accessor for Tvpb_CoverArt.AspectRatio()
{
  return type metadata accessor for Tvpb_CoverArt.AspectRatio();
}

uint64_t Tvpb_CoverArt.type.getter()
{
  return Tvpb_CoverArt.type.getter();
}

uint64_t type metadata accessor for Tvpb_CoverArt()
{
  return type metadata accessor for Tvpb_CoverArt();
}

uint64_t type metadata accessor for Typespb_Domain()
{
  return type metadata accessor for Typespb_Domain();
}

uint64_t type metadata accessor for Moviespb_CoverArt.AspectRatio()
{
  return type metadata accessor for Moviespb_CoverArt.AspectRatio();
}

uint64_t Moviespb_CoverArt.type.getter()
{
  return Moviespb_CoverArt.type.getter();
}

uint64_t type metadata accessor for Moviespb_CoverArt()
{
  return type metadata accessor for Moviespb_CoverArt();
}

uint64_t Searchfoundation_Card.cardSections.getter()
{
  return Searchfoundation_Card.cardSections.getter();
}

uint64_t Searchfoundation_Card.cardSections.setter()
{
  return Searchfoundation_Card.cardSections.setter();
}

uint64_t Searchfoundation_Card.backgroundColor.getter()
{
  return Searchfoundation_Card.backgroundColor.getter();
}

uint64_t Searchfoundation_Card.backgroundColor.setter()
{
  return Searchfoundation_Card.backgroundColor.setter();
}

uint64_t Searchfoundation_Card.backgroundImage.getter()
{
  return Searchfoundation_Card.backgroundImage.getter();
}

uint64_t Searchfoundation_Card.backgroundImage.setter()
{
  return Searchfoundation_Card.backgroundImage.setter();
}

uint64_t Searchfoundation_Card.intentMessageData.setter()
{
  return Searchfoundation_Card.intentMessageData.setter();
}

uint64_t Searchfoundation_Card.intentMessageName.setter()
{
  return Searchfoundation_Card.intentMessageName.setter();
}

uint64_t Searchfoundation_Card.hasBackgroundColor.getter()
{
  return Searchfoundation_Card.hasBackgroundColor.getter();
}

uint64_t Searchfoundation_Card.hasBackgroundImage.getter()
{
  return Searchfoundation_Card.hasBackgroundImage.getter();
}

uint64_t Searchfoundation_Card.intentResponseMessageData.setter()
{
  return Searchfoundation_Card.intentResponseMessageData.setter();
}

uint64_t Searchfoundation_Card.intentResponseMessageName.setter()
{
  return Searchfoundation_Card.intentResponseMessageName.setter();
}

uint64_t Searchfoundation_Card.fbr.getter()
{
  return Searchfoundation_Card.fbr.getter();
}

uint64_t Searchfoundation_Card.fbr.setter()
{
  return Searchfoundation_Card.fbr.setter();
}

uint64_t Searchfoundation_Card.source.setter()
{
  return Searchfoundation_Card.source.setter();
}

uint64_t type metadata accessor for Searchfoundation_Card()
{
  return type metadata accessor for Searchfoundation_Card();
}

uint64_t type metadata accessor for Searchfoundation_Color()
{
  return type metadata accessor for Searchfoundation_Color();
}

uint64_t type metadata accessor for Searchfoundation_Image()
{
  return type metadata accessor for Searchfoundation_Image();
}

uint64_t type metadata accessor for Searchfoundation_CardSource()
{
  return type metadata accessor for Searchfoundation_CardSource();
}

uint64_t type metadata accessor for Searchfoundation_CardSection()
{
  return type metadata accessor for Searchfoundation_CardSection();
}

uint64_t Apple_Parsec_Siri_V2alpha_Sash.appID.getter()
{
  return Apple_Parsec_Siri_V2alpha_Sash.appID.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_Sash.appName.getter()
{
  return Apple_Parsec_Siri_V2alpha_Sash.appName.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_Sash()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_Sash();
}

uint64_t Searchfoundation_GraphicalFloat.doubleValue.setter()
{
  return Searchfoundation_GraphicalFloat.doubleValue.setter();
}

uint64_t type metadata accessor for Searchfoundation_GraphicalFloat()
{
  return type metadata accessor for Searchfoundation_GraphicalFloat();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod()
{
  return type metadata accessor for Apple_Parsec_Siri_Legacy_PodView.OneOf_Pod();
}

uint64_t Apple_Parsec_Siri_Legacy_PodView.pod.getter()
{
  return Apple_Parsec_Siri_Legacy_PodView.pod.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Legacy_PodView()
{
  return type metadata accessor for Apple_Parsec_Siri_Legacy_PodView();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.familyName.getter()
{
  return Apple_Parsec_Siri_V2alpha_Person.familyName.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.middleName.getter()
{
  return Apple_Parsec_Siri_V2alpha_Person.middleName.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.contactIdentifier.getter()
{
  return Apple_Parsec_Siri_V2alpha_Person.contactIdentifier.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.fullName.getter()
{
  return Apple_Parsec_Siri_V2alpha_Person.fullName.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.nickname.getter()
{
  return Apple_Parsec_Siri_V2alpha_Person.nickname.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.addresses.getter()
{
  return Apple_Parsec_Siri_V2alpha_Person.addresses.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.givenName.getter()
{
  return Apple_Parsec_Siri_V2alpha_Person.givenName.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_Person()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_Person();
}

uint64_t Apple_Parsec_Siri_Legacy_ImagePod.images.getter()
{
  return Apple_Parsec_Siri_Legacy_ImagePod.images.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Legacy_ImagePod()
{
  return type metadata accessor for Apple_Parsec_Siri_Legacy_ImagePod();
}

uint64_t Apple_Parsec_Siri_Legacy_PunchOut.punchOutUri.getter()
{
  return Apple_Parsec_Siri_Legacy_PunchOut.punchOutUri.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_PunchOut.appStoreUri.getter()
{
  return Apple_Parsec_Siri_Legacy_PunchOut.appStoreUri.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_PunchOut.appDisplayName.getter()
{
  return Apple_Parsec_Siri_Legacy_PunchOut.appDisplayName.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_PunchOut.bundleID.getter()
{
  return Apple_Parsec_Siri_Legacy_PunchOut.bundleID.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_PunchOut.subtitle.getter()
{
  return Apple_Parsec_Siri_Legacy_PunchOut.subtitle.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Legacy_PunchOut()
{
  return type metadata accessor for Apple_Parsec_Siri_Legacy_PunchOut();
}

uint64_t Apple_Parsec_Siri_V2alpha_TvObject.canonicalID.getter()
{
  return Apple_Parsec_Siri_V2alpha_TvObject.canonicalID.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_TvObject.contentRatingValue.getter()
{
  return Apple_Parsec_Siri_V2alpha_TvObject.contentRatingValue.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_TvObject.contentRatingSystem.getter()
{
  return Apple_Parsec_Siri_V2alpha_TvObject.contentRatingSystem.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_TvObject.url.getter()
{
  return Apple_Parsec_Siri_V2alpha_TvObject.url.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_TvObject.title.getter()
{
  return Apple_Parsec_Siri_V2alpha_TvObject.title.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_TvObject.coverArt.getter()
{
  return Apple_Parsec_Siri_V2alpha_TvObject.coverArt.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_TvObject()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_TvObject();
}

uint64_t Apple_Parsec_Siri_Legacy_SummaryPod.imageResource.getter()
{
  return Apple_Parsec_Siri_Legacy_SummaryPod.imageResource.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_SummaryPod.hasImageResource.getter()
{
  return Apple_Parsec_Siri_Legacy_SummaryPod.hasImageResource.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_SummaryPod.text.getter()
{
  return Apple_Parsec_Siri_Legacy_SummaryPod.text.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_SummaryPod.title.getter()
{
  return Apple_Parsec_Siri_Legacy_SummaryPod.title.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_SummaryPod.caption.getter()
{
  return Apple_Parsec_Siri_Legacy_SummaryPod.caption.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Legacy_SummaryPod()
{
  return type metadata accessor for Apple_Parsec_Siri_Legacy_SummaryPod();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioData.audioBuffer.getter()
{
  return Apple_Parsec_Siri_V2alpha_AudioData.audioBuffer.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioData.playerStreamDescription.getter()
{
  return Apple_Parsec_Siri_V2alpha_AudioData.playerStreamDescription.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioData.decoderStreamDescription.getter()
{
  return Apple_Parsec_Siri_V2alpha_AudioData.decoderStreamDescription.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioData.hasPlayerStreamDescription.getter()
{
  return Apple_Parsec_Siri_V2alpha_AudioData.hasPlayerStreamDescription.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioData.hasDecoderStreamDescription.getter()
{
  return Apple_Parsec_Siri_V2alpha_AudioData.hasDecoderStreamDescription.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioData()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioData();
}

uint64_t Apple_Parsec_Siri_Legacy_AppPunchOut.punchOutUri.getter()
{
  return Apple_Parsec_Siri_Legacy_AppPunchOut.punchOutUri.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_AppPunchOut.punchOutName.getter()
{
  return Apple_Parsec_Siri_Legacy_AppPunchOut.punchOutName.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_AppPunchOut.appIconMap.getter()
{
  return Apple_Parsec_Siri_Legacy_AppPunchOut.appIconMap.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_AppPunchOut.appStoreUri.getter()
{
  return Apple_Parsec_Siri_Legacy_AppPunchOut.appStoreUri.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_AppPunchOut.appInstalled.getter()
{
  return Apple_Parsec_Siri_Legacy_AppPunchOut.appInstalled.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_AppPunchOut.appDisplayName.getter()
{
  return Apple_Parsec_Siri_Legacy_AppPunchOut.appDisplayName.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_AppPunchOut.appAvailableStorefront.getter()
{
  return Apple_Parsec_Siri_Legacy_AppPunchOut.appAvailableStorefront.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_AppPunchOut.appIcon.getter()
{
  return Apple_Parsec_Siri_Legacy_AppPunchOut.appIcon.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_AppPunchOut.bundleID.getter()
{
  return Apple_Parsec_Siri_Legacy_AppPunchOut.bundleID.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_AppPunchOut.subtitle.getter()
{
  return Apple_Parsec_Siri_Legacy_AppPunchOut.subtitle.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Legacy_AppPunchOut()
{
  return type metadata accessor for Apple_Parsec_Siri_Legacy_AppPunchOut();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_UIItemType()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_UIItemType();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_InputOrigin()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_InputOrigin();
}

uint64_t Apple_Parsec_Siri_V2alpha_MovieObject.canonicalID.getter()
{
  return Apple_Parsec_Siri_V2alpha_MovieObject.canonicalID.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_MovieObject.contentRatingValue.getter()
{
  return Apple_Parsec_Siri_V2alpha_MovieObject.contentRatingValue.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_MovieObject.contentRatingSystem.getter()
{
  return Apple_Parsec_Siri_V2alpha_MovieObject.contentRatingSystem.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_MovieObject.url.getter()
{
  return Apple_Parsec_Siri_V2alpha_MovieObject.url.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_MovieObject.titles.getter()
{
  return Apple_Parsec_Siri_V2alpha_MovieObject.titles.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_MovieObject.coverArt.getter()
{
  return Apple_Parsec_Siri_V2alpha_MovieObject.coverArt.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_MovieObject()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_MovieObject();
}

uint64_t Apple_Parsec_Siri_Context_ResultEntity.usoEntity.getter()
{
  return Apple_Parsec_Siri_Context_ResultEntity.usoEntity.getter();
}

uint64_t Apple_Parsec_Siri_Context_ResultEntity.groupSequenceNumber.getter()
{
  return Apple_Parsec_Siri_Context_ResultEntity.groupSequenceNumber.getter();
}

uint64_t Apple_Parsec_Siri_Context_ResultEntity.id.getter()
{
  return Apple_Parsec_Siri_Context_ResultEntity.id.getter();
}

uint64_t Apple_Parsec_Siri_Context_ResultEntity.name.getter()
{
  return Apple_Parsec_Siri_Context_ResultEntity.name.getter();
}

uint64_t Apple_Parsec_Siri_Context_ResultEntity.domain.getter()
{
  return Apple_Parsec_Siri_Context_ResultEntity.domain.getter();
}

uint64_t Apple_Parsec_Siri_Context_ResultEntity.groupID.getter()
{
  return Apple_Parsec_Siri_Context_ResultEntity.groupID.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity()
{
  return type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
}

uint64_t Apple_Parsec_Siri_Legacy_ImageResource.pixelWidth.getter()
{
  return Apple_Parsec_Siri_Legacy_ImageResource.pixelWidth.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_ImageResource.pixelHeight.getter()
{
  return Apple_Parsec_Siri_Legacy_ImageResource.pixelHeight.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_ImageResource.resourceURL.getter()
{
  return Apple_Parsec_Siri_Legacy_ImageResource.resourceURL.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_ImageResource.scaleFactor.getter()
{
  return Apple_Parsec_Siri_Legacy_ImageResource.scaleFactor.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_ImageResource.urlFormatString.getter()
{
  return Apple_Parsec_Siri_Legacy_ImageResource.urlFormatString.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_ImageResource.imageData.getter()
{
  return Apple_Parsec_Siri_Legacy_ImageResource.imageData.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_ImageResource.userAgent.getter()
{
  return Apple_Parsec_Siri_Legacy_ImageResource.userAgent.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource()
{
  return type metadata accessor for Apple_Parsec_Siri_Legacy_ImageResource();
}

uint64_t Apple_Parsec_Siri_V2alpha_CasinoSnippet.hasCardData.getter()
{
  return Apple_Parsec_Siri_V2alpha_CasinoSnippet.hasCardData.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_CasinoSnippet.responseViewID.getter()
{
  return Apple_Parsec_Siri_V2alpha_CasinoSnippet.responseViewID.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_CasinoSnippet.cardData.getter()
{
  return Apple_Parsec_Siri_V2alpha_CasinoSnippet.cardData.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_CasinoSnippet();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_PersonSnippet.PersonProperty();
}

uint64_t Apple_Parsec_Siri_V2alpha_PersonSnippet.displayProperties.getter()
{
  return Apple_Parsec_Siri_V2alpha_PersonSnippet.displayProperties.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_PersonSnippet.objects.getter()
{
  return Apple_Parsec_Siri_V2alpha_PersonSnippet.objects.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_PersonSnippet()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_PersonSnippet();
}

uint64_t Apple_Parsec_Siri_V2alpha_ContactAddress.countryCode.getter()
{
  return Apple_Parsec_Siri_V2alpha_ContactAddress.countryCode.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ContactAddress.addressLabel.getter()
{
  return Apple_Parsec_Siri_V2alpha_ContactAddress.addressLabel.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ContactAddress.city.getter()
{
  return Apple_Parsec_Siri_V2alpha_ContactAddress.city.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ContactAddress.state.getter()
{
  return Apple_Parsec_Siri_V2alpha_ContactAddress.state.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ContactAddress.street.getter()
{
  return Apple_Parsec_Siri_V2alpha_ContactAddress.street.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ContactAddress.zipCode.getter()
{
  return Apple_Parsec_Siri_V2alpha_ContactAddress.zipCode.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ContactAddress()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_ContactAddress();
}

uint64_t Apple_Parsec_Siri_V2alpha_MapItemSnippet.responseViewID.getter()
{
  return Apple_Parsec_Siri_V2alpha_MapItemSnippet.responseViewID.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_MapItemSnippet.searchRegionCenter.getter()
{
  return Apple_Parsec_Siri_V2alpha_MapItemSnippet.searchRegionCenter.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_MapItemSnippet.objects.getter()
{
  return Apple_Parsec_Siri_V2alpha_MapItemSnippet.objects.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemSnippet()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemSnippet();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItComponent.isRepeatable.getter()
{
  return Apple_Parsec_Siri_V2alpha_SayItComponent.isRepeatable.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItComponent.dialogIdentifier.getter()
{
  return Apple_Parsec_Siri_V2alpha_SayItComponent.dialogIdentifier.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItComponent.hasListenAfterSpeaking_p.getter()
{
  return Apple_Parsec_Siri_V2alpha_SayItComponent.hasListenAfterSpeaking_p.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItComponent.message.getter()
{
  return Apple_Parsec_Siri_V2alpha_SayItComponent.message.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItComponent();
}

uint64_t Searchfoundation_DynamicURLImageResource.pixelWidth.setter()
{
  return Searchfoundation_DynamicURLImageResource.pixelWidth.setter();
}

uint64_t Searchfoundation_DynamicURLImageResource.pixelHeight.setter()
{
  return Searchfoundation_DynamicURLImageResource.pixelHeight.setter();
}

uint64_t Searchfoundation_DynamicURLImageResource.supportsResizing.setter()
{
  return Searchfoundation_DynamicURLImageResource.supportsResizing.setter();
}

uint64_t Searchfoundation_DynamicURLImageResource.formatURL.setter()
{
  return Searchfoundation_DynamicURLImageResource.formatURL.setter();
}

uint64_t type metadata accessor for Searchfoundation_DynamicURLImageResource()
{
  return type metadata accessor for Searchfoundation_DynamicURLImageResource();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter()
{
  return Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject.OneOf_Object();
}

uint64_t Apple_Parsec_Siri_V2alpha_TvOrMovieObject.machineUtterance.getter()
{
  return Apple_Parsec_Siri_V2alpha_TvOrMovieObject.machineUtterance.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_TvOrMovieObject.contentRowDescriptionData.getter()
{
  return Apple_Parsec_Siri_V2alpha_TvOrMovieObject.contentRowDescriptionData.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter()
{
  return Apple_Parsec_Siri_V2alpha_TvOrMovieObject.object.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_TvOrMovieObject();
}

uint64_t Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.hasImageResource.getter()
{
  return Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.hasImageResource.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.hasPunchOut.getter()
{
  return Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.hasPunchOut.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.imageResource.getter()
{
  return Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.imageResource.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.punchOut.getter()
{
  return Apple_Parsec_Siri_Legacy_ImageLinkedAnswer.punchOut.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Legacy_ImageLinkedAnswer()
{
  return type metadata accessor for Apple_Parsec_Siri_Legacy_ImageLinkedAnswer();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioDescription.sampleRate.getter()
{
  return Apple_Parsec_Siri_V2alpha_AudioDescription.sampleRate.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioDescription.formatFlags.getter()
{
  return Apple_Parsec_Siri_V2alpha_AudioDescription.formatFlags.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioDescription.bytesPerFrame.getter()
{
  return Apple_Parsec_Siri_V2alpha_AudioDescription.bytesPerFrame.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioDescription.bitsPerChannel.getter()
{
  return Apple_Parsec_Siri_V2alpha_AudioDescription.bitsPerChannel.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioDescription.bytesPerPacket.getter()
{
  return Apple_Parsec_Siri_V2alpha_AudioDescription.bytesPerPacket.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioDescription.framesPerPacket.getter()
{
  return Apple_Parsec_Siri_V2alpha_AudioDescription.framesPerPacket.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioDescription.channelsPerFrame.getter()
{
  return Apple_Parsec_Siri_V2alpha_AudioDescription.channelsPerFrame.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioDescription.formatID.getter()
{
  return Apple_Parsec_Siri_V2alpha_AudioDescription.formatID.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioDescription.reserved.getter()
{
  return Apple_Parsec_Siri_V2alpha_AudioDescription.reserved.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDescription()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDescription();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerSuggestion.alternateQuerySuggestion.getter()
{
  return Apple_Parsec_Siri_V2alpha_ServerSuggestion.alternateQuerySuggestion.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter()
{
  return Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.setter()
{
  return Apple_Parsec_Siri_V2alpha_ServerSuggestion.candidates.setter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerSuggestion.currentIntent.getter()
{
  return Apple_Parsec_Siri_V2alpha_ServerSuggestion.currentIntent.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
}

uint64_t Apple_Parsec_Siri_V2alpha_SingleExperience.components.getter()
{
  return Apple_Parsec_Siri_V2alpha_SingleExperience.components.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SuggestionIntent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_SuggestionIntent();
}

uint64_t Apple_Parsec_Responseframework_PatternModel.patternBundleID.getter()
{
  return Apple_Parsec_Responseframework_PatternModel.patternBundleID.getter();
}

uint64_t Apple_Parsec_Responseframework_PatternModel.patternParameters.getter()
{
  return Apple_Parsec_Responseframework_PatternModel.patternParameters.getter();
}

uint64_t Apple_Parsec_Responseframework_PatternModel.patternID.getter()
{
  return Apple_Parsec_Responseframework_PatternModel.patternID.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Responseframework_PatternModel()
{
  return type metadata accessor for Apple_Parsec_Responseframework_PatternModel();
}

uint64_t Apple_Parsec_Siri_V2alpha_CatDialogComponent.catID.getter()
{
  return Apple_Parsec_Siri_V2alpha_CatDialogComponent.catID.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_CatDialogComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_CatDialogComponent();
}

uint64_t Apple_Parsec_Siri_V2alpha_GeoObjectComponent.geoObject.getter()
{
  return Apple_Parsec_Siri_V2alpha_GeoObjectComponent.geoObject.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoObjectComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoObjectComponent();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.audioDataURL.getter()
{
  return Apple_Parsec_Siri_V2alpha_SayItBuilderParams.audioDataURL.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasAudioData.getter()
{
  return Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasAudioData.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.isRepeatable.getter()
{
  return Apple_Parsec_Siri_V2alpha_SayItBuilderParams.isRepeatable.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.isRepeatable.setter()
{
  return Apple_Parsec_Siri_V2alpha_SayItBuilderParams.isRepeatable.setter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.dialogIdentifier.getter()
{
  return Apple_Parsec_Siri_V2alpha_SayItBuilderParams.dialogIdentifier.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.dialogIdentifier.setter()
{
  return Apple_Parsec_Siri_V2alpha_SayItBuilderParams.dialogIdentifier.setter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasListenAfterSpeaking_p.getter()
{
  return Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasListenAfterSpeaking_p.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasListenAfterSpeaking_p.setter()
{
  return Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasListenAfterSpeaking_p.setter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.message.getter()
{
  return Apple_Parsec_Siri_V2alpha_SayItBuilderParams.message.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.message.setter()
{
  return Apple_Parsec_Siri_V2alpha_SayItBuilderParams.message.setter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.audioData.getter()
{
  return Apple_Parsec_Siri_V2alpha_SayItBuilderParams.audioData.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.init()()
{
  return Apple_Parsec_Siri_V2alpha_SayItBuilderParams.init()();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams();
}

uint64_t Apple_Parsec_Siri_V2alpha_ButtonViewComponent.text.getter()
{
  return Apple_Parsec_Siri_V2alpha_ButtonViewComponent.text.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ButtonViewComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_ButtonViewComponent();
}

uint64_t Apple_Parsec_Siri_V2alpha_ExperienceComponent.domainObjectComponent.getter()
{
  return Apple_Parsec_Siri_V2alpha_ExperienceComponent.domainObjectComponent.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter()
{
  return Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
}

uint64_t Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter()
{
  return Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ExperienceComponent.catDialog.getter()
{
  return Apple_Parsec_Siri_V2alpha_ExperienceComponent.catDialog.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter()
{
  return Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogAct.getter()
{
  return Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogAct.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter()
{
  return Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerUnderstanding()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerUnderstanding();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.DetailType();
}

uint64_t Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.detailType.getter()
{
  return Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.detailType.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.spokenName.getter()
{
  return Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.spokenName.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.directionRole.getter()
{
  return Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.directionRole.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.Role();
}

uint64_t Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.label.getter()
{
  return Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.label.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.location.getter()
{
  return Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.location.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.placeData.getter()
{
  return Apple_Parsec_Siri_V2alpha_MapItemBuilderParams.placeData.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemBuilderParams();
}

uint64_t Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.pushOffMessageCatID.getter()
{
  return Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.pushOffMessageCatID.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.pushOffMessage.getter()
{
  return Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.pushOffMessage.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.companionUnavailableMessage.getter()
{
  return Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.companionUnavailableMessage.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.companionUnavailableMessageCatID.getter()
{
  return Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.companionUnavailableMessageCatID.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.query.getter()
{
  return Apple_Parsec_Siri_V2alpha_PushOffBuilderParams.query.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_PushOffBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_PushOffBuilderParams();
}

uint64_t Apple_Parsec_Siri_V2alpha_VideoObjectComponent.tvOrMovieObject.getter()
{
  return Apple_Parsec_Siri_V2alpha_VideoObjectComponent.tvOrMovieObject.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoObjectComponent.VideoUseCase()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoObjectComponent.VideoUseCase();
}

uint64_t Apple_Parsec_Siri_V2alpha_VideoObjectComponent.videoUseCase.getter()
{
  return Apple_Parsec_Siri_V2alpha_VideoObjectComponent.videoUseCase.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_VideoObjectComponent.relativeUtsSearchURL.getter()
{
  return Apple_Parsec_Siri_V2alpha_VideoObjectComponent.relativeUtsSearchURL.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoObjectComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoObjectComponent();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent();
}

uint64_t Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter()
{
  return Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter()
{
  return Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent.OneOf_Component();
}

uint64_t Apple_Parsec_Siri_V2alpha_DomainObjectComponent.geoObjects.getter()
{
  return Apple_Parsec_Siri_V2alpha_DomainObjectComponent.geoObjects.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_DomainObjectComponent.component.getter()
{
  return Apple_Parsec_Siri_V2alpha_DomainObjectComponent.component.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainObjectComponent();
}

uint64_t Apple_Parsec_Siri_V2alpha_LocationBuilderParams.postalCode.getter()
{
  return Apple_Parsec_Siri_V2alpha_LocationBuilderParams.postalCode.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_LocationBuilderParams.timezoneID.getter()
{
  return Apple_Parsec_Siri_V2alpha_LocationBuilderParams.timezoneID.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_LocationBuilderParams.countryCode.getter()
{
  return Apple_Parsec_Siri_V2alpha_LocationBuilderParams.countryCode.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_LocationBuilderParams.thoroughfare.getter()
{
  return Apple_Parsec_Siri_V2alpha_LocationBuilderParams.thoroughfare.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_LocationBuilderParams.subThoroughfare.getter()
{
  return Apple_Parsec_Siri_V2alpha_LocationBuilderParams.subThoroughfare.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_LocationBuilderParams.city.getter()
{
  return Apple_Parsec_Siri_V2alpha_LocationBuilderParams.city.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_LocationBuilderParams.label.getter()
{
  return Apple_Parsec_Siri_V2alpha_LocationBuilderParams.label.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_LocationBuilderParams.street.getter()
{
  return Apple_Parsec_Siri_V2alpha_LocationBuilderParams.street.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_LocationBuilderParams.latitude.getter()
{
  return Apple_Parsec_Siri_V2alpha_LocationBuilderParams.latitude.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_LocationBuilderParams.longitude.getter()
{
  return Apple_Parsec_Siri_V2alpha_LocationBuilderParams.longitude.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_LocationBuilderParams.stateCode.getter()
{
  return Apple_Parsec_Siri_V2alpha_LocationBuilderParams.stateCode.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams();
}

uint64_t Apple_Parsec_Siri_V2alpha_OpenLinkBuilderParams.ref.getter()
{
  return Apple_Parsec_Siri_V2alpha_OpenLinkBuilderParams.ref.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_OpenLinkBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_OpenLinkBuilderParams();
}

uint64_t Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.appPunchOut.getter()
{
  return Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.appPunchOut.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.hasAppPunchOut.getter()
{
  return Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.hasAppPunchOut.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.pods.getter()
{
  return Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.pods.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.title.getter()
{
  return Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.title.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.category.getter()
{
  return Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.category.getter();
}

uint64_t Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.subtitle.getter()
{
  return Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet.subtitle.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet()
{
  return type metadata accessor for Apple_Parsec_Siri_Legacy_GeneralKnowledgeSnippet();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientDrivenExperience.components.getter()
{
  return Apple_Parsec_Siri_V2alpha_ClientDrivenExperience.components.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
}

uint64_t Apple_Parsec_Siri_V2alpha_DelayedActionComponent.renderedDialog.getter()
{
  return Apple_Parsec_Siri_V2alpha_DelayedActionComponent.renderedDialog.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_DelayedActionComponent.delayMilliseconds.getter()
{
  return Apple_Parsec_Siri_V2alpha_DelayedActionComponent.delayMilliseconds.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_DelayedActionComponent.hasRenderedDialog.getter()
{
  return Apple_Parsec_Siri_V2alpha_DelayedActionComponent.hasRenderedDialog.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_DelayedActionComponent.layoutExperiences.getter()
{
  return Apple_Parsec_Siri_V2alpha_DelayedActionComponent.layoutExperiences.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter()
{
  return Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
}

uint64_t Apple_Parsec_Siri_V2alpha_DisambiguationListItem.selectionText.getter()
{
  return Apple_Parsec_Siri_V2alpha_DisambiguationListItem.selectionText.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_DisambiguationListItem.title.getter()
{
  return Apple_Parsec_Siri_V2alpha_DisambiguationListItem.title.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_DisambiguationListItem.object.getter()
{
  return Apple_Parsec_Siri_V2alpha_DisambiguationListItem.object.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_DisambiguationListItem.commands.getter()
{
  return Apple_Parsec_Siri_V2alpha_DisambiguationListItem.commands.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListItem()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListItem();
}

uint64_t Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.hasCompactSnippet.getter()
{
  return Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.hasCompactSnippet.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.compactSnippet.getter()
{
  return Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.compactSnippet.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.perResultLayoutDetails.getter()
{
  return Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.perResultLayoutDetails.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.uiItemType.getter()
{
  return Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.uiItemType.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.sash.getter()
{
  return Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.sash.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.OneOf_Snippet();
}

uint64_t Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.casinoSnippet.getter()
{
  return Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.casinoSnippet.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter()
{
  return Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails.snippet.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_PerResultLayoutDetails();
}

uint64_t Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.phoneNumber.getter()
{
  return Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.phoneNumber.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.name.getter()
{
  return Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.name.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.isImmersiveExperience.getter()
{
  return Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.isImmersiveExperience.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter()
{
  return Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.components.getter()
{
  return Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.components.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.components.setter()
{
  return Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.components.setter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.alternateExperiences.getter()
{
  return Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.alternateExperiences.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
}

uint64_t type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context()
{
  return type metadata accessor for Apple_Parsec_Responseframework_Engagement_Context();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.forcePrintDialog.getter()
{
  return Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.forcePrintDialog.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.spokenOnly.getter()
{
  return Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.spokenOnly.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catCategory.getter()
{
  return Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catCategory.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.redactedPrint.getter()
{
  return Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.redactedPrint.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.redactedSpeak.getter()
{
  return Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.redactedSpeak.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.listenAfterSpeaking.getter()
{
  return Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.listenAfterSpeaking.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.isApprovedForGrading.getter()
{
  return Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.isApprovedForGrading.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter()
{
  return Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.print.getter()
{
  return Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.print.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.speak.getter()
{
  return Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.speak.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
}

uint64_t Apple_Parsec_Siri_V2alpha_SearchMarketplaceParams.marketplace.getter()
{
  return Apple_Parsec_Siri_V2alpha_SearchMarketplaceParams.marketplace.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_SearchMarketplaceParams.keyword.getter()
{
  return Apple_Parsec_Siri_V2alpha_SearchMarketplaceParams.keyword.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SearchMarketplaceParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_SearchMarketplaceParams();
}

uint64_t Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion.candidates.getter()
{
  return Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion.candidates.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.punchOutUri.getter()
{
  return Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.punchOutUri.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.appDisplayName.getter()
{
  return Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.appDisplayName.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter()
{
  return Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams();
}

uint64_t Apple_Parsec_Siri_V2alpha_DirectExecutionComponent.siriCommandBuilder.getter()
{
  return Apple_Parsec_Siri_V2alpha_DirectExecutionComponent.siriCommandBuilder.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_DirectExecutionComponent();
}

uint64_t Apple_Parsec_Siri_V2alpha_MapItemListBuilderParams.selectedItemIndex.getter()
{
  return Apple_Parsec_Siri_V2alpha_MapItemListBuilderParams.selectedItemIndex.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_MapItemListBuilderParams.domainObjects.getter()
{
  return Apple_Parsec_Siri_V2alpha_MapItemListBuilderParams.domainObjects.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemListBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_MapItemListBuilderParams();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.intent.getter()
{
  return Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.intent.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.utterance.getter()
{
  return Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate.utterance.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionCandidate();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance.print.getter()
{
  return Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance.print.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance();
}

uint64_t Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams.inputOrigin.getter()
{
  return Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams.inputOrigin.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams.eyesFree.getter()
{
  return Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams.eyesFree.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams.utterance.getter()
{
  return Apple_Parsec_Siri_V2alpha_StartRequestBuilderParams.utterance.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_UnlockDeviceBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_UnlockDeviceBuilderParams();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.avoidTolls.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.avoidTolls.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.itemSource.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.itemSource.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.searchItems.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.searchItems.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.showTraffic.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.showTraffic.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.DirectionType();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.avoidHighways.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.avoidHighways.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.directionType.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.directionType.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.hasItemSource.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.hasItemSource.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.hasSearchItems.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.hasSearchItems.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.showDirections.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.showDirections.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.itemDestination.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.itemDestination.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.isChainResultSet.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.isChainResultSet.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.hasItemDestination.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.hasItemDestination.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.isSearchAlongRoute.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.isSearchAlongRoute.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.shouldSuppressNavigation.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.shouldSuppressNavigation.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.regionOfInterestRadiusInMiles.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.regionOfInterestRadiusInMiles.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.language.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams.language.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowMapPointsBuilderParams();
}

uint64_t Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams.userID.getter()
{
  return Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams.userID.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
}

uint64_t Apple_Parsec_Siri_V2alpha_DisambiguationListComponent.items.getter()
{
  return Apple_Parsec_Siri_V2alpha_DisambiguationListComponent.items.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListComponent()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_DisambiguationListComponent();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowPlaceDetailsBuilderParams.itemIndex.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowPlaceDetailsBuilderParams.itemIndex.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowPlaceDetailsBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_ShowPlaceDetailsBuilderParams();
}

uint64_t Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestionCandidate.utterance.getter()
{
  return Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestionCandidate.utterance.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestionCandidate()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestionCandidate();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams.extSessionGuid.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams.extSessionGuid.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams.extSessionGuidCreatedTimestamp.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams.extSessionGuidCreatedTimestamp.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams.placeData.getter()
{
  return Apple_Parsec_Siri_V2alpha_ShowLocalSearchResultBuilderParams.placeData.getter();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_UnlockDeviceWithWatchBuilderParams()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_UnlockDeviceWithWatchBuilderParams();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType()
{
  return type metadata accessor for Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.SourceType();
}

uint64_t Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.sourceType.getter()
{
  return Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.sourceType.getter();
}

uint64_t Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.location.getter()
{
  return Apple_Parsec_Siri_V2alpha_RecordLocationActivityBuilderParams.location.getter();
}

uint64_t SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)()
{
  return SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
}

uint64_t type metadata accessor for SimpleOutputFlowAsync()
{
  return type metadata accessor for SimpleOutputFlowAsync();
}

uint64_t CompositionSearchFlow.findFlowForPommesResponse(_:)()
{
  return CompositionSearchFlow.findFlowForPommesResponse(_:)();
}

uint64_t SimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)()
{
  return SimpleYesNoPromptFlowStrategy.init(baseManifest:responseGenerator:rejectionOutputProducer:cancellationOutputProducer:promptPatternExecutionProducer:)();
}

uint64_t type metadata accessor for SimpleYesNoPromptFlowStrategy()
{
  return type metadata accessor for SimpleYesNoPromptFlowStrategy();
}

uint64_t PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)()
{
  return PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)();
}

uint64_t type metadata accessor for AnyFlow()
{
  return type metadata accessor for AnyFlow();
}

uint64_t GuardFlowResult.description.getter()
{
  return GuardFlowResult.description.getter();
}

uint64_t static PromptFlowProviderType.continuation<A>(_:)()
{
  return static PromptFlowProviderType.continuation<A>(_:)();
}

uint64_t PatternFlowProvider.init(outputPublisher:responseGenerator:)()
{
  return PatternFlowProvider.init(outputPublisher:responseGenerator:)();
}

uint64_t type metadata accessor for PatternFlowProvider()
{
  return type metadata accessor for PatternFlowProvider();
}

uint64_t dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)()
{
  return dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)();
}

uint64_t dispatch thunk of PatternFlowProviding.makeResponseFlowWithContinuationPrompt<A>(strategy:shouldContinueForResponse:)()
{
  return dispatch thunk of PatternFlowProviding.makeResponseFlowWithContinuationPrompt<A>(strategy:shouldContinueForResponse:)();
}

uint64_t ResultSetFlowProvider.makeNarrowingPromptFlowIfNeeded()()
{
  return ResultSetFlowProvider.makeNarrowingPromptFlowIfNeeded()();
}

uint64_t dispatch thunk of SiriSuggestionsBrokerProvider.getBrokerInstance()()
{
  return dispatch thunk of SiriSuggestionsBrokerProvider.getBrokerInstance()();
}

uint64_t static SiriSuggestionsBrokerProvider.instance.getter()
{
  return static SiriSuggestionsBrokerProvider.instance.getter();
}

uint64_t type metadata accessor for SiriSuggestionsBrokerProvider()
{
  return type metadata accessor for SiriSuggestionsBrokerProvider();
}

uint64_t dispatch thunk of Flow.on(input:)()
{
  return dispatch thunk of Flow.on(input:)();
}

uint64_t Flow.eraseToAnyFlow()()
{
  return Flow.eraseToAnyFlow()();
}

uint64_t Flow.eraseToAnyValueFlow()()
{
  return Flow.eraseToAnyValueFlow()();
}

uint64_t Flow.deferToExecuteAsync(_:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t static FlowSearchResult.flow(_:)()
{
  return static FlowSearchResult.flow(_:)();
}

uint64_t type metadata accessor for FlowUnhandledReason()
{
  return type metadata accessor for FlowUnhandledReason();
}

Swift::Void __swiftcall FlowPlugin.warmup(refId:)(Swift::String refId)
{
}

Swift::Void __swiftcall FlowPlugin.warmup()()
{
}

uint64_t static FlowLocator.findFlow(forInvocation:)()
{
  return static FlowLocator.findFlow(forInvocation:)();
}

uint64_t SiriLocationAccessGuardFlow.__allocating_init(needsPreciseLocation:strategy:)()
{
  return SiriLocationAccessGuardFlow.__allocating_init(needsPreciseLocation:strategy:)();
}

uint64_t dispatch thunk of SiriLocationAccessGuardFlow.failureReason.getter()
{
  return dispatch thunk of SiriLocationAccessGuardFlow.failureReason.getter();
}

uint64_t type metadata accessor for SiriLocationAccessGuardFlow()
{
  return type metadata accessor for SiriLocationAccessGuardFlow();
}

uint64_t static SiriKitEventSender.current.getter()
{
  return static SiriKitEventSender.current.getter();
}

uint64_t dispatch thunk of SiriKitEventSending.send(_:)()
{
  return dispatch thunk of SiriKitEventSending.send(_:)();
}

uint64_t type metadata accessor for SiriKitReliabilityCodes()
{
  return type metadata accessor for SiriKitReliabilityCodes();
}

uint64_t static SiriKitDirectInvocationPayloads.cancel.getter()
{
  return static SiriKitDirectInvocationPayloads.cancel.getter();
}

uint64_t static SiriKitDirectInvocationPayloads.reject.getter()
{
  return static SiriKitDirectInvocationPayloads.reject.getter();
}

uint64_t static SiriKitDirectInvocationPayloads.confirm.getter()
{
  return static SiriKitDirectInvocationPayloads.confirm.getter();
}

uint64_t dispatch thunk of SiriKitEvent.SiriKitEventBuilder.domainContext.setter()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.domainContext.setter();
}

uint64_t dispatch thunk of SiriKitEvent.SiriKitEventBuilder.parameterName.setter()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.parameterName.setter();
}

uint64_t dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter();
}

uint64_t dispatch thunk of SiriKitEvent.SiriKitEventBuilder.attribute.setter()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.attribute.setter();
}

uint64_t SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)()
{
  return SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
}

uint64_t SiriKitEvent.__allocating_init(taskType:tierOneFlowEvent:_:)()
{
  return SiriKitEvent.__allocating_init(taskType:tierOneFlowEvent:_:)();
}

uint64_t SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)()
{
  return SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)();
}

uint64_t type metadata accessor for SiriKitEvent()
{
  return type metadata accessor for SiriKitEvent();
}

uint64_t static SiriKitLifecycle._logCrashToEventBus(_:)()
{
  return static SiriKitLifecycle._logCrashToEventBus(_:)();
}

uint64_t static AceService.currentAsync.getter()
{
  return static AceService.currentAsync.getter();
}

uint64_t static PromptType.continuation.getter()
{
  return static PromptType.continuation.getter();
}

uint64_t type metadata accessor for PromptType()
{
  return type metadata accessor for PromptType();
}

uint64_t dispatch thunk of DeviceState.isEyesFree.getter()
{
  return dispatch thunk of DeviceState.isEyesFree.getter();
}

uint64_t dispatch thunk of DeviceState.inputOrigin.getter()
{
  return dispatch thunk of DeviceState.inputOrigin.getter();
}

uint64_t dispatch thunk of DeviceState.isTextToSpeechEnabled.getter()
{
  return dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
}

uint64_t dispatch thunk of DeviceState.isVoiceTriggerEnabled.getter()
{
  return dispatch thunk of DeviceState.isVoiceTriggerEnabled.getter();
}

uint64_t static DialogPhase.completion.getter()
{
  return static DialogPhase.completion.getter();
}

uint64_t static DialogPhase.confirmation.getter()
{
  return static DialogPhase.confirmation.getter();
}

uint64_t static DialogPhase.clarification.getter()
{
  return static DialogPhase.clarification.getter();
}

uint64_t static DialogPhase.summary.getter()
{
  return static DialogPhase.summary.getter();
}

uint64_t DialogPhase.aceValue.getter()
{
  return DialogPhase.aceValue.getter();
}

uint64_t type metadata accessor for DialogPhase()
{
  return type metadata accessor for DialogPhase();
}

uint64_t type metadata accessor for ActivityType()
{
  return type metadata accessor for ActivityType();
}

uint64_t PluginAction.init(flowHandlerId:input:)()
{
  return PluginAction.init(flowHandlerId:input:)();
}

uint64_t type metadata accessor for PluginAction()
{
  return type metadata accessor for PluginAction();
}

uint64_t type metadata accessor for NLRouterParse.InputCandidate()
{
  return type metadata accessor for NLRouterParse.InputCandidate();
}

uint64_t NLRouterParse.init(nlRoutingDecision:input:usoParse:pommesResponse:)()
{
  return NLRouterParse.init(nlRoutingDecision:input:usoParse:pommesResponse:)();
}

uint64_t static ActionForInput.cancel()()
{
  return static ActionForInput.cancel()();
}

uint64_t static ActionForInput.handle()()
{
  return static ActionForInput.handle()();
}

uint64_t static ActionForInput.ignore()()
{
  return static ActionForInput.ignore()();
}

uint64_t IdentifiedUser.sharedUserId.getter()
{
  return IdentifiedUser.sharedUserId.getter();
}

uint64_t type metadata accessor for IdentifiedUser()
{
  return type metadata accessor for IdentifiedUser();
}

uint64_t static PrescribedTool.generateKnowledgeResponseIntentTool.getter()
{
  return static PrescribedTool.generateKnowledgeResponseIntentTool.getter();
}

uint64_t type metadata accessor for PrescribedTool()
{
  return type metadata accessor for PrescribedTool();
}

uint64_t static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeUtteranceView(for:canUseServerTTS:listenAfterSpeaking:printSupportingDialogInDisplayModes:forcePrintDialog:containsVisual:responseMode:dialogCategory:)()
{
  return static AceOutputHelper.makeUtteranceView(for:canUseServerTTS:listenAfterSpeaking:printSupportingDialogInDisplayModes:forcePrintDialog:containsVisual:responseMode:dialogCategory:)();
}

uint64_t static ExecuteResponse.ongoing(requireInput:)()
{
  return static ExecuteResponse.ongoing(requireInput:)();
}

uint64_t static ExecuteResponse.ongoing<A>(next:childCompletion:)()
{
  return static ExecuteResponse.ongoing<A>(next:childCompletion:)();
}

uint64_t static ExecuteResponse.ongoing<A>(next:)()
{
  return static ExecuteResponse.ongoing<A>(next:)();
}

uint64_t static ExecuteResponse.ongoing(next:)()
{
  return static ExecuteResponse.ongoing(next:)();
}

uint64_t static ExecuteResponse.complete<A>(next:)()
{
  return static ExecuteResponse.complete<A>(next:)();
}

uint64_t static ExecuteResponse.complete(next:)()
{
  return static ExecuteResponse.complete(next:)();
}

uint64_t static ExecuteResponse.complete()()
{
  return static ExecuteResponse.complete()();
}

uint64_t static ExecuteResponse.redirect(nextPluginAction:)()
{
  return static ExecuteResponse.redirect(nextPluginAction:)();
}

uint64_t static ExecuteResponse.unhandled(reason:)()
{
  return static ExecuteResponse.unhandled(reason:)();
}

uint64_t type metadata accessor for ExecuteResponse()
{
  return type metadata accessor for ExecuteResponse();
}

uint64_t NLContextUpdate.rrEntities.getter()
{
  return NLContextUpdate.rrEntities.getter();
}

uint64_t NLContextUpdate.rrEntities.setter()
{
  return NLContextUpdate.rrEntities.setter();
}

uint64_t NLContextUpdate.pommesContext.getter()
{
  return NLContextUpdate.pommesContext.getter();
}

uint64_t NLContextUpdate.pommesContext.setter()
{
  return NLContextUpdate.pommesContext.setter();
}

uint64_t NLContextUpdate.nluSystemDialogActs.setter()
{
  return NLContextUpdate.nluSystemDialogActs.setter();
}

uint64_t NLContextUpdate.weightedPromptStrict.setter()
{
  return NLContextUpdate.weightedPromptStrict.setter();
}

uint64_t NLContextUpdate.weightedPromptAbortValues.setter()
{
  return NLContextUpdate.weightedPromptAbortValues.setter();
}

uint64_t NLContextUpdate.pegasusConversationContext.setter()
{
  return NLContextUpdate.pegasusConversationContext.setter();
}

uint64_t NLContextUpdate.weightedPromptTargetDomain.setter()
{
  return NLContextUpdate.weightedPromptTargetDomain.setter();
}

uint64_t NLContextUpdate.weightedPromptResponseOptions.setter()
{
  return NLContextUpdate.weightedPromptResponseOptions.setter();
}

uint64_t NLContextUpdate.weightedPromptResponseTargets.setter()
{
  return NLContextUpdate.weightedPromptResponseTargets.setter();
}

uint64_t NLContextUpdate.init()()
{
  return NLContextUpdate.init()();
}

uint64_t type metadata accessor for NLContextUpdate()
{
  return type metadata accessor for NLContextUpdate();
}

uint64_t ResponseFactory.init()()
{
  return ResponseFactory.init()();
}

uint64_t type metadata accessor for ResponseFactory()
{
  return type metadata accessor for ResponseFactory();
}

uint64_t type metadata accessor for TemplatingResult()
{
  return type metadata accessor for TemplatingResult();
}

uint64_t type metadata accessor for ConfirmationResponse()
{
  return type metadata accessor for ConfirmationResponse();
}

uint64_t SuggestionContextData.init(dialogPhase:hasAdditionalCommands:patternId:)()
{
  return SuggestionContextData.init(dialogPhase:hasAdditionalCommands:patternId:)();
}

uint64_t type metadata accessor for SuggestionContextData()
{
  return type metadata accessor for SuggestionContextData();
}

uint64_t static SystemDialogActHelper.systemAskedUserToRepeat()()
{
  return static SystemDialogActHelper.systemAskedUserToRepeat()();
}

uint64_t dispatch thunk of AceServiceInvokerAsync.currentStartRequestId()()
{
  return dispatch thunk of AceServiceInvokerAsync.currentStartRequestId()();
}

uint64_t AceServiceInvokerAsync.submitAndForget(_:)()
{
  return AceServiceInvokerAsync.submitAndForget(_:)();
}

uint64_t static OutputPublisherFactory.makeOutputPublisherAsync()()
{
  return static OutputPublisherFactory.makeOutputPublisherAsync()();
}

uint64_t WindowingConfiguration.init(promptFlowProviderType:padding:windowSizeOverride:)()
{
  return WindowingConfiguration.init(promptFlowProviderType:padding:windowSizeOverride:)();
}

uint64_t OutputGenerationManifest.dialogPhase.getter()
{
  return OutputGenerationManifest.dialogPhase.getter();
}

uint64_t OutputGenerationManifest.init(dialogPhase:_:)()
{
  return OutputGenerationManifest.init(dialogPhase:_:)();
}

uint64_t OutputGenerationManifest.responseViewId.setter()
{
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t OutputGenerationManifest.canUseServerTTS.setter()
{
  return OutputGenerationManifest.canUseServerTTS.setter();
}

uint64_t OutputGenerationManifest.nlContextUpdate.getter()
{
  return OutputGenerationManifest.nlContextUpdate.getter();
}

uint64_t OutputGenerationManifest.nlContextUpdate.setter()
{
  return OutputGenerationManifest.nlContextUpdate.setter();
}

uint64_t OutputGenerationManifest.listenAfterSpeaking.setter()
{
  return OutputGenerationManifest.listenAfterSpeaking.setter();
}

uint64_t OutputGenerationManifest.printSupportingDialogInDisplayModes.setter()
{
  return OutputGenerationManifest.printSupportingDialogInDisplayModes.setter();
}

uint64_t type metadata accessor for OutputGenerationManifest()
{
  return type metadata accessor for OutputGenerationManifest();
}

uint64_t ExternalActivationRequest.init(requestInfo:flowActivity:)()
{
  return ExternalActivationRequest.init(requestInfo:flowActivity:)();
}

uint64_t type metadata accessor for ExternalActivationRequest()
{
  return type metadata accessor for ExternalActivationRequest();
}

uint64_t dispatch thunk of NLRoutingDecisionProvider.genAIFallbackSuppressReason.getter()
{
  return dispatch thunk of NLRoutingDecisionProvider.genAIFallbackSuppressReason.getter();
}

uint64_t static CompositionResolutionError.== infix(_:_:)()
{
  return static CompositionResolutionError.== infix(_:_:)();
}

uint64_t type metadata accessor for CompositionResolutionError()
{
  return type metadata accessor for CompositionResolutionError();
}

uint64_t LocationAccessFailureReason.debugDescription.getter()
{
  return LocationAccessFailureReason.debugDescription.getter();
}

uint64_t type metadata accessor for LocationAccessFailureReason()
{
  return type metadata accessor for LocationAccessFailureReason();
}

uint64_t type metadata accessor for AppResolutionStrategyHelpers()
{
  return type metadata accessor for AppResolutionStrategyHelpers();
}

uint64_t WindowedPaginationParameters.isNextWindowLastWindow.setter()
{
  return WindowedPaginationParameters.isNextWindowLastWindow.setter();
}

uint64_t WindowedPaginationParameters.init(windowSize:_:)()
{
  return WindowedPaginationParameters.init(windowSize:_:)();
}

uint64_t WindowedPaginationParameters.isConclusion.setter()
{
  return WindowedPaginationParameters.isConclusion.setter();
}

uint64_t WindowedPaginationParameters.isLastWindow.setter()
{
  return WindowedPaginationParameters.isLastWindow.setter();
}

uint64_t WindowedPaginationParameters.isFirstWindow.setter()
{
  return WindowedPaginationParameters.isFirstWindow.setter();
}

uint64_t WindowedPaginationParameters.asCATParameters()()
{
  return WindowedPaginationParameters.asCATParameters()();
}

uint64_t WindowedPaginationParameters.nextWindowItemCount.setter()
{
  return WindowedPaginationParameters.nextWindowItemCount.setter();
}

uint64_t type metadata accessor for WindowedPaginationParameters()
{
  return type metadata accessor for WindowedPaginationParameters();
}

uint64_t SimpleConfirmationResponseProvider.init(_:)()
{
  return SimpleConfirmationResponseProvider.init(_:)();
}

uint64_t Input.description.getter()
{
  return Input.description.getter();
}

uint64_t Input.parse.getter()
{
  return Input.parse.getter();
}

uint64_t Input.init(parse:)()
{
  return Input.init(parse:)();
}

uint64_t type metadata accessor for Input()
{
  return type metadata accessor for Input();
}

uint64_t Parse.PegasusResult.init(pegasusResponse:)()
{
  return Parse.PegasusResult.init(pegasusResponse:)();
}

uint64_t Parse.PegasusResult.response.getter()
{
  return Parse.PegasusResult.response.getter();
}

uint64_t type metadata accessor for Parse.PegasusResult()
{
  return type metadata accessor for Parse.PegasusResult();
}

uint64_t Parse.DirectInvocation.init(identifier:userData:)()
{
  return Parse.DirectInvocation.init(identifier:userData:)();
}

uint64_t Parse.DirectInvocation.identifier.getter()
{
  return Parse.DirectInvocation.identifier.getter();
}

uint64_t Parse.DirectInvocation.userData.getter()
{
  return Parse.DirectInvocation.userData.getter();
}

uint64_t type metadata accessor for Parse.DirectInvocation()
{
  return type metadata accessor for Parse.DirectInvocation();
}

uint64_t type metadata accessor for Parse()
{
  return type metadata accessor for Parse();
}

uint64_t static Device.current.getter()
{
  return static Device.current.getter();
}

uint64_t HintsUI.supportingCommands.getter()
{
  return HintsUI.supportingCommands.getter();
}

uint64_t HintsUI.snippet.getter()
{
  return HintsUI.snippet.getter();
}

uint64_t type metadata accessor for HintsUI()
{
  return type metadata accessor for HintsUI();
}

uint64_t static USOParse.== infix(_:_:)()
{
  return static USOParse.== infix(_:_:)();
}

uint64_t USOParse.userParse.getter()
{
  return USOParse.userParse.getter();
}

uint64_t type metadata accessor for USOParse()
{
  return type metadata accessor for USOParse();
}

uint64_t AceOutput.init(commands:flowActivity:nlContextUpdate:)()
{
  return AceOutput.init(commands:flowActivity:nlContextUpdate:)();
}

uint64_t AceOutput.init(commands:flowActivity:)()
{
  return AceOutput.init(commands:flowActivity:)();
}

uint64_t type metadata accessor for AceOutput()
{
  return type metadata accessor for AceOutput();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier()
{
  return type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
}

uint64_t type metadata accessor for Siri_Nlu_External_Parser.AlgorithmType()
{
  return type metadata accessor for Siri_Nlu_External_Parser.AlgorithmType();
}

uint64_t Siri_Nlu_External_Parser.parserID.setter()
{
  return Siri_Nlu_External_Parser.parserID.setter();
}

uint64_t Siri_Nlu_External_Parser.algorithm.setter()
{
  return Siri_Nlu_External_Parser.algorithm.setter();
}

uint64_t type metadata accessor for Siri_Nlu_External_Parser()
{
  return type metadata accessor for Siri_Nlu_External_Parser();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoGraph()
{
  return type metadata accessor for Siri_Nlu_External_UsoGraph();
}

uint64_t Siri_Nlu_External_UserParse.probability.setter()
{
  return Siri_Nlu_External_UserParse.probability.setter();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.getter()
{
  return Siri_Nlu_External_UserParse.userDialogActs.getter();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.setter()
{
  return Siri_Nlu_External_UserParse.userDialogActs.setter();
}

uint64_t Siri_Nlu_External_UserParse.comparableProbability.setter()
{
  return Siri_Nlu_External_UserParse.comparableProbability.setter();
}

uint64_t Siri_Nlu_External_UserParse.parser.getter()
{
  return Siri_Nlu_External_UserParse.parser.getter();
}

uint64_t Siri_Nlu_External_UserParse.parser.setter()
{
  return Siri_Nlu_External_UserParse.parser.setter();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserParse()
{
  return type metadata accessor for Siri_Nlu_External_UserParse();
}

uint64_t Siri_Nlu_External_SystemOffered.offeredAct.setter()
{
  return Siri_Nlu_External_SystemOffered.offeredAct.setter();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemOffered()
{
  return type metadata accessor for Siri_Nlu_External_SystemOffered();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasAccepted.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasAccepted.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasRejected.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasRejected.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasCancelled.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.getter()
{
  return Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.setter()
{
  return Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
}

uint64_t Siri_Nlu_External_UserDialogAct.wantedToProceed.getter()
{
  return Siri_Nlu_External_UserDialogAct.wantedToProceed.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.wantedToProceed.setter()
{
  return Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
}

uint64_t Siri_Nlu_External_UserDialogAct.delegated.setter()
{
  return Siri_Nlu_External_UserDialogAct.delegated.setter();
}

uint64_t Siri_Nlu_External_UserDialogAct.init()()
{
  return Siri_Nlu_External_UserDialogAct.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserDialogAct()
{
  return type metadata accessor for Siri_Nlu_External_UserDialogAct();
}

uint64_t Siri_Nlu_External_UserStatedTask.task.getter()
{
  return Siri_Nlu_External_UserStatedTask.task.getter();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserStatedTask()
{
  return type metadata accessor for Siri_Nlu_External_UserStatedTask();
}

uint64_t Siri_Nlu_External_SystemDialogAct.gaveOptions.setter()
{
  return Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
}

uint64_t Siri_Nlu_External_SystemDialogAct.offered.setter()
{
  return Siri_Nlu_External_SystemDialogAct.offered.setter();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemDialogAct()
{
  return type metadata accessor for Siri_Nlu_External_SystemDialogAct();
}

uint64_t Siri_Nlu_External_SystemGaveOptions.choices.setter()
{
  return Siri_Nlu_External_SystemGaveOptions.choices.setter();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemGaveOptions()
{
  return type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
}

uint64_t Siri_Nlu_External_UserWantedToProceed.reference.setter()
{
  return Siri_Nlu_External_UserWantedToProceed.reference.setter();
}

uint64_t Siri_Nlu_External_UserWantedToProceed.init()()
{
  return Siri_Nlu_External_UserWantedToProceed.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserWantedToProceed()
{
  return type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
}

uint64_t Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.setter()
{
  return Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.setter();
}

uint64_t Siri_Nlu_External_DelegatedUserDialogAct.init()()
{
  return Siri_Nlu_External_DelegatedUserDialogAct.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct()
{
  return type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
}

uint64_t static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)()
{
  return static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
}

uint64_t static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)()
{
  return static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
}

uint64_t static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)()
{
  return static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
}

uint64_t static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)()
{
  return static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
}

uint64_t dispatch thunk of CodeGenListEntry.entry.getter()
{
  return dispatch thunk of CodeGenListEntry.entry.getter();
}

uint64_t type metadata accessor for UsoBuilderOptions()
{
  return type metadata accessor for UsoBuilderOptions();
}

uint64_t static UsoConversionUtils.convertGraphToTasks(graph:)()
{
  return static UsoConversionUtils.convertGraphToTasks(graph:)();
}

uint64_t static UsoConversionUtils.extractFirstEntityFromGraph(graph:)()
{
  return static UsoConversionUtils.extractFirstEntityFromGraph(graph:)();
}

uint64_t dispatch thunk of UsoEntity_common_App.name.getter()
{
  return dispatch thunk of UsoEntity_common_App.name.getter();
}

uint64_t type metadata accessor for UsoTask_open_common_App()
{
  return type metadata accessor for UsoTask_open_common_App();
}

uint64_t static UsoTask_CodegenConverter.convert(task:)()
{
  return static UsoTask_CodegenConverter.convert(task:)();
}

uint64_t static UsoEntity_CodeGenConverter.convert(entity:)()
{
  return static UsoEntity_CodeGenConverter.convert(entity:)();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Reference.reference.getter()
{
  return dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setName(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_App.setName(value:)();
}

uint64_t UsoEntityBuilder_common_App.init()()
{
  return UsoEntityBuilder_common_App.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_App()
{
  return type metadata accessor for UsoEntityBuilder_common_App();
}

uint64_t dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter()
{
  return dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter();
}

uint64_t dispatch thunk of UsoEntity_common_SportsItem.name.getter()
{
  return dispatch thunk of UsoEntity_common_SportsItem.name.getter();
}

uint64_t dispatch thunk of UsoEntity_common_SportsItem.type.getter()
{
  return dispatch thunk of UsoEntity_common_SportsItem.type.getter();
}

uint64_t type metadata accessor for UsoEntity_common_SportsItem()
{
  return type metadata accessor for UsoEntity_common_SportsItem();
}

uint64_t type metadata accessor for UsoTask_authorise_common_App()
{
  return type metadata accessor for UsoTask_authorise_common_App();
}

uint64_t dispatch thunk of UsoEntity_common_SportsItemType.name.getter()
{
  return dispatch thunk of UsoEntity_common_SportsItemType.name.getter();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter();
}

uint64_t UsoTaskBuilder_authorise_common_App.init()()
{
  return UsoTaskBuilder_authorise_common_App.init()();
}

uint64_t type metadata accessor for UsoTaskBuilder_authorise_common_App()
{
  return type metadata accessor for UsoTaskBuilder_authorise_common_App();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_ReferenceControl.setReference(value:)()
{
  return dispatch thunk of Uso_VerbTemplateBuilder_ReferenceControl.setReference(value:)();
}

uint64_t UsoEntity.valueTypeString.getter()
{
  return UsoEntity.valueTypeString.getter();
}

uint64_t SportsItem.athleteQId.setter()
{
  return SportsItem.athleteQId.setter();
}

uint64_t static SportsItem.partiallyEqual(lhs:rhs:)()
{
  return static SportsItem.partiallyEqual(lhs:rhs:)();
}

uint64_t SportsItem.team.setter()
{
  return SportsItem.team.setter();
}

uint64_t SportsItem.init(sport:league:team:athlete:sportQId:leagueQId:teamQId:athleteQId:)()
{
  return SportsItem.init(sport:league:team:athlete:sportQId:leagueQId:teamQId:athleteQId:)();
}

uint64_t SportsItem.sport.setter()
{
  return SportsItem.sport.setter();
}

uint64_t SportsItem.league.setter()
{
  return SportsItem.league.setter();
}

uint64_t SportsItem.athlete.setter()
{
  return SportsItem.athlete.setter();
}

uint64_t SportsItem.teamQId.setter()
{
  return SportsItem.teamQId.setter();
}

uint64_t SportsItem.sportQId.setter()
{
  return SportsItem.sportQId.setter();
}

uint64_t SportsItem.leagueQId.setter()
{
  return SportsItem.leagueQId.setter();
}

uint64_t type metadata accessor for SportsItem()
{
  return type metadata accessor for SportsItem();
}

uint64_t SportsResolver.init()()
{
  return SportsResolver.init()();
}

uint64_t type metadata accessor for SportsResolver()
{
  return type metadata accessor for SportsResolver();
}

uint64_t type metadata accessor for PersonalizationLevel()
{
  return type metadata accessor for PersonalizationLevel();
}

uint64_t SportsResolverConfig.init(intentTypeName:bundleId:)()
{
  return SportsResolverConfig.init(intentTypeName:bundleId:)();
}

uint64_t type metadata accessor for SportsResolverConfig()
{
  return type metadata accessor for SportsResolverConfig();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SportsResolverMetrics.logSportsMetric()()
{
}

uint64_t SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)()
{
  return SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)();
}

uint64_t type metadata accessor for SportsResolverMetrics()
{
  return type metadata accessor for SportsResolverMetrics();
}

uint64_t SportsPersonalizationEntity.init(sportsItem:personalizationLevel:)()
{
  return SportsPersonalizationEntity.init(sportsItem:personalizationLevel:)();
}

uint64_t SportsPersonalizationEntity.sportsItem.getter()
{
  return SportsPersonalizationEntity.sportsItem.getter();
}

uint64_t type metadata accessor for SportsPersonalizationEntity()
{
  return type metadata accessor for SportsPersonalizationEntity();
}

uint64_t SiriEnvironment.nlRoutingDecision.getter()
{
  return SiriEnvironment.nlRoutingDecision.getter();
}

uint64_t SiriEnvironment.currentRequest.getter()
{
  return SiriEnvironment.currentRequest.getter();
}

uint64_t SiriEnvironment.currentDevice.getter()
{
  return SiriEnvironment.currentDevice.getter();
}

uint64_t static SiriEnvironment.forCurrentTask.getter()
{
  return static SiriEnvironment.forCurrentTask.getter();
}

uint64_t static SiriEnvironment.default.getter()
{
  return static SiriEnvironment.default.getter();
}

uint64_t type metadata accessor for SiriEnvironment()
{
  return type metadata accessor for SiriEnvironment();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.modify()
{
  return SiriEnvironmentLocating<>.siriEnvironment.modify();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.getter()
{
  return SiriEnvironmentLocating<>.siriEnvironment.getter();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.setter()
{
  return SiriEnvironmentLocating<>.siriEnvironment.setter();
}

uint64_t AudioSource.aceValue.getter()
{
  return AudioSource.aceValue.getter();
}

uint64_t type metadata accessor for AudioSource()
{
  return type metadata accessor for AudioSource();
}

uint64_t static DeviceClass.== infix(_:_:)()
{
  return static DeviceClass.== infix(_:_:)();
}

uint64_t type metadata accessor for DeviceClass()
{
  return type metadata accessor for DeviceClass();
}

uint64_t type metadata accessor for InputOrigin()
{
  return type metadata accessor for InputOrigin();
}

uint64_t static ResponseMode.displayOnly.getter()
{
  return static ResponseMode.displayOnly.getter();
}

uint64_t static ResponseMode.displayForward.getter()
{
  return static ResponseMode.displayForward.getter();
}

uint64_t ResponseMode.aceValue.getter()
{
  return ResponseMode.aceValue.getter();
}

uint64_t type metadata accessor for ResponseMode()
{
  return type metadata accessor for ResponseMode();
}

uint64_t dispatch thunk of CurrentDevice.deviceClass.getter()
{
  return dispatch thunk of CurrentDevice.deviceClass.getter();
}

uint64_t dispatch thunk of CurrentDevice.restrictions.getter()
{
  return dispatch thunk of CurrentDevice.restrictions.getter();
}

uint64_t dispatch thunk of CurrentDevice.isCarPlay.getter()
{
  return dispatch thunk of CurrentDevice.isCarPlay.getter();
}

uint64_t AudioDestination.aceValue.getter()
{
  return AudioDestination.aceValue.getter();
}

uint64_t type metadata accessor for AudioDestination()
{
  return type metadata accessor for AudioDestination();
}

uint64_t DeviceRestrictions.aceSet.getter()
{
  return DeviceRestrictions.aceSet.getter();
}

uint64_t type metadata accessor for DeviceRestrictions()
{
  return type metadata accessor for DeviceRestrictions();
}

uint64_t type metadata accessor for GenerativeModelsAvailability.Availability()
{
  return type metadata accessor for GenerativeModelsAvailability.Availability();
}

uint64_t GenerativeModelsAvailability.Parameters.init(useCaseIdentifier:)()
{
  return GenerativeModelsAvailability.Parameters.init(useCaseIdentifier:)();
}

uint64_t type metadata accessor for GenerativeModelsAvailability.Parameters()
{
  return type metadata accessor for GenerativeModelsAvailability.Parameters();
}

uint64_t GenerativeModelsAvailability.availability.getter()
{
  return GenerativeModelsAvailability.availability.getter();
}

uint64_t static GenerativeModelsAvailability.current(parameters:)()
{
  return static GenerativeModelsAvailability.current(parameters:)();
}

uint64_t type metadata accessor for GenerativeModelsAvailability()
{
  return type metadata accessor for GenerativeModelsAvailability();
}

uint64_t dispatch thunk of CATGlobals.toDictionary.getter()
{
  return dispatch thunk of CATGlobals.toDictionary.getter();
}

uint64_t static CATGlobals.defaultBuilder(deviceState:)()
{
  return static CATGlobals.defaultBuilder(deviceState:)();
}

uint64_t dispatch thunk of CATGlobals.Builder.build()()
{
  return dispatch thunk of CATGlobals.Builder.build()();
}

uint64_t type metadata accessor for CATGlobals()
{
  return type metadata accessor for CATGlobals();
}

uint64_t CATWrapper.init(templateDir:options:globals:)()
{
  return CATWrapper.init(templateDir:options:globals:)();
}

uint64_t CATWrapper.__allocating_init(options:globals:)()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t CATWrapper.deinit()
{
  return CATWrapper.deinit();
}

uint64_t static CATOption.defaultMode.getter()
{
  return static CATOption.defaultMode.getter();
}

uint64_t type metadata accessor for CATOption()
{
  return type metadata accessor for CATOption();
}

uint64_t type metadata accessor for NLRoutingDecisionMessage.RoutingDecision()
{
  return type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
}

uint64_t type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason()
{
  return type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason();
}

uint64_t AjaxMetadata.init(build:)()
{
  return AjaxMetadata.init(build:)();
}

uint64_t AjaxMetadata.Builder.prescribedAjaxTool.setter()
{
  return AjaxMetadata.Builder.prescribedAjaxTool.setter();
}

uint64_t AjaxMetadata.Builder.queryType.setter()
{
  return AjaxMetadata.Builder.queryType.setter();
}

uint64_t type metadata accessor for AjaxMetadata()
{
  return type metadata accessor for AjaxMetadata();
}

uint64_t type metadata accessor for PrescribedAjaxTool()
{
  return type metadata accessor for PrescribedAjaxTool();
}

uint64_t type metadata accessor for QueryType()
{
  return type metadata accessor for QueryType();
}

uint64_t static SiriSuggestionsAPIClients.get()()
{
  return static SiriSuggestionsAPIClients.get()();
}

uint64_t type metadata accessor for SiriSuggestionsAPIClients()
{
  return type metadata accessor for SiriSuggestionsAPIClients();
}

uint64_t SuggestionsIntent.init(intentName:verb:intentProps:)()
{
  return SuggestionsIntent.init(intentName:verb:intentProps:)();
}

uint64_t type metadata accessor for SuggestionsIntent()
{
  return type metadata accessor for SuggestionsIntent();
}

uint64_t static IntentType.appIntent(_:)()
{
  return static IntentType.appIntent(_:)();
}

uint64_t type metadata accessor for IntentType()
{
  return type metadata accessor for IntentType();
}

uint64_t type metadata accessor for DomainOwner()
{
  return type metadata accessor for DomainOwner();
}

uint64_t DomainOwner.init(_:)()
{
  return DomainOwner.init(_:)();
}

uint64_t Action.init(actionId:params:)()
{
  return Action.init(actionId:params:)();
}

uint64_t type metadata accessor for Action()
{
  return type metadata accessor for Action();
}

uint64_t static Logger.generatorCategory.getter()
{
  return static Logger.generatorCategory.getter();
}

uint64_t CurrentRequest.executionRequestId.getter()
{
  return CurrentRequest.executionRequestId.getter();
}

uint64_t CurrentRequest.audioSource.getter()
{
  return CurrentRequest.audioSource.getter();
}

uint64_t CurrentRequest.responseMode.getter()
{
  return CurrentRequest.responseMode.getter();
}

uint64_t CurrentRequest.multiUserState.getter()
{
  return CurrentRequest.multiUserState.getter();
}

uint64_t CurrentRequest.audioDestination.getter()
{
  return CurrentRequest.audioDestination.getter();
}

uint64_t CurrentRequest.resultCandidateId.getter()
{
  return CurrentRequest.resultCandidateId.getter();
}

uint64_t CurrentRequest.currentDeviceAssistantId.getter()
{
  return CurrentRequest.currentDeviceAssistantId.getter();
}

uint64_t CurrentRequest.sessionId.getter()
{
  return CurrentRequest.sessionId.getter();
}

uint64_t CurrentRequest.utterance.getter()
{
  return CurrentRequest.utterance.getter();
}

uint64_t MultiUserState.isEnabled.getter()
{
  return MultiUserState.isEnabled.getter();
}

uint64_t type metadata accessor for MultiUserState()
{
  return type metadata accessor for MultiUserState();
}

uint64_t type metadata accessor for SearchForSportsIntent()
{
  return type metadata accessor for SearchForSportsIntent();
}

uint64_t type metadata accessor for PommesCandidateId()
{
  return type metadata accessor for PommesCandidateId();
}

uint64_t type metadata accessor for PommesSearchReason()
{
  return type metadata accessor for PommesSearchReason();
}

uint64_t static Google_Protobuf_Any.messageType(forTypeURL:)()
{
  return static Google_Protobuf_Any.messageType(forTypeURL:)();
}

uint64_t Google_Protobuf_Any.value.getter()
{
  return Google_Protobuf_Any.value.getter();
}

uint64_t Google_Protobuf_Any.typeURL.getter()
{
  return Google_Protobuf_Any.typeURL.getter();
}

uint64_t static Google_Protobuf_Any.register(messageType:)()
{
  return static Google_Protobuf_Any.register(messageType:)();
}

uint64_t type metadata accessor for Google_Protobuf_Any()
{
  return type metadata accessor for Google_Protobuf_Any();
}

uint64_t BinaryDecodingOptions.init()()
{
  return BinaryDecodingOptions.init()();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return type metadata accessor for BinaryDecodingOptions();
}

uint64_t Message.init(unpackingAny:extensions:options:)()
{
  return Message.init(unpackingAny:extensions:options:)();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return Message.init(serializedData:extensions:partial:options:)();
}

uint64_t Message.serializedData(partial:)()
{
  return Message.serializedData(partial:)();
}

uint64_t Message.debugDescription.getter()
{
  return Message.debugDescription.getter();
}

Swift::String __swiftcall Message.textFormatString()()
{
  uint64_t v0 = Message.textFormatString()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t static Message.with(_:)()
{
  return static Message.with(_:)();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withIsPushOffRequest(_:)()
{
  return dispatch thunk of PommesSearchRequestXPCBuilder.withIsPushOffRequest(_:)();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withIsEyesFree(_:)()
{
  return dispatch thunk of PommesSearchRequestXPCBuilder.withIsEyesFree(_:)();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withAudioSource(_:)()
{
  return dispatch thunk of PommesSearchRequestXPCBuilder.withAudioSource(_:)();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withIsMultiUser(_:)()
{
  return dispatch thunk of PommesSearchRequestXPCBuilder.withIsMultiUser(_:)();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withResponseMode(_:)()
{
  return dispatch thunk of PommesSearchRequestXPCBuilder.withResponseMode(_:)();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withAudioDestination(_:)()
{
  return dispatch thunk of PommesSearchRequestXPCBuilder.withAudioDestination(_:)();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withDeviceRestrictions(_:)()
{
  return dispatch thunk of PommesSearchRequestXPCBuilder.withDeviceRestrictions(_:)();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)()
{
  return dispatch thunk of PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withIsTextToSpeechEnabled(_:)()
{
  return dispatch thunk of PommesSearchRequestXPCBuilder.withIsTextToSpeechEnabled(_:)();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withIsTriggerlessFollowup(_:)()
{
  return dispatch thunk of PommesSearchRequestXPCBuilder.withIsTriggerlessFollowup(_:)();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withIsVoiceTriggerEnabled(_:)()
{
  return dispatch thunk of PommesSearchRequestXPCBuilder.withIsVoiceTriggerEnabled(_:)();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.build()()
{
  return dispatch thunk of PommesSearchRequestXPCBuilder.build()();
}

uint64_t PommesSearchRequestXPCBuilder.init(domain:assistantId:requestId:parseState:utterance:)()
{
  return PommesSearchRequestXPCBuilder.init(domain:assistantId:requestId:parseState:utterance:)();
}

uint64_t type metadata accessor for PommesSearchRequestXPCBuilder()
{
  return type metadata accessor for PommesSearchRequestXPCBuilder();
}

uint64_t PommesSearchClient.init()()
{
  return PommesSearchClient.init()();
}

uint64_t type metadata accessor for PommesSearchClient()
{
  return type metadata accessor for PommesSearchClient();
}

uint64_t static PommesSearchRequest.PommesParserId.getter()
{
  return static PommesSearchRequest.PommesParserId.getter();
}

uint64_t dispatch thunk of Experience.renderOptions.getter()
{
  return dispatch thunk of Experience.renderOptions.getter();
}

uint64_t dispatch thunk of Experience.associatedEntities.getter()
{
  return dispatch thunk of Experience.associatedEntities.getter();
}

uint64_t dispatch thunk of Experience.catIds.getter()
{
  return dispatch thunk of Experience.catIds.getter();
}

uint64_t type metadata accessor for LocationError()
{
  return type metadata accessor for LocationError();
}

uint64_t type metadata accessor for ParseStateXPC()
{
  return type metadata accessor for ParseStateXPC();
}

uint64_t PommesContext.exportPegasusConversationContext()()
{
  return PommesContext.exportPegasusConversationContext()();
}

uint64_t PommesContext.listenAfterSpeaking.getter()
{
  return PommesContext.listenAfterSpeaking.getter();
}

uint64_t type metadata accessor for PommesContext.Source()
{
  return type metadata accessor for PommesContext.Source();
}

uint64_t PommesContext.domain.getter()
{
  return PommesContext.domain.getter();
}

uint64_t PommesContext.init(source:domain:listenAfterSpeaking:)()
{
  return PommesContext.init(source:domain:listenAfterSpeaking:)();
}

uint64_t type metadata accessor for PommesContext()
{
  return type metadata accessor for PommesContext();
}

uint64_t static CurareDonation.donateCurareResponseUsedMarker(from:into:)()
{
  return static CurareDonation.donateCurareResponseUsedMarker(from:into:)();
}

uint64_t dispatch thunk of PommesResponse.experiences.getter()
{
  return dispatch thunk of PommesResponse.experiences.getter();
}

uint64_t dispatch thunk of PommesResponse.searchReason.getter()
{
  return dispatch thunk of PommesResponse.searchReason.getter();
}

uint64_t PommesResponse.sharedUserId.getter()
{
  return PommesResponse.sharedUserId.getter();
}

uint64_t dispatch thunk of PommesResponse.taskStepLogs.getter()
{
  return dispatch thunk of PommesResponse.taskStepLogs.getter();
}

uint64_t PommesResponse.pommesContext.getter()
{
  return PommesResponse.pommesContext.getter();
}

uint64_t dispatch thunk of PommesResponse.primaryCatIds()()
{
  return dispatch thunk of PommesResponse.primaryCatIds()();
}

uint64_t PommesResponse.asrRecognition.getter()
{
  return PommesResponse.asrRecognition.getter();
}

uint64_t PommesResponse.pommesCandidateId.getter()
{
  return PommesResponse.pommesCandidateId.getter();
}

uint64_t PommesResponse.metadataDomainName.getter()
{
  return PommesResponse.metadataDomainName.getter();
}

uint64_t PommesResponse.encodedNLUserParses.getter()
{
  return PommesResponse.encodedNLUserParses.getter();
}

uint64_t dispatch thunk of PommesResponse.listenAfterSpeaking.getter()
{
  return dispatch thunk of PommesResponse.listenAfterSpeaking.getter();
}

uint64_t PommesResponse.responseVariantResult.getter()
{
  return PommesResponse.responseVariantResult.getter();
}

uint64_t PommesResponse.encodedNLFallbackParse.getter()
{
  return PommesResponse.encodedNLFallbackParse.getter();
}

uint64_t PommesResponse.searchRequestUtterance.getter()
{
  return PommesResponse.searchRequestUtterance.getter();
}

uint64_t dispatch thunk of PommesResponse.primaryPluginIdentifier()()
{
  return dispatch thunk of PommesResponse.primaryPluginIdentifier()();
}

uint64_t dispatch thunk of PommesResponse.pegasusDomainFlowStepLog.getter()
{
  return dispatch thunk of PommesResponse.pegasusDomainFlowStepLog.getter();
}

uint64_t static PommesResponse.makeDefaultInteractionStream()()
{
  return static PommesResponse.makeDefaultInteractionStream()();
}

uint64_t PommesResponse.isLowConfidenceKnowledgeResult.getter()
{
  return PommesResponse.isLowConfidenceKnowledgeResult.getter();
}

uint64_t dispatch thunk of PommesResponse.pegasusDomainUserSensitiveTier1Log.getter()
{
  return dispatch thunk of PommesResponse.pegasusDomainUserSensitiveTier1Log.getter();
}

uint64_t PommesResponse.requestId.getter()
{
  return PommesResponse.requestId.getter();
}

uint64_t type metadata accessor for PommesResponse()
{
  return type metadata accessor for PommesResponse();
}

uint64_t dispatch thunk of PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:)()
{
  return dispatch thunk of PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:)();
}

uint64_t dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)()
{
  return dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)();
}

uint64_t dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)()
{
  return dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)();
}

uint64_t PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)()
{
  return PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)();
}

uint64_t type metadata accessor for PerformanceUtil.Ticket()
{
  return type metadata accessor for PerformanceUtil.Ticket();
}

uint64_t static PerformanceUtil.shared.getter()
{
  return static PerformanceUtil.shared.getter();
}

uint64_t type metadata accessor for PerformanceUtil()
{
  return type metadata accessor for PerformanceUtil();
}

uint64_t PommesAppStatus.isHidden.getter()
{
  return PommesAppStatus.isHidden.getter();
}

uint64_t PommesAppStatus.isLocked.getter()
{
  return PommesAppStatus.isLocked.getter();
}

uint64_t type metadata accessor for PommesAppStatus()
{
  return type metadata accessor for PommesAppStatus();
}

uint64_t PommesEngagement.init()()
{
  return PommesEngagement.init()();
}

uint64_t type metadata accessor for PommesEngagement()
{
  return type metadata accessor for PommesEngagement();
}

uint64_t GenericExperience.components.getter()
{
  return GenericExperience.components.getter();
}

uint64_t dispatch thunk of GenericExperience.serverSuggestions.getter()
{
  return dispatch thunk of GenericExperience.serverSuggestions.getter();
}

uint64_t type metadata accessor for GenericExperience()
{
  return type metadata accessor for GenericExperience();
}

uint64_t dispatch thunk of PommesAppChecking.appStatus(bundleID:)()
{
  return dispatch thunk of PommesAppChecking.appStatus(bundleID:)();
}

uint64_t PommesLocationInfo.location.getter()
{
  return PommesLocationInfo.location.getter();
}

uint64_t type metadata accessor for PommesLocationInfo()
{
  return type metadata accessor for PommesLocationInfo();
}

uint64_t PhoneCallExperience.phoneCall.getter()
{
  return PhoneCallExperience.phoneCall.getter();
}

uint64_t type metadata accessor for PhoneCallExperience()
{
  return type metadata accessor for PhoneCallExperience();
}

uint64_t type metadata accessor for PommesRenderOptions.PromptType()
{
  return type metadata accessor for PommesRenderOptions.PromptType();
}

uint64_t PommesRenderOptions.promptTypes.getter()
{
  return PommesRenderOptions.promptTypes.getter();
}

uint64_t PommesRenderOptions.switchProfile.getter()
{
  return PommesRenderOptions.switchProfile.getter();
}

uint64_t PommesRenderOptions.isSquawkResponse.getter()
{
  return PommesRenderOptions.isSquawkResponse.getter();
}

uint64_t PommesRenderOptions.isPhoneCallActive.getter()
{
  return PommesRenderOptions.isPhoneCallActive.getter();
}

uint64_t PommesRenderOptions.isImmersiveExperience.getter()
{
  return PommesRenderOptions.isImmersiveExperience.getter();
}

uint64_t PommesRenderOptions.preserveResultSpaceIfPossible.getter()
{
  return PommesRenderOptions.preserveResultSpaceIfPossible.getter();
}

uint64_t PommesRenderOptions.Builder.isImmersiveExperience.setter()
{
  return PommesRenderOptions.Builder.isImmersiveExperience.setter();
}

uint64_t type metadata accessor for PommesRenderOptions()
{
  return type metadata accessor for PommesRenderOptions();
}

uint64_t PommesRenderOptions.init(_:)()
{
  return PommesRenderOptions.init(_:)();
}

uint64_t UtteranceNormalizer.init(locale:)()
{
  return UtteranceNormalizer.init(locale:)();
}

Swift::String __swiftcall UtteranceNormalizer.normalize(_:preserveCase:)(Swift::String _, Swift::Bool preserveCase)
{
  uint64_t v2 = UtteranceNormalizer.normalize(_:preserveCase:)(_._countAndFlagsBits, _._object, preserveCase);
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t type metadata accessor for UtteranceNormalizer()
{
  return type metadata accessor for UtteranceNormalizer();
}

uint64_t PommesLocationManager.fetchLocation()()
{
  return PommesLocationManager.fetchLocation()();
}

uint64_t PommesLocationManager.cachedLocationInfo()()
{
  return PommesLocationManager.cachedLocationInfo()();
}

uint64_t static PommesLocationManager.shared.getter()
{
  return static PommesLocationManager.shared.getter();
}

uint64_t type metadata accessor for PommesLocationManager()
{
  return type metadata accessor for PommesLocationManager();
}

uint64_t PommesSystemAppChecking.init()()
{
  return PommesSystemAppChecking.init()();
}

uint64_t type metadata accessor for PommesSystemAppChecking()
{
  return type metadata accessor for PommesSystemAppChecking();
}

uint64_t dispatch thunk of SportsInferenceQuerying.makeRecommendation(entities:)()
{
  return dispatch thunk of SportsInferenceQuerying.makeRecommendation(entities:)();
}

uint64_t dispatch thunk of PommesServerFallbackDisabling.shouldDisableServerFallbackNL(isDomainDirected:)()
{
  return dispatch thunk of PommesServerFallbackDisabling.shouldDisableServerFallbackNL(isDomainDirected:)();
}

uint64_t type metadata accessor for PommesServerFallbackPreferences()
{
  return type metadata accessor for PommesServerFallbackPreferences();
}

uint64_t PommesServerFallbackPreferences.init(_:)()
{
  return PommesServerFallbackPreferences.init(_:)();
}

uint64_t dispatch thunk of ReferenceResolutionClient.siriMentioned(entities:)()
{
  return dispatch thunk of ReferenceResolutionClient.siriMentioned(entities:)();
}

uint64_t ReferenceResolutionClient.__allocating_init()()
{
  return ReferenceResolutionClient.__allocating_init()();
}

uint64_t type metadata accessor for ReferenceResolutionClient()
{
  return type metadata accessor for ReferenceResolutionClient();
}

uint64_t type metadata accessor for GenerativeAssistantSettingsIntentHelper.RequestType()
{
  return type metadata accessor for GenerativeAssistantSettingsIntentHelper.RequestType();
}

uint64_t type metadata accessor for GenerativeAssistantSettingsIntentHelper.ResponseType()
{
  return type metadata accessor for GenerativeAssistantSettingsIntentHelper.ResponseType();
}

uint64_t static GenerativeAssistantSettingsIntentHelper.responseType(for:isExplicitRequest:sessionId:withTamale:)()
{
  return static GenerativeAssistantSettingsIntentHelper.responseType(for:isExplicitRequest:sessionId:withTamale:)();
}

uint64_t static GenerativeAssistantSettingsUserDefaults.incrementDecline(for:)()
{
  return static GenerativeAssistantSettingsUserDefaults.incrementDecline(for:)();
}

uint64_t type metadata accessor for GenerativeAssistantSettingsUserDefaults()
{
  return type metadata accessor for GenerativeAssistantSettingsUserDefaults();
}

uint64_t type metadata accessor for RequestType()
{
  return type metadata accessor for RequestType();
}

uint64_t os_signpost(_:dso:log:name:signpostID:)()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OSSignpostID.init(log:)()
{
  return OSSignpostID.init(log:)();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return OSSignpostID.rawValue.getter();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t OSSignposter.init(logger:)()
{
  return OSSignposter.init(logger:)();
}

uint64_t OSSignposter.logHandle.getter()
{
  return OSSignposter.logHandle.getter();
}

uint64_t type metadata accessor for OSSignposter()
{
  return type metadata accessor for OSSignposter();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return type metadata accessor for OSSignpostError();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return OSSignpostIntervalState.init(id:isOpen:)();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return type metadata accessor for OSSignpostIntervalState();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t Logger.init(_:)()
{
  return Logger.init(_:)();
}

uint64_t GroupIdentifier.init(id:seq:)()
{
  return GroupIdentifier.init(id:seq:)();
}

uint64_t type metadata accessor for GroupIdentifier()
{
  return type metadata accessor for GroupIdentifier();
}

uint64_t static RREntity.== infix(_:_:)()
{
  return static RREntity.== infix(_:_:)();
}

uint64_t RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)()
{
  return RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
}

uint64_t type metadata accessor for RREntity()
{
  return type metadata accessor for RREntity();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(data:encoding:)()
{
  return String.init(data:encoding:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return String.init<A>(reflecting:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t static TaskPriority.background.getter()
{
  return static TaskPriority.background.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t Collection.first.getter()
{
  return Collection.first.getter();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return static os_signpost_type_t.event.getter();
}

uint64_t SIRINLUSystemDialogAct.toNluSystemDialogAct()()
{
  return SIRINLUSystemDialogAct.toNluSystemDialogAct()();
}

uint64_t INIntent.debugDescriptionLite.getter()
{
  return INIntent.debugDescriptionLite.getter();
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return StringProtocol.trimmingCharacters(in:)();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t StaticString.description.getter()
{
  return StaticString.description.getter();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t AFIsInternalInstall()
{
  return _AFIsInternalInstall();
}

uint64_t AFMontaraRestricted()
{
  return _AFMontaraRestricted();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

void bzero(void *a1, size_t a2)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_asyncLet_begin()
{
  return _swift_asyncLet_begin();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_deletedMethodError()
{
  return _swift_deletedMethodError();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return _swift_dynamicCastObjCProtocolConditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getMetatypeMetadata()
{
  return _swift_getMetatypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout()
{
  return _swift_getTupleTypeLayout();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}